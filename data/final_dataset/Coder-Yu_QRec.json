{"home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.QRec.__init__": [[8, 48], ["util.config.OptionConf", "QRec.QRec.config.contains", "config.contains", "print", "util.config.OptionConf", "QRec.QRec.evaluation.contains", "QRec.QRec.evaluation.contains", "print", "exit", "util.config.OptionConf", "util.io.FileIO.loadRelationship", "float", "util.io.FileIO.loadDataSet", "util.io.FileIO.loadDataSet", "QRec.QRec.evaluation.contains", "util.io.FileIO.loadDataSet", "util.dataSplit.DataSplit.dataSplit", "QRec.QRec.evaluation.contains", "util.io.FileIO.loadDataSet", "QRec.QRec.evaluation.contains", "float", "util.io.FileIO.loadDataSet", "util.io.FileIO.loadUserList"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadRelationship", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadDataSet", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadDataSet", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadDataSet", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.dataSplit.DataSplit.dataSplit", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadDataSet", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadDataSet", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadUserList"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "trainingData", "=", "[", "]", "# training data", "\n", "self", ".", "testData", "=", "[", "]", "# testData", "\n", "self", ".", "relation", "=", "[", "]", "\n", "self", ".", "measure", "=", "[", "]", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "ratingConfig", "=", "OptionConf", "(", "config", "[", "'ratings.setup'", "]", ")", "\n", "if", "self", ".", "config", ".", "contains", "(", "'evaluation.setup'", ")", ":", "\n", "            ", "self", ".", "evaluation", "=", "OptionConf", "(", "config", "[", "'evaluation.setup'", "]", ")", "\n", "binarized", "=", "False", "\n", "bottom", "=", "0", "\n", "if", "self", ".", "evaluation", ".", "contains", "(", "'-b'", ")", ":", "\n", "                ", "binarized", "=", "True", "\n", "bottom", "=", "float", "(", "self", ".", "evaluation", "[", "'-b'", "]", ")", "\n", "", "if", "self", ".", "evaluation", ".", "contains", "(", "'-testSet'", ")", ":", "\n", "#specified testSet", "\n", "                ", "self", ".", "trainingData", "=", "FileIO", ".", "loadDataSet", "(", "config", ",", "config", "[", "'ratings'", "]", ",", "binarized", "=", "binarized", ",", "threshold", "=", "bottom", ")", "\n", "self", ".", "testData", "=", "FileIO", ".", "loadDataSet", "(", "config", ",", "self", ".", "evaluation", "[", "'-testSet'", "]", ",", "bTest", "=", "True", ",", "binarized", "=", "binarized", ",", "threshold", "=", "bottom", ")", "\n", "\n", "", "elif", "self", ".", "evaluation", ".", "contains", "(", "'-ap'", ")", ":", "\n", "#random auto partition", "\n", "                ", "self", ".", "trainingData", "=", "FileIO", ".", "loadDataSet", "(", "config", ",", "config", "[", "'ratings'", "]", ",", "binarized", "=", "binarized", ",", "threshold", "=", "bottom", ")", "\n", "self", ".", "trainingData", ",", "self", ".", "testData", "=", "DataSplit", ".", "dataSplit", "(", "self", ".", "trainingData", ",", "test_ratio", "=", "float", "(", "self", ".", "evaluation", "[", "'-ap'", "]", ")", ",", "binarized", "=", "binarized", ")", "\n", "", "elif", "self", ".", "evaluation", ".", "contains", "(", "'-cv'", ")", ":", "\n", "#cross validation", "\n", "                ", "self", ".", "trainingData", "=", "FileIO", ".", "loadDataSet", "(", "config", ",", "config", "[", "'ratings'", "]", ",", "binarized", "=", "binarized", ",", "threshold", "=", "bottom", ")", "\n", "", "elif", "self", ".", "evaluation", ".", "contains", "(", "'-predict'", ")", ":", "\n", "#cross validation", "\n", "                ", "self", ".", "trainingData", "=", "FileIO", ".", "loadDataSet", "(", "config", ",", "config", "[", "'ratings'", "]", ",", "binarized", "=", "binarized", ",", "threshold", "=", "bottom", ")", "\n", "self", ".", "testData", "=", "FileIO", ".", "loadUserList", "(", "self", ".", "evaluation", "[", "'-predict'", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Wrong configuration of evaluation!'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "if", "config", ".", "contains", "(", "'social'", ")", ":", "\n", "            ", "self", ".", "socialConfig", "=", "OptionConf", "(", "self", ".", "config", "[", "'social.setup'", "]", ")", "\n", "self", ".", "relation", "=", "FileIO", ".", "loadRelationship", "(", "config", ",", "self", ".", "config", "[", "'social'", "]", ")", "\n", "", "print", "(", "'Reading data and preprocessing...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.QRec.execute": [[49, 115], ["QRec.QRec.evaluation.contains", "exec", "int", "mkl.set_num_threads", "multiprocessing.Manager", "multiprocessing.Manager.dict", "QRec.QRec.evaluation.contains", "util.dataSplit.DataSplit.crossValidation", "QRec.QRec.evaluation.contains", "range", "time.time.strftime", "util.io.FileIO.writeFile", "print", "QRec.QRec.config.contains", "eval().execute", "exec", "print", "exit", "max", "QRec.QRec.config.contains", "multiprocessing.Process", "tasks.append", "multiprocessing.Process.start", "len", "range", "res.append", "time.time.localtime", "util.config.OptionConf", "QRec.QRec.evaluation.contains", "multiprocessing.Process.join", "multiprocessing.Process.join", "dict", "range", "res.append", "[].split", "float", "time.time.time", "eval", "mkl.get_max_threads", "str", "str", "eval", "[].split", "str"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.dataSplit.DataSplit.crossValidation", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.writeFile", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.execute", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains"], ["", "def", "execute", "(", "self", ")", ":", "\n", "#import the model module", "\n", "        ", "try", ":", "\n", "            ", "importStr", "=", "'from model.rating.'", "+", "self", ".", "config", "[", "'model.name'", "]", "+", "' import '", "+", "self", ".", "config", "[", "'model.name'", "]", "\n", "exec", "(", "importStr", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "importStr", "=", "'from model.ranking.'", "+", "self", ".", "config", "[", "'model.name'", "]", "+", "' import '", "+", "self", ".", "config", "[", "'model.name'", "]", "\n", "exec", "(", "importStr", ")", "\n", "", "if", "self", ".", "evaluation", ".", "contains", "(", "'-cv'", ")", ":", "\n", "            ", "k", "=", "int", "(", "self", ".", "evaluation", "[", "'-cv'", "]", ")", "\n", "if", "k", "<", "2", "or", "k", ">", "10", ":", "#limit to 2-10 fold cross validation", "\n", "                ", "print", "(", "\"k for cross-validation should not be greater than 10 or less than 2\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "mkl", ".", "set_num_threads", "(", "max", "(", "1", ",", "mkl", ".", "get_max_threads", "(", ")", "//", "k", ")", ")", "\n", "#create the manager for communication among multiple processes", "\n", "manager", "=", "Manager", "(", ")", "\n", "mDict", "=", "manager", ".", "dict", "(", ")", "\n", "i", "=", "1", "\n", "tasks", "=", "[", "]", "\n", "binarized", "=", "False", "\n", "if", "self", ".", "evaluation", ".", "contains", "(", "'-b'", ")", ":", "\n", "                ", "binarized", "=", "True", "\n", "", "for", "train", ",", "test", "in", "DataSplit", ".", "crossValidation", "(", "self", ".", "trainingData", ",", "k", ",", "binarized", "=", "binarized", ")", ":", "\n", "                ", "fold", "=", "'['", "+", "str", "(", "i", ")", "+", "']'", "\n", "if", "self", ".", "config", ".", "contains", "(", "'social'", ")", ":", "\n", "                    ", "recommender", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "\"(self.config,train,test,self.relation,fold)\"", "\n", "", "else", ":", "\n", "                    ", "recommender", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "\"(self.config,train,test,fold)\"", "\n", "#create the process", "\n", "", "p", "=", "Process", "(", "target", "=", "run", ",", "args", "=", "(", "mDict", ",", "eval", "(", "recommender", ")", ",", "i", ")", ")", "\n", "tasks", ".", "append", "(", "p", ")", "\n", "i", "+=", "1", "\n", "#start the processes", "\n", "", "for", "p", "in", "tasks", ":", "\n", "                ", "p", ".", "start", "(", ")", "\n", "if", "not", "self", ".", "evaluation", ".", "contains", "(", "'-p'", ")", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "#wait until all processes are completed", "\n", "", "", "if", "self", ".", "evaluation", ".", "contains", "(", "'-p'", ")", ":", "\n", "                ", "for", "p", "in", "tasks", ":", "\n", "                    ", "p", ".", "join", "(", ")", "\n", "#compute the average error of k-fold cross validation", "\n", "", "", "self", ".", "measure", "=", "[", "dict", "(", "mDict", ")", "[", "i", "]", "for", "i", "in", "range", "(", "1", ",", "k", "+", "1", ")", "]", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "measure", "[", "0", "]", ")", ")", ":", "\n", "                ", "if", "self", ".", "measure", "[", "0", "]", "[", "i", "]", "[", ":", "3", "]", "==", "'Top'", ":", "\n", "                    ", "res", ".", "append", "(", "self", ".", "measure", "[", "0", "]", "[", "i", "]", ")", "\n", "continue", "\n", "", "measure", "=", "self", ".", "measure", "[", "0", "]", "[", "i", "]", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "total", "=", "0", "\n", "for", "j", "in", "range", "(", "k", ")", ":", "\n", "                    ", "total", "+=", "float", "(", "self", ".", "measure", "[", "j", "]", "[", "i", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "", "res", ".", "append", "(", "measure", "+", "':'", "+", "str", "(", "total", "/", "k", ")", "+", "'\\n'", ")", "\n", "#output result", "\n", "", "currentTime", "=", "strftime", "(", "\"%Y-%m-%d %H-%M-%S\"", ",", "localtime", "(", "time", "(", ")", ")", ")", "\n", "outDir", "=", "OptionConf", "(", "self", ".", "config", "[", "'output.setup'", "]", ")", "[", "'-dir'", "]", "\n", "fileName", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "'@'", "+", "currentTime", "+", "'-'", "+", "str", "(", "k", ")", "+", "'-fold-cv'", "+", "'.txt'", "\n", "FileIO", ".", "writeFile", "(", "outDir", ",", "fileName", ",", "res", ")", "\n", "print", "(", "'The result of %d-fold cross validation:\\n%s'", "%", "(", "k", ",", "''", ".", "join", "(", "res", ")", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "contains", "(", "'social'", ")", ":", "\n", "                ", "recommender", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "'(self.config,self.trainingData,self.testData,self.relation)'", "\n", "", "else", ":", "\n", "                ", "recommender", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "'(self.config,self.trainingData,self.testData)'", "\n", "", "eval", "(", "recommender", ")", ".", "execute", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run": [[117, 119], ["algor.execute"], "function", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.execute"], ["", "", "", "def", "run", "(", "measure", ",", "algor", ",", "order", ")", ":", "\n", "    ", "measure", "[", "order", "]", "=", "algor", ".", "execute", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemKNN.ItemKNN.__init__": [[6, 9], ["base.recommender.Recommender.__init__", "util.structure.symmetricMatrix.SymmetricMatrix", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "ItemKNN", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "self", ".", "itemSim", "=", "SymmetricMatrix", "(", "len", "(", "self", ".", "data", ".", "user", ")", ")", "#used to store the similarity among items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemKNN.ItemKNN.readConfiguration": [[10, 14], ["super().readConfiguration", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "ItemKNN", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "self", ".", "sim", "=", "self", ".", "config", "[", "'similarity'", "]", "\n", "self", ".", "neighbors", "=", "int", "(", "self", ".", "config", "[", "'num.neighbors'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemKNN.ItemKNN.printAlgorConfig": [[15, 22], ["super().printAlgorConfig", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "\"show model's configuration\"", "\n", "super", "(", "ItemKNN", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'num.neighbors:'", ",", "self", ".", "config", "[", "'num.neighbors'", "]", ")", "\n", "print", "(", "'similarity:'", ",", "self", ".", "config", "[", "'similarity'", "]", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemKNN.ItemKNN.initModel": [[23, 26], ["ItemKNN.ItemKNN.computeSimilarities"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.computeSimilarities"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "topItems", "=", "{", "}", "\n", "self", ".", "computeSimilarities", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemKNN.ItemKNN.predictForRating": [[27, 52], ["range", "len", "len", "ItemKNN.ItemKNN.data.contains", "ItemKNN.ItemKNN.data.rating", "ItemKNN.ItemKNN.data.containsItem", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.rating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem"], ["", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "#find the closest neighbors of item i", "\n", "        ", "topItems", "=", "self", ".", "topItems", "[", "i", "]", "\n", "itemCount", "=", "self", ".", "neighbors", "\n", "if", "itemCount", ">", "len", "(", "topItems", ")", ":", "\n", "            ", "itemCount", "=", "len", "(", "topItems", ")", "\n", "#predict", "\n", "", "sum", "=", "0", "\n", "denom", "=", "0", "\n", "for", "n", "in", "range", "(", "itemCount", ")", ":", "\n", "            ", "similarItem", "=", "topItems", "[", "n", "]", "[", "0", "]", "\n", "#if user n has rating on item i", "\n", "if", "self", ".", "data", ".", "contains", "(", "u", ",", "similarItem", ")", ":", "\n", "                ", "similarity", "=", "topItems", "[", "n", "]", "[", "1", "]", "\n", "rating", "=", "self", ".", "data", ".", "rating", "(", "u", ",", "similarItem", ")", "\n", "sum", "+=", "similarity", "*", "(", "rating", "-", "self", ".", "data", ".", "itemMeans", "[", "similarItem", "]", ")", "\n", "denom", "+=", "similarity", "\n", "", "", "if", "sum", "==", "0", ":", "\n", "#no items have rating on item i,return the average rating of item i", "\n", "            ", "if", "not", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "# item i has no ratings in the training set", "\n", "                ", "return", "self", ".", "data", ".", "globalMean", "\n", "", "return", "self", ".", "data", ".", "itemMeans", "[", "i", "]", "\n", "", "pred", "=", "self", ".", "data", ".", "itemMeans", "[", "i", "]", "+", "sum", "/", "float", "(", "denom", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemKNN.ItemKNN.computeSimilarities": [[53, 68], ["print", "enumerate", "print", "sorted", "iter", "print", "ItemKNN.ItemKNN.itemSim.contains", "util.qmath.similarity", "ItemKNN.ItemKNN.itemSim.set", "ItemKNN.ItemKNN.itemSim[].items", "len", "ItemKNN.ItemKNN.data.sCol", "ItemKNN.ItemKNN.data.sCol"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.similarity", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sCol", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sCol"], ["", "def", "computeSimilarities", "(", "self", ")", ":", "\n", "        ", "'compute correlation among items'", "\n", "print", "(", "'Computing item similarities...'", ")", "\n", "for", "idx", ",", "i1", "in", "enumerate", "(", "self", ".", "data", ".", "testSet_i", ")", ":", "\n", "\n", "            ", "for", "i2", "in", "self", ".", "data", ".", "item", ":", "\n", "                ", "if", "i1", "!=", "i2", ":", "\n", "                    ", "if", "self", ".", "itemSim", ".", "contains", "(", "i1", ",", "i2", ")", ":", "\n", "                        ", "continue", "\n", "", "sim", "=", "qmath", ".", "similarity", "(", "self", ".", "data", ".", "sCol", "(", "i1", ")", ",", "self", ".", "data", ".", "sCol", "(", "i2", ")", ",", "self", ".", "sim", ")", "\n", "self", ".", "itemSim", ".", "set", "(", "i1", ",", "i2", ",", "sim", ")", "\n", "", "", "self", ".", "topItems", "[", "i1", "]", "=", "sorted", "(", "iter", "(", "self", ".", "itemSim", "[", "i1", "]", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "idx", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'progress:'", ",", "idx", ",", "'/'", ",", "len", "(", "self", ".", "data", ".", "testSet_i", ")", ")", "\n", "", "", "print", "(", "'The item similarities have been calculated.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemKNN.ItemKNN.predictForRanking": [[69, 72], ["print", "exit"], "methods", ["None"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "print", "(", "'Using Memory based algorithms to rank items is extremely time-consuming. So ranking for all items in ItemKNN is not available.'", ")", "\n", "exit", "(", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.RSTE.RSTE.__init__": [[5, 7], ["list", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "list", "(", ")", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "RSTE", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.RSTE.RSTE.readConfiguration": [[8, 12], ["super().readConfiguration", "util.config.OptionConf", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "RSTE", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "alpha", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'RSTE'", "]", ")", "\n", "self", ".", "alpha", "=", "float", "(", "alpha", "[", "'-alpha'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.RSTE.RSTE.printAlgorConfig": [[13, 18], ["super().printAlgorConfig", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "RSTE", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'alpha: %.3f'", "%", "self", ".", "alpha", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.RSTE.RSTE.initModel": [[19, 21], ["super().initModel"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "RSTE", ",", "self", ")", ".", "initModel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.RSTE.RSTE.trainModel": [[22, 40], ["RSTE.RSTE.isConverged", "RSTE.RSTE.predictForRating"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "error", "=", "rating", "-", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", "\n", "# update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "self", ".", "alpha", "*", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "self", ".", "alpha", "*", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "self", ".", "isConverged", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.RSTE.RSTE.predictForRating": [[41, 65], ["RSTE.RSTE.data.containsUser", "RSTE.RSTE.data.containsItem", "RSTE.RSTE.data.getItemId", "RSTE.RSTE.social.getFollowees", "numpy.array", "numpy.array", "numpy.array.sum", "RSTE.RSTE.data.containsUser", "numpy.array.dot", "RSTE.RSTE.P[].dot", "numpy.array.append", "numpy.array.append", "RSTE.RSTE.P[].dot", "RSTE.RSTE.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getItemId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "i", "=", "self", ".", "data", ".", "getItemId", "(", "i", ")", "\n", "fPred", "=", "0", "\n", "relations", "=", "self", ".", "social", ".", "getFollowees", "(", "u", ")", "\n", "weights", "=", "[", "]", "\n", "indexes", "=", "[", "]", "\n", "for", "followee", "in", "relations", ":", "\n", "                ", "if", "self", ".", "data", ".", "containsUser", "(", "followee", ")", ":", "# followee is in rating set", "\n", "                    ", "indexes", ".", "append", "(", "self", ".", "data", ".", "user", "[", "followee", "]", ")", "\n", "weights", ".", "append", "(", "relations", "[", "followee", "]", ")", "\n", "", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "\n", "indexes", "=", "np", ".", "array", "(", "indexes", ")", "\n", "denom", "=", "weights", ".", "sum", "(", ")", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "if", "denom", "!=", "0", ":", "\n", "                ", "fPred", "+=", "weights", ".", "dot", "(", "(", "self", ".", "P", "[", "indexes", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", ")", ")", "\n", "\n", "return", "self", ".", "alpha", "*", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "fPred", "/", "denom", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "data", ".", "globalMean", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.RSTE.RSTE.predictForRanking": [[66, 84], ["RSTE.RSTE.data.containsUser", "RSTE.RSTE.social.getFollowees", "RSTE.RSTE.data.containsUser", "RSTE.RSTE.Q.dot", "len", "RSTE.RSTE.Q.dot", "RSTE.RSTE.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "fPred", "=", "0", "\n", "denom", "=", "0", "\n", "relations", "=", "self", ".", "social", ".", "getFollowees", "(", "u", ")", "\n", "for", "followee", "in", "relations", ":", "\n", "                ", "weight", "=", "relations", "[", "followee", "]", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "followee", ")", ":", "# followee is in rating set", "\n", "                    ", "uf", "=", "self", ".", "data", ".", "user", "[", "followee", "]", "\n", "fPred", "+=", "weight", "*", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "uf", "]", ")", "\n", "denom", "+=", "weight", "\n", "", "", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "if", "denom", "!=", "0", ":", "\n", "                ", "return", "self", ".", "alpha", "*", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "fPred", "/", "denom", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "len", "(", "self", ".", "data", ".", "item", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialMF.SocialMF.__init__": [[5, 7], ["base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SocialMF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialMF.SocialMF.readConfiguration": [[8, 10], ["super().readConfiguration"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SocialMF", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialMF.SocialMF.trainModel": [[11, 48], ["SocialMF.SocialMF.isConverged", "SocialMF.SocialMF.P[].copy", "SocialMF.SocialMF.Q[].copy", "SocialMF.SocialMF.data.containsUser", "SocialMF.SocialMF.P[].dot", "numpy.zeros", "SocialMF.SocialMF.social.getFollowees", "SocialMF.SocialMF.data.containsUser", "numpy.zeros.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "error", "=", "rating", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "p", "=", "self", ".", "P", "[", "u", "]", ".", "copy", "(", ")", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", ".", "copy", "(", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "\n", "", "for", "user", "in", "self", ".", "social", ".", "user", ":", "\n", "                ", "if", "self", ".", "data", ".", "containsUser", "(", "user", ")", ":", "\n", "                    ", "fPred", "=", "0", "\n", "denom", "=", "0", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "relationLoss", "=", "np", ".", "zeros", "(", "self", ".", "emb_size", ")", "\n", "followees", "=", "self", ".", "social", ".", "getFollowees", "(", "user", ")", "\n", "for", "followee", "in", "followees", ":", "\n", "                        ", "weight", "=", "followees", "[", "followee", "]", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "followee", ")", ":", "\n", "                            ", "uf", "=", "self", ".", "data", ".", "user", "[", "followee", "]", "\n", "fPred", "+=", "weight", "*", "self", ".", "P", "[", "uf", "]", "\n", "denom", "+=", "weight", "\n", "", "", "if", "denom", "!=", "0", ":", "\n", "                        ", "relationLoss", "=", "self", ".", "P", "[", "u", "]", "-", "fPred", "/", "denom", "\n", "", "self", ".", "loss", "+=", "self", ".", "regS", "*", "relationLoss", ".", "dot", "(", "relationLoss", ")", "\n", "# update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regS", "*", "relationLoss", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialMF.SocialMF.next_batch": [[49, 68], ["enumerate", "i_idx.append", "u_idx.append", "range", "range", "range", "range", "range", "range"], "methods", ["None"], ["", "", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "while", "batch_id", "<", "self", ".", "train_size", ":", "\n", "            ", "if", "batch_id", "+", "self", ".", "batch_size", "<=", "self", ".", "train_size", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "r", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "2", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "batch_id", "+=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "r", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "2", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "batch_id", "=", "self", ".", "train_size", "\n", "\n", "", "u_idx", ",", "i_idx", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "users", ")", ":", "\n", "                ", "i_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "items", "[", "i", "]", "]", ")", "\n", "u_idx", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "", "yield", "u_idx", ",", "i_idx", ",", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialMF.SocialMF.trainModel_tf": [[69, 96], ["super().trainModel_tf", "tensorflow.SparseTensor", "tensorflow.placeholder", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "range", "sess.run", "open", "pickle.dump", "open", "pickle.dump", "float", "len", "enumerate", "tensorflow.convert_to_tensor", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.gather", "SocialMF.SocialMF.next_batch", "sess.run", "print", "tensorflow.sparse_tensor_dense_matmul"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.next_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "        ", "super", "(", "SocialMF", ",", "self", ")", ".", "trainModel_tf", "(", ")", "\n", "indices", "=", "[", "[", "self", ".", "data", ".", "user", "[", "entry", "[", "0", "]", "]", ",", "self", ".", "data", ".", "user", "[", "entry", "[", "1", "]", "]", "]", "for", "entry", "in", "self", ".", "social", ".", "relation", "]", "\n", "values", "=", "[", "float", "(", "entry", "[", "2", "]", ")", "/", "len", "(", "self", ".", "social", ".", "followees", "[", "entry", "[", "0", "]", "]", ")", "for", "entry", "in", "self", ".", "social", ".", "relation", "]", "\n", "social_adj", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "indices", ",", "values", "=", "values", ",", "dense_shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "num_users", "]", ")", "\n", "self", ".", "r", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "y", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "item_embedding", ")", ",", "1", ")", "\n", "loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "convert_to_tensor", "(", "self", ".", "r", ")", "-", "y", ")", "+", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "user_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "item_embedding", ")", ")", "\n", "sr", "=", "1", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "user_embedding", "-", "tf", ".", "gather", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "social_adj", ",", "self", ".", "U", ")", ",", "self", ".", "u_idx", ")", ")", "\n", "loss", "+=", "sr", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "loss", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "                ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch", "(", ")", ")", ":", "\n", "                    ", "user_idx", ",", "i_idx", ",", "ratings", "=", "batch", "\n", "_", ",", "l", "=", "sess", ".", "run", "(", "[", "train", ",", "loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "r", ":", "ratings", "}", ")", "\n", "print", "(", "'epoch:'", ",", "epoch", ",", "'loss:'", ",", "l", ")", "\n", "", "", "self", ".", "P", ",", "self", ".", "Q", "=", "sess", ".", "run", "(", "[", "self", ".", "U", ",", "self", ".", "V", "]", ")", "\n", "import", "pickle", "\n", "f", "=", "open", "(", "'user_embeddings'", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "self", ".", "P", ",", "f", ")", "\n", "f", "=", "open", "(", "'user_idx'", ",", "'wb'", ")", "\n", "pickle", ".", "dump", "(", "self", ".", "data", ".", "user", ",", "f", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemMean.ItemMean.__init__": [[4, 6], ["base.recommender.Recommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "ItemMean", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.ItemMean.ItemMean.predictForRating": [[6, 11], ["ItemMean.ItemMean.data.containsItem"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem"], ["", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "itemMeans", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", ".", "globalMean", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.PMF.PMF.__init__": [[6, 8], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "PMF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.PMF.PMF.trainModel": [[9, 29], ["PMF.PMF.isConverged", "PMF.PMF.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "#get user id", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "#get item id", "\n", "error", "=", "rating", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", "\n", "#update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "\n", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.PMF.PMF.trainModel_tf": [[30, 53], ["super().trainModel_tf", "tf.reduce_sum", "tf.nn.l2_loss", "tf.train.AdamOptimizer", "PMF.PMF.optimizer.minimize", "tf.multiply", "tf.subtract", "tf.Session", "tf.global_variables_initializer", "sess.run", "range", "sess.run", "sess.run", "tf.nn.l2_loss", "tf.nn.l2_loss", "numpy.random.randint", "sess.run", "print", "sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "        ", "super", "(", "PMF", ",", "self", ")", ".", "trainModel_tf", "(", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "self", ".", "r_hat", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "item_embedding", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "subtract", "(", "self", ".", "r", ",", "self", ".", "r_hat", ")", ")", "\n", "reg_loss", "=", "self", ".", "regU", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "user_embedding", ")", "+", "self", ".", "regI", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "item_embedding", ")", "\n", "self", ".", "total_loss", "=", "self", ".", "loss", "+", "reg_loss", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "train", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "total_loss", ",", "var_list", "=", "[", "self", ".", "U", ",", "self", ".", "V", "]", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "                ", "batch_size", "=", "self", ".", "batch_size", "\n", "batch_idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "train_size", ",", "size", "=", "batch_size", ")", "\n", "user_idx", "=", "[", "self", ".", "data", ".", "user", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "]", "for", "idx", "in", "batch_idx", "]", "\n", "item_idx", "=", "[", "self", ".", "data", ".", "item", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "]", "for", "idx", "in", "batch_idx", "]", "\n", "rating", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "2", "]", "for", "idx", "in", "batch_idx", "]", "\n", "sess", ".", "run", "(", "self", ".", "train", ",", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", "}", ")", "\n", "print", "(", "'epoch:'", ",", "step", ",", "'loss:'", ",", "sess", ".", "run", "(", "self", ".", "total_loss", ",", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", "}", ")", ")", "\n", "\n", "", "self", ".", "P", "=", "sess", ".", "run", "(", "self", ".", "U", ")", "\n", "self", ".", "Q", "=", "sess", ".", "run", "(", "self", ".", "V", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserMean.UserMean.__init__": [[4, 6], ["base.recommender.Recommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "UserMean", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserMean.UserMean.predictForRating": [[7, 12], ["UserMean.UserMean.data.containsUser"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "userMeans", "[", "u", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", ".", "globalMean", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVD.SVD.__init__": [[5, 7], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SVD", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVD.SVD.initModel": [[8, 12], ["super().initModel", "numpy.random.rand", "numpy.random.rand", "SVD.SVD.data.trainingSize", "SVD.SVD.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SVD", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "Bu", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ")", "/", "5", "# bias value of user", "\n", "self", ".", "Bi", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ")", "/", "5", "# bias value of item", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVD.SVD.trainModel": [[13, 36], ["SVD.SVD.isConverged", "SVD.SVD.predictForRating"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "error", "=", "rating", "-", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", "\n", "bu", "=", "self", ".", "Bu", "[", "u", "]", "\n", "bi", "=", "self", ".", "Bi", "[", "i", "]", "\n", "#update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "self", ".", "Bu", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regB", "*", "bu", ")", "\n", "self", ".", "Bi", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regB", "*", "bi", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "+", "self", ".", "regB", "*", "(", "(", "self", ".", "Bu", "*", "self", ".", "Bu", ")", ".", "sum", "(", ")", "+", "(", "self", ".", "Bi", "*", "self", ".", "Bi", ")", ".", "sum", "(", ")", ")", "\n", "epoch", "+=", "1", "\n", "self", ".", "isConverged", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVD.SVD.trainModel_tf": [[37, 75], ["super().trainModel_tf", "tf.placeholder", "tf.Variable", "tf.Variable", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.reduce_sum", "tf.nn.l2_loss", "tf.train.AdamOptimizer", "tf.train.AdamOptimizer.minimize", "tf.train.AdamOptimizer.minimize", "tf.truncated_normal", "tf.truncated_normal", "tf.multiply", "tf.Session", "tf.global_variables_initializer", "sess.run", "range", "sess.run", "sess.run", "sess.run", "sess.run", "tf.nn.l2_loss", "tf.nn.l2_loss", "numpy.random.randint", "sess.run", "sess.run", "print", "sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "        ", "super", "(", "SVD", ",", "self", ")", ".", "trainModel_tf", "(", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "global_mean", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"mean\"", ")", "\n", "self", ".", "U_bias", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_users", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'U_bias'", ")", "\n", "self", ".", "V_bias", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_items", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'V_bias'", ")", "\n", "self", ".", "U_bias_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "U_bias", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "V_bias_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "V_bias", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "r_hat", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "item_embedding", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "r_hat", "=", "self", ".", "r_hat", "+", "self", ".", "U_bias_embed", "\n", "self", ".", "r_hat", "=", "self", ".", "r_hat", "+", "self", ".", "V_bias_embed", "\n", "self", ".", "r_hat", "=", "self", ".", "r_hat", "+", "global_mean", "\n", "self", ".", "loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "r", "-", "self", ".", "r_hat", ")", "\n", "reg_loss", "=", "self", ".", "regU", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "user_embedding", ")", "+", "self", ".", "regI", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "item_embedding", ")", "\n", "reg_loss", "+=", "self", ".", "regB", "*", "self", ".", "U_bias_embed", "+", "self", ".", "regB", "*", "self", ".", "U_bias_embed", "\n", "self", ".", "total_loss", "=", "self", ".", "loss", "+", "reg_loss", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train_U", "=", "optimizer", ".", "minimize", "(", "self", ".", "total_loss", ",", "var_list", "=", "[", "self", ".", "U", ",", "self", ".", "U_bias", "]", ")", "\n", "train_V", "=", "optimizer", ".", "minimize", "(", "self", ".", "total_loss", ",", "var_list", "=", "[", "self", ".", "V", ",", "self", ".", "V_bias", "]", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "                ", "batch_size", "=", "self", ".", "batch_size", "\n", "batch_idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "train_size", ",", "size", "=", "batch_size", ")", "\n", "user_idx", "=", "[", "self", ".", "data", ".", "user", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "]", "for", "idx", "in", "batch_idx", "]", "\n", "item_idx", "=", "[", "self", ".", "data", ".", "item", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "]", "for", "idx", "in", "batch_idx", "]", "\n", "g_mean", "=", "[", "self", ".", "data", ".", "globalMean", "]", "*", "batch_size", "\n", "rating", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "2", "]", "for", "idx", "in", "batch_idx", "]", "\n", "sess", ".", "run", "(", "train_U", ",", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", ",", "global_mean", ":", "g_mean", "}", ")", "\n", "sess", ".", "run", "(", "train_V", ",", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", ",", "global_mean", ":", "g_mean", "}", ")", "\n", "\n", "print", "(", "'epoch:'", ",", "step", ",", "'loss:'", ",", "sess", ".", "run", "(", "self", ".", "total_loss", ",", "\n", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", ",", "global_mean", ":", "g_mean", "}", ")", ")", "\n", "", "self", ".", "P", "=", "sess", ".", "run", "(", "self", ".", "U", ")", "\n", "self", ".", "Q", "=", "sess", ".", "run", "(", "self", ".", "V", ")", "\n", "self", ".", "Bu", "=", "sess", ".", "run", "(", "self", ".", "U_bias", ")", "\n", "self", ".", "Bi", "=", "sess", ".", "run", "(", "self", ".", "V_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVD.SVD.predictForRating": [[76, 83], ["SVD.SVD.data.containsUser", "SVD.SVD.data.containsItem", "SVD.SVD.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem"], ["", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "i", "]", "\n", "return", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "+", "self", ".", "data", ".", "globalMean", "+", "self", ".", "Bi", "[", "i", "]", "+", "self", ".", "Bu", "[", "u", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", ".", "globalMean", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVD.SVD.predictForRanking": [[84, 91], ["SVD.SVD.data.containsUser", "SVD.SVD.data.getUserId", "SVD.SVD.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "+", "self", ".", "data", ".", "globalMean", "+", "self", ".", "Bi", "+", "self", ".", "Bu", "[", "u", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.EE.EE.__init__": [[5, 7], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "EE", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.EE.EE.initModel": [[8, 12], ["super().initModel", "numpy.random.rand", "numpy.random.rand", "EE.EE.data.trainingSize", "EE.EE.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "EE", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "Bu", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ")", "/", "10", "# bias value of user", "\n", "self", ".", "Bi", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ")", "/", "10", "# bias value of item", "\n", "# self.X = np.random.rand(self.data.trainingSize()[0], self.Dim)/10", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.EE.EE.trainModel": [[15, 37], ["EE.EE.isConverged", "EE.EE.predictForRating"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "error", "=", "rating", "-", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", ".", "dot", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", "\n", "bu", "=", "self", ".", "Bu", "[", "u", "]", "\n", "bi", "=", "self", ".", "Bi", "[", "i", "]", "\n", "#self.loss += self.regB * bu ** 2 + self.regB * bi ** 2", "\n", "# update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "(", "error", "+", "self", ".", "regU", ")", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "+", "self", ".", "regI", ")", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", "\n", "self", ".", "Bu", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regB", "*", "bu", ")", "\n", "self", ".", "Bi", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regB", "*", "bi", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "regB", "*", "(", "self", ".", "Bu", "*", "self", ".", "Bu", ")", ".", "sum", "(", ")", "+", "self", ".", "regB", "*", "(", "self", ".", "Bi", "*", "self", ".", "Bi", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "self", ".", "isConverged", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.EE.EE.trainModel_tf": [[38, 80], ["super().trainModel_tf", "tf.placeholder", "tf.constant", "tf.constant", "tf.Variable", "tf.Variable", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.subtract", "tf.reduce_sum", "tf.subtract", "tf.add", "tf.add", "tf.nn.l2_loss", "tf.add", "tf.add", "tf.add", "tf.add", "tf.train.AdamOptimizer", "tf.train.AdamOptimizer.minimize", "tf.train.AdamOptimizer.minimize", "tf.truncated_normal", "tf.truncated_normal", "tf.multiply", "tf.subtract", "tf.multiply", "tf.multiply", "tf.multiply", "tf.multiply", "tf.Session", "tf.global_variables_initializer", "sess.run", "range", "sess.run", "sess.run", "sess.run", "sess.run", "tf.nn.l2_loss", "tf.nn.l2_loss", "tf.nn.l2_loss", "tf.nn.l2_loss", "numpy.random.randint", "sess.run", "sess.run", "print", "sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "        ", "super", "(", "EE", ",", "self", ")", ".", "trainModel_tf", "(", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "global_mean", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"mean\"", ")", "\n", "reg_lambda", "=", "tf", ".", "constant", "(", "self", ".", "regU", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "reg_biase", "=", "tf", ".", "constant", "(", "self", ".", "regB", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "U_bias", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_users", "]", ",", "stddev", "=", "0.005", ",", "mean", "=", "0.02", ")", ",", "name", "=", "'U_bias'", ")", "\n", "self", ".", "V_bias", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_items", "]", ",", "stddev", "=", "0.005", ",", "mean", "=", "0.02", ")", ",", "name", "=", "'V_bias'", ")", "\n", "self", ".", "U_bias_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "U_bias", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "V_bias_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "V_bias", ",", "self", ".", "v_idx", ")", "\n", "difference", "=", "tf", ".", "subtract", "(", "self", ".", "user_embedding", ",", "self", ".", "item_embedding", ")", "\n", "self", ".", "r_hat", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "difference", ",", "difference", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "r_hat", "=", "tf", ".", "subtract", "(", "self", ".", "U_bias_embed", ",", "self", ".", "r_hat", ")", "\n", "self", ".", "r_hat", "=", "tf", ".", "add", "(", "self", ".", "r_hat", ",", "self", ".", "V_bias_embed", ")", "\n", "self", ".", "r_hat", "=", "tf", ".", "add", "(", "self", ".", "r_hat", ",", "global_mean", ")", "\n", "self", ".", "loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "subtract", "(", "self", ".", "r", ",", "self", ".", "r_hat", ")", ")", "\n", "reg_loss", "=", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "reg_lambda", ",", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "user_embedding", ")", ")", ",", "\n", "tf", ".", "multiply", "(", "reg_lambda", ",", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "item_embedding", ")", ")", ")", "\n", "reg_loss", "=", "tf", ".", "add", "(", "reg_loss", ",", "tf", ".", "multiply", "(", "reg_biase", ",", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "U_bias", ")", ")", ")", "\n", "reg_loss", "=", "tf", ".", "add", "(", "reg_loss", ",", "tf", ".", "multiply", "(", "reg_biase", ",", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "V_bias", ")", ")", ")", "\n", "self", ".", "total_loss", "=", "tf", ".", "add", "(", "self", ".", "loss", ",", "reg_loss", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train_U", "=", "optimizer", ".", "minimize", "(", "self", ".", "total_loss", ",", "var_list", "=", "[", "self", ".", "U", ",", "self", ".", "U_bias", "]", ")", "\n", "train_V", "=", "optimizer", ".", "minimize", "(", "self", ".", "total_loss", ",", "var_list", "=", "[", "self", ".", "V", ",", "self", ".", "V_bias", "]", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "                ", "batch_size", "=", "self", ".", "batch_size", "\n", "batch_idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "train_size", ",", "size", "=", "batch_size", ")", "\n", "user_idx", "=", "[", "self", ".", "data", ".", "user", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "]", "for", "idx", "in", "batch_idx", "]", "\n", "item_idx", "=", "[", "self", ".", "data", ".", "item", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "]", "for", "idx", "in", "batch_idx", "]", "\n", "g_mean", "=", "[", "self", ".", "data", ".", "globalMean", "]", "*", "batch_size", "\n", "rating", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "2", "]", "for", "idx", "in", "batch_idx", "]", "\n", "sess", ".", "run", "(", "train_U", ",", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", ",", "global_mean", ":", "g_mean", "}", ")", "\n", "sess", ".", "run", "(", "train_V", ",", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", ",", "global_mean", ":", "g_mean", "}", ")", "\n", "print", "(", "'epoch:'", ",", "step", ",", "'loss:'", ",", "sess", ".", "run", "(", "self", ".", "total_loss", ",", "\n", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", ",", "global_mean", ":", "g_mean", "}", ")", ")", "\n", "", "self", ".", "P", "=", "sess", ".", "run", "(", "self", ".", "U", ")", "\n", "self", ".", "Q", "=", "sess", ".", "run", "(", "self", ".", "V", ")", "\n", "self", ".", "Bu", "=", "sess", ".", "run", "(", "self", ".", "U_bias", ")", "\n", "self", ".", "Bi", "=", "sess", ".", "run", "(", "self", ".", "V_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.EE.EE.predictForRating": [[81, 88], ["EE.EE.data.containsUser", "EE.EE.data.containsItem"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem"], ["", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "i", "]", "\n", "return", "self", ".", "data", ".", "globalMean", "+", "self", ".", "Bi", "[", "i", "]", "+", "self", ".", "Bu", "[", "u", "]", "-", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", ".", "dot", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", ".", "globalMean", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.EE.EE.predictForRanking": [[89, 97], ["EE.EE.data.containsUser"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "res", "=", "(", "(", "self", ".", "Q", "-", "self", ".", "P", "[", "u", "]", ")", "*", "(", "self", ".", "Q", "-", "self", ".", "P", "[", "u", "]", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", "+", "self", ".", "Bi", "+", "self", ".", "Bu", "[", "u", "]", "+", "self", ".", "data", ".", "globalMean", "\n", "return", "res", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.__init__": [[7, 10], ["base.recommender.Recommender.__init__", "util.structure.symmetricMatrix.SymmetricMatrix", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "UserKNN", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "self", ".", "userSim", "=", "SymmetricMatrix", "(", "len", "(", "self", ".", "data", ".", "user", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.readConfiguration": [[11, 15], ["super().readConfiguration", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "UserKNN", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "self", ".", "sim", "=", "self", ".", "config", "[", "'similarity'", "]", "\n", "self", ".", "neighbors", "=", "int", "(", "self", ".", "config", "[", "'num.neighbors'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.printAlgorConfig": [[16, 23], ["super().printAlgorConfig", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "\"show model's configuration\"", "\n", "super", "(", "UserKNN", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'num.neighbors:'", ",", "self", ".", "config", "[", "'num.neighbors'", "]", ")", "\n", "print", "(", "'similarity:'", ",", "self", ".", "config", "[", "'similarity'", "]", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.initModel": [[24, 27], ["UserKNN.UserKNN.computeSimilarities"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.computeSimilarities"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "topUsers", "=", "{", "}", "\n", "self", ".", "computeSimilarities", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.predictForRating": [[28, 52], ["range", "len", "len", "UserKNN.UserKNN.data.rating", "UserKNN.UserKNN.data.rating", "UserKNN.UserKNN.data.containsUser", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.rating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.rating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "#find the closest neighbors of user u", "\n", "        ", "topUsers", "=", "self", ".", "topUsers", "[", "u", "]", "\n", "userCount", "=", "self", ".", "neighbors", "\n", "if", "userCount", ">", "len", "(", "topUsers", ")", ":", "\n", "            ", "userCount", "=", "len", "(", "topUsers", ")", "\n", "#predict", "\n", "", "sum", ",", "denom", "=", "0", ",", "0", "\n", "for", "n", "in", "range", "(", "userCount", ")", ":", "\n", "#if user n has rating on item i", "\n", "            ", "similarUser", "=", "topUsers", "[", "n", "]", "[", "0", "]", "\n", "if", "self", ".", "data", ".", "rating", "(", "similarUser", ",", "i", ")", "!=", "-", "1", ":", "\n", "                ", "similarity", "=", "topUsers", "[", "n", "]", "[", "1", "]", "\n", "rating", "=", "self", ".", "data", ".", "rating", "(", "similarUser", ",", "i", ")", "\n", "sum", "+=", "similarity", "*", "(", "rating", "-", "self", ".", "data", ".", "userMeans", "[", "similarUser", "]", ")", "\n", "denom", "+=", "similarity", "\n", "", "", "if", "sum", "==", "0", ":", "\n", "#no users have rating on item i,return the average rating of user u", "\n", "            ", "if", "not", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "#user u has no ratings in the training set,return the global mean", "\n", "                ", "return", "self", ".", "data", ".", "globalMean", "\n", "", "return", "self", ".", "data", ".", "userMeans", "[", "u", "]", "\n", "", "pred", "=", "self", ".", "data", ".", "userMeans", "[", "u", "]", "+", "sum", "/", "float", "(", "denom", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.computeSimilarities": [[53, 67], ["print", "enumerate", "print", "sorted", "iter", "print", "UserKNN.UserKNN.userSim.contains", "util.qmath.similarity", "UserKNN.UserKNN.userSim.set", "UserKNN.UserKNN.userSim[].items", "len", "UserKNN.UserKNN.data.sRow", "UserKNN.UserKNN.data.sRow"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.similarity", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sRow", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sRow"], ["", "def", "computeSimilarities", "(", "self", ")", ":", "\n", "        ", "'compute correlation among users'", "\n", "print", "(", "'Computing user similarities...'", ")", "\n", "for", "idx", ",", "u1", "in", "enumerate", "(", "self", ".", "data", ".", "testSet_u", ")", ":", "\n", "            ", "for", "u2", "in", "self", ".", "data", ".", "user", ":", "\n", "                ", "if", "u1", "!=", "u2", ":", "\n", "                    ", "if", "self", ".", "userSim", ".", "contains", "(", "u1", ",", "u2", ")", ":", "\n", "                        ", "continue", "\n", "", "sim", "=", "qmath", ".", "similarity", "(", "self", ".", "data", ".", "sRow", "(", "u1", ")", ",", "self", ".", "data", ".", "sRow", "(", "u2", ")", ",", "self", ".", "sim", ")", "\n", "self", ".", "userSim", ".", "set", "(", "u1", ",", "u2", ",", "sim", ")", "\n", "", "", "self", ".", "topUsers", "[", "u1", "]", "=", "sorted", "(", "iter", "(", "self", ".", "userSim", "[", "u1", "]", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "if", "idx", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "'progress:'", ",", "idx", ",", "'/'", ",", "len", "(", "self", ".", "data", ".", "testSet_u", ")", ")", "\n", "", "", "print", "(", "'The user similarities have been calculated.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.UserKNN.UserKNN.predictForRanking": [[68, 71], ["print", "exit"], "methods", ["None"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "print", "(", "'Using Memory based algorithms to rank items is extremely time-consuming. So ranking for all items in UserKNN is not available.'", ")", "\n", "exit", "(", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoReg.SoReg.__init__": [[7, 9], ["list", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "list", "(", ")", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SoReg", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoReg.SoReg.readConfiguration": [[10, 14], ["super().readConfiguration", "util.config.OptionConf", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SoReg", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "alpha", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'SoReg'", "]", ")", "\n", "self", ".", "alpha", "=", "float", "(", "alpha", "[", "'-alpha'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoReg.SoReg.printAlgorConfig": [[15, 20], ["super().printAlgorConfig", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "SoReg", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'alpha: %.3f'", "%", "self", ".", "alpha", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoReg.SoReg.initModel": [[21, 34], ["super().initModel", "defaultdict", "print", "SoReg.SoReg.social.getFollowees", "SoReg.SoReg.sim"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoReg.SoReg.sim"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SoReg", ",", "self", ")", ".", "initModel", "(", ")", "\n", "# compute similarity", "\n", "from", "collections", "import", "defaultdict", "\n", "self", ".", "Sim", "=", "defaultdict", "(", "dict", ")", "\n", "print", "(", "'constructing similarity matrix...'", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "f", "in", "self", ".", "social", ".", "getFollowees", "(", "user", ")", ":", "\n", "                ", "if", "user", "in", "self", ".", "Sim", "and", "f", "in", "self", ".", "Sim", "[", "user", "]", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "self", ".", "Sim", "[", "user", "]", "[", "f", "]", "=", "self", ".", "sim", "(", "user", ",", "f", ")", "\n", "self", ".", "Sim", "[", "f", "]", "[", "user", "]", "=", "self", ".", "Sim", "[", "user", "]", "[", "f", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoReg.SoReg.sim": [[35, 37], ["util.qmath.pearson_sp", "SoReg.SoReg.social.weight", "SoReg.SoReg.data.sRow", "SoReg.SoReg.data.sRow"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.pearson_sp", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.weight", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sRow", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sRow"], ["", "", "", "", "def", "sim", "(", "self", ",", "u", ",", "v", ")", ":", "\n", "        ", "return", "(", "qmath", ".", "pearson_sp", "(", "self", ".", "data", ".", "sRow", "(", "u", ")", ",", "self", ".", "data", ".", "sRow", "(", "v", ")", ")", "+", "self", ".", "social", ".", "weight", "(", "u", ",", "v", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoReg.SoReg.trainModel": [[38, 78], ["SoReg.SoReg.isConverged", "SoReg.SoReg.social.getFollowees", "SoReg.SoReg.social.getFollowers", "SoReg.SoReg.P[].dot", "SoReg.SoReg.data.containsUser", "SoReg.SoReg.data.containsUser", "SoReg.SoReg.data.containsUser"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowers", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "vid", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "# add the followees' influence", "\n", "error", "=", "rating", "-", "self", ".", "P", "[", "uid", "]", ".", "dot", "(", "self", ".", "Q", "[", "vid", "]", ")", "\n", "p", "=", "self", ".", "P", "[", "uid", "]", "\n", "q", "=", "self", ".", "Q", "[", "vid", "]", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "#update latent vectors", "\n", "self", ".", "P", "[", "uid", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "vid", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "", "for", "user", "in", "self", ".", "social", ".", "user", ":", "\n", "                ", "simSum", "=", "0", "\n", "simSumf1", "=", "0", "\n", "if", "not", "self", ".", "data", ".", "containsUser", "(", "user", ")", ":", "\n", "                    ", "continue", "\n", "", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "for", "f", "in", "self", ".", "social", ".", "getFollowees", "(", "user", ")", ":", "\n", "                    ", "if", "self", ".", "data", ".", "containsUser", "(", "f", ")", ":", "\n", "                        ", "fid", "=", "self", ".", "data", ".", "user", "[", "f", "]", "\n", "simSumf1", "+=", "self", ".", "Sim", "[", "user", "]", "[", "f", "]", "*", "(", "self", ".", "P", "[", "uid", "]", "-", "self", ".", "P", "[", "fid", "]", ")", "\n", "simSum", "+=", "self", ".", "Sim", "[", "user", "]", "[", "f", "]", "*", "(", "(", "self", ".", "P", "[", "uid", "]", "-", "self", ".", "P", "[", "fid", "]", ")", ".", "dot", "(", "self", ".", "P", "[", "uid", "]", "-", "self", ".", "P", "[", "fid", "]", ")", ")", "\n", "self", ".", "loss", "+=", "simSum", "\n", "", "", "simSumf2", "=", "0", "\n", "for", "g", "in", "self", ".", "social", ".", "getFollowers", "(", "user", ")", ":", "\n", "                    ", "if", "self", ".", "data", ".", "containsUser", "(", "g", ")", ":", "\n", "                        ", "gid", "=", "self", ".", "data", ".", "user", "[", "g", "]", "\n", "simSumf2", "+=", "self", ".", "Sim", "[", "user", "]", "[", "g", "]", "*", "(", "self", ".", "P", "[", "uid", "]", "-", "self", ".", "P", "[", "gid", "]", ")", "\n", "\n", "", "", "self", ".", "P", "[", "uid", "]", "+=", "self", ".", "lRate", "*", "(", "-", "self", ".", "alpha", "*", "(", "simSumf1", "+", "simSumf2", ")", ")", "\n", "\n", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVDPlusPlus.SVDPlusPlus.__init__": [[6, 8], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SVDPlusPlus", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVDPlusPlus.SVDPlusPlus.readConfiguration": [[9, 13], ["super().readConfiguration", "util.config.OptionConf", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SVDPlusPlus", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "regY", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'SVDPlusPlus'", "]", ")", "\n", "self", ".", "regY", "=", "float", "(", "regY", "[", "'-y'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVDPlusPlus.SVDPlusPlus.printAlgorConfig": [[14, 19], ["super().printAlgorConfig", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "SVDPlusPlus", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'regY: %.3f'", "%", "self", ".", "regY", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVDPlusPlus.SVDPlusPlus.initModel": [[20, 25], ["super().initModel", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "SVDPlusPlus.SVDPlusPlus.data.trainingSize", "SVDPlusPlus.SVDPlusPlus.data.trainingSize", "SVDPlusPlus.SVDPlusPlus.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SVDPlusPlus", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "Bu", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ")", "# biased value of user", "\n", "self", ".", "Bi", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ")", "# biased value of item", "\n", "self", ".", "Y", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ",", "self", ".", "emb_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVDPlusPlus.SVDPlusPlus.trainModel": [[26, 68], ["SVDPlusPlus.SVDPlusPlus.isConverged", "SVDPlusPlus.SVDPlusPlus.data.userRated", "len", "SVDPlusPlus.SVDPlusPlus.predictForRating", "y.sum", "indexes.append"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "items", ",", "ratings", "=", "self", ".", "data", ".", "userRated", "(", "user", ")", "\n", "w", "=", "len", "(", "items", ")", "\n", "#w = math.sqrt(len(itemIndexs))", "\n", "error", "=", "rating", "-", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", "\n", "bu", "=", "self", ".", "Bu", "[", "u", "]", "\n", "bi", "=", "self", ".", "Bi", "[", "i", "]", "\n", "\n", "#update latent vectors", "\n", "self", ".", "Bu", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regB", "*", "bu", ")", "\n", "self", ".", "Bi", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regB", "*", "bi", ")", "\n", "sum", "=", "0", "\n", "if", "w", ">", "1", ":", "\n", "                    ", "indexes", "=", "[", "]", "\n", "for", "j", "in", "items", ":", "\n", "                        ", "j", "=", "self", ".", "data", ".", "item", "[", "j", "]", "\n", "if", "i", "!=", "j", ":", "\n", "                            ", "indexes", ".", "append", "(", "j", ")", "\n", "\n", "", "", "y", "=", "self", ".", "Y", "[", "indexes", "]", "\n", "sum", "+=", "y", ".", "sum", "(", "axis", "=", "0", ")", "\n", "self", ".", "Y", "[", "indexes", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "/", "(", "w", "-", "1", ")", "-", "self", ".", "regY", "*", "y", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "error", "*", "sum", "/", "(", "w", "-", "1", ")", "\n", "\n", "", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "\n", "\n", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "+", "self", ".", "regY", "*", "(", "self", ".", "Y", "*", "self", ".", "Y", ")", ".", "sum", "(", ")", "+", "self", ".", "regB", "*", "(", "(", "self", ".", "Bu", "*", "self", ".", "Bu", ")", ".", "sum", "(", ")", "+", "(", "self", ".", "Bi", "*", "self", ".", "Bi", ")", ".", "sum", "(", ")", ")", "\n", "epoch", "+=", "1", "\n", "self", ".", "isConverged", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVDPlusPlus.SVDPlusPlus.predictForRating": [[70, 89], ["SVDPlusPlus.SVDPlusPlus.data.containsUser", "SVDPlusPlus.SVDPlusPlus.data.containsItem", "SVDPlusPlus.SVDPlusPlus.data.userRated", "len", "SVDPlusPlus.SVDPlusPlus.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated"], ["", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "pred", "=", "0", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "itemIndexs", ",", "rating", "=", "self", ".", "data", ".", "userRated", "(", "u", ")", "\n", "w", "=", "len", "(", "itemIndexs", ")", "\n", "# w = math.sqrt(len(itemIndexs))", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "i", "]", "\n", "sum", "=", "0", "\n", "if", "w", ">", "0", ":", "\n", "                ", "for", "j", "in", "itemIndexs", ":", "\n", "                    ", "j", "=", "self", ".", "data", ".", "item", "[", "j", "]", "\n", "sum", "+=", "self", ".", "Y", "[", "j", "]", "\n", "", "pred", "+=", "(", "sum", "/", "w", ")", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "\n", "", "pred", "+=", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "+", "self", ".", "data", ".", "globalMean", "+", "self", ".", "Bi", "[", "i", "]", "+", "self", ".", "Bu", "[", "u", "]", "\n", "\n", "", "else", ":", "\n", "            ", "pred", "=", "self", ".", "data", ".", "globalMean", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SVDPlusPlus.SVDPlusPlus.predictForRanking": [[90, 108], ["SVDPlusPlus.SVDPlusPlus.data.containsUser", "SVDPlusPlus.SVDPlusPlus.data.userRated", "len", "SVDPlusPlus.SVDPlusPlus.Q.dot", "len", "SVDPlusPlus.SVDPlusPlus.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "pred", "=", "0", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "itemIndexs", ",", "rating", "=", "self", ".", "data", ".", "userRated", "(", "u", ")", "\n", "w", "=", "len", "(", "itemIndexs", ")", "\n", "# w = math.sqrt(len(itemIndexs))", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "sum", "=", "0", "\n", "if", "w", ">", "0", ":", "\n", "                ", "for", "j", "in", "itemIndexs", ":", "\n", "                    ", "j", "=", "self", ".", "data", ".", "item", "[", "j", "]", "\n", "sum", "+=", "self", ".", "Y", "[", "j", "]", "\n", "", "pred", "+=", "self", ".", "Q", ".", "dot", "(", "sum", "/", "w", ")", "\n", "", "pred", "+=", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "+", "self", ".", "data", ".", "globalMean", "+", "self", ".", "Bi", "+", "self", ".", "Bu", "[", "u", "]", "\n", "\n", "", "else", ":", "\n", "            ", "pred", "=", "[", "self", ".", "data", ".", "globalMean", "]", "*", "len", "(", "self", ".", "data", ".", "item", ")", "\n", "", "return", "pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.BasicMF.BasicMF.__init__": [[6, 8], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "BasicMF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.BasicMF.BasicMF.trainModel": [[9, 27], ["BasicMF.BasicMF.isConverged", "BasicMF.BasicMF.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "error", "=", "rating", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", "\n", "#update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "error", "*", "q", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "error", "*", "p", "\n", "", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.BasicMF.BasicMF.trainModel_tf": [[28, 51], ["super().trainModel_tf", "tf.reduce_sum", "tf.nn.l2_loss", "tf.train.AdamOptimizer", "BasicMF.BasicMF.optimizer.minimize", "tf.multiply", "tf.Session", "tf.global_variables_initializer", "sess.run", "range", "sess.run", "sess.run", "numpy.random.randint", "sess.run", "print", "sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "        ", "super", "(", "BasicMF", ",", "self", ")", ".", "trainModel_tf", "(", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "self", ".", "r_hat", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "item_embedding", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "total_loss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "r", "-", "self", ".", "r_hat", ")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "train", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "total_loss", ",", "var_list", "=", "[", "self", ".", "U", ",", "self", ".", "V", "]", ")", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "for", "step", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "                ", "batch_size", "=", "self", ".", "batch_size", "\n", "batch_idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "train_size", ",", "size", "=", "batch_size", ")", "\n", "user_idx", "=", "[", "self", ".", "data", ".", "user", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "]", "for", "idx", "in", "batch_idx", "]", "\n", "item_idx", "=", "[", "self", ".", "data", ".", "item", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "]", "for", "idx", "in", "batch_idx", "]", "\n", "rating", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "2", "]", "for", "idx", "in", "batch_idx", "]", "\n", "sess", ".", "run", "(", "self", ".", "train", ",", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "item_idx", "}", ")", "\n", "print", "(", "'epoch:'", ",", "step", ",", "'loss:'", ",", "sess", ".", "run", "(", "self", ".", "total_loss", ",", "\n", "feed_dict", "=", "{", "self", ".", "r", ":", "rating", ",", "self", ".", "u_idx", ":", "user_idx", ",", "\n", "self", ".", "v_idx", ":", "item_idx", "}", ")", ")", "\n", "", "self", ".", "P", "=", "sess", ".", "run", "(", "self", ".", "U", ")", "\n", "self", ".", "Q", "=", "sess", ".", "run", "(", "self", ".", "V", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.LOCABAL.LOCABAL.__init__": [[9, 11], ["list", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "list", "(", ")", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "LOCABAL", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.LOCABAL.LOCABAL.readConfiguration": [[12, 16], ["super().readConfiguration", "util.config.OptionConf", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "LOCABAL", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "alpha", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'LOCABAL'", "]", ")", "\n", "self", ".", "alpha", "=", "float", "(", "alpha", "[", "'-alpha'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.LOCABAL.LOCABAL.printAlgorConfig": [[17, 22], ["super().printAlgorConfig", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "LOCABAL", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'alpha: %.3f'", "%", "self", ".", "alpha", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.LOCABAL.LOCABAL.initModel": [[23, 45], ["super().initModel", "numpy.random.rand", "networkx.DiGraph", "networkx.pagerank", "sorted", "networkx.DiGraph.add_edge", "iter", "sorted.items", "enumerate", "LOCABAL.LOCABAL.data.containsUser", "LOCABAL.LOCABAL.data.containsUser", "util.qmath.cosine_sp", "math.log"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine_sp"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "LOCABAL", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "H", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "emb_size", ",", "self", ".", "emb_size", ")", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "for", "re", "in", "self", ".", "social", ".", "relation", ":", "\n", "            ", "G", ".", "add_edge", "(", "re", "[", "0", "]", ",", "re", "[", "1", "]", ")", "\n", "", "pr", "=", "nx", ".", "pagerank", "(", "G", ",", "alpha", "=", "0.85", ")", "\n", "pr", "=", "sorted", "(", "iter", "(", "pr", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "pr", "=", "[", "(", "u", "[", "0", "]", ",", "ind", "+", "1", ")", "for", "ind", ",", "u", "in", "enumerate", "(", "pr", ")", "]", "\n", "self", ".", "W", "=", "{", "}", "\n", "for", "user", "in", "pr", ":", "\n", "            ", "self", ".", "W", "[", "user", "[", "0", "]", "]", "=", "1", "/", "(", "1", "+", "math", ".", "log", "(", "user", "[", "1", "]", ")", ")", "\n", "", "self", ".", "S", "=", "{", "}", "\n", "for", "line", "in", "self", ".", "social", ".", "relation", ":", "\n", "            ", "u1", ",", "u2", ",", "weight", "=", "line", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u1", ")", "and", "self", ".", "data", ".", "containsUser", "(", "u2", ")", ":", "\n", "                ", "uvec1", "=", "self", ".", "data", ".", "trainSet_u", "[", "u1", "]", "\n", "uvec2", "=", "self", ".", "data", ".", "trainSet_u", "[", "u2", "]", "\n", "#add relations to dict", "\n", "if", "u1", "not", "in", "self", ".", "S", ":", "\n", "                    ", "self", ".", "S", "[", "u1", "]", "=", "{", "}", "\n", "", "self", ".", "S", "[", "u1", "]", "[", "u2", "]", "=", "qmath", ".", "cosine_sp", "(", "uvec1", ",", "uvec2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.LOCABAL.LOCABAL.trainModel": [[46, 84], ["LOCABAL.LOCABAL.isConverged", "LOCABAL.LOCABAL.data.getItemId", "LOCABAL.LOCABAL.data.getUserId", "LOCABAL.LOCABAL.P[].copy", "LOCABAL.LOCABAL.Q[].copy", "LOCABAL.LOCABAL.predictForRating", "LOCABAL.LOCABAL.data.getUserId", "LOCABAL.LOCABAL.data.getUserId", "LOCABAL.LOCABAL.P[].copy", "LOCABAL.LOCABAL.P[].copy", "numpy.dot", "LOCABAL.LOCABAL.reshape().dot", "LOCABAL.LOCABAL.H.dot", "LOCABAL.LOCABAL.T.dot", "numpy.dot", "LOCABAL.LOCABAL.reshape", "LOCABAL.LOCABAL.reshape"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getItemId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "r", "=", "entry", "\n", "error", "=", "r", "-", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "i", "=", "self", ".", "data", ".", "getItemId", "(", "item", ")", "\n", "u", "=", "self", ".", "data", ".", "getUserId", "(", "user", ")", "\n", "if", "user", "in", "self", ".", "W", ":", "\n", "                    ", "self", ".", "loss", "+=", "self", ".", "W", "[", "user", "]", "*", "error", "**", "2", "\n", "", "else", ":", "\n", "                    ", "self", ".", "loss", "+=", "error", "**", "2", "\n", "", "p", "=", "self", ".", "P", "[", "u", "]", ".", "copy", "(", ")", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", ".", "copy", "(", ")", "\n", "#update latent vectors", "\n", "if", "user", "in", "self", ".", "W", ":", "\n", "                    ", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "self", ".", "W", "[", "user", "]", "*", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "self", ".", "W", "[", "user", "]", "*", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "#else:", "\n", "", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "", "for", "user", "in", "self", ".", "S", ":", "\n", "                ", "for", "friend", "in", "self", ".", "S", "[", "user", "]", ":", "\n", "                    ", "k", "=", "self", ".", "data", ".", "getUserId", "(", "friend", ")", "\n", "u", "=", "self", ".", "data", ".", "getUserId", "(", "user", ")", "\n", "p", "=", "self", ".", "P", "[", "u", "]", ".", "copy", "(", ")", "\n", "q", "=", "self", ".", "P", "[", "k", "]", ".", "copy", "(", ")", "\n", "error", "=", "self", ".", "S", "[", "user", "]", "[", "friend", "]", "-", "np", ".", "dot", "(", "np", ".", "dot", "(", "p", ",", "self", ".", "H", ")", ",", "q", ")", "\n", "self", ".", "loss", "+=", "self", ".", "alpha", "*", "error", "**", "2", "\n", "#update latent vectors", "\n", "self", ".", "H", "+=", "self", ".", "lRate", "*", "self", ".", "alpha", "*", "error", "*", "(", "p", ".", "reshape", "(", "self", ".", "emb_size", ",", "1", ")", ".", "dot", "(", "q", ".", "reshape", "(", "1", ",", "self", ".", "emb_size", ")", ")", ")", "\n", "self", ".", "H", "-=", "self", ".", "lRate", "*", "self", ".", "regS", "*", "self", ".", "H", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "self", ".", "alpha", "*", "error", "*", "(", "self", ".", "H", ".", "dot", "(", "q", ")", ")", "\n", "self", ".", "P", "[", "k", "]", "+=", "self", ".", "lRate", "*", "self", ".", "alpha", "*", "error", "*", "(", "p", ".", "T", ".", "dot", "(", "self", ".", "H", ")", ")", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "+", "self", ".", "regS", "*", "(", "self", ".", "H", "*", "self", ".", "H", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "self", ".", "isConverged", "(", "epoch", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SREE.SREE.__init__": [[12, 14], ["list", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "list", "(", ")", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SREE", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SREE.SREE.readConfiguration": [[15, 19], ["super().readConfiguration", "util.config.OptionConf", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SREE", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "par", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'SREE'", "]", ")", "\n", "self", ".", "alpha", "=", "float", "(", "par", "[", "'-alpha'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SREE.SREE.initModel": [[20, 24], ["super().initModel", "numpy.random.rand", "numpy.random.rand", "SREE.SREE.data.trainingSize", "SREE.SREE.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SREE", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "Bu", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ")", "/", "10", "# bias value of user", "\n", "self", ".", "Bi", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ")", "/", "10", "# bias value of item", "\n", "# self.X = np.random.rand(self.data.trainingSize()[0], self.Dim)/10", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SREE.SREE.trainModel": [[27, 64], ["SREE.SREE.isConverged", "SREE.SREE.data.containsUser", "SREE.SREE.predictForRating", "SREE.SREE.social.getFollowees", "SREE.SREE.data.containsUser"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "error", "=", "rating", "-", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", ".", "dot", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", "\n", "bu", "=", "self", ".", "Bu", "[", "u", "]", "\n", "bi", "=", "self", ".", "Bi", "[", "i", "]", "\n", "#self.loss += self.regB * bu ** 2 + self.regB * bi ** 2", "\n", "# update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "(", "error", "+", "self", ".", "regU", ")", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "+", "self", ".", "regI", ")", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", "\n", "self", ".", "Bu", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regB", "*", "bu", ")", "\n", "self", ".", "Bi", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regB", "*", "bi", ")", "\n", "", "self", ".", "loss", "+=", "self", ".", "regB", "*", "(", "self", ".", "Bu", "*", "self", ".", "Bu", ")", ".", "sum", "(", ")", "+", "self", ".", "regB", "*", "(", "self", ".", "Bi", "*", "self", ".", "Bi", ")", ".", "sum", "(", ")", "\n", "\n", "for", "user", "in", "self", ".", "social", ".", "user", ":", "\n", "                ", "if", "self", ".", "data", ".", "containsUser", "(", "user", ")", ":", "\n", "                    ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "followees", "=", "self", ".", "social", ".", "getFollowees", "(", "user", ")", "\n", "for", "friend", "in", "followees", ":", "\n", "                        ", "if", "self", ".", "data", ".", "containsUser", "(", "friend", ")", ":", "\n", "                            ", "v", "=", "self", ".", "data", ".", "user", "[", "friend", "]", "\n", "weight", "=", "followees", "[", "friend", "]", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "z", "=", "self", ".", "P", "[", "v", "]", "\n", "# update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "alpha", "*", "weight", "*", "(", "p", "-", "z", ")", "\n", "self", ".", "loss", "+=", "self", ".", "alpha", "*", "weight", "*", "(", "p", "-", "z", ")", ".", "dot", "(", "p", "-", "z", ")", "\n", "\n", "", "", "", "", "epoch", "+=", "1", "\n", "self", ".", "isConverged", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SREE.SREE.predictForRating": [[65, 72], ["SREE.SREE.data.containsUser", "SREE.SREE.data.containsItem"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem"], ["", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "i", "]", "\n", "return", "self", ".", "data", ".", "globalMean", "+", "self", ".", "Bi", "[", "i", "]", "+", "self", ".", "Bu", "[", "u", "]", "-", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", ".", "dot", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "Q", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", ".", "globalMean", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SREE.SREE.predictForRanking": [[73, 81], ["SREE.SREE.data.containsUser", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "res", "=", "(", "(", "self", ".", "Q", "-", "self", ".", "P", "[", "u", "]", ")", "*", "(", "self", ".", "Q", "-", "self", ".", "P", "[", "u", "]", ")", ")", ".", "sum", "(", "axis", "=", "1", ")", "+", "self", ".", "Bi", "+", "self", ".", "Bu", "[", "u", "]", "+", "self", ".", "data", ".", "globalMean", "\n", "return", "res", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "len", "(", "self", ".", "data", ".", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialFD.SocialFD.__init__": [[6, 8], ["list", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "list", "(", ")", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SocialFD", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialFD.SocialFD.initModel": [[9, 16], ["super().initModel", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "SocialFD.SocialFD.data.trainingSize", "SocialFD.SocialFD.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SocialFD", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "Bu", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ")", "/", "5", "# biased value of user", "\n", "self", ".", "Bi", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ")", "/", "5", "# biased value of item", "\n", "self", ".", "H", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "emb_size", ",", "self", ".", "emb_size", ")", "/", "5", "\n", "self", ".", "P", "/=", "10", "\n", "self", ".", "Q", "/=", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialFD.SocialFD.readConfiguration": [[17, 23], ["super().readConfiguration", "util.config.OptionConf", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SocialFD", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "eps", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'SocialFD'", "]", ")", "\n", "self", ".", "alpha", "=", "float", "(", "eps", "[", "'-alpha'", "]", ")", "\n", "self", ".", "eta", "=", "float", "(", "eps", "[", "'-eta'", "]", ")", "\n", "self", ".", "beta", "=", "float", "(", "eps", "[", "'-beta'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialFD.SocialFD.trainModel": [[24, 91], ["SocialFD.SocialFD.isConverged", "SocialFD.SocialFD.data.getUserId", "SocialFD.SocialFD.data.getItemId", "SocialFD.SocialFD.H.dot", "SocialFD.SocialFD.social.getFollowees", "SocialFD.SocialFD.predictForRating", "SocialFD.SocialFD.data.getUserId", "SocialFD.SocialFD.Bu.dot", "SocialFD.SocialFD.Bi.dot", "SocialFD.SocialFD.H.dot", "SocialFD.SocialFD.data.containsUser", "SocialFD.SocialFD.H.dot", "SocialFD.SocialFD.H.dot", "abs", "SocialFD.SocialFD.H.dot", "SocialFD.SocialFD.H.dot", "SocialFD.SocialFD.H.dot", "SocialFD.SocialFD.H.T.dot", "SocialFD.SocialFD.H.dot", "SocialFD.SocialFD.H.dot", "R.dot", "W.dot", "W.dot", "min", "numpy.array", "numpy.array", "numpy.array", "W.dot", "W.dot", "W.dot", "W.dot", "W.dot", "W.dot", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getItemId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "u", ",", "i", ",", "r", "=", "entry", "\n", "error", "=", "r", "-", "self", ".", "predictForRating", "(", "u", ",", "i", ")", "\n", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "i", "=", "self", ".", "data", ".", "getItemId", "(", "i", ")", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "bu", "=", "self", ".", "Bu", "[", "u", "]", "\n", "bi", "=", "self", ".", "Bi", "[", "i", "]", "\n", "x", "=", "self", ".", "P", "[", "u", "]", "\n", "y", "=", "self", ".", "Q", "[", "i", "]", "\n", "d", "=", "(", "x", "-", "y", ")", ".", "dot", "(", "self", ".", "H", ")", ".", "dot", "(", "self", ".", "H", ".", "T", ")", ".", "dot", "(", "(", "x", "-", "y", ")", ".", "T", ")", "\n", "derivative_d", "=", "self", ".", "H", ".", "dot", "(", "(", "x", "-", "y", ")", ".", "T", ".", "dot", "(", "x", "-", "y", ")", ")", "\n", "if", "r", ">", "0.7", ":", "#high ratings, ratings are compressed to range (0.01,1.01)", "\n", "                    ", "self", ".", "loss", "+=", "self", ".", "eta", "*", "self", ".", "alpha", "*", "d", "\n", "# update latent vectors", "\n", "self", ".", "H", "-=", "self", ".", "lRate", "*", "(", "(", "error", "+", "self", ".", "eta", "*", "self", ".", "alpha", ")", "*", "derivative_d", ")", "\n", "W", "=", "(", "self", ".", "H", ".", "dot", "(", "self", ".", "H", ".", "T", ")", "+", "self", ".", "H", ".", "dot", "(", "self", ".", "H", ".", "T", ")", ".", "T", ")", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "(", "(", "error", "+", "self", ".", "eta", "*", "self", ".", "alpha", ")", "*", "(", "W", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "y", "]", ")", ".", "T", ")", ")", ".", "T", "[", "0", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "(", "error", "+", "self", ".", "eta", "*", "self", ".", "alpha", ")", "*", "(", "W", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "y", "]", ")", ".", "T", ")", ")", ".", "T", "[", "0", "]", ")", "\n", "\n", "", "elif", "r", "<=", "0.5", ":", "#low ratings", "\n", "                    ", "self", ".", "loss", "+=", "self", ".", "eta", "*", "self", ".", "alpha", "*", "abs", "(", "1", "-", "min", "(", "d", ",", "1", ")", ")", "\n", "# update latent vectors", "\n", "if", "d", "<", "1", ":", "\n", "                        ", "self", ".", "H", "+=", "self", ".", "lRate", "*", "(", "(", "self", ".", "eta", "*", "self", ".", "alpha", "-", "error", ")", "*", "derivative_d", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "H", "-=", "self", ".", "lRate", "*", "error", "*", "derivative_d", "\n", "", "W", "=", "(", "self", ".", "H", ".", "dot", "(", "self", ".", "H", ".", "T", ")", "+", "self", ".", "H", ".", "dot", "(", "self", ".", "H", ".", "T", ")", ".", "T", ")", "\n", "if", "d", "<", "1", ":", "\n", "                        ", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "(", "-", "error", "+", "self", ".", "eta", "*", "self", ".", "alpha", ")", "*", "(", "W", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "y", "]", ")", ".", "T", ")", ")", ".", "T", "[", "0", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "(", "error", "-", "self", ".", "eta", "*", "self", ".", "alpha", ")", "*", "(", "W", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "y", "]", ")", ".", "T", ")", ")", ".", "T", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "-", "error", "*", "(", "W", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "y", "]", ")", ".", "T", ")", ")", ".", "T", "[", "0", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "(", "W", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "y", "]", ")", ".", "T", ")", ")", ".", "T", "[", "0", "]", ")", "\n", "\n", "", "", "else", ":", "#medium", "\n", "# update latent vectors", "\n", "                    ", "self", ".", "H", "-=", "self", ".", "lRate", "*", "(", "(", "error", ")", "*", "derivative_d", ")", "\n", "W", "=", "(", "self", ".", "H", ".", "dot", "(", "self", ".", "H", ".", "T", ")", "+", "self", ".", "H", ".", "dot", "(", "self", ".", "H", ".", "T", ")", ".", "T", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "(", "-", "error", ")", "*", "(", "W", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "y", "]", ")", ".", "T", ")", ")", ".", "T", "[", "0", "]", "-", "self", ".", "regU", "*", "x", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "(", "error", ")", "*", "(", "W", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "y", "]", ")", ".", "T", ")", ")", ".", "T", "[", "0", "]", "-", "self", ".", "regI", "*", "y", ")", "\n", "", "self", ".", "Bu", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regU", "*", "bu", ")", "\n", "self", ".", "Bi", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "-", "self", ".", "regI", "*", "bi", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "x", "-", "self", ".", "regU", "*", "x", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "y", "-", "self", ".", "regI", "*", "y", ")", "\n", "\n", "", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "                ", "relations", "=", "self", ".", "social", ".", "getFollowees", "(", "user", ")", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "x", "=", "self", ".", "P", "[", "u", "]", "\n", "for", "followee", "in", "relations", ":", "\n", "                    ", "uf", "=", "self", ".", "data", ".", "getUserId", "(", "followee", ")", "\n", "if", "uf", "!=", "-", "1", "and", "self", ".", "data", ".", "containsUser", "(", "followee", ")", ":", "# followee is in rating set", "\n", "                        ", "self", ".", "loss", "+=", "(", "x", "-", "self", ".", "P", "[", "uf", "]", ")", ".", "dot", "(", "self", ".", "H", ")", ".", "dot", "(", "self", ".", "H", ".", "T", ")", ".", "dot", "(", "(", "x", "-", "self", ".", "P", "[", "uf", "]", ")", ".", "T", ")", "\n", "R", "=", "(", "self", ".", "H", ".", "dot", "(", "self", ".", "H", ".", "T", ")", "+", "self", ".", "H", ".", "T", ".", "dot", "(", "self", ".", "H", ")", ")", "\n", "derivative_s", "=", "self", ".", "H", ".", "dot", "(", "(", "x", "-", "self", ".", "P", "[", "uf", "]", ")", ".", "T", ".", "dot", "(", "x", "-", "self", ".", "P", "[", "uf", "]", ")", ")", "\n", "delta", "=", "R", ".", "dot", "(", "np", ".", "array", "(", "[", "x", "-", "self", ".", "P", "[", "uf", "]", "]", ")", ".", "T", ")", ".", "T", "[", "0", "]", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "eta", "*", "self", ".", "beta", "*", "delta", "\n", "self", ".", "H", "-=", "self", ".", "lRate", "*", "self", ".", "eta", "*", "self", ".", "beta", "*", "derivative_s", "\n", "", "", "", "epoch", "+=", "1", "\n", "self", ".", "loss", "+=", "self", ".", "regU", "*", "self", ".", "Bu", ".", "dot", "(", "self", ".", "Bu", ")", "+", "self", ".", "regI", "*", "self", ".", "Bi", ".", "dot", "(", "self", ".", "Bi", ")", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialFD.SocialFD.predictForRating": [[92, 102], ["SocialFD.SocialFD.data.containsUser", "SocialFD.SocialFD.data.containsItem", "SocialFD.SocialFD.data.getUserId", "SocialFD.SocialFD.data.getItemId"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getItemId"], ["", "", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "i", "=", "self", ".", "data", ".", "getItemId", "(", "i", ")", "\n", "x", "=", "self", ".", "P", "[", "u", "]", "\n", "y", "=", "self", ".", "Q", "[", "i", "]", "\n", "d", "=", "(", "x", "-", "y", ")", ".", "dot", "(", "self", ".", "H", ")", ".", "dot", "(", "self", ".", "H", ".", "T", ")", ".", "dot", "(", "(", "x", "-", "y", ")", ".", "T", ")", "\n", "return", "self", ".", "Bi", "[", "i", "]", "+", "self", ".", "Bu", "[", "u", "]", "+", "self", ".", "data", ".", "globalMean", "-", "d", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", ".", "globalMean", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SocialFD.SocialFD.predictForRanking": [[104, 115], ["SocialFD.SocialFD.data.containsUser", "numpy.array", "SocialFD.SocialFD.H.dot", "enumerate", "numpy.array", "len", "SocialFD.SocialFD.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "x", "=", "self", ".", "P", "[", "u", "]", "\n", "res", "=", "np", ".", "array", "(", "[", "0", "]", "*", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ",", "dtype", "=", "float", ")", "\n", "A", "=", "self", ".", "H", ".", "dot", "(", "self", ".", "H", ".", "T", ")", "\n", "for", "i", ",", "y", "in", "enumerate", "(", "self", ".", "Q", ")", ":", "\n", "                ", "res", "[", "i", "]", "=", "self", ".", "Bi", "[", "i", "]", "+", "self", ".", "Bu", "[", "u", "]", "+", "self", ".", "data", ".", "globalMean", "-", "(", "(", "x", "-", "y", ")", ".", "dot", "(", "A", ")", ".", "dot", "(", "(", "x", "-", "y", ")", ".", "T", ")", ")", "\n", "", "return", "res", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "self", ".", "data", ".", "globalMean", "]", "*", "len", "(", "self", ".", "data", ".", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SlopeOne.SlopeOne.__init__": [[4, 8], ["base.recommender.Recommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SlopeOne", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "self", ".", "diffAverage", "=", "{", "}", "\n", "self", ".", "freq", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SlopeOne.SlopeOne.initModel": [[9, 11], ["SlopeOne.SlopeOne.computeAverage"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SlopeOne.SlopeOne.computeAverage"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "computeAverage", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SlopeOne.SlopeOne.computeAverage": [[12, 33], ["print", "SlopeOne.SlopeOne.data.sCol", "SlopeOne.SlopeOne.data.sCol", "freq_sub.setdefault", "diffAverage_sub.setdefault", "diffAverage_sub.setdefault"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sCol", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sCol"], ["", "def", "computeAverage", "(", "self", ")", ":", "\n", "        ", "for", "item", "in", "self", ".", "data", ".", "testSet_i", ":", "\n", "            ", "freq_sub", "=", "{", "}", "\n", "diffAverage_sub", "=", "{", "}", "\n", "for", "item2", "in", "self", ".", "data", ".", "item", ":", "\n", "                ", "x1", "=", "self", ".", "data", ".", "sCol", "(", "item", ")", "\n", "x2", "=", "self", ".", "data", ".", "sCol", "(", "item2", ")", "\n", "diff", "=", "0.0", "\n", "commonItem", "=", "0", "\n", "for", "key", "in", "x1", ":", "\n", "                    ", "if", "key", "in", "x2", ":", "\n", "                        ", "diff", "+=", "x1", "[", "key", "]", "-", "x2", "[", "key", "]", "\n", "commonItem", "+=", "1", "\n", "", "", "if", "commonItem", "==", "0", ":", "\n", "                    ", "diffAverage_sub", ".", "setdefault", "(", "item2", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "diffAverage_sub", ".", "setdefault", "(", "item2", ",", "diff", "/", "commonItem", ")", "\n", "", "freq_sub", ".", "setdefault", "(", "item2", ",", "commonItem", ")", "\n", "", "print", "(", "'item '", "+", "item", "+", "\" finished.\"", ")", "\n", "self", ".", "diffAverage", "[", "item", "]", "=", "diffAverage_sub", "\n", "self", ".", "freq", "[", "item", "]", "=", "freq_sub", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SlopeOne.SlopeOne.predictForRating": [[34, 55], ["SlopeOne.SlopeOne.data.containsUser", "SlopeOne.SlopeOne.data.userRated", "zip", "SlopeOne.SlopeOne.data.containsItem", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem"], ["", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "# check if the user existed in trainSet or not", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "sum", "=", "0", "\n", "freqSum", "=", "0", "\n", "itemRated", ",", "ratings", "=", "self", ".", "data", ".", "userRated", "(", "u", ")", "\n", "for", "item", ",", "rating", "in", "zip", "(", "itemRated", ",", "ratings", ")", ":", "\n", "                ", "diff", "=", "self", ".", "diffAverage", "[", "i", "]", "[", "item", "]", "\n", "count", "=", "self", ".", "freq", "[", "i", "]", "[", "item", "]", "\n", "sum", "+=", "(", "rating", "+", "diff", ")", "*", "count", "\n", "freqSum", "+=", "count", "\n", "", "try", ":", "\n", "                ", "pred", "=", "float", "(", "sum", ")", "/", "freqSum", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                ", "pred", "=", "self", ".", "data", ".", "userMeans", "[", "u", "]", "\n", "", "", "elif", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "pred", "=", "self", ".", "data", ".", "itemMeans", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "pred", "=", "self", ".", "data", ".", "globalMean", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.CUNE_MF.CUNE_MF.__init__": [[130, 134], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "CUNE_MF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "self", ".", "nonLeafVec", "=", "{", "}", "\n", "self", ".", "leafVec", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.CUNE_MF.CUNE_MF.readConfiguration": [[136, 146], ["super().readConfiguration", "util.config.OptionConf", "int", "int", "int", "int", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "CUNE_MF", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "options", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'CUNE-MF'", "]", ")", "\n", "self", ".", "walkCount", "=", "int", "(", "options", "[", "'-T'", "]", ")", "\n", "self", ".", "walkLength", "=", "int", "(", "options", "[", "'-L'", "]", ")", "\n", "self", ".", "walkDim", "=", "int", "(", "options", "[", "'-l'", "]", ")", "\n", "self", ".", "winSize", "=", "int", "(", "options", "[", "'-w'", "]", ")", "\n", "self", ".", "topK", "=", "int", "(", "options", "[", "'-k'", "]", ")", "\n", "self", ".", "epoch", "=", "int", "(", "options", "[", "'-ep'", "]", ")", "\n", "self", ".", "alpha", "=", "float", "(", "options", "[", "'-a'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.CUNE_MF.CUNE_MF.printAlgorConfig": [[147, 154], ["super().printAlgorConfig", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "CUNE_MF", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'Walks count per user'", ",", "self", ".", "walkCount", ")", "\n", "print", "(", "'Length of each walk'", ",", "self", ".", "walkLength", ")", "\n", "print", "(", "'Dimension of user embedding'", ",", "self", ".", "walkDim", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.CUNE_MF.CUNE_MF.trainModel": [[155, 307], ["print", "print", "collections.defaultdict", "collections.defaultdict", "print", "collections.defaultdict", "random.shuffle", "print", "gensim.Word2Vec", "print", "print", "print", "print", "set", "range", "numpy.random.rand", "CUNE_MF.CUNE_MF.isConverged", "len", "range", "CUNE_MF.CUNE_MF.walks.append", "sorted", "print", "CUNE_MF.CUNE_MF.filteredRatings[].append", "set", "len", "random.choice", "path.append", "CUNE_MF.CUNE_MF.data.trainingSize", "sims.append", "len", "CUNE_MF.CUNE_MF.P[].dot", "set.intersection", "random.choice", "util.qmath.cosine"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Kind Note: This method will probably take much time.'", ")", "\n", "#build C-U-NET", "\n", "print", "(", "'Building collaborative user network...'", ")", "\n", "#filter isolated nodes", "\n", "self", ".", "itemNet", "=", "{", "}", "\n", "for", "item", "in", "self", ".", "data", ".", "trainSet_i", ":", "\n", "            ", "if", "len", "(", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", ")", ">", "1", ":", "\n", "                ", "self", ".", "itemNet", "[", "item", "]", "=", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", "\n", "", "", "self", ".", "filteredRatings", "=", "defaultdict", "(", "list", ")", "\n", "for", "item", "in", "self", ".", "itemNet", ":", "\n", "            ", "for", "user", "in", "self", ".", "itemNet", "[", "item", "]", ":", "\n", "                ", "if", "self", ".", "itemNet", "[", "item", "]", "[", "user", "]", ">=", "1", ":", "\n", "                    ", "self", ".", "filteredRatings", "[", "user", "]", ".", "append", "(", "item", ")", "\n", "", "", "", "self", ".", "CUNet", "=", "defaultdict", "(", "list", ")", "\n", "for", "user1", "in", "self", ".", "filteredRatings", ":", "\n", "            ", "s1", "=", "set", "(", "self", ".", "filteredRatings", "[", "user1", "]", ")", "\n", "for", "user2", "in", "self", ".", "filteredRatings", ":", "\n", "                ", "if", "user1", "!=", "user2", ":", "\n", "                    ", "s2", "=", "set", "(", "self", ".", "filteredRatings", "[", "user2", "]", ")", "\n", "weight", "=", "len", "(", "s1", ".", "intersection", "(", "s2", ")", ")", "\n", "if", "weight", ">", "0", ":", "\n", "                        ", "self", ".", "CUNet", "[", "user1", "]", "+=", "[", "user2", "]", "*", "weight", "\n", "\n", "\n", "#build Huffman Tree First", "\n", "#get weight", "\n", "# print 'Building Huffman tree...'", "\n", "# #To accelerate the method, the weight is estimated roughly", "\n", "# nodes = {}", "\n", "# for user in self.CUNet:", "\n", "#     nodes[user] = len(self.CUNet[user])", "\n", "# nodes = sorted(nodes.iteritems(),key=lambda d:d[1])", "\n", "# nodes = [HTreeNode(None,None,user[1],user[0]) for user in nodes]", "\n", "# nodeList = OrderedLinkList()", "\n", "# for node in nodes:", "\n", "#     listNode = Node()", "\n", "#     listNode.val = node", "\n", "#     try:", "\n", "#         nodeList.insert(listNode)", "\n", "#     except AttributeError:", "\n", "#         pass", "\n", "# self.HTree = HuffmanTree(vecLength=self.walkDim)", "\n", "# self.HTree.buildTree(nodeList)", "\n", "# print 'Coding for all users...'", "\n", "# self.HTree.coding(self.HTree.root,'',0)", "\n", "\n", "\n", "", "", "", "", "print", "(", "'Generating random deep walks...'", ")", "\n", "self", ".", "walks", "=", "[", "]", "\n", "self", ".", "visited", "=", "defaultdict", "(", "dict", ")", "\n", "for", "user", "in", "self", ".", "CUNet", ":", "\n", "            ", "for", "t", "in", "range", "(", "self", ".", "walkCount", ")", ":", "\n", "                ", "path", "=", "[", "user", "]", "\n", "lastNode", "=", "user", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "walkLength", ")", ":", "\n", "                    ", "nextNode", "=", "choice", "(", "self", ".", "CUNet", "[", "lastNode", "]", ")", "\n", "count", "=", "0", "\n", "while", "nextNode", "in", "self", ".", "visited", "[", "lastNode", "]", ":", "\n", "                        ", "nextNode", "=", "choice", "(", "self", ".", "CUNet", "[", "lastNode", "]", ")", "\n", "#break infinite loop", "\n", "count", "+=", "1", "\n", "if", "count", "==", "10", ":", "\n", "                            ", "break", "\n", "", "", "path", ".", "append", "(", "nextNode", ")", "\n", "self", ".", "visited", "[", "user", "]", "[", "nextNode", "]", "=", "1", "\n", "lastNode", "=", "nextNode", "\n", "", "self", ".", "walks", ".", "append", "(", "path", ")", "\n", "#print path", "\n", "", "", "shuffle", "(", "self", ".", "walks", ")", "\n", "\n", "#Training get top-k friends", "\n", "print", "(", "'Generating user embedding...'", ")", "\n", "# epoch = 1", "\n", "# while epoch <= self.epoch:", "\n", "#     loss = 0", "\n", "#     #slide windows randomly", "\n", "#", "\n", "#     for n in range(self.walkLength/self.winSize):", "\n", "#", "\n", "#         for walk in self.walks:", "\n", "#             center = randint(0, len(walk)-1)", "\n", "#             s = max(0,center-self.winSize/2)", "\n", "#             e = min(center+self.winSize/2,len(walk)-1)", "\n", "#             for user in walk[s:e]:", "\n", "#                 centerUser = walk[center]", "\n", "#                 if user <> centerUser:", "\n", "#                     code = self.HTree.code[user]", "\n", "#                     centerCode = self.HTree.code[centerUser]", "\n", "#                     x = self.HTree.vector[centerCode]", "\n", "#                     for i in range(1,len(code)):", "\n", "#                         prefix = code[0:i]", "\n", "#                         w = self.HTree.vector[prefix]", "\n", "#                         self.HTree.vector[prefix] += self.lRate*(1-sigmoid(w.dot(x)))*x", "\n", "#                         self.HTree.vector[centerCode] += self.lRate*(1-sigmoid(w.dot(x)))*w", "\n", "#                         loss += -log(sigmoid(w.dot(x)),2)", "\n", "#     print 'epoch:', epoch, 'loss:', loss", "\n", "#     epoch+=1", "\n", "model", "=", "w2v", ".", "Word2Vec", "(", "self", ".", "walks", ",", "size", "=", "self", ".", "walkDim", ",", "window", "=", "5", ",", "min_count", "=", "0", ",", "iter", "=", "3", ")", "\n", "print", "(", "'User embedding generated.'", ")", "\n", "\n", "print", "(", "'Constructing similarity matrix...'", ")", "\n", "self", ".", "W", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ",", "self", ".", "walkDim", ")", "/", "10", "\n", "self", ".", "topKSim", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "user1", "in", "self", ".", "CUNet", ":", "\n", "# prefix1 = self.HTree.code[user1]", "\n", "# vec1 = self.HTree.vector[prefix1]", "\n", "            ", "sims", "=", "[", "]", "\n", "u1", "=", "self", ".", "data", ".", "user", "[", "user1", "]", "\n", "self", ".", "W", "[", "u1", "]", "=", "model", ".", "wv", "[", "user1", "]", "\n", "for", "user2", "in", "self", ".", "CUNet", ":", "\n", "                ", "if", "user1", "!=", "user2", ":", "\n", "                    ", "u2", "=", "self", ".", "data", ".", "user", "[", "user2", "]", "\n", "self", ".", "W", "[", "u2", "]", "=", "model", ".", "wv", "[", "user2", "]", "\n", "sims", ".", "append", "(", "(", "user2", ",", "cosine", "(", "self", ".", "W", "[", "u1", "]", ",", "self", ".", "W", "[", "u2", "]", ")", ")", ")", "\n", "", "", "self", ".", "topKSim", "[", "user1", "]", "=", "sorted", "(", "sims", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", ":", "self", ".", "topK", "]", "\n", "i", "+=", "1", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "'progress:'", ",", "i", ",", "'/'", ",", "len", "(", "self", ".", "CUNet", ")", ")", "\n", "", "", "print", "(", "'Similarity matrix finished.'", ")", "\n", "\n", "#print self.topKSim", "\n", "\n", "#matrix decomposition", "\n", "print", "(", "'Decomposing...'", ")", "\n", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "#get user id", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "#get item id", "\n", "error", "=", "rating", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", "\n", "#update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "", "for", "user", "in", "self", ".", "CUNet", ":", "\n", "                ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "friends", "=", "self", ".", "topKSim", "[", "user", "]", "\n", "for", "friend", "in", "friends", ":", "\n", "                    ", "uf", "=", "self", ".", "data", ".", "user", "[", "friend", "[", "0", "]", "]", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "P", "[", "uf", "]", ")", "*", "self", ".", "alpha", "\n", "self", ".", "loss", "+=", "self", ".", "alpha", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "P", "[", "uf", "]", ")", ".", "dot", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "P", "[", "uf", "]", ")", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoRec.SoRec.__init__": [[7, 9], ["list", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "list", "(", ")", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SoRec", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoRec.SoRec.readConfiguration": [[10, 14], ["super().readConfiguration", "util.config.OptionConf", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SoRec", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "regZ", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'SoRec'", "]", ")", "\n", "self", ".", "regZ", "=", "float", "(", "regZ", "[", "'-z'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoRec.SoRec.initModel": [[15, 18], ["super().initModel", "numpy.random.rand", "SoRec.SoRec.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SoRec", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "Z", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ",", "self", ".", "emb_size", ")", "/", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoRec.SoRec.printAlgorConfig": [[19, 24], ["super().printAlgorConfig", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "SoRec", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'regZ: %.3f'", "%", "self", ".", "regZ", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.rating.SoRec.SoRec.trainModel": [[25, 66], ["SoRec.SoRec.isConverged", "SoRec.SoRec.predictForRating", "SoRec.SoRec.data.containsUser", "SoRec.SoRec.data.containsUser", "len", "len", "SoRec.SoRec.social.getFollowers", "SoRec.SoRec.social.getFollowees", "math.sqrt", "SoRec.SoRec.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowers", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "#ratings", "\n", "for", "entry", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "                ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "error", "=", "rating", "-", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "self", ".", "loss", "+=", "error", "**", "2", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "q", "=", "self", ".", "Q", "[", "i", "]", "\n", "# update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "q", "-", "self", ".", "regU", "*", "p", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "error", "*", "p", "-", "self", ".", "regI", "*", "q", ")", "\n", "#relations", "\n", "", "for", "entry", "in", "self", ".", "social", ".", "relation", ":", "\n", "                ", "u", ",", "v", ",", "tuv", "=", "entry", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsUser", "(", "v", ")", ":", "\n", "                    ", "vminus", "=", "len", "(", "self", ".", "social", ".", "getFollowers", "(", "v", ")", ")", "# ~ d - (k)", "\n", "uplus", "=", "len", "(", "self", ".", "social", ".", "getFollowees", "(", "u", ")", ")", "#~ d + (i)", "\n", "try", ":", "\n", "                        ", "weight", "=", "math", ".", "sqrt", "(", "vminus", "/", "(", "uplus", "+", "vminus", "+", "0.0", ")", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                        ", "weight", "=", "1", "\n", "", "v", "=", "self", ".", "data", ".", "user", "[", "v", "]", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "euv", "=", "weight", "*", "tuv", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Z", "[", "v", "]", ")", "# weight * tuv~ cik *", "\n", "self", ".", "loss", "+=", "self", ".", "regS", "*", "(", "euv", "**", "2", ")", "\n", "p", "=", "self", ".", "P", "[", "u", "]", "\n", "z", "=", "self", ".", "Z", "[", "v", "]", "\n", "\n", "# update latent vectors", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "self", ".", "regS", "*", "euv", "*", "z", ")", "\n", "self", ".", "Z", "[", "v", "]", "+=", "self", ".", "lRate", "*", "(", "self", ".", "regS", "*", "euv", "*", "p", "-", "self", ".", "regZ", "*", "z", ")", "\n", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "+", "self", ".", "regZ", "*", "(", "self", ".", "Z", "*", "self", ".", "Z", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.__init__": [[12, 14], ["base.graphRecommender.GraphRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SimGCL", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.readConfiguration": [[15, 21], ["super().readConfiguration", "util.config.OptionConf", "float", "float", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SimGCL", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'SimGCL'", "]", ")", "\n", "self", ".", "cl_rate", "=", "float", "(", "args", "[", "'-lambda'", "]", ")", "\n", "self", ".", "eps", "=", "float", "(", "args", "[", "'-eps'", "]", ")", "\n", "self", ".", "n_layers", "=", "int", "(", "args", "[", "'-n_layer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.LightGCN_encoder": [[22, 29], ["range", "tensorflow.reduce_mean", "tensorflow.split", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.reduce_mean.append"], "methods", ["None"], ["", "def", "LightGCN_encoder", "(", "self", ",", "emb", ",", "adj", ",", "n_layers", ")", ":", "\n", "        ", "all_embs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "emb", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "adj", ",", "emb", ")", "\n", "all_embs", ".", "append", "(", "emb", ")", "\n", "", "all_embs", "=", "tf", ".", "reduce_mean", "(", "all_embs", ",", "axis", "=", "0", ")", "\n", "return", "tf", ".", "split", "(", "all_embs", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.perturbed_LightGCN_encoder": [[30, 39], ["range", "tensorflow.reduce_mean", "tensorflow.split", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.random.uniform", "tensorflow.reduce_mean.append", "tensorflow.multiply", "tensorflow.sign", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "perturbed_LightGCN_encoder", "(", "self", ",", "emb", ",", "adj", ",", "n_layers", ")", ":", "\n", "        ", "all_embs", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "emb", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "adj", ",", "emb", ")", "\n", "random_noise", "=", "tf", ".", "random", ".", "uniform", "(", "emb", ".", "shape", ")", "\n", "emb", "+=", "tf", ".", "multiply", "(", "tf", ".", "sign", "(", "emb", ")", ",", "tf", ".", "nn", ".", "l2_normalize", "(", "random_noise", ",", "1", ")", ")", "*", "self", ".", "eps", "\n", "all_embs", ".", "append", "(", "emb", ")", "\n", "", "all_embs", "=", "tf", ".", "reduce_mean", "(", "all_embs", ",", "axis", "=", "0", ")", "\n", "return", "tf", ".", "split", "(", "all_embs", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.initModel": [[40, 56], ["super().initModel", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.placeholder", "tensorflow.concat", "SimGCL.SimGCL.create_joint_sparse_adj_tensor", "SimGCL.SimGCL.LightGCN_encoder", "SimGCL.SimGCL.perturbed_LightGCN_encoder", "SimGCL.SimGCL.perturbed_LightGCN_encoder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_joint_sparse_adj_tensor", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.LightGCN_encoder", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.perturbed_LightGCN_encoder", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.perturbed_LightGCN_encoder"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SimGCL", ",", "self", ")", ".", "initModel", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ")", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_items", ",", "self", ".", "emb_size", "]", ")", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "#adjaceny matrix", "\n", "self", ".", "norm_adj", "=", "self", ".", "create_joint_sparse_adj_tensor", "(", ")", "\n", "#encoding", "\n", "self", ".", "main_user_embeddings", ",", "self", ".", "main_item_embeddings", "=", "self", ".", "LightGCN_encoder", "(", "ego_embeddings", ",", "self", ".", "norm_adj", ",", "self", ".", "n_layers", ")", "\n", "self", ".", "perturbed_user_embeddings1", ",", "self", ".", "perturbed_item_embeddings1", "=", "self", ".", "perturbed_LightGCN_encoder", "(", "ego_embeddings", ",", "self", ".", "norm_adj", ",", "self", ".", "n_layers", ")", "\n", "self", ".", "perturbed_user_embeddings2", ",", "self", ".", "perturbed_item_embeddings2", "=", "self", ".", "perturbed_LightGCN_encoder", "(", "ego_embeddings", ",", "self", ".", "norm_adj", ",", "self", ".", "n_layers", ")", "\n", "self", ".", "batch_neg_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "main_item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "batch_user_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "main_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "batch_pos_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "main_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.saveModel": [[57, 59], ["SimGCL.SimGCL.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "saveModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "bestU", ",", "self", ".", "bestV", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "main_user_embeddings", ",", "self", ".", "main_item_embeddings", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.calc_cl_loss": [[60, 91], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.exp", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.unique", "tensorflow.unique", "tensorflow.unique", "tensorflow.unique", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log"], "methods", ["None"], ["", "def", "calc_cl_loss", "(", "self", ")", ":", "\n", "        ", "p_user_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "perturbed_user_embeddings1", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "p_item_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "perturbed_item_embeddings1", ",", "tf", ".", "unique", "(", "self", ".", "v_idx", ")", "[", "0", "]", ")", "\n", "p_user_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "perturbed_user_embeddings2", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "p_item_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "perturbed_item_embeddings2", ",", "tf", ".", "unique", "(", "self", ".", "v_idx", ")", "[", "0", "]", ")", "\n", "# group contrast", "\n", "normalize_emb_user1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "p_user_emb1", ",", "1", ")", "\n", "normalize_emb_user2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "p_user_emb2", ",", "1", ")", "\n", "normalize_emb_item1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "p_item_emb1", ",", "1", ")", "\n", "normalize_emb_item2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "p_item_emb2", ",", "1", ")", "\n", "pos_score_u", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_emb_user1", ",", "normalize_emb_user2", ")", ",", "axis", "=", "1", ")", "\n", "pos_score_i", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_emb_item1", ",", "normalize_emb_item2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score_u", "=", "tf", ".", "matmul", "(", "normalize_emb_user1", ",", "normalize_emb_user2", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "ttl_score_i", "=", "tf", ".", "matmul", "(", "normalize_emb_item1", ",", "normalize_emb_item2", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "pos_score_u", "=", "tf", ".", "exp", "(", "pos_score_u", "/", "0.2", ")", "\n", "ttl_score_u", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score_u", "/", "0.2", ")", ",", "axis", "=", "1", ")", "\n", "pos_score_i", "=", "tf", ".", "exp", "(", "pos_score_i", "/", "0.2", ")", "\n", "ttl_score_i", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score_i", "/", "0.2", ")", ",", "axis", "=", "1", ")", "\n", "cl_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score_u", "/", "ttl_score_u", ")", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score_i", "/", "ttl_score_i", ")", ")", "\n", "\n", "#hybrid contrast", "\n", "# emb_merge1 = tf.concat([p_user_emb1, p_item_emb1], axis=0)", "\n", "# emb_merge2 = tf.concat([p_user_emb2, p_item_emb2], axis=0)", "\n", "# normalize_emb_merge1 = tf.nn.l2_normalize(emb_merge1, 1)", "\n", "# normalize_emb_merge2 = tf.nn.l2_normalize(emb_merge2, 1)", "\n", "# pos_score = tf.reduce_sum(tf.multiply(normalize_emb_merge1, normalize_emb_merge2), axis=1)", "\n", "# ttl_score = tf.matmul(normalize_emb_merge1, normalize_emb_merge2, transpose_a=False, transpose_b=True)", "\n", "# pos_score = tf.exp(pos_score /0.2)", "\n", "# ttl_score = tf.reduce_sum(tf.exp(ttl_score /0.2), axis=1)", "\n", "# cl_loss = -tf.reduce_sum(tf.log(pos_score / ttl_score))", "\n", "return", "self", ".", "cl_rate", "*", "cl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.trainModel": [[92, 112], ["util.loss.bpr_loss", "SimGCL.SimGCL.calc_cl_loss", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "SimGCL.SimGCL.sess.run", "range", "enumerate", "SimGCL.SimGCL.sess.run", "SimGCL.SimGCL.ranking_performance", "tensorflow.nn.l2_loss", "SimGCL.SimGCL.next_batch_pairwise", "SimGCL.SimGCL.sess.run", "print", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.loss.bpr_loss", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.calc_cl_loss", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.ranking_performance", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "#main task: recommendation", "\n", "        ", "rec_loss", "=", "bpr_loss", "(", "self", ".", "batch_user_emb", ",", "self", ".", "batch_pos_item_emb", ",", "self", ".", "batch_neg_item_emb", ")", "\n", "rec_loss", "+=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_user_emb", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_pos_item_emb", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_neg_item_emb", ")", ")", "\n", "#CL task", "\n", "self", ".", "cl_loss", "=", "self", ".", "calc_cl_loss", "(", ")", "\n", "loss", "=", "rec_loss", "+", "self", ".", "cl_loss", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "_", ",", "l", ",", "rec_l", ",", "cl_l", "=", "self", ".", "sess", ".", "run", "(", "[", "train", ",", "loss", ",", "rec_loss", ",", "self", ".", "cl_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", "}", ")", "\n", "print", "(", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'total_loss:'", ",", "l", ",", "'rec_loss:'", ",", "rec_l", ",", "'cl_loss'", ",", "cl_l", ")", "\n", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "main_user_embeddings", ",", "self", ".", "main_item_embeddings", "]", ")", "\n", "self", ".", "ranking_performance", "(", "epoch", ")", "\n", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "bestU", ",", "self", ".", "bestV", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SimGCL.SimGCL.predictForRanking": [[113, 119], ["SimGCL.SimGCL.data.containsUser", "SimGCL.SimGCL.data.getUserId", "SimGCL.SimGCL.V.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "V", ".", "dot", "(", "self", ".", "U", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.__init__": [[16, 19], ["base.graphRecommender.GraphRecommender.__init__", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "GraphRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "fold", "=", "fold", ")", "\n", "SocialRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "relation", "=", "relation", ",", "fold", "=", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.readConfiguration": [[20, 25], ["super().readConfiguration", "util.config.OptionConf", "int", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "MHCN", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'MHCN'", "]", ")", "\n", "self", ".", "n_layers", "=", "int", "(", "args", "[", "'-n_layer'", "]", ")", "\n", "self", ".", "ss_rate", "=", "float", "(", "args", "[", "'-ss_rate'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.buildSparseRelationMatrix": [[26, 35], ["scipy.sparse.coo_matrix"], "methods", ["None"], ["", "def", "buildSparseRelationMatrix", "(", "self", ")", ":", "\n", "        ", "row", ",", "col", ",", "entries", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "pair", "in", "self", ".", "social", ".", "relation", ":", "\n", "# symmetric matrix", "\n", "            ", "row", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "]", "\n", "col", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "1", "]", "]", "]", "\n", "entries", "+=", "[", "1.0", "]", "\n", "", "AdjacencyMatrix", "=", "coo_matrix", "(", "(", "entries", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_users", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "AdjacencyMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.buildSparseRatingMatrix": [[36, 45], ["scipy.sparse.coo_matrix"], "methods", ["None"], ["", "def", "buildSparseRatingMatrix", "(", "self", ")", ":", "\n", "        ", "row", ",", "col", ",", "entries", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "pair", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "# symmetric matrix", "\n", "            ", "row", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "]", "\n", "col", "+=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "]", "\n", "entries", "+=", "[", "1.0", "]", "\n", "", "ratingMatrix", "=", "coo_matrix", "(", "(", "entries", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "ratingMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.buildJointAdjacency": [[46, 53], ["tensorflow.SparseTensor", "math.sqrt", "float", "math.sqrt", "len", "len"], "methods", ["None"], ["", "def", "buildJointAdjacency", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "[", "self", ".", "data", ".", "user", "[", "item", "[", "0", "]", "]", ",", "self", ".", "data", ".", "item", "[", "item", "[", "1", "]", "]", "]", "for", "item", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "values", "=", "[", "float", "(", "item", "[", "2", "]", ")", "/", "sqrt", "(", "len", "(", "self", ".", "data", ".", "trainSet_u", "[", "item", "[", "0", "]", "]", ")", ")", "/", "sqrt", "(", "len", "(", "self", ".", "data", ".", "trainSet_i", "[", "item", "[", "1", "]", "]", ")", ")", "\n", "for", "item", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "norm_adj", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "indices", ",", "values", "=", "values", ",", "\n", "dense_shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ")", "\n", "return", "norm_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.buildMotifInducedAdjacencyMatrix": [[54, 86], ["MHCN.MHCN.buildSparseRelationMatrix", "MHCN.MHCN.buildSparseRatingMatrix", "MHCN.MHCN.tocsr", "MHCN.MHCN.T.tocsr", "MHCN.MHCN.multiply", "U.dot().multiply", "MHCN.MHCN.multiply.dot().multiply", "MHCN.MHCN.dot().multiply", "MHCN.MHCN.dot().multiply", "sum", "H_s.multiply.multiply.multiply", "sum", "H_j.multiply.multiply.multiply", "H_p.multiply.multiply.multiply", "H_p.multiply.multiply.multiply", "U.dot().multiply", "U.dot().multiply", "U.T.dot().multiply", "U.T.dot().multiply", "U.dot().multiply", "U.dot", "MHCN.MHCN.multiply.dot().multiply", "U.dot().multiply", "MHCN.MHCN.multiply.dot().multiply", "MHCN.MHCN.multiply.dot().multiply", "MHCN.MHCN.multiply.dot", "U.dot().multiply", "U.dot().multiply", "U.dot().multiply", "MHCN.MHCN.multiply.dot().multiply", "U.T.dot().multiply", "MHCN.MHCN.multiply.dot().multiply", "MHCN.MHCN.dot", "MHCN.MHCN.dot", "MHCN.MHCN.dot", "H_s.multiply.multiply.sum().reshape", "H_j.multiply.multiply.sum().reshape", "H_p.multiply.multiply.sum().reshape", "U.dot", "U.dot", "U.T.dot", "U.T.dot", "U.dot", "MHCN.MHCN.multiply.dot", "U.dot", "MHCN.MHCN.multiply.dot", "MHCN.MHCN.multiply.dot", "U.dot", "U.dot", "U.dot", "MHCN.MHCN.multiply.dot", "U.T.dot", "MHCN.MHCN.multiply.dot", "H_s.multiply.multiply.sum", "H_j.multiply.multiply.sum", "H_p.multiply.multiply.sum"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildSparseRelationMatrix", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildSparseRatingMatrix"], ["", "def", "buildMotifInducedAdjacencyMatrix", "(", "self", ")", ":", "\n", "        ", "S", "=", "self", ".", "buildSparseRelationMatrix", "(", ")", "\n", "Y", "=", "self", ".", "buildSparseRatingMatrix", "(", ")", "\n", "self", ".", "userAdjacency", "=", "Y", ".", "tocsr", "(", ")", "\n", "self", ".", "itemAdjacency", "=", "Y", ".", "T", ".", "tocsr", "(", ")", "\n", "B", "=", "S", ".", "multiply", "(", "S", ".", "T", ")", "\n", "U", "=", "S", "-", "B", "\n", "C1", "=", "(", "U", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ".", "T", ")", "\n", "A1", "=", "C1", "+", "C1", ".", "T", "\n", "C2", "=", "(", "B", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ".", "T", ")", "+", "(", "U", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "U", ".", "T", ")", "+", "(", "U", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A2", "=", "C2", "+", "C2", ".", "T", "\n", "C3", "=", "(", "B", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "B", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "B", ")", "+", "(", "U", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A3", "=", "C3", "+", "C3", ".", "T", "\n", "A4", "=", "(", "B", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "B", ")", "\n", "C5", "=", "(", "U", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "U", ".", "dot", "(", "U", ".", "T", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "U", ".", "T", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ")", "\n", "A5", "=", "C5", "+", "C5", ".", "T", "\n", "A6", "=", "(", "U", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "B", ".", "dot", "(", "U", ".", "T", ")", ")", ".", "multiply", "(", "U", ".", "T", ")", "+", "(", "U", ".", "T", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A7", "=", "(", "U", ".", "T", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "U", ".", "T", ")", "+", "(", "B", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "U", ".", "dot", "(", "U", ".", "T", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A8", "=", "(", "Y", ".", "dot", "(", "Y", ".", "T", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A9", "=", "(", "Y", ".", "dot", "(", "Y", ".", "T", ")", ")", ".", "multiply", "(", "U", ")", "\n", "A9", "=", "A9", "+", "A9", ".", "T", "\n", "A10", "=", "Y", ".", "dot", "(", "Y", ".", "T", ")", "-", "A8", "-", "A9", "\n", "#addition and row-normalization", "\n", "H_s", "=", "sum", "(", "[", "A1", ",", "A2", ",", "A3", ",", "A4", ",", "A5", ",", "A6", ",", "A7", "]", ")", "\n", "H_s", "=", "H_s", ".", "multiply", "(", "1.0", "/", "H_s", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "H_j", "=", "sum", "(", "[", "A8", ",", "A9", "]", ")", "\n", "H_j", "=", "H_j", ".", "multiply", "(", "1.0", "/", "H_j", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "H_p", "=", "A10", "\n", "H_p", "=", "H_p", ".", "multiply", "(", "H_p", ">", "1", ")", "\n", "H_p", "=", "H_p", ".", "multiply", "(", "1.0", "/", "H_p", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "return", "[", "H_s", ",", "H_j", ",", "H_p", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.adj_to_sparse_tensor": [[87, 92], ["tensorflow.SparseTensor.tocoo", "numpy.mat", "tensorflow.SparseTensor", "list", "tensorflow.SparseTensor.data.astype", "zip"], "methods", ["None"], ["", "def", "adj_to_sparse_tensor", "(", "self", ",", "adj", ")", ":", "\n", "        ", "adj", "=", "adj", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "list", "(", "zip", "(", "adj", ".", "row", ",", "adj", ".", "col", ")", ")", ")", "\n", "adj", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "adj", ".", "data", ".", "astype", "(", "np", ".", "float32", ")", ",", "adj", ".", "shape", ")", "\n", "return", "adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.initModel": [[93, 183], ["super().initModel", "MHCN.MHCN.buildMotifInducedAdjacencyMatrix", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.placeholder", "range", "tensorflow.Variable", "tensorflow.Variable", "MHCN.MHCN.adj_to_sparse_tensor", "MHCN.MHCN.adj_to_sparse_tensor", "MHCN.MHCN.adj_to_sparse_tensor", "MHCN.MHCN.buildJointAdjacency", "MHCN.MHCN."], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildMotifInducedAdjacencyMatrix", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.adj_to_sparse_tensor", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.adj_to_sparse_tensor", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.adj_to_sparse_tensor", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.buildJointAdjacency"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "MHCN", ",", "self", ")", ".", "initModel", "(", ")", "\n", "M_matrices", "=", "self", ".", "buildMotifInducedAdjacencyMatrix", "(", ")", "\n", "self", ".", "weights", "=", "{", "}", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "n_channel", "=", "4", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "#define learnable paramters", "\n", "for", "i", "in", "range", "(", "self", ".", "n_channel", ")", ":", "\n", "            ", "self", ".", "weights", "[", "'gating%d'", "%", "(", "i", "+", "1", ")", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'g_W_%d_1'", "%", "(", "i", "+", "1", ")", ")", "\n", "self", ".", "weights", "[", "'gating_bias%d'", "%", "(", "i", "+", "1", ")", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "1", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'g_W_b_%d_1'", "%", "(", "i", "+", "1", ")", ")", "\n", "self", ".", "weights", "[", "'sgating%d'", "%", "(", "i", "+", "1", ")", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'sg_W_%d_1'", "%", "(", "i", "+", "1", ")", ")", "\n", "self", ".", "weights", "[", "'sgating_bias%d'", "%", "(", "i", "+", "1", ")", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "1", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'sg_W_b_%d_1'", "%", "(", "i", "+", "1", ")", ")", "\n", "", "self", ".", "weights", "[", "'attention'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "1", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'at'", ")", "\n", "self", ".", "weights", "[", "'attention_mat'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'atm'", ")", "\n", "#define inline functions", "\n", "def", "self_gating", "(", "em", ",", "channel", ")", ":", "\n", "            ", "return", "tf", ".", "multiply", "(", "em", ",", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "em", ",", "self", ".", "weights", "[", "'gating%d'", "%", "channel", "]", ")", "+", "self", ".", "weights", "[", "'gating_bias%d'", "%", "channel", "]", ")", ")", "\n", "", "def", "self_supervised_gating", "(", "em", ",", "channel", ")", ":", "\n", "            ", "return", "tf", ".", "multiply", "(", "em", ",", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "em", ",", "self", ".", "weights", "[", "'sgating%d'", "%", "channel", "]", ")", "+", "self", ".", "weights", "[", "'sgating_bias%d'", "%", "channel", "]", ")", ")", "\n", "", "def", "channel_attention", "(", "*", "channel_embeddings", ")", ":", "\n", "            ", "weights", "=", "[", "]", "\n", "for", "embedding", "in", "channel_embeddings", ":", "\n", "                ", "weights", ".", "append", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "weights", "[", "'attention'", "]", ",", "tf", ".", "matmul", "(", "embedding", ",", "self", ".", "weights", "[", "'attention_mat'", "]", ")", ")", ",", "1", ")", ")", "\n", "", "score", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "weights", ")", ")", "\n", "mixed_embeddings", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "weights", ")", ")", ":", "\n", "                ", "mixed_embeddings", "+=", "tf", ".", "transpose", "(", "tf", ".", "multiply", "(", "tf", ".", "transpose", "(", "score", ")", "[", "i", "]", ",", "tf", ".", "transpose", "(", "channel_embeddings", "[", "i", "]", ")", ")", ")", "\n", "", "return", "mixed_embeddings", ",", "score", "\n", "#initialize adjacency matrices", "\n", "", "H_s", "=", "M_matrices", "[", "0", "]", "\n", "H_s", "=", "self", ".", "adj_to_sparse_tensor", "(", "H_s", ")", "\n", "H_j", "=", "M_matrices", "[", "1", "]", "\n", "H_j", "=", "self", ".", "adj_to_sparse_tensor", "(", "H_j", ")", "\n", "H_p", "=", "M_matrices", "[", "2", "]", "\n", "H_p", "=", "self", ".", "adj_to_sparse_tensor", "(", "H_p", ")", "\n", "R", "=", "self", ".", "buildJointAdjacency", "(", ")", "\n", "#self-gating", "\n", "user_embeddings_c1", "=", "self_gating", "(", "self", ".", "user_embeddings", ",", "1", ")", "\n", "user_embeddings_c2", "=", "self_gating", "(", "self", ".", "user_embeddings", ",", "2", ")", "\n", "user_embeddings_c3", "=", "self_gating", "(", "self", ".", "user_embeddings", ",", "3", ")", "\n", "simple_user_embeddings", "=", "self_gating", "(", "self", ".", "user_embeddings", ",", "4", ")", "\n", "all_embeddings_c1", "=", "[", "user_embeddings_c1", "]", "\n", "all_embeddings_c2", "=", "[", "user_embeddings_c2", "]", "\n", "all_embeddings_c3", "=", "[", "user_embeddings_c3", "]", "\n", "all_embeddings_simple", "=", "[", "simple_user_embeddings", "]", "\n", "item_embeddings", "=", "self", ".", "item_embeddings", "\n", "all_embeddings_i", "=", "[", "item_embeddings", "]", "\n", "\n", "self", ".", "ss_loss", "=", "0", "\n", "#multi-channel convolution", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "mixed_embedding", "=", "channel_attention", "(", "user_embeddings_c1", ",", "user_embeddings_c2", ",", "user_embeddings_c3", ")", "[", "0", "]", "+", "simple_user_embeddings", "/", "2", "\n", "#Channel S", "\n", "user_embeddings_c1", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "H_s", ",", "user_embeddings_c1", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "user_embeddings_c1", ",", "axis", "=", "1", ")", "\n", "all_embeddings_c1", "+=", "[", "norm_embeddings", "]", "\n", "#Channel J", "\n", "user_embeddings_c2", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "H_j", ",", "user_embeddings_c2", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "user_embeddings_c2", ",", "axis", "=", "1", ")", "\n", "all_embeddings_c2", "+=", "[", "norm_embeddings", "]", "\n", "#Channel P", "\n", "user_embeddings_c3", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "H_p", ",", "user_embeddings_c3", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "user_embeddings_c3", ",", "axis", "=", "1", ")", "\n", "all_embeddings_c3", "+=", "[", "norm_embeddings", "]", "\n", "# item convolution", "\n", "new_item_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "tf", ".", "sparse", ".", "transpose", "(", "R", ")", ",", "mixed_embedding", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "new_item_embeddings", ",", "axis", "=", "1", ")", "\n", "all_embeddings_i", "+=", "[", "norm_embeddings", "]", "\n", "simple_user_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "R", ",", "item_embeddings", ")", "\n", "all_embeddings_simple", "+=", "[", "tf", ".", "math", ".", "l2_normalize", "(", "simple_user_embeddings", ",", "axis", "=", "1", ")", "]", "\n", "item_embeddings", "=", "new_item_embeddings", "\n", "#averaging the channel-specific embeddings", "\n", "", "user_embeddings_c1", "=", "tf", ".", "reduce_sum", "(", "all_embeddings_c1", ",", "axis", "=", "0", ")", "\n", "user_embeddings_c2", "=", "tf", ".", "reduce_sum", "(", "all_embeddings_c2", ",", "axis", "=", "0", ")", "\n", "user_embeddings_c3", "=", "tf", ".", "reduce_sum", "(", "all_embeddings_c3", ",", "axis", "=", "0", ")", "\n", "simple_user_embeddings", "=", "tf", ".", "reduce_sum", "(", "all_embeddings_simple", ",", "axis", "=", "0", ")", "\n", "item_embeddings", "=", "tf", ".", "reduce_sum", "(", "all_embeddings_i", ",", "axis", "=", "0", ")", "\n", "#aggregating channel-specific embeddings", "\n", "self", ".", "final_item_embeddings", "=", "item_embeddings", "\n", "self", ".", "final_user_embeddings", ",", "self", ".", "attention_score", "=", "channel_attention", "(", "user_embeddings_c1", ",", "user_embeddings_c2", ",", "user_embeddings_c3", ")", "\n", "self", ".", "final_user_embeddings", "+=", "simple_user_embeddings", "/", "2", "\n", "#create self-supervised loss", "\n", "self", ".", "ss_loss", "+=", "self", ".", "hierarchical_self_supervision", "(", "self_supervised_gating", "(", "self", ".", "final_user_embeddings", ",", "1", ")", ",", "H_s", ")", "\n", "self", ".", "ss_loss", "+=", "self", ".", "hierarchical_self_supervision", "(", "self_supervised_gating", "(", "self", ".", "final_user_embeddings", ",", "2", ")", ",", "H_j", ")", "\n", "self", ".", "ss_loss", "+=", "self", ".", "hierarchical_self_supervision", "(", "self_supervised_gating", "(", "self", ".", "final_user_embeddings", ",", "3", ")", ",", "H_p", ")", "\n", "#embedding look-up", "\n", "self", ".", "batch_neg_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "final_item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "batch_user_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "final_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "batch_pos_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "final_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.hierarchical_self_supervision": [[184, 207], ["tensorflow.sparse_tensor_dense_matmul", "MHCN.MHCN.hierarchical_self_supervision.score"], "methods", ["None"], ["", "def", "hierarchical_self_supervision", "(", "self", ",", "em", ",", "adj", ")", ":", "\n", "        ", "def", "row_shuffle", "(", "embedding", ")", ":", "\n", "            ", "return", "tf", ".", "gather", "(", "embedding", ",", "tf", ".", "random", ".", "shuffle", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "embedding", ")", "[", "0", "]", ")", ")", ")", "\n", "", "def", "row_column_shuffle", "(", "embedding", ")", ":", "\n", "            ", "corrupted_embedding", "=", "tf", ".", "transpose", "(", "tf", ".", "gather", "(", "tf", ".", "transpose", "(", "embedding", ")", ",", "tf", ".", "random", ".", "shuffle", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "tf", ".", "transpose", "(", "embedding", ")", ")", "[", "0", "]", ")", ")", ")", ")", "\n", "corrupted_embedding", "=", "tf", ".", "gather", "(", "corrupted_embedding", ",", "tf", ".", "random", ".", "shuffle", "(", "tf", ".", "range", "(", "tf", ".", "shape", "(", "corrupted_embedding", ")", "[", "0", "]", ")", ")", ")", "\n", "return", "corrupted_embedding", "\n", "", "def", "score", "(", "x1", ",", "x2", ")", ":", "\n", "            ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "x1", ",", "x2", ")", ",", "1", ")", "\n", "", "user_embeddings", "=", "em", "\n", "# user_embeddings = tf.math.l2_normalize(em,1) #For Douban, normalization is needed.", "\n", "edge_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "adj", ",", "user_embeddings", ")", "\n", "#Local MIM", "\n", "pos", "=", "score", "(", "user_embeddings", ",", "edge_embeddings", ")", "\n", "neg1", "=", "score", "(", "row_shuffle", "(", "user_embeddings", ")", ",", "edge_embeddings", ")", "\n", "neg2", "=", "score", "(", "row_column_shuffle", "(", "edge_embeddings", ")", ",", "user_embeddings", ")", "\n", "local_loss", "=", "tf", ".", "reduce_sum", "(", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "pos", "-", "neg1", ")", ")", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "neg1", "-", "neg2", ")", ")", ")", "\n", "#Global MIM", "\n", "graph", "=", "tf", ".", "reduce_mean", "(", "edge_embeddings", ",", "0", ")", "\n", "pos", "=", "score", "(", "edge_embeddings", ",", "graph", ")", "\n", "neg1", "=", "score", "(", "row_column_shuffle", "(", "edge_embeddings", ")", ",", "graph", ")", "\n", "global_loss", "=", "tf", ".", "reduce_sum", "(", "-", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "pos", "-", "neg1", ")", ")", ")", "\n", "return", "global_loss", "+", "local_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.trainModel": [[208, 230], ["util.loss.bpr_loss", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "MHCN.MHCN.sess.run", "range", "enumerate", "MHCN.MHCN.sess.run", "MHCN.MHCN.ranking_performance", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "MHCN.MHCN.next_batch_pairwise", "MHCN.MHCN.sess.run", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.loss.bpr_loss", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.ranking_performance", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "rec_loss", "=", "bpr_loss", "(", "self", ".", "batch_user_emb", ",", "self", ".", "batch_pos_item_emb", ",", "self", ".", "batch_neg_item_emb", ")", "\n", "reg_loss", "=", "0", "\n", "for", "key", "in", "self", ".", "weights", ":", "\n", "            ", "reg_loss", "+=", "0.001", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", "[", "key", "]", ")", "\n", "", "reg_loss", "+=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "user_embeddings", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "item_embeddings", ")", ")", "\n", "total_loss", "=", "rec_loss", "+", "reg_loss", "+", "self", ".", "ss_rate", "*", "self", ".", "ss_loss", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train_op", "=", "opt", ".", "minimize", "(", "total_loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "# Suggested Maximum epoch Setting: LastFM 120 Douban 30 Yelp 30", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "_", ",", "l1", "=", "self", ".", "sess", ".", "run", "(", "[", "train_op", ",", "rec_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", "}", ")", "\n", "print", "(", "self", ".", "foldInfo", ",", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'rec loss:'", ",", "l1", ")", "#,'ss_loss',l2", "\n", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "final_user_embeddings", ",", "self", ".", "final_item_embeddings", "]", ")", "\n", "self", ".", "ranking_performance", "(", "epoch", ")", "\n", "#self.U, self.V = self.sess.run([self.main_user_embeddings, self.main_item_embeddings])", "\n", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "bestU", ",", "self", ".", "bestV", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.saveModel": [[231, 233], ["MHCN.MHCN.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "saveModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "bestU", ",", "self", ".", "bestV", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "final_user_embeddings", ",", "self", ".", "final_item_embeddings", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MHCN.MHCN.predictForRanking": [[234, 241], ["MHCN.MHCN.data.containsUser", "MHCN.MHCN.data.getUserId", "MHCN.MHCN.V.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "V", ".", "dot", "(", "self", ".", "U", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.__init__": [[11, 13], ["base.graphRecommender.GraphRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SGL", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.readConfiguration": [[14, 22], ["super().readConfiguration", "util.config.OptionConf", "float", "float", "int", "float", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SGL", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'SGL'", "]", ")", "\n", "self", ".", "ssl_reg", "=", "float", "(", "args", "[", "'-lambda'", "]", ")", "\n", "self", ".", "drop_rate", "=", "float", "(", "args", "[", "'-droprate'", "]", ")", "\n", "self", ".", "aug_type", "=", "int", "(", "args", "[", "'-augtype'", "]", ")", "\n", "self", ".", "ssl_temp", "=", "float", "(", "args", "[", "'-temp'", "]", ")", "\n", "self", ".", "n_layers", "=", "int", "(", "args", "[", "'-n_layer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.initModel": [[23, 81], ["super().initModel", "SGL.SGL._create_adj_mat", "SGL.SGL._convert_sp_mat_to_sp_tensor", "tensorflow.concat", "SGL.SGL._create_variable", "range", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._create_adj_mat", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._create_variable"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SGL", ",", "self", ")", ".", "initModel", "(", ")", "\n", "norm_adj", "=", "self", ".", "_create_adj_mat", "(", "is_subgraph", "=", "False", ")", "\n", "norm_adj", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "norm_adj", ")", "\n", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "s1_embeddings", "=", "ego_embeddings", "\n", "s2_embeddings", "=", "ego_embeddings", "\n", "all_s1_embeddings", "=", "[", "s1_embeddings", "]", "\n", "all_s2_embeddings", "=", "[", "s2_embeddings", "]", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "#variable initialization", "\n", "self", ".", "_create_variable", "(", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "aug_type", "in", "[", "0", ",", "1", "]", ":", "\n", "                ", "self", ".", "sub_mat", "[", "'sub_mat_1%d'", "%", "k", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1'", "]", ")", "\n", "self", ".", "sub_mat", "[", "'sub_mat_2%d'", "%", "k", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sub_mat", "[", "'sub_mat_1%d'", "%", "k", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", ")", "\n", "self", ".", "sub_mat", "[", "'sub_mat_2%d'", "%", "k", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", ")", "\n", "\n", "#s1 - view", "\n", "", "", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "s1_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "sub_mat", "[", "'sub_mat_1%d'", "%", "k", "]", ",", "s1_embeddings", ")", "\n", "all_s1_embeddings", "+=", "[", "s1_embeddings", "]", "\n", "", "all_s1_embeddings", "=", "tf", ".", "stack", "(", "all_s1_embeddings", ",", "1", ")", "\n", "all_s1_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_s1_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "self", ".", "s1_user_embeddings", ",", "self", ".", "s1_item_embeddings", "=", "tf", ".", "split", "(", "all_s1_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "\n", "#s2 - view", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "s2_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "sub_mat", "[", "'sub_mat_2%d'", "%", "k", "]", ",", "s2_embeddings", ")", "\n", "all_s2_embeddings", "+=", "[", "s2_embeddings", "]", "\n", "", "all_s2_embeddings", "=", "tf", ".", "stack", "(", "all_s2_embeddings", ",", "1", ")", "\n", "all_s2_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_s2_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "self", ".", "s2_user_embeddings", ",", "self", ".", "s2_item_embeddings", "=", "tf", ".", "split", "(", "all_s2_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "#recommendation view", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "ego_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "norm_adj", ",", "ego_embeddings", ")", "\n", "all_embeddings", "+=", "[", "ego_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "stack", "(", "all_embeddings", ",", "1", ")", "\n", "all_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "self", ".", "main_user_embeddings", ",", "self", ".", "main_item_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "batch_neg_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "main_item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "batch_user_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "main_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "batch_pos_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "main_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._convert_sp_mat_to_sp_tensor": [[83, 87], ["X.tocoo().astype", "numpy.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._convert_csr_to_sparse_tensor_inputs": [[88, 92], ["X.tocoo", "numpy.mat().transpose", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._create_variable": [[93, 112], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "_create_variable", "(", "self", ")", ":", "\n", "        ", "self", ".", "sub_mat", "=", "{", "}", "\n", "if", "self", ".", "aug_type", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "self", ".", "sub_mat", "[", "'adj_values_sub1'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "                ", "self", ".", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'adj_values_sub1%d'", "%", "k", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "name", "=", "'adj_indices_sub1%d'", "%", "k", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "name", "=", "'adj_shape_sub1%d'", "%", "k", ")", "\n", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'adj_values_sub2%d'", "%", "k", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "name", "=", "'adj_indices_sub2%d'", "%", "k", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "name", "=", "'adj_shape_sub2%d'", "%", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._create_adj_mat": [[113, 156], ["numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "sp.diags.dot.dot", "numpy.array", "numpy.array", "numpy.ones_like", "scipy.csr_matrix", "adj_mat.sum", "random.sample", "random.sample", "numpy.ones", "numpy.ones", "scipy.diags", "scipy.diags", "scipy.csr_matrix", "scipy.diags.dot().dot", "sp.diags.dot().dot.nonzero", "scipy.csr_matrix", "random.sample", "numpy.ones_like", "scipy.csr_matrix", "numpy.power", "numpy.isinf", "list", "int", "list", "int", "list", "int", "numpy.array", "numpy.array", "range", "range", "numpy.ones_like", "scipy.diags.dot", "range", "SGL.SGL.data.elemCount", "SGL.SGL.data.elemCount"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.elemCount", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.elemCount"], ["", "", "", "def", "_create_adj_mat", "(", "self", ",", "is_subgraph", "=", "False", ",", "aug_type", "=", "0", ")", ":", "\n", "        ", "n_nodes", "=", "self", ".", "num_users", "+", "self", ".", "num_items", "\n", "row_idx", "=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "col_idx", "=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "if", "is_subgraph", "and", "aug_type", "in", "[", "0", ",", "1", ",", "2", "]", "and", "self", ".", "drop_rate", ">", "0", ":", "\n", "# data augmentation type --- 0: Node Dropout; 1: Edge Dropout; 2: Random Walk", "\n", "            ", "if", "aug_type", "==", "0", ":", "\n", "                ", "drop_user_idx", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "self", ".", "num_users", ")", ")", ",", "int", "(", "self", ".", "num_users", "*", "self", ".", "drop_rate", ")", ")", "\n", "drop_item_idx", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "self", ".", "num_items", ")", ")", ",", "int", "(", "self", ".", "num_items", "*", "self", ".", "drop_rate", ")", ")", "\n", "indicator_user", "=", "np", ".", "ones", "(", "self", ".", "num_users", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indicator_item", "=", "np", ".", "ones", "(", "self", ".", "num_items", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indicator_user", "[", "drop_user_idx", "]", "=", "0.", "\n", "indicator_item", "[", "drop_item_idx", "]", "=", "0.", "\n", "diag_indicator_user", "=", "sp", ".", "diags", "(", "indicator_user", ")", "\n", "diag_indicator_item", "=", "sp", ".", "diags", "(", "indicator_item", ")", "\n", "R", "=", "sp", ".", "csr_matrix", "(", "\n", "(", "np", ".", "ones_like", "(", "row_idx", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "row_idx", ",", "col_idx", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ")", "\n", "R_prime", "=", "diag_indicator_user", ".", "dot", "(", "R", ")", ".", "dot", "(", "diag_indicator_item", ")", "\n", "(", "user_np_keep", ",", "item_np_keep", ")", "=", "R_prime", ".", "nonzero", "(", ")", "\n", "ratings_keep", "=", "R_prime", ".", "data", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings_keep", ",", "(", "user_np_keep", ",", "item_np_keep", "+", "self", ".", "num_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "", "if", "aug_type", "in", "[", "1", ",", "2", "]", ":", "\n", "                ", "keep_idx", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "self", ".", "data", ".", "elemCount", "(", ")", ")", ")", ",", "int", "(", "self", ".", "data", ".", "elemCount", "(", ")", "*", "(", "1", "-", "self", ".", "drop_rate", ")", ")", ")", "\n", "user_np", "=", "np", ".", "array", "(", "row_idx", ")", "[", "keep_idx", "]", "\n", "item_np", "=", "np", ".", "array", "(", "col_idx", ")", "[", "keep_idx", "]", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "item_np", "+", "self", ".", "num_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "user_np", "=", "np", ".", "array", "(", "row_idx", ")", "\n", "item_np", "=", "np", ".", "array", "(", "col_idx", ")", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "item_np", "+", "self", ".", "num_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "", "adj_mat", "=", "tmp_adj", "+", "tmp_adj", ".", "T", "\n", "\n", "# pre adjcency matrix", "\n", "rowsum", "=", "np", ".", "array", "(", "adj_mat", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj_tmp", "=", "d_mat_inv", ".", "dot", "(", "adj_mat", ")", "\n", "adj_matrix", "=", "norm_adj_tmp", ".", "dot", "(", "d_mat_inv", ")", "\n", "return", "adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.calc_ssl_loss": [[157, 191], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.exp", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.unique", "tensorflow.unique", "tensorflow.unique", "tensorflow.unique", "tensorflow.log", "tensorflow.log"], "methods", ["None"], ["", "def", "calc_ssl_loss", "(", "self", ")", ":", "\n", "        ", "'''\n        Calculating SSL loss\n        '''", "\n", "\n", "user_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "s1_user_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "user_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "s2_user_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "normalize_user_emb1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "user_emb1", ",", "1", ")", "\n", "normalize_user_emb2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "user_emb2", ",", "1", ")", "\n", "\n", "item_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "s1_item_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "v_idx", ")", "[", "0", "]", ")", "\n", "item_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "s2_item_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "v_idx", ")", "[", "0", "]", ")", "\n", "normalize_item_emb1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "item_emb1", ",", "1", ")", "\n", "normalize_item_emb2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "item_emb2", ",", "1", ")", "\n", "\n", "normalize_user_emb2_neg", "=", "normalize_user_emb2", "\n", "normalize_item_emb2_neg", "=", "normalize_item_emb2", "\n", "\n", "pos_score_user", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_user_emb1", ",", "normalize_user_emb2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score_user", "=", "tf", ".", "matmul", "(", "normalize_user_emb1", ",", "normalize_user_emb2_neg", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "pos_score_item", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_item_emb1", ",", "normalize_item_emb2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score_item", "=", "tf", ".", "matmul", "(", "normalize_item_emb1", ",", "normalize_item_emb2_neg", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "pos_score_user", "=", "tf", ".", "exp", "(", "pos_score_user", "/", "self", ".", "ssl_temp", ")", "\n", "ttl_score_user", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score_user", "/", "self", ".", "ssl_temp", ")", ",", "axis", "=", "1", ")", "\n", "pos_score_item", "=", "tf", ".", "exp", "(", "pos_score_item", "/", "self", ".", "ssl_temp", ")", "\n", "ttl_score_item", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score_item", "/", "self", ".", "ssl_temp", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# ssl_loss = -tf.reduce_mean(tf.log(pos_score / ttl_score))", "\n", "ssl_loss_user", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score_user", "/", "ttl_score_user", ")", ")", "\n", "ssl_loss_item", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score_item", "/", "ttl_score_item", ")", ")", "\n", "ssl_loss", "=", "self", ".", "ssl_reg", "*", "(", "ssl_loss_user", "+", "ssl_loss_item", ")", "\n", "return", "ssl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.calc_ssl_loss_v3": [[192, 218], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.unique", "tensorflow.unique", "tensorflow.unique", "tensorflow.unique", "tensorflow.log"], "methods", ["None"], ["", "def", "calc_ssl_loss_v3", "(", "self", ")", ":", "\n", "        ", "'''\n        The denominator is summation over the user and item examples in a batch\n        '''", "\n", "\n", "user_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "s1_user_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "user_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "s2_user_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "\n", "item_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "s1_item_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "v_idx", ")", "[", "0", "]", ")", "\n", "item_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "s2_item_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "v_idx", ")", "[", "0", "]", ")", "\n", "\n", "emb_merge1", "=", "tf", ".", "concat", "(", "[", "user_emb1", ",", "item_emb1", "]", ",", "axis", "=", "0", ")", "\n", "emb_merge2", "=", "tf", ".", "concat", "(", "[", "user_emb2", ",", "item_emb2", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# cosine similarity", "\n", "normalize_emb_merge1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "emb_merge1", ",", "1", ")", "\n", "normalize_emb_merge2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "emb_merge2", ",", "1", ")", "\n", "\n", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_emb_merge1", ",", "normalize_emb_merge2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score", "=", "tf", ".", "matmul", "(", "normalize_emb_merge1", ",", "normalize_emb_merge2", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "pos_score", "=", "tf", ".", "exp", "(", "pos_score", "/", "self", ".", "ssl_temp", ")", "\n", "ttl_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score", "/", "self", ".", "ssl_temp", ")", ",", "axis", "=", "1", ")", "\n", "ssl_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score", "/", "ttl_score", ")", ")", "\n", "ssl_loss", "=", "self", ".", "ssl_reg", "*", "ssl_loss", "\n", "return", "ssl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.trainModel": [[219, 282], ["util.loss.bpr_loss", "SGL.SGL.calc_ssl_loss_v3", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "SGL.SGL.sess.run", "range", "time.time", "enumerate", "SGL.SGL.sess.run", "SGL.SGL.ranking_performance", "tensorflow.nn.l2_loss", "SGL.SGL._convert_csr_to_sparse_tensor_inputs", "SGL.SGL._convert_csr_to_sparse_tensor_inputs", "range", "SGL.SGL.next_batch_pairwise", "SGL.SGL.sess.run", "print", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "SGL.SGL._create_adj_mat", "SGL.SGL._create_adj_mat", "SGL.SGL._convert_csr_to_sparse_tensor_inputs", "SGL.SGL._convert_csr_to_sparse_tensor_inputs", "feed_dict.update", "range", "SGL.SGL._create_adj_mat", "SGL.SGL._create_adj_mat", "feed_dict.update"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.loss.bpr_loss", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.calc_ssl_loss_v3", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.ranking_performance", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._create_adj_mat", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._create_adj_mat", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._create_adj_mat", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL._create_adj_mat"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "#main task: recommendation", "\n", "        ", "rec_loss", "=", "bpr_loss", "(", "self", ".", "batch_user_emb", ",", "self", ".", "batch_pos_item_emb", ",", "self", ".", "batch_neg_item_emb", ")", "\n", "rec_loss", "+=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_user_emb", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_pos_item_emb", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_neg_item_emb", ")", ")", "\n", "#SSL task: contrastive learning", "\n", "ssl_loss", "=", "self", ".", "calc_ssl_loss_v3", "(", ")", "\n", "total_loss", "=", "rec_loss", "+", "ssl_loss", "\n", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "total_loss", ")", "\n", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "import", "time", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "sub_mat", "=", "{", "}", "\n", "if", "self", ".", "aug_type", "in", "[", "0", ",", "1", "]", ":", "\n", "                ", "sub_mat", "[", "'adj_indices_sub1'", "]", ",", "sub_mat", "[", "'adj_values_sub1'", "]", ",", "sub_mat", "[", "\n", "'adj_shape_sub1'", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "\n", "self", ".", "_create_adj_mat", "(", "is_subgraph", "=", "True", ",", "aug_type", "=", "self", ".", "aug_type", ")", ")", "\n", "\n", "sub_mat", "[", "'adj_indices_sub2'", "]", ",", "sub_mat", "[", "'adj_values_sub2'", "]", ",", "sub_mat", "[", "\n", "'adj_shape_sub2'", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "\n", "self", ".", "_create_adj_mat", "(", "is_subgraph", "=", "True", ",", "aug_type", "=", "self", ".", "aug_type", ")", ")", "\n", "", "else", ":", "\n", "                ", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "                    ", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", ",", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", ",", "sub_mat", "[", "\n", "'adj_shape_sub1%d'", "%", "k", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "\n", "self", ".", "_create_adj_mat", "(", "is_subgraph", "=", "True", ",", "aug_type", "=", "self", ".", "aug_type", ")", ")", "\n", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", ",", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", ",", "sub_mat", "[", "\n", "'adj_shape_sub2%d'", "%", "k", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "\n", "self", ".", "_create_adj_mat", "(", "is_subgraph", "=", "True", ",", "aug_type", "=", "self", ".", "aug_type", ")", ")", "\n", "", "", "s", "=", "time", ".", "time", "(", ")", "\n", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "\n", "self", ".", "v_idx", ":", "i_idx", ",", "\n", "self", ".", "neg_idx", ":", "j_idx", ",", "}", "\n", "if", "self", ".", "aug_type", "in", "[", "0", ",", "1", "]", ":", "\n", "                    ", "feed_dict", ".", "update", "(", "{", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub1'", "]", ":", "sub_mat", "[", "'adj_values_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1'", "]", ":", "sub_mat", "[", "'adj_indices_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1'", "]", ":", "sub_mat", "[", "'adj_shape_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2'", "]", ":", "sub_mat", "[", "'adj_values_sub2'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2'", "]", ":", "sub_mat", "[", "'adj_indices_sub2'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2'", "]", ":", "sub_mat", "[", "'adj_shape_sub2'", "]", "\n", "}", ")", "\n", "", "else", ":", "\n", "                    ", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "                        ", "feed_dict", ".", "update", "(", "{", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", "\n", "}", ")", "\n", "\n", "", "", "_", ",", "l", ",", "rec_l", ",", "ssl_l", "=", "self", ".", "sess", ".", "run", "(", "[", "train", ",", "total_loss", ",", "rec_loss", ",", "ssl_loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "print", "(", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'rec_loss:'", ",", "rec_l", ",", "'ssl_loss'", ",", "ssl_l", ")", "\n", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "main_user_embeddings", ",", "self", ".", "main_item_embeddings", "]", ")", "\n", "self", ".", "ranking_performance", "(", "epoch", ")", "\n", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "bestU", ",", "self", ".", "bestV", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.saveModel": [[284, 286], ["SGL.SGL.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "saveModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "bestU", ",", "self", ".", "bestV", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "main_user_embeddings", ",", "self", ".", "main_item_embeddings", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SGL.SGL.predictForRanking": [[287, 294], ["SGL.SGL.data.containsUser", "SGL.SGL.data.getUserId", "SGL.SGL.V.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "V", ".", "dot", "(", "self", ".", "U", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SBPR.SBPR.__init__": [[9, 11], ["base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SBPR", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SBPR.SBPR.initModel": [[12, 30], ["super().initModel", "print", "collections.defaultdict", "collections.defaultdict", "SBPR.SBPR.social.getFollowees"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SBPR", ",", "self", ")", ".", "initModel", "(", ")", "\n", "print", "(", "'Preparing item sets...'", ")", "\n", "self", ".", "PositiveSet", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "FPSet", "=", "defaultdict", "(", "dict", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "if", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", "[", "item", "]", ">=", "1", ":", "\n", "                    ", "self", ".", "PositiveSet", "[", "user", "]", "[", "item", "]", "=", "1", "\n", "", "", "if", "user", "in", "self", ".", "social", ".", "user", ":", "\n", "                ", "for", "friend", "in", "self", ".", "social", ".", "getFollowees", "(", "user", ")", ":", "\n", "                    ", "if", "friend", "in", "self", ".", "data", ".", "user", ":", "\n", "                        ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "friend", "]", ":", "\n", "                            ", "if", "item", "not", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                                ", "if", "item", "not", "in", "self", ".", "FPSet", "[", "user", "]", ":", "\n", "                                    ", "self", ".", "FPSet", "[", "user", "]", "[", "item", "]", "=", "1", "\n", "", "else", ":", "\n", "                                    ", "self", ".", "FPSet", "[", "user", "]", "[", "item", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SBPR.SBPR.trainModel": [[31, 79], ["numpy.random.random", "print", "list", "SBPR.SBPR.isConverged", "SBPR.SBPR.data.item.keys", "list", "SBPR.SBPR.FPSet[].keys", "SBPR.SBPR.b.dot", "len", "random.choice", "util.qmath.sigmoid", "random.choice", "util.qmath.sigmoid", "random.choice", "util.qmath.sigmoid", "random.choice", "math.log", "random.choice", "math.log", "math.log", "util.qmath.sigmoid", "util.qmath.sigmoid", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot", "SBPR.SBPR.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "", "", "", "", "", "", "", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "b", "=", "np", ".", "random", ".", "random", "(", "self", ".", "num_items", ")", "\n", "print", "(", "'Training...'", ")", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "itemList", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "user", "in", "self", ".", "PositiveSet", ":", "\n", "                ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "kItems", "=", "list", "(", "self", ".", "FPSet", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "for", "item", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                    ", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "if", "len", "(", "self", ".", "FPSet", "[", "user", "]", ")", ">", "0", ":", "\n", "                        ", "item_k", "=", "choice", "(", "kItems", ")", "\n", "k", "=", "self", ".", "data", ".", "item", "[", "item_k", "]", "\n", "Suk", "=", "self", ".", "FPSet", "[", "user", "]", "[", "kItems", "]", "\n", "s", "=", "sigmoid", "(", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", "+", "self", ".", "b", "[", "i", "]", "-", "self", ".", "b", "[", "k", "]", ")", "/", "(", "Suk", "+", "1", ")", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "1", "/", "(", "Suk", "+", "1", ")", "*", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "k", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "1", "/", "(", "Suk", "+", "1", ")", "*", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "k", "]", "-=", "1", "/", "(", "Suk", "+", "1", ")", "*", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "item_j", "=", "choice", "(", "itemList", ")", "\n", "while", "item_j", "in", "self", ".", "PositiveSet", "[", "user", "]", "or", "item_j", "in", "self", ".", "FPSet", ":", "\n", "                            ", "item_j", "=", "choice", "(", "itemList", ")", "\n", "", "j", "=", "self", ".", "data", ".", "item", "[", "item_j", "]", "\n", "s", "=", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", "+", "self", ".", "b", "[", "k", "]", "-", "self", ".", "b", "[", "j", "]", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "Q", "[", "k", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "k", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regU", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "i", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "i", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "j", "]", "\n", "self", ".", "Q", "[", "k", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "k", "]", "\n", "self", ".", "loss", "+=", "-", "log", "(", "sigmoid", "(", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", ")", "/", "(", "Suk", "+", "1", ")", ")", ")", "-", "log", "(", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "item_j", "=", "choice", "(", "itemList", ")", "\n", "while", "item_j", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                            ", "item_j", "=", "choice", "(", "itemList", ")", "\n", "", "j", "=", "self", ".", "data", ".", "item", "[", "item_j", "]", "\n", "s", "=", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", "+", "self", ".", "b", "[", "i", "]", "-", "self", ".", "b", "[", "j", "]", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "loss", "+=", "-", "log", "(", "s", ")", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "+", "self", ".", "b", ".", "dot", "(", "self", ".", "b", ")", "\n", "", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SBPR.SBPR.next_batch": [[81, 110], ["list", "enumerate", "SBPR.SBPR.data.item.keys", "i_idx.append", "u_idx.append", "f_idx.append", "random.choice", "j_idx.append", "len", "random.choice", "weights.append", "random.choice", "weights.append", "random.choice", "range", "range", "range", "range", "list", "SBPR.SBPR.FPSet[].keys"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "while", "batch_id", "<", "self", ".", "train_size", ":", "\n", "            ", "if", "batch_id", "+", "self", ".", "batch_size", "<=", "self", ".", "train_size", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "batch_id", "+=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "batch_id", "=", "self", ".", "train_size", "\n", "\n", "", "u_idx", ",", "i_idx", ",", "f_idx", ",", "j_idx", ",", "weights", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "item_list", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "users", ")", ":", "\n", "                ", "i_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "items", "[", "i", "]", "]", ")", "\n", "u_idx", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "if", "len", "(", "self", ".", "FPSet", "[", "user", "]", ")", "==", "0", ":", "\n", "                    ", "f_item", "=", "choice", "(", "item_list", ")", "\n", "weights", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "f_item", "=", "choice", "(", "list", "(", "self", ".", "FPSet", "[", "user", "]", ".", "keys", "(", ")", ")", ")", "\n", "weights", ".", "append", "(", "self", ".", "FPSet", "[", "user", "]", "[", "f_item", "]", ")", "\n", "", "f_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "f_item", "]", ")", "\n", "neg_item", "=", "choice", "(", "item_list", ")", "\n", "while", "neg_item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", "or", "neg_item", "in", "self", ".", "FPSet", "[", "user", "]", ":", "\n", "                    ", "neg_item", "=", "choice", "(", "item_list", ")", "\n", "", "j_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "neg_item", "]", ")", "\n", "", "yield", "u_idx", ",", "i_idx", ",", "f_idx", ",", "j_idx", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SBPR.SBPR.trainModel_tf": [[111, 138], ["super().trainModel_tf", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.ConfigProto", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "range", "sess.run", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "enumerate", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.log", "tensorflow.log", "SBPR.SBPR.next_batch", "sess.run", "print", "tensorflow.sigmoid", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.next_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "        ", "super", "(", "SBPR", ",", "self", ")", ".", "trainModel_tf", "(", ")", "\n", "self", ".", "social_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"social_holder\"", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "weights", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"weights\"", ")", "\n", "self", ".", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "V", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "social_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "V", ",", "self", ".", "social_idx", ")", "\n", "y_ik", "=", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "item_embedding", ")", ",", "1", ")", "\n", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "social_item_embedding", ")", ",", "1", ")", ")", "/", "(", "self", ".", "weights", "+", "1", ")", "\n", "y_kj", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "social_item_embedding", ")", ",", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "neg_item_embedding", ")", ",", "1", ")", "\n", "loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y_ik", ")", "+", "1e-6", ")", "+", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y_kj", ")", "+", "1e-6", ")", ")", "\n", "+", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "U", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "V", ")", ")", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "loss", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "                ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch", "(", ")", ")", ":", "\n", "                    ", "user_idx", ",", "i_idx", ",", "s_idx", ",", "j_idx", ",", "weights", "=", "batch", "\n", "_", ",", "l", "=", "sess", ".", "run", "(", "[", "train", ",", "loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "social_idx", ":", "s_idx", ",", "self", ".", "weights", ":", "weights", "}", ")", "\n", "print", "(", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'loss:'", ",", "l", ")", "\n", "", "", "self", ".", "P", ",", "self", ".", "Q", "=", "sess", ".", "run", "(", "[", "self", ".", "U", ",", "self", ".", "V", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SBPR.SBPR.predictForRanking": [[139, 146], ["SBPR.SBPR.data.containsUser", "SBPR.SBPR.data.getUserId", "SBPR.SBPR.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MostPopular.MostPopular.__init__": [[6, 8], ["base.recommender.Recommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "MostPopular", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MostPopular.MostPopular.initModel": [[9, 14], ["numpy.random.random", "len", "MostPopular.MostPopular.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "popularItemList", "=", "np", ".", "random", ".", "random", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ")", "\n", "for", "item", "in", "self", ".", "data", ".", "trainSet_i", ":", "\n", "            ", "ind", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "self", ".", "popularItemList", "[", "ind", "]", "=", "len", "(", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.MostPopular.MostPopular.predictForRanking": [[15, 21], ["MostPopular.MostPopular.data.containsUser"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "return", "self", ".", "popularItemList", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.TBPR.TBPR.__init__": [[9, 11], ["list", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "list", "(", ")", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "TBPR", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.TBPR.TBPR.readConfiguration": [[12, 16], ["super().readConfiguration", "util.config.OptionConf", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "TBPR", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "options", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'TBPR'", "]", ")", "\n", "self", ".", "regT", "=", "float", "(", "options", "[", "'-regT'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.TBPR.TBPR.initModel": [[17, 43], ["super().initModel", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "TBPR.TBPR.weights.sort", "numpy.array", "numpy.median", "list", "TBPR.TBPR.social.getFollowees", "TBPR.TBPR.weights[].sum", "TBPR.TBPR.weights[].sum", "TBPR.TBPR.social.getFollowees().keys", "list", "TBPR.TBPR.weights.append", "len", "len", "TBPR.TBPR.social.getFollowees().keys", "len", "TBPR.TBPR.social.getFollowees", "set().intersection", "len", "TBPR.TBPR.social.getFollowees", "set", "set().union", "set", "set", "len", "len", "set", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "TBPR", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "strength", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "weakTies", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "strongTies", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "weights", "=", "[", "]", "\n", "for", "u1", "in", "self", ".", "social", ".", "user", ":", "\n", "            ", "N_u1", "=", "list", "(", "self", ".", "social", ".", "getFollowees", "(", "u1", ")", ".", "keys", "(", ")", ")", "\n", "for", "u2", "in", "self", ".", "social", ".", "getFollowees", "(", "u1", ")", ":", "\n", "                ", "if", "u1", "==", "u2", ":", "\n", "                    ", "continue", "\n", "", "N_u2", "=", "list", "(", "self", ".", "social", ".", "getFollowees", "(", "u2", ")", ".", "keys", "(", ")", ")", "\n", "s", "=", "len", "(", "set", "(", "N_u1", ")", ".", "intersection", "(", "set", "(", "N_u2", ")", ")", ")", "/", "(", "len", "(", "set", "(", "N_u1", ")", ".", "union", "(", "set", "(", "N_u2", ")", ")", ")", "+", "0.0", ")", "\n", "self", ".", "strength", "[", "u1", "]", "[", "u2", "]", "=", "s", "\n", "self", ".", "weights", ".", "append", "(", "s", ")", "\n", "", "", "self", ".", "weights", ".", "sort", "(", ")", "\n", "self", ".", "weights", "=", "np", ".", "array", "(", "self", ".", "weights", ")", "\n", "self", ".", "theta", "=", "np", ".", "median", "(", "self", ".", "weights", ")", "\n", "for", "u1", "in", "self", ".", "strength", ":", "\n", "            ", "for", "u2", "in", "self", ".", "strength", "[", "u1", "]", ":", "\n", "                ", "if", "self", ".", "strength", "[", "u1", "]", "[", "u2", "]", ">", "self", ".", "theta", ":", "\n", "                    ", "self", ".", "strongTies", "[", "u1", "]", "[", "u2", "]", "=", "self", ".", "strength", "[", "u1", "]", "[", "u2", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "weakTies", "[", "u1", "]", "[", "u2", "]", "=", "self", ".", "strength", "[", "u1", "]", "[", "u2", "]", "\n", "", "", "", "self", ".", "t_s", "=", "self", ".", "weights", "[", "len", "(", "self", ".", "weights", ")", "//", "2", "+", "1", ":", "]", ".", "sum", "(", ")", "/", "(", "len", "(", "self", ".", "weights", "[", "len", "(", "self", ".", "weights", ")", "//", "2", "+", "1", ":", "]", ")", "+", "0.0", ")", "\n", "self", ".", "t_w", "=", "self", ".", "weights", "[", "0", ":", "len", "(", "self", ".", "weights", ")", "//", "2", "]", ".", "sum", "(", ")", "/", "(", "len", "(", "self", ".", "weights", "[", "0", ":", "len", "(", "self", ".", "weights", ")", "//", "2", "]", ")", "+", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.TBPR.TBPR.optimization": [[44, 53], ["util.qmath.sigmoid", "math.log", "TBPR.TBPR.P[].dot", "TBPR.TBPR.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "optimization", "(", "self", ",", "u", ",", "i", ",", "j", ")", ":", "\n", "        ", "s", "=", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "loss", "+=", "-", "log", "(", "s", ")", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regU", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "i", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "i", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.TBPR.TBPR.optimization_theta": [[54, 73], ["util.qmath.sigmoid", "math.log", "TBPR.TBPR.P[].dot", "TBPR.TBPR.P[].dot", "TBPR.TBPR.P[].dot", "TBPR.TBPR.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "optimization_theta", "(", "self", ",", "u", ",", "i", ",", "j", ")", ":", "\n", "# s = sigmoid(self.P[u].dot(self.Q[i]) - self.P[u].dot(self.Q[j]))", "\n", "# self.P[u] += self.lRate * (1 - s) * (self.Q[i] - self.Q[j])", "\n", "# self.Q[i] += self.lRate * (1 - s) * self.P[u]", "\n", "# self.Q[j] -= self.lRate * (1 - s) * self.P[u]", "\n", "# self.loss += -log(s)", "\n", "# self.P[u] -= self.lRate * self.regU * self.P[u]", "\n", "# self.Q[i] -= self.lRate * self.regI * self.Q[i]", "\n", "# self.Q[j] -= self.lRate * self.regI * self.Q[j]", "\n", "        ", "s", "=", "sigmoid", "(", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", "/", "(", "1", "+", "1", "/", "self", ".", "g_theta", ")", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "1", "/", "(", "1", "+", "1", "/", "self", ".", "g_theta", ")", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "1", "/", "(", "1", "+", "1", "/", "self", ".", "g_theta", ")", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "1", "/", "(", "1", "+", "1", "/", "self", ".", "g_theta", ")", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "loss", "+=", "-", "log", "(", "s", ")", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regU", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "i", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "i", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "j", "]", "\n", "self", ".", "theta_derivative", "+=", "self", ".", "regT", "*", "self", ".", "theta", "+", "(", "(", "1", "-", "s", ")", "*", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", "*", "(", "self", ".", "t_w", "+", "self", ".", "t_s", "-", "2", "*", "self", ".", "theta", ")", ")", "/", "(", "self", ".", "g_theta", "+", "1", ")", "**", "2", "\n", "self", ".", "theta_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.TBPR.TBPR.trainModel": [[74, 179], ["collections.defaultdict", "print", "print", "print", "print", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "print", "list", "TBPR.TBPR.isConverged", "TBPR.TBPR.weights.max", "TBPR.TBPR.weights.min", "TBPR.TBPR.data.item.keys", "list", "list", "list", "collections.defaultdict", "collections.defaultdict", "TBPR.TBPR.weights.max", "TBPR.TBPR.weights.min", "sum", "len", "sum", "len", "dict.fromkeys", "TBPR.TBPR.jointSet[].keys", "TBPR.TBPR.weakSet[].keys", "TBPR.TBPR.strongSet[].keys", "random.choice", "selectedItems.append", "enumerate", "set().intersection", "len", "len", "len", "random.choice", "selectedItems.append", "len", "random.choice", "selectedItems.append", "len", "random.choice", "selectedItems.append", "random.choice", "TBPR.TBPR.optimization", "set", "set", "TBPR.TBPR.weakSet[].keys", "TBPR.TBPR.strongSet[].keys"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.optimization", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "positiveSet", "=", "defaultdict", "(", "dict", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "if", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", "[", "item", "]", ">=", "1", ":", "\n", "                    ", "self", ".", "positiveSet", "[", "user", "]", "[", "item", "]", "=", "1", "\n", "\n", "", "", "", "print", "(", "'Training...'", ")", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "theta_derivative", "=", "0", "\n", "self", ".", "theta_count", "=", "0", "\n", "if", "self", ".", "theta", ">", "self", ".", "weights", ".", "max", "(", ")", ":", "\n", "                ", "self", ".", "theta", "=", "self", ".", "weights", ".", "max", "(", ")", "-", "0.01", "\n", "", "if", "self", ".", "theta", "<", "self", ".", "weights", ".", "min", "(", ")", ":", "\n", "                ", "self", ".", "theta", "=", "self", ".", "weights", ".", "min", "(", ")", "+", "0.01", "\n", "", "try", ":", "\n", "                ", "self", ".", "t_s", "=", "sum", "(", "[", "item", "for", "item", "in", "self", ".", "weights", "if", "item", ">=", "self", ".", "theta", "]", ")", "/", "len", "(", "[", "item", "for", "item", "in", "self", ".", "weights", "if", "item", ">=", "self", ".", "theta", "]", ")", "\n", "self", ".", "t_w", "=", "sum", "(", "[", "item", "for", "item", "in", "self", ".", "weights", "if", "item", "<=", "self", ".", "theta", "]", ")", "/", "len", "(", "[", "item", "for", "item", "in", "self", ".", "weights", "if", "item", "<=", "self", ".", "theta", "]", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "                ", "self", ".", "t_w", "=", "0.01", "\n", "self", ".", "theta", "=", "0.02", "\n", "#pass", "\n", "# if self.theta==0:", "\n", "#     self.theta=0.02", "\n", "", "self", ".", "g_theta", "=", "(", "self", ".", "t_s", "-", "self", ".", "theta", ")", "*", "(", "self", ".", "theta", "-", "self", ".", "t_w", ")", "\n", "print", "(", "'Theta:'", ",", "self", ".", "theta", ")", "\n", "print", "(", "'g_theta:'", ",", "self", ".", "g_theta", ")", "\n", "print", "(", "'Preparing item sets...'", ")", "\n", "\n", "self", ".", "jointSet", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "strongSet", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "weakSet", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "u1", "in", "self", ".", "social", ".", "user", ":", "\n", "                ", "if", "u1", "in", "self", ".", "data", ".", "user", ":", "\n", "                    ", "for", "u2", "in", "self", ".", "strongTies", "[", "u1", "]", ":", "\n", "                        ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "u2", "]", ":", "\n", "                            ", "if", "self", ".", "data", ".", "trainSet_u", "[", "u2", "]", "[", "item", "]", ">=", "1", "and", "item", "not", "in", "self", ".", "positiveSet", "[", "u1", "]", ":", "\n", "                                ", "self", ".", "strongSet", "[", "u1", "]", "[", "item", "]", "=", "1", "\n", "\n", "", "", "", "for", "u2", "in", "self", ".", "weakTies", "[", "u1", "]", ":", "\n", "                        ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "u2", "]", ":", "\n", "                            ", "if", "self", ".", "data", ".", "trainSet_u", "[", "u2", "]", "[", "item", "]", ">=", "1", "and", "item", "not", "in", "self", ".", "positiveSet", "[", "u1", "]", ":", "\n", "                                ", "self", ".", "weakSet", "[", "u1", "]", "[", "item", "]", "=", "1", "\n", "\n", "", "", "", "", "", "for", "u1", "in", "self", ".", "social", ".", "user", ":", "\n", "                ", "if", "u1", "in", "self", ".", "data", ".", "user", ":", "\n", "                    ", "self", ".", "jointSet", "[", "u1", "]", "=", "dict", ".", "fromkeys", "(", "set", "(", "self", ".", "strongSet", "[", "u1", "]", ".", "keys", "(", ")", ")", ".", "intersection", "(", "set", "(", "self", ".", "weakSet", "[", "u1", "]", ".", "keys", "(", ")", ")", ")", ",", "1", ")", "\n", "\n", "", "", "for", "u1", "in", "self", ".", "jointSet", ":", "\n", "                ", "for", "item", "in", "self", ".", "jointSet", "[", "u1", "]", ":", "\n", "                    ", "del", "self", ".", "strongSet", "[", "u1", "]", "[", "item", "]", "\n", "del", "self", ".", "weakSet", "[", "u1", "]", "[", "item", "]", "\n", "if", "len", "(", "self", ".", "strongSet", "[", "u1", "]", ")", "==", "0", ":", "\n", "                        ", "del", "self", ".", "strongSet", "[", "u1", "]", "\n", "", "if", "len", "(", "self", ".", "weakSet", "[", "u1", "]", ")", "==", "0", ":", "\n", "                        ", "del", "self", ".", "weakSet", "[", "u1", "]", "\n", "\n", "", "", "", "print", "(", "'Computing...'", ")", "\n", "self", ".", "loss", "=", "0", "\n", "itemList", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "user", "in", "self", ".", "positiveSet", ":", "\n", "#print user", "\n", "                ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "jItems", "=", "list", "(", "self", ".", "jointSet", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "wItems", "=", "list", "(", "self", ".", "weakSet", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "sItems", "=", "list", "(", "self", ".", "strongSet", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "for", "item", "in", "self", ".", "positiveSet", "[", "user", "]", ":", "\n", "                    ", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "selectedItems", "=", "[", "i", "]", "\n", "if", "len", "(", "jItems", ")", ">", "0", ":", "\n", "                        ", "item_j", "=", "choice", "(", "jItems", ")", "\n", "j", "=", "self", ".", "data", ".", "item", "[", "item_j", "]", "\n", "selectedItems", ".", "append", "(", "j", ")", "\n", "", "if", "len", "(", "wItems", ")", ">", "0", ":", "\n", "                        ", "item_w", "=", "choice", "(", "wItems", ")", "\n", "w", "=", "self", ".", "data", ".", "item", "[", "item_w", "]", "\n", "selectedItems", ".", "append", "(", "w", ")", "\n", "", "if", "len", "(", "sItems", ")", ">", "0", ":", "\n", "                        ", "item_s", "=", "choice", "(", "sItems", ")", "\n", "s", "=", "self", ".", "data", ".", "item", "[", "item_s", "]", "\n", "selectedItems", ".", "append", "(", "s", ")", "\n", "", "item_k", "=", "choice", "(", "itemList", ")", "\n", "while", "item_k", "in", "self", ".", "positiveSet", "[", "user", "]", ":", "\n", "                        ", "item_k", "=", "choice", "(", "itemList", ")", "\n", "", "k", "=", "self", ".", "data", ".", "item", "[", "item_k", "]", "\n", "selectedItems", ".", "append", "(", "k", ")", "\n", "# optimization", "\n", "for", "ind", ",", "item", "in", "enumerate", "(", "selectedItems", "[", ":", "-", "1", "]", ")", ":", "\n", "                        ", "self", ".", "optimization", "(", "u", ",", "item", ",", "selectedItems", "[", "ind", "+", "1", "]", ")", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "", "if", "self", ".", "theta_count", ">", "0", ":", "\n", "                ", "self", ".", "theta", "-=", "self", ".", "lRate", "*", "self", ".", "theta_derivative", "/", "self", ".", "theta_count", "\n", "self", ".", "weakTies", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "strongTies", "=", "defaultdict", "(", "dict", ")", "\n", "for", "u1", "in", "self", ".", "strength", ":", "\n", "                    ", "for", "u2", "in", "self", ".", "strength", "[", "u1", "]", ":", "\n", "                        ", "if", "self", ".", "strength", "[", "u1", "]", "[", "u2", "]", ">", "self", ".", "theta", ":", "\n", "                            ", "self", ".", "strongTies", "[", "u1", "]", "[", "u2", "]", "=", "self", ".", "strength", "[", "u1", "]", "[", "u2", "]", "\n", "", "else", ":", "\n", "                            ", "self", ".", "weakTies", "[", "u1", "]", "[", "u2", "]", "=", "self", ".", "strength", "[", "u1", "]", "[", "u2", "]", "\n", "", "", "", "", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.TBPR.TBPR.predictForRanking": [[180, 187], ["TBPR.TBPR.data.containsUser", "TBPR.TBPR.data.getUserId", "TBPR.TBPR.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR.__init__": [[14, 16], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "DeepRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "fold", "=", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR.readConfiguration": [[17, 23], ["super().readConfiguration", "util.config.OptionConf", "int", "float", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "BUIR", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'BUIR'", "]", ")", "\n", "self", ".", "n_layers", "=", "int", "(", "args", "[", "'-n_layer'", "]", ")", "\n", "self", ".", "tau", "=", "float", "(", "args", "[", "'-tau'", "]", ")", "\n", "self", ".", "drop_rate", "=", "float", "(", "args", "[", "'-drop_rate'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR._create_variable": [[24, 40], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.SparseTensor", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.SparseTensor"], "methods", ["None"], ["", "def", "_create_variable", "(", "self", ")", ":", "\n", "        ", "self", ".", "sub_mat", "=", "{", "}", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub_o'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub_o'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub_o'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'sub_mat_o'", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub_o'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub_o'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub_o'", "]", ")", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub_t'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub_t'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub_t'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'sub_mat_t'", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub_t'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub_t'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub_t'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR.get_adj_mat": [[41, 66], ["numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "sp.diags.dot.dot", "random.sample", "numpy.ones_like", "scipy.csr_matrix", "numpy.array", "numpy.array", "numpy.ones_like", "scipy.csr_matrix", "adj_mat.sum", "list", "int", "numpy.array", "numpy.array", "numpy.power", "numpy.isinf", "range", "BUIR.BUIR.data.elemCount", "BUIR.BUIR.data.elemCount"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.elemCount", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.elemCount"], ["", "def", "get_adj_mat", "(", "self", ",", "is_subgraph", "=", "False", ")", ":", "\n", "        ", "n_nodes", "=", "self", ".", "num_users", "+", "self", ".", "num_items", "\n", "row_idx", "=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "col_idx", "=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "if", "is_subgraph", "and", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "keep_idx", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "self", ".", "data", ".", "elemCount", "(", ")", ")", ")", ",", "int", "(", "self", ".", "data", ".", "elemCount", "(", ")", "*", "(", "1", "-", "self", ".", "drop_rate", ")", ")", ")", "\n", "user_np", "=", "np", ".", "array", "(", "row_idx", ")", "[", "keep_idx", "]", "\n", "item_np", "=", "np", ".", "array", "(", "col_idx", ")", "[", "keep_idx", "]", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "self", ".", "num_users", "+", "item_np", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "adj_mat", "=", "tmp_adj", "+", "tmp_adj", ".", "T", "\n", "", "else", ":", "\n", "            ", "user_np", "=", "np", ".", "array", "(", "row_idx", ")", "\n", "item_np", "=", "np", ".", "array", "(", "col_idx", ")", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "item_np", "+", "self", ".", "num_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "adj_mat", "=", "tmp_adj", "+", "tmp_adj", ".", "T", "\n", "# pre adjcency matrix", "\n", "", "rowsum", "=", "np", ".", "array", "(", "adj_mat", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj_tmp", "=", "d_mat_inv", ".", "dot", "(", "adj_mat", ")", "\n", "adj_matrix", "=", "norm_adj_tmp", ".", "dot", "(", "d_mat_inv", ")", "\n", "return", "adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR._convert_sp_mat_to_sp_tensor": [[67, 71], ["X.tocoo().astype", "numpy.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR._convert_csr_to_sparse_tensor_inputs": [[72, 76], ["X.tocoo", "numpy.mat().transpose", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR.initModel": [[77, 127], ["super().initModel", "BUIR.BUIR._create_variable", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.concat", "tensorflow.concat", "range", "tensorflow.reduce_mean", "tensorflow.split", "BUIR.BUIR.initModel.linear"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._create_variable"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "BUIR", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "_create_variable", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "online_mat", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ")", ")", "\n", "self", ".", "online_bias", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "1", ",", "self", ".", "emb_size", "]", ")", ")", "\n", "self", ".", "online_user_embeddings", "=", "tf", ".", "Variable", "(", "initializer", "(", "shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'U'", ")", "\n", "self", ".", "online_item_embeddings", "=", "tf", ".", "Variable", "(", "initializer", "(", "shape", "=", "[", "self", ".", "num_items", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'V'", ")", "\n", "self", ".", "target_user_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "online_user_embeddings", ".", "initialized_value", "(", ")", ",", "name", "=", "'t_U'", ")", "\n", "self", ".", "target_item_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "online_item_embeddings", ".", "initialized_value", "(", ")", ",", "name", "=", "'t_V'", ")", "\n", "# initialize adjacency matrices", "\n", "online_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "online_user_embeddings", ",", "self", ".", "online_item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "target_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "target_user_embeddings", ",", "self", ".", "target_item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "all_online_embeddings", "=", "[", "online_embeddings", "]", "\n", "all_target_embeddings", "=", "[", "target_embeddings", "]", "\n", "#multi-view convolution: LightGCN structure", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "# online encoder", "\n", "            ", "online_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "sub_mat", "[", "'sub_mat_o'", "]", ",", "online_embeddings", ")", "\n", "#norm_embeddings = tf.math.l2_normalize(online_embeddings, axis=1)", "\n", "all_online_embeddings", "+=", "[", "online_embeddings", "]", "\n", "# target encoder", "\n", "target_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "sub_mat", "[", "'sub_mat_t'", "]", ",", "target_embeddings", ")", "\n", "#norm_embeddings = tf.math.l2_normalize(target_embeddings, axis=1)", "\n", "all_target_embeddings", "+=", "[", "target_embeddings", "]", "\n", "# averaging the view-specific embeddings", "\n", "", "online_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_online_embeddings", ",", "axis", "=", "0", ")", "\n", "self", ".", "on_user_embeddings", ",", "self", ".", "on_item_embeddings", "=", "tf", ".", "split", "(", "online_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "#linear layer", "\n", "def", "linear", "(", "em", ")", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "tanh", "(", "tf", ".", "matmul", "(", "em", ",", "self", ".", "online_mat", ")", "+", "self", ".", "online_bias", ")", "\n", "", "q_online_embeddings", "=", "linear", "(", "online_embeddings", ")", "\n", "self", ".", "q_user_embeddings", ",", "self", ".", "q_item_embeddings", "=", "tf", ".", "split", "(", "q_online_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "target_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_target_embeddings", ",", "axis", "=", "0", ")", "\n", "tar_user_embeddings", ",", "tar_item_embeddings", "=", "tf", ".", "split", "(", "target_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "tar_user_embeddings", "=", "tf", ".", "stop_gradient", "(", "tar_user_embeddings", ")", "\n", "tar_item_embeddings", "=", "tf", ".", "stop_gradient", "(", "tar_item_embeddings", ")", "\n", "# embedding look-up", "\n", "self", ".", "q_u_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "q_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "q_i_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "q_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "u_tar_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "tar_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "i_tar_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "tar_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "#target_update", "\n", "momentum_u", "=", "self", ".", "target_user_embeddings", "*", "self", ".", "tau", "+", "self", ".", "online_user_embeddings", "*", "(", "1", "-", "self", ".", "tau", ")", "\n", "momentum_i", "=", "self", ".", "target_item_embeddings", "*", "self", ".", "tau", "+", "self", ".", "online_item_embeddings", "*", "(", "1", "-", "self", ".", "tau", ")", "\n", "self", ".", "tar_user_update", "=", "self", ".", "target_user_embeddings", ".", "assign", "(", "momentum_u", ")", "\n", "self", ".", "tar_item_update", "=", "self", ".", "target_item_embeddings", ".", "assign", "(", "momentum_i", ")", "\n", "#test", "\n", "self", ".", "pred", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "q_u_embedding", ",", "self", ".", "on_item_embeddings", ")", ",", "1", ")", "+", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "on_user_embeddings", ",", "self", ".", "u_idx", ")", ",", "self", ".", "q_item_embeddings", ")", ",", "1", ")", "\n", "", "def", "trainModel", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR.trainModel": [[127, 171], ["tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "BUIR.BUIR.sess.run", "range", "BUIR.BUIR._convert_csr_to_sparse_tensor_inputs", "BUIR.BUIR.sess.run", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "BUIR.BUIR._convert_csr_to_sparse_tensor_inputs", "BUIR.BUIR._convert_csr_to_sparse_tensor_inputs", "enumerate", "BUIR.BUIR.get_adj_mat", "tensorflow.multiply", "tensorflow.multiply", "BUIR.BUIR.get_adj_mat", "BUIR.BUIR.get_adj_mat", "BUIR.BUIR.next_batch_pairwise", "feed_dict.update", "feed_dict.update", "BUIR.BUIR.sess.run", "print", "BUIR.BUIR.sess.run", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_adj_mat", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_adj_mat", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_adj_mat", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "# computing loss", "\n", "        ", "loss", "=", "1", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "math", ".", "l2_normalize", "(", "self", ".", "q_u_embedding", ",", "axis", "=", "1", ")", ",", "tf", ".", "math", ".", "l2_normalize", "(", "self", ".", "i_tar_embedding", ",", "axis", "=", "1", ")", ")", ",", "1", ")", "\n", "loss", "+=", "1", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "math", ".", "l2_normalize", "(", "self", ".", "q_i_embedding", ",", "axis", "=", "1", ")", ",", "tf", ".", "math", ".", "l2_normalize", "(", "self", ".", "u_tar_embedding", ",", "axis", "=", "1", ")", ")", ",", "1", ")", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "loss", "/", "2", ")", "#+self.regU * (tf.nn.l2_loss(self.user_embeddings) + tf.nn.l2_loss(self.item_embeddings)", "\n", "#+tf.nn.l2_loss(self.online_mat)+tf.nn.l2_loss(self.online_bias))", "\n", "# optimizer setting", "\n", "learner", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "op", "=", "learner", ".", "minimize", "(", "loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "#training", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "sub_mat", "=", "{", "}", "\n", "sub_mat", "[", "'adj_indices_sub_o'", "]", ",", "sub_mat", "[", "'adj_values_sub_o'", "]", ",", "sub_mat", "[", "\n", "'adj_shape_sub_o'", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "\n", "self", ".", "get_adj_mat", "(", "is_subgraph", "=", "True", ")", ")", "\n", "sub_mat", "[", "'adj_indices_sub_t'", "]", ",", "sub_mat", "[", "'adj_values_sub_t'", "]", ",", "sub_mat", "[", "\n", "'adj_shape_sub_t'", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "\n", "self", ".", "get_adj_mat", "(", "is_subgraph", "=", "True", ")", ")", "\n", "for", "iteration", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "\n", "self", ".", "v_idx", ":", "i_idx", "}", "\n", "feed_dict", ".", "update", "(", "{", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub_o'", "]", ":", "sub_mat", "[", "'adj_values_sub_o'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub_o'", "]", ":", "sub_mat", "[", "'adj_indices_sub_o'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub_o'", "]", ":", "sub_mat", "[", "'adj_shape_sub_o'", "]", ",", "\n", "}", ")", "\n", "feed_dict", ".", "update", "(", "{", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub_t'", "]", ":", "sub_mat", "[", "'adj_values_sub_t'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub_t'", "]", ":", "sub_mat", "[", "'adj_indices_sub_t'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub_t'", "]", ":", "sub_mat", "[", "'adj_shape_sub_t'", "]", ",", "\n", "}", ")", "\n", "_", ",", "l1", ",", "=", "self", ".", "sess", ".", "run", "(", "[", "op", ",", "loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "print", "(", "self", ".", "foldInfo", ",", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "iteration", ",", "'loss:'", ",", "l1", ")", "\n", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "tar_user_update", ",", "self", ".", "tar_item_update", "]", ")", "\n", "", "", "self", ".", "final_sub_mat", "=", "{", "}", "\n", "self", ".", "final_sub_mat", "[", "'adj_indices_sub_o'", "]", ",", "self", ".", "final_sub_mat", "[", "'adj_values_sub_o'", "]", ",", "self", ".", "final_sub_mat", "[", "\n", "'adj_shape_sub_o'", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ".", "get_adj_mat", "(", ")", ")", "\n", "self", ".", "q_user", ",", "self", ".", "q_item", ",", "self", ".", "o_user", ",", "self", ".", "o_item", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "q_user_embeddings", ",", "self", ".", "q_item_embeddings", ",", "self", ".", "on_user_embeddings", ",", "self", ".", "on_item_embeddings", "]", ",", "feed_dict", "=", "{", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub_o'", "]", ":", "self", ".", "final_sub_mat", "[", "'adj_values_sub_o'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub_o'", "]", ":", "self", ".", "final_sub_mat", "[", "'adj_indices_sub_o'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub_o'", "]", ":", "self", ".", "final_sub_mat", "[", "'adj_shape_sub_o'", "]", ",", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BUIR.BUIR.predictForRanking": [[172, 179], ["BUIR.BUIR.data.containsUser", "BUIR.BUIR.data.getUserId", "BUIR.BUIR.q_item.dot", "BUIR.BUIR.o_item.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "q_item", ".", "dot", "(", "self", ".", "o_user", "[", "u", "]", ")", "+", "self", ".", "o_item", ".", "dot", "(", "self", ".", "q_user", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BPR.BPR.__init__": [[13, 15], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "BPR", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BPR.BPR.initModel": [[16, 18], ["super().initModel"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "BPR", ",", "self", ")", ".", "initModel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BPR.BPR.trainModel": [[19, 44], ["print", "collections.defaultdict", "print", "list", "BPR.BPR.data.item.keys", "BPR.BPR.isConverged", "random.choice", "BPR.BPR.optimization", "random.choice"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.optimization"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Preparing item sets...'", ")", "\n", "self", ".", "PositiveSet", "=", "defaultdict", "(", "dict", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "if", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", "[", "item", "]", ">=", "1", ":", "\n", "                    ", "self", ".", "PositiveSet", "[", "user", "]", "[", "item", "]", "=", "1", "\n", "", "", "", "print", "(", "'training...'", ")", "\n", "epoch", "=", "0", "\n", "itemList", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "for", "user", "in", "self", ".", "PositiveSet", ":", "\n", "                ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "for", "item", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                    ", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "item_j", "=", "choice", "(", "itemList", ")", "\n", "while", "item_j", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                        ", "item_j", "=", "choice", "(", "itemList", ")", "\n", "", "j", "=", "self", ".", "data", ".", "item", "[", "item_j", "]", "\n", "self", ".", "optimization", "(", "u", ",", "i", ",", "j", ")", "\n", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BPR.BPR.optimization": [[45, 54], ["util.qmath.sigmoid", "math.log", "BPR.BPR.P[].dot", "BPR.BPR.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "", "", "def", "optimization", "(", "self", ",", "u", ",", "i", ",", "j", ")", ":", "\n", "        ", "s", "=", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regU", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "i", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "i", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "j", "]", "\n", "self", ".", "loss", "+=", "-", "log", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BPR.BPR.next_batch": [[55, 76], ["list", "enumerate", "BPR.BPR.data.item.keys", "i_idx.append", "u_idx.append", "random.choice", "j_idx.append", "random.choice", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "while", "batch_id", "<", "self", ".", "train_size", ":", "\n", "            ", "if", "batch_id", "+", "self", ".", "batch_size", "<=", "self", ".", "train_size", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "batch_id", "+=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "batch_id", "=", "self", ".", "train_size", "\n", "", "u_idx", ",", "i_idx", ",", "j_idx", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "item_list", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "users", ")", ":", "\n", "                ", "i_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "items", "[", "i", "]", "]", ")", "\n", "u_idx", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "neg_item", "=", "choice", "(", "item_list", ")", "\n", "while", "neg_item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                    ", "neg_item", "=", "choice", "(", "item_list", ")", "\n", "", "j_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "neg_item", "]", ")", "\n", "", "yield", "u_idx", ",", "i_idx", ",", "j_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BPR.BPR.trainModel_tf": [[77, 97], ["super().trainModel_tf", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.ConfigProto", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "range", "sess.run", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "enumerate", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "BPR.BPR.next_batch", "sess.run", "print", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.next_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "        ", "super", "(", "BPR", ",", "self", ")", ".", "trainModel_tf", "(", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "V", ",", "self", ".", "neg_idx", ")", "\n", "y", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "item_embedding", ")", ",", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_embedding", ",", "self", ".", "neg_item_embedding", ")", ",", "1", ")", "\n", "loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y", ")", "+", "1e-6", ")", ")", "+", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "U", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "V", ")", ")", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "loss", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "                ", "for", "iteration", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch", "(", ")", ")", ":", "\n", "                    ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "_", ",", "l", "=", "sess", ".", "run", "(", "[", "train", ",", "loss", "]", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", "}", ")", "\n", "print", "(", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "iteration", ",", "'loss:'", ",", "l", ")", "\n", "", "", "self", ".", "P", ",", "self", ".", "Q", "=", "sess", ".", "run", "(", "[", "self", ".", "U", ",", "self", ".", "V", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.BPR.BPR.predictForRanking": [[98, 105], ["BPR.BPR.data.containsUser", "BPR.BPR.data.getUserId", "BPR.BPR.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NGCF.NGCF.__init__": [[6, 8], ["base.graphRecommender.GraphRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "NGCF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NGCF.NGCF.initModel": [[9, 49], ["super().initModel", "tensorflow.placeholder", "tensorflow.cast", "tensorflow.concat", "NGCF.NGCF.create_joint_sparse_adj_tensor", "dict", "tensorflow.contrib.layers.xavier_initializer", "range", "range", "tensorflow.concat", "tensorflow.split", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.nn.leaky_relu", "tensorflow.cond", "tensorflow.math.l2_normalize", "tensorflow.multiply", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.nn.dropout", "NGCF.NGCF.initModel.dropout"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_joint_sparse_adj_tensor"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "NGCF", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "isTraining", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "isTraining", "=", "tf", ".", "cast", "(", "self", ".", "isTraining", ",", "tf", ".", "bool", ")", "\n", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "norm_adj", "=", "self", ".", "create_joint_sparse_adj_tensor", "(", ")", "\n", "self", ".", "weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "weight_size", "=", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", "#can be changed", "\n", "weight_size_list", "=", "[", "self", ".", "emb_size", "]", "+", "weight_size", "\n", "self", ".", "n_layers", "=", "2", "\n", "#initialize parameters", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "weights", "[", "'W_%d_1'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "weight_size_list", "[", "k", "]", ",", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_%d_1'", "%", "k", ")", "\n", "self", ".", "weights", "[", "'W_%d_2'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "weight_size_list", "[", "k", "]", ",", "weight_size_list", "[", "k", "+", "1", "]", "]", ")", ",", "name", "=", "'W_%d_2'", "%", "k", ")", "\n", "", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "side_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "norm_adj", ",", "ego_embeddings", ")", "\n", "sum_embeddings", "=", "tf", ".", "matmul", "(", "side_embeddings", "+", "ego_embeddings", ",", "self", ".", "weights", "[", "'W_%d_1'", "%", "k", "]", ")", "\n", "bi_embeddings", "=", "tf", ".", "multiply", "(", "ego_embeddings", ",", "side_embeddings", ")", "\n", "bi_embeddings", "=", "tf", ".", "matmul", "(", "bi_embeddings", ",", "self", ".", "weights", "[", "'W_%d_2'", "%", "k", "]", ")", "\n", "ego_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "sum_embeddings", "+", "bi_embeddings", ")", "\n", "# message dropout.", "\n", "def", "without_dropout", "(", ")", ":", "\n", "                ", "return", "ego_embeddings", "\n", "", "def", "dropout", "(", ")", ":", "\n", "                ", "return", "tf", ".", "nn", ".", "dropout", "(", "ego_embeddings", ",", "keep_prob", "=", "0.9", ")", "\n", "", "ego_embeddings", "=", "tf", ".", "cond", "(", "self", ".", "isTraining", ",", "lambda", ":", "dropout", "(", ")", ",", "lambda", ":", "without_dropout", "(", ")", ")", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "ego_embeddings", ",", "axis", "=", "1", ")", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "concat", "(", "all_embeddings", ",", "1", ")", "\n", "self", ".", "multi_user_embeddings", ",", "self", ".", "multi_item_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "batch_neg_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "batch_user_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "batch_pos_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "test", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "batch_user_emb", ",", "self", ".", "multi_item_embeddings", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NGCF.NGCF.trainModel": [[50, 64], ["util.loss.bpr_loss", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "NGCF.NGCF.sess.run", "range", "enumerate", "tensorflow.nn.l2_loss", "NGCF.NGCF.next_batch_pairwise", "NGCF.NGCF.sess.run", "print", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.loss.bpr_loss", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "rec_loss", "=", "bpr_loss", "(", "self", ".", "batch_user_emb", ",", "self", ".", "batch_pos_item_emb", ",", "self", ".", "batch_neg_item_emb", ")", "\n", "rec_loss", "+=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_user_emb", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_pos_item_emb", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "batch_neg_item_emb", ")", ")", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "rec_loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "_", ",", "l", "=", "self", ".", "sess", ".", "run", "(", "[", "train", ",", "rec_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "isTraining", ":", "1", "}", ")", "\n", "print", "(", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'loss:'", ",", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NGCF.NGCF.predictForRanking": [[65, 72], ["NGCF.NGCF.data.containsUser", "NGCF.NGCF.data.getUserId", "NGCF.NGCF.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "test", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "u", ",", "self", ".", "isTraining", ":", "0", "}", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DiffNet.DiffNet.__init__": [[13, 16], ["base.graphRecommender.GraphRecommender.__init__", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "GraphRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "fold", "=", "fold", ")", "\n", "SocialRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "relation", "=", "relation", ",", "fold", "=", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DiffNet.DiffNet.readConfiguration": [[17, 21], ["super().readConfiguration", "util.config.OptionConf", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "DiffNet", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'DiffNet'", "]", ")", "\n", "self", ".", "n_layers", "=", "int", "(", "args", "[", "'-n_layer'", "]", ")", "#the number of layers of the recommendation module (discriminator)", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DiffNet.DiffNet.buildSparseRelationMatrix": [[22, 30], ["scipy.sparse.coo_matrix", "len"], "methods", ["None"], ["", "def", "buildSparseRelationMatrix", "(", "self", ")", ":", "\n", "        ", "row", ",", "col", ",", "entries", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "pair", "in", "self", ".", "social", ".", "relation", ":", "\n", "            ", "row", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "]", "\n", "col", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "1", "]", "]", "]", "\n", "entries", "+=", "[", "1.0", "/", "len", "(", "self", ".", "social", ".", "followees", "[", "pair", "[", "0", "]", "]", ")", "]", "\n", "", "AdjacencyMatrix", "=", "coo_matrix", "(", "(", "entries", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_users", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "AdjacencyMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DiffNet.DiffNet.initModel": [[31, 37], ["super().initModel", "DiffNet.DiffNet.buildSparseRelationMatrix", "numpy.mat().transpose", "tensorflow.SparseTensor", "DiffNet.DiffNet.create_sparse_adj_tensor", "DiffNet.DiffNet.data.astype", "numpy.mat"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildSparseRelationMatrix", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_sparse_adj_tensor"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "DiffNet", ",", "self", ")", ".", "initModel", "(", ")", "\n", "S", "=", "self", ".", "buildSparseRelationMatrix", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "S", ".", "row", ",", "S", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "self", ".", "S", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "S", ".", "data", ".", "astype", "(", "np", ".", "float32", ")", ",", "S", ".", "shape", ")", "\n", "self", ".", "A", "=", "self", ".", "create_sparse_adj_tensor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DiffNet.DiffNet.trainModel": [[38, 74], ["tensorflow.contrib.layers.xavier_initializer", "range", "range", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "DiffNet.DiffNet.sess.run", "range", "tensorflow.Variable", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "enumerate", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.concat", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "DiffNet.DiffNet.next_batch_pairwise", "DiffNet.DiffNet.sess.run", "print", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "weights", "=", "{", "}", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "weights", "[", "'weights%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "2", "*", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'weights%d'", "%", "k", ")", "\n", "\n", "", "user_embeddings", "=", "self", ".", "user_embeddings", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "new_user_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "S", ",", "user_embeddings", ")", "\n", "user_embeddings", "=", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "new_user_embeddings", ",", "user_embeddings", "]", ",", "1", ")", ",", "self", ".", "weights", "[", "'weights%d'", "%", "k", "]", ")", "\n", "user_embeddings", "=", "tf", ".", "nn", ".", "relu", "(", "user_embeddings", ")", "\n", "#user_embeddings = tf.math.l2_normalize(user_embeddings,axis=1)", "\n", "\n", "", "final_user_embeddings", "=", "user_embeddings", "+", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "A", ",", "self", ".", "item_embeddings", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "u_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "final_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "v_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "test", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "item_embeddings", ")", ",", "1", ")", "\n", "\n", "y", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "v_embedding", ")", ",", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "neg_item_embedding", ")", ",", "1", ")", "\n", "loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y", ")", ")", ")", "+", "self", ".", "regU", "*", "(", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "v_embedding", ")", "+", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_item_embedding", ")", ")", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "_", ",", "l", "=", "self", ".", "sess", ".", "run", "(", "[", "train", ",", "loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", "}", ")", "\n", "print", "(", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'loss:'", ",", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DiffNet.DiffNet.predictForRanking": [[75, 82], ["DiffNet.DiffNet.data.containsUser", "DiffNet.DiffNet.data.getUserId", "DiffNet.DiffNet.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "test", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "u", "}", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.LightGCN.LightGCN.__init__": [[6, 10], ["base.graphRecommender.GraphRecommender.__init__", "util.config.OptionConf", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "LightGCN", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "args", "=", "OptionConf", "(", "self", ".", "config", "[", "'LightGCN'", "]", ")", "\n", "self", ".", "n_layers", "=", "int", "(", "args", "[", "'-n_layer'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.LightGCN.LightGCN.initModel": [[11, 26], ["super().initModel", "tensorflow.concat", "LightGCN.LightGCN.create_joint_sparse_adj_tensor", "range", "tensorflow.reduce_mean", "tensorflow.split", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_joint_sparse_adj_tensor"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "LightGCN", ",", "self", ")", ".", "initModel", "(", ")", "\n", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "norm_adj", "=", "self", ".", "create_joint_sparse_adj_tensor", "(", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "ego_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "norm_adj", ",", "ego_embeddings", ")", "\n", "all_embeddings", "+=", "[", "ego_embeddings", "]", "\n", "", "all_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "0", ")", "\n", "self", ".", "multi_user_embeddings", ",", "self", ".", "multi_item_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "batch_neg_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "batch_user_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "batch_pos_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "test", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "batch_user_emb", ",", "self", ".", "multi_item_embeddings", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.LightGCN.LightGCN.trainModel": [[27, 42], ["util.loss.bpr_loss", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "LightGCN.LightGCN.sess.run", "range", "LightGCN.LightGCN.sess.run", "enumerate", "tensorflow.nn.l2_loss", "LightGCN.LightGCN.next_batch_pairwise", "LightGCN.LightGCN.sess.run", "print", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.loss.bpr_loss", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "rec_loss", "=", "bpr_loss", "(", "self", ".", "batch_user_emb", ",", "self", ".", "batch_pos_item_emb", ",", "self", ".", "batch_neg_item_emb", ")", "\n", "rec_loss", "+=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_user_emb", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "batch_pos_item_emb", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "\n", "self", ".", "batch_neg_item_emb", ")", ")", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "rec_loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "_", ",", "l", "=", "self", ".", "sess", ".", "run", "(", "[", "train", ",", "rec_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", "}", ")", "\n", "print", "(", "self", ".", "foldInfo", ",", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'loss:'", ",", "l", ")", "\n", "", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "multi_user_embeddings", ",", "self", ".", "multi_item_embeddings", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.LightGCN.LightGCN.predictForRanking": [[43, 50], ["LightGCN.LightGCN.data.containsUser", "LightGCN.LightGCN.data.getUserId", "LightGCN.LightGCN.V.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "V", ".", "dot", "(", "self", ".", "U", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CFGAN.CFGAN.__init__": [[11, 17], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "CFGAN", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "#It is quite interesting and confusing that when I set ratio_zr = 0 and ratio_zp = 0, CFGAN reaches the best performance.", "\n", "self", ".", "S_zr", "=", "0.001", "\n", "self", ".", "S_pm", "=", "0.001", "\n", "self", ".", "alpha", "=", "0.01", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CFGAN.CFGAN.next_batch": [[18, 45], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "list", "list", "range", "CFGAN.CFGAN.data.user.keys", "CFGAN.CFGAN.data.item.keys", "random.choice", "CFGAN.CFGAN.data.row", "CFGAN.CFGAN.data.userRated", "range", "range", "int", "random.choice", "int", "random.choice", "random.choice", "random.choice"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.row", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "C_u", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_items", ")", ")", "\n", "N_zr", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_items", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_items", ")", ")", "#e_u + k_u", "\n", "userList", "=", "list", "(", "self", ".", "data", ".", "user", ".", "keys", "(", ")", ")", "\n", "itemList", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "user", "=", "choice", "(", "userList", ")", "\n", "vec", "=", "self", ".", "data", ".", "row", "(", "user", ")", "\n", "ratedItems", ",", "values", "=", "self", ".", "data", ".", "userRated", "(", "user", ")", "\n", "for", "item", "in", "ratedItems", ":", "\n", "                ", "iid", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "mask", "[", "n", "]", "[", "iid", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "int", "(", "self", ".", "S_zr", "*", "self", ".", "num_items", ")", ")", ":", "\n", "                ", "ng", "=", "choice", "(", "itemList", ")", "\n", "while", "ng", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                    ", "ng", "=", "choice", "(", "itemList", ")", "\n", "", "ng", "=", "self", ".", "data", ".", "item", "[", "ng", "]", "\n", "N_zr", "[", "n", "]", "[", "ng", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "int", "(", "self", ".", "S_pm", "*", "self", ".", "num_items", ")", ")", ":", "\n", "                ", "ng", "=", "choice", "(", "itemList", ")", "\n", "while", "ng", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                    ", "ng", "=", "choice", "(", "itemList", ")", "\n", "", "ng", "=", "self", ".", "data", ".", "item", "[", "ng", "]", "\n", "mask", "[", "n", "]", "[", "ng", "]", "=", "1", "\n", "", "C_u", "[", "n", "]", "=", "vec", "\n", "", "return", "C_u", ",", "mask", ",", "N_zr", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CFGAN.CFGAN.initModel": [[46, 113], ["super().initModel", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.placeholder", "tensorflow.placeholder", "CFGAN.CFGAN.initModel.generator"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "CFGAN", ",", "self", ")", ".", "initModel", "(", ")", "\n", "G_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "0.001", ")", "\n", "D_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "0.001", ")", "\n", "xavier_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"Generator\"", ")", ":", "\n", "# Generator Net", "\n", "            ", "self", ".", "C", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'C'", ")", "\n", "G_W1", "=", "tf", ".", "get_variable", "(", "name", "=", "'G_W1'", ",", "initializer", "=", "xavier_init", "(", "[", "self", ".", "num_items", ",", "self", ".", "num_items", "]", ")", ",", "regularizer", "=", "G_regularizer", ")", "\n", "G_b1", "=", "tf", ".", "get_variable", "(", "name", "=", "'G_b1'", ",", "initializer", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "self", ".", "num_items", "]", ")", ",", "regularizer", "=", "G_regularizer", ")", "\n", "\n", "# G_W2 = tf.get_variable(name='G_W2',initializer=xavier_init([300,200]), regularizer=G_regularizer)", "\n", "# G_b2 = tf.get_variable(name='G_b2',initializer=tf.zeros(shape=[200]), regularizer=G_regularizer)", "\n", "#", "\n", "# G_W3 = tf.get_variable(initializer=xavier_init([200,self.num_items]), name='G_W3',regularizer=G_regularizer)", "\n", "# G_b3 = tf.get_variable(initializer=tf.zeros(shape=[self.num_items]), name='G_b3',regularizer=G_regularizer)", "\n", "\n", "theta_G", "=", "[", "G_W1", ",", "G_b1", "]", "#G_W2, G_W3, G_b1, G_b2, G_b3]", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"Discriminator\"", ")", ":", "\n", "# Discriminator Net", "\n", "            ", "self", ".", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'X'", ")", "\n", "D_W1", "=", "tf", ".", "get_variable", "(", "initializer", "=", "xavier_init", "(", "[", "self", ".", "num_items", "*", "2", ",", "1", "]", ")", ",", "name", "=", "'D_W1'", ",", "regularizer", "=", "D_regularizer", ")", "\n", "D_b1", "=", "tf", ".", "get_variable", "(", "initializer", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", "]", ")", ",", "name", "=", "'D_b1'", ",", "regularizer", "=", "D_regularizer", ")", "\n", "\n", "# D_W2 = tf.get_variable(name='D_W2', initializer=xavier_init([300, 200]), regularizer=D_regularizer)", "\n", "# D_b2 = tf.get_variable(name='D_b2', initializer=tf.zeros(shape=[200]), regularizer=D_regularizer)", "\n", "#", "\n", "# D_W3 = tf.get_variable(initializer=xavier_init([200,1]), name='D_W3',regularizer=D_regularizer)", "\n", "# D_b3 = tf.get_variable(initializer=tf.zeros(shape=[1]), name='D_b3',regularizer=D_regularizer)", "\n", "\n", "theta_D", "=", "[", "D_W1", ",", "D_b1", "]", "#D_W2, D_W3, D_b1, D_b2, D_b3]", "\n", "\n", "", "self", ".", "mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'mask'", ")", "\n", "self", ".", "N_zr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "num_items", "]", ",", "name", "=", "'mask'", ")", "\n", "\n", "#inference", "\n", "def", "generator", "(", ")", ":", "\n", "            ", "r_hat", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "C", ",", "G_W1", ")", "+", "G_b1", ")", "\n", "# G_h2 = tf.nn.relu(tf.matmul(G_h1, G_W2) + G_b2)", "\n", "# r_hat = tf.nn.sigmoid(tf.matmul(G_h2, G_W3) + G_b3)", "\n", "fake_data", "=", "tf", ".", "multiply", "(", "r_hat", ",", "self", ".", "mask", ")", "\n", "return", "fake_data", "\n", "\n", "", "def", "discriminator", "(", "x", ")", ":", "\n", "            ", "D_output", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "x", ",", "D_W1", ")", "+", "D_b1", ")", "\n", "# D_h2 = tf.nn.relu(tf.matmul(D_h1, D_W2) + D_b2)", "\n", "# D_output = tf.nn.sigmoid(tf.matmul(D_h2, D_W3) + D_b3)", "\n", "return", "D_output", "\n", "\n", "", "def", "r_hat", "(", ")", ":", "\n", "            ", "r_hat", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "C", ",", "G_W1", ")", "+", "G_b1", ")", "\n", "# G_h2 = tf.nn.relu(tf.matmul(G_h1, G_W2) + G_b2)", "\n", "# r_hat = tf.nn.sigmoid(tf.matmul(G_h2, G_W3) + G_b3)", "\n", "return", "r_hat", "\n", "", "G_sample", "=", "generator", "(", ")", "\n", "self", ".", "r_hat", "=", "r_hat", "(", ")", "\n", "D_real", "=", "discriminator", "(", "tf", ".", "concat", "(", "[", "self", ".", "C", ",", "self", ".", "C", "]", ",", "1", ")", ")", "\n", "D_fake", "=", "discriminator", "(", "tf", ".", "concat", "(", "[", "G_sample", ",", "self", ".", "C", "]", ",", "1", ")", ")", "\n", "self", ".", "D_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "D_real", "+", "10e-5", ")", "+", "tf", ".", "log", "(", "1.", "-", "D_fake", "+", "10e-5", ")", ")", "\n", "self", ".", "G_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "1.", "-", "D_fake", "+", "10e-5", ")", "+", "self", ".", "alpha", "*", "tf", ".", "nn", ".", "l2_loss", "(", "tf", ".", "multiply", "(", "self", ".", "N_zr", ",", "G_sample", ")", ")", ")", "\n", "\n", "# Only update D(X)'s parameters, so var_list = theta_D", "\n", "self", ".", "D_solver", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", ".", "minimize", "(", "self", ".", "D_loss", ",", "var_list", "=", "theta_D", ")", "\n", "# Only update G(X)'s parameters, so var_list = theta_G", "\n", "self", ".", "G_solver", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", ".", "minimize", "(", "self", ".", "G_loss", ",", "var_list", "=", "theta_G", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CFGAN.CFGAN.trainModel": [[115, 128], ["tensorflow.global_variables_initializer", "CFGAN.CFGAN.sess.run", "print", "print", "range", "CFGAN.CFGAN.next_batch", "CFGAN.CFGAN.sess.run", "range", "print", "CFGAN.CFGAN.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.next_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "print", "(", "'pretraining...'", ")", "\n", "print", "(", "'training...'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "G_loss", "=", "0", "\n", "C_u", ",", "mask", ",", "N_zr", "=", "self", ".", "next_batch", "(", ")", "\n", "_", ",", "D_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "D_solver", ",", "self", ".", "D_loss", "]", ",", "feed_dict", "=", "{", "self", ".", "C", ":", "C_u", ",", "self", ".", "mask", ":", "mask", ",", "self", ".", "N_zr", ":", "N_zr", "}", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                ", "_", ",", "G_loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "G_solver", ",", "self", ".", "G_loss", "]", ",", "feed_dict", "=", "{", "self", ".", "C", ":", "C_u", ",", "self", ".", "mask", ":", "mask", ",", "self", ".", "N_zr", ":", "N_zr", "}", ")", "\n", "#C_u, mask, N_u = self.next_batch()", "\n", "", "print", "(", "'epoch:'", ",", "epoch", ",", "'D_loss:'", ",", "D_loss", ",", "'G_loss'", ",", "G_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CFGAN.CFGAN.predictForRanking": [[129, 137], ["CFGAN.CFGAN.data.containsUser", "CFGAN.CFGAN.data.row().reshape", "CFGAN.CFGAN.sess.run", "CFGAN.CFGAN.data.row"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.row"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "vec", "=", "self", ".", "data", ".", "row", "(", "u", ")", ".", "reshape", "(", "1", ",", "self", ".", "num_items", ")", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "r_hat", "]", ",", "feed_dict", "=", "{", "self", ".", "C", ":", "vec", "}", ")", "[", "0", "]", "\n", "return", "res", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.Rand.Rand.__init__": [[6, 8], ["base.recommender.Recommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "Rand", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.Rand.Rand.predictForRanking": [[9, 15], ["Rand.Rand.data.containsUser", "numpy.random.random", "Rand.Rand.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "random", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.__init__": [[13, 15], ["base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "SocialRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "relation", "=", "relation", ",", "fold", "=", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.readConfiguration": [[16, 27], ["super().readConfiguration", "util.config.OptionConf", "int", "int", "int", "int", "float", "int", "int", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "IF_BPR", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "options", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'IF_BPR'", "]", ")", "\n", "self", ".", "walkLength", "=", "int", "(", "options", "[", "'-L'", "]", ")", "\n", "self", ".", "walkDim", "=", "int", "(", "options", "[", "'-l'", "]", ")", "\n", "self", ".", "winSize", "=", "int", "(", "options", "[", "'-w'", "]", ")", "\n", "self", ".", "topK", "=", "int", "(", "options", "[", "'-k'", "]", ")", "\n", "self", ".", "alpha", "=", "float", "(", "options", "[", "'-a'", "]", ")", "\n", "self", ".", "epoch", "=", "int", "(", "options", "[", "'-ep'", "]", ")", "\n", "self", ".", "neg", "=", "int", "(", "options", "[", "'-neg'", "]", ")", "\n", "self", ".", "rate", "=", "float", "(", "options", "[", "'-r'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.printAlgorConfig": [[28, 34], ["super().printAlgorConfig", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "IF_BPR", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'Length of each walk'", ",", "self", ".", "walkLength", ")", "\n", "print", "(", "'Dimension of user embedding'", ",", "self", ".", "walkDim", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.readNegativeFeedbacks": [[35, 46], ["collections.defaultdict", "collections.defaultdict", "open", "line.strip().split", "IF_BPR.IF_BPR.negative[].append", "IF_BPR.IF_BPR.nItems[].append", "line.strip"], "methods", ["None"], ["", "def", "readNegativeFeedbacks", "(", "self", ")", ":", "\n", "        ", "self", ".", "negative", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "nItems", "=", "defaultdict", "(", "list", ")", "\n", "filename", "=", "self", ".", "config", "[", "'ratings'", "]", "[", ":", "-", "4", "]", "+", "'_n.txt'", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "items", "[", "0", "]", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "negative", "[", "items", "[", "0", "]", "]", ".", "append", "(", "items", "[", "1", "]", ")", "\n", "self", ".", "nItems", "[", "items", "[", "1", "]", "]", ".", "append", "(", "items", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.initModel": [[47, 74], ["super().initModel", "collections.defaultdict", "collections.defaultdict", "IF_BPR.IF_BPR.readNegativeFeedbacks", "dict.fromkeys", "dict.fromkeys", "print", "collections.defaultdict", "collections.defaultdict", "numpy.ones", "list", "list", "IF_BPR.IF_BPR.positive[].append", "IF_BPR.IF_BPR.pItems[].append", "IF_BPR.IF_BPR.data.user.keys", "IF_BPR.IF_BPR.data.user.keys", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.readNegativeFeedbacks", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "", "", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "IF_BPR", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "positive", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "pItems", "=", "defaultdict", "(", "list", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "trainSet_u", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "self", ".", "positive", "[", "user", "]", ".", "append", "(", "item", ")", "\n", "self", ".", "pItems", "[", "item", "]", ".", "append", "(", "user", ")", "\n", "", "", "self", ".", "readNegativeFeedbacks", "(", ")", "\n", "self", ".", "P", "=", "np", ".", "ones", "(", "(", "len", "(", "self", ".", "data", ".", "user", ")", ",", "self", ".", "emb_size", ")", ")", "*", "0.1", "# latent user matrix", "\n", "self", ".", "threshold", "=", "{", "}", "\n", "self", ".", "avg_sim", "=", "{", "}", "\n", "self", ".", "thres_d", "=", "dict", ".", "fromkeys", "(", "list", "(", "self", ".", "data", ".", "user", ".", "keys", "(", ")", ")", ",", "0", ")", "#derivatives for learning thresholds", "\n", "self", ".", "thres_count", "=", "dict", ".", "fromkeys", "(", "list", "(", "self", ".", "data", ".", "user", ".", "keys", "(", ")", ")", ",", "0", ")", "\n", "\n", "print", "(", "'Preparing item sets...'", ")", "\n", "self", ".", "PositiveSet", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "NegSets", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "self", ".", "PositiveSet", "[", "user", "]", "[", "item", "]", "=", "1", "\n", "\n", "", "", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "item", "in", "self", ".", "negative", "[", "user", "]", ":", "\n", "                ", "if", "item", "in", "self", ".", "data", ".", "item", ":", "\n", "                    ", "self", ".", "NegSets", "[", "user", "]", "[", "item", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.randomWalks": [[75, 220], ["print", "print", "list", "collections.defaultdict", "collections.defaultdict", "print", "random.shuffle", "random.shuffle", "print", "print", "zip", "numpy.random.rand", "numpy.random.rand", "set", "set", "len", "len", "range", "range", "IF_BPR.IF_BPR.data.trainingSize", "IF_BPR.IF_BPR.data.trainingSize", "range", "range", "set", "len", "set", "len", "IF_BPR.IF_BPR.pWalks.append", "IF_BPR.IF_BPR.nWalks.append", "set.intersection", "set.intersection", "len", "len", "path.append", "path.append", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set"], ["", "", "", "", "def", "randomWalks", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Kind Note: This method will probably take much time.'", ")", "\n", "# build U-F-NET", "\n", "print", "(", "'Building weighted user-friend network...'", ")", "\n", "# filter isolated nodes and low ratings", "\n", "# Definition of Meta-Path", "\n", "p1", "=", "'UIU'", "\n", "p2", "=", "'UFU'", "\n", "p3", "=", "'UTU'", "\n", "p4", "=", "'UFIU'", "\n", "p5", "=", "'UFUIU'", "\n", "mPaths", "=", "[", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", "]", "\n", "mPathCnt", "=", "[", "10", ",", "8", ",", "8", ",", "5", ",", "5", "]", "\n", "mPathSetting", "=", "list", "(", "zip", "(", "mPaths", ",", "mPathCnt", ")", ")", "\n", "\n", "self", ".", "G", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ",", "self", ".", "walkDim", ")", "*", "0.1", "\n", "self", ".", "W", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ",", "self", ".", "walkDim", ")", "*", "0.1", "\n", "\n", "self", ".", "UFNet", "=", "defaultdict", "(", "list", ")", "# a -> b #a trusts b", "\n", "for", "u", "in", "self", ".", "social", ".", "followees", ":", "\n", "            ", "s1", "=", "set", "(", "self", ".", "social", ".", "followees", "[", "u", "]", ")", "\n", "for", "v", "in", "self", ".", "social", ".", "followees", "[", "u", "]", ":", "\n", "                ", "if", "v", "in", "self", ".", "social", ".", "followees", ":", "# make sure that v has out links", "\n", "                    ", "if", "u", "!=", "v", ":", "\n", "                        ", "s2", "=", "set", "(", "self", ".", "social", ".", "followees", "[", "v", "]", ")", "\n", "weight", "=", "len", "(", "s1", ".", "intersection", "(", "s2", ")", ")", "\n", "self", ".", "UFNet", "[", "u", "]", "+=", "[", "v", "]", "*", "(", "weight", "+", "1", ")", "\n", "\n", "", "", "", "", "self", ".", "UTNet", "=", "defaultdict", "(", "list", ")", "# a <- b #a is trusted by b", "\n", "for", "u", "in", "self", ".", "social", ".", "followers", ":", "\n", "            ", "s1", "=", "set", "(", "self", ".", "social", ".", "followers", "[", "u", "]", ")", "\n", "for", "v", "in", "self", ".", "social", ".", "followers", "[", "u", "]", ":", "\n", "                ", "if", "v", "in", "self", ".", "social", ".", "followers", ":", "# make sure that v has out links", "\n", "                    ", "if", "u", "!=", "v", ":", "\n", "                        ", "s2", "=", "set", "(", "self", ".", "social", ".", "followers", "[", "v", "]", ")", "\n", "weight", "=", "len", "(", "s1", ".", "intersection", "(", "s2", ")", ")", "\n", "self", ".", "UTNet", "[", "u", "]", "+=", "[", "v", "]", "*", "(", "weight", "+", "1", ")", "\n", "\n", "", "", "", "", "print", "(", "'Generating random meta-path random walks... (Positive)'", ")", "\n", "self", ".", "pWalks", "=", "[", "]", "\n", "# self.usercovered = {}", "\n", "\n", "# positive", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "mps", "in", "mPathSetting", ":", "\n", "                ", "mp", ",", "walkCnt", "=", "mps", "\n", "for", "t", "in", "range", "(", "walkCnt", ")", ":", "\n", "                    ", "path", "=", "[", "'U'", "+", "user", "]", "\n", "lastNode", "=", "user", "\n", "nextNode", "=", "user", "\n", "lastType", "=", "'U'", "\n", "for", "i", "in", "range", "(", "self", ".", "walkLength", "/", "len", "(", "mp", "[", "1", ":", "]", ")", ")", ":", "\n", "                        ", "for", "tp", "in", "mp", "[", "1", ":", "]", ":", "\n", "                            ", "try", ":", "\n", "                                ", "if", "tp", "==", "'I'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "positive", "[", "lastNode", "]", ")", "\n", "\n", "", "if", "tp", "==", "'U'", ":", "\n", "                                    ", "if", "lastType", "==", "'I'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "pItems", "[", "lastNode", "]", ")", "\n", "", "elif", "lastType", "==", "'F'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                            ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "", "", "elif", "lastType", "==", "'T'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                            ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "\n", "", "", "", "if", "tp", "==", "'F'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "\n", "", "", "if", "tp", "==", "'T'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "\n", "", "", "path", ".", "append", "(", "tp", "+", "nextNode", ")", "\n", "lastNode", "=", "nextNode", "\n", "lastType", "=", "tp", "\n", "\n", "", "except", "(", "KeyError", ",", "IndexError", ")", ":", "\n", "                                ", "path", "=", "[", "]", "\n", "break", "\n", "\n", "", "", "", "if", "path", ":", "\n", "                        ", "self", ".", "pWalks", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "self", ".", "nWalks", "=", "[", "]", "\n", "# self.usercovered = {}", "\n", "\n", "# negative", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "mps", "in", "mPathSetting", ":", "\n", "                ", "mp", ",", "walkCnt", "=", "mps", "\n", "for", "t", "in", "range", "(", "walkCnt", ")", ":", "\n", "                    ", "path", "=", "[", "'U'", "+", "user", "]", "\n", "lastNode", "=", "user", "\n", "nextNode", "=", "user", "\n", "lastType", "=", "'U'", "\n", "for", "i", "in", "range", "(", "self", ".", "walkLength", "/", "len", "(", "mp", "[", "1", ":", "]", ")", ")", ":", "\n", "                        ", "for", "tp", "in", "mp", "[", "1", ":", "]", ":", "\n", "                            ", "try", ":", "\n", "                                ", "if", "tp", "==", "'I'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "negative", "[", "lastNode", "]", ")", "\n", "\n", "", "if", "tp", "==", "'U'", ":", "\n", "                                    ", "if", "lastType", "==", "'I'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "nItems", "[", "lastNode", "]", ")", "\n", "", "elif", "lastType", "==", "'F'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                            ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "", "", "elif", "lastType", "==", "'T'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                            ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "\n", "", "", "", "if", "tp", "==", "'F'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "\n", "", "", "if", "tp", "==", "'T'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "\n", "", "", "path", ".", "append", "(", "tp", "+", "nextNode", ")", "\n", "lastNode", "=", "nextNode", "\n", "lastType", "=", "tp", "\n", "\n", "", "except", "(", "KeyError", ",", "IndexError", ")", ":", "\n", "                                ", "path", "=", "[", "]", "\n", "break", "\n", "\n", "", "", "", "if", "path", ":", "\n", "                        ", "self", ".", "nWalks", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "shuffle", "(", "self", ".", "pWalks", ")", "\n", "shuffle", "(", "self", ".", "nWalks", ")", "\n", "print", "(", "'pwalks:'", ",", "len", "(", "self", ".", "pWalks", ")", ")", "\n", "print", "(", "'nwalks:'", ",", "len", "(", "self", ".", "nWalks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.computeSimilarity": [[221, 283], ["print", "collections.defaultdict", "collections.defaultdict", "gensim.Word2Vec", "gensim.Word2Vec", "print", "print", "enumerate", "enumerate", "collections.defaultdict", "list", "list", "print", "sorted", "sum", "print", "sorted", "set().intersection", "set().difference", "len", "util.qmath.cosine", "uSim.append", "len", "util.qmath.cosine", "uSim.append", "set", "set", "set", "set"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set"], ["", "def", "computeSimilarity", "(", "self", ")", ":", "\n", "# Training get top-k friends", "\n", "        ", "print", "(", "'Generating user embedding...'", ")", "\n", "self", ".", "pTopKSim", "=", "{", "}", "\n", "self", ".", "nTopKSim", "=", "{", "}", "\n", "self", ".", "pSimilarity", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "nSimilarity", "=", "defaultdict", "(", "dict", ")", "\n", "pos_model", "=", "w2v", ".", "Word2Vec", "(", "self", ".", "pWalks", ",", "size", "=", "self", ".", "walkDim", ",", "window", "=", "5", ",", "min_count", "=", "0", ",", "iter", "=", "10", ")", "\n", "neg_model", "=", "w2v", ".", "Word2Vec", "(", "self", ".", "nWalks", ",", "size", "=", "self", ".", "walkDim", ",", "window", "=", "5", ",", "min_count", "=", "0", ",", "iter", "=", "10", ")", "\n", "for", "user", "in", "self", ".", "positive", ":", "\n", "            ", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "try", ":", "\n", "                ", "self", ".", "W", "[", "uid", "]", "=", "pos_model", ".", "wv", "[", "'U'", "+", "user", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "continue", "\n", "", "", "for", "user", "in", "self", ".", "negative", ":", "\n", "            ", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "try", ":", "\n", "                ", "self", ".", "G", "[", "uid", "]", "=", "neg_model", ".", "wv", "[", "'U'", "+", "user", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "continue", "\n", "", "", "print", "(", "'User embedding generated.'", ")", "\n", "\n", "print", "(", "'Constructing similarity matrix...'", ")", "\n", "\n", "for", "i", ",", "user1", "in", "enumerate", "(", "self", ".", "positive", ")", ":", "\n", "            ", "uSim", "=", "[", "]", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "i", ",", "'/'", ",", "len", "(", "self", ".", "positive", ")", ")", "\n", "", "vec1", "=", "self", ".", "W", "[", "self", ".", "data", ".", "user", "[", "user1", "]", "]", "\n", "for", "user2", "in", "self", ".", "positive", ":", "\n", "                ", "if", "user1", "!=", "user2", ":", "\n", "                    ", "vec2", "=", "self", ".", "W", "[", "self", ".", "data", ".", "user", "[", "user2", "]", "]", "\n", "sim", "=", "cosine", "(", "vec1", ",", "vec2", ")", "\n", "uSim", ".", "append", "(", "(", "user2", ",", "sim", ")", ")", "\n", "", "", "fList", "=", "sorted", "(", "uSim", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", ":", "self", ".", "topK", "]", "\n", "self", ".", "threshold", "[", "user1", "]", "=", "fList", "[", "self", ".", "topK", "/", "2", "]", "[", "1", "]", "\n", "for", "pair", "in", "fList", ":", "\n", "                ", "self", ".", "pSimilarity", "[", "user1", "]", "[", "pair", "[", "0", "]", "]", "=", "pair", "[", "1", "]", "\n", "", "self", ".", "pTopKSim", "[", "user1", "]", "=", "[", "item", "[", "0", "]", "for", "item", "in", "fList", "]", "\n", "self", ".", "avg_sim", "[", "user1", "]", "=", "sum", "(", "[", "item", "[", "1", "]", "for", "item", "in", "fList", "]", "[", ":", "self", ".", "topK", "/", "2", "]", ")", "/", "(", "self", ".", "topK", "/", "2", ")", "\n", "\n", "", "for", "i", ",", "user1", "in", "enumerate", "(", "self", ".", "negative", ")", ":", "\n", "            ", "uSim", "=", "[", "]", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "i", ",", "'/'", ",", "len", "(", "self", ".", "negative", ")", ")", "\n", "", "vec1", "=", "self", ".", "G", "[", "self", ".", "data", ".", "user", "[", "user1", "]", "]", "\n", "for", "user2", "in", "self", ".", "negative", ":", "\n", "                ", "if", "user1", "!=", "user2", ":", "\n", "                    ", "vec2", "=", "self", ".", "G", "[", "self", ".", "data", ".", "user", "[", "user2", "]", "]", "\n", "sim", "=", "cosine", "(", "vec1", ",", "vec2", ")", "\n", "uSim", ".", "append", "(", "(", "user2", ",", "sim", ")", ")", "\n", "", "", "fList", "=", "sorted", "(", "uSim", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", ":", "self", ".", "topK", "]", "\n", "for", "pair", "in", "fList", ":", "\n", "                ", "self", ".", "nSimilarity", "[", "user1", "]", "[", "pair", "[", "0", "]", "]", "=", "pair", "[", "1", "]", "\n", "", "self", ".", "nTopKSim", "[", "user1", "]", "=", "[", "item", "[", "0", "]", "for", "item", "in", "fList", "]", "\n", "\n", "", "self", ".", "trueTopKFriends", "=", "defaultdict", "(", "list", ")", "\n", "for", "user", "in", "self", ".", "pTopKSim", ":", "\n", "            ", "trueFriends", "=", "list", "(", "set", "(", "self", ".", "pTopKSim", "[", "user", "]", ")", ".", "intersection", "(", "set", "(", "self", ".", "nTopKSim", "[", "user", "]", ")", ")", ")", "\n", "self", ".", "trueTopKFriends", "[", "user", "]", "=", "trueFriends", "\n", "self", ".", "pTopKSim", "[", "user", "]", "=", "list", "(", "set", "(", "self", ".", "pTopKSim", "[", "user", "]", ")", ".", "difference", "(", "set", "(", "trueFriends", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.updateSets": [[284, 311], ["collections.defaultdict", "collections.defaultdict"], "methods", ["None"], ["", "", "def", "updateSets", "(", "self", ")", ":", "\n", "        ", "self", ".", "JointSet", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "PS_Set", "=", "defaultdict", "(", "dict", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "if", "user", "in", "self", ".", "trueTopKFriends", ":", "\n", "                ", "for", "friend", "in", "self", ".", "trueTopKFriends", "[", "user", "]", ":", "\n", "                    ", "if", "friend", "in", "self", ".", "data", ".", "user", "and", "self", ".", "pSimilarity", "[", "user", "]", "[", "friend", "]", ">=", "self", ".", "threshold", "[", "user", "]", ":", "\n", "                        ", "for", "item", "in", "self", ".", "positive", "[", "friend", "]", ":", "\n", "                            ", "if", "item", "not", "in", "self", ".", "PositiveSet", "[", "user", "]", "and", "item", "not", "in", "self", ".", "NegSets", "[", "user", "]", ":", "\n", "                                ", "self", ".", "JointSet", "[", "user", "]", "[", "item", "]", "=", "friend", "\n", "\n", "", "", "", "", "", "if", "user", "in", "self", ".", "pTopKSim", ":", "\n", "                ", "for", "friend", "in", "self", ".", "pTopKSim", "[", "user", "]", "[", ":", "self", ".", "topK", "]", ":", "\n", "                    ", "if", "friend", "in", "self", ".", "data", ".", "user", "and", "self", ".", "pSimilarity", "[", "user", "]", "[", "friend", "]", ">=", "self", ".", "threshold", "[", "user", "]", ":", "\n", "                        ", "for", "item", "in", "self", ".", "positive", "[", "friend", "]", ":", "\n", "                            ", "if", "item", "not", "in", "self", ".", "PositiveSet", "[", "user", "]", "and", "item", "not", "in", "self", ".", "JointSet", "[", "user", "]", "and", "item", "not", "in", "self", ".", "NegSets", "[", "user", "]", ":", "\n", "                                ", "self", ".", "PS_Set", "[", "user", "]", "[", "item", "]", "=", "friend", "\n", "\n", "", "", "", "", "", "if", "user", "in", "self", ".", "nTopKSim", ":", "\n", "                ", "for", "friend", "in", "self", ".", "nTopKSim", "[", "user", "]", "[", ":", "self", ".", "topK", "]", ":", "\n", "                    ", "if", "friend", "in", "self", ".", "data", ".", "user", "and", "self", ".", "nSimilarity", "[", "user", "]", "[", "friend", "]", ">=", "self", ".", "threshold", "[", "user", "]", ":", "\n", "                        ", "for", "item", "in", "self", ".", "negative", "[", "friend", "]", ":", "\n", "                            ", "if", "item", "in", "self", ".", "data", ".", "item", ":", "\n", "                                ", "if", "item", "not", "in", "self", ".", "PositiveSet", "[", "user", "]", "and", "item", "not", "in", "self", ".", "JointSet", "[", "user", "]", "and", "item", "not", "in", "self", ".", "PS_Set", "[", "user", "]", ":", "\n", "                                    ", "self", ".", "NegSets", "[", "user", "]", "[", "item", "]", "=", "friend", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.trainModel": [[312, 384], ["IF_BPR.IF_BPR.randomWalks", "IF_BPR.IF_BPR.computeSimilarity", "print", "IF_BPR.IF_BPR.updateSets", "list", "IF_BPR.IF_BPR.isConverged", "print", "IF_BPR.IF_BPR.data.item.keys", "list", "list", "list", "IF_BPR.IF_BPR.JointSet[].keys", "IF_BPR.IF_BPR.PS_Set[].keys", "IF_BPR.IF_BPR.NegSets[].keys", "random.choice", "selectedItems.append", "enumerate", "len", "random.choice", "selectedItems.append", "IF_BPR.IF_BPR.optimization_thres", "len", "random.choice", "selectedItems.append", "random.choice", "len", "random.choice", "selectedItems.append", "IF_BPR.IF_BPR.optimization", "len", "list", "sum", "IF_BPR.IF_BPR.pSimilarity[].values", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.randomWalks", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.computeSimilarity", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.updateSets", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.optimization_thres", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.optimization"], ["", "", "", "", "", "", "", "", "def", "trainModel", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "randomWalks", "(", ")", "\n", "self", ".", "computeSimilarity", "(", ")", "\n", "\n", "print", "(", "'Decomposing...'", ")", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "self", ".", "updateSets", "(", ")", "\n", "itemList", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "user", "in", "self", ".", "PositiveSet", ":", "\n", "#itemList = self.NegSets[user].keys()", "\n", "                ", "kItems", "=", "list", "(", "self", ".", "JointSet", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "pItems", "=", "list", "(", "self", ".", "PS_Set", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "nItems", "=", "list", "(", "self", ".", "NegSets", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "\n", "for", "item", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                    ", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "selectedItems", "=", "[", "i", "]", "\n", "#select items from different sets", "\n", "if", "len", "(", "kItems", ")", ">", "0", ":", "\n", "                        ", "item_k", "=", "choice", "(", "kItems", ")", "\n", "uf", "=", "self", ".", "JointSet", "[", "user", "]", "[", "item_k", "]", "\n", "k", "=", "self", ".", "data", ".", "item", "[", "item_k", "]", "\n", "selectedItems", ".", "append", "(", "k", ")", "\n", "self", ".", "optimization_thres", "(", "u", ",", "i", ",", "k", ",", "user", ",", "uf", ")", "\n", "", "if", "len", "(", "pItems", ")", ">", "0", ":", "\n", "                        ", "item_p", "=", "choice", "(", "pItems", ")", "\n", "p", "=", "self", ".", "data", ".", "item", "[", "item_p", "]", "\n", "selectedItems", ".", "append", "(", "p", ")", "\n", "\n", "", "item_r", "=", "choice", "(", "itemList", ")", "\n", "while", "item_r", "in", "self", ".", "PositiveSet", "[", "user", "]", "or", "item_r", "in", "self", ".", "JointSet", "[", "user", "]", "or", "item_r", "in", "self", ".", "PS_Set", "[", "user", "]", "or", "item_r", "in", "self", ".", "NegSets", "[", "user", "]", ":", "\n", "                        ", "item_r", "=", "choice", "(", "itemList", ")", "\n", "", "r", "=", "self", ".", "data", ".", "item", "[", "item_r", "]", "\n", "selectedItems", ".", "append", "(", "r", ")", "\n", "\n", "if", "len", "(", "nItems", ")", ">", "0", ":", "\n", "                        ", "item_n", "=", "choice", "(", "nItems", ")", "\n", "n", "=", "self", ".", "data", ".", "item", "[", "item_n", "]", "\n", "selectedItems", ".", "append", "(", "n", ")", "\n", "\n", "#optimization", "\n", "", "for", "ind", ",", "item", "in", "enumerate", "(", "selectedItems", "[", ":", "-", "1", "]", ")", ":", "\n", "                        ", "self", ".", "optimization", "(", "u", ",", "item", ",", "selectedItems", "[", "ind", "+", "1", "]", ")", "\n", "\n", "\n", "", "", "if", "self", ".", "thres_count", "[", "user", "]", ">", "0", ":", "\n", "                    ", "self", ".", "threshold", "[", "user", "]", "-=", "self", ".", "lRate", "*", "self", ".", "thres_d", "[", "user", "]", "/", "self", ".", "thres_count", "[", "user", "]", "\n", "self", ".", "thres_d", "[", "user", "]", "=", "0", "\n", "self", ".", "thres_count", "[", "user", "]", "=", "0", "\n", "li", "=", "[", "sim", "for", "sim", "in", "list", "(", "self", ".", "pSimilarity", "[", "user", "]", ".", "values", "(", ")", ")", "if", "sim", ">=", "self", ".", "threshold", "[", "user", "]", "]", "\n", "if", "len", "(", "li", ")", "==", "0", ":", "\n", "                        ", "self", ".", "avg_sim", "[", "user", "]", "=", "self", ".", "threshold", "[", "user", "]", "\n", "", "else", ":", "\n", "                        ", "self", ".", "avg_sim", "[", "user", "]", "=", "sum", "(", "li", ")", "/", "(", "len", "(", "li", ")", "+", "0.0", ")", "\n", "\n", "", "", "for", "friend", "in", "self", ".", "trueTopKFriends", "[", "user", "]", ":", "\n", "                    ", "if", "self", ".", "pSimilarity", "[", "user", "]", "[", "friend", "]", ">", "self", ".", "threshold", "[", "user", "]", ":", "\n", "                        ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "f", "=", "self", ".", "data", ".", "user", "[", "friend", "]", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "alpha", "*", "self", ".", "lRate", "*", "(", "self", ".", "P", "[", "u", "]", "-", "self", ".", "P", "[", "f", "]", ")", "\n", "\n", "", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                 ", "break", "\n", "", "print", "(", "self", ".", "foldInfo", ",", "'epoch:'", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.optimization": [[387, 396], ["util.qmath.sigmoid", "math.log", "IF_BPR.IF_BPR.P[].dot", "IF_BPR.IF_BPR.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "", "def", "optimization", "(", "self", ",", "u", ",", "i", ",", "j", ")", ":", "\n", "        ", "s", "=", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "loss", "+=", "-", "log", "(", "s", ")", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regU", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "i", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "i", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.optimization_thres": [[397, 422], ["util.qmath.sigmoid", "util.qmath.sigmoid", "math.log", "print", "print", "print", "exit", "IF_BPR.IF_BPR.P[].dot", "IF_BPR.IF_BPR.P[].dot", "IF_BPR.IF_BPR.P[].dot", "IF_BPR.IF_BPR.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "optimization_thres", "(", "self", ",", "u", ",", "i", ",", "j", ",", "user", ",", "friend", ")", ":", "\n", "#print 'inner', (self.pSimilarity[user][friend]-self.threshold[user])/(self.avg_sim[user]-self.threshold[user])", "\n", "        ", "try", ":", "\n", "            ", "g_theta", "=", "sigmoid", "(", "(", "self", ".", "pSimilarity", "[", "user", "]", "[", "friend", "]", "-", "self", ".", "threshold", "[", "user", "]", ")", "/", "(", "self", ".", "avg_sim", "[", "user", "]", "-", "self", ".", "threshold", "[", "user", "]", ")", ")", "\n", "", "except", "OverflowError", ":", "\n", "            ", "print", "(", "'threshold'", ",", "self", ".", "threshold", "[", "user", "]", ",", "'smilarity'", ",", "self", ".", "pSimilarity", "[", "user", "]", "[", "friend", "]", ",", "'avg'", ",", "self", ".", "avg_sim", "[", "user", "]", ")", "\n", "print", "(", "(", "self", ".", "pSimilarity", "[", "user", "]", "[", "friend", "]", "-", "self", ".", "threshold", "[", "user", "]", ")", ",", "(", "self", ".", "avg_sim", "[", "user", "]", "-", "self", ".", "threshold", "[", "user", "]", ")", ")", "\n", "print", "(", "(", "self", ".", "pSimilarity", "[", "user", "]", "[", "friend", "]", "-", "self", ".", "threshold", "[", "user", "]", ")", "/", "(", "self", ".", "avg_sim", "[", "user", "]", "-", "self", ".", "threshold", "[", "user", "]", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "#print 'g_theta',g_theta", "\n", "\n", "", "s", "=", "sigmoid", "(", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", "/", "(", "1", "+", "g_theta", ")", ")", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "(", "1", "-", "s", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "loss", "+=", "-", "log", "(", "s", ")", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regU", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "i", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "i", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "j", "]", "\n", "t_derivative", "=", "-", "g_theta", "*", "(", "1", "-", "g_theta", ")", "*", "(", "1", "-", "s", ")", "*", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", "*", "(", "self", ".", "pSimilarity", "[", "user", "]", "[", "friend", "]", "-", "self", ".", "avg_sim", "[", "user", "]", ")", "/", "(", "self", ".", "avg_sim", "[", "user", "]", "-", "\n", "self", ".", "threshold", "[", "user", "]", ")", "**", "2", "/", "(", "1", "+", "g_theta", ")", "**", "2", "+", "0.005", "*", "self", ".", "threshold", "[", "user", "]", "\n", "#print 'derivative', t_derivative", "\n", "self", ".", "thres_d", "[", "user", "]", "+=", "t_derivative", "\n", "self", ".", "thres_count", "[", "user", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IF_BPR.IF_BPR.predictForRanking": [[423, 430], ["IF_BPR.IF_BPR.data.containsUser", "IF_BPR.IF_BPR.data.getUserId", "IF_BPR.IF_BPR.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NeuMF.NeuMF.__init__": [[9, 11], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "NeuMF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NeuMF.NeuMF.initModel": [[12, 76], ["super().initModel", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.reduce_sum", "tensorflow.sigmoid", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_sum", "tensorflow.sigmoid", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_sum", "tensorflow.sigmoid", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.variable_scope", "tensorflow.multiply", "tensorflow.get_variable", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.relu", "tensorflow.get_variable", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.log", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.log", "tensorflow.log", "tensorflow.train.AdamOptimizer", "tensorflow.log", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.train.AdamOptimizer", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.zeros", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.reduce_sum", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "NeuMF", ",", "self", ")", ".", "initModel", "(", ")", "\n", "# parameters used are consistent with default settings in the original paper", "\n", "mlp_regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "scale", "=", "0.001", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"latent_factors\"", ")", ":", "\n", "            ", "self", ".", "PG", "=", "tf", ".", "get_variable", "(", "name", "=", "'PG'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ")", ")", "\n", "self", ".", "QG", "=", "tf", ".", "get_variable", "(", "name", "=", "'QG'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "num_items", ",", "self", ".", "emb_size", "]", ")", ")", "\n", "self", ".", "PM", "=", "tf", ".", "get_variable", "(", "name", "=", "'PM'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "self", ".", "QM", "=", "tf", ".", "get_variable", "(", "name", "=", "'QM'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "num_items", ",", "self", ".", "emb_size", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"input\"", ")", ":", "\n", "            ", "self", ".", "r", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"rating\"", ")", "\n", "self", ".", "u_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "\"u_idx\"", ")", "\n", "self", ".", "i_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "\"i_idx\"", ")", "\n", "self", ".", "UG_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "PG", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "IG_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "QG", ",", "self", ".", "i_idx", ")", "\n", "self", ".", "UM_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "PM", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "IM_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "QM", ",", "self", ".", "i_idx", ")", "\n", "\n", "# Generic Matrix Factorization", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"mf_output\"", ")", ":", "\n", "            ", "self", ".", "GMF_Layer", "=", "tf", ".", "multiply", "(", "self", ".", "UG_embedding", ",", "self", ".", "IG_embedding", ")", "\n", "self", ".", "h_mf", "=", "tf", ".", "get_variable", "(", "name", "=", "'mf_out'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "emb_size", "]", ")", ")", "\n", "\n", "# MLP", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"mlp_params\"", ")", ":", "\n", "            ", "MLP_W1", "=", "tf", ".", "get_variable", "(", "name", "=", "'W1'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "emb_size", "*", "2", ",", "self", ".", "emb_size", "*", "5", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "MLP_b1", "=", "tf", ".", "get_variable", "(", "name", "=", "'b1'", ",", "initializer", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "self", ".", "emb_size", "*", "5", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "self", ".", "h_out", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "tf", ".", "concat", "(", "[", "self", ".", "UM_embedding", ",", "self", ".", "IM_embedding", "]", ",", "1", ")", ",", "MLP_W1", ")", ",", "MLP_b1", ")", ")", "\n", "\n", "MLP_W2", "=", "tf", ".", "get_variable", "(", "name", "=", "'W2'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "emb_size", "*", "5", ",", "self", ".", "emb_size", "*", "2", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "MLP_b2", "=", "tf", ".", "get_variable", "(", "name", "=", "'b2'", ",", "initializer", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "self", ".", "emb_size", "*", "2", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "self", ".", "h_out", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "self", ".", "h_out", ",", "MLP_W2", ")", ",", "MLP_b2", ")", ")", "\n", "\n", "MLP_W3", "=", "tf", ".", "get_variable", "(", "name", "=", "'W3'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "emb_size", "*", "2", ",", "self", ".", "emb_size", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "MLP_b3", "=", "tf", ".", "get_variable", "(", "name", "=", "'b3'", ",", "initializer", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "self", ".", "emb_size", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "self", ".", "MLP_Layer", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "self", ".", "h_out", ",", "MLP_W3", ")", ",", "MLP_b3", ")", ")", "\n", "self", ".", "h_mlp", "=", "tf", ".", "get_variable", "(", "name", "=", "'mlp_out'", ",", "initializer", "=", "initializer", "(", "[", "self", ".", "emb_size", "]", ")", ",", "regularizer", "=", "mlp_regularizer", ")", "\n", "\n", "#single inference", "\n", "#GMF", "\n", "", "self", ".", "y_mf", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "GMF_Layer", ",", "self", ".", "h_mf", ")", ",", "1", ")", "\n", "self", ".", "y_mf", "=", "tf", ".", "sigmoid", "(", "self", ".", "y_mf", ")", "\n", "self", ".", "mf_loss", "=", "self", ".", "r", "*", "tf", ".", "log", "(", "self", ".", "y_mf", "+", "10e-10", ")", "+", "(", "1", "-", "self", ".", "r", ")", "*", "tf", ".", "log", "(", "1", "-", "self", ".", "y_mf", "+", "10e-10", ")", "\n", "mf_reg", "=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "UG_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "IG_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "h_mf", ")", ")", "\n", "self", ".", "mf_loss", "=", "-", "tf", ".", "reduce_sum", "(", "self", ".", "mf_loss", ")", "+", "mf_reg", "\n", "self", ".", "mf_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", ".", "minimize", "(", "self", ".", "mf_loss", ")", "\n", "#MLP", "\n", "self", ".", "y_mlp", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "MLP_Layer", ",", "self", ".", "h_mlp", ")", ",", "1", ")", "\n", "self", ".", "y_mlp", "=", "tf", ".", "sigmoid", "(", "self", ".", "y_mlp", ")", "\n", "self", ".", "mlp_loss", "=", "self", ".", "r", "*", "tf", ".", "log", "(", "self", ".", "y_mlp", "+", "10e-10", ")", "+", "(", "1", "-", "self", ".", "r", ")", "*", "tf", ".", "log", "(", "1", "-", "self", ".", "y_mlp", "+", "10e-10", ")", "\n", "self", ".", "mlp_loss", "=", "-", "tf", ".", "reduce_sum", "(", "self", ".", "mlp_loss", ")", "\n", "self", ".", "mlp_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", ".", "minimize", "(", "self", ".", "mlp_loss", ")", "\n", "#fusion", "\n", "self", ".", "NeuMF_Layer", "=", "tf", ".", "concat", "(", "[", "self", ".", "GMF_Layer", ",", "self", ".", "MLP_Layer", "]", ",", "1", ")", "\n", "self", ".", "h_NeuMF", "=", "tf", ".", "concat", "(", "[", "0.5", "*", "self", ".", "h_mf", ",", "0.5", "*", "self", ".", "h_mlp", "]", ",", "0", ")", "\n", "self", ".", "y_neu", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "NeuMF_Layer", ",", "self", ".", "h_NeuMF", ")", ",", "1", ")", "\n", "self", ".", "y_neu", "=", "tf", ".", "sigmoid", "(", "self", ".", "y_neu", ")", "\n", "self", ".", "neu_loss", "=", "self", ".", "r", "*", "tf", ".", "log", "(", "self", ".", "y_neu", "+", "10e-10", ")", "+", "(", "1", "-", "self", ".", "r", ")", "*", "tf", ".", "log", "(", "1", "-", "self", ".", "y_neu", "+", "10e-10", ")", "\n", "\n", "self", ".", "neu_loss", "=", "-", "tf", ".", "reduce_sum", "(", "self", ".", "neu_loss", ")", "+", "mf_reg", "+", "self", ".", "regU", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "h_NeuMF", ")", "\n", "###it seems Adam is better than SGD here...", "\n", "self", ".", "neu_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", ".", "minimize", "(", "self", ".", "neu_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NeuMF.NeuMF.trainModel": [[77, 101], ["tensorflow.global_variables_initializer", "NeuMF.NeuMF.sess.run", "print", "range", "print", "range", "print", "range", "enumerate", "enumerate", "enumerate", "NeuMF.NeuMF.next_batch_pointwise", "NeuMF.NeuMF.sess.run", "print", "NeuMF.NeuMF.next_batch_pointwise", "NeuMF.NeuMF.sess.run", "print", "NeuMF.NeuMF.next_batch_pointwise", "NeuMF.NeuMF.sess.run", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pointwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pointwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pointwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "print", "(", "'pretraining... (GMF)'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "for", "num", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pointwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "item_idx", ",", "r", "=", "batch", "\n", "_", ",", "loss", ",", "y_mf", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "mf_optimizer", ",", "self", ".", "mf_loss", ",", "self", ".", "y_mf", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "i_idx", ":", "item_idx", ",", "self", ".", "r", ":", "r", "}", ")", "\n", "print", "(", "'epoch:'", ",", "epoch", ",", "'batch:'", ",", "num", ",", "'loss:'", ",", "loss", ")", "\n", "", "", "print", "(", "'pretraining... (MLP)'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", "//", "2", ")", ":", "\n", "            ", "for", "num", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pointwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "item_idx", ",", "r", "=", "batch", "\n", "_", ",", "loss", ",", "y_mlp", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "mlp_optimizer", ",", "self", ".", "mlp_loss", ",", "self", ".", "y_mlp", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "i_idx", ":", "item_idx", ",", "self", ".", "r", ":", "r", "}", ")", "\n", "print", "(", "'epoch:'", ",", "epoch", ",", "'batch:'", ",", "num", ",", "'loss:'", ",", "loss", ")", "\n", "", "", "print", "(", "'training... (NeuMF)'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", "//", "5", ")", ":", "\n", "            ", "for", "num", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pointwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "item_idx", ",", "r", "=", "batch", "\n", "_", ",", "loss", ",", "y_neu", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "neu_optimizer", ",", "self", ".", "neu_loss", ",", "self", ".", "y_neu", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "i_idx", ":", "item_idx", ",", "self", ".", "r", ":", "r", "}", ")", "\n", "print", "(", "'epoch:'", ",", "epoch", ",", "'batch:'", ",", "num", ",", "'loss:'", ",", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NeuMF.NeuMF.predict_mlp": [[102, 106], ["NeuMF.NeuMF.sess.run", "list", "range"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "", "def", "predict_mlp", "(", "self", ",", "uid", ")", ":", "\n", "        ", "user_idx", "=", "[", "uid", "]", "*", "self", ".", "num_items", "\n", "y_mlp", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "y_mlp", "]", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "i_idx", ":", "list", "(", "range", "(", "self", ".", "num_items", ")", ")", "}", ")", "\n", "return", "y_mlp", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NeuMF.NeuMF.predict_mf": [[107, 111], ["NeuMF.NeuMF.sess.run", "list", "range"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "predict_mf", "(", "self", ",", "uid", ")", ":", "\n", "        ", "user_idx", "=", "[", "uid", "]", "*", "self", ".", "num_items", "\n", "y_mf", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "y_mf", "]", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "i_idx", ":", "list", "(", "range", "(", "self", ".", "num_items", ")", ")", "}", ")", "\n", "return", "y_mf", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NeuMF.NeuMF.predict_neu": [[112, 116], ["NeuMF.NeuMF.sess.run", "list", "range"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "predict_neu", "(", "self", ",", "uid", ")", ":", "\n", "        ", "user_idx", "=", "[", "uid", "]", "*", "self", ".", "num_items", "\n", "y_neu", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "y_neu", "]", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "i_idx", ":", "list", "(", "range", "(", "self", ".", "num_items", ")", ")", "}", ")", "\n", "return", "y_neu", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NeuMF.NeuMF.predictForRanking": [[117, 124], ["NeuMF.NeuMF.data.containsUser", "NeuMF.NeuMF.predict_neu"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.NeuMF.NeuMF.predict_neu"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "return", "self", ".", "predict_neu", "(", "u", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.__init__": [[20, 23], ["base.graphRecommender.GraphRecommender.__init__", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "GraphRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "fold", "=", "fold", ")", "\n", "SocialRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "relation", "=", "relation", ",", "fold", "=", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.readConfiguration": [[24, 31], ["super().readConfiguration", "util.config.OptionConf", "int", "float", "float", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SEPT", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'SEPT'", "]", ")", "\n", "self", ".", "n_layers", "=", "int", "(", "args", "[", "'-n_layer'", "]", ")", "\n", "self", ".", "ss_rate", "=", "float", "(", "args", "[", "'-ss_rate'", "]", ")", "\n", "self", ".", "drop_rate", "=", "float", "(", "args", "[", "'-drop_rate'", "]", ")", "\n", "self", ".", "instance_cnt", "=", "int", "(", "args", "[", "'-ins_cnt'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.buildSparseRatingMatrix": [[32, 41], ["scipy.sparse.coo_matrix"], "methods", ["None"], ["", "def", "buildSparseRatingMatrix", "(", "self", ")", ":", "\n", "        ", "row", ",", "col", ",", "entries", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "pair", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "# symmetric matrix", "\n", "            ", "row", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "]", "\n", "col", "+=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "]", "\n", "entries", "+=", "[", "1.0", "]", "\n", "", "ratingMatrix", "=", "coo_matrix", "(", "(", "entries", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "ratingMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_birectional_social_matrix": [[42, 51], ["numpy.array", "numpy.array", "numpy.ones_like", "scipy.csr_matrix", "scipy.csr_matrix.multiply"], "methods", ["None"], ["", "def", "get_birectional_social_matrix", "(", "self", ")", ":", "\n", "        ", "row_idx", "=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "self", ".", "social", ".", "relation", "]", "\n", "col_idx", "=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "self", ".", "social", ".", "relation", "]", "\n", "follower_np", "=", "np", ".", "array", "(", "row_idx", ")", "\n", "followee_np", "=", "np", ".", "array", "(", "col_idx", ")", "\n", "relations", "=", "np", ".", "ones_like", "(", "follower_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "relations", ",", "(", "follower_np", ",", "followee_np", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_users", ")", ")", "\n", "adj_mat", "=", "tmp_adj", ".", "multiply", "(", "tmp_adj", ")", "\n", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_social_related_views": [[52, 67], ["social_mat.dot", "rating_mat.dot", "SEPT.SEPT.get_social_related_views.normalization"], "methods", ["None"], ["", "def", "get_social_related_views", "(", "self", ",", "social_mat", ",", "rating_mat", ")", ":", "\n", "        ", "def", "normalization", "(", "M", ")", ":", "\n", "            ", "rowsum", "=", "np", ".", "array", "(", "M", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj_tmp", "=", "d_mat_inv", ".", "dot", "(", "M", ")", "\n", "return", "norm_adj_tmp", ".", "dot", "(", "d_mat_inv", ")", "\n", "", "social_matrix", "=", "social_mat", ".", "dot", "(", "social_mat", ")", "\n", "social_matrix", "=", "social_matrix", ".", "multiply", "(", "social_mat", ")", "+", "eye", "(", "self", ".", "num_users", ")", "\n", "sharing_matrix", "=", "rating_mat", ".", "dot", "(", "rating_mat", ".", "T", ")", "\n", "sharing_matrix", "=", "sharing_matrix", ".", "multiply", "(", "social_mat", ")", "+", "eye", "(", "self", ".", "num_users", ")", "\n", "social_matrix", "=", "normalization", "(", "social_matrix", ")", "\n", "sharing_matrix", "=", "normalization", "(", "sharing_matrix", ")", "\n", "return", "[", "social_matrix", ",", "sharing_matrix", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._create_variable": [[68, 77], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.SparseTensor"], "methods", ["None"], ["", "def", "_create_variable", "(", "self", ")", ":", "\n", "        ", "self", ".", "sub_mat", "=", "{", "}", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'sub_mat'", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_adj_mat": [[78, 112], ["numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "sp.diags.dot.dot", "random.sample", "numpy.ones_like", "scipy.csr_matrix", "random.sample", "numpy.ones_like", "scipy.csr_matrix", "social_mat.multiply.multiply.multiply", "numpy.array", "numpy.array", "numpy.ones_like", "scipy.csr_matrix", "adj_mat.sum", "list", "int", "numpy.array", "numpy.array", "list", "int", "numpy.array", "numpy.array", "numpy.power", "numpy.isinf", "range", "range", "SEPT.SEPT.data.elemCount", "SEPT.SEPT.data.elemCount", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.elemCount", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.elemCount"], ["", "def", "get_adj_mat", "(", "self", ",", "is_subgraph", "=", "False", ")", ":", "\n", "        ", "n_nodes", "=", "self", ".", "num_users", "+", "self", ".", "num_items", "\n", "row_idx", "=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "col_idx", "=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "s_row_idx", "=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "self", ".", "social", ".", "relation", "]", "\n", "s_col_idx", "=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "self", ".", "social", ".", "relation", "]", "\n", "if", "is_subgraph", "and", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "keep_idx", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "self", ".", "data", ".", "elemCount", "(", ")", ")", ")", ",", "int", "(", "self", ".", "data", ".", "elemCount", "(", ")", "*", "(", "1", "-", "self", ".", "drop_rate", ")", ")", ")", "\n", "user_np", "=", "np", ".", "array", "(", "row_idx", ")", "[", "keep_idx", "]", "\n", "item_np", "=", "np", ".", "array", "(", "col_idx", ")", "[", "keep_idx", "]", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "self", ".", "num_users", "+", "item_np", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "adj_mat", "=", "tmp_adj", "+", "tmp_adj", ".", "T", "\n", "skeep_idx", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "s_row_idx", ")", ")", ")", ",", "int", "(", "len", "(", "s_row_idx", ")", "*", "(", "1", "-", "self", ".", "drop_rate", ")", ")", ")", "\n", "follower_np", "=", "np", ".", "array", "(", "s_row_idx", ")", "[", "skeep_idx", "]", "\n", "followee_np", "=", "np", ".", "array", "(", "s_col_idx", ")", "[", "skeep_idx", "]", "\n", "relations", "=", "np", ".", "ones_like", "(", "follower_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "social_mat", "=", "sp", ".", "csr_matrix", "(", "(", "relations", ",", "(", "follower_np", ",", "followee_np", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "social_mat", "=", "social_mat", ".", "multiply", "(", "social_mat", ")", "\n", "adj_mat", "=", "adj_mat", "+", "social_mat", "\n", "", "else", ":", "\n", "            ", "user_np", "=", "np", ".", "array", "(", "row_idx", ")", "\n", "item_np", "=", "np", ".", "array", "(", "col_idx", ")", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "item_np", "+", "self", ".", "num_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "adj_mat", "=", "tmp_adj", "+", "tmp_adj", ".", "T", "\n", "# pre adjcency matrix", "\n", "", "rowsum", "=", "np", ".", "array", "(", "adj_mat", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj_tmp", "=", "d_mat_inv", ".", "dot", "(", "adj_mat", ")", "\n", "adj_matrix", "=", "norm_adj_tmp", ".", "dot", "(", "d_mat_inv", ")", "\n", "return", "adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_sp_mat_to_sp_tensor": [[113, 117], ["X.tocoo().astype", "numpy.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs": [[118, 122], ["X.tocoo", "numpy.mat().transpose", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.initModel": [[123, 219], ["super().initModel", "tensorflow.placeholder", "SEPT.SEPT._create_variable", "SEPT.SEPT.get_birectional_social_matrix", "SEPT.SEPT.buildSparseRatingMatrix", "SEPT.SEPT.get_social_related_views", "SEPT.SEPT._convert_sp_mat_to_sp_tensor", "SEPT.SEPT._convert_sp_mat_to_sp_tensor", "SEPT.SEPT.create_joint_sparse_adj_tensor", "tensorflow.concat", "range", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.split", "tensorflow.reduce_sum", "tensorflow.split", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.math.l2_normalize", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.math.l2_normalize", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.math.l2_normalize", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.math.l2_normalize", "tensorflow.truncated_normal", "tensorflow.truncated_normal"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._create_variable", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_birectional_social_matrix", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildSparseRatingMatrix", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_social_related_views", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_sp_mat_to_sp_tensor", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_joint_sparse_adj_tensor"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SEPT", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "_create_variable", "(", ")", "\n", "self", ".", "bs_matrix", "=", "self", ".", "get_birectional_social_matrix", "(", ")", "\n", "self", ".", "rating_mat", "=", "self", ".", "buildSparseRatingMatrix", "(", ")", "\n", "social_mat", ",", "sharing_mat", "=", "self", ".", "get_social_related_views", "(", "self", ".", "bs_matrix", ",", "self", ".", "rating_mat", ")", "\n", "social_mat", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "social_mat", ")", "\n", "sharing_mat", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "sharing_mat", ")", "\n", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'U'", ")", "/", "2", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_items", ",", "self", ".", "emb_size", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'V'", ")", "/", "2", "\n", "# initialize adjacency matrices", "\n", "ui_mat", "=", "self", ".", "create_joint_sparse_adj_tensor", "(", ")", "\n", "friend_view_embeddings", "=", "self", ".", "user_embeddings", "\n", "sharing_view_embeddings", "=", "self", ".", "user_embeddings", "\n", "all_social_embeddings", "=", "[", "friend_view_embeddings", "]", "\n", "all_sharing_embeddings", "=", "[", "sharing_view_embeddings", "]", "\n", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "aug_embeddings", "=", "ego_embeddings", "\n", "all_aug_embeddings", "=", "[", "ego_embeddings", "]", "\n", "\n", "#multi-view convolution: LightGCN structure", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "# friend view", "\n", "            ", "friend_view_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "social_mat", ",", "friend_view_embeddings", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "friend_view_embeddings", ",", "axis", "=", "1", ")", "\n", "all_social_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "# sharing view", "\n", "sharing_view_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "sharing_mat", ",", "sharing_view_embeddings", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "sharing_view_embeddings", ",", "axis", "=", "1", ")", "\n", "all_sharing_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "# preference view", "\n", "ego_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "ui_mat", ",", "ego_embeddings", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "ego_embeddings", ",", "axis", "=", "1", ")", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "# unlabeled sample view", "\n", "aug_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "sub_mat", "[", "'sub_mat'", "]", ",", "aug_embeddings", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "aug_embeddings", ",", "axis", "=", "1", ")", "\n", "all_aug_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "# multi-view convolution: NGCF structure", "\n", "# initializer = tf.contrib.layers.xavier_initializer()", "\n", "# self.weights = dict()", "\n", "# for k in range(self.n_layers):", "\n", "#     for view in range(4):", "\n", "#         self.weights['W_%d_1_%d' %(k,view)] = tf.Variable(", "\n", "#             initializer([self.emb_size,self.emb_size]), name='W_%d_1_%d' %(k,view))", "\n", "#         self.weights['W_%d_2_%d' %(k,view)] = tf.Variable(", "\n", "#             initializer([self.emb_size,self.emb_size]), name='W_%d_2_%d' %(k,view))", "\n", "#", "\n", "# for k in range(self.n_layers):", "\n", "#     #friend view", "\n", "#     side_embeddings = tf.sparse_tensor_dense_matmul(social_mat,friend_view_embeddings)", "\n", "#     sum_embeddings = tf.matmul(side_embeddings+friend_view_embeddings, self.weights['W_%d_1_0' % k])", "\n", "#     bi_embeddings = tf.multiply(friend_view_embeddings, side_embeddings)", "\n", "#     bi_embeddings = tf.matmul(bi_embeddings, self.weights['W_%d_2_0' % k])", "\n", "#     friend_view_embeddings = tf.nn.leaky_relu(sum_embeddings+bi_embeddings)", "\n", "#     norm_embeddings = tf.math.l2_normalize(friend_view_embeddings, axis=1)", "\n", "#     all_social_embeddings += [norm_embeddings]", "\n", "#     #sharing view", "\n", "#     side_embeddings = tf.sparse_tensor_dense_matmul(sharing_mat,sharing_view_embeddings)", "\n", "#     sum_embeddings = tf.matmul(side_embeddings+sharing_view_embeddings, self.weights['W_%d_1_1' % k])", "\n", "#     bi_embeddings = tf.multiply(sharing_view_embeddings, side_embeddings)", "\n", "#     bi_embeddings = tf.matmul(bi_embeddings, self.weights['W_%d_2_1' % k])", "\n", "#     sharing_view_embeddings = tf.nn.leaky_relu(sum_embeddings+bi_embeddings)", "\n", "#     norm_embeddings = tf.math.l2_normalize(sharing_view_embeddings, axis=1)", "\n", "#     all_sharing_embeddings += [norm_embeddings]", "\n", "#     #preference view", "\n", "#     side_embeddings = tf.sparse_tensor_dense_matmul(ui_mat, ego_embeddings)", "\n", "#     sum_embeddings = tf.matmul(side_embeddings+ego_embeddings, self.weights['W_%d_1_2' % k])", "\n", "#     bi_embeddings = tf.multiply(ego_embeddings, side_embeddings)", "\n", "#     bi_embeddings = tf.matmul(bi_embeddings, self.weights['W_%d_2_2' % k])", "\n", "#     ego_embeddings = tf.nn.leaky_relu(sum_embeddings+bi_embeddings)", "\n", "#     norm_embeddings = tf.math.l2_normalize(ego_embeddings, axis=1)", "\n", "#     all_embeddings += [norm_embeddings]", "\n", "#     # unlabeled sample view", "\n", "#     side_embeddings = tf.sparse_tensor_dense_matmul(self.sub_mat['sub_mat'], aug_embeddings)", "\n", "#     sum_embeddings = tf.matmul(side_embeddings+aug_embeddings, self.weights['W_%d_1_3' % k])", "\n", "#     bi_embeddings = tf.multiply(aug_embeddings, side_embeddings)", "\n", "#     bi_embeddings = tf.matmul(bi_embeddings, self.weights['W_%d_2_3' % k])", "\n", "#     aug_embeddings = tf.nn.leaky_relu(sum_embeddings+bi_embeddings)", "\n", "#     norm_embeddings = tf.math.l2_normalize(aug_embeddings, axis=1)", "\n", "#     all_aug_embeddings += [norm_embeddings]", "\n", "\n", "# averaging the view-specific embeddings", "\n", "", "self", ".", "friend_view_embeddings", "=", "tf", ".", "reduce_sum", "(", "all_social_embeddings", ",", "axis", "=", "0", ")", "\n", "self", ".", "sharing_view_embeddings", "=", "tf", ".", "reduce_sum", "(", "all_sharing_embeddings", ",", "axis", "=", "0", ")", "\n", "all_embeddings", "=", "tf", ".", "reduce_sum", "(", "all_embeddings", ",", "axis", "=", "0", ")", "\n", "self", ".", "rec_user_embeddings", ",", "self", ".", "rec_item_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "aug_embeddings", "=", "tf", ".", "reduce_sum", "(", "all_aug_embeddings", ",", "axis", "=", "0", ")", "\n", "self", ".", "aug_user_embeddings", ",", "self", ".", "aug_item_embeddings", "=", "tf", ".", "split", "(", "aug_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "# embedding look-up", "\n", "self", ".", "batch_user_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rec_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "batch_pos_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rec_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "batch_neg_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "rec_item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.label_prediction": [[220, 231], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.matmul", "tensorflow.nn.softmax", "tensorflow.unique", "tensorflow.unique"], "methods", ["None"], ["", "def", "label_prediction", "(", "self", ",", "emb", ")", ":", "\n", "        ", "emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "emb", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "emb", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "emb", ",", "axis", "=", "1", ")", "\n", "aug_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "aug_user_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "aug_emb", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "aug_emb", ",", "axis", "=", "1", ")", "\n", "prob", "=", "tf", ".", "matmul", "(", "emb", ",", "aug_emb", ",", "transpose_b", "=", "True", ")", "\n", "# avoid self-sampling", "\n", "# diag = tf.diag_part(prob)", "\n", "# prob = tf.matrix_diag(-diag)+prob", "\n", "prob", "=", "tf", ".", "nn", ".", "softmax", "(", "prob", ")", "\n", "return", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.sampling": [[232, 234], ["tensorflow.math.top_k"], "methods", ["None"], ["", "def", "sampling", "(", "self", ",", "logits", ")", ":", "\n", "        ", "return", "tf", ".", "math", ".", "top_k", "(", "logits", ",", "self", ".", "instance_cnt", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.generate_pesudo_labels": [[235, 239], ["SEPT.SEPT.sampling"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampling"], ["", "def", "generate_pesudo_labels", "(", "self", ",", "prob1", ",", "prob2", ")", ":", "\n", "        ", "positive", "=", "(", "prob1", "+", "prob2", ")", "/", "2", "\n", "pos_examples", "=", "self", ".", "sampling", "(", "positive", ")", "\n", "return", "pos_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.neighbor_discrimination": [[240, 256], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.reshape", "tensorflow.tile", "SEPT.SEPT.neighbor_discrimination.score"], "methods", ["None"], ["", "def", "neighbor_discrimination", "(", "self", ",", "positive", ",", "emb", ")", ":", "\n", "        ", "def", "score", "(", "x1", ",", "x2", ")", ":", "\n", "            ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "x1", ",", "x2", ")", ",", "axis", "=", "2", ")", "\n", "", "emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "emb", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "emb", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "emb", ",", "axis", "=", "1", ")", "\n", "aug_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "aug_user_embeddings", ",", "tf", ".", "unique", "(", "self", ".", "u_idx", ")", "[", "0", "]", ")", "\n", "aug_emb", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "aug_emb", ",", "axis", "=", "1", ")", "\n", "pos_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "aug_emb", ",", "positive", ")", "\n", "emb2", "=", "tf", ".", "reshape", "(", "emb", ",", "[", "-", "1", ",", "1", ",", "self", ".", "emb_size", "]", ")", "\n", "emb2", "=", "tf", ".", "tile", "(", "emb2", ",", "[", "1", ",", "self", ".", "instance_cnt", ",", "1", "]", ")", "\n", "pos", "=", "score", "(", "emb2", ",", "pos_emb", ")", "\n", "ttl_score", "=", "tf", ".", "matmul", "(", "emb", ",", "aug_emb", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "pos", "/", "0.1", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score", "/", "0.1", ")", ",", "axis", "=", "1", ")", "\n", "ssl_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score", "/", "ttl_score", ")", ")", "\n", "return", "ssl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.trainModel": [[257, 314], ["util.loss.bpr_loss", "SEPT.SEPT.label_prediction", "SEPT.SEPT.label_prediction", "SEPT.SEPT.label_prediction", "SEPT.SEPT.generate_pesudo_labels", "SEPT.SEPT.generate_pesudo_labels", "SEPT.SEPT.generate_pesudo_labels", "SEPT.SEPT.neighbor_discrimination", "SEPT.SEPT.neighbor_discrimination", "SEPT.SEPT.neighbor_discrimination", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "SEPT.SEPT.sess.run", "range", "SEPT.SEPT.sess.run", "SEPT.SEPT.ranking_performance", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "enumerate", "enumerate", "SEPT.SEPT.get_adj_mat", "SEPT.SEPT.next_batch_pairwise", "feed_dict.update", "SEPT.SEPT.sess.run", "print", "SEPT.SEPT.next_batch_pairwise", "SEPT.SEPT.sess.run", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.loss.bpr_loss", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.label_prediction", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.label_prediction", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.label_prediction", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.generate_pesudo_labels", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.generate_pesudo_labels", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.generate_pesudo_labels", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.neighbor_discrimination", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.neighbor_discrimination", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.neighbor_discrimination", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.ranking_performance", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.get_adj_mat", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "# training the recommendation model", "\n", "        ", "rec_loss", "=", "bpr_loss", "(", "self", ".", "batch_user_emb", ",", "self", ".", "batch_pos_item_emb", ",", "self", ".", "batch_neg_item_emb", ")", "\n", "rec_loss", "+=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "user_embeddings", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "item_embeddings", ")", ")", "\n", "# self-supervision prediction", "\n", "social_prediction", "=", "self", ".", "label_prediction", "(", "self", ".", "friend_view_embeddings", ")", "\n", "sharing_prediction", "=", "self", ".", "label_prediction", "(", "self", ".", "sharing_view_embeddings", ")", "\n", "rec_prediction", "=", "self", ".", "label_prediction", "(", "self", ".", "rec_user_embeddings", ")", "\n", "# find informative positive examples for each encoder", "\n", "self", ".", "f_pos", "=", "self", ".", "generate_pesudo_labels", "(", "sharing_prediction", ",", "rec_prediction", ")", "\n", "self", ".", "sh_pos", "=", "self", ".", "generate_pesudo_labels", "(", "social_prediction", ",", "rec_prediction", ")", "\n", "self", ".", "r_pos", "=", "self", ".", "generate_pesudo_labels", "(", "social_prediction", ",", "sharing_prediction", ")", "\n", "# neighbor-discrimination based contrastive learning", "\n", "self", ".", "neighbor_dis_loss", "=", "self", ".", "neighbor_discrimination", "(", "self", ".", "f_pos", ",", "self", ".", "friend_view_embeddings", ")", "\n", "self", ".", "neighbor_dis_loss", "+=", "self", ".", "neighbor_discrimination", "(", "self", ".", "sh_pos", ",", "self", ".", "sharing_view_embeddings", ")", "\n", "self", ".", "neighbor_dis_loss", "+=", "self", ".", "neighbor_discrimination", "(", "self", ".", "r_pos", ",", "self", ".", "rec_user_embeddings", ")", "\n", "# optimizer setting", "\n", "loss", "=", "rec_loss", "\n", "loss", "=", "loss", "+", "self", ".", "ss_rate", "*", "self", ".", "neighbor_dis_loss", "\n", "v1_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "v1_op", "=", "v1_opt", ".", "minimize", "(", "rec_loss", ")", "\n", "v2_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "v2_op", "=", "v2_opt", ".", "minimize", "(", "loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "#joint learning", "\n", "            ", "if", "epoch", ">", "self", ".", "maxEpoch", "/", "3", ":", "\n", "                ", "sub_mat", "=", "{", "}", "\n", "sub_mat", "[", "'adj_indices_sub'", "]", ",", "sub_mat", "[", "'adj_values_sub'", "]", ",", "sub_mat", "[", "\n", "'adj_shape_sub'", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "\n", "self", ".", "get_adj_mat", "(", "is_subgraph", "=", "True", ")", ")", "\n", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                    ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "\n", "self", ".", "v_idx", ":", "i_idx", ",", "\n", "self", ".", "neg_idx", ":", "j_idx", "}", "\n", "feed_dict", ".", "update", "(", "{", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub'", "]", ":", "sub_mat", "[", "'adj_values_sub'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub'", "]", ":", "sub_mat", "[", "'adj_indices_sub'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub'", "]", ":", "sub_mat", "[", "'adj_shape_sub'", "]", ",", "\n", "}", ")", "\n", "_", ",", "l1", ",", "l3", ",", "=", "self", ".", "sess", ".", "run", "(", "[", "v2_op", ",", "rec_loss", ",", "self", ".", "neighbor_dis_loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "print", "(", "self", ".", "foldInfo", ",", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'rec loss:'", ",", "l1", ",", "'con_loss:'", ",", "self", ".", "ss_rate", "*", "l3", ")", "\n", "", "", "else", ":", "\n", "#initialization with only recommendation task", "\n", "                ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                    ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "\n", "self", ".", "v_idx", ":", "i_idx", ",", "\n", "self", ".", "neg_idx", ":", "j_idx", "}", "\n", "_", ",", "l1", "=", "self", ".", "sess", ".", "run", "(", "[", "v1_op", ",", "rec_loss", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "print", "(", "self", ".", "foldInfo", ",", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'rec loss:'", ",", "l1", ")", "\n", "", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "rec_user_embeddings", ",", "self", ".", "rec_item_embeddings", "]", ")", "\n", "self", ".", "ranking_performance", "(", "epoch", ")", "\n", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "bestU", ",", "self", ".", "bestV", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.saveModel": [[315, 317], ["SEPT.SEPT.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "saveModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "bestU", ",", "self", ".", "bestV", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "rec_user_embeddings", ",", "self", ".", "rec_item_embeddings", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SEPT.SEPT.predictForRanking": [[318, 325], ["SEPT.SEPT.data.containsUser", "SEPT.SEPT.data.getUserId", "SEPT.SEPT.V.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "V", ".", "dot", "(", "self", ".", "U", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.SERec.__init__": [[12, 14], ["base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SERec", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.SERec.initModel": [[15, 51], ["super().initModel", "csr_matrix", "csr_matrix", "numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.ones", "row.append", "col.append", "val.append", "numpy.array", "row.append", "col.append", "val.append", "numpy.array", "numpy.random.randn", "numpy.random.randn", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "SERec", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "lam_theta", "=", "1e-5", "\n", "self", ".", "lam_beta", "=", "1e-5", "\n", "self", ".", "lam_y", "=", "0.01", "\n", "self", ".", "init_mu", "=", "0.01", "\n", "self", ".", "a", "=", "1.0", "\n", "self", ".", "b", "=", "99.0", "\n", "self", ".", "s", "=", "2.2", "\n", "self", ".", "init_std", "=", "0.5", "\n", "self", ".", "theta", "=", "self", ".", "init_std", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "num_users", ",", "self", ".", "emb_size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "beta", "=", "self", ".", "init_std", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "num_items", ",", "self", ".", "emb_size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "mu", "=", "self", ".", "init_mu", "*", "np", ".", "ones", "(", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "n_jobs", "=", "4", "\n", "self", ".", "batch_size", "=", "1000", "\n", "row", ",", "col", ",", "val", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "user", "in", "self", ".", "data", ".", "trainSet_u", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "row", ".", "append", "(", "u", ")", "\n", "col", ".", "append", "(", "i", ")", "\n", "val", ".", "append", "(", "1", ")", "\n", "\n", "", "", "self", ".", "X", "=", "csr_matrix", "(", "(", "np", ".", "array", "(", "val", ")", ",", "(", "np", ".", "array", "(", "row", ")", ",", "np", ".", "array", "(", "col", ")", ")", ")", ",", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ")", "\n", "row", ",", "col", ",", "val", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "user", "in", "self", ".", "social", ".", "followees", ":", "\n", "            ", "for", "f", "in", "self", ".", "social", ".", "followees", "[", "user", "]", ":", "\n", "                ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "user", "[", "f", "]", "\n", "row", ".", "append", "(", "u", ")", "\n", "col", ".", "append", "(", "i", ")", "\n", "val", ".", "append", "(", "1", ")", "\n", "", "", "self", ".", "T", "=", "csr_matrix", "(", "(", "np", ".", "array", "(", "val", ")", ",", "(", "np", ".", "array", "(", "row", ")", ",", "np", ".", "array", "(", "col", ")", ")", ")", ",", "(", "self", ".", "num_users", ",", "self", ".", "num_users", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.SERec.trainModel": [[52, 55], ["print", "SERec.SERec._update"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.SERec._update"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "print", "(", "'training...'", ")", "\n", "self", ".", "_update", "(", "self", ".", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.SERec._update": [[56, 67], ["X.T.tocsr", "range", "print", "SERec.SERec._update_factors", "print", "SERec.SERec._update_expo"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF._update_factors", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF._update_expo"], ["", "def", "_update", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''Model training and evaluation on validation set'''", "\n", "n_users", "=", "X", ".", "shape", "[", "0", "]", "\n", "XT", "=", "X", ".", "T", ".", "tocsr", "(", ")", "# pre-compute this", "\n", "self", ".", "vad_ndcg", "=", "-", "np", ".", "inf", "\n", "for", "i", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "\n", "            ", "print", "(", "'epoch #%d'", "%", "i", ")", "\n", "self", ".", "_update_factors", "(", "X", ",", "XT", ")", "\n", "print", "(", "self", ".", "mu", ")", "\n", "self", ".", "_update_expo", "(", "X", ",", "n_users", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.SERec._update_factors": [[68, 83], ["SERec.recompute_factors", "SERec.recompute_factors"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.recompute_factors", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.recompute_factors"], ["", "", "def", "_update_factors", "(", "self", ",", "X", ",", "XT", ")", ":", "\n", "        ", "'''Update user and item collaborative factors with ALS'''", "\n", "self", ".", "theta", "=", "recompute_factors", "(", "self", ".", "beta", ",", "self", ".", "theta", ",", "X", ",", "\n", "self", ".", "lam_theta", "/", "self", ".", "lam_y", ",", "\n", "self", ".", "lam_y", ",", "\n", "self", ".", "mu", ",", "\n", "self", ".", "n_jobs", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n", "self", ".", "beta", "=", "recompute_factors", "(", "self", ".", "theta", ",", "self", ".", "beta", ",", "XT", ",", "\n", "self", ".", "lam_beta", "/", "self", ".", "lam_y", ",", "\n", "self", ".", "lam_y", ",", "\n", "self", ".", "mu", ",", "\n", "self", ".", "n_jobs", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "", "def", "_update_expo", "(", "self", ",", "X", ",", "n_users", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.SERec._update_expo": [[83, 95], ["print", "list", "numpy.zeros", "zip", "numpy.tile", "SERec.SERec.T.dot", "range", "a_row_batch().sum", "SERec.a_row_batch"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.a_row_batch"], ["", "def", "_update_expo", "(", "self", ",", "X", ",", "n_users", ")", ":", "\n", "        ", "'''Update exposure prior'''", "\n", "print", "(", "'\\tUpdating exposure prior...'", ")", "\n", "start_idx", "=", "list", "(", "range", "(", "0", ",", "n_users", ",", "self", ".", "batch_size", ")", ")", "\n", "end_idx", "=", "start_idx", "[", "1", ":", "]", "+", "[", "n_users", "]", "\n", "A_sum", "=", "np", ".", "zeros", "(", "self", ".", "num_items", ")", "\n", "for", "lo", ",", "hi", "in", "zip", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "            ", "A_sum", "+=", "a_row_batch", "(", "X", "[", "lo", ":", "hi", "]", ",", "self", ".", "theta", "[", "lo", ":", "hi", "]", ",", "self", ".", "beta", ",", "\n", "self", ".", "lam_y", ",", "self", ".", "mu", "[", "lo", ":", "hi", "]", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "", "A_sum", "=", "np", ".", "tile", "(", "A_sum", ",", "[", "self", ".", "num_users", ",", "1", "]", ")", "\n", "S_sum", "=", "self", ".", "T", ".", "dot", "(", "A_sum", ")", "\n", "self", ".", "mu", "=", "(", "self", ".", "a", "+", "A_sum", "+", "(", "self", ".", "s", "-", "1", ")", "*", "S_sum", "-", "1", ")", "/", "(", "self", ".", "a", "+", "self", ".", "b", "+", "(", "self", ".", "s", "-", "1", ")", "*", "S_sum", "+", "n_users", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.SERec.predictForRanking": [[96, 103], ["SERec.SERec.data.containsUser", "SERec.SERec.data.getUserId", "SERec.SERec.beta.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "beta", ".", "dot", "(", "self", ".", "theta", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.get_row": [[104, 109], ["None"], "function", ["None"], ["", "", "", "def", "get_row", "(", "Y", ",", "i", ")", ":", "\n", "    ", "'''Given a scipy.sparse.csr_matrix Y, get the values and indices of the\n    non-zero values in i_th row'''", "\n", "lo", ",", "hi", "=", "Y", ".", "indptr", "[", "i", "]", ",", "Y", ".", "indptr", "[", "i", "+", "1", "]", "\n", "return", "Y", ".", "data", "[", "lo", ":", "hi", "]", ",", "Y", ".", "indices", "[", "lo", ":", "hi", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.a_row_batch": [[110, 118], ["math.sqrt", "numpy.exp", "Y_batch.nonzero", "theta_batch.dot"], "function", ["None"], ["", "def", "a_row_batch", "(", "Y_batch", ",", "theta_batch", ",", "beta", ",", "lam_y", ",", "mu", ")", ":", "\n", "    ", "'''Compute the posterior of exposure latent variables A by batch'''", "\n", "pEX", "=", "sqrt", "(", "lam_y", "/", "2", "/", "np", ".", "pi", ")", "*", "np", ".", "exp", "(", "-", "lam_y", "*", "theta_batch", ".", "dot", "(", "beta", ".", "T", ")", "**", "2", "/", "2", ")", "\n", "\n", "A", "=", "(", "pEX", "+", "EPS", ")", "/", "(", "pEX", "+", "EPS", "+", "(", "1", "-", "mu", ")", "/", "mu", ")", "\n", "A", "[", "Y_batch", ".", "nonzero", "(", ")", "]", "=", "1.", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec._solve": [[119, 125], ["SERec.get_row", "numpy.dot", "numpy.linalg.solve", "X.T.dot", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.get_row"], ["", "def", "_solve", "(", "k", ",", "A_k", ",", "X", ",", "Y", ",", "f", ",", "lam", ",", "lam_y", ",", "mu", ")", ":", "\n", "    ", "'''Update one single factor'''", "\n", "s_u", ",", "i_u", "=", "get_row", "(", "Y", ",", "k", ")", "\n", "a", "=", "np", ".", "dot", "(", "s_u", "*", "A_k", "[", "i_u", "]", ",", "X", "[", "i_u", "]", ")", "\n", "B", "=", "X", ".", "T", ".", "dot", "(", "A_k", "[", ":", ",", "np", ".", "newaxis", "]", "*", "X", ")", "+", "lam", "*", "np", ".", "eye", "(", "f", ")", "\n", "return", "LA", ".", "solve", "(", "B", ",", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec._solve_batch": [[126, 140], ["numpy.empty_like", "enumerate", "SERec.a_row_batch", "SERec.a_row_batch", "range", "SERec._solve"], "function", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.a_row_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.a_row_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF._solve"], ["", "def", "_solve_batch", "(", "lo", ",", "hi", ",", "X", ",", "X_old_batch", ",", "Y", ",", "m", ",", "f", ",", "lam", ",", "lam_y", ",", "mu", ")", ":", "\n", "    ", "'''Update factors by batch, will eventually call _solve() on each factor to\n    keep the parallel process busy'''", "\n", "assert", "X_old_batch", ".", "shape", "[", "0", "]", "==", "hi", "-", "lo", "\n", "\n", "if", "mu", ".", "shape", "[", "1", "]", "==", "X", ".", "shape", "[", "0", "]", ":", "# update users", "\n", "        ", "A_batch", "=", "a_row_batch", "(", "Y", "[", "lo", ":", "hi", "]", ",", "X_old_batch", ",", "X", ",", "lam_y", ",", "mu", "[", "lo", ":", "hi", "]", ")", "\n", "", "else", ":", "# update items", "\n", "        ", "A_batch", "=", "a_row_batch", "(", "Y", "[", "lo", ":", "hi", "]", ",", "X_old_batch", ",", "X", ",", "lam_y", ",", "mu", ".", "T", "[", "lo", ":", "hi", "]", ")", "\n", "\n", "", "X_batch", "=", "np", ".", "empty_like", "(", "X_old_batch", ",", "dtype", "=", "X_old_batch", ".", "dtype", ")", "\n", "for", "ib", ",", "k", "in", "enumerate", "(", "range", "(", "lo", ",", "hi", ")", ")", ":", "\n", "        ", "X_batch", "[", "ib", "]", "=", "_solve", "(", "k", ",", "A_batch", "[", "ib", "]", ",", "X", ",", "Y", ",", "f", ",", "lam", ",", "lam_y", ",", "mu", ")", "\n", "", "return", "X_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.SERec.recompute_factors": [[141, 157], ["list", "numpy.vstack", "range", "joblib.Parallel", "joblib.delayed", "zip"], "function", ["None"], ["", "def", "recompute_factors", "(", "X", ",", "X_old", ",", "Y", ",", "lam", ",", "lam_y", ",", "mu", ",", "n_jobs", ",", "batch_size", "=", "1000", ")", ":", "\n", "    ", "'''Regress X to Y with exposure matrix (computed on-the-fly with X_old) and\n    ridge term lam by embarrassingly parallelization. All the comments below\n    are in the view of computing user factors'''", "\n", "m", ",", "n", "=", "Y", ".", "shape", "# m = number of users, n = number of items", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "n", "\n", "assert", "X_old", ".", "shape", "[", "0", "]", "==", "m", "\n", "f", "=", "X", ".", "shape", "[", "1", "]", "# f = number of factors", "\n", "\n", "start_idx", "=", "list", "(", "range", "(", "0", ",", "m", ",", "batch_size", ")", ")", "\n", "end_idx", "=", "start_idx", "[", "1", ":", "]", "+", "[", "m", "]", "\n", "res", "=", "Parallel", "(", "n_jobs", "=", "n_jobs", ")", "(", "delayed", "(", "_solve_batch", ")", "(", "\n", "lo", ",", "hi", ",", "X", ",", "X_old", "[", "lo", ":", "hi", "]", ",", "Y", ",", "m", ",", "f", ",", "lam", ",", "lam_y", ",", "mu", ")", "\n", "for", "lo", ",", "hi", "in", "zip", "(", "start_idx", ",", "end_idx", ")", ")", "\n", "X_new", "=", "np", ".", "vstack", "(", "res", ")", "\n", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.__init__": [[19, 22], ["base.deepRecommender.DeepRecommender.__init__", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "DeepRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "fold", "=", "fold", ")", "\n", "SocialRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "relation", "=", "relation", ",", "fold", "=", "fold", ")", "\n", "", "def", "readNegativeFeedbacks", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.readNegativeFeedbacks": [[22, 33], ["collections.defaultdict", "collections.defaultdict", "open", "line.strip().split", "RSGAN.RSGAN.negative[].append", "RSGAN.RSGAN.nItems[].append", "line.strip"], "methods", ["None"], ["", "def", "readNegativeFeedbacks", "(", "self", ")", ":", "\n", "        ", "self", ".", "negative", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "nItems", "=", "defaultdict", "(", "list", ")", "\n", "filename", "=", "self", ".", "config", "[", "'ratings'", "]", "[", ":", "-", "4", "]", "+", "'_n.txt'", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "items", "[", "0", "]", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "negative", "[", "items", "[", "0", "]", "]", ".", "append", "(", "items", "[", "1", "]", ")", "\n", "self", ".", "nItems", "[", "items", "[", "1", "]", "]", ".", "append", "(", "items", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.randomWalks": [[34, 169], ["collections.defaultdict", "collections.defaultdict", "print", "list", "collections.defaultdict", "collections.defaultdict", "print", "random.shuffle", "random.shuffle", "print", "print", "zip", "numpy.random.rand", "numpy.random.rand", "set", "set", "len", "len", "RSGAN.RSGAN.positive[].append", "RSGAN.RSGAN.pItems[].append", "range", "range", "range", "range", "set", "len", "set", "len", "RSGAN.RSGAN.pWalks.append", "RSGAN.RSGAN.nWalks.append", "set.intersection", "set.intersection", "len", "len", "path.append", "path.append", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set"], ["", "", "", "def", "randomWalks", "(", "self", ")", ":", "\n", "        ", "self", ".", "positive", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "pItems", "=", "defaultdict", "(", "list", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "trainSet_u", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "self", ".", "positive", "[", "user", "]", ".", "append", "(", "item", ")", "\n", "self", ".", "pItems", "[", "item", "]", ".", "append", "(", "user", ")", "\n", "\n", "# build U-F-NET", "\n", "", "", "print", "(", "'Building weighted user-friend network...'", ")", "\n", "# Definition of Meta-Path", "\n", "p1", "=", "'UIU'", "\n", "p2", "=", "'UFU'", "\n", "p3", "=", "'UTU'", "\n", "p4", "=", "'UFIU'", "\n", "p5", "=", "'UFUIU'", "\n", "mPaths", "=", "[", "p1", ",", "p2", ",", "p3", ",", "p4", ",", "p5", "]", "\n", "mPathCnt", "=", "[", "10", ",", "8", ",", "8", ",", "5", ",", "5", "]", "\n", "mPathSetting", "=", "list", "(", "zip", "(", "mPaths", ",", "mPathCnt", ")", ")", "\n", "walkLen", "=", "20", "\n", "\n", "self", ".", "G", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "num_users", ",", "50", ")", "*", "0.1", "\n", "self", ".", "W", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "num_users", ",", "50", ")", "*", "0.1", "\n", "\n", "self", ".", "UFNet", "=", "defaultdict", "(", "list", ")", "# a -> b #a trusts b", "\n", "for", "u", "in", "self", ".", "social", ".", "followees", ":", "\n", "            ", "s1", "=", "set", "(", "self", ".", "social", ".", "followees", "[", "u", "]", ")", "\n", "for", "v", "in", "self", ".", "social", ".", "followees", "[", "u", "]", ":", "\n", "                ", "if", "v", "in", "self", ".", "social", ".", "followees", ":", "# make sure that v has out links", "\n", "                    ", "if", "u", "!=", "v", ":", "\n", "                        ", "s2", "=", "set", "(", "self", ".", "social", ".", "followees", "[", "v", "]", ")", "\n", "weight", "=", "len", "(", "s1", ".", "intersection", "(", "s2", ")", ")", "\n", "self", ".", "UFNet", "[", "u", "]", "+=", "[", "v", "]", "*", "(", "weight", "+", "1", ")", "\n", "\n", "", "", "", "", "self", ".", "UTNet", "=", "defaultdict", "(", "list", ")", "# a <- b #a is trusted by b", "\n", "for", "u", "in", "self", ".", "social", ".", "followers", ":", "\n", "            ", "s1", "=", "set", "(", "self", ".", "social", ".", "followers", "[", "u", "]", ")", "\n", "for", "v", "in", "self", ".", "social", ".", "followers", "[", "u", "]", ":", "\n", "                ", "if", "v", "in", "self", ".", "social", ".", "followers", ":", "# make sure that v has out links", "\n", "                    ", "if", "u", "!=", "v", ":", "\n", "                        ", "s2", "=", "set", "(", "self", ".", "social", ".", "followers", "[", "v", "]", ")", "\n", "weight", "=", "len", "(", "s1", ".", "intersection", "(", "s2", ")", ")", "\n", "self", ".", "UTNet", "[", "u", "]", "+=", "[", "v", "]", "*", "(", "weight", "+", "1", ")", "\n", "\n", "# positive", "\n", "", "", "", "", "print", "(", "'Generating random meta-path random walks... (Positive)'", ")", "\n", "self", ".", "pWalks", "=", "[", "]", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "mps", "in", "mPathSetting", ":", "\n", "                ", "mp", ",", "walkCnt", "=", "mps", "\n", "for", "t", "in", "range", "(", "walkCnt", ")", ":", "\n", "                    ", "path", "=", "[", "'U'", "+", "user", "]", "\n", "lastNode", "=", "user", "\n", "nextNode", "=", "user", "\n", "lastType", "=", "'U'", "\n", "for", "i", "in", "range", "(", "walkLen", "//", "len", "(", "mp", "[", "1", ":", "]", ")", ")", ":", "\n", "                        ", "for", "tp", "in", "mp", "[", "1", ":", "]", ":", "\n", "                            ", "try", ":", "\n", "                                ", "if", "tp", "==", "'I'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "positive", "[", "lastNode", "]", ")", "\n", "\n", "", "if", "tp", "==", "'U'", ":", "\n", "                                    ", "if", "lastType", "==", "'I'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "pItems", "[", "lastNode", "]", ")", "\n", "", "elif", "lastType", "==", "'F'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                            ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "", "", "elif", "lastType", "==", "'T'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                            ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "", "", "", "if", "tp", "==", "'F'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "", "", "if", "tp", "==", "'T'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "", "", "path", ".", "append", "(", "tp", "+", "nextNode", ")", "\n", "lastNode", "=", "nextNode", "\n", "lastType", "=", "tp", "\n", "", "except", "(", "KeyError", ",", "IndexError", ")", ":", "\n", "                                ", "path", "=", "[", "]", "\n", "break", "\n", "", "", "", "if", "path", ":", "\n", "                        ", "self", ".", "pWalks", ".", "append", "(", "path", ")", "\n", "", "", "", "", "self", ".", "nWalks", "=", "[", "]", "\n", "# negative", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "            ", "for", "mps", "in", "mPathSetting", ":", "\n", "                ", "mp", ",", "walkCnt", "=", "mps", "\n", "for", "t", "in", "range", "(", "walkCnt", ")", ":", "\n", "                    ", "path", "=", "[", "'U'", "+", "user", "]", "\n", "lastNode", "=", "user", "\n", "nextNode", "=", "user", "\n", "lastType", "=", "'U'", "\n", "for", "i", "in", "range", "(", "walkLen", "//", "len", "(", "mp", "[", "1", ":", "]", ")", ")", ":", "\n", "                        ", "for", "tp", "in", "mp", "[", "1", ":", "]", ":", "\n", "                            ", "try", ":", "\n", "                                ", "if", "tp", "==", "'I'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "negative", "[", "lastNode", "]", ")", "\n", "", "if", "tp", "==", "'U'", ":", "\n", "                                    ", "if", "lastType", "==", "'I'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "nItems", "[", "lastNode", "]", ")", "\n", "", "elif", "lastType", "==", "'F'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                            ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "", "", "elif", "lastType", "==", "'T'", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                            ", "nextNode", "=", "choice", "(", "self", ".", "UTNet", "[", "lastNode", "]", ")", "\n", "", "", "", "if", "tp", "==", "'F'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "", "", "if", "tp", "==", "'T'", ":", "\n", "                                    ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "while", "nextNode", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                                        ", "nextNode", "=", "choice", "(", "self", ".", "UFNet", "[", "lastNode", "]", ")", "\n", "", "", "path", ".", "append", "(", "tp", "+", "nextNode", ")", "\n", "lastNode", "=", "nextNode", "\n", "lastType", "=", "tp", "\n", "", "except", "(", "KeyError", ",", "IndexError", ")", ":", "\n", "                                ", "path", "=", "[", "]", "\n", "break", "\n", "", "", "", "if", "path", ":", "\n", "                        ", "self", ".", "nWalks", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "", "shuffle", "(", "self", ".", "pWalks", ")", "\n", "shuffle", "(", "self", ".", "nWalks", ")", "\n", "print", "(", "'pwalks:'", ",", "len", "(", "self", ".", "pWalks", ")", ")", "\n", "print", "(", "'nwalks:'", ",", "len", "(", "self", ".", "nWalks", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.computeSimilarity": [[170, 225], ["print", "gensim.Word2Vec", "gensim.Word2Vec", "print", "print", "enumerate", "enumerate", "collections.defaultdict", "list", "print", "sorted", "print", "sorted", "set().intersection", "len", "util.qmath.cosine", "uSim.append", "len", "util.qmath.cosine", "uSim.append", "set", "set"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set"], ["", "def", "computeSimilarity", "(", "self", ")", ":", "\n", "# Training get top-k friends", "\n", "        ", "print", "(", "'Generating user embedding...'", ")", "\n", "topK", "=", "100", "\n", "self", ".", "pTopKSim", "=", "{", "}", "\n", "self", ".", "nTopKSim", "=", "{", "}", "\n", "\n", "pos_model", "=", "w2v", ".", "Word2Vec", "(", "self", ".", "pWalks", ",", "size", "=", "50", ",", "window", "=", "5", ",", "min_count", "=", "0", ",", "iter", "=", "10", ")", "\n", "neg_model", "=", "w2v", ".", "Word2Vec", "(", "self", ".", "nWalks", ",", "size", "=", "50", ",", "window", "=", "5", ",", "min_count", "=", "0", ",", "iter", "=", "10", ")", "\n", "for", "user", "in", "self", ".", "positive", ":", "\n", "            ", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "try", ":", "\n", "                ", "self", ".", "W", "[", "uid", "]", "=", "pos_model", ".", "wv", "[", "'U'", "+", "user", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "continue", "\n", "", "", "for", "user", "in", "self", ".", "negative", ":", "\n", "            ", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "try", ":", "\n", "                ", "self", ".", "G", "[", "uid", "]", "=", "neg_model", ".", "wv", "[", "'U'", "+", "user", "]", "\n", "", "except", "KeyError", ":", "\n", "                ", "continue", "\n", "", "", "print", "(", "'User embedding generated.'", ")", "\n", "\n", "print", "(", "'Constructing similarity matrix...'", ")", "\n", "\n", "for", "i", ",", "user1", "in", "enumerate", "(", "self", ".", "positive", ")", ":", "\n", "            ", "uSim", "=", "[", "]", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "i", ",", "'/'", ",", "len", "(", "self", ".", "positive", ")", ")", "\n", "", "vec1", "=", "self", ".", "W", "[", "self", ".", "data", ".", "user", "[", "user1", "]", "]", "\n", "for", "user2", "in", "self", ".", "positive", ":", "\n", "                ", "if", "user1", "!=", "user2", ":", "\n", "                    ", "vec2", "=", "self", ".", "W", "[", "self", ".", "data", ".", "user", "[", "user2", "]", "]", "\n", "sim", "=", "cosine", "(", "vec1", ",", "vec2", ")", "\n", "uSim", ".", "append", "(", "(", "user2", ",", "sim", ")", ")", "\n", "", "", "fList", "=", "sorted", "(", "uSim", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", ":", "topK", "]", "\n", "self", ".", "pTopKSim", "[", "user1", "]", "=", "[", "item", "[", "0", "]", "for", "item", "in", "fList", "]", "\n", "\n", "", "for", "i", ",", "user1", "in", "enumerate", "(", "self", ".", "negative", ")", ":", "\n", "            ", "uSim", "=", "[", "]", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "i", ",", "'/'", ",", "len", "(", "self", ".", "negative", ")", ")", "\n", "", "vec1", "=", "self", ".", "G", "[", "self", ".", "data", ".", "user", "[", "user1", "]", "]", "\n", "for", "user2", "in", "self", ".", "negative", ":", "\n", "                ", "if", "user1", "!=", "user2", ":", "\n", "                    ", "vec2", "=", "self", ".", "G", "[", "self", ".", "data", ".", "user", "[", "user2", "]", "]", "\n", "sim", "=", "cosine", "(", "vec1", ",", "vec2", ")", "\n", "uSim", ".", "append", "(", "(", "user2", ",", "sim", ")", ")", "\n", "", "", "fList", "=", "sorted", "(", "uSim", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", ":", "topK", "]", "\n", "self", ".", "nTopKSim", "[", "user1", "]", "=", "[", "item", "[", "0", "]", "for", "item", "in", "fList", "]", "\n", "\n", "", "self", ".", "seededFriends", "=", "defaultdict", "(", "list", ")", "\n", "for", "user", "in", "self", ".", "pTopKSim", ":", "\n", "            ", "trueFriends", "=", "list", "(", "set", "(", "self", ".", "pTopKSim", "[", "user", "]", ")", ".", "intersection", "(", "set", "(", "self", ".", "nTopKSim", "[", "user", "]", ")", ")", ")", "\n", "self", ".", "seededFriends", "[", "user", "]", "=", "trueFriends", "+", "self", ".", "pTopKSim", "[", "user", "]", "[", ":", "30", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.sampling": [[226, 230], ["tensorflow.nn.softmax", "RSGAN.gumbel_softmax"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.gumbel_softmax"], ["", "", "def", "sampling", "(", "self", ",", "vec", ")", ":", "\n", "        ", "vec", "=", "tf", ".", "nn", ".", "softmax", "(", "vec", ")", "\n", "logits", "=", "gumbel_softmax", "(", "vec", ",", "0.1", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.build_graph": [[231, 306], ["tensorflow.SparseTensor", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.name_scope", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.multiply", "tensorflow.maximum", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.variable_scope", "tensorflow.get_variable", "RSGAN.RSGAN.g_params.append", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "RSGAN.RSGAN.sampling", "tensorflow.transpose", "tensorflow.nn.embedding_lookup", "RSGAN.RSGAN.sampling", "tensorflow.matmul", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.reduce_sum", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.log", "tensorflow.constant_initializer", "tensorflow.transpose", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampling", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampling", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "[", "self", ".", "data", ".", "item", "[", "item", "[", "1", "]", "]", ",", "self", ".", "data", ".", "user", "[", "item", "[", "0", "]", "]", "]", "for", "item", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "values", "=", "[", "item", "[", "2", "]", "for", "item", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "self", ".", "i_u_matrix", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "indices", ",", "values", "=", "values", ",", "dense_shape", "=", "[", "self", ".", "num_items", ",", "self", ".", "num_users", "]", ")", "\n", "self", ".", "pos", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"positive_item\"", ")", "\n", "self", ".", "fnd", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"friend_item\"", ")", "\n", "self", ".", "neg", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "i", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"item_holder\"", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"generator\"", ")", ":", "\n", "#CDAE", "\n", "            ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "num_users", "]", ")", "\n", "self", ".", "V", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_users", ",", "200", "]", ")", ")", "\n", "chosen_user_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "V", ",", "self", ".", "u_idx", ")", "\n", "\n", "self", ".", "weights", "=", "{", "\n", "'encoder'", ":", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_users", ",", "200", "]", ")", ")", ",", "\n", "'decoder'", ":", "tf", ".", "Variable", "(", "initializer", "(", "[", "200", ",", "self", ".", "num_users", "]", ")", ")", ",", "\n", "}", "\n", "self", ".", "biases", "=", "{", "\n", "'encoder'", ":", "tf", ".", "Variable", "(", "initializer", "(", "[", "200", "]", ")", ")", ",", "\n", "'decoder'", ":", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_users", "]", ")", ")", ",", "\n", "}", "\n", "\n", "self", ".", "g_params", "=", "[", "self", ".", "weights", ",", "self", ".", "biases", ",", "self", ".", "V", "]", "\n", "\n", "layer", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "self", ".", "X", ",", "self", ".", "weights", "[", "'encoder'", "]", ")", "+", "self", ".", "biases", "[", "'encoder'", "]", "+", "chosen_user_embeddings", ")", "\n", "self", ".", "g_output", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "layer", ",", "self", ".", "weights", "[", "'decoder'", "]", ")", "+", "self", ".", "biases", "[", "'decoder'", "]", ")", "\n", "\n", "self", ".", "y_pred", "=", "tf", ".", "multiply", "(", "self", ".", "X", ",", "self", ".", "g_output", ")", "\n", "self", ".", "y_pred", "=", "tf", ".", "maximum", "(", "1e-6", ",", "self", ".", "y_pred", ")", "\n", "\n", "cross_entropy", "=", "-", "tf", ".", "multiply", "(", "self", ".", "X", ",", "tf", ".", "log", "(", "self", ".", "y_pred", ")", ")", "-", "tf", ".", "multiply", "(", "(", "1", "-", "self", ".", "X", ")", ",", "\n", "tf", ".", "log", "(", "1", "-", "self", ".", "y_pred", ")", ")", "\n", "self", ".", "reconstruction", "=", "tf", ".", "reduce_sum", "(", "cross_entropy", ")", "+", "self", ".", "regU", "*", "(", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", "[", "'encoder'", "]", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", "[", "'decoder'", "]", ")", "+", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "biases", "[", "'encoder'", "]", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "biases", "[", "'decoder'", "]", ")", ")", "\n", "g_pre", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "g_pretrain", "=", "g_pre", ".", "minimize", "(", "self", ".", "reconstruction", ",", "var_list", "=", "self", ".", "g_params", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'discriminator'", ")", ":", "\n", "            ", "self", ".", "item_selection", "=", "tf", ".", "get_variable", "(", "'item_selection'", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.01", ")", ",", "shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ")", "\n", "self", ".", "g_params", ".", "append", "(", "self", ".", "item_selection", ")", "\n", "self", ".", "d_params", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", "\n", "# placeholder definition", "\n", "self", ".", "u_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "u_idx", ",", "name", "=", "'u_e'", ")", "\n", "self", ".", "i_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "pos", ",", "name", "=", "'i_e'", ")", "\n", "self", ".", "j_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg", ",", "name", "=", "'j_e'", ")", "\n", "#generate virtual friends by gumbel-softmax", "\n", "self", ".", "virtualFriends", "=", "self", ".", "sampling", "(", "self", ".", "g_output", ")", "#one-hot", "\n", "#get candidate list (items)", "\n", "self", ".", "candidateItems", "=", "tf", ".", "transpose", "(", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "i_u_matrix", ",", "tf", ".", "transpose", "(", "self", ".", "virtualFriends", ")", ")", ")", "\n", "self", ".", "embedding_selection", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_selection", ",", "self", ".", "u_idx", ",", "name", "=", "'e_s'", ")", "\n", "self", ".", "virtual_items", "=", "self", ".", "sampling", "(", "tf", ".", "multiply", "(", "self", ".", "candidateItems", ",", "self", ".", "embedding_selection", ")", ")", "\n", "self", ".", "v_i_embedding", "=", "tf", ".", "matmul", "(", "self", ".", "virtual_items", ",", "self", ".", "item_embeddings", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "False", ")", "\n", "y_us", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "i_embedding", ")", ",", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "j_embedding", ")", ",", "1", ")", "\n", "self", ".", "d_pretrain_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y_us", ")", ")", ")", "+", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", "+", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "j_embedding", ")", "+", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "i_embedding", ")", ")", "\n", "y_uf", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "i_embedding", ")", ",", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "v_i_embedding", ")", ",", "1", ")", "\n", "y_fs", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "v_i_embedding", ")", ",", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "j_embedding", ")", ",", "1", ")", "\n", "self", ".", "d_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y_uf", ")", ")", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y_fs", ")", ")", ")", "+", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "i_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "j_embedding", ")", ")", "#", "\n", "self", ".", "g_loss", "=", "30", "*", "tf", ".", "reduce_sum", "(", "y_uf", ")", "#better performance", "\n", "d_pre", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "d_pretrain", "=", "d_pre", ".", "minimize", "(", "self", ".", "d_pretrain_loss", ",", "var_list", "=", "self", ".", "d_params", ")", "\n", "self", ".", "d_output", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "item_embeddings", ")", ",", "1", ")", "\n", "", "d_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "d_update", "=", "d_opt", ".", "minimize", "(", "self", ".", "d_loss", ",", "var_list", "=", "self", ".", "d_params", ")", "\n", "g_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "g_update", "=", "g_opt", ".", "minimize", "(", "self", ".", "g_loss", ",", "var_list", "=", "self", ".", "g_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.next_batch_g": [[307, 330], ["list", "RSGAN.RSGAN.data.user.keys", "numpy.zeros", "enumerate", "enumerate", "sampled_users.append", "numpy.zeros", "numpy.zeros.append", "sampled_users.append"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "def", "next_batch_g", "(", "self", ")", ":", "\n", "        ", "userList", "=", "list", "(", "self", ".", "data", ".", "user", ".", "keys", "(", ")", ")", "\n", "batch_id", "=", "0", "\n", "while", "batch_id", "<", "self", ".", "num_users", ":", "\n", "            ", "if", "batch_id", "+", "self", ".", "batch_size", "<=", "self", ".", "num_users", ":", "\n", "                ", "sampled_users", "=", "[", "]", "\n", "profiles", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_users", ")", ")", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "userList", "[", "batch_id", ":", "self", ".", "batch_size", "+", "batch_id", "]", ")", ":", "\n", "                    ", "ind", "=", "[", "self", ".", "data", ".", "user", "[", "friend", "]", "for", "friend", "in", "self", ".", "seededFriends", "[", "user", "]", "]", "\n", "profiles", "[", "i", "]", "[", "ind", "]", "=", "1", "\n", "sampled_users", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "", "batch_id", "+=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "profiles", "=", "[", "]", "\n", "sampled_users", "=", "[", "]", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "userList", "[", "self", ".", "num_users", "-", "batch_id", ":", "]", ")", ":", "\n", "                    ", "vals", "=", "np", ".", "zeros", "(", "self", ".", "num_users", ")", "\n", "ind", "=", "[", "self", ".", "data", ".", "user", "[", "friend", "]", "for", "friend", "in", "self", ".", "seededFriends", "[", "user", "]", "]", "\n", "vals", "[", "ind", "]", "=", "1", "\n", "profiles", ".", "append", "(", "vals", ")", "\n", "sampled_users", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "", "batch_id", "=", "self", ".", "num_users", "\n", "", "yield", "profiles", ",", "sampled_users", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.initModel": [[331, 337], ["super().initModel", "RSGAN.RSGAN.readNegativeFeedbacks", "RSGAN.RSGAN.randomWalks", "RSGAN.RSGAN.computeSimilarity", "RSGAN.RSGAN.build_graph"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.readNegativeFeedbacks", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.randomWalks", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.computeSimilarity", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.build_graph"], ["", "", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "RSGAN", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "readNegativeFeedbacks", "(", ")", "\n", "self", ".", "randomWalks", "(", ")", "\n", "self", ".", "computeSimilarity", "(", ")", "\n", "self", ".", "build_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.trainModel": [[338, 367], ["tensorflow.global_variables_initializer", "RSGAN.RSGAN.sess.run", "print", "range", "print", "range", "enumerate", "enumerate", "RSGAN.RSGAN.next_batch_g", "RSGAN.RSGAN.sess.run", "print", "RSGAN.RSGAN.next_batch_pairwise", "numpy.zeros", "enumerate", "RSGAN.RSGAN.sess.run", "RSGAN.RSGAN.sess.run", "print", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.next_batch_g", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "# minimax training", "\n", "        ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "# pretraining", "\n", "print", "(", "'pretraining for generator...'", ")", "\n", "for", "i", "in", "range", "(", "30", ")", ":", "\n", "            ", "for", "num", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_g", "(", ")", ")", ":", "\n", "                ", "profiles", ",", "uid", "=", "batch", "\n", "_", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_pretrain", ",", "self", ".", "reconstruction", "]", ",", "feed_dict", "=", "{", "self", ".", "X", ":", "profiles", ",", "self", ".", "u_idx", ":", "uid", "}", ")", "\n", "print", "(", "'pretraining:'", ",", "i", "+", "1", ",", "'batch'", ",", "num", ",", "'generator loss:'", ",", "loss", ")", "\n", "\n", "", "", "print", "(", "'Training GAN...'", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "for", "num", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "profiles", "=", "np", ".", "zeros", "(", "(", "len", "(", "user_idx", ")", ",", "self", ".", "num_users", ")", ")", "\n", "for", "n", ",", "u", "in", "enumerate", "(", "user_idx", ")", ":", "\n", "                    ", "u_name", "=", "self", ".", "data", ".", "id2user", "[", "u", "]", "\n", "idx", "=", "[", "self", ".", "data", ".", "user", "[", "friend", "]", "for", "friend", "in", "self", ".", "seededFriends", "[", "u_name", "]", "]", "\n", "profiles", "[", "n", "]", "[", "idx", "]", "=", "1", "\n", "#generator", "\n", "", "_", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "g_update", ",", "self", ".", "g_loss", "]", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg", ":", "j_idx", ",", "\n", "self", ".", "pos", ":", "i_idx", ",", "self", ".", "X", ":", "profiles", "}", ")", "\n", "#discriminator", "\n", "_", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "d_update", ",", "self", ".", "d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg", ":", "j_idx", ",", "self", ".", "pos", ":", "i_idx", ",", "self", ".", "X", ":", "profiles", "}", ")", "\n", "\n", "print", "(", "'training:'", ",", "i", "+", "1", ",", "'batch_id'", ",", "num", ",", "'discriminator loss:'", ",", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.RSGAN.predictForRanking": [[368, 376], ["RSGAN.RSGAN.data.containsUser", "RSGAN.RSGAN.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "d_output", ",", "{", "self", ".", "u_idx", ":", "[", "u", "]", "}", ")", "\n", "return", "res", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.RSGAN.gumbel_softmax": [[11, 17], ["tensorflow.random_uniform", "tensorflow.nn.softmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log"], "function", ["None"], ["def", "gumbel_softmax", "(", "logits", ",", "temperature", "=", "0.2", ")", ":", "\n", "    ", "eps", "=", "1e-20", "\n", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "logits", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1", ")", "\n", "gumbel_noise", "=", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "u", "+", "eps", ")", "+", "eps", ")", "\n", "y", "=", "logits", "+", "gumbel_noise", "\n", "return", "tf", ".", "nn", ".", "softmax", "(", "y", "/", "temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.GEN.__init__": [[11, 42], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.gather", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.gather", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.zeros", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.multiply", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.reshape", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "itemNum", ",", "userNum", ",", "emb_dim", ",", "lamda", ",", "learning_rate", "=", "0.002", ")", ":", "\n", "        ", "self", ".", "itemNum", "=", "itemNum", "\n", "self", ".", "userNum", "=", "userNum", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "lamda", "=", "lamda", "# regularization parameters", "\n", "self", ".", "g_params", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'generator'", ")", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_uniform", "(", "[", "self", ".", "userNum", ",", "self", ".", "emb_dim", "]", ",", "minval", "=", "-", "0.05", ",", "maxval", "=", "0.05", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_uniform", "(", "[", "self", ".", "itemNum", ",", "self", ".", "emb_dim", "]", ",", "minval", "=", "-", "0.05", ",", "maxval", "=", "0.05", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "self", ".", "item_bias", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "self", ".", "itemNum", "]", ")", ")", "\n", "self", ".", "g_params", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", ",", "self", ".", "item_bias", "]", "\n", "\n", "", "self", ".", "u", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "i", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "label", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "reward", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "u_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "u", ")", "\n", "self", ".", "i_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "i", ")", "\n", "self", ".", "i_bias", "=", "tf", ".", "gather", "(", "self", ".", "item_bias", ",", "self", ".", "i", ")", "\n", "self", ".", "pre_train_loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "label", ",", "\n", "logits", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "i_embedding", ")", ",", "1", ")", ")", "\n", "self", ".", "pre_train_loss", "+=", "self", ".", "lamda", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "i_embedding", ")", "\n", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "i_bias", ")", ")", "\n", "self", ".", "all_logits", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "item_embeddings", ")", ",", "1", ")", "+", "self", ".", "item_bias", "\n", "self", ".", "i_prob", "=", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "self", ".", "all_logits", ",", "[", "1", ",", "-", "1", "]", ")", ")", ",", "[", "-", "1", "]", ")", ",", "self", ".", "i", ")", "\n", "self", ".", "gan_loss", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "self", ".", "i_prob", ")", "*", "self", ".", "reward", ")", "+", "self", ".", "lamda", "*", "(", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "i_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "i_bias", ")", ")", "\n", "g_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "self", ".", "gan_updates", "=", "g_opt", ".", "minimize", "(", "self", ".", "gan_loss", ",", "var_list", "=", "self", ".", "g_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.DIS.__init__": [[44, 76], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.gather", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.reduce_sum", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.zeros", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.sigmoid", "tensorflow.multiply", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.gather", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.reshape", "tensorflow.nn.softmax", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["    ", "def", "__init__", "(", "self", ",", "itemNum", ",", "userNum", ",", "emb_dim", ",", "lamda", ",", "learning_rate", "=", "0.002", ")", ":", "\n", "        ", "self", ".", "itemNum", "=", "itemNum", "\n", "self", ".", "userNum", "=", "userNum", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "lamda", "=", "lamda", "# regularization parameters", "\n", "self", ".", "d_params", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "'discriminator'", ")", ":", "\n", "            ", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_uniform", "(", "[", "self", ".", "userNum", ",", "self", ".", "emb_dim", "]", ",", "minval", "=", "-", "0.05", ",", "maxval", "=", "0.05", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "\n", "tf", ".", "random_uniform", "(", "[", "self", ".", "itemNum", ",", "self", ".", "emb_dim", "]", ",", "minval", "=", "-", "0.05", ",", "maxval", "=", "0.05", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "self", ".", "item_bias", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "self", ".", "itemNum", "]", ")", ")", "\n", "", "self", ".", "d_params", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", ",", "self", ".", "item_bias", "]", "\n", "\n", "# placeholder definition", "\n", "self", ".", "u", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "i", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "label", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "u_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "u", ")", "\n", "self", ".", "i_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "i", ")", "\n", "self", ".", "i_bias", "=", "tf", ".", "gather", "(", "self", ".", "item_bias", ",", "self", ".", "i", ")", "\n", "self", ".", "pre_logits", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "i_embedding", ")", ",", "1", ")", "+", "self", ".", "i_bias", "\n", "self", ".", "pre_loss", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "label", ",", "logits", "=", "self", ".", "pre_logits", ")", "+", "self", ".", "lamda", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "i_embedding", ")", "\n", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "i_bias", ")", ")", "\n", "\n", "d_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "self", ".", "d_updates", "=", "d_opt", ".", "minimize", "(", "self", ".", "pre_loss", ",", "var_list", "=", "self", ".", "d_params", ")", "\n", "self", ".", "reward_logits", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "i_embedding", ")", ",", "1", ")", "+", "self", ".", "i_bias", "\n", "self", ".", "reward", "=", "2", "*", "(", "tf", ".", "sigmoid", "(", "self", ".", "reward_logits", ")", "-", "0.5", ")", "\n", "self", ".", "all_logits", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "item_embeddings", ")", ",", "1", ")", "+", "self", ".", "item_bias", "\n", "self", ".", "NLL", "=", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "tf", ".", "gather", "(", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "reshape", "(", "self", ".", "all_logits", ",", "[", "1", ",", "-", "1", "]", ")", ")", ",", "[", "-", "1", "]", ")", ",", "self", ".", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.__init__": [[78, 80], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "IRGAN", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.get_data": [[81, 102], ["IRGAN.IRGAN.data.userRated", "IRGAN.IRGAN.sess.run", "numpy.exp", "numpy.random.choice", "range", "range", "numpy.array", "numpy.sum", "numpy.arange", "len", "users.append", "items.append", "label.append", "len", "users.append", "items.append", "label.append", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "get_data", "(", "self", ",", "model", ")", ":", "\n", "        ", "users", ",", "items", ",", "label", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "user", "in", "self", ".", "data", ".", "trainSet_u", ":", "\n", "            ", "pos", ",", "values", "=", "self", ".", "data", ".", "userRated", "(", "user", ")", "\n", "pos", "=", "[", "self", ".", "data", ".", "item", "[", "item", "]", "for", "item", "in", "pos", "]", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "rating", "=", "self", ".", "sess", ".", "run", "(", "model", ".", "all_logits", ",", "{", "model", ".", "u", ":", "[", "u", "]", "}", ")", "\n", "rating", "=", "np", ".", "array", "(", "rating", ")", "/", "0.2", "# Temperature", "\n", "exp_rating", "=", "np", ".", "exp", "(", "rating", ")", "\n", "exp_rating", "[", "np", ".", "array", "(", "pos", ")", "]", "=", "0", "\n", "prob", "=", "exp_rating", "/", "np", ".", "sum", "(", "exp_rating", ")", "\n", "neg", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "self", ".", "num_items", ")", ",", "size", "=", "2", "*", "len", "(", "pos", ")", ",", "p", "=", "prob", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "pos", ")", ")", ":", "\n", "                ", "users", ".", "append", "(", "u", ")", "\n", "items", ".", "append", "(", "pos", "[", "i", "]", ")", "\n", "label", ".", "append", "(", "1.", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "neg", ")", ")", ":", "\n", "                ", "users", ".", "append", "(", "u", ")", "\n", "items", ".", "append", "(", "neg", "[", "i", "]", ")", "\n", "label", ".", "append", "(", "0.", ")", "\n", "", "", "return", "users", ",", "items", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.get_batch": [[103, 106], ["None"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "data", ",", "index", ",", "size", ")", ":", "\n", "        ", "user", ",", "item", ",", "label", "=", "data", "\n", "return", "(", "user", "[", "index", ":", "index", "+", "size", "]", ",", "item", "[", "index", ":", "index", "+", "size", "]", ",", "label", "[", "index", ":", "index", "+", "size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.initModel": [[107, 111], ["super().initModel", "IRGAN.GEN", "IRGAN.DIS"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "IRGAN", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "generator", "=", "GEN", "(", "self", ".", "num_items", ",", "self", ".", "num_users", ",", "self", ".", "emb_size", ",", "lamda", "=", "self", ".", "regU", ",", "learning_rate", "=", "self", ".", "lRate", ")", "\n", "self", ".", "discriminator", "=", "DIS", "(", "self", ".", "num_items", ",", "self", ".", "num_users", ",", "self", ".", "emb_size", ",", "lamda", "=", "self", ".", "regU", ",", "learning_rate", "=", "self", ".", "lRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.trainModel": [[112, 171], ["tensorflow.global_variables_initializer", "IRGAN.IRGAN.sess.run", "range", "print", "range", "print", "range", "IRGAN.IRGAN.get_data", "print", "print", "IRGAN.IRGAN.sess.run", "IRGAN.IRGAN.data.userRated", "IRGAN.IRGAN.sess.run", "numpy.exp", "numpy.random.choice", "IRGAN.IRGAN.sess.run", "IRGAN.IRGAN.sess.run", "IRGAN.IRGAN.get_batch", "IRGAN.IRGAN.get_batch", "numpy.sum", "len", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.get_data", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.get_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.get_batch"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "# minimax training", "\n", "        ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "#pretrain the discriminator", "\n", "# for i in range(100):", "\n", "#     input_user, input_item, input_label = self.next_batch()", "\n", "#     _ = self.sess.run(self.discriminator.d_updates,", "\n", "#                       feed_dict={self.discriminator.u: input_user, self.discriminator.i: input_item,", "\n", "#                                  self.discriminator.label: input_label})", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "print", "(", "'Update discriminator...'", ")", "\n", "for", "d_epoch", "in", "range", "(", "1", ")", ":", "\n", "                ", "user_set", ",", "item_set", ",", "labels", "=", "self", ".", "get_data", "(", "self", ".", "generator", ")", "\n", "data", "=", "[", "user_set", ",", "item_set", ",", "labels", "]", "\n", "index", "=", "0", "\n", "while", "index", "<", "self", ".", "train_size", ":", "\n", "                    ", "if", "index", "+", "self", ".", "batch_size", "<=", "self", ".", "train_size", ":", "\n", "                        ", "input_user", ",", "input_item", ",", "input_label", "=", "self", ".", "get_batch", "(", "data", ",", "index", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "                        ", "input_user", ",", "input_item", ",", "input_label", "=", "self", ".", "get_batch", "(", "data", ",", "index", ",", "self", ".", "train_size", "-", "index", ")", "\n", "", "index", "+=", "self", ".", "batch_size", "\n", "_", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "discriminator", ".", "d_updates", ",", "\n", "feed_dict", "=", "{", "self", ".", "discriminator", ".", "u", ":", "input_user", ",", "self", ".", "discriminator", ".", "i", ":", "input_item", ",", "\n", "self", ".", "discriminator", ".", "label", ":", "input_label", "}", ")", "\n", "", "print", "(", "'epoch:'", ",", "epoch", "+", "1", ",", "'d_epoch:'", ",", "d_epoch", "+", "1", ")", "\n", "\n", "# Train G", "\n", "", "print", "(", "'Update generator...'", ")", "\n", "for", "g_epoch", "in", "range", "(", "5", ")", ":", "\n", "                ", "for", "user", "in", "self", ".", "data", ".", "trainSet_u", ":", "\n", "                    ", "sample_lambda", "=", "0.2", "\n", "pos", ",", "values", "=", "self", ".", "data", ".", "userRated", "(", "user", ")", "\n", "pos", "=", "[", "self", ".", "data", ".", "item", "[", "item", "]", "for", "item", "in", "pos", "]", "\n", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "rating", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "generator", ".", "all_logits", ",", "{", "self", ".", "generator", ".", "u", ":", "u", "}", ")", "\n", "exp_rating", "=", "np", ".", "exp", "(", "rating", ")", "\n", "prob", "=", "exp_rating", "/", "np", ".", "sum", "(", "exp_rating", ")", "# prob is generator distribution p_\\theta", "\n", "# Here is the importance sampling. Actually I have some problems in understandings these two", "\n", "# lines and the paper doesn't give details about the importance sampling.", "\n", "pn", "=", "(", "1", "-", "sample_lambda", ")", "*", "prob", "\n", "pn", "[", "pos", "]", "+=", "sample_lambda", "*", "1.0", "/", "len", "(", "pos", ")", "\n", "# Now, pn is the Pn in importance sampling, prob is generator distribution p_\\theta", "\n", "\n", "sample", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "self", ".", "num_items", ")", ",", "3", "*", "len", "(", "pos", ")", ",", "p", "=", "pn", ")", "\n", "###########################################################################", "\n", "# Get reward and adapt it with importance sampling", "\n", "###########################################################################", "\n", "reward", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "discriminator", ".", "reward", ",", "\n", "{", "self", ".", "discriminator", ".", "u", ":", "u", ",", "self", ".", "discriminator", ".", "i", ":", "sample", "}", ")", "\n", "reward", "=", "reward", "*", "prob", "[", "sample", "]", "/", "pn", "[", "sample", "]", "\n", "###########################################################################", "\n", "# Update G", "\n", "###########################################################################", "\n", "_", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "generator", ".", "gan_updates", ",", "\n", "{", "self", ".", "generator", ".", "u", ":", "u", ",", "self", ".", "generator", ".", "i", ":", "sample", ",", "\n", "self", ".", "generator", ".", "reward", ":", "reward", "}", ")", "\n", "\n", "", "print", "(", "'epoch:'", ",", "epoch", "+", "1", ",", "'g_epoch:'", ",", "g_epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.IRGAN.IRGAN.predictForRanking": [[172, 183], ["IRGAN.IRGAN.data.containsUser", "IRGAN.IRGAN.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "\n", "#In our experiments, discriminator performs better than generator", "\n", "res", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "discriminator", ".", "all_logits", ",", "{", "self", ".", "discriminator", ".", "u", ":", "[", "u", "]", "}", ")", "\n", "return", "res", "\n", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.__init__": [[20, 24], ["base.graphRecommender.GraphRecommender.__init__", "base.socialRecommender.SocialRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "relation", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "GraphRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "fold", "=", "fold", ")", "\n", "SocialRecommender", ".", "__init__", "(", "self", ",", "conf", "=", "conf", ",", "trainingSet", "=", "trainingSet", ",", "testSet", "=", "testSet", ",", "relation", "=", "relation", ",", "fold", "=", "fold", ")", "\n", "self", ".", "n_layers_G", "=", "2", "#the number of layers of the alternative neigbhor generation module (generator)", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.readConfiguration": [[25, 31], ["super().readConfiguration", "util.config.OptionConf", "int", "float", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "ESRF", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'ESRF'", "]", ")", "\n", "self", ".", "K", "=", "int", "(", "args", "[", "'-K'", "]", ")", "#controling the magnitude of adversarial learning", "\n", "self", ".", "beta", "=", "float", "(", "args", "[", "'-beta'", "]", ")", "#the number of alternative neighbors", "\n", "self", ".", "n_layers_D", "=", "int", "(", "args", "[", "'-n_layer'", "]", ")", "#the number of layers of the recommendation module (discriminator)", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildSparseRelationMatrix": [[32, 41], ["scipy.sparse.coo_matrix"], "methods", ["None"], ["", "def", "buildSparseRelationMatrix", "(", "self", ")", ":", "\n", "        ", "row", ",", "col", ",", "entries", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "pair", "in", "self", ".", "social", ".", "relation", ":", "\n", "# symmetric matrix", "\n", "            ", "row", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "]", "\n", "col", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "1", "]", "]", "]", "\n", "entries", "+=", "[", "1", "]", "\n", "", "AdjacencyMatrix", "=", "coo_matrix", "(", "(", "entries", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_users", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "AdjacencyMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildSparseRatingMatrix": [[42, 51], ["scipy.sparse.coo_matrix"], "methods", ["None"], ["", "def", "buildSparseRatingMatrix", "(", "self", ")", ":", "\n", "        ", "row", ",", "col", ",", "entries", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "pair", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "# symmetric matrix", "\n", "            ", "row", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "]", "\n", "col", "+=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "]", "\n", "entries", "+=", "[", "1", "]", "\n", "", "ratingMatrix", "=", "coo_matrix", "(", "(", "entries", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "ratingMatrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildMotifInducedAdjacencyMatrix": [[52, 82], ["ESRF.ESRF.buildSparseRelationMatrix", "ESRF.ESRF.buildSparseRatingMatrix", "ESRF.ESRF.tocsr", "ESRF.ESRF.transpose().tocsr", "ESRF.ESRF.multiply", "U.dot().multiply", "ESRF.ESRF.multiply.dot().multiply", "ESRF.ESRF.dot().multiply", "ESRF.ESRF.dot().multiply", "ESRF.ESRF.dot", "range", "A10.multiply.multiply.multiply", "A.transpose.transpose.transpose().multiply", "A.transpose.transpose.transpose", "ESRF.ESRF.transpose", "U.transpose", "U.dot().multiply.transpose", "U.dot().multiply", "C2.transpose", "U.dot().multiply", "C3.transpose", "U.transpose().dot().multiply", "C5.transpose", "U.transpose().dot().multiply", "U.dot().multiply", "ESRF.ESRF.transpose", "ESRF.ESRF.transpose", "U.dot", "ESRF.ESRF.multiply.dot().multiply", "U.dot().multiply", "ESRF.ESRF.multiply.dot().multiply", "ESRF.ESRF.multiply.dot().multiply", "ESRF.ESRF.multiply.dot", "U.dot().multiply", "U.dot().multiply", "U.dot().multiply", "ESRF.ESRF.multiply.dot().multiply", "U.transpose().dot().multiply", "ESRF.ESRF.multiply.dot().multiply", "ESRF.ESRF.dot", "ESRF.ESRF.dot", "A.transpose.transpose.transpose", "A.transpose.transpose.sum().reshape", "U.transpose", "U.transpose", "U.dot", "U.dot", "U.transpose().dot", "U.transpose", "U.transpose().dot", "U.transpose", "U.dot", "ESRF.ESRF.transpose", "ESRF.ESRF.transpose", "ESRF.ESRF.multiply.dot", "U.dot", "ESRF.ESRF.multiply.dot", "ESRF.ESRF.multiply.dot", "U.dot", "U.dot", "U.dot", "ESRF.ESRF.multiply.dot", "U.transpose().dot", "ESRF.ESRF.multiply.dot", "U.transpose", "A.transpose.transpose.sum", "U.transpose", "U.transpose", "U.transpose", "U.transpose", "U.transpose"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildSparseRelationMatrix", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildSparseRatingMatrix"], ["", "def", "buildMotifInducedAdjacencyMatrix", "(", "self", ")", ":", "\n", "        ", "S", "=", "self", ".", "buildSparseRelationMatrix", "(", ")", "\n", "Y", "=", "self", ".", "buildSparseRatingMatrix", "(", ")", "\n", "self", ".", "userAdjacency", "=", "Y", ".", "tocsr", "(", ")", "\n", "self", ".", "itemAdjacency", "=", "Y", ".", "transpose", "(", ")", ".", "tocsr", "(", ")", "\n", "B", "=", "S", ".", "multiply", "(", "S", ".", "transpose", "(", ")", ")", "\n", "U", "=", "S", "-", "B", "\n", "C1", "=", "(", "U", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ".", "transpose", "(", ")", ")", "\n", "A1", "=", "C1", "+", "C1", ".", "transpose", "(", ")", "\n", "C2", "=", "(", "B", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ".", "transpose", "(", ")", ")", "+", "(", "U", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "U", ".", "transpose", "(", ")", ")", "+", "(", "U", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A2", "=", "C2", "+", "C2", ".", "transpose", "(", ")", "\n", "C3", "=", "(", "B", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "B", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "B", ")", "+", "(", "U", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A3", "=", "C3", "+", "C3", ".", "transpose", "(", ")", "\n", "A4", "=", "(", "B", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "B", ")", "\n", "C5", "=", "(", "U", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "U", ".", "dot", "(", "U", ".", "transpose", "(", ")", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "U", ".", "transpose", "(", ")", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ")", "\n", "A5", "=", "C5", "+", "C5", ".", "transpose", "(", ")", "\n", "A6", "=", "(", "U", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "B", ".", "dot", "(", "U", ".", "transpose", "(", ")", ")", ")", ".", "multiply", "(", "U", ".", "transpose", "(", ")", ")", "+", "(", "U", ".", "transpose", "(", ")", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A7", "=", "(", "U", ".", "transpose", "(", ")", ".", "dot", "(", "B", ")", ")", ".", "multiply", "(", "U", ".", "transpose", "(", ")", ")", "+", "(", "B", ".", "dot", "(", "U", ")", ")", ".", "multiply", "(", "U", ")", "+", "(", "U", ".", "dot", "(", "U", ".", "transpose", "(", ")", ")", ")", ".", "multiply", "(", "B", ")", "\n", "self", ".", "A8", "=", "(", "Y", ".", "dot", "(", "Y", ".", "transpose", "(", ")", ")", ")", ".", "multiply", "(", "B", ")", "\n", "A9", "=", "(", "Y", ".", "dot", "(", "Y", ".", "transpose", "(", ")", ")", ")", ".", "multiply", "(", "U", ")", "\n", "A10", "=", "Y", ".", "dot", "(", "Y", ".", "transpose", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_users", ")", ":", "\n", "            ", "A10", "[", "i", ",", "i", "]", "=", "0", "\n", "#user pairs which share less than 5 common purchases are ignored", "\n", "", "A10", "=", "A10", ".", "multiply", "(", "A10", ">", "5", ")", "\n", "#obtain the normalized high-order adjacency", "\n", "A", "=", "S", "+", "A1", "+", "A2", "+", "A3", "+", "A4", "+", "A5", "+", "A6", "+", "A7", "+", "self", ".", "A8", "+", "A9", "+", "A10", "\n", "A", "=", "A", ".", "transpose", "(", ")", ".", "multiply", "(", "1.0", "/", "A", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "A", "=", "A", ".", "transpose", "(", ")", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildMotifGCN": [[83, 114], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.placeholder", "adjacency.tocoo.tocoo.tocoo", "numpy.mat().transpose", "tensorflow.SparseTensor", "adjacency.tocoo.tocoo.tocsr", "dict", "tensorflow.contrib.layers.xavier_initializer", "range", "tensorflow.reduce_mean", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.vectorized_map", "tensorflow.zeros", "tensorflow.concat", "tensorflow.truncated_normal", "tensorflow.truncated_normal", "adjacency.tocoo.tocoo.data.astype", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.math.l2_normalize", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.multiply", "tensorflow.reduce_sum", "numpy.mat", "ESRF.ESRF.sampling", "ESRF.ESRF.buildMotifGCN.getAlternativeNeighborhood"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampling"], ["", "def", "buildMotifGCN", "(", "self", ",", "adjacency", ")", ":", "\n", "        ", "self", ".", "relation_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'U_r'", ")", "\n", "projection_head", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'p_h'", ")", "\n", "self", ".", "userSegment", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "\n", "#convert sparse matrix to sparse tensor", "\n", "adjacency", "=", "adjacency", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "adjacency", ".", "row", ",", "adjacency", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "self", ".", "A", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "adjacency", ".", "data", ".", "astype", "(", "np", ".", "float32", ")", ",", "adjacency", ".", "shape", ")", "\n", "self", ".", "adjacency", "=", "adjacency", ".", "tocsr", "(", ")", "\n", "self", ".", "g_weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "all_embeddings", "=", "[", "self", ".", "relation_embeddings", "]", "\n", "user_embeddings", "=", "self", ".", "relation_embeddings", "\n", "for", "d", "in", "range", "(", "self", ".", "n_layers_G", ")", ":", "\n", "            ", "user_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "self", ".", "A", ",", "user_embeddings", ")", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "user_embeddings", ",", "axis", "=", "1", ")", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "", "user_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "0", ")", "\n", "#user_embeddings = tf.nn.sigmoid(tf.matmul(tf.reduce_sum(all_embeddings, 0), projection_head))", "\n", "# construct concrete selector layer", "\n", "self", ".", "g_weights", "[", "'c_selector'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "K", ",", "self", ".", "num_users", "]", ")", ",", "name", "=", "'c_selector'", ")", "\n", "#to avoid oom, each time we just generate alternative negibhborhood for 100 users", "\n", "user_features", "=", "tf", ".", "matmul", "(", "user_embeddings", "[", "self", ".", "userSegment", ":", "self", ".", "userSegment", "+", "100", "]", ",", "user_embeddings", ",", "transpose_b", "=", "True", ")", "\n", "def", "getAlternativeNeighborhood", "(", "embedding", ")", ":", "\n", "            ", "alphaEmbeddings", "=", "tf", ".", "multiply", "(", "embedding", ",", "self", ".", "g_weights", "[", "'c_selector'", "]", ")", "\n", "multi_hot_vector", "=", "tf", ".", "reduce_sum", "(", "self", ".", "sampling", "(", "alphaEmbeddings", ")", ",", "0", ")", "\n", "return", "multi_hot_vector", "\n", "", "self", ".", "alternativeNeighborhood", "=", "tf", ".", "vectorized_map", "(", "fn", "=", "lambda", "em", ":", "getAlternativeNeighborhood", "(", "em", ")", ",", "elems", "=", "user_features", ")", "\n", "paddings", "=", "tf", ".", "zeros", "(", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_users", ")", ")", "\n", "self", ".", "alternativeNeighborhood", "=", "tf", ".", "concat", "(", "[", "paddings", "[", ":", "self", ".", "userSegment", "]", ",", "self", ".", "alternativeNeighborhood", ",", "paddings", "[", "self", ".", "userSegment", "+", "100", ":", "]", "]", ",", "0", ")", "\n", "#decoder", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildRecGCN": [[142, 209], ["tensorflow.placeholder", "tensorflow.cast", "tensorflow.placeholder", "tensorflow.cast", "tensorflow.placeholder", "dict", "tensorflow.concat", "ESRF.ESRF.create_joint_sparse_adj_tensor", "tensorflow.contrib.layers.xavier_initializer", "range", "tensorflow.nn.top_k", "range", "tensorflow.reduce_sum", "tensorflow.split", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.cond", "tensorflow.math.l2_normalize", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.matmul", "tensorflow.cond", "tensorflow.concat", "ESRF.ESRF.buildRecGCN.with_social"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_joint_sparse_adj_tensor"], ["", "def", "buildRecGCN", "(", "self", ")", ":", "\n", "        ", "self", ".", "isSocial", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "isSocial", "=", "tf", ".", "cast", "(", "self", ".", "isSocial", ",", "tf", ".", "bool", ")", "\n", "self", ".", "isAttentive", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "isAttentive", "=", "tf", ".", "cast", "(", "self", ".", "isAttentive", ",", "tf", ".", "bool", ")", "\n", "self", ".", "sampledItems", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "d_weights", "=", "dict", "(", ")", "\n", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ",", "axis", "=", "0", ")", "\n", "norm_adj", "=", "self", ".", "create_joint_sparse_adj_tensor", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers_D", ")", ":", "\n", "            ", "self", ".", "d_weights", "[", "'attention_m1%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'attention_m1%d'", "%", "k", ")", "\n", "self", ".", "d_weights", "[", "'attention_m2%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'attention_m2%d'", "%", "k", ")", "\n", "self", ".", "d_weights", "[", "'attention_v%d'", "%", "k", "]", "=", "tf", ".", "Variable", "(", "\n", "initializer", "(", "[", "1", ",", "self", ".", "emb_size", "*", "2", "]", ")", ",", "name", "=", "'attention_v1%d'", "%", "k", ")", "\n", "\n", "", "vals", ",", "indexes", "=", "tf", ".", "nn", ".", "top_k", "(", "self", ".", "alternativeNeighborhood", ",", "self", ".", "K", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "n_layers_D", ")", ":", "\n", "            ", "new_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "norm_adj", ",", "ego_embeddings", ")", "\n", "\n", "#social attention (applying attention may be a little time-consuming)", "\n", "# selectedItemEmbeddings = tf.gather(ego_embeddings[self.num_users:],self.sampledItems)", "\n", "# indexes = tf.cast(indexes,tf.float32)", "\n", "# userEmbeddings = tf.matmul(ego_embeddings[:self.num_users],self.d_weights['attention_m1%d' % k])", "\n", "# itemEmbeddings = tf.matmul(selectedItemEmbeddings, self.d_weights['attention_m2%d' % k])", "\n", "# attentionEmbeddings = tf.concat([indexes,userEmbeddings],axis=1)", "\n", "# attentionEmbeddings = tf.concat([attentionEmbeddings, itemEmbeddings], axis=1)", "\n", "#", "\n", "# def attention(embedding):", "\n", "#     alternativeNeighors,u_embedding,i_embedding = tf.split(tf.reshape(embedding,[1,self.K+2*self.embed_size]),[self.K,self.embed_size,self.embed_size],axis=1)", "\n", "#     alternativeNeighors = tf.cast(alternativeNeighors[0],tf.int32)", "\n", "#     friendsEmbedding = tf.gather(ego_embeddings[:self.num_users],alternativeNeighors)", "\n", "#     friendsEmbedding = tf.matmul(friendsEmbedding,self.d_weights['attention_m1%d' % k])", "\n", "#     i_embedding = tf.reshape(tf.concat([i_embedding] * self.K, 1), [self.K, self.embed_size])", "\n", "#     res = tf.reduce_sum(tf.multiply(self.d_weights['attention_v%d' % k],tf.sigmoid(tf.concat([friendsEmbedding + u_embedding, i_embedding],1))), 1)", "\n", "#     weights = tf.nn.softmax(res)", "\n", "#     socialEmbedding = tf.matmul(tf.reshape(weights,[1,self.K]),tf.gather(ego_embeddings[:self.num_users],alternativeNeighors))", "\n", "#     return socialEmbedding[0]", "\n", "#attentive_socialEmbeddings = tf.vectorized_map(fn=lambda em: attention(em),elems=attentionEmbeddings)", "\n", "nonattentive_socialEmbeddings", "=", "tf", ".", "matmul", "(", "self", ".", "alternativeNeighborhood", ",", "ego_embeddings", "[", ":", "self", ".", "num_users", "]", ")", "/", "self", ".", "K", "\n", "\n", "def", "without_attention", "(", ")", ":", "\n", "                ", "return", "nonattentive_socialEmbeddings", "\n", "", "def", "with_attention", "(", ")", ":", "\n", "                ", "return", "nonattentive_socialEmbeddings", "#to use attention, this part should be modified", "\n", "\n", "", "def", "without_social", "(", ")", ":", "\n", "                ", "return", "new_embeddings", "\n", "\n", "", "def", "with_social", "(", "embeddings", ")", ":", "\n", "                ", "socialEmbeddings", "=", "tf", ".", "cond", "(", "self", ".", "isAttentive", ",", "lambda", ":", "with_attention", "(", ")", ",", "lambda", ":", "without_attention", "(", ")", ")", "\n", "return", "tf", ".", "concat", "(", "[", "(", "embeddings", "[", ":", "self", ".", "num_users", "]", "+", "socialEmbeddings", ")", ",", "embeddings", "[", "self", ".", "num_users", ":", "]", "]", ",", "0", ")", "\n", "\n", "", "ego_embeddings", "=", "tf", ".", "cond", "(", "self", ".", "isSocial", ",", "lambda", ":", "with_social", "(", "new_embeddings", ")", ",", "lambda", ":", "without_social", "(", ")", ")", "\n", "# normalize the distribution of embeddings.", "\n", "norm_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "ego_embeddings", ",", "axis", "=", "1", ")", "\n", "all_embeddings", "+=", "[", "norm_embeddings", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "reduce_sum", "(", "all_embeddings", ",", "0", ")", "\n", "self", ".", "multi_user_embeddings", ",", "self", ".", "multi_item_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "num_users", ",", "self", ".", "num_items", "]", ",", "0", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "u_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "v_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "multi_item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildGenerator": [[210, 219], ["tensorflow.reduce_sum", "tensorflow.gather", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "buildGenerator", "(", "self", ")", ":", "\n", "        ", "y_ui", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "v_embedding", ")", ",", "1", ")", "\n", "currentNeighbors", "=", "tf", ".", "gather", "(", "self", ".", "alternativeNeighborhood", ",", "self", ".", "u_idx", ")", "\n", "friendEmbeddings", "=", "tf", ".", "matmul", "(", "currentNeighbors", ",", "self", ".", "multi_user_embeddings", ")", "/", "self", ".", "K", "\n", "y_vi", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "friendEmbeddings", ",", "self", ".", "v_embedding", ")", ",", "1", ")", "\n", "self", ".", "g_adv_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y_vi", "-", "y_ui", ")", ")", ")", "\n", "self", ".", "g_loss", "=", "self", ".", "beta", "*", "self", ".", "g_adv_loss", "#+self.r_loss", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", "*", "5", ")", "\n", "self", ".", "g_train", "=", "opt", ".", "minimize", "(", "self", ".", "g_loss", ",", "var_list", "=", "[", "self", ".", "g_weights", ",", "self", ".", "relation_embeddings", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildDiscriminator": [[220, 236], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.gather", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.group", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.matmul", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.sigmoid", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "buildDiscriminator", "(", "self", ")", ":", "\n", "        ", "y_ui", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "v_embedding", ")", ",", "1", ")", "\n", "y_uj", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "neg_item_embedding", ")", ",", "1", ")", "\n", "currentNeighbors", "=", "tf", ".", "gather", "(", "self", ".", "alternativeNeighborhood", ",", "self", ".", "u_idx", ")", "\n", "friendEmbeddings", "=", "tf", ".", "matmul", "(", "currentNeighbors", ",", "self", ".", "multi_user_embeddings", ")", "/", "self", ".", "K", "\n", "y_vi", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "friendEmbeddings", ",", "self", ".", "v_embedding", ")", ",", "1", ")", "\n", "#s_Regularization = 0.03*tf.nn.l2_loss(self.u_embedding - friendEmbeddings)", "\n", "pairwise_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y_ui", "-", "y_uj", ")", ")", ")", "\n", "reg_loss", "=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "v_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_item_embedding", ")", ")", "\n", "adversarial_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y_ui", "-", "y_vi", ")", ")", ")", "\n", "self", ".", "d_loss", "=", "pairwise_loss", "+", "reg_loss", "\n", "self", ".", "d_advloss", "=", "pairwise_loss", "+", "reg_loss", "+", "self", ".", "beta", "*", "adversarial_loss", "#+s_Regularization", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "d_train", "=", "opt", ".", "minimize", "(", "self", ".", "d_loss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", "]", ")", "\n", "self", ".", "d_adv_train", "=", "opt", ".", "minimize", "(", "self", ".", "d_advloss", ",", "var_list", "=", "[", "self", ".", "user_embeddings", ",", "self", ".", "item_embeddings", ",", "self", ".", "d_weights", "]", ")", "\n", "self", ".", "minimax", "=", "tf", ".", "group", "(", "self", ".", "d_adv_train", ",", "self", ".", "g_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampling": [[237, 241], ["tensorflow.nn.softmax", "ESRF.gumbel_softmax"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.gumbel_softmax"], ["", "def", "sampling", "(", "self", ",", "vec", ")", ":", "\n", "        ", "vec", "=", "tf", ".", "nn", ".", "softmax", "(", "vec", ")", "\n", "logits", "=", "gumbel_softmax", "(", "vec", ",", "0.2", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.initModel": [[242, 250], ["super().initModel", "range", "list", "ESRF.ESRF.listed_data.append", "ESRF.ESRF.data.trainSet_u[].keys"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "ESRF", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "listed_data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_users", ")", ":", "\n", "            ", "user", "=", "self", ".", "data", ".", "id2user", "[", "i", "]", "\n", "items", "=", "list", "(", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "items", "=", "[", "self", ".", "data", ".", "item", "[", "item", "]", "for", "item", "in", "items", "]", "\n", "self", ".", "listed_data", ".", "append", "(", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampleItems": [[251, 257], ["range", "random.choice", "selectedItems.append"], "methods", ["None"], ["", "", "def", "sampleItems", "(", "self", ")", ":", "\n", "        ", "selectedItems", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_users", ")", ":", "\n", "            ", "item", "=", "choice", "(", "self", ".", "listed_data", "[", "i", "]", ")", "\n", "selectedItems", ".", "append", "(", "item", ")", "\n", "", "return", "selectedItems", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.trainModel": [[258, 309], ["ESRF.ESRF.buildMotifInducedAdjacencyMatrix", "ESRF.ESRF.buildMotifGCN", "ESRF.ESRF.buildRecGCN", "ESRF.ESRF.buildGenerator", "ESRF.ESRF.buildDiscriminator", "tensorflow.global_variables_initializer", "ESRF.ESRF.sess.run", "print", "range", "print", "range", "print", "range", "ESRF.ESRF.sampleItems", "enumerate", "print", "ESRF.ESRF.sampleItems", "enumerate", "print", "ESRF.ESRF.sampleItems", "enumerate", "numpy.random.randint", "ESRF.ESRF.sess.run", "ESRF.ESRF.ranking_performance", "ESRF.ESRF.next_batch_pairwise", "numpy.random.randint", "ESRF.ESRF.sess.run", "ESRF.ESRF.next_batch_pairwise", "numpy.random.randint", "ESRF.ESRF.sess.run", "ESRF.ESRF.next_batch_pairwise", "numpy.random.randint", "ESRF.ESRF.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildMotifInducedAdjacencyMatrix", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildMotifGCN", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildRecGCN", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildGenerator", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.buildDiscriminator", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampleItems", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampleItems", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampleItems", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.ranking_performance", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "A", "=", "self", ".", "buildMotifInducedAdjacencyMatrix", "(", ")", "\n", "self", ".", "buildMotifGCN", "(", "A", ")", "\n", "self", ".", "buildRecGCN", "(", ")", "\n", "self", ".", "buildGenerator", "(", ")", "\n", "self", ".", "buildDiscriminator", "(", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "\n", "self", ".", "attentiveTraining", "=", "0", "\n", "#pretrain Motif-based GCN", "\n", "\n", "# for epoch in range(50):", "\n", "#     _, l = self.sess.run([self.r_train, self.r_loss])", "\n", "#     print 'training:', epoch + 1, 'loss:', l", "\n", "\n", "#conventional training", "\n", "print", "(", "'pretraining...'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", "//", "3", ")", ":", "\n", "            ", "selectedItems", "=", "self", ".", "sampleItems", "(", ")", "\n", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "u_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_users", ")", "\n", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "d_train", ",", "self", ".", "d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "userSegment", ":", "u_i", ",", "\n", "self", ".", "isSocial", ":", "0", ",", "self", ".", "isAttentive", ":", "self", ".", "attentiveTraining", ",", "self", ".", "sampledItems", ":", "selectedItems", "}", ")", "\n", "", "print", "(", "self", ".", "foldInfo", ",", "'training:'", ",", "epoch", "+", "1", ",", "'finished.'", ")", "\n", "", "print", "(", "'normal training with social relations...'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", "//", "3", ")", ":", "\n", "            ", "selectedItems", "=", "self", ".", "sampleItems", "(", ")", "\n", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "u_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_users", ")", "\n", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "d_train", ",", "self", ".", "d_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "userSegment", ":", "u_i", ",", "\n", "self", ".", "isSocial", ":", "1", ",", "self", ".", "isAttentive", ":", "self", ".", "attentiveTraining", ",", "self", ".", "sampledItems", ":", "selectedItems", "}", ")", "\n", "", "print", "(", "self", ".", "foldInfo", ",", "'training:'", ",", "self", ".", "maxEpoch", "//", "3", "+", "epoch", "+", "1", ",", "'finished.'", ")", "\n", "#adversarial learning without attention", "\n", "", "print", "(", "'adversarial training with social relations...'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", "//", "3", ")", ":", "\n", "            ", "selectedItems", "=", "self", ".", "sampleItems", "(", ")", "\n", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "u_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_users", ")", "\n", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "self", ".", "sess", ".", "run", "(", "self", ".", "minimax", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "userSegment", ":", "u_i", ",", "\n", "self", ".", "isSocial", ":", "1", ",", "self", ".", "isAttentive", ":", "self", ".", "attentiveTraining", ",", "self", ".", "sampledItems", ":", "selectedItems", "}", ")", "\n", "", "u_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_users", ")", "\n", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "multi_user_embeddings", ",", "self", ".", "multi_item_embeddings", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "userSegment", ":", "u_i", ",", "self", ".", "isSocial", ":", "0", ",", "self", ".", "isAttentive", ":", "0", ",", "self", ".", "sampledItems", ":", "selectedItems", "}", ")", "\n", "self", ".", "ranking_performance", "(", "epoch", "+", "2", "*", "self", ".", "maxEpoch", "//", "3", ")", "\n", "", "self", ".", "U", ",", "self", ".", "V", "=", "self", ".", "bestU", ",", "self", ".", "bestV", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.saveModel": [[326, 331], ["ESRF.ESRF.sampleItems", "numpy.random.randint", "ESRF.ESRF.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.sampleItems", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "saveModel", "(", "self", ")", ":", "\n", "        ", "selectedItems", "=", "self", ".", "sampleItems", "(", ")", "\n", "u_i", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "num_users", ")", "\n", "self", ".", "bestU", ",", "self", ".", "bestV", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "multi_user_embeddings", ",", "self", ".", "multi_item_embeddings", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "userSegment", ":", "u_i", ",", "self", ".", "isSocial", ":", "0", ",", "self", ".", "isAttentive", ":", "self", ".", "attentiveTraining", ",", "self", ".", "sampledItems", ":", "selectedItems", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.ESRF.predictForRanking": [[332, 339], ["ESRF.ESRF.data.containsUser", "ESRF.ESRF.data.getUserId", "ESRF.ESRF.V.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "V", ".", "dot", "(", "self", ".", "U", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ESRF.gumbel_softmax": [[12, 18], ["tensorflow.random_uniform", "tensorflow.nn.softmax", "tensorflow.shape", "tensorflow.log", "tensorflow.log", "tensorflow.log"], "function", ["None"], ["def", "gumbel_softmax", "(", "logits", ",", "temperature", "=", "0.2", ")", ":", "\n", "    ", "eps", "=", "1e-10", "\n", "u", "=", "tf", ".", "random_uniform", "(", "tf", ".", "shape", "(", "logits", ")", ",", "minval", "=", "0", ",", "maxval", "=", "1", ")", "\n", "gumbel_noise", "=", "-", "tf", ".", "log", "(", "-", "tf", ".", "log", "(", "u", "+", "eps", ")", "+", "eps", ")", "\n", "y", "=", "tf", ".", "log", "(", "logits", "+", "eps", ")", "+", "gumbel_noise", "\n", "return", "tf", ".", "nn", ".", "softmax", "(", "y", "/", "temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CoFactor.CoFactor.__init__": [[10, 12], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "CoFactor", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CoFactor.CoFactor.readConfiguration": [[13, 21], ["super().readConfiguration", "util.config.OptionConf", "int", "float", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "CoFactor", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "extraSettings", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'CoFactor'", "]", ")", "\n", "self", ".", "negCount", "=", "int", "(", "extraSettings", "[", "'-k'", "]", ")", "#the number of negative samples", "\n", "if", "self", ".", "negCount", "<", "1", ":", "\n", "            ", "self", ".", "negCount", "=", "1", "\n", "", "self", ".", "regR", "=", "float", "(", "extraSettings", "[", "'-gamma'", "]", ")", "\n", "self", ".", "filter", "=", "int", "(", "extraSettings", "[", "'-filter'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CoFactor.CoFactor.printAlgorConfig": [[22, 29], ["super().printAlgorConfig", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "CoFactor", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'k: %d'", "%", "self", ".", "negCount", ")", "\n", "print", "(", "'regR: %.5f'", "%", "self", ".", "regR", ")", "\n", "print", "(", "'filter: %d'", "%", "self", ".", "filter", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CoFactor.CoFactor.initModel": [[30, 82], ["super().initModel", "collections.defaultdict", "print", "collections.defaultdict", "CoFactor.CoFactor.data.itemRated", "sum", "print", "len", "sum", "frequency.values", "CoFactor.CoFactor.data.itemRated", "len", "occurrence[].values", "max", "str", "len", "set().intersection", "print", "print", "str", "set", "set", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.itemRated", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.itemRated", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "CoFactor", ",", "self", ")", ".", "initModel", "(", ")", "\n", "#constructing SPPMI matrix", "\n", "self", ".", "SPPMI", "=", "defaultdict", "(", "dict", ")", "\n", "print", "(", "'Constructing SPPMI matrix...'", ")", "\n", "#for larger data set has many items, the process will be time consuming", "\n", "occurrence", "=", "defaultdict", "(", "dict", ")", "\n", "i", "=", "0", "\n", "for", "item1", "in", "self", ".", "data", ".", "item", ":", "\n", "            ", "i", "+=", "1", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "str", "(", "i", ")", "+", "'/'", "+", "str", "(", "self", ".", "num_items", ")", ")", "\n", "", "uList1", ",", "rList1", "=", "self", ".", "data", ".", "itemRated", "(", "item1", ")", "\n", "\n", "if", "len", "(", "uList1", ")", "<", "self", ".", "filter", ":", "\n", "                ", "continue", "\n", "", "for", "item2", "in", "self", ".", "data", ".", "item", ":", "\n", "                ", "if", "item1", "==", "item2", ":", "\n", "                    ", "continue", "\n", "", "if", "item2", "not", "in", "occurrence", "[", "item1", "]", ":", "\n", "                    ", "uList2", ",", "rList2", "=", "self", ".", "data", ".", "itemRated", "(", "item2", ")", "\n", "if", "len", "(", "uList2", ")", "<", "self", ".", "filter", ":", "\n", "                        ", "continue", "\n", "", "count", "=", "len", "(", "set", "(", "uList1", ")", ".", "intersection", "(", "set", "(", "uList2", ")", ")", ")", "\n", "if", "count", ">", "self", ".", "filter", ":", "\n", "                        ", "occurrence", "[", "item1", "]", "[", "item2", "]", "=", "count", "\n", "occurrence", "[", "item2", "]", "[", "item1", "]", "=", "count", "\n", "\n", "", "", "", "", "maxVal", "=", "0", "\n", "frequency", "=", "{", "}", "\n", "for", "item1", "in", "occurrence", ":", "\n", "            ", "frequency", "[", "item1", "]", "=", "sum", "(", "occurrence", "[", "item1", "]", ".", "values", "(", ")", ")", "*", "1.0", "\n", "", "D", "=", "sum", "(", "frequency", ".", "values", "(", ")", ")", "*", "1.0", "\n", "# maxx = -1", "\n", "for", "item1", "in", "occurrence", ":", "\n", "            ", "for", "item2", "in", "occurrence", "[", "item1", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "val", "=", "max", "(", "[", "log", "(", "occurrence", "[", "item1", "]", "[", "item2", "]", "*", "D", "/", "(", "frequency", "[", "item1", "]", "*", "frequency", "[", "item2", "]", ")", ")", "-", "log", "(", "\n", "self", ".", "negCount", ")", ",", "0", "]", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "self", ".", "SPPMI", "[", "item1", "]", "[", "item2", "]", ")", "\n", "print", "(", "self", ".", "SPPMI", "[", "item1", "]", "[", "item2", "]", "*", "D", "/", "(", "frequency", "[", "item1", "]", "*", "frequency", "[", "item2", "]", ")", ")", "\n", "", "if", "val", ">", "0", ":", "\n", "                    ", "if", "maxVal", "<", "val", ":", "\n", "                        ", "maxVal", "=", "val", "\n", "", "self", ".", "SPPMI", "[", "item1", "]", "[", "item2", "]", "=", "val", "\n", "self", ".", "SPPMI", "[", "item2", "]", "[", "item1", "]", "=", "self", ".", "SPPMI", "[", "item1", "]", "[", "item2", "]", "\n", "\n", "#normalize", "\n", "", "", "", "for", "item1", "in", "self", ".", "SPPMI", ":", "\n", "            ", "for", "item2", "in", "self", ".", "SPPMI", "[", "item1", "]", ":", "\n", "                ", "self", ".", "SPPMI", "[", "item1", "]", "[", "item2", "]", "=", "self", ".", "SPPMI", "[", "item1", "]", "[", "item2", "]", "/", "maxVal", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CoFactor.CoFactor.trainModel": [[84, 163], ["print", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "CoFactor.CoFactor.Y.T.dot", "CoFactor.CoFactor.X.T.dot", "print", "numpy.ones", "numpy.zeros", "coo_matrix", "numpy.dot", "numpy.zeros", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "coo_matrix", "numpy.dot", "float", "pos.append", "val.append", "pow", "numpy.linalg.inv", "float", "pos.append", "val.append", "len", "numpy.linalg.inv", "len", "numpy.dot", "CoFactor.CoFactor.X[].dot", "numpy.dot", "numpy.eye", "gamma.reshape().dot", "beta.reshape().dot", "numpy.linalg.inv", "len", "len", "coo_matrix.dot", "gamma.reshape", "beta.reshape", "numpy.dot", "numpy.eye", "gamma.reshape", "beta.reshape", "CoFactor.CoFactor.Y[].dot", "beta.dot", "coo_matrix.dot", "numpy.eye"], "methods", ["None"], ["", "", "", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "X", "=", "self", ".", "P", "*", "10", "#Theta", "\n", "self", ".", "Y", "=", "self", ".", "Q", "*", "10", "#Beta", "\n", "self", ".", "w", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "num_items", ")", "/", "10", "# bias value of item", "\n", "self", ".", "c", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "num_items", ")", "/", "10", "# bias value of context", "\n", "self", ".", "G", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "num_items", ",", "self", ".", "emb_size", ")", "/", "10", "# context embedding", "\n", "\n", "print", "(", "'training...'", ")", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "YtY", "=", "self", ".", "Y", ".", "T", ".", "dot", "(", "self", ".", "Y", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "# C_u = np.ones(self.data.getSize(self.recType))", "\n", "                ", "H", "=", "np", ".", "ones", "(", "self", ".", "num_items", ")", "\n", "val", ",", "pos", "=", "[", "]", ",", "[", "]", "\n", "P_u", "=", "np", ".", "zeros", "(", "self", ".", "num_items", ")", "\n", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                    ", "iid", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "r_ui", "=", "float", "(", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", "[", "item", "]", ")", "\n", "pos", ".", "append", "(", "iid", ")", "\n", "val", ".", "append", "(", "10", "*", "r_ui", ")", "\n", "H", "[", "iid", "]", "+=", "10", "*", "r_ui", "\n", "P_u", "[", "iid", "]", "=", "1", "\n", "error", "=", "(", "P_u", "[", "iid", "]", "-", "self", ".", "X", "[", "uid", "]", ".", "dot", "(", "self", ".", "Y", "[", "iid", "]", ")", ")", "\n", "self", ".", "loss", "+=", "pow", "(", "error", ",", "2", ")", "\n", "# sparse matrix", "\n", "", "C_u", "=", "coo_matrix", "(", "(", "val", ",", "(", "pos", ",", "pos", ")", ")", ",", "shape", "=", "(", "self", ".", "num_items", ",", "self", ".", "num_items", ")", ")", "\n", "A", "=", "(", "YtY", "+", "np", ".", "dot", "(", "self", ".", "Y", ".", "T", ",", "C_u", ".", "dot", "(", "self", ".", "Y", ")", ")", "+", "self", ".", "regU", "*", "np", ".", "eye", "(", "self", ".", "emb_size", ")", ")", "\n", "self", ".", "X", "[", "uid", "]", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "A", ")", ",", "(", "self", ".", "Y", ".", "T", "*", "H", ")", ".", "dot", "(", "P_u", ")", ")", "\n", "\n", "", "XtX", "=", "self", ".", "X", ".", "T", ".", "dot", "(", "self", ".", "X", ")", "\n", "for", "item", "in", "self", ".", "data", ".", "item", ":", "\n", "                ", "P_i", "=", "np", ".", "zeros", "(", "self", ".", "num_users", ")", "\n", "iid", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "H", "=", "np", ".", "ones", "(", "self", ".", "num_users", ")", "\n", "val", ",", "pos", "=", "[", "]", ",", "[", "]", "\n", "for", "user", "in", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", ":", "\n", "                    ", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "r_ui", "=", "float", "(", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", "[", "user", "]", ")", "\n", "pos", ".", "append", "(", "uid", ")", "\n", "val", ".", "append", "(", "10", "*", "r_ui", ")", "\n", "H", "[", "uid", "]", "+=", "10", "*", "r_ui", "\n", "P_i", "[", "uid", "]", "=", "1", "\n", "\n", "", "matrix_g1", "=", "np", ".", "zeros", "(", "(", "self", ".", "emb_size", ",", "self", ".", "emb_size", ")", ")", "\n", "matrix_g2", "=", "np", ".", "zeros", "(", "(", "self", ".", "emb_size", ",", "self", ".", "emb_size", ")", ")", "\n", "vector_m1", "=", "np", ".", "zeros", "(", "self", ".", "emb_size", ")", "\n", "vector_m2", "=", "np", ".", "zeros", "(", "self", ".", "emb_size", ")", "\n", "update_w", "=", "0", "\n", "update_c", "=", "0", "\n", "\n", "if", "len", "(", "self", ".", "SPPMI", "[", "item", "]", ")", ">", "0", ":", "\n", "                    ", "for", "context", "in", "self", ".", "SPPMI", "[", "item", "]", ":", "\n", "                        ", "cid", "=", "self", ".", "data", ".", "item", "[", "context", "]", "\n", "gamma", "=", "self", ".", "G", "[", "cid", "]", "\n", "beta", "=", "self", ".", "Y", "[", "cid", "]", "\n", "matrix_g1", "+=", "gamma", ".", "reshape", "(", "self", ".", "emb_size", ",", "1", ")", ".", "dot", "(", "gamma", ".", "reshape", "(", "1", ",", "self", ".", "emb_size", ")", ")", "\n", "vector_m1", "+=", "(", "self", ".", "SPPMI", "[", "item", "]", "[", "context", "]", "-", "self", ".", "w", "[", "iid", "]", "-", "\n", "self", ".", "c", "[", "cid", "]", ")", "*", "gamma", "\n", "\n", "matrix_g2", "+=", "beta", ".", "reshape", "(", "self", ".", "emb_size", ",", "1", ")", ".", "dot", "(", "beta", ".", "reshape", "(", "1", ",", "self", ".", "emb_size", ")", ")", "\n", "vector_m2", "+=", "(", "self", ".", "SPPMI", "[", "item", "]", "[", "context", "]", "-", "self", ".", "w", "[", "cid", "]", "\n", "-", "self", ".", "c", "[", "iid", "]", ")", "*", "beta", "\n", "\n", "update_w", "+=", "self", ".", "SPPMI", "[", "item", "]", "[", "context", "]", "-", "self", ".", "Y", "[", "iid", "]", ".", "dot", "(", "gamma", ")", "-", "self", ".", "c", "[", "cid", "]", "\n", "update_c", "+=", "self", ".", "SPPMI", "[", "item", "]", "[", "context", "]", "-", "beta", ".", "dot", "(", "self", ".", "G", "[", "iid", "]", ")", "-", "self", ".", "w", "[", "cid", "]", "\n", "\n", "", "", "C_i", "=", "coo_matrix", "(", "(", "val", ",", "(", "pos", ",", "pos", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_users", ")", ")", "\n", "A", "=", "(", "XtX", "+", "np", ".", "dot", "(", "self", ".", "X", ".", "T", ",", "C_i", ".", "dot", "(", "self", ".", "X", ")", ")", "+", "self", ".", "regU", "*", "np", ".", "eye", "(", "self", ".", "emb_size", ")", "+", "matrix_g1", ")", "\n", "self", ".", "Y", "[", "iid", "]", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "A", ")", ",", "(", "self", ".", "X", ".", "T", "*", "H", ")", ".", "dot", "(", "P_i", ")", "+", "vector_m1", ")", "\n", "if", "len", "(", "self", ".", "SPPMI", "[", "item", "]", ")", ">", "0", ":", "\n", "                    ", "self", ".", "G", "[", "iid", "]", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "matrix_g2", "+", "self", ".", "regR", "*", "np", ".", "eye", "(", "self", ".", "emb_size", ")", ")", ",", "vector_m2", ")", "\n", "self", ".", "w", "[", "iid", "]", "=", "update_w", "/", "len", "(", "self", ".", "SPPMI", "[", "item", "]", ")", "\n", "self", ".", "c", "[", "iid", "]", "=", "update_c", "/", "len", "(", "self", ".", "SPPMI", "[", "item", "]", ")", "\n", "\n", "", "", "epoch", "+=", "1", "\n", "print", "(", "'epoch:'", ",", "epoch", ",", "'loss:'", ",", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CoFactor.CoFactor.predictForRanking": [[164, 171], ["CoFactor.CoFactor.data.containsUser", "CoFactor.CoFactor.data.getUserId", "CoFactor.CoFactor.Y.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Y", ".", "dot", "(", "self", ".", "X", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF.__init__": [[13, 15], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "ExpoMF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF.initModel": [[16, 41], ["super().initModel", "csr_matrix", "numpy.random.randn().astype", "numpy.random.randn().astype", "numpy.ones", "row.append", "col.append", "val.append", "numpy.array", "numpy.random.randn", "numpy.random.randn", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "ExpoMF", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "lam_theta", "=", "1e-5", "\n", "self", ".", "lam_beta", "=", "1e-5", "\n", "self", ".", "lam_y", "=", "1.0", "\n", "self", ".", "init_mu", "=", "0.01", "\n", "self", ".", "a", "=", "1.0", "\n", "self", ".", "b", "=", "99.0", "\n", "self", ".", "init_std", "=", "0.01", "\n", "self", ".", "theta", "=", "self", ".", "init_std", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "num_users", ",", "self", ".", "emb_size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "beta", "=", "self", ".", "init_std", "*", "np", ".", "random", ".", "randn", "(", "self", ".", "num_items", ",", "self", ".", "emb_size", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "self", ".", "mu", "=", "self", ".", "init_mu", "*", "np", ".", "ones", "(", "self", ".", "num_items", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "n_jobs", "=", "4", "\n", "self", ".", "batch_size", "=", "300", "\n", "row", ",", "col", ",", "val", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "user", "in", "self", ".", "data", ".", "trainSet_u", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "row", ".", "append", "(", "u", ")", "\n", "col", ".", "append", "(", "i", ")", "\n", "val", ".", "append", "(", "1", ")", "\n", "", "", "self", ".", "X", "=", "csr_matrix", "(", "(", "np", ".", "array", "(", "val", ")", ",", "(", "np", ".", "array", "(", "row", ")", ",", "np", ".", "array", "(", "col", ")", ")", ")", ",", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF.trainModel": [[42, 50], ["print", "ExpoMF.ExpoMF.X.T.tocsr", "range", "print", "ExpoMF.ExpoMF._update_factors", "ExpoMF.ExpoMF._update_expo"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF._update_factors", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF._update_expo"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "print", "(", "'training...'", ")", "\n", "n_users", "=", "self", ".", "X", ".", "shape", "[", "0", "]", "\n", "XT", "=", "self", ".", "X", ".", "T", ".", "tocsr", "(", ")", "# pre-compute this", "\n", "for", "i", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "print", "(", "'epoch #%d'", "%", "i", ")", "\n", "self", ".", "_update_factors", "(", "self", ".", "X", ",", "XT", ")", "\n", "self", ".", "_update_expo", "(", "self", ".", "X", ",", "n_users", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF._update_factors": [[51, 55], ["ExpoMF.recompute_factors", "ExpoMF.recompute_factors"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.recompute_factors", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.recompute_factors"], ["", "", "def", "_update_factors", "(", "self", ",", "X", ",", "XT", ")", ":", "\n", "        ", "'''Update user and item collaborative factors with ALS'''", "\n", "self", ".", "theta", "=", "recompute_factors", "(", "self", ".", "beta", ",", "self", ".", "theta", ",", "X", ",", "self", ".", "lam_theta", "/", "self", ".", "lam_y", ",", "self", ".", "lam_y", ",", "self", ".", "mu", ",", "self", ".", "n_jobs", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "self", ".", "beta", "=", "recompute_factors", "(", "self", ".", "theta", ",", "self", ".", "beta", ",", "XT", ",", "self", ".", "lam_beta", "/", "self", ".", "lam_y", ",", "self", ".", "lam_y", ",", "self", ".", "mu", ",", "self", ".", "n_jobs", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF._update_expo": [[56, 69], ["print", "list", "numpy.zeros_like", "zip", "print", "range", "a_row_batch().sum", "ExpoMF.a_row_batch"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.a_row_batch"], ["", "def", "_update_expo", "(", "self", ",", "X", ",", "n_users", ")", ":", "\n", "        ", "'''Update exposure prior'''", "\n", "print", "(", "'\\tUpdating exposure prior...'", ")", "\n", "\n", "start_idx", "=", "list", "(", "range", "(", "0", ",", "n_users", ",", "self", ".", "batch_size", ")", ")", "\n", "end_idx", "=", "start_idx", "[", "1", ":", "]", "+", "[", "n_users", "]", "\n", "\n", "A_sum", "=", "np", ".", "zeros_like", "(", "self", ".", "mu", ")", "\n", "for", "lo", ",", "hi", "in", "zip", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "            ", "A_sum", "+=", "a_row_batch", "(", "X", "[", "lo", ":", "hi", "]", ",", "self", ".", "theta", "[", "lo", ":", "hi", "]", ",", "self", ".", "beta", ",", "\n", "self", ".", "lam_y", ",", "self", ".", "mu", ")", ".", "sum", "(", "axis", "=", "0", ")", "\n", "", "print", "(", "self", ".", "mu", ")", "\n", "self", ".", "mu", "=", "(", "self", ".", "a", "+", "A_sum", "-", "1", ")", "/", "(", "self", ".", "a", "+", "self", ".", "b", "+", "n_users", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.ExpoMF.predictForRanking": [[71, 78], ["ExpoMF.ExpoMF.data.containsUser", "ExpoMF.ExpoMF.data.getUserId", "ExpoMF.ExpoMF.beta.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "beta", ".", "dot", "(", "self", ".", "theta", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.get_row": [[80, 85], ["None"], "function", ["None"], ["", "", "", "def", "get_row", "(", "Y", ",", "i", ")", ":", "\n", "    ", "'''Given a scipy.sparse.csr_matrix Y, get the values and indices of the\n    non-zero values in i_th row'''", "\n", "lo", ",", "hi", "=", "Y", ".", "indptr", "[", "i", "]", ",", "Y", ".", "indptr", "[", "i", "+", "1", "]", "\n", "return", "Y", ".", "data", "[", "lo", ":", "hi", "]", ",", "Y", ".", "indices", "[", "lo", ":", "hi", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.a_row_batch": [[86, 94], ["math.sqrt", "numpy.exp", "Y_batch.nonzero", "theta_batch.dot"], "function", ["None"], ["", "def", "a_row_batch", "(", "Y_batch", ",", "theta_batch", ",", "beta", ",", "lam_y", ",", "mu", ")", ":", "\n", "    ", "'''Compute the posterior of exposure latent variables A by batch'''", "\n", "pEX", "=", "sqrt", "(", "lam_y", "/", "2", "/", "np", ".", "pi", ")", "*", "np", ".", "exp", "(", "-", "lam_y", "*", "theta_batch", ".", "dot", "(", "beta", ".", "T", ")", "**", "2", "/", "2", ")", "\n", "#print pEX.shape,mu.shape", "\n", "A", "=", "(", "pEX", "+", "EPS", ")", "/", "(", "pEX", "+", "EPS", "+", "(", "1", "-", "mu", ")", "/", "mu", ")", "\n", "A", "[", "Y_batch", ".", "nonzero", "(", ")", "]", "=", "1.", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF._solve": [[95, 101], ["ExpoMF.get_row", "numpy.dot", "numpy.linalg.solve", "X.T.dot", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.get_row"], ["", "def", "_solve", "(", "k", ",", "A_k", ",", "X", ",", "Y", ",", "f", ",", "lam", ",", "lam_y", ",", "mu", ")", ":", "\n", "    ", "'''Update one single factor'''", "\n", "s_u", ",", "i_u", "=", "get_row", "(", "Y", ",", "k", ")", "\n", "a", "=", "np", ".", "dot", "(", "s_u", "*", "A_k", "[", "i_u", "]", ",", "X", "[", "i_u", "]", ")", "\n", "B", "=", "X", ".", "T", ".", "dot", "(", "A_k", "[", ":", ",", "np", ".", "newaxis", "]", "*", "X", ")", "+", "lam", "*", "np", ".", "eye", "(", "f", ")", "\n", "return", "LA", ".", "solve", "(", "B", ",", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF._solve_batch": [[102, 117], ["numpy.empty_like", "enumerate", "ExpoMF.a_row_batch", "ExpoMF.a_row_batch", "range", "ExpoMF._solve"], "function", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.a_row_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.a_row_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF._solve"], ["", "def", "_solve_batch", "(", "lo", ",", "hi", ",", "X", ",", "X_old_batch", ",", "Y", ",", "m", ",", "f", ",", "lam", ",", "lam_y", ",", "mu", ")", ":", "\n", "    ", "'''Update factors by batch, will eventually call _solve() on each factor to\n    keep the parallel process busy'''", "\n", "assert", "X_old_batch", ".", "shape", "[", "0", "]", "==", "hi", "-", "lo", "\n", "\n", "if", "mu", ".", "size", "==", "X", ".", "shape", "[", "0", "]", ":", "# update users", "\n", "        ", "A_batch", "=", "a_row_batch", "(", "Y", "[", "lo", ":", "hi", "]", ",", "X_old_batch", ",", "X", ",", "lam_y", ",", "mu", ")", "\n", "", "else", ":", "# update items", "\n", "        ", "A_batch", "=", "a_row_batch", "(", "Y", "[", "lo", ":", "hi", "]", ",", "X_old_batch", ",", "X", ",", "lam_y", ",", "mu", "[", "lo", ":", "hi", ",", "\n", "np", ".", "newaxis", "]", ")", "\n", "\n", "", "X_batch", "=", "np", ".", "empty_like", "(", "X_old_batch", ",", "dtype", "=", "X_old_batch", ".", "dtype", ")", "\n", "for", "ib", ",", "k", "in", "enumerate", "(", "range", "(", "lo", ",", "hi", ")", ")", ":", "\n", "        ", "X_batch", "[", "ib", "]", "=", "_solve", "(", "k", ",", "A_batch", "[", "ib", "]", ",", "X", ",", "Y", ",", "f", ",", "lam", ",", "lam_y", ",", "mu", ")", "\n", "", "return", "X_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.ExpoMF.recompute_factors": [[118, 136], ["list", "numpy.vstack", "range", "joblib.Parallel", "joblib.delayed", "zip"], "function", ["None"], ["", "def", "recompute_factors", "(", "X", ",", "X_old", ",", "Y", ",", "lam", ",", "lam_y", ",", "mu", ",", "n_jobs", ",", "batch_size", "=", "1000", ")", ":", "\n", "    ", "'''Regress X to Y with exposure matrix (computed on-the-fly with X_old) and\n    ridge term lam by embarrassingly parallelization. All the comments below\n    are in the view of computing user factors'''", "\n", "m", ",", "n", "=", "Y", ".", "shape", "# m = number of users, n = number of items", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "n", "\n", "assert", "X_old", ".", "shape", "[", "0", "]", "==", "m", "\n", "f", "=", "X", ".", "shape", "[", "1", "]", "# f = number of factors", "\n", "\n", "start_idx", "=", "list", "(", "range", "(", "0", ",", "m", ",", "batch_size", ")", ")", "\n", "end_idx", "=", "start_idx", "[", "1", ":", "]", "+", "[", "m", "]", "\n", "\n", "res", "=", "Parallel", "(", "n_jobs", "=", "n_jobs", ")", "(", "delayed", "(", "_solve_batch", ")", "(", "\n", "lo", ",", "hi", ",", "X", ",", "X_old", "[", "lo", ":", "hi", "]", ",", "Y", ",", "m", ",", "f", ",", "lam", ",", "lam_y", ",", "mu", ")", "\n", "for", "lo", ",", "hi", "in", "zip", "(", "start_idx", ",", "end_idx", ")", ")", "\n", "\n", "X_new", "=", "np", ".", "vstack", "(", "res", ")", "\n", "return", "X_new", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DHCF.DHCF.__init__": [[13, 15], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "DHCF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DHCF.DHCF.buildAdjacencyMatrix": [[16, 25], ["scipy.sparse.coo_matrix"], "methods", ["None"], ["", "def", "buildAdjacencyMatrix", "(", "self", ")", ":", "\n", "        ", "row", ",", "col", ",", "entries", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "pair", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "# symmetric matrix", "\n", "            ", "row", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "]", "\n", "col", "+=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "]", "\n", "entries", "+=", "[", "1", "]", "\n", "", "u_i_adj", "=", "coo_matrix", "(", "(", "entries", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "u_i_adj", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DHCF.DHCF.initModel": [[26, 103], ["super().initModel", "DHCF.DHCF.buildAdjacencyMatrix", "tensorflow.SparseTensor.sum().reshape", "tensorflow.SparseTensor.sum().reshape", "tensorflow.SparseTensor.transpose().multiply().transpose", "tf.SparseTensor.transpose().multiply().transpose.transpose", "tf.SparseTensor.transpose().multiply().transpose.multiply().dot", "A_u.tocoo.tocoo.tocoo", "numpy.mat().transpose", "tensorflow.SparseTensor", "DHCF.DHCF.transpose", "tensorflow.SparseTensor.sum().reshape", "tensorflow.SparseTensor.sum().reshape", "tensorflow.SparseTensor.transpose().multiply().transpose", "tf.SparseTensor.transpose().multiply().transpose.transpose", "tf.SparseTensor.transpose().multiply().transpose.multiply().dot", "A_i.tocoo.tocoo.tocoo", "numpy.mat().transpose", "tensorflow.SparseTensor", "print", "tensorflow.placeholder", "tensorflow.cast", "tensorflow.contrib.layers.xavier_initializer", "range", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "A_u.tocoo.tocoo.data.astype", "A_i.tocoo.tocoo.data.astype", "tensorflow.Variable", "tensorflow.nn.dropout", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "tensorflow.cond", "tensorflow.cond", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize", "all_item_embeddings.append", "all_user_embeddings.append", "tensorflow.multiply", "tensorflow.SparseTensor.sum", "tensorflow.SparseTensor.sum", "tensorflow.SparseTensor.transpose().multiply", "tf.SparseTensor.transpose().multiply().transpose.multiply", "numpy.mat", "tensorflow.SparseTensor.sum", "tensorflow.SparseTensor.sum", "tensorflow.SparseTensor.transpose().multiply", "tf.SparseTensor.transpose().multiply().transpose.multiply", "numpy.mat", "tensorflow.contrib.layers.xavier_initializer.", "numpy.sqrt", "numpy.sqrt", "tensorflow.matmul", "tensorflow.matmul", "DHCF.DHCF.initModel.dropout"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DHCF.DHCF.buildAdjacencyMatrix"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "DHCF", ",", "self", ")", ".", "initModel", "(", ")", "\n", "#Build adjacency matrix", "\n", "A", "=", "self", ".", "buildAdjacencyMatrix", "(", ")", "\n", "#Build incidence matrix", "\n", "#H_u = hstack([A,A.dot(A.transpose().dot(A))])", "\n", "H_u", "=", "A", "\n", "D_u_v", "=", "H_u", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "D_u_e", "=", "H_u", ".", "sum", "(", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "temp1", "=", "(", "H_u", ".", "transpose", "(", ")", ".", "multiply", "(", "np", ".", "sqrt", "(", "1.0", "/", "D_u_v", ")", ")", ")", ".", "transpose", "(", ")", "\n", "temp2", "=", "temp1", ".", "transpose", "(", ")", "\n", "A_u", "=", "temp1", ".", "multiply", "(", "1.0", "/", "D_u_e", ")", ".", "dot", "(", "temp2", ")", "\n", "A_u", "=", "A_u", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "A_u", ".", "row", ",", "A_u", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "H_u", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "A_u", ".", "data", ".", "astype", "(", "np", ".", "float32", ")", ",", "A_u", ".", "shape", ")", "\n", "\n", "H_i", "=", "A", ".", "transpose", "(", ")", "\n", "D_i_v", "=", "H_i", ".", "sum", "(", "axis", "=", "1", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "D_i_e", "=", "H_i", ".", "sum", "(", "axis", "=", "0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "temp1", "=", "(", "H_i", ".", "transpose", "(", ")", ".", "multiply", "(", "np", ".", "sqrt", "(", "1.0", "/", "D_i_v", ")", ")", ")", ".", "transpose", "(", ")", "\n", "temp2", "=", "temp1", ".", "transpose", "(", ")", "\n", "A_i", "=", "temp1", ".", "multiply", "(", "1.0", "/", "D_i_e", ")", ".", "dot", "(", "temp2", ")", "\n", "A_i", "=", "A_i", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "A_i", ".", "row", ",", "A_i", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "H_i", "=", "tf", ".", "SparseTensor", "(", "indices", ",", "A_i", ".", "data", ".", "astype", "(", "np", ".", "float32", ")", ",", "A_i", ".", "shape", ")", "\n", "\n", "print", "(", "'Runing on GPU...'", ")", "\n", "#Build network", "\n", "self", ".", "isTraining", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "isTraining", "=", "tf", ".", "cast", "(", "self", ".", "isTraining", ",", "tf", ".", "bool", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "n_layer", "=", "2", "\n", "self", ".", "weights", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", ")", ":", "\n", "            ", "self", ".", "weights", "[", "'layer_%d'", "%", "(", "i", "+", "1", ")", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "emb_size", ",", "self", ".", "emb_size", "]", ")", ",", "name", "=", "'JU_%d'", "%", "(", "i", "+", "1", ")", ")", "\n", "\n", "", "user_embeddings", "=", "self", ".", "user_embeddings", "\n", "item_embeddings", "=", "self", ".", "item_embeddings", "\n", "all_user_embeddings", "=", "[", "user_embeddings", "]", "\n", "all_item_embeddings", "=", "[", "item_embeddings", "]", "\n", "\n", "# message dropout.", "\n", "def", "without_dropout", "(", "embedding", ")", ":", "\n", "            ", "return", "embedding", "\n", "\n", "", "def", "dropout", "(", "embedding", ")", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "dropout", "(", "embedding", ",", "rate", "=", "0.1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "n_layer", ")", ":", "\n", "            ", "new_user_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "H_u", ",", "self", ".", "user_embeddings", ")", "\n", "new_item_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "H_i", ",", "self", ".", "item_embeddings", ")", "\n", "\n", "user_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "new_user_embeddings", ",", "self", ".", "weights", "[", "'layer_%d'", "%", "(", "i", "+", "1", ")", "]", ")", "+", "user_embeddings", ")", "\n", "item_embeddings", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "new_item_embeddings", ",", "self", ".", "weights", "[", "'layer_%d'", "%", "(", "i", "+", "1", ")", "]", ")", "+", "item_embeddings", ")", "\n", "\n", "user_embeddings", "=", "tf", ".", "cond", "(", "self", ".", "isTraining", ",", "lambda", ":", "dropout", "(", "user_embeddings", ")", ",", "\n", "lambda", ":", "without_dropout", "(", "user_embeddings", ")", ")", "\n", "item_embeddings", "=", "tf", ".", "cond", "(", "self", ".", "isTraining", ",", "lambda", ":", "dropout", "(", "item_embeddings", ")", ",", "\n", "lambda", ":", "without_dropout", "(", "item_embeddings", ")", ")", "\n", "\n", "user_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "user_embeddings", ",", "axis", "=", "1", ")", "\n", "item_embeddings", "=", "tf", ".", "math", ".", "l2_normalize", "(", "item_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "all_item_embeddings", ".", "append", "(", "item_embeddings", ")", "\n", "all_user_embeddings", ".", "append", "(", "user_embeddings", ")", "\n", "\n", "# user_embeddings = tf.reduce_sum(all_user_embeddings,axis=0)/(1+self.n_layer)", "\n", "# item_embeddings = tf.reduce_sum(all_item_embeddings, axis=0) / (1 + self.n_layer)", "\n", "#", "\n", "", "user_embeddings", "=", "tf", ".", "concat", "(", "all_user_embeddings", ",", "axis", "=", "1", ")", "\n", "item_embeddings", "=", "tf", ".", "concat", "(", "all_item_embeddings", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"neg_holder\"", ")", "\n", "self", ".", "neg_item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "self", ".", "u_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "v_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "test", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "item_embeddings", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DHCF.DHCF.trainModel": [[104, 122], ["range", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.global_variables_initializer", "DHCF.DHCF.sess.run", "range", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "enumerate", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.reduce_sum", "DHCF.DHCF.next_batch_pairwise", "DHCF.DHCF.sess.run", "print", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.log", "tensorflow.sigmoid"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "y", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "v_embedding", ")", ",", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "neg_item_embedding", ")", ",", "1", ")", "\n", "reg_loss", "=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "v_embedding", ")", "+", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "neg_item_embedding", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", ")", ":", "\n", "            ", "reg_loss", "+=", "self", ".", "regU", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", "[", "'layer_%d'", "%", "(", "i", "+", "1", ")", "]", ")", "\n", "", "loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "y", ")", ")", ")", "+", "reg_loss", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "train", "=", "opt", ".", "minimize", "(", "loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "for", "n", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "_", ",", "l", "=", "self", ".", "sess", ".", "run", "(", "[", "train", ",", "loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "neg_idx", ":", "j_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "isTraining", ":", "1", "}", ")", "\n", "print", "(", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "n", ",", "'loss:'", ",", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DHCF.DHCF.predictForRanking": [[123, 130], ["DHCF.DHCF.data.containsUser", "DHCF.DHCF.data.getUserId", "DHCF.DHCF.sess.run"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "test", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "u", ",", "self", ".", "isTraining", ":", "0", "}", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR.__init__": [[10, 12], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "APR", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR.readConfiguration": [[13, 19], ["super().readConfiguration", "util.config.OptionConf", "float", "float", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "APR", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'APR'", "]", ")", "\n", "self", ".", "eps", "=", "float", "(", "args", "[", "'-eps'", "]", ")", "\n", "self", ".", "regAdv", "=", "float", "(", "args", "[", "'-regA'", "]", ")", "\n", "self", ".", "advEpoch", "=", "int", "(", "args", "[", "'-advEpoch'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_variables": [[20, 29], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.placeholder", "tensorflow.nn.embedding_lookup", "tensorflow.constant", "tensorflow.constant", "tensorflow.zeros", "tensorflow.zeros"], "methods", ["None"], ["", "def", "_create_variables", "(", "self", ")", ":", "\n", "#perturbation vectors", "\n", "        ", "self", ".", "adv_U", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "adv_V", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "shape", "=", "[", "self", ".", "num_items", ",", "self", ".", "emb_size", "]", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "self", ".", "neg_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "\"n_idx\"", ")", "\n", "self", ".", "V_neg_embed", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "neg_idx", ")", "\n", "#parameters", "\n", "self", ".", "eps", "=", "tf", ".", "constant", "(", "self", ".", "eps", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "regAdv", "=", "tf", ".", "constant", "(", "self", ".", "regAdv", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_inference": [[30, 34], ["tensorflow.subtract", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["None"], ["", "def", "_create_inference", "(", "self", ")", ":", "\n", "        ", "result", "=", "tf", ".", "subtract", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "v_embedding", ")", ",", "1", ")", ",", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "u_embedding", ",", "self", ".", "V_neg_embed", ")", ",", "1", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_adv_inference": [[35, 42], ["tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.subtract", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add"], ["", "def", "_create_adv_inference", "(", "self", ")", ":", "\n", "        ", "self", ".", "U_plus_delta", "=", "tf", ".", "add", "(", "self", ".", "u_embedding", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "adv_U", ",", "self", ".", "u_idx", ")", ")", "\n", "self", ".", "V_plus_delta", "=", "tf", ".", "add", "(", "self", ".", "v_embedding", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "adv_V", ",", "self", ".", "v_idx", ")", ")", "\n", "self", ".", "V_neg_plus_delta", "=", "tf", ".", "add", "(", "self", ".", "V_neg_embed", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "adv_V", ",", "self", ".", "neg_idx", ")", ")", "\n", "result", "=", "tf", ".", "subtract", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "U_plus_delta", ",", "self", ".", "V_plus_delta", ")", ",", "1", ")", ",", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "U_plus_delta", ",", "self", ".", "V_neg_plus_delta", ")", ",", "1", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_adversarial": [[43, 54], ["tensorflow.gradients", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "APR.APR.adv_U.assign", "APR.APR.adv_V.assign", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize"], "methods", ["None"], ["", "def", "_create_adversarial", "(", "self", ")", ":", "\n", "#get gradients of Delta", "\n", "        ", "self", ".", "grad_U", ",", "self", ".", "grad_V", "=", "tf", ".", "gradients", "(", "self", ".", "loss_adv", ",", "[", "self", ".", "adv_U", ",", "self", ".", "adv_V", "]", ")", "\n", "\n", "# convert the IndexedSlice Data to Dense Tensor", "\n", "self", ".", "grad_U_dense", "=", "tf", ".", "stop_gradient", "(", "self", ".", "grad_U", ")", "\n", "self", ".", "grad_V_dense", "=", "tf", ".", "stop_gradient", "(", "self", ".", "grad_V", ")", "\n", "\n", "# normalization: new_grad = (grad / |grad|) * eps", "\n", "self", ".", "update_U", "=", "self", ".", "adv_U", ".", "assign", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "grad_U_dense", ",", "1", ")", "*", "self", ".", "eps", ")", "\n", "self", ".", "update_V", "=", "self", ".", "adv_V", ".", "assign", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "grad_V_dense", ",", "1", ")", "*", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_loss": [[56, 65], ["tensorflow.constant", "tensorflow.reduce_sum", "tensorflow.add", "tensorflow.add", "tensorflow.multiply", "tensorflow.add", "tensorflow.nn.softplus", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.softplus", "APR.APR._create_inference", "APR.APR._create_adv_inference"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_inference", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_adv_inference"], ["", "def", "_create_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "reg_lambda", "=", "tf", ".", "constant", "(", "self", ".", "regU", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "self", ".", "_create_inference", "(", ")", ")", ")", "\n", "self", ".", "reg_loss", "=", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "self", ".", "reg_lambda", ",", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "u_embedding", ")", ")", ",", "\n", "tf", ".", "multiply", "(", "self", ".", "reg_lambda", ",", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "v_embedding", ")", ")", ")", "\n", "self", ".", "total_loss", "=", "tf", ".", "add", "(", "self", ".", "loss", ",", "self", ".", "reg_loss", ")", "\n", "#loss of adversarial training", "\n", "self", ".", "loss_adv", "=", "tf", ".", "multiply", "(", "self", ".", "regAdv", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "nn", ".", "softplus", "(", "-", "self", ".", "_create_adv_inference", "(", ")", ")", ")", ")", "\n", "self", ".", "loss_adv", "=", "tf", ".", "add", "(", "self", ".", "total_loss", ",", "self", ".", "loss_adv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_optimizer": [[66, 71], ["tensorflow.train.AdamOptimizer", "APR.APR.optimizer.minimize", "tensorflow.train.AdamOptimizer", "APR.APR.optimizer.minimize"], "methods", ["None"], ["", "def", "_create_optimizer", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "train", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "total_loss", ")", "\n", "self", ".", "optimizer_adv", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", "\n", "self", ".", "train_adv", "=", "self", ".", "optimizer", ".", "minimize", "(", "self", ".", "loss_adv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR.initModel": [[73, 81], ["super().initModel", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "APR.APR._create_variables", "APR.APR._create_loss", "APR.APR._create_adversarial", "APR.APR._create_optimizer"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_variables", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_loss", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_adversarial", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR._create_optimizer"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "APR", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "u_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "v_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "_create_variables", "(", ")", "\n", "self", ".", "_create_loss", "(", ")", "\n", "self", ".", "_create_adversarial", "(", ")", "\n", "self", ".", "_create_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR.next_batch": [[83, 98], ["numpy.random.randint", "enumerate", "random.randint", "user_idx.append", "item_idx.append", "neg_item_idx.append", "random.randint"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "batch_idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "train_size", ",", "size", "=", "self", ".", "batch_size", ")", "\n", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "batch_idx", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "batch_idx", "]", "\n", "user_idx", ",", "item_idx", "=", "[", "]", ",", "[", "]", "\n", "neg_item_idx", "=", "[", "]", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "users", ")", ":", "\n", "            ", "item_j", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "num_items", "-", "1", ")", "\n", "while", "self", ".", "data", ".", "id2item", "[", "item_j", "]", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                ", "item_j", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "num_items", "-", "1", ")", "\n", "", "user_idx", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "item_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "items", "[", "i", "]", "]", ")", "\n", "neg_item_idx", ".", "append", "(", "item_j", ")", "\n", "\n", "", "return", "user_idx", ",", "item_idx", ",", "neg_item_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR.trainModel": [[100, 122], ["tensorflow.Session", "tensorflow.global_variables_initializer", "sess.run", "print", "range", "print", "range", "enumerate", "enumerate", "sess.run", "sess.run", "APR.APR.next_batch_pairwise", "sess.run", "APR.APR.next_batch_pairwise", "sess.run", "sess.run", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "sess", ".", "run", "(", "init", ")", "\n", "# pretraining", "\n", "print", "(", "'pretraining...'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", "//", "2", ")", ":", "\n", "                ", "for", "iteration", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                    ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "train", ",", "self", ".", "total_loss", "]", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "neg_idx", ":", "j_idx", "}", ")", "\n", "\n", "# start adversarial training", "\n", "", "", "print", "(", "'adversarial training...'", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", "//", "2", ")", ":", "\n", "                ", "for", "iteration", ",", "batch", "in", "enumerate", "(", "self", ".", "next_batch_pairwise", "(", ")", ")", ":", "\n", "                    ", "user_idx", ",", "i_idx", ",", "j_idx", "=", "batch", "\n", "sess", ".", "run", "(", "[", "self", ".", "update_U", ",", "self", ".", "update_V", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "j_idx", ",", "self", ".", "neg_idx", ":", "j_idx", "}", ")", "\n", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "train_adv", ",", "self", ".", "loss_adv", "]", ",", "feed_dict", "=", "{", "self", ".", "u_idx", ":", "user_idx", ",", "self", ".", "v_idx", ":", "i_idx", ",", "self", ".", "neg_idx", ":", "j_idx", "}", ")", "\n", "print", "(", "self", ".", "foldInfo", ",", "'training:'", ",", "epoch", "+", "1", ",", "'batch'", ",", "iteration", ",", "'loss:'", ",", "loss", ")", "\n", "", "self", ".", "P", "=", "sess", ".", "run", "(", "self", ".", "user_embeddings", ")", "\n", "self", ".", "Q", "=", "sess", ".", "run", "(", "self", ".", "item_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.APR.APR.predictForRanking": [[124, 131], ["APR.APR.data.containsUser", "APR.APR.data.getUserId", "APR.APR.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.WRMF.WRMF.__init__": [[10, 12], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "WRMF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "", "def", "initModel", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.WRMF.WRMF.initModel": [[12, 16], ["super().initModel"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "WRMF", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "X", "=", "self", ".", "P", "*", "10", "\n", "self", ".", "Y", "=", "self", ".", "Q", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.WRMF.WRMF.trainModel": [[17, 68], ["print", "WRMF.WRMF.Y.T.dot", "WRMF.WRMF.X.T.dot", "print", "WRMF.WRMF.isConverged", "numpy.ones", "numpy.zeros", "coo_matrix", "numpy.dot", "numpy.zeros", "numpy.ones", "coo_matrix", "numpy.dot", "float", "pos.append", "val.append", "pow", "numpy.linalg.inv", "float", "pos.append", "val.append", "numpy.linalg.inv", "WRMF.WRMF.X[].dot", "numpy.dot", "numpy.eye", "numpy.dot", "numpy.eye", "coo_matrix.dot", "coo_matrix.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "print", "(", "'training...'", ")", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "YtY", "=", "self", ".", "Y", ".", "T", ".", "dot", "(", "self", ".", "Y", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "user", ":", "\n", "#C_u = np.ones(self.data.getSize(self.recType))", "\n", "                ", "H", "=", "np", ".", "ones", "(", "self", ".", "num_items", ")", "\n", "val", "=", "[", "]", "\n", "pos", "=", "[", "]", "\n", "P_u", "=", "np", ".", "zeros", "(", "self", ".", "num_items", ")", "\n", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                    ", "iid", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "r_ui", "=", "float", "(", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", "[", "item", "]", ")", "\n", "pos", ".", "append", "(", "iid", ")", "\n", "val", ".", "append", "(", "10", "*", "r_ui", ")", "\n", "H", "[", "iid", "]", "+=", "10", "*", "r_ui", "\n", "P_u", "[", "iid", "]", "=", "1", "\n", "error", "=", "(", "P_u", "[", "iid", "]", "-", "self", ".", "X", "[", "uid", "]", ".", "dot", "(", "self", ".", "Y", "[", "iid", "]", ")", ")", "\n", "self", ".", "loss", "+=", "pow", "(", "error", ",", "2", ")", "\n", "#sparse matrix", "\n", "", "C_u", "=", "coo_matrix", "(", "(", "val", ",", "(", "pos", ",", "pos", ")", ")", ",", "shape", "=", "(", "self", ".", "num_items", ",", "self", ".", "num_items", ")", ")", "\n", "A", "=", "(", "YtY", "+", "np", ".", "dot", "(", "self", ".", "Y", ".", "T", ",", "C_u", ".", "dot", "(", "self", ".", "Y", ")", ")", "+", "self", ".", "regU", "*", "np", ".", "eye", "(", "self", ".", "emb_size", ")", ")", "\n", "self", ".", "X", "[", "uid", "]", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "A", ")", ",", "(", "self", ".", "Y", ".", "T", "*", "H", ")", ".", "dot", "(", "P_u", ")", ")", "\n", "\n", "", "XtX", "=", "self", ".", "X", ".", "T", ".", "dot", "(", "self", ".", "X", ")", "\n", "for", "item", "in", "self", ".", "data", ".", "item", ":", "\n", "                ", "P_i", "=", "np", ".", "zeros", "(", "self", ".", "num_users", ")", "\n", "iid", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "H", "=", "np", ".", "ones", "(", "self", ".", "num_users", ")", "\n", "val", "=", "[", "]", "\n", "pos", "=", "[", "]", "\n", "for", "user", "in", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", ":", "\n", "                    ", "uid", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "r_ui", "=", "float", "(", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", "[", "user", "]", ")", "\n", "pos", ".", "append", "(", "uid", ")", "\n", "val", ".", "append", "(", "10", "*", "r_ui", ")", "\n", "H", "[", "uid", "]", "+=", "10", "*", "r_ui", "\n", "P_i", "[", "uid", "]", "=", "1", "\n", "# sparse matrix", "\n", "", "C_i", "=", "coo_matrix", "(", "(", "val", ",", "(", "pos", ",", "pos", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_users", ")", ")", "\n", "A", "=", "(", "XtX", "+", "np", ".", "dot", "(", "self", ".", "X", ".", "T", ",", "C_i", ".", "dot", "(", "self", ".", "X", ")", ")", "+", "self", ".", "regU", "*", "np", ".", "eye", "(", "self", ".", "emb_size", ")", ")", "\n", "self", ".", "Y", "[", "iid", "]", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "A", ")", ",", "(", "self", ".", "X", ".", "T", "*", "H", ")", ".", "dot", "(", "P_i", ")", ")", "\n", "\n", "#self.loss += (self.X * self.X).sum() + (self.Y * self.Y).sum()", "\n", "", "epoch", "+=", "1", "\n", "print", "(", "'epoch:'", ",", "epoch", ",", "'loss:'", ",", "self", ".", "loss", ")", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.WRMF.WRMF.predictForRanking": [[69, 76], ["WRMF.WRMF.data.containsUser", "WRMF.WRMF.data.getUserId", "WRMF.WRMF.Y.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Y", ".", "dot", "(", "self", ".", "X", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.__init__": [[10, 12], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "CDAE", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.encoder": [[13, 16], ["tensorflow.nn.sigmoid", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "encoder", "(", "self", ",", "x", ",", "v", ")", ":", "\n", "        ", "layer", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "weights", "[", "'encoder'", "]", ")", "+", "self", ".", "biases", "[", "'encoder'", "]", "+", "v", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.decoder": [[17, 20], ["tensorflow.nn.sigmoid", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "decoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "layer", "=", "tf", ".", "nn", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "x", ",", "self", ".", "weights", "[", "'decoder'", "]", ")", "+", "self", ".", "biases", "[", "'decoder'", "]", ")", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.next_batch": [[21, 44], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "list", "list", "range", "CDAE.CDAE.data.user.keys", "CDAE.CDAE.data.item.keys", "random.choice", "uids.append", "CDAE.CDAE.data.row", "CDAE.CDAE.data.userRated", "range", "random.choice", "len", "random.choice"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.row", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "X", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_items", ")", ")", "\n", "uids", "=", "[", "]", "\n", "positive", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_items", ")", ")", "\n", "negative", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "num_items", ")", ")", "\n", "userList", "=", "list", "(", "self", ".", "data", ".", "user", ".", "keys", "(", ")", ")", "\n", "itemList", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "user", "=", "choice", "(", "userList", ")", "\n", "uids", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "vec", "=", "self", ".", "data", ".", "row", "(", "user", ")", "\n", "ratedItems", ",", "values", "=", "self", ".", "data", ".", "userRated", "(", "user", ")", "\n", "for", "item", "in", "ratedItems", ":", "\n", "                ", "iid", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "positive", "[", "n", "]", "[", "iid", "]", "=", "1", "\n", "", "for", "i", "in", "range", "(", "self", ".", "negative_sp", "*", "len", "(", "ratedItems", ")", ")", ":", "\n", "                ", "ng", "=", "choice", "(", "itemList", ")", "\n", "while", "ng", "in", "self", ".", "data", ".", "trainSet_u", ":", "\n", "                    ", "ng", "=", "choice", "(", "itemList", ")", "\n", "", "n_id", "=", "self", ".", "data", ".", "item", "[", "ng", "]", "\n", "negative", "[", "n", "]", "[", "n_id", "]", "=", "1", "\n", "", "X", "[", "n", "]", "=", "vec", "\n", "", "return", "X", ",", "uids", ",", "positive", ",", "negative", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.readConfiguration": [[45, 50], ["super().readConfiguration", "util.config.OptionConf", "float", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "CDAE", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "args", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'CDAE'", "]", ")", "\n", "self", ".", "corruption_level", "=", "float", "(", "args", "[", "'-co'", "]", ")", "\n", "self", ".", "n_hidden", "=", "int", "(", "args", "[", "'-nh'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.initModel": [[51, 69], ["super().initModel", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.nn.embedding_lookup", "tensorflow.placeholder", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "CDAE", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "negative_sp", "=", "5", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "self", ".", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "num_items", "]", ")", "\n", "self", ".", "positive", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "num_items", "]", ")", "\n", "self", ".", "negative", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "num_items", "]", ")", "\n", "self", ".", "V", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_users", ",", "self", ".", "n_hidden", "]", ")", ")", "\n", "self", ".", "U_embeding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "V", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "weights", "=", "{", "\n", "'encoder'", ":", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_items", ",", "self", ".", "n_hidden", "]", ")", ")", ",", "\n", "'decoder'", ":", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_hidden", ",", "self", ".", "num_items", "]", ")", ")", ",", "\n", "}", "\n", "self", ".", "biases", "=", "{", "\n", "'encoder'", ":", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_hidden", "]", ")", ")", ",", "\n", "'decoder'", ":", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_items", "]", ")", ")", ",", "\n", "}", "\n", "self", ".", "mask_corruption", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "num_items", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.trainModel": [[70, 97], ["tensorflow.multiply", "CDAE.CDAE.encoder", "CDAE.CDAE.decoder", "tensorflow.multiply", "tensorflow.maximum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.global_variables_initializer", "CDAE.CDAE.sess.run", "range", "print", "tensorflow.multiply", "tensorflow.reduce_mean", "numpy.random.binomial", "CDAE.CDAE.next_batch", "CDAE.CDAE.sess.run", "print", "tensorflow.multiply", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.train.AdamOptimizer", "tensorflow.log", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.encoder", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.decoder", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.next_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "corrupted_input", "=", "tf", ".", "multiply", "(", "self", ".", "mask_corruption", ",", "self", ".", "X", ")", "\n", "self", ".", "encoder_op", "=", "self", ".", "encoder", "(", "self", ".", "corrupted_input", ",", "self", ".", "U_embeding", ")", "\n", "self", ".", "decoder_op", "=", "self", ".", "decoder", "(", "self", ".", "encoder_op", ")", "\n", "y_pred", "=", "tf", ".", "multiply", "(", "self", ".", "decoder_op", ",", "self", ".", "mask_corruption", ")", "\n", "y_pred", "=", "tf", ".", "maximum", "(", "1e-6", ",", "y_pred", ")", "\n", "y_positive", "=", "tf", ".", "multiply", "(", "self", ".", "positive", ",", "self", ".", "mask_corruption", ")", "\n", "y_negative", "=", "tf", ".", "multiply", "(", "self", ".", "negative", ",", "self", ".", "mask_corruption", ")", "\n", "self", ".", "loss", "=", "-", "tf", ".", "multiply", "(", "y_positive", ",", "tf", ".", "log", "(", "y_pred", ")", ")", "-", "tf", ".", "multiply", "(", "(", "y_negative", ")", ",", "tf", ".", "log", "(", "1", "-", "y_pred", ")", ")", "\n", "self", ".", "reg_loss", "=", "self", ".", "regU", "*", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", "[", "'encoder'", "]", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "weights", "[", "'decoder'", "]", ")", "+", "\n", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "biases", "[", "'encoder'", "]", ")", "+", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "biases", "[", "'decoder'", "]", ")", ")", "\n", "self", ".", "reg_loss", "=", "self", ".", "reg_loss", "+", "self", ".", "regU", "*", "tf", ".", "nn", ".", "l2_loss", "(", "self", ".", "U_embeding", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "loss", ")", "+", "self", ".", "reg_loss", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "self", ".", "corruption_level", ",", "(", "self", ".", "batch_size", ",", "self", ".", "num_items", ")", ")", "\n", "batch_xs", ",", "users", ",", "positive", ",", "negative", "=", "self", ".", "next_batch", "(", ")", "\n", "_", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "[", "optimizer", ",", "self", ".", "loss", "]", ",", "feed_dict", "=", "{", "self", ".", "X", ":", "batch_xs", ",", "self", ".", "mask_corruption", ":", "mask", ",", "\n", "self", ".", "u_idx", ":", "users", ",", "self", ".", "positive", ":", "positive", ",", "self", ".", "negative", ":", "negative", "}", ")", "\n", "print", "(", "self", ".", "foldInfo", ",", "\"Epoch:\"", ",", "'%04d'", "%", "(", "epoch", "+", "1", ")", ",", "\"loss=\"", ",", "\"{:.9f}\"", ".", "format", "(", "loss", ")", ")", "\n", "#print y", "\n", "#self.ranking_performance()", "\n", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CDAE.CDAE.predictForRanking": [[100, 108], ["CDAE.CDAE.data.containsUser", "CDAE.CDAE.data.row().reshape", "CDAE.CDAE.sess.run", "CDAE.CDAE.data.row", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.row"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "vec", "=", "self", ".", "data", ".", "row", "(", "u", ")", ".", "reshape", "(", "(", "1", ",", "self", ".", "num_items", ")", ")", "\n", "uid", "=", "[", "self", ".", "data", ".", "user", "[", "u", "]", "]", "\n", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "decoder_op", ",", "feed_dict", "=", "{", "self", ".", "X", ":", "vec", ",", "self", ".", "mask_corruption", ":", "np", ".", "ones", "(", "(", "1", ",", "self", ".", "num_items", ")", ")", ",", "self", ".", "u_idx", ":", "uid", "}", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.__init__": [[12, 14], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "DMF", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.next_batch": [[15, 43], ["numpy.zeros", "numpy.zeros", "list", "enumerate", "enumerate", "list", "list", "range", "range", "float", "DMF.DMF.data.row", "DMF.DMF.data.col", "DMF.DMF.data.user.keys", "DMF.DMF.data.item.keys", "random.random.choice", "random.random.choice", "DMF.DMF.data.contains", "DMF.DMF.data.row", "DMF.DMF.data.col", "u_idx.append", "v_idx.append", "ratings.append", "numpy.array", "numpy.array", "numpy.array", "random.random.choice", "random.random.choice"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.row", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.col", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.row", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.col"], ["", "def", "next_batch", "(", "self", ",", "i", ")", ":", "\n", "        ", "rows", "=", "np", ".", "zeros", "(", "(", "(", "self", ".", "negative_sp", "+", "1", ")", "*", "self", ".", "batch_size", ",", "self", ".", "num_items", ")", ")", "\n", "cols", "=", "np", ".", "zeros", "(", "(", "(", "self", ".", "negative_sp", "+", "1", ")", "*", "self", ".", "batch_size", ",", "self", ".", "num_users", ")", ")", "\n", "batch_idx", "=", "list", "(", "range", "(", "self", ".", "batch_size", "*", "i", ",", "self", ".", "batch_size", "*", "(", "i", "+", "1", ")", ")", ")", "\n", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "batch_idx", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "batch_idx", "]", "\n", "u_idx", "=", "[", "self", ".", "data", ".", "user", "[", "u", "]", "for", "u", "in", "users", "]", "\n", "v_idx", "=", "[", "self", ".", "data", ".", "item", "[", "i", "]", "for", "i", "in", "items", "]", "\n", "ratings", "=", "[", "float", "(", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "2", "]", ")", "for", "idx", "in", "batch_idx", "]", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "users", ")", ":", "\n", "            ", "rows", "[", "i", "]", "=", "self", ".", "data", ".", "row", "(", "user", ")", "\n", "", "for", "i", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "            ", "cols", "[", "i", "]", "=", "self", ".", "data", ".", "col", "(", "item", ")", "\n", "", "userList", "=", "list", "(", "self", ".", "data", ".", "user", ".", "keys", "(", ")", ")", "\n", "itemList", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "#negative sample", "\n", "for", "i", "in", "range", "(", "self", ".", "negative_sp", "*", "self", ".", "batch_size", ")", ":", "\n", "            ", "u", "=", "choice", "(", "userList", ")", "\n", "v", "=", "choice", "(", "itemList", ")", "\n", "while", "self", ".", "data", ".", "contains", "(", "u", ",", "v", ")", ":", "\n", "                ", "u", "=", "choice", "(", "userList", ")", "\n", "v", "=", "choice", "(", "itemList", ")", "\n", "", "rows", "[", "self", ".", "batch_size", "-", "1", "+", "i", "]", "=", "self", ".", "data", ".", "row", "(", "u", ")", "\n", "cols", "[", "self", ".", "batch_size", "-", "1", "+", "i", "]", "=", "self", ".", "data", ".", "col", "(", "i", ")", "\n", "u_idx", ".", "append", "(", "self", ".", "data", ".", "user", "[", "u", "]", ")", "\n", "v_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "v", "]", ")", "\n", "ratings", ".", "append", "(", "0", ")", "\n", "", "return", "rows", ",", "cols", ",", "np", ".", "array", "(", "ratings", ")", ",", "np", ".", "array", "(", "u_idx", ")", ",", "np", ".", "array", "(", "v_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.initModel": [[44, 53], ["super().initModel", "len", "len", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "DMF", ",", "self", ")", ".", "initModel", "(", ")", "\n", "n_input_u", "=", "len", "(", "self", ".", "data", ".", "item", ")", "\n", "n_input_i", "=", "len", "(", "self", ".", "data", ".", "user", ")", "\n", "self", ".", "negative_sp", "=", "5", "\n", "self", ".", "n_hidden_u", "=", "[", "256", ",", "512", "]", "\n", "self", ".", "n_hidden_i", "=", "[", "256", ",", "512", "]", "\n", "self", ".", "input_u", "=", "tf", ".", "placeholder", "(", "tf", ".", "float", ",", "[", "None", ",", "n_input_u", "]", ")", "\n", "self", ".", "input_i", "=", "tf", ".", "placeholder", "(", "tf", ".", "float", ",", "[", "None", ",", "n_input_i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.trainModel": [[54, 116], ["super().trainModel_tf", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.Variable", "tensorflow.nn.relu", "tensorflow.nn.l2_loss", "range", "tensorflow.Variable", "tensorflow.nn.relu", "tensorflow.add", "range", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.maximum", "tensorflow.constant", "tensorflow.multiply", "tensorflow.add", "tensorflow.train.AdamOptimizer().minimize", "numpy.zeros", "numpy.zeros", "tensorflow.global_variables_initializer", "DMF.DMF.sess.run", "int", "range", "print", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.matmul", "len", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add", "tensorflow.add", "tensorflow.nn.relu", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.matmul", "tensorflow.nn.l2_loss", "len", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.add", "tensorflow.add", "tensorflow.nn.relu", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "random.random.shuffle", "range", "numpy.sqrt", "numpy.sqrt", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.add", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.add", "tensorflow.square", "tensorflow.square", "tensorflow.multiply", "tensorflow.log", "tensorflow.log", "tensorflow.train.AdamOptimizer", "len", "DMF.DMF.next_batch", "numpy.random.permutation", "DMF.DMF.sess.run", "print", "DMF.DMF.sess.run", "zip", "zip", "numpy.sum", "numpy.sum", "tensorflow.matmul", "tensorflow.matmul", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.next_batch", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run", "home.repos.pwc.inspect_result.Coder-Yu_QRec.None.QRec.run"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "DMF", ",", "self", ")", ".", "trainModel_tf", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "#user net", "\n", "user_W1", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_items", ",", "self", ".", "n_hidden_u", "[", "0", "]", "]", ",", "stddev", "=", "0.01", ")", ")", "\n", "self", ".", "user_out", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "self", ".", "input_u", ",", "user_W1", ")", ")", "\n", "self", ".", "regLoss", "=", "tf", ".", "nn", ".", "l2_loss", "(", "user_W1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "n_hidden_u", ")", ")", ":", "\n", "            ", "W", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_hidden_u", "[", "i", "-", "1", "]", ",", "self", ".", "n_hidden_u", "[", "i", "]", "]", ",", "stddev", "=", "0.01", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_hidden_u", "[", "i", "]", "]", ",", "stddev", "=", "0.01", ")", ")", "\n", "self", ".", "regLoss", "=", "tf", ".", "add", "(", "self", ".", "regLoss", ",", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", ")", "\n", "self", ".", "regLoss", "=", "tf", ".", "add", "(", "self", ".", "regLoss", ",", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", ")", "\n", "self", ".", "user_out", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "self", ".", "user_out", ",", "W", ")", ",", "b", ")", ")", "\n", "#item net", "\n", "", "item_W1", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "num_users", ",", "self", ".", "n_hidden_i", "[", "0", "]", "]", ",", "stddev", "=", "0.01", ")", ")", "\n", "self", ".", "item_out", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "matmul", "(", "self", ".", "input_i", ",", "item_W1", ")", ")", "\n", "self", ".", "regLoss", "=", "tf", ".", "add", "(", "self", ".", "regLoss", ",", "tf", ".", "nn", ".", "l2_loss", "(", "item_W1", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "n_hidden_i", ")", ")", ":", "\n", "            ", "W", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_hidden_i", "[", "i", "-", "1", "]", ",", "self", ".", "n_hidden_i", "[", "i", "]", "]", ",", "stddev", "=", "0.01", ")", ")", "\n", "b", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_hidden_i", "[", "i", "]", "]", ",", "stddev", "=", "0.01", ")", ")", "\n", "self", ".", "regLoss", "=", "tf", ".", "add", "(", "self", ".", "regLoss", ",", "tf", ".", "nn", ".", "l2_loss", "(", "W", ")", ")", "\n", "self", ".", "regLoss", "=", "tf", ".", "add", "(", "self", ".", "regLoss", ",", "tf", ".", "nn", ".", "l2_loss", "(", "b", ")", ")", "\n", "self", ".", "item_out", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "add", "(", "tf", ".", "matmul", "(", "self", ".", "item_out", ",", "W", ")", ",", "b", ")", ")", "\n", "", "norm_user_output", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "user_out", ")", ",", "axis", "=", "1", ")", ")", "\n", "norm_item_output", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "item_out", ")", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "y_", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "user_out", ",", "self", ".", "item_out", ")", ",", "axis", "=", "1", ")", "/", "(", "\n", "norm_item_output", "*", "norm_user_output", ")", "\n", "self", ".", "y_", "=", "tf", ".", "maximum", "(", "1e-6", ",", "self", ".", "y_", ")", "\n", "self", ".", "loss", "=", "self", ".", "r", "*", "tf", ".", "log", "(", "self", ".", "y_", ")", "+", "(", "1", "-", "self", ".", "r", ")", "*", "tf", ".", "log", "(", "1", "-", "self", ".", "y_", ")", "#tf.nn.sigmoid_cross_entropy_with_logits(logits=self.y_,labels=self.r)", "\n", "#self.loss = tf.nn.l2_loss(tf.subtract(self.y_,self.r))", "\n", "self", ".", "loss", "=", "-", "tf", ".", "reduce_sum", "(", "self", ".", "loss", ")", "\n", "reg_lambda", "=", "tf", ".", "constant", "(", "self", ".", "regU", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "regLoss", "=", "tf", ".", "multiply", "(", "reg_lambda", ",", "self", ".", "regLoss", ")", "\n", "self", ".", "loss", "=", "tf", ".", "add", "(", "self", ".", "loss", ",", "self", ".", "regLoss", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lRate", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "self", ".", "U", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_users", ",", "self", ".", "n_hidden_u", "[", "-", "1", "]", ")", ")", "\n", "self", ".", "V", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_items", ",", "self", ".", "n_hidden_u", "[", "-", "1", "]", ")", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "\n", "total_batch", "=", "int", "(", "len", "(", "self", ".", "data", ".", "trainingData", ")", "/", "self", ".", "batch_size", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "maxEpoch", ")", ":", "\n", "            ", "shuffle", "(", "self", ".", "data", ".", "trainingData", ")", "\n", "for", "i", "in", "range", "(", "total_batch", ")", ":", "\n", "                ", "users", ",", "items", ",", "ratings", ",", "u_idx", ",", "v_idx", "=", "self", ".", "next_batch", "(", "i", ")", "\n", "shuffle_idx", "=", "np", ".", "random", ".", "permutation", "(", "list", "(", "range", "(", "len", "(", "users", ")", ")", ")", ")", "\n", "users", "=", "users", "[", "shuffle_idx", "]", "\n", "items", "=", "items", "[", "shuffle_idx", "]", "\n", "ratings", "=", "ratings", "[", "shuffle_idx", "]", "\n", "u_idx", "=", "u_idx", "[", "shuffle_idx", "]", "\n", "v_idx", "=", "v_idx", "[", "shuffle_idx", "]", "\n", "_", ",", "loss", "=", "self", ".", "sess", ".", "run", "(", "[", "optimizer", ",", "self", ".", "loss", "]", ",", "feed_dict", "=", "{", "self", ".", "input_u", ":", "users", ",", "self", ".", "input_i", ":", "items", ",", "self", ".", "r", ":", "ratings", "}", ")", "\n", "print", "(", "self", ".", "foldInfo", ",", "\"Epoch:\"", ",", "'%04d'", "%", "(", "epoch", "+", "1", ")", ",", "\"Batch:\"", ",", "'%03d'", "%", "(", "i", "+", "1", ")", ",", "\"loss=\"", ",", "\"{:.9f}\"", ".", "format", "(", "loss", ")", ")", "\n", "#save the output layer", "\n", "U_embedding", ",", "V_embedding", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "user_out", ",", "self", ".", "item_out", "]", ",", "feed_dict", "=", "{", "self", ".", "input_u", ":", "users", ",", "self", ".", "input_i", ":", "items", "}", ")", "\n", "for", "ue", ",", "u", "in", "zip", "(", "U_embedding", ",", "u_idx", ")", ":", "\n", "                    ", "self", ".", "U", "[", "u", "]", "=", "ue", "\n", "", "for", "ve", ",", "v", "in", "zip", "(", "V_embedding", ",", "v_idx", ")", ":", "\n", "                    ", "self", ".", "V", "[", "v", "]", "=", "ve", "\n", "", "", "self", ".", "normalized_V", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "self", ".", "V", "*", "self", ".", "V", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "normalized_U", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "self", ".", "U", "*", "self", ".", "U", ",", "axis", "=", "1", ")", ")", "\n", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.DMF.DMF.predictForRanking": [[117, 124], ["DMF.DMF.data.containsUser", "numpy.divide", "DMF.DMF.V.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "uid", "=", "self", ".", "data", ".", "user", "[", "u", "]", "\n", "return", "np", ".", "divide", "(", "self", ".", "V", ".", "dot", "(", "self", ".", "U", "[", "uid", "]", ")", ",", "self", ".", "normalized_U", "[", "uid", "]", "*", "self", ".", "normalized_V", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CUNE_BPR.CUNE_BPR.__init__": [[132, 136], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", "=", "None", ",", "testSet", "=", "None", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "CUNE_BPR", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "self", ".", "nonLeafVec", "=", "{", "}", "\n", "self", ".", "leafVec", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CUNE_BPR.CUNE_BPR.readConfiguration": [[137, 147], ["super().readConfiguration", "util.config.OptionConf", "int", "int", "int", "int", "int", "float", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "CUNE_BPR", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "options", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'CUNE-BPR'", "]", ")", "\n", "self", ".", "walkCount", "=", "int", "(", "options", "[", "'-T'", "]", ")", "\n", "self", ".", "walkLength", "=", "int", "(", "options", "[", "'-L'", "]", ")", "\n", "self", ".", "walkDim", "=", "int", "(", "options", "[", "'-l'", "]", ")", "\n", "self", ".", "winSize", "=", "int", "(", "options", "[", "'-w'", "]", ")", "\n", "self", ".", "topK", "=", "int", "(", "options", "[", "'-k'", "]", ")", "\n", "self", ".", "s", "=", "float", "(", "options", "[", "'-s'", "]", ")", "\n", "self", ".", "epoch", "=", "int", "(", "options", "[", "'-ep'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CUNE_BPR.CUNE_BPR.printAlgorConfig": [[148, 155], ["super().printAlgorConfig", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "CUNE_BPR", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Specified Arguments of'", ",", "self", ".", "config", "[", "'model.name'", "]", "+", "':'", ")", "\n", "print", "(", "'Walks count per user'", ",", "self", ".", "walkCount", ")", "\n", "print", "(", "'Length of each walk'", ",", "self", ".", "walkLength", ")", "\n", "print", "(", "'Dimension of user embedding'", ",", "self", ".", "walkDim", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CUNE_BPR.CUNE_BPR.trainModel": [[156, 348], ["print", "print", "collections.defaultdict", "collections.defaultdict", "print", "collections.defaultdict", "random.shuffle", "print", "gensim.Word2Vec", "print", "print", "print", "print", "collections.defaultdict", "collections.defaultdict", "print", "set", "range", "numpy.random.rand", "list", "CUNE_BPR.CUNE_BPR.isConverged", "len", "range", "CUNE_BPR.CUNE_BPR.walks.append", "sorted", "print", "CUNE_BPR.CUNE_BPR.data.item.keys", "list", "CUNE_BPR.CUNE_BPR.filteredRatings[].append", "set", "len", "random.choice", "path.append", "CUNE_BPR.CUNE_BPR.data.trainingSize", "sims.append", "len", "CUNE_BPR.CUNE_BPR.IPositiveSet[].keys", "range", "set.intersection", "random.choice", "util.qmath.cosine", "len", "random.choice", "random.choice", "random.choice", "random.choice", "math.log", "random.choice", "math.log", "math.log", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "util.qmath.sigmoid", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot", "CUNE_BPR.CUNE_BPR.P[].dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Kind Note: This method will probably take much time.'", ")", "\n", "#build C-U-NET", "\n", "print", "(", "'Building collaborative user network...'", ")", "\n", "#filter isolated nodes", "\n", "self", ".", "itemNet", "=", "{", "}", "\n", "for", "item", "in", "self", ".", "data", ".", "trainSet_i", ":", "\n", "            ", "if", "len", "(", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", ")", ">", "1", ":", "\n", "                ", "self", ".", "itemNet", "[", "item", "]", "=", "self", ".", "data", ".", "trainSet_i", "[", "item", "]", "\n", "\n", "", "", "self", ".", "filteredRatings", "=", "defaultdict", "(", "list", ")", "\n", "for", "item", "in", "self", ".", "itemNet", ":", "\n", "            ", "for", "user", "in", "self", ".", "itemNet", "[", "item", "]", ":", "\n", "                ", "if", "self", ".", "itemNet", "[", "item", "]", "[", "user", "]", ">=", "1", ":", "\n", "                    ", "self", ".", "filteredRatings", "[", "user", "]", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "self", ".", "CUNet", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "user1", "in", "self", ".", "filteredRatings", ":", "\n", "            ", "s1", "=", "set", "(", "self", ".", "filteredRatings", "[", "user1", "]", ")", "\n", "for", "user2", "in", "self", ".", "filteredRatings", ":", "\n", "                ", "if", "user1", "!=", "user2", ":", "\n", "                    ", "s2", "=", "set", "(", "self", ".", "filteredRatings", "[", "user2", "]", ")", "\n", "weight", "=", "len", "(", "s1", ".", "intersection", "(", "s2", ")", ")", "\n", "if", "weight", ">", "0", ":", "\n", "                        ", "self", ".", "CUNet", "[", "user1", "]", "+=", "[", "user2", "]", "*", "weight", "\n", "\n", "\n", "#build Huffman Tree First", "\n", "#get weight", "\n", "# print 'Building Huffman tree...'", "\n", "# #To accelerate the method, the weight is estimated roughly", "\n", "# nodes = {}", "\n", "# for user in self.CUNet:", "\n", "#     nodes[user] = len(self.CUNet[user])", "\n", "# nodes = sorted(nodes.iteritems(),key=lambda d:d[1])", "\n", "# nodes = [HTreeNode(None,None,user[1],user[0]) for user in nodes]", "\n", "# nodeList = OrderedLinkList()", "\n", "# for node in nodes:", "\n", "#     listNode = Node()", "\n", "#     listNode.val = node", "\n", "#     try:", "\n", "#         nodeList.insert(listNode)", "\n", "#     except AttributeError:", "\n", "#         pass", "\n", "# self.HTree = HuffmanTree(vecLength=self.walkDim)", "\n", "# self.HTree.buildTree(nodeList)", "\n", "# print 'Coding for all users...'", "\n", "# self.HTree.coding(self.HTree.root,'',0)", "\n", "\n", "\n", "", "", "", "", "print", "(", "'Generating random deep walks...'", ")", "\n", "self", ".", "walks", "=", "[", "]", "\n", "self", ".", "visited", "=", "defaultdict", "(", "dict", ")", "\n", "for", "user", "in", "self", ".", "CUNet", ":", "\n", "            ", "for", "t", "in", "range", "(", "self", ".", "walkCount", ")", ":", "\n", "                ", "path", "=", "[", "user", "]", "\n", "lastNode", "=", "user", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "walkLength", ")", ":", "\n", "                    ", "nextNode", "=", "choice", "(", "self", ".", "CUNet", "[", "lastNode", "]", ")", "\n", "count", "=", "0", "\n", "while", "nextNode", "in", "self", ".", "visited", "[", "lastNode", "]", ":", "\n", "                        ", "nextNode", "=", "choice", "(", "self", ".", "CUNet", "[", "lastNode", "]", ")", "\n", "#break infinite loop", "\n", "count", "+=", "1", "\n", "if", "count", "==", "10", ":", "\n", "                            ", "break", "\n", "", "", "path", ".", "append", "(", "nextNode", ")", "\n", "self", ".", "visited", "[", "user", "]", "[", "nextNode", "]", "=", "1", "\n", "lastNode", "=", "nextNode", "\n", "", "self", ".", "walks", ".", "append", "(", "path", ")", "\n", "#print path", "\n", "", "", "shuffle", "(", "self", ".", "walks", ")", "\n", "\n", "#Training get top-k friends", "\n", "print", "(", "'Generating user embedding...'", ")", "\n", "# epoch = 1", "\n", "# while epoch <= self.epoch:", "\n", "#     loss = 0", "\n", "#     #slide windows randomly", "\n", "#", "\n", "#     for n in range(self.walkLength/self.winSize):", "\n", "#", "\n", "#         for walk in self.walks:", "\n", "#             center = randint(0, len(walk)-1)", "\n", "#             s = max(0,center-self.winSize/2)", "\n", "#             e = min(center+self.winSize/2,len(walk)-1)", "\n", "#             for user in walk[s:e]:", "\n", "#                 centerUser = walk[center]", "\n", "#                 if user <> centerUser:", "\n", "#                     code = self.HTree.code[user]", "\n", "#                     centerCode = self.HTree.code[centerUser]", "\n", "#                     x = self.HTree.vector[centerCode]", "\n", "#                     for i in range(1,len(code)):", "\n", "#                         prefix = code[0:i]", "\n", "#                         w = self.HTree.vector[prefix]", "\n", "#                         self.HTree.vector[prefix] += self.lRate*(1-sigmoid(w.dot(x)))*x", "\n", "#                         self.HTree.vector[centerCode] += self.lRate*(1-sigmoid(w.dot(x)))*w", "\n", "#                         loss += -log(sigmoid(w.dot(x)),2)", "\n", "#     print 'epoch:', epoch, 'loss:', loss", "\n", "#     epoch+=1", "\n", "model", "=", "w2v", ".", "Word2Vec", "(", "self", ".", "walks", ",", "size", "=", "self", ".", "walkDim", ",", "window", "=", "5", ",", "min_count", "=", "0", ",", "iter", "=", "3", ")", "\n", "print", "(", "'User embedding generated.'", ")", "\n", "\n", "print", "(", "'Constructing similarity matrix...'", ")", "\n", "self", ".", "W", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "data", ".", "trainingSize", "(", ")", "[", "0", "]", ",", "self", ".", "walkDim", ")", "/", "10", "\n", "self", ".", "topKSim", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "user1", "in", "self", ".", "CUNet", ":", "\n", "# prefix1 = self.HTree.code[user1]", "\n", "# vec1 = self.HTree.vector[prefix1]", "\n", "            ", "sims", "=", "[", "]", "\n", "u1", "=", "self", ".", "data", ".", "user", "[", "user1", "]", "\n", "self", ".", "W", "[", "u1", "]", "=", "model", ".", "wv", "[", "user1", "]", "\n", "for", "user2", "in", "self", ".", "CUNet", ":", "\n", "                ", "if", "user1", "!=", "user2", ":", "\n", "                    ", "u2", "=", "self", ".", "data", ".", "user", "[", "user2", "]", "\n", "self", ".", "W", "[", "u2", "]", "=", "model", ".", "wv", "[", "user2", "]", "\n", "sims", ".", "append", "(", "(", "user2", ",", "cosine", "(", "self", ".", "W", "[", "u1", "]", ",", "self", ".", "W", "[", "u2", "]", ")", ")", ")", "\n", "", "", "self", ".", "topKSim", "[", "user1", "]", "=", "sorted", "(", "sims", ",", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "[", ":", "self", ".", "topK", "]", "\n", "i", "+=", "1", "\n", "if", "i", "%", "200", "==", "0", ":", "\n", "                ", "print", "(", "'progress:'", ",", "i", ",", "'/'", ",", "len", "(", "self", ".", "CUNet", ")", ")", "\n", "", "", "print", "(", "'Similarity matrix finished.'", ")", "\n", "#prepare Pu set, IPu set, and Nu set", "\n", "print", "(", "'Preparing item sets...'", ")", "\n", "self", ".", "PositiveSet", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "IPositiveSet", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "user", "in", "self", ".", "topKSim", ":", "\n", "            ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                 ", "self", ".", "PositiveSet", "[", "user", "]", "[", "item", "]", "=", "1", "\n", "", "for", "friend", "in", "self", ".", "topKSim", "[", "user", "]", ":", "\n", "                ", "for", "item", "in", "self", ".", "data", ".", "trainSet_u", "[", "friend", "[", "0", "]", "]", ":", "\n", "                    ", "if", "item", "not", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                        ", "self", ".", "IPositiveSet", "[", "user", "]", "[", "item", "]", "=", "1", "\n", "\n", "\n", "", "", "", "", "print", "(", "'Training...'", ")", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "self", ".", "maxEpoch", ":", "\n", "            ", "self", ".", "loss", "=", "0", "\n", "itemList", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "user", "in", "self", ".", "PositiveSet", ":", "\n", "                ", "u", "=", "self", ".", "data", ".", "user", "[", "user", "]", "\n", "kItems", "=", "list", "(", "self", ".", "IPositiveSet", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "for", "item", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                    ", "i", "=", "self", ".", "data", ".", "item", "[", "item", "]", "\n", "for", "n", "in", "range", "(", "3", ")", ":", "#negative sampling for 3 times", "\n", "                        ", "if", "len", "(", "self", ".", "IPositiveSet", "[", "user", "]", ")", ">", "0", ":", "\n", "                            ", "item_k", "=", "choice", "(", "kItems", ")", "\n", "k", "=", "self", ".", "data", ".", "item", "[", "item_k", "]", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", ")", ")", "*", "(", "\n", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "k", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", ")", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "k", "]", "-=", "self", ".", "lRate", "*", "(", "1", "-", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", ")", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "item_j", "=", "choice", "(", "itemList", ")", "\n", "while", "item_j", "in", "self", ".", "PositiveSet", "[", "user", "]", "or", "item_j", "in", "self", ".", "IPositiveSet", ":", "\n", "                                ", "item_j", "=", "choice", "(", "itemList", ")", "\n", "", "j", "=", "self", ".", "data", ".", "item", "[", "item_j", "]", "\n", "self", ".", "P", "[", "u", "]", "+=", "(", "1", "/", "self", ".", "s", ")", "*", "self", ".", "lRate", "*", "(", "\n", "1", "-", "sigmoid", "(", "(", "1", "/", "self", ".", "s", ")", "*", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", ")", "*", "(", "\n", "self", ".", "Q", "[", "k", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "k", "]", "+=", "(", "1", "/", "self", ".", "s", ")", "*", "self", ".", "lRate", "*", "(", "\n", "1", "-", "sigmoid", "(", "(", "1", "/", "self", ".", "s", ")", "*", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "(", "1", "/", "self", ".", "s", ")", "*", "self", ".", "lRate", "*", "(", "\n", "1", "-", "sigmoid", "(", "(", "1", "/", "self", ".", "s", ")", "*", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "\n", "self", ".", "P", "[", "u", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regU", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "i", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "i", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "j", "]", "\n", "self", ".", "Q", "[", "k", "]", "-=", "self", ".", "lRate", "*", "self", ".", "regI", "*", "self", ".", "Q", "[", "k", "]", "\n", "\n", "self", ".", "loss", "+=", "-", "log", "(", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", ")", ")", "-", "log", "(", "sigmoid", "(", "(", "1", "/", "self", ".", "s", ")", "*", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "k", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "item_j", "=", "choice", "(", "itemList", ")", "\n", "while", "item_j", "in", "self", ".", "PositiveSet", "[", "user", "]", ":", "\n", "                                ", "item_j", "=", "choice", "(", "itemList", ")", "\n", "", "j", "=", "self", ".", "data", ".", "item", "[", "item_j", "]", "\n", "self", ".", "P", "[", "u", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", "*", "(", "self", ".", "Q", "[", "i", "]", "-", "self", ".", "Q", "[", "j", "]", ")", "\n", "self", ".", "Q", "[", "i", "]", "+=", "self", ".", "lRate", "*", "(", "1", "-", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "self", ".", "Q", "[", "j", "]", "-=", "self", ".", "lRate", "*", "(", "1", "-", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", "*", "self", ".", "P", "[", "u", "]", "\n", "\n", "self", ".", "loss", "+=", "-", "log", "(", "sigmoid", "(", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "i", "]", ")", "-", "self", ".", "P", "[", "u", "]", ".", "dot", "(", "self", ".", "Q", "[", "j", "]", ")", ")", ")", "\n", "\n", "", "", "", "self", ".", "loss", "+=", "self", ".", "regU", "*", "(", "self", ".", "P", "*", "self", ".", "P", ")", ".", "sum", "(", ")", "+", "self", ".", "regI", "*", "(", "self", ".", "Q", "*", "self", ".", "Q", ")", ".", "sum", "(", ")", "\n", "", "epoch", "+=", "1", "\n", "if", "self", ".", "isConverged", "(", "epoch", ")", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.ranking.CUNE_BPR.CUNE_BPR.predictForRanking": [[349, 356], ["CUNE_BPR.CUNE_BPR.data.containsUser", "CUNE_BPR.CUNE_BPR.data.getUserId", "CUNE_BPR.CUNE_BPR.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId"], ["", "", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'invoked to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "u", "=", "self", ".", "data", ".", "getUserId", "(", "u", ")", "\n", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "u", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.ModelConf.__init__": [[3, 6], ["config.ModelConf.readConfiguration"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["    ", "def", "__init__", "(", "self", ",", "fileName", ")", ":", "\n", "        ", "self", ".", "config", "=", "{", "}", "\n", "self", ".", "readConfiguration", "(", "fileName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.ModelConf.__getitem__": [[7, 12], ["config.ModelConf.contains", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "not", "self", ".", "contains", "(", "item", ")", ":", "\n", "            ", "print", "(", "'parameter '", "+", "item", "+", "' is invalid!'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "return", "self", ".", "config", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.ModelConf.contains": [[13, 15], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "key", "in", "self", ".", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.ModelConf.readConfiguration": [[16, 28], ["os.path.exists", "print", "open", "enumerate", "line.strip", "line.strip().split", "print", "line.strip"], "methods", ["None"], ["", "def", "readConfiguration", "(", "self", ",", "file", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "file", ")", ":", "\n", "            ", "print", "(", "'config file is not found!'", ")", "\n", "raise", "IOError", "\n", "", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "            ", "for", "ind", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "line", ".", "strip", "(", ")", "!=", "''", ":", "\n", "                    ", "try", ":", "\n", "                        ", "key", ",", "value", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'='", ")", "\n", "self", ".", "config", "[", "key", "]", "=", "value", "\n", "", "except", "ValueError", ":", "\n", "                        ", "print", "(", "'config file is not in the correct format! Error Line:%d'", "%", "(", "ind", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.__init__": [[30, 52], ["content.strip().split", "enumerate", "content.strip", "enumerate", "item.startswith", "item.startswith", "item[].isdigit", "sub.startswith", "sub.startswith", "sub[].isdigit", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "content", ")", ":", "\n", "        ", "self", ".", "line", "=", "content", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "self", ".", "options", "=", "{", "}", "\n", "self", ".", "mainOption", "=", "False", "\n", "if", "self", ".", "line", "[", "0", "]", "==", "'on'", ":", "\n", "            ", "self", ".", "mainOption", "=", "True", "\n", "", "elif", "self", ".", "line", "[", "0", "]", "==", "'off'", ":", "\n", "            ", "self", ".", "mainOption", "=", "False", "\n", "", "for", "i", ",", "item", "in", "enumerate", "(", "self", ".", "line", ")", ":", "\n", "            ", "if", "(", "item", ".", "startswith", "(", "'-'", ")", "or", "item", ".", "startswith", "(", "'--'", ")", ")", "and", "not", "item", "[", "1", ":", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "ind", "=", "i", "+", "1", "\n", "for", "j", ",", "sub", "in", "enumerate", "(", "self", ".", "line", "[", "ind", ":", "]", ")", ":", "\n", "                    ", "if", "(", "sub", ".", "startswith", "(", "'-'", ")", "or", "sub", ".", "startswith", "(", "'--'", ")", ")", "and", "not", "sub", "[", "1", ":", "]", ".", "isdigit", "(", ")", ":", "\n", "                        ", "ind", "=", "j", "\n", "break", "\n", "", "if", "j", "==", "len", "(", "self", ".", "line", "[", "ind", ":", "]", ")", "-", "1", ":", "\n", "                        ", "ind", "=", "j", "+", "1", "\n", "break", "\n", "", "", "try", ":", "\n", "                    ", "self", ".", "options", "[", "item", "]", "=", "' '", ".", "join", "(", "self", ".", "line", "[", "i", "+", "1", ":", "i", "+", "1", "+", "ind", "]", ")", "\n", "", "except", "IndexError", ":", "\n", "                    ", "self", ".", "options", "[", "item", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.__getitem__": [[53, 58], ["config.OptionConf.contains", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "not", "self", ".", "contains", "(", "item", ")", ":", "\n", "            ", "print", "(", "'parameter '", "+", "item", "+", "' is invalid!'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "return", "self", ".", "options", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys": [[59, 61], ["config.OptionConf.options.keys"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "options", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.isMainOn": [[62, 64], ["None"], "methods", ["None"], ["", "def", "isMainOn", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mainOption", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.contains": [[65, 67], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "key", "in", "self", ".", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.writeFile": [[18, 24], ["os.path.exists", "os.makedirs", "open", "f.writelines"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "writeFile", "(", "dir", ",", "file", ",", "content", ",", "op", "=", "'w'", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir", ")", "\n", "", "with", "open", "(", "dir", "+", "file", ",", "op", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.deleteFile": [[25, 29], ["os.path.exists", "os.remove"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "deleteFile", "(", "filePath", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "filePath", ")", ":", "\n", "            ", "remove", "(", "filePath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadDataSet": [[30, 77], ["config.OptionConf", "config.OptionConf.contains", "ratingConfig[].strip().split", "config.OptionConf.contains", "enumerate", "print", "print", "open", "f.readlines", "re.split", "ratingConfig[].strip", "line.strip", "print", "exit", "testData.append", "trainingData.append", "len", "len", "print", "exit", "int", "int", "float", "float", "float", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains"], ["", "", "@", "staticmethod", "\n", "def", "loadDataSet", "(", "conf", ",", "file", ",", "bTest", "=", "False", ",", "binarized", "=", "False", ",", "threshold", "=", "3.0", ")", ":", "\n", "        ", "trainingData", "=", "[", "]", "\n", "testData", "=", "[", "]", "\n", "ratingConfig", "=", "OptionConf", "(", "conf", "[", "'ratings.setup'", "]", ")", "\n", "if", "not", "bTest", ":", "\n", "            ", "print", "(", "'loading training data...'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'loading test data...'", ")", "\n", "", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "            ", "ratings", "=", "f", ".", "readlines", "(", ")", "\n", "# ignore the headline", "\n", "", "if", "ratingConfig", ".", "contains", "(", "'-header'", ")", ":", "\n", "            ", "ratings", "=", "ratings", "[", "1", ":", "]", "\n", "# order of the columns", "\n", "", "order", "=", "ratingConfig", "[", "'-columns'", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "delim", "=", "' |,|\\t'", "\n", "if", "ratingConfig", ".", "contains", "(", "'-delim'", ")", ":", "\n", "            ", "delim", "=", "ratingConfig", "[", "'-delim'", "]", "\n", "", "for", "lineNo", ",", "line", "in", "enumerate", "(", "ratings", ")", ":", "\n", "            ", "items", "=", "split", "(", "delim", ",", "line", ".", "strip", "(", ")", ")", "\n", "if", "not", "bTest", "and", "len", "(", "order", ")", "<", "2", ":", "\n", "                ", "print", "(", "'The rating file is not in a correct format. Error: Line num %d'", "%", "lineNo", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "try", ":", "\n", "                ", "userId", "=", "items", "[", "int", "(", "order", "[", "0", "]", ")", "]", "\n", "itemId", "=", "items", "[", "int", "(", "order", "[", "1", "]", ")", "]", "\n", "if", "len", "(", "order", ")", "<", "3", ":", "\n", "                    ", "rating", "=", "1", "#default value", "\n", "", "else", ":", "\n", "                    ", "rating", "=", "items", "[", "int", "(", "order", "[", "2", "]", ")", "]", "\n", "", "if", "binarized", ":", "\n", "                    ", "if", "float", "(", "items", "[", "int", "(", "order", "[", "2", "]", ")", "]", ")", "<", "threshold", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "rating", "=", "1", "\n", "", "", "", "except", "ValueError", ":", "\n", "                ", "print", "(", "'Error! Have you added the option -header to the rating.setup?'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "if", "bTest", ":", "\n", "                ", "testData", ".", "append", "(", "[", "userId", ",", "itemId", ",", "float", "(", "rating", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "trainingData", ".", "append", "(", "[", "userId", ",", "itemId", ",", "float", "(", "rating", ")", "]", ")", "\n", "", "", "if", "bTest", ":", "\n", "            ", "return", "testData", "\n", "", "else", ":", "\n", "            ", "return", "trainingData", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadUserList": [[78, 86], ["print", "open", "userList.append", "line.strip().split", "line.strip"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "loadUserList", "(", "filepath", ")", ":", "\n", "        ", "userList", "=", "[", "]", "\n", "print", "(", "'loading user List...'", ")", "\n", "with", "open", "(", "filepath", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "userList", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "", "", "return", "userList", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.loadRelationship": [[87, 112], ["config.OptionConf", "print", "config.OptionConf.contains", "socialConfig[].strip().split", "enumerate", "open", "f.readlines", "re.split", "relation.append", "socialConfig[].strip", "line.strip", "len", "print", "exit", "len", "float", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains"], ["", "@", "staticmethod", "\n", "def", "loadRelationship", "(", "conf", ",", "filePath", ")", ":", "\n", "        ", "socialConfig", "=", "OptionConf", "(", "conf", "[", "'social.setup'", "]", ")", "\n", "relation", "=", "[", "]", "\n", "print", "(", "'loading social data...'", ")", "\n", "with", "open", "(", "filePath", ")", "as", "f", ":", "\n", "            ", "relations", "=", "f", ".", "readlines", "(", ")", "\n", "# ignore the headline", "\n", "", "if", "socialConfig", ".", "contains", "(", "'-header'", ")", ":", "\n", "            ", "relations", "=", "relations", "[", "1", ":", "]", "\n", "# order of the columns", "\n", "", "order", "=", "socialConfig", "[", "'-columns'", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "for", "lineNo", ",", "line", "in", "enumerate", "(", "relations", ")", ":", "\n", "            ", "items", "=", "split", "(", "' |,|\\t'", ",", "line", ".", "strip", "(", ")", ")", "\n", "if", "len", "(", "order", ")", "<", "2", ":", "\n", "                ", "print", "(", "'The social file is not in a correct format. Error: Line num %d'", "%", "lineNo", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "userId1", "=", "items", "[", "int", "(", "order", "[", "0", "]", ")", "]", "\n", "userId2", "=", "items", "[", "int", "(", "order", "[", "1", "]", ")", "]", "\n", "if", "len", "(", "order", ")", "<", "3", ":", "\n", "                ", "weight", "=", "1", "\n", "", "else", ":", "\n", "                ", "weight", "=", "float", "(", "items", "[", "int", "(", "order", "[", "2", "]", ")", "]", ")", "\n", "", "relation", ".", "append", "(", "[", "userId1", ",", "userId2", ",", "weight", "]", ")", "\n", "", "return", "relation", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.__init__": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.ratingMeasure": [[5, 13], ["measure.Measure.MAE", "measure.append", "measure.Measure.RMSE", "measure.append", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.MAE", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.RMSE"], ["", "@", "staticmethod", "\n", "def", "ratingMeasure", "(", "res", ")", ":", "\n", "        ", "measure", "=", "[", "]", "\n", "mae", "=", "Measure", ".", "MAE", "(", "res", ")", "\n", "measure", ".", "append", "(", "'MAE:'", "+", "str", "(", "mae", ")", "+", "'\\n'", ")", "\n", "rmse", "=", "Measure", ".", "RMSE", "(", "res", ")", "\n", "measure", ".", "append", "(", "'RMSE:'", "+", "str", "(", "rmse", ")", "+", "'\\n'", ")", "\n", "return", "measure", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.hits": [[14, 22], ["list", "len", "origin[].keys", "set().intersection", "set", "set"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set"], ["", "@", "staticmethod", "\n", "def", "hits", "(", "origin", ",", "res", ")", ":", "\n", "        ", "hitCount", "=", "{", "}", "\n", "for", "user", "in", "origin", ":", "\n", "            ", "items", "=", "list", "(", "origin", "[", "user", "]", ".", "keys", "(", ")", ")", "\n", "predicted", "=", "[", "item", "[", "0", "]", "for", "item", "in", "res", "[", "user", "]", "]", "\n", "hitCount", "[", "user", "]", "=", "len", "(", "set", "(", "items", ")", ".", "intersection", "(", "set", "(", "predicted", ")", ")", ")", "\n", "", "return", "hitCount", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.rankingMeasure": [[23, 50], ["measure.Measure.hits", "measure.Measure.precision", "indicators.append", "measure.Measure.recall", "indicators.append", "measure.Measure.F1", "indicators.append", "measure.Measure.NDCG", "indicators.append", "measure.append", "len", "len", "print", "exit", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.hits", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.precision", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.recall", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.F1", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.NDCG"], ["", "@", "staticmethod", "\n", "def", "rankingMeasure", "(", "origin", ",", "res", ",", "N", ")", ":", "\n", "        ", "measure", "=", "[", "]", "\n", "for", "n", "in", "N", ":", "\n", "            ", "predicted", "=", "{", "}", "\n", "for", "user", "in", "res", ":", "\n", "                ", "predicted", "[", "user", "]", "=", "res", "[", "user", "]", "[", ":", "n", "]", "\n", "", "indicators", "=", "[", "]", "\n", "if", "len", "(", "origin", ")", "!=", "len", "(", "predicted", ")", ":", "\n", "                ", "print", "(", "'The Lengths of test set and predicted set are not match!'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "hits", "=", "Measure", ".", "hits", "(", "origin", ",", "predicted", ")", "\n", "prec", "=", "Measure", ".", "precision", "(", "hits", ",", "n", ")", "\n", "indicators", ".", "append", "(", "'Precision:'", "+", "str", "(", "prec", ")", "+", "'\\n'", ")", "\n", "recall", "=", "Measure", ".", "recall", "(", "hits", ",", "origin", ")", "\n", "indicators", ".", "append", "(", "'Recall:'", "+", "str", "(", "recall", ")", "+", "'\\n'", ")", "\n", "F1", "=", "Measure", ".", "F1", "(", "prec", ",", "recall", ")", "\n", "indicators", ".", "append", "(", "'F1:'", "+", "str", "(", "F1", ")", "+", "'\\n'", ")", "\n", "#MAP = Measure.MAP(origin, predicted, n)", "\n", "#indicators.append('MAP:' + str(MAP) + '\\n')", "\n", "NDCG", "=", "Measure", ".", "NDCG", "(", "origin", ",", "predicted", ",", "n", ")", "\n", "indicators", ".", "append", "(", "'NDCG:'", "+", "str", "(", "NDCG", ")", "+", "'\\n'", ")", "\n", "# AUC = Measure.AUC(origin,res,rawRes)", "\n", "# measure.append('AUC:' + str(AUC) + '\\n')", "\n", "measure", ".", "append", "(", "'Top '", "+", "str", "(", "n", ")", "+", "'\\n'", ")", "\n", "measure", "+=", "indicators", "\n", "", "return", "measure", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.precision": [[51, 55], ["sum", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "precision", "(", "hits", ",", "N", ")", ":", "\n", "        ", "prec", "=", "sum", "(", "[", "hits", "[", "user", "]", "for", "user", "in", "hits", "]", ")", "\n", "return", "prec", "/", "(", "len", "(", "hits", ")", "*", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.NDCG": [[69, 83], ["enumerate", "enumerate", "len", "list", "math.log", "math.log", "origin[].keys"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "@", "staticmethod", "\n", "def", "NDCG", "(", "origin", ",", "res", ",", "N", ")", ":", "\n", "        ", "sum_NDCG", "=", "0", "\n", "for", "user", "in", "res", ":", "\n", "            ", "DCG", "=", "0", "\n", "IDCG", "=", "0", "\n", "#1 = related, 0 = unrelated", "\n", "for", "n", ",", "item", "in", "enumerate", "(", "res", "[", "user", "]", ")", ":", "\n", "                ", "if", "item", "[", "0", "]", "in", "origin", "[", "user", "]", ":", "\n", "                    ", "DCG", "+=", "1.0", "/", "math", ".", "log", "(", "n", "+", "2", ")", "\n", "", "", "for", "n", ",", "item", "in", "enumerate", "(", "list", "(", "origin", "[", "user", "]", ".", "keys", "(", ")", ")", "[", ":", "N", "]", ")", ":", "\n", "                ", "IDCG", "+=", "1.0", "/", "math", ".", "log", "(", "n", "+", "2", ")", "\n", "", "sum_NDCG", "+=", "DCG", "/", "IDCG", "\n", "", "return", "sum_NDCG", "/", "len", "(", "res", ")", "\n", "# @staticmethod", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.recall": [[105, 110], ["sum", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "recall", "(", "hits", ",", "origin", ")", ":", "\n", "        ", "recallList", "=", "[", "hits", "[", "user", "]", "/", "len", "(", "origin", "[", "user", "]", ")", "for", "user", "in", "hits", "]", "\n", "recall", "=", "sum", "(", "recallList", ")", "/", "len", "(", "recallList", ")", "\n", "return", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.F1": [[111, 117], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "F1", "(", "prec", ",", "recall", ")", ":", "\n", "        ", "if", "(", "prec", "+", "recall", ")", "!=", "0", ":", "\n", "            ", "return", "2", "*", "prec", "*", "recall", "/", "(", "prec", "+", "recall", ")", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.MAE": [[118, 128], ["abs"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "MAE", "(", "res", ")", ":", "\n", "        ", "error", "=", "0", "\n", "count", "=", "0", "\n", "for", "entry", "in", "res", ":", "\n", "            ", "error", "+=", "abs", "(", "entry", "[", "2", "]", "-", "entry", "[", "3", "]", ")", "\n", "count", "+=", "1", "\n", "", "if", "count", "==", "0", ":", "\n", "            ", "return", "error", "\n", "", "return", "error", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.RMSE": [[129, 139], ["math.sqrt"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "RMSE", "(", "res", ")", ":", "\n", "        ", "error", "=", "0", "\n", "count", "=", "0", "\n", "for", "entry", "in", "res", ":", "\n", "            ", "error", "+=", "(", "entry", "[", "2", "]", "-", "entry", "[", "3", "]", ")", "**", "2", "\n", "count", "+=", "1", "\n", "", "if", "count", "==", "0", ":", "\n", "            ", "return", "error", "\n", "", "return", "math", ".", "sqrt", "(", "error", "/", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.l1": [[5, 7], ["numpy.linalg.norm"], "function", ["None"], ["def", "l1", "(", "x", ")", ":", "\n", "    ", "return", "norm", "(", "x", ",", "ord", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.l2": [[8, 10], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "l2", "(", "x", ")", ":", "\n", "    ", "return", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.common": [[11, 17], ["None"], "function", ["None"], ["", "def", "common", "(", "x1", ",", "x2", ")", ":", "\n", "# find common ratings", "\n", "    ", "common", "=", "(", "x1", "!=", "0", ")", "&", "(", "x2", "!=", "0", ")", "\n", "new_x1", "=", "x1", "[", "common", "]", "\n", "new_x2", "=", "x2", "[", "common", "]", "\n", "return", "new_x1", ",", "new_x2", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine_sp": [[18, 32], ["math.sqrt", "math.sqrt"], "function", ["None"], ["", "def", "cosine_sp", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "'x1,x2 are dicts,this version is for sparse representation'", "\n", "total", "=", "0", "\n", "denom1", "=", "0", "\n", "denom2", "=", "0", "\n", "try", ":", "\n", "        ", "for", "k", "in", "x1", ":", "\n", "            ", "if", "k", "in", "x2", ":", "\n", "                ", "total", "+=", "x1", "[", "k", "]", "*", "x2", "[", "k", "]", "\n", "denom1", "+=", "x1", "[", "k", "]", "**", "2", "\n", "denom2", "+=", "x2", "[", "k", "]", "**", "2", "\n", "", "", "return", "total", "/", "(", "sqrt", "(", "denom1", ")", "*", "sqrt", "(", "denom2", ")", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.euclidean_sp": [[33, 43], ["None"], "function", ["None"], ["", "", "def", "euclidean_sp", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "'x1,x2 are dicts,this version is for sparse representation'", "\n", "total", "=", "0", "\n", "try", ":", "\n", "        ", "for", "k", "in", "x1", ":", "\n", "            ", "if", "k", "in", "x2", ":", "\n", "                ", "total", "+=", "x1", "[", "k", "]", "**", "2", "-", "x2", "[", "k", "]", "**", "2", "\n", "", "", "return", "1", "/", "total", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine": [[44, 54], ["x1.dot", "math.sqrt", "x1.dot", "x2.dot"], "function", ["None"], ["", "", "def", "cosine", "(", "x1", ",", "x2", ")", ":", "\n", "#find common ratings", "\n", "#new_x1, new_x2 = common(x1,x2)", "\n", "#compute the cosine similarity between two vectors", "\n", "    ", "sum", "=", "x1", ".", "dot", "(", "x2", ")", "\n", "denom", "=", "sqrt", "(", "x1", ".", "dot", "(", "x1", ")", "*", "x2", ".", "dot", "(", "x2", ")", ")", "\n", "try", ":", "\n", "        ", "return", "sum", "/", "denom", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.pearson_sp": [[57, 76], ["sum", "len", "sum", "len", "x1.values", "x2.values", "math.sqrt", "math.sqrt"], "function", ["None"], ["", "", "def", "pearson_sp", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "total", "=", "0", "\n", "denom1", "=", "0", "\n", "denom2", "=", "0", "\n", "overlapped", "=", "False", "\n", "try", ":", "\n", "        ", "mean1", "=", "sum", "(", "x1", ".", "values", "(", ")", ")", "/", "len", "(", "x1", ")", "\n", "mean2", "=", "sum", "(", "x2", ".", "values", "(", ")", ")", "/", "len", "(", "x2", ")", "\n", "for", "k", "in", "x1", ":", "\n", "            ", "if", "k", "in", "x2", ":", "\n", "                ", "total", "+=", "(", "x1", "[", "k", "]", "-", "mean1", ")", "*", "(", "x2", "[", "k", "]", "-", "mean2", ")", "\n", "denom1", "+=", "(", "x1", "[", "k", "]", "-", "mean1", ")", "**", "2", "\n", "denom2", "+=", "(", "x2", "[", "k", "]", "-", "mean2", ")", "**", "2", "\n", "overlapped", "=", "True", "\n", "", "", "return", "total", "/", "(", "sqrt", "(", "denom1", ")", "*", "sqrt", "(", "denom2", ")", ")", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "if", "overlapped", ":", "\n", "            ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.euclidean": [[77, 87], ["qmath.common", "math.sqrt", "diff.dot"], "function", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.common"], ["", "", "def", "euclidean", "(", "x1", ",", "x2", ")", ":", "\n", "#find common ratings", "\n", "    ", "new_x1", ",", "new_x2", "=", "common", "(", "x1", ",", "x2", ")", "\n", "#compute the euclidean between two vectors", "\n", "diff", "=", "new_x1", "-", "new_x2", "\n", "denom", "=", "sqrt", "(", "(", "diff", ".", "dot", "(", "diff", ")", ")", ")", "\n", "try", ":", "\n", "        ", "return", "1", "/", "denom", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.pearson": [[89, 105], ["new_x1.dot", "math.sqrt", "x1.sum", "len", "x2.sum", "len", "new_x1.dot", "new_x2.dot"], "function", ["None"], ["", "", "def", "pearson", "(", "x1", ",", "x2", ")", ":", "\n", "#find common ratings", "\n", "#new_x1, new_x2 = common(x1, x2)", "\n", "#compute the pearson similarity between two vectors", "\n", "#ind1 = new_x1 > 0", "\n", "#ind2 = new_x2 > 0", "\n", "    ", "try", ":", "\n", "        ", "mean_x1", "=", "x1", ".", "sum", "(", ")", "/", "len", "(", "x1", ")", "\n", "mean_x2", "=", "x2", ".", "sum", "(", ")", "/", "len", "(", "x2", ")", "\n", "new_x1", "=", "x1", "-", "mean_x1", "\n", "new_x2", "=", "x2", "-", "mean_x2", "\n", "sum", "=", "new_x1", ".", "dot", "(", "new_x2", ")", "\n", "denom", "=", "sqrt", "(", "(", "new_x1", ".", "dot", "(", "new_x1", ")", ")", "*", "(", "new_x2", ".", "dot", "(", "new_x2", ")", ")", ")", "\n", "return", "sum", "/", "denom", "\n", "", "except", "ZeroDivisionError", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.similarity": [[107, 114], ["qmath.pearson_sp", "qmath.euclidean_sp", "qmath.cosine_sp"], "function", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.pearson_sp", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.euclidean_sp", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.cosine_sp"], ["", "", "def", "similarity", "(", "x1", ",", "x2", ",", "sim", ")", ":", "\n", "    ", "if", "sim", "==", "'pcc'", ":", "\n", "        ", "return", "pearson_sp", "(", "x1", ",", "x2", ")", "\n", "", "if", "sim", "==", "'euclidean'", ":", "\n", "        ", "return", "euclidean_sp", "(", "x1", ",", "x2", ")", "\n", "", "else", ":", "\n", "        ", "return", "cosine_sp", "(", "x1", ",", "x2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.normalize": [[116, 125], ["print"], "function", ["None"], ["", "", "def", "normalize", "(", "vec", ",", "maxVal", ",", "minVal", ")", ":", "\n", "    ", "'get the normalized value using min-max normalization'", "\n", "if", "maxVal", ">", "minVal", ":", "\n", "        ", "return", "(", "vec", "-", "minVal", ")", "/", "(", "maxVal", "-", "minVal", ")", "\n", "", "elif", "maxVal", "==", "minVal", ":", "\n", "        ", "return", "vec", "/", "maxVal", "\n", "", "else", ":", "\n", "        ", "print", "(", "'error... maximum value is less than minimum value.'", ")", "\n", "raise", "ArithmeticError", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid": [[126, 128], ["math.exp"], "function", ["None"], ["", "", "def", "sigmoid", "(", "val", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "exp", "(", "-", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.denormalize": [[130, 132], ["None"], "function", ["None"], ["", "def", "denormalize", "(", "vec", ",", "maxVal", ",", "minVal", ")", ":", "\n", "    ", "return", "minVal", "+", "(", "vec", "-", "0.01", ")", "*", "(", "maxVal", "-", "minVal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.find_k_largest": [[133, 164], ["numba.jit", "enumerate", "n_candidates.sort", "enumerate", "n_candidates.append", "int"], "function", ["None"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "find_k_largest", "(", "K", ",", "candidates", ")", ":", "\n", "    ", "n_candidates", "=", "[", "]", "\n", "for", "iid", ",", "score", "in", "enumerate", "(", "candidates", "[", ":", "K", "]", ")", ":", "\n", "        ", "n_candidates", ".", "append", "(", "(", "iid", ",", "score", ")", ")", "\n", "", "n_candidates", ".", "sort", "(", "key", "=", "lambda", "d", ":", "d", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "k_largest_scores", "=", "[", "item", "[", "1", "]", "for", "item", "in", "n_candidates", "]", "\n", "ids", "=", "[", "item", "[", "0", "]", "for", "item", "in", "n_candidates", "]", "\n", "# find the N biggest scores", "\n", "for", "iid", ",", "score", "in", "enumerate", "(", "candidates", ")", ":", "\n", "        ", "ind", "=", "K", "\n", "l", "=", "0", "\n", "r", "=", "K", "-", "1", "\n", "if", "k_largest_scores", "[", "r", "]", "<", "score", ":", "\n", "            ", "while", "r", ">=", "l", ":", "\n", "                ", "mid", "=", "int", "(", "(", "r", "-", "l", ")", "/", "2", ")", "+", "l", "\n", "if", "k_largest_scores", "[", "mid", "]", ">=", "score", ":", "\n", "                    ", "l", "=", "mid", "+", "1", "\n", "", "elif", "k_largest_scores", "[", "mid", "]", "<", "score", ":", "\n", "                    ", "r", "=", "mid", "-", "1", "\n", "", "if", "r", "<", "l", ":", "\n", "                    ", "ind", "=", "r", "\n", "break", "\n", "# move the items backwards", "\n", "", "", "", "if", "ind", "<", "K", "-", "2", ":", "\n", "            ", "k_largest_scores", "[", "ind", "+", "2", ":", "]", "=", "k_largest_scores", "[", "ind", "+", "1", ":", "-", "1", "]", "\n", "ids", "[", "ind", "+", "2", ":", "]", "=", "ids", "[", "ind", "+", "1", ":", "-", "1", "]", "\n", "", "if", "ind", "<", "K", "-", "1", ":", "\n", "            ", "k_largest_scores", "[", "ind", "+", "1", "]", "=", "score", "\n", "ids", "[", "ind", "+", "1", "]", "=", "iid", "\n", "", "", "return", "ids", ",", "k_largest_scores", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.loss.bpr_loss": [[3, 7], ["tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.log", "tensorflow.sigmoid"], "function", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.sigmoid"], ["def", "bpr_loss", "(", "user_emb", ",", "pos_item_emb", ",", "neg_item_emb", ")", ":", "\n", "    ", "score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "user_emb", ",", "pos_item_emb", ")", ",", "1", ")", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "user_emb", ",", "neg_item_emb", ")", ",", "1", ")", "\n", "loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "score", ")", "+", "10e-8", ")", ")", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.__init__": [[4, 13], ["logging.getLogger", "log.Log.logger.setLevel", "logging.FileHandler", "logging.Formatter", "logging.FileHandler.setFormatter", "log.Log.logger.addHandler", "os.path.exists", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "filename", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "module", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./log/'", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./log/'", ")", "\n", "", "handler", "=", "logging", ".", "FileHandler", "(", "'./log/'", "+", "filename", "+", "'.log'", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add": [[14, 16], ["log.Log.logger.info"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "text", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "text", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.dataSplit.DataSplit.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.dataSplit.DataSplit.dataSplit": [[8, 27], ["util.io.FileIO.writeFile", "util.io.FileIO.writeFile", "random.random.random", "trainingSet.append", "testSet.append", "testSet.append", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.writeFile", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.writeFile"], ["", "@", "staticmethod", "\n", "def", "dataSplit", "(", "data", ",", "test_ratio", "=", "0.3", ",", "output", "=", "False", ",", "path", "=", "'./'", ",", "order", "=", "1", ",", "binarized", "=", "False", ")", ":", "\n", "        ", "if", "test_ratio", ">=", "1", "or", "test_ratio", "<=", "0", ":", "\n", "            ", "test_ratio", "=", "0.3", "\n", "", "testSet", "=", "[", "]", "\n", "trainingSet", "=", "[", "]", "\n", "for", "entry", "in", "data", ":", "\n", "            ", "if", "random", "(", ")", "<", "test_ratio", ":", "\n", "                ", "if", "binarized", ":", "\n", "                    ", "if", "entry", "[", "2", "]", ":", "\n", "                        ", "testSet", ".", "append", "(", "entry", ")", "\n", "", "", "else", ":", "\n", "                    ", "testSet", ".", "append", "(", "entry", ")", "\n", "", "", "else", ":", "\n", "                ", "trainingSet", ".", "append", "(", "entry", ")", "\n", "", "", "if", "output", ":", "\n", "            ", "FileIO", ".", "writeFile", "(", "path", ",", "'testSet['", "+", "str", "(", "order", ")", "+", "']'", ",", "testSet", ")", "\n", "FileIO", ".", "writeFile", "(", "path", ",", "'trainingSet['", "+", "str", "(", "order", ")", "+", "']'", ",", "trainingSet", ")", "\n", "", "return", "trainingSet", ",", "testSet", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.dataSplit.DataSplit.crossValidation": [[28, 45], ["range", "enumerate", "trainingSet.append", "testSet.append", "testSet.append"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "crossValidation", "(", "data", ",", "k", ",", "output", "=", "False", ",", "path", "=", "'./'", ",", "order", "=", "1", ",", "binarized", "=", "False", ")", ":", "\n", "        ", "if", "k", "<=", "1", "or", "k", ">", "10", ":", "\n", "            ", "k", "=", "3", "\n", "", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "trainingSet", "=", "[", "]", "\n", "testSet", "=", "[", "]", "\n", "for", "ind", ",", "line", "in", "enumerate", "(", "data", ")", ":", "\n", "                ", "if", "ind", "%", "k", "==", "i", ":", "\n", "                    ", "if", "binarized", ":", "\n", "                        ", "if", "line", "[", "2", "]", ":", "\n", "                            ", "testSet", ".", "append", "(", "line", "[", ":", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "testSet", ".", "append", "(", "line", "[", ":", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "trainingSet", ".", "append", "(", "line", "[", ":", "]", ")", "\n", "", "", "yield", "trainingSet", ",", "testSet", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.sparseMatrix.SparseMatrix.__init__": [[7, 10], ["scipy.sparse.csr_matrix"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "indices", ",", "indptr", ",", "shape", "=", "None", ")", ":", "\n", "        ", "self", ".", "matrix", "=", "csr_matrix", "(", "(", "data", ",", "indices", ",", "indptr", ")", ",", "shape", ")", "\n", "self", ".", "shape", "=", "self", ".", "matrix", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.sparseMatrix.SparseMatrix.row": [[11, 15], ["sparseMatrix.SparseMatrix.matrix.getrow().toarray", "numpy.zeros", "sparseMatrix.SparseMatrix.matrix.getrow"], "methods", ["None"], ["", "def", "row", "(", "self", ",", "r", ")", ":", "\n", "        ", "if", "r", ">=", "self", ".", "shape", "[", "0", "]", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "return", "self", ".", "matrix", ".", "getrow", "(", "r", ")", ".", "toarray", "(", ")", "\n", "", "def", "col", "(", "self", ",", "c", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.sparseMatrix.SparseMatrix.col": [[15, 19], ["sparseMatrix.SparseMatrix.matrix.getcol().toarray().transpose", "numpy.zeros", "sparseMatrix.SparseMatrix.matrix.getcol().toarray", "sparseMatrix.SparseMatrix.matrix.getcol"], "methods", ["None"], ["", "def", "col", "(", "self", ",", "c", ")", ":", "\n", "        ", "if", "c", ">=", "self", ".", "shape", "[", "1", "]", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "return", "self", ".", "matrix", ".", "getcol", "(", "c", ")", ".", "toarray", "(", ")", ".", "transpose", "(", ")", "\n", "", "def", "elem", "(", "self", ",", "r", ",", "c", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.sparseMatrix.SparseMatrix.elem": [[19, 23], ["sparseMatrix.SparseMatrix.matrix.getrow().toarray", "sparseMatrix.SparseMatrix.matrix.getrow"], "methods", ["None"], ["", "def", "elem", "(", "self", ",", "r", ",", "c", ")", ":", "\n", "        ", "if", "r", ">=", "self", ".", "shape", "[", "0", "]", "or", "c", ">=", "self", ".", "shape", "[", "1", "]", ":", "\n", "            ", "return", "0", "\n", "", "return", "self", ".", "matrix", ".", "getrow", "(", "r", ")", ".", "toarray", "(", ")", "[", "0", "]", "[", "c", "]", "\n", "", "def", "sRow", "(", "self", ",", "r", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.sparseMatrix.SparseMatrix.sRow": [[23, 26], ["sparseMatrix.SparseMatrix.matrix.getrow"], "methods", ["None"], ["", "def", "sRow", "(", "self", ",", "r", ")", ":", "\n", "        ", "'return the sparse row'", "\n", "return", "self", ".", "matrix", ".", "getrow", "(", "r", ")", "\n", "", "def", "sCol", "(", "self", ",", "c", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.sparseMatrix.SparseMatrix.sCol": [[26, 29], ["sparseMatrix.SparseMatrix.matrix.getcol"], "methods", ["None"], ["", "def", "sCol", "(", "self", ",", "c", ")", ":", "\n", "        ", "'return the sparse column'", "\n", "return", "self", ".", "matrix", ".", "getcol", "(", "c", ")", "\n", "", "def", "toDense", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.sparseMatrix.SparseMatrix.toDense": [[29, 31], ["sparseMatrix.SparseMatrix.matrix.todense"], "methods", ["None"], ["", "def", "toDense", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "matrix", ".", "todense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.__init__": [[7, 19], ["len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "triple", ")", ":", "\n", "        ", "self", ".", "matrix_User", "=", "{", "}", "\n", "self", ".", "matrix_Item", "=", "{", "}", "\n", "for", "item", "in", "triple", ":", "\n", "            ", "if", "item", "[", "0", "]", "not", "in", "self", ".", "matrix_User", ":", "\n", "                ", "self", ".", "matrix_User", "[", "item", "[", "0", "]", "]", "=", "{", "}", "\n", "", "if", "item", "[", "1", "]", "not", "in", "self", ".", "matrix_Item", ":", "\n", "                ", "self", ".", "matrix_Item", "[", "item", "[", "1", "]", "]", "=", "{", "}", "\n", "", "self", ".", "matrix_User", "[", "item", "[", "0", "]", "]", "[", "item", "[", "1", "]", "]", "=", "item", "[", "2", "]", "\n", "self", ".", "matrix_Item", "[", "item", "[", "1", "]", "]", "[", "item", "[", "0", "]", "]", "=", "item", "[", "2", "]", "\n", "", "self", ".", "elemNum", "=", "len", "(", "triple", ")", "\n", "self", ".", "size", "=", "(", "len", "(", "self", ".", "matrix_User", ")", ",", "len", "(", "self", ".", "matrix_Item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.sRow": [[20, 25], ["None"], "methods", ["None"], ["", "def", "sRow", "(", "self", ",", "r", ")", ":", "\n", "        ", "if", "r", "not", "in", "self", ".", "matrix_User", ":", "\n", "            ", "return", "{", "}", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "matrix_User", "[", "r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.sCol": [[26, 31], ["None"], "methods", ["None"], ["", "", "def", "sCol", "(", "self", ",", "c", ")", ":", "\n", "        ", "if", "c", "not", "in", "self", ".", "matrix_Item", ":", "\n", "            ", "return", "{", "}", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "matrix_Item", "[", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.row": [[32, 41], ["numpy.zeros", "numpy.zeros", "list", "list", "new_sparseMatrix.SparseMatrix.matrix_User[].keys", "new_sparseMatrix.SparseMatrix.matrix_User[].values"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "", "def", "row", "(", "self", ",", "r", ")", ":", "\n", "        ", "if", "r", "not", "in", "self", ".", "matrix_User", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "size", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "array", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "size", "[", "1", "]", ")", ")", "\n", "ind", "=", "list", "(", "self", ".", "matrix_User", "[", "r", "]", ".", "keys", "(", ")", ")", "\n", "val", "=", "list", "(", "self", ".", "matrix_User", "[", "r", "]", ".", "values", "(", ")", ")", "\n", "array", "[", "0", "]", "[", "ind", "]", "=", "val", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.col": [[42, 51], ["numpy.zeros", "numpy.zeros", "list", "list", "new_sparseMatrix.SparseMatrix.matrix_Item[].keys", "new_sparseMatrix.SparseMatrix.matrix_Item[].values"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "", "def", "col", "(", "self", ",", "c", ")", ":", "\n", "        ", "if", "c", "not", "in", "self", ".", "matrix_Item", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "size", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "array", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "size", "[", "0", "]", ")", ")", "\n", "ind", "=", "list", "(", "self", ".", "matrix_Item", "[", "c", "]", ".", "keys", "(", ")", ")", "\n", "val", "=", "list", "(", "self", ".", "matrix_Item", "[", "c", "]", ".", "values", "(", ")", ")", "\n", "array", "[", "0", "]", "[", "ind", "]", "=", "val", "\n", "return", "array", "\n", "", "", "def", "elem", "(", "self", ",", "r", ",", "c", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.elem": [[51, 55], ["new_sparseMatrix.SparseMatrix.contains"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains"], ["", "", "def", "elem", "(", "self", ",", "r", ",", "c", ")", ":", "\n", "        ", "if", "not", "self", ".", "contains", "(", "r", ",", "c", ")", ":", "\n", "            ", "return", "0", "\n", "", "return", "self", ".", "matrix_User", "[", "r", "]", "[", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.contains": [[56, 60], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "r", ",", "c", ")", ":", "\n", "        ", "if", "r", "in", "self", ".", "matrix_User", "and", "c", "in", "self", ".", "matrix_User", "[", "r", "]", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.elemCount": [[61, 63], ["None"], "methods", ["None"], ["", "def", "elemCount", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "elemNum", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.new_sparseMatrix.SparseMatrix.size": [[64, 66], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.__init__": [[4, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", ")", ":", "\n", "        ", "self", ".", "symMatrix", "=", "{", "}", "\n", "self", ".", "shape", "=", "(", "shape", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.__getitem__": [[8, 12], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "item", "in", "self", ".", "symMatrix", ":", "\n", "            ", "return", "self", ".", "symMatrix", "[", "item", "]", "\n", "", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set": [[13, 20], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "i", ",", "j", ",", "val", ")", ":", "\n", "        ", "if", "i", "not", "in", "self", ".", "symMatrix", ":", "\n", "            ", "self", ".", "symMatrix", "[", "i", "]", "=", "{", "}", "\n", "", "self", ".", "symMatrix", "[", "i", "]", "[", "j", "]", "=", "val", "\n", "if", "j", "not", "in", "self", ".", "symMatrix", ":", "\n", "            ", "self", ".", "symMatrix", "[", "j", "]", "=", "{", "}", "\n", "", "self", ".", "symMatrix", "[", "j", "]", "[", "i", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.get": [[22, 26], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "if", "i", "not", "in", "self", ".", "symMatrix", "or", "j", "not", "in", "self", ".", "symMatrix", "[", "i", "]", ":", "\n", "            ", "return", "0", "\n", "", "return", "self", ".", "symMatrix", "[", "i", "]", "[", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.contains": [[27, 32], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "if", "i", "in", "self", ".", "symMatrix", "and", "j", "in", "self", ".", "symMatrix", "[", "i", "]", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.__init__": [[5, 12], ["collections.defaultdict", "collections.defaultdict", "social.Social.__generateSet"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__generateSet"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "relation", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "conf", "\n", "self", ".", "user", "=", "{", "}", "#used to store the order of users", "\n", "self", ".", "relation", "=", "relation", "\n", "self", ".", "followees", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "followers", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "trustMatrix", "=", "self", ".", "__generateSet", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.__generateSet": [[13, 27], ["util.structure.new_sparseMatrix.SparseMatrix", "triple.append", "len", "len"], "methods", ["None"], ["", "def", "__generateSet", "(", "self", ")", ":", "\n", "        ", "triple", "=", "[", "]", "\n", "for", "line", "in", "self", ".", "relation", ":", "\n", "            ", "userId1", ",", "userId2", ",", "weight", "=", "line", "\n", "#add relations to dict", "\n", "self", ".", "followees", "[", "userId1", "]", "[", "userId2", "]", "=", "weight", "\n", "self", ".", "followers", "[", "userId2", "]", "[", "userId1", "]", "=", "weight", "\n", "# order the user", "\n", "if", "userId1", "not", "in", "self", ".", "user", ":", "\n", "                ", "self", ".", "user", "[", "userId1", "]", "=", "len", "(", "self", ".", "user", ")", "\n", "", "if", "userId2", "not", "in", "self", ".", "user", ":", "\n", "                ", "self", ".", "user", "[", "userId2", "]", "=", "len", "(", "self", ".", "user", ")", "\n", "", "triple", ".", "append", "(", "[", "self", ".", "user", "[", "userId1", "]", ",", "self", ".", "user", "[", "userId2", "]", ",", "weight", "]", ")", "\n", "", "return", "new_sparseMatrix", ".", "SparseMatrix", "(", "triple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.row": [[28, 31], ["social.Social.trustMatrix.row"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.row"], ["", "def", "row", "(", "self", ",", "u", ")", ":", "\n", "#return user u's followees", "\n", "        ", "return", "self", ".", "trustMatrix", ".", "row", "(", "self", ".", "user", "[", "u", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.col": [[32, 35], ["social.Social.trustMatrix.col"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.col"], ["", "def", "col", "(", "self", ",", "u", ")", ":", "\n", "#return user u's followers", "\n", "        ", "return", "self", ".", "trustMatrix", ".", "col", "(", "self", ".", "user", "[", "u", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.elem": [[36, 38], ["social.Social.trustMatrix.elem"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.elem"], ["", "def", "elem", "(", "self", ",", "u1", ",", "u2", ")", ":", "\n", "        ", "return", "self", ".", "trustMatrix", ".", "elem", "(", "u1", ",", "u2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.weight": [[39, 44], ["None"], "methods", ["None"], ["", "def", "weight", "(", "self", ",", "u1", ",", "u2", ")", ":", "\n", "        ", "if", "u1", "in", "self", ".", "followees", "and", "u2", "in", "self", ".", "followees", "[", "u1", "]", ":", "\n", "            ", "return", "self", ".", "followees", "[", "u1", "]", "[", "u2", "]", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.trustSize": [[45, 47], ["None"], "methods", ["None"], ["", "", "def", "trustSize", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "trustMatrix", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowers": [[48, 53], ["None"], "methods", ["None"], ["", "def", "getFollowers", "(", "self", ",", "u", ")", ":", "\n", "        ", "if", "u", "in", "self", ".", "followers", ":", "\n", "            ", "return", "self", ".", "followers", "[", "u", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.getFollowees": [[54, 59], ["None"], "methods", ["None"], ["", "", "def", "getFollowees", "(", "self", ",", "u", ")", ":", "\n", "        ", "if", "u", "in", "self", ".", "followees", ":", "\n", "            ", "return", "self", ".", "followees", "[", "u", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.hasFollowee": [[60, 67], ["None"], "methods", ["None"], ["", "", "def", "hasFollowee", "(", "self", ",", "u1", ",", "u2", ")", ":", "\n", "        ", "if", "u1", "in", "self", ".", "followees", ":", "\n", "            ", "if", "u2", "in", "self", ".", "followees", "[", "u1", "]", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.social.Social.hasFollower": [[68, 75], ["None"], "methods", ["None"], ["", "def", "hasFollower", "(", "self", ",", "u1", ",", "u2", ")", ":", "\n", "        ", "if", "u1", "in", "self", ".", "followers", ":", "\n", "            ", "if", "u2", "in", "self", ".", "followers", "[", "u1", "]", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__init__": [[7, 31], ["util.config.OptionConf", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "rating.Rating.__generateSet", "rating.Rating.__computeItemMean", "rating.Rating.__computeUserMean", "rating.Rating.__globalAverage", "rating.Rating.evalSettings.contains", "rating.Rating.__cold_start_test"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__generateSet", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__computeItemMean", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__computeUserMean", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__globalAverage", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__cold_start_test"], ["def", "__init__", "(", "self", ",", "config", ",", "trainingSet", ",", "testSet", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "evalSettings", "=", "OptionConf", "(", "self", ".", "config", "[", "'evaluation.setup'", "]", ")", "\n", "self", ".", "user", "=", "{", "}", "#map user names to id", "\n", "self", ".", "item", "=", "{", "}", "#map item names to id", "\n", "self", ".", "id2user", "=", "{", "}", "\n", "self", ".", "id2item", "=", "{", "}", "\n", "self", ".", "userMeans", "=", "{", "}", "#mean values of users's ratings", "\n", "self", ".", "itemMeans", "=", "{", "}", "#mean values of items's ratings", "\n", "self", ".", "globalMean", "=", "0", "\n", "self", ".", "trainSet_u", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "trainSet_i", "=", "defaultdict", "(", "dict", ")", "\n", "self", ".", "testSet_u", "=", "defaultdict", "(", "dict", ")", "#test set in the form of [user][item]=rating", "\n", "self", ".", "testSet_i", "=", "defaultdict", "(", "dict", ")", "#test set in the form of [item][user]=rating", "\n", "self", ".", "rScale", "=", "[", "]", "#rating scale", "\n", "self", ".", "trainingData", "=", "trainingSet", "[", ":", "]", "\n", "self", ".", "testData", "=", "testSet", "[", ":", "]", "\n", "self", ".", "__generateSet", "(", ")", "\n", "self", ".", "__computeItemMean", "(", ")", "\n", "self", ".", "__computeUserMean", "(", ")", "\n", "self", ".", "__globalAverage", "(", ")", "\n", "if", "self", ".", "evalSettings", ".", "contains", "(", "'-cold'", ")", ":", "\n", "#evaluation on cold-start users", "\n", "            ", "self", ".", "__cold_start_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__generateSet": [[33, 68], ["set", "rating.Rating.evalSettings.contains", "enumerate", "list", "rating.Rating.rScale.sort", "random.shuffle", "int", "set.add", "rating.Rating.evalSettings.contains", "len", "len", "float", "rating.Rating.elemCount", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.structure.symmetricMatrix.SymmetricMatrix.set", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.elemCount"], ["", "", "def", "__generateSet", "(", "self", ")", ":", "\n", "        ", "scale", "=", "set", "(", ")", "\n", "#if validation is conducted, we sample the training data at a given probability to form the validation set,", "\n", "#and then replacing the test data with the validation data to tune parameters.", "\n", "if", "self", ".", "evalSettings", ".", "contains", "(", "'-val'", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "trainingData", ")", "\n", "separation", "=", "int", "(", "self", ".", "elemCount", "(", ")", "*", "float", "(", "self", ".", "evalSettings", "[", "'-val'", "]", ")", ")", "\n", "self", ".", "testData", "=", "self", ".", "trainingData", "[", ":", "separation", "]", "\n", "self", ".", "trainingData", "=", "self", ".", "trainingData", "[", "separation", ":", "]", "\n", "", "for", "i", ",", "entry", "in", "enumerate", "(", "self", ".", "trainingData", ")", ":", "\n", "            ", "userName", ",", "itemName", ",", "rating", "=", "entry", "\n", "# makes the rating within the range [0, 1].", "\n", "#rating = normalize(float(rating), self.rScale[-1], self.rScale[0])", "\n", "#self.trainingData[i][2] = rating", "\n", "# order the user", "\n", "if", "userName", "not", "in", "self", ".", "user", ":", "\n", "                ", "self", ".", "user", "[", "userName", "]", "=", "len", "(", "self", ".", "user", ")", "\n", "self", ".", "id2user", "[", "self", ".", "user", "[", "userName", "]", "]", "=", "userName", "\n", "# order the item", "\n", "", "if", "itemName", "not", "in", "self", ".", "item", ":", "\n", "                ", "self", ".", "item", "[", "itemName", "]", "=", "len", "(", "self", ".", "item", ")", "\n", "self", ".", "id2item", "[", "self", ".", "item", "[", "itemName", "]", "]", "=", "itemName", "\n", "# userList.append", "\n", "", "self", ".", "trainSet_u", "[", "userName", "]", "[", "itemName", "]", "=", "rating", "\n", "self", ".", "trainSet_i", "[", "itemName", "]", "[", "userName", "]", "=", "rating", "\n", "scale", ".", "add", "(", "float", "(", "rating", ")", ")", "\n", "", "self", ".", "rScale", "=", "list", "(", "scale", ")", "\n", "self", ".", "rScale", ".", "sort", "(", ")", "\n", "for", "entry", "in", "self", ".", "testData", ":", "\n", "            ", "if", "self", ".", "evalSettings", ".", "contains", "(", "'-predict'", ")", ":", "\n", "                ", "self", ".", "testSet_u", "[", "entry", "]", "=", "{", "}", "\n", "", "else", ":", "\n", "                ", "userName", ",", "itemName", ",", "rating", "=", "entry", "\n", "self", ".", "testSet_u", "[", "userName", "]", "[", "itemName", "]", "=", "rating", "\n", "self", ".", "testSet_i", "[", "itemName", "]", "[", "userName", "]", "=", "rating", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__cold_start_test": [[69, 83], ["int", "testData.append", "len"], "methods", ["None"], ["", "", "", "def", "__cold_start_test", "(", "self", ")", ":", "\n", "#evaluation on cold-start users", "\n", "        ", "threshold", "=", "int", "(", "self", ".", "evalSettings", "[", "'-cold'", "]", ")", "\n", "removedUser", "=", "{", "}", "\n", "for", "user", "in", "self", ".", "testSet_u", ":", "\n", "            ", "if", "user", "in", "self", ".", "trainSet_u", "and", "len", "(", "self", ".", "trainSet_u", "[", "user", "]", ")", ">", "threshold", ":", "\n", "                ", "removedUser", "[", "user", "]", "=", "1", "\n", "", "", "for", "user", "in", "removedUser", ":", "\n", "            ", "del", "self", ".", "testSet_u", "[", "user", "]", "\n", "", "testData", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "testData", ":", "\n", "            ", "if", "item", "[", "0", "]", "not", "in", "removedUser", ":", "\n", "                ", "testData", ".", "append", "(", "item", ")", "\n", "", "", "self", ".", "testData", "=", "testData", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__globalAverage": [[84, 90], ["sum", "rating.Rating.userMeans.values", "len"], "methods", ["None"], ["", "def", "__globalAverage", "(", "self", ")", ":", "\n", "        ", "total", "=", "sum", "(", "self", ".", "userMeans", ".", "values", "(", ")", ")", "\n", "if", "total", "==", "0", ":", "\n", "            ", "self", ".", "globalMean", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "globalMean", "=", "total", "/", "len", "(", "self", ".", "userMeans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__computeUserMean": [[91, 94], ["sum", "len", "rating.Rating.trainSet_u[].values"], "methods", ["None"], ["", "", "def", "__computeUserMean", "(", "self", ")", ":", "\n", "        ", "for", "u", "in", "self", ".", "user", ":", "\n", "            ", "self", ".", "userMeans", "[", "u", "]", "=", "sum", "(", "self", ".", "trainSet_u", "[", "u", "]", ".", "values", "(", ")", ")", "/", "len", "(", "self", ".", "trainSet_u", "[", "u", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.__computeItemMean": [[95, 98], ["sum", "len", "rating.Rating.trainSet_i[].values"], "methods", ["None"], ["", "", "def", "__computeItemMean", "(", "self", ")", ":", "\n", "        ", "for", "c", "in", "self", ".", "item", ":", "\n", "            ", "self", ".", "itemMeans", "[", "c", "]", "=", "sum", "(", "self", ".", "trainSet_i", "[", "c", "]", ".", "values", "(", ")", ")", "/", "len", "(", "self", ".", "trainSet_i", "[", "c", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getUserId": [[99, 102], ["None"], "methods", ["None"], ["", "", "def", "getUserId", "(", "self", ",", "u", ")", ":", "\n", "        ", "if", "u", "in", "self", ".", "user", ":", "\n", "            ", "return", "self", ".", "user", "[", "u", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.getItemId": [[103, 106], ["None"], "methods", ["None"], ["", "", "def", "getItemId", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "in", "self", ".", "item", ":", "\n", "            ", "return", "self", ".", "item", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize": [[107, 109], ["len", "len", "len"], "methods", ["None"], ["", "", "def", "trainingSize", "(", "self", ")", ":", "\n", "        ", "return", "(", "len", "(", "self", ".", "user", ")", ",", "len", "(", "self", ".", "item", ")", ",", "len", "(", "self", ".", "trainingData", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.testSize": [[110, 112], ["len", "len", "len"], "methods", ["None"], ["", "def", "testSize", "(", "self", ")", ":", "\n", "        ", "return", "(", "len", "(", "self", ".", "testSet_u", ")", ",", "len", "(", "self", ".", "testSet_i", ")", ",", "len", "(", "self", ".", "testData", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains": [[113, 119], ["None"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "'whether user u rated item i'", "\n", "if", "u", "in", "self", ".", "user", "and", "i", "in", "self", ".", "trainSet_u", "[", "u", "]", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser": [[120, 126], ["None"], "methods", ["None"], ["", "", "def", "containsUser", "(", "self", ",", "u", ")", ":", "\n", "        ", "'whether user is in training set'", "\n", "if", "u", "in", "self", ".", "user", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem": [[127, 133], ["None"], "methods", ["None"], ["", "", "def", "containsItem", "(", "self", ",", "i", ")", ":", "\n", "        ", "'whether item is in training set'", "\n", "if", "i", "in", "self", ".", "item", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated": [[134, 136], ["list", "list", "rating.Rating.trainSet_u[].keys", "rating.Rating.trainSet_u[].values"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "", "def", "userRated", "(", "self", ",", "u", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "trainSet_u", "[", "u", "]", ".", "keys", "(", ")", ")", ",", "list", "(", "self", ".", "trainSet_u", "[", "u", "]", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.itemRated": [[137, 139], ["list", "list", "rating.Rating.trainSet_i[].keys", "rating.Rating.trainSet_i[].values"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "def", "itemRated", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "trainSet_i", "[", "i", "]", ".", "keys", "(", ")", ")", ",", "list", "(", "self", ".", "trainSet_i", "[", "i", "]", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.row": [[140, 148], ["rating.Rating.userRated", "numpy.zeros", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated"], ["", "def", "row", "(", "self", ",", "u", ")", ":", "\n", "        ", "k", ",", "v", "=", "self", ".", "userRated", "(", "u", ")", "\n", "vec", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "item", ")", ")", "\n", "#print vec", "\n", "for", "pair", "in", "zip", "(", "k", ",", "v", ")", ":", "\n", "            ", "iid", "=", "self", ".", "item", "[", "pair", "[", "0", "]", "]", "\n", "vec", "[", "iid", "]", "=", "pair", "[", "1", "]", "\n", "", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.col": [[149, 157], ["rating.Rating.itemRated", "numpy.zeros", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.itemRated"], ["", "def", "col", "(", "self", ",", "i", ")", ":", "\n", "        ", "k", ",", "v", "=", "self", ".", "itemRated", "(", "i", ")", "\n", "vec", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "user", ")", ")", "\n", "#print vec", "\n", "for", "pair", "in", "zip", "(", "k", ",", "v", ")", ":", "\n", "            ", "uid", "=", "self", ".", "user", "[", "pair", "[", "0", "]", "]", "\n", "vec", "[", "uid", "]", "=", "pair", "[", "1", "]", "\n", "", "return", "vec", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.matrix": [[158, 169], ["numpy.zeros", "rating.Rating.userRated", "numpy.zeros", "zip", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated"], ["", "def", "matrix", "(", "self", ")", ":", "\n", "        ", "m", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "user", ")", ",", "len", "(", "self", ".", "item", ")", ")", ")", "\n", "for", "u", "in", "self", ".", "user", ":", "\n", "            ", "k", ",", "v", "=", "self", ".", "userRated", "(", "u", ")", "\n", "vec", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "item", ")", ")", "\n", "# print vec", "\n", "for", "pair", "in", "zip", "(", "k", ",", "v", ")", ":", "\n", "                ", "iid", "=", "self", ".", "item", "[", "pair", "[", "0", "]", "]", "\n", "vec", "[", "iid", "]", "=", "pair", "[", "1", "]", "\n", "", "m", "[", "self", ".", "user", "[", "u", "]", "]", "=", "vec", "\n", "", "return", "m", "\n", "# def row(self,u):", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sRow": [[175, 177], ["None"], "methods", ["None"], ["", "def", "sRow", "(", "self", ",", "u", ")", ":", "\n", "        ", "return", "self", ".", "trainSet_u", "[", "u", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.sCol": [[178, 180], ["None"], "methods", ["None"], ["", "def", "sCol", "(", "self", ",", "c", ")", ":", "\n", "        ", "return", "self", ".", "trainSet_i", "[", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.rating": [[181, 185], ["rating.Rating.contains"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains"], ["", "def", "rating", "(", "self", ",", "u", ",", "c", ")", ":", "\n", "        ", "if", "self", ".", "contains", "(", "u", ",", "c", ")", ":", "\n", "            ", "return", "self", ".", "trainSet_u", "[", "u", "]", "[", "c", "]", "\n", "", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.ratingScale": [[186, 188], ["None"], "methods", ["None"], ["", "def", "ratingScale", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "rScale", "[", "0", "]", ",", "self", ".", "rScale", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.elemCount": [[189, 191], ["len"], "methods", ["None"], ["", "def", "elemCount", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "trainingData", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.__init__": [[6, 8], ["base.iterativeRecommender.IterativeRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "DeepRecommender", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.readConfiguration": [[9, 12], ["super().readConfiguration", "int"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "DeepRecommender", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "self", ".", "batch_size", "=", "int", "(", "self", ".", "config", "[", "'batch_size'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.printAlgorConfig": [[13, 15], ["super().printAlgorConfig"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "DeepRecommender", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.initModel": [[16, 28], ["super().initModel", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.truncated_normal", "tensorflow.truncated_normal"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "super", "(", "DeepRecommender", ",", "self", ")", ".", "initModel", "(", ")", "\n", "self", ".", "u_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"u_idx\"", ")", "\n", "self", ".", "v_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"v_idx\"", ")", "\n", "self", ".", "r", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"rating\"", ")", "\n", "self", ".", "user_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'U'", ")", "\n", "self", ".", "item_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_items", ",", "self", ".", "emb_size", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'V'", ")", "\n", "self", ".", "batch_user_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_embeddings", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "batch_pos_item_emb", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_embeddings", ",", "self", ".", "v_idx", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pairwise": [[29, 53], ["random.shuffle", "list", "enumerate", "deepRecommender.DeepRecommender.data.item.keys", "i_idx.append", "u_idx.append", "random.choice", "j_idx.append", "random.choice", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys"], ["", "def", "next_batch_pairwise", "(", "self", ")", ":", "\n", "        ", "shuffle", "(", "self", ".", "data", ".", "trainingData", ")", "\n", "batch_id", "=", "0", "\n", "while", "batch_id", "<", "self", ".", "train_size", ":", "\n", "            ", "if", "batch_id", "+", "self", ".", "batch_size", "<=", "self", ".", "train_size", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "batch_id", "+=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "batch_id", "=", "self", ".", "train_size", "\n", "\n", "", "u_idx", ",", "i_idx", ",", "j_idx", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "item_list", "=", "list", "(", "self", ".", "data", ".", "item", ".", "keys", "(", ")", ")", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "users", ")", ":", "\n", "                ", "i_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "items", "[", "i", "]", "]", ")", "\n", "u_idx", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "neg_item", "=", "choice", "(", "item_list", ")", "\n", "while", "neg_item", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                    ", "neg_item", "=", "choice", "(", "item_list", ")", "\n", "", "j_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "neg_item", "]", ")", "\n", "\n", "", "yield", "u_idx", ",", "i_idx", ",", "j_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.next_batch_pointwise": [[54, 78], ["enumerate", "i_idx.append", "u_idx.append", "y.append", "range", "random.randint", "u_idx.append", "i_idx.append", "y.append", "range", "range", "range", "range", "random.randint"], "methods", ["None"], ["", "", "def", "next_batch_pointwise", "(", "self", ")", ":", "\n", "        ", "batch_id", "=", "0", "\n", "while", "batch_id", "<", "self", ".", "train_size", ":", "\n", "            ", "if", "batch_id", "+", "self", ".", "batch_size", "<=", "self", ".", "train_size", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "batch_size", "+", "batch_id", ")", "]", "\n", "batch_id", "+=", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "                ", "users", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "0", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "items", "=", "[", "self", ".", "data", ".", "trainingData", "[", "idx", "]", "[", "1", "]", "for", "idx", "in", "range", "(", "batch_id", ",", "self", ".", "train_size", ")", "]", "\n", "batch_id", "=", "self", ".", "train_size", "\n", "", "u_idx", ",", "i_idx", ",", "y", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "users", ")", ":", "\n", "                ", "i_idx", ".", "append", "(", "self", ".", "data", ".", "item", "[", "items", "[", "i", "]", "]", ")", "\n", "u_idx", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "y", ".", "append", "(", "1", ")", "\n", "for", "instance", "in", "range", "(", "4", ")", ":", "\n", "                    ", "item_j", "=", "randint", "(", "0", ",", "self", ".", "num_items", "-", "1", ")", "\n", "while", "self", ".", "data", ".", "id2item", "[", "item_j", "]", "in", "self", ".", "data", ".", "trainSet_u", "[", "user", "]", ":", "\n", "                        ", "item_j", "=", "randint", "(", "0", ",", "self", ".", "num_items", "-", "1", ")", "\n", "", "u_idx", ".", "append", "(", "self", ".", "data", ".", "user", "[", "user", "]", ")", "\n", "i_idx", ".", "append", "(", "item_j", ")", "\n", "y", ".", "append", "(", "0", ")", "\n", "", "", "yield", "u_idx", ",", "i_idx", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.deepRecommender.DeepRecommender.predictForRanking": [[79, 82], ["None"], "methods", ["None"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'used to rank all the items for the user'", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.__init__": [[7, 9], ["base.deepRecommender.DeepRecommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "GraphRecommender", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_joint_sparse_adjaceny": [[10, 30], ["numpy.array", "numpy.array", "numpy.ones_like", "scipy.csr_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "sp.diags.dot.dot", "adj_mat.sum", "numpy.power", "numpy.isinf"], "methods", ["None"], ["", "def", "create_joint_sparse_adjaceny", "(", "self", ")", ":", "\n", "        ", "'''\n        return a sparse adjacency matrix with the shape (user number + item number, user number + item number)\n        '''", "\n", "n_nodes", "=", "self", ".", "num_users", "+", "self", ".", "num_items", "\n", "row_idx", "=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "for", "pair", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "col_idx", "=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "for", "pair", "in", "self", ".", "data", ".", "trainingData", "]", "\n", "user_np", "=", "np", ".", "array", "(", "row_idx", ")", "\n", "item_np", "=", "np", ".", "array", "(", "col_idx", ")", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "item_np", "+", "self", ".", "num_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "adj_mat", "=", "tmp_adj", "+", "tmp_adj", ".", "T", "\n", "# pre adjcency matrix", "\n", "rowsum", "=", "np", ".", "array", "(", "adj_mat", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj_tmp", "=", "d_mat_inv", ".", "dot", "(", "adj_mat", ")", "\n", "adj_matrix", "=", "norm_adj_tmp", ".", "dot", "(", "d_mat_inv", ")", "\n", "return", "adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_joint_sparse_adj_tensor": [[31, 40], ["graphRecommender.GraphRecommender.create_joint_sparse_adjaceny", "graphRecommender.GraphRecommender.nonzero", "numpy.array", "tensorflow.SparseTensor", "list", "zip"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_joint_sparse_adjaceny"], ["", "def", "create_joint_sparse_adj_tensor", "(", "self", ")", ":", "\n", "        ", "'''\n        return a sparse tensor with the shape (user number + item number, user number + item number)\n        '''", "\n", "norm_adj", "=", "self", ".", "create_joint_sparse_adjaceny", "(", ")", "\n", "row", ",", "col", "=", "norm_adj", ".", "nonzero", "(", ")", "\n", "indices", "=", "np", ".", "array", "(", "list", "(", "zip", "(", "row", ",", "col", ")", ")", ")", "\n", "adj_tensor", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "indices", ",", "values", "=", "norm_adj", ".", "data", ",", "dense_shape", "=", "norm_adj", ".", "shape", ")", "\n", "return", "adj_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_sparse_rating_matrix": [[41, 52], ["scipy.coo_matrix", "len"], "methods", ["None"], ["", "def", "create_sparse_rating_matrix", "(", "self", ")", ":", "\n", "        ", "'''\n        return a sparse adjacency matrix with the shape (user number, item number)\n        '''", "\n", "row", ",", "col", ",", "entries", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "pair", "in", "self", ".", "data", ".", "trainingData", ":", "\n", "            ", "row", "+=", "[", "self", ".", "data", ".", "user", "[", "pair", "[", "0", "]", "]", "]", "\n", "col", "+=", "[", "self", ".", "data", ".", "item", "[", "pair", "[", "1", "]", "]", "]", "\n", "entries", "+=", "[", "1.0", "/", "len", "(", "self", ".", "data", ".", "trainSet_u", "[", "pair", "[", "0", "]", "]", ")", "]", "\n", "", "ratingMat", "=", "sp", ".", "coo_matrix", "(", "(", "entries", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "ratingMat", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_sparse_adj_tensor": [[53, 62], ["graphRecommender.GraphRecommender.create_sparse_rating_matrix", "graphRecommender.GraphRecommender.nonzero", "numpy.array", "tensorflow.SparseTensor", "list", "zip"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.graphRecommender.GraphRecommender.create_sparse_rating_matrix"], ["", "def", "create_sparse_adj_tensor", "(", "self", ")", ":", "\n", "        ", "'''\n        return a sparse tensor with the shape (user number, item number)\n        '''", "\n", "ratingMat", "=", "self", ".", "create_sparse_rating_matrix", "(", ")", "\n", "row", ",", "col", "=", "ratingMat", ".", "nonzero", "(", ")", "\n", "indices", "=", "np", ".", "array", "(", "list", "(", "zip", "(", "row", ",", "col", ")", ")", ")", "\n", "adj_tensor", "=", "tf", ".", "SparseTensor", "(", "indices", "=", "indices", ",", "values", "=", "ratingMat", ".", "data", ",", "dense_shape", "=", "ratingMat", ".", "shape", ")", "\n", "return", "adj_tensor", "", "", "", ""]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.__init__": [[15, 29], ["data.rating.Rating", "util.config.OptionConf", "recommender.Recommender.data.trainingSize"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "self", ".", "config", "=", "conf", "\n", "self", ".", "data", "=", "None", "\n", "self", ".", "isSaveModel", "=", "False", "\n", "self", ".", "ranking", "=", "None", "\n", "self", ".", "isLoadModel", "=", "False", "\n", "self", ".", "output", "=", "None", "\n", "self", ".", "isOutput", "=", "True", "\n", "self", ".", "data", "=", "Rating", "(", "self", ".", "config", ",", "trainingSet", ",", "testSet", ")", "\n", "self", ".", "foldInfo", "=", "fold", "\n", "self", ".", "evalSettings", "=", "OptionConf", "(", "self", ".", "config", "[", "'evaluation.setup'", "]", ")", "\n", "self", ".", "measure", "=", "[", "]", "\n", "self", ".", "recOutput", "=", "[", "]", "\n", "self", ".", "num_users", ",", "self", ".", "num_items", ",", "self", ".", "train_size", "=", "self", ".", "data", ".", "trainingSize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.initializing_log": [[30, 37], ["time.time.strftime", "util.log.Log", "recommender.Recommender.log.add", "time.time.localtime", "recommender.Recommender.log.add", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add"], ["", "def", "initializing_log", "(", "self", ")", ":", "\n", "        ", "currentTime", "=", "strftime", "(", "\"%Y-%m-%d %H-%M-%S\"", ",", "localtime", "(", "time", "(", ")", ")", ")", "\n", "self", ".", "log", "=", "Log", "(", "self", ".", "modelName", ",", "self", ".", "modelName", "+", "self", ".", "foldInfo", "+", "' '", "+", "currentTime", ")", "\n", "#save configuration", "\n", "self", ".", "log", ".", "add", "(", "'### model configuration ###'", ")", "\n", "for", "k", "in", "self", ".", "config", ".", "config", ":", "\n", "            ", "self", ".", "log", ".", "add", "(", "k", "+", "'='", "+", "self", ".", "config", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.readConfiguration": [[38, 43], ["util.config.OptionConf", "recommender.Recommender.output.isMainOn", "util.config.OptionConf"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.isMainOn"], ["", "", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "self", ".", "modelName", "=", "self", ".", "config", "[", "'model.name'", "]", "\n", "self", ".", "output", "=", "OptionConf", "(", "self", ".", "config", "[", "'output.setup'", "]", ")", "\n", "self", ".", "isOutput", "=", "self", ".", "output", ".", "isMainOn", "(", ")", "\n", "self", ".", "ranking", "=", "OptionConf", "(", "self", ".", "config", "[", "'item.ranking'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.printAlgorConfig": [[44, 62], ["print", "print", "util.config.OptionConf().contains", "print", "print", "print", "recommender.Recommender.config.contains", "os.path.abspath", "print", "util.config.OptionConf", "util.config.OptionConf.keys", "print", "print", "util.config.OptionConf", "os.path.abspath", "recommender.Recommender.data.trainingSize", "recommender.Recommender.data.testSize", "util.config.OptionConf"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.keys", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.trainingSize", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.testSize"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "\"show model's configuration\"", "\n", "print", "(", "'Model:'", ",", "self", ".", "config", "[", "'model.name'", "]", ")", "\n", "print", "(", "'Ratings dataset:'", ",", "abspath", "(", "self", ".", "config", "[", "'ratings'", "]", ")", ")", "\n", "if", "OptionConf", "(", "self", ".", "config", "[", "'evaluation.setup'", "]", ")", ".", "contains", "(", "'-testSet'", ")", ":", "\n", "            ", "print", "(", "'Test set:'", ",", "abspath", "(", "OptionConf", "(", "self", ".", "config", "[", "'evaluation.setup'", "]", ")", "[", "'-testSet'", "]", ")", ")", "\n", "#print dataset statistics", "\n", "", "print", "(", "'Training set size: (user count: %d, item count %d, record count: %d)'", "%", "(", "self", ".", "data", ".", "trainingSize", "(", ")", ")", ")", "\n", "print", "(", "'Test set size: (user count: %d, item count %d, record count: %d)'", "%", "(", "self", ".", "data", ".", "testSize", "(", ")", ")", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "#print specific parameters if applicable", "\n", "if", "self", ".", "config", ".", "contains", "(", "self", ".", "config", "[", "'model.name'", "]", ")", ":", "\n", "            ", "parStr", "=", "''", "\n", "args", "=", "OptionConf", "(", "self", ".", "config", "[", "self", ".", "config", "[", "'model.name'", "]", "]", ")", "\n", "for", "key", "in", "args", ".", "keys", "(", ")", ":", "\n", "                ", "parStr", "+=", "key", "[", "1", ":", "]", "+", "':'", "+", "args", "[", "key", "]", "+", "'  '", "\n", "", "print", "(", "'Specific parameters:'", ",", "parStr", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.initModel": [[63, 65], ["None"], "methods", ["None"], ["", "", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.trainModel": [[66, 69], ["None"], "methods", ["None"], ["", "def", "trainModel", "(", "self", ")", ":", "\n", "        ", "'build the model (for model-based Models )'", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.trainModel_tf": [[70, 73], ["None"], "methods", ["None"], ["", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "        ", "'training model on tensorflow'", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.saveModel": [[74, 76], ["None"], "methods", ["None"], ["", "def", "saveModel", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.loadModel": [[77, 79], ["None"], "methods", ["None"], ["", "def", "loadModel", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.predictForRating": [[81, 83], ["None"], "methods", ["None"], ["", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.predictForRanking": [[85, 87], ["None"], "methods", ["None"], ["", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.checkRatingBoundary": [[88, 95], ["round"], "methods", ["None"], ["", "def", "checkRatingBoundary", "(", "self", ",", "prediction", ")", ":", "\n", "        ", "if", "prediction", ">", "self", ".", "data", ".", "rScale", "[", "-", "1", "]", ":", "\n", "            ", "return", "self", ".", "data", ".", "rScale", "[", "-", "1", "]", "\n", "", "elif", "prediction", "<", "self", ".", "data", ".", "rScale", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "data", ".", "rScale", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "round", "(", "prediction", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.evalRatings": [[96, 126], ["list", "list.append", "enumerate", "time.time.strftime", "util.measure.Measure.ratingMeasure", "util.io.FileIO.writeFile", "recommender.Recommender.log.add", "recommender.Recommender.log.add", "print", "recommender.Recommender.predictForRating", "recommender.Recommender.checkRatingBoundary", "recommender.Recommender.data.testData[].append", "list.append", "time.time.localtime", "util.io.FileIO.writeFile", "print", "time.time.time", "os.path.abspath", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.ratingMeasure", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.writeFile", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.checkRatingBoundary", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.writeFile"], ["", "", "def", "evalRatings", "(", "self", ")", ":", "\n", "        ", "res", "=", "list", "(", ")", "#used to contain the text of the result", "\n", "res", ".", "append", "(", "'userId  itemId  original  prediction\\n'", ")", "\n", "#predict", "\n", "for", "ind", ",", "entry", "in", "enumerate", "(", "self", ".", "data", ".", "testData", ")", ":", "\n", "            ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "#predict", "\n", "prediction", "=", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "#denormalize", "\n", "#prediction = denormalize(prediction,self.data.rScale[-1],self.data.rScale[0])", "\n", "#####################################", "\n", "pred", "=", "self", ".", "checkRatingBoundary", "(", "prediction", ")", "\n", "# add prediction in order to measure", "\n", "self", ".", "data", ".", "testData", "[", "ind", "]", ".", "append", "(", "pred", ")", "\n", "res", ".", "append", "(", "user", "+", "' '", "+", "item", "+", "' '", "+", "str", "(", "rating", ")", "+", "' '", "+", "str", "(", "pred", ")", "+", "'\\n'", ")", "\n", "", "currentTime", "=", "strftime", "(", "\"%Y-%m-%d %H-%M-%S\"", ",", "localtime", "(", "time", "(", ")", ")", ")", "\n", "#output prediction result", "\n", "if", "self", ".", "isOutput", ":", "\n", "            ", "outDir", "=", "self", ".", "output", "[", "'-dir'", "]", "\n", "fileName", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "'@'", "+", "currentTime", "+", "'-rating-predictions'", "+", "self", ".", "foldInfo", "+", "'.txt'", "\n", "FileIO", ".", "writeFile", "(", "outDir", ",", "fileName", ",", "res", ")", "\n", "print", "(", "'The result has been output to '", ",", "abspath", "(", "outDir", ")", ",", "'.'", ")", "\n", "#output evaluation result", "\n", "", "outDir", "=", "self", ".", "output", "[", "'-dir'", "]", "\n", "fileName", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "'@'", "+", "currentTime", "+", "'-measure'", "+", "self", ".", "foldInfo", "+", "'.txt'", "\n", "self", ".", "measure", "=", "Measure", ".", "ratingMeasure", "(", "self", ".", "data", ".", "testData", ")", "\n", "FileIO", ".", "writeFile", "(", "outDir", ",", "fileName", ",", "self", ".", "measure", ")", "\n", "self", ".", "log", ".", "add", "(", "'###Evaluation Results###'", ")", "\n", "self", ".", "log", ".", "add", "(", "self", ".", "measure", ")", "\n", "print", "(", "'The result of %s %s:\\n%s'", "%", "(", "self", ".", "modelName", ",", "self", ".", "foldInfo", ",", "''", ".", "join", "(", "self", ".", "measure", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.evalRanking": [[127, 180], ["recommender.Recommender.ranking.contains", "recommender.Recommender.recOutput.append", "len", "enumerate", "time.time.strftime", "recommender.Recommender.evalSettings.contains", "util.measure.Measure.rankingMeasure", "recommender.Recommender.log.add", "recommender.Recommender.log.add", "util.io.FileIO.writeFile", "print", "recommender.Recommender.ranking[].split", "max", "print", "exit", "recommender.Recommender.predictForRanking", "recommender.Recommender.data.userRated", "util.qmath.find_k_largest", "list", "recommender.Recommender.recOutput.append", "time.time.localtime", "util.io.FileIO.writeFile", "print", "exit", "int", "print", "zip", "print", "time.time.time", "os.path.abspath", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.rankingMeasure", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.log.Log.add", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.writeFile", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRanking", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.find_k_largest", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.io.FileIO.writeFile"], ["", "def", "evalRanking", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ranking", ".", "contains", "(", "'-topN'", ")", ":", "\n", "            ", "top", "=", "self", ".", "ranking", "[", "'-topN'", "]", ".", "split", "(", "','", ")", "\n", "top", "=", "[", "int", "(", "num", ")", "for", "num", "in", "top", "]", "\n", "N", "=", "max", "(", "top", ")", "\n", "if", "N", ">", "100", "or", "N", "<", "1", ":", "\n", "                ", "print", "(", "'N can not be larger than 100! It has been reassigned to 10'", ")", "\n", "N", "=", "10", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'No correct evaluation metric is specified!'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "self", ".", "recOutput", ".", "append", "(", "'userId: recommendations in (itemId, ranking score) pairs, * means the item matches.\\n'", ")", "\n", "# predict", "\n", "recList", "=", "{", "}", "\n", "userCount", "=", "len", "(", "self", ".", "data", ".", "testSet_u", ")", "\n", "#rawRes = {}", "\n", "for", "i", ",", "user", "in", "enumerate", "(", "self", ".", "data", ".", "testSet_u", ")", ":", "\n", "            ", "line", "=", "user", "+", "':'", "\n", "candidates", "=", "self", ".", "predictForRanking", "(", "user", ")", "\n", "# predictedItems = denormalize(predictedItems, self.data.rScale[-1], self.data.rScale[0])", "\n", "ratedList", ",", "ratingList", "=", "self", ".", "data", ".", "userRated", "(", "user", ")", "\n", "for", "item", "in", "ratedList", ":", "\n", "                ", "candidates", "[", "self", ".", "data", ".", "item", "[", "item", "]", "]", "=", "0", "\n", "", "ids", ",", "scores", "=", "find_k_largest", "(", "N", ",", "candidates", ")", "\n", "item_names", "=", "[", "self", ".", "data", ".", "id2item", "[", "iid", "]", "for", "iid", "in", "ids", "]", "\n", "recList", "[", "user", "]", "=", "list", "(", "zip", "(", "item_names", ",", "scores", ")", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "self", ".", "modelName", ",", "self", ".", "foldInfo", ",", "'progress:'", "+", "str", "(", "i", ")", "+", "'/'", "+", "str", "(", "userCount", ")", ")", "\n", "", "for", "item", "in", "recList", "[", "user", "]", ":", "\n", "                ", "line", "+=", "' ('", "+", "item", "[", "0", "]", "+", "','", "+", "str", "(", "item", "[", "1", "]", ")", "+", "')'", "\n", "if", "item", "[", "0", "]", "in", "self", ".", "data", ".", "testSet_u", "[", "user", "]", ":", "\n", "                    ", "line", "+=", "'*'", "\n", "", "", "line", "+=", "'\\n'", "\n", "self", ".", "recOutput", ".", "append", "(", "line", ")", "\n", "", "currentTime", "=", "strftime", "(", "\"%Y-%m-%d %H-%M-%S\"", ",", "localtime", "(", "time", "(", ")", ")", ")", "\n", "# output prediction result", "\n", "if", "self", ".", "isOutput", ":", "\n", "            ", "outDir", "=", "self", ".", "output", "[", "'-dir'", "]", "\n", "fileName", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "'@'", "+", "currentTime", "+", "'-top-'", "+", "str", "(", "\n", "N", ")", "+", "'items'", "+", "self", ".", "foldInfo", "+", "'.txt'", "\n", "FileIO", ".", "writeFile", "(", "outDir", ",", "fileName", ",", "self", ".", "recOutput", ")", "\n", "print", "(", "'The result has been output to '", ",", "abspath", "(", "outDir", ")", ",", "'.'", ")", "\n", "# output evaluation result", "\n", "", "if", "self", ".", "evalSettings", ".", "contains", "(", "'-predict'", ")", ":", "\n", "#no evalutation", "\n", "            ", "exit", "(", "0", ")", "\n", "", "outDir", "=", "self", ".", "output", "[", "'-dir'", "]", "\n", "fileName", "=", "self", ".", "config", "[", "'model.name'", "]", "+", "'@'", "+", "currentTime", "+", "'-measure'", "+", "self", ".", "foldInfo", "+", "'.txt'", "\n", "self", ".", "measure", "=", "Measure", ".", "rankingMeasure", "(", "self", ".", "data", ".", "testSet_u", ",", "recList", ",", "top", ")", "\n", "self", ".", "log", ".", "add", "(", "'###Evaluation Results###'", ")", "\n", "self", ".", "log", ".", "add", "(", "self", ".", "measure", ")", "\n", "FileIO", ".", "writeFile", "(", "outDir", ",", "fileName", ",", "self", ".", "measure", ")", "\n", "print", "(", "'The result of %s %s:\\n%s'", "%", "(", "self", ".", "modelName", ",", "self", ".", "foldInfo", ",", "''", ".", "join", "(", "self", ".", "measure", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.execute": [[181, 213], ["recommender.Recommender.readConfiguration", "recommender.Recommender.initializing_log", "print", "recommender.Recommender.ranking.isMainOn", "recommender.Recommender.printAlgorConfig", "print", "recommender.Recommender.loadModel", "print", "recommender.Recommender.initModel", "print", "recommender.Recommender.evalRanking", "recommender.Recommender.evalRatings", "print", "recommender.Recommender.saveModel", "recommender.Recommender.evalSettings.contains", "recommender.Recommender.trainModel_tf", "recommender.Recommender.trainModel", "recommender.Recommender.trainModel"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.initializing_log", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.isMainOn", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.loadModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.evalRanking", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.evalRatings", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.saveModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.trainModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.trainModel"], ["", "def", "execute", "(", "self", ")", ":", "\n", "        ", "self", ".", "readConfiguration", "(", ")", "\n", "self", ".", "initializing_log", "(", ")", "\n", "if", "self", ".", "foldInfo", "==", "'[1]'", ":", "\n", "            ", "self", ".", "printAlgorConfig", "(", ")", "\n", "#load model from disk or build model", "\n", "", "if", "self", ".", "isLoadModel", ":", "\n", "            ", "print", "(", "'Loading model %s...'", "%", "self", ".", "foldInfo", ")", "\n", "self", ".", "loadModel", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Initializing model %s...'", "%", "self", ".", "foldInfo", ")", "\n", "self", ".", "initModel", "(", ")", "\n", "print", "(", "'Building Model %s...'", "%", "self", ".", "foldInfo", ")", "\n", "try", ":", "\n", "                ", "if", "self", ".", "evalSettings", ".", "contains", "(", "'-tf'", ")", ":", "\n", "                    ", "import", "tensorflow", "\n", "self", ".", "trainModel_tf", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "trainModel", "(", ")", "\n", "", "", "except", "ImportError", ":", "\n", "                ", "self", ".", "trainModel", "(", ")", "\n", "#rating prediction or item ranking", "\n", "", "", "print", "(", "'Predicting %s...'", "%", "self", ".", "foldInfo", ")", "\n", "if", "self", ".", "ranking", ".", "isMainOn", "(", ")", ":", "\n", "            ", "self", ".", "evalRanking", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "evalRatings", "(", ")", "\n", "#save model", "\n", "", "if", "self", ".", "isSaveModel", ":", "\n", "            ", "print", "(", "'Saving model %s...'", "%", "self", ".", "foldInfo", ")", "\n", "self", ".", "saveModel", "(", ")", "\n", "", "return", "self", ".", "measure", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.socialRecommender.SocialRecommender.__init__": [[6, 42], ["base.iterativeRecommender.IterativeRecommender.__init__", "data.social.Social", "enumerate", "reversed", "cleanList.append", "cleanList.append", "idx.append", "cleanPair.append", "cleanPair.append"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", ",", "testSet", ",", "relation", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "SocialRecommender", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "self", ".", "social", "=", "Social", "(", "self", ".", "config", ",", "relation", ")", "#social relations access control", "\n", "# data clean", "\n", "cleanList", "=", "[", "]", "\n", "cleanPair", "=", "[", "]", "\n", "for", "user", "in", "self", ".", "social", ".", "followees", ":", "\n", "            ", "if", "user", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                ", "cleanList", ".", "append", "(", "user", ")", "\n", "", "for", "u2", "in", "self", ".", "social", ".", "followees", "[", "user", "]", ":", "\n", "                ", "if", "u2", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                    ", "cleanPair", ".", "append", "(", "(", "user", ",", "u2", ")", ")", "\n", "", "", "", "for", "u", "in", "cleanList", ":", "\n", "            ", "del", "self", ".", "social", ".", "followees", "[", "u", "]", "\n", "", "for", "pair", "in", "cleanPair", ":", "\n", "            ", "if", "pair", "[", "0", "]", "in", "self", ".", "social", ".", "followees", ":", "\n", "                ", "del", "self", ".", "social", ".", "followees", "[", "pair", "[", "0", "]", "]", "[", "pair", "[", "1", "]", "]", "\n", "", "", "cleanList", "=", "[", "]", "\n", "cleanPair", "=", "[", "]", "\n", "for", "user", "in", "self", ".", "social", ".", "followers", ":", "\n", "            ", "if", "user", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                ", "cleanList", ".", "append", "(", "user", ")", "\n", "", "for", "u2", "in", "self", ".", "social", ".", "followers", "[", "user", "]", ":", "\n", "                ", "if", "u2", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                    ", "cleanPair", ".", "append", "(", "(", "user", ",", "u2", ")", ")", "\n", "", "", "", "for", "u", "in", "cleanList", ":", "\n", "            ", "del", "self", ".", "social", ".", "followers", "[", "u", "]", "\n", "", "for", "pair", "in", "cleanPair", ":", "\n", "            ", "if", "pair", "[", "0", "]", "in", "self", ".", "social", ".", "followers", ":", "\n", "                ", "del", "self", ".", "social", ".", "followers", "[", "pair", "[", "0", "]", "]", "[", "pair", "[", "1", "]", "]", "\n", "", "", "idx", "=", "[", "]", "\n", "for", "n", ",", "pair", "in", "enumerate", "(", "self", ".", "social", ".", "relation", ")", ":", "\n", "            ", "if", "pair", "[", "0", "]", "not", "in", "self", ".", "data", ".", "user", "or", "pair", "[", "1", "]", "not", "in", "self", ".", "data", ".", "user", ":", "\n", "                ", "idx", ".", "append", "(", "n", ")", "\n", "", "", "for", "item", "in", "reversed", "(", "idx", ")", ":", "\n", "            ", "del", "self", ".", "social", ".", "relation", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.socialRecommender.SocialRecommender.readConfiguration": [[43, 47], ["super().readConfiguration", "util.config.OptionConf", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration"], ["", "", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "SocialRecommender", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "regular", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'reg.lambda'", "]", ")", "\n", "self", ".", "regS", "=", "float", "(", "regular", "[", "'-s'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.socialRecommender.SocialRecommender.printAlgorConfig": [[48, 54], ["super().printAlgorConfig", "print", "print", "print", "print", "os.path.abspath", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "SocialRecommender", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Social dataset:'", ",", "abspath", "(", "self", ".", "config", "[", "'social'", "]", ")", ")", "\n", "print", "(", "'Social relation size '", ",", "'(User count:'", ",", "len", "(", "self", ".", "social", ".", "user", ")", ",", "'Relation count:'", "+", "str", "(", "len", "(", "self", ".", "social", ".", "relation", ")", ")", "+", "')'", ")", "\n", "print", "(", "'Social Regularization parameter: regS %.3f'", "%", "(", "self", ".", "regS", ")", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__": [[8, 12], ["base.recommender.Recommender.__init__"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.__init__"], ["    ", "def", "__init__", "(", "self", ",", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", "=", "'[1]'", ")", ":", "\n", "        ", "super", "(", "IterativeRecommender", ",", "self", ")", ".", "__init__", "(", "conf", ",", "trainingSet", ",", "testSet", ",", "fold", ")", "\n", "self", ".", "bestPerformance", "=", "[", "]", "\n", "self", ".", "earlyStop", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration": [[13, 28], ["super().readConfiguration", "int", "int", "util.config.OptionConf", "float", "float", "iterativeRecommender.IterativeRecommender.evalSettings.contains", "util.config.OptionConf", "int", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.readConfiguration", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.contains"], ["", "def", "readConfiguration", "(", "self", ")", ":", "\n", "        ", "super", "(", "IterativeRecommender", ",", "self", ")", ".", "readConfiguration", "(", ")", "\n", "# set the reduced dimension", "\n", "self", ".", "emb_size", "=", "int", "(", "self", ".", "config", "[", "'num.factors'", "]", ")", "\n", "# set maximum epoch", "\n", "self", ".", "maxEpoch", "=", "int", "(", "self", ".", "config", "[", "'num.max.epoch'", "]", ")", "\n", "# set learning rate", "\n", "learningRate", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'learnRate'", "]", ")", "\n", "self", ".", "lRate", "=", "float", "(", "learningRate", "[", "'-init'", "]", ")", "\n", "self", ".", "maxLRate", "=", "float", "(", "learningRate", "[", "'-max'", "]", ")", "\n", "if", "self", ".", "evalSettings", ".", "contains", "(", "'-tf'", ")", ":", "\n", "            ", "self", ".", "batch_size", "=", "int", "(", "self", ".", "config", "[", "'batch_size'", "]", ")", "\n", "# regularization parameter", "\n", "", "regular", "=", "config", ".", "OptionConf", "(", "self", ".", "config", "[", "'reg.lambda'", "]", ")", "\n", "self", ".", "regU", ",", "self", ".", "regI", ",", "self", ".", "regB", "=", "float", "(", "regular", "[", "'-u'", "]", ")", ",", "float", "(", "regular", "[", "'-i'", "]", ")", ",", "float", "(", "regular", "[", "'-b'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig": [[29, 35], ["super().printAlgorConfig", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.printAlgorConfig"], ["", "def", "printAlgorConfig", "(", "self", ")", ":", "\n", "        ", "super", "(", "IterativeRecommender", ",", "self", ")", ".", "printAlgorConfig", "(", ")", "\n", "print", "(", "'Embedding Dimension:'", ",", "self", ".", "emb_size", ")", "\n", "print", "(", "'Maximum Epoch:'", ",", "self", ".", "maxEpoch", ")", "\n", "print", "(", "'Regularization parameter: regU %.3f, regI %.3f, regB %.3f'", "%", "(", "self", ".", "regU", ",", "self", ".", "regI", ",", "self", ".", "regB", ")", ")", "\n", "print", "(", "'='", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.initModel": [[36, 40], ["numpy.random.rand", "numpy.random.rand", "len", "len"], "methods", ["None"], ["", "def", "initModel", "(", "self", ")", ":", "\n", "        ", "self", ".", "P", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "self", ".", "data", ".", "user", ")", ",", "self", ".", "emb_size", ")", "/", "3", "# latent user matrix", "\n", "self", ".", "Q", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "self", ".", "data", ".", "item", ")", ",", "self", ".", "emb_size", ")", "/", "3", "# latent item matrix", "\n", "self", ".", "loss", ",", "self", ".", "lastLoss", "=", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.trainModel_tf": [[41, 55], ["tf.placeholder", "tf.placeholder", "tf.placeholder", "tf.Variable", "tf.Variable", "tf.Variable", "tf.Variable", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.nn.embedding_lookup", "tf.truncated_normal", "tf.truncated_normal", "tf.truncated_normal", "tf.truncated_normal"], "methods", ["None"], ["", "def", "trainModel_tf", "(", "self", ")", ":", "\n", "# initialization", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "self", ".", "u_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "\"u_idx\"", ")", "\n", "self", ".", "v_idx", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "\"v_idx\"", ")", "\n", "self", ".", "r", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"rating\"", ")", "\n", "self", ".", "U", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_users", ",", "self", ".", "emb_size", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'U'", ")", "\n", "self", ".", "V", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_items", ",", "self", ".", "emb_size", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'V'", ")", "\n", "self", ".", "user_biases", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_users", ",", "1", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'U'", ")", "\n", "self", ".", "item_biases", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "shape", "=", "[", "self", ".", "num_items", ",", "1", "]", ",", "stddev", "=", "0.005", ")", ",", "name", "=", "'U'", ")", "\n", "self", ".", "user_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "user_biases", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "item_bias", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "item_biases", ",", "self", ".", "v_idx", ")", "\n", "self", ".", "user_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "U", ",", "self", ".", "u_idx", ")", "\n", "self", ".", "item_embedding", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "V", ",", "self", ".", "v_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.updateLearningRate": [[56, 64], ["abs", "abs"], "methods", ["None"], ["", "def", "updateLearningRate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "1", ":", "\n", "            ", "if", "abs", "(", "self", ".", "lastLoss", ")", ">", "abs", "(", "self", ".", "loss", ")", ":", "\n", "                ", "self", ".", "lRate", "*=", "1.05", "\n", "", "else", ":", "\n", "                ", "self", ".", "lRate", "*=", "0.5", "\n", "", "", "if", "self", ".", "lRate", ">", "self", ".", "maxLRate", ">", "0", ":", "\n", "            ", "self", ".", "lRate", "=", "self", ".", "maxLRate", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating": [[65, 74], ["iterativeRecommender.IterativeRecommender.data.containsUser", "iterativeRecommender.IterativeRecommender.data.containsItem", "iterativeRecommender.IterativeRecommender.P[].dot", "iterativeRecommender.IterativeRecommender.data.containsUser", "iterativeRecommender.IterativeRecommender.data.containsItem", "iterativeRecommender.IterativeRecommender.data.containsItem", "iterativeRecommender.IterativeRecommender.data.containsUser"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsItem", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "", "def", "predictForRating", "(", "self", ",", "u", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "return", "self", ".", "P", "[", "self", ".", "data", ".", "user", "[", "u", "]", "]", ".", "dot", "(", "self", ".", "Q", "[", "self", ".", "data", ".", "item", "[", "i", "]", "]", ")", "\n", "", "elif", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "not", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "userMeans", "[", "u", "]", "\n", "", "elif", "not", "self", ".", "data", ".", "containsUser", "(", "u", ")", "and", "self", ".", "data", ".", "containsItem", "(", "i", ")", ":", "\n", "            ", "return", "self", ".", "data", ".", "itemMeans", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", ".", "globalMean", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRanking": [[75, 81], ["iterativeRecommender.IterativeRecommender.data.containsUser", "iterativeRecommender.IterativeRecommender.Q.dot"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.containsUser"], ["", "", "def", "predictForRanking", "(", "self", ",", "u", ")", ":", "\n", "        ", "'used to rank all the items for the user'", "\n", "if", "self", ".", "data", ".", "containsUser", "(", "u", ")", ":", "\n", "            ", "return", "self", ".", "Q", ".", "dot", "(", "self", ".", "P", "[", "self", ".", "data", ".", "user", "[", "u", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "data", ".", "globalMean", "]", "*", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.isConverged": [[82, 103], ["isnan", "iterativeRecommender.IterativeRecommender.ranking.isMainOn", "random.shuffle", "print", "exit", "print", "iterativeRecommender.IterativeRecommender.rating_performance", "print", "abs", "iterativeRecommender.IterativeRecommender.updateLearningRate", "measure[].strip", "measure[].strip"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.config.OptionConf.isMainOn", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.rating_performance", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.updateLearningRate"], ["", "", "def", "isConverged", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "from", "math", "import", "isnan", "\n", "if", "isnan", "(", "self", ".", "loss", ")", ":", "\n", "            ", "print", "(", "'Loss = NaN or Infinity: current settings does not fit the recommender! Change the settings and try again!'", ")", "\n", "exit", "(", "-", "1", ")", "\n", "", "deltaLoss", "=", "(", "self", ".", "lastLoss", "-", "self", ".", "loss", ")", "\n", "if", "self", ".", "ranking", ".", "isMainOn", "(", ")", ":", "\n", "            ", "print", "(", "'%s %s epoch %d: loss = %.4f, delta_loss = %.5f learning_Rate = %.5f'", "%", "(", "self", ".", "modelName", ",", "self", ".", "foldInfo", ",", "epoch", ",", "self", ".", "loss", ",", "deltaLoss", ",", "self", ".", "lRate", ")", ")", "\n", "", "else", ":", "\n", "            ", "measure", "=", "self", ".", "rating_performance", "(", ")", "\n", "print", "(", "'%s %s epoch %d: loss = %.4f, delta_loss = %.5f learning_Rate = %.5f %5s %5s'", "%", "(", "self", ".", "modelName", ",", "self", ".", "foldInfo", ",", "epoch", ",", "self", ".", "loss", ",", "deltaLoss", ",", "self", ".", "lRate", ",", "measure", "[", "0", "]", ".", "strip", "(", ")", "[", ":", "11", "]", ",", "measure", "[", "1", "]", ".", "strip", "(", ")", "[", ":", "12", "]", ")", ")", "\n", "#check if converged", "\n", "", "cond", "=", "abs", "(", "deltaLoss", ")", "<", "1e-3", "\n", "converged", "=", "cond", "\n", "if", "not", "converged", ":", "\n", "            ", "self", ".", "updateLearningRate", "(", "epoch", ")", "\n", "", "self", ".", "lastLoss", "=", "self", ".", "loss", "\n", "shuffle", "(", "self", ".", "data", ".", "trainingData", ")", "\n", "return", "converged", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.rating_performance": [[104, 114], ["enumerate", "util.measure.Measure.ratingMeasure", "iterativeRecommender.IterativeRecommender.predictForRating", "iterativeRecommender.IterativeRecommender.checkRatingBoundary", "res.append"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.ratingMeasure", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRating", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.checkRatingBoundary"], ["", "def", "rating_performance", "(", "self", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "ind", ",", "entry", "in", "enumerate", "(", "self", ".", "data", ".", "testData", ")", ":", "\n", "            ", "user", ",", "item", ",", "rating", "=", "entry", "\n", "# predict", "\n", "prediction", "=", "self", ".", "predictForRating", "(", "user", ",", "item", ")", "\n", "pred", "=", "self", ".", "checkRatingBoundary", "(", "prediction", ")", "\n", "res", ".", "append", "(", "[", "user", ",", "item", ",", "rating", ",", "pred", "]", ")", "\n", "", "self", ".", "measure", "=", "Measure", ".", "ratingMeasure", "(", "res", ")", "\n", "return", "self", ".", "measure", "\n", "\n"]], "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.ranking_performance": [[115, 186], ["iterativeRecommender.IterativeRecommender.ranking[].split", "max", "print", "util.measure.Measure.rankingMeasure", "print", "print", "print", "print", "print", "print", "print", "int", "iterativeRecommender.IterativeRecommender.predictForRanking", "iterativeRecommender.IterativeRecommender.data.userRated", "util.qmath.find_k_largest", "list", "len", "iterativeRecommender.IterativeRecommender.bestPerformance.append", "iterativeRecommender.IterativeRecommender.saveModel", "m.strip", "str", "zip", "m.strip().split", "float", "iterativeRecommender.IterativeRecommender.saveModel", "m.strip().split", "float", "iterativeRecommender.IterativeRecommender.bestPerformance.append", "str", "str", "str", "str", "str", "str", "m.strip", "m.strip"], "methods", ["home.repos.pwc.inspect_result.Coder-Yu_QRec.util.measure.Measure.rankingMeasure", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.iterativeRecommender.IterativeRecommender.predictForRanking", "home.repos.pwc.inspect_result.Coder-Yu_QRec.data.rating.Rating.userRated", "home.repos.pwc.inspect_result.Coder-Yu_QRec.util.qmath.find_k_largest", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.saveModel", "home.repos.pwc.inspect_result.Coder-Yu_QRec.base.recommender.Recommender.saveModel"], ["", "def", "ranking_performance", "(", "self", ",", "epoch", ")", ":", "\n", "#evaluation during training", "\n", "        ", "top", "=", "self", ".", "ranking", "[", "'-topN'", "]", ".", "split", "(", "','", ")", "\n", "top", "=", "[", "int", "(", "num", ")", "for", "num", "in", "top", "]", "\n", "N", "=", "max", "(", "top", ")", "\n", "recList", "=", "{", "}", "\n", "print", "(", "'Evaluating...'", ")", "\n", "for", "user", "in", "self", ".", "data", ".", "testSet_u", ":", "\n", "            ", "candidates", "=", "self", ".", "predictForRanking", "(", "user", ")", "\n", "# predictedItems = denormalize(predictedItems, self.data.rScale[-1], self.data.rScale[0])", "\n", "ratedList", ",", "ratingList", "=", "self", ".", "data", ".", "userRated", "(", "user", ")", "\n", "for", "item", "in", "ratedList", ":", "\n", "                ", "candidates", "[", "self", ".", "data", ".", "item", "[", "item", "]", "]", "=", "0", "\n", "", "ids", ",", "scores", "=", "find_k_largest", "(", "N", ",", "candidates", ")", "\n", "item_names", "=", "[", "self", ".", "data", ".", "id2item", "[", "iid", "]", "for", "iid", "in", "ids", "]", "\n", "recList", "[", "user", "]", "=", "list", "(", "zip", "(", "item_names", ",", "scores", ")", ")", "\n", "", "measure", "=", "Measure", ".", "rankingMeasure", "(", "self", ".", "data", ".", "testSet_u", ",", "recList", ",", "[", "N", "]", ")", "\n", "if", "len", "(", "self", ".", "bestPerformance", ")", ">", "0", ":", "\n", "            ", "count", "=", "0", "\n", "performance", "=", "{", "}", "\n", "for", "m", "in", "measure", "[", "1", ":", "]", ":", "\n", "                ", "k", ",", "v", "=", "m", ".", "strip", "(", ")", ".", "split", "(", "':'", ")", "\n", "performance", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "", "for", "k", "in", "self", ".", "bestPerformance", "[", "1", "]", ":", "\n", "                ", "if", "self", ".", "bestPerformance", "[", "1", "]", "[", "k", "]", ">", "performance", "[", "k", "]", ":", "\n", "                    ", "count", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "count", "-=", "1", "\n", "", "", "if", "count", "<", "0", ":", "\n", "                ", "self", ".", "bestPerformance", "[", "1", "]", "=", "performance", "\n", "self", ".", "bestPerformance", "[", "0", "]", "=", "epoch", "+", "1", "\n", "self", ".", "saveModel", "(", ")", "\n", "#     self.earlyStop=0", "\n", "# else:", "\n", "#     #stop model learning if the performance has not increased for 5 successive epochs", "\n", "#     self.earlyStop += 1", "\n", "#     if self.earlyStop==5:", "\n", "#         print('Early Stop at epoch', epoch+1)", "\n", "#         bp = ''", "\n", "#         bp += 'Precision' + ':' + str(self.bestPerformance[1]['Precision']) + ' | '", "\n", "#         bp += 'Recall' + ':' + str(self.bestPerformance[1]['Recall']) + ' | '", "\n", "#         bp += 'F1' + ':' + str(self.bestPerformance[1]['F1']) + ' | '", "\n", "#         bp += 'MDCG' + ':' + str(self.bestPerformance[1]['NDCG'])", "\n", "#         print('*Best Performance* ')", "\n", "#         print('Epoch:', str(self.bestPerformance[0]) + ',', bp)", "\n", "#         exit(0)", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "bestPerformance", ".", "append", "(", "epoch", "+", "1", ")", "\n", "performance", "=", "{", "}", "\n", "for", "m", "in", "measure", "[", "1", ":", "]", ":", "\n", "                ", "k", ",", "v", "=", "m", ".", "strip", "(", ")", ".", "split", "(", "':'", ")", "\n", "performance", "[", "k", "]", "=", "float", "(", "v", ")", "\n", "self", ".", "bestPerformance", ".", "append", "(", "performance", ")", "\n", "", "self", ".", "saveModel", "(", ")", "\n", "", "print", "(", "'-'", "*", "120", ")", "\n", "print", "(", "'Quick Ranking Performance '", "+", "self", ".", "foldInfo", "+", "' (Top-'", "+", "str", "(", "N", ")", "+", "'Item Recommendation)'", ")", "\n", "measure", "=", "[", "m", ".", "strip", "(", ")", "for", "m", "in", "measure", "[", "1", ":", "]", "]", "\n", "print", "(", "'*Current Performance*'", ")", "\n", "print", "(", "'Epoch:'", ",", "str", "(", "epoch", "+", "1", ")", "+", "','", ",", "' | '", ".", "join", "(", "measure", ")", ")", "\n", "bp", "=", "''", "\n", "# for k in self.bestPerformance[1]:", "\n", "#     bp+=k+':'+str(self.bestPerformance[1][k])+' | '", "\n", "bp", "+=", "'Precision'", "+", "':'", "+", "str", "(", "self", ".", "bestPerformance", "[", "1", "]", "[", "'Precision'", "]", ")", "+", "' | '", "\n", "bp", "+=", "'Recall'", "+", "':'", "+", "str", "(", "self", ".", "bestPerformance", "[", "1", "]", "[", "'Recall'", "]", ")", "+", "' | '", "\n", "bp", "+=", "'F1'", "+", "':'", "+", "str", "(", "self", ".", "bestPerformance", "[", "1", "]", "[", "'F1'", "]", ")", "+", "' | '", "\n", "bp", "+=", "'MDCG'", "+", "':'", "+", "str", "(", "self", ".", "bestPerformance", "[", "1", "]", "[", "'NDCG'", "]", ")", "\n", "print", "(", "'*Best Performance* '", ")", "\n", "print", "(", "'Epoch:'", ",", "str", "(", "self", ".", "bestPerformance", "[", "0", "]", ")", "+", "','", ",", "bp", ")", "\n", "print", "(", "'-'", "*", "120", ")", "\n", "return", "measure", "\n", "\n"]]}