{"home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.None.run_demo.img_crop": [[26, 28], ["utils.transforms.crop"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.crop"], ["def", "img_crop", "(", "image_tensor", ",", "center", ",", "scale", ")", ":", "\n", "    ", "return", "utils", ".", "transforms", ".", "crop", "(", "image_tensor", ",", "center", ",", "scale", ",", "[", "256", ",", "256", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.None.run_demo.transf_pred": [[30, 39], ["utils.transforms.transform_preds", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform_preds"], ["", "def", "transf_pred", "(", "pred_coord", ",", "center", ",", "scale", ")", ":", "\n", "    ", "lm_pred", "=", "utils", ".", "transforms", ".", "transform_preds", "(", "pred_coord", ",", "center", ",", "scale", ",", "[", "256", ",", "256", "]", ",", "256", ")", "\n", "\n", "lm_pred", "[", ":", ",", "2", "]", "=", "-", "lm_pred", "[", ":", ",", "2", "]", "\n", "\n", "z_mean", "=", "torch", ".", "mean", "(", "lm_pred", "[", ":", ",", "2", "]", ")", "\n", "lm_pred", "[", ":", ",", "2", "]", "-=", "z_mean", "\n", "\n", "return", "lm_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.None.run_demo.main": [[41, 147], ["print", "models.pvcNet", "models.pvcNet.resume_from_checkpoint", "models.pvcNet.eval", "enumerate", "print", "PIL.Image.open().convert", "run_demo.img_crop", "time.time.time", "models.pvcNet.landmarkDetection", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "len", "print", "os.listdir", "name.endswith", "utils.evaluation.readPts", "utils.evaluation.boundingbox", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torchvision.transforms.ToTensor", "input_tensor.cuda.cuda", "input_tensor.cuda.unsqueeze", "time.time.time", "pred_coord.cpu.cpu", "utils.imutils.show_joints", "utils.imutils.show_voxel", "utils.imutils.show_joints3D", "matplotlib.show", "run_demo.transf_pred", "nme.append", "open", "range", "open.close", "PIL.Image.open", "path.split", "numpy.array", "pred_voxel[].data[].cpu().numpy", "pred_coord.cpu.numpy", "utils.evaluation.p2pNormMeanError", "open.write", "len", "numpy.mean", "range", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.subplot", "transf_pred.unsqueeze", "torch.Tensor.unsqueeze", "numpy.array", "pred_voxel[].data[].cpu", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.pix2vox2coord.pvcNet.resume_from_checkpoint", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.None.run_demo.img_crop", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.pix2vox2coord.pvcNet.landmarkDetection", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.readPts", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.boundingbox", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.show_joints", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.show_voxel", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.show_joints3D", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.None.run_demo.transf_pred", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.close", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.p2pNormMeanError"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpus", "\n", "if", "args", ".", "gpus", "==", "''", ":", "\n", "        ", "is_cuda", "=", "False", "\n", "print", "(", "'Run in CPU mode.'", ")", "\n", "", "else", ":", "\n", "        ", "is_cuda", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# 68 points plus eye and mouth center", "\n", "", "nParts", "=", "71", "\n", "# create model", "\n", "print", "(", "\"==> creating model: stacks={}, blocks={}, z-res={}\"", ".", "format", "(", "args", ".", "stacks", ",", "args", ".", "blocks", ",", "args", ".", "depth_res", ")", ")", "\n", "model", "=", "pvcNet", "(", "args", ".", "stacks", ",", "args", ".", "blocks", ",", "args", ".", "depth_res", ",", "nParts", ",", "\n", "resume_p2v2c", "=", "args", ".", "resume_p2v2c", ",", "is_cuda", "=", "is_cuda", ")", "\n", "\n", "imgDir", "=", "args", ".", "imgDir", "\n", "lmDir", "=", "args", ".", "lmDir", "\n", "outDir", "=", "args", ".", "outDir", "\n", "\n", "model", ".", "resume_from_checkpoint", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "imgPathList", "=", "[", "imgDir", "+", "name", "for", "name", "in", "os", ".", "listdir", "(", "imgDir", ")", "if", "name", ".", "endswith", "(", "'.jpg'", ")", "]", "\n", "\n", "# link for facial points", "\n", "skeletons", "=", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "16", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "17", ",", "21", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "22", ",", "26", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "36", ",", "41", ")", "]", "+", "[", "[", "41", ",", "36", "]", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "42", ",", "47", ")", "]", "+", "[", "[", "47", ",", "42", "]", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "27", ",", "30", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "31", ",", "35", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "48", ",", "59", ")", "]", "+", "[", "[", "59", ",", "48", "]", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "60", ",", "67", ")", "]", "+", "[", "[", "67", ",", "60", "]", "]", "\n", "\n", "nme", "=", "[", "]", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "imgPathList", ")", ":", "\n", "\n", "        ", "image", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "imgId", "=", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "\n", "if", "lmDir", "is", "not", "None", ":", "\n", "            ", "ptsPath", "=", "lmDir", "+", "imgId", "+", "'.pts'", "\n", "lm_gt", "=", "utils", ".", "evaluation", ".", "readPts", "(", "ptsPath", ")", "\n", "\n", "center", ",", "scale", ",", "bbox", "=", "utils", ".", "evaluation", ".", "boundingbox", "(", "lm_gt", ")", "\n", "scale", "*=", "1.25", "\n", "\n", "l", "=", "center", "[", "0", "]", "-", "scale", "*", "200", "/", "2.", "\n", "u", "=", "center", "[", "1", "]", "-", "scale", "*", "200", "/", "2.", "\n", "w", "=", "scale", "*", "200", "\n", "h", "=", "scale", "*", "200", "\n", "\n", "bbox", "=", "[", "l", ",", "u", ",", "l", "+", "w", ",", "u", "+", "h", "]", "\n", "\n", "lm_gt", "=", "torch", ".", "Tensor", "(", "lm_gt", ")", "\n", "", "else", ":", "\n", "            ", "center", "=", "np", ".", "array", "(", "image", ".", "size", ")", "/", "2", "\n", "scale", "=", "1", "\n", "\n", "", "image_tensor", "=", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", "(", "image", ")", "\n", "# input image with size of 256x256", "\n", "input_tensor", "=", "img_crop", "(", "image_tensor", ",", "center", ",", "scale", ")", "\n", "if", "is_cuda", ":", "\n", "            ", "input_tensor", "=", "input_tensor", ".", "cuda", "(", ")", "\n", "\n", "", "timeStart", "=", "time", ".", "time", "(", ")", "\n", "pred_voxel", ",", "pred_coord", "=", "model", ".", "landmarkDetection", "(", "input_tensor", ".", "unsqueeze", "(", "0", ")", ")", "\n", "timeElapse", "=", "time", ".", "time", "(", ")", "-", "timeStart", "\n", "\n", "pred_coord", "=", "pred_coord", ".", "data", "[", "0", ":", "68", "]", "\n", "if", "is_cuda", ":", "\n", "            ", "pred_coord", "=", "pred_coord", ".", "cpu", "(", ")", "\n", "\n", "", "if", "args", ".", "verbose", ":", "\n", "            ", "utils", ".", "imutils", ".", "show_joints", "(", "input_tensor", ",", "pred_coord", "[", ":", ",", "0", ":", "2", "]", ",", "show_idx", "=", "False", ",", "pairs", "=", "skeletons", ",", "\n", "ax", "=", "plt", ".", "subplot", "(", "221", ")", ")", "\n", "\n", "# visualize the last volume", "\n", "pred_heatmap3d", "=", "[", "pred_voxel", "[", "-", "1", "]", ".", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "show_voxel", "(", "pred_heatmap3d", ",", "ax", "=", "plt", ".", "subplot", "(", "222", ",", "projection", "=", "'3d'", ")", ")", "\n", "\n", "show_joints3D", "(", "pred_coord", ".", "numpy", "(", ")", ",", "pairs", "=", "skeletons", ",", "ax", "=", "plt", ".", "subplot", "(", "223", ",", "projection", "=", "'3d'", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "lmDir", "is", "not", "None", ":", "\n", "            ", "lm_pred", "=", "transf_pred", "(", "pred_coord", ",", "center", ",", "scale", ")", "\n", "err", "=", "utils", ".", "evaluation", ".", "p2pNormMeanError", "(", "lm_pred", ".", "unsqueeze", "(", "0", ")", ",", "lm_gt", ".", "unsqueeze", "(", "0", ")", ",", "[", "36", ",", "45", "]", ",", "z_zero_mean", "=", "True", ")", "[", "0", "]", "\n", "nme", ".", "append", "(", "err", ")", "\n", "\n", "", "if", "outDir", "is", "not", "None", ":", "\n", "# write 3D coordinates to file", "\n", "            ", "text_file", "=", "open", "(", "outDir", "+", "imgId", "+", "'.csv'", ",", "\"w\"", ")", "\n", "for", "idx", "in", "range", "(", "68", ")", ":", "\n", "                ", "text_file", ".", "write", "(", "\"{},{},{}\\n\"", ".", "format", "(", "lm_pred", "[", "idx", ",", "0", "]", ",", "lm_pred", "[", "idx", ",", "1", "]", ",", "lm_pred", "[", "idx", ",", "2", "]", ")", ")", "\n", "", "text_file", ".", "close", "(", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'{}/{} Done; Elapse {:.0f}ms'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "imgPathList", ")", ",", "timeElapse", "*", "1000", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "if", "len", "(", "nme", ")", ">", "0", ":", "\n", "        ", "print", "(", "'\\nGround Truth Error (GTE): {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "nme", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.color_normalize": [[13, 20], ["zip", "x.repeat.size", "x.repeat.repeat", "t.sub_", "x.repeat.size", "x.repeat.size"], "function", ["None"], ["def", "color_normalize", "(", "x", ",", "mean", ",", "std", ")", ":", "\n", "    ", "if", "x", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "x", "=", "x", ".", "repeat", "(", "3", ",", "x", ".", "size", "(", "1", ")", ",", "x", ".", "size", "(", "2", ")", ")", "\n", "\n", "", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "x", ",", "mean", ",", "std", ")", ":", "\n", "        ", "t", ".", "sub_", "(", "m", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.flip_back": [[22, 44], ["transforms.fliplr", "torch.from_numpy().float", "print", "fliplr.numpy", "numpy.copy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.fliplr"], ["", "def", "flip_back", "(", "flip_output", ",", "dataset", "=", "'mpii'", ")", ":", "\n", "    ", "\"\"\"\n    flip output map\n    \"\"\"", "\n", "if", "dataset", "==", "'mpii'", ":", "\n", "        ", "matchedParts", "=", "(", "\n", "[", "0", ",", "5", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "3", "]", ",", "\n", "[", "10", ",", "15", "]", ",", "[", "11", ",", "14", "]", ",", "[", "12", ",", "13", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not supported dataset: '", "+", "dataset", ")", "\n", "\n", "# flip output horizontally", "\n", "", "flip_output", "=", "fliplr", "(", "flip_output", ".", "numpy", "(", ")", ")", "\n", "\n", "# Change left-right parts", "\n", "for", "pair", "in", "matchedParts", ":", "\n", "        ", "tmp", "=", "np", ".", "copy", "(", "flip_output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", ")", "\n", "flip_output", "[", ":", ",", "pair", "[", "0", "]", ",", ":", ",", ":", "]", "=", "flip_output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "\n", "flip_output", "[", ":", ",", "pair", "[", "1", "]", ",", ":", ",", ":", "]", "=", "tmp", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "flip_output", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.shufflelr": [[46, 101], ["x[].clone", "print"], "function", ["None"], ["", "def", "shufflelr", "(", "x", ",", "width", ",", "dataset", "=", "'mpii'", ")", ":", "\n", "    ", "\"\"\"\n    flip coords\n    \"\"\"", "\n", "if", "dataset", "==", "'mpii'", ":", "\n", "        ", "matchedParts", "=", "(", "\n", "[", "0", ",", "5", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "3", "]", ",", "\n", "[", "10", ",", "15", "]", ",", "[", "11", ",", "14", "]", ",", "[", "12", ",", "13", "]", "\n", ")", "\n", "", "elif", "dataset", "==", "'h36m'", ":", "\n", "        ", "matchedParts", "=", "(", "\n", "[", "1", ",", "4", "]", ",", "[", "2", ",", "5", "]", ",", "[", "3", ",", "6", "]", ",", "\n", "[", "11", ",", "14", "]", ",", "[", "12", ",", "15", "]", ",", "[", "13", ",", "16", "]", "\n", ")", "\n", "", "elif", "dataset", "==", "'3dfaw'", ":", "\n", "        ", "matchedParts", "=", "(", "\n", "[", "0", ",", "16", "]", ",", "[", "1", ",", "15", "]", ",", "[", "2", ",", "14", "]", ",", "[", "3", ",", "13", "]", ",", "[", "4", ",", "12", "]", ",", "[", "5", ",", "11", "]", ",", "[", "6", ",", "10", "]", ",", "[", "7", ",", "9", "]", ",", "\n", "[", "17", ",", "26", "]", ",", "[", "18", ",", "25", "]", ",", "[", "19", ",", "24", "]", ",", "[", "20", ",", "23", "]", ",", "[", "21", ",", "22", "]", ",", "\n", "[", "36", ",", "45", "]", ",", "[", "37", ",", "44", "]", ",", "[", "38", ",", "43", "]", ",", "[", "39", ",", "42", "]", ",", "[", "40", ",", "47", "]", ",", "[", "41", ",", "46", "]", ",", "\n", "[", "31", ",", "35", "]", ",", "[", "32", ",", "34", "]", ",", "\n", "[", "48", ",", "54", "]", ",", "[", "49", ",", "53", "]", ",", "[", "50", ",", "52", "]", ",", "\n", "[", "59", ",", "55", "]", ",", "[", "58", ",", "56", "]", ",", "\n", "[", "60", ",", "62", "]", ",", "[", "65", ",", "63", "]", "\n", ")", "\n", "", "elif", "dataset", "in", "[", "'300w'", ",", "'300wLP'", ",", "'aflw2000'", ",", "'ls3d_menpo'", "]", ":", "\n", "        ", "matchedParts", "=", "(", "\n", "[", "0", ",", "16", "]", ",", "[", "1", ",", "15", "]", ",", "[", "2", ",", "14", "]", ",", "[", "3", ",", "13", "]", ",", "[", "4", ",", "12", "]", ",", "[", "5", ",", "11", "]", ",", "[", "6", ",", "10", "]", ",", "[", "7", ",", "9", "]", ",", "\n", "[", "17", ",", "26", "]", ",", "[", "18", ",", "25", "]", ",", "[", "19", ",", "24", "]", ",", "[", "20", ",", "23", "]", ",", "[", "21", ",", "22", "]", ",", "\n", "[", "36", ",", "45", "]", ",", "[", "37", ",", "44", "]", ",", "[", "38", ",", "43", "]", ",", "[", "39", ",", "42", "]", ",", "[", "40", ",", "47", "]", ",", "[", "41", ",", "46", "]", ",", "\n", "[", "31", ",", "35", "]", ",", "[", "32", ",", "34", "]", ",", "\n", "[", "48", ",", "54", "]", ",", "[", "49", ",", "53", "]", ",", "[", "50", ",", "52", "]", ",", "\n", "[", "59", ",", "55", "]", ",", "[", "58", ",", "56", "]", ",", "\n", "[", "60", ",", "64", "]", ",", "[", "61", ",", "63", "]", ",", "[", "67", ",", "65", "]", "\n", ")", "\n", "", "elif", "dataset", "==", "'aflw'", ":", "\n", "        ", "matchedParts", "=", "(", "\n", "[", "0", ",", "5", "]", ",", "[", "1", ",", "4", "]", ",", "[", "2", ",", "3", "]", ",", "\n", "[", "6", ",", "11", "]", ",", "[", "7", ",", "10", "]", ",", "[", "8", ",", "9", "]", ",", "\n", "[", "13", ",", "15", "]", ",", "\n", "[", "17", ",", "19", "]", ",", "\n", "[", "12", ",", "16", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not supported dataset: '", "+", "dataset", ")", "\n", "\n", "# Flip horizontal", "\n", "", "x", "[", ":", ",", "0", "]", "=", "width", "-", "x", "[", ":", ",", "0", "]", "\n", "\n", "# Change left-right parts", "\n", "for", "pair", "in", "matchedParts", ":", "\n", "        ", "tmp", "=", "x", "[", "pair", "[", "0", "]", ",", ":", "]", ".", "clone", "(", ")", "\n", "x", "[", "pair", "[", "0", "]", ",", ":", "]", "=", "x", "[", "pair", "[", "1", "]", ",", ":", "]", "\n", "x", "[", "pair", "[", "1", "]", ",", ":", "]", "=", "tmp", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.fliplr": [[103, 110], ["np.transpose.astype", "numpy.transpose", "numpy.fliplr", "range", "numpy.transpose", "numpy.transpose", "numpy.fliplr", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.fliplr", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.fliplr"], ["", "def", "fliplr", "(", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "==", "3", ":", "\n", "        ", "x", "=", "np", ".", "transpose", "(", "np", ".", "fliplr", "(", "np", ".", "transpose", "(", "x", ",", "(", "0", ",", "2", ",", "1", ")", ")", ")", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "elif", "x", ".", "ndim", "==", "4", ":", "\n", "        ", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "np", ".", "transpose", "(", "np", ".", "fliplr", "(", "np", ".", "transpose", "(", "x", "[", "i", "]", ",", "(", "0", ",", "2", ",", "1", ")", ")", ")", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "", "return", "x", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.get_transform": [[112, 140], ["numpy.zeros", "float", "float", "numpy.zeros", "numpy.eye", "np.eye.copy", "numpy.dot", "numpy.sin", "numpy.cos", "numpy.dot", "numpy.dot", "float", "float"], "function", ["None"], ["", "def", "get_transform", "(", "center", ",", "scale", ",", "res", ",", "rot", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    General image utils functions\n    \"\"\"", "\n", "# Generate transformation matrix", "\n", "h", "=", "200", "*", "scale", "\n", "t", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "t", "[", "0", ",", "0", "]", "=", "float", "(", "res", "[", "1", "]", ")", "/", "h", "\n", "t", "[", "1", ",", "1", "]", "=", "float", "(", "res", "[", "0", "]", ")", "/", "h", "\n", "t", "[", "0", ",", "2", "]", "=", "res", "[", "1", "]", "*", "(", "-", "float", "(", "center", "[", "0", "]", ")", "/", "h", "+", ".5", ")", "\n", "t", "[", "1", ",", "2", "]", "=", "res", "[", "0", "]", "*", "(", "-", "float", "(", "center", "[", "1", "]", ")", "/", "h", "+", ".5", ")", "\n", "t", "[", "2", ",", "2", "]", "=", "1", "\n", "if", "not", "rot", "==", "0", ":", "\n", "        ", "rot", "=", "-", "rot", "# To match direction of rotation from cropping", "\n", "rot_mat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rot_rad", "=", "rot", "*", "np", ".", "pi", "/", "180", "\n", "sn", ",", "cs", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "rot_mat", "[", "0", ",", ":", "2", "]", "=", "[", "cs", ",", "-", "sn", "]", "\n", "rot_mat", "[", "1", ",", ":", "2", "]", "=", "[", "sn", ",", "cs", "]", "\n", "rot_mat", "[", "2", ",", "2", "]", "=", "1", "\n", "# Need to rotate around center", "\n", "t_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "t_mat", "[", "0", ",", "2", "]", "=", "-", "res", "[", "1", "]", "/", "2", "\n", "t_mat", "[", "1", ",", "2", "]", "=", "-", "res", "[", "0", "]", "/", "2", "\n", "t_inv", "=", "t_mat", ".", "copy", "(", ")", "\n", "t_inv", "[", ":", "2", ",", "2", "]", "*=", "-", "1", "\n", "t", "=", "np", ".", "dot", "(", "t_inv", ",", "np", ".", "dot", "(", "rot_mat", ",", "np", ".", "dot", "(", "t_mat", ",", "t", ")", ")", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform": [[142, 150], ["transforms.get_transform", "numpy.dot", "numpy.linalg.inv", "numpy.array", "new_pt[].astype"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.get_transform"], ["", "def", "transform", "(", "pt", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "0", ",", "rot", "=", "0", ")", ":", "\n", "# Transform pixel location to different reference", "\n", "    ", "t", "=", "get_transform", "(", "center", ",", "scale", ",", "res", ",", "rot", "=", "rot", ")", "\n", "if", "invert", ":", "\n", "        ", "t", "=", "np", ".", "linalg", ".", "inv", "(", "t", ")", "\n", "", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", "-", "1", ",", "pt", "[", "1", "]", "-", "1", ",", "1.", "]", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", ".", "astype", "(", "int", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform3d": [[152, 169], ["transforms.get_transform", "numpy.dot", "numpy.linalg.inv", "numpy.array", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.get_transform"], ["", "def", "transform3d", "(", "pt", ",", "center", ",", "scale", ",", "res", ",", "z_res", ",", "invert", "=", "0", ",", "rot", "=", "0", ")", ":", "\n", "# Transform pixel location to different reference", "\n", "    ", "t", "=", "get_transform", "(", "center", ",", "scale", ",", "res", ",", "rot", "=", "rot", ")", "\n", "if", "invert", ":", "\n", "        ", "t", "=", "np", ".", "linalg", ".", "inv", "(", "t", ")", "\n", "", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", "-", "1", ",", "pt", "[", "1", "]", "-", "1", ",", "1.", "]", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "\n", "h", "=", "200", "*", "scale", "\n", "if", "invert", ":", "\n", "        ", "new_pt_z", "=", "(", "h", "/", "float", "(", "z_res", ")", ")", "*", "(", "pt", "[", "2", "]", "-", "float", "(", "z_res", ")", "/", "2", ")", "\n", "", "else", ":", "\n", "        ", "new_pt_z", "=", "(", "float", "(", "z_res", ")", "/", "h", ")", "*", "pt", "[", "2", "]", "+", "float", "(", "z_res", ")", "/", "2", "\n", "\n", "", "new_pt", "[", "2", "]", "=", "new_pt_z", "\n", "\n", "return", "new_pt", "[", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.creat_volume": [[172, 189], ["len", "range", "torch.zeros", "pts.clone", "range", "target.append", "pts.clone.size", "torch.zeros", "misc.to_torch", "imutils.draw_labelvolume", "torch.max", "transforms.transform3d", "imutils.draw_labelvolume.float"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.draw_labelvolume", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform3d"], ["", "def", "creat_volume", "(", "pts", ",", "center", ",", "scale", ",", "out_res", ",", "depth_res", ",", "sigma", "=", "1", ",", "label_type", "=", "'Gaussian'", ")", ":", "\n", "    ", "nStack", "=", "len", "(", "depth_res", ")", "\n", "target", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nStack", ")", ":", "\n", "        ", "target_i", "=", "torch", ".", "zeros", "(", "depth_res", "[", "i", "]", ",", "out_res", ",", "out_res", ")", "\n", "tpts", "=", "pts", ".", "clone", "(", ")", "\n", "for", "j", "in", "range", "(", "tpts", ".", "size", "(", "0", ")", ")", ":", "\n", "# if tpts[j, 2] > 0: # This is evil!!", "\n", "            ", "if", "tpts", "[", "j", ",", "0", "]", ">", "0", ":", "\n", "                ", "target_j", "=", "torch", ".", "zeros", "(", "depth_res", "[", "i", "]", ",", "out_res", ",", "out_res", ")", "\n", "tpts", "[", "j", ",", "0", ":", "3", "]", "=", "to_torch", "(", "transform3d", "(", "tpts", "[", "j", ",", "0", ":", "3", "]", "+", "1", ",", "center", ",", "scale", ",", "[", "out_res", ",", "out_res", "]", ",", "\n", "depth_res", "[", "i", "]", ",", "rot", "=", "0", ")", ")", "\n", "target_j", "=", "draw_labelvolume", "(", "target_j", ",", "tpts", "[", "j", "]", "-", "1", ",", "sigma", ",", "type", "=", "label_type", ")", "\n", "target_i", "=", "torch", ".", "max", "(", "target_i", ",", "target_j", ".", "float", "(", ")", ")", "\n", "", "", "target", ".", "append", "(", "target_i", ")", "\n", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform_preds": [[191, 204], ["range", "coords.size", "coords.size", "misc.to_torch", "transforms.transform", "coords.size", "misc.to_torch", "Exception", "transforms.transform3d"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform3d"], ["", "def", "transform_preds", "(", "coords", ",", "center", ",", "scale", ",", "res", ",", "z_res", "=", "None", ",", "invert", "=", "1", ")", ":", "\n", "# size = coords.size()", "\n", "# coords = coords.view(-1, coords.size(-1))", "\n", "# print(coords.size())", "\n", "    ", "for", "p", "in", "range", "(", "coords", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "if", "coords", ".", "size", "(", "1", ")", "==", "2", ":", "\n", "            ", "coords", "[", "p", ",", "0", ":", "2", "]", "=", "to_torch", "(", "transform", "(", "coords", "[", "p", ",", "0", ":", "2", "]", ",", "center", ",", "scale", ",", "res", ",", "invert", ",", "0", ")", ")", "\n", "", "elif", "coords", ".", "size", "(", "1", ")", "==", "3", ":", "\n", "            ", "coords", "[", "p", ",", "0", ":", "3", "]", "=", "to_torch", "(", "transform3d", "(", "coords", "[", "p", ",", "0", ":", "3", "]", ",", "center", ",", "scale", ",", "res", ",", "z_res", ",", "invert", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "# print('dimension not match.')", "\n", "            ", "raise", "Exception", "(", "'dimension not match.'", ")", "\n", "", "", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.crop": [[206, 240], ["imutils.im_to_numpy", "numpy.array", "numpy.array", "int", "numpy.zeros", "imutils.im_to_torch", "transforms.transform", "transforms.transform", "len", "max", "max", "max", "min", "max", "min", "scipy.misc.imrotate", "scipy.misc.imresize", "min", "min", "len", "len", "numpy.linalg.norm", "float", "len", "len"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.im_to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.im_to_torch", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform"], ["", "def", "crop", "(", "img", ",", "center", ",", "scale", ",", "res", ",", "rot", "=", "0", ")", ":", "\n", "    ", "img", "=", "im_to_numpy", "(", "img", ")", "\n", "\n", "# Upper left point", "\n", "ul", "=", "np", ".", "array", "(", "transform", "(", "[", "0", ",", "0", "]", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "1", ")", ")", "\n", "# Bottom right point", "\n", "br", "=", "np", ".", "array", "(", "transform", "(", "res", ",", "center", ",", "scale", ",", "res", ",", "invert", "=", "1", ")", ")", "\n", "\n", "# Padding so that when rotated proper amount of context is included", "\n", "pad", "=", "int", "(", "np", ".", "linalg", ".", "norm", "(", "br", "-", "ul", ")", "/", "2", "-", "float", "(", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ")", "/", "2", ")", "\n", "if", "not", "rot", "==", "0", ":", "\n", "        ", "ul", "-=", "pad", "\n", "br", "+=", "pad", "\n", "\n", "", "new_shape", "=", "[", "br", "[", "1", "]", "-", "ul", "[", "1", "]", ",", "br", "[", "0", "]", "-", "ul", "[", "0", "]", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", ">", "2", ":", "\n", "        ", "new_shape", "+=", "[", "img", ".", "shape", "[", "2", "]", "]", "\n", "", "new_img", "=", "np", ".", "zeros", "(", "new_shape", ")", "\n", "\n", "# Range to fill new array", "\n", "new_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "len", "(", "img", "[", "0", "]", ")", ")", "-", "ul", "[", "0", "]", "\n", "new_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "len", "(", "img", ")", ")", "-", "ul", "[", "1", "]", "\n", "# Range to sample from original image", "\n", "old_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "len", "(", "img", "[", "0", "]", ")", ",", "br", "[", "0", "]", ")", "\n", "old_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "len", "(", "img", ")", ",", "br", "[", "1", "]", ")", "\n", "new_img", "[", "new_y", "[", "0", "]", ":", "new_y", "[", "1", "]", ",", "new_x", "[", "0", "]", ":", "new_x", "[", "1", "]", "]", "=", "img", "[", "old_y", "[", "0", "]", ":", "old_y", "[", "1", "]", ",", "old_x", "[", "0", "]", ":", "old_x", "[", "1", "]", "]", "\n", "\n", "if", "not", "rot", "==", "0", ":", "\n", "# Remove padding", "\n", "        ", "new_img", "=", "scipy", ".", "misc", ".", "imrotate", "(", "new_img", ",", "rot", ")", "\n", "new_img", "=", "new_img", "[", "pad", ":", "-", "pad", ",", "pad", ":", "-", "pad", "]", "\n", "\n", "", "new_img", "=", "im_to_torch", "(", "scipy", ".", "misc", ".", "imresize", "(", "new_img", ",", "res", ")", ")", "\n", "return", "new_img", "\n", "", ""]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.__init__": [[26, 47], ["os.path.isfile", "open", "logger.Logger.file.readline", "logger.Logger.rstrip().split", "enumerate", "logger.Logger.file.close", "open", "open", "numbers.rstrip().split.rstrip().split.rstrip().split", "range", "logger.Logger.rstrip", "len", "logger.Logger.numbers[].append", "numbers.rstrip().split.rstrip().split.rstrip"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.isfile", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.close", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "fpath", ",", "title", "=", "None", ",", "resume", "=", "False", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "self", ".", "resume", "=", "resume", "\n", "self", ".", "title", "=", "''", "if", "title", "==", "None", "else", "title", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "if", "resume", "and", "os", ".", "path", ".", "isfile", "(", "fpath", ")", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'r'", ")", "\n", "name", "=", "self", ".", "file", ".", "readline", "(", ")", "\n", "self", ".", "names", "=", "name", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "=", "{", "}", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "                    ", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "\n", "", "for", "numbers", "in", "self", ".", "file", ":", "\n", "                    ", "numbers", "=", "numbers", ".", "rstrip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "numbers", ")", ")", ":", "\n", "                        ", "self", ".", "numbers", "[", "self", ".", "names", "[", "i", "]", "]", ".", "append", "(", "numbers", "[", "i", "]", ")", "\n", "", "", "self", ".", "file", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'a'", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.set_names": [[48, 60], ["enumerate", "logger.Logger.file.write", "logger.Logger.file.flush", "logger.Logger.file.write", "logger.Logger.file.write"], "methods", ["None"], ["", "", "", "def", "set_names", "(", "self", ",", "names", ")", ":", "\n", "        ", "if", "self", ".", "resume", ":", "\n", "            ", "pass", "\n", "# initialize numbers as empty list", "\n", "", "self", ".", "numbers", "=", "{", "}", "\n", "self", ".", "names", "=", "names", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "self", ".", "names", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "name", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "name", "]", "=", "[", "]", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append": [[62, 70], ["enumerate", "logger.Logger.file.write", "logger.Logger.file.flush", "len", "len", "logger.Logger.file.write", "logger.Logger.file.write", "logger.Logger.numbers[].append"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["", "def", "append", "(", "self", ",", "numbers", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "names", ")", "==", "len", "(", "numbers", ")", ",", "'Numbers do not match names'", "\n", "for", "index", ",", "num", "in", "enumerate", "(", "numbers", ")", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "\"{0:.6f}\"", ".", "format", "(", "num", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "'\\t'", ")", "\n", "self", ".", "numbers", "[", "self", ".", "names", "[", "index", "]", "]", ".", "append", "(", "num", ")", "\n", "", "self", ".", "file", ".", "write", "(", "'\\n'", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.plot": [[71, 79], ["enumerate", "matplotlib.legend", "matplotlib.grid", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.LoggerMonitor.plot"], ["", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "names", "=", "self", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "self", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "            ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "plt", ".", "legend", "(", "[", "self", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.close": [[80, 83], ["logger.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.LoggerMonitor.__init__": [[86, 92], ["paths.items", "Logger.Logger", "Logger.LoggerMonitor.loggers.append"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "paths", ")", ":", "\n", "        ", "'''paths is a distionary with {name:filepath} pair'''", "\n", "self", ".", "loggers", "=", "[", "]", "\n", "for", "title", ",", "path", "in", "paths", ".", "items", "(", ")", ":", "\n", "            ", "logger", "=", "Logger", "(", "path", ",", "title", "=", "title", ",", "resume", "=", "True", ")", "\n", "self", ".", "loggers", ".", "append", "(", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.LoggerMonitor.plot": [[93, 101], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.legend", "matplotlib.grid", "logger.plot_overlap"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.plot_overlap"], ["", "", "def", "plot", "(", "self", ",", "names", "=", "None", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "121", ")", "\n", "legend_text", "=", "[", "]", "\n", "for", "logger", "in", "self", ".", "loggers", ":", "\n", "            ", "legend_text", "+=", "plot_overlap", "(", "logger", ",", "names", ")", "\n", "", "plt", ".", "legend", "(", "legend_text", ",", "bbox_to_anchor", "=", "(", "1.05", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.savefig": [[12, 15], ["matplotlib.savefig"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.savefig"], ["def", "savefig", "(", "fname", ",", "dpi", "=", "None", ")", ":", "\n", "    ", "dpi", "=", "150", "if", "dpi", "==", "None", "else", "dpi", "\n", "plt", ".", "savefig", "(", "fname", ",", "dpi", "=", "dpi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.plot_overlap": [[16, 23], ["enumerate", "numpy.arange", "matplotlib.plot", "len", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.LoggerMonitor.plot"], ["", "def", "plot_overlap", "(", "logger", ",", "names", "=", "None", ")", ":", "\n", "    ", "names", "=", "logger", ".", "names", "if", "names", "==", "None", "else", "names", "\n", "numbers", "=", "logger", ".", "numbers", "\n", "for", "_", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "x", "=", "np", ".", "arange", "(", "len", "(", "numbers", "[", "name", "]", ")", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "asarray", "(", "numbers", "[", "name", "]", ")", ")", "\n", "", "return", "[", "logger", ".", "title", "+", "'('", "+", "name", "+", "')'", "for", "name", "in", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.mkdir_p": [[6, 12], ["os.makedirs"], "function", ["None"], ["def", "mkdir_p", "(", "dir_path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.isfile": [[13, 15], ["os.path.isfile"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.isfile"], ["", "", "", "def", "isfile", "(", "fname", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "isfile", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.isdir": [[16, 18], ["os.path.isdir"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.isdir"], ["", "def", "isdir", "(", "dirname", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "isdir", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join": [[19, 21], ["os.path.join"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join"], ["", "def", "join", "(", "path", ",", "*", "paths", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "path", ",", "*", "paths", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy": [[12, 19], ["torch.is_tensor", "tensor.cpu().numpy", "ValueError", "tensor.cpu", "type", "type"], "function", ["None"], ["def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "type", "(", "tensor", ")", ".", "__module__", "!=", "'numpy'", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to numpy array\"", "\n", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch": [[21, 28], ["torch.from_numpy", "type", "torch.is_tensor", "ValueError", "type"], "function", ["None"], ["", "def", "to_torch", "(", "ndarray", ")", ":", "\n", "    ", "if", "type", "(", "ndarray", ")", ".", "__module__", "==", "'numpy'", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "ndarray", ")", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot convert {} to torch tensor\"", "\n", ".", "format", "(", "type", "(", "ndarray", ")", ")", ")", "\n", "", "return", "ndarray", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.save_checkpoint": [[30, 46], ["misc.to_numpy", "os.path.join", "torch.save", "scipy.io.savemat", "filename.format", "os.path.join", "shutil.copyfile", "print", "shutil.copyfile", "scipy.io.savemat", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join"], ["", "def", "save_checkpoint", "(", "state", ",", "preds", ",", "is_best", ",", "checkpoint", "=", "'checkpoint'", ",", "filename", "=", "'checkpoint_{}.pth.tar'", ",", "snapshot", "=", "None", ")", ":", "\n", "    ", "preds", "=", "to_numpy", "(", "preds", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "filename", ".", "format", "(", "state", "[", "'arch'", "]", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "scipy", ".", "io", ".", "savemat", "(", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'preds_{}.mat'", ".", "format", "(", "state", "[", "'arch'", "]", ")", ")", ",", "mdict", "=", "{", "'preds'", ":", "preds", "}", ")", "\n", "\n", "if", "snapshot", "and", "state", "[", "'epoch'", "]", "%", "snapshot", "==", "0", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'checkpoint_{}_{}.pth.tar'", ".", "format", "(", "state", "[", "'arch'", "]", ",", "\n", "state", "[", "'epoch'", "]", ")", ")", ")", "\n", "\n", "", "if", "is_best", ":", "\n", "        ", "print", "(", "'save best model: model_best_{}_{}.pth.tar'", ".", "format", "(", "state", "[", "'arch'", "]", ",", "state", "[", "'epoch'", "]", ")", ")", "\n", "shutil", ".", "copyfile", "(", "filepath", ",", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'model_best_{}_{}.pth.tar'", ".", "format", "(", "state", "[", "'arch'", "]", ",", "\n", "state", "[", "'epoch'", "]", ")", ")", ")", "\n", "scipy", ".", "io", ".", "savemat", "(", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "'preds_best_{}_{}.mat'", ".", "format", "(", "state", "[", "'arch'", "]", ",", "state", "[", "'epoch'", "]", ")", ")", ",", "\n", "mdict", "=", "{", "'preds'", ":", "preds", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.save_pred": [[48, 52], ["misc.to_numpy", "os.path.join", "scipy.io.savemat"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join"], ["", "", "def", "save_pred", "(", "preds", ",", "checkpoint", "=", "'checkpoint'", ",", "filename", "=", "'preds_valid.mat'", ")", ":", "\n", "    ", "preds", "=", "to_numpy", "(", "preds", ")", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "checkpoint", ",", "filename", ")", "\n", "scipy", ".", "io", ".", "savemat", "(", "filepath", ",", "mdict", "=", "{", "'preds'", ":", "preds", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.adjust_learning_rate": [[54, 61], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "lr", ",", "schedule", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by schedule\"\"\"", "\n", "if", "epoch", "in", "schedule", ":", "\n", "        ", "lr", "*=", "gamma", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.set_axes_equal": [[64, 91], ["ax.get_xlim3d", "ax.get_ylim3d", "ax.get_zlim3d", "abs", "numpy.mean", "abs", "numpy.mean", "abs", "numpy.mean", "ax.set_xlim3d", "ax.set_ylim3d", "ax.set_zlim3d", "max"], "function", ["None"], ["", "def", "set_axes_equal", "(", "ax", ")", ":", "\n", "    ", "'''Make axes of 3D plot have equal scale so that spheres appear as spheres,\n    cubes as cubes, etc..  This is one possible solution to Matplotlib's\n    ax.set_aspect('equal') and ax.axis('equal') not working for 3D.\n\n    Input\n      ax: a matplotlib axis, e.g., as output from plt.gca().\n    '''", "\n", "\n", "x_limits", "=", "ax", ".", "get_xlim3d", "(", ")", "\n", "y_limits", "=", "ax", ".", "get_ylim3d", "(", ")", "\n", "z_limits", "=", "ax", ".", "get_zlim3d", "(", ")", "\n", "\n", "x_range", "=", "abs", "(", "x_limits", "[", "1", "]", "-", "x_limits", "[", "0", "]", ")", "\n", "x_middle", "=", "np", ".", "mean", "(", "x_limits", ")", "\n", "y_range", "=", "abs", "(", "y_limits", "[", "1", "]", "-", "y_limits", "[", "0", "]", ")", "\n", "y_middle", "=", "np", ".", "mean", "(", "y_limits", ")", "\n", "z_range", "=", "abs", "(", "z_limits", "[", "1", "]", "-", "z_limits", "[", "0", "]", ")", "\n", "z_middle", "=", "np", ".", "mean", "(", "z_limits", ")", "\n", "\n", "# The plot bounding box is a sphere in the sense of the infinity", "\n", "# norm, hence I call half the max range the plot radius.", "\n", "plot_radius", "=", "0.5", "*", "max", "(", "[", "x_range", ",", "y_range", ",", "z_range", "]", ")", "\n", "\n", "ax", ".", "set_xlim3d", "(", "[", "x_middle", "-", "plot_radius", ",", "x_middle", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "y_middle", "-", "plot_radius", ",", "y_middle", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "z_middle", "-", "plot_radius", ",", "z_middle", "+", "plot_radius", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.im_to_numpy": [[10, 14], ["misc.to_numpy", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy"], ["def", "im_to_numpy", "(", "img", ")", ":", "\n", "    ", "img", "=", "to_numpy", "(", "img", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# H*W*C", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.im_to_torch": [[15, 21], ["numpy.transpose", "misc.to_torch().float", "to_torch().float.max", "misc.to_torch"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch"], ["", "def", "im_to_torch", "(", "img", ")", ":", "\n", "    ", "img", "=", "np", ".", "transpose", "(", "img", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# C*H*W", "\n", "img", "=", "to_torch", "(", "img", ")", ".", "float", "(", ")", "\n", "if", "img", ".", "max", "(", ")", ">", "1", ":", "\n", "        ", "img", "/=", "255", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.load_image": [[22, 25], ["imutils.im_to_torch", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.im_to_torch"], ["", "def", "load_image", "(", "img_path", ")", ":", "\n", "# H x W x C => C x H x W", "\n", "    ", "return", "im_to_torch", "(", "scipy", ".", "misc", ".", "imread", "(", "img_path", ",", "mode", "=", "'RGB'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.resize": [[26, 36], ["imutils.im_to_numpy", "print", "scipy.misc.imresize", "imutils.im_to_torch", "print", "im_to_torch.min", "im_to_torch.max", "im_to_torch.min", "im_to_torch.max"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.im_to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.im_to_torch"], ["", "def", "resize", "(", "img", ",", "owidth", ",", "oheight", ")", ":", "\n", "    ", "img", "=", "im_to_numpy", "(", "img", ")", "\n", "print", "(", "'%f %f'", "%", "(", "img", ".", "min", "(", ")", ",", "img", ".", "max", "(", ")", ")", ")", "\n", "img", "=", "scipy", ".", "misc", ".", "imresize", "(", "\n", "img", ",", "\n", "(", "oheight", ",", "owidth", ")", "\n", ")", "\n", "img", "=", "im_to_torch", "(", "img", ")", "\n", "print", "(", "'%f %f'", "%", "(", "img", ".", "min", "(", ")", ",", "img", ".", "max", "(", ")", ")", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.gaussian": [[41, 51], ["numpy.exp", "misc.to_torch().float", "misc.to_torch", "np.exp.max", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch"], ["", "def", "gaussian", "(", "shape", "=", "(", "7", ",", "7", ")", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    2D gaussian mask - should give the same result as MATLAB's\n    fspecial('gaussian',[shape],[sigma])\n    \"\"\"", "\n", "m", ",", "n", "=", "[", "(", "ss", "-", "1.", ")", "/", "2.", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2.", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "return", "to_torch", "(", "h", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.draw_labelmap": [[52, 85], ["misc.to_numpy", "numpy.arange", "misc.to_torch", "int", "int", "int", "int", "misc.to_torch", "numpy.exp", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch"], ["", "def", "draw_labelmap", "(", "img", ",", "pt", ",", "sigma", ",", "type", "=", "'Gaussian'", ")", ":", "\n", "# Draw a 2D gaussian ", "\n", "# Adopted from https://github.com/anewell/pose-hg-train/blob/master/src/pypose/draw.py", "\n", "    ", "img", "=", "to_numpy", "(", "img", ")", "\n", "\n", "# Check that any part of the gaussian is in-bounds", "\n", "ul", "=", "[", "int", "(", "pt", "[", "0", "]", "-", "3", "*", "sigma", ")", ",", "int", "(", "pt", "[", "1", "]", "-", "3", "*", "sigma", ")", "]", "\n", "br", "=", "[", "int", "(", "pt", "[", "0", "]", "+", "3", "*", "sigma", "+", "1", ")", ",", "int", "(", "pt", "[", "1", "]", "+", "3", "*", "sigma", "+", "1", ")", "]", "\n", "if", "(", "ul", "[", "0", "]", ">=", "img", ".", "shape", "[", "1", "]", "or", "ul", "[", "1", "]", ">=", "img", ".", "shape", "[", "0", "]", "or", "\n", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ")", ":", "\n", "# If not, just return the image as is", "\n", "        ", "return", "to_torch", "(", "img", ")", "\n", "\n", "# Generate gaussian", "\n", "", "size", "=", "6", "*", "sigma", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "# The gaussian is not normalized, we want the center value to equal 1", "\n", "if", "type", "==", "'Gaussian'", ":", "\n", "        ", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "", "elif", "type", "==", "'Cauchy'", ":", "\n", "        ", "g", "=", "sigma", "/", "(", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", "+", "sigma", "**", "2", ")", "**", "1.5", ")", "\n", "\n", "# Usable gaussian range", "\n", "", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "-", "ul", "[", "1", "]", "\n", "# Image range", "\n", "img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "img", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", "\n", "return", "to_torch", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.draw_labelvolume": [[87, 136], ["misc.to_numpy", "numpy.zeros", "numpy.arange", "numpy.uint8", "range", "misc.to_torch", "int", "int", "int", "int", "misc.to_torch", "numpy.exp", "max", "max", "max", "min", "max", "min", "numpy.exp", "len", "min", "min"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch"], ["", "def", "draw_labelvolume", "(", "vol", ",", "pt", ",", "sigma", ",", "type", "=", "'Gaussian'", ")", ":", "\n", "# Draw a 2D gaussian ", "\n", "# Adopted from https://github.com/anewell/pose-hg-train/blob/master/src/pypose/draw.py", "\n", "    ", "vol", "=", "to_numpy", "(", "vol", ")", "\n", "img", "=", "img", "=", "np", ".", "zeros", "(", "(", "vol", ".", "shape", "[", "1", ":", "]", ")", ")", "\n", "\n", "# Check that any part of the gaussian is in-bounds", "\n", "ul", "=", "[", "int", "(", "pt", "[", "0", "]", "-", "3", "*", "sigma", ")", ",", "int", "(", "pt", "[", "1", "]", "-", "3", "*", "sigma", ")", "]", "\n", "br", "=", "[", "int", "(", "pt", "[", "0", "]", "+", "3", "*", "sigma", "+", "1", ")", ",", "int", "(", "pt", "[", "1", "]", "+", "3", "*", "sigma", "+", "1", ")", "]", "\n", "if", "(", "ul", "[", "0", "]", ">=", "img", ".", "shape", "[", "1", "]", "or", "ul", "[", "1", "]", ">=", "img", ".", "shape", "[", "0", "]", "or", "\n", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ")", ":", "\n", "# If not, just return the image as is", "\n", "        ", "return", "to_torch", "(", "img", ")", "\n", "\n", "# Generate gaussian", "\n", "", "size", "=", "6", "*", "sigma", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "# The gaussian is not normalized, we want the center value to equal 1", "\n", "if", "type", "==", "'Gaussian'", ":", "\n", "        ", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "", "elif", "type", "==", "'Cauchy'", ":", "\n", "        ", "g", "=", "sigma", "/", "(", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", "+", "sigma", "**", "2", ")", "**", "1.5", ")", "\n", "\n", "# Usable gaussian range", "\n", "", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "-", "ul", "[", "1", "]", "\n", "# Image range", "\n", "img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "img", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", "\n", "\n", "# extend to z-axis", "\n", "if", "vol", ".", "shape", "[", "0", "]", "==", "vol", ".", "shape", "[", "1", "]", ":", "\n", "        ", "z_gauss", "=", "g", "[", "x0", "]", "\n", "", "else", ":", "\n", "        ", "z_gauss", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "\n", "", "z", "=", "np", ".", "uint8", "(", "pt", "[", "2", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "z_gauss", ")", ")", ":", "\n", "        ", "z_idx", "=", "z", "-", "x0", "+", "i", "\n", "if", "z_idx", "<", "0", "or", "z_idx", ">=", "vol", ".", "shape", "[", "0", "]", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "vol", "[", "z_idx", "]", "=", "z_gauss", "[", "i", "]", "*", "img", "\n", "\n", "", "", "return", "to_torch", "(", "vol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.gauss": [[141, 143], ["numpy.exp"], "function", ["None"], ["", "def", "gauss", "(", "x", ",", "a", ",", "b", ",", "c", ",", "d", "=", "0", ")", ":", "\n", "    ", "return", "a", "*", "np", ".", "exp", "(", "-", "(", "x", "-", "b", ")", "**", "2", "/", "(", "2", "*", "c", "**", "2", ")", ")", "+", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.color_heatmap": [[145, 154], ["misc.to_numpy", "numpy.zeros", "imutils.gauss", "imutils.gauss", "imutils.gauss", "imutils.gauss"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.gauss", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.gauss", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.gauss", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.gauss"], ["", "def", "color_heatmap", "(", "x", ")", ":", "\n", "    ", "x", "=", "to_numpy", "(", "x", ")", "\n", "color", "=", "np", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "color", "[", ":", ",", ":", ",", "0", "]", "=", "gauss", "(", "x", ",", ".5", ",", ".6", ",", ".2", ")", "+", "gauss", "(", "x", ",", "1", ",", ".8", ",", ".3", ")", "\n", "color", "[", ":", ",", ":", ",", "1", "]", "=", "gauss", "(", "x", ",", "1", ",", ".5", ",", ".3", ")", "\n", "color", "[", ":", ",", ":", ",", "2", "]", "=", "gauss", "(", "x", ",", "1", ",", ".2", ",", ".3", ")", "\n", "color", "[", "color", ">", "1", "]", "=", "1", "\n", "color", "=", "(", "color", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.imshow": [[155, 159], ["im_to_numpy().astype", "plt.imshow", "plt.axis", "imutils.im_to_numpy"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.imshow", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.im_to_numpy"], ["", "def", "imshow", "(", "img", ")", ":", "\n", "    ", "npimg", "=", "im_to_numpy", "(", "img", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "plt", ".", "imshow", "(", "npimg", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.pts_show": [[161, 169], ["range", "plt.axis", "pts.size", "plt.plot", "pts.size", "plt.text", "str"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.LoggerMonitor.plot"], ["", "def", "pts_show", "(", "pts", ",", "show_idx", "=", "False", ")", ":", "\n", "\n", "    ", "for", "i", "in", "range", "(", "pts", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "if", "pts", ".", "size", "(", "1", ")", "<", "3", "or", "pts", "[", "i", ",", "2", "]", ">", "0", ":", "\n", "            ", "plt", ".", "plot", "(", "pts", "[", "i", ",", "0", "]", ",", "pts", "[", "i", ",", "1", "]", ",", "'yo'", ")", "\n", "if", "show_idx", ":", "\n", "                ", "plt", ".", "text", "(", "pts", "[", "i", ",", "0", "]", ",", "pts", "[", "i", ",", "1", "]", ",", "str", "(", "i", ")", ")", "\n", "", "", "", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.show_voxel": [[170, 199], ["ht_map.flatten", "numpy.clip", "np.clip.sum", "numpy.random.choice", "numpy.unravel_index", "plt.subplot.set_aspect", "plt.subplot.scatter", "misc.set_axes_equal", "plt.subplot.view_init", "plt.subplot.xaxis.set_ticks", "plt.subplot.yaxis.set_ticks", "plt.subplot.zaxis.set_ticks", "plt.subplot.set_xlabel", "plt.subplot.set_ylabel", "plt.subplot.set_zlabel", "plt.subplot", "range", "len"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.set_axes_equal"], ["", "def", "show_voxel", "(", "pred_heatmap3d", ",", "ax", "=", "None", ")", ":", "\n", "\n", "    ", "if", "ax", "is", "None", ":", "\n", "        ", "ax", "=", "plt", ".", "subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "", "view_angle", "=", "(", "-", "160", ",", "30", ")", "\n", "ht_map", "=", "pred_heatmap3d", "[", "0", "]", "\n", "density", "=", "ht_map", ".", "flatten", "(", ")", "\n", "density", "=", "np", ".", "clip", "(", "density", ",", "0", ",", "1", ")", "\n", "density", "/=", "density", ".", "sum", "(", ")", "\n", "selected_pt", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "density", ")", ")", ",", "10000", ",", "p", "=", "density", ")", "\n", "pt3d", "=", "np", ".", "unravel_index", "(", "selected_pt", ",", "ht_map", ".", "shape", ")", "\n", "density_map", "=", "ht_map", "[", "pt3d", "]", "\n", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "ax", ".", "scatter", "(", "pt3d", "[", "0", "]", ",", "pt3d", "[", "2", "]", ",", "pt3d", "[", "1", "]", ",", "c", "=", "density_map", ",", "s", "=", "2", ",", "marker", "=", "'.'", ",", "linewidths", "=", "0", ")", "\n", "set_axes_equal", "(", "ax", ")", "\n", "# ax.set_xlabel('d', fontsize=10)", "\n", "# ax.set_ylabel('w', fontsize=10)", "\n", "# ax.set_zlabel('h', fontsize=10)", "\n", "ax", ".", "view_init", "(", "*", "view_angle", ")", "\n", "\n", "ax", ".", "xaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "ax", ".", "yaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "ax", ".", "zaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "''", ",", "fontsize", "=", "10", ")", "\n", "ax", ".", "set_ylabel", "(", "''", ",", "fontsize", "=", "10", ")", "\n", "ax", ".", "set_zlabel", "(", "''", ",", "fontsize", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.show_joints": [[201, 218], ["imutils.imshow", "pts.numpy", "range", "plt.axis", "plt.subplot", "pts.size", "plt.subplot.scatter", "pts.size", "plt.text", "str", "plt.subplot.plot"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.imshow", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.LoggerMonitor.plot"], ["", "def", "show_joints", "(", "img", ",", "pts", ",", "show_idx", "=", "False", ",", "pairs", "=", "None", ",", "ax", "=", "None", ")", ":", "\n", "    ", "if", "ax", "is", "None", ":", "\n", "        ", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "\n", "", "imshow", "(", "img", ")", "\n", "pts_np", "=", "pts", ".", "numpy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "pts", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "if", "pts", ".", "size", "(", "1", ")", "<", "3", "or", "pts", "[", "i", ",", "2", "]", ">", "0", ":", "\n", "# plt.plot(pts[i, 0], pts[i, 1], 'bo')", "\n", "            ", "ax", ".", "scatter", "(", "pts", "[", "i", ",", "0", "]", ",", "pts", "[", "i", ",", "1", "]", ",", "s", "=", "5", ",", "c", "=", "'c'", ",", "edgecolors", "=", "'b'", ",", "linewidths", "=", "0.3", ")", "\n", "if", "show_idx", ":", "\n", "                ", "plt", ".", "text", "(", "pts", "[", "i", ",", "0", "]", ",", "pts", "[", "i", ",", "1", "]", ",", "str", "(", "i", ")", ")", "\n", "", "if", "pairs", "is", "not", "None", ":", "\n", "                ", "for", "p", "in", "pairs", ":", "\n", "                    ", "ax", ".", "plot", "(", "pts_np", "[", "p", ",", "0", "]", ",", "pts_np", "[", "p", ",", "1", "]", ",", "c", "=", "'b'", ",", "linewidth", "=", "0.3", ")", "\n", "", "", "", "", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.show_joints3D": [[219, 239], ["plt.subplot.set_xlabel", "plt.subplot.set_ylabel", "plt.subplot.set_zlabel", "plt.subplot.view_init", "plt.subplot.set_aspect", "misc.set_axes_equal", "plt.subplot", "plt.subplot.scatter", "plt.subplot.scatter", "plt.subplot.plot"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.set_axes_equal", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.LoggerMonitor.plot"], ["", "def", "show_joints3D", "(", "predPts", ",", "pairs", "=", "None", ",", "ax", "=", "None", ")", ":", "\n", "    ", "if", "ax", "is", "None", ":", "\n", "        ", "ax", "=", "plt", ".", "subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "", "view_angle", "=", "(", "-", "160", ",", "30", ")", "\n", "if", "predPts", ".", "shape", "[", "1", "]", ">", "2", ":", "\n", "        ", "ax", ".", "scatter", "(", "predPts", "[", ":", ",", "2", "]", ",", "predPts", "[", ":", ",", "0", "]", ",", "predPts", "[", ":", ",", "1", "]", ",", "s", "=", "5", ",", "c", "=", "'c'", ",", "marker", "=", "'o'", ",", "edgecolors", "=", "'b'", ",", "linewidths", "=", "0.5", ")", "\n", "# ax_pred.scatter(predPts[0, 2], predPts[0, 0], predPts[0, 1], s=10, c='g', marker='*')", "\n", "if", "pairs", "is", "not", "None", ":", "\n", "            ", "for", "p", "in", "pairs", ":", "\n", "                ", "ax", ".", "plot", "(", "predPts", "[", "p", ",", "2", "]", ",", "predPts", "[", "p", ",", "0", "]", ",", "predPts", "[", "p", ",", "1", "]", ",", "c", "=", "'b'", ",", "linewidth", "=", "0.5", ")", "\n", "", "", "", "else", ":", "\n", "        ", "ax", ".", "scatter", "(", "[", "0", "]", "*", "predPts", ".", "shape", "[", "0", "]", ",", "predPts", "[", ":", ",", "0", "]", ",", "predPts", "[", ":", ",", "1", "]", ",", "s", "=", "10", ",", "marker", "=", "'*'", ")", "\n", "", "ax", ".", "set_xlabel", "(", "'z'", ",", "fontsize", "=", "10", ")", "\n", "ax", ".", "set_ylabel", "(", "'x'", ",", "fontsize", "=", "10", ")", "\n", "ax", ".", "set_zlabel", "(", "'y'", ",", "fontsize", "=", "10", ")", "\n", "ax", ".", "view_init", "(", "*", "view_angle", ")", "\n", "\n", "ax", ".", "set_aspect", "(", "'equal'", ")", "\n", "set_axes_equal", "(", "ax", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.show_sample": [[241, 256], ["inputs.size", "target.size", "target.size", "target.size", "range", "imutils.resize", "range", "imutils.imshow", "plt.show", "torch.cat", "torch.cat", "imutils.color_heatmap"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.resize", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.imshow", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.color_heatmap"], ["", "def", "show_sample", "(", "inputs", ",", "target", ")", ":", "\n", "    ", "num_sample", "=", "inputs", ".", "size", "(", "0", ")", "\n", "num_joints", "=", "target", ".", "size", "(", "1", ")", "\n", "height", "=", "target", ".", "size", "(", "2", ")", "\n", "width", "=", "target", ".", "size", "(", "3", ")", "\n", "\n", "for", "n", "in", "range", "(", "num_sample", ")", ":", "\n", "        ", "inp", "=", "resize", "(", "inputs", "[", "n", "]", ",", "width", ",", "height", ")", "\n", "out", "=", "inp", "\n", "for", "p", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "tgt", "=", "inp", "*", "0.5", "+", "color_heatmap", "(", "target", "[", "n", ",", "p", ",", ":", ",", ":", "]", ")", "*", "0.5", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out", ",", "tgt", ")", ",", "2", ")", "\n", "\n", "", "imshow", "(", "out", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.sample_with_heatmap": [[257, 291], ["misc.to_numpy", "misc.to_numpy", "numpy.zeros", "range", "int", "numpy.uint8", "numpy.zeros", "scipy.misc.imresize", "enumerate", "numpy.arange", "numpy.ceil", "scipy.misc.imresize", "imutils.color_heatmap", "scipy.misc.imresize.astype", "scipy.misc.imresize.copy", "float", "len"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.color_heatmap"], ["", "", "def", "sample_with_heatmap", "(", "inp", ",", "out", ",", "num_rows", "=", "2", ",", "parts_to_show", "=", "None", ")", ":", "\n", "    ", "inp", "=", "to_numpy", "(", "inp", "*", "255", ")", "\n", "out", "=", "to_numpy", "(", "out", ")", "\n", "\n", "img", "=", "np", ".", "zeros", "(", "(", "inp", ".", "shape", "[", "1", "]", ",", "inp", ".", "shape", "[", "2", "]", ",", "inp", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "img", "[", ":", ",", ":", ",", "i", "]", "=", "inp", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "parts_to_show", "is", "None", ":", "\n", "        ", "parts_to_show", "=", "np", ".", "arange", "(", "out", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# Generate a single image to display input/output pair", "\n", "", "num_cols", "=", "int", "(", "np", ".", "ceil", "(", "float", "(", "len", "(", "parts_to_show", ")", ")", "/", "num_rows", ")", ")", "\n", "size", "=", "np", ".", "uint8", "(", "img", ".", "shape", "[", "0", "]", "/", "num_rows", ")", "\n", "\n", "full_img", "=", "np", ".", "zeros", "(", "(", "img", ".", "shape", "[", "0", "]", ",", "size", "*", "(", "num_cols", "+", "num_rows", ")", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "full_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", "]", "=", "img", "\n", "\n", "inp_small", "=", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "[", "size", ",", "size", "]", ")", "\n", "\n", "# Set up heatmap display for each part", "\n", "for", "i", ",", "part", "in", "enumerate", "(", "parts_to_show", ")", ":", "\n", "        ", "part_idx", "=", "part", "\n", "out_resized", "=", "scipy", ".", "misc", ".", "imresize", "(", "out", "[", "part_idx", "]", ",", "[", "size", ",", "size", "]", ")", "\n", "out_resized", "=", "out_resized", ".", "astype", "(", "float", ")", "/", "255", "\n", "out_img", "=", "inp_small", ".", "copy", "(", ")", "*", ".3", "\n", "color_hm", "=", "color_heatmap", "(", "out_resized", ")", "\n", "out_img", "+=", "color_hm", "*", ".7", "\n", "\n", "col_offset", "=", "(", "i", "%", "num_cols", "+", "num_rows", ")", "*", "size", "\n", "row_offset", "=", "(", "i", "//", "num_cols", ")", "*", "size", "\n", "full_img", "[", "row_offset", ":", "row_offset", "+", "size", ",", "col_offset", ":", "col_offset", "+", "size", "]", "=", "out_img", "\n", "\n", "", "return", "full_img", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.sample_with_stacked_heatmap": [[293, 351], ["misc.to_numpy", "isinstance", "numpy.zeros", "range", "len", "numpy.uint16", "numpy.zeros", "scipy.misc.imresize", "range", "numpy.arange", "len", "numpy.max", "scipy.misc.imresize", "imutils.color_heatmap", "numpy.uint8", "numpy.max", "numpy.swapaxes", "scipy.misc.imresize", "imutils.color_heatmap", "numpy.uint8", "numpy.concatenate", "misc.to_numpy", "misc.to_numpy", "len", "scipy.misc.imresize.astype", "scipy.misc.imresize.copy", "float", "scipy.misc.imresize.astype", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.color_heatmap", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.color_heatmap", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy"], ["", "def", "sample_with_stacked_heatmap", "(", "inp", ",", "out", ",", "num_rows", "=", "1", ",", "parts_to_show", "=", "None", ")", ":", "\n", "    ", "inp", "=", "to_numpy", "(", "inp", "*", "255", ")", "\n", "if", "isinstance", "(", "out", ",", "list", ")", ":", "\n", "        ", "out", "=", "[", "to_numpy", "(", "out", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "out", ")", ")", "]", "\n", "", "else", ":", "\n", "        ", "out", "=", "[", "out", "]", "\n", "out", "=", "[", "to_numpy", "(", "out", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "out", ")", ")", "]", "\n", "\n", "", "img", "=", "np", ".", "zeros", "(", "(", "inp", ".", "shape", "[", "1", "]", ",", "inp", ".", "shape", "[", "2", "]", ",", "inp", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "img", "[", ":", ",", ":", ",", "i", "]", "=", "inp", "[", "i", ",", ":", ",", ":", "]", "\n", "\n", "", "if", "parts_to_show", "is", "None", ":", "\n", "# parts_to_show = np.arange(out.shape[0])", "\n", "        ", "parts_to_show", "=", "np", ".", "arange", "(", "len", "(", "out", ")", ")", "\n", "\n", "# Generate a single image to display input/output pair", "\n", "# num_cols = int(np.ceil(float(len(parts_to_show)) / num_rows))", "\n", "# size = np.uint8(img.shape[0] / num_rows)", "\n", "", "num_cols", "=", "len", "(", "out", ")", "\n", "num_rows", "=", "1", "\n", "size", "=", "np", ".", "uint16", "(", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# full_img = np.zeros((img.shape[0], size * (num_cols + num_rows), 3), np.uint8)", "\n", "# full_img[:img.shape[0], :img.shape[1]] = img", "\n", "full_img", "=", "np", ".", "zeros", "(", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "full_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", "]", "=", "img", "\n", "\n", "inp_small", "=", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "[", "size", ",", "size", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "out", ")", ")", ":", "\n", "        ", "stacked_out", "=", "np", ".", "max", "(", "out", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Set up heatmap display for each part", "\n", "# for i, part in enumerate(parts_to_show):", "\n", "#     part_idx = part", "\n", "out_resized", "=", "scipy", ".", "misc", ".", "imresize", "(", "stacked_out", ",", "[", "size", ",", "size", "]", ")", "\n", "out_resized", "=", "out_resized", ".", "astype", "(", "float", ")", "/", "255", "\n", "out_img", "=", "inp_small", ".", "copy", "(", ")", "*", ".3", "\n", "color_hm", "=", "color_heatmap", "(", "out_resized", ")", "\n", "out_img", "+=", "color_hm", "*", ".7", "\n", "out_img", "=", "np", ".", "uint8", "(", "out_img", ")", "\n", "\n", "profile", "=", "np", ".", "max", "(", "out", "[", "i", "]", ",", "axis", "=", "2", ")", "\n", "profile", "=", "np", ".", "swapaxes", "(", "profile", ",", "0", ",", "1", ")", "\n", "profile_resized", "=", "scipy", ".", "misc", ".", "imresize", "(", "profile", ",", "float", "(", "size", "/", "profile", ".", "shape", "[", "0", "]", ")", ")", "\n", "profile_resized", "=", "profile_resized", ".", "astype", "(", "float", ")", "/", "255", "\n", "out_pf", "=", "color_heatmap", "(", "profile_resized", ")", "\n", "out_pf", "=", "np", ".", "uint8", "(", "out_pf", ")", "\n", "\n", "full_img", "=", "np", ".", "concatenate", "(", "(", "full_img", ",", "out_img", ",", "out_pf", ")", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "# col_offset = size", "\n", "# row_offset = 0", "\n", "# full_img[row_offset:row_offset + size, col_offset:col_offset + size] = out_img", "\n", "\n", "", "return", "full_img", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.batch_with_heatmap": [[353, 361], ["torch.Tensor", "torch.Tensor", "range", "numpy.concatenate", "min", "batch_img.append", "inputs.size", "mean.view().expand_as", "imutils.sample_with_heatmap", "inp.clamp", "mean.view"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.sample_with_heatmap"], ["", "def", "batch_with_heatmap", "(", "inputs", ",", "outputs", ",", "mean", "=", "torch", ".", "Tensor", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "num_rows", "=", "2", ",", "parts_to_show", "=", "None", ")", ":", "\n", "    ", "batch_img", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "min", "(", "inputs", ".", "size", "(", "0", ")", ",", "4", ")", ")", ":", "\n", "        ", "inp", "=", "inputs", "[", "n", "]", "+", "mean", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "inputs", "[", "n", "]", ")", "\n", "batch_img", ".", "append", "(", "\n", "sample_with_heatmap", "(", "inp", ".", "clamp", "(", "0", ",", "1", ")", ",", "outputs", "[", "n", "]", ",", "num_rows", "=", "num_rows", ",", "parts_to_show", "=", "parts_to_show", ")", "\n", ")", "\n", "", "return", "np", ".", "concatenate", "(", "batch_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.batch_with_stacked_heatmap": [[363, 371], ["torch.Tensor", "torch.Tensor", "range", "numpy.concatenate", "min", "batch_img.append", "inputs.size", "mean.view().expand_as", "imutils.sample_with_stacked_heatmap", "inp.clamp", "mean.view"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.sample_with_stacked_heatmap"], ["", "def", "batch_with_stacked_heatmap", "(", "inputs", ",", "outputs", ",", "mean", "=", "torch", ".", "Tensor", "(", "[", "0", ",", "0", ",", "0", "]", ")", ",", "num_rows", "=", "1", ",", "parts_to_show", "=", "None", ")", ":", "\n", "    ", "batch_img", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "min", "(", "inputs", ".", "size", "(", "0", ")", ",", "4", ")", ")", ":", "\n", "        ", "inp", "=", "inputs", "[", "n", "]", "+", "mean", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "inputs", "[", "n", "]", ")", "\n", "batch_img", ".", "append", "(", "\n", "sample_with_stacked_heatmap", "(", "inp", ".", "clamp", "(", "0", ",", "1", ")", ",", "outputs", "[", "n", "]", ",", "num_rows", "=", "num_rows", ",", "parts_to_show", "=", "parts_to_show", ")", "\n", ")", "\n", "", "return", "np", ".", "concatenate", "(", "batch_img", ")", "", "", ""]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.AverageMeter.__init__": [[137, 139], ["evaluation.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.AverageMeter.reset": [[140, 145], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.AverageMeter.update": [[146, 151], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.get_preds": [[8, 26], ["torch.max", "maxval.view.view", "idx.repeat().float", "maxval.view.gt().repeat().float", "scores.dim", "scores.view", "scores.size", "scores.size", "idx.view", "torch.floor", "scores.size", "scores.size", "scores.size", "scores.size", "idx.repeat", "scores.size", "maxval.view.gt().repeat", "scores.size", "maxval.view.gt"], "function", ["None"], ["def", "get_preds", "(", "scores", ")", ":", "\n", "    ", "''' get predictions from score maps in torch Tensor\n        return type: torch.LongTensor\n    '''", "\n", "assert", "scores", ".", "dim", "(", ")", "==", "4", ",", "'Score maps should be 4-dim'", "\n", "maxval", ",", "idx", "=", "torch", ".", "max", "(", "scores", ".", "view", "(", "scores", ".", "size", "(", "0", ")", ",", "scores", ".", "size", "(", "1", ")", ",", "-", "1", ")", ",", "2", ")", "\n", "\n", "maxval", "=", "maxval", ".", "view", "(", "scores", ".", "size", "(", "0", ")", ",", "scores", ".", "size", "(", "1", ")", ",", "1", ")", "\n", "idx", "=", "idx", ".", "view", "(", "scores", ".", "size", "(", "0", ")", ",", "scores", ".", "size", "(", "1", ")", ",", "1", ")", "+", "1", "\n", "\n", "preds", "=", "idx", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "\n", "preds", "[", ":", ",", ":", ",", "0", "]", "=", "(", "preds", "[", ":", ",", ":", ",", "0", "]", "-", "1", ")", "%", "scores", ".", "size", "(", "3", ")", "+", "1", "\n", "preds", "[", ":", ",", ":", ",", "1", "]", "=", "torch", ".", "floor", "(", "(", "preds", "[", ":", ",", ":", ",", "1", "]", "-", "1", ")", "/", "scores", ".", "size", "(", "2", ")", ")", "+", "1", "\n", "\n", "pred_mask", "=", "maxval", ".", "gt", "(", "0", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "preds", "*=", "pred_mask", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.calc_dists": [[27, 38], ["preds.float.float", "target.float.float", "torch.zeros", "range", "preds.float.size", "preds.float.size", "preds.float.size", "range", "preds.float.size", "torch.dist"], "function", ["None"], ["", "def", "calc_dists", "(", "preds", ",", "target", ",", "normalize", ")", ":", "\n", "    ", "preds", "=", "preds", ".", "float", "(", ")", "\n", "target", "=", "target", ".", "float", "(", ")", "\n", "dists", "=", "torch", ".", "zeros", "(", "preds", ".", "size", "(", "1", ")", ",", "preds", ".", "size", "(", "0", ")", ")", "\n", "for", "n", "in", "range", "(", "preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "preds", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "if", "target", "[", "n", ",", "c", ",", "0", "]", ">", "1", "and", "target", "[", "n", ",", "c", ",", "1", "]", ">", "1", ":", "\n", "                ", "dists", "[", "c", ",", "n", "]", "=", "torch", ".", "dist", "(", "preds", "[", "n", ",", "c", ",", ":", "]", ",", "target", "[", "n", ",", "c", ",", ":", "]", ")", "/", "normalize", "[", "n", "]", "\n", "", "else", ":", "\n", "                ", "dists", "[", "c", ",", "n", "]", "=", "-", "1", "\n", "", "", "", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.dist_acc": [[39, 45], ["dists.ne().sum", "dists.ne().sum", "dists.ne", "dists.le().eq().sum", "dists.ne", "dists.le().eq", "dists.ne", "dists.le"], "function", ["None"], ["", "def", "dist_acc", "(", "dists", ",", "thr", "=", "0.5", ")", ":", "\n", "    ", "''' Return percentage below threshold while ignoring values with a -1 '''", "\n", "if", "dists", ".", "ne", "(", "-", "1", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "        ", "return", "dists", ".", "le", "(", "thr", ")", ".", "eq", "(", "dists", ".", "ne", "(", "-", "1", ")", ")", ".", "sum", "(", ")", "*", "1.0", "/", "dists", ".", "ne", "(", "-", "1", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.accuracy": [[46, 68], ["evaluation.get_preds", "evaluation.get_preds", "evaluation.calc_dists", "torch.zeros", "range", "len", "evaluation.dist_acc", "torch.ones", "output.size", "len", "get_preds.size"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.get_preds", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.get_preds", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.calc_dists", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.dist_acc"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "idxs", ",", "thr", "=", "0.5", ")", ":", "\n", "    ", "''' Calculate accuracy according to PCK, but uses ground truth heatmap rather than x,y locations\n        First value to be returned is average accuracy across 'idxs', followed by individual accuracies\n    '''", "\n", "preds", "=", "get_preds", "(", "output", ")", "\n", "gts", "=", "get_preds", "(", "target", ")", "\n", "norm", "=", "torch", ".", "ones", "(", "preds", ".", "size", "(", "0", ")", ")", "*", "output", ".", "size", "(", "3", ")", "/", "10", "\n", "dists", "=", "calc_dists", "(", "preds", ",", "gts", ",", "norm", ")", "\n", "\n", "acc", "=", "torch", ".", "zeros", "(", "len", "(", "idxs", ")", "+", "1", ")", "\n", "avg_acc", "=", "0", "\n", "cnt", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "idxs", ")", ")", ":", "\n", "        ", "acc", "[", "i", "+", "1", "]", "=", "dist_acc", "(", "dists", "[", "idxs", "[", "i", "]", "-", "1", "]", ")", "\n", "if", "acc", "[", "i", "+", "1", "]", ">=", "0", ":", "\n", "            ", "avg_acc", "=", "avg_acc", "+", "acc", "[", "i", "+", "1", "]", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "if", "cnt", "!=", "0", ":", "\n", "        ", "acc", "[", "0", "]", "=", "avg_acc", "/", "cnt", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.final_preds": [[69, 91], ["evaluation.get_preds", "range", "get_preds.clone", "range", "get_preds.size", "range", "get_preds.size", "transforms.transform_preds", "preds.view.dim", "preds.view.view", "get_preds.size", "int", "int", "preds.view.size", "math.floor", "math.floor", "torch.Tensor", "torch.Tensor.sign"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.get_preds", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform_preds"], ["", "def", "final_preds", "(", "output", ",", "center", ",", "scale", ",", "res", ")", ":", "\n", "    ", "coords", "=", "get_preds", "(", "output", ")", "# float type", "\n", "\n", "# pose-utils", "\n", "for", "n", "in", "range", "(", "coords", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "p", "in", "range", "(", "coords", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm", "=", "output", "[", "n", "]", "[", "p", "]", "\n", "px", "=", "int", "(", "math", ".", "floor", "(", "coords", "[", "n", "]", "[", "p", "]", "[", "0", "]", ")", ")", "\n", "py", "=", "int", "(", "math", ".", "floor", "(", "coords", "[", "n", "]", "[", "p", "]", "[", "1", "]", ")", ")", "\n", "if", "px", ">", "1", "and", "px", "<", "res", "[", "0", "]", "and", "py", ">", "1", "and", "py", "<", "res", "[", "1", "]", ":", "\n", "                ", "diff", "=", "torch", ".", "Tensor", "(", "[", "hm", "[", "py", "-", "1", "]", "[", "px", "]", "-", "hm", "[", "py", "-", "1", "]", "[", "px", "-", "2", "]", ",", "hm", "[", "py", "]", "[", "px", "-", "1", "]", "-", "hm", "[", "py", "-", "2", "]", "[", "px", "-", "1", "]", "]", ")", "\n", "coords", "[", "n", "]", "[", "p", "]", "+=", "diff", ".", "sign", "(", ")", "*", ".25", "\n", "", "", "", "preds", "=", "coords", ".", "clone", "(", ")", "\n", "\n", "# Transform back", "\n", "for", "i", "in", "range", "(", "coords", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "preds", "[", "i", "]", "=", "transform_preds", "(", "coords", "[", "i", "]", ",", "center", "[", "i", "]", ",", "scale", "[", "i", "]", ",", "res", ")", "\n", "\n", "", "if", "preds", ".", "dim", "(", ")", "<", "3", ":", "\n", "        ", "preds", "=", "preds", ".", "view", "(", "1", ",", "preds", ".", "size", "(", ")", ")", "\n", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.bboxNormMeanError": [[92, 113], ["misc.to_numpy", "misc.to_numpy", "np.array", "range", "np.sqrt", "evaluation.bboxNormMeanError.square_root"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy"], ["", "def", "bboxNormMeanError", "(", "pred", ",", "target", ")", ":", "\n", "    ", "def", "square_root", "(", "x", ")", ":", "\n", "        ", "return", "np", ".", "sqrt", "(", "x", "[", "0", "]", "*", "x", "[", "1", "]", ")", "\n", "\n", "", "pred_np", "=", "to_numpy", "(", "pred", ")", "\n", "target_np", "=", "to_numpy", "(", "target", ")", "\n", "\n", "bbox", "=", "[", "[", "np", ".", "min", "(", "target_np", "[", "i", ",", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "target_np", "[", "i", ",", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "target_np", "[", "i", ",", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "target_np", "[", "i", ",", ":", ",", "1", "]", ")", "]", "\n", "for", "i", "in", "range", "(", "target_np", ".", "shape", "[", "0", "]", ")", "]", "\n", "bbox", "=", "np", ".", "array", "(", "bbox", ")", "\n", "\n", "bbox_size", "=", "[", "square_root", "(", "bbox", "[", "i", ",", "2", ":", "4", "]", "-", "bbox", "[", "i", ",", "0", ":", "2", "]", ")", "for", "i", "in", "range", "(", "len", "(", "bbox", ")", ")", "]", "\n", "num_samples", "=", "pred_np", ".", "shape", "[", "0", "]", "\n", "num_pts", "=", "pred_np", ".", "shape", "[", "1", "]", "\n", "\n", "z_mean_gap", "=", "[", "np", ".", "mean", "(", "target_np", "[", "i", ",", ":", ",", "2", "]", ")", "-", "np", ".", "mean", "(", "pred_np", "[", "i", ",", ":", ",", "2", "]", ")", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "        ", "pred_np", "[", "i", ",", ":", ",", "2", "]", "+=", "z_mean_gap", "[", "i", "]", "\n", "\n", "", "NME", "=", "[", "np", ".", "sum", "(", "np", ".", "linalg", ".", "norm", "(", "pred_np", "[", "i", "]", "-", "target_np", "[", "i", "]", ",", "axis", "=", "1", ")", ")", "/", "(", "num_pts", "*", "bbox_size", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "return", "NME", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.p2pNormMeanError": [[114, 134], ["misc.to_numpy", "misc.to_numpy", "range", "np.linalg.norm", "np.linalg.norm", "np.sum", "range", "np.mean", "np.mean", "range", "range", "range", "np.linalg.norm"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_numpy"], ["", "def", "p2pNormMeanError", "(", "pred", ",", "target", ",", "norm_idx", "=", "None", ",", "z_zero_mean", "=", "False", ")", ":", "\n", "\n", "    ", "pred_np", "=", "to_numpy", "(", "pred", ")", "\n", "target_np", "=", "to_numpy", "(", "target", ")", "\n", "\n", "num_samples", "=", "pred_np", ".", "shape", "[", "0", "]", "\n", "num_pts", "=", "pred_np", ".", "shape", "[", "1", "]", "\n", "\n", "if", "z_zero_mean", ":", "\n", "        ", "z_mean_gap", "=", "[", "np", ".", "mean", "(", "target_np", "[", "i", ",", ":", ",", "2", "]", ")", "-", "np", ".", "mean", "(", "pred_np", "[", "i", ",", ":", ",", "2", "]", ")", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "            ", "pred_np", "[", "i", ",", ":", ",", "2", "]", "+=", "z_mean_gap", "[", "i", "]", "\n", "\n", "", "", "if", "norm_idx", "is", "not", "None", ":", "\n", "        ", "normalization", "=", "[", "np", ".", "linalg", ".", "norm", "(", "target_np", "[", "i", ",", "norm_idx", "[", "0", "]", ",", ":", "]", "-", "target_np", "[", "i", ",", "norm_idx", "[", "1", "]", ",", ":", "]", ")", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "", "else", ":", "\n", "        ", "normalization", "=", "[", "np", ".", "linalg", ".", "norm", "(", "target_np", "[", "i", ",", "36", ",", ":", "]", "-", "target_np", "[", "i", ",", "45", ",", ":", "]", ")", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "\n", "", "NME", "=", "[", "np", ".", "sum", "(", "np", ".", "linalg", ".", "norm", "(", "pred_np", "[", "i", "]", "-", "target_np", "[", "i", "]", ",", "axis", "=", "1", ")", ")", "/", "(", "num_pts", "*", "normalization", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_samples", ")", "]", "\n", "return", "NME", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.readPts": [[153, 163], ["np.array", "open", "file.readlines", "int", "range", "pts.append", "lines[].split", "float", "lines[].split"], "function", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["", "", "def", "readPts", "(", "ptspath", ")", ":", "\n", "    ", "pts", "=", "[", "]", "\n", "with", "open", "(", "ptspath", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "num_points", "=", "int", "(", "lines", "[", "1", "]", ".", "split", "(", "' '", ")", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "3", ",", "3", "+", "num_points", ")", ":", "\n", "            ", "point", "=", "[", "float", "(", "num", ")", "for", "num", "in", "lines", "[", "i", "]", ".", "split", "(", "' '", ")", "]", "\n", "pts", ".", "append", "(", "point", ")", "\n", "\n", "", "", "return", "np", ".", "array", "(", "pts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.evaluation.boundingbox": [[165, 175], ["np.array", "np.min", "np.min", "np.max", "np.max"], "function", ["None"], ["", "def", "boundingbox", "(", "target_np", ")", ":", "\n", "    ", "bbox", "=", "[", "np", ".", "min", "(", "target_np", "[", ":", ",", "0", "]", ")", ",", "np", ".", "min", "(", "target_np", "[", ":", ",", "1", "]", ")", ",", "np", ".", "max", "(", "target_np", "[", ":", ",", "0", "]", ")", ",", "np", ".", "max", "(", "target_np", "[", ":", ",", "1", "]", ")", "]", "\n", "bbox", "=", "np", ".", "array", "(", "bbox", ")", "\n", "\n", "bbox", "[", "2", ":", "4", "]", "=", "bbox", "[", "2", ":", "4", "]", "-", "bbox", "[", "0", ":", "2", "]", "\n", "\n", "center", "=", "bbox", "[", "0", ":", "2", "]", "+", "bbox", "[", "2", ":", "4", "]", "/", "2.", "\n", "scale", "=", "bbox", "[", "2", "]", "/", "200.", "\n", "\n", "return", "center", ",", "scale", ",", "bbox", "", "", ""]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.datasets.fa68pt3D.fa68pt3D.__init__": [[18, 68], ["enumerate", "len", "open", "json.load", "len", "fa68pt3D.fa68pt3D.valid.append", "fa68pt3D.fa68pt3D.train.append", "range", "range", "range", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "jsonfile", ",", "img_folder", ",", "dataset_name", ",", "inp_res", "=", "256", ",", "out_res", "=", "64", ",", "depth_res", "=", "None", ",", "train", "=", "True", ",", "jitter", "=", "False", ",", "\n", "sigma", "=", "1", ",", "c2f", "=", "True", ",", "nStack", "=", "1", ",", "scale_factor", "=", "0.08", ",", "rot_factor", "=", "10", ",", "label_type", "=", "'Gaussian'", ")", ":", "\n", "        ", "self", ".", "img_folder", "=", "img_folder", "# root image folders", "\n", "self", ".", "is_train", "=", "train", "# training set or test set", "\n", "self", ".", "jitter", "=", "jitter", "# jitter the dada", "\n", "self", ".", "inp_res", "=", "inp_res", "\n", "self", ".", "out_res", "=", "out_res", "\n", "self", ".", "depth_res", "=", "depth_res", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "rot_factor", "=", "rot_factor", "\n", "self", ".", "label_type", "=", "label_type", "\n", "self", ".", "c2f", "=", "c2f", "\n", "self", ".", "nStack", "=", "nStack", "\n", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "# self.valid_ldmk_idx = range(68)", "\n", "self", ".", "skeletons", "=", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "16", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "17", ",", "21", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "22", ",", "26", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "36", ",", "41", ")", "]", "+", "[", "[", "41", ",", "36", "]", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "42", ",", "47", ")", "]", "+", "[", "[", "47", ",", "42", "]", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "27", ",", "30", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "31", ",", "35", ")", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "48", ",", "59", ")", "]", "+", "[", "[", "59", ",", "48", "]", "]", "+", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "range", "(", "60", ",", "67", ")", "]", "+", "[", "[", "67", ",", "60", "]", "]", "\n", "\n", "self", ".", "n_joints", "=", "71", "# 68 points plus eye and mouth center", "\n", "\n", "# turn off c2f if depth_res is not provided", "\n", "if", "depth_res", "is", "None", ":", "\n", "            ", "self", ".", "depth_res", "=", "[", "self", ".", "out_res", "]", "\n", "self", ".", "c2f", "=", "False", "\n", "# self.depth_res = 60", "\n", "", "if", "len", "(", "self", ".", "depth_res", ")", "==", "1", ":", "\n", "                ", "self", ".", "c2f", "=", "False", "\n", "\n", "", "if", "self", ".", "c2f", ":", "\n", "            ", "assert", "len", "(", "self", ".", "depth_res", ")", "==", "self", ".", "nStack", "\n", "\n", "# create train/val split", "\n", "", "with", "open", "(", "jsonfile", ")", "as", "anno_file", ":", "\n", "            ", "self", ".", "anno", "=", "json", ".", "load", "(", "anno_file", ")", "\n", "\n", "", "self", ".", "train", ",", "self", ".", "valid", "=", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "self", ".", "anno", ")", ":", "\n", "            ", "if", "val", "[", "'isValidation'", "]", "==", "True", ":", "\n", "                ", "self", ".", "valid", ".", "append", "(", "idx", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train", ".", "append", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.datasets.fa68pt3D.fa68pt3D.__getitem__": [[74, 165], ["os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "load_image", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "crop", "shufflelr.clone", "range", "range", "img[].add_().clamp_", "img[].add_().clamp_", "img[].add_().clamp_", "shufflelr.clone.size", "to_torch", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "shufflelr.clone", "range", "target.append", "random.random", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "shufflelr", "eye_left.view", "eye_right.view", "mouth_center.view", "transform3d", "shufflelr.clone.size", "torch.randn().mul_().add_().clamp", "torch.randn().mul_().add_().clamp", "torch.randn().mul_().add_().clamp", "torch.randn().mul_().add_().clamp", "random.random", "torch.randn().mul_().clamp", "torch.randn().mul_().clamp", "torch.randn().mul_().clamp", "torch.randn().mul_().clamp", "torch.from_numpy().float.size", "torch.from_numpy().float.size", "img[].add_", "img[].add_", "img[].add_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "to_torch", "draw_labelvolume", "torch.max", "torch.max", "torch.max", "torch.max", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float.size", "torch.from_numpy().float.size", "random.uniform", "random.uniform", "random.uniform", "transform3d", "draw_labelvolume.float", "torch.randn().mul_().add_", "torch.randn().mul_().add_", "torch.randn().mul_().add_", "torch.randn().mul_().add_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "fliplr", "torch.from_numpy().float.numpy", "torch.from_numpy().float.numpy", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn().mul_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.join", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.load_image", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.crop", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.shufflelr", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform3d", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.to_torch", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.imutils.draw_labelvolume", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.transform3d", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.transforms.fliplr"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "sf", "=", "self", ".", "scale_factor", "\n", "rf", "=", "self", ".", "rot_factor", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "a", "=", "self", ".", "anno", "[", "self", ".", "train", "[", "index", "]", "]", "\n", "", "else", ":", "\n", "            ", "a", "=", "self", ".", "anno", "[", "self", ".", "valid", "[", "index", "]", "]", "\n", "\n", "", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_folder", ",", "a", "[", "'img_paths'", "]", ")", "\n", "pts", "=", "torch", ".", "Tensor", "(", "a", "[", "'landmarks'", "]", ")", "\n", "pts", "[", ":", ",", "2", "]", "=", "-", "pts", "[", ":", ",", "2", "]", "# flip z value", "\n", "pts", "[", ":", ",", "2", "]", "-=", "torch", ".", "mean", "(", "pts", "[", ":", ",", "2", "]", ")", "# zero z-axis mean", "\n", "# face_center3D = (pts[2] + pts[15] + pts[33]) / 3", "\n", "# pts[:, 2] -= face_center3D[2]", "\n", "# pts[:, 0:2] -= 1  # Convert pts to zero based", "\n", "\n", "# c = torch.Tensor(a['objpos']) - 1", "\n", "c", "=", "torch", ".", "Tensor", "(", "a", "[", "'objpos'", "]", ")", "\n", "s", "=", "a", "[", "'scale_provided'", "]", "\n", "\n", "# Adjust center/scale slightly to avoid cropping limbs", "\n", "if", "c", "[", "0", "]", "!=", "-", "1", ":", "\n", "# c[1] = c[1] + 15 * s", "\n", "            ", "s", "=", "s", "*", "1.25", "\n", "\n", "# For single-person pose estimation with a centered/scaled figure", "\n", "", "img", "=", "load_image", "(", "img_path", ")", "# CxHxW", "\n", "\n", "r", "=", "0", "\n", "if", "self", ".", "jitter", ":", "\n", "            ", "s", "=", "s", "*", "torch", ".", "randn", "(", "1", ")", ".", "mul_", "(", "sf", ")", ".", "add_", "(", "1", ")", ".", "clamp", "(", "1", "-", "sf", ",", "1", "+", "sf", ")", "[", "0", "]", "\n", "r", "=", "torch", ".", "randn", "(", "1", ")", ".", "mul_", "(", "rf", ")", ".", "clamp", "(", "-", "2", "*", "rf", ",", "2", "*", "rf", ")", "[", "0", "]", "if", "random", ".", "random", "(", ")", "<=", "0.6", "else", "0", "\n", "\n", "# Flip", "\n", "if", "random", ".", "random", "(", ")", "<=", "0.5", ":", "\n", "                ", "img", "=", "torch", ".", "from_numpy", "(", "fliplr", "(", "img", ".", "numpy", "(", ")", ")", ")", ".", "float", "(", ")", "\n", "pts", "=", "shufflelr", "(", "pts", ",", "width", "=", "img", ".", "size", "(", "2", ")", ",", "dataset", "=", "self", ".", "dataset_name", ")", "\n", "c", "[", "0", "]", "=", "img", ".", "size", "(", "2", ")", "-", "c", "[", "0", "]", "\n", "\n", "# Color", "\n", "", "img", "[", "0", ",", ":", ",", ":", "]", ".", "add_", "(", "random", ".", "uniform", "(", "-", "0.3", ",", "0.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "img", "[", "1", ",", ":", ",", ":", "]", ".", "add_", "(", "random", ".", "uniform", "(", "-", "0.3", ",", "0.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "img", "[", "2", ",", ":", ",", ":", "]", ".", "add_", "(", "random", ".", "uniform", "(", "-", "0.3", ",", "0.3", ")", ")", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "# augment landmarks based aflw protocol", "\n", "", "mouth_center", "=", "(", "pts", "[", "62", ",", ":", "]", "+", "pts", "[", "66", ",", ":", "]", ")", "/", "2", "\n", "eye_left", "=", "(", "pts", "[", "37", ",", ":", "]", "+", "pts", "[", "38", ",", ":", "]", "+", "pts", "[", "40", ",", ":", "]", "+", "pts", "[", "41", ",", ":", "]", ")", "/", "4", "\n", "eye_right", "=", "(", "pts", "[", "43", ",", ":", "]", "+", "pts", "[", "44", ",", ":", "]", "+", "pts", "[", "46", ",", ":", "]", "+", "pts", "[", "47", ",", ":", "]", ")", "/", "4", "\n", "\n", "pts", "=", "torch", ".", "cat", "(", "\n", "(", "pts", ",", "eye_left", ".", "view", "(", "1", ",", "-", "1", ")", ",", "eye_right", ".", "view", "(", "1", ",", "-", "1", ")", ",", "mouth_center", ".", "view", "(", "1", ",", "-", "1", ")", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# show_joints(img, pts[:, :2], show_idx=True)", "\n", "# nparts = pts.size(0)", "\n", "\n", "# Prepare image and groundtruth map", "\n", "inp", "=", "crop", "(", "img", ",", "c", ",", "s", ",", "[", "self", ".", "inp_res", ",", "self", ".", "inp_res", "]", ",", "rot", "=", "r", ")", "\n", "tpts_inp", "=", "pts", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "tpts_inp", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "tpts_inp", "[", "i", ",", "0", ":", "3", "]", "=", "to_torch", "(", "transform3d", "(", "tpts_inp", "[", "i", ",", "0", ":", "3", "]", "+", "1", ",", "c", ",", "s", ",", "[", "self", ".", "inp_res", ",", "self", ".", "inp_res", "]", ",", "\n", "self", ".", "inp_res", ",", "rot", "=", "r", ")", ")", "\n", "\n", "# Generate ground truth", "\n", "", "target", "=", "[", "]", "\n", "vox_idx", "=", "range", "(", "self", ".", "nStack", ")", "if", "self", ".", "c2f", "else", "[", "-", "1", "]", "\n", "# target = torch.FloatTensor()", "\n", "\n", "# compact volume", "\n", "for", "i", "in", "range", "(", "self", ".", "nStack", ")", ":", "\n", "            ", "target_i", "=", "torch", ".", "zeros", "(", "self", ".", "depth_res", "[", "i", "]", ",", "self", ".", "out_res", ",", "self", ".", "out_res", ")", "\n", "tpts", "=", "pts", ".", "clone", "(", ")", "\n", "for", "j", "in", "range", "(", "tpts", ".", "size", "(", "0", ")", ")", ":", "\n", "# if tpts[j, 2] > 0: # This is evil!!", "\n", "                ", "if", "tpts", "[", "j", ",", "0", "]", ">", "0", ":", "\n", "                    ", "target_j", "=", "torch", ".", "zeros", "(", "self", ".", "depth_res", "[", "i", "]", ",", "self", ".", "out_res", ",", "self", ".", "out_res", ")", "\n", "tpts", "[", "j", ",", "0", ":", "3", "]", "=", "to_torch", "(", "transform3d", "(", "tpts", "[", "j", ",", "0", ":", "3", "]", "+", "1", ",", "c", ",", "s", ",", "[", "self", ".", "out_res", ",", "self", ".", "out_res", "]", ",", "\n", "self", ".", "depth_res", "[", "i", "]", ",", "rot", "=", "r", ")", ")", "\n", "target_j", "=", "draw_labelvolume", "(", "target_j", ",", "tpts", "[", "j", "]", "-", "1", ",", "self", ".", "sigma", ",", "type", "=", "self", ".", "label_type", ")", "\n", "target_i", "=", "torch", ".", "max", "(", "target_i", ",", "target_j", ".", "float", "(", ")", ")", "\n", "\n", "", "", "target", ".", "append", "(", "target_i", ")", "\n", "# target = torch.cat((target, target_i))", "\n", "\n", "# Meta info", "\n", "", "meta", "=", "{", "'dataset'", ":", "self", ".", "dataset_name", ",", "\n", "# 'valid_idx': self.valid_ldmk_idx,", "\n", "'index'", ":", "index", ",", "'center'", ":", "c", ",", "'scale'", ":", "s", ",", "\n", "'pts'", ":", "pts", ",", "'tpts'", ":", "tpts", ",", "'tpts_inp'", ":", "tpts_inp", ",", "\n", "'skeletons'", ":", "self", ".", "skeletons", "}", "\n", "\n", "return", "inp", ",", "target", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.datasets.fa68pt3D.fa68pt3D.__len__": [[166, 171], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "valid", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.pix2vox2coord.pvcNet.__init__": [[14, 52], ["torch.Module.__init__", "dict", "float", "print", "hourglass.HourglassNet", "coordRegressor.coordRegressor.coordRegressor", "print", "print", "len", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "set", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "sum", "sum", "p.numel", "p.numel", "pix2vox2coord.pvcNet.pix2vox.parameters", "pix2vox2coord.pvcNet.vox2coord.parameters"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.coordRegressor.coordRegressor.__init__"], ["def", "__init__", "(", "self", ",", "stacks", ",", "blocks", ",", "depth_res", ",", "nParts", ",", "\n", "resume_p2v2c", "=", "None", ",", "resume_p2v", "=", "None", ",", "resume_v2c", "=", "None", ",", "is_cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "pvcNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_stacks", "=", "stacks", "\n", "self", ".", "num_blocks", "=", "blocks", "\n", "self", ".", "depth_res", "=", "depth_res", "\n", "self", ".", "nParts", "=", "nParts", "\n", "\n", "self", ".", "resume", "=", "dict", "(", ")", "\n", "self", ".", "resume", "[", "'p2v2c'", "]", "=", "resume_p2v2c", "\n", "self", ".", "resume", "[", "'p2v'", "]", "=", "resume_p2v", "\n", "self", ".", "resume", "[", "'v2c'", "]", "=", "resume_v2c", "\n", "self", ".", "is_cuda", "=", "is_cuda", "\n", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "best_acc", "=", "float", "(", "'-inf'", ")", "\n", "self", ".", "current_acc", "=", "-", "0", "\n", "\n", "if", "len", "(", "set", "(", "self", ".", "depth_res", ")", ")", "==", "1", ":", "\n", "            ", "self", ".", "c2f", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "c2f", "=", "True", "\n", "\n", "", "print", "(", "'coarse to fine mode: {}'", ".", "format", "(", "self", ".", "c2f", ")", ")", "\n", "\n", "pix2vox", "=", "HourglassNet", "(", "Bottleneck", ",", "self", ".", "num_stacks", ",", "self", ".", "num_blocks", ",", "self", ".", "depth_res", ")", "\n", "vox2coord", "=", "coordRegressor", "(", "self", ".", "nParts", ")", "\n", "\n", "if", "self", ".", "is_cuda", ":", "\n", "            ", "self", ".", "pix2vox", "=", "torch", ".", "nn", ".", "DataParallel", "(", "pix2vox", ")", ".", "cuda", "(", ")", "\n", "self", ".", "vox2coord", "=", "torch", ".", "nn", ".", "DataParallel", "(", "vox2coord", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pix2vox", "=", "pix2vox", "\n", "self", ".", "vox2coord", "=", "vox2coord", "\n", "\n", "", "print", "(", "'    p2v params: %.2fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "pix2vox", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "print", "(", "'    v2c params: %.2fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "vox2coord", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.pix2vox2coord.pvcNet.forward": [[54, 60], ["pix2vox2coord.pvcNet.pix2vox", "vox_list[].unsqueeze", "pix2vox2coord.pvcNet.vox2coord", "output_v2c[].view", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "vox_list", "=", "self", ".", "pix2vox", "(", "x", ")", "\n", "voxel", "=", "vox_list", "[", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "output_v2c", "=", "self", ".", "vox2coord", "(", "voxel", ")", "\n", "coord", "=", "output_v2c", "[", "-", "1", "]", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "3", ")", "\n", "return", "vox_list", ",", "voxel", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.pix2vox2coord.pvcNet.landmarkDetection": [[62, 70], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "pix2vox2coord.pvcNet.forward", "coord.squeeze"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.coordRegressor.coordRegressor.forward"], ["", "def", "landmarkDetection", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "\n", "        ", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "image", ",", "volatile", "=", "True", ")", "\n", "vox_list", ",", "voxel", ",", "coord", "=", "self", ".", "forward", "(", "input_var", ")", "\n", "\n", "pred_coord", "=", "255", "*", "coord", ".", "squeeze", "(", "0", ")", "\n", "\n", "return", "vox_list", ",", "pred_coord", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.pix2vox2coord.pvcNet.resume_from_checkpoint": [[72, 102], ["utils.osutils.isfile", "print", "print", "utils.osutils.isfile", "utils.osutils.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "pix2vox2coord.pvcNet.pix2vox.load_state_dict", "pix2vox2coord.pvcNet.vox2coord.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "pix2vox2coord.pvcNet.pix2vox.load_state_dict", "pix2vox2coord.pvcNet.vox2coord.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "pix2vox2coord.pvcNet.pix2vox.load_state_dict", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "pix2vox2coord.pvcNet.vox2coord.load_state_dict", "print", "checkpoint_p2v2c[].items", "checkpoint_p2v2c[].items"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.isfile", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.isfile", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.osutils.isfile"], ["", "def", "resume_from_checkpoint", "(", "self", ")", ":", "\n", "        ", "if", "isfile", "(", "self", ".", "resume", "[", "'p2v2c'", "]", ")", ":", "\n", "            ", "print", "(", "\"=> loading p2v2c checkpoint '{}'\"", ".", "format", "(", "self", ".", "resume", "[", "'p2v2c'", "]", ")", ")", "\n", "if", "self", ".", "is_cuda", ":", "\n", "                ", "checkpoint_p2v2c", "=", "torch", ".", "load", "(", "self", ".", "resume", "[", "'p2v2c'", "]", ")", "\n", "self", ".", "pix2vox", ".", "load_state_dict", "(", "checkpoint_p2v2c", "[", "'state_dict_p2v'", "]", ")", "\n", "self", ".", "vox2coord", ".", "load_state_dict", "(", "checkpoint_p2v2c", "[", "'state_dict_v2c'", "]", ")", "\n", "", "else", ":", "\n", "# load onto the CPU", "\n", "                ", "checkpoint_p2v2c", "=", "torch", ".", "load", "(", "self", ".", "resume", "[", "'p2v2c'", "]", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "# remove module. from dict keys", "\n", "checkpoint_p2v", "=", "{", "k", "[", "7", ":", "]", ":", "v", "for", "k", ",", "v", "in", "checkpoint_p2v2c", "[", "'state_dict_p2v'", "]", ".", "items", "(", ")", "}", "\n", "checkpoint_v2c", "=", "{", "k", "[", "7", ":", "]", ":", "v", "for", "k", ",", "v", "in", "checkpoint_p2v2c", "[", "'state_dict_v2c'", "]", ".", "items", "(", ")", "}", "\n", "self", ".", "pix2vox", ".", "load_state_dict", "(", "checkpoint_p2v", ")", "\n", "self", ".", "vox2coord", ".", "load_state_dict", "(", "checkpoint_v2c", ")", "\n", "", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "self", ".", "resume", "[", "'p2v2c'", "]", ")", ")", "\n", "", "else", ":", "\n", "# load pixel2voxel model", "\n", "            ", "if", "isfile", "(", "self", ".", "resume", "[", "'p2v'", "]", ")", ":", "\n", "                ", "print", "(", "\"=> loading p2v checkpoint '{}'\"", ".", "format", "(", "self", ".", "resume", "[", "'p2v'", "]", ")", ")", "\n", "checkpoint_p2v", "=", "torch", ".", "load", "(", "self", ".", "resume", "[", "'p2v'", "]", ")", "\n", "self", ".", "pix2vox", ".", "load_state_dict", "(", "checkpoint_p2v", "[", "'state_dict_p2v'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "self", ".", "resume", "[", "'p2v'", "]", ")", ")", "\n", "\n", "# load vox2coord model", "\n", "", "if", "isfile", "(", "self", ".", "resume", "[", "'v2c'", "]", ")", ":", "\n", "                ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "self", ".", "resume", "[", "'v2c'", "]", ")", ")", "\n", "checkpoint_v2c", "=", "torch", ".", "load", "(", "self", ".", "resume", "[", "'v2c'", "]", ")", "\n", "self", ".", "vox2coord", ".", "load_state_dict", "(", "checkpoint_v2c", "[", "'state_dict_v2c'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}'\"", ".", "format", "(", "self", ".", "resume", "[", "'v2c'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.pix2vox2coord.pvcNet.save_to_checkpoint": [[104, 116], ["utils.misc.save_checkpoint", "print", "pix2vox2coord.pvcNet.pix2vox.state_dict", "pix2vox2coord.pvcNet.vox2coord.state_dict"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.misc.save_checkpoint"], ["", "", "", "def", "save_to_checkpoint", "(", "self", ",", "predictions", ",", "checkpoint", ",", "snapshot", "=", "1", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "is_best", "=", "self", ".", "current_acc", ">", "self", ".", "best_acc", "\n", "if", "is_best", ":", "\n", "            ", "print", "(", "'new record:{}'", ".", "format", "(", "self", ".", "current_acc", ")", ")", "\n", "self", ".", "best_acc", "=", "self", ".", "current_acc", "\n", "", "save_checkpoint", "(", "{", "\n", "'arch'", ":", "'p2v2c'", ",", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'state_dict_p2v'", ":", "self", ".", "pix2vox", ".", "state_dict", "(", ")", ",", "\n", "'state_dict_v2c'", ":", "self", ".", "vox2coord", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "predictions", ",", "is_best", ",", "checkpoint", "=", "checkpoint", ",", "snapshot", "=", "snapshot", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Bottleneck.__init__": [[17, 30], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.coordRegressor.coordRegressor.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "2", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Bottleneck.forward": [[31, 52], ["hourglass.Bottleneck.bn1", "hourglass.Bottleneck.relu", "hourglass.Bottleneck.conv1", "hourglass.Bottleneck.bn2", "hourglass.Bottleneck.relu", "hourglass.Bottleneck.conv2", "hourglass.Bottleneck.bn3", "hourglass.Bottleneck.relu", "hourglass.Bottleneck.conv3", "hourglass.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Hourglass.__init__": [[55, 61], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "hourglass.Hourglass._make_hour_glass"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.coordRegressor.coordRegressor.__init__", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Hourglass._make_hour_glass"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "planes", ",", "depth", ")", ":", "\n", "        ", "super", "(", "Hourglass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "block", "=", "block", "\n", "self", ".", "upsample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "hg", "=", "self", ".", "_make_hour_glass", "(", "block", ",", "num_blocks", ",", "planes", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Hourglass._make_residual": [[62, 67], ["range", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["", "def", "_make_residual", "(", "self", ",", "block", ",", "num_blocks", ",", "planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", "*", "block", ".", "expansion", ",", "planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Hourglass._make_hour_glass": [[68, 78], ["range", "torch.ModuleList", "torch.ModuleList", "range", "hg.append", "res.append", "res.append", "torch.ModuleList", "torch.ModuleList", "hourglass.Hourglass._make_residual", "hourglass.Hourglass._make_residual"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_residual", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_residual"], ["", "def", "_make_hour_glass", "(", "self", ",", "block", ",", "num_blocks", ",", "planes", ",", "depth", ")", ":", "\n", "        ", "hg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "depth", ")", ":", "\n", "            ", "res", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_residual", "(", "block", ",", "num_blocks", ",", "planes", ")", ")", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "res", ".", "append", "(", "self", ".", "_make_residual", "(", "block", ",", "num_blocks", ",", "planes", ")", ")", "\n", "", "hg", ".", "append", "(", "nn", ".", "ModuleList", "(", "res", ")", ")", "\n", "", "return", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Hourglass._hour_glass_forward": [[79, 92], ["torch.max_pool2d", "torch.max_pool2d", "hourglass.Hourglass.upsample", "hourglass.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Hourglass._hour_glass_forward"], ["", "def", "_hour_glass_forward", "(", "self", ",", "n", ",", "x", ")", ":", "\n", "        ", "up1", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "0", "]", "(", "x", ")", "\n", "low1", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "stride", "=", "2", ")", "\n", "low1", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "1", "]", "(", "low1", ")", "\n", "\n", "if", "n", ">", "1", ":", "\n", "            ", "low2", "=", "self", ".", "_hour_glass_forward", "(", "n", "-", "1", ",", "low1", ")", "\n", "", "else", ":", "\n", "            ", "low2", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "3", "]", "(", "low1", ")", "\n", "", "low3", "=", "self", ".", "hg", "[", "n", "-", "1", "]", "[", "2", "]", "(", "low2", ")", "\n", "up2", "=", "self", ".", "upsample", "(", "low3", ")", "\n", "out", "=", "up1", "+", "up2", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Hourglass.forward": [[93, 95], ["hourglass.Hourglass._hour_glass_forward"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.Hourglass._hour_glass_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_hour_glass_forward", "(", "self", ".", "depth", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet.__init__": [[99, 136], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "hourglass.HourglassNet._make_residual", "hourglass.HourglassNet._make_residual", "hourglass.HourglassNet._make_residual", "torch.MaxPool2d", "torch.MaxPool2d", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "len", "hg.append", "res.append", "fc.append", "score.append", "hourglass.Hourglass", "hourglass.HourglassNet._make_residual", "hourglass.HourglassNet._make_fc", "torch.Conv2d", "torch.Conv2d", "fc_.append", "score_.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.coordRegressor.coordRegressor.__init__", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_residual", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_residual", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_residual", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_residual", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_fc", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["def", "__init__", "(", "self", ",", "block", ",", "num_stacks", "=", "2", ",", "num_blocks", "=", "4", ",", "num_classes", "=", "[", "16", "]", ")", ":", "\n", "        ", "super", "(", "HourglassNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "num_feats", "=", "128", "\n", "self", ".", "num_stacks", "=", "num_stacks", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "True", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_residual", "(", "block", ",", "self", ".", "inplanes", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_residual", "(", "block", ",", "self", ".", "inplanes", ",", "1", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_residual", "(", "block", ",", "self", ".", "num_feats", ",", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", "\n", "if", "len", "(", "num_classes", ")", "==", "1", ":", "\n", "            ", "num_classes", "=", "num_classes", "*", "num_stacks", "\n", "\n", "", "assert", "len", "(", "num_classes", ")", "==", "num_stacks", "\n", "\n", "# build hourglass modules", "\n", "ch", "=", "self", ".", "num_feats", "*", "block", ".", "expansion", "\n", "hg", ",", "res", ",", "fc", ",", "score", ",", "fc_", ",", "score_", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "num_stacks", ")", ":", "\n", "            ", "hg", ".", "append", "(", "Hourglass", "(", "block", ",", "num_blocks", ",", "self", ".", "num_feats", ",", "4", ")", ")", "\n", "res", ".", "append", "(", "self", ".", "_make_residual", "(", "block", ",", "self", ".", "num_feats", ",", "num_blocks", ")", ")", "\n", "fc", ".", "append", "(", "self", ".", "_make_fc", "(", "ch", ",", "ch", ")", ")", "\n", "score", ".", "append", "(", "nn", ".", "Conv2d", "(", "ch", ",", "num_classes", "[", "i", "]", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "if", "i", "<", "num_stacks", "-", "1", ":", "\n", "                ", "fc_", ".", "append", "(", "nn", ".", "Conv2d", "(", "ch", ",", "ch", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "score_", ".", "append", "(", "nn", ".", "Conv2d", "(", "num_classes", "[", "i", "]", ",", "ch", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ")", "\n", "", "", "self", ".", "hg", "=", "nn", ".", "ModuleList", "(", "hg", ")", "\n", "self", ".", "res", "=", "nn", ".", "ModuleList", "(", "res", ")", "\n", "self", ".", "fc", "=", "nn", ".", "ModuleList", "(", "fc", ")", "\n", "self", ".", "score", "=", "nn", ".", "ModuleList", "(", "score", ")", "\n", "self", ".", "fc_", "=", "nn", ".", "ModuleList", "(", "fc_", ")", "\n", "self", ".", "score_", "=", "nn", ".", "ModuleList", "(", "score_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_residual": [[137, 152], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "block"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["", "def", "_make_residual", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet._make_fc": [[153, 160], ["torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "def", "_make_fc", "(", "self", ",", "inplanes", ",", "outplanes", ")", ":", "\n", "        ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "outplanes", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "return", "nn", ".", "Sequential", "(", "\n", "conv", ",", "\n", "bn", ",", "\n", "self", ".", "relu", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.HourglassNet.forward": [[162, 185], ["hourglass.HourglassNet.conv1", "hourglass.HourglassNet.bn1", "hourglass.HourglassNet.relu", "hourglass.HourglassNet.layer1", "hourglass.HourglassNet.maxpool", "hourglass.HourglassNet.layer2", "hourglass.HourglassNet.layer3", "range", "out.append"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stacks", ")", ":", "\n", "            ", "y", "=", "self", ".", "hg", "[", "i", "]", "(", "x", ")", "\n", "y", "=", "self", ".", "res", "[", "i", "]", "(", "y", ")", "\n", "y", "=", "self", ".", "fc", "[", "i", "]", "(", "y", ")", "\n", "score", "=", "self", ".", "score", "[", "i", "]", "(", "y", ")", "\n", "out", ".", "append", "(", "score", ")", "\n", "if", "i", "<", "self", ".", "num_stacks", "-", "1", ":", "\n", "                ", "fc_", "=", "self", ".", "fc_", "[", "i", "]", "(", "y", ")", "\n", "score_", "=", "self", ".", "score_", "[", "i", "]", "(", "score", ")", "\n", "x", "=", "x", "+", "fc_", "+", "score_", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.hourglass.hg": [[187, 191], ["hourglass.HourglassNet"], "function", ["None"], ["", "", "def", "hg", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "HourglassNet", "(", "Bottleneck", ",", "num_stacks", "=", "kwargs", "[", "'num_stacks'", "]", ",", "num_blocks", "=", "kwargs", "[", "'num_blocks'", "]", ",", "\n", "num_classes", "=", "kwargs", "[", "'out_channels'", "]", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.coordRegressor.coordRegressor.__init__": [[5, 35], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.Linear", "encoder_.append", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.coordRegressor.coordRegressor.__init__", "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.utils.logger.Logger.append"], ["    ", "def", "__init__", "(", "self", ",", "nParts", ")", ":", "#, input_size, feat_size, output_size):", "\n", "        ", "super", "(", "coordRegressor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nParts", "=", "nParts", "\n", "self", ".", "depth", "=", "5", "\n", "in_ch", "=", "[", "1", ",", "64", ",", "128", ",", "256", ",", "512", "]", "\n", "out_ch", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "256", "]", "\n", "ec_k", "=", "[", "4", ",", "4", ",", "4", ",", "4", ",", "4", "]", "\n", "ec_s", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "1", "]", "\n", "ec_p", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", "\n", "encoder_", "=", "[", "]", "\n", "\n", "# encoder", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "if", "i", "<", "self", ".", "depth", "-", "1", ":", "\n", "                ", "layer_i", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_ch", "[", "i", "]", ",", "out_ch", "[", "i", "]", ",", "kernel_size", "=", "ec_k", "[", "i", "]", ",", "stride", "=", "ec_s", "[", "i", "]", ",", "padding", "=", "ec_p", "[", "i", "]", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_ch", "[", "i", "]", ")", ",", "\n", "# nn.ReLU(inplace=True)", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "layer_i", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_ch", "[", "i", "]", ",", "out_ch", "[", "i", "]", ",", "kernel_size", "=", "ec_k", "[", "i", "]", ",", "stride", "=", "ec_s", "[", "i", "]", ",", "padding", "=", "ec_p", "[", "i", "]", ")", ",", "\n", "# nn.ReLU(inplace=True)", "\n", "# nn.Sigmoid()", "\n", ")", "\n", "", "encoder_", ".", "append", "(", "layer_i", ")", "\n", "", "self", ".", "encoder", "=", "nn", ".", "ModuleList", "(", "encoder_", ")", "\n", "\n", "self", ".", "fc_cord", "=", "nn", ".", "Linear", "(", "out_ch", "[", "-", "1", "]", ",", "self", ".", "nParts", "*", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.HongwenZhang_JVCR-3Dlandmark.models.coordRegressor.coordRegressor.forward": [[37, 46], ["range", "feat.view", "coordRegressor.coordRegressor.fc_cord", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feat", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "feat", "=", "self", ".", "encoder", "[", "i", "]", "(", "feat", ")", "\n", "\n", "", "embedding", "=", "feat", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "cord", "=", "self", ".", "fc_cord", "(", "embedding", ")", "\n", "\n", "return", "feat", ",", "embedding", ",", "cord", "\n", "", "", ""]]}