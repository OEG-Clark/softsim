{"home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.applications.demo.Hello.run": [[21, 41], ["print", "ValueError"], "methods", ["None"], ["def", "run", "(", "self", ",", "name", "=", "\"World\"", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\u4e3b\u5165\u53e3\u65b9\u6cd5\u3002\n\n        \u6839\u636e\u767e\u5ea6python\u7f16\u7801\u89c4\u8303\uff0c\u6ce8\u91ca\u5e94\u5f53\u4f7f\u7528google\u98ce\u683c\u3002\n        \u53ef\u4ee5\u4f7f\u7528sphinx\u914d\u5408napoleon\u6269\u5c55\u63d2\u4ef6\u81ea\u52a8\u751f\u6210\u6587\u6863\u3002\n\n        Args:\n            name: \u540d\u79f0\n\n        Returns:\n            int\u7c7b\u578b\uff0c\u6267\u884c\u7ed3\u679c\uff0c0\u8868\u793a\u6210\u529f\n\n        Raises:\n            ValueError: \u53c2\u6570name\u7684\u53d6\u503c\u4e0d\u5408\u6cd5\n        \"\"\"", "\n", "if", "not", "name", ":", "\n", "            ", "raise", "ValueError", "(", "name", ")", "\n", "\n", "", "print", "(", "\"Hello {0}!\"", ".", "format", "(", "name", ")", ")", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.applications.cmdline.main": [[24, 34], ["demo.Hello", "demo.Hello.run"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["def", "main", "(", "args", "=", "None", ")", ":", "\n", "    ", "\"\"\"\u4e3b\u7a0b\u5e8f\u5165\u53e3\"\"\"", "\n", "from", ".", "import", "demo", "\n", "if", "args", "is", "None", ":", "\n", "# \u5982\u679c\u672a\u4f20\u5165\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u5219\u76f4\u63a5\u4ecesys\u4e2d\u8bfb\u53d6\uff0c\u5e76\u8fc7\u6ee4\u6389\u7b2c0\u4f4d\u7684\u5165\u53e3\u6587\u4ef6\u540d", "\n", "        ", "import", "sys", "\n", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "\n", "", "hello", "=", "demo", ".", "Hello", "(", ")", "\n", "return", "hello", ".", "run", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.run_preprocess.run_with_preprocess.process_trainer": [[23, 39], ["logging.info", "open", "os.path.join", "subprocess.Popen", "subprocess.Popen.wait", "logging.info", "os.path.abspath", "os.path.dirname", "str"], "function", ["None"], ["def", "process_trainer", "(", "train_json_file", ",", "trainer_id", ",", "run_script", ")", ":", "\n", "    ", "\"\"\"\n    :param train_json_file:\n    :param trainer_id:\n    :param run_script:\n    :return:\n    \"\"\"", "\n", "env", "=", "os", ".", "environ", "\n", "logging", ".", "info", "(", "'process_trainer: '", "+", "train_json_file", ")", "\n", "fn", "=", "open", "(", "\"./log/trainer.log.%d\"", "%", "(", "trainer_id", ")", ",", "\"a\"", ")", "\n", "run_py_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", ",", "run_script", ")", "\n", "cmd", "=", "sys", ".", "executable", "+", "\" \"", "+", "run_py_path", "+", "' --param_path='", "+", "train_json_file", "\n", "current_process", "=", "subprocess", ".", "Popen", "(", "cmd", ",", "close_fds", "=", "True", ",", "preexec_fn", "=", "os", ".", "setsid", ",", "shell", "=", "True", ",", "env", "=", "env", ",", "\n", "stdout", "=", "fn", ",", "stderr", "=", "fn", ")", "\n", "current_process", ".", "wait", "(", ")", "\n", "logging", ".", "info", "(", "\"process trainer errcode is \"", "+", "str", "(", "current_process", ".", "returncode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.run_preprocess.pretreatment.get_list_params": [[15, 38], ["params.items", "isinstance", "combination_list.append", "one_keys.append"], "function", ["None"], ["def", "get_list_params", "(", "params", ")", ":", "\n", "    ", "\"\"\"\n    \u5904\u7406value\u4e3alist\u7684params\uff0c\u5c06\u5176\u62c6\u5206\u4e3adict\u5e76\u653e\u5165\u4e00\u4e2alist\u4e2d\n    :param params: \u5f85\u5904\u7406\u7684\u53c2\u6570\n    :return: combination_list, single_param_dict\n    Example\n    --------\n    params={key1:[values1, value2], key2:[value1, value2, value3]}\n    combination_list\u683c\u5f0f[[{key1:value1}, {key1:value2}],[{key2:value1}, {key2:value2}, {key2:value3}]],\n    single_param_dict:\u9664\u53bb\u4f20\u5165\u7684dict\u4e2d\u4e0d\u4e3alist\u683c\u5f0f\u7684value\n    \"\"\"", "\n", "combination_list", "=", "[", "]", "\n", "single_param_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "            ", "one_keys", "=", "[", "]", "\n", "for", "v", "in", "value", ":", "\n", "                ", "item", "=", "{", "key", ":", "v", "}", "\n", "one_keys", ".", "append", "(", "item", ")", "\n", "", "combination_list", ".", "append", "(", "one_keys", ")", "\n", "", "else", ":", "\n", "            ", "single_param_dict", "[", "key", "]", "=", "value", "\n", "", "", "return", "combination_list", ",", "single_param_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.run_preprocess.pretreatment.build_grid_search_config": [[40, 82], ["params_dict.get", "params_dict.get.get", "params_dict.get().get().get", "itertools.product", "ValueError", "ValueError", "pretreatment.get_list_params", "all_combination_list.extend", "all_single_param_dict.append", "dict_list_key_num.append", "copy.deepcopy", "enumerate", "task_param_list.append", "params_dict.get().get", "len", "copy.deepcopy", "need_update_param[].update", "copy.deepcopy.update", "params_dict.get"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.run_preprocess.pretreatment.get_list_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "build_grid_search_config", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    \u4f20\u5165\u4e00\u4e2ajson\uff0c\u6309\u7f51\u683c\u641c\u7d22\u7684\u65b9\u5f0f\u6784\u9020\u51fa\u7b26\u5408\u6761\u4ef6\u7684N\u4e2ajson, \u76ee\u524d\u7f51\u683c\u641c\u7d22\u53ea\u4f5c\u7528\u5728optimization\u8303\u56f4\u5185\n    :param params_dict:\n    :return: param_config_list\n    \"\"\"", "\n", "model_params_dict", "=", "params_dict", ".", "get", "(", "\"model\"", ")", "\n", "opt_params", "=", "model_params_dict", ".", "get", "(", "\"optimization\"", ",", "None", ")", "\n", "if", "not", "opt_params", ":", "\n", "        ", "raise", "ValueError", "(", "\"optimization's params can't be none\"", ")", "\n", "# \u83b7\u53d6\u5f85\u7f51\u683c\u641c\u7d22\u7684dict", "\n", "", "train_data_params", "=", "params_dict", ".", "get", "(", "\"dataset_reader\"", ")", ".", "get", "(", "\"train_reader\"", ")", ".", "get", "(", "\"config\"", ",", "None", ")", "\n", "if", "not", "train_data_params", ":", "\n", "        ", "raise", "ValueError", "(", "\"train_reader config's params can't be none\"", ")", "\n", "\n", "# \u5728need_operate_params\u4e2d\u52a0\u5165\u5f85\u5904\u7406\u7f51\u683c\u641c\u7d22\u7684dict", "\n", "", "need_operate_params", "=", "[", "opt_params", ",", "train_data_params", "]", "\n", "all_combination_list", "=", "[", "]", "\n", "all_single_param_dict", "=", "[", "]", "\n", "dict_list_key_num", "=", "[", "]", "\n", "for", "one_operate_param", "in", "need_operate_params", ":", "\n", "        ", "combination_list", ",", "single_param_dict", "=", "get_list_params", "(", "one_operate_param", ")", "\n", "all_combination_list", ".", "extend", "(", "combination_list", ")", "\n", "all_single_param_dict", ".", "append", "(", "single_param_dict", ")", "\n", "dict_list_key_num", ".", "append", "(", "len", "(", "combination_list", ")", ")", "\n", "\n", "", "task_param_list", "=", "[", "]", "\n", "for", "params", "in", "product", "(", "*", "all_combination_list", ")", ":", "\n", "        ", "one_task_param", "=", "copy", ".", "deepcopy", "(", "params_dict", ")", "\n", "# \u5728need_update_param\u4e2d\u52a0\u5165\u5f85\u66f4\u65b0\u7684\u7f51\u683c\u641c\u7d22\u7684dict\uff0c\u6ce8\u610f\u987a\u5e8f\u8981\u548cneed_operate_params\u4fdd\u6301\u4e00\u81f4", "\n", "need_update_param", "=", "[", "one_task_param", "[", "\"model\"", "]", "[", "\"optimization\"", "]", ",", "\n", "one_task_param", "[", "\"dataset_reader\"", "]", "[", "\"train_reader\"", "]", "[", "\"config\"", "]", "]", "\n", "i", "=", "0", "\n", "for", "index", ",", "one_single_param", "in", "enumerate", "(", "all_single_param_dict", ")", ":", "\n", "            ", "single_param", "=", "copy", ".", "deepcopy", "(", "one_single_param", ")", "\n", "for", "one_grid", "in", "params", "[", "i", ":", "i", "+", "dict_list_key_num", "[", "index", "]", "]", ":", "\n", "                ", "single_param", ".", "update", "(", "one_grid", ")", "\n", "", "need_update_param", "[", "index", "]", ".", "update", "(", "single_param", ")", "\n", "i", "+=", "dict_list_key_num", "[", "index", "]", "\n", "", "task_param_list", ".", "append", "(", "one_task_param", ")", "\n", "\n", "", "return", "task_param_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.run_preprocess.pretreatment.process_data_with_kfold": [[84, 152], ["os.path.isdir", "os.listdir", "os.path.exists", "os.makedirs", "sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "len", "shutil.rmtree", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "new_train_paths.append", "new_dev_paths.append", "open", "open", "open", "f.readlines", "examples.extend", "str", "str", "f.write", "f.write", "f.write", "f.write", "logging.error", "line.rstrip", "line.rstrip"], "function", ["None"], ["", "def", "process_data_with_kfold", "(", "data_path", ",", "output_path", ",", "num_split", ",", "num_use_split", ")", ":", "\n", "    ", "\"\"\"\u5c06\u539f\u59cb\u6570\u636e\u5e73\u5747\u5206\u6210K\u4efd\uff0c\u5176\u4e2dK-1\u4efd\u7528\u6765\u505a\u8bad\u7ec3\u96c6\uff0c1\u4efd\u7528\u6765\u505a\u9a8c\u8bc1\u96c6\u3002\u5982\u6b64\u5faa\u73afK\u6b21\uff0c\u5f97\u5230K\u500d\u7684\u539f\u59cb\u6570\u636e\u3002\u4e3b\u8981\u8c03\u7528\u7684\u662fsk-learn\u7684KFold\n    :param data_path: \u5f85\u5904\u7406\u6570\u636e\u96c6\u8def\u5f84\uff08\u5fc5\u987b\u662f\u4e2a\u76ee\u5f55\uff09\n    :param output_path: \u5904\u7406\u4e4b\u540e\u751f\u6210\u7684\u6570\u636e\u96c6\u8def\u5f84\uff08\u5fc5\u987b\u662f\u4e2a\u76ee\u5f55\uff09\n    :param num_split: \u6570\u636e\u5206\u6210\u591a\u5c11\u6298\uff0c\u53d6\u503c\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e2\n    :param num_use_split: \u62c6\u5206\u597d\u7684N\u6298\u6570\u636e\uff0c\u771f\u6b63\u4f7f\u7528\u7684\u6570\u91cf\uff0c\u6bd4\u5982\u62c6\u5206\u621010\u6298\uff0c\u4f46\u662f\u53ea\u4f7f\u7528\u5176\u4e2d5\u4efd\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\uff0c\n    \u90a3\u4e48num_split\u9700\u8981\u8bbe\u7f6e\u621010\uff0c num_use_split\u9700\u8981\u8bbe\u7f6e\u62105\u3002num_use_split\u7684\u53d6\u503c\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8enum_split\n    :return: \u62c6\u5206\u4e4b\u540e\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u6570\u636e\u8def\u5f84\n    \"\"\"", "\n", "assert", "num_split", ">=", "2", ",", "\"k-fold cross-validation requires at least one, train/dev split by setting n_splits=2 \"", "\"or more, got num_split=%d\"", "%", "num_split", "\n", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "data_path", ")", ",", "\"%s must be a directory that stores data files\"", "%", "data_path", "\n", "data_files", "=", "os", ".", "listdir", "(", "data_path", ")", "\n", "\n", "assert", "len", "(", "data_files", ")", ">", "0", ",", "\"%s is an empty directory\"", "%", "data_path", "\n", "\n", "if", "num_use_split", "<=", "0", "or", "num_use_split", ">", "num_split", ":", "\n", "        ", "num_use_split", "=", "num_split", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "output_path", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "output_path", ")", "\n", "", "os", ".", "makedirs", "(", "output_path", ")", "\n", "\n", "examples", "=", "[", "]", "\n", "for", "one_file", "in", "data_files", ":", "\n", "        ", "input_file", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "one_file", ")", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "examples", ".", "extend", "(", "lines", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "                ", "logging", ".", "error", "(", "\"error in read tsv %s\"", "%", "input_file", ")", "\n", "# examples.extend(\"\\n\")", "\n", "\n", "", "", "", "kf", "=", "KFold", "(", "n_splits", "=", "num_split", ")", "\n", "num", "=", "0", "\n", "new_train_paths", "=", "[", "]", "\n", "new_dev_paths", "=", "[", "]", "\n", "for", "train_index", ",", "dev_index", "in", "kf", ".", "split", "(", "examples", ")", ":", "\n", "        ", "if", "num", ">=", "num_use_split", ":", "\n", "            ", "return", "new_train_paths", ",", "new_dev_paths", "\n", "", "save_dir_train", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"train_data_\"", "+", "str", "(", "num", ")", ")", "\n", "save_dir_dev", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"dev_data_\"", "+", "str", "(", "num", ")", ")", "\n", "os", ".", "makedirs", "(", "save_dir_train", ")", "\n", "os", ".", "makedirs", "(", "save_dir_dev", ")", "\n", "train_file", "=", "os", ".", "path", ".", "join", "(", "save_dir_train", ",", "\"train.txt\"", ")", "\n", "dev_file", "=", "os", ".", "path", ".", "join", "(", "save_dir_dev", ",", "\"dev.txt\"", ")", "\n", "\n", "with", "open", "(", "train_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "index", "in", "train_index", ":", "\n", "                ", "line", "=", "examples", "[", "index", "]", "\n", "f", ".", "write", "(", "line", ".", "rstrip", "(", "\"\\n\"", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "dev_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "for", "index", "in", "dev_index", ":", "\n", "                ", "line", "=", "examples", "[", "index", "]", "\n", "f", ".", "write", "(", "line", ".", "rstrip", "(", "\"\\n\"", ")", ")", "\n", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "new_train_paths", ".", "append", "(", "save_dir_train", ")", "\n", "new_dev_paths", ".", "append", "(", "save_dir_dev", ")", "\n", "\n", "num", "+=", "1", "\n", "\n", "", "return", "new_train_paths", ",", "new_dev_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.run_preprocess.pretreatment.build_kfold_config": [[154, 187], ["isinstance", "isinstance", "range", "len", "len", "params_dict.__contains__", "ValueError", "ValueError", "ValueError", "len", "copy.deepcopy", "task_param_list.append"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__"], ["", "def", "build_kfold_config", "(", "params_dict", ",", "train_path", ",", "dev_path", ")", ":", "\n", "    ", "\"\"\"\u6309k-fold\u62c6\u5206\u597d\u7684\u6570\u636e\uff0c\u6784\u9020\u65b0\u7684json\u914d\u7f6e\uff0c\u7528\u6765\u542f\u52a8\u8bad\u7ec3\u4efb\u52a1\n    :param params_dict: \u539f\u59cbjson\u914d\u7f6e\u6784\u9020\u51fa\u6765\u7684param_dict\n    :param train_path: k-fold\u62c6\u5206\u4e4b\u540e\u7684\u8bad\u7ec3\u96c6\u8def\u5f84\uff0clist\u7c7b\u578b\n    :param dev_path: k-fold\u62c6\u5206\u4e4b\u540e\u7684\u8bc4\u4f30\u96c6\u8def\u5f84\uff0clist\u7c7b\u578b\n    :return: task_param_list: \u751f\u6210\u65b0\u7684json\u914d\u7f6e\uff0c\u7528\u6765\u542f\u52a8run_with_json\n    \"\"\"", "\n", "assert", "isinstance", "(", "train_path", ",", "list", ")", ",", "\"train_path must be list\"", "\n", "assert", "isinstance", "(", "dev_path", ",", "list", ")", ",", "\"dev_path must be list\"", "\n", "assert", "len", "(", "train_path", ")", "==", "len", "(", "dev_path", ")", ",", "\"len(train_path) must == len(dev_path)\"", "\n", "if", "not", "params_dict", ".", "__contains__", "(", "\"dataset_reader\"", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"dataset_reader in json config can't be null\"", ")", "\n", "\n", "", "if", "not", "params_dict", "[", "\"dataset_reader\"", "]", "[", "\"train_reader\"", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"train_reader in json config can't be null\"", ")", "\n", "\n", "", "if", "not", "params_dict", "[", "\"dataset_reader\"", "]", "[", "\"dev_reader\"", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"dev_reader json config can't be null\"", ")", "\n", "\n", "", "task_param_list", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "train_path", ")", ")", ":", "\n", "        ", "one_task_param", "=", "copy", ".", "deepcopy", "(", "params_dict", ")", "\n", "one_task_param", "[", "\"dataset_reader\"", "]", "[", "\"train_reader\"", "]", "[", "\"config\"", "]", "[", "\"data_path\"", "]", "=", "train_path", "[", "index", "]", "\n", "one_task_param", "[", "\"dataset_reader\"", "]", "[", "\"dev_reader\"", "]", "[", "\"config\"", "]", "[", "\"data_path\"", "]", "=", "dev_path", "[", "index", "]", "\n", "one_task_param", "[", "\"dataset_reader\"", "]", "[", "\"dev_reader\"", "]", "[", "\"config\"", "]", "[", "\"shuffle\"", "]", "=", "False", "\n", "one_task_param", "[", "\"dataset_reader\"", "]", "[", "\"dev_reader\"", "]", "[", "\"config\"", "]", "[", "\"epoch\"", "]", "=", "1", "\n", "one_task_param", "[", "\"dataset_reader\"", "]", "[", "\"dev_reader\"", "]", "[", "\"config\"", "]", "[", "\"sampling_rate\"", "]", "=", "1.0", "\n", "# 1.7\u7248\u672c\u53bb\u6389\u8fd9\u4e24\u884c\u8bbe\u7f6e\uff0c\u4ee5\u7528\u6237\u7684json\u914d\u7f6e\u4e3a\u51c6\uff1bhttp://wiki.baidu.com/pages/viewpage.action?pageId=1292167804", "\n", "# one_task_param[\"trainer\"][\"is_eval_dev\"] = 1", "\n", "# one_task_param[\"trainer\"][\"is_eval_test\"] = 0", "\n", "task_param_list", ".", "append", "(", "one_task_param", ")", "\n", "\n", "", "return", "task_param_list", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_cleaning.file_encoding.check_file_encoding": [[12, 18], ["open", "logging.info", "chardet.detect", "fd.read"], "function", ["None"], ["def", "check_file_encoding", "(", "file_path", ")", ":", "\n", "    ", "\"\"\" check file encoding \"\"\"", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "fd", ":", "\n", "        ", "encode_str", "=", "chardet", ".", "detect", "(", "fd", ".", "read", "(", ")", ")", "[", "'encoding'", "]", "\n", "logging", ".", "info", "(", "\"input_file: {0}, encoding: {1}\"", ".", "format", "(", "file_path", ",", "encode_str", ")", ")", "\n", "return", "encode_str", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_cleaning.file_encoding.convert_gbk_to_utf8": [[20, 35], ["logging.info", "os.path.exists", "logging.fatal", "exit", "open", "open", "open", "open", "fd1.write", "fd1.write", "line.decode().encode", "line.decode"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode"], ["", "", "def", "convert_gbk_to_utf8", "(", "gbk_file", ",", "utf8_file", ")", ":", "\n", "    ", "\"\"\" convert file from gbk to utf8 \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "gbk_file", ")", ":", "\n", "        ", "logging", ".", "fatal", "(", "\"original file not exists: {0}\"", ".", "format", "(", "gbk_file", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"begin to convert gbk file: {0} to utf8\"", ".", "format", "(", "gbk_file", ")", ")", "\n", "if", "six", ".", "PY2", ":", "\n", "        ", "with", "open", "(", "gbk_file", ",", "\"r\"", ")", "as", "fd", ",", "open", "(", "utf8_file", ",", "\"w\"", ")", "as", "fd1", ":", "\n", "            ", "for", "line", "in", "fd", ":", "\n", "                ", "fd1", ".", "write", "(", "line", ".", "decode", "(", "\"gb18030\"", ",", "\"ignore\"", ")", ".", "encode", "(", "\"utf8\"", ",", "\"ignore\"", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "gbk_file", ",", "\"r\"", ",", "encoding", "=", "\"gb18030\"", ")", "as", "fd", ",", "open", "(", "utf8_file", ",", "\"w\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "fd1", ":", "\n", "            ", "for", "line", "in", "fd", ":", "\n", "                ", "fd1", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_cleaning.file_encoding.convert_utf8_to_gb18030": [[37, 52], ["logging.info", "os.path.exists", "logging.fatal", "exit", "open", "open", "open", "open", "fd1.write", "fd1.write", "line.decode().encode", "line.decode"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode"], ["", "", "", "", "def", "convert_utf8_to_gb18030", "(", "utf8_file", ",", "gbk_file", ")", ":", "\n", "    ", "\"\"\" convert file from utf8 to gbk \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "utf8_file", ")", ":", "\n", "        ", "logging", ".", "fatal", "(", "\"original file not exists: {0}\"", ".", "format", "(", "utf8_file", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"begin to convert utf8 file: {0} to gbk: {1}\"", ".", "format", "(", "utf8_file", ",", "gbk_file", ")", ")", "\n", "if", "six", ".", "PY2", ":", "\n", "        ", "with", "open", "(", "utf8_file", ",", "\"r\"", ")", "as", "fd", ",", "open", "(", "gbk_file", ",", "\"w\"", ")", "as", "fd1", ":", "\n", "            ", "for", "line", "in", "fd", ":", "\n", "                ", "fd1", ".", "write", "(", "line", ".", "decode", "(", "\"utf8\"", ",", "\"ignore\"", ")", ".", "encode", "(", "\"gb18030\"", ",", "\"ignore\"", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "with", "open", "(", "utf8_file", ",", "\"r\"", ",", "encoding", "=", "\"utf8\"", ")", "as", "fd", ",", "open", "(", "gbk_file", ",", "\"w\"", ",", "encoding", "=", "\"gb18030\"", ")", "as", "fd1", ":", "\n", "            ", "for", "line", "in", "fd", ":", "\n", "                ", "fd1", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_cleaning.file_encoding.main": [[54, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "file_encoding.check_file_encoding", "os.path.exists", "logging.fatal", "exit", "file_encoding.convert_gbk_to_utf8", "logging.fatal", "exit", "file_encoding.convert_utf8_to_gb18030", "subprocess.Popen", "subprocess.Popen.communicate", "logging.fatal", "exit"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_cleaning.file_encoding.check_file_encoding", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_cleaning.file_encoding.convert_gbk_to_utf8", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_cleaning.file_encoding.convert_utf8_to_gb18030"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\" main function \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'main'", ")", "\n", "parser", ".", "add_argument", "(", "\"-i\"", ",", "\"--input\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"-o\"", ",", "\"--output\"", ",", "type", "=", "str", ",", "default", "=", "\"dest_file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-g2u\"", ",", "\"--gb18030_to_utf8\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"-u2g\"", ",", "\"--utf8_to_gb18030\"", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_file", "=", "args", ".", "input", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "input_file", ")", ":", "\n", "        ", "logging", ".", "fatal", "(", "\"input file: {0} not exist\"", ".", "format", "(", "input_file", ")", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "encode_str", "=", "check_file_encoding", "(", "input_file", ")", "\n", "if", "args", ".", "gb18030_to_utf8", ":", "\n", "        ", "if", "encode_str", "!=", "\"GB2312\"", "and", "encode_str", "!=", "\"gb18030\"", "and", "encode_str", "!=", "\"cp936\"", ":", "\n", "            ", "logging", ".", "fatal", "(", "\"input_file: {0} encoding is not gbk\uff0cfailed to convert utf8!\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "convert_gbk_to_utf8", "(", "input_file", ",", "args", ".", "output", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "utf8_to_gb18030", ":", "\n", "            ", "if", "encode_str", "!=", "\"utf-8\"", "and", "encode_str", "!=", "\"ascii\"", ":", "\n", "                ", "cmd", "=", "\"file {0} |grep 'UTF-8'\"", ".", "format", "(", "input_file", ")", "\n", "p", "=", "subprocess", ".", "Popen", "(", "cmd", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "stdoutdata", ",", "stderrdata", "=", "p", ".", "communicate", "(", ")", "\n", "if", "not", "stdoutdata", ":", "\n", "                    ", "logging", ".", "fatal", "(", "\"input_file: {0} encoding is not utf8\uff0cfailed to convert gb18030!\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "", "convert_utf8_to_gb18030", "(", "input_file", ",", "args", ".", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_aug.data_aug.build_unk_parser": [[30, 64], ["log.info", "range", "log.debug", "zip", "log.debug", "log.info", "log.debug", "sum", "len", "numpy.random.choice", "min", "numpy.random.rand", "len", "len"], "function", ["None"], ["def", "build_unk_parser", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    build unk parser\n    \"\"\"", "\n", "log", ".", "info", "(", "'building unk parser'", ")", "\n", "max_span_len", "=", "10", "\n", "p", "=", "0.2", "\n", "span_lens", "=", "range", "(", "1", ",", "max_span_len", "+", "1", ")", "\n", "span_len_dist", "=", "[", "p", "*", "(", "1", "-", "p", ")", "**", "(", "i", "-", "1", ")", "for", "i", "in", "span_lens", "]", "\n", "span_len_dist", "=", "[", "x", "/", "sum", "(", "span_len_dist", ")", "for", "x", "in", "span_len_dist", "]", "\n", "log", ".", "debug", "(", "'span len dist:'", ")", "\n", "avg_span_len", "=", "0.", "\n", "for", "k", ",", "v", "in", "zip", "(", "span_lens", ",", "span_len_dist", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'\\t%d: %f'", "%", "(", "k", ",", "v", ")", ")", "\n", "avg_span_len", "+=", "k", "*", "v", "\n", "", "log", ".", "debug", "(", "'avg span len: %f'", "%", "avg_span_len", ")", "\n", "\n", "def", "unk_parser", "(", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        unk parser\n        \"\"\"", "\n", "ret", ",", "i", "=", "[", "]", ",", "0", "\n", "while", "i", "<", "len", "(", "tokens", ")", ":", "\n", "            ", "span_len", "=", "np", ".", "random", ".", "choice", "(", "span_lens", ",", "p", "=", "span_len_dist", ")", "\n", "span_len", "=", "min", "(", "span_len", ",", "len", "(", "tokens", ")", "-", "len", "(", "ret", ")", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.15", ":", "\n", "                ", "ret", "+=", "[", "args", ".", "unk_token", "]", "*", "span_len", "\n", "", "else", ":", "\n", "                ", "ret", "+=", "tokens", "[", "i", ":", "i", "+", "span_len", "]", "\n", "", "i", "+=", "span_len", "\n", "", "ret", "=", "''", ".", "join", "(", "ret", ")", "\n", "return", "ret", "\n", "", "log", ".", "info", "(", "'done'", ")", "\n", "return", "unk_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_aug.data_aug.build_trucate_parser": [[66, 100], ["log.info", "range", "log.debug", "zip", "log.debug", "log.info", "log.debug", "sum", "len", "numpy.random.choice", "min", "numpy.random.rand", "len", "len"], "function", ["None"], ["", "def", "build_trucate_parser", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    build truncate parser\n    \"\"\"", "\n", "log", ".", "info", "(", "'building truncate parser'", ")", "\n", "max_span_len", "=", "10", "\n", "p", "=", "0.2", "\n", "span_lens", "=", "range", "(", "1", ",", "max_span_len", "+", "1", ")", "\n", "span_len_dist", "=", "[", "p", "*", "(", "1", "-", "p", ")", "**", "(", "i", "-", "1", ")", "for", "i", "in", "span_lens", "]", "\n", "span_len_dist", "=", "[", "x", "/", "sum", "(", "span_len_dist", ")", "for", "x", "in", "span_len_dist", "]", "\n", "log", ".", "debug", "(", "'span len dist:'", ")", "\n", "avg_span_len", "=", "0.", "\n", "for", "k", ",", "v", "in", "zip", "(", "span_lens", ",", "span_len_dist", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'\\t%d: %f'", "%", "(", "k", ",", "v", ")", ")", "\n", "avg_span_len", "+=", "k", "*", "v", "\n", "", "log", ".", "debug", "(", "'avg span len: %f'", "%", "avg_span_len", ")", "\n", "\n", "def", "truncate_parser", "(", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        truncate parser\n        \"\"\"", "\n", "ret", ",", "i", "=", "[", "]", ",", "0", "\n", "while", "i", "<", "len", "(", "tokens", ")", ":", "\n", "            ", "span_len", "=", "np", ".", "random", ".", "choice", "(", "span_lens", ",", "p", "=", "span_len_dist", ")", "\n", "span_len", "=", "min", "(", "span_len", ",", "len", "(", "tokens", ")", "-", "len", "(", "ret", ")", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.15", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "ret", "+=", "tokens", "[", "i", ":", "i", "+", "span_len", "]", "\n", "", "i", "+=", "span_len", "\n", "", "ret", "=", "''", ".", "join", "(", "ret", ")", "\n", "return", "ret", "\n", "", "log", ".", "info", "(", "'done'", ")", "\n", "return", "truncate_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_aug.data_aug.build_pos_dict": [[101, 114], ["LAC", "LAC.run", "zip", "i.strip", "pos_dict.setdefault().append", "pos_dict.setdefault"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["", "def", "build_pos_dict", "(", "field_list", ")", ":", "\n", "    ", "\"\"\"\n    build pos dict for pos parser\n    \"\"\"", "\n", "from", "LAC", "import", "LAC", "\n", "lac", "=", "LAC", "(", "mode", "=", "'lac'", ")", "\n", "pos_dict", "=", "{", "}", "\n", "for", "i", "in", "field_list", ":", "\n", "#piece, tag = lac.lexer(i.strip(), return_tag=True)", "\n", "        ", "piece", ",", "tag", "=", "lac", ".", "run", "(", "i", ".", "strip", "(", ")", ")", "\n", "for", "p", ",", "t", "in", "zip", "(", "piece", ",", "tag", ")", ":", "\n", "            ", "pos_dict", ".", "setdefault", "(", "t", ",", "[", "]", ")", ".", "append", "(", "p", ")", "\n", "", "", "return", "pos_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_aug.data_aug.build_pos_replace_parser": [[115, 140], ["LAC", "log.info", "log.info", "tokens.strip.strip", "LAC.run", "zip", "ret.append", "numpy.random.rand", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["", "def", "build_pos_replace_parser", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    build pos_replace parser\n    \"\"\"", "\n", "from", "LAC", "import", "LAC", "\n", "lac", "=", "LAC", "(", "mode", "=", "'lac'", ")", "\n", "log", ".", "info", "(", "'building pos replace parser'", ")", "\n", "def", "pos_replace_parser", "(", "tokens", ",", "pos_dict", ")", ":", "\n", "        ", "\"\"\"\n        pos replace parser\n        \"\"\"", "\n", "tokens", "=", "tokens", ".", "strip", "(", ")", "\n", "#piece, tag = lac.lexer(tokens, return_tag=True)", "\n", "# piece, tag = lac.run(tokens, return_tag=True)", "\n", "piece", ",", "tag", "=", "lac", ".", "run", "(", "tokens", ")", "\n", "ret", "=", "[", "]", "\n", "for", "p", ",", "t", "in", "zip", "(", "piece", ",", "tag", ")", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.15", ":", "\n", "                ", "p", "=", "np", ".", "random", ".", "choice", "(", "pos_dict", "[", "t", "]", ")", "\n", "", "ret", ".", "append", "(", "p", ")", "\n", "", "ret", "=", "''", ".", "join", "(", "ret", ")", "\n", "return", "ret", "\n", "\n", "", "log", ".", "info", "(", "'done'", ")", "\n", "return", "pos_replace_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_aug.data_aug.build_w2v_replace_parser": [[142, 191], ["LAC", "os.path.exists", "log.debug", "KeyedVectors.load_word2vec_format", "log.debug", "log.debug", "gensim.models.KeyedVectors.load_word2vec_format", "log.debug", "re.compile", "LAC.run", "gensim.models.KeyedVectors.load_word2vec_format.similar_by_word", "numpy.random.choice", "re.compile.match", "ret.append", "ret.append", "numpy.random.rand", "t.strip().decode.strip", "t.strip().decode.strip().decode", "t.strip().decode.strip"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["", "def", "build_w2v_replace_parser", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    build w2v_replace parser\n    \"\"\"", "\n", "import", "re", "\n", "from", "gensim", ".", "models", "import", "KeyedVectors", "\n", "import", "gensim", "\n", "from", "LAC", "import", "LAC", "\n", "lac", "=", "LAC", "(", "mode", "=", "'seg'", ")", "\n", "\n", "bin_file", "=", "\"./vec2.bin\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "bin_file", ")", ":", "\n", "        ", "log", ".", "debug", "(", "'loading word2vec....'", ")", "\n", "word2vec", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "bin_file", ")", "\n", "log", ".", "debug", "(", "'done loading word2vec....'", ")", "\n", "", "else", ":", "\n", "        ", "log", ".", "debug", "(", "'loading word2vec from txt....'", ")", "\n", "tmp_file", "=", "'./vec2.txt'", "\n", "#4.0\u4ee5\u4e0a\u7248\u672c\u7528\u6cd5", "\n", "word2vec", "=", "gensim", ".", "models", ".", "KeyedVectors", ".", "load_word2vec_format", "(", "tmp_file", ",", "binary", "=", "False", ")", "\n", "#word2vec.save_word2vec_format(bin_file)", "\n", "log", ".", "debug", "(", "'done loading word2vec....'", ")", "\n", "\n", "pat", "=", "re", ".", "compile", "(", "'[a-zA-Z0-9]+'", ")", "\n", "\n", "def", "w2v_parser", "(", "tokens", ")", ":", "\n", "            ", "\"\"\"\n            w2v parser\n            \"\"\"", "\n", "ret", "=", "[", "]", "\n", "#for i in lac.lexer(tokens):", "\n", "for", "i", "in", "lac", ".", "run", "(", "tokens", ")", ":", "\n", "                ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.15", "and", "i", "in", "word2vec", ".", "index_to_key", ":", "\n", "                    ", "candidate", "=", "word2vec", ".", "similar_by_word", "(", "i", ",", "topn", "=", "3", ")", "\n", "t", "=", "np", ".", "random", ".", "choice", "(", "[", "c", "for", "c", ",", "p", "in", "candidate", "]", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "                        ", "t", "=", "t", ".", "strip", "(", ")", "\n", "", "elif", "six", ".", "PY2", ":", "\n", "                        ", "t", "=", "t", ".", "strip", "(", ")", ".", "decode", "(", "\"utf8\"", ")", "\n", "\n", "", "if", "pat", ".", "match", "(", "t", ")", ":", "\n", "                        ", "t", "=", "'%s '", "%", "t", "\n", "", "ret", ".", "append", "(", "t", ")", "\n", "", "else", ":", "\n", "                    ", "ret", ".", "append", "(", "i", ")", "\n", "", "", "ret", "=", "''", ".", "join", "(", "ret", ")", "\n", "return", "ret", "\n", "\n", "", "return", "w2v_parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_aug.data_aug.build_parser": [[201, 226], ["numpy.array", "np.array.sum", "print", "numpy.random.choice", "log.info", "np.array.append", "selected_funcs.append", "selected_func_names.append"], "function", ["None"], ["def", "build_parser", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    build parser\n    \"\"\"", "\n", "selected_funcs", ",", "probs", ",", "selected_func_names", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "func_name", "in", "builders", ":", "\n", "        ", "p", "=", "args", ".", "__dict__", "[", "func_name", "]", "\n", "print", "(", "\"args.dict\"", ",", "args", ".", "__dict__", ")", "\n", "#return", "\n", "if", "p", ">", "0.", ":", "\n", "            ", "log", ".", "info", "(", "'using %s with prob %.2f'", "%", "(", "func_name", ",", "p", ")", ")", "\n", "probs", ".", "append", "(", "p", ")", "\n", "func", "=", "builders", "[", "func_name", "]", "(", "args", ")", "\n", "selected_funcs", ".", "append", "(", "func", ")", "\n", "selected_func_names", ".", "append", "(", "func_name", ")", "\n", "", "", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "probs", "/=", "probs", ".", "sum", "(", ")", "\n", "def", "choose_parser", "(", ")", ":", "\n", "        ", "\"\"\"\n        choose parser\n        \"\"\"", "\n", "f", "=", "np", ".", "random", ".", "choice", "(", "selected_funcs", ",", "p", "=", "probs", ")", "\n", "#print(f)", "\n", "return", "f", "\n", "", "return", "choose_parser", ",", "selected_func_names", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.wordseg.wordseg_lac.run_lac": [[11, 27], ["lac.run", "len", "sep.join", "sep.join"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["def", "run_lac", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    build pos dict for pos parser\n    \"\"\"", "\n", "if", "len", "(", "text", ")", "==", "0", ":", "\n", "        ", "return", "text", "\n", "\n", "", "seg", "=", "lac", ".", "run", "(", "text", ")", "\n", "sep", "=", "\" \"", "\n", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "return", "sep", ".", "join", "(", "seg", ")", "\n", "", "else", ":", "\n", "# seg[i] is a list, and len(seg) = 1", "\n", "        ", "tmp", "=", "[", "w", "[", "0", "]", "for", "w", "in", "seg", "]", "\n", "return", "sep", ".", "join", "(", "tmp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.wordseg.build_voc.build_dict": [[10, 58], ["collections.defaultdict", "os.listdir", "os.path.join", "os.path.join", "enumerate", "open", "sorted", "os.path.isfile", "open", "open", "open.readlines", "l.strip().split", "selected_cols.split", "collections.defaultdict.items", "f.write", "extra_words.insert", "l.strip", "collections.defaultdict.get", "f.write", "f.write"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "build_dict", "(", "input_path", ",", "\n", "output_path", ",", "\n", "col_nums", ",", "\n", "feq_threshold", "=", "5", ",", "\n", "sep", "=", "' '", ",", "\n", "extra_words", "=", "None", ",", "\n", "stop_words", "=", "None", ")", ":", "\n", "    ", "\"\"\"build dict\"\"\"", "\n", "values", "=", "defaultdict", "(", "int", ")", "\n", "for", "file_name", "in", "os", ".", "listdir", "(", "input_path", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "input_path", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "six", ".", "PY3", ":", "\n", "            ", "input_file", "=", "open", "(", "file_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "\n", "", "else", ":", "\n", "            ", "input_file", "=", "open", "(", "file_path", ",", "'r'", ")", "\n", "\n", "", "for", "i", ",", "l", "in", "enumerate", "(", "input_file", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "cols", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "selected_cols", "=", "\"\"", "\n", "for", "j", "in", "col_nums", ":", "\n", "                ", "selected_cols", "+=", "cols", "[", "j", "-", "1", "]", "\n", "\n", "", "for", "w", "in", "selected_cols", ".", "split", "(", "sep", ")", ":", "\n", "                ", "values", "[", "w", "]", "=", "values", ".", "get", "(", "w", ",", "0", ")", "+", "1", "\n", "\n", "", "", "", "output_file_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"vocab.txt\"", ")", "\n", "id_index", "=", "0", "\n", "with", "open", "(", "output_file_path", ",", "\"w\"", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "v", ",", "count", "in", "sorted", "(", "values", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "if", "count", "<", "feq_threshold", "or", "v", "in", "stop_words", ":", "\n", "                ", "break", "\n", "# f.write(\"%s\\t%d\\n\" % (v, count))", "\n", "", "f", ".", "write", "(", "\"%s\\t%d\\n\"", "%", "(", "v", ",", "id_index", ")", ")", "\n", "id_index", "+=", "1", "\n", "\n", "", "build_in_vocab", "=", "[", "\"[PAD]\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"[MASK]\"", ",", "\"[UNK]\"", "]", "\n", "for", "vocab", "in", "build_in_vocab", ":", "\n", "            ", "extra_words", ".", "insert", "(", "0", ",", "vocab", ")", "\n", "", "for", "w", "in", "extra_words", ":", "\n", "            ", "if", "(", "w", "in", "values", "and", "values", "[", "w", "]", "<", "feq_threshold", ")", "or", "w", "not", "in", "values", ":", "\n", "                ", "if", "six", ".", "PY3", ":", "\n", "                    ", "f", ".", "write", "(", "(", "u\"%s\\t%d\\n\"", "%", "(", "w", ",", "id_index", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "(", "u\"%s\\t%d\\n\"", "%", "(", "w", ",", "id_index", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "", "id_index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.wordseg.build_voc.main": [[60, 90], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "parser.parse_args.column_number.split", "list", "os.listdir", "mkdirlambda", "build_voc.build_dict", "map", "len", "os.makedirs", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.wordseg.build_voc.build_dict"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'main'", ")", "\n", "parser", ".", "add_argument", "(", "\"-i\"", ",", "\"--input\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"-o\"", ",", "\"--output\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"-sep\"", ",", "\"--seperator\"", ",", "type", "=", "str", ",", "default", "=", "' '", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--column_number\"", ",", "type", "=", "str", ",", "default", "=", "'1'", ")", "\n", "parser", ".", "add_argument", "(", "\"-thr\"", ",", "\"--feq_threshold\"", ",", "type", "=", "int", ",", "default", "=", "'5'", ")", "\n", "parser", ".", "add_argument", "(", "\"-ew\"", ",", "\"--extra_words\"", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"-sw\"", ",", "\"--stop_words\"", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "]", ")", "\n", "\n", "# \u505c\u7528\u8bcd", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "col_nums", "=", "args", ".", "column_number", ".", "split", "(", "','", ")", "\n", "col_nums", "=", "list", "(", "map", "(", "int", ",", "col_nums", ")", ")", "\n", "\n", "data_files", "=", "os", ".", "listdir", "(", "args", ".", "input", ")", "\n", "assert", "len", "(", "data_files", ")", ">", "0", ",", "\"%s is an empty directory\"", "%", "args", ".", "input", "\n", "mkdirlambda", "=", "lambda", "x", ":", "os", ".", "makedirs", "(", "x", ")", "if", "not", "os", ".", "path", ".", "exists", "(", "x", ")", "else", "True", "\n", "mkdirlambda", "(", "args", ".", "output", ")", "\n", "\n", "build_dict", "(", "\n", "input_path", "=", "args", ".", "input", ",", "\n", "output_path", "=", "args", ".", "output", ",", "\n", "feq_threshold", "=", "args", ".", "feq_threshold", ",", "\n", "sep", "=", "' '", ",", "\n", "col_nums", "=", "col_nums", ",", "\n", "extra_words", "=", "args", ".", "extra_words", ",", "\n", "stop_words", "=", "args", ".", "stop_words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_generation.run_infer.dataset_reader_from_params": [[15, 24], ["erniekit.data.data_set_ernie3.DataSet", "erniekit.data.data_set_ernie3.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_generation.run_infer.build_inference": [[26, 33], ["params_dict.get", "erniekit.common.register.RegisterSet.inference.__getitem__", "RegisterSet.inference.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "build_inference", "(", "params_dict", ",", "dataset_reader", ",", "parser_handler", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "inference_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomInference\"", ")", "\n", "inference_class", "=", "RegisterSet", ".", "inference", ".", "__getitem__", "(", "inference_name", ")", "\n", "inference", "=", "inference_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "parser_handler", "=", "parser_handler", ")", "\n", "\n", "return", "inference", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_generation.run_infer.model_from_params": [[34, 44], ["params_dict.get", "erniekit.common.register.RegisterSet.models.__getitem__", "RegisterSet.models.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "dataset_reader", ".", "predict_reader", ",", "params_dict", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_generation.run_trainer_ernie_gen.dataset_reader_from_params": [[20, 29], ["erniekit.data.data_set_ernie3.DataSet", "erniekit.data.data_set_ernie3.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_generation.run_trainer_ernie_gen.model_from_params": [[30, 76], ["params_dict.get", "dataset_reader.train_reader.get_num_examples", "params_dict.get", "erniekit.common.register.RegisterSet.models.__getitem__", "RegisterSet.models.__getitem__.", "params_dict.get.__contains__", "int", "params_dict.get", "params_dict.get.get", "logging.info", "logging.info", "logging.info", "logging.info", "params_dict[].update", "os.getenv", "params_dict.get.__contains__", "params_dict.get.get", "params_dict.get.get", "int"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "opt_params", "=", "params_dict", ".", "get", "(", "\"optimization\"", ",", "None", ")", "\n", "num_train_examples", "=", "dataset_reader", ".", "train_reader", ".", "get_num_examples", "(", ")", "\n", "# \u6309\u914d\u7f6e\u8ba1\u7b97warmup_steps", "\n", "if", "opt_params", "and", "opt_params", ".", "__contains__", "(", "\"warmup_steps\"", ")", ":", "\n", "        ", "trainers_num", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINERS_NUM\"", ",", "\"1\"", ")", ")", "\n", "batch_size_train", "=", "dataset_reader", ".", "train_reader", ".", "config", ".", "batch_size", "\n", "epoch_train", "=", "dataset_reader", ".", "train_reader", ".", "config", ".", "epoch", "\n", "max_train_steps", "=", "epoch_train", "*", "num_train_examples", "//", "batch_size_train", "//", "trainers_num", "\n", "# \u77e5\u8bc6\u84b8\u998fTD2\u9700\u8981\u5c06TD1\u7684max_train_step\u7b97\u8fdb\u6765", "\n", "task_distill_params", "=", "params_dict", ".", "get", "(", "\"task_distill_step2\"", ",", "None", ")", "\n", "if", "task_distill_params", "and", "task_distill_params", ".", "__contains__", "(", "\"td1_epoch\"", ")", ":", "\n", "# TD1\u8bad\u7ec3\u7684\u8f6e\u6570\uff0c\u9700\u8981\u5728TD2\u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u8bbe\u7f6e", "\n", "            ", "td1_epoch", "=", "task_distill_params", "[", "\"td1_epoch\"", "]", "\n", "# \u9ed8\u8ba4TD1\u548cTD2\u7684batch_size\u4e00\u81f4\uff0c\u8bad\u7ec3\u6837\u672c\u6570\u4e00\u81f4", "\n", "td1_batch_size", "=", "task_distill_params", ".", "get", "(", "\"td1_batch_size\"", ",", "batch_size_train", ")", "\n", "max_train_steps", "+=", "td1_epoch", "*", "num_train_examples", "//", "td1_batch_size", "//", "trainers_num", "\n", "\n", "", "warmup_steps", "=", "opt_params", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "\n", "if", "warmup_steps", "==", "0", ":", "\n", "            ", "warmup_proportion", "=", "opt_params", ".", "get", "(", "\"warmup_proportion\"", ",", "0.1", ")", "\n", "warmup_steps", "=", "int", "(", "max_train_steps", "*", "warmup_proportion", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Device count: %d\"", "%", "trainers_num", ")", "\n", "logging", ".", "info", "(", "\"Num train examples: %d\"", "%", "num_train_examples", ")", "\n", "logging", ".", "info", "(", "\"Max train steps: %d\"", "%", "max_train_steps", ")", "\n", "logging", ".", "info", "(", "\"Num warmup steps: %d\"", "%", "warmup_steps", ")", "\n", "\n", "opt_params", "=", "{", "}", "\n", "opt_params", "[", "\"warmup_steps\"", "]", "=", "warmup_steps", "\n", "opt_params", "[", "\"max_train_steps\"", "]", "=", "max_train_steps", "\n", "opt_params", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "# combine params dict", "\n", "params_dict", "[", "\"optimization\"", "]", ".", "update", "(", "opt_params", ")", "\n", "\n", "", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "dataset_reader", ".", "train_reader", ",", "params_dict", ")", "\n", "return", "model", ",", "num_train_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_generation.run_trainer_ernie_gen.build_trainer": [[78, 85], ["params_dict.get", "erniekit.common.register.RegisterSet.trainer.__getitem__", "RegisterSet.trainer.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "build_trainer", "(", "params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", "=", "0", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "trainer_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomTrainer\"", ")", "\n", "trainer_class", "=", "RegisterSet", ".", "trainer", ".", "__getitem__", "(", "trainer_name", ")", "\n", "params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "trainer", "=", "trainer_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "model", "=", "model", ")", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_generation.run_trainer_ernie_gen.run_trainer": [[86, 104], ["logging.info", "param_dict.get", "run_trainer_ernie_gen.dataset_reader_from_params", "param_dict.get", "run_trainer_ernie_gen.model_from_params", "param_dict.get", "run_trainer_ernie_gen.build_trainer", "build_trainer.do_train", "logging.info", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.dataset_reader_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.model_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.build_trainer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_train"], ["", "def", "run_trainer", "(", "param_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param param_dict:\n    :return:\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"run trainer.... pid = \"", "+", "str", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "dataset_reader_params_dict", "=", "param_dict", ".", "get", "(", "\"dataset_reader\"", ")", "\n", "dataset_reader", "=", "dataset_reader_from_params", "(", "dataset_reader_params_dict", ")", "\n", "\n", "model_params_dict", "=", "param_dict", ".", "get", "(", "\"model\"", ")", "\n", "model", ",", "num_train_examples", "=", "model_from_params", "(", "model_params_dict", ",", "dataset_reader", ")", "\n", "model_params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "trainer_params_dict", "=", "param_dict", ".", "get", "(", "\"trainer\"", ")", "\n", "trainer", "=", "build_trainer", "(", "trainer_params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", ")", "\n", "\n", "trainer", ".", "do_train", "(", ")", "\n", "logging", ".", "info", "(", "\"end of run train and eval .....\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.__init__": [[30, 98], ["erniekit.data.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.__init__", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "numpy.random.seed", "erniekit.common.register.RegisterSet.tokenizer.__getitem__", "erniekit.common.register.RegisterSet.tokenizer.__getitem__.", "paddle.get_world_size", "paddle.get_world_size", "paddle.get_rank", "paddle.get_rank", "paddle.CPUPlace", "paddle.CPUPlace", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "erniekit.common.register.RegisterSet.tokenizer.__getitem__", "erniekit.common.register.RegisterSet.tokenizer.__getitem__.", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get", "ernie_gen_infilling_dataset_reader.InfillingGenReader.config.extra_params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "name", ",", "fields", ",", "config", ")", ":", "\n", "        ", "\"\"\"__init__\n        \"\"\"", "\n", "BaseDataSetReaderErnieGen", ".", "__init__", "(", "self", ",", "name", ",", "fields", ",", "config", ")", "\n", "self", ".", "do_lower_case", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"do_lower_case\"", ",", "True", ")", "\n", "self", ".", "vocab_path", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"vocab_path\"", ")", "\n", "self", ".", "spm_model_path", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"spm_model_path\"", ")", "\n", "self", ".", "tokenizer_name", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"tokenizer\"", ",", "\"FullTokenizer\"", ")", "\n", "self", ".", "tgt_type_id", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"tgt_type_id\"", ",", "1", ")", "\n", "self", ".", "max_seq_len", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"max_seq_len\"", ",", "512", ")", "\n", "self", ".", "max_src_len", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"max_src_len\"", ",", "320", ")", "\n", "self", ".", "max_tgt_len", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"max_tgt_len\"", ",", "64", ")", "\n", "self", ".", "max_dec_len", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"max_dec_len\"", ",", "32", ")", "\n", "# \u8f93\u5165\u662f\u5426\u5206\u597d\u8bcd", "\n", "self", ".", "tokenized_input", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"tokenized_input\"", ",", "False", ")", "\n", "self", ".", "in_tokens", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"in_tokens\"", ",", "False", ")", "\n", "self", ".", "mask_prob", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"mask_prob\"", ",", "0.5", ")", "\n", "self", ".", "continuous_position", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"continuous_position\"", ",", "True", ")", "\n", "self", ".", "two_stream", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"two_stream\"", ",", "True", ")", "\n", "self", ".", "random_noise", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"random_noise\"", ",", "False", ")", "\n", "self", ".", "task_type", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"task_type\"", ",", "'normal'", ")", "\n", "self", ".", "is_dialogue_task", "=", "(", "self", ".", "task_type", "==", "\"dialog\"", ")", "\n", "self", ".", "is_trans_task", "=", "(", "self", ".", "task_type", "==", "\"trans\"", ")", "\n", "# \u5bf9\u8bdd\u4efb\u52a1\u53c2\u6570", "\n", "self", ".", "turn_type_size", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"turn_type_size\"", ",", "16", ")", "\n", "# \u89e3\u7801\uff0c\u4fdd\u5b58\u9884\u6d4b\u6a21\u578b\uff0c\u9884\u6d4b/\u8bc4\u4f30\u65f6\u5019\u4f7f\u7528", "\n", "self", ".", "do_dec", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"do_dec\"", ",", "True", ")", "and", "(", "\"train\"", "not", "in", "self", ".", "name", ")", "\n", "self", ".", "random_seed", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"random_seed\"", ",", "0", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "random_seed", ")", "\n", "\n", "params", "=", "{", "}", "\n", "params", "[", "\"do_lower_case\"", "]", "=", "self", ".", "do_lower_case", "\n", "params", "[", "\"spm_model_file\"", "]", "=", "self", ".", "spm_model_path", "\n", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "tokenizer_name", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "self", ".", "vocab_path", ",", "params", "=", "params", ")", "\n", "if", "self", ".", "is_trans_task", ":", "\n", "            ", "src_params", "=", "{", "}", "\n", "src_params", "[", "\"do_lower_case\"", "]", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"src_do_lower_case\"", ",", "True", ")", "\n", "src_params", "[", "\"spm_model_file\"", "]", "=", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"src_spm_model_path\"", ")", "\n", "src_tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "\n", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"src_tokenizer\"", ")", ")", "\n", "self", ".", "src_tokenizer", "=", "tokenizer_class", "(", "self", ".", "config", ".", "extra_params", ".", "get", "(", "\"src_vocab_path\"", ")", ",", "\n", "params", "=", "src_params", ")", "\n", "\n", "", "self", ".", "vocab", "=", "self", ".", "tokenizer", ".", "vocab", "\n", "self", ".", "pad_id", "=", "self", ".", "vocab", "[", "\"[PAD]\"", "]", "\n", "self", ".", "cls_id", "=", "self", ".", "vocab", "[", "\"[CLS]\"", "]", "\n", "self", ".", "sep_id", "=", "self", ".", "vocab", "[", "\"[SEP]\"", "]", "\n", "\n", "if", "\"train\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "phase", "=", "InstanceName", ".", "TRAINING", "\n", "", "elif", "\"dev\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "phase", "=", "InstanceName", ".", "EVALUATE", "\n", "", "elif", "\"test\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "phase", "=", "InstanceName", ".", "TEST", "\n", "", "elif", "\"predict\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "phase", "=", "\"predict\"", "\n", "\n", "# trainer_id \u548c dev_count\u5fc5\u987b\u8981\u8bbe\u7f6e\uff0c\u5426\u5219\u591a\u5361\u7684\u65f6\u5019\u6bcf\u5f20\u5361\u4e0a\u7684\u6570\u636e\u90fd\u662f\u4e00\u6837\u7684", "\n", "", "self", ".", "dev_count", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "trainer_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "self", ".", "trainer_nums", "=", "self", ".", "dev_count", "\n", "\n", "self", ".", "input_data_list", "=", "[", "]", "\n", "\n", "self", ".", "place", "=", "fluid", ".", "CPUPlace", "(", ")", "\n", "\n", "self", ".", "features", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.create_reader": [[99, 144], ["range", "paddle.io.DataLoader.from_generator", "paddle.io.DataLoader.from_generator", "logging.debug", "len", "ernie_gen_infilling_dataset_reader.InfillingGenReader.input_data_list.append", "paddle.layers.data", "paddle.layers.data", "str"], "methods", ["None"], ["", "def", "create_reader", "(", "self", ")", ":", "\n", "        ", "\"\"\" \u9759\u6001\u56fe\u6a21\u5f0f\u4e0b\u7528\u6765\u521d\u59cb\u5316\u6570\u636e\u8bfb\u53d6\u7684op\uff0c\u8c03\u7528op\u4e3apaddle.static.data\n        \u52a8\u6001\u56fe\u6a21\u5f0f\u4e0b\u4e0d\u9700\u8981\u8c03\u7528\n        \"\"\"", "\n", "\"\"\"create_reader\"\"\"", "\n", "\n", "if", "self", ".", "is_dialogue_task", ":", "\n", "            ", "names", "=", "[", "\"src_ids\"", ",", "\"role_ids\"", ",", "\"turn_ids\"", ",", "\"pos_ids\"", "]", "\n", "ids_num", "=", "4", "\n", "", "else", ":", "\n", "            ", "ids_num", "=", "3", "\n", "names", "=", "[", "\"src_ids\"", ",", "\"sent_ids\"", ",", "\"pos_ids\"", "]", "\n", "\n", "", "input_shapes", "=", "[", "[", "-", "1", ",", "self", ".", "max_seq_len", ",", "1", "]", "]", "*", "ids_num", "+", "[", "[", "-", "1", ",", "self", ".", "max_seq_len", ",", "self", ".", "max_seq_len", "]", "]", "\n", "query_input_shapes", "=", "[", "[", "-", "1", ",", "self", ".", "max_seq_len", ",", "1", "]", "]", "*", "ids_num", "+", "[", "[", "-", "1", ",", "self", ".", "max_seq_len", ",", "self", ".", "max_seq_len", "*", "2", "]", "]", "\n", "\n", "input_dtypes", "=", "[", "'int64'", "]", "*", "ids_num", "+", "[", "'float32'", "]", "\n", "input_lod_levels", "=", "[", "0", "]", "*", "ids_num", "+", "[", "0", "]", "\n", "\n", "if", "self", ".", "do_dec", ":", "\n", "            ", "names", "+=", "[", "\"tgt_src_ids\"", ",", "\"tgt_pos_ids\"", ",", "\"init_scores\"", ",", "\"parent_idx\"", ",", "\"tgt_mask_ids\"", ",", "\"data_ids\"", "]", "\n", "shapes", "=", "input_shapes", "+", "[", "[", "-", "1", ",", "self", ".", "max_seq_len", ",", "1", "]", ",", "[", "-", "1", ",", "self", ".", "max_seq_len", ",", "1", "]", ",", "\n", "[", "-", "1", ",", "1", "]", ",", "[", "-", "1", "]", ",", "[", "-", "1", ",", "1", ",", "self", ".", "max_seq_len", "]", ",", "[", "-", "1", ",", "1", "]", "]", "\n", "dtypes", "=", "input_dtypes", "+", "[", "'int64'", ",", "'int64'", ",", "'float32'", ",", "'int32'", ",", "'float32'", ",", "'int64'", "]", "\n", "lod_levels", "=", "input_lod_levels", "+", "[", "2", ",", "2", ",", "2", ",", "0", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "names", "+=", "[", "'tgt_label'", ",", "'tgt_pos'", "]", "\n", "shapes", "=", "input_shapes", "+", "[", "[", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", "]", "\n", "dtypes", "=", "input_dtypes", "+", "[", "'int64'", ",", "'int64'", "]", "\n", "lod_levels", "=", "input_lod_levels", "+", "[", "0", ",", "0", "]", "\n", "if", "self", ".", "two_stream", ":", "\n", "                ", "shapes", "+=", "query_input_shapes", "\n", "dtypes", "+=", "input_dtypes", "\n", "lod_levels", "+=", "input_lod_levels", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "shapes", ")", ")", ":", "\n", "            ", "self", ".", "input_data_list", ".", "append", "(", "fluid", ".", "layers", ".", "data", "(", "name", "=", "\"placeholder_\"", "+", "str", "(", "i", ")", ",", "shape", "=", "shapes", "[", "i", "]", ",", "\n", "dtype", "=", "dtypes", "[", "i", "]", ",", "lod_level", "=", "lod_levels", "[", "i", "]", ")", ")", "\n", "\n", "\n", "", "self", ".", "paddle_data_loader", "=", "fluid", ".", "io", ".", "DataLoader", ".", "from_generator", "(", "feed_list", "=", "self", ".", "input_data_list", ",", "\n", "capacity", "=", "50", ",", "iterable", "=", "False", ")", "\n", "\n", "logging", ".", "debug", "(", "\"{0} create py_reader shape = {1}, types = {2}, \\\n                      level = {3}: \"", ".", "format", "(", "self", ".", "name", ",", "shapes", ",", "dtypes", ",", "lod_levels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.get_num_examples": [[145, 149], ["ernie_gen_infilling_dataset_reader.InfillingGenReader.read_files", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.read_files"], ["", "def", "get_num_examples", "(", "self", ")", ":", "\n", "        ", "\"\"\"get_num_examples\"\"\"", "\n", "examples", "=", "self", ".", "read_files", "(", "self", ".", "config", ".", "data_path", ")", "\n", "return", "len", "(", "examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.run": [[150, 159], ["ernie_gen_infilling_dataset_reader.InfillingGenReader.paddle_data_loader.set_batch_generator", "ernie_gen_infilling_dataset_reader.InfillingGenReader.paddle_data_loader.start", "logging.info", "ValueError", "ernie_gen_infilling_dataset_reader.InfillingGenReader.data_generator"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.Token.start", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.data_generator"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"run\n        \"\"\"", "\n", "if", "self", ".", "paddle_data_loader", ":", "\n", "            ", "self", ".", "paddle_data_loader", ".", "set_batch_generator", "(", "self", ".", "data_generator", "(", ")", ")", "\n", "self", ".", "paddle_data_loader", ".", "start", "(", ")", "\n", "logging", ".", "info", "(", "\"set data_generator and start.......\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"paddle_data_loader is None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.instance_fields_dict": [[160, 165], ["ernie_gen_infilling_dataset_reader.InfillingGenReader.convert_fields_to_dict"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.convert_fields_to_dict"], ["", "", "def", "instance_fields_dict", "(", "self", ")", ":", "\n", "       ", "\"\"\"instance_fields_dict\n       \"\"\"", "\n", "fields_instance", "=", "self", ".", "convert_fields_to_dict", "(", "self", ".", "input_data_list", ")", "\n", "return", "fields_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.convert_fields_to_dict": [[166, 214], ["len", "range", "range", "range", "len", "len", "range"], "methods", ["None"], ["", "def", "convert_fields_to_dict", "(", "self", ",", "field_list", ",", "need_emb", "=", "False", ",", "extra", "=", "None", ")", ":", "\n", "        ", "\"\"\"convert fileds to dict\"\"\"", "\n", "fields_instance", "=", "{", "}", "\n", "\n", "if", "self", ".", "is_dialogue_task", ":", "\n", "            ", "input_keys", "=", "[", "InstanceName", ".", "SRC_IDS", ",", "InstanceName", ".", "ROLE_IDS", ",", "\n", "InstanceName", ".", "TURN_IDS", ",", "InstanceName", ".", "POS_IDS", "]", "\n", "", "else", ":", "\n", "            ", "input_keys", "=", "[", "InstanceName", ".", "SRC_IDS", ",", "InstanceName", ".", "SENTENCE_IDS", ",", "\n", "InstanceName", ".", "POS_IDS", "]", "\n", "", "input_keys", "+=", "[", "InstanceName", ".", "MASK_IDS", "]", "\n", "input_num", "=", "len", "(", "input_keys", ")", "\n", "context", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "input_num", ")", ":", "\n", "            ", "context", "[", "input_keys", "[", "index", "]", "]", "=", "field_list", "[", "index", "]", "\n", "", "fields_instance", "[", "\"context\"", "]", "=", "{", "InstanceName", ".", "RECORD_ID", ":", "context", "}", "\n", "\n", "if", "self", ".", "do_dec", ":", "\n", "            ", "decode_keys", "=", "[", "InstanceName", ".", "TGT_SRC_IDS", ",", "InstanceName", ".", "TGT_POS_IDS", ",", "\n", "InstanceName", ".", "INIT_SCORES", ",", "InstanceName", ".", "PARENT_IDX", ",", "\n", "InstanceName", ".", "TGT_MASK_IDS", ",", "InstanceName", ".", "DATA_IDS", "]", "\n", "decode_inputs", "=", "{", "}", "\n", "#print(field_list)", "\n", "for", "index", "in", "range", "(", "len", "(", "decode_keys", ")", ")", ":", "\n", "#print(len(field_list),input_num,decode_keys,index)", "\n", "#print(decode_keys)", "\n", "#print(field_list[input_num + index])", "\n", "                ", "decode_inputs", "[", "decode_keys", "[", "index", "]", "]", "=", "field_list", "[", "input_num", "+", "index", "]", "\n", "\n", "", "fields_instance", "[", "\"decode_inputs\"", "]", "=", "{", "InstanceName", ".", "RECORD_ID", ":", "decode_inputs", "}", "\n", "", "else", ":", "\n", "            ", "mask_keys", "=", "[", "InstanceName", ".", "TGT_LABEL", ",", "InstanceName", ".", "TGT_POS", "]", "\n", "masks", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "len", "(", "mask_keys", ")", ")", ":", "\n", "                ", "masks", "[", "mask_keys", "[", "index", "]", "]", "=", "field_list", "[", "input_num", "+", "index", "]", "\n", "", "fields_instance", "[", "\"masks\"", "]", "=", "{", "InstanceName", ".", "RECORD_ID", ":", "masks", "}", "\n", "\n", "if", "self", ".", "two_stream", ":", "\n", "                ", "query", "=", "{", "}", "\n", "query_field_list", "=", "field_list", "[", "-", "input_num", ":", "]", "\n", "for", "index", "in", "range", "(", "input_num", ")", ":", "\n", "                    ", "query", "[", "input_keys", "[", "index", "]", "]", "=", "query_field_list", "[", "index", "]", "\n", "", "fields_instance", "[", "\"query\"", "]", "=", "{", "InstanceName", ".", "RECORD_ID", ":", "query", "}", "\n", "\n", "#fields_instance = self.wrap_fields(fields_instance)", "\n", "\n", "\n", "", "", "return", "fields_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.read_files": [[215, 249], ["open", "f.readline().strip().split", "collections.namedtuple", "len", "len", "line.strip().split.strip().split.strip().split", "enumerate", "examples.append", "logging.error", "logging.error", "f.readline().strip", "enumerate", "len", "len", "collections.namedtuple.", "line.strip().split.strip().split.strip", "src.append", "traceback.format_exc", "f.readline"], "methods", ["None"], ["", "def", "read_files", "(", "self", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "        ", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "data_id", "=", "0", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "#with open(input_file, \"r\") as f:", "\n", "            ", "try", ":", "\n", "                ", "headers", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "src_indices", "=", "[", "\n", "index", "for", "index", ",", "h", "in", "enumerate", "(", "headers", ")", "if", "h", "!=", "\"tgt\"", "and", "h", "!=", "\"knowledge\"", "\n", "]", "\n", "assert", "len", "(", "src_indices", ")", "<=", "self", ".", "tgt_type_id", ",", "\"len(src_indices) > self.tgt_type_id\"", "\n", "assert", "len", "(", "src_indices", ")", ">", "0", ",", "\"len(src_indices) <= 0\"", "\n", "\n", "Example", "=", "namedtuple", "(", "'Example'", ",", "[", "\"src\"", ",", "\"tgt\"", ",", "\"knowledge\"", ",", "\"data_id\"", "]", ")", "\n", "examples", "=", "[", "]", "\n", "for", "line", "in", "f", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "src", "=", "[", "]", "\n", "tgt", "=", "None", "\n", "knowledge", "=", "None", "\n", "assert", "len", "(", "line", ")", "==", "len", "(", "headers", ")", ",", "\"len(line) != len(headers)\"", "\n", "for", "index", ",", "text", "in", "enumerate", "(", "line", ")", ":", "\n", "                        ", "if", "index", "in", "src_indices", ":", "\n", "                            ", "src", ".", "append", "(", "text", ")", "\n", "", "elif", "headers", "[", "index", "]", "==", "\"tgt\"", ":", "\n", "                            ", "tgt", "=", "text", "\n", "", "else", ":", "\n", "                            ", "knowledge", "=", "text", "\n", "", "", "examples", ".", "append", "(", "Example", "(", "src", "=", "src", ",", "tgt", "=", "tgt", ",", "knowledge", "=", "knowledge", ",", "data_id", "=", "data_id", ")", ")", "\n", "data_id", "+=", "1", "\n", "", "return", "examples", "\n", "", "except", "Exception", ":", "\n", "                ", "logging", ".", "error", "(", "\"error in read tsv\"", ")", "\n", "logging", ".", "error", "(", "\"traceback.format_exc():\\n%s\"", "%", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader._convert_dialogue_example_to_record": [[250, 336], ["example.src[].split", "len", "len", "collections.namedtuple", "collections.namedtuple.", "len", "len", "list", "list", "token_ids.append", "role_type_ids.append", "turn_type_ids.append", "list.append", "list", "list", "len", "len", "len", "len", "ernie_gen_infilling_dataset_reader.InfillingGenReader.tokenizer.tokenize", "erniekit.data.util_helper.convert_to_unicode().split", "len", "ernie_gen_infilling_dataset_reader.InfillingGenReader.tokenizer.convert_tokens_to_ids", "len", "len", "range", "ernie_gen_infilling_dataset_reader.InfillingGenReader.tokenizer.tokenize", "erniekit.data.util_helper.convert_to_unicode().split", "len", "ernie_gen_infilling_dataset_reader.InfillingGenReader.tokenizer.convert_tokens_to_ids", "len", "len", "range", "len", "ernie_gen_infilling_dataset_reader.InfillingGenReader.tokenizer.tokenize", "erniekit.data.util_helper.convert_to_unicode().split", "ernie_gen_infilling_dataset_reader.InfillingGenReader.tokenizer.convert_tokens_to_ids", "len", "len", "len", "range", "range", "erniekit.data.util_helper.convert_to_unicode", "erniekit.data.util_helper.convert_to_unicode", "erniekit.data.util_helper.convert_to_unicode", "len", "len", "erniekit.data.util_helper.convert_to_unicode", "len", "erniekit.data.util_helper.convert_to_unicode", "len", "erniekit.data.util_helper.convert_to_unicode", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "", "", "def", "_convert_dialogue_example_to_record", "(", "self", ",", "example", ")", ":", "\n", "        ", "\"\"\"convert_dialogue_example_to_record\"\"\"", "\n", "turn_split", "=", "\" __eou__ \"", "\n", "srcs", "=", "example", ".", "src", "[", "0", "]", ".", "split", "(", "turn_split", ")", "\n", "if", "len", "(", "srcs", ")", ">", "self", ".", "turn_type_size", "-", "1", ":", "\n", "            ", "srcs", "=", "srcs", "[", "len", "(", "srcs", ")", "-", "(", "self", ".", "turn_type_size", "-", "1", ")", ":", "]", "\n", "", "cur_role_type", "=", "len", "(", "srcs", ")", "%", "2", "\n", "cur_turn_type", "=", "len", "(", "srcs", ")", "\n", "\n", "token_ids", "=", "[", "self", ".", "cls_id", "]", "\n", "role_type_ids", "=", "[", "cur_role_type", "]", "\n", "turn_type_ids", "=", "[", "cur_turn_type", "]", "\n", "position_ids", "=", "[", "0", "]", "\n", "\n", "if", "example", ".", "knowledge", ":", "\n", "            ", "text", "=", "example", ".", "knowledge", "\n", "if", "not", "self", ".", "tokenized_input", ":", "\n", "                ", "cur_tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "convert_to_unicode", "(", "text", ")", ")", "\n", "", "else", ":", "\n", "                ", "cur_tokens", "=", "convert_to_unicode", "(", "text", ")", ".", "split", "(", "\" \"", ")", "\n", "", "if", "len", "(", "cur_tokens", ")", ">", "self", ".", "max_src_len", "-", "2", ":", "\n", "                ", "cur_tokens", "=", "cur_tokens", "[", ":", "self", ".", "max_src_len", "-", "2", "]", "\n", "", "cur_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "cur_tokens", ")", "+", "[", "self", ".", "sep_id", "]", "\n", "token_ids", "+=", "cur_ids", "\n", "role_type_ids", "+=", "[", "2", "]", "*", "len", "(", "cur_ids", ")", "\n", "turn_type_ids", "+=", "[", "0", "]", "*", "len", "(", "cur_ids", ")", "\n", "position_ids", "+=", "list", "(", "range", "(", "1", ",", "len", "(", "cur_ids", ")", "+", "1", ")", ")", "\n", "\n", "", "for", "text", "in", "srcs", ":", "\n", "            ", "if", "not", "self", ".", "tokenized_input", ":", "\n", "                ", "cur_tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "convert_to_unicode", "(", "text", ")", ")", "\n", "", "else", ":", "\n", "                ", "cur_tokens", "=", "convert_to_unicode", "(", "text", ")", ".", "split", "(", "\" \"", ")", "\n", "", "if", "len", "(", "cur_tokens", ")", ">", "self", ".", "max_src_len", "-", "2", ":", "\n", "                ", "cur_tokens", "=", "cur_tokens", "[", ":", "self", ".", "max_src_len", "-", "2", "]", "\n", "", "cur_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "cur_tokens", ")", "+", "[", "self", ".", "sep_id", "]", "\n", "token_ids", "+=", "cur_ids", "\n", "role_type_ids", "+=", "[", "cur_role_type", "]", "*", "len", "(", "cur_ids", ")", "\n", "turn_type_ids", "+=", "[", "cur_turn_type", "]", "*", "len", "(", "cur_ids", ")", "\n", "position_ids", "+=", "list", "(", "range", "(", "1", ",", "len", "(", "cur_ids", ")", "+", "1", ")", ")", "\n", "cur_turn_type", "-=", "1", "\n", "cur_role_type", "=", "(", "cur_role_type", "+", "1", ")", "%", "2", "\n", "", "if", "self", ".", "continuous_position", "and", "len", "(", "token_ids", ")", ">", "self", ".", "max_src_len", ":", "\n", "            ", "token_ids", "=", "token_ids", "[", "-", "self", ".", "max_src_len", ":", "]", "\n", "role_type_ids", "=", "role_type_ids", "[", "-", "self", ".", "max_src_len", ":", "]", "\n", "turn_type_ids", "=", "turn_type_ids", "[", "-", "self", ".", "max_src_len", ":", "]", "\n", "\n", "", "tgt_start_idx", "=", "len", "(", "token_ids", ")", "\n", "\n", "if", "not", "self", ".", "do_dec", ":", "\n", "            ", "assert", "example", ".", "tgt", ",", "\"example.tgt is None\"", "\n", "token_ids", ".", "append", "(", "self", ".", "cls_id", ")", "\n", "role_type_ids", ".", "append", "(", "0", ")", "\n", "turn_type_ids", ".", "append", "(", "0", ")", "\n", "position_ids", ".", "append", "(", "0", ")", "\n", "\n", "if", "not", "self", ".", "tokenized_input", ":", "\n", "                ", "tgt_tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "convert_to_unicode", "(", "example", ".", "tgt", ")", ")", "\n", "", "else", ":", "\n", "                ", "tgt_tokens", "=", "convert_to_unicode", "(", "example", ".", "tgt", ")", ".", "split", "(", "\" \"", ")", "\n", "", "tgt_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tgt_tokens", ")", "+", "[", "self", ".", "sep_id", "]", "\n", "if", "len", "(", "tgt_ids", ")", ">", "self", ".", "max_tgt_len", "-", "1", ":", "\n", "                ", "tgt_ids", "=", "tgt_ids", "[", ":", "self", ".", "max_tgt_len", "-", "1", "]", "\n", "", "token_ids", "+=", "tgt_ids", "\n", "role_type_ids", "+=", "[", "0", "]", "*", "len", "(", "tgt_ids", ")", "\n", "turn_type_ids", "+=", "[", "0", "]", "*", "len", "(", "tgt_ids", ")", "\n", "position_ids", "+=", "list", "(", "range", "(", "1", ",", "len", "(", "tgt_ids", ")", "+", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "continuous_position", ":", "\n", "            ", "position_ids", "=", "list", "(", "range", "(", "len", "(", "token_ids", ")", ")", ")", "\n", "\n", "", "assert", "len", "(", "token_ids", ")", "==", "len", "(", "position_ids", ")", "==", "len", "(", "role_type_ids", ")", "==", "len", "(", "turn_type_ids", ")", ",", "\"not len(token_ids) == len(position_ids) == len(role_type_ids) == len(turn_type_ids)\"", "\n", "\n", "Record", "=", "namedtuple", "(", "\n", "'Record'", ",", "\n", "[", "'token_ids'", ",", "'position_ids'", ",", "'role_ids'", ",", "'turn_ids'", ",", "'tgt_start_idx'", ",", "'data_id'", "]", ")", "\n", "record", "=", "Record", "(", "\n", "token_ids", "=", "token_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "role_ids", "=", "role_type_ids", ",", "\n", "turn_ids", "=", "turn_type_ids", ",", "\n", "tgt_start_idx", "=", "tgt_start_idx", ",", "\n", "data_id", "=", "example", ".", "data_id", ")", "\n", "\n", "return", "record", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.convert_example_to_record": [[337, 394], ["len", "collections.namedtuple", "collections.namedtuple.", "list", "token_ids.append", "text_type_ids.append", "list.append", "list", "list", "len", "len", "len", "src_tokenizer.tokenize", "erniekit.data.util_helper.convert_to_unicode().split", "len", "src_tokenizer.convert_tokens_to_ids", "len", "range", "ernie_gen_infilling_dataset_reader.InfillingGenReader.tokenizer.tokenize", "erniekit.data.util_helper.convert_to_unicode().split", "ernie_gen_infilling_dataset_reader.InfillingGenReader.tokenizer.convert_tokens_to_ids", "len", "len", "range", "range", "erniekit.data.util_helper.convert_to_unicode", "erniekit.data.util_helper.convert_to_unicode", "len", "erniekit.data.util_helper.convert_to_unicode", "len", "erniekit.data.util_helper.convert_to_unicode", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "convert_example_to_record", "(", "self", ",", "example", ",", "max_seq_length", "=", "512", ",", "tokenizer", "=", "None", ",", "is_zh", "=", "True", ")", ":", "\n", "        ", "\"\"\"convert_example_to_record\"\"\"", "\n", "token_ids", "=", "[", "self", ".", "cls_id", "]", "\n", "text_type_ids", "=", "[", "0", "]", "\n", "position_ids", "=", "[", "0", "]", "\n", "text_type", "=", "0", "\n", "\n", "src_tokenizer", "=", "self", ".", "src_tokenizer", "if", "self", ".", "is_trans_task", "else", "self", ".", "tokenizer", "\n", "for", "text", "in", "example", ".", "src", ":", "\n", "            ", "if", "not", "self", ".", "tokenized_input", ":", "\n", "                ", "cur_tokens", "=", "src_tokenizer", ".", "tokenize", "(", "convert_to_unicode", "(", "text", ")", ")", "\n", "", "else", ":", "\n", "                ", "cur_tokens", "=", "convert_to_unicode", "(", "text", ")", ".", "split", "(", "\" \"", ")", "\n", "", "if", "len", "(", "cur_tokens", ")", ">", "self", ".", "max_src_len", "-", "2", ":", "\n", "                ", "cur_tokens", "=", "cur_tokens", "[", ":", "self", ".", "max_src_len", "-", "2", "]", "\n", "", "cur_ids", "=", "src_tokenizer", ".", "convert_tokens_to_ids", "(", "cur_tokens", ")", "+", "[", "self", ".", "sep_id", "]", "\n", "token_ids", "+=", "cur_ids", "\n", "text_type_ids", "+=", "[", "text_type", "]", "*", "len", "(", "cur_ids", ")", "\n", "position_ids", "+=", "list", "(", "range", "(", "1", ",", "len", "(", "cur_ids", ")", "+", "1", ")", ")", "\n", "text_type", "+=", "1", "\n", "\n", "", "tgt_start_idx", "=", "len", "(", "token_ids", ")", "\n", "\n", "if", "not", "self", ".", "do_dec", ":", "\n", "            ", "assert", "example", ".", "tgt", ",", "\"example.tgt is None\"", "\n", "token_ids", ".", "append", "(", "self", ".", "cls_id", ")", "\n", "text_type_ids", ".", "append", "(", "self", ".", "tgt_type_id", ")", "\n", "position_ids", ".", "append", "(", "0", ")", "\n", "\n", "if", "not", "self", ".", "tokenized_input", ":", "\n", "                ", "tgt_tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "convert_to_unicode", "(", "example", ".", "tgt", ")", ")", "\n", "", "else", ":", "\n", "                ", "tgt_tokens", "=", "convert_to_unicode", "(", "example", ".", "tgt", ")", ".", "split", "(", "\" \"", ")", "\n", "", "tgt_ids", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tgt_tokens", ")", "+", "[", "self", ".", "sep_id", "]", "\n", "if", "len", "(", "tgt_ids", ")", ">", "self", ".", "max_tgt_len", "-", "1", ":", "\n", "                ", "tgt_ids", "=", "tgt_ids", "[", ":", "self", ".", "max_tgt_len", "-", "1", "]", "\n", "", "token_ids", "+=", "tgt_ids", "\n", "text_type_ids", "+=", "[", "self", ".", "tgt_type_id", "]", "*", "len", "(", "tgt_ids", ")", "\n", "position_ids", "+=", "list", "(", "range", "(", "1", ",", "len", "(", "tgt_ids", ")", "+", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "continuous_position", ":", "\n", "            ", "position_ids", "=", "list", "(", "range", "(", "len", "(", "token_ids", ")", ")", ")", "\n", "\n", "", "assert", "len", "(", "token_ids", ")", "==", "len", "(", "position_ids", ")", "==", "len", "(", "text_type_ids", ")", ",", "\"not len(token_ids) == len(position_ids) == len(text_type_ids)\"", "\n", "\n", "Record", "=", "namedtuple", "(", "\n", "'Record'", ",", "\n", "[", "'token_ids'", ",", "'text_type_ids'", ",", "'position_ids'", ",", "'tgt_start_idx'", ",", "'data_id'", "]", ")", "\n", "record", "=", "Record", "(", "\n", "token_ids", "=", "token_ids", ",", "\n", "text_type_ids", "=", "text_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "tgt_start_idx", "=", "tgt_start_idx", ",", "\n", "data_id", "=", "example", ".", "data_id", ")", "\n", "\n", "return", "record", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.prepare_batch_data": [[395, 423], ["enumerate", "max", "ernie_gen_infilling_dataset_reader.InfillingGenReader._convert_dialogue_example_to_record", "ernie_gen_infilling_dataset_reader.InfillingGenReader.convert_example_to_record", "len", "batch_records.append", "ernie_gen_infilling_dataset_reader.InfillingGenReader.pad_batch_records", "len", "ernie_gen_infilling_dataset_reader.InfillingGenReader.pad_batch_records", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader._convert_dialogue_example_to_record", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.convert_example_to_record", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records"], ["", "def", "prepare_batch_data", "(", "self", ",", "examples", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"generate batch records\"\"\"", "\n", "batch_records", ",", "max_len", "=", "[", "]", ",", "0", "\n", "for", "index", ",", "example", "in", "enumerate", "(", "examples", ")", ":", "\n", "            ", "if", "\"train\"", "in", "self", ".", "name", ":", "\n", "                ", "self", ".", "current_example", "=", "index", "\n", "\n", "", "if", "self", ".", "is_dialogue_task", ":", "\n", "                ", "record", "=", "self", ".", "_convert_dialogue_example_to_record", "(", "example", ")", "\n", "", "else", ":", "\n", "                ", "record", "=", "self", ".", "convert_example_to_record", "(", "example", ")", "\n", "\n", "", "max_len", "=", "max", "(", "max_len", ",", "len", "(", "record", ".", "token_ids", ")", ")", "\n", "if", "self", ".", "in_tokens", ":", "\n", "                ", "to_append", "=", "(", "len", "(", "batch_records", ")", "+", "1", ")", "*", "max_len", "<=", "batch_size", "\n", "", "else", ":", "\n", "                ", "to_append", "=", "len", "(", "batch_records", ")", "<", "batch_size", "\n", "", "if", "to_append", ":", "\n", "                ", "batch_records", ".", "append", "(", "record", ")", "\n", "", "else", ":", "\n", "#print(len(batch_records[0]))", "\n", "#print(len(self.pad_batch_records(batch_records)))", "\n", "#aaa", "\n", "                ", "yield", "self", ".", "pad_batch_records", "(", "batch_records", ")", "\n", "batch_records", ",", "max_len", "=", "[", "record", "]", ",", "len", "(", "record", ".", "token_ids", ")", "\n", "\n", "", "", "if", "batch_records", ":", "\n", "            ", "yield", "self", ".", "pad_batch_records", "(", "batch_records", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader._to_lodtensor": [[424, 430], ["paddle.LoDTensor", "paddle.LoDTensor", "paddle.LoDTensor.set", "paddle.LoDTensor.set_lod"], "methods", ["None"], ["", "", "def", "_to_lodtensor", "(", "self", ",", "data", ",", "lod", "=", "None", ")", ":", "\n", "        ", "data_tensor", "=", "fluid", ".", "LoDTensor", "(", ")", "\n", "data_tensor", ".", "set", "(", "data", ",", "self", ".", "place", ")", "\n", "if", "lod", "is", "not", "None", ":", "\n", "            ", "data_tensor", ".", "set_lod", "(", "lod", ")", "\n", "", "return", "data_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.pad_batch_records": [[431, 544], ["ernie_gen_infilling_dataset_reader.InfillingGenReader.gen_unidirectional_mask", "return_list.append", "max", "numpy.array", "numpy.array.reshape", "return_list.append", "numpy.array().astype().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.tile().astype", "range", "ernie_gen_infilling_dataset_reader.InfillingGenReader.pad_batch_records.pad_batch_data_before"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.gen_unidirectional_mask"], ["", "def", "pad_batch_records", "(", "self", ",", "batch_records", ")", ":", "\n", "        ", "\"\"\"pad batch records\"\"\"", "\n", "\n", "def", "pad_batch_data_before", "(", "insts", ",", "pad_idx", "=", "0", ")", ":", "\n", "            ", "\"\"\"\n            For generation task, \n            it's easier to extract the new generate token in batch mode \n            when paddings are appendded before real ids\n            \"\"\"", "\n", "max_len", "=", "max", "(", "len", "(", "inst", ")", "for", "inst", "in", "insts", ")", "\n", "inst_data", "=", "np", ".", "array", "(", "[", "inst", "+", "list", "(", "[", "pad_idx", "]", "*", "(", "max_len", "-", "len", "(", "inst", ")", ")", ")", "for", "inst", "in", "insts", "]", ")", "\n", "return", "inst_data", ".", "reshape", "(", "[", "-", "1", ",", "max_len", ",", "1", "]", ")", "\n", "\n", "", "batch_token_ids", "=", "[", "record", ".", "token_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_position_ids", "=", "[", "record", ".", "position_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_tgt_start_idx", "=", "[", "record", ".", "tgt_start_idx", "for", "record", "in", "batch_records", "]", "\n", "input_mask", "=", "self", ".", "gen_unidirectional_mask", "(", "batch_token_ids", ",", "batch_tgt_start_idx", ")", "\n", "if", "self", ".", "is_dialogue_task", ":", "\n", "            ", "batch_role_ids", "=", "[", "record", ".", "role_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_turn_ids", "=", "[", "record", ".", "turn_ids", "for", "record", "in", "batch_records", "]", "\n", "to_pad_list", "=", "[", "batch_token_ids", ",", "batch_role_ids", ",", "batch_turn_ids", ",", "batch_position_ids", "]", "\n", "", "else", ":", "\n", "            ", "batch_text_type_ids", "=", "[", "record", ".", "text_type_ids", "for", "record", "in", "batch_records", "]", "\n", "to_pad_list", "=", "[", "batch_token_ids", ",", "batch_text_type_ids", ",", "batch_position_ids", "]", "\n", "", "return_list", "=", "[", "]", "\n", "for", "ids", "in", "to_pad_list", ":", "\n", "            ", "return_list", ".", "append", "(", "pad_batch_data_before", "(", "ids", ",", "pad_idx", "=", "self", ".", "pad_id", ")", ")", "\n", "", "return_list", ".", "append", "(", "input_mask", ")", "\n", "\n", "max_len", "=", "return_list", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "do_dec", ":", "\n", "            ", "batch_data_ids", "=", "[", "record", ".", "data_id", "for", "record", "in", "batch_records", "]", "\n", "batch_data_ids", "=", "np", ".", "array", "(", "batch_data_ids", ")", ".", "astype", "(", "\"int64\"", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "tgt_word", "=", "np", ".", "array", "(", "[", "[", "self", ".", "cls_id", "]", "]", "*", "len", "(", "batch_token_ids", ")", ",", "dtype", "=", "\"int64\"", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "tgt_pos_id", "=", "np", ".", "array", "(", "batch_tgt_start_idx", ",", "dtype", "=", "\"int64\"", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "lods", "=", "[", "list", "(", "range", "(", "tgt_word", ".", "shape", "[", "0", "]", "+", "1", ")", ")", "]", "*", "2", "\n", "if", "self", ".", "phase", "==", "\"predict\"", ":", "\n", "                ", "init_score", "=", "np", ".", "zeros_like", "(", "tgt_word", ",", "dtype", "=", "\"float32\"", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "init_score", "=", "self", ".", "_to_lodtensor", "(", "np", ".", "zeros_like", "(", "tgt_word", ",", "dtype", "=", "\"float32\"", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "[", "list", "(", "range", "(", "tgt_word", ".", "shape", "[", "0", "]", "+", "1", ")", ")", "]", "*", "2", ")", "\n", "tgt_word", "=", "self", ".", "_to_lodtensor", "(", "tgt_word", ",", "[", "list", "(", "range", "(", "tgt_word", ".", "shape", "[", "0", "]", "+", "1", ")", ")", "]", "*", "2", ")", "\n", "tgt_pos_id", "=", "self", ".", "_to_lodtensor", "(", "tgt_pos_id", ",", "[", "list", "(", "range", "(", "tgt_pos_id", ".", "shape", "[", "0", "]", "+", "1", ")", ")", "]", "*", "2", ")", "\n", "\n", "", "init_idx", "=", "np", ".", "array", "(", "list", "(", "range", "(", "len", "(", "batch_token_ids", ")", ")", ")", ",", "dtype", "=", "\"int32\"", ")", "\n", "tgt_src_attn_bias", "=", "np", ".", "tile", "(", "input_mask", "[", ":", ",", ":", ":", "max_len", ",", ":", "]", ",", "\n", "[", "1", ",", "1", ",", "1", "]", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "return_list", "+=", "[", "tgt_word", ",", "tgt_pos_id", ",", "init_score", ",", "init_idx", ",", "\n", "tgt_src_attn_bias", ",", "batch_data_ids", "]", "\n", "if", "self", ".", "phase", "==", "\"predict\"", ":", "\n", "                ", "return_list", "+=", "[", "lods", "]", "\n", "", "", "else", ":", "\n", "            ", "mask_id", "=", "self", ".", "vocab", "[", "\"[MASK]\"", "]", "\n", "tgt_label", "=", "[", "]", "\n", "tgt_pos", "=", "[", "]", "\n", "\n", "def", "_gen_noise", "(", "tk", ")", ":", "\n", "                ", "if", "self", ".", "two_stream", ":", "\n", "                    ", "if", "self", ".", "random_noise", ":", "\n", "                        ", "return", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "vocab", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                        ", "return", "mask_id", "\n", "", "", "else", ":", "#UNILM Style", "\n", "                    ", "if", "random", ".", "random", "(", ")", "<", "0.8", ":", "\n", "                        ", "return", "mask_id", "\n", "", "elif", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                        ", "return", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "vocab", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "                        ", "return", "tk", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "len", "(", "batch_token_ids", ")", ")", ":", "\n", "                ", "if", "self", ".", "two_stream", ":", "\n", "                    ", "tgt_label", ".", "extend", "(", "batch_token_ids", "[", "i", "]", "[", "idx", "]", "for", "idx", "in", "range", "(", "batch_tgt_start_idx", "[", "i", "]", "+", "1", ",", "len", "(", "batch_token_ids", "[", "i", "]", ")", ")", ")", "\n", "for", "idx", "in", "range", "(", "batch_tgt_start_idx", "[", "i", "]", "+", "1", ",", "len", "(", "batch_token_ids", "[", "i", "]", ")", ")", ":", "\n", "                        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "mask_prob", ":", "\n", "                            ", "batch_token_ids", "[", "i", "]", "[", "idx", "]", "=", "_gen_noise", "(", "batch_token_ids", "[", "i", "]", "[", "idx", "]", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "cur_pos", "=", "[", "]", "\n", "cur_label", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "batch_tgt_start_idx", "[", "i", "]", "+", "1", ",", "len", "(", "batch_token_ids", "[", "i", "]", ")", ")", ":", "\n", "                        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "mask_prob", ":", "\n", "                            ", "continue", "\n", "", "cur_label", ".", "append", "(", "batch_token_ids", "[", "i", "]", "[", "idx", "]", ")", "\n", "cur_pos", ".", "append", "(", "idx", ")", "\n", "batch_token_ids", "[", "i", "]", "[", "idx", "]", "=", "_gen_noise", "(", "batch_token_ids", "[", "i", "]", "[", "idx", "]", ")", "\n", "\n", "", "tgt_pos", ".", "extend", "(", "[", "idx", "+", "max_len", "*", "i", "for", "idx", "in", "cur_pos", "]", ")", "\n", "tgt_label", ".", "extend", "(", "cur_label", ")", "\n", "", "", "return_list", "[", "0", "]", "=", "pad_batch_data_before", "(", "batch_token_ids", ",", "pad_idx", "=", "self", ".", "pad_id", ")", "\n", "tgt_label", "=", "np", ".", "array", "(", "tgt_label", ")", ".", "astype", "(", "\"int64\"", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "if", "self", ".", "two_stream", ":", "\n", "                ", "input_query_mask", ",", "query_token_ids", ",", "tgt_pos", "=", "self", ".", "gen_query_input", "(", "batch_token_ids", ",", "\n", "max_len", ",", "batch_tgt_start_idx", ",", "mask_id", ")", "\n", "return_list", "+=", "[", "tgt_label", ",", "tgt_pos", ",", "query_token_ids", "]", "\n", "for", "ids", "in", "to_pad_list", "[", "1", ":", "]", ":", "\n", "                    ", "return_list", ".", "append", "(", "pad_batch_data_before", "(", "\n", "[", "ids", "[", "i", "]", "[", "batch_tgt_start_idx", "[", "i", "]", ":", "]", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", "]", ",", "\n", "pad_idx", "=", "self", ".", "pad_id", ")", ")", "\n", "", "return_list", ".", "append", "(", "input_query_mask", ")", "\n", "", "else", ":", "\n", "                ", "tgt_pos", "=", "np", ".", "array", "(", "tgt_pos", ")", ".", "astype", "(", "\"int64\"", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "return_list", "+=", "[", "tgt_label", ",", "tgt_pos", "]", "\n", "\n", "\n", "\n", "", "", "if", "self", ".", "config", ".", "need_generate_examples", ":", "\n", "#print(return_list)", "\n", "#aaa", "\n", "            ", "return", "return_list", ",", "batch_records", "\n", "", "else", ":", "\n", "            ", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.__iter__": [[545, 582], ["ernie_gen_infilling_dataset_reader.InfillingGenReader.read_files", "paddle.get_world_size", "paddle.get_world_size", "paddle.get_rank", "paddle.get_rank", "range", "ernie_gen_infilling_dataset_reader.InfillingGenReader.prepare_batch_data", "numpy.random.shuffle", "len", "all_dev_batches.append", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.read_files", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.prepare_batch_data"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u8fed\u4ee3\u5668\n        \"\"\"", "\n", "\n", "epoch", "=", "self", ".", "config", ".", "epoch", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", "\n", "shuffle", "=", "self", ".", "config", ".", "shuffle", "\n", "examples", "=", "self", ".", "read_files", "(", "self", ".", "config", ".", "data_path", ")", "\n", "if", "self", ".", "do_dec", ":", "\n", "            ", "features", "=", "{", "}", "\n", "for", "example", "in", "examples", ":", "\n", "                ", "features", "[", "example", ".", "data_id", "]", "=", "example", "\n", "", "self", ".", "features", "[", "self", ".", "phase", "]", "=", "features", "\n", "\n", "# trainer_id \u548c dev_count\u5fc5\u987b\u8981\u8bbe\u7f6e\uff0c\u5426\u5219\u591a\u5361\u7684\u65f6\u5019\u6bcf\u5f20\u5361\u4e0a\u7684\u6570\u636e\u90fd\u662f\u4e00\u6837\u7684", "\n", "", "self", ".", "dev_count", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "trainer_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "self", ".", "trainer_nums", "=", "self", ".", "dev_count", "\n", "\n", "all_dev_batches", "=", "[", "]", "\n", "for", "epoch_index", "in", "range", "(", "epoch", ")", ":", "\n", "            ", "if", "self", ".", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "                ", "self", ".", "current_example", "=", "0", "\n", "self", ".", "current_epoch", "=", "epoch_index", "\n", "\n", "", "if", "shuffle", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "examples", ")", "\n", "", "for", "batch_data", "in", "self", ".", "prepare_batch_data", "(", "examples", ",", "self", ".", "config", ".", "batch_size", ")", ":", "\n", "                ", "if", "self", ".", "config", ".", "need_data_distribute", ":", "\n", "                    ", "if", "len", "(", "all_dev_batches", ")", "<", "self", ".", "dev_count", ":", "\n", "                        ", "all_dev_batches", ".", "append", "(", "batch_data", ")", "\n", "", "if", "len", "(", "all_dev_batches", ")", "==", "self", ".", "dev_count", ":", "\n", "# trick: handle batch inconsistency caused by data sharding for each trainer", "\n", "                        ", "yield", "all_dev_batches", "[", "self", ".", "trainer_id", "]", "\n", "all_dev_batches", "=", "[", "]", "\n", "", "", "else", ":", "\n", "                    ", "yield", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.data_generator": [[583, 627], ["ernie_gen_infilling_dataset_reader.InfillingGenReader.read_files", "range", "ernie_gen_infilling_dataset_reader.InfillingGenReader.prepare_batch_data", "numpy.random.shuffle", "len", "all_dev_batches.append", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.read_files", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.prepare_batch_data"], ["", "", "", "", "def", "data_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"generate data\"\"\"", "\n", "\n", "epoch", "=", "self", ".", "config", ".", "epoch", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", "\n", "shuffle", "=", "self", ".", "config", ".", "shuffle", "\n", "examples", "=", "self", ".", "read_files", "(", "self", ".", "config", ".", "data_path", ")", "\n", "if", "self", ".", "do_dec", ":", "\n", "            ", "features", "=", "{", "}", "\n", "for", "example", "in", "examples", ":", "\n", "                ", "features", "[", "example", ".", "data_id", "]", "=", "example", "\n", "", "self", ".", "features", "[", "self", ".", "phase", "]", "=", "features", "\n", "\n", "", "def", "wrapper", "(", ")", ":", "\n", "            ", "\"\"\"wraper\"\"\"", "\n", "all_dev_batches", "=", "[", "]", "\n", "trainer_id", "=", "self", ".", "trainer_id", "\n", "for", "epoch_index", "in", "range", "(", "epoch", ")", ":", "\n", "                ", "if", "self", ".", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "                    ", "self", ".", "current_example", "=", "0", "\n", "self", ".", "current_epoch", "=", "epoch_index", "\n", "\n", "", "if", "shuffle", ":", "\n", "                    ", "np", ".", "random", ".", "shuffle", "(", "examples", ")", "\n", "", "for", "batch_data", "in", "self", ".", "prepare_batch_data", "(", "\n", "examples", ",", "batch_size", ")", ":", "\n", "#print(batch_data)", "\n", "#print(len(batch_data[0]))", "\n", "\n", "#aa", "\n", "#aa", "\n", "                    ", "if", "len", "(", "all_dev_batches", ")", "<", "self", ".", "dev_count", ":", "\n", "                        ", "all_dev_batches", ".", "append", "(", "batch_data", ")", "\n", "", "if", "len", "(", "all_dev_batches", ")", "==", "self", ".", "dev_count", ":", "\n", "                        ", "if", "trainer_id", "<", "len", "(", "all_dev_batches", ")", ":", "\n", "#print(all_dev_batches)", "\n", "#aaa", "\n", "                            ", "yield", "all_dev_batches", "[", "trainer_id", "]", "\n", "", "all_dev_batches", "=", "[", "]", "\n", "", "", "if", "self", ".", "phase", "!=", "InstanceName", ".", "TRAINING", ":", "\n", "                    ", "if", "trainer_id", "<", "len", "(", "all_dev_batches", ")", ":", "\n", "                        ", "yield", "all_dev_batches", "[", "trainer_id", "]", "\n", "\n", "", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.api_generator": [[628, 640], ["collections.namedtuple", "enumerate", "ernie_gen_infilling_dataset_reader.InfillingGenReader.prepare_batch_data", "len", "ValueError", "examples.append", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.prepare_batch_data"], ["", "def", "api_generator", "(", "self", ",", "query_list", ")", ":", "\n", "        ", "\"\"\"api server\"\"\"", "\n", "\n", "if", "len", "(", "query_list", ")", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"query can't be None\"", ")", "\n", "", "Example", "=", "namedtuple", "(", "'Example'", ",", "[", "\"src\"", ",", "\"tgt\"", ",", "\"knowledge\"", ",", "\"data_id\"", "]", ")", "\n", "examples", "=", "[", "]", "\n", "for", "index", ",", "query", "in", "enumerate", "(", "query_list", ")", ":", "\n", "            ", "examples", ".", "append", "(", "Example", "(", "src", "=", "[", "query", "[", "'answer'", "]", ",", "query", "[", "'paragraph'", "]", "]", ",", "tgt", "=", "None", ",", "knowledge", "=", "None", ",", "data_id", "=", "index", ")", ")", "\n", "\n", "", "for", "batch_data", "in", "self", ".", "prepare_batch_data", "(", "examples", ",", "self", ".", "config", ".", "batch_size", ")", ":", "\n", "            ", "yield", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.gen_unidirectional_mask": [[641, 657], ["max", "numpy.zeros", "enumerate", "numpy.array().reshape", "len", "numpy.tril", "len", "len", "numpy.ones", "numpy.array"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "gen_unidirectional_mask", "(", "insts", ",", "sent_b_starts", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        generate input mask for seq2seq\n        \"\"\"", "\n", "max_len", "=", "max", "(", "len", "(", "inst", ")", "for", "inst", "in", "insts", ")", "\n", "input_mask_data", "=", "np", ".", "zeros", "(", "(", "len", "(", "insts", ")", ",", "max_len", ",", "max_len", ")", ")", "\n", "for", "index", ",", "mask_data", "in", "enumerate", "(", "input_mask_data", ")", ":", "\n", "            ", "start", "=", "sent_b_starts", "[", "index", "]", "\n", "end", "=", "len", "(", "insts", "[", "index", "]", ")", "\n", "mask_data", "[", ":", "end", ",", ":", "start", "]", "=", "1.0", "\n", "# Generate the lower triangular matrix using the slice of matrix", "\n", "b", "=", "np", ".", "tril", "(", "np", ".", "ones", "(", "[", "end", "-", "start", ",", "end", "-", "start", "]", ")", ",", "0", ")", "\n", "mask_data", "[", "start", ":", "end", ",", "start", ":", "end", "]", "=", "b", "\n", "", "input_mask_data", "=", "np", ".", "array", "(", "input_mask_data", ",", "dtype", "=", "'float32'", ")", ".", "reshape", "(", "[", "-", "1", ",", "max_len", ",", "max_len", "]", ")", "\n", "return", "input_mask_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_gen_infilling_dataset_reader.InfillingGenReader.gen_query_input": [[658, 679], ["len", "max", "numpy.zeros", "range", "enumerate", "numpy.ones", "tgt_pos.extend", "range", "numpy.zeros.astype", "mask_ids.astype", "numpy.array().reshape().astype", "len", "range", "list", "range", "numpy.array().reshape", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "gen_query_input", "(", "token_ids", ",", "max_len", ",", "sent_b_starts", ",", "mask_id", ")", ":", "\n", "        ", "\"\"\"\n        generate query input when using two-stream\n        \"\"\"", "\n", "bsz", "=", "len", "(", "sent_b_starts", ")", "\n", "dec_len", "=", "[", "len", "(", "token_ids", "[", "i", "]", ")", "-", "sent_b_starts", "[", "i", "]", "for", "i", "in", "range", "(", "bsz", ")", "]", "\n", "max_len_query", "=", "max", "(", "dec_len", ")", "\n", "mask_datas", "=", "np", ".", "zeros", "(", "(", "bsz", ",", "max_len_query", ",", "max_len", "+", "max_len_query", ")", ")", "\n", "mask_ids", "=", "np", ".", "ones", "(", "(", "bsz", ",", "max_len_query", ",", "1", ")", ")", "*", "mask_id", "\n", "tgt_pos", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "tgt_pos", ".", "extend", "(", "list", "(", "range", "(", "max_len_query", "*", "i", "+", "1", ",", "max_len_query", "*", "i", "+", "dec_len", "[", "i", "]", ")", ")", ")", "\n", "", "for", "index", ",", "mask_data", "in", "enumerate", "(", "mask_datas", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "dec_len", "[", "index", "]", ")", ":", "\n", "                ", "mask_data", "[", "i", ",", ":", "sent_b_starts", "[", "index", "]", "+", "i", "]", "=", "1.0", "\n", "mask_data", "[", "i", ",", "max_len", "+", "i", "]", "=", "1.0", "\n", "\n", "", "", "return", "(", "mask_datas", ".", "astype", "(", "'float32'", ")", ",", "\n", "mask_ids", ".", "astype", "(", "'int64'", ")", ",", "\n", "np", ".", "array", "(", "tgt_pos", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", ".", "astype", "(", "'int64'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.__init__": [[25, 81], ["erniekit.data.data_set_reader.base_dataset_reader.BaseDataSetReader.__init__", "config.extra_params.get", "config.extra_params.get", "config.extra_params.get", "config.extra_params.get", "config.extra_params.get", "config.extra_params.get", "erniekit.common.register.RegisterSet.tokenizer.__getitem__", "erniekit.common.register.RegisterSet.tokenizer.__getitem__.", "config.extra_params.get", "os.getenv", "os.getenv", "int", "int", "open", "json.load", "os.getenv", "os.getenv", "logging.info", "config.extra_params.get", "logging.info"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "name", ",", "fields", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n           init params\n        \"\"\"", "\n", "BaseDataSetReader", ".", "__init__", "(", "self", ",", "name", ",", "fields", ",", "config", ")", "\n", "self", ".", "max_seq_len", "=", "config", ".", "extra_params", ".", "get", "(", "\"max_seq_len\"", ")", "\n", "self", ".", "do_lower_case", "=", "config", ".", "extra_params", ".", "get", "(", "\"do_lower_case\"", ")", "\n", "self", ".", "vocab_path", "=", "config", ".", "extra_params", ".", "get", "(", "\"vocab_path\"", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "extra_params", ".", "get", "(", "\"num_labels\"", ")", "\n", "self", ".", "tokenizer", "=", "config", ".", "extra_params", ".", "get", "(", "\"tokenizer\"", ")", "\n", "\n", "self", ".", "need_generate_examples", "=", "config", ".", "extra_params", ".", "get", "(", "\"need_generate_examples\"", ",", "False", ")", "\n", "# self.need_data_distribute = config.get(\"need_data_distribute\", False)", "\n", "\n", "\n", "\n", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "tokenizer", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "self", ".", "vocab_path", ",", "params", "=", "{", "\"do_lower_case\"", ":", "self", ".", "do_lower_case", "}", ")", "\n", "\n", "self", ".", "vocab", "=", "self", ".", "tokenizer", ".", "vocabulary", ".", "vocab_dict", "\n", "self", ".", "pad_id", "=", "self", ".", "vocab", "[", "\"[PAD]\"", "]", "\n", "self", ".", "cls_id", "=", "self", ".", "vocab", "[", "\"[CLS]\"", "]", "\n", "self", ".", "sep_id", "=", "self", ".", "vocab", "[", "\"[SEP]\"", "]", "\n", "self", ".", "in_tokens", "=", "config", ".", "extra_params", ".", "get", "(", "\"in_tokens\"", ")", "\n", "\n", "if", "\"train\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "phase", "=", "InstanceName", ".", "TRAINING", "\n", "", "elif", "\"dev\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "phase", "=", "InstanceName", ".", "EVALUATE", "\n", "", "elif", "\"test\"", "in", "self", ".", "name", "or", "\"predict\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "phase", "=", "InstanceName", ".", "TEST", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "self", ".", "name", ")", "\n", "\n", "", "self", ".", "trainer_id", "=", "0", "\n", "self", ".", "trainer_nums", "=", "1", "\n", "if", "os", ".", "getenv", "(", "\"PADDLE_TRAINER_ID\"", ")", ":", "\n", "            ", "self", ".", "trainer_id", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINER_ID\"", ")", ")", "\n", "", "if", "os", ".", "getenv", "(", "\"PADDLE_TRAINERS_NUM\"", ")", ":", "\n", "            ", "self", ".", "trainer_nums", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINERS_NUM\"", ")", ")", "\n", "\n", "", "if", "\"train\"", "in", "self", ".", "name", "or", "\"predict\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "dev_count", "=", "self", ".", "trainer_nums", "\n", "", "elif", "\"dev\"", "in", "self", ".", "name", "or", "\"test\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "dev_count", "=", "1", "\n", "# if self.use_multi_gpu_test:", "\n", "#     self.dev_count = min(self.trainer_nums, 8)", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "self", ".", "name", ")", "\n", "\n", "", "self", ".", "current_example", "=", "0", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "num_examples", "=", "0", "\n", "\n", "with", "open", "(", "config", ".", "extra_params", ".", "get", "(", "\"label_map_config\"", ")", ")", "as", "fp", ":", "\n", "            ", "self", ".", "label_map", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.read_json": [[82, 91], ["open", "examples.append", "json.loads", "line.strip"], "methods", ["None"], ["", "", "def", "read_json", "(", "self", ",", "input_file", ")", ":", "\n", "        ", "\"\"\"\n        read json\n        \"\"\"", "\n", "examples", "=", "[", "]", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ")", "as", "fp", ":", "\n", "            ", "for", "line", "in", "fp", ":", "\n", "                ", "examples", ".", "append", "(", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader._is_chinese_or_punct": [[92, 99], ["re.match"], "methods", ["None"], ["", "def", "_is_chinese_or_punct", "(", "self", ",", "char", ")", ":", "\n", "        ", "\"\"\"\n        is chinese or punct\n        \"\"\"", "\n", "if", "re", ".", "match", "(", "\"[0-9a-zA-Z]\"", ",", "char", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.convert_example_to_record": [[100, 187], ["tokenizer.convert_tokens_to_ids", "list", "collections.namedtuple", "collections.namedtuple.", "ie_data_set_reader.IEReader._is_chinese_or_punct", "tokens.append", "enumerate", "len", "range", "len", "tokens.append", "tokenizer.tokenize", "beg_ids.append", "end_ids.append", "subwords.append", "labels.append", "len", "tokens.append", "len", "len", "len", "len", "sum"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader._is_chinese_or_punct", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize"], ["", "def", "convert_example_to_record", "(", "self", ",", "example", ",", "tokenizer", ",", "max_seq_len", "=", "512", ")", ":", "\n", "        ", "\"\"\"\n        convert exammple to record\n        \"\"\"", "\n", "text", "=", "example", "[", "\"text\"", "]", "\n", "if", "\"spo_list\"", "in", "example", ":", "\n", "            ", "spo_list", "=", "example", "[", "\"spo_list\"", "]", "\n", "", "else", ":", "\n", "            ", "spo_list", "=", "None", "\n", "\n", "", "tokens", "=", "[", "]", "\n", "buff", "=", "\"\"", "\n", "for", "char", "in", "text", ":", "\n", "            ", "if", "self", ".", "_is_chinese_or_punct", "(", "char", ")", ":", "\n", "                ", "if", "buff", "!=", "\"\"", ":", "\n", "                    ", "tokens", ".", "append", "(", "buff", ")", "\n", "buff", "=", "\"\"", "\n", "", "tokens", ".", "append", "(", "char", ")", "\n", "", "else", ":", "\n", "                ", "buff", "+=", "char", "\n", "", "", "if", "buff", "!=", "\"\"", ":", "\n", "            ", "tokens", ".", "append", "(", "buff", ")", "\n", "\n", "", "beg_ids", "=", "[", "]", "\n", "end_ids", "=", "[", "]", "\n", "subwords", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "temp", "=", "\"\"", "\n", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "temp", "+=", "token", "\n", "for", "i", ",", "subword", "in", "enumerate", "(", "tokenizer", ".", "tokenize", "(", "token", ")", ")", ":", "\n", "                ", "beg_id", "=", "len", "(", "temp", ")", "-", "len", "(", "token", ")", "\n", "end_id", "=", "len", "(", "temp", ")", "-", "1", "\n", "beg_ids", ".", "append", "(", "beg_id", ")", "\n", "end_ids", ".", "append", "(", "end_id", ")", "\n", "subwords", ".", "append", "(", "subword", ")", "\n", "label", "=", "[", "0", "]", "*", "self", ".", "num_labels", "\n", "if", "spo_list", ":", "\n", "                    ", "for", "spo", "in", "spo_list", ":", "\n", "                        ", "if", "beg_id", "==", "spo", "[", "\"subject\"", "]", "[", "0", "]", ":", "\n", "                            ", "if", "i", "==", "0", ":", "\n", "                                ", "label", "[", "self", ".", "label_map", "[", "\"B-%s@S\"", "%", "spo", "[", "\"predicate\"", "]", "]", "]", "=", "1", "\n", "", "else", ":", "\n", "                                ", "label", "[", "1", "]", "=", "1", "\n", "", "", "elif", "spo", "[", "\"subject\"", "]", "[", "0", "]", "<", "beg_id", "and", "end_id", "<", "spo", "[", "\"subject\"", "]", "[", "1", "]", ":", "\n", "                            ", "label", "[", "1", "]", "=", "1", "\n", "", "if", "beg_id", "==", "spo", "[", "\"object\"", "]", "[", "0", "]", ":", "\n", "                            ", "if", "i", "==", "0", ":", "\n", "                                ", "label", "[", "self", ".", "label_map", "[", "\"B-%s@O\"", "%", "spo", "[", "\"predicate\"", "]", "]", "]", "=", "1", "\n", "", "else", ":", "\n", "                                ", "label", "[", "1", "]", "=", "1", "\n", "", "", "elif", "spo", "[", "\"object\"", "]", "[", "0", "]", "<", "beg_id", "and", "end_id", "<", "spo", "[", "\"object\"", "]", "[", "1", "]", ":", "\n", "                            ", "label", "[", "1", "]", "=", "1", "\n", "", "", "if", "sum", "(", "label", ")", "==", "0", ":", "\n", "                        ", "label", "[", "0", "]", "=", "1", "\n", "", "", "labels", ".", "append", "(", "label", ")", "\n", "if", "len", "(", "subwords", ")", ">=", "max_seq_len", "-", "2", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "continue", "\n", "", "break", "\n", "\n", "", "subwords", "=", "[", "\"[CLS]\"", "]", "+", "subwords", "+", "[", "\"[SEP]\"", "]", "\n", "special", "=", "[", "0", "]", "*", "self", ".", "num_labels", "\n", "special", "[", "0", "]", "=", "1", "\n", "labels", "=", "[", "special", "]", "+", "labels", "+", "[", "special", "]", "\n", "beg_ids", "=", "[", "-", "1", "]", "+", "beg_ids", "+", "[", "-", "1", "]", "\n", "end_ids", "=", "[", "-", "1", "]", "+", "end_ids", "+", "[", "-", "1", "]", "\n", "\n", "src_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "subwords", ")", "\n", "sent_ids", "=", "[", "0", "]", "*", "len", "(", "src_ids", ")", "\n", "pos_ids", "=", "list", "(", "range", "(", "len", "(", "src_ids", ")", ")", ")", "\n", "task_ids", "=", "[", "0", "]", "*", "len", "(", "src_ids", ")", "\n", "\n", "Record", "=", "namedtuple", "(", "\"Record\"", ",", "\n", "[", "\"text\"", ",", "\"src_ids\"", ",", "\"sent_ids\"", ",", "\"pos_ids\"", ",", "\"task_ids\"", ",", "\"beg_ids\"", ",", "\"end_ids\"", ",", "\"labels\"", "]", ")", "\n", "record", "=", "Record", "(", "\n", "text", "=", "text", ",", "\n", "src_ids", "=", "src_ids", ",", "\n", "sent_ids", "=", "sent_ids", ",", "\n", "pos_ids", "=", "pos_ids", ",", "\n", "beg_ids", "=", "beg_ids", ",", "\n", "end_ids", "=", "end_ids", ",", "\n", "task_ids", "=", "task_ids", ",", "\n", "labels", "=", "labels", ")", "\n", "return", "record", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader._get_rel_pos": [[188, 198], ["max", "numpy.reshape", "numpy.maximum", "numpy.maximum.astype().reshape", "numpy.tile", "numpy.transpose", "numpy.minimum", "len", "numpy.arange", "numpy.maximum.astype"], "methods", ["None"], ["", "def", "_get_rel_pos", "(", "self", ",", "batch_ids", ")", ":", "\n", "        ", "\"\"\"\n        get rel pos\n        \"\"\"", "\n", "max_len", "=", "max", "(", "[", "len", "(", "ids", ")", "for", "ids", "in", "batch_ids", "]", ")", "\n", "rel_pos", "=", "np", ".", "reshape", "(", "np", ".", "tile", "(", "np", ".", "arange", "(", "max_len", ")", ",", "[", "max_len", "]", ")", ",", "[", "max_len", ",", "max_len", "]", ")", "\n", "rel_pos", "=", "rel_pos", "-", "np", ".", "transpose", "(", "rel_pos", ")", "\n", "rel_pos", "=", "np", ".", "maximum", "(", "-", "4", ",", "np", ".", "minimum", "(", "4", ",", "rel_pos", ")", ")", "\n", "rel_pos", "=", "rel_pos", "+", "4", "\n", "return", "rel_pos", ".", "astype", "(", "\"int64\"", ")", ".", "reshape", "(", "[", "max_len", ",", "max_len", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader._get_deep_id": [[199, 207], ["len", "max", "numpy.zeros", "numpy.zeros.astype().reshape", "len", "numpy.zeros.astype"], "methods", ["None"], ["", "def", "_get_deep_id", "(", "self", ",", "batch_ids", ")", ":", "\n", "        ", "\"\"\"\n        get deep id\n        \"\"\"", "\n", "batch_size", "=", "len", "(", "batch_ids", ")", "\n", "max_len", "=", "max", "(", "len", "(", "ids", ")", "for", "ids", "in", "batch_ids", ")", "\n", "padded_deep_ids", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_len", ")", ")", "\n", "return", "padded_deep_ids", ".", "astype", "(", "\"int64\"", ")", ".", "reshape", "(", "[", "batch_size", ",", "max_len", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader._pad_batch_label": [[208, 222], ["numpy.array", "max", "numpy.stack().astype", "numpy.concatenate", "numpy.stack().astype.append", "len", "numpy.stack", "numpy.array", "numpy.tile", "len"], "methods", ["None"], ["", "def", "_pad_batch_label", "(", "self", ",", "batch_labels", ")", ":", "\n", "        ", "\"\"\"\n        pad batch label\n        \"\"\"", "\n", "special", "=", "[", "0", "]", "*", "self", ".", "num_labels", "\n", "special", "[", "0", "]", "=", "1", "\n", "special", "=", "np", ".", "array", "(", "special", ")", "\n", "max_len", "=", "max", "(", "len", "(", "labels", ")", "for", "labels", "in", "batch_labels", ")", "\n", "padded_labels", "=", "[", "]", "\n", "for", "labels", "in", "batch_labels", ":", "\n", "            ", "labels", "=", "np", ".", "concatenate", "(", "(", "np", ".", "array", "(", "labels", ")", ",", "np", ".", "tile", "(", "special", ",", "(", "max_len", "-", "len", "(", "labels", ")", ",", "1", ")", ")", ")", ")", "\n", "padded_labels", ".", "append", "(", "labels", ")", "\n", "", "padded_labels", "=", "np", ".", "stack", "(", "padded_labels", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "return", "padded_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.pad_batch_records": [[223, 263], ["erniekit.data.util_helper.pad_batch_data", "erniekit.data.util_helper.pad_batch_data", "erniekit.data.util_helper.pad_batch_data", "erniekit.data.util_helper.pad_batch_data", "erniekit.data.util_helper.pad_batch_data", "ie_data_set_reader.IEReader._get_rel_pos", "ie_data_set_reader.IEReader._get_deep_id", "erniekit.data.util_helper.pad_batch_data", "ie_data_set_reader.IEReader._pad_batch_label", "batch_seq_lens.flatten"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader._get_rel_pos", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader._get_deep_id", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader._pad_batch_label"], ["", "def", "pad_batch_records", "(", "self", ",", "batch_records", ")", ":", "\n", "        ", "\"\"\"\n        pad batch records\n        \"\"\"", "\n", "batch_text", "=", "[", "record", ".", "text", "for", "record", "in", "batch_records", "]", "\n", "batch_src_ids", "=", "[", "record", ".", "src_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_sent_ids", "=", "[", "record", ".", "sent_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_pos_ids", "=", "[", "record", ".", "pos_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_beg_ids", "=", "[", "record", ".", "beg_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_end_ids", "=", "[", "record", ".", "end_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_task_ids", "=", "[", "record", ".", "task_ids", "for", "record", "in", "batch_records", "]", "\n", "batch_labels", "=", "[", "record", ".", "labels", "for", "record", "in", "batch_records", "]", "\n", "\n", "padded_src_ids", ",", "input_mask", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "batch_src_ids", ",", "\n", "pad_idx", "=", "self", ".", "pad_id", ",", "\n", "return_input_mask", "=", "True", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "padded_sent_ids", "=", "pad_batch_data", "(", "batch_sent_ids", ",", "pad_idx", "=", "self", ".", "pad_id", ")", "\n", "padded_pos_ids", "=", "pad_batch_data", "(", "batch_pos_ids", ",", "pad_idx", "=", "self", ".", "pad_id", ")", "\n", "padded_beg_ids", "=", "pad_batch_data", "(", "batch_beg_ids", ",", "pad_idx", "=", "self", ".", "pad_id", ")", "\n", "padded_end_ids", "=", "pad_batch_data", "(", "batch_end_ids", ",", "pad_idx", "=", "self", ".", "pad_id", ")", "\n", "padded_rel_pos_ids", "=", "self", ".", "_get_rel_pos", "(", "batch_src_ids", ")", "\n", "padded_deep_ids", "=", "self", ".", "_get_deep_id", "(", "batch_src_ids", ")", "\n", "padded_task_ids", "=", "pad_batch_data", "(", "batch_task_ids", ",", "pad_idx", "=", "self", ".", "pad_id", ")", "\n", "padded_labels", "=", "self", ".", "_pad_batch_label", "(", "batch_labels", ")", "\n", "\n", "return_list", "=", "[", "padded_src_ids", ",", "\n", "padded_sent_ids", ",", "\n", "padded_pos_ids", ",", "\n", "padded_rel_pos_ids", ",", "\n", "padded_deep_ids", ",", "\n", "padded_task_ids", ",", "\n", "input_mask", ",", "\n", "padded_beg_ids", ",", "\n", "padded_end_ids", ",", "\n", "batch_seq_lens", ".", "flatten", "(", ")", ",", "\n", "padded_labels", "]", "\n", "if", "self", ".", "need_generate_examples", ":", "\n", "            ", "return", "return_list", ",", "batch_text", "\n", "", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.prepare_batch_data": [[264, 288], ["enumerate", "ie_data_set_reader.IEReader.convert_example_to_record", "max", "len", "batch_records.append", "ie_data_set_reader.IEReader.pad_batch_records", "len", "ie_data_set_reader.IEReader.pad_batch_records", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.convert_example_to_record", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records"], ["", "def", "prepare_batch_data", "(", "self", ",", "examples", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        prepare batch data\n        \"\"\"", "\n", "batch_records", ",", "max_len", "=", "[", "]", ",", "0", "\n", "for", "index", ",", "example", "in", "enumerate", "(", "examples", ")", ":", "\n", "            ", "if", "self", ".", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "                ", "self", ".", "current_example", "+=", "1", "\n", "\n", "", "record", "=", "self", ".", "convert_example_to_record", "(", "example", ",", "self", ".", "tokenizer", ",", "self", ".", "max_seq_len", ")", "\n", "\n", "max_len", "=", "max", "(", "max_len", ",", "len", "(", "record", ".", "src_ids", ")", ")", "\n", "if", "self", ".", "in_tokens", ":", "\n", "                ", "to_append", "=", "(", "len", "(", "batch_records", ")", "+", "1", ")", "*", "max_len", "<=", "batch_size", "\n", "", "else", ":", "\n", "                ", "to_append", "=", "len", "(", "batch_records", ")", "<", "batch_size", "\n", "", "if", "to_append", ":", "\n", "                ", "batch_records", ".", "append", "(", "record", ")", "\n", "", "else", ":", "\n", "                ", "yield", "self", ".", "pad_batch_records", "(", "batch_records", ")", "\n", "batch_records", ",", "max_len", "=", "[", "record", "]", ",", "len", "(", "record", ".", "src_ids", ")", "\n", "\n", "", "", "if", "batch_records", ":", "\n", "            ", "yield", "self", ".", "pad_batch_records", "(", "batch_records", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.__iter__": [[289, 322], ["os.path.isdir", "os.listdir", "paddle.get_world_size", "paddle.get_world_size", "paddle.get_world_size", "paddle.get_rank", "paddle.get_rank", "paddle.get_rank", "range", "len", "ie_data_set_reader.IEReader.read_json", "ie_data_set_reader.IEReader.prepare_batch_data", "os.path.join", "numpy.random.shuffle", "len", "all_dev_batches.append", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.read_json", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.prepare_batch_data"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u8fed\u4ee3\u5668\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", ".", "data_path", ")", ",", "\"%s must be a directory that stores data files\"", "%", "self", ".", "config", ".", "data_path", "\n", "data_files", "=", "os", ".", "listdir", "(", "self", ".", "config", ".", "data_path", ")", "\n", "\n", "assert", "len", "(", "data_files", ")", ">", "0", ",", "\"%s is an empty directory\"", "%", "self", ".", "config", ".", "data_path", "\n", "\n", "# trainer_id \u548c dev_count\u5fc5\u987b\u8981\u8bbe\u7f6e\uff0c\u5426\u5219\u591a\u5361\u7684\u65f6\u5019\u6bcf\u5f20\u5361\u4e0a\u7684\u6570\u636e\u90fd\u662f\u4e00\u6837\u7684", "\n", "self", ".", "dev_count", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "trainer_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "self", ".", "trainer_nums", "=", "self", ".", "dev_count", "\n", "\n", "all_dev_batches", "=", "[", "]", "\n", "for", "epoch_index", "in", "range", "(", "self", ".", "config", ".", "epoch", ")", ":", "\n", "            ", "self", ".", "current_example", "=", "0", "\n", "self", ".", "current_epoch", "=", "epoch_index", "\n", "\n", "for", "input_file", "in", "data_files", ":", "\n", "                ", "examples", "=", "self", ".", "read_json", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "data_path", ",", "input_file", ")", ")", "\n", "if", "self", ".", "config", ".", "shuffle", ":", "\n", "                    ", "np", ".", "random", ".", "shuffle", "(", "examples", ")", "\n", "\n", "", "for", "batch_data", "in", "self", ".", "prepare_batch_data", "(", "examples", ",", "self", ".", "config", ".", "batch_size", ")", ":", "\n", "                    ", "if", "self", ".", "config", ".", "need_data_distribute", ":", "\n", "                        ", "if", "len", "(", "all_dev_batches", ")", "<", "self", ".", "dev_count", ":", "\n", "                            ", "all_dev_batches", ".", "append", "(", "batch_data", ")", "\n", "", "if", "len", "(", "all_dev_batches", ")", "==", "self", ".", "dev_count", ":", "\n", "                            ", "yield", "all_dev_batches", "[", "self", ".", "trainer_id", "]", "\n", "all_dev_batches", "=", "[", "]", "\n", "", "", "else", ":", "\n", "                        ", "yield", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.create_reader": [[323, 346], ["range", "len", "ie_data_set_reader.IEReader.input_data_list.append", "paddle.static.data", "paddle.static.data", "paddle.static.data", "paddle.static.data", "paddle.static.data", "paddle.static.data", "paddle.static.data", "paddle.static.data", "paddle.static.data"], "methods", ["None"], ["", "", "", "", "", "def", "create_reader", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        create reader\n        \"\"\"", "\n", "shapes", "=", "[", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "self", ".", "num_labels", "]", "]", "\n", "dtypes", "=", "[", "\"int64\"", ",", "\"int64\"", ",", "\"int64\"", ",", "\"int64\"", ",", "\"int64\"", ",", "\"int64\"", ",", "\"float32\"", ",", "\"int64\"", ",", "\"int64\"", ",", "\"int64\"", ",", "\"float32\"", "]", "\n", "lod_levels", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "feed_names", "=", "[", "'src_id'", ",", "'sent_id'", ",", "'pos_id'", ",", "'rel_pos_ids'", ",", "'deep_ids'", ",", "\n", "'task_ids'", ",", "'mask_ids'", ",", "'beg_ids'", ",", "'end_ids'", ",", "'seq_lens'", ",", "'label'", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "shapes", ")", ")", ":", "\n", "            ", "self", ".", "input_data_list", ".", "append", "(", "paddle", ".", "static", ".", "data", "(", "name", "=", "feed_names", "[", "i", "]", ",", "shape", "=", "shapes", "[", "i", "]", ",", "\n", "dtype", "=", "dtypes", "[", "i", "]", ",", "lod_level", "=", "lod_levels", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.convert_fields_to_dict": [[347, 381], ["None"], "methods", ["None"], ["", "", "def", "convert_fields_to_dict", "(", "self", ",", "field_list", ",", "need_emb", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        convert fields to dict\n        \"\"\"", "\n", "fields_instance", "=", "{", "}", "\n", "#\u5c06\u539f\u672cfield\u9700\u8981\u7684\u57df\u4e2d\u7684structure_fields_dict\u3001filed.name\u3001get_field_length()\u7b49\u7edf\u4e00\u8d77\u6765", "\n", "record_id_dict_text_a", "=", "{", "\n", "InstanceName", ".", "SRC_IDS", ":", "field_list", "[", "0", "]", ",", "\n", "InstanceName", ".", "SENTENCE_IDS", ":", "field_list", "[", "1", "]", ",", "\n", "InstanceName", ".", "POS_IDS", ":", "field_list", "[", "2", "]", ",", "\n", "InstanceName", ".", "REL_POS_IDS", ":", "field_list", "[", "3", "]", ",", "\n", "InstanceName", ".", "DEEP_IDS", ":", "field_list", "[", "4", "]", ",", "\n", "InstanceName", ".", "TASK_IDS", ":", "field_list", "[", "5", "]", ",", "\n", "InstanceName", ".", "MASK_IDS", ":", "field_list", "[", "6", "]", ",", "\n", "InstanceName", ".", "BEG_IDS", ":", "field_list", "[", "7", "]", ",", "\n", "InstanceName", ".", "END_IDS", ":", "field_list", "[", "8", "]", ",", "\n", "InstanceName", ".", "SEQ_LENS", ":", "field_list", "[", "9", "]", "\n", "}", "\n", "record_dict_text_a", "=", "{", "\n", "InstanceName", ".", "RECORD_ID", ":", "record_id_dict_text_a", ",", "\n", "InstanceName", ".", "RECORD_EMB", ":", "None", "\n", "}", "\n", "fields_instance", "[", "\"text_a\"", "]", "=", "record_dict_text_a", "\n", "\n", "record_id_dict_label", "=", "{", "\n", "InstanceName", ".", "SRC_IDS", ":", "field_list", "[", "10", "]", "\n", "}", "\n", "record_dict_label", "=", "{", "\n", "InstanceName", ".", "RECORD_ID", ":", "record_id_dict_label", ",", "\n", "InstanceName", ".", "RECORD_EMB", ":", "None", "\n", "}", "\n", "fields_instance", "[", "\"label\"", "]", "=", "record_dict_label", "\n", "\n", "return", "fields_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.instance_fields_dict": [[382, 388], ["ie_data_set_reader.IEReader.convert_fields_to_dict"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.convert_fields_to_dict"], ["", "def", "instance_fields_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        instance fields dict\n        \"\"\"", "\n", "fields_instance", "=", "self", ".", "convert_fields_to_dict", "(", "self", ".", "input_data_list", ")", "\n", "return", "fields_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.get_train_progress": [[389, 392], ["None"], "methods", ["None"], ["", "def", "get_train_progress", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets progress for training phase.\"\"\"", "\n", "return", "self", ".", "current_example", ",", "self", ".", "current_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.get_num_examples": [[393, 410], ["os.path.isdir", "os.path.isfile", "ie_data_set_reader.IEReader.read_json", "len", "os.path.join", "len", "ValueError", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.read_json"], ["", "def", "get_num_examples", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get num examples\n        \"\"\"", "\n", "data_path", "=", "self", ".", "config", ".", "data_path", "\n", "if", "os", ".", "path", ".", "isdir", "(", "data_path", ")", ":", "\n", "            ", "data_files", "=", "[", "os", ".", "path", ".", "join", "(", "data_path", ",", "fn", ")", "for", "fn", "in", "os", ".", "listdir", "(", "data_path", ")", "]", "\n", "assert", "len", "(", "data_files", ")", ">", "0", ",", "\"%s is an empty directory\"", "%", "data_path", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "data_path", ")", ":", "\n", "            ", "data_files", "=", "[", "data_path", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s must be a directory that stores data files or path to a file\"", "%", "data_path", ")", "\n", "", "self", ".", "num_examples", "=", "0", "\n", "for", "input_file", "in", "data_files", ":", "\n", "            ", "current_examples", "=", "self", ".", "read_json", "(", "input_file", ")", "\n", "self", ".", "num_examples", "=", "len", "(", "current_examples", ")", "\n", "", "return", "self", ".", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.api_generator": [[411, 425], ["ie_data_set_reader.IEReader.convert_example_to_record", "batch_records.append", "ie_data_set_reader.IEReader.pad_batch_records", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ie_data_set_reader.IEReader.convert_example_to_record", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records"], ["", "def", "api_generator", "(", "self", ",", "query", ")", ":", "\n", "        ", "\"\"\"python api server\n        :param query: list\n        :return\n        \"\"\"", "\n", "if", "len", "(", "query", ")", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"query can't be None\"", ")", "\n", "# for batch_data in self.prepare_batch_data(query, 1):", "\n", "#     yield batch_data", "\n", "", "batch_records", "=", "[", "]", "\n", "record", "=", "self", ".", "convert_example_to_record", "(", "query", ",", "self", ".", "tokenizer", ",", "self", ".", "max_seq_len", ")", "\n", "batch_records", ".", "append", "(", "record", ")", "\n", "ids", ",", "samples", "=", "self", ".", "pad_batch_records", "(", "batch_records", ")", "\n", "return", "ids", ",", "samples", "", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.ernie_classification_dataset_reader.ErnieClassificationDataSetReader.pad_batch_records": [[18, 61], ["enumerate", "enumerate", "text_batch.append", "text_combine_batch.append", "text_batch.append", "return_list.extend", "ernie_classification_dataset_reader.ErnieClassificationDataSetReader.fields[].field_reader.convert_texts_to_ids", "ernie_classification_dataset_reader.ErnieClassificationDataSetReader.fields[].field_reader.convert_texts_to_ids", "zip", "logging.error", "six.reraise", "sys.exc_info", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.convert_texts_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.convert_texts_to_ids"], ["def", "pad_batch_records", "(", "self", ",", "batch_records", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_records:\n        :return:\n        \"\"\"", "\n", "return_list", "=", "[", "]", "\n", "example", "=", "batch_records", "[", "0", "]", "\n", "linenums", "=", "[", "]", "\n", "text_combine_batch", "=", "[", "]", "\n", "\n", "for", "index", ",", "key", "in", "enumerate", "(", "example", ".", "_fields", ")", ":", "\n", "            ", "text_batch", "=", "[", "]", "\n", "for", "record", "in", "batch_records", ":", "\n", "                ", "text_batch", ".", "append", "(", "record", "[", "index", "]", ")", "\n", "", "if", "\"text_\"", "in", "key", ":", "\n", "                ", "text_combine_batch", ".", "append", "(", "text_batch", ")", "\n", "\n", "", "", "for", "index", ",", "key", "in", "enumerate", "(", "example", ".", "_fields", ")", ":", "\n", "            ", "text_batch", "=", "[", "]", "\n", "for", "record", "in", "batch_records", ":", "\n", "                ", "text_batch", ".", "append", "(", "record", "[", "index", "]", ")", "\n", "", "if", "key", "==", "'linenum'", ":", "\n", "                ", "linenums", "=", "text_batch", "\n", "", "try", ":", "\n", "                ", "if", "not", "self", ".", "fields", "[", "index", "]", ".", "join_calculation", ":", "\n", "                    ", "continue", "\n", "", "if", "\"text_\"", "in", "key", ":", "\n", "                    ", "id_list", "=", "self", ".", "fields", "[", "index", "]", ".", "field_reader", ".", "convert_texts_to_ids", "(", "text_combine_batch", ")", "\n", "", "else", ":", "\n", "                    ", "id_list", "=", "self", ".", "fields", "[", "index", "]", ".", "field_reader", ".", "convert_texts_to_ids", "(", "text_batch", ")", "\n", "", "return_list", ".", "extend", "(", "id_list", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "                ", "lines", "=", "''", "\n", "for", "linenum", ",", "text", "in", "zip", "(", "linenums", ",", "text_batch", ")", ":", "\n", "                    ", "lines", "+=", "'linenum %s text: %s \\n'", "%", "(", "linenum", ",", "text", ")", "\n", "", "logging", ".", "error", "(", "\"error occur! msg: %s, batch data: \\n%s \"", "%", "(", "traceback", ".", "format_exc", "(", ")", ",", "lines", ")", ")", "\n", "six", ".", "reraise", "(", "*", "sys", ".", "exc_info", "(", ")", ")", "\n", "\n", "", "", "if", "self", ".", "config", ".", "need_generate_examples", ":", "\n", "            ", "return", "return_list", ",", "batch_records", "\n", "", "else", ":", "\n", "            ", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.__init__": [[24, 28], ["base_dataset_reader.BaseDataSetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "fields", ",", "config", ")", ":", "\n", "        ", "\"\"\"__init__\n        \"\"\"", "\n", "BaseDataSetReader", ".", "__init__", "(", "self", ",", "name", ",", "fields", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.create_reader": [[29, 41], ["ValueError", "ValueError", "basic_dataset_reader.BasicDataSetReader.input_data_list.extend", "item.field_reader.init_reader"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.init_reader"], ["", "def", "create_reader", "(", "self", ")", ":", "\n", "        ", "\"\"\" \u9759\u6001\u56fe\u6a21\u5f0f\u4e0b\u7528\u6765\u521d\u59cb\u5316\u6570\u636e\u8bfb\u53d6\u7684op\uff0c\u8c03\u7528op\u4e3apaddle.static.data\n        \u52a8\u6001\u56fe\u6a21\u5f0f\u4e0b\u4e0d\u9700\u8981\u8c03\u7528\n        \"\"\"", "\n", "if", "not", "self", ".", "fields", ":", "\n", "            ", "raise", "ValueError", "(", "\"fields can't be None\"", ")", "\n", "\n", "", "for", "item", "in", "self", ".", "fields", ":", "\n", "            ", "if", "not", "item", ".", "field_reader", ":", "\n", "                ", "raise", "ValueError", "(", "\"{0}'s field_reader is None\"", ".", "format", "(", "item", ".", "name", ")", ")", "\n", "", "if", "item", ".", "join_calculation", ":", "\n", "                ", "self", ".", "input_data_list", ".", "extend", "(", "item", ".", "field_reader", ".", "init_reader", "(", "dataset_type", "=", "InstanceName", ".", "TYPE_DATA_LOADER", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.instance_fields_dict": [[42, 48], ["basic_dataset_reader.BasicDataSetReader.convert_fields_to_dict"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.convert_fields_to_dict"], ["", "", "", "def", "instance_fields_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u5c06\u8f93\u5165\u8fdb\u6765\u7684tensor\u6570\u7ec4\u7ecf\u8fc7\u8f6c\u6362\uff0c\u5f97\u5230fields_id, \u89c6\u60c5\u51b5\u6784\u9020embedding\uff0c\u7136\u540e\u7ed3\u6784\u5316\u6210dict\u7c7b\u578b\u8fd4\u56de\u7ed9\u7ec4\u7f51\u90e8\u5206\n        :return: \u5b9e\u4f8b\u5316\u7684dict\uff0c\u4fdd\u5b58\u4e86\u5404\u4e2afield\u7684id\u548cembedding(\u53ef\u4ee5\u6ca1\u6709\uff0c\u662f\u60c5\u51b5\u800c\u5b9a), \u7ed9trainer\u7528\n        \"\"\"", "\n", "fields_instance", "=", "self", ".", "convert_fields_to_dict", "(", "self", ".", "input_data_list", ")", "\n", "return", "fields_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.convert_fields_to_dict": [[49, 66], ["enumerate", "filed.field_reader.structure_fields_dict", "filed.field_reader.get_field_length"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.structure_fields_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.get_field_length"], ["", "def", "convert_fields_to_dict", "(", "self", ",", "field_list", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u5b9e\u4f8b\u5316fields_dict\uff0c\u4fdd\u5b58\u4e86\u5404\u4e2afield\u7684id\u548cembedding(\u53ef\u4ee5\u6ca1\u6709\uff0c\u662f\u60c5\u51b5\u800c\u5b9a),\n        \u5f53need_emb=False\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ed9predictor\u8c03\u7528\n        :param field_list:\n        :param need_emb:\n        :return: dict\n        \"\"\"", "\n", "start_index", "=", "0", "\n", "fields_instance", "=", "{", "}", "\n", "for", "index", ",", "filed", "in", "enumerate", "(", "self", ".", "fields", ")", ":", "\n", "            ", "if", "not", "filed", ".", "join_calculation", ":", "\n", "                ", "continue", "\n", "", "item_dict", "=", "filed", ".", "field_reader", ".", "structure_fields_dict", "(", "field_list", ",", "start_index", ",", "need_emb", "=", "need_emb", ")", "\n", "fields_instance", "[", "filed", ".", "name", "]", "=", "item_dict", "\n", "start_index", "+=", "filed", ".", "field_reader", ".", "get_field_length", "(", ")", "\n", "\n", "", "return", "fields_instance", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.__iter__": [[79, 113], ["os.path.isdir", "os.listdir", "paddle.get_world_size", "paddle.get_rank", "range", "len", "basic_dataset_reader.BasicDataSetReader.read_files", "basic_dataset_reader.BasicDataSetReader.prepare_batch_data", "os.path.join", "numpy.random.shuffle", "len", "all_dev_batches.append", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.read_files", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.prepare_batch_data"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u8fed\u4ee3\u5668\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "self", ".", "config", ".", "data_path", ")", ",", "\"%s must be a directory that stores data files\"", "%", "self", ".", "config", ".", "data_path", "\n", "data_files", "=", "os", ".", "listdir", "(", "self", ".", "config", ".", "data_path", ")", "\n", "\n", "assert", "len", "(", "data_files", ")", ">", "0", ",", "\"%s is an empty directory\"", "%", "self", ".", "config", ".", "data_path", "\n", "\n", "# trainer_id \u548c dev_count\u5fc5\u987b\u8981\u8bbe\u7f6e\uff0c\u5426\u5219\u591a\u5361\u7684\u65f6\u5019\u6bcf\u5f20\u5361\u4e0a\u7684\u6570\u636e\u90fd\u662f\u4e00\u6837\u7684", "\n", "self", ".", "dev_count", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "trainer_id", "=", "dist", ".", "get_rank", "(", ")", "\n", "self", ".", "trainer_nums", "=", "self", ".", "dev_count", "\n", "\n", "all_dev_batches", "=", "[", "]", "\n", "for", "epoch_index", "in", "range", "(", "self", ".", "config", ".", "epoch", ")", ":", "\n", "            ", "self", ".", "current_example", "=", "0", "\n", "self", ".", "current_epoch", "=", "epoch_index", "\n", "\n", "for", "input_file", "in", "data_files", ":", "\n", "                ", "examples", "=", "self", ".", "read_files", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "data_path", ",", "input_file", ")", ")", "\n", "if", "self", ".", "config", ".", "shuffle", ":", "\n", "                    ", "np", ".", "random", ".", "shuffle", "(", "examples", ")", "\n", "\n", "", "for", "batch_data", "in", "self", ".", "prepare_batch_data", "(", "examples", ",", "self", ".", "config", ".", "batch_size", ")", ":", "\n", "                    ", "if", "self", ".", "config", ".", "need_data_distribute", ":", "\n", "                        ", "if", "len", "(", "all_dev_batches", ")", "<", "self", ".", "dev_count", ":", "\n", "                            ", "all_dev_batches", ".", "append", "(", "batch_data", ")", "\n", "", "if", "len", "(", "all_dev_batches", ")", "==", "self", ".", "dev_count", ":", "\n", "# trick: handle batch inconsistency caused by data sharding for each trainer", "\n", "                            ", "yield", "all_dev_batches", "[", "self", ".", "trainer_id", "]", "\n", "all_dev_batches", "=", "[", "]", "\n", "", "", "else", ":", "\n", "                        ", "yield", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.read_files": [[114, 144], ["open", "csv.reader", "len", "collections.namedtuple", "enumerate", "field_names.append", "logging.error", "logging.error", "len", "len", "basic_dataset_reader.BasicDataSetReader.Example", "examples.append", "logging.warn", "traceback.format_exc", "len"], "methods", ["None"], ["", "", "", "", "", "def", "read_files", "(", "self", ",", "file_path", ",", "quotechar", "=", "None", ")", ":", "\n", "        ", "\"\"\"\u8bfb\u53d6\u660e\u6587\u6587\u4ef6\n        :param file_path\n        :return: \u4ee5namedtuple\u6570\u7ec4\u5f62\u5f0f\u8f93\u51fa\u660e\u6587\u6837\u672c\u5bf9\u5e94\u7684\u5b9e\u4f8b\n        \"\"\"", "\n", "line_index", "=", "0", "\n", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "examples", "=", "[", "]", "\n", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "len_fields", "=", "len", "(", "self", ".", "fields", ")", "\n", "field_names", "=", "[", "]", "\n", "\n", "for", "filed", "in", "self", ".", "fields", ":", "\n", "                    ", "field_names", ".", "append", "(", "filed", ".", "name", ")", "\n", "\n", "", "self", ".", "Example", "=", "namedtuple", "(", "'Example'", ",", "field_names", ")", "\n", "for", "linenum", ",", "line", "in", "enumerate", "(", "reader", ")", ":", "\n", "                    ", "line_index", "=", "linenum", "+", "1", "\n", "if", "len", "(", "line", ")", "==", "len", "(", "field_names", ")", ":", "\n", "                        ", "example", "=", "self", ".", "Example", "(", "*", "line", ")", "\n", "examples", ".", "append", "(", "example", ")", "\n", "", "else", ":", "\n", "                        ", "logging", ".", "warn", "(", "'fileds in file %s of line %s not match: got %d, expect %d'", "%", "(", "file_path", ",", "line_index", ",", "len", "(", "line", ")", ",", "len_fields", ")", ")", "\n", "", "", "return", "examples", "\n", "\n", "", "except", "Exception", ":", "\n", "                ", "logging", ".", "error", "(", "\"error in read tsv, maybe occur in linenum %s \"", "%", "line_index", ")", "\n", "logging", ".", "error", "(", "\"traceback.format_exc():\\n%s\"", "%", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.prepare_batch_data": [[145, 162], ["enumerate", "len", "batch_records.append", "basic_dataset_reader.BasicDataSetReader.pad_batch_records", "basic_dataset_reader.BasicDataSetReader.pad_batch_records"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records"], ["", "", "", "def", "prepare_batch_data", "(", "self", ",", "examples", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\u5c06\u660e\u6587\u6837\u672c\u6309\u7167data_loader\u9700\u8981\u7684\u683c\u5f0f\u5e8f\u5217\u5316\u6210\u4e00\u4e2a\u4e2abatch\u8f93\u51fa\n        :param examples:\n        :param batch_size:\n        :return:\n        \"\"\"", "\n", "batch_records", "=", "[", "]", "\n", "for", "index", ",", "example", "in", "enumerate", "(", "examples", ")", ":", "\n", "            ", "self", ".", "current_example", "+=", "1", "\n", "if", "len", "(", "batch_records", ")", "<", "batch_size", ":", "\n", "                ", "batch_records", ".", "append", "(", "example", ")", "\n", "", "else", ":", "\n", "                ", "yield", "self", ".", "pad_batch_records", "(", "batch_records", ")", "\n", "batch_records", "=", "[", "example", "]", "\n", "\n", "", "", "if", "batch_records", ":", "\n", "            ", "yield", "self", ".", "pad_batch_records", "(", "batch_records", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records": [[163, 192], ["enumerate", "text_batch.append", "basic_dataset_reader.BasicDataSetReader.fields[].field_reader.convert_texts_to_ids", "return_list.extend", "zip", "logging.error", "six.reraise", "sys.exc_info", "traceback.format_exc"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.convert_texts_to_ids"], ["", "", "def", "pad_batch_records", "(", "self", ",", "batch_records", ")", ":", "\n", "        ", "\"\"\"\n        :param batch_records:\n        :return:\n        \"\"\"", "\n", "return_list", "=", "[", "]", "\n", "example", "=", "batch_records", "[", "0", "]", "\n", "linenums", "=", "[", "]", "\n", "for", "index", ",", "key", "in", "enumerate", "(", "example", ".", "_fields", ")", ":", "\n", "            ", "text_batch", "=", "[", "]", "\n", "for", "record", "in", "batch_records", ":", "\n", "                ", "text_batch", ".", "append", "(", "record", "[", "index", "]", ")", "\n", "", "if", "key", "==", "'linenum'", ":", "\n", "                ", "linenums", "=", "text_batch", "\n", "", "try", ":", "\n", "                ", "if", "self", ".", "fields", "[", "index", "]", ".", "join_calculation", ":", "\n", "                    ", "id_list", "=", "self", ".", "fields", "[", "index", "]", ".", "field_reader", ".", "convert_texts_to_ids", "(", "text_batch", ")", "\n", "return_list", ".", "extend", "(", "id_list", ")", "\n", "", "", "except", "Exception", ":", "\n", "                ", "lines", "=", "''", "\n", "for", "linenum", ",", "text", "in", "zip", "(", "linenums", ",", "text_batch", ")", ":", "\n", "                    ", "lines", "+=", "'linenum %s text: %s \\n'", "%", "(", "linenum", ",", "text", ")", "\n", "", "logging", ".", "error", "(", "\"error occur! msg: %s, batch data: \\n%s \"", "%", "(", "traceback", ".", "format_exc", "(", ")", ",", "lines", ")", ")", "\n", "six", ".", "reraise", "(", "*", "sys", ".", "exc_info", "(", ")", ")", "\n", "\n", "", "", "if", "self", ".", "config", ".", "need_generate_examples", ":", "\n", "            ", "return", "return_list", ",", "batch_records", "\n", "", "else", ":", "\n", "            ", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.get_train_progress": [[193, 196], ["None"], "methods", ["None"], ["", "", "def", "get_train_progress", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets progress for training phase.\"\"\"", "\n", "return", "self", ".", "current_example", ",", "self", ".", "current_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.get_num_examples": [[197, 209], ["os.listdir", "len", "basic_dataset_reader.BasicDataSetReader.read_files", "len", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.read_files"], ["", "def", "get_num_examples", "(", "self", ")", ":", "\n", "        ", "\"\"\"get number of example\"\"\"", "\n", "data_files", "=", "os", ".", "listdir", "(", "self", ".", "config", ".", "data_path", ")", "\n", "assert", "len", "(", "data_files", ")", ">", "0", ",", "\"%s is an empty directory\"", "%", "self", ".", "config", ".", "data_path", "\n", "sum_examples", "=", "0", "\n", "for", "input_file", "in", "data_files", ":", "\n", "            ", "examples", "=", "self", ".", "read_files", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "data_path", ",", "input_file", ")", ")", "\n", "sum_examples", "+=", "len", "(", "examples", ")", "\n", "\n", "", "self", ".", "num_examples", "=", "sum_examples", "\n", "\n", "return", "self", ".", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.api_generator": [[210, 226], ["collections.namedtuple", "collections.namedtuple.", "basic_dataset_reader.BasicDataSetReader.pad_batch_records", "len", "ValueError", "field_names.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.basic_dataset_reader.BasicDataSetReader.pad_batch_records"], ["", "def", "api_generator", "(", "self", ",", "query", ")", ":", "\n", "        ", "\"\"\"python api server\n        :param query: list\n        :return\n        \"\"\"", "\n", "if", "len", "(", "query", ")", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"query can't be None\"", ")", "\n", "\n", "", "field_names", "=", "[", "]", "\n", "for", "filed", "in", "self", ".", "fields", ":", "\n", "            ", "field_names", ".", "append", "(", "filed", ".", "name", ")", "\n", "\n", "", "Example", "=", "namedtuple", "(", "'Example'", ",", "field_names", ")", "\n", "example", "=", "Example", "(", "*", "query", ")", "\n", "ids", ",", "samples", "=", "self", ".", "pad_batch_records", "(", "[", "example", "]", ")", "\n", "return", "ids", ",", "samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.__init__": [[16, 30], ["paddle.io.IterableDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "fields", ",", "config", ")", ":", "\n", "        ", "IterableDataset", ".", "__init__", "(", "self", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "fields", "=", "fields", "\n", "self", ".", "config", "=", "config", "# \u5e38\u7528\u53c2\u6570\uff0cbatch_size\u7b49\uff0cReaderConfig\u7c7b\u578b\u53d8\u91cf", "\n", "self", ".", "input_data_list", "=", "[", "]", "\n", "self", ".", "current_example", "=", "0", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "num_examples", "=", "0", "\n", "# \u8fed\u4ee3\u5668\u751f\u6210\u6570\u636e\u7684\u65f6\u5019\u662f\u5426\u9700\u8981\u751f\u6210\u660e\u6587\u6837\u672c\uff0c\u76ee\u524d\u6765\u770b\uff0c\u8bad\u7ec3\u7684\u65f6\u5019\u4e0d\u9700\u8981\uff0c\u9884\u6d4b\u7684\u65f6\u5019\u9700\u8981", "\n", "# self.need_generate_examples = config.get(\"need_data_distribute\", False)", "\n", "self", ".", "dev_count", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "self", ".", "trainer_nums", "=", "self", ".", "dev_count", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.create_reader": [[31, 38], ["None"], "methods", ["None"], ["", "def", "create_reader", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u9759\u6001\u56fe\u6a21\u5f0f\u4e0b\u7528\u6765\u521d\u59cb\u5316\u6570\u636e\u8bfb\u53d6\u7684op\uff0c\u8c03\u7528op\u4e3apaddle.static.data\n        \u52a8\u6001\u56fe\u6a21\u5f0f\u4e0b\u4e0d\u9700\u8981\u8c03\u7528\n        :return:None\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.instance_fields_dict": [[39, 56], ["None"], "methods", ["None"], ["", "def", "instance_fields_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u5fc5\u987b\u9009\u9879\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n        \u5b9e\u4f8b\u5316fields_dict, \u5f97\u5230fields_id, \u89c6\u60c5\u51b5\u6784\u9020embedding\uff0c\u7136\u540e\u7ed3\u6784\u5316\u6210dict\u7c7b\u578b\u8fd4\u56de\u7ed9\u7ec4\u7f51\u90e8\u5206\u3002\n        :return:dict\n                {\"field_name\":\n                    {\"RECORD_ID\":\n                        {\"SRC_IDS\": [ids],\n                         \"MASK_IDS\": [ids],\n                         \"SEQ_LENS\": [ids]\n                        }\n                    }\n                }\n        \u5b9e\u4f8b\u5316\u7684dict\uff0c\u4fdd\u5b58\u4e86\u5404\u4e2afield\u7684id\u548cembedding(\u53ef\u4ee5\u6ca1\u6709\uff0c\u662f\u60c5\u51b5\u800c\u5b9a), \u7ed9trainer\u7528.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.convert_fields_to_dict": [[57, 65], ["None"], "methods", ["None"], ["", "def", "convert_fields_to_dict", "(", "self", ",", "field_list", ",", "need_emb", "=", "False", ")", ":", "\n", "        ", "\"\"\"instance_fields_dict\u4e00\u822c\u8c03\u7528\u672c\u65b9\u6cd5\u5b9e\u4f8b\u5316fields_dict\uff0c\u4fdd\u5b58\u5404\u4e2afield\u7684id\u548cembedding(\u53ef\u4ee5\u6ca1\u6709\uff0c\u662f\u60c5\u51b5\u800c\u5b9a),\n        \u5f53need_emb=False\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ed9predictor\u8c03\u7528\n        :param field_list:\n        :param need_emb:\n        :return: dict\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.__iter__": [[66, 70], ["NotImplementedError"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u8fed\u4ee3\u5668\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"'{}' not implement in class {}\"", ".", "format", "(", "'__iter__'", ",", "self", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.get_train_progress": [[71, 74], ["None"], "methods", ["None"], ["", "def", "get_train_progress", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets progress for training phase.\"\"\"", "\n", "return", "self", ".", "current_example", ",", "self", ".", "current_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.get_num_examples": [[75, 78], ["None"], "methods", ["None"], ["", "def", "get_num_examples", "(", "self", ")", ":", "\n", "        ", "\"\"\"get number of example\"\"\"", "\n", "return", "self", ".", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.convert_input_list_to_dict": [[79, 91], ["collections.OrderedDict", "enumerate", "len", "len"], "methods", ["None"], ["", "def", "convert_input_list_to_dict", "(", "self", ",", "input_list", ")", ":", "\n", "        ", "\"\"\"\u5c06dataloader\u8bfb\u53d6\u7684\u6837\u672c\u6570\u636e\uff0c\u7531list\u7c7b\u578b\u8f6c\u6362\u6210dict\u7c7b\u578b\uff0c\u9759\u6001\u56fe\u6a21\u5f0f\u7684execute.run\u8c03\u7528\n        \"\"\"", "\n", "\n", "assert", "len", "(", "self", ".", "input_data_list", ")", "==", "len", "(", "input_list", ")", ",", "\"len of input_data_list must equal \"", "\"input_list in DataSet.convert_input_list_to_dict\"", "\n", "\n", "feed_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "self", ".", "input_data_list", ")", ":", "\n", "            ", "feed_dict", "[", "data", ".", "name", "]", "=", "input_list", "[", "index", "]", "\n", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.api_generator": [[92, 98], ["None"], "methods", ["None"], ["", "def", "api_generator", "(", "self", ",", "query", ")", ":", "\n", "        ", "\"\"\"python api server\n        :param query: list\n        :return\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.__init__": [[20, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "fields", ",", "config", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fields", "=", "fields", "\n", "self", ".", "config", "=", "config", "# \u5e38\u7528\u53c2\u6570\uff0cbatch_size\u7b49\uff0cReaderConfig\u7c7b\u578b\u53d8\u91cf", "\n", "self", ".", "paddle_data_loader", "=", "None", "\n", "self", ".", "current_example", "=", "0", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "num_examples", "=", "0", "\n", "# \u8fed\u4ee3\u5668\u751f\u6210\u6570\u636e\u7684\u65f6\u5019\u662f\u5426\u9700\u8981\u751f\u6210\u660e\u6587\u6837\u672c\uff0c\u76ee\u524d\u6765\u770b\uff0c\u8bad\u7ec3\u7684\u65f6\u5019\u4e0d\u9700\u8981\uff0c\u9884\u6d4b\u7684\u65f6\u5019\u9700\u8981", "\n", "self", ".", "need_generate_examples", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.create_reader": [[31, 46], ["None"], "methods", ["None"], ["", "def", "create_reader", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u5fc5\u987b\u9009\u9879\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n        \u7528\u4e8e\u521d\u59cb\u5316self.paddle_data_loader\u3002\n        ``self.paddle_data_loader = fluid.layers.py_reader(\n            capacity=capacity,\n            shapes=shapes,\n            name=self.name,\n            dtypes=types,\n            lod_levels=levels,\n            use_double_buffer=True)\n        ``\n        :return:None\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.prepare_batch_data": [[47, 50], ["None"], "methods", ["None"], ["", "def", "prepare_batch_data", "(", "self", ",", "examples", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"generate batch records\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.instance_fields_dict": [[52, 69], ["None"], "methods", ["None"], ["", "def", "instance_fields_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u5fc5\u987b\u9009\u9879\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n        \u5b9e\u4f8b\u5316fields_dict, \u8c03\u7528pyreader\uff0c\u5f97\u5230fields_id, \u89c6\u60c5\u51b5\u6784\u9020embedding\uff0c\u7136\u540e\u7ed3\u6784\u5316\u6210dict\u7c7b\u578b\u8fd4\u56de\u7ed9\u7ec4\u7f51\u90e8\u5206\u3002\n        :return:dict\n                {\"field_name\":\n                    {\"RECORD_ID\":\n                        {\"SRC_IDS\": [ids],\n                         \"MASK_IDS\": [ids],\n                         \"SEQ_LENS\": [ids]\n                        }\n                    }\n                }\n        \u5b9e\u4f8b\u5316\u7684dict\uff0c\u4fdd\u5b58\u4e86\u5404\u4e2afield\u7684id\u548cembedding(\u53ef\u4ee5\u6ca1\u6709\uff0c\u662f\u60c5\u51b5\u800c\u5b9a), \u7ed9trainer\u7528.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.add_input": [[70, 74], ["None"], "methods", ["None"], ["", "def", "add_input", "(", "self", ")", ":", "\n", "        ", "\"\"\"warp\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.data_generator": [[75, 86], ["None"], "methods", ["None"], ["", "def", "data_generator", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u5fc5\u987b\u9009\u9879\uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\n        \u6570\u636e\u751f\u6210\u5668\uff1a\u8bfb\u53d6\u660e\u6587\u6587\u4ef6\uff0c\u751f\u6210batch\u5316\u7684id\u6570\u636e\uff0c\u7ed1\u5b9a\u5230py_reader\u4e2d\n        :return:list\n                [[src_ids],\n                 [mask_ids],\n                 [seq_lens]\n                ]\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.convert_fields_to_dict": [[94, 102], ["None"], "methods", ["None"], ["", "def", "convert_fields_to_dict", "(", "self", ",", "field_list", ",", "need_emb", "=", "False", ")", ":", "\n", "        ", "\"\"\"instance_fields_dict\u4e00\u822c\u8c03\u7528\u672c\u65b9\u6cd5\u5b9e\u4f8b\u5316fields_dict\uff0c\u4fdd\u5b58\u5404\u4e2afield\u7684id\u548cembedding(\u53ef\u4ee5\u6ca1\u6709\uff0c\u662f\u60c5\u51b5\u800c\u5b9a),\n        \u5f53need_emb=False\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u76f4\u63a5\u7ed9predictor\u8c03\u7528\n        :param field_list:\n        :param need_emb:\n        :return: dict\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run": [[103, 114], ["base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.paddle_data_loader.set_batch_generator", "base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.paddle_data_loader.start", "logging.info", "ValueError", "base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.data_generator"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.Token.start", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.data_generator"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u914d\u7f6epy_reader\u5bf9\u5e94\u7684\u6570\u636e\u751f\u6210\u5668\uff0c\u5e76\u542f\u52a8\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "paddle_data_loader", ":", "\n", "            ", "self", ".", "paddle_data_loader", ".", "set_batch_generator", "(", "self", ".", "data_generator", "(", ")", ")", "\n", "self", ".", "paddle_data_loader", ".", "start", "(", ")", "\n", "logging", ".", "info", "(", "\"set data_generator and start.......\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"paddle_data_loader is None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.stop": [[115, 123], ["base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.paddle_data_loader.reset", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.reset"], ["", "", "def", "stop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "paddle_data_loader", ":", "\n", "            ", "self", ".", "paddle_data_loader", ".", "reset", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"paddle_data_loader is None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_train_progress": [[124, 127], ["None"], "methods", ["None"], ["", "", "def", "get_train_progress", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gets progress for training phase.\"\"\"", "\n", "return", "self", ".", "current_example", ",", "self", ".", "current_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples": [[128, 131], ["None"], "methods", ["None"], ["", "def", "get_num_examples", "(", "self", ")", ":", "\n", "        ", "\"\"\"get number of example\"\"\"", "\n", "return", "self", ".", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.api_generator": [[132, 146], ["collections.namedtuple", "base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.prepare_batch_data", "len", "ValueError", "field_names.append", "examples.append", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.prepare_batch_data"], ["", "def", "api_generator", "(", "self", ",", "query_list", ")", ":", "\n", "        ", "\"\"\"python api server\"\"\"", "\n", "if", "len", "(", "query_list", ")", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"query can't be None\"", ")", "\n", "", "field_names", "=", "[", "]", "\n", "for", "filed", "in", "self", ".", "fields", ":", "\n", "            ", "field_names", ".", "append", "(", "filed", ".", "name", ")", "\n", "\n", "", "Example", "=", "namedtuple", "(", "'Example'", ",", "field_names", ")", "\n", "examples", "=", "[", "]", "\n", "for", "query", "in", "query_list", ":", "\n", "            ", "examples", ".", "append", "(", "Example", "(", "**", "query", ")", ")", "\n", "", "for", "batch_data", "in", "self", ".", "prepare_batch_data", "(", "examples", ",", "self", ".", "config", ".", "batch_size", ")", ":", "\n", "            ", "yield", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.__init__": [[29, 62], ["erniekit.model.model.BaseModel.__init__", "logging.info", "ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "erniekit.modules.ernie_config.ErnieConfig", "ernie_infilling_generation.ErnieInfillingGeneration.model_params.get().get", "ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "ernie_infilling_generation.ErnieInfillingGeneration.model_params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "reader", ",", "model_params", ")", ":", "\n", "        ", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "logging", ".", "info", "(", "\"ErnieInfillingGeneration init....\"", ")", "\n", "self", ".", "reader", "=", "reader", "\n", "# args = other_params[\"args\"]", "\n", "self", ".", "two_stream", "=", "self", ".", "reader", ".", "two_stream", "\n", "# self.use_fp16 = args.use_fp16", "\n", "self", ".", "task_type", "=", "self", ".", "reader", ".", "task_type", "\n", "self", ".", "label_smooth", "=", "self", ".", "model_params", ".", "get", "(", "'label_smooth'", ",", "0.0", ")", "\n", "# self.loss_scaling = args.init_loss_scaling", "\n", "self", ".", "max_dec_len", "=", "self", ".", "reader", ".", "max_dec_len", "\n", "self", ".", "continuous_position", "=", "self", ".", "reader", ".", "continuous_position", "\n", "self", ".", "tgt_type_id", "=", "self", ".", "reader", ".", "tgt_type_id", "\n", "self", ".", "beam_size", "=", "self", ".", "model_params", ".", "get", "(", "'beam_size'", ",", "1", ")", "\n", "self", ".", "weight_sharing", "=", "self", ".", "model_params", ".", "get", "(", "'weight_sharing'", ",", "True", ")", "\n", "self", ".", "do_dec", "=", "self", ".", "reader", ".", "do_dec", "\n", "self", ".", "output_path", "=", "'./output/'", "\n", "self", ".", "length_penalty", "=", "self", ".", "model_params", ".", "get", "(", "'weight_sharing'", ",", "0", ")", "\n", "self", ".", "use_multi_node_test", "=", "False", "\n", "\n", "self", ".", "tokenizer", "=", "self", ".", "reader", ".", "tokenizer", "\n", "self", ".", "merge_subword", "=", "self", ".", "tokenizer", ".", "merge_subword", "\n", "self", ".", "vocab", "=", "self", ".", "tokenizer", ".", "vocab", "\n", "self", ".", "inv_vocab", "=", "self", ".", "tokenizer", ".", "inv_vocab", "\n", "self", ".", "mask_idx", "=", "self", ".", "vocab", "[", "\"[MASK]\"", "]", "\n", "self", ".", "eos_idx", "=", "self", ".", "vocab", "[", "\"[SEP]\"", "]", "\n", "\n", "self", ".", "gpu_id", "=", "self", ".", "reader", ".", "trainer_id", "\n", "self", ".", "dev_count", "=", "self", ".", "reader", ".", "dev_count", "\n", "self", ".", "ernie_config", "=", "ErnieConfig", "(", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", ".", "get", "(", "\"config_path\"", ")", ")", "\n", "if", "self", ".", "task_type", "==", "\"dialog\"", ":", "\n", "            ", "self", ".", "ernie_config", "[", "\"turn_type_size\"", "]", "=", "self", ".", "model_params", ".", "get", "(", "'turn_type_size'", ",", "2", ")", "\n", "self", ".", "ernie_config", "[", "\"role_type_size\"", "]", "=", "self", ".", "model_params", ".", "get", "(", "'role_type_size'", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.structure": [[63, 68], ["None"], "methods", ["None"], ["", "", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration._cal_logit": [[69, 121], ["paddle.fluid.layers.reshape", "paddle.fluid.layers.fc", "paddle.fluid.layers.layer_norm", "paddle.fluid.ParamAttr", "paddle.fluid.layers.cast", "paddle.fluid.layers.gather", "paddle.fluid.layers.matmul", "paddle.fluid.layers.create_parameter", "paddle.fluid.layers.fc", "paddle.fluid.ParamAttr", "paddle.fluid.ParamAttr", "paddle.fluid.ParamAttr", "paddle.fluid.ParamAttr", "paddle.fluid.initializer.Constant", "len", "paddle.fluid.default_main_program().global_block().var", "paddle.fluid.ParamAttr", "paddle.fluid.initializer.TruncatedNormal", "paddle.fluid.initializer.Constant", "paddle.fluid.initializer.Constant", "paddle.fluid.initializer.Constant", "paddle.fluid.default_main_program().global_block", "paddle.fluid.initializer.TruncatedNormal", "paddle.fluid.default_main_program"], "methods", ["None"], ["", "def", "_cal_logit", "(", "self", ",", "enc_out", ",", "tgt_pos", "=", "None", ")", ":", "\n", "        ", "enc_out", "=", "fluid", ".", "layers", ".", "reshape", "(", "x", "=", "enc_out", ",", "\n", "shape", "=", "[", "-", "1", ",", "self", ".", "ernie_config", "[", "\"hidden_size\"", "]", "]", ")", "\n", "if", "tgt_pos", ":", "\n", "            ", "tgt_pos", "=", "fluid", ".", "layers", ".", "cast", "(", "x", "=", "tgt_pos", ",", "dtype", "=", "'int32'", ")", "\n", "tgt_feat", "=", "fluid", ".", "layers", ".", "gather", "(", "input", "=", "enc_out", ",", "index", "=", "tgt_pos", ")", "\n", "", "else", ":", "\n", "            ", "tgt_feat", "=", "enc_out", "\n", "", "tgt_trans_feat", "=", "fluid", ".", "layers", ".", "fc", "(", "\n", "input", "=", "tgt_feat", ",", "\n", "size", "=", "self", ".", "ernie_config", "[", "\"emb_size\"", "]", "or", "self", ".", "ernie_config", "[", "\"hidden_size\"", "]", ",", "\n", "act", "=", "self", ".", "ernie_config", "[", "\"hidden_act\"", "]", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "\"mask_lm_trans_fc.w_0\"", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "TruncatedNormal", "(", "scale", "=", "0.02", ")", ")", ",", "\n", "bias_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "\"mask_lm_trans_fc.b_0\"", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "Constant", "(", "0.", ")", ")", ")", "\n", "tgt_trans_feat", "=", "fluid", ".", "layers", ".", "layer_norm", "(", "\n", "tgt_trans_feat", ",", "\n", "begin_norm_axis", "=", "len", "(", "tgt_trans_feat", ".", "shape", ")", "-", "1", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "'mask_lm_trans_layer_norm_scale'", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "Constant", "(", "1.", ")", ")", ",", "\n", "bias_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "'mask_lm_trans_layer_norm_bias'", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "Constant", "(", "1.", ")", ")", ")", "\n", "\n", "seq2seq_out_bias_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "\"mask_lm_out_fc.b_0\"", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "Constant", "(", "value", "=", "0.0", ")", ")", "\n", "\n", "if", "self", ".", "weight_sharing", ":", "\n", "            ", "fc_out", "=", "fluid", ".", "layers", ".", "matmul", "(", "\n", "x", "=", "tgt_trans_feat", ",", "\n", "y", "=", "fluid", ".", "default_main_program", "(", ")", ".", "global_block", "(", ")", ".", "var", "(", "\"word_embedding\"", ")", ",", "\n", "transpose_y", "=", "True", ")", "\n", "fc_out", "+=", "fluid", ".", "layers", ".", "create_parameter", "(", "\n", "shape", "=", "[", "self", ".", "ernie_config", "[", "'vocab_size'", "]", "]", ",", "\n", "dtype", "=", "\"float32\"", ",", "\n", "attr", "=", "seq2seq_out_bias_attr", ",", "\n", "is_bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "out_size", "=", "self", ".", "ernie_config", "[", "\"tgt_vocab_size\"", "]", "or", "self", ".", "ernie_config", "[", "'vocab_size'", "]", "\n", "fc_out", "=", "fluid", ".", "layers", ".", "fc", "(", "input", "=", "tgt_trans_feat", ",", "\n", "size", "=", "out_size", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "\"mask_lm_out_fc.w_0\"", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "TruncatedNormal", "(", "scale", "=", "0.02", ")", ")", ",", "\n", "bias_attr", "=", "seq2seq_out_bias_attr", ")", "\n", "\n", "", "return", "fc_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.forward": [[122, 154], ["ernie_infilling_generation.ErnieInfillingGeneration.fields_process", "ernie_infilling_generation.ErnieInfillingGeneration.make_embedding", "ernie_infilling_generation.ErnieInfillingGeneration._cal_logit", "paddle.fluid.layers.mean", "ernie_infilling_generation.ErnieInfillingGeneration.fast_decode", "paddle.fluid.layers.label_smooth", "paddle.fluid.layers.softmax_with_cross_entropy", "paddle.fluid.layers.softmax_with_cross_entropy", "paddle.fluid.layers.one_hot"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.fields_process", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.make_embedding", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration._cal_logit", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.fast_decode"], ["", "def", "forward", "(", "self", ",", "reader", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        create forwrad net\n        \"\"\"", "\n", "fields_dict", "=", "self", ".", "fields_process", "(", "fields_dict", ",", "phase", ")", "\n", "self", ".", "do_dec", "=", "reader", ".", "do_dec", "\n", "if", "self", ".", "do_dec", "and", "phase", "!=", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "return", "self", ".", "fast_decode", "(", "fields_dict", ",", "phase", ")", "\n", "", "masks", "=", "fields_dict", "[", "\"masks\"", "]", "\n", "tgt_labels", ",", "tgt_pos", "=", "masks", "[", "InstanceName", ".", "TGT_LABEL", "]", ",", "masks", "[", "InstanceName", ".", "TGT_POS", "]", "\n", "# get output embedding of model", "\n", "emb_dict", "=", "self", ".", "make_embedding", "(", "fields_dict", ",", "phase", ")", "\n", "enc_out", "=", "emb_dict", "[", "\"enc_out\"", "]", "\n", "fc_out", "=", "self", ".", "_cal_logit", "(", "enc_out", ",", "tgt_pos", ")", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", "and", "self", ".", "label_smooth", ":", "\n", "            ", "out_size", "=", "self", ".", "ernie_config", "[", "\"tgt_vocab_size\"", "]", "or", "self", ".", "ernie_config", "[", "'vocab_size'", "]", "\n", "labels", "=", "fluid", ".", "layers", ".", "label_smooth", "(", "\n", "label", "=", "fluid", ".", "layers", ".", "one_hot", "(", "\n", "input", "=", "tgt_labels", ",", "depth", "=", "out_size", ")", ",", "\n", "epsilon", "=", "self", ".", "label_smooth", ")", "\n", "ce_loss", "=", "layers", ".", "softmax_with_cross_entropy", "(", "\n", "logits", "=", "fc_out", ",", "label", "=", "labels", ",", "soft_label", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "ce_loss", ",", "probs", "=", "fluid", ".", "layers", ".", "softmax_with_cross_entropy", "(", "\n", "logits", "=", "fc_out", ",", "label", "=", "tgt_labels", ",", "return_softmax", "=", "True", ")", "\n", "\n", "", "loss", "=", "fluid", ".", "layers", ".", "mean", "(", "x", "=", "ce_loss", ")", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "LOSS", ":", "loss", ",", "\n", "'lr'", ":", "\"learning_rate_0\"", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.fast_decode": [[155, 330], ["ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "ernie_infilling_generation.ErnieInfillingGeneration.get", "erniekit.modules.ernie_gen.ErnieGenModel", "paddle.fluid.layers.fill_constant", "paddle.fluid.layers.fill_constant", "paddle.fluid.layers.fill_constant", "paddle.fluid.layers.less_than", "paddle.fluid.layers.fill_constant", "paddle.fluid.layers.fill_constant", "paddle.fluid.layers.array_write", "paddle.fluid.layers.array_write", "paddle.fluid.layers.array_write", "paddle.fluid.layers.array_write", "paddle.fluid.layers.while_loop", "paddle.fluid.layers.beam_search_decode", "len", "paddle.fluid.layers.reshape", "paddle.fluid.layers.reshape", "paddle.fluid.layers.logical_and", "paddle.fluid.layers.array_read", "paddle.fluid.layers.reshape", "paddle.fluid.layers.array_read", "paddle.fluid.layers.array_read", "paddle.fluid.layers.gather", "paddle.fluid.layers.array_read", "paddle.fluid.layers.fill_constant_batch_size_like", "paddle.fluid.layers.fill_constant_batch_size_like", "paddle.fluid.layers.concat", "paddle.fluid.layers.concat", "paddle.fluid.layers.concat", "paddle.fluid.layers.gather", "paddle.fluid.layers.gather", "paddle.fluid.layers.gather", "paddle.fluid.layers.elementwise_mul", "paddle.fluid.layers.elementwise_mul", "paddle.fluid.layers.elementwise_mul", "paddle.fluid.layers.fill_constant_batch_size_like", "paddle.fluid.layers.fill_constant_batch_size_like", "paddle.fluid.layers.fill_constant_batch_size_like", "paddle.fluid.layers.concat", "paddle.fluid.layers.concat", "paddle.fluid.layers.concat", "paddle.fluid.layers.concat", "paddle.fluid.layers.concat", "paddle.fluid.layers.concat", "erniekit.modules.ernie_gen.ErnieGenModel.encode", "ernie_infilling_generation.ErnieInfillingGeneration._cal_logit", "paddle.fluid.layers.topk", "paddle.fluid.layers.elementwise_add", "paddle.fluid.layers.lod_reset", "paddle.fluid.layers.lod_reset", "paddle.fluid.layers.beam_search", "paddle.fluid.layers.increment", "paddle.fluid.layers.increment", "paddle.fluid.layers.array_write", "paddle.fluid.layers.array_write", "paddle.fluid.layers.array_write", "paddle.fluid.layers.array_write", "paddle.fluid.layers.assign", "paddle.fluid.layers.less_than", "paddle.fluid.layers.logical_not", "paddle.fluid.layers.reshape", "paddle.fluid.layers.unsqueeze", "paddle.fluid.layers.is_empty", "list", "list", "paddle.fluid.layers.fill_constant_batch_size_like", "paddle.fluid.layers.fill_constant_batch_size_like", "paddle.fluid.layers.fill_constant_batch_size_like", "paddle.fluid.layers.softmax", "paddle.fluid.layers.log", "context.values", "decode_inputs.values", "list", "list", "context.values", "decode_inputs.values"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration._cal_logit"], ["", "def", "fast_decode", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"decode with cache\"\"\"", "\n", "emb_params", "=", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", "\n", "use_fp16", "=", "emb_params", ".", "get", "(", "\"use_fp16\"", ")", "\n", "ernie_config", "=", "self", ".", "ernie_config", "\n", "\n", "context", "=", "fields_dict", "[", "\"context\"", "]", "\n", "src_ids", ",", "pos_ids", "=", "context", "[", "InstanceName", ".", "SRC_IDS", "]", ",", "context", "[", "InstanceName", ".", "POS_IDS", "]", "\n", "if", "len", "(", "context", ")", "==", "4", ":", "\n", "            ", "sent_ids", "=", "context", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "role_ids", "=", "None", "\n", "turn_ids", "=", "None", "\n", "", "else", ":", "\n", "            ", "sent_ids", "=", "None", "\n", "role_ids", "=", "context", "[", "InstanceName", ".", "ROLE_IDS", "]", "\n", "turn_ids", "=", "context", "[", "InstanceName", ".", "TURN_IDS", "]", "\n", "", "input_mask", "=", "context", "[", "InstanceName", ".", "MASK_IDS", "]", "\n", "decode_inputs", "=", "fields_dict", "[", "\"decode_inputs\"", "]", "\n", "tgt_ids", ",", "tgt_pos", ",", "init_scores", ",", "parent_idx", ",", "tgt_input_mask", ",", "data_ids", "=", "decode_inputs", "[", "InstanceName", ".", "TGT_SRC_IDS", "]", ",", "decode_inputs", "[", "InstanceName", ".", "TGT_POS_IDS", "]", ",", "decode_inputs", "[", "InstanceName", ".", "INIT_SCORES", "]", ",", "decode_inputs", "[", "InstanceName", ".", "PARENT_IDX", "]", ",", "decode_inputs", "[", "InstanceName", ".", "TGT_MASK_IDS", "]", ",", "decode_inputs", "[", "InstanceName", ".", "DATA_IDS", "]", "\n", "\n", "\n", "\n", "\n", "ernie", "=", "ErnieGenModel", "(", "\n", "src_ids", "=", "src_ids", ",", "\n", "position_ids", "=", "pos_ids", ",", "\n", "sentence_ids", "=", "sent_ids", ",", "\n", "role_ids", "=", "role_ids", ",", "\n", "turn_ids", "=", "turn_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "config", "=", "ernie_config", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "task_type", "=", "self", ".", "task_type", ",", "\n", "decoding", "=", "True", ",", "\n", "gather_idx", "=", "parent_idx", ",", "\n", ")", "\n", "\n", "max_len", "=", "layers", ".", "fill_constant", "(", "shape", "=", "[", "1", "]", ",", "dtype", "=", "tgt_ids", ".", "dtype", ",", "\n", "value", "=", "self", ".", "max_dec_len", ",", "force_cpu", "=", "True", ")", "\n", "step_idx", "=", "layers", ".", "fill_constant", "(", "\n", "shape", "=", "[", "1", "]", ",", "dtype", "=", "tgt_ids", ".", "dtype", ",", "value", "=", "0", ",", "force_cpu", "=", "True", ")", "\n", "pos_idx", "=", "layers", ".", "fill_constant", "(", "\n", "shape", "=", "[", "1", "]", ",", "dtype", "=", "tgt_ids", ".", "dtype", ",", "value", "=", "1", ",", "force_cpu", "=", "True", ")", "\n", "length_cond", "=", "layers", ".", "less_than", "(", "x", "=", "step_idx", ",", "y", "=", "max_len", ")", "\n", "finish_cond", "=", "layers", ".", "fill_constant", "(", "shape", "=", "[", "1", "]", ",", "dtype", "=", "\"bool\"", ",", "value", "=", "1", ")", "\n", "mask_id", "=", "layers", ".", "fill_constant", "(", "\n", "shape", "=", "[", "1", "]", ",", "dtype", "=", "tgt_ids", ".", "dtype", ",", "value", "=", "self", ".", "mask_idx", ",", "force_cpu", "=", "True", ")", "\n", "ids", "=", "layers", ".", "array_write", "(", "\n", "layers", ".", "reshape", "(", "tgt_ids", ",", "(", "-", "1", ",", "1", ")", ")", ",", "step_idx", ")", "\n", "pos_biases", "=", "layers", ".", "array_write", "(", "layers", ".", "reshape", "(", "tgt_pos", ",", "(", "-", "1", ",", "1", ")", ")", ",", "step_idx", ")", "\n", "scores", "=", "layers", ".", "array_write", "(", "init_scores", ",", "step_idx", ")", "\n", "tgt_masks", "=", "layers", ".", "array_write", "(", "tgt_input_mask", ",", "step_idx", ")", "\n", "\n", "def", "cond", "(", "length_cond", ",", "finish_cond", ")", ":", "\n", "            ", "\"\"\"\n            x\u5faa\u73af\u6761\u4ef6\n            :param length_cond: \u957f\u5ea6\u6761\u4ef6\n            :param finish_cond: \u7ed3\u675f\u6761\u4ef6\n            :return: \u5faa\u73af\u6761\u4ef6\n            \"\"\"", "\n", "return", "layers", ".", "logical_and", "(", "x", "=", "length_cond", ",", "y", "=", "finish_cond", ")", "\n", "\n", "", "def", "body", "(", "length_cond", ",", "finish_cond", ")", ":", "\n", "            ", "\"\"\"\n            \u8bad\u7ec3\u6267\u884c\u7ed3\u6784\u4f53\n            :param length_cond: \u957f\u5ea6\u6761\u4ef6\n            :param finish_cond: \u7ed3\u675f\u6761\u4ef6\n            :return: \u5faa\u73af\u6761\u4ef6\n            \"\"\"", "\n", "pre_ids", "=", "layers", ".", "array_read", "(", "array", "=", "ids", ",", "i", "=", "step_idx", ")", "\n", "pre_ids", "=", "layers", ".", "reshape", "(", "pre_ids", ",", "(", "-", "1", ",", "1", ",", "1", ")", ",", "inplace", "=", "True", ")", "\n", "pre_scores", "=", "layers", ".", "array_read", "(", "array", "=", "scores", ",", "i", "=", "step_idx", ")", "\n", "pos_bias", "=", "layers", ".", "array_read", "(", "array", "=", "pos_biases", ",", "i", "=", "step_idx", ")", "\n", "pos_bias", "=", "layers", ".", "gather", "(", "input", "=", "pos_bias", ",", "index", "=", "parent_idx", ")", "\n", "\n", "tmp_mask", "=", "layers", ".", "array_read", "(", "tgt_masks", ",", "i", "=", "step_idx", ")", "\n", "append_1_mask", "=", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "tmp_mask", ",", "value", "=", "1.0", ",", "shape", "=", "[", "-", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "tmp_mask", ".", "dtype", ")", "\n", "append_0_mask", "=", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "tmp_mask", ",", "value", "=", "0.0", ",", "shape", "=", "[", "-", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "tmp_mask", ".", "dtype", ")", "\n", "tmp_mask", "=", "layers", ".", "concat", "(", "[", "tmp_mask", ",", "append_1_mask", "]", ",", "axis", "=", "2", ")", "\n", "tmp_tgt_input_mask", "=", "layers", ".", "concat", "(", "[", "tmp_mask", ",", "append_0_mask", "]", ",", "axis", "=", "2", ")", "\n", "tmp_cur_input_mask", "=", "layers", ".", "concat", "(", "[", "tmp_mask", ",", "append_1_mask", "]", ",", "axis", "=", "2", ")", "\n", "tmp_mask", "=", "layers", ".", "gather", "(", "input", "=", "tmp_mask", ",", "index", "=", "parent_idx", ")", "\n", "pre_mask", "=", "layers", ".", "gather", "(", "input", "=", "tmp_tgt_input_mask", ",", "index", "=", "parent_idx", ")", "\n", "cur_mask", "=", "layers", ".", "gather", "(", "input", "=", "tmp_cur_input_mask", ",", "index", "=", "parent_idx", ")", "\n", "\n", "cur_ids", "=", "layers", ".", "elementwise_mul", "(", "\n", "x", "=", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "pre_mask", ",", "value", "=", "1", ",", "shape", "=", "[", "-", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "pre_ids", ".", "dtype", ")", ",", "\n", "y", "=", "mask_id", ",", "axis", "=", "0", ")", "\n", "\n", "pre_pos", "=", "layers", ".", "elementwise_mul", "(", "\n", "x", "=", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "pre_mask", ",", "value", "=", "1", ",", "shape", "=", "[", "-", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "pre_ids", ".", "dtype", ")", ",", "\n", "y", "=", "step_idx", ",", "axis", "=", "0", ")", "\n", "cur_pos", "=", "layers", ".", "elementwise_mul", "(", "\n", "x", "=", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "pre_mask", ",", "value", "=", "1", ",", "shape", "=", "[", "-", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "pre_ids", ".", "dtype", ")", ",", "\n", "y", "=", "pos_idx", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "continuous_position", ":", "\n", "                ", "unsqueeze_pos_bias", "=", "layers", ".", "unsqueeze", "(", "pos_bias", ",", "[", "1", "]", ")", "\n", "pre_pos", "=", "pre_pos", "+", "unsqueeze_pos_bias", "\n", "cur_pos", "=", "cur_pos", "+", "unsqueeze_pos_bias", "\n", "\n", "", "type_ids", "=", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "pre_mask", ",", "value", "=", "self", ".", "tgt_type_id", ",", "shape", "=", "[", "-", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "pre_ids", ".", "dtype", ")", "\n", "role_type_ids", "=", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "pre_mask", ",", "value", "=", "0", ",", "shape", "=", "[", "-", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "pre_ids", ".", "dtype", ")", "\n", "turn_type_ids", "=", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "pre_mask", ",", "value", "=", "0", ",", "shape", "=", "[", "-", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "pre_ids", ".", "dtype", ")", "\n", "\n", "dec_ids", "=", "layers", ".", "concat", "(", "[", "pre_ids", ",", "cur_ids", "]", ",", "axis", "=", "1", ")", "\n", "dec_pos", "=", "layers", ".", "concat", "(", "[", "pre_pos", ",", "cur_pos", "]", ",", "axis", "=", "1", ")", "\n", "dec_type", "=", "layers", ".", "concat", "(", "[", "type_ids", ",", "type_ids", "]", ",", "axis", "=", "1", ")", "\n", "dec_role", "=", "layers", ".", "concat", "(", "[", "role_type_ids", ",", "role_type_ids", "]", ",", "axis", "=", "1", ")", "\n", "dec_turn", "=", "layers", ".", "concat", "(", "[", "turn_type_ids", ",", "turn_type_ids", "]", ",", "axis", "=", "1", ")", "\n", "dec_mask", "=", "layers", ".", "concat", "(", "[", "pre_mask", ",", "cur_mask", "]", ",", "axis", "=", "1", ")", "\n", "dec_out", "=", "ernie", ".", "encode", "(", "dec_ids", ",", "dec_pos", ",", "dec_type", ",", "dec_mask", ",", "\n", "parent_idx", ",", "remove_mask", "=", "True", ",", "role_ids", "=", "dec_role", ",", "turn_ids", "=", "dec_turn", ")", "\n", "fc_out", "=", "self", ".", "_cal_logit", "(", "dec_out", "[", ":", ",", "1", ":", ",", ":", "]", ")", "\n", "topk_scores", ",", "topk_indices", "=", "layers", ".", "topk", "(", "\n", "input", "=", "layers", ".", "softmax", "(", "fc_out", ")", ",", "k", "=", "self", ".", "beam_size", ")", "\n", "accu_scores", "=", "layers", ".", "elementwise_add", "(", "\n", "x", "=", "layers", ".", "log", "(", "topk_scores", ")", ",", "y", "=", "pre_scores", ",", "axis", "=", "0", ")", "\n", "topk_indices", "=", "layers", ".", "lod_reset", "(", "topk_indices", ",", "pre_ids", ")", "\n", "accu_scores", "=", "layers", ".", "lod_reset", "(", "accu_scores", ",", "pre_ids", ")", "\n", "selected_ids", ",", "selected_scores", ",", "gather_idx", "=", "layers", ".", "beam_search", "(", "\n", "pre_ids", "=", "pre_ids", ",", "\n", "pre_scores", "=", "pre_scores", ",", "\n", "ids", "=", "topk_indices", ",", "\n", "scores", "=", "accu_scores", ",", "\n", "beam_size", "=", "self", ".", "beam_size", ",", "\n", "end_id", "=", "self", ".", "eos_idx", ",", "\n", "return_parent_idx", "=", "True", ")", "\n", "\n", "layers", ".", "increment", "(", "x", "=", "step_idx", ",", "value", "=", "1.0", ",", "in_place", "=", "True", ")", "\n", "layers", ".", "increment", "(", "x", "=", "pos_idx", ",", "value", "=", "1.0", ",", "in_place", "=", "True", ")", "\n", "layers", ".", "array_write", "(", "selected_ids", ",", "i", "=", "step_idx", ",", "array", "=", "ids", ")", "\n", "layers", ".", "array_write", "(", "selected_scores", ",", "i", "=", "step_idx", ",", "array", "=", "scores", ")", "\n", "layers", ".", "array_write", "(", "tmp_mask", ",", "i", "=", "step_idx", ",", "array", "=", "tgt_masks", ")", "\n", "layers", ".", "array_write", "(", "pos_bias", ",", "i", "=", "step_idx", ",", "array", "=", "pos_biases", ")", "\n", "layers", ".", "assign", "(", "gather_idx", ",", "parent_idx", ")", "\n", "\n", "length_cond", "=", "layers", ".", "less_than", "(", "x", "=", "step_idx", ",", "y", "=", "max_len", ")", "\n", "finish_cond", "=", "layers", ".", "logical_not", "(", "layers", ".", "is_empty", "(", "x", "=", "selected_ids", ")", ")", "\n", "return", "[", "length_cond", ",", "finish_cond", "]", "\n", "\n", "", "_", ",", "_", "=", "layers", ".", "while_loop", "(", "cond", ",", "body", ",", "[", "length_cond", ",", "finish_cond", "]", ")", "\n", "\n", "finished_ids", ",", "finished_scores", "=", "layers", ".", "beam_search_decode", "(", "\n", "ids", ",", "scores", ",", "beam_size", "=", "self", ".", "beam_size", ",", "end_id", "=", "self", ".", "eos_idx", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "            ", "data_ids", "=", "layers", ".", "reshape", "(", "x", "=", "data_ids", ",", "shape", "=", "[", "-", "1", "]", ")", "\n", "target_feed_list", "=", "list", "(", "context", ".", "values", "(", ")", ")", "+", "list", "(", "decode_inputs", ".", "values", "(", ")", ")", "\n", "target_feed_name_list", "=", "[", "value", ".", "name", "for", "value", "in", "list", "(", "context", ".", "values", "(", ")", ")", "+", "list", "(", "decode_inputs", ".", "values", "(", ")", ")", "]", "\n", "target_predict_list", "=", "[", "finished_ids", ",", "finished_scores", ",", "data_ids", "]", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "forward_return_dict", "=", "{", "\n", "\"finished_ids\"", ":", "finished_ids", ",", "\n", "\"finished_scores\"", ":", "finished_scores", ",", "\n", "\"data_ids\"", ":", "data_ids", "\n", "}", "\n", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.fields_process": [[331, 337], ["fields_dict.keys"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["", "def", "fields_process", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"fields process\"\"\"", "\n", "ret", "=", "{", "}", "\n", "for", "key", "in", "fields_dict", ".", "keys", "(", ")", ":", "\n", "            ", "ret", "[", "key", "]", "=", "fields_dict", "[", "key", "]", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.make_embedding": [[338, 389], ["ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "ernie_infilling_generation.ErnieInfillingGeneration.get", "erniekit.modules.ernie_gen.ErnieGenModel", "erniekit.modules.ernie_gen.ErnieGenModel.get_sequence_output", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.get_sequence_output"], ["", "def", "make_embedding", "(", "self", ",", "fields", ",", "phase", ")", ":", "\n", "        ", "\"\"\"make embedding\"\"\"", "\n", "emb_params", "=", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", "\n", "use_fp16", "=", "emb_params", ".", "get", "(", "\"use_fp16\"", ")", "\n", "ernie_config", "=", "self", ".", "ernie_config", "\n", "\n", "context", "=", "fields", "[", "\"context\"", "]", "\n", "if", "self", ".", "two_stream", ":", "\n", "            ", "query", "=", "fields", "[", "\"query\"", "]", "\n", "src_ids", "=", "[", "context", "[", "InstanceName", ".", "SRC_IDS", "]", ",", "query", "[", "InstanceName", ".", "SRC_IDS", "]", "]", "\n", "pos_ids", "=", "[", "context", "[", "InstanceName", ".", "POS_IDS", "]", ",", "query", "[", "InstanceName", ".", "POS_IDS", "]", "]", "\n", "if", "len", "(", "context", ")", "==", "4", ":", "\n", "                ", "sent_ids", "=", "[", "context", "[", "InstanceName", ".", "SENTENCE_IDS", "]", ",", "query", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "]", "\n", "role_ids", "=", "[", "None", ",", "None", "]", "\n", "turn_ids", "=", "[", "None", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "sent_ids", "=", "[", "None", ",", "None", "]", "\n", "role_ids", "=", "[", "context", "[", "InstanceName", ".", "ROLE_IDS", "]", ",", "query", "[", "InstanceName", ".", "ROLE_IDS", "]", "]", "\n", "turn_ids", "=", "[", "context", "[", "InstanceName", ".", "TURN_IDS", "]", ",", "query", "[", "InstanceName", ".", "TURN_IDS", "]", "]", "\n", "", "input_mask", "=", "[", "context", "[", "InstanceName", ".", "MASK_IDS", "]", ",", "query", "[", "InstanceName", ".", "MASK_IDS", "]", "]", "\n", "", "else", ":", "\n", "            ", "src_ids", "=", "context", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "pos_ids", "=", "context", "[", "InstanceName", ".", "POS_IDS", "]", "\n", "if", "len", "(", "context", ")", "==", "4", ":", "\n", "                ", "sent_ids", "=", "context", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "role_ids", "=", "None", "\n", "turn_ids", "=", "None", "\n", "", "else", ":", "\n", "                ", "sent_ids", "=", "None", "\n", "role_ids", "=", "context", "[", "InstanceName", ".", "ROLE_IDS", "]", "\n", "turn_ids", "=", "context", "[", "InstanceName", ".", "TURN_IDS", "]", "\n", "", "input_mask", "=", "context", "[", "InstanceName", ".", "MASK_IDS", "]", "\n", "\n", "\n", "\n", "", "ernie", "=", "ErnieGenModel", "(", "\n", "src_ids", "=", "src_ids", ",", "\n", "position_ids", "=", "pos_ids", ",", "\n", "sentence_ids", "=", "sent_ids", ",", "\n", "role_ids", "=", "role_ids", ",", "\n", "turn_ids", "=", "turn_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "config", "=", "ernie_config", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "task_type", "=", "self", ".", "task_type", ",", "\n", "two_stream", "=", "self", ".", "two_stream", "\n", ")", "\n", "\n", "enc_out", "=", "ernie", ".", "get_sequence_output", "(", ")", "\n", "embedding_dict", "=", "{", "\"enc_out\"", ":", "enc_out", "}", "\n", "return", "embedding_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration._post_process_seq": [[390, 402], ["len", "enumerate"], "methods", ["None"], ["", "def", "_post_process_seq", "(", "self", ",", "seq", ")", ":", "\n", "        ", "\"\"\"\n        Post-process the beam-search decoded sequence. Truncate from the first\n        <eos> and remove the <bos> and <eos> tokens currently.\n        \"\"\"", "\n", "eos_pos", "=", "len", "(", "seq", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "seq", ")", ":", "\n", "            ", "if", "idx", "==", "self", ".", "eos_idx", ":", "\n", "                ", "eos_pos", "=", "i", "\n", "break", "\n", "", "", "seq", "=", "seq", "[", "1", ":", "eos_pos", "]", "\n", "return", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.init_metrics": [[403, 409], ["erniekit.utils.multi_process_eval.MultiNodeWriter", "erniekit.metrics.gen_eval.GenerationEval", "ernie_infilling_generation.ErnieInfillingGeneration.writer.init_writer", "str", "meta_info.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiNodeWriter.init_writer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "init_metrics", "(", "self", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"init output file for metric\"\"\"", "\n", "self", ".", "writer", "=", "MultiNodeWriter", "(", "self", ".", "output_path", ",", "self", ".", "dev_count", ",", "self", ".", "gpu_id", ")", "\n", "self", ".", "eval", "=", "GenerationEval", "(", "self", ".", "tokenizer", ")", "\n", "if", "self", ".", "do_dec", "and", "phase", "!=", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "self", ".", "writer", ".", "init_writer", "(", "phase", "+", "\"_\"", "+", "str", "(", "meta_info", ".", "get", "(", "\"stage\"", ",", "\"\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.add_metric_result": [[410, 445], ["numpy.array().reshape().tolist", "zip", "ernie_infilling_generation.ErnieInfillingGeneration.writer.write_result_list", "range", "isinstance", "numpy.array().reshape", "range", "ernie_infilling_generation.ErnieInfillingGeneration.merge_subword", "pred_list.append", "len", "numpy.array", "seq_ids.lod", "seq_ids.lod", "ernie_infilling_generation.ErnieInfillingGeneration.inv_vocab.get", "numpy.array", "seq_ids.lod", "seq_ids.lod", "seq_ids.lod", "str", "ernie_infilling_generation.ErnieInfillingGeneration._post_process_seq", "math.pow", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiNodeWriter.write_result_list", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.FullTokenizer.merge_subword", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration._post_process_seq"], ["", "", "def", "add_metric_result", "(", "self", ",", "forward_output_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"write batch result\"\"\"", "\n", "if", "self", ".", "do_dec", "and", "phase", "!=", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "pred_list", "=", "[", "]", "\n", "seq_ids", "=", "forward_output_dict", "[", "\"finished_ids\"", "]", "\n", "seq_scores", "=", "forward_output_dict", "[", "\"finished_scores\"", "]", "\n", "data_ids", "=", "forward_output_dict", "[", "\"data_ids\"", "]", "\n", "seq_ids_list", ",", "seq_scores_list", "=", "[", "seq_ids", "]", ",", "[", "seq_scores", "]", "if", "isinstance", "(", "\n", "seq_ids", ",", "fluid", ".", "core", ".", "LoDTensor", ")", "else", "(", "seq_ids", ",", "seq_scores", ")", "\n", "data_ids", "=", "np", ".", "array", "(", "data_ids", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "data_idx", "=", "0", "\n", "for", "seq_ids", ",", "seq_scores", "in", "zip", "(", "seq_ids_list", ",", "seq_scores_list", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "seq_ids", ".", "lod", "(", ")", "[", "0", "]", ")", "-", "1", ")", ":", "\n", "                    ", "start", "=", "seq_ids", ".", "lod", "(", ")", "[", "0", "]", "[", "i", "]", "\n", "end", "=", "seq_ids", ".", "lod", "(", ")", "[", "0", "]", "[", "i", "+", "1", "]", "\n", "max_cand", "=", "None", "\n", "for", "j", "in", "range", "(", "end", "-", "start", ")", ":", "# for each candidate", "\n", "                        ", "sub_start", "=", "seq_ids", ".", "lod", "(", ")", "[", "1", "]", "[", "start", "+", "j", "]", "\n", "sub_end", "=", "seq_ids", ".", "lod", "(", ")", "[", "1", "]", "[", "start", "+", "j", "+", "1", "]", "\n", "tokens", "=", "[", "self", ".", "inv_vocab", ".", "get", "(", "str", "(", "idx", ")", ",", "\"[UNK]\"", ")", "\n", "for", "idx", "in", "self", ".", "_post_process_seq", "(", "\n", "np", ".", "array", "(", "seq_ids", ")", "[", "sub_start", ":", "sub_end", "]", ")", "\n", "]", "\n", "score", "=", "np", ".", "array", "(", "seq_scores", ")", "[", "sub_end", "-", "1", "]", "\n", "if", "self", ".", "length_penalty", ">", "0", ":", "\n", "                            ", "score", "=", "score", "/", "math", ".", "pow", "(", "(", "5", "+", "len", "(", "tokens", ")", ")", "/", "6.0", ",", "self", ".", "length_penalty", ")", "\n", "", "if", "(", "not", "max_cand", ")", "or", "score", ">", "max_cand", "[", "1", "]", ":", "\n", "                            ", "max_cand", "=", "(", "tokens", ",", "score", ")", "\n", "\n", "", "", "data_id", "=", "data_ids", "[", "data_idx", "]", "\n", "data_idx", "+=", "1", "\n", "pred", "=", "self", ".", "merge_subword", "(", "max_cand", "[", "0", "]", ")", "\n", "pred_list", ".", "append", "(", "(", "data_id", ",", "\" \"", ".", "join", "(", "pred", ")", ")", ")", "\n", "\n", "", "", "self", ".", "writer", ".", "write_result_list", "(", "pred_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.parse_predict_result": [[446, 474], ["seq_ids.tolist", "data_ids.reshape().tolist.reshape().tolist.reshape().tolist", "ernie_infilling_generation.ErnieInfillingGeneration.parse_predict_result.post_process"], "methods", ["None"], ["", "", "def", "parse_predict_result", "(", "self", ",", "predict_result", ",", "sample_list", ",", "params_dict", ")", ":", "\n", "        ", "\"\"\"parse_predict_result\n        \"\"\"", "\n", "pred_list", "=", "[", "]", "\n", "seq_ids", ",", "seq_scores", ",", "data_ids", "=", "predict_result", "\n", "batch_seq_ids", "=", "seq_ids", ".", "tolist", "(", ")", "\n", "def", "post_process", "(", "seq", ")", ":", "\n", "            ", "\"\"\" post_process \"\"\"", "\n", "all_tokens", "=", "[", "]", "\n", "prev", "=", "1", "\n", "eos_pos", "=", "len", "(", "seq", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "seq", ")", ":", "\n", "                ", "if", "idx", "==", "self", ".", "eos_idx", ":", "\n", "                    ", "eos_pos", "=", "i", "\n", "tmp", "=", "seq", "[", "prev", ":", "eos_pos", "]", "\n", "all_tokens", ".", "append", "(", "[", "self", ".", "inv_vocab", ".", "get", "(", "str", "(", "idx", ")", ",", "\"[UNK]\"", ")", "\n", "for", "idx", "in", "tmp", "]", ")", "\n", "prev", "=", "i", "+", "2", "\n", "", "", "return", "all_tokens", "\n", "\n", "", "data_ids", "=", "data_ids", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")", "\n", "data_idx", "=", "0", "\n", "\n", "tokens", "=", "post_process", "(", "batch_seq_ids", ")", "\n", "#  \u53d6beam_size\u7684\u7b2c\u4e00\u4e2a", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "tokens", ")", ",", "self", ".", "beam_size", ")", ":", "\n", "            ", "pred_list", ".", "append", "(", "tokens", "[", "i", "]", ")", "\n", "", "return", "pred_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.get_metrics": [[475, 511], ["numpy.mean", "numpy.exp", "logging.info", "numpy.mean", "logging.info", "ernie_infilling_generation.ErnieInfillingGeneration.writer.finalize_writer", "logging.warning", "ernie_infilling_generation.ErnieInfillingGeneration.writer.finalize_writer", "loss_list.append", "numpy.array", "meta_info.get", "ernie_infilling_generation.ErnieInfillingGeneration.eval.eval", "numpy.mean", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiNodeWriter.finalize_writer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiNodeWriter.finalize_writer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval"], ["", "def", "get_metrics", "(", "self", ",", "forward_output_dict", ",", "meta_info", ",", "phase", ",", "reader", ")", ":", "\n", "        ", "\"\"\"get metrics\"\"\"", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "# add normal log", "\n", "            ", "loss", "=", "np", ".", "mean", "(", "forward_output_dict", "[", "InstanceName", ".", "LOSS", "]", ")", "\n", "ppl", "=", "np", ".", "exp", "(", "loss", ")", "\n", "log_info", "=", "\"step: %d, loss: %.6f, ppl: %.3f, speed: %.3f steps/s\"", "\n", "values", "=", "(", "meta_info", "[", "InstanceName", ".", "STEP", "]", ",", "loss", ",", "ppl", ",", "meta_info", "[", "\"speed\"", "]", ")", "\n", "logging", ".", "info", "(", "log_info", "%", "values", ")", "\n", "\n", "", "elif", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", "or", "phase", "==", "\"predict\"", ":", "\n", "            ", "if", "self", ".", "do_dec", ":", "\n", "                ", "if", "self", ".", "use_multi_node_test", ":", "\n", "                    ", "self", ".", "writer", ".", "finalize_writer", "(", "remove_sort_key", "=", "False", ")", "\n", "logging", ".", "warning", "(", "\"Eval is not supported when use multi node test\"", ")", "\n", "if", "self", ".", "gpu_id", "==", "0", ":", "\n", "                        ", "eval_res", "=", "\"Decoding is done \"", "\n", "", "", "else", ":", "\n", "                    ", "outfile", "=", "self", ".", "writer", ".", "finalize_writer", "(", ")", "\n", "if", "self", ".", "gpu_id", "==", "0", ":", "\n", "                        ", "eval_res", "=", "self", ".", "eval", ".", "eval", "(", "outfile", ",", "phase", ",", "reader", ".", "features", "[", "phase", "]", ")", "\n", "", "", "", "else", ":", "\n", "                ", "loss_list", "=", "[", "]", "\n", "loss", "=", "forward_output_dict", "[", "InstanceName", ".", "LOSS", "]", "\n", "for", "l", "in", "loss", ":", "\n", "                    ", "loss_list", ".", "append", "(", "np", ".", "mean", "(", "l", ")", ")", "\n", "", "mean_loss", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "loss_list", ")", ")", "\n", "eval_res", "=", "\"loss: %.3f, ppl: %.3f\"", "%", "(", "mean_loss", ",", "np", ".", "exp", "(", "mean_loss", ")", ")", "\n", "\n", "", "if", "self", ".", "gpu_id", "==", "0", ":", "\n", "                ", "log_info", "=", "\"[%s_%s evaluation] %s, elapsed time: %f s\"", "\n", "values", "=", "(", "meta_info", ".", "get", "(", "\"stage\"", ",", "\"infer\"", ")", ",", "phase", ",", "eval_res", ",", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", ")", "\n", "logging", ".", "info", "(", "log_info", "%", "values", ")", "\n", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.set_optimizer": [[512, 550], ["ernie_infilling_generation.ErnieInfillingGeneration.model_params.get", "ernie_infilling_generation.ErnieInfillingGeneration.get", "ernie_infilling_generation.ErnieInfillingGeneration.get", "ernie_infilling_generation.ErnieInfillingGeneration.get", "ernie_infilling_generation.ErnieInfillingGeneration.get", "ernie_infilling_generation.ErnieInfillingGeneration.get", "paddle.nn.ClipGradByGlobalNorm", "re.compile", "ernie_infilling_generation.ErnieInfillingGeneration.get", "ernie_infilling_generation.ErnieInfillingGeneration.get", "erniekit.modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "ernie_infilling_generation.ErnieInfillingGeneration.parameters", "re.compile.match", "re.compile.match"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "self", ".", "use_default_decay", "=", "opt_param", ".", "get", "(", "\"use_default_decay\"", ",", "False", ")", "\n", "self", ".", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "False", ")", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-6", ")", "\n", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "1.0", ")", "\n", "\n", "param_name_to_exclue_from_weight_decay", "=", "re", ".", "compile", "(", "r'.*layer_norm_scale|.*layer_norm_bias|.*b_0'", ")", "\n", "\n", "if", "self", ".", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "parameters", "=", "self", ".", "parameters", "(", ")", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "return", "self", ".", "optimizer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_ie_many_to_many.ErnieFcIe.__init__": [[25, 27], ["erniekit.model.model.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_ie_many_to_many.ErnieFcIe.structure": [[28, 49], ["ernie_fc_ie_many_to_many.ErnieFcIe.model_params.get", "ernie_fc_ie_many_to_many.ErnieFcIe.model_params.get", "ernie_fc_ie_many_to_many.ErnieFcIe.get", "erniekit.modules.ernie_config.ErnieConfig", "erniekit.modules.ernie.ErnieModel", "paddle.nn.initializer.TruncatedNormal", "paddle.nn.Dropout", "paddle.nn.Linear", "paddle.ParamAttr"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "num_labels", "=", "self", ".", "model_params", ".", "get", "(", "'num_labels'", ",", "12", ")", "\n", "emb_params", "=", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", "\n", "# use_fp16 = emb_params.get(\"use_fp16\")", "\n", "\n", "config_path", "=", "emb_params", ".", "get", "(", "\"config_path\"", ")", "\n", "self", ".", "cfg_dict", "=", "ErnieConfig", "(", "config_path", ")", "\n", "self", ".", "hid_dim", "=", "self", ".", "cfg_dict", "[", "'hidden_size'", "]", "\n", "\n", "self", ".", "ernie_model", "=", "ErnieModel", "(", "self", ".", "cfg_dict", ",", "name", "=", "''", ")", "\n", "initializer", "=", "paddle", ".", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "0.02", ")", "\n", "self", ".", "dropout", "=", "paddle", ".", "nn", ".", "Dropout", "(", "p", "=", "0.1", ",", "mode", "=", "\"upscale_in_train\"", ")", "\n", "\n", "self", ".", "fc_prediction", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "num_labels", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "'cls_ie_out.w_0'", ",", "\n", "initializer", "=", "initializer", ")", ",", "\n", "bias_attr", "=", "'cls_ie_out.b_0'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_ie_many_to_many.ErnieFcIe.forward": [[50, 114], ["ernie_fc_ie_many_to_many.ErnieFcIe.ernie_model", "ernie_fc_ie_many_to_many.ErnieFcIe.dropout", "ernie_fc_ie_many_to_many.ErnieFcIe.fc_prediction", "paddle.nn.functional.sigmoid", "paddle.flatten", "paddle.flatten", "paddle.flatten", "paddle.nn.functional.binary_cross_entropy_with_logits", "paddle.mean", "paddle.flatten", "paddle.mean", "ernie_fc_ie_many_to_many.ErnieFcIe.cfg_dict.get", "target_feed_list.append", "target_feed_name_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\u524d\u5411\u8ba1\u7b97\u7ec4\u7f51\u90e8\u5206\uff0c\u5fc5\u987b\u7531\u5b50\u7c7b\u5b9e\u73b0\n        :return: loss , fetch_list\n        \"\"\"", "\n", "\n", "instance_text", "=", "fields_dict", "[", "\"text_a\"", "]", "\n", "record_id_text", "=", "instance_text", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_a_src", "=", "record_id_text", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "text_a_sent", "=", "record_id_text", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "text_a_mask", "=", "record_id_text", "[", "InstanceName", ".", "MASK_IDS", "]", "\n", "text_a_task", "=", "record_id_text", "[", "InstanceName", ".", "TASK_IDS", "]", "\n", "## \u6bd4\u5982bs\u4e3a2\uff0c\u957f\u5ea6\u5206\u522b\u4e3a20\uff0c40\uff0c\u90a3\u4e48seq_len_text_a = [20,40]  shape:[2]", "\n", "text_a_seq_lens", "=", "record_id_text", "[", "InstanceName", ".", "SEQ_LENS", "]", "\n", "text_a_beg_ids", "=", "record_id_text", "[", "InstanceName", ".", "BEG_IDS", "]", "\n", "text_a_end_ids", "=", "record_id_text", "[", "InstanceName", ".", "END_IDS", "]", "\n", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "# [batch_size, max_seq_len,num_lables]", "\n", "labels", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "\n", "# cls_embedding = [batch_size, hidden_size], tokens_embedding = [batch_size, max_seq_len, hidden_size]", "\n", "cls_embedding", ",", "tokens_embedding", "=", "self", ".", "ernie_model", "(", "src_ids", "=", "text_a_src", ",", "sent_ids", "=", "text_a_sent", ",", "\n", "task_ids", "=", "text_a_task", ")", "\n", "\n", "emb_text_a", "=", "self", ".", "dropout", "(", "tokens_embedding", ")", "\n", "\n", "logits", "=", "self", ".", "fc_prediction", "(", "emb_text_a", ")", "\n", "\n", "predictions", "=", "paddle", ".", "nn", ".", "functional", ".", "sigmoid", "(", "logits", ")", "\n", "\n", "predictions", "=", "paddle", ".", "flatten", "(", "predictions", ",", "stop_axis", "=", "1", ")", "\n", "\n", "labels", "=", "paddle", ".", "flatten", "(", "labels", ",", "stop_axis", "=", "1", ")", "\n", "\n", "logits", "=", "paddle", ".", "flatten", "(", "logits", ",", "stop_axis", "=", "1", ")", "\n", "\n", "ce_loss", "=", "paddle", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "logits", ",", "labels", ")", "\n", "ce_loss", "=", "paddle", ".", "mean", "(", "ce_loss", ",", "axis", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "mask_ids", "=", "paddle", ".", "flatten", "(", "text_a_mask", ",", "stop_axis", "=", "1", ")", "\n", "#mask_ids\u662f\u53bb\u9664padding\u90e8\u5206\u7684loss", "\n", "ce_loss", "=", "ce_loss", "*", "mask_ids", "\n", "loss", "=", "paddle", ".", "mean", "(", "ce_loss", ")", "\n", "if", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "            ", "target_predict_list", "=", "[", "predictions", "]", "\n", "target_feed_list", "=", "[", "text_a_src", ",", "text_a_sent", "]", "\n", "target_feed_name_list", "=", "[", "\"text_a#src_ids\"", ",", "\"text_a#sent_ids\"", "]", "##\u5206\u9694\u7b26\u540e\u9075\u5faarule\u4e2d\u5b9a\u4e49", "\n", "if", "self", ".", "cfg_dict", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_a_task", ")", "\n", "target_feed_name_list", ".", "append", "(", "\"text_a#task_ids\"", ")", "\n", "\n", "", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "predictions", ",", "# [batch_size * max_seq_len,num_labels]", "\n", "InstanceName", ".", "LABEL", ":", "labels", ",", "# [batch_size * max_seq_len,num_labels]", "\n", "InstanceName", ".", "LOSS", ":", "loss", ",", "\n", "InstanceName", ".", "SEQ_LENS", ":", "text_a_seq_lens", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_ie_many_to_many.ErnieFcIe.set_optimizer": [[115, 154], ["ernie_fc_ie_many_to_many.ErnieFcIe.model_params.get", "ernie_fc_ie_many_to_many.ErnieFcIe.get", "ernie_fc_ie_many_to_many.ErnieFcIe.get", "ernie_fc_ie_many_to_many.ErnieFcIe.get", "ernie_fc_ie_many_to_many.ErnieFcIe.get", "paddle.nn.ClipGradByGlobalNorm", "re.compile", "ernie_fc_ie_many_to_many.ErnieFcIe.parameters", "ernie_fc_ie_many_to_many.ErnieFcIe.get", "ernie_fc_ie_many_to_many.ErnieFcIe.get", "erniekit.modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "re.compile.match", "re.compile.match"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "False", ")", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-6", ")", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "1.0", ")", "\n", "param_name_to_exclue_from_weight_decay", "=", "re", ".", "compile", "(", "r'.*layer_norm_scale|.*layer_norm_bias|.*b_0'", ")", "\n", "\n", "parameters", "=", "None", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "parameters", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_ie_many_to_many.ErnieFcIe._post_proc": [[155, 176], ["numpy.where", "range", "range", "numpy.sum", "numpy.sum", "numpy.argmax"], "methods", ["None"], ["", "def", "_post_proc", "(", "self", ",", "sample_probs", ")", ":", "\n", "        ", "\"\"\"\n        post proc\n        \"\"\"", "\n", "sample_probs", "=", "np", ".", "where", "(", "sample_probs", "<", "0.5", ",", "0", ",", "1", ")", "\n", "length", ",", "_", "=", "sample_probs", ".", "shape", "\n", "\n", "for", "i", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "            ", "if", "sample_probs", "[", "i", "]", "[", "0", "]", "==", "1", "and", "np", ".", "sum", "(", "sample_probs", "[", "i", "]", ")", ">", "1", ":", "\n", "                ", "if", "sample_probs", "[", "i", "+", "1", "]", "[", "1", "]", "==", "1", ":", "\n", "                    ", "sample_probs", "[", "i", "]", "[", "0", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "sample_probs", "[", "i", "]", "[", "2", ":", "]", "=", "0", "\n", "\n", "", "", "", "for", "i", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "sample_probs", "[", "i", "]", ")", "==", "0", ":", "\n", "                ", "if", "sample_probs", "[", "i", "-", "1", "]", "[", "1", "]", "==", "1", "and", "sample_probs", "[", "i", "+", "1", "]", "[", "1", "]", "==", "1", ":", "\n", "                    ", "sample_probs", "[", "i", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "sample_probs", "[", "i", "+", "1", "]", "[", "1", "]", "==", "1", ":", "\n", "                    ", "sample_probs", "[", "i", "]", "[", "np", ".", "argmax", "(", "sample_probs", "[", "i", ",", "1", ":", "]", ")", "+", "1", "]", "=", "1", "\n", "", "", "", "return", "sample_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_ie_many_to_many.ErnieFcIe.get_metrics": [[178, 268], ["collections.OrderedDict", "isinstance", "isinstance", "isinstance", "isinstance", "range", "logging.debug", "zip", "logging.debug", "predictions.numpy.numpy.numpy", "labels.numpy.numpy.numpy", "seq_lens.numpy.numpy.numpy", "loss.numpy.numpy.numpy", "ernie_fc_ie_many_to_many.ErnieFcIe._post_proc", "zip", "range", "item.numpy", "item.numpy", "item.numpy", "item.numpy", "round", "round", "round", "ernie_fc_ie_many_to_many.ErnieFcIe._post_proc", "zip", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer._post_proc", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer._post_proc"], ["", "def", "get_metrics", "(", "self", ",", "forward_return_dict", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        get metrics\n        \"\"\"", "\n", "labels", "=", "forward_return_dict", "[", "InstanceName", ".", "LABEL", "]", "\n", "predictions", "=", "forward_return_dict", "[", "InstanceName", ".", "PREDICT_RESULT", "]", "\n", "seq_lens", "=", "forward_return_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "\n", "loss", "=", "forward_return_dict", "[", "InstanceName", ".", "LOSS", "]", "\n", "\n", "# step = meta_info[InstanceName.STEP]", "\n", "# time_cost = meta_info[InstanceName.TIME_COST]", "\n", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "if", "isinstance", "(", "predictions", ",", "list", ")", ":", "\n", "                ", "predictions", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "predictions", "]", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "predictions", ".", "numpy", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "labels", ",", "list", ")", ":", "\n", "                ", "labels", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "labels", "]", "\n", "", "else", ":", "\n", "                ", "labels", "=", "labels", ".", "numpy", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "seq_lens", ",", "list", ")", ":", "\n", "                ", "seq_lens", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "seq_lens", "]", "\n", "", "else", ":", "\n", "                ", "seq_lens", "=", "seq_lens", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "loss", ",", "list", ")", ":", "\n", "                ", "loss", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "loss", "]", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss", ".", "numpy", "(", ")", "\n", "\n", "", "", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "tp", "=", "0", "\n", "tp_fp", "=", "0", "\n", "tp_fn", "=", "0", "\n", "max_seq_len", "=", "labels", ".", "shape", "[", "0", "]", "//", "seq_lens", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "seq_lens", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "sample_labels", "=", "labels", "[", "max_seq_len", "*", "i", ":", "max_seq_len", "*", "i", "+", "seq_lens", "[", "i", "]", "]", "\n", "sample_probs", "=", "predictions", "[", "max_seq_len", "*", "i", ":", "max_seq_len", "*", "i", "+", "seq_lens", "[", "i", "]", "]", "\n", "sample_probs", "=", "self", ".", "_post_proc", "(", "sample_probs", ")", "\n", "for", "token_labels", ",", "token_probs", "in", "zip", "(", "sample_labels", ",", "sample_probs", ")", ":", "\n", "                    ", "if", "(", "token_labels", "==", "token_probs", ")", ".", "all", "(", ")", "and", "token_labels", "[", "0", "]", "!=", "1", ":", "\n", "                        ", "tp", "+=", "1", "\n", "", "if", "token_probs", "[", "0", "]", "!=", "1", ":", "\n", "                        ", "tp_fp", "+=", "1", "\n", "", "if", "token_labels", "[", "0", "]", "!=", "1", ":", "\n", "                        ", "tp_fn", "+=", "1", "\n", "", "", "", "precision", "=", "1.0", "*", "tp", "/", "tp_fp", "if", "tp_fp", "!=", "0", "else", "0", "\n", "recall", "=", "1.0", "*", "tp", "/", "tp_fn", "if", "tp_fn", "!=", "0", "else", "0", "\n", "f1", "=", "2.0", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "if", "precision", "+", "recall", "!=", "0", "else", "0", "\n", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "logging", ".", "debug", "(", "\"phase = {0} precision = {1} recall = {2} f1 = {3} step = {4}\\\n            time_cost = {5} loss = {6}\"", ".", "format", "(", "phase", ",", "round", "(", "precision", ",", "3", ")", ",", "round", "\n", "(", "recall", ",", "3", ")", ",", "round", "(", "f1", ",", "3", ")", ",", "step", ",", "time_cost", ",", "loss", ")", ")", "\n", "", "if", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "tp", "=", "0", "\n", "tp_fp", "=", "0", "\n", "tp_fn", "=", "0", "\n", "\n", "for", "predictions", ",", "labels", ",", "seq_lens", "in", "zip", "(", "predictions", ",", "labels", ",", "seq_lens", ")", ":", "\n", "\n", "                ", "max_seq_len", "=", "labels", ".", "shape", "[", "0", "]", "//", "seq_lens", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "seq_lens", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "sample_labels", "=", "labels", "[", "max_seq_len", "*", "i", ":", "max_seq_len", "*", "i", "+", "seq_lens", "[", "i", "]", "]", "\n", "sample_probs", "=", "predictions", "[", "max_seq_len", "*", "i", ":", "max_seq_len", "*", "i", "+", "seq_lens", "[", "i", "]", "]", "\n", "sample_probs", "=", "self", ".", "_post_proc", "(", "sample_probs", ")", "\n", "for", "token_labels", ",", "token_probs", "in", "zip", "(", "sample_labels", ",", "sample_probs", ")", ":", "\n", "                        ", "if", "(", "token_labels", "==", "token_probs", ")", ".", "all", "(", ")", "and", "token_labels", "[", "0", "]", "!=", "1", ":", "\n", "                            ", "tp", "+=", "1", "\n", "", "if", "token_probs", "[", "0", "]", "!=", "1", ":", "\n", "                            ", "tp_fp", "+=", "1", "\n", "", "if", "token_labels", "[", "0", "]", "!=", "1", ":", "\n", "                            ", "tp_fn", "+=", "1", "\n", "", "", "", "", "precision", "=", "1.0", "*", "tp", "/", "tp_fp", "if", "tp_fp", "!=", "0", "else", "0", "\n", "recall", "=", "1.0", "*", "tp", "/", "tp_fn", "if", "tp_fn", "!=", "0", "else", "0", "\n", "f1", "=", "2.0", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "if", "precision", "+", "recall", "!=", "0", "else", "0", "\n", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "logging", ".", "debug", "(", "\"phase = {0} precision = {1} recall = {2} f1 = {3} time_cost = {4}\"", ".", "format", "(", "\n", "phase", ",", "round", "(", "precision", ",", "3", ")", ",", "round", "(", "recall", ",", "3", ")", ",", "round", "(", "f1", ",", "3", ")", ",", "time_cost", ")", ")", "\n", "\n", "", "metrics_return_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "metrics_return_dict", "[", "\"precision\"", "]", "=", "precision", "\n", "metrics_return_dict", "[", "\"recall\"", "]", "=", "recall", "\n", "metrics_return_dict", "[", "\"f1\"", "]", "=", "f1", "\n", "return", "metrics_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_ie_many_to_many.ErnieFcIe.metrics_show": [[269, 274], ["None"], "methods", ["None"], ["", "def", "metrics_show", "(", "self", ",", "result_evaluate", ")", ":", "\n", "        ", "\"\"\"\n        metrics show\n        \"\"\"", "\n", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_cls.BaseClassification.__init__": [[20, 24], ["erniekit.model.model.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_cls.BaseClassification.structure": [[25, 30], ["None"], "methods", ["None"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_cls.BaseClassification.forward": [[31, 38], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\" \u524d\u5411\u8ba1\u7b97\n        :param fields_dict:\n        :param phase:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_cls.BaseClassification.set_optimizer": [[39, 50], ["base_cls.BaseClassification.model_params.get", "paddle.optimizer.Adam", "base_cls.BaseClassification.get", "base_cls.BaseClassification.parameters"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u4f18\u5316\u5668\u8bbe\u7f6e\n        :return: optimizer\n        \"\"\"", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "if", "opt_param", ":", "\n", "            ", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "'learning_rate'", ",", "2e-5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr", "=", "2e-5", "\n", "", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "Adam", "(", "learning_rate", "=", "self", ".", "lr", ",", "parameters", "=", "self", ".", "parameters", "(", ")", ")", "\n", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_cls.BaseClassification.get_metrics": [[51, 99], ["erniekit.metrics.metrics.Acc", "erniekit.metrics.metrics.Acc.eval", "erniekit.metrics.metrics.Precision", "erniekit.metrics.metrics.Precision.eval", "collections.OrderedDict", "isinstance", "isinstance", "isinstance", "logging.info", "logging.info", "predictions.numpy.numpy.numpy", "label.numpy.numpy.numpy", "loss.numpy", "numpy.mean", "numpy.mean", "item.numpy", "item.numpy", "round", "round"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval"], ["", "def", "get_metrics", "(", "self", ",", "forward_return_dict", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        :param forward_return_dict: \u524d\u5411\u8ba1\u7b97\u5f97\u51fa\u7684\u7ed3\u679c\n        :param meta_info: \u5e38\u7528\u7684meta\u4fe1\u606f\uff0c\u5982step, used_time, gpu_id\u7b49\n        :param phase: \u5f53\u524d\u8c03\u7528\u7684\u9636\u6bb5\uff0c\u5305\u542b\u8bad\u7ec3\u548c\u8bc4\u4f30\n        :return:\n        \"\"\"", "\n", "predictions", "=", "forward_return_dict", "[", "InstanceName", ".", "PREDICT_RESULT", "]", "\n", "label", "=", "forward_return_dict", "[", "InstanceName", ".", "LABEL", "]", "\n", "# paddle_acc = forward_return_dict[\"acc\"]", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "if", "isinstance", "(", "predictions", ",", "list", ")", ":", "\n", "                ", "predictions", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "predictions", "]", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "predictions", ".", "numpy", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "                ", "label", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "label", "]", "\n", "", "else", ":", "\n", "                ", "label", "=", "label", ".", "numpy", "(", ")", "\n", "\n", "", "", "metrics_acc", "=", "metrics", ".", "Acc", "(", ")", "\n", "acc", "=", "metrics_acc", ".", "eval", "(", "[", "predictions", ",", "label", "]", ")", "\n", "metrics_pres", "=", "metrics", ".", "Precision", "(", ")", "\n", "precision", "=", "metrics_pres", ".", "eval", "(", "[", "predictions", ",", "label", "]", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "loss", "=", "forward_return_dict", "[", "InstanceName", ".", "LOSS", "]", "\n", "if", "isinstance", "(", "loss", ",", "paddle", ".", "Tensor", ")", ":", "\n", "                ", "loss_np", "=", "loss", ".", "numpy", "(", ")", "\n", "mean_loss", "=", "np", ".", "mean", "(", "loss_np", ")", "\n", "", "else", ":", "\n", "                ", "mean_loss", "=", "np", ".", "mean", "(", "loss", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"phase = {0} loss = {1} acc = {2} precision = {3} step = {4} time_cost = {5}\"", ".", "format", "(", "\n", "phase", ",", "mean_loss", ",", "acc", ",", "precision", ",", "step", ",", "round", "(", "time_cost", ",", "4", ")", ")", ")", "\n", "", "if", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "logging", ".", "info", "(", "\"phase = {0} acc = {1} precision = {2} time_cost = {3} step = {4}\"", ".", "format", "(", "\n", "phase", ",", "acc", ",", "precision", ",", "round", "(", "time_cost", ",", "4", ")", ",", "step", ")", ")", "\n", "\n", "", "metrics_return_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "metrics_return_dict", "[", "\"acc\"", "]", "=", "acc", "\n", "metrics_return_dict", "[", "\"precision\"", "]", "=", "precision", "\n", "return", "metrics_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_cls.BaseClassification.fields_process": [[100, 106], ["None"], "methods", ["None"], ["", "def", "fields_process", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        \u5bf9fields_dict\u4e2d\u5e8f\u5217\u5316\u597d\u7684id\u6309\u9700\u505a\u4e8c\u6b21\u5904\u7406\u3002\n        :return: \u5904\u7406\u597d\u7684fields\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.multi_label_classification.MultiLabelClassification.__init__": [[25, 31], ["erniekit.model.model.BaseModel.__init__", "multi_label_classification.MultiLabelClassification.model_params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "# \u89e3\u6790config\u914d\u7f6e", "\n", "self", ".", "num_labels", "=", "self", ".", "model_params", ".", "get", "(", "'num_labels'", ",", "2", ")", "\n", "# self.hid_dim = 768", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.multi_label_classification.MultiLabelClassification.structure": [[33, 48], ["multi_label_classification.MultiLabelClassification.model_params.get", "multi_label_classification.MultiLabelClassification.get", "erniekit.modules.ernie_config.ErnieConfig", "erniekit.modules.ernie.ErnieModel", "paddle.nn.initializer.TruncatedNormal", "paddle.nn.Dropout", "paddle.nn.Linear", "paddle.nn.Sigmoid", "paddle.ParamAttr"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "emb_params", "=", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", "\n", "config_path", "=", "emb_params", ".", "get", "(", "\"config_path\"", ")", "\n", "self", ".", "cfg_dict", "=", "ErnieConfig", "(", "config_path", ")", "\n", "self", ".", "hid_dim", "=", "self", ".", "cfg_dict", "[", "'hidden_size'", "]", "\n", "self", ".", "ernie_model", "=", "ErnieModel", "(", "self", ".", "cfg_dict", ",", "name", "=", "''", ")", "\n", "initializer", "=", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "0.02", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.1", ")", "\n", "self", ".", "fc_layer", "=", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "num_labels", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "'cls.w_0'", ",", "initializer", "=", "initializer", ")", ",", "\n", "bias_attr", "=", "'cls.b_0'", ")", "\n", "self", ".", "prediction", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.multi_label_classification.MultiLabelClassification.forward": [[49, 108], ["multi_label_classification.MultiLabelClassification.fields_process", "multi_label_classification.MultiLabelClassification.ernie_model", "multi_label_classification.MultiLabelClassification.dropout", "multi_label_classification.MultiLabelClassification.fc_layer", "multi_label_classification.MultiLabelClassification.prediction", "paddle.nn.functional.binary_cross_entropy_with_logits", "multi_label_classification.MultiLabelClassification.cfg_dict.get", "target_feed_list.append", "target_feed_name_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.fields_process", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\" \u524d\u5411\u8ba1\u7b97\n        :param fields_dict:\n        :param phase:\n        :return:\n        \"\"\"", "\n", "fields_dict", "=", "self", ".", "fields_process", "(", "fields_dict", ",", "phase", ")", "\n", "instance_text_a", "=", "fields_dict", "[", "\"text_a\"", "]", "\n", "record_id_text_a", "=", "instance_text_a", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_a_src", "=", "record_id_text_a", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "text_a_sent", "=", "record_id_text_a", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "text_a_mask", "=", "record_id_text_a", "[", "InstanceName", ".", "MASK_IDS", "]", "\n", "text_a_task", "=", "record_id_text_a", "[", "InstanceName", ".", "TASK_IDS", "]", "\n", "\n", "cls_embedding", ",", "tokens_embedding", "=", "self", ".", "ernie_model", "(", "src_ids", "=", "text_a_src", ",", "sent_ids", "=", "text_a_sent", ",", "\n", "task_ids", "=", "text_a_task", ")", "\n", "cls_embedding", "=", "self", ".", "dropout", "(", "cls_embedding", ")", "\n", "fc_output", "=", "self", ".", "fc_layer", "(", "cls_embedding", ")", "\n", "probs", "=", "self", ".", "prediction", "(", "fc_output", ")", "\n", "# probs = nn.functional.softmax(prediction)", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", "or", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "\"train, evaluate, test\"", "\n", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "# cost = self.loss(probs, label)", "\n", "cost", "=", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "fc_output", ",", "label", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ")", "\n", "# tips\uff1a\u8bad\u7ec3\u6a21\u5f0f\u4e0b\uff0c\u4e00\u5b9a\u8981\u8fd4\u56deloss", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "probs", ",", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "LOSS", ":", "cost", "\n", "}", "\n", "\n", "return", "forward_return_dict", "\n", "\n", "", "elif", "phase", "==", "InstanceName", ".", "INFERENCE", ":", "\n", "            ", "\"infer data with dynamic graph\"", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "probs", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "elif", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "            ", "\"save inference model with jit\"", "\n", "target_predict_list", "=", "[", "probs", "]", "\n", "target_feed_list", "=", "[", "text_a_src", ",", "text_a_sent", "]", "\n", "# \u4ee5json\u7684\u5f62\u5f0f\u5b58\u5165\u6a21\u578b\u7684meta\u6587\u4ef6\u4e2d\uff0c\u5728\u79bb\u7ebf\u9884\u6d4b\u7684\u65f6\u5019\u7528\uff0cfield_name#field_tensor_name", "\n", "target_feed_name_list", "=", "[", "\"text_a#src_ids\"", ",", "\"text_a#sent_ids\"", "]", "\n", "if", "self", ".", "cfg_dict", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_a_task", ")", "\n", "target_feed_name_list", ".", "append", "(", "\"text_a#task_ids\"", ")", "\n", "", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.multi_label_classification.MultiLabelClassification.set_optimizer": [[109, 151], ["multi_label_classification.MultiLabelClassification.model_params.get", "multi_label_classification.MultiLabelClassification.get", "multi_label_classification.MultiLabelClassification.get", "multi_label_classification.MultiLabelClassification.get", "multi_label_classification.MultiLabelClassification.get", "paddle.nn.ClipGradByGlobalNorm", "re.compile", "multi_label_classification.MultiLabelClassification.parameters", "multi_label_classification.MultiLabelClassification.get", "multi_label_classification.MultiLabelClassification.get", "erniekit.modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "re.compile.match", "re.compile.match"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "False", ")", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-6", ")", "\n", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "1.0", ")", "\n", "\n", "param_name_to_exclue_from_weight_decay", "=", "re", ".", "compile", "(", "r'.*layer_norm_scale|.*layer_norm_bias|.*b_0'", ")", "\n", "\n", "parameters", "=", "None", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "parameters", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.multi_label_classification.MultiLabelClassification.get_metrics": [[152, 200], ["numpy.concatenate().astype", "numpy.where", "numpy.reshape", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "round", "round", "round", "collections.OrderedDict", "isinstance", "numpy.concatenate().astype", "logging.debug", "logging.debug", "numpy.concatenate", "labels.numpy.numpy.numpy", "item.numpy", "numpy.concatenate"], "methods", ["None"], ["", "def", "get_metrics", "(", "self", ",", "forward_return_dict", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\u6a21\u578b\u6548\u679c\u8bc4\u4f30\n        :param forward_return_dict: \u524d\u5411\u8ba1\u7b97\u5f97\u51fa\u7684\u7ed3\u679c\n        :param meta_info: \u5e38\u7528\u7684meta\u4fe1\u606f\uff0c\u5982step, used_time, gpu_id\u7b49\n        :param phase: \u5f53\u524d\u8c03\u7528\u7684\u9636\u6bb5\uff0c\u5305\u542b\u8bad\u7ec3\u548c\u8bc4\u4f30\n        :return:\n        \"\"\"", "\n", "predictions", "=", "forward_return_dict", "[", "InstanceName", ".", "PREDICT_RESULT", "]", "\n", "labels", "=", "forward_return_dict", "[", "InstanceName", ".", "LABEL", "]", "\n", "predictions", "=", "np", ".", "concatenate", "(", "predictions", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "scores", "=", "np", ".", "where", "(", "predictions", ">", "0.5", ",", "1.0", ",", "0.0", ")", "\n", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "if", "isinstance", "(", "labels", ",", "list", ")", ":", "\n", "                ", "labels", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "labels", "]", "\n", "", "else", ":", "\n", "                ", "labels", "=", "labels", ".", "numpy", "(", ")", "\n", "\n", "", "", "if", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "scores", "=", "np", ".", "reshape", "(", "scores", ",", "labels", ".", "shape", ")", "\n", "\n", "macro_prec", "=", "precision_score", "(", "labels", ",", "scores", ",", "average", "=", "\"macro\"", ")", "\n", "macro_recall", "=", "recall_score", "(", "labels", ",", "scores", ",", "average", "=", "\"macro\"", ")", "\n", "if", "macro_prec", "==", "0", "and", "macro_recall", "==", "0", ":", "\n", "            ", "macro_f1", "=", "0", "\n", "", "else", ":", "\n", "            ", "macro_f1", "=", "2", "*", "macro_prec", "*", "macro_recall", "/", "(", "macro_prec", "+", "macro_recall", ")", "\n", "\n", "", "macro_prec", "=", "round", "(", "macro_prec", ",", "4", ")", "\n", "macro_recall", "=", "round", "(", "macro_recall", ",", "4", ")", "\n", "macro_f1", "=", "round", "(", "macro_f1", ",", "4", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "logging", ".", "debug", "(", "\"phase = {0} macro-f1 = {1} macro-prec = {2} macro-recall = {3} step = {4} time_cost = {5}\"", ".", "format", "(", "phase", ",", "macro_f1", ",", "macro_prec", ",", "macro_recall", ",", "step", ",", "time_cost", ")", ")", "\n", "", "if", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "logging", ".", "debug", "(", "\"phase = {0} macro-f1 = {1} macro-prec = {2} macro-recall = {3} time_cost = {4}\"", ".", "format", "(", "\n", "phase", ",", "macro_f1", ",", "macro_prec", ",", "macro_recall", ",", "time_cost", ")", ")", "\n", "\n", "", "metrics_return_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "metrics_return_dict", "[", "\"macro-f1\"", "]", "=", "macro_f1", "\n", "metrics_return_dict", "[", "\"macro-prec\"", "]", "=", "macro_prec", "\n", "metrics_return_dict", "[", "\"macro-recall\"", "]", "=", "macro_recall", "\n", "return", "metrics_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.multi_label_classification.MultiLabelClassification.fields_process": [[201, 206], ["None"], "methods", ["None"], ["", "def", "fields_process", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\u5bf9fields\u4e2d\u5e8f\u5217\u5316\u597d\u7684id\u6309\u9700\u505a\u4e8c\u6b21\u5904\u7406\n        :return: \u5904\u7406\u597d\u7684fields\n        \"\"\"", "\n", "return", "fields_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_classification.ErnieClassification.__init__": [[20, 26], ["model.base_cls.BaseClassification.__init__", "ernie_classification.ErnieClassification.model_params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "BaseClassification", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "# \u89e3\u6790config\u914d\u7f6e", "\n", "self", ".", "num_labels", "=", "self", ".", "model_params", ".", "get", "(", "'num_labels'", ",", "2", ")", "\n", "# self.hid_dim = 768 ", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_classification.ErnieClassification.structure": [[28, 43], ["ernie_classification.ErnieClassification.model_params.get", "ernie_classification.ErnieClassification.get", "erniekit.modules.ernie_config.ErnieConfig", "erniekit.modules.ernie.ErnieModel", "paddle.nn.initializer.TruncatedNormal", "paddle.nn.Dropout", "paddle.nn.Linear", "paddle.nn.CrossEntropyLoss", "paddle.ParamAttr"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "emb_params", "=", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", "\n", "config_path", "=", "emb_params", ".", "get", "(", "\"config_path\"", ")", "\n", "self", ".", "cfg_dict", "=", "ErnieConfig", "(", "config_path", ")", "\n", "self", ".", "hid_dim", "=", "self", ".", "cfg_dict", "[", "'hidden_size'", "]", "\n", "self", ".", "ernie_model", "=", "ErnieModel", "(", "self", ".", "cfg_dict", ",", "name", "=", "''", ")", "\n", "initializer", "=", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "0.02", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "0.1", ")", "\n", "self", ".", "fc_prediction", "=", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "num_labels", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "'cls.w_0'", ",", "initializer", "=", "initializer", ")", ",", "\n", "bias_attr", "=", "'cls.b_0'", ")", "\n", "self", ".", "loss", "=", "paddle", ".", "nn", ".", "CrossEntropyLoss", "(", "use_softmax", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_classification.ErnieClassification.forward": [[44, 101], ["ernie_classification.ErnieClassification.fields_process", "ernie_classification.ErnieClassification.ernie_model", "ernie_classification.ErnieClassification.dropout", "ernie_classification.ErnieClassification.fc_prediction", "paddle.nn.functional.softmax", "ernie_classification.ErnieClassification.loss", "ernie_classification.ErnieClassification.cfg_dict.get", "target_feed_list.append", "target_feed_name_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.fields_process", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\" \u524d\u5411\u8ba1\u7b97\n        :param fields_dict:\n        :param phase:\n        :return:\n        \"\"\"", "\n", "fields_dict", "=", "self", ".", "fields_process", "(", "fields_dict", ",", "phase", ")", "\n", "instance_text_a", "=", "fields_dict", "[", "\"text_a\"", "]", "\n", "record_id_text_a", "=", "instance_text_a", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_a_src", "=", "record_id_text_a", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "text_a_sent", "=", "record_id_text_a", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "text_a_mask", "=", "record_id_text_a", "[", "InstanceName", ".", "MASK_IDS", "]", "\n", "text_a_task", "=", "record_id_text_a", "[", "InstanceName", ".", "TASK_IDS", "]", "\n", "\n", "cls_embedding", ",", "tokens_embedding", "=", "self", ".", "ernie_model", "(", "src_ids", "=", "text_a_src", ",", "\n", "sent_ids", "=", "text_a_sent", ",", "task_ids", "=", "text_a_task", ")", "\n", "cls_embedding", "=", "self", ".", "dropout", "(", "cls_embedding", ")", "\n", "prediction", "=", "self", ".", "fc_prediction", "(", "cls_embedding", ")", "\n", "probs", "=", "nn", ".", "functional", ".", "softmax", "(", "prediction", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", "or", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "\"train, evaluate, test\"", "\n", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "cost", "=", "self", ".", "loss", "(", "probs", ",", "label", ")", "\n", "# tips\uff1a\u8bad\u7ec3\u6a21\u5f0f\u4e0b\uff0c\u4e00\u5b9a\u8981\u8fd4\u56deloss", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "probs", ",", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "LOSS", ":", "cost", "\n", "}", "\n", "\n", "return", "forward_return_dict", "\n", "\n", "", "elif", "phase", "==", "InstanceName", ".", "INFERENCE", ":", "\n", "            ", "\"infer data with dynamic graph\"", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "probs", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "elif", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "            ", "\"save inference model with jit\"", "\n", "\n", "target_predict_list", "=", "[", "probs", "]", "\n", "target_feed_list", "=", "[", "text_a_src", "]", "\n", "# \u4ee5json\u7684\u5f62\u5f0f\u5b58\u5165\u6a21\u578b\u7684meta\u6587\u4ef6\u4e2d\uff0c\u5728\u79bb\u7ebf\u9884\u6d4b\u7684\u65f6\u5019\u7528\uff0cfield_name#field_tensor_name", "\n", "# target_feed_name_list = [\"text_a#src_ids\", \"text_a#sent_ids\"]", "\n", "target_feed_name_list", "=", "[", "\"text_a#src_ids\"", "]", "\n", "if", "self", ".", "cfg_dict", ".", "get", "(", "'use_sent_id'", ",", "True", ")", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_a_sent", ")", "\n", "target_feed_name_list", ".", "append", "(", "\"text_a#sent_ids\"", ")", "\n", "", "if", "self", ".", "cfg_dict", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_a_task", ")", "\n", "target_feed_name_list", ".", "append", "(", "\"text_a#task_ids\"", ")", "\n", "", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_classification.ErnieClassification.set_optimizer": [[102, 144], ["ernie_classification.ErnieClassification.model_params.get", "ernie_classification.ErnieClassification.get", "ernie_classification.ErnieClassification.get", "ernie_classification.ErnieClassification.get", "ernie_classification.ErnieClassification.get", "paddle.nn.ClipGradByGlobalNorm", "re.compile", "ernie_classification.ErnieClassification.parameters", "ernie_classification.ErnieClassification.get", "ernie_classification.ErnieClassification.get", "erniekit.modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "re.compile.match", "re.compile.match"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "False", ")", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-6", ")", "\n", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "1.0", ")", "\n", "\n", "param_name_to_exclue_from_weight_decay", "=", "re", ".", "compile", "(", "r'.*layer_norm_scale|.*layer_norm_bias|.*b_0'", ")", "\n", "\n", "parameters", "=", "None", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "parameters", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_classification.ErnieClassification.fields_process": [[145, 150], ["None"], "methods", ["None"], ["n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "return", "self", ".", "optimizer", "\n", "\n", "", "def", "fields_process", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.bow_classification.BowClassification.__init__": [[17, 21], ["erniekit.model.model.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.bow_classification.BowClassification.structure": [[22, 38], ["bow_classification.BowClassification.model_params.get", "bow_classification.BowClassification.model_params.get", "bow_classification.BowClassification.model_params.get", "bow_classification.BowClassification.model_params.get", "bow_classification.BowClassification.model_params.get", "paddle.nn.Embedding", "erniekit.modules.encoder.BoWEncoder", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\uff0c\u5b9a\u4e49\u9700\u8981\u7528\u5230\u7684\u6210\u5458\u53d8\u91cf\u5373\u53ef\n        :return: None\n        \"\"\"", "\n", "self", ".", "dict_dim", "=", "self", ".", "model_params", ".", "get", "(", "'vocab_size'", ",", "33261", ")", "\n", "self", ".", "emb_dim", "=", "self", ".", "model_params", ".", "get", "(", "'emb_dim'", ",", "128", ")", "\n", "self", ".", "hid_dim", "=", "self", ".", "model_params", ".", "get", "(", "'hid_dim'", ",", "128", ")", "\n", "self", ".", "hid_dim2", "=", "self", ".", "model_params", ".", "get", "(", "'hid_dim2'", ",", "96", ")", "\n", "self", ".", "num_labels", "=", "self", ".", "model_params", ".", "get", "(", "'num_labels'", ",", "2", ")", "\n", "\n", "self", ".", "embedding", "=", "paddle", ".", "nn", ".", "Embedding", "(", "num_embeddings", "=", "self", ".", "dict_dim", ",", "embedding_dim", "=", "self", ".", "emb_dim", ")", "\n", "self", ".", "bow_encoder", "=", "BoWEncoder", "(", "self", ".", "emb_dim", ")", "\n", "self", ".", "fc_1", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "hid_dim", ")", "\n", "self", ".", "fc_2", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "hid_dim2", ")", "\n", "self", ".", "fc_prediction", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim2", ",", "out_features", "=", "self", ".", "num_labels", ")", "\n", "self", ".", "loss", "=", "paddle", ".", "nn", ".", "CrossEntropyLoss", "(", "use_softmax", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.bow_classification.BowClassification.forward": [[39, 85], ["bow_classification.BowClassification.embedding", "bow_classification.BowClassification.bow_encoder", "paddle.tanh", "paddle.tanh", "bow_classification.BowClassification.fc_prediction", "paddle.nn.functional.softmax", "bow_classification.BowClassification.fc_1", "bow_classification.BowClassification.fc_2", "bow_classification.BowClassification.loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        :param fields_dict: \u52a8\u6001\u56fe\u6a21\u5f0f\u4e0b\u662ftensor\u683c\u5f0f\uff0c\u9759\u6001\u56fe\u6a21\u5f0f\u4e0b\u662fpython\u6570\u7ec4\n        :param phase:\n        :return:\n        \"\"\"", "\n", "instance_text_a", "=", "fields_dict", "[", "\"text_a\"", "]", "\n", "record_id_text_a", "=", "instance_text_a", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_src", "=", "record_id_text_a", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "\n", "emb_output", "=", "self", ".", "embedding", "(", "text_src", ")", "\n", "bow_output", "=", "self", ".", "bow_encoder", "(", "emb_output", ")", "\n", "# bow_output = paddle.sum(emb_output, axis=1)", "\n", "\n", "fc_1_output", "=", "paddle", ".", "tanh", "(", "self", ".", "fc_1", "(", "bow_output", ")", ")", "\n", "fc_2_output", "=", "paddle", ".", "tanh", "(", "self", ".", "fc_2", "(", "fc_1_output", ")", ")", "\n", "prediction", "=", "self", ".", "fc_prediction", "(", "fc_2_output", ")", "\n", "probs", "=", "paddle", ".", "nn", ".", "functional", ".", "softmax", "(", "prediction", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", "or", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "# label = paddle.to_tensor(label)", "\n", "cost", "=", "self", ".", "loss", "(", "probs", ",", "label", ")", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "probs", ",", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "LOSS", ":", "cost", "\n", "}", "\n", "", "elif", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "            ", "\"save inference model with jit\"", "\n", "target_predict_list", "=", "[", "probs", "]", "\n", "target_feed_list", "=", "[", "text_src", "]", "\n", "# \u4ee5json\u7684\u5f62\u5f0f\u5b58\u5165\u6a21\u578b\u7684meta\u6587\u4ef6\u4e2d\uff0c\u5728\u79bb\u7ebf\u9884\u6d4b\u7684\u65f6\u5019\u7528\uff0cfield_name#field_tensor_name", "\n", "target_feed_name_list", "=", "[", "\"text_a#src_ids\"", "]", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", "\n", "}", "\n", "", "else", ":", "\n", "            ", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "probs", "\n", "}", "\n", "", "return", "forward_return_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_sequence_label.ErnieFcSeqLabel.__init__": [[25, 38], ["erniekit.model.model.BaseModel.__init__", "ernie_fc_sequence_label.ErnieFcSeqLabel.model_params[].get", "erniekit.metrics.chunk_metrics.ChunkEvaluator", "open", "ernie_fc_sequence_label.ErnieFcSeqLabel.model_params.get", "line.strip.strip.strip", "range", "line.strip.strip.split", "str", "len", "label_map.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "self", ".", "config_path", "=", "self", ".", "model_params", "[", "\"embedding\"", "]", ".", "get", "(", "\"config_path\"", ")", "\n", "label_map", "=", "{", "}", "\n", "with", "open", "(", "self", ".", "model_params", ".", "get", "(", "\"vocab_path\"", ")", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                    ", "label_str", ",", "label_id", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "label_map", ".", "get", "(", "label_id", ")", "is", "None", ":", "\n", "                        ", "label_map", "[", "label_id", "]", "=", "label_str", "\n", "", "", "", "", "self", ".", "label_list", "=", "[", "label_map", "[", "str", "(", "i", ")", "]", "for", "i", "in", "range", "(", "len", "(", "label_map", ")", ")", "]", "\n", "self", ".", "metric", "=", "chunk_metrics", ".", "ChunkEvaluator", "(", "label_list", "=", "self", ".", "label_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_sequence_label.ErnieFcSeqLabel.structure": [[39, 56], ["ernie_fc_sequence_label.ErnieFcSeqLabel.model_params.get", "erniekit.modules.ernie_config.ErnieConfig", "erniekit.modules.ernie.ErnieModel", "paddle.nn.initializer.TruncatedNormal", "paddle.nn.Dropout", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.CrossEntropyLoss", "paddle.ParamAttr"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "self", ".", "num_labels", "=", "self", ".", "model_params", ".", "get", "(", "'num_labels'", ",", "7", ")", "\n", "self", ".", "cfg_dict", "=", "ErnieConfig", "(", "self", ".", "config_path", ")", "\n", "self", ".", "hid_dim", "=", "self", ".", "cfg_dict", "[", "'hidden_size'", "]", "\n", "\n", "self", ".", "ernie_model", "=", "ErnieModel", "(", "self", ".", "cfg_dict", ",", "name", "=", "''", ")", "\n", "initializer", "=", "paddle", ".", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "0.02", ")", "\n", "self", ".", "dropout", "=", "paddle", ".", "nn", ".", "Dropout", "(", "p", "=", "0.1", ",", "mode", "=", "\"upscale_in_train\"", ")", "\n", "self", ".", "fc_prediction", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "num_labels", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "'cls_seq_label_out_w'", ",", "\n", "initializer", "=", "initializer", ")", ",", "\n", "bias_attr", "=", "'cls_seq_label_out_b'", ")", "\n", "self", ".", "fc", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "num_labels", ",", "out_features", "=", "self", ".", "num_labels", ")", "\n", "self", ".", "loss", "=", "paddle", ".", "nn", ".", "CrossEntropyLoss", "(", "use_softmax", "=", "False", ",", "reduction", "=", "'none'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_sequence_label.ErnieFcSeqLabel.forward": [[57, 127], ["ernie_fc_sequence_label.ErnieFcSeqLabel.ernie_model", "ernie_fc_sequence_label.ErnieFcSeqLabel.dropout", "ernie_fc_sequence_label.ErnieFcSeqLabel.fc_prediction", "paddle.argmax", "paddle.flatten", "paddle.flatten", "paddle.nn.functional.softmax", "ernie_fc_sequence_label.ErnieFcSeqLabel.loss", "paddle.flatten", "paddle.mean", "ernie_fc_sequence_label.ErnieFcSeqLabel.cfg_dict.get", "target_feed_list.append", "target_feed_name_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\u524d\u5411\u8ba1\u7b97\u7ec4\u7f51\u90e8\u5206\uff0c\u5fc5\u987b\u7531\u5b50\u7c7b\u5b9e\u73b0\n        :return: loss , fetch_list\n        \"\"\"", "\n", "\n", "instance_text", "=", "fields_dict", "[", "\"text_a\"", "]", "\n", "record_id_text", "=", "instance_text", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_a_src", "=", "record_id_text", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "text_a_sent", "=", "record_id_text", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "text_a_mask", "=", "record_id_text", "[", "InstanceName", ".", "MASK_IDS", "]", "\n", "text_a_task", "=", "record_id_text", "[", "InstanceName", ".", "TASK_IDS", "]", "\n", "\n", "# [batch_size]", "\n", "text_a_lens", "=", "record_id_text", "[", "InstanceName", ".", "SEQ_LENS", "]", "\n", "\n", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "# [batch_size, max_seq_len]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "label_lens", "=", "record_id_label", "[", "InstanceName", ".", "SEQ_LENS", "]", "\n", "# cls_embedding = [batch_size, hidden_size], tokens_embedding = [batch_size, max_seq_len, hidden_size]", "\n", "cls_embedding", ",", "tokens_embedding", "=", "self", ".", "ernie_model", "(", "src_ids", "=", "text_a_src", ",", "sent_ids", "=", "text_a_sent", ",", "\n", "task_ids", "=", "text_a_task", ")", "\n", "\n", "emb_text_a", "=", "self", ".", "dropout", "(", "tokens_embedding", ")", "\n", "\n", "# [batch_size, max_seq_len, num_labels] ", "\n", "logits", "=", "self", ".", "fc_prediction", "(", "emb_text_a", ")", "\n", "# [batch_size, max_seq_len, 1]", "\n", "infers", "=", "paddle", ".", "argmax", "(", "logits", ",", "axis", "=", "2", ")", "\n", "\n", "# [batch_size * max_seq_len]", "\n", "labels", "=", "paddle", ".", "flatten", "(", "label", ",", "stop_axis", "=", "1", ")", "\n", "\n", "# [batch_size * max_seq_len, num_labels]", "\n", "logits", "=", "paddle", ".", "flatten", "(", "logits", ",", "stop_axis", "=", "1", ")", "\n", "probs", "=", "paddle", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ")", "\n", "\n", "# [batch_size * max_seq_len, 1]", "\n", "ce_loss", "=", "self", ".", "loss", "(", "probs", ",", "labels", ")", "\n", "\n", "# [batch_size * max_seq_len]", "\n", "mask_ids", "=", "paddle", ".", "flatten", "(", "text_a_mask", ",", "stop_axis", "=", "1", ")", "\n", "ce_loss", "=", "ce_loss", "*", "mask_ids", "\n", "\n", "loss", "=", "paddle", ".", "mean", "(", "ce_loss", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "\n", "            ", "target_predict_list", "=", "[", "infers", "]", "\n", "target_feed_list", "=", "[", "text_a_src", ",", "text_a_sent", "]", "\n", "target_feed_name_list", "=", "[", "\"text_a#src_ids\"", ",", "\"text_a#sent_ids\"", "]", "\n", "if", "self", ".", "cfg_dict", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_a_task", ")", "\n", "target_feed_name_list", ".", "append", "(", "\"text_a#task_ids\"", ")", "\n", "\n", "", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "infers", ",", "\n", "\"length\"", ":", "text_a_lens", ",", "\n", "InstanceName", ".", "LOSS", ":", "loss", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_sequence_label.ErnieFcSeqLabel.set_optimizer": [[128, 167], ["ernie_fc_sequence_label.ErnieFcSeqLabel.model_params.get", "ernie_fc_sequence_label.ErnieFcSeqLabel.get", "ernie_fc_sequence_label.ErnieFcSeqLabel.get", "ernie_fc_sequence_label.ErnieFcSeqLabel.get", "ernie_fc_sequence_label.ErnieFcSeqLabel.get", "paddle.nn.ClipGradByGlobalNorm", "re.compile", "ernie_fc_sequence_label.ErnieFcSeqLabel.parameters", "ernie_fc_sequence_label.ErnieFcSeqLabel.get", "ernie_fc_sequence_label.ErnieFcSeqLabel.get", "erniekit.modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "re.compile.match", "re.compile.match"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "False", ")", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-6", ")", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "1.0", ")", "\n", "param_name_to_exclue_from_weight_decay", "=", "re", ".", "compile", "(", "r'.*layer_norm_scale|.*layer_norm_bias|.*b_0'", ")", "\n", "\n", "parameters", "=", "None", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "parameters", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_sequence_label.ErnieFcSeqLabel.get_metrics": [[168, 201], ["ernie_fc_sequence_label.ErnieFcSeqLabel.metric.reset", "ernie_fc_sequence_label.ErnieFcSeqLabel.metric.accumulate", "collections.OrderedDict", "zip", "ernie_fc_sequence_label.ErnieFcSeqLabel.metric.compute", "logging.debug", "logging.debug", "ernie_fc_sequence_label.ErnieFcSeqLabel.metric.compute", "round", "round", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.reset", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.accumulate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.compute", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.compute"], ["", "def", "get_metrics", "(", "self", ",", "forward_return_dict", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\u6307\u6807\u8bc4\u4f30\u90e8\u5206\u7684\u52a8\u6001\u8ba1\u7b97\u548c\u6253\u5370\n        :param forward_return_dict: executor.run\u8fc7\u7a0b\u4e2dfetch\u51fa\u6765\u7684forward\u4e2d\u5b9a\u4e49\u7684tensor\n        :param meta_info\uff1a\u5e38\u7528\u7684meta\u4fe1\u606f\uff0c\u5982step, used_time, gpu_id\u7b49\n        :param phase: \u5f53\u524d\u8c03\u7528\u7684\u9636\u6bb5\uff0c\u5305\u542b\u8bad\u7ec3\u548c\u8bc4\u4f30\n        :return:\n        \"\"\"", "\n", "predictions", "=", "forward_return_dict", "[", "InstanceName", ".", "PREDICT_RESULT", "]", "\n", "labels", "=", "forward_return_dict", "[", "InstanceName", ".", "LABEL", "]", "\n", "lengths", "=", "forward_return_dict", "[", "\"length\"", "]", "\n", "self", ".", "metric", ".", "reset", "(", ")", "\n", "if", "phase", "!=", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "for", "prediction", ",", "label", ",", "length", "in", "zip", "(", "predictions", ",", "labels", ",", "lengths", ")", ":", "\n", "                ", "num_infer_chunks", ",", "num_label_chunks", ",", "num_correct_chunks", "=", "self", ".", "metric", ".", "compute", "(", "length", ",", "prediction", ",", "label", ")", "\n", "", "", "else", ":", "\n", "            ", "num_infer_chunks", ",", "num_label_chunks", ",", "num_correct_chunks", "=", "self", ".", "metric", ".", "compute", "(", "lengths", ",", "predictions", ",", "labels", ")", "\n", "\n", "", "precision", ",", "recall", ",", "f1_score", "=", "self", ".", "metric", ".", "accumulate", "(", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "logging", ".", "debug", "(", "\"phase = {0} f1 = {1} precision = {2} recall = {3} step = {4} time_cost = {5}\"", ".", "format", "(", "\n", "phase", ",", "round", "(", "f1_score", ",", "3", ")", ",", "round", "(", "precision", ",", "3", ")", ",", "round", "(", "recall", ",", "3", ")", ",", "step", ",", "time_cost", ")", ")", "\n", "", "if", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "logging", ".", "debug", "(", "\"phase = {0} f1 = {1} precision = {2} recall = {3} time_cost = {4}\"", ".", "format", "(", "\n", "phase", ",", "round", "(", "f1_score", ",", "3", ")", ",", "round", "(", "precision", ",", "3", ")", ",", "round", "(", "recall", ",", "3", ")", ",", "time_cost", ")", ")", "\n", "", "metrics_return_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "metrics_return_dict", "[", "\"f1\"", "]", "=", "f1_score", "\n", "metrics_return_dict", "[", "\"precision\"", "]", "=", "precision", "\n", "metrics_return_dict", "[", "\"recall\"", "]", "=", "recall", "\n", "return", "metrics_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_fc_sequence_label.ErnieFcSeqLabel.metrics_show": [[202, 207], ["None"], "methods", ["None"], ["", "def", "metrics_show", "(", "self", ",", "result_evaluate", ")", ":", "\n", "        ", "\"\"\"\u8bc4\u4f30\u6307\u6807\u5c55\u793a\n        :return:\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_matching.BaseMatching.__init__": [[20, 24], ["erniekit.model.model.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_matching.BaseMatching.structure": [[25, 30], ["None"], "methods", ["None"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_matching.BaseMatching.forward": [[31, 38], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\" \u524d\u5411\u8ba1\u7b97\n        :param fields_dict:\n        :param phase:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_matching.BaseMatching.set_optimizer": [[39, 51], ["base_matching.BaseMatching.model_params.get", "paddle.optimizer.Adam", "base_matching.BaseMatching.get", "base_matching.BaseMatching.parameters"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u4f18\u5316\u5668\u8bbe\u7f6e\n        :return:\n        \"\"\"", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "if", "opt_param", ":", "\n", "            ", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "'learning_rate'", ",", "2e-5", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr", "=", "2e-5", "\n", "# TODO: parameters\u53c2\u6570\u53ea\u6709\u52a8\u6001\u56fe\u624d\u9700\u8981\u4f7f\u7528\uff0c\u8bb0\u5f97\u9a8c\u8bc1\u4e00\u4e0b\u8be5\u53c2\u6570\u662f\u5426\u5f71\u54cd\u9759\u6001\u56fe", "\n", "", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "Adam", "(", "learning_rate", "=", "self", ".", "lr", ",", "parameters", "=", "self", ".", "parameters", "(", ")", ")", "\n", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_matching.BaseMatching.get_metrics": [[52, 100], ["collections.OrderedDict", "erniekit.metrics.metrics.Pn", "erniekit.metrics.metrics.Pn.eval", "logging.debug", "erniekit.metrics.metrics.Auc", "erniekit.metrics.metrics.Auc.eval", "logging.debug", "numpy.mean", "forward_return_dict[].numpy", "forward_return_dict[].numpy", "numpy.mean", "isinstance", "isinstance", "forward_return_dict[].numpy", "round", "round", "predictions.numpy.numpy.numpy", "label.numpy.numpy.numpy", "round", "item.numpy", "item.numpy"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval"], ["", "def", "get_metrics", "(", "self", ",", "forward_return_dict", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        :param forward_return_dict: \u524d\u5411\u8ba1\u7b97\u5f97\u51fa\u7684\u7ed3\u679c\n        :param meta_info: \u5e38\u7528\u7684meta\u4fe1\u606f\uff0c\u5982step, used_time, gpu_id\u7b49\n        :param phase: \u5f53\u524d\u8c03\u7528\u7684\u9636\u6bb5\uff0c\u5305\u542b\u8bad\u7ec3\u548c\u8bc4\u4f30\n        :return:\n        \"\"\"", "\n", "metrics_return_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "                ", "loss", "=", "np", ".", "mean", "(", "forward_return_dict", "[", "\"loss\"", "]", ".", "numpy", "(", ")", ")", "\n", "pos_score", "=", "forward_return_dict", "[", "\"query_pos_title_score\"", "]", ".", "numpy", "(", ")", "\n", "neg_score", "=", "forward_return_dict", "[", "\"query_neg_title_score\"", "]", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "np", ".", "mean", "(", "forward_return_dict", "[", "\"loss\"", "]", ")", "\n", "pos_score", "=", "forward_return_dict", "[", "\"query_pos_title_score\"", "]", "\n", "neg_score", "=", "forward_return_dict", "[", "\"query_neg_title_score\"", "]", "\n", "", "metrics_pn", "=", "metrics", ".", "Pn", "(", ")", "\n", "pn", "=", "metrics_pn", ".", "eval", "(", "[", "pos_score", ",", "neg_score", "]", ")", "\n", "metrics_return_dict", "[", "\"pn\"", "]", "=", "pn", "\n", "logging", ".", "debug", "(", "\"phase = {0} pn = {1} step = {2} time_cost = {3} loss = {4}\"", ".", "format", "(", "phase", ",", "round", "(", "pn", ",", "3", ")", ",", "\n", "step", ",", "time_cost", ",", "round", "(", "loss", ",", "3", ")", ")", ")", "\n", "", "if", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "metrics_auc", "=", "metrics", ".", "Auc", "(", ")", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "                ", "predictions", "=", "forward_return_dict", "[", "InstanceName", ".", "PREDICT_RESULT", "]", "\n", "label", "=", "forward_return_dict", "[", "InstanceName", ".", "LABEL", "]", "\n", "if", "isinstance", "(", "predictions", ",", "list", ")", ":", "\n", "                    ", "predictions", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "predictions", "]", "\n", "", "else", ":", "\n", "                    ", "predictions", "=", "predictions", ".", "numpy", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "                    ", "label", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "label", "]", "\n", "", "else", ":", "\n", "                    ", "label", "=", "label", ".", "numpy", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "predictions", "=", "forward_return_dict", "[", "InstanceName", ".", "PREDICT_RESULT", "]", "\n", "label", "=", "forward_return_dict", "[", "InstanceName", ".", "LABEL", "]", "\n", "", "auc", "=", "metrics_auc", ".", "eval", "(", "[", "predictions", ",", "label", "]", ")", "\n", "metrics_return_dict", "[", "\"auc\"", "]", "=", "auc", "\n", "logging", ".", "debug", "(", "\"phase = {0} auc = {1} time_cost = {2}\"", ".", "format", "(", "phase", ",", "round", "(", "auc", ",", "3", ")", ",", "time_cost", ")", ")", "\n", "\n", "", "return", "metrics_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_matching.BaseMatching.fields_process": [[101, 107], ["None"], "methods", ["None"], ["", "def", "fields_process", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        \u5bf9fields_dict\u4e2d\u5e8f\u5217\u5316\u597d\u7684id\u6309\u9700\u505a\u4e8c\u6b21\u5904\u7406\u3002\n        :return: \u5904\u7406\u597d\u7684fields\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.__init__": [[26, 28], ["model.base_matching.BaseMatching.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "BaseMatching", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.structure": [[29, 48], ["ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.model_params.get", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.model_params.get", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.get", "erniekit.modules.ernie_config.ErnieConfig", "erniekit.modules.ernie.ErnieModel", "paddle.nn.initializer.TruncatedNormal", "paddle.nn.Dropout", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.CrossEntropyLoss", "paddle.ParamAttr"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "self", ".", "num_labels", "=", "self", ".", "model_params", ".", "get", "(", "'num_labels'", ",", "2", ")", "\n", "emb_params", "=", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", "\n", "\n", "config_path", "=", "emb_params", ".", "get", "(", "\"config_path\"", ")", "\n", "self", ".", "cfg_dict", "=", "ErnieConfig", "(", "config_path", ")", "\n", "self", ".", "hid_dim", "=", "self", ".", "cfg_dict", "[", "'hidden_size'", "]", "\n", "\n", "self", ".", "ernie_model", "=", "ErnieModel", "(", "self", ".", "cfg_dict", ",", "name", "=", "''", ")", "\n", "initializer", "=", "paddle", ".", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "0.02", ")", "\n", "self", ".", "dropout", "=", "paddle", ".", "nn", ".", "Dropout", "(", "p", "=", "0.1", ",", "mode", "=", "\"upscale_in_train\"", ")", "\n", "self", ".", "fc_prediction", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "num_labels", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "'cls.w_0'", ",", "initializer", "=", "initializer", ")", ",", "\n", "bias_attr", "=", "'cls.b_0'", ")", "\n", "self", ".", "fc", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "num_labels", ",", "out_features", "=", "self", ".", "num_labels", ")", "\n", "self", ".", "loss", "=", "paddle", ".", "nn", ".", "CrossEntropyLoss", "(", "use_softmax", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.forward": [[49, 95], ["ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.ernie_model", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.dropout", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.fc_prediction", "paddle.nn.functional.softmax", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.loss", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.fc", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.cfg_dict.get", "target_feed_list.append", "target_feed_name_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\u524d\u5411\u8ba1\u7b97\u7ec4\u7f51\u90e8\u5206\uff0c\u5fc5\u987b\u7531\u5b50\u7c7b\u5b9e\u73b0\n        :return: loss , fetch_list\n        \"\"\"", "\n", "\n", "instance_text", "=", "fields_dict", "[", "\"text_a\"", "]", "\n", "record_id_text", "=", "instance_text", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_a_src", "=", "record_id_text", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "text_a_sent", "=", "record_id_text", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "text_a_mask", "=", "record_id_text", "[", "InstanceName", ".", "MASK_IDS", "]", "\n", "text_a_task", "=", "record_id_text", "[", "InstanceName", ".", "TASK_IDS", "]", "\n", "\n", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "cls_embedding", ",", "tokens_embedding", "=", "self", ".", "ernie_model", "(", "src_ids", "=", "text_a_src", ",", "\n", "sent_ids", "=", "text_a_sent", ",", "task_ids", "=", "text_a_task", ")", "\n", "\n", "cls_feats", "=", "self", ".", "dropout", "(", "cls_embedding", ")", "\n", "\n", "logits", "=", "self", ".", "fc_prediction", "(", "cls_feats", ")", "\n", "\n", "predictions", "=", "paddle", ".", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "fc", "(", "logits", ")", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "            ", "target_predict_list", "=", "[", "predictions", "]", "\n", "target_feed_list", "=", "[", "text_a_src", ",", "text_a_sent", "]", "\n", "target_feed_name_list", "=", "[", "\"text_a#src_ids\"", ",", "\"text_a#sent_ids\"", "]", "\n", "if", "self", ".", "cfg_dict", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_a_task", ")", "\n", "target_feed_name_list", ".", "append", "(", "\"text_a#task_ids\"", ")", "\n", "", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "cost", "=", "self", ".", "loss", "(", "predictions", ",", "label", ")", "\n", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "predictions", ",", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "LOSS", ":", "cost", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.set_optimizer": [[96, 135], ["ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.model_params.get", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.get", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.get", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.get", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.get", "paddle.nn.ClipGradByGlobalNorm", "re.compile", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.parameters", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.get", "ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.get", "erniekit.modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "re.compile.match", "re.compile.match"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "False", ")", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-6", ")", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "1.0", ")", "\n", "param_name_to_exclue_from_weight_decay", "=", "re", ".", "compile", "(", "r'.*layer_norm_scale|.*layer_norm_bias|.*b_0'", ")", "\n", "\n", "parameters", "=", "None", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "parameters", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.get_metrics": [[136, 179], ["erniekit.metrics.metrics.Acc", "erniekit.metrics.metrics.Acc.eval", "erniekit.metrics.metrics.Precision", "erniekit.metrics.metrics.Precision.eval", "collections.OrderedDict", "isinstance", "isinstance", "isinstance", "logging.info", "logging.info", "predictions.numpy.numpy.numpy", "label.numpy.numpy.numpy", "loss.numpy", "numpy.mean", "numpy.mean", "item.numpy", "item.numpy", "round", "round"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval"], ["", "def", "get_metrics", "(", "self", ",", "forward_return_dict", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        :param forward_return_dict: \u524d\u5411\u8ba1\u7b97\u5f97\u51fa\u7684\u7ed3\u679c\n        :param meta_info: \u5e38\u7528\u7684meta\u4fe1\u606f\uff0c\u5982step, used_time, gpu_id\u7b49\n        :param phase: \u5f53\u524d\u8c03\u7528\u7684\u9636\u6bb5\uff0c\u5305\u542b\u8bad\u7ec3\u548c\u8bc4\u4f30\n        :return:\n        \"\"\"", "\n", "predictions", "=", "forward_return_dict", "[", "InstanceName", ".", "PREDICT_RESULT", "]", "\n", "label", "=", "forward_return_dict", "[", "InstanceName", ".", "LABEL", "]", "\n", "# paddle_acc = forward_return_dict[\"acc\"]", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "if", "isinstance", "(", "predictions", ",", "list", ")", ":", "\n", "                ", "predictions", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "predictions", "]", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "predictions", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "                ", "label", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "label", "]", "\n", "", "else", ":", "\n", "                ", "label", "=", "label", ".", "numpy", "(", ")", "\n", "", "", "metrics_acc", "=", "metrics", ".", "Acc", "(", ")", "\n", "acc", "=", "metrics_acc", ".", "eval", "(", "[", "predictions", ",", "label", "]", ")", "\n", "metrics_pres", "=", "metrics", ".", "Precision", "(", ")", "\n", "precision", "=", "metrics_pres", ".", "eval", "(", "[", "predictions", ",", "label", "]", ")", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "loss", "=", "forward_return_dict", "[", "InstanceName", ".", "LOSS", "]", "\n", "if", "isinstance", "(", "loss", ",", "paddle", ".", "Tensor", ")", ":", "\n", "                ", "loss_np", "=", "loss", ".", "numpy", "(", ")", "\n", "mean_loss", "=", "np", ".", "mean", "(", "loss_np", ")", "\n", "", "else", ":", "\n", "                ", "mean_loss", "=", "np", ".", "mean", "(", "loss", ")", "\n", "", "logging", ".", "info", "(", "\"phase = {0} loss = {1} acc = {2} precision = {3} step = {4} time_cost = {5}\"", ".", "format", "(", "\n", "phase", ",", "mean_loss", ",", "acc", ",", "precision", ",", "step", ",", "round", "(", "time_cost", ",", "4", ")", ")", ")", "\n", "", "if", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "logging", ".", "info", "(", "\"phase = {0} acc = {1} precision = {2} time_cost = {3} step = {4}\"", ".", "format", "(", "\n", "phase", ",", "acc", ",", "precision", ",", "round", "(", "time_cost", ",", "4", ")", ",", "step", ")", ")", "\n", "", "metrics_return_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "metrics_return_dict", "[", "\"acc\"", "]", "=", "acc", "\n", "metrics_return_dict", "[", "\"precision\"", "]", "=", "precision", "\n", "return", "metrics_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_fc_pointwise.ErnieMatchingFcPointwise.metrics_show": [[180, 185], ["None"], "methods", ["None"], ["", "def", "metrics_show", "(", "self", ",", "result_evaluate", ")", ":", "\n", "        ", "\"\"\"\u8bc4\u4f30\u6307\u6807\u5c55\u793a\n        :return:\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.__init__": [[24, 26], ["model.base_matching.BaseMatching.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "BaseMatching", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.structure": [[27, 47], ["ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.model_params.get", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.model_params.get", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.get", "erniekit.modules.ernie_config.ErnieConfig", "erniekit.modules.ernie.ErnieModel", "paddle.nn.initializer.TruncatedNormal", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.CrossEntropyLoss", "paddle.ParamAttr"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "num_labels", "=", "self", ".", "model_params", ".", "get", "(", "'num_labels'", ",", "2", ")", "\n", "emb_params", "=", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", "\n", "config_path", "=", "emb_params", ".", "get", "(", "\"config_path\"", ")", "\n", "self", ".", "ernie_config", "=", "ErnieConfig", "(", "config_path", ")", "\n", "self", ".", "hidden_size", "=", "self", ".", "ernie_config", "[", "'hidden_size'", "]", "\n", "self", ".", "ernie_model", "=", "ErnieModel", "(", "self", ".", "ernie_config", ",", "name", "=", "''", ")", "\n", "self", ".", "fc_hidden_size", "=", "128", "\n", "initializer", "=", "paddle", ".", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "0.02", ")", "\n", "self", ".", "concat_fc", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hidden_size", "*", "2", ",", "out_features", "=", "self", ".", "fc_hidden_size", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "'concat_fc.w'", ",", "initializer", "=", "initializer", ")", ",", "\n", "bias_attr", "=", "'concat.b'", ")", "\n", "\n", "self", ".", "output_layer", "=", "paddle", ".", "nn", ".", "Linear", "(", "self", ".", "fc_hidden_size", ",", "self", ".", "num_labels", ")", "\n", "\n", "self", ".", "loss", "=", "paddle", ".", "nn", ".", "CrossEntropyLoss", "(", "use_softmax", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.forward": [[48, 111], ["paddle.concat", "paddle.tanh", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.output_layer", "paddle.nn.functional.softmax", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.loss", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.ernie_model", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.concat_fc", "target_feed_list.extend", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.ernie_config.get", "target_feed_list.append", "target_feed_list.append", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.ernie_config.get", "target_feed_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\u524d\u5411\u8ba1\u7b97\u7ec4\u7f51\u90e8\u5206\uff0c\u5fc5\u987b\u7531\u5b50\u7c7b\u5b9e\u73b0\n        :return: loss , fetch_list\n        \"\"\"", "\n", "\n", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "\n", "fields_name", "=", "[", "\"text_a\"", ",", "\"text_b\"", "]", "\n", "emb_dict", "=", "{", "}", "\n", "target_feed_list", "=", "[", "]", "\n", "ernie_feed_list", "=", "[", "]", "\n", "for", "name", "in", "fields_name", ":", "\n", "            ", "instance_text", "=", "fields_dict", "[", "name", "]", "\n", "record_id_text", "=", "instance_text", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_src_ids", "=", "record_id_text", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "text_sent_ids", "=", "record_id_text", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "text_task_ids", "=", "record_id_text", "[", "InstanceName", ".", "TASK_IDS", "]", "\n", "cls_embedding", ",", "tokens_embedding", "=", "self", ".", "ernie_model", "(", "src_ids", "=", "text_src_ids", ",", "sent_ids", "=", "text_sent_ids", ",", "\n", "task_ids", "=", "text_task_ids", ")", "\n", "if", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_src_ids", ")", "\n", "target_feed_list", ".", "append", "(", "text_sent_ids", ")", "\n", "if", "self", ".", "ernie_config", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                    ", "target_feed_list", ".", "append", "(", "text_task_ids", ")", "\n", "", "", "emb_dict", "[", "name", "]", "=", "cls_embedding", "\n", "\n", "# [batch_size, hidden_size]", "\n", "", "emb_text_a", "=", "emb_dict", "[", "\"text_a\"", "]", "\n", "emb_text_b", "=", "emb_dict", "[", "\"text_b\"", "]", "\n", "# [batch_size, hidden_size*2]", "\n", "contacted", "=", "paddle", ".", "concat", "(", "[", "emb_text_a", ",", "emb_text_b", "]", ",", "axis", "=", "-", "1", ")", "\n", "# [batch_size, fc_hidden_size]", "\n", "fc_out", "=", "paddle", ".", "tanh", "(", "self", ".", "concat_fc", "(", "contacted", ")", ")", "\n", "# [fc_hidden_size, num_labels]", "\n", "logits", "=", "self", ".", "output_layer", "(", "fc_out", ")", "\n", "predictions", "=", "paddle", ".", "nn", ".", "functional", ".", "softmax", "(", "logits", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "            ", "target_predict_list", "=", "[", "predictions", "]", "\n", "target_feed_list", ".", "extend", "(", "ernie_feed_list", ")", "\n", "if", "self", ".", "ernie_config", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                ", "target_feed_name_list", "=", "[", "'text_a#src_ids'", ",", "'text_a#sent_ids'", ",", "'text_a#task_ids'", ",", "'text_b#src_ids'", ",", "\n", "'text_b#sent_ids'", ",", "'text_b#task_ids'", "]", "\n", "", "else", ":", "\n", "                ", "target_feed_name_list", "=", "[", "'text_a#src_ids'", ",", "'text_a#sent_ids'", ",", "'text_b#src_ids'", ",", "'text_b#sent_ids'", "]", "\n", "", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "cost", "=", "self", ".", "loss", "(", "predictions", ",", "label", ")", "\n", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "predictions", ",", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "LOSS", ":", "cost", "\n", "}", "\n", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.set_optimizer": [[112, 151], ["ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.model_params.get", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.get", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.get", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.get", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.get", "paddle.nn.ClipGradByGlobalNorm", "re.compile", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.parameters", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.get", "ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.get", "erniekit.modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "re.compile.match", "re.compile.match"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "False", ")", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-6", ")", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "1.0", ")", "\n", "param_name_to_exclue_from_weight_decay", "=", "re", ".", "compile", "(", "r'.*layer_norm_scale|.*layer_norm_bias|.*b_0'", ")", "\n", "\n", "parameters", "=", "None", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "parameters", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "return", "self", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.get_metrics": [[152, 195], ["erniekit.metrics.metrics.Acc", "erniekit.metrics.metrics.Acc.eval", "erniekit.metrics.metrics.Precision", "erniekit.metrics.metrics.Precision.eval", "collections.OrderedDict", "isinstance", "isinstance", "isinstance", "logging.info", "logging.info", "predictions.numpy.numpy.numpy", "label.numpy.numpy.numpy", "loss.numpy", "numpy.mean", "numpy.mean", "item.numpy", "item.numpy", "round", "round"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval"], ["", "def", "get_metrics", "(", "self", ",", "forward_return_dict", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        :param forward_return_dict: \u524d\u5411\u8ba1\u7b97\u5f97\u51fa\u7684\u7ed3\u679c\n        :param meta_info: \u5e38\u7528\u7684meta\u4fe1\u606f\uff0c\u5982step, used_time, gpu_id\u7b49\n        :param phase: \u5f53\u524d\u8c03\u7528\u7684\u9636\u6bb5\uff0c\u5305\u542b\u8bad\u7ec3\u548c\u8bc4\u4f30\n        :return:\n        \"\"\"", "\n", "predictions", "=", "forward_return_dict", "[", "InstanceName", ".", "PREDICT_RESULT", "]", "\n", "label", "=", "forward_return_dict", "[", "InstanceName", ".", "LABEL", "]", "\n", "# paddle_acc = forward_return_dict[\"acc\"]", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "if", "isinstance", "(", "predictions", ",", "list", ")", ":", "\n", "                ", "predictions", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "predictions", "]", "\n", "", "else", ":", "\n", "                ", "predictions", "=", "predictions", ".", "numpy", "(", ")", "\n", "", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "                ", "label", "=", "[", "item", ".", "numpy", "(", ")", "for", "item", "in", "label", "]", "\n", "", "else", ":", "\n", "                ", "label", "=", "label", ".", "numpy", "(", ")", "\n", "", "", "metrics_acc", "=", "metrics", ".", "Acc", "(", ")", "\n", "acc", "=", "metrics_acc", ".", "eval", "(", "[", "predictions", ",", "label", "]", ")", "\n", "metrics_pres", "=", "metrics", ".", "Precision", "(", ")", "\n", "precision", "=", "metrics_pres", ".", "eval", "(", "[", "predictions", ",", "label", "]", ")", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "loss", "=", "forward_return_dict", "[", "InstanceName", ".", "LOSS", "]", "\n", "if", "isinstance", "(", "loss", ",", "paddle", ".", "Tensor", ")", ":", "\n", "                ", "loss_np", "=", "loss", ".", "numpy", "(", ")", "\n", "mean_loss", "=", "np", ".", "mean", "(", "loss_np", ")", "\n", "", "else", ":", "\n", "                ", "mean_loss", "=", "np", ".", "mean", "(", "loss", ")", "\n", "", "logging", ".", "info", "(", "\"phase = {0} loss = {1} acc = {2} precision = {3} step = {4} time_cost = {5}\"", ".", "format", "(", "\n", "phase", ",", "mean_loss", ",", "acc", ",", "precision", ",", "step", ",", "round", "(", "time_cost", ",", "4", ")", ")", ")", "\n", "", "if", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "time_cost", "=", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "\n", "step", "=", "meta_info", "[", "InstanceName", ".", "STEP", "]", "\n", "logging", ".", "info", "(", "\"phase = {0} acc = {1} precision = {2} time_cost = {3} step = {4}\"", ".", "format", "(", "\n", "phase", ",", "acc", ",", "precision", ",", "round", "(", "time_cost", ",", "4", ")", ",", "step", ")", ")", "\n", "", "metrics_return_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "metrics_return_dict", "[", "\"acc\"", "]", "=", "acc", "\n", "metrics_return_dict", "[", "\"precision\"", "]", "=", "precision", "\n", "return", "metrics_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pointwise.ErnieMatchingSiamesePointwise.metrics_show": [[196, 201], ["None"], "methods", ["None"], ["", "def", "metrics_show", "(", "self", ",", "result_evaluate", ")", ":", "\n", "        ", "\"\"\"\u8bc4\u4f30\u6307\u6807\u5c55\u793a\n        :return:\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.__init__": [[21, 23], ["model.base_matching.BaseMatching.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "BaseMatching", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.structure": [[24, 37], ["ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.model_params.get", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.get", "erniekit.modules.ernie_config.ErnieConfig", "erniekit.modules.ernie.ErnieModel", "paddle.nn.Dropout", "paddle.nn.CosineSimilarity", "paddle.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "\n", "emb_params", "=", "self", ".", "model_params", ".", "get", "(", "\"embedding\"", ")", "\n", "config_path", "=", "emb_params", ".", "get", "(", "\"config_path\"", ")", "\n", "self", ".", "ernie_config", "=", "ErnieConfig", "(", "config_path", ")", "\n", "\n", "self", ".", "ernie_model", "=", "ErnieModel", "(", "self", ".", "ernie_config", ",", "name", "=", "''", ")", "\n", "self", ".", "dropout", "=", "paddle", ".", "nn", ".", "Dropout", "(", "p", "=", "0.1", ",", "mode", "=", "\"upscale_in_train\"", ")", "\n", "self", ".", "cos_sim", "=", "paddle", ".", "nn", ".", "CosineSimilarity", "(", "axis", "=", "1", ")", "\n", "self", ".", "loss", "=", "paddle", ".", "nn", ".", "CrossEntropyLoss", "(", "use_softmax", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.forward": [[38, 129], ["ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.dropout", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.dropout", "paddle.reshape", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.ernie_model", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.cos_sim", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.dropout", "paddle.reshape", "paddle.full", "paddle.nn.functional.margin_ranking_loss", "target_feed_list.append", "target_feed_list.append", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.ernie_config.get", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.cos_sim", "paddle.full", "paddle.subtract", "paddle.reshape", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.loss", "paddle.mean", "paddle.full", "paddle.subtract", "paddle.reshape", "target_feed_list.extend", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.ernie_config.get", "target_feed_list.append", "paddle.concat", "paddle.concat"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\u524d\u5411\u8ba1\u7b97\u7ec4\u7f51\u90e8\u5206\uff0c\u5fc5\u987b\u7531\u5b50\u7c7b\u5b9e\u73b0\n        :return: loss , fetch_list\n        \"\"\"", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "fields_name", "=", "[", "\"text_a\"", ",", "\"text_b\"", ",", "\"text_c\"", "]", "\n", "", "else", ":", "\n", "            ", "fields_name", "=", "[", "\"text_a\"", ",", "\"text_b\"", "]", "\n", "\n", "", "emb_dict", "=", "{", "}", "\n", "target_feed_list", "=", "[", "]", "\n", "ernie_feed_list", "=", "[", "]", "\n", "for", "name", "in", "fields_name", ":", "\n", "            ", "instance_text", "=", "fields_dict", "[", "name", "]", "\n", "record_id_text", "=", "instance_text", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_src_ids", "=", "record_id_text", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "text_sent_ids", "=", "record_id_text", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "\n", "text_task_ids", "=", "record_id_text", "[", "InstanceName", ".", "TASK_IDS", "]", "\n", "cls_embedding", ",", "tokens_embedding", "=", "self", ".", "ernie_model", "(", "src_ids", "=", "text_src_ids", ",", "sent_ids", "=", "text_sent_ids", ",", "\n", "task_ids", "=", "text_task_ids", ")", "\n", "if", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_src_ids", ")", "\n", "target_feed_list", ".", "append", "(", "text_sent_ids", ")", "\n", "if", "self", ".", "ernie_config", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                    ", "target_feed_list", ".", "append", "(", "text_task_ids", ")", "\n", "\n", "", "", "emb_dict", "[", "name", "]", "=", "cls_embedding", "\n", "\n", "", "emb_text_q", "=", "emb_dict", "[", "\"text_a\"", "]", "\n", "emb_text_pt", "=", "emb_dict", "[", "\"text_b\"", "]", "\n", "\n", "q_embeddings", "=", "self", ".", "dropout", "(", "emb_text_q", ")", "\n", "pt_embeddings", "=", "self", ".", "dropout", "(", "emb_text_pt", ")", "\n", "\n", "query_pos_title_score", "=", "paddle", ".", "reshape", "(", "self", ".", "cos_sim", "(", "q_embeddings", ",", "pt_embeddings", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "emb_text_nt", "=", "emb_dict", "[", "\"text_c\"", "]", "\n", "neg_t_embeddings", "=", "self", ".", "dropout", "(", "emb_text_nt", ")", "\n", "query_neg_title_score", "=", "paddle", ".", "reshape", "(", "self", ".", "cos_sim", "(", "q_embeddings", ",", "neg_t_embeddings", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "labels", "=", "paddle", ".", "full", "(", "shape", "=", "[", "1", "]", ",", "fill_value", "=", "1.0", ",", "dtype", "=", "'float32'", ")", "\n", "avg_cost", "=", "paddle", ".", "nn", ".", "functional", ".", "margin_ranking_loss", "(", "query_pos_title_score", ",", "\n", "query_neg_title_score", ",", "labels", ",", "margin", "=", "0.2", ",", "\n", "reduction", "=", "'mean'", ")", "\n", "\n", "\"\"\"PREDICT_RESULT,LABEL,LOSS \u662f\u5173\u952e\u5b57\uff0c\u5fc5\u987b\u8981\u8d4b\u503c\u5e76\u8fd4\u56de\"\"\"", "\n", "forward_return_dict", "=", "{", "\n", "\"query_pos_title_score\"", ":", "query_pos_title_score", ",", "\n", "\"query_neg_title_score\"", ":", "query_neg_title_score", ",", "\n", "InstanceName", ".", "LOSS", ":", "avg_cost", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "elif", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "ones", "=", "paddle", ".", "full", "(", "shape", "=", "[", "1", "]", ",", "fill_value", "=", "1.0", ",", "dtype", "=", "'float32'", ")", "\n", "query_pos_title_score", "=", "(", "query_pos_title_score", "+", "1", ")", "/", "2", "\n", "sub_pos_score", "=", "paddle", ".", "subtract", "(", "ones", ",", "query_pos_title_score", ")", "\n", "predictions", "=", "paddle", ".", "reshape", "(", "paddle", ".", "concat", "(", "x", "=", "[", "sub_pos_score", ",", "query_pos_title_score", "]", ",", "\n", "axis", "=", "-", "1", ")", ",", "shape", "=", "[", "-", "1", ",", "2", "]", ")", "\n", "cost", "=", "self", ".", "loss", "(", "predictions", ",", "label", ")", "\n", "avg_cost", "=", "paddle", ".", "mean", "(", "x", "=", "cost", ")", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "predictions", ",", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "LOSS", ":", "avg_cost", "\n", "}", "\n", "return", "forward_return_dict", "\n", "", "else", ":", "\n", "            ", "ones", "=", "paddle", ".", "full", "(", "shape", "=", "[", "1", "]", ",", "fill_value", "=", "1.0", ",", "dtype", "=", "'float32'", ")", "\n", "# \u4e0e\u8bc4\u4f30\u4fdd\u6301\u4e00\u81f4\uff0c\u8ba9\u5176\u53d6\u503c\u8303\u56f4\u53d8\u4e3a0-1", "\n", "query_pos_title_score", "=", "(", "query_pos_title_score", "+", "1", ")", "/", "2", "\n", "sub_pos_score", "=", "paddle", ".", "subtract", "(", "ones", ",", "query_pos_title_score", ")", "\n", "predictions", "=", "paddle", ".", "reshape", "(", "paddle", ".", "concat", "(", "x", "=", "[", "sub_pos_score", ",", "query_pos_title_score", "]", ",", "\n", "axis", "=", "-", "1", ")", ",", "shape", "=", "[", "-", "1", ",", "2", "]", ")", "\n", "target_feed_list", ".", "extend", "(", "ernie_feed_list", ")", "\n", "if", "self", ".", "ernie_config", ".", "get", "(", "'use_task_id'", ",", "False", ")", ":", "\n", "                ", "target_feed_name_list", "=", "[", "'text_a#src_ids'", ",", "'text_a#sent_ids'", ",", "'text_a#task_ids'", ",", "'text_b#src_ids'", ",", "\n", "'text_b#sent_ids'", ",", "'text_b#task_ids'", "]", "\n", "", "else", ":", "\n", "                ", "target_feed_name_list", "=", "[", "'text_a#src_ids'", ",", "'text_a#sent_ids'", ",", "'text_b#src_ids'", ",", "'text_b#sent_ids'", "]", "\n", "", "target_predict_list", "=", "[", "predictions", "]", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.set_optimizer": [[130, 169], ["ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.model_params.get", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.get", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.get", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.get", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.get", "paddle.nn.ClipGradByGlobalNorm", "re.compile", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.parameters", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.get", "ernie_matching_siamese_pairwise.ErnieMatchingSiamesePairwise.get", "erniekit.modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "re.compile.match", "re.compile.match"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "False", ")", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-6", ")", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "1.0", ")", "\n", "param_name_to_exclue_from_weight_decay", "=", "re", ".", "compile", "(", "r'.*layer_norm_scale|.*layer_norm_bias|.*b_0'", ")", "\n", "\n", "parameters", "=", "None", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "parameters", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "apply_decay_param_fun", "=", "lambda", "\n", "n", ":", "not", "param_name_to_exclue_from_weight_decay", ".", "match", "(", "n", ")", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "return", "self", ".", "optimizer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.bow_matching_pairwise.BowMatchingPairwise.__init__": [[14, 18], ["model.base_matching.BaseMatching.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "BaseMatching", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.bow_matching_pairwise.BowMatchingPairwise.structure": [[19, 33], ["bow_matching_pairwise.BowMatchingPairwise.model_params.get", "bow_matching_pairwise.BowMatchingPairwise.model_params.get", "bow_matching_pairwise.BowMatchingPairwise.model_params.get", "paddle.nn.Embedding", "paddle.nn.Softsign", "paddle.nn.ReLU", "paddle.nn.Linear", "paddle.nn.CosineSimilarity", "paddle.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\uff0c\u5b9a\u4e49\u9700\u8981\u7528\u5230\u7684\u6210\u5458\u53d8\u91cf\u5373\u53ef\n        :return: None\n        \"\"\"", "\n", "self", ".", "dict_dim", "=", "self", ".", "model_params", ".", "get", "(", "'vocab_size'", ",", "52445", ")", "\n", "self", ".", "emb_dim", "=", "self", ".", "model_params", ".", "get", "(", "'emb_dim'", ",", "128", ")", "\n", "self", ".", "hid_dim", "=", "self", ".", "model_params", ".", "get", "(", "'hid_dim'", ",", "128", ")", "\n", "\n", "self", ".", "embedding", "=", "paddle", ".", "nn", ".", "Embedding", "(", "num_embeddings", "=", "self", ".", "dict_dim", ",", "embedding_dim", "=", "self", ".", "emb_dim", ")", "\n", "self", ".", "softsign", "=", "paddle", ".", "nn", ".", "Softsign", "(", ")", "\n", "self", ".", "relu", "=", "paddle", ".", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "fc", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "hid_dim", ")", "\n", "self", ".", "cos_sim", "=", "paddle", ".", "nn", ".", "CosineSimilarity", "(", "axis", "=", "1", ")", "\n", "self", ".", "loss", "=", "paddle", ".", "nn", ".", "CrossEntropyLoss", "(", "use_softmax", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.bow_matching_pairwise.BowMatchingPairwise.forward": [[34, 118], ["paddle.reshape", "bow_matching_pairwise.BowMatchingPairwise.embedding", "paddle.sum", "bow_matching_pairwise.BowMatchingPairwise.softsign", "bow_matching_pairwise.BowMatchingPairwise.relu", "bow_matching_pairwise.BowMatchingPairwise.cos_sim", "paddle.reshape", "paddle.full", "paddle.nn.functional.margin_ranking_loss", "target_feed_list.append", "bow_matching_pairwise.BowMatchingPairwise.fc", "bow_matching_pairwise.BowMatchingPairwise.cos_sim", "paddle.full", "paddle.subtract", "paddle.reshape", "bow_matching_pairwise.BowMatchingPairwise.loss", "paddle.mean", "paddle.full", "paddle.subtract", "paddle.reshape", "paddle.concat", "paddle.concat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        :param fields_dict: \u52a8\u6001\u56fe\u6a21\u5f0f\u4e0b\u662ftensor\u683c\u5f0f\uff0c\u9759\u6001\u56fe\u6a21\u5f0f\u4e0b\u662fpython\u6570\u7ec4\n        :param phase:\n        :return:\n        \"\"\"", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "fields_name", "=", "[", "\"text_a\"", ",", "\"text_b\"", ",", "\"text_c\"", "]", "\n", "", "else", ":", "\n", "            ", "fields_name", "=", "[", "\"text_a\"", ",", "\"text_b\"", "]", "\n", "\n", "", "emb_dict", "=", "{", "}", "\n", "target_feed_name_list", "=", "[", "]", "\n", "target_feed_list", "=", "[", "]", "\n", "for", "name", "in", "fields_name", ":", "\n", "            ", "instance_text", "=", "fields_dict", "[", "name", "]", "\n", "record_id_text", "=", "instance_text", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_src_ids", "=", "record_id_text", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "text_lens", "=", "record_id_text", "[", "InstanceName", ".", "SEQ_LENS", "]", "\n", "\n", "if", "phase", "!=", "InstanceName", ".", "TRAINING", ":", "\n", "                ", "target_feed_list", ".", "append", "(", "text_src_ids", ")", "\n", "\n", "", "emb", "=", "self", ".", "embedding", "(", "text_src_ids", ")", "\n", "emb_pool", "=", "paddle", ".", "sum", "(", "emb", ",", "axis", "=", "1", ")", "\n", "emb_soft", "=", "self", ".", "softsign", "(", "emb_pool", ")", "\n", "emb_relu", "=", "self", ".", "relu", "(", "self", ".", "fc", "(", "emb_soft", ")", ")", "\n", "emb_dict", "[", "name", "]", "=", "emb_relu", "\n", "\n", "", "q_embeddings", "=", "emb_dict", "[", "\"text_a\"", "]", "\n", "pt_embeddings", "=", "emb_dict", "[", "\"text_b\"", "]", "\n", "\n", "# \u7ef4\u5ea6\u662fbatch_size\u7684\u4e00\u7ef4\u5411\u91cf\uff0c\u6240\u4ee5reshape\u4e3a[batch_size, 1]", "\n", "query_pos_title_score", "=", "paddle", ".", "reshape", "(", "self", ".", "cos_sim", "(", "q_embeddings", ",", "pt_embeddings", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", ":", "\n", "            ", "neg_t_embeddings", "=", "emb_dict", "[", "\"text_c\"", "]", "\n", "query_neg_title_score", "=", "paddle", ".", "reshape", "(", "self", ".", "cos_sim", "(", "q_embeddings", ",", "neg_t_embeddings", ")", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "labels", "=", "paddle", ".", "full", "(", "shape", "=", "[", "1", "]", ",", "fill_value", "=", "1.0", ",", "dtype", "=", "'float32'", ")", "\n", "avg_cost", "=", "paddle", ".", "nn", ".", "functional", ".", "margin_ranking_loss", "(", "query_pos_title_score", ",", "\n", "query_neg_title_score", ",", "labels", ",", "margin", "=", "0.1", ",", "reduction", "=", "'mean'", ")", "\n", "\"\"\"PREDICT_RESULT,LABEL,LOSS \u662f\u5173\u952e\u5b57\uff0c\u5fc5\u987b\u8981\u8d4b\u503c\u5e76\u8fd4\u56de\"\"\"", "\n", "forward_return_dict", "=", "{", "\n", "\"query_pos_title_score\"", ":", "query_pos_title_score", ",", "\n", "\"query_neg_title_score\"", ":", "query_neg_title_score", ",", "\n", "InstanceName", ".", "LOSS", ":", "avg_cost", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "elif", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "ones", "=", "paddle", ".", "full", "(", "shape", "=", "[", "1", "]", ",", "fill_value", "=", "1.0", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "query_pos_title_score", "=", "(", "query_pos_title_score", "+", "1", ")", "/", "2", "\n", "sub_pos_score", "=", "paddle", ".", "subtract", "(", "ones", ",", "query_pos_title_score", ")", "\n", "predictions", "=", "paddle", ".", "reshape", "(", "paddle", ".", "concat", "(", "x", "=", "[", "sub_pos_score", ",", "query_pos_title_score", "]", ",", "\n", "axis", "=", "-", "1", ")", ",", "shape", "=", "[", "-", "1", ",", "2", "]", ")", "\n", "cost", "=", "self", ".", "loss", "(", "predictions", ",", "label", ")", "\n", "avg_cost", "=", "paddle", ".", "mean", "(", "x", "=", "cost", ")", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "predictions", ",", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "LOSS", ":", "avg_cost", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n", "", "else", ":", "\n", "            ", "ones", "=", "paddle", ".", "full", "(", "shape", "=", "[", "1", "]", ",", "fill_value", "=", "1.0", ",", "dtype", "=", "'float32'", ")", "\n", "# \u4e0e\u8bc4\u4f30\u4fdd\u6301\u4e00\u81f4\uff0c\u8ba9\u5176\u53d6\u503c\u8303\u56f4\u53d8\u4e3a0-1", "\n", "query_pos_title_score", "=", "(", "query_pos_title_score", "+", "1", ")", "/", "2", "\n", "sub_pos_score", "=", "paddle", ".", "subtract", "(", "ones", ",", "query_pos_title_score", ")", "\n", "predictions", "=", "paddle", ".", "reshape", "(", "paddle", ".", "concat", "(", "x", "=", "[", "sub_pos_score", ",", "query_pos_title_score", "]", ",", "\n", "axis", "=", "-", "1", ")", ",", "shape", "=", "[", "-", "1", ",", "2", "]", ")", "\n", "target_feed_name_list", "=", "[", "'text_a#src_ids'", ",", "'text_b#src_ids'", "]", "\n", "target_predict_list", "=", "[", "predictions", "]", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", "\n", "}", "\n", "return", "forward_return_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.cnn_classification.CNNClassification.__init__": [[17, 21], ["erniekit.model.model.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.cnn_classification.CNNClassification.structure": [[22, 42], ["cnn_classification.CNNClassification.model_params.get", "cnn_classification.CNNClassification.model_params.get", "cnn_classification.CNNClassification.model_params.get", "cnn_classification.CNNClassification.model_params.get", "cnn_classification.CNNClassification.model_params.get", "cnn_classification.CNNClassification.model_params.get", "paddle.nn.Embedding", "paddle.nn.Embedding", "paddle.nn.Embedding", "paddle.nn.Embedding", "erniekit.modules.encoder.CNNEncoder", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.Linear", "paddle.nn.CrossEntropyLoss", "paddle.nn.CrossEntropyLoss", "paddle.nn.CrossEntropyLoss", "paddle.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\uff0c\u5b9a\u4e49\u9700\u8981\u7528\u5230\u7684\u6210\u5458\u53d8\u91cf\u5373\u53ef\n        :return: None\n        \"\"\"", "\n", "self", ".", "dict_dim", "=", "self", ".", "model_params", ".", "get", "(", "'vocab_size'", ",", "33261", ")", "\n", "self", ".", "emb_dim", "=", "self", ".", "model_params", ".", "get", "(", "'emb_dim'", ",", "128", ")", "\n", "self", ".", "filter_sizes", "=", "self", ".", "model_params", ".", "get", "(", "\"filter_sizes\"", ",", "[", "3", "]", ")", "\n", "self", ".", "hid_dim", "=", "self", ".", "model_params", ".", "get", "(", "'hid_dim'", ",", "128", ")", "\n", "self", ".", "hid_dim2", "=", "self", ".", "model_params", ".", "get", "(", "'hid_dim2'", ",", "96", ")", "\n", "self", ".", "num_labels", "=", "self", ".", "model_params", ".", "get", "(", "'num_labels'", ",", "2", ")", "\n", "\n", "self", ".", "num_filter", "=", "self", ".", "hid_dim", "\n", "\n", "self", ".", "embedding", "=", "paddle", ".", "nn", ".", "Embedding", "(", "num_embeddings", "=", "self", ".", "dict_dim", ",", "embedding_dim", "=", "self", ".", "emb_dim", ")", "\n", "self", ".", "cnn_encoder", "=", "CNNEncoder", "(", "emb_dim", "=", "self", ".", "emb_dim", ",", "num_filter", "=", "self", ".", "num_filter", ",", "\n", "ngram_filter_sizes", "=", "self", ".", "filter_sizes", ")", "\n", "self", ".", "fc_1", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim", ",", "out_features", "=", "self", ".", "hid_dim2", ")", "\n", "# self.fc_2 = paddle.nn.Linear(in_features=self.hid_dim, out_features=self.hid_dim2)", "\n", "self", ".", "fc_prediction", "=", "paddle", ".", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "hid_dim2", ",", "out_features", "=", "self", ".", "num_labels", ")", "\n", "self", ".", "loss", "=", "paddle", ".", "nn", ".", "CrossEntropyLoss", "(", "use_softmax", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.cnn_classification.CNNClassification.forward": [[43, 96], ["cnn_classification.CNNClassification.embedding", "cnn_classification.CNNClassification.cnn_encoder", "cnn_classification.CNNClassification.fc_1", "cnn_classification.CNNClassification.fc_prediction", "paddle.softmax", "paddle.softmax", "cnn_classification.CNNClassification.loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        :param fields_dict: \u52a8\u6001\u56fe\u6a21\u5f0f\u4e0b\u662ftensor\u683c\u5f0f\uff0c\u9759\u6001\u56fe\u6a21\u5f0f\u4e0b\u662fpython\u6570\u7ec4\n        :param phase:\n        :return:\n        \"\"\"", "\n", "instance_text_a", "=", "fields_dict", "[", "\"text_a\"", "]", "\n", "record_id_text_a", "=", "instance_text_a", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "text_src", "=", "record_id_text_a", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "\n", "emb_output", "=", "self", ".", "embedding", "(", "text_src", ")", "\n", "cnn_output", "=", "self", ".", "cnn_encoder", "(", "emb_output", ")", "\n", "# print(\"size of input text:\", text_src.shape)", "\n", "# print(\"size of emb_output:\", emb_output.shape)", "\n", "# print(\"size of cnn_output:\", cnn_output.shape)", "\n", "# exit(1)", "\n", "# bow_output = paddle.sum(emb_output, axis=1)", "\n", "\n", "# fc_1_output = paddle.tanh(self.fc_1(bow_output))", "\n", "# fc_2_output = paddle.tanh(self.fc_2(fc_1_output))", "\n", "# prediction = self.fc_prediction(fc_2_output)", "\n", "# probs = paddle.nn.functional.softmax(prediction)", "\n", "fc_1_output", "=", "self", ".", "fc_1", "(", "cnn_output", ")", "\n", "fc_prediction_output", "=", "self", ".", "fc_prediction", "(", "fc_1_output", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "fc_prediction_output", ")", "\n", "\n", "if", "phase", "==", "InstanceName", ".", "TRAINING", "or", "phase", "==", "InstanceName", ".", "EVALUATE", "or", "phase", "==", "InstanceName", ".", "TEST", ":", "\n", "            ", "instance_label", "=", "fields_dict", "[", "\"label\"", "]", "\n", "record_id_label", "=", "instance_label", "[", "InstanceName", ".", "RECORD_ID", "]", "\n", "label", "=", "record_id_label", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "# label = paddle.to_tensor(label)", "\n", "cost", "=", "self", ".", "loss", "(", "probs", ",", "label", ")", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "probs", ",", "\n", "InstanceName", ".", "LABEL", ":", "label", ",", "\n", "InstanceName", ".", "LOSS", ":", "cost", "\n", "}", "\n", "", "elif", "phase", "==", "InstanceName", ".", "SAVE_INFERENCE", ":", "\n", "            ", "\"save inference model with jit\"", "\n", "target_predict_list", "=", "[", "probs", "]", "\n", "target_feed_list", "=", "[", "text_src", "]", "\n", "# \u4ee5json\u7684\u5f62\u5f0f\u5b58\u5165\u6a21\u578b\u7684meta\u6587\u4ef6\u4e2d\uff0c\u5728\u79bb\u7ebf\u9884\u6d4b\u7684\u65f6\u5019\u7528\uff0cfield_name#field_tensor_name", "\n", "target_feed_name_list", "=", "[", "\"text_a#src_ids\"", "]", "\n", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "TARGET_FEED", ":", "target_feed_list", ",", "\n", "InstanceName", ".", "TARGET_PREDICTS", ":", "target_predict_list", ",", "\n", "InstanceName", ".", "TARGET_FEED_NAMES", ":", "target_feed_name_list", "\n", "}", "\n", "", "else", ":", "\n", "            ", "forward_return_dict", "=", "{", "\n", "InstanceName", ".", "PREDICT_RESULT", ":", "probs", "\n", "}", "\n", "", "return", "forward_return_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_ernie_model.BaseErnieModel.__init__": [[14, 19], ["model.BaseModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "\"\"\"\n        BaseErnieModel\n        \"\"\"", "\n", "BaseModel", ".", "__init__", "(", "self", ",", "model_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.base_ernie_model.BaseErnieModel.set_optimizer": [[20, 84], ["base_ernie_model.BaseErnieModel.model_params.get", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "paddle.nn.ClipGradByGlobalNorm", "base_ernie_model.BaseErnieModel.parameters", "functools.partial", "base_ernie_model.BaseErnieModel.get", "base_ernie_model.BaseErnieModel.get", "modules.ernie_lr.LinearWarmupDecay", "paddle.optimizer.AdamW", "paddle.optimizer.AdamW", "modules.ernie_lr.exclude_from_weight_decay", "modules.ernie_lr.exclude_from_weight_decay"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.exclude_from_weight_decay", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.exclude_from_weight_decay"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u4f18\u5316\u5668\u8bbe\u7f6e\n        :return: optimizer\n        \"\"\"", "\n", "# \u5b66\u4e60\u7387\u548c\u6743\u91cd\u7684\u8870\u51cf\u8bbe\u7f6e\u5728optimizer\u4e2d\uff0closs\u7684\u7f29\u653e\u8bbe\u7f6e\u5728amp\u4e2d\uff08\u5404\u4e2atrainer\u4e2d\u8fdb\u884c\u8bbe\u7f6e\uff09\u3002", "\n", "# TODO:\u9700\u8981\u8003\u8651\u5b66\u4e60\u7387\u8870\u51cf\u3001\u6743\u91cd\u8870\u51cf\u8bbe\u7f6e\u3001 loss\u7684\u7f29\u653e\u8bbe\u7f6e", "\n", "opt_param", "=", "self", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "self", ".", "lr", "=", "opt_param", ".", "get", "(", "\"learning_rate\"", ",", "2e-5", ")", "\n", "weight_decay", "=", "opt_param", ".", "get", "(", "\"weight_decay\"", ",", "0.01", ")", "\n", "self", ".", "use_lr_decay", "=", "opt_param", ".", "get", "(", "\"use_lr_decay\"", ",", "True", ")", "\n", "self", ".", "use_default_decay", "=", "opt_param", ".", "get", "(", "\"use_default_decay\"", ",", "False", ")", "\n", "\n", "epsilon", "=", "opt_param", ".", "get", "(", "\"epsilon\"", ",", "1e-8", ")", "\n", "beta1", "=", "0.9", "\n", "beta2", "=", "0.95", "\n", "clip_norm_thres", "=", "1.0", "\n", "\n", "use_layer_decay", "=", "opt_param", ".", "get", "(", "\"use_layer_decay\"", ",", "False", ")", "\n", "layer_decay_ratio", "=", "opt_param", ".", "get", "(", "\"layer_decay_ratio\"", ",", "0.95", ")", "\n", "n_layers", "=", "opt_param", ".", "get", "(", "\"n_layers\"", ",", "60", ")", "\n", "server_layers", "=", "opt_param", ".", "get", "(", "\"sharing_layers\"", ",", "48", ")", "\n", "\n", "g_clip", "=", "paddle", ".", "nn", ".", "ClipGradByGlobalNorm", "(", "clip_norm", "=", "clip_norm_thres", ")", "\n", "\n", "parameters", "=", "None", "\n", "if", "self", ".", "is_dygraph", ":", "\n", "            ", "parameters", "=", "self", ".", "parameters", "(", ")", "\n", "\n", "", "if", "use_layer_decay", ":", "\n", "            ", "assert", "layer_decay_ratio", ">", "0", "\n", "layer_decay_fn", "=", "partial", "(", "lr_decay_fn", ",", "\n", "decay_rate", "=", "layer_decay_ratio", ",", "\n", "n_layers", "=", "n_layers", ",", "\n", "server_layers", "=", "server_layers", ")", "\n", "", "else", ":", "\n", "            ", "layer_decay_fn", "=", "None", "\n", "\n", "", "if", "self", ".", "use_lr_decay", ":", "\n", "            ", "max_train_steps", "=", "opt_param", ".", "get", "(", "\"max_train_steps\"", ",", "0", ")", "\n", "warmup_steps", "=", "opt_param", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "self", ".", "lr_scheduler", "=", "LinearWarmupDecay", "(", "base_lr", "=", "self", ".", "lr", ",", "end_lr", "=", "0.0", ",", "warmup_steps", "=", "warmup_steps", ",", "\n", "decay_steps", "=", "max_train_steps", ",", "num_train_steps", "=", "max_train_steps", ")", "\n", "\n", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "learning_rate", "=", "self", ".", "lr_scheduler", ",", "\n", "beta1", "=", "beta1", ",", "\n", "beta2", "=", "beta2", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "lr_ratio", "=", "layer_decay_fn", ",", "\n", "apply_decay_param_fun", "=", "lambda", "n", ":", "not", "exclude_from_weight_decay", "(", "n", ")", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "paddle", ".", "optimizer", ".", "AdamW", "(", "self", ".", "lr", ",", "\n", "beta1", "=", "beta1", ",", "\n", "beta2", "=", "beta2", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "parameters", "=", "parameters", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "lr_ratio", "=", "layer_decay_fn", ",", "\n", "apply_decay_param_fun", "=", "lambda", "n", ":", "not", "exclude_from_weight_decay", "(", "n", ")", ",", "\n", "grad_clip", "=", "g_clip", ")", "\n", "\n", "", "return", "self", ".", "optimizer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.__init__": [[13, 20], ["paddle.nn.Layer.__init__", "model.BaseModel.model_params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["    ", "def", "__init__", "(", "self", ",", "model_params", ")", ":", "\n", "        ", "paddle", ".", "nn", ".", "Layer", ".", "__init__", "(", "self", ")", "\n", "self", ".", "model_params", "=", "model_params", "\n", "self", ".", "is_dygraph", "=", "self", ".", "model_params", ".", "get", "(", "\"is_dygraph\"", ",", "0", ")", "\n", "self", ".", "lr", "=", "None", "# \u5b66\u4e60\u7387\uff0c\u5fc5\u987b\u5728\u5b50\u7c7b\u4e2d\u5b9e\u73b0", "\n", "self", ".", "lr_scheduler", "=", "None", "# \u5b66\u4e60\u7387\u7684\u8870\u51cf\u8bbe\u7f6e\uff0c\u5fc5\u987b\u5728\u5b50\u7c7b\u4e2d\u5b9e\u73b0", "\n", "self", ".", "optimizer", "=", "None", "# \u4f18\u5316\u5668\u8bbe\u5b9a\uff0c\u5fc5\u987b\u5728\u5b50\u7c7b\u4e2d\u5b9e\u73b0", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.structure": [[21, 27], ["None"], "methods", ["None"], ["", "def", "structure", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u7f51\u7edc\u7ed3\u6784\u7ec4\u7ec7\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.forward": [[28, 36], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        \u524d\u5411\u8ba1\u7b97\n        :param fields_dict:\n        :param phase:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.get_metrics": [[37, 46], ["None"], "methods", ["None"], ["", "def", "get_metrics", "(", "self", ",", "forward_return_dict", ",", "meta_info", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        \u6a21\u578b\u6548\u679c\u8bc4\u4f30\n        :param forward_return_dict: \u524d\u5411\u8ba1\u7b97\u5f97\u51fa\u7684\u7ed3\u679c\n        :param meta_info: \u5e38\u7528\u7684meta\u4fe1\u606f\uff0c\u5982step, used_time, gpu_id\u7b49\n        :param phase: \u5f53\u524d\u8c03\u7528\u7684\u9636\u6bb5\uff0c\u5305\u542b\u8bad\u7ec3\u548c\u8bc4\u4f30\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.fields_process": [[47, 53], ["None"], "methods", ["None"], ["", "def", "fields_process", "(", "self", ",", "fields_dict", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        \u5bf9fields_dict\u4e2d\u5e8f\u5217\u5316\u597d\u7684id\u6309\u9700\u505a\u4e8c\u6b21\u5904\u7406\u3002\n        :return: \u5904\u7406\u597d\u7684fields\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.set_optimizer": [[54, 59], ["None"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u4f18\u5316\u5668\u8bbe\u7f6e\n        :return: optimizer\n        \"\"\"", "\n", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_static_generation_trainer.CustomGenerationTrainer.__init__": [[21, 29], ["erniekit.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.__init__", "custom_static_generation_trainer.CustomGenerationTrainer.params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        :param params:\u524d\u7aefjson\u4e2d\u8bbe\u7f6e\u7684\u53c2\u6570\n        :param data_set_reader: \u6570\u636e\u96c6\u5b9e\u4f8b\uff0c\u5305\u62ec\u8bad\u7ec3\u96c6\u3001\u8bc4\u4f30\u96c6\u3001\u6d4b\u8bd5\u96c6\u3001\u9884\u6d4b\u96c6\n        :param model:\u6a21\u578b\u7ec4\u7f51\u5b9e\u4f8b\n        \"\"\"", "\n", "BaseStaticTrainerErnieGen", ".", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "model", ")", "\n", "self", ".", "return_numpy", "=", "self", ".", "params", ".", "get", "(", "\"return_numpy\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_static_generation_trainer.CustomGenerationTrainer.do_train": [[30, 117], ["custom_static_generation_trainer.CustomGenerationTrainer.params.get", "paddle.is_server", "paddle.is_server", "logging.debug", "logging.debug", "custom_static_generation_trainer.CustomGenerationTrainer.data_set_reader.train_reader.get_num_examples", "custom_static_generation_trainer.CustomGenerationTrainer.data_set_reader.train_reader.run", "time.time", "custom_static_generation_trainer.CustomGenerationTrainer.save_model", "paddle.worker_index", "paddle.worker_index", "logging.info", "custom_static_generation_trainer.CustomGenerationTrainer.do_evaluate", "logging.info", "custom_static_generation_trainer.CustomGenerationTrainer.do_evaluate", "logging.error", "custom_static_generation_trainer.CustomGenerationTrainer.model_class.lr_scheduler.step", "custom_static_generation_trainer.CustomGenerationTrainer.data_set_reader.train_reader.stop", "traceback.format_exc", "custom_static_generation_trainer.CustomGenerationTrainer.train_exe.run", "custom_static_generation_trainer.CustomGenerationTrainer.train_exe.run", "custom_static_generation_trainer.CustomGenerationTrainer.train_exe.run", "custom_static_generation_trainer.CustomGenerationTrainer.train_exe.run", "collections.OrderedDict", "zip", "time.time", "collections.OrderedDict", "custom_static_generation_trainer.CustomGenerationTrainer.data_set_reader.train_reader.get_train_progress", "logging.info", "custom_static_generation_trainer.CustomGenerationTrainer.model_class.get_metrics", "time.time", "custom_static_generation_trainer.CustomGenerationTrainer.do_evaluate", "custom_static_generation_trainer.CustomGenerationTrainer.do_evaluate", "custom_static_generation_trainer.CustomGenerationTrainer.save_model", "numpy.array", "custom_static_generation_trainer.CustomGenerationTrainer.data_set_reader.train_reader.paddle_data_loader.queue.size", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_model", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.stop", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_train_progress", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.get_metrics", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_model"], ["", "def", "do_train", "(", "self", ")", ":", "\n", "        ", "\"\"\" \u542f\u52a8\u6570\u636e\u96c6\u5faa\u73af\uff0c\u5f00\u59cb\u8bad\u7ec3\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "use_fleet", "and", "fleet", ".", "is_server", "(", ")", ":", "\n", "            ", "logging", ".", "debug", "(", "\"is fleet.server, over\"", ")", "\n", "return", "\n", "", "if", "self", ".", "use_fleet", ":", "\n", "            ", "logging", ".", "debug", "(", "\"worker_index%d start train....\"", "%", "fleet", ".", "worker_index", "(", ")", ")", "\n", "\n", "", "num_train_examples", "=", "self", ".", "params", ".", "get", "(", "\"num_train_examples\"", ",", "0", ")", "\n", "if", "num_train_examples", "==", "0", ":", "\n", "            ", "num_train_examples", "=", "self", ".", "data_set_reader", ".", "train_reader", ".", "get_num_examples", "(", ")", "\n", "\n", "", "steps", "=", "1", "\n", "if", "self", ".", "params", "[", "\"is_do_train\"", "]", ":", "\n", "            ", "self", ".", "data_set_reader", ".", "train_reader", ".", "run", "(", ")", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "try", ":", "\n", "                        ", "if", "steps", "%", "self", ".", "params", "[", "\"train_log_step\"", "]", "!=", "0", ":", "\n", "                            ", "if", "self", ".", "use_fleet", ":", "\n", "                                ", "self", ".", "train_exe", ".", "run", "(", "program", "=", "self", ".", "train_program", ",", "fetch_list", "=", "[", "]", ",", "return_numpy", "=", "True", ")", "\n", "", "else", ":", "\n", "                                ", "self", ".", "train_exe", ".", "run", "(", "fetch_list", "=", "[", "]", ",", "return_numpy", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                            ", "if", "self", ".", "use_fleet", ":", "\n", "                                ", "fetch_output", "=", "self", ".", "train_exe", ".", "run", "(", "program", "=", "self", ".", "train_program", ",", "\n", "fetch_list", "=", "self", ".", "fetch_list_train", ",", "\n", "return_numpy", "=", "True", ")", "\n", "", "else", ":", "\n", "                                ", "fetch_output", "=", "self", ".", "train_exe", ".", "run", "(", "\n", "fetch_list", "=", "self", ".", "fetch_list_train", ",", "\n", "return_numpy", "=", "True", ")", "\n", "fetch_output_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "zip", "(", "self", ".", "fetch_list_train_key", ",", "fetch_output", ")", ":", "\n", "                                    ", "value", "=", "np", ".", "array", "(", "value", ")", "\n", "fetch_output_dict", "[", "key", "]", "=", "value", "\n", "\n", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "used_time", "=", "time_end", "-", "time_begin", "\n", "meta_info", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "meta_info", "[", "InstanceName", ".", "STEP", "]", "=", "steps", "\n", "meta_info", "[", "InstanceName", ".", "GPU_ID", "]", "=", "self", ".", "gpu_id", "\n", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "=", "used_time", "\n", "meta_info", "[", "\"speed\"", "]", "=", "self", ".", "params", "[", "\"train_log_step\"", "]", "/", "used_time", "\n", "\n", "current_example", ",", "current_epoch", "=", "self", ".", "data_set_reader", ".", "train_reader", ".", "get_train_progress", "(", ")", "\n", "logging", ".", "info", "(", "\"epoch {0} progress {1}/{2} pyreader queue size {3} learning_rate {4}\"", ".", "\n", "format", "(", "current_epoch", ",", "current_example", ",", "num_train_examples", ",", "\n", "self", ".", "data_set_reader", ".", "train_reader", ".", "paddle_data_loader", ".", "queue", ".", "size", "(", ")", ",", "\n", "np", ".", "mean", "(", "fetch_output_dict", "[", "\"lr\"", "]", ")", ")", ")", "\n", "\n", "metrics_output", "=", "self", ".", "model_class", ".", "get_metrics", "(", "fetch_output_dict", ",", "\n", "meta_info", ",", "InstanceName", ".", "TRAINING", ",", "reader", "=", "None", ")", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "if", "self", ".", "model_class", ".", "lr_scheduler", ":", "\n", "# \u8fd9\u4e00\u6b65\u4e00\u5b9a\u8981\u6709\uff0c\u6ca1\u6709\u7684\u8bddlr_scheduler\u4e0d\u4f1a\u751f\u6548\uff0c\u5b66\u4e60\u7387\u4e00\u76f4\u4e3a0", "\n", "                            ", "self", ".", "model_class", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "if", "steps", "%", "self", ".", "params", "[", "\"eval_step\"", "]", "==", "0", ":", "\n", "                            ", "if", "self", ".", "params", "[", "\"is_eval_dev\"", "]", ":", "\n", "                                ", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "dev_reader", ",", "InstanceName", ".", "EVALUATE", ",", "steps", ")", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_test\"", "]", ":", "\n", "                                ", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "test_reader", ",", "InstanceName", ".", "TEST", ",", "steps", ")", "\n", "", "", "if", "self", ".", "trainer_id", "==", "0", ":", "\n", "                            ", "if", "steps", "%", "self", ".", "params", "[", "\"save_model_step\"", "]", "==", "0", ":", "\n", "                                ", "self", ".", "save_model", "(", "steps", ")", "\n", "", "", "steps", "+=", "1", "\n", "", "except", "fluid", ".", "core", ".", "EOFException", ":", "\n", "                        ", "self", ".", "data_set_reader", ".", "train_reader", ".", "stop", "(", ")", "\n", "break", "\n", "\n", "", "", "if", "self", ".", "params", "[", "\"is_eval_dev\"", "]", ":", "\n", "                    ", "logging", ".", "info", "(", "\"Final evaluate result: \"", ")", "\n", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "dev_reader", ",", "InstanceName", ".", "EVALUATE", ",", "steps", ")", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_test\"", "]", ":", "\n", "                    ", "logging", ".", "info", "(", "\"Final test result: \"", ")", "\n", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "test_reader", ",", "InstanceName", ".", "TEST", ",", "steps", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "logging", ".", "error", "(", "'traceback.format_exc():%s'", "%", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "trainer_id", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_static_generation_trainer.CustomGenerationTrainer.do_evaluate": [[119, 158], ["collections.OrderedDict", "custom_static_generation_trainer.CustomGenerationTrainer.model_class.init_metrics", "reader.run", "time.time", "collections.OrderedDict", "time.time", "custom_static_generation_trainer.CustomGenerationTrainer.model_class.get_metrics", "ValueError", "custom_static_generation_trainer.CustomGenerationTrainer.executor.run", "collections.OrderedDict", "zip", "custom_static_generation_trainer.CustomGenerationTrainer.model_class.add_metric_result", "reader.stop", "collections.OrderedDict.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.init_metrics", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.get_metrics", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.ernie_infilling_generation.ErnieInfillingGeneration.add_metric_result", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.stop", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "", "", "def", "do_evaluate", "(", "self", ",", "reader", ",", "phase", ",", "step", ")", ":", "\n", "        ", "\"\"\"\u5728\u5f53\u524d\u7684\u8bad\u7ec3\u72b6\u6001\u4e0b\uff0c\u5bf9\u67d0\u4e2a\u6d4b\u8bd5\u96c6\u8fdb\u884c\u8bc4\u4f30\n        :param reader:\u5f85\u8bc4\u4f30\u6570\u636e\u96c6\n        :param phase:\u5f53\u524d\u7684\u8fd0\u884c\u9636\u6bb5\n        :param step:\u5f53\u524d\u7684\u8fd0\u884c\u6b65\u6570\n        \"\"\"", "\n", "\n", "if", "not", "reader", ":", "\n", "            ", "raise", "ValueError", "(", "\"{0} reader is none\"", ".", "format", "(", "phase", ")", ")", "\n", "\n", "", "meta_info", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "meta_info", "[", "InstanceName", ".", "GPU_ID", "]", "=", "self", ".", "gpu_id", "\n", "meta_info", "[", "\"stage\"", "]", "=", "step", "\n", "self", ".", "model_class", ".", "init_metrics", "(", "meta_info", ",", "phase", ")", "\n", "\n", "reader", ".", "run", "(", ")", "\n", "all_metrics_tensor_value", "=", "[", "]", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "fetch_output_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "while", "True", ":", "\n", "            ", "try", ":", "\n", "                ", "metrics_tensor_value", "=", "self", ".", "executor", ".", "run", "(", "program", "=", "self", ".", "evaluate_program", ",", "\n", "fetch_list", "=", "self", ".", "fetch_list_evaluate", ",", "\n", "return_numpy", "=", "not", "reader", ".", "do_dec", ")", "\n", "cur_output_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "zip", "(", "self", ".", "fetch_list_evaluate_key", ",", "metrics_tensor_value", ")", ":", "\n", "                    ", "if", "reader", ".", "do_dec", ":", "\n", "                        ", "cur_output_dict", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "                        ", "fetch_output_dict", "[", "key", "]", "=", "fetch_output_dict", ".", "get", "(", "key", ",", "[", "]", ")", "+", "[", "value", "]", "\n", "", "", "self", ".", "model_class", ".", "add_metric_result", "(", "cur_output_dict", ",", "phase", ")", "\n", "", "except", "fluid", ".", "core", ".", "EOFException", ":", "\n", "                ", "reader", ".", "stop", "(", ")", "\n", "break", "\n", "\n", "", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "used_time", "=", "time_end", "-", "time_begin", "\n", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "=", "used_time", "\n", "self", ".", "model_class", ".", "get_metrics", "(", "fetch_output_dict", ",", "meta_info", ",", "phase", ",", "reader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_static_generation_trainer.CustomGenerationTrainer.do_visual": [[208, 212], ["None"], "methods", ["None"], ["", "def", "do_visual", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u8bc4\u4f30\u6307\u6807\u7684\u53ef\u89c6\u5316\u5c55\u793a\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_trainer.CustomTrainer.__init__": [[19, 27], ["erniekit.controller.static_trainer.BaseStaticTrainer.__init__", "custom_trainer.CustomTrainer.params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["        ", "\"\"\"\n        :param params:\u524d\u7aefjson\u4e2d\u8bbe\u7f6e\u7684\u53c2\u6570\n        :param data_set_reader: \u6570\u636e\u96c6\u5b9e\u4f8b\uff0c\u5305\u62ec\u8bad\u7ec3\u96c6\u3001\u8bc4\u4f30\u96c6\u3001\u6d4b\u8bd5\u96c6\u3001\u9884\u6d4b\u96c6\n        :param model:\u6a21\u578b\u7ec4\u7f51\u5b9e\u4f8b\n        \"\"\"", "\n", "BaseStaticTrainer", ".", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "model", ")", "\n", "self", ".", "return_numpy", "=", "self", ".", "params", ".", "get", "(", "\"return_numpy\"", ",", "True", ")", "\n", "\n", "", "def", "do_train", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_trainer.CustomTrainer.do_train": [[28, 104], ["custom_trainer.CustomTrainer.params.get", "time.time", "enumerate", "paddle.is_server", "logging.debug", "logging.debug", "custom_trainer.CustomTrainer.data_set_reader.train_reader.get_num_examples", "dg", "custom_trainer.CustomTrainer.data_set_reader.train_reader.dataset.convert_input_list_to_dict", "logging.info", "custom_trainer.CustomTrainer.do_evaluate", "logging.info", "custom_trainer.CustomTrainer.do_evaluate", "custom_trainer.CustomTrainer.save_model", "custom_trainer.CustomTrainer.data_set_reader.train_reader.dataset.get_train_progress", "logging.info", "collections.OrderedDict", "zip", "time.time", "collections.OrderedDict", "custom_trainer.CustomTrainer.model_class.get_metrics", "custom_trainer.CustomTrainer.model_class.lr_scheduler.step", "paddle.worker_index", "custom_trainer.CustomTrainer.train_exe.run", "custom_trainer.CustomTrainer.train_exe.run", "custom_trainer.CustomTrainer.train_exe.run", "custom_trainer.CustomTrainer.train_exe.run", "custom_trainer.CustomTrainer.do_evaluate", "custom_trainer.CustomTrainer.do_evaluate", "custom_trainer.CustomTrainer.save_model", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.convert_input_list_to_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_model", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_train_progress", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.get_metrics", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_model"], ["        ", "\"\"\" \u542f\u52a8\u6570\u636e\u96c6\u5faa\u73af\uff0c\u5f00\u59cb\u8bad\u7ec3\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "use_fleet", "and", "fleet", ".", "is_server", "(", ")", ":", "\n", "            ", "logging", ".", "debug", "(", "\"is fleet.server, over\"", ")", "\n", "return", "\n", "", "if", "self", ".", "use_fleet", ":", "\n", "            ", "logging", ".", "debug", "(", "\"worker_index%d start train....\"", "%", "fleet", ".", "worker_index", "(", ")", ")", "\n", "\n", "", "num_train_examples", "=", "self", ".", "params", ".", "get", "(", "\"num_train_examples\"", ",", "0", ")", "\n", "if", "num_train_examples", "==", "0", ":", "\n", "            ", "num_train_examples", "=", "self", ".", "data_set_reader", ".", "train_reader", ".", "get_num_examples", "(", ")", "\n", "\n", "", "dg", "=", "self", ".", "data_set_reader", ".", "train_reader", "\n", "steps", "=", "1", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_id", ",", "data", "in", "enumerate", "(", "dg", "(", ")", ")", ":", "\n", "            ", "feed_dict", "=", "self", ".", "data_set_reader", ".", "train_reader", ".", "dataset", ".", "convert_input_list_to_dict", "(", "data", ")", "\n", "if", "steps", "%", "self", ".", "params", "[", "\"train_log_step\"", "]", "!=", "0", ":", "\n", "                ", "if", "self", ".", "use_fleet", ":", "\n", "                    ", "self", ".", "train_exe", ".", "run", "(", "program", "=", "self", ".", "train_program", ",", "feed", "=", "feed_dict", ",", "fetch_list", "=", "[", "]", ",", "return_numpy", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "train_exe", ".", "run", "(", "feed", "=", "feed_dict", ",", "fetch_list", "=", "[", "]", ",", "return_numpy", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "use_fleet", ":", "\n", "                    ", "fetch_output", "=", "self", ".", "train_exe", ".", "run", "(", "program", "=", "self", ".", "train_program", ",", "\n", "feed", "=", "feed_dict", ",", "\n", "fetch_list", "=", "self", ".", "fetch_list_train", ",", "\n", "return_numpy", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "fetch_output", "=", "self", ".", "train_exe", ".", "run", "(", "feed", "=", "feed_dict", ",", "\n", "fetch_list", "=", "self", ".", "fetch_list_train", ",", "\n", "return_numpy", "=", "True", ")", "\n", "\n", "", "current_example", ",", "current_epoch", "=", "self", ".", "data_set_reader", ".", "train_reader", ".", "dataset", ".", "get_train_progress", "(", ")", "\n", "logging", ".", "info", "(", "\"epoch {0} progress {1}/{2}\"", ".", "format", "(", "current_epoch", ",", "current_example", ",", "num_train_examples", ")", ")", "\n", "\n", "fetch_output_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "zip", "(", "self", ".", "fetch_list_train_key", ",", "fetch_output", ")", ":", "\n", "                    ", "if", "key", "==", "InstanceName", ".", "LOSS", "and", "not", "self", ".", "return_numpy", ":", "\n", "                        ", "value", "=", "np", ".", "array", "(", "value", ")", "\n", "", "fetch_output_dict", "[", "key", "]", "=", "value", "\n", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "used_time", "=", "time_end", "-", "time_begin", "\n", "meta_info", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "meta_info", "[", "InstanceName", ".", "STEP", "]", "=", "steps", "\n", "meta_info", "[", "InstanceName", ".", "GPU_ID", "]", "=", "self", ".", "gpu_id", "\n", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "=", "used_time", "\n", "\n", "metrics_output", "=", "self", ".", "model_class", ".", "get_metrics", "(", "fetch_output_dict", ",", "meta_info", ",", "InstanceName", ".", "TRAINING", ")", "\n", "\n", "", "if", "self", ".", "model_class", ".", "lr_scheduler", ":", "\n", "# \u8fd9\u4e00\u6b65\u4e00\u5b9a\u8981\u6709\uff0c\u6ca1\u6709\u7684\u8bddlr_scheduler\u4e0d\u4f1a\u751f\u6548\uff0c\u5b66\u4e60\u7387\u4e00\u76f4\u4e3a0", "\n", "                ", "self", ".", "model_class", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "if", "steps", "%", "self", ".", "params", "[", "\"eval_step\"", "]", "==", "0", ":", "\n", "                ", "if", "self", ".", "params", "[", "\"is_eval_dev\"", "]", ":", "\n", "                    ", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "dev_reader", ",", "InstanceName", ".", "EVALUATE", ",", "steps", ")", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_test\"", "]", ":", "\n", "                    ", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "test_reader", ",", "InstanceName", ".", "TEST", ",", "steps", ")", "\n", "", "", "if", "self", ".", "trainer_id", "==", "0", ":", "\n", "                ", "if", "steps", "%", "self", ".", "params", "[", "\"save_model_step\"", "]", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "steps", ")", "\n", "", "", "steps", "+=", "1", "\n", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_dev\"", "]", ":", "\n", "            ", "logging", ".", "info", "(", "\"Final evaluate result: \"", ")", "\n", "metrics_output", "=", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "dev_reader", ",", "InstanceName", ".", "EVALUATE", ",", "steps", ")", "\n", "self", ".", "eval_metrics", "=", "metrics_output", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_test\"", "]", ":", "\n", "            ", "logging", ".", "info", "(", "\"Final test result: \"", ")", "\n", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "test_reader", ",", "InstanceName", ".", "TEST", ",", "steps", ")", "\n", "\n", "", "if", "self", ".", "trainer_id", "==", "0", ":", "\n", "            ", "self", ".", "save_model", "(", "steps", ")", "\n", "\n", "", "", "def", "do_evaluate", "(", "self", ",", "reader", ",", "phase", ",", "step", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_trainer.CustomTrainer.do_evaluate": [[105, 159], ["time.time", "enumerate", "collections.OrderedDict", "zip", "time.time", "collections.OrderedDict", "custom_trainer.CustomTrainer.model_class.get_metrics", "reader", "reader.dataset.convert_input_list_to_dict", "custom_trainer.CustomTrainer.executor.run", "range", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.get_metrics", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader.BaseDataSetReader.convert_input_list_to_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["        ", "\"\"\"\u5728\u5f53\u524d\u7684\u8bad\u7ec3\u72b6\u6001\u4e0b\uff0c\u5bf9\u67d0\u4e2a\u6d4b\u8bd5\u96c6\u8fdb\u884c\u8bc4\u4f30\n        :param reader:\u5f85\u8bc4\u4f30\u6570\u636e\u96c6\n        :param phase:\u5f53\u524d\u7684\u8fd0\u884c\u9636\u6bb5\n        :param step:\u5f53\u524d\u7684\u8fd0\u884c\u6b65\u6570\n        \"\"\"", "\n", "# if not reader:", "\n", "#     raise ValueError(\"{0} reader is none\".format(phase))", "\n", "# reader.run()", "\n", "all_metrics_tensor_value", "=", "[", "]", "\n", "i", "=", "0", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_id", ",", "data", "in", "enumerate", "(", "reader", "(", ")", ")", ":", "\n", "            ", "feed_dict", "=", "reader", ".", "dataset", ".", "convert_input_list_to_dict", "(", "data", ")", "\n", "metrics_tensor_value", "=", "self", ".", "executor", ".", "run", "(", "program", "=", "self", ".", "test_program", ",", "\n", "feed", "=", "feed_dict", ",", "\n", "fetch_list", "=", "self", ".", "fetch_list_evaluate", ",", "\n", "return_numpy", "=", "True", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "all_metrics_tensor_value", "=", "[", "[", "tensor", "]", "for", "tensor", "in", "metrics_tensor_value", "]", "\n", "", "else", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "metrics_tensor_value", ")", ")", ":", "\n", "                    ", "one_tensor_value", "=", "all_metrics_tensor_value", "[", "j", "]", "\n", "all_metrics_tensor_value", "[", "j", "]", "=", "one_tensor_value", "+", "[", "metrics_tensor_value", "[", "j", "]", "]", "\n", "", "", "i", "+=", "1", "\n", "\n", "", "fetch_output_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "zip", "(", "self", ".", "fetch_list_evaluate_key", ",", "all_metrics_tensor_value", ")", ":", "\n", "            ", "if", "key", "==", "InstanceName", ".", "LOSS", "and", "not", "self", ".", "return_numpy", ":", "\n", "                ", "value", "=", "[", "np", ".", "array", "(", "item", ")", "for", "item", "in", "value", "]", "\n", "", "fetch_output_dict", "[", "key", "]", "=", "value", "\n", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "used_time", "=", "time_end", "-", "time_begin", "\n", "\n", "meta_info", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "meta_info", "[", "InstanceName", ".", "STEP", "]", "=", "step", "\n", "meta_info", "[", "InstanceName", ".", "GPU_ID", "]", "=", "self", ".", "gpu_id", "\n", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "=", "used_time", "\n", "\n", "metrics_output", "=", "self", ".", "model_class", ".", "get_metrics", "(", "fetch_output_dict", ",", "meta_info", ",", "phase", ")", "\n", "\n", "\n", "# if self.params.get(\"visualdl_log\", False):", "\n", "#     assert isinstance(metrics_output, OrderedDict), \"the metrics_output must be OrderedDict\"", "\n", "#     eval_loss = np.mean(fetch_output_dict[InstanceName.LOSS])", "\n", "#     self.visualdl_log(metrics_output, eval_loss, step, phase=phase)", "\n", "#", "\n", "# if self.visual_manager and self.params.get(\"metrics_visual\", False):", "\n", "#     self.visual_manager.show_metric(metrics_output, step, tag=phase)", "\n", "\n", "# \u56e0\u5728evaluate\u7684\u65f6\u5019\u4e0d\u4e00\u5b9a\u4f1a\u8fd4\u56deloss\uff0c\u56e0\u6b64\u6ce8\u91ca\u8be5\u90e8\u5206\u4ee3\u7801", "\n", "# loss = np.mean(fetch_output_dict[InstanceName.LOSS])", "\n", "# return loss", "\n", "# xx = paddle.io.DataLoader()", "\n", "\n", "return", "metrics_output", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_trainer.CustomTrainer.do_visual": [[160, 164], ["None"], "methods", ["None"], ["\n", "", "def", "do_visual", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u8bc4\u4f30\u6307\u6807\u7684\u53ef\u89c6\u5316\u5c55\u793a\n        \"\"\"", "\n", "pass", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_dynamic_trainer.CustomDynamicTrainer.__init__": [[18, 25], ["erniekit.controller.dynamic_trainer.BaseDynamicTrainer.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        :param params:\n        :param data_set_reader:\n        :param model_class:\n        \"\"\"", "\n", "BaseDynamicTrainer", ".", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_dynamic_trainer.CustomDynamicTrainer.do_train": [[26, 117], ["custom_dynamic_trainer.CustomDynamicTrainer.params.get", "custom_dynamic_trainer.CustomDynamicTrainer.original_model.model_params.get", "custom_dynamic_trainer.CustomDynamicTrainer.get", "custom_dynamic_trainer.CustomDynamicTrainer.get", "custom_dynamic_trainer.CustomDynamicTrainer.get", "custom_dynamic_trainer.CustomDynamicTrainer.get", "custom_dynamic_trainer.CustomDynamicTrainer.get", "time.time", "enumerate", "custom_dynamic_trainer.CustomDynamicTrainer.data_set_reader.train_reader.get_num_examples", "paddle.amp.GradScaler", "dg", "custom_dynamic_trainer.CustomDynamicTrainer.model_class.train", "custom_dynamic_trainer.CustomDynamicTrainer.model_class.clear_gradients", "custom_dynamic_trainer.CustomDynamicTrainer.optimizer.clear_grad", "logging.info", "custom_dynamic_trainer.CustomDynamicTrainer.do_evaluate", "logging.info", "custom_dynamic_trainer.CustomDynamicTrainer.do_evaluate", "custom_dynamic_trainer.CustomDynamicTrainer.save_models", "paddle.distributed.fleet.distributed_scaler", "paddle.amp.auto_cast", "custom_dynamic_trainer.CustomDynamicTrainer.data_set_reader.train_reader.dataset.convert_fields_to_dict", "custom_dynamic_trainer.CustomDynamicTrainer.model_class", "custom_dynamic_trainer.CustomDynamicTrainer.scaler.scale", "custom_dynamic_trainer.CustomDynamicTrainer.backward", "custom_dynamic_trainer.CustomDynamicTrainer.scaler.minimize", "custom_dynamic_trainer.CustomDynamicTrainer.backward", "custom_dynamic_trainer.CustomDynamicTrainer.optimizer.minimize", "custom_dynamic_trainer.CustomDynamicTrainer.optimizer.step", "custom_dynamic_trainer.CustomDynamicTrainer.original_model.lr_scheduler.get_lr", "custom_dynamic_trainer.CustomDynamicTrainer.original_model.lr_scheduler.step", "time.time", "collections.OrderedDict", "custom_dynamic_trainer.CustomDynamicTrainer.data_set_reader.train_reader.dataset.get_train_progress", "logging.info", "custom_dynamic_trainer.CustomDynamicTrainer.original_model.get_metrics", "time.time", "custom_dynamic_trainer.CustomDynamicTrainer.save_models", "custom_dynamic_trainer.CustomDynamicTrainer.do_evaluate", "custom_dynamic_trainer.CustomDynamicTrainer.do_evaluate", "round"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieModel.train", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.save_models", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.convert_fields_to_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.LinearWarmupDecay.get_lr", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_train_progress", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.get_metrics", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.save_models", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate"], ["", "def", "do_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "dg", "=", "self", ".", "data_set_reader", ".", "train_reader", "\n", "\n", "steps", "=", "1", "\n", "opt_params", "=", "self", ".", "original_model", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "init_loss_scaling", "=", "opt_params", ".", "get", "(", "\"init_loss_scaling\"", ",", "1.0", ")", "\n", "incr_every_n_steps", "=", "opt_params", ".", "get", "(", "\"incr_every_n_steps\"", ",", "1000", ")", "\n", "decr_every_n_nan_or_inf", "=", "opt_params", ".", "get", "(", "\"decr_every_n_nan_or_inf\"", ",", "2", ")", "\n", "incr_ratio", "=", "opt_params", ".", "get", "(", "\"incr_ratio\"", ",", "2.0", ")", "\n", "decr_ratio", "=", "opt_params", ".", "get", "(", "\"decr_ratio\"", ",", "0.8", ")", "\n", "\n", "if", "self", ".", "use_amp", ":", "\n", "            ", "self", ".", "scaler", "=", "paddle", ".", "amp", ".", "GradScaler", "(", "enable", "=", "self", ".", "use_amp", ",", "\n", "init_loss_scaling", "=", "init_loss_scaling", ",", "\n", "incr_ratio", "=", "incr_ratio", ",", "\n", "decr_ratio", "=", "decr_ratio", ",", "\n", "incr_every_n_steps", "=", "incr_every_n_steps", ",", "\n", "decr_every_n_nan_or_inf", "=", "decr_every_n_nan_or_inf", ")", "\n", "if", "self", ".", "multi_devices", ":", "\n", "                ", "self", ".", "scaler", "=", "fleet", ".", "distributed_scaler", "(", "self", ".", "scaler", ")", "\n", "\n", "", "", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_id", ",", "data", "in", "enumerate", "(", "dg", "(", ")", ")", ":", "\n", "            ", "self", ".", "model_class", ".", "train", "(", ")", "\n", "with", "paddle", ".", "amp", ".", "auto_cast", "(", "enable", "=", "self", ".", "use_amp", ")", ":", "\n", "                ", "example", "=", "self", ".", "data_set_reader", ".", "train_reader", ".", "dataset", ".", "convert_fields_to_dict", "(", "data", ",", "need_emb", "=", "False", ")", "\n", "forward_out", "=", "self", ".", "model_class", "(", "example", ",", "phase", "=", "InstanceName", ".", "TRAINING", ")", "\n", "loss", "=", "forward_out", "[", "InstanceName", ".", "LOSS", "]", "\n", "\n", "", "if", "self", ".", "use_amp", ":", "\n", "                ", "loss", "=", "self", ".", "scaler", ".", "scale", "(", "loss", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "minimize", "(", "self", ".", "optimizer", ",", "loss", ")", "\n", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "minimize", "(", "loss", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "model_class", ".", "clear_gradients", "(", ")", "\n", "\n", "if", "self", ".", "original_model", ".", "lr_scheduler", ":", "\n", "                ", "cur_lr", "=", "self", ".", "original_model", ".", "lr_scheduler", ".", "get_lr", "(", ")", "\n", "self", ".", "original_model", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "cur_lr", "=", "self", ".", "original_model", ".", "lr", "\n", "\n", "", "self", ".", "optimizer", ".", "clear_grad", "(", ")", "\n", "\n", "if", "steps", "%", "self", ".", "params", "[", "\"train_log_step\"", "]", "==", "0", ":", "\n", "                ", "time_end", "=", "time", ".", "time", "(", ")", "\n", "used_time", "=", "time_end", "-", "time_begin", "\n", "meta_info", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "meta_info", "[", "InstanceName", ".", "STEP", "]", "=", "steps", "\n", "meta_info", "[", "InstanceName", ".", "GPU_ID", "]", "=", "0", "\n", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "=", "used_time", "\n", "metrics_output", "=", "self", ".", "original_model", ".", "get_metrics", "(", "forward_out", ",", "meta_info", ",", "InstanceName", ".", "TRAINING", ")", "\n", "logging", ".", "info", "(", "\"current learning rate: {0}\"", ".", "format", "(", "round", "(", "cur_lr", ",", "7", ")", ")", ")", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "if", "steps", "%", "self", ".", "params", "[", "\"eval_step\"", "]", "==", "0", ":", "\n", "                ", "if", "self", ".", "params", "[", "\"is_eval_dev\"", "]", ":", "\n", "                    ", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "dev_reader", ",", "InstanceName", ".", "EVALUATE", ",", "steps", ")", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_test\"", "]", ":", "\n", "                    ", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "test_reader", ",", "InstanceName", ".", "TEST", ",", "steps", ")", "\n", "\n", "", "", "if", "steps", "%", "self", ".", "params", "[", "\"save_model_step\"", "]", "==", "0", "and", "self", ".", "worker_index", "==", "0", ":", "\n", "                ", "self", ".", "save_models", "(", "steps", ",", "example", ")", "\n", "\n", "", "steps", "+=", "1", "\n", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_dev\"", "]", ":", "\n", "            ", "logging", ".", "info", "(", "\"Final evaluate result: \"", ")", "\n", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "dev_reader", ",", "InstanceName", ".", "EVALUATE", ",", "steps", ")", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_test\"", "]", ":", "\n", "            ", "logging", ".", "info", "(", "\"Final test result: \"", ")", "\n", "self", ".", "do_evaluate", "(", "self", ".", "data_set_reader", ".", "test_reader", ",", "InstanceName", ".", "TEST", ",", "steps", ")", "\n", "\n", "", "if", "self", ".", "worker_index", "==", "0", ":", "\n", "            ", "self", ".", "save_models", "(", "steps", ",", "example", ")", "\n", "\n", "", "", "def", "do_evaluate", "(", "self", ",", "reader", ",", "phase", ",", "step", ")", ":", "\n", "        ", "\"\"\"\n        :param reader:\n        :param phase:\n        :param step:\n        :return: loss\n        \"\"\"", "\n", "step", "=", "0", "\n", "with", "paddle", ".", "no_grad", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.trainer.custom_dynamic_trainer.CustomDynamicTrainer.do_evaluate": [[118, 147], ["logging.info", "paddle.no_grad", "time.time", "custom_dynamic_trainer.CustomDynamicTrainer.model_class.eval", "collections.OrderedDict", "enumerate", "time.time", "collections.OrderedDict", "custom_dynamic_trainer.CustomDynamicTrainer.original_model.get_metrics", "custom_dynamic_trainer.CustomDynamicTrainer.model_class.train", "reader", "reader.dataset.convert_fields_to_dict", "custom_dynamic_trainer.CustomDynamicTrainer.model_class", "custom_dynamic_trainer.CustomDynamicTrainer.items", "collections.OrderedDict.setdefault().append", "collections.OrderedDict.setdefault"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.get_metrics", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieModel.train", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.convert_fields_to_dict"], ["            ", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "# \u5148\u5207\u6362\u5230eval\u6a21\u5f0f", "\n", "self", ".", "model_class", ".", "eval", "(", ")", "\n", "\n", "fetch_output_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "batch_id", ",", "data", "in", "enumerate", "(", "reader", "(", ")", ")", ":", "\n", "                ", "step", "+=", "1", "\n", "example", "=", "reader", ".", "dataset", ".", "convert_fields_to_dict", "(", "data", ",", "need_emb", "=", "False", ")", "\n", "forward_out", "=", "self", ".", "model_class", "(", "example", ",", "phase", "=", "phase", ")", "\n", "for", "key", ",", "value", "in", "forward_out", ".", "items", "(", ")", ":", "\n", "                    ", "fetch_output_dict", ".", "setdefault", "(", "key", ",", "[", "]", ")", ".", "append", "(", "value", ")", "\n", "\n", "", "", "time_end", "=", "time", ".", "time", "(", ")", "\n", "used_time", "=", "time_end", "-", "time_begin", "\n", "meta_info", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "meta_info", "[", "InstanceName", ".", "STEP", "]", "=", "step", "\n", "meta_info", "[", "InstanceName", ".", "TIME_COST", "]", "=", "used_time", "\n", "metrics_output", "=", "self", ".", "original_model", ".", "get_metrics", "(", "fetch_output_dict", ",", "meta_info", ",", "phase", ")", "\n", "# metrics_output = self.original_model.get_metrics(forward_out, meta_info, phase)", "\n", "self", ".", "model_class", ".", "train", "(", ")", "\n", "", "logging", ".", "info", "(", "\"eval step = {0}\"", ".", "format", "(", "step", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.inference.custom_inference.CustomInference.__init__": [[18, 25], ["erniekit.controller.inference.BaseInference.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "parser_handler", ")", ":", "\n", "        ", "\"\"\"\n        :param params:\u524d\u7aefjson\u4e2d\u8bbe\u7f6e\u7684\u53c2\u6570\n        :param data_set_reader: \u9884\u6d4b\u96c6reader\n        :param parser_handler: \u98de\u6868\u9884\u6d4b\u7ed3\u679c\u901a\u8fc7parser_handler\u53c2\u6570\u56de\u8c03\u5230\u5177\u4f53\u7684\u4efb\u52a1\u4e2d\uff0c\u7531\u7528\u6237\u63a7\u5236\u5177\u4f53\u7ed3\u679c\u89e3\u6790\n        \"\"\"", "\n", "BaseInference", ".", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "parser_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.inference.custom_inference.CustomInference.inference_batch": [[26, 80], ["logging.info", "custom_inference.CustomInference.params.get", "open", "enumerate", "logging.info", "open.close", "dg", "dg.dataset.convert_fields_to_dict", "enumerate", "time.time", "custom_inference.CustomInference.predictor.run", "time.time", "custom_inference.CustomInference.predictor.get_output_names", "range", "custom_inference.CustomInference.parser_handler", "os.path.exists", "os.makedirs", "item.split", "custom_inference.CustomInference.input_handles[].copy_from_cpu", "len", "custom_inference.CustomInference.predictor.get_output_handle", "predict_results.append", "len", "enumerate", "open.write", "input_item.numpy", "open.write", "str", "open.write"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.convert_fields_to_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["", "def", "inference_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u6279\u91cf\u9884\u6d4b\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"start do inference....\"", ")", "\n", "total_time", "=", "0", "\n", "output_path", "=", "self", ".", "params", ".", "get", "(", "\"output_path\"", ",", "None", ")", "\n", "if", "not", "output_path", "or", "output_path", "==", "\"\"", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./output\"", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "\"./output\"", ")", "\n", "", "output_path", "=", "\"./output/predict_result.txt\"", "\n", "\n", "", "output_file", "=", "open", "(", "output_path", ",", "\"w+\"", ")", "\n", "\n", "#dg = self.data_set_reader.predict_reader", "\n", "reader", "=", "self", ".", "data_set_reader", ".", "predict_reader", ".", "data_generator", "(", ")", "\n", "\n", "for", "batch_id", ",", "data_t", "in", "enumerate", "(", "reader", "(", ")", ")", ":", "\n", "            ", "data", "=", "data_t", "[", "0", "]", "[", ":", "-", "1", "]", "\n", "lods", "=", "data_t", "[", "0", "]", "[", "-", "1", "]", "\n", "#extra = data_t[0][-1]", "\n", "samples", "=", "data_t", "[", "1", "]", "\n", "#print(data,len(data))", "\n", "#aaa", "\n", "feed_dict", "=", "self", ".", "data_set_reader", ".", "predict_reader", ".", "convert_fields_to_dict", "(", "data", ")", "\n", "predict_results", "=", "[", "]", "\n", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "self", ".", "input_keys", ")", ":", "\n", "                ", "kv", "=", "item", ".", "split", "(", "\"#\"", ")", "\n", "name", "=", "kv", "[", "0", "]", "\n", "key", "=", "kv", "[", "1", "]", "\n", "item_instance", "=", "feed_dict", "[", "name", "]", "\n", "input_item", "=", "item_instance", "[", "InstanceName", ".", "RECORD_ID", "]", "[", "key", "]", "\n", "# input_item\u662ftensor\u7c7b\u578b\uff0c\u9700\u8981\u6539\u4e3anumpy\u6570\u7ec4", "\n", "self", ".", "input_handles", "[", "index", "]", ".", "copy_from_cpu", "(", "input_item", ")", "\n", "if", "key", "in", "[", "'tgt_src_ids'", ",", "'tgt_pos_ids'", ",", "'init_scores'", "]", ":", "\n", "                    ", "self", ".", "input_handles", "[", "index", "]", ".", "set_lod", "(", "lods", ")", "\n", "\n", "", "", "begin_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "predictor", ".", "run", "(", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "total_time", "+=", "end_time", "-", "begin_time", "\n", "\n", "output_names", "=", "self", ".", "predictor", ".", "get_output_names", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "output_names", ")", ")", ":", "\n", "                ", "output_tensor", "=", "self", ".", "predictor", ".", "get_output_handle", "(", "output_names", "[", "i", "]", ")", "\n", "predict_results", ".", "append", "(", "output_tensor", ".", "copy_to_cpu", "(", ")", ")", "\n", "", "if", "batch_id", "==", "0", ":", "\n", "                ", "finished_ids", "=", "predict_results", "[", "0", "]", "\n", "finished_ids_np", "=", "np", ".", "array", "(", "finished_ids", ")", "\n", "finished_scores", "=", "np", ".", "array", "(", "predict_results", "[", "1", "]", ")", "\n", "data_ids", "=", "np", ".", "array", "(", "predict_results", "[", "2", "]", ")", "\n", "print", "(", "'finished_ids :'", ",", "finished_ids", ")", "\n", "print", "(", "'finished_ids numpy shape:'", ",", "finished_ids_np", ".", "shape", ")", "\n", "print", "(", "'finished_scores:'", ",", "finished_scores", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.inference.custom_inference.CustomInference.inference_query": [[81, 115], ["reader.api_generator", "reader.convert_fields_to_dict", "enumerate", "time.time", "custom_inference.CustomInference.predictor.run", "time.time", "custom_inference.CustomInference.predictor.get_output_names", "range", "custom_inference.CustomInference.parser_handler", "item.split", "custom_inference.CustomInference.input_handles[].copy_from_cpu", "len", "custom_inference.CustomInference.predictor.get_output_handle", "predict_results.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.api_generator", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.convert_fields_to_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["print", "(", "'finished_scores numpy shape:'", ",", "finished_scores", ".", "shape", ")", "\n", "print", "(", "\"data ids :\"", ",", "data_ids", ")", "\n", "\n", "# \u56de\u8c03\u7ed9\u89e3\u6790\u51fd\u6570", "\n", "", "write_result_list", "=", "self", ".", "parser_handler", "(", "predict_results", ",", "sample_list", "=", "samples", ",", "params_dict", "=", "self", ".", "params", ")", "\n", "for", "write_item", "in", "write_result_list", ":", "\n", "                ", "size", "=", "len", "(", "write_item", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "write_item", ")", ":", "\n", "                    ", "output_file", ".", "write", "(", "str", "(", "item", ")", ")", "\n", "if", "index", "!=", "size", "-", "1", ":", "\n", "                        ", "output_file", ".", "write", "(", "\"\\t\"", ")", "\n", "\n", "", "", "output_file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"total_time:{}\"", ".", "format", "(", "total_time", ")", ")", "\n", "output_file", ".", "close", "(", ")", "\n", "\n", "", "def", "inference_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "\"\"\"\u5355\u6761query\u9884\u6d4b\n        :param query : list\n        \"\"\"", "\n", "total_time", "=", "0", "\n", "# reader = self.data_set_reader.predict_reader.dataset", "\n", "pre_reader", "=", "self", ".", "data_set_reader", ".", "predict_reader", ".", "api_generator", "(", "query", ")", "\n", "# for batch_id, data_t in enumerate(pre_reader()):", "\n", "for", "data_t", "in", "pre_reader", ":", "\n", "# print(data_t)", "\n", "            ", "data", "=", "data_t", "[", "0", "]", "[", ":", "-", "2", "]", "\n", "lods", "=", "data_t", "[", "0", "]", "[", "-", "2", "]", "\n", "extra", "=", "data_t", "[", "0", "]", "[", "-", "1", "]", "\n", "samples", "=", "data_t", "[", "1", "]", "\n", "feed_dict", "=", "self", ".", "data_set_reader", ".", "predict_reader", ".", "convert_fields_to_dict", "(", "data", ",", "extra", "=", "extra", ")", "\n", "predict_results", "=", "[", "]", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "self", ".", "input_keys", ")", ":", "\n", "                ", "kv", "=", "item", ".", "split", "(", "\"#\"", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer.dataset_reader_from_params": [[20, 29], ["erniekit.data.data_set.DataSet", "erniekit.data.data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n", "\n", "\n", "", "def", "build_inference", "(", "params_dict", ",", "dataset_reader", ",", "parser_handler", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "inference_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomInference\"", ")", "\n", "inference_class", "=", "RegisterSet", ".", "inference", ".", "__getitem__", "(", "inference_name", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer.build_inference": [[31, 39], ["params_dict.get", "erniekit.common.register.RegisterSet.inference.__getitem__", "RegisterSet.inference.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["\n", "return", "inference", "\n", "\n", "", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer.parser_multi_infor_extraction": [[40, 68], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "params_dict.get", "run_infer._get_inv_label_map", "range", "np.array.copy_to_cpu", "run_infer._post_proc", "run_infer._gen_output", "return_list.append"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer._get_inv_label_map", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer._post_proc", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer._gen_output"], ["model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "dataset_reader", ".", "predict_reader", ",", "params_dict", ")", "\n", "return", "model", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "args", "=", "args", ".", "build_common_arguments", "(", ")", "\n", "log", ".", "init_log", "(", "\"./log/test\"", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "# \u5206\u7c7b\u4efb\u52a1\u7684\u9884\u6d4b", "\n", "param_dict", "=", "params", ".", "from_file", "(", "args", ".", "param_path", ")", "\n", "_params", "=", "params", ".", "replace_none", "(", "param_dict", ")", "\n", "\n", "# \u8bb0\u5f97import\u4e00\u4e0b\u6ce8\u518c\u7684\u6a21\u5757", "\n", "register", ".", "import_modules", "(", ")", "\n", "register", ".", "import_new_module", "(", "\"inference\"", ",", "\"custom_inference\"", ")", "\n", "\n", "register", ".", "import_new_module", "(", "\"data_set_reader\"", ",", "\"ernie_gen_infilling_dataset_reader\"", ")", "\n", "register", ".", "import_new_module", "(", "\"model\"", ",", "\"ernie_infilling_generation\"", ")", "\n", "\n", "dataset_reader_params_dict", "=", "_params", ".", "get", "(", "\"dataset_reader\"", ")", "\n", "dataset_reader", "=", "dataset_reader_from_params", "(", "dataset_reader_params_dict", ")", "\n", "\n", "model_params_dict", "=", "param_dict", ".", "get", "(", "\"model\"", ")", "\n", "model", "=", "model_from_params", "(", "model_params_dict", ",", "dataset_reader", ")", "\n", "\n", "inference_params_dict", "=", "_params", ".", "get", "(", "\"inference\"", ")", "\n", "inference", "=", "build_inference", "(", "inference_params_dict", ",", "dataset_reader", ",", "model", ".", "parse_predict_result", ")", "\n", "\n", "inference", ".", "inference_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer._get_inv_label_map": [[70, 80], ["collections.OrderedDict", "json.load.items", "open", "json.load", "str"], "function", ["None"], ["logging", ".", "info", "(", "\"os exit.\"", ")", "\n", "os", ".", "_exit", "(", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer._post_proc": [[82, 103], ["numpy.where", "range", "range", "numpy.sum", "numpy.sum", "numpy.argmax"], "function", ["None"], []], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_infer._gen_output": [[104, 174], ["zip", "list", "list.extend", "set", "range", "run_infer._gen_output.find_ent"], "function", ["None"], []], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_trainer.dataset_reader_from_params": [[20, 29], ["erniekit.data.data_set.DataSet", "erniekit.data.data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_trainer.model_from_params": [[31, 77], ["params_dict.get", "dataset_reader.train_reader.dataset.get_num_examples", "params_dict.get", "erniekit.common.register.RegisterSet.models.__getitem__", "RegisterSet.models.__getitem__.", "params_dict.get.__contains__", "int", "params_dict.get", "params_dict.get.get", "logging.info", "logging.info", "logging.info", "logging.info", "params_dict[].update", "os.getenv", "params_dict.get.__contains__", "params_dict.get.get", "params_dict.get.get", "int"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "opt_params", "=", "params_dict", ".", "get", "(", "\"optimization\"", ",", "None", ")", "\n", "num_train_examples", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "get_num_examples", "(", ")", "\n", "# \u6309\u914d\u7f6e\u8ba1\u7b97warmup_steps", "\n", "if", "opt_params", "and", "opt_params", ".", "__contains__", "(", "\"warmup_steps\"", ")", ":", "\n", "        ", "trainers_num", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINERS_NUM\"", ",", "\"1\"", ")", ")", "\n", "batch_size_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "batch_size", "\n", "epoch_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "epoch", "\n", "max_train_steps", "=", "epoch_train", "*", "num_train_examples", "//", "batch_size_train", "//", "trainers_num", "\n", "# \u77e5\u8bc6\u84b8\u998fTD2\u9700\u8981\u5c06TD1\u7684max_train_step\u7b97\u8fdb\u6765", "\n", "task_distill_params", "=", "params_dict", ".", "get", "(", "\"task_distill_step2\"", ",", "None", ")", "\n", "if", "task_distill_params", "and", "task_distill_params", ".", "__contains__", "(", "\"td1_epoch\"", ")", ":", "\n", "# TD1\u8bad\u7ec3\u7684\u8f6e\u6570\uff0c\u9700\u8981\u5728TD2\u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u8bbe\u7f6e", "\n", "            ", "td1_epoch", "=", "task_distill_params", "[", "\"td1_epoch\"", "]", "\n", "# \u9ed8\u8ba4TD1\u548cTD2\u7684batch_size\u4e00\u81f4\uff0c\u8bad\u7ec3\u6837\u672c\u6570\u4e00\u81f4", "\n", "td1_batch_size", "=", "task_distill_params", ".", "get", "(", "\"td1_batch_size\"", ",", "batch_size_train", ")", "\n", "max_train_steps", "+=", "td1_epoch", "*", "num_train_examples", "//", "td1_batch_size", "//", "trainers_num", "\n", "\n", "", "warmup_steps", "=", "opt_params", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "\n", "if", "warmup_steps", "==", "0", ":", "\n", "            ", "warmup_proportion", "=", "opt_params", ".", "get", "(", "\"warmup_proportion\"", ",", "0.1", ")", "\n", "warmup_steps", "=", "int", "(", "max_train_steps", "*", "warmup_proportion", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Device count: %d\"", "%", "trainers_num", ")", "\n", "logging", ".", "info", "(", "\"Num train examples: %d\"", "%", "num_train_examples", ")", "\n", "logging", ".", "info", "(", "\"Max train steps: %d\"", "%", "max_train_steps", ")", "\n", "logging", ".", "info", "(", "\"Num warmup steps: %d\"", "%", "warmup_steps", ")", "\n", "\n", "opt_params", "=", "{", "}", "\n", "opt_params", "[", "\"warmup_steps\"", "]", "=", "warmup_steps", "\n", "opt_params", "[", "\"max_train_steps\"", "]", "=", "max_train_steps", "\n", "opt_params", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "# combine params dict", "\n", "params_dict", "[", "\"optimization\"", "]", ".", "update", "(", "opt_params", ")", "\n", "\n", "", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "params_dict", ")", "\n", "return", "model", ",", "num_train_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_trainer.build_trainer": [[79, 86], ["params_dict.get", "erniekit.common.register.RegisterSet.trainer.__getitem__", "RegisterSet.trainer.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "build_trainer", "(", "params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", "=", "0", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "trainer_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomTrainer\"", ")", "\n", "trainer_class", "=", "RegisterSet", ".", "trainer", ".", "__getitem__", "(", "trainer_name", ")", "\n", "params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "trainer", "=", "trainer_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "model", "=", "model", ")", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.information_extraction_many_to_many.run_trainer.run_trainer": [[88, 106], ["logging.info", "param_dict.get", "run_trainer.dataset_reader_from_params", "param_dict.get", "run_trainer.model_from_params", "param_dict.get", "run_trainer.build_trainer", "build_trainer.do_train", "logging.info", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.dataset_reader_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.model_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.build_trainer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_train"], ["", "def", "run_trainer", "(", "param_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param param_dict:\n    :return:\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"run trainer.... pid = \"", "+", "str", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "dataset_reader_params_dict", "=", "param_dict", ".", "get", "(", "\"dataset_reader\"", ")", "\n", "dataset_reader", "=", "dataset_reader_from_params", "(", "dataset_reader_params_dict", ")", "\n", "\n", "model_params_dict", "=", "param_dict", ".", "get", "(", "\"model\"", ")", "\n", "model", ",", "num_train_examples", "=", "model_from_params", "(", "model_params_dict", ",", "dataset_reader", ")", "\n", "model_params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "trainer_params_dict", "=", "param_dict", ".", "get", "(", "\"trainer\"", ")", "\n", "trainer", "=", "build_trainer", "(", "trainer_params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", ")", "\n", "\n", "trainer", ".", "do_train", "(", ")", "\n", "logging", ".", "info", "(", "\"end of run train and eval .....\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.DuIE2.0.convert_data.mkdir": [[7, 16], ["path.split.strip", "path.split.rstrip", "path.split.split", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "\"\"\" mkdir \"\"\"", "\n", "path", "=", "path", ".", "strip", "(", ")", "\n", "path", "=", "path", ".", "rstrip", "(", "\"/\"", ")", "\n", "path", "=", "path", ".", "split", "(", "\"/\"", ")", "\n", "path", "=", "\"/\"", ".", "join", "(", "path", "[", ":", "-", "1", "]", ")", "\n", "isExists", "=", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "if", "not", "isExists", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.DuIE2.0.convert_data.convert_data": [[18, 59], ["convert_data.mkdir", "open", "open.close", "open", "json.loads", "json.dumps", "open.write", "op_data[].append", "len", "print", "text.index", "text.index", "print", "print", "text.index", "len", "text.index", "len"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.DuIE2.0.convert_data.mkdir"], ["", "", "def", "convert_data", "(", "ip_fil", ",", "op_fil", ")", ":", "\n", "    ", "\"\"\" convert train and dev datasets \"\"\"", "\n", "mkdir", "(", "op_fil", ")", "\n", "op_f", "=", "open", "(", "op_fil", ",", "'w'", ")", "\n", "with", "open", "(", "ip_fil", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "line", ")", "\n", "text", "=", "data", "[", "'text'", "]", "\n", "spo_list", "=", "data", "[", "'spo_list'", "]", "\n", "\n", "\n", "op_data", "=", "{", "\n", "\"text\"", ":", "text", ",", "\n", "\"spo_list\"", ":", "[", "]", "\n", "}", "\n", "for", "pre", "in", "spo_list", ":", "\n", "                ", "predicate_name", "=", "pre", "[", "'predicate'", "]", "\n", "subject_name", "=", "pre", "[", "'subject'", "]", "\n", "object_name", "=", "pre", "[", "'object'", "]", "[", "'@value'", "]", "\n", "try", ":", "\n", "                    ", "subject_id", "=", "[", "text", ".", "index", "(", "subject_name", ")", ",", "text", ".", "index", "(", "subject_name", ")", "+", "len", "(", "subject_name", ")", "]", "\n", "", "except", "ValueError", ":", "\n", "                    ", "print", "(", "data", ")", "\n", "print", "(", "text", ",", "'*'", ",", "subject_name", ")", "\n", "continue", "\n", "", "object_id", "=", "[", "text", ".", "index", "(", "object_name", ")", ",", "text", ".", "index", "(", "object_name", ")", "+", "len", "(", "object_name", ")", "]", "\n", "op_data", "[", "\"spo_list\"", "]", ".", "append", "(", "\n", "{", "\n", "\"predicate\"", ":", "predicate_name", ",", "\n", "\"subject\"", ":", "subject_id", ",", "\n", "\"object\"", ":", "object_id", "\n", "}", "\n", ")", "\n", "\n", "", "if", "len", "(", "op_data", "[", "\"spo_list\"", "]", ")", "==", "0", ":", "\n", "                ", "print", "(", "op_data", ")", "\n", "continue", "\n", "", "op_data", "=", "json", ".", "dumps", "(", "op_data", ",", "ensure_ascii", "=", "False", ")", "\n", "\n", "op_f", ".", "write", "(", "op_data", "+", "'\\n'", ")", "\n", "", "", "op_f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.DuIE2.0.convert_data.conver_label_map": [[61, 78], ["convert_data.mkdir", "open", "enumerate", "json.dump", "open.close", "open", "enumerate", "json.loads", "data_lis.append", "data_lis.append"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.DuIE2.0.convert_data.mkdir"], ["", "def", "conver_label_map", "(", "ip_fil", ",", "op_fil", ")", ":", "\n", "    ", "\"\"\" convert label map \"\"\"", "\n", "mkdir", "(", "op_fil", ")", "\n", "op_f", "=", "open", "(", "op_fil", ",", "'w'", ")", "\n", "data_lis", "=", "[", "'O'", ",", "'I'", "]", "\n", "with", "open", "(", "ip_fil", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "line", ")", "\n", "predicate", "=", "data", "[", "'predicate'", "]", "\n", "data_lis", ".", "append", "(", "'B-'", "+", "predicate", "+", "'@S'", ")", "\n", "data_lis", ".", "append", "(", "'B-'", "+", "predicate", "+", "'@O'", ")", "\n", "", "", "data_dict", "=", "{", "}", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "data_lis", ")", ":", "\n", "        ", "data_dict", "[", "k", "]", "=", "i", "\n", "", "json", ".", "dump", "(", "data_dict", ",", "op_f", ",", "ensure_ascii", "=", "False", ",", "indent", "=", "4", ")", "\n", "\n", "op_f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.DuIE2.0.convert_data.main": [[80, 93], ["len", "range", "convert_data.conver_label_map", "convert_data.convert_data"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.DuIE2.0.convert_data.conver_label_map", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.DuIE2.0.convert_data.convert_data"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\" main function \"\"\"", "\n", "fil", "=", "[", "\"duie_dev.json/duie_dev.json\"", ",", "\"duie_train.json/duie_train.json\"", "]", "\n", "save", "=", "[", "\"dev_data/dev.json\"", ",", "\"train_data/train.json\"", "]", "\n", "\n", "n", "=", "len", "(", "fil", ")", "\n", "\n", "schema", "=", "\"duie_schema/duie_schema.json\"", "\n", "label_map", "=", "\"label_map/label_map.json\"", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "convert_data", "(", "fil", "[", "i", "]", ",", "save", "[", "i", "]", ")", "\n", "", "conver_label_map", "(", "schema", ",", "label_map", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_classification.run_infer.dataset_reader_from_params": [[15, 24], ["erniekit.data.data_set.DataSet", "erniekit.data.data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_classification.run_infer.build_inference": [[26, 33], ["params_dict.get", "erniekit.common.register.RegisterSet.inference.__getitem__", "RegisterSet.inference.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "build_inference", "(", "params_dict", ",", "dataset_reader", ",", "parser_handler", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "inference_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomInference\"", ")", "\n", "inference_class", "=", "RegisterSet", ".", "inference", ".", "__getitem__", "(", "inference_name", ")", "\n", "inference", "=", "inference_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "parser_handler", "=", "parser_handler", ")", "\n", "\n", "return", "inference", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_classification.run_infer.parse_predict_result": [[35, 54], ["params_dict.get", "output_tensor.copy_to_cpu", "numpy.array().reshape", "enumerate", "return_list.append", "logging.info", "numpy.array", "str", "item_prob.tolist"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "dataset_reader", ".", "predict_reader", ",", "params_dict", ")", "\n", "return", "model", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "args", "=", "args", ".", "build_common_arguments", "(", ")", "\n", "log", ".", "init_log", "(", "\"./log/test\"", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "# \u5206\u7c7b\u4efb\u52a1\u7684\u9884\u6d4b", "\n", "param_dict", "=", "params", ".", "from_file", "(", "args", ".", "param_path", ")", "\n", "_params", "=", "params", ".", "replace_none", "(", "param_dict", ")", "\n", "\n", "# \u8bb0\u5f97import\u4e00\u4e0b\u6ce8\u518c\u7684\u6a21\u5757", "\n", "register", ".", "import_modules", "(", ")", "\n", "register", ".", "import_new_module", "(", "\"inference\"", ",", "\"custom_inference\"", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_classification.run_trainer.dataset_reader_from_params": [[18, 27], ["erniekit.DataSet", "data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["\n", "\n", "def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_classification.run_trainer.model_from_params": [[29, 80], ["params_dict.get", "dataset_reader.train_reader.dataset.get_num_examples", "params_dict.get", "erniekit.common.register.RegisterSet.models.__getitem__", "params_dict.get", "RegisterSet.models.__getitem__.", "params_dict.get.__contains__", "int", "params_dict.get", "params_dict.get.get", "logging.info", "logging.info", "logging.info", "logging.info", "params_dict[].update", "os.getenv", "params_dict.get.__contains__", "params_dict.get.get", "params_dict.get.get", "int"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["\n", "\n", "", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "opt_params", "=", "params_dict", ".", "get", "(", "\"optimization\"", ",", "None", ")", "\n", "num_train_examples", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "get_num_examples", "(", ")", "\n", "# \u6309\u914d\u7f6e\u8ba1\u7b97warmup_steps", "\n", "if", "opt_params", "and", "opt_params", ".", "__contains__", "(", "\"warmup_steps\"", ")", ":", "\n", "        ", "trainers_num", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINERS_NUM\"", ",", "\"1\"", ")", ")", "\n", "batch_size_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "batch_size", "\n", "epoch_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "epoch", "\n", "max_train_steps", "=", "epoch_train", "*", "num_train_examples", "//", "batch_size_train", "//", "trainers_num", "\n", "# \u77e5\u8bc6\u84b8\u998fTD2\u9700\u8981\u5c06TD1\u7684max_train_step\u7b97\u8fdb\u6765", "\n", "task_distill_params", "=", "params_dict", ".", "get", "(", "\"task_distill_step2\"", ",", "None", ")", "\n", "if", "task_distill_params", "and", "task_distill_params", ".", "__contains__", "(", "\"td1_epoch\"", ")", ":", "\n", "# TD1\u8bad\u7ec3\u7684\u8f6e\u6570\uff0c\u9700\u8981\u5728TD2\u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u8bbe\u7f6e", "\n", "            ", "td1_epoch", "=", "task_distill_params", "[", "\"td1_epoch\"", "]", "\n", "# \u9ed8\u8ba4TD1\u548cTD2\u7684batch_size\u4e00\u81f4\uff0c\u8bad\u7ec3\u6837\u672c\u6570\u4e00\u81f4", "\n", "td1_batch_size", "=", "task_distill_params", ".", "get", "(", "\"td1_batch_size\"", ",", "batch_size_train", ")", "\n", "max_train_steps", "+=", "td1_epoch", "*", "num_train_examples", "//", "td1_batch_size", "//", "trainers_num", "\n", "\n", "", "warmup_steps", "=", "opt_params", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "\n", "if", "warmup_steps", "==", "0", ":", "\n", "            ", "warmup_proportion", "=", "opt_params", ".", "get", "(", "\"warmup_proportion\"", ",", "0.1", ")", "\n", "warmup_steps", "=", "int", "(", "max_train_steps", "*", "warmup_proportion", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Device count: %d\"", "%", "trainers_num", ")", "\n", "logging", ".", "info", "(", "\"Num train examples: %d\"", "%", "num_train_examples", ")", "\n", "logging", ".", "info", "(", "\"Max train steps: %d\"", "%", "max_train_steps", ")", "\n", "logging", ".", "info", "(", "\"Num warmup steps: %d\"", "%", "warmup_steps", ")", "\n", "\n", "opt_params", "=", "{", "}", "\n", "opt_params", "[", "\"warmup_steps\"", "]", "=", "warmup_steps", "\n", "opt_params", "[", "\"max_train_steps\"", "]", "=", "max_train_steps", "\n", "opt_params", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "# combine params dict", "\n", "params_dict", "[", "\"optimization\"", "]", ".", "update", "(", "opt_params", ")", "\n", "\n", "", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "params_dict", ")", "\n", "return", "model", ",", "num_train_examples", "\n", "\n", "\n", "", "def", "build_trainer", "(", "params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", "=", "0", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_classification.run_trainer.build_trainer": [[82, 89], ["params_dict.get", "erniekit.common.register.RegisterSet.trainer.__getitem__", "RegisterSet.trainer.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["trainer_class", "=", "RegisterSet", ".", "trainer", ".", "__getitem__", "(", "trainer_name", ")", "\n", "params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "trainer", "=", "trainer_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "model", "=", "model", ")", "\n", "return", "trainer", "\n", "\n", "\n", "", "def", "run_trainer", "(", "param_dict", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_classification.run_trainer.run_trainer": [[91, 109], ["logging.info", "param_dict.get", "run_trainer.dataset_reader_from_params", "param_dict.get", "run_trainer.model_from_params", "param_dict.get", "run_trainer.build_trainer", "build_trainer.do_train", "logging.info", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.dataset_reader_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.model_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.build_trainer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_train"], ["\n", "logging", ".", "info", "(", "\"run trainer.... pid = \"", "+", "str", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "dataset_reader_params_dict", "=", "param_dict", ".", "get", "(", "\"dataset_reader\"", ")", "\n", "dataset_reader", "=", "dataset_reader_from_params", "(", "dataset_reader_params_dict", ")", "\n", "\n", "model_params_dict", "=", "param_dict", ".", "get", "(", "\"model\"", ")", "\n", "model", ",", "num_train_examples", "=", "model_from_params", "(", "model_params_dict", ",", "dataset_reader", ")", "\n", "model_params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "trainer_params_dict", "=", "param_dict", ".", "get", "(", "\"trainer\"", ")", "\n", "trainer", "=", "build_trainer", "(", "trainer_params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", ")", "\n", "\n", "trainer", ".", "do_train", "(", ")", "\n", "logging", ".", "info", "(", "\"end of run train and eval .....\"", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "args", "=", "args", ".", "build_common_arguments", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.reader.categorical_field_reader.CategoricalField.__init__": [[18, 23], ["erniekit.data.field_reader.custom_text_field_reader.CustomTextFieldReader.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "CustomTextFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.reader.categorical_field_reader.CategoricalField.convert_texts_to_ids": [[24, 44], ["erniekit.data.util_helper.pad_batch_data", "return_list.append", "return_list.append", "return_list.append", "categorical_field_reader.CategoricalField.tokenizer.convert_tokens_to_ids", "src_ids.append", "erniekit.utils.util_helper.convert_to_unicode"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "convert_to_unicode", "(", "text", ")", ")", "\n", "src_ids", ".", "append", "(", "src_id", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "padded_ids", ",", "mask_ids", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "return_input_mask", "=", "True", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "\n", "return_list", ".", "append", "(", "mask_ids", ")", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "\n", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.reader.multi_label_field_reader.MultiLabelFieldReader.__init__": [[18, 22], ["erniekit.data.field_reader.base_field_reader.BaseFieldReader.__init__", "erniekit.data.tokenizer.custom_tokenizer.CustomTokenizer"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "if", "field_config", ".", "vocab_path", "and", "field_config", ".", "need_convert", ":", "\n", "            ", "self", ".", "tokenizer", "=", "CustomTokenizer", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.reader.multi_label_field_reader.MultiLabelFieldReader.init_reader": [[23, 41], ["data_list.append", "paddle.fluid.layers.data"], "methods", ["None"], ["", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "\n", "shape", "=", "[", "[", "-", "1", ",", "self", ".", "field_config", ".", "num_labels", "]", "]", "\n", "types", "=", "[", "\"float32\"", "]", "\n", "levels", "=", "[", "0", "]", "\n", "data_list", "=", "[", "]", "\n", "\n", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "data_list", ".", "append", "(", "fluid", ".", "layers", ".", "data", "(", "name", "=", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", ",", "shape", "=", "shape", "[", "0", "]", ",", "\n", "dtype", "=", "types", "[", "0", "]", ",", "lod_level", "=", "levels", "[", "0", "]", ")", ")", "\n", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.reader.multi_label_field_reader.MultiLabelFieldReader.convert_texts_to_ids": [[42, 63], ["return_list.append", "text.split", "batch_src_ids.append", "numpy.array().astype", "multi_label_field_reader.MultiLabelFieldReader.tokenizer.covert_tokens_to_ids", "int", "numpy.array"], "methods", ["None"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\" \u660e\u6587\u5e8f\u5217\u5316\n        :param:batch_text\n        :return: id_list\n        \"\"\"", "\n", "batch_src_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "src_ids", "=", "[", "0", "]", "*", "self", ".", "field_config", ".", "num_labels", "\n", "indices", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "if", "self", ".", "tokenizer", "and", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "indices", "=", "self", ".", "tokenizer", ".", "covert_tokens_to_ids", "(", "indices", ")", "\n", "", "else", ":", "\n", "                ", "indices", "=", "[", "int", "(", "index", ")", "for", "index", "in", "indices", "]", "\n", "", "for", "index", "in", "indices", ":", "\n", "                ", "src_ids", "[", "index", "]", "=", "1", "\n", "", "batch_src_ids", ".", "append", "(", "src_ids", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "# logging.debug(\"Hello {}\".format(np.array(batch_src_ids)))", "\n", "return_list", ".", "append", "(", "np", ".", "array", "(", "batch_src_ids", ")", ".", "astype", "(", "\"float32\"", ")", ")", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.reader.multi_label_field_reader.MultiLabelFieldReader.get_field_length": [[64, 69], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.reader.multi_label_field_reader.MultiLabelFieldReader.structure_fields_dict": [[70, 84], ["None"], "methods", ["None"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "None", "\n", "return", "record_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.sequence_labeling.run_infer.dataset_reader_from_params": [[17, 26], ["erniekit.data.data_set.DataSet", "erniekit.data.data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n", "\n", "\n", "", "def", "build_inference", "(", "params_dict", ",", "dataset_reader", ",", "parser_handler", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.sequence_labeling.run_infer.build_inference": [[28, 35], ["params_dict.get", "erniekit.common.register.RegisterSet.inference.__getitem__", "RegisterSet.inference.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["inference_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomInference\"", ")", "\n", "inference_class", "=", "RegisterSet", ".", "inference", ".", "__getitem__", "(", "inference_name", ")", "\n", "inference", "=", "inference_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "parser_handler", "=", "parser_handler", ")", "\n", "\n", "return", "inference", "\n", "\n", "", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.sequence_labeling.run_infer.parse_predict_result": [[37, 68], ["params_dict.get", "output_infer.copy_to_cpu", "print", "return_list.append", "logging.info", "str", "one_example_infer_result.tolist"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["\n", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "dataset_reader", ".", "predict_reader", ",", "params_dict", ")", "\n", "return", "model", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "args", "=", "args", ".", "build_common_arguments", "(", ")", "\n", "log", ".", "init_log", "(", "\"./log/test\"", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "# \u5206\u7c7b\u4efb\u52a1\u7684\u9884\u6d4b", "\n", "param_dict", "=", "params", ".", "from_file", "(", "args", ".", "param_path", ")", "\n", "_params", "=", "params", ".", "replace_none", "(", "param_dict", ")", "\n", "\n", "# \u8bb0\u5f97import\u4e00\u4e0b\u6ce8\u518c\u7684\u6a21\u5757", "\n", "register", ".", "import_modules", "(", ")", "\n", "register", ".", "import_new_module", "(", "\"inference\"", ",", "\"custom_inference\"", ")", "\n", "\n", "register", ".", "import_new_module", "(", "\"data_set_reader\"", ",", "\"ernie_gen_infilling_dataset_reader\"", ")", "\n", "register", ".", "import_new_module", "(", "\"model\"", ",", "\"ernie_infilling_generation\"", ")", "\n", "\n", "dataset_reader_params_dict", "=", "_params", ".", "get", "(", "\"dataset_reader\"", ")", "\n", "dataset_reader", "=", "dataset_reader_from_params", "(", "dataset_reader_params_dict", ")", "\n", "\n", "model_params_dict", "=", "param_dict", ".", "get", "(", "\"model\"", ")", "\n", "model", "=", "model_from_params", "(", "model_params_dict", ",", "dataset_reader", ")", "\n", "\n", "inference_params_dict", "=", "_params", ".", "get", "(", "\"inference\"", ")", "\n", "inference", "=", "build_inference", "(", "inference_params_dict", ",", "dataset_reader", ",", "model", ".", "parse_predict_result", ")", "\n", "\n", "inference", ".", "inference_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.sequence_labeling.run_trainer.dataset_reader_from_params": [[19, 28], ["erniekit.DataSet", "data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["\n", "def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.sequence_labeling.run_trainer.model_from_params": [[30, 77], ["params_dict.get", "dataset_reader.train_reader.dataset.get_num_examples", "params_dict.get", "erniekit.common.register.RegisterSet.models.__getitem__", "RegisterSet.models.__getitem__.", "params_dict.get.__contains__", "int", "params_dict.get", "params_dict.get.get", "logging.info", "logging.info", "logging.info", "logging.info", "params_dict[].update", "os.getenv", "params_dict.get.__contains__", "params_dict.get.get", "params_dict.get.get", "int"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["\n", "", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "opt_params", "=", "params_dict", ".", "get", "(", "\"optimization\"", ",", "None", ")", "\n", "num_train_examples", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "get_num_examples", "(", ")", "\n", "# \u6309\u914d\u7f6e\u8ba1\u7b97warmup_steps", "\n", "if", "opt_params", "and", "opt_params", ".", "__contains__", "(", "\"warmup_steps\"", ")", ":", "\n", "        ", "trainers_num", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINERS_NUM\"", ",", "\"1\"", ")", ")", "\n", "batch_size_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "batch_size", "\n", "epoch_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "epoch", "\n", "max_train_steps", "=", "epoch_train", "*", "num_train_examples", "//", "batch_size_train", "//", "trainers_num", "\n", "# \u77e5\u8bc6\u84b8\u998fTD2\u9700\u8981\u5c06TD1\u7684max_train_step\u7b97\u8fdb\u6765", "\n", "task_distill_params", "=", "params_dict", ".", "get", "(", "\"task_distill_step2\"", ",", "None", ")", "\n", "if", "task_distill_params", "and", "task_distill_params", ".", "__contains__", "(", "\"td1_epoch\"", ")", ":", "\n", "# TD1\u8bad\u7ec3\u7684\u8f6e\u6570\uff0c\u9700\u8981\u5728TD2\u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u8bbe\u7f6e", "\n", "            ", "td1_epoch", "=", "task_distill_params", "[", "\"td1_epoch\"", "]", "\n", "# \u9ed8\u8ba4TD1\u548cTD2\u7684batch_size\u4e00\u81f4\uff0c\u8bad\u7ec3\u6837\u672c\u6570\u4e00\u81f4", "\n", "td1_batch_size", "=", "task_distill_params", ".", "get", "(", "\"td1_batch_size\"", ",", "batch_size_train", ")", "\n", "max_train_steps", "+=", "td1_epoch", "*", "num_train_examples", "//", "td1_batch_size", "//", "trainers_num", "\n", "\n", "", "warmup_steps", "=", "opt_params", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "\n", "if", "warmup_steps", "==", "0", ":", "\n", "            ", "warmup_proportion", "=", "opt_params", ".", "get", "(", "\"warmup_proportion\"", ",", "0.1", ")", "\n", "warmup_steps", "=", "int", "(", "max_train_steps", "*", "warmup_proportion", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Device count: %d\"", "%", "trainers_num", ")", "\n", "logging", ".", "info", "(", "\"Num train examples: %d\"", "%", "num_train_examples", ")", "\n", "logging", ".", "info", "(", "\"Max train steps: %d\"", "%", "max_train_steps", ")", "\n", "logging", ".", "info", "(", "\"Num warmup steps: %d\"", "%", "warmup_steps", ")", "\n", "\n", "opt_params", "=", "{", "}", "\n", "opt_params", "[", "\"warmup_steps\"", "]", "=", "warmup_steps", "\n", "opt_params", "[", "\"max_train_steps\"", "]", "=", "max_train_steps", "\n", "opt_params", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "# combine params dict", "\n", "params_dict", "[", "\"optimization\"", "]", ".", "update", "(", "opt_params", ")", "\n", "\n", "", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "params_dict", ")", "\n", "return", "model", ",", "num_train_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.sequence_labeling.run_trainer.build_trainer": [[79, 86], ["params_dict.get", "erniekit.common.register.RegisterSet.trainer.__getitem__", "RegisterSet.trainer.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "build_trainer", "(", "params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", "=", "0", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "trainer_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomTrainer\"", ")", "\n", "trainer_class", "=", "RegisterSet", ".", "trainer", ".", "__getitem__", "(", "trainer_name", ")", "\n", "params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "trainer", "=", "trainer_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "model", "=", "model", ")", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.sequence_labeling.run_trainer.run_trainer": [[88, 106], ["logging.info", "param_dict.get", "run_trainer.dataset_reader_from_params", "param_dict.get", "run_trainer.model_from_params", "param_dict.get", "run_trainer.build_trainer", "build_trainer.do_train", "logging.info", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.dataset_reader_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.model_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.build_trainer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_train"], ["", "def", "run_trainer", "(", "param_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param param_dict:\n    :return:\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"run trainer.... pid = \"", "+", "str", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "dataset_reader_params_dict", "=", "param_dict", ".", "get", "(", "\"dataset_reader\"", ")", "\n", "dataset_reader", "=", "dataset_reader_from_params", "(", "dataset_reader_params_dict", ")", "\n", "\n", "model_params_dict", "=", "param_dict", ".", "get", "(", "\"model\"", ")", "\n", "model", ",", "num_train_examples", "=", "model_from_params", "(", "model_params_dict", ",", "dataset_reader", ")", "\n", "model_params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "trainer_params_dict", "=", "param_dict", ".", "get", "(", "\"trainer\"", ")", "\n", "trainer", "=", "build_trainer", "(", "trainer_params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", ")", "\n", "\n", "trainer", ".", "do_train", "(", ")", "\n", "logging", ".", "info", "(", "\"end of run train and eval .....\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_matching.run_infer.dataset_reader_from_params": [[15, 24], ["erniekit.data.data_set.DataSet", "erniekit.data.data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_matching.run_infer.build_inference": [[26, 33], ["params_dict.get", "erniekit.common.register.RegisterSet.inference.__getitem__", "RegisterSet.inference.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "build_inference", "(", "params_dict", ",", "dataset_reader", ",", "parser_handler", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "inference_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomInference\"", ")", "\n", "inference_class", "=", "RegisterSet", ".", "inference", ".", "__getitem__", "(", "inference_name", ")", "\n", "inference", "=", "inference_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "parser_handler", "=", "parser_handler", ")", "\n", "\n", "return", "inference", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_matching.run_infer.parse_predict_result": [[34, 52], ["params_dict.get", "output_tensor.copy_to_cpu", "numpy.array().reshape", "enumerate", "return_list.append", "logging.info", "numpy.array", "str", "item_prob.tolist"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "dataset_reader", ".", "predict_reader", ",", "params_dict", ")", "\n", "return", "model", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "args", "=", "args", ".", "build_common_arguments", "(", ")", "\n", "log", ".", "init_log", "(", "\"./log/test\"", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "# \u5206\u7c7b\u4efb\u52a1\u7684\u9884\u6d4b", "\n", "param_dict", "=", "params", ".", "from_file", "(", "args", ".", "param_path", ")", "\n", "_params", "=", "params", ".", "replace_none", "(", "param_dict", ")", "\n", "\n", "# \u8bb0\u5f97import\u4e00\u4e0b\u6ce8\u518c\u7684\u6a21\u5757", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_matching.run_trainer.dataset_reader_from_params": [[18, 27], ["erniekit.data.data_set.DataSet", "erniekit.data.data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["\n", "\n", "def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_matching.run_trainer.model_from_params": [[29, 74], ["params_dict.get", "dataset_reader.train_reader.dataset.get_num_examples", "params_dict.get", "erniekit.common.register.RegisterSet.models.__getitem__", "RegisterSet.models.__getitem__.", "params_dict.get.__contains__", "int", "params_dict.get", "params_dict.get.get", "logging.info", "logging.info", "logging.info", "logging.info", "params_dict[].update", "os.getenv", "params_dict.get.__contains__", "params_dict.get.get", "params_dict.get.get", "int"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["\n", "\n", "", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "opt_params", "=", "params_dict", ".", "get", "(", "\"optimization\"", ",", "None", ")", "\n", "num_train_examples", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "get_num_examples", "(", ")", "\n", "# \u6309\u914d\u7f6e\u8ba1\u7b97warmup_steps", "\n", "if", "opt_params", "and", "opt_params", ".", "__contains__", "(", "\"warmup_steps\"", ")", ":", "\n", "        ", "trainers_num", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINERS_NUM\"", ",", "\"1\"", ")", ")", "\n", "batch_size_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "batch_size", "\n", "epoch_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "epoch", "\n", "max_train_steps", "=", "epoch_train", "*", "num_train_examples", "//", "batch_size_train", "//", "trainers_num", "\n", "# \u77e5\u8bc6\u84b8\u998fTD2\u9700\u8981\u5c06TD1\u7684max_train_step\u7b97\u8fdb\u6765", "\n", "task_distill_params", "=", "params_dict", ".", "get", "(", "\"task_distill_step2\"", ",", "None", ")", "\n", "if", "task_distill_params", "and", "task_distill_params", ".", "__contains__", "(", "\"td1_epoch\"", ")", ":", "\n", "# TD1\u8bad\u7ec3\u7684\u8f6e\u6570\uff0c\u9700\u8981\u5728TD2\u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u8bbe\u7f6e", "\n", "            ", "td1_epoch", "=", "task_distill_params", "[", "\"td1_epoch\"", "]", "\n", "# \u9ed8\u8ba4TD1\u548cTD2\u7684batch_size\u4e00\u81f4\uff0c\u8bad\u7ec3\u6837\u672c\u6570\u4e00\u81f4", "\n", "td1_batch_size", "=", "task_distill_params", ".", "get", "(", "\"td1_batch_size\"", ",", "batch_size_train", ")", "\n", "max_train_steps", "+=", "td1_epoch", "*", "num_train_examples", "//", "td1_batch_size", "//", "trainers_num", "\n", "\n", "", "warmup_steps", "=", "opt_params", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "\n", "if", "warmup_steps", "==", "0", ":", "\n", "            ", "warmup_proportion", "=", "opt_params", ".", "get", "(", "\"warmup_proportion\"", ",", "0.1", ")", "\n", "warmup_steps", "=", "int", "(", "max_train_steps", "*", "warmup_proportion", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Device count: %d\"", "%", "trainers_num", ")", "\n", "logging", ".", "info", "(", "\"Num train examples: %d\"", "%", "num_train_examples", ")", "\n", "logging", ".", "info", "(", "\"Max train steps: %d\"", "%", "max_train_steps", ")", "\n", "logging", ".", "info", "(", "\"Num warmup steps: %d\"", "%", "warmup_steps", ")", "\n", "\n", "opt_params", "=", "{", "}", "\n", "opt_params", "[", "\"warmup_steps\"", "]", "=", "warmup_steps", "\n", "opt_params", "[", "\"max_train_steps\"", "]", "=", "max_train_steps", "\n", "opt_params", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "# combine params dict", "\n", "params_dict", "[", "\"optimization\"", "]", ".", "update", "(", "opt_params", ")", "\n", "\n", "", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_matching.run_trainer.build_trainer": [[76, 83], ["params_dict.get", "erniekit.common.register.RegisterSet.trainer.__getitem__", "RegisterSet.trainer.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["return", "model", ",", "num_train_examples", "\n", "\n", "\n", "", "def", "build_trainer", "(", "params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", "=", "0", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "trainer_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomTrainer\"", ")", "\n", "trainer_class", "=", "RegisterSet", ".", "trainer", ".", "__getitem__", "(", "trainer_name", ")", "\n", "params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.text_matching.run_trainer.run_trainer": [[85, 103], ["logging.info", "param_dict.get", "run_trainer.dataset_reader_from_params", "param_dict.get", "run_trainer.model_from_params", "param_dict.get", "run_trainer.build_trainer", "build_trainer.do_train", "logging.info", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.dataset_reader_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.model_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.build_trainer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_train"], ["return", "trainer", "\n", "\n", "\n", "", "def", "run_trainer", "(", "param_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param param_dict:\n    :return:\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"run trainer.... pid = \"", "+", "str", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "dataset_reader_params_dict", "=", "param_dict", ".", "get", "(", "\"dataset_reader\"", ")", "\n", "dataset_reader", "=", "dataset_reader_from_params", "(", "dataset_reader_params_dict", ")", "\n", "\n", "model_params_dict", "=", "param_dict", ".", "get", "(", "\"model\"", ")", "\n", "model", ",", "num_train_examples", "=", "model_from_params", "(", "model_params_dict", ",", "dataset_reader", ")", "\n", "model_params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "trainer_params_dict", "=", "param_dict", ".", "get", "(", "\"trainer\"", ")", "\n", "trainer", "=", "build_trainer", "(", "trainer_params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_infer.dataset_reader_from_params": [[15, 24], ["erniekit.data.data_set.DataSet", "erniekit.data.data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n", "return", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_infer.build_inference": [[26, 33], ["params_dict.get", "erniekit.common.register.RegisterSet.inference.__getitem__", "RegisterSet.inference.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "build_inference", "(", "params_dict", ",", "dataset_reader", ",", "parser_handler", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "inference_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomInference\"", ")", "\n", "inference_class", "=", "RegisterSet", ".", "inference", ".", "__getitem__", "(", "inference_name", ")", "\n", "inference", "=", "inference_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "parser_handler", "=", "parser_handler", ")", "\n", "\n", "return", "inference", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_infer.parse_predict_result": [[35, 54], ["params_dict.get", "output_tensor.copy_to_cpu", "numpy.array().reshape", "enumerate", "return_list.append", "logging.info", "numpy.array", "str", "item_prob.tolist"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "dataset_reader", ".", "predict_reader", ",", "params_dict", ")", "\n", "return", "model", "\n", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "args", "=", "args", ".", "build_common_arguments", "(", ")", "\n", "log", ".", "init_log", "(", "\"./log/test\"", ",", "level", "=", "logging", ".", "DEBUG", ")", "\n", "# \u5206\u7c7b\u4efb\u52a1\u7684\u9884\u6d4b", "\n", "param_dict", "=", "params", ".", "from_file", "(", "args", ".", "param_path", ")", "\n", "_params", "=", "params", ".", "replace_none", "(", "param_dict", ")", "\n", "\n", "# \u8bb0\u5f97import\u4e00\u4e0b\u6ce8\u518c\u7684\u6a21\u5757", "\n", "register", ".", "import_modules", "(", ")", "\n", "register", ".", "import_new_module", "(", "\"inference\"", ",", "\"custom_inference\"", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.dataset_reader_from_params": [[18, 27], ["erniekit.data.data_set.DataSet", "erniekit.data.data_set.DataSet.build"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["\n", "\n", "def", "dataset_reader_from_params", "(", "params_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :return:\n    \"\"\"", "\n", "dataset_reader", "=", "DataSet", "(", "params_dict", ")", "\n", "dataset_reader", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.model_from_params": [[29, 75], ["params_dict.get", "dataset_reader.train_reader.dataset.get_num_examples", "params_dict.get", "erniekit.common.register.RegisterSet.models.__getitem__", "RegisterSet.models.__getitem__.", "params_dict.get.__contains__", "int", "params_dict.get", "params_dict.get.get", "logging.info", "logging.info", "logging.info", "logging.info", "params_dict[].update", "os.getenv", "params_dict.get.__contains__", "params_dict.get.get", "params_dict.get.get", "int"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.get_num_examples", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["\n", "\n", "", "def", "model_from_params", "(", "params_dict", ",", "dataset_reader", ")", ":", "\n", "    ", "\"\"\"\n    :param params_dict:\n    :param dataset_reader\n    :return:\n    \"\"\"", "\n", "opt_params", "=", "params_dict", ".", "get", "(", "\"optimization\"", ",", "None", ")", "\n", "num_train_examples", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "get_num_examples", "(", ")", "\n", "# \u6309\u914d\u7f6e\u8ba1\u7b97warmup_steps", "\n", "if", "opt_params", "and", "opt_params", ".", "__contains__", "(", "\"warmup_steps\"", ")", ":", "\n", "        ", "trainers_num", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_TRAINERS_NUM\"", ",", "\"1\"", ")", ")", "\n", "batch_size_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "batch_size", "\n", "epoch_train", "=", "dataset_reader", ".", "train_reader", ".", "dataset", ".", "config", ".", "epoch", "\n", "max_train_steps", "=", "epoch_train", "*", "num_train_examples", "//", "batch_size_train", "//", "trainers_num", "\n", "# \u77e5\u8bc6\u84b8\u998fTD2\u9700\u8981\u5c06TD1\u7684max_train_step\u7b97\u8fdb\u6765", "\n", "task_distill_params", "=", "params_dict", ".", "get", "(", "\"task_distill_step2\"", ",", "None", ")", "\n", "if", "task_distill_params", "and", "task_distill_params", ".", "__contains__", "(", "\"td1_epoch\"", ")", ":", "\n", "# TD1\u8bad\u7ec3\u7684\u8f6e\u6570\uff0c\u9700\u8981\u5728TD2\u7684\u914d\u7f6e\u6587\u4ef6\u91cc\u8bbe\u7f6e", "\n", "            ", "td1_epoch", "=", "task_distill_params", "[", "\"td1_epoch\"", "]", "\n", "# \u9ed8\u8ba4TD1\u548cTD2\u7684batch_size\u4e00\u81f4\uff0c\u8bad\u7ec3\u6837\u672c\u6570\u4e00\u81f4", "\n", "td1_batch_size", "=", "task_distill_params", ".", "get", "(", "\"td1_batch_size\"", ",", "batch_size_train", ")", "\n", "max_train_steps", "+=", "td1_epoch", "*", "num_train_examples", "//", "td1_batch_size", "//", "trainers_num", "\n", "\n", "", "warmup_steps", "=", "opt_params", ".", "get", "(", "\"warmup_steps\"", ",", "0", ")", "\n", "\n", "if", "warmup_steps", "==", "0", ":", "\n", "            ", "warmup_proportion", "=", "opt_params", ".", "get", "(", "\"warmup_proportion\"", ",", "0.1", ")", "\n", "warmup_steps", "=", "int", "(", "max_train_steps", "*", "warmup_proportion", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Device count: %d\"", "%", "trainers_num", ")", "\n", "logging", ".", "info", "(", "\"Num train examples: %d\"", "%", "num_train_examples", ")", "\n", "logging", ".", "info", "(", "\"Max train steps: %d\"", "%", "max_train_steps", ")", "\n", "logging", ".", "info", "(", "\"Num warmup steps: %d\"", "%", "warmup_steps", ")", "\n", "\n", "opt_params", "=", "{", "}", "\n", "opt_params", "[", "\"warmup_steps\"", "]", "=", "warmup_steps", "\n", "opt_params", "[", "\"max_train_steps\"", "]", "=", "max_train_steps", "\n", "opt_params", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "# combine params dict", "\n", "params_dict", "[", "\"optimization\"", "]", ".", "update", "(", "opt_params", ")", "\n", "\n", "", "model_name", "=", "params_dict", ".", "get", "(", "\"type\"", ")", "\n", "model_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "model_name", ")", "\n", "model", "=", "model_class", "(", "params_dict", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.build_trainer": [[77, 84], ["params_dict.get", "erniekit.common.register.RegisterSet.trainer.__getitem__", "RegisterSet.trainer.__getitem__."], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["\n", "\n", "", "def", "build_trainer", "(", "params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", "=", "0", ")", ":", "\n", "    ", "\"\"\"build trainer\"\"\"", "\n", "trainer_name", "=", "params_dict", ".", "get", "(", "\"type\"", ",", "\"CustomTrainer\"", ")", "\n", "trainer_class", "=", "RegisterSet", ".", "trainer", ".", "__getitem__", "(", "trainer_name", ")", "\n", "params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "trainer", "=", "trainer_class", "(", "params", "=", "params_dict", ",", "data_set_reader", "=", "dataset_reader", ",", "model", "=", "model", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.run_trainer": [[86, 104], ["logging.info", "param_dict.get", "run_trainer.dataset_reader_from_params", "param_dict.get", "run_trainer.model_from_params", "param_dict.get", "run_trainer.build_trainer", "build_trainer.do_train", "logging.info", "str", "os.getpid"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.dataset_reader_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.model_from_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_distillation.run_trainer.build_trainer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_train"], ["\n", "\n", "", "def", "run_trainer", "(", "param_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param param_dict:\n    :return:\n    \"\"\"", "\n", "logging", ".", "info", "(", "\"run trainer.... pid = \"", "+", "str", "(", "os", ".", "getpid", "(", ")", ")", ")", "\n", "dataset_reader_params_dict", "=", "param_dict", ".", "get", "(", "\"dataset_reader\"", ")", "\n", "dataset_reader", "=", "dataset_reader_from_params", "(", "dataset_reader_params_dict", ")", "\n", "\n", "model_params_dict", "=", "param_dict", ".", "get", "(", "\"model\"", ")", "\n", "model", ",", "num_train_examples", "=", "model_from_params", "(", "model_params_dict", ",", "dataset_reader", ")", "\n", "model_params_dict", "[", "\"num_train_examples\"", "]", "=", "num_train_examples", "\n", "\n", "trainer_params_dict", "=", "param_dict", ".", "get", "(", "\"trainer\"", ")", "\n", "trainer", "=", "build_trainer", "(", "trainer_params_dict", ",", "dataset_reader", ",", "model", ",", "num_train_examples", ")", "\n", "\n", "trainer", ".", "do_train", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.erniekit.version.show": [[10, 13], ["print", "print"], "function", ["None"], ["def", "show", "(", ")", ":", "\n", "    ", "print", "(", "'full_version:'", ",", "full_version", ")", "\n", "print", "(", "'commit:'", ",", "commit", ")", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEval.__init__": [[24, 32], ["os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_path", ",", "eval_phase", ",", "dev_count", ",", "gpu_id", ")", ":", "\n", "        ", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "eval_phase", "=", "eval_phase", "\n", "self", ".", "dev_count", "=", "dev_count", "\n", "self", ".", "gpu_id", "=", "gpu_id", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEval.write_result": [[33, 53], ["io.open", "io.open.close", "len", "io.open", "io.open.write", "io.open.close", "range", "str", "len", "json.dumps", "io.open", "io.open.write", "io.open.close", "str", "str", "erniekit.utils.util_helper.convert_to_unicode", "str"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "", "def", "write_result", "(", "self", ",", "eval_index", ",", "save_lists", "=", "None", ",", "name_list", "=", "None", ")", ":", "\n", "        ", "\"\"\"write result to hard disk\"\"\"", "\n", "outfile", "=", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "\n", "if", "len", "(", "eval_index", ")", ">", "0", ":", "\n", "            ", "outfile_part", "=", "outfile", "+", "\".part\"", "+", "str", "(", "self", ".", "gpu_id", ")", "\n", "writer", "=", "open", "(", "outfile_part", ",", "\"w\"", ")", "\n", "write_content", "=", "\"\\t\"", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "eval_index", "]", ")", "+", "\"\\n\"", "\n", "writer", ".", "write", "(", "write_content", ")", "\n", "writer", ".", "close", "(", ")", "\n", "", "if", "save_lists", "is", "not", "None", "and", "name_list", "is", "not", "None", ":", "\n", "#save_list_name = [\"qids\", \"labels\", \"scores\"]", "\n", "            ", "save_list_name", "=", "name_list", "\n", "for", "idx", "in", "range", "(", "len", "(", "save_list_name", ")", ")", ":", "\n", "                ", "save_list", "=", "json", ".", "dumps", "(", "save_lists", "[", "idx", "]", ")", "\n", "savefile_part", "=", "outfile", "+", "\".\"", "+", "save_list_name", "[", "idx", "]", "+", "\".part.\"", "+", "str", "(", "self", ".", "gpu_id", ")", "\n", "list_writer", "=", "open", "(", "savefile_part", ",", "\"w\"", ")", "\n", "list_writer", ".", "write", "(", "convert_to_unicode", "(", "save_list", ")", ")", "\n", "list_writer", ".", "close", "(", ")", "\n", "", "", "tmp_writer", "=", "open", "(", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "+", "\"_dec_finish.\"", "+", "str", "(", "self", ".", "gpu_id", ")", ",", "\"w\"", ")", "\n", "tmp_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEval.concat_result": [[54, 88], ["collections.defaultdict", "subprocess.check_output", "ret.decode.decode.rstrip().split", "range", "os.system", "os.system", "ret.decode.decode.decode", "len", "time.sleep", "time.sleep", "time.sleep", "time.sleep", "ret.decode.decode.rstrip", "io.open", "io.open.readline().strip().split", "list", "range", "float", "map", "len", "io.open", "eval_list_all[].extend", "str", "io.open.readline().strip", "zip", "json.loads", "str", "io.open.read", "io.open.readline"], "methods", ["None"], ["", "def", "concat_result", "(", "self", ",", "num_eval_index", ",", "num_list", "=", "None", ",", "name_list", "=", "None", ")", ":", "\n", "        ", "\"\"\"read result from hard disk and concat them\"\"\"", "\n", "outfile", "=", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "\n", "eval_index_all", "=", "[", "0.0", "]", "*", "num_eval_index", "\n", "eval_list_all", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "while", "True", ":", "\n", "            ", "ret", "=", "subprocess", ".", "check_output", "(", "[", "'find'", ",", "self", ".", "output_path", ",", "'-maxdepth'", ",", "'1'", ",", "'-name'", ",", "\n", "self", ".", "eval_phase", "+", "'_dec_finish.*'", "]", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "                ", "ret", "=", "ret", ".", "decode", "(", ")", "\n", "", "ret", "=", "ret", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "len", "(", "ret", ")", "!=", "self", ".", "dev_count", ":", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "continue", "\n", "", "for", "dev_cnt", "in", "range", "(", "self", ".", "dev_count", ")", ":", "\n", "                ", "if", "num_eval_index", ">", "0", ":", "\n", "                    ", "fin", "=", "open", "(", "outfile", "+", "\".part\"", "+", "str", "(", "dev_cnt", ")", ")", "\n", "cur_eval_index_all", "=", "fin", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "cur_eval_index_all", "=", "[", "float", "(", "i", ")", "for", "i", "in", "cur_eval_index_all", "]", "\n", "eval_index_all", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", "+", "x", "[", "1", "]", ",", "zip", "(", "eval_index_all", ",", "cur_eval_index_all", ")", ")", ")", "\n", "\n", "", "if", "num_list", "is", "not", "None", "and", "name_list", "is", "not", "None", ":", "\n", "#save_list_name = [\"qids\", \"labels\", \"scores\"]", "\n", "                    ", "save_list_name", "=", "name_list", "\n", "for", "idx", "in", "range", "(", "len", "(", "save_list_name", ")", ")", ":", "\n", "                        ", "fin_list", "=", "open", "(", "outfile", "+", "\".\"", "+", "save_list_name", "[", "idx", "]", "+", "\".part.\"", "+", "str", "(", "dev_cnt", ")", ",", "\"r\"", ")", "\n", "eval_list_all", "[", "save_list_name", "[", "idx", "]", "]", ".", "extend", "(", "json", ".", "loads", "(", "fin_list", ".", "read", "(", ")", ")", ")", "\n", "\n", "", "", "", "os", ".", "system", "(", "\"rm \"", "+", "outfile", "+", "\".*part*\"", ")", "\n", "os", ".", "system", "(", "\"rm \"", "+", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "+", "\"_dec_finish.*\"", ")", "\n", "break", "\n", "", "if", "num_list", "is", "not", "None", ":", "\n", "            ", "return", "eval_index_all", ",", "eval_list_all", "\n", "", "return", "eval_index_all", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForMrc.__init__": [[92, 106], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_path", ",", "eval_phase", ",", "dev_count", ",", "gpu_id", ",", "tokenizer", ")", ":", "\n", "        ", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "eval_phase", "=", "eval_phase", "\n", "self", ".", "dev_count", "=", "dev_count", "\n", "self", ".", "gpu_id", "=", "gpu_id", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./output\"", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./output'", ")", "\n", "", "self", ".", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "'./output'", ",", "self", ".", "eval_phase", "+", "\"_predictions.json\"", ")", "\n", "self", ".", "output_nbest_file", "=", "os", ".", "path", ".", "join", "(", "'./output'", ",", "self", ".", "eval_phase", "+", "\"_nbest_predictions.json\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForMrc.write_result": [[107, 120], ["io.open", "json.dumps", "isinstance", "io.open.write", "io.open.close", "io.open", "io.open.close", "str", "save_dict.decode.decode.decode", "str"], "methods", ["None"], ["", "def", "write_result", "(", "self", ",", "all_results", ")", ":", "\n", "        ", "\"\"\"write result to hard disk\"\"\"", "\n", "outfile", "=", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "\n", "outfile_part", "=", "outfile", "+", "\".part\"", "+", "str", "(", "self", ".", "gpu_id", ")", "\n", "writer", "=", "open", "(", "outfile_part", ",", "\"w\"", ")", "\n", "save_dict", "=", "json", ".", "dumps", "(", "all_results", ",", "ensure_ascii", "=", "False", ")", "\n", "if", "isinstance", "(", "save_dict", ",", "bytes", ")", ":", "\n", "            ", "save_dict", "=", "save_dict", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "writer", ".", "write", "(", "save_dict", ")", "\n", "writer", ".", "close", "(", ")", "\n", "tmp_writer", "=", "open", "(", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "+", "\"_dec_finish.\"", "+", "str", "(", "self", ".", "gpu_id", ")", ",", "\"w\"", ")", "\n", "tmp_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForMrc.concat_result": [[122, 174], ["subprocess.check_output", "ret.decode.decode.rstrip().split", "range", "os.system", "os.system", "ret.decode.decode.decode", "len", "time.sleep", "time.sleep", "time.sleep", "time.sleep", "io.open", "ret.decode.decode.rstrip", "str", "ValueError", "all_results_read.append", "json.loads", "len", "RawResult", "io.open.read", "logging.warning", "time.sleep", "time.sleep", "time.sleep", "time.sleep", "io.open.read", "io.open.read"], "methods", ["None"], ["", "def", "concat_result", "(", "self", ",", "RawResult", ")", ":", "\n", "        ", "\"\"\"read result from hard disk and concat them\"\"\"", "\n", "outfile", "=", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "\n", "all_results_read", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "ret", "=", "subprocess", ".", "check_output", "(", "[", "'find'", ",", "self", ".", "output_path", ",", "'-maxdepth'", ",", "'1'", ",", "'-name'", ",", "\n", "self", ".", "eval_phase", "+", "'_dec_finish.*'", "]", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "                ", "ret", "=", "ret", ".", "decode", "(", ")", "\n", "", "ret", "=", "ret", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "len", "(", "ret", ")", "!=", "self", ".", "dev_count", ":", "\n", "                ", "time", ".", "sleep", "(", "2", ")", "\n", "continue", "\n", "\n", "", "for", "dev_cnt", "in", "range", "(", "self", ".", "dev_count", ")", ":", "\n", "                ", "fpath", "=", "outfile", "+", "\".part\"", "+", "str", "(", "dev_cnt", ")", "\n", "fin_read", "=", "open", "(", "fpath", ",", "\"rb\"", ")", "\n", "succeed", "=", "False", "\n", "i", "=", "0", "\n", "while", "not", "succeed", ":", "\n", "                    ", "i", "+", "1", "\n", "try", ":", "\n", "                        ", "cur_rawresult", "=", "json", ".", "loads", "(", "fin_read", ".", "read", "(", ")", ")", "\n", "succeed", "=", "True", "\n", "", "except", "Exception", "as", "err", ":", "\n", "                        ", "logging", ".", "warning", "(", "'faild to parse content {} in file {}, error {}'", ".", "format", "(", "fin_read", ".", "read", "(", ")", ",", "fpath", ",", "err", ")", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "\n", "", "if", "i", ">", "5", ":", "\n", "                        ", "break", "\n", "\n", "", "", "if", "not", "succeed", ":", "\n", "                    ", "raise", "ValueError", "(", "'faild to parse content {} in file {}'", ".", "format", "(", "fin_read", ".", "read", "(", ")", ",", "fpath", ")", ")", "\n", "\n", "\n", "", "for", "tp", "in", "cur_rawresult", ":", "\n", "                    ", "assert", "len", "(", "tp", ")", "==", "3", "\n", "all_results_read", ".", "append", "(", "\n", "RawResult", "(", "\n", "unique_id", "=", "tp", "[", "0", "]", ",", "\n", "start_logits", "=", "tp", "[", "1", "]", ",", "\n", "end_logits", "=", "tp", "[", "2", "]", ")", ")", "\n", "\n", "", "", "os", ".", "system", "(", "\"rm \"", "+", "outfile", "+", "\".*part*\"", ")", "\n", "os", ".", "system", "(", "\"rm \"", "+", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "+", "\"_dec_finish.*\"", ")", "\n", "\n", "break", "\n", "\n", "", "return", "all_results_read", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForMrc.write_predictions": [[175, 317], ["logging.info", "logging.info", "collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "sorted", "collections.namedtuple", "multi_process_eval.MultiProcessEvalForMrc._compute_softmax", "enumerate", "io.open", "writer.write", "io.open", "writer.write", "multi_process_eval.MultiProcessEvalForMrc._get_best_indexes", "multi_process_eval.MultiProcessEvalForMrc._get_best_indexes", "nbest.append", "nbest.append", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "len", "tok_text.strip.strip.replace", "tok_text.strip.strip.replace", "tok_text.strip.strip.strip", "multi_process_eval.MultiProcessEvalForMrc.get_final_text", "collections.namedtuple.", "collections.namedtuple.", "json.dumps", "json.dumps", "sorted.append", "tok_text.strip.strip.split", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._compute_softmax", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.get_final_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "write_predictions", "(", "self", ",", "all_examples", ",", "all_features", ",", "all_results", ",", "n_best_size", ",", "\n", "max_answer_length", ",", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ")", ":", "\n", "        ", "\"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "logging", ".", "info", "(", "\"Writing predictions to: %s\"", "%", "(", "output_prediction_file", ")", ")", "\n", "logging", ".", "info", "(", "\"Writing nbest to: %s\"", "%", "(", "output_nbest_file", ")", ")", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "            ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "            ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "[", "\n", "\"feature_index\"", ",", "\"start_index\"", ",", "\"end_index\"", ",", "\"start_logit\"", ",", "\n", "\"end_logit\"", "\n", "]", ")", "\n", "\n", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "            ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "prelim_predictions", "=", "[", "]", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "start_indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "start_logits", ",", "n_best_size", ")", "\n", "end_indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "end_logits", ",", "n_best_size", ")", "\n", "\n", "for", "start_index", "in", "start_indexes", ":", "\n", "                    ", "for", "end_index", "in", "end_indexes", ":", "\n", "# We could hypothetically create invalid predictions, e.g., predict", "\n", "# that the start of the span is in the question. We throw out all", "\n", "# invalid predictions.", "\n", "                        ", "if", "start_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "start_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                            ", "continue", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "start_index", ",", "False", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", "<", "start_index", ":", "\n", "                            ", "continue", "\n", "", "length", "=", "end_index", "-", "start_index", "+", "1", "\n", "if", "length", ">", "max_answer_length", ":", "\n", "                            ", "continue", "\n", "", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "start_index", ",", "\n", "end_index", "=", "end_index", ",", "\n", "start_logit", "=", "result", ".", "start_logits", "[", "start_index", "]", ",", "\n", "end_logit", "=", "result", ".", "end_logits", "[", "end_index", "]", ")", ")", "\n", "\n", "", "", "", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "start_logit", "+", "x", ".", "end_logit", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "                ", "if", "len", "(", "nbest", ")", ">=", "n_best_size", ":", "\n", "                    ", "break", "\n", "", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "if", "pred", ".", "start_index", ">", "0", ":", "# this is a non-null prediction", "\n", "                    ", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "start_index", ":", "(", "pred", ".", "end_index", "+", "1", "\n", ")", "]", "\n", "orig_doc_start", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "start_index", "]", "\n", "orig_doc_end", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "end_index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc_start", ":", "(", "orig_doc_end", "+", "\n", "1", ")", "]", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_tokens", ")", "\n", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\"\"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "final_text", "=", "self", ".", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ")", "\n", "if", "final_text", "in", "seen_predictions", ":", "\n", "                        ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "final_text", "=", "\"\"", "\n", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "\n", "", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "start_logit", "=", "pred", ".", "start_logit", ",", "\n", "end_logit", "=", "pred", ".", "end_logit", ")", ")", "\n", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "if", "not", "nbest", ":", "\n", "                ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "\"empty\"", ",", "start_logit", "=", "0.0", ",", "end_logit", "=", "0.0", ")", ")", "\n", "\n", "", "total_scores", "=", "[", "]", "\n", "best_non_null_entry", "=", "None", "\n", "for", "entry", "in", "nbest", ":", "\n", "                ", "total_scores", ".", "append", "(", "entry", ".", "start_logit", "+", "entry", ".", "end_logit", ")", "\n", "\n", "", "probs", "=", "self", ".", "_compute_softmax", "(", "total_scores", ")", "\n", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "                ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"start_logit\"", "]", "=", "entry", ".", "start_logit", "\n", "output", "[", "\"end_logit\"", "]", "=", "entry", ".", "end_logit", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "\n", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "[", "0", "]", "[", "\"text\"", "]", "\n", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ",", "ensure_ascii", "=", "False", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "with", "open", "(", "output_nbest_file", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_nbest_json", ",", "indent", "=", "4", ",", "ensure_ascii", "=", "False", ")", "+", "\"\\n\"", ")", "\n", "#return all_predictions", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForMrc.get_predictions": [[319, 455], ["collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "sorted", "collections.namedtuple", "multi_process_eval.MultiProcessEvalForMrc._compute_softmax", "enumerate", "multi_process_eval.MultiProcessEvalForMrc._get_best_indexes", "multi_process_eval.MultiProcessEvalForMrc._get_best_indexes", "nbest.append", "nbest.append", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "len", "tok_text.strip.strip.replace", "tok_text.strip.strip.replace", "tok_text.strip.strip.strip", "multi_process_eval.MultiProcessEvalForMrc.get_final_text", "collections.namedtuple.", "collections.namedtuple.", "sorted.append", "tok_text.strip.strip.split", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._compute_softmax", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.get_final_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "", "def", "get_predictions", "(", "self", ",", "all_examples", ",", "all_features", ",", "all_results", ",", "n_best_size", ",", "\n", "max_answer_length", ",", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ")", ":", "\n", "        ", "\"\"\"get final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "            ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "            ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "[", "\n", "\"feature_index\"", ",", "\"start_index\"", ",", "\"end_index\"", ",", "\"start_logit\"", ",", "\n", "\"end_logit\"", "\n", "]", ")", "\n", "\n", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "            ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "prelim_predictions", "=", "[", "]", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "start_indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "start_logits", ",", "n_best_size", ")", "\n", "end_indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "end_logits", ",", "n_best_size", ")", "\n", "\n", "for", "start_index", "in", "start_indexes", ":", "\n", "                    ", "for", "end_index", "in", "end_indexes", ":", "\n", "# We could hypothetically create invalid predictions, e.g., predict", "\n", "# that the start of the span is in the question. We throw out all", "\n", "# invalid predictions.", "\n", "                        ", "if", "start_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "start_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                            ", "continue", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "start_index", ",", "False", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", "<", "start_index", ":", "\n", "                            ", "continue", "\n", "", "length", "=", "end_index", "-", "start_index", "+", "1", "\n", "if", "length", ">", "max_answer_length", ":", "\n", "                            ", "continue", "\n", "", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "start_index", ",", "\n", "end_index", "=", "end_index", ",", "\n", "start_logit", "=", "result", ".", "start_logits", "[", "start_index", "]", ",", "\n", "end_logit", "=", "result", ".", "end_logits", "[", "end_index", "]", ")", ")", "\n", "\n", "", "", "", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "start_logit", "+", "x", ".", "end_logit", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "                ", "if", "len", "(", "nbest", ")", ">=", "n_best_size", ":", "\n", "                    ", "break", "\n", "", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "if", "pred", ".", "start_index", ">", "0", ":", "# this is a non-null prediction", "\n", "                    ", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "start_index", ":", "(", "pred", ".", "end_index", "+", "1", "\n", ")", "]", "\n", "orig_doc_start", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "start_index", "]", "\n", "orig_doc_end", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "end_index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc_start", ":", "(", "orig_doc_end", "+", "\n", "1", ")", "]", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_tokens", ")", "\n", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\"\"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "final_text", "=", "self", ".", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ")", "\n", "if", "final_text", "in", "seen_predictions", ":", "\n", "                        ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "final_text", "=", "\"\"", "\n", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "\n", "", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "start_logit", "=", "pred", ".", "start_logit", ",", "\n", "end_logit", "=", "pred", ".", "end_logit", ")", ")", "\n", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "if", "not", "nbest", ":", "\n", "                ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "\"empty\"", ",", "start_logit", "=", "0.0", ",", "end_logit", "=", "0.0", ")", ")", "\n", "\n", "", "total_scores", "=", "[", "]", "\n", "best_non_null_entry", "=", "None", "\n", "for", "entry", "in", "nbest", ":", "\n", "                ", "total_scores", ".", "append", "(", "entry", ".", "start_logit", "+", "entry", ".", "end_logit", ")", "\n", "\n", "", "probs", "=", "self", ".", "_compute_softmax", "(", "total_scores", ")", "\n", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "                ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"start_logit\"", "]", "=", "entry", ".", "start_logit", "\n", "output", "[", "\"end_logit\"", "]", "=", "entry", ".", "end_logit", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "\n", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "[", "0", "]", "[", "\"text\"", "]", "\n", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "return", "all_predictions", ",", "all_nbest_json", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForMrc.get_final_text": [[457, 540], ["tok_text.find", "multi_process_eval.MultiProcessEvalForMrc.get_final_text._strip_spaces"], "methods", ["None"], ["", "def", "get_final_text", "(", "self", ",", "pred_text", ",", "orig_text", ",", "do_lower_case", ")", ":", "\n", "        ", "\"\"\"Project the tokenized prediction back to the original text.\"\"\"", "\n", "\n", "# When we created the data, we kept track of the alignment between original", "\n", "# (whitespace tokenized) tokens and our WordPiece tokenized tokens. So", "\n", "# now `orig_text` contains the span of our original text corresponding to the", "\n", "# span that we predicted.", "\n", "#", "\n", "# However, `orig_text` may contain extra characters that we don't want in", "\n", "# our prediction.", "\n", "#", "\n", "# For example, let's say:", "\n", "#   pred_text = steve smith", "\n", "#   orig_text = Steve Smith's", "\n", "#", "\n", "# We don't want to return `orig_text` because it contains the extra \"'s\".", "\n", "#", "\n", "# We don't want to return `pred_text` because it's already been normalized", "\n", "# (the SQuAD eval script also does punctuation stripping/lower casing but", "\n", "# our tokenizer does additional normalization like stripping accent", "\n", "# characters).", "\n", "#", "\n", "# What we really want to return is \"Steve Smith\".", "\n", "#", "\n", "# Therefore, we have to apply a semi-complicated alignment heruistic between", "\n", "# `pred_text` and `orig_text` to get a character-to-charcter alignment. This", "\n", "# can fail in certain cases in which case we just return `orig_text`.", "\n", "\n", "def", "_strip_spaces", "(", "text", ")", ":", "\n", "            ", "ns_chars", "=", "[", "]", "\n", "ns_to_s_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "(", "i", ",", "c", ")", "in", "enumerate", "(", "text", ")", ":", "\n", "                ", "if", "c", "==", "\" \"", ":", "\n", "                    ", "continue", "\n", "", "ns_to_s_map", "[", "len", "(", "ns_chars", ")", "]", "=", "i", "\n", "ns_chars", ".", "append", "(", "c", ")", "\n", "", "ns_text", "=", "\"\"", ".", "join", "(", "ns_chars", ")", "\n", "return", "(", "ns_text", ",", "ns_to_s_map", ")", "\n", "\n", "# We first tokenize `orig_text`, strip whitespace from the result", "\n", "# and `pred_text`, and check if they are the same length. If they are", "\n", "# NOT the same length, the heuristic has failed. If they are the same", "\n", "# length, we assume the characters are one-to-one aligned.", "\n", "\n", "", "tok_text", "=", "\" \"", ".", "join", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "orig_text", ")", ")", "\n", "\n", "start_position", "=", "tok_text", ".", "find", "(", "pred_text", ")", "\n", "if", "start_position", "==", "-", "1", ":", "\n", "            ", "return", "orig_text", "\n", "", "end_position", "=", "start_position", "+", "len", "(", "pred_text", ")", "-", "1", "\n", "\n", "(", "orig_ns_text", ",", "orig_ns_to_s_map", ")", "=", "_strip_spaces", "(", "orig_text", ")", "\n", "(", "tok_ns_text", ",", "tok_ns_to_s_map", ")", "=", "_strip_spaces", "(", "tok_text", ")", "\n", "\n", "if", "len", "(", "orig_ns_text", ")", "!=", "len", "(", "tok_ns_text", ")", ":", "\n", "            ", "return", "orig_text", "\n", "\n", "# We then project the characters in `pred_text` back to `orig_text` using", "\n", "# the character-to-character alignment.", "\n", "", "tok_s_to_ns_map", "=", "{", "}", "\n", "for", "(", "i", ",", "tok_index", ")", "in", "six", ".", "iteritems", "(", "tok_ns_to_s_map", ")", ":", "\n", "            ", "tok_s_to_ns_map", "[", "tok_index", "]", "=", "i", "\n", "\n", "", "orig_start_position", "=", "None", "\n", "if", "start_position", "in", "tok_s_to_ns_map", ":", "\n", "            ", "ns_start_position", "=", "tok_s_to_ns_map", "[", "start_position", "]", "\n", "if", "ns_start_position", "in", "orig_ns_to_s_map", ":", "\n", "                ", "orig_start_position", "=", "orig_ns_to_s_map", "[", "ns_start_position", "]", "\n", "\n", "", "", "if", "orig_start_position", "is", "None", ":", "\n", "            ", "return", "orig_text", "\n", "\n", "", "orig_end_position", "=", "None", "\n", "if", "end_position", "in", "tok_s_to_ns_map", ":", "\n", "            ", "ns_end_position", "=", "tok_s_to_ns_map", "[", "end_position", "]", "\n", "if", "ns_end_position", "in", "orig_ns_to_s_map", ":", "\n", "                ", "orig_end_position", "=", "orig_ns_to_s_map", "[", "ns_end_position", "]", "\n", "\n", "", "", "if", "orig_end_position", "is", "None", ":", "\n", "            ", "return", "orig_text", "\n", "\n", "", "output_text", "=", "orig_text", "[", "orig_start_position", ":", "(", "orig_end_position", "+", "1", ")", "]", "\n", "return", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForMrc._get_best_indexes": [[542, 553], ["sorted", "range", "enumerate", "len", "best_indexes.append"], "methods", ["None"], ["", "def", "_get_best_indexes", "(", "self", ",", "logits", ",", "n_best_size", ")", ":", "\n", "        ", "\"\"\"Get the n-best logits from a list.\"\"\"", "\n", "index_and_score", "=", "sorted", "(", "\n", "enumerate", "(", "logits", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "best_indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "index_and_score", ")", ")", ":", "\n", "            ", "if", "i", ">=", "n_best_size", ":", "\n", "                ", "break", "\n", "", "best_indexes", ".", "append", "(", "index_and_score", "[", "i", "]", "[", "0", "]", ")", "\n", "", "return", "best_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForMrc._compute_softmax": [[555, 576], ["math.exp", "exp_scores.append", "probs.append"], "methods", ["None"], ["", "def", "_compute_softmax", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Compute softmax probability over raw logits.\"\"\"", "\n", "if", "not", "scores", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "max_score", "=", "None", "\n", "for", "score", "in", "scores", ":", "\n", "            ", "if", "max_score", "is", "None", "or", "score", ">", "max_score", ":", "\n", "                ", "max_score", "=", "score", "\n", "\n", "", "", "exp_scores", "=", "[", "]", "\n", "total_sum", "=", "0.0", "\n", "for", "score", "in", "scores", ":", "\n", "            ", "x", "=", "math", ".", "exp", "(", "score", "-", "max_score", ")", "\n", "exp_scores", ".", "append", "(", "x", ")", "\n", "total_sum", "+=", "x", "\n", "\n", "", "probs", "=", "[", "]", "\n", "for", "score", "in", "exp_scores", ":", "\n", "            ", "probs", ".", "append", "(", "score", "/", "total_sum", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiNodeWriter.__init__": [[581, 605], ["int", "os.getenv", "os.path.exists", "os.makedirs", "str"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_path", ",", "dev_count", ",", "gpu_id", ",", "use_multi_node", "=", "False", ")", ":", "\n", "        ", "self", ".", "current_eval_phase", "=", "None", "\n", "self", ".", "current_writer", "=", "None", "\n", "self", ".", "current_outfile", "=", "None", "\n", "\n", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "dev_count", "=", "dev_count", "\n", "self", ".", "gpu_id", "=", "gpu_id", "\n", "self", ".", "node_suffix", "=", "\"\"", "\n", "self", ".", "use_multi_node", "=", "use_multi_node", "\n", "self", ".", "unused", "=", "False", "\n", "node_nums", "=", "int", "(", "os", ".", "getenv", "(", "\"PADDLE_NODES_NUM\"", ",", "\"1\"", ")", ")", "\n", "dev_per_node", "=", "self", ".", "dev_count", "//", "node_nums", "\n", "self", ".", "node_id", "=", "self", ".", "gpu_id", "//", "dev_per_node", "\n", "if", "node_nums", "!=", "1", ":", "\n", "            ", "self", ".", "dev_count", "=", "dev_per_node", "\n", "self", ".", "gpu_id", "=", "self", ".", "gpu_id", "%", "dev_per_node", "\n", "if", "use_multi_node", ":", "\n", "                ", "self", ".", "node_suffix", "=", "\".node\"", "+", "str", "(", "self", ".", "node_id", ")", "\n", "", "elif", "self", ".", "node_id", "!=", "0", ":", "\n", "                ", "self", ".", "unused", "=", "True", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiNodeWriter.init_writer": [[606, 613], ["io.open", "str"], "methods", ["None"], ["", "", "def", "init_writer", "(", "self", ",", "eval_phase", ")", ":", "\n", "        ", "\"\"\"open output file\"\"\"", "\n", "if", "self", ".", "unused", ":", "\n", "            ", "return", "\n", "", "self", ".", "current_eval_phase", "=", "eval_phase", "\n", "self", ".", "current_outfile", "=", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "current_eval_phase", "+", "self", ".", "node_suffix", "\n", "self", ".", "current_writer", "=", "open", "(", "self", ".", "current_outfile", "+", "\".part\"", "+", "str", "(", "self", ".", "gpu_id", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf8\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiNodeWriter.write_result_list": [[614, 625], ["multi_process_eval.MultiNodeWriter.current_writer.write", "str", "str", "isinstance"], "methods", ["None"], ["", "def", "write_result_list", "(", "self", ",", "result_list", ")", ":", "\n", "        ", "\"\"\"write batch result\"\"\"", "\n", "if", "self", ".", "unused", ":", "\n", "            ", "return", "\n", "", "assert", "self", ".", "current_writer", ",", "\"Writer not init before write\"", "\n", "for", "result", "in", "result_list", ":", "\n", "            ", "if", "six", ".", "PY2", ":", "\n", "                ", "write_content", "=", "[", "str", "(", "i", ")", "if", "not", "isinstance", "(", "i", ",", "unicode", ")", "else", "i", "for", "i", "in", "result", "]", "\n", "", "else", ":", "\n", "                ", "write_content", "=", "[", "str", "(", "i", ")", "for", "i", "in", "result", "]", "\n", "", "self", ".", "current_writer", ".", "write", "(", "\"\\t\"", ".", "join", "(", "write_content", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiNodeWriter.finalize_writer": [[626, 667], ["multi_process_eval.MultiNodeWriter.current_writer.close", "io.open", "io.open.close", "str", "subprocess.check_output", "ret.decode.decode.rstrip().split", "os.system", "os.system", "ret.decode.decode.decode", "len", "time.sleep", "time.sleep", "time.sleep", "time.sleep", "str", "ret.decode.decode.rstrip", "str", "range"], "methods", ["None"], ["", "", "def", "finalize_writer", "(", "self", ",", "key_num", "=", "2", ",", "sort_key_index", "=", "1", ",", "remove_sort_key", "=", "True", ")", ":", "\n", "        ", "\"\"\"merge result\"\"\"", "\n", "if", "self", ".", "unused", ":", "\n", "            ", "return", "\n", "", "assert", "self", ".", "current_writer", ",", "\"Writer not init before finalize\"", "\n", "self", ".", "current_writer", ".", "close", "(", ")", "\n", "tmp_file_prefix", "=", "self", ".", "current_eval_phase", "+", "\"_dec_finish.\"", "\n", "tmp_writer", "=", "open", "(", "self", ".", "output_path", "+", "\"/\"", "+", "tmp_file_prefix", "+", "str", "(", "self", ".", "gpu_id", ")", ",", "\"w\"", ")", "\n", "tmp_writer", ".", "close", "(", ")", "\n", "outfile", "=", "None", "\n", "if", "self", ".", "gpu_id", "==", "0", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "ret", "=", "subprocess", ".", "check_output", "(", "[", "'find'", ",", "self", ".", "output_path", ",", "\n", "'-maxdepth'", ",", "'1'", ",", "\n", "'-name'", ",", "tmp_file_prefix", "+", "'*'", "]", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "                    ", "ret", "=", "ret", ".", "decode", "(", ")", "\n", "", "ret", "=", "ret", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "len", "(", "ret", ")", "!=", "self", ".", "dev_count", ":", "\n", "                    ", "time", ".", "sleep", "(", "1", ")", "\n", "continue", "\n", "\n", "", "outfile", "=", "self", ".", "current_outfile", "\n", "merge_str", "=", "\"\"", ".", "join", "(", "[", "\"$\"", "+", "str", "(", "index", ")", "for", "index", "in", "range", "(", "1", ",", "key_num", "+", "1", ")", "\n", "if", "not", "(", "remove_sort_key", "and", "index", "==", "sort_key_index", ")", "]", ")", "\n", "sort_cmd", "=", "[", "\"sort\"", ",", "outfile", "+", "\".part*\"", ",", "\"-n\"", ",", "\n", "\"-t\"", ",", "\"$'\\\\t'\"", ",", "\n", "\"-k\"", ",", "str", "(", "sort_key_index", ")", "]", "\n", "awk_cmd", "=", "[", "\"awk\"", ",", "\"-F\"", ",", "'\"\\\\t\"'", ",", "\n", "\"'{print \"", "+", "merge_str", "+", "\"}'\"", ",", "\n", "\">\"", "+", "outfile", "]", "\n", "merge_cmd", "=", "sort_cmd", "+", "[", "\"|\"", "]", "+", "awk_cmd", "\n", "rm_cmd", "=", "[", "\"rm\"", ",", "outfile", "+", "\".part*\"", ",", "self", ".", "output_path", "+", "\"/\"", "+", "tmp_file_prefix", "+", "\"*\"", "]", "\n", "os", ".", "system", "(", "\" \"", ".", "join", "(", "merge_cmd", ")", ")", "\n", "os", ".", "system", "(", "\" \"", ".", "join", "(", "rm_cmd", ")", ")", "\n", "break", "\n", "\n", "", "", "self", ".", "current_writer", "=", "None", "\n", "self", ".", "current_eval_phase", "=", "None", "\n", "self", ".", "current_outfile", "=", "None", "\n", "return", "outfile", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForErnieDoc.__init__": [[671, 684], ["os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_path", ",", "eval_phase", ",", "dev_count", ",", "gpu_id", ")", ":", "\n", "        ", "self", ".", "output_path", "=", "output_path", "\n", "self", ".", "eval_phase", "=", "eval_phase", "\n", "self", ".", "dev_count", "=", "dev_count", "\n", "self", ".", "gpu_id", "=", "gpu_id", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./output\"", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./output'", ")", "\n", "", "self", ".", "output_prediction_file", "=", "os", ".", "path", ".", "join", "(", "'./output'", ",", "self", ".", "eval_phase", "+", "\"_predictions.json\"", ")", "\n", "self", ".", "output_nbest_file", "=", "os", ".", "path", ".", "join", "(", "'./output'", ",", "self", ".", "eval_phase", "+", "\"_nbest_predictions.json\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForErnieDoc.write_result": [[685, 697], ["io.open", "json.dumps", "isinstance", "io.open.write", "io.open.close", "io.open", "io.open.close", "str", "save_dict.decode.decode.decode", "str"], "methods", ["None"], ["", "def", "write_result", "(", "self", ",", "all_results", ")", ":", "\n", "        ", "\"\"\"write result to hard disk\"\"\"", "\n", "outfile", "=", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "\n", "outfile_part", "=", "outfile", "+", "\".part\"", "+", "str", "(", "self", ".", "gpu_id", ")", "\n", "writer", "=", "open", "(", "outfile_part", ",", "\"w\"", ")", "\n", "save_dict", "=", "json", ".", "dumps", "(", "all_results", ",", "ensure_ascii", "=", "False", ")", "\n", "if", "isinstance", "(", "save_dict", ",", "bytes", ")", ":", "\n", "            ", "save_dict", "=", "save_dict", ".", "decode", "(", "\"utf-8\"", ")", "\n", "", "writer", ".", "write", "(", "save_dict", ")", "\n", "writer", ".", "close", "(", ")", "\n", "tmp_writer", "=", "open", "(", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "+", "\"_dec_finish.\"", "+", "str", "(", "self", ".", "gpu_id", ")", ",", "\"w\"", ")", "\n", "tmp_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForErnieDoc.concat_result": [[699, 736], ["subprocess.check_output", "ret.decode.decode.rstrip().split", "range", "os.system", "os.system", "ret.decode.decode.decode", "len", "time.sleep", "time.sleep", "time.sleep", "time.sleep", "io.open", "json.loads", "ret.decode.decode.rstrip", "io.open.read", "all_results_read.append", "str", "len", "RawResult"], "methods", ["None"], ["", "def", "concat_result", "(", "self", ",", "RawResult", ")", ":", "\n", "        ", "\"\"\"read result from hard disk and concat them\"\"\"", "\n", "outfile", "=", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "\n", "all_results_read", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "ret", "=", "subprocess", ".", "check_output", "(", "[", "'find'", ",", "self", ".", "output_path", ",", "'-maxdepth'", ",", "'1'", ",", "'-name'", ",", "\n", "self", ".", "eval_phase", "+", "'_dec_finish.*'", "]", ")", "\n", "\n", "#_, ret = commands.getstatusoutput('find ' + self.output_path + \\", "\n", "#    ' -maxdepth 1 -name ' + self.eval_phase + '\"_dec_finish.*\"')", "\n", "if", "six", ".", "PY3", ":", "\n", "                ", "ret", "=", "ret", ".", "decode", "(", ")", "\n", "", "ret", "=", "ret", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\n\"", ")", "\n", "if", "len", "(", "ret", ")", "!=", "self", ".", "dev_count", ":", "\n", "                ", "time", ".", "sleep", "(", "1", ")", "\n", "continue", "\n", "\n", "", "for", "dev_cnt", "in", "range", "(", "self", ".", "dev_count", ")", ":", "\n", "                ", "fin_read", "=", "open", "(", "outfile", "+", "\".part\"", "+", "str", "(", "dev_cnt", ")", ",", "\"rb\"", ")", "\n", "cur_rawresult", "=", "json", ".", "loads", "(", "fin_read", ".", "read", "(", ")", ")", "\n", "for", "tp", "in", "cur_rawresult", ":", "\n", "                    ", "assert", "len", "(", "tp", ")", "==", "3", "\n", "all_results_read", ".", "append", "(", "\n", "RawResult", "(", "\n", "unique_id", "=", "tp", "[", "0", "]", ",", "\n", "prob", "=", "tp", "[", "1", "]", ",", "\n", "label", "=", "tp", "[", "2", "]", ")", ")", "\n", "\n", "#subprocess.check_output([\"rm \", outfile + \".part*\"])", "\n", "#subprocess.check_output([\"rm \", self.output_path + \"/\" + self.eval_phase + \"_dec_finish.*\"])", "\n", "#commands.getstatusoutput(\"rm \" + outfile + \".part*\")", "\n", "#commands.getstatusoutput(\"rm \" + self.output_path + \"/\" + self.eval_phase + \"_dec_finish.*\")", "\n", "", "", "os", ".", "system", "(", "\"rm \"", "+", "outfile", "+", "\"*.part*\"", ")", "\n", "os", ".", "system", "(", "\"rm \"", "+", "self", ".", "output_path", "+", "\"/\"", "+", "self", ".", "eval_phase", "+", "\"_dec_finish.*\"", ")", "\n", "break", "\n", "\n", "", "return", "all_results_read", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.multi_process_eval.MultiProcessEvalForErnieDoc.write_predictions": [[737, 759], ["collections.defaultdict", "print", "collections.defaultdict.items", "numpy.array().astype", "numpy.array().astype", "unique_id_to_result[].append", "numpy.sum().tolist", "numpy.array().astype.append", "numpy.array().astype.append", "len", "len", "len", "len", "len", "list", "numpy.array", "numpy.array", "set", "numpy.sum", "set", "numpy.array"], "methods", ["None"], ["", "def", "write_predictions", "(", "self", ",", "all_results", ")", ":", "\n", "        ", "\"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "\n", "unique_id_to_result", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "result", "in", "all_results", ":", "\n", "            ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", ".", "append", "(", "result", ")", "\n", "", "print", "(", "\"data num: %d\"", "%", "(", "len", "(", "unique_id_to_result", ")", ")", ")", "\n", "all_probs", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "unique_id_to_result", ".", "items", "(", ")", ":", "\n", "            ", "prob_for_one_sample", "=", "[", "result", ".", "prob", "for", "result", "in", "value", "]", "\n", "label_for_one_sample", "=", "[", "result", ".", "label", "for", "result", "in", "value", "]", "\n", "assert", "len", "(", "set", "(", "label_for_one_sample", ")", ")", "==", "1", "\n", "prob_emb", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "prob_for_one_sample", ")", ",", "axis", "=", "0", ")", ".", "tolist", "(", ")", "\n", "all_probs", ".", "append", "(", "prob_emb", ")", "\n", "all_labels", ".", "append", "(", "list", "(", "set", "(", "label_for_one_sample", ")", ")", ")", "\n", "", "assert", "len", "(", "all_labels", ")", "==", "len", "(", "all_probs", ")", "\n", "\n", "all_labels", "=", "np", ".", "array", "(", "all_labels", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "all_probs", "=", "np", ".", "array", "(", "all_probs", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "return", "len", "(", "unique_id_to_result", ")", ",", "all_labels", ",", "all_probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params._get_dict_from_environ_or_json_or_file": [[10, 28], ["isinstance", "os.environ.get", "os.path.exists", "open().read", "eval", "ValueError", "open", "repr"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval"], ["def", "_get_dict_from_environ_or_json_or_file", "(", "args", ",", "env_name", ")", ":", "\n", "    ", "if", "args", "==", "''", ":", "\n", "        ", "return", "None", "\n", "", "if", "args", "is", "None", ":", "\n", "        ", "s", "=", "os", ".", "environ", ".", "get", "(", "env_name", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "args", "\n", "if", "os", ".", "path", ".", "exists", "(", "s", ")", ":", "\n", "            ", "s", "=", "open", "(", "s", ")", ".", "read", "(", ")", "\n", "", "", "if", "isinstance", "(", "s", ",", "six", ".", "string_types", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "r", "=", "eval", "(", "s", ")", "\n", "", "except", "SyntaxError", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "'json parse error: %s \\n>Got json: %s'", "%", "\n", "(", "repr", "(", "e", ")", ",", "s", ")", ")", "\n", "", "return", "r", "\n", "", "else", ":", "\n", "        ", "return", "s", "#None", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.parse_file": [[30, 36], ["params._get_dict_from_environ_or_json_or_file", "ValueError"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params._get_dict_from_environ_or_json_or_file"], ["", "", "def", "parse_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"parse_file\"\"\"", "\n", "d", "=", "_get_dict_from_environ_or_json_or_file", "(", "filename", ",", "None", ")", "\n", "if", "d", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'file(%s) not found'", "%", "filename", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.evaluate_file": [[38, 46], ["logging.info", "open", "evaluation_file.read"], "function", ["None"], ["", "def", "evaluate_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"evaluate_file\"\"\"", "\n", "# logging.info(", "\n", "#     f\"error loading _jsonnet (this is expected on Windows), treating {filename} as plain json\"", "\n", "# )", "\n", "logging", ".", "info", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "evaluation_file", ":", "\n", "        ", "return", "evaluation_file", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.from_file": [[48, 54], ["json.loads", "params.evaluate_file", "logging.info", "json.dumps"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.evaluate_file"], ["", "", "def", "from_file", "(", "filename", ",", "log_info", "=", "True", ")", ":", "\n", "    ", "\"\"\"from_file\"\"\"", "\n", "json_file", "=", "json", ".", "loads", "(", "evaluate_file", "(", "filename", ")", ",", "strict", "=", "False", ")", "\n", "if", "log_info", ":", "\n", "        ", "logging", ".", "info", "(", "json", ".", "dumps", "(", "json_file", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "", "return", "json_file", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.log_info": [[56, 59], ["logging.info", "json.dumps"], "function", ["None"], ["", "def", "log_info", "(", "json_file", ")", ":", "\n", "    ", "\"\"\"log info\"\"\"", "\n", "logging", ".", "info", "(", "json", ".", "dumps", "(", "json_file", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.replace_none": [[61, 79], ["isinstance", "params.items", "isinstance", "params.replace_none", "isinstance", "params.replace_none", "chr", "logging.debug", "int", "ord"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.replace_none", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.replace_none"], ["", "def", "replace_none", "(", "params", ")", ":", "\n", "    ", "\"\"\"replace_none\"\"\"", "\n", "if", "params", "==", "\"None\"", ":", "\n", "        ", "return", "None", "\n", "", "elif", "isinstance", "(", "params", ",", "dict", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "            ", "params", "[", "key", "]", "=", "replace_none", "(", "value", ")", "\n", "if", "key", "==", "\"split_char\"", "and", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "value", "=", "chr", "(", "int", "(", "value", ",", "base", "=", "16", ")", ")", "\n", "logging", ".", "debug", "(", "\"ord(value): {} \"", ".", "format", "(", "ord", "(", "value", ")", ")", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "pass", "\n", "", "params", "[", "key", "]", "=", "value", "\n", "", "", "return", "params", "\n", "", "elif", "isinstance", "(", "params", ",", "list", ")", ":", "\n", "        ", "return", "[", "replace_none", "(", "value", ")", "for", "value", "in", "params", "]", "\n", "", "return", "params", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.log.init_log": [[9, 60], ["logging.Formatter", "logging.Formatter", "logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel", "os.path.dirname", "logging.handlers.TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler.setLevel", "logging.handlers.TimedRotatingFileHandler.setFormatter", "logging.getLogger.addHandler", "logging.handlers.TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler", "logging.handlers.TimedRotatingFileHandler.setLevel", "logging.handlers.TimedRotatingFileHandler.setFormatter", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.makedirs", "os.path.isdir", "os.path.exists"], "function", ["None"], ["def", "init_log", "(", "log_path", ",", "level", "=", "logging", ".", "INFO", ",", "when", "=", "\"D\"", ",", "backup", "=", "7", ",", "\n", "format", "=", "\"%(levelname)s: %(asctime)s: %(filename)s:%(lineno)d * %(thread)d %(message)s\"", ",", "\n", "datefmt", "=", "\"%m-%d %H:%M:%S\"", ")", ":", "\n", "    ", "\"\"\"\n    init_log - initialize log module\n    Args:\n    log_path - Log file path prefix.\n    Log data will go to two files: log_path.log and log_path.log.wf\n    Any non-exist parent directories will be created automatically\n    level - msg above the level will be displayed\n    DEBUG < INFO < WARNING < ERROR < CRITICAL\n    the default value is logging.INFO\n    when - how to split the log file by time interval\n    'S' : Seconds\n    'M' : Minutes\n    'H' : Hours\n    'D' : Days\n    'W' : Week day\n    default value: 'D'\n    format - format of the log\n    default format:\n    %(levelname)s: %(asctime)s: %(filename)s:%(lineno)d * %(thread)d %(message)s\n    INFO: 12-09 18:02:42: log.py:40 * 139814749787872 HELLO WORLD\n    backup - how many backup file to keep\n    default value: 7\n    Raises:\n    OSError: fail to create log directories\n    IOError: fail to open log file\n    \"\"\"", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "format", ",", "datefmt", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "handlers", "=", "[", "]", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "dir", "=", "os", ".", "path", ".", "dirname", "(", "log_path", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", "and", "not", "os", ".", "path", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "", "handler", "=", "logging", ".", "handlers", ".", "TimedRotatingFileHandler", "(", "log_path", "+", "\".log\"", ",", "\n", "when", "=", "when", ",", "\n", "backupCount", "=", "backup", ")", "\n", "handler", ".", "setLevel", "(", "level", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "handler", "=", "logging", ".", "handlers", ".", "TimedRotatingFileHandler", "(", "log_path", "+", "\".log.wf\"", ",", "\n", "when", "=", "when", ",", "\n", "backupCount", "=", "backup", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "WARNING", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "console_hdl", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "console_hdl", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_hdl", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.append_name": [[13, 22], ["None"], "function", ["None"], ["def", "append_name", "(", "name", ",", "postfix", ")", ":", "\n", "    ", "\"\"\" append name with postfix \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "        ", "ret", "=", "None", "\n", "", "elif", "name", "==", "''", ":", "\n", "        ", "ret", "=", "postfix", "\n", "", "else", ":", "\n", "        ", "ret", "=", "'%s_%s'", "%", "(", "name", ",", "postfix", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.parse_data_config": [[24, 36], ["open", "json.load", "IOError"], "function", ["None"], ["", "def", "parse_data_config", "(", "config_path", ")", ":", "\n", "    ", "\"\"\"truncate_seq_pair\n    :param config_path:\n    :return:\n    \"\"\"", "\n", "try", ":", "\n", "        ", "with", "open", "(", "config_path", ")", "as", "json_file", ":", "\n", "            ", "config_dict", "=", "json", ".", "load", "(", "json_file", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "", "", "except", "Exception", ":", "\n", "        ", "raise", "IOError", "(", "\"Error in parsing Ernie model config file '%s'\"", "%", "config_path", ")", "\n", "", "else", ":", "\n", "        ", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.parse_version_code": [[38, 52], ["float", "version_str.split"], "function", ["None"], ["", "", "def", "parse_version_code", "(", "version_str", ",", "default_version_code", "=", "1.5", ")", ":", "\n", "    ", "\"\"\"\n    parser paddle fluid version code to float type\n    :param version_str:\n    :param default_version_code:\n    :return:\n    \"\"\"", "\n", "if", "version_str", ":", "\n", "        ", "v1", "=", "version_str", ".", "split", "(", "\".\"", ")", "[", "0", ":", "2", "]", "\n", "v_code_str", "=", "\".\"", ".", "join", "(", "v1", ")", "\n", "v_code", "=", "float", "(", "v_code_str", ")", "\n", "return", "v_code", "\n", "", "else", ":", "\n", "        ", "return", "default_version_code", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words": [[54, 77], ["len", "tmp.append", "tmp.insert", "tmp.insert"], "function", ["None"], ["", "", "def", "truncation_words", "(", "words", ",", "max_seq_length", ",", "truncation_type", ")", ":", "\n", "    ", "\"\"\"\n    :param words:\n    :param max_seq_length:\n    :param truncation_type:\n    :return:\n    \"\"\"", "\n", "if", "len", "(", "words", ")", ">", "max_seq_length", ":", "\n", "        ", "if", "truncation_type", "==", "MaxTruncation", ".", "KEEP_HEAD", ":", "\n", "            ", "words", "=", "words", "[", "0", ":", "max_seq_length", "]", "\n", "", "elif", "truncation_type", "==", "MaxTruncation", ".", "KEEP_TAIL", ":", "\n", "            ", "tmp", "=", "words", "[", "0", ":", "max_seq_length", "-", "1", "]", "\n", "tmp", ".", "append", "(", "words", "[", "-", "1", "]", ")", "\n", "words", "=", "tmp", "\n", "", "elif", "truncation_type", "==", "MaxTruncation", ".", "KEEP_BOTH_HEAD_TAIL", ":", "\n", "            ", "tmp", "=", "words", "[", "1", ":", "max_seq_length", "-", "2", "]", "\n", "tmp", ".", "insert", "(", "0", ",", "words", "[", "0", "]", ")", "\n", "tmp", ".", "insert", "(", "max_seq_length", "-", "1", ",", "words", "[", "-", "1", "]", ")", "\n", "words", "=", "tmp", "\n", "", "else", ":", "\n", "            ", "words", "=", "words", "[", "0", ":", "max_seq_length", "]", "\n", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncate_seq_pair": [[79, 94], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["None"], ["", "def", "truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"\n    :param tokens_a:\n    :param tokens_a:\n    :param max_length:\n    :return:\n    \"\"\"", "\n", "while", "True", ":", "\n", "        ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "            ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "            ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "            ", "tokens_b", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.convert_to_unicode": [[96, 114], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "text.decode", "isinstance", "ValueError", "type", "type"], "function", ["None"], ["", "", "", "def", "convert_to_unicode", "(", "text", ")", ":", "\n", "    ", "\"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "return", "text", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.whitespace_tokenize": [[116, 123], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a peice of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.is_whitespace": [[125, 135], ["unicodedata.category"], "function", ["None"], ["", "def", "is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.is_control": [[137, 147], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.is_punctuation": [[149, 163], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.clean_text": [[165, 177], ["ord", "util_helper.is_whitespace", "util_helper.is_control", "output.append", "output.append"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.is_control"], ["", "def", "clean_text", "(", "text", ")", ":", "\n", "    ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "is_control", "(", "char", ")", ":", "\n", "            ", "continue", "\n", "", "if", "is_whitespace", "(", "char", ")", ":", "\n", "            ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "            ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.printable_text": [[179, 200], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "isinstance", "text.encode", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode"], ["", "def", "printable_text", "(", "text", ")", ":", "\n", "    ", "\"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"", "\n", "\n", "# These functions want `str` for both Python2 and Python3, but in one case", "\n", "# it's a Unicode string and in the other it's a byte string.", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "return", "text", ".", "encode", "(", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data": [[202, 219], ["os.path.exists", "params.from_file", "params.replace_none", "params.replace_none.update", "json.dumps", "json.dumps", "open", "json_file.write"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.from_file", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.replace_none", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update"], ["", "", "def", "save_meta_data", "(", "data_dict", ",", "save_file", ",", "mode", "=", "\"add\"", ")", ":", "\n", "    ", "\"\"\"\n    :param data_dict:\n    :param save_file:\n    :param mode: \u4fdd\u5b58\u6a21\u5f0f: override, add\n    :return:\n    \"\"\"", "\n", "# \u76ee\u6807\u6587\u4ef6\u5df2\u5b58\u5728\u4e14\u662f\u8ffd\u52a0\u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u9700\u8981\u5148\u5c06\u539f\u6765\u7684dict\u8bfb\u51fa\u6765\uff0c\u518d\u7528\u65b0\u7684dict\u53bb\u66f4\u65b0\u539f\u6765\u7684dict\uff0c\u6700\u540e\u4fdd\u5b58", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_file", ")", "and", "mode", "==", "\"add\"", ":", "\n", "        ", "meta_dict", "=", "params", ".", "from_file", "(", "save_file", ")", "\n", "_meta", "=", "params", ".", "replace_none", "(", "meta_dict", ")", "\n", "_meta", ".", "update", "(", "data_dict", ")", "\n", "json_str", "=", "json", ".", "dumps", "(", "_meta", ")", "\n", "", "else", ":", "\n", "        ", "json_str", "=", "json", ".", "dumps", "(", "data_dict", ")", "\n", "", "with", "open", "(", "save_file", ",", "'w'", ")", "as", "json_file", ":", "\n", "        ", "json_file", ".", "write", "(", "json_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.get_model_paths": [[221, 269], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "collections.OrderedDict", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "get_model_paths", "(", "path_checkpoint", ",", "path_inference_model", ",", "steps", ",", "need_encryption", "=", "False", ")", ":", "\n", "    ", "\"\"\" \u901a\u8fc7step\u548ctrainer_param\u914d\u7f6e\u4e2d\u7684output\u8def\u5f84\uff0c\u8ba1\u7b97\u51fa\u6a21\u578b\u5b58\u50a8\u65f6\u9700\u8981\u7528\u5230\u7684\u6240\u6709\u8def\u5f84\n    :param path_checkpoint:\n    :param path_inference_model:\n    :param steps:\n    :param need_encryption:\n    :return:\n    \"\"\"", "\n", "suffix", "=", "\"\"", "\n", "infer_meta_name", "=", "\"infer_data_params.json\"", "\n", "model_meta_name", "=", "\"model.meta\"", "\n", "if", "need_encryption", ":", "\n", "        ", "suffix", "=", "\"_enc\"", "\n", "\n", "# \u6587\u4ef6\u4fdd\u5b58\u7684\u539f\u59cb\u8def\u5f84\uff0c\u5f53\u4e0d\u9700\u8981\u52a0\u5bc6\u7684\u65f6\u5019\uff0c\u539f\u59cb\u8def\u5f84\u548c\u6700\u7ec8\u7684\u6a21\u578b\u4fdd\u5b58\u8def\u5f84\u662f\u540c\u4e00\u4e2a", "\n", "", "checkpoint_original_name", "=", "\"checkpoints_step_\"", "+", "str", "(", "steps", ")", "\n", "checkpoint_original_model_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_original_name", ")", "\n", "checkpoint_name", "=", "\"checkpoints_step_\"", "+", "str", "(", "steps", ")", "+", "suffix", "\n", "checkpoint_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_name", ",", "model_meta_name", ")", "\n", "checkpoint_model_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_name", ")", "\n", "checkpoint_infer_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_name", ",", "infer_meta_name", ")", "\n", "checkpoint_irepo_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_name", "+", "\".meta\"", ")", "\n", "\n", "inference_original_name", "=", "\"inference_step_\"", "+", "str", "(", "steps", ")", "\n", "inference_original_model_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_original_name", ")", "\n", "inference_name", "=", "\"inference_step_\"", "+", "str", "(", "steps", ")", "+", "suffix", "\n", "inference_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_name", ",", "model_meta_name", ")", "\n", "inference_model_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_name", ")", "\n", "inference_infer_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_name", ",", "infer_meta_name", ")", "\n", "inference_irepo_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_name", "+", "\".meta\"", ")", "\n", "\n", "path_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "path_dict", "[", "\"checkpoints_name\"", "]", "=", "checkpoint_name", "\n", "path_dict", "[", "\"checkpoints_original_name\"", "]", "=", "checkpoint_original_name", "\n", "path_dict", "[", "\"checkpoints_original_model_path\"", "]", "=", "checkpoint_original_model_path", "\n", "path_dict", "[", "\"checkpoints_model_path\"", "]", "=", "checkpoint_model_path", "\n", "path_dict", "[", "\"checkpoints_meta_path\"", "]", "=", "checkpoint_meta_path", "\n", "path_dict", "[", "\"checkpoints_infer_meta_path\"", "]", "=", "checkpoint_infer_meta_path", "\n", "path_dict", "[", "\"checkpoints_irepo_meta_path\"", "]", "=", "checkpoint_irepo_meta_path", "\n", "path_dict", "[", "\"inference_name\"", "]", "=", "inference_name", "\n", "path_dict", "[", "\"inference_original_name\"", "]", "=", "inference_original_name", "\n", "path_dict", "[", "\"inference_original_model_path\"", "]", "=", "inference_original_model_path", "\n", "path_dict", "[", "\"inference_model_path\"", "]", "=", "inference_model_path", "\n", "path_dict", "[", "\"inference_meta_path\"", "]", "=", "inference_meta_path", "\n", "path_dict", "[", "\"inference_infer_meta_path\"", "]", "=", "inference_infer_meta_path", "\n", "path_dict", "[", "\"inference_irepo_meta_path\"", "]", "=", "inference_irepo_meta_path", "\n", "\n", "return", "path_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.format_convert_bio": [[271, 348], ["collections.OrderedDict", "os.listdir", "list", "list", "os.path.join.endswith", "os.path.join", "os.remove", "open", "open", "list", "range", "range", "fp2.write", "fp2.write", "line.strip().split", "triple.split", "offset.split", "util_helper.convert_to_unicode", "len", "print", "int", "int", "int", "int", "int", "int", "line.strip", "line.strip"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "format_convert_bio", "(", "dir_path", ",", "vocab_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"return\"\"\"", "\n", "\n", "def", "is_alphabet_or_digit", "(", "c", ")", ":", "\n", "        ", "\"\"\"return\"\"\"", "\n", "alphabet", "=", "list", "(", "u\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"", ")", "\n", "digit", "=", "list", "(", "u\"0123456789.\"", ")", "\n", "if", "c", "in", "alphabet", "or", "c", "in", "digit", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "vocab_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "count", "=", "0", "\n", "filelist", "=", "os", ".", "listdir", "(", "dir_path", ")", "\n", "for", "file_path", "in", "filelist", ":", "\n", "        ", "if", "file_path", ".", "endswith", "(", "\".txt\"", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "fp1", ":", "\n", "                ", "with", "open", "(", "file_path", "+", "\"_bio\"", ",", "\"w\"", ")", "as", "fp2", ":", "\n", "                    ", "for", "line", "in", "fp1", ":", "\n", "                        ", "try", ":", "\n", "                            ", "tokens", ",", "triple", ",", "offset", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "_", ",", "_", ",", "predicate", "=", "triple", ".", "split", "(", "\" \"", ")", "\n", "subject_start", ",", "subject_end", ",", "object_start", ",", "object_end", "=", "offset", ".", "split", "(", "\" \"", ")", "\n", "", "except", "Exception", ":", "\n", "                            ", "print", "(", "line", ".", "strip", "(", "\"\\n\"", ")", ")", "\n", "continue", "\n", "", "tokens", "=", "list", "(", "convert_to_unicode", "(", "tokens", ")", ")", "\n", "labels", "=", "[", "\"O\"", "]", "*", "len", "(", "tokens", ")", "\n", "labels", "[", "int", "(", "subject_start", ")", "]", "=", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"S\"", "\n", "for", "i", "in", "range", "(", "int", "(", "subject_start", ")", "+", "1", ",", "int", "(", "subject_end", ")", "+", "1", ")", ":", "\n", "                            ", "labels", "[", "i", "]", "=", "\"I\"", "\n", "", "if", "not", "(", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"S\"", ")", "in", "vocab_map", ":", "\n", "                            ", "vocab_map", "[", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"S\"", "]", "=", "count", "\n", "count", "+=", "1", "\n", "", "labels", "[", "int", "(", "object_start", ")", "]", "=", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"O\"", "\n", "for", "i", "in", "range", "(", "int", "(", "object_start", ")", "+", "1", ",", "int", "(", "object_end", ")", "+", "1", ")", ":", "\n", "                            ", "labels", "[", "i", "]", "=", "\"I\"", "\n", "", "if", "not", "(", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"O\"", ")", "in", "vocab_map", ":", "\n", "                            ", "vocab_map", "[", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"O\"", "]", "=", "count", "\n", "count", "+=", "1", "\n", "# sub_tokens = []", "\n", "# sub_labels = []", "\n", "# sub_token = \"\"", "\n", "# sub_label = \"\"", "\n", "# is_first = True", "\n", "# for i in range(len(tokens)):", "\n", "# if is_alphabet_or_digit(tokens[i]):", "\n", "# sub_token += tokens[i]", "\n", "# if is_first:", "\n", "# sub_label = labels[i]", "\n", "# is_first = False", "\n", "# else:", "\n", "# if sub_token != \"\":", "\n", "# sub_tokens.append(sub_token)", "\n", "# sub_labels.append(sub_label)", "\n", "# sub_token = \"\"", "\n", "# is_first = True", "\n", "# sub_tokens.append(tokens[i])", "\n", "# sub_labels.append(labels[i])", "\n", "# if sub_token != \"\":", "\n", "# sub_tokens.append(sub_token)", "\n", "# sub_labels.append(sub_label)", "\n", "# if len(sub_tokens) != len(sub_labels) or u\"\" in sub_tokens:", "\n", "# print(\"Hello\", \"*****\")", "\n", "# continue", "\n", "", "fp2", ".", "write", "(", "\" \"", ".", "join", "(", "tokens", ")", "+", "\"\\t\"", ")", "\n", "fp2", ".", "write", "(", "\" \"", ".", "join", "(", "labels", ")", "+", "\"\\n\"", ")", "\n", "", "", "", "os", ".", "remove", "(", "file_path", ")", "\n", "", "", "vocab_map", "[", "\"I\"", "]", "=", "count", "\n", "vocab_map", "[", "\"O\"", "]", "=", "count", "+", "1", "\n", "# if vocab_path:", "\n", "#    with open(vocab_path, \"w\") as fp3:", "\n", "#        for key in vocab_map.keys():", "\n", "#            fp3.write(key + \"\\t\" + str(vocab_map[key]) + \"\\n\")", "\n", "#    return len(vocab_map)", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.make_targz": [[350, 361], ["tarfile.open", "tar.add", "os.path.basename"], "function", ["None"], ["", "def", "make_targz", "(", "output_filename", ",", "source_dir", ")", ":", "\n", "    ", "\"\"\"\u538b\u7f29\u67d0\u4e2a\u6587\u4ef6\u4e3atar.gz\n    :param output_filename: \u538b\u7f29\u5305\u8def\u5f84\n    :param source_dir: \u5f85\u538b\u7f29\u539f\u59cb\u8def\u5f84\n    :return:\n    \"\"\"", "\n", "errcode", "=", "-", "1", "\n", "with", "tarfile", ".", "open", "(", "output_filename", ",", "\"w:gz\"", ")", "as", "tar", ":", "\n", "        ", "tar", ".", "add", "(", "source_dir", ",", "arcname", "=", "os", ".", "path", ".", "basename", "(", "source_dir", ")", ")", "\n", "errcode", "=", "0", "\n", "", "return", "errcode", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.get_warmup_and_linear_decay": [[363, 366], ["min"], "function", ["None"], ["", "def", "get_warmup_and_linear_decay", "(", "max_steps", ",", "warmup_steps", ")", ":", "\n", "    ", "\"\"\" warmup linear decay function \"\"\"", "\n", "return", "lambda", "step", ":", "min", "(", "step", "/", "warmup_steps", ",", "1.", "-", "(", "step", "-", "warmup_steps", ")", "/", "(", "max_steps", "-", "warmup_steps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.get_work_path": [[371, 378], ["os.path.join"], "function", ["None"], ["def", "get_work_path", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    get_work_path\n    \"\"\"", "\n", "if", "not", "path", "or", "not", "_work_dir", "or", "path", "[", "0", "]", "in", "'./'", ":", "\n", "        ", "return", "path", "\n", "", "return", "os", ".", "path", ".", "join", "(", "_work_dir", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.log_v": [[398, 404], ["logger.info"], "function", ["None"], ["def", "log_v", "(", "info", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Print log information on stdout.\n    \"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "logger", ".", "info", "(", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.load_op_meta_info_and_register_op": [[410, 416], ["paddle.fluid.core.load_op_meta_info_and_register_op", "paddle.fluid.framework.OpProtoHolder.instance().update_op_proto", "paddle.fluid.framework.OpProtoHolder.instance"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.load_op_meta_info_and_register_op"], ["def", "load_op_meta_info_and_register_op", "(", "lib_filename", ")", ":", "\n", "    ", "\"\"\"\n    load of meta info and register op\n    \"\"\"", "\n", "core", ".", "load_op_meta_info_and_register_op", "(", "lib_filename", ")", "\n", "return", "OpProtoHolder", ".", "instance", "(", ")", ".", "update_op_proto", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.import_module_from_library_wenxin": [[418, 440], ["os.path.join", "util_helper.log_v", "util_helper.load_op_meta_info_and_register_op", "util_helper._generate_python_module", "OS_NAME.startswith", "os.path.exists", "ValueError"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.log_v", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.load_op_meta_info_and_register_op", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper._generate_python_module"], ["", "def", "import_module_from_library_wenxin", "(", "module_name", ",", "build_directory", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load shared library and import it as callable python module.\n    \"\"\"", "\n", "if", "IS_WINDOWS", ":", "\n", "        ", "dynamic_suffix", "=", "'.pyd'", "\n", "", "elif", "OS_NAME", ".", "startswith", "(", "'darwin'", ")", ":", "\n", "        ", "dynamic_suffix", "=", "'.dylib'", "\n", "", "else", ":", "\n", "        ", "dynamic_suffix", "=", "'.so'", "\n", "", "ext_path", "=", "os", ".", "path", ".", "join", "(", "build_directory", ",", "module_name", "+", "dynamic_suffix", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ext_path", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Extension path: {} does not exist.\"", ".", "format", "(", "\n", "ext_path", ")", ")", "\n", "\n", "# load custom op_info and kernels from .so shared library", "\n", "", "log_v", "(", "'loading shared library from: {}'", ".", "format", "(", "ext_path", ")", ",", "verbose", ")", "\n", "op_names", "=", "load_op_meta_info_and_register_op", "(", "ext_path", ")", "\n", "\n", "# generate Python api in ext_path", "\n", "return", "_generate_python_module", "(", "module_name", ",", "op_names", ",", "build_directory", ",", "\n", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.parse_op_info": [[452, 471], ["paddle.fluid.framework.OpProtoHolder.instance().get_op_proto", "ValueError", "paddle.fluid.framework.OpProtoHolder.instance", "paddle.fluid.framework.OpProtoHolder.instance"], "function", ["None"], ["def", "parse_op_info", "(", "op_name", ")", ":", "\n", "    ", "\"\"\"\n    Parse input names and outpus detail information from registered custom op\n    from OpInfoMap.\n    \"\"\"", "\n", "if", "op_name", "not", "in", "OpProtoHolder", ".", "instance", "(", ")", ".", "op_proto_map", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Please load {} shared library file firstly by \"", "\n", "\"`paddle.utils.cpp_extension.load_op_meta_info_and_register_op(...)`\"", ".", "\n", "format", "(", "op_name", ")", ")", "\n", "", "op_proto", "=", "OpProtoHolder", ".", "instance", "(", ")", ".", "get_op_proto", "(", "op_name", ")", "\n", "\n", "in_names", "=", "[", "x", ".", "name", "for", "x", "in", "op_proto", ".", "inputs", "]", "\n", "out_names", "=", "[", "x", ".", "name", "for", "x", "in", "op_proto", ".", "outputs", "]", "\n", "attr_names", "=", "[", "\n", "x", ".", "name", "for", "x", "in", "op_proto", ".", "attrs", "if", "x", ".", "name", "not", "in", "DEFAULT_OP_ATTR_NAMES", "\n", "]", "\n", "\n", "return", "in_names", ",", "out_names", ",", "attr_names", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper._get_api_inputs_str": [[473, 497], ["util_helper.parse_op_info", "[].lower", "[].lower", "[].lower", "p.split", "in_name.split", "attr_name.split"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.parse_op_info"], ["", "def", "_get_api_inputs_str", "(", "op_name", ")", ":", "\n", "    ", "\"\"\"\n    Returns string of api parameters and inputs dict.\n    \"\"\"", "\n", "in_names", ",", "out_names", ",", "attr_names", "=", "parse_op_info", "(", "op_name", ")", "\n", "# e.g: x, y, z", "\n", "param_names", "=", "in_names", "+", "attr_names", "\n", "# NOTE(chenweihang): we add suffix `@VECTOR` for std::vector<Tensor> input,", "\n", "# but the string contains `@` cannot used as argument name, so we split", "\n", "# input name by `@`, and only use first substr as argument", "\n", "params_str", "=", "','", ".", "join", "(", "[", "p", ".", "split", "(", "\"@\"", ")", "[", "0", "]", ".", "lower", "(", ")", "for", "p", "in", "param_names", "]", ")", "\n", "# e.g: {'X': x, 'Y': y, 'Z': z}", "\n", "ins_str", "=", "\"{%s}\"", "%", "','", ".", "join", "(", "[", "\n", "\"'{}' : {}\"", ".", "format", "(", "in_name", ",", "in_name", ".", "split", "(", "\"@\"", ")", "[", "0", "]", ".", "lower", "(", ")", ")", "\n", "for", "in_name", "in", "in_names", "\n", "]", ")", "\n", "# e.g: {'num': n}", "\n", "attrs_str", "=", "\"{%s}\"", "%", "\",\"", ".", "join", "(", "[", "\n", "\"'{}' : {}\"", ".", "format", "(", "attr_name", ",", "attr_name", ".", "split", "(", "\"@\"", ")", "[", "0", "]", ".", "lower", "(", ")", ")", "\n", "for", "attr_name", "in", "attr_names", "\n", "]", ")", "\n", "# e.g: ['Out', 'Index']", "\n", "outs_str", "=", "\"[%s]\"", "%", "','", ".", "join", "(", "[", "\"'{}'\"", ".", "format", "(", "name", ")", "for", "name", "in", "out_names", "]", ")", "\n", "return", "[", "params_str", ",", "ins_str", ",", "attrs_str", ",", "outs_str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper._custom_api_content": [[499, 536], ["util_helper._get_api_inputs_str", "textwrap.dedent().lstrip", "textwrap.dedent().lstrip.format", "textwrap.dedent"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper._get_api_inputs_str"], ["", "def", "_custom_api_content", "(", "op_name", ")", ":", "\n", "    ", "(", "params_str", ",", "ins_str", ",", "attrs_str", ",", "outs_str", ")", "=", "_get_api_inputs_str", "(", "op_name", ")", "\n", "\n", "API_TEMPLATE", "=", "textwrap", ".", "dedent", "(", "\"\"\"\n        from paddle.fluid.core import VarBase\n        from paddle.fluid.framework import in_dygraph_mode, _dygraph_tracer\n        from paddle.fluid.layer_helper import LayerHelper\n        def {op_name}({inputs}):\n            # prepare inputs and outputs\n            ins = {ins}\n            attrs = {attrs}\n            outs = {{}}\n            out_names = {out_names}\n            # The output variable's dtype use default value 'float32',\n            # and the actual dtype of output variable will be inferred in runtime.\n            if in_dygraph_mode():\n                for out_name in out_names:\n                    outs[out_name] = VarBase()\n                _dygraph_tracer().trace_op(type=\"{op_name}\", inputs=ins, outputs=outs, attrs=attrs)\n            else:\n                helper = LayerHelper(\"{op_name}\", **locals())\n                for out_name in out_names:\n                    outs[out_name] = helper.create_variable(dtype='float32')\n                helper.append_op(type=\"{op_name}\", inputs=ins, outputs=outs, attrs=attrs)\n            res = [outs[out_name] for out_name in out_names]\n            return res[0] if len(res)==1 else res\n            \"\"\"", ")", ".", "lstrip", "(", ")", "\n", "\n", "# generate python api file", "\n", "api_content", "=", "API_TEMPLATE", ".", "format", "(", "\n", "op_name", "=", "op_name", ",", "\n", "inputs", "=", "params_str", ",", "\n", "ins", "=", "ins_str", ",", "\n", "attrs", "=", "attrs_str", ",", "\n", "out_names", "=", "outs_str", ")", "\n", "\n", "return", "api_content", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper._load_module_from_file": [[538, 555], ["util_helper.log_v", "importlib.machinery.SourceFileLoader", "machinery.SourceFileLoader.load_module", "os.path.exists", "ValueError"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.log_v"], ["", "def", "_load_module_from_file", "(", "api_file_path", ",", "module_name", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Load module from python file.\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "api_file_path", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"File : {} does not exist.\"", ".", "format", "(", "\n", "api_file_path", ")", ")", "\n", "\n", "# Unique readable module name to place custom api.", "\n", "", "log_v", "(", "'import module from file: {}'", ".", "format", "(", "api_file_path", ")", ",", "verbose", ")", "\n", "ext_name", "=", "\"_paddle_cpp_extension_\"", "+", "module_name", "\n", "\n", "# load module with RWLock", "\n", "loader", "=", "machinery", ".", "SourceFileLoader", "(", "ext_name", ",", "api_file_path", ")", "\n", "module", "=", "loader", ".", "load_module", "(", ")", "\n", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper._generate_python_module": [[557, 590], ["str", "os.path.join", "util_helper.log_v", "atexit.register", "util_helper._load_module_from_file", "os.path.exists", "util_helper._custom_api_content", "open", "f.write", "os.remove", "threading.currentThread", "util_helper._generate_python_module.remove_if_exit"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.log_v", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.register", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper._load_module_from_file", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper._custom_api_content"], ["", "def", "_generate_python_module", "(", "module_name", ",", "\n", "op_names", ",", "\n", "build_directory", ",", "\n", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Automatically generate python file to allow import or load into as module\n    \"\"\"", "\n", "\n", "def", "remove_if_exit", "(", "filepath", ")", ":", "\n", "        ", "\"\"\"\n        remove if file exit\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "            ", "os", ".", "remove", "(", "filepath", ")", "\n", "\n", "# NOTE: Use unique id as suffix to avoid write same file at same time in", "\n", "# both multi-thread and multi-process.", "\n", "", "", "thread_id", "=", "str", "(", "threading", ".", "currentThread", "(", ")", ".", "ident", ")", "\n", "api_file", "=", "os", ".", "path", ".", "join", "(", "build_directory", ",", "\n", "module_name", "+", "'_'", "+", "thread_id", "+", "'.py'", ")", "\n", "log_v", "(", "\"generate api file: {}\"", ".", "format", "(", "api_file", ")", ",", "verbose", ")", "\n", "\n", "# delete the temp file before exit python process", "\n", "atexit", ".", "register", "(", "lambda", ":", "remove_if_exit", "(", "api_file", ")", ")", "\n", "\n", "# write into .py file with RWLock", "\n", "api_content", "=", "[", "_custom_api_content", "(", "op_name", ")", "for", "op_name", "in", "op_names", "]", "\n", "with", "open", "(", "api_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'\\n\\n'", ".", "join", "(", "api_content", ")", ")", "\n", "\n", "# load module", "\n", "", "custom_module", "=", "_load_module_from_file", "(", "api_file", ",", "module_name", ",", "verbose", ")", "\n", "return", "custom_module", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.__init__": [[38, 40], ["parser.add_argument_group"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "parser", ",", "title", ",", "des", ")", ":", "\n", "        ", "self", ".", "_group", "=", "parser", ".", "add_argument_group", "(", "title", "=", "title", ",", "description", "=", "des", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg": [[41, 51], ["args.ArgumentGroup._group.add_argument"], "methods", ["None"], ["", "def", "add_arg", "(", "self", ",", "name", ",", "type", ",", "default", ",", "help", ",", "positional_arg", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"add_arg\"\"\"", "\n", "prefix", "=", "\"\"", "if", "positional_arg", "else", "\"--\"", "\n", "type", "=", "str2bool", "if", "type", "==", "bool", "else", "type", "\n", "self", ".", "_group", ".", "add_argument", "(", "\n", "prefix", "+", "name", ",", "\n", "default", "=", "default", ",", "\n", "type", "=", "type", ",", "\n", "help", "=", "help", "+", "' Default: %(default)s.'", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.str2bool": [[26, 33], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n    str2bool\n    \"\"\"", "\n", "# because argparse does not support to parse \"true, False\" as python", "\n", "# boolean directly", "\n", "return", "v", ".", "lower", "(", ")", "in", "(", "\"true\"", ",", "\"t\"", ",", "\"1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.print_arguments": [[53, 59], ["logging.info", "sorted", "logging.info", "six.iteritems", "logging.info", "vars"], "function", ["None"], ["", "", "def", "print_arguments", "(", "args", ")", ":", "\n", "    ", "\"\"\"print_arguments\"\"\"", "\n", "logging", ".", "info", "(", "\"-----------  Configuration Arguments -----------\"", ")", "\n", "for", "arg", ",", "value", "in", "sorted", "(", "six", ".", "iteritems", "(", "vars", "(", "args", ")", ")", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"%s: %s\"", "%", "(", "arg", ",", "value", ")", ")", "\n", "", "logging", ".", "info", "(", "\"------------------------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.build_common_arguments": [[61, 87], ["argparse.ArgumentParser", "args.ArgumentGroup", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "args.ArgumentGroup.add_arg", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.args.ArgumentGroup.add_arg"], ["", "def", "build_common_arguments", "(", ")", ":", "\n", "    ", "\"\"\"build_common_arguments\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "__doc__", ")", "\n", "model_g", "=", "ArgumentGroup", "(", "parser", ",", "\"model\"", ",", "\"model configuration and paths.\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"mode\"", ",", "str", ",", "\"train\"", ",", "\"train,inference,eval\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"param_path\"", ",", "str", ",", "None", ",", "\"path to parameter file describing the model to be trained\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"paddle_version\"", ",", "str", ",", "\"1.5.2\"", ",", "\"paddle_fluid version code\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"pre_train_type\"", ",", "str", ",", "None", ",", "\"type of pretrain mode:ernie_base, \"", "\n", "\"ernie_large, ernie_tiny, ernie_distillation, None\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"task_type\"", ",", "str", ",", "\"custom\"", ",", "\"task type:classify, matching, sequence_label, generate, custom\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"net_type\"", ",", "str", ",", "\"custom\"", ",", "\"net type: CNN,BOW,TextCNN,CRF, LSTM, SimNet-BOW ...\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"run_script\"", ",", "str", ",", "\"run_trainer.py\"", ",", "\n", "\"run_trainer_dy.py or run_trainer.py for preprocess to run\"", ")", "\n", "# for grid search", "\n", "model_g", ".", "add_arg", "(", "\"use_grid_search\"", ",", "bool", ",", "False", ",", "\"grid search\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"dropout_rate\"", ",", "float", ",", "0.1", ",", "\"dropout\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"lr_decay\"", ",", "float", ",", "0.99", ",", "\"range 0.95-0.99, increase lr simultaneously.\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"lr_rate\"", ",", "float", ",", "2e-5", ",", "\"leaning rate\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"batch_size\"", ",", "int", ",", "16", ",", "\"batch size\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"epoch\"", ",", "int", ",", "-", "1", ",", "\"epoch\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"use_file_replace\"", ",", "bool", ",", "False", ",", "\"use file replace\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"file_name\"", ",", "str", ",", "\"name\"", ",", "\"file name\"", ")", "\n", "model_g", ".", "add_arg", "(", "\"num_labels\"", ",", "int", ",", "2", ",", "\"num of labels\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.visual_manager.VisualManager.__init__": [[15, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "logdir", "=", "None", ")", ":", "\n", "        ", "\"\"\"init\n        \"\"\"", "\n", "self", ".", "write_dict", "=", "{", "}", "\n", "if", "logdir", ":", "\n", "            ", "self", ".", "logdir", "=", "logdir", "\n", "", "else", ":", "\n", "            ", "self", ".", "logdir", "=", "\"./visual_log\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.visual_manager.VisualManager.show_metric": [[24, 52], ["logging.debug", "metrics_output.items", "logging.error", "logging.error", "len", "visual_manager.VisualManager.write_dict.get", "isinstance", "visual_manager.VisualManager.add_scalar", "os.path.join", "traceback.format_exc", "visualdl.LogWriter", "visual_manager.VisualManager.add_scalar"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "", "def", "show_metric", "(", "self", ",", "metrics_output", ",", "steps", ",", "tag", ")", ":", "\n", "        ", "\"\"\"\u8bc4\u4f30\u6307\u6807\u5c55\u793a\n        :param metrics_output: \u9700\u8981\u5c55\u793a\u7684\u6307\u6807\uff0c\u6309dict\u65b9\u5f0f\u5b58\u50a8\n        :param steps:\n        :param tag:\n        :return:\n        \"\"\"", "\n", "logging", ".", "debug", "(", "\"{phase} log: steps {steps}, metrics: {metrics}\"", ".", "format", "(", "phase", "=", "tag", ",", "\n", "steps", "=", "steps", ",", "\n", "metrics", "=", "metrics_output", ")", ")", "\n", "try", ":", "\n", "            ", "if", "metrics_output", "and", "len", "(", "metrics_output", ")", "!=", "0", ":", "\n", "                ", "for", "key", ",", "value", "in", "metrics_output", ".", "items", "(", ")", ":", "\n", "# self.writer.add_scalar(tag=tag, step=steps, value=value)", "\n", "                    ", "writer", "=", "self", ".", "write_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "if", "writer", "and", "isinstance", "(", "writer", ",", "LogWriter", ")", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "tag", "=", "tag", ",", "step", "=", "steps", ",", "value", "=", "value", ")", "\n", "", "else", ":", "\n", "                        ", "logger_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logdir", ",", "key", ")", "\n", "with", "LogWriter", "(", "logdir", "=", "logger_name", ")", "as", "writer", ":", "\n", "                            ", "writer", ".", "add_scalar", "(", "tag", "=", "tag", ",", "step", "=", "steps", ",", "value", "=", "value", ")", "\n", "", "self", ".", "write_dict", "[", "key", "]", "=", "writer", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "logging", ".", "error", "(", "\"error type of metrics_output\"", ")", "\n", "\n", "", "", "except", "Exception", ":", "\n", "            ", "logging", ".", "error", "(", "'traceback.format_exc():%s'", "%", "traceback", ".", "format_exc", "(", ")", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.__init__": [[26, 86], ["dynamic_trainer.BaseDynamicTrainer.params.get", "dynamic_trainer.BaseDynamicTrainer.parser_meta", "dynamic_trainer.BaseDynamicTrainer.params.get", "dynamic_trainer.BaseDynamicTrainer.model_class.structure", "dynamic_trainer.BaseDynamicTrainer.params.get", "VisualManager", "paddle.distributed.fleet.init", "paddle.distributed.fleet.init", "logging.info", "paddle.distributed.get_rank", "paddle.distributed.get_rank", "paddle.distributed.get_rank", "paddle.distributed.get_rank", "logging.info", "dynamic_trainer.BaseDynamicTrainer.load_pretrain_model", "paddle.distributed.fleet.distributed_model", "paddle.distributed.fleet.distributed_model", "os.path.join", "os.path.join", "dynamic_trainer.BaseDynamicTrainer.model_class._layers.set_optimizer", "paddle.distributed.fleet.distributed_optimizer", "paddle.distributed.fleet.distributed_optimizer", "dynamic_trainer.BaseDynamicTrainer.model_class.set_optimizer", "paddle.get_world_size", "paddle.get_world_size", "dynamic_trainer.BaseDynamicTrainer.params.keys", "dynamic_trainer.BaseDynamicTrainer.params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.parser_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.structure", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.load_pretrain_model", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.set_optimizer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.set_optimizer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "model_class", ")", ":", "\n", "        ", "\"\"\"\n        :param params:\n        :param data_set_reader:\n        :param model_class:\n        \"\"\"", "\n", "self", ".", "framework_version", "=", "\"1.0.0\"", "\n", "self", ".", "data_set_reader", "=", "data_set_reader", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "visual_manager", "=", "None", "\n", "if", "self", ".", "params", ".", "get", "(", "\"metrics_visual\"", ",", "False", ")", ":", "\n", "            ", "from", ".", ".", "utils", ".", "visual_manager", "import", "VisualManager", "\n", "self", ".", "visual_manager", "=", "VisualManager", "(", "logdir", "=", "self", ".", "params", ".", "get", "(", "\"visual_log_dir\"", ",", "None", ")", ")", "\n", "", "self", ".", "model_class", "=", "model_class", "\n", "self", ".", "multi_devices", "=", "False", "# \u662f\u5426\u662f\u591a\u5361\uff08\u76ee\u524d\u6587\u5fc3\u7684\u591a\u5361\u4f7f\u7528fleet\u6765\u542f\u52a8\u591a\u4e2a\u8fdb\u7a0b\uff09", "\n", "self", ".", "use_fleet", "=", "False", "\n", "\n", "self", ".", "parser_meta", "(", ")", "\n", "# fleet\u73af\u5883\u521d\u59cb\u5316", "\n", "if", "self", ".", "params", ".", "get", "(", "\"PADDLE_IS_FLEET\"", ",", "0", ")", ":", "\n", "            ", "fleet", ".", "init", "(", "is_collective", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"fleet init ...\"", ")", "\n", "self", ".", "use_fleet", "=", "True", "\n", "self", ".", "worker_index", "=", "paddle", ".", "distributed", ".", "get_rank", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "worker_index", "=", "0", "\n", "\n", "", "self", ".", "model_class", ".", "structure", "(", ")", "\n", "\n", "if", "self", ".", "worker_index", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "\"load_pretrain_model...\"", ")", "\n", "self", ".", "load_pretrain_model", "(", ")", "\n", "\n", "# \u901a\u8fc7Fleet API\u83b7\u53d6\u5206\u5e03\u5f0fmodel\uff0c\u7528\u4e8e\u652f\u6301\u5206\u5e03\u5f0f\u8bad\u7ec3", "\n", "", "if", "self", ".", "use_fleet", ":", "\n", "            ", "self", ".", "model_class", "=", "fleet", ".", "distributed_model", "(", "self", ".", "model_class", ")", "\n", "if", "dist", ".", "get_world_size", "(", ")", ">", "1", ":", "\n", "                ", "self", ".", "multi_devices", "=", "True", "\n", "self", ".", "original_model", "=", "self", ".", "model_class", ".", "_layers", "\n", "", "else", ":", "\n", "                ", "self", ".", "original_model", "=", "self", ".", "model_class", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "original_model", "=", "self", ".", "model_class", "\n", "\n", "", "self", ".", "use_amp", "=", "self", ".", "params", ".", "get", "(", "\"use_amp\"", ",", "False", ")", "\n", "\n", "if", "'output_path'", "in", "self", ".", "params", ".", "keys", "(", ")", "and", "self", ".", "params", "[", "\"output_path\"", "]", ":", "\n", "            ", "self", ".", "save_checkpoints_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", "[", "\"output_path\"", "]", ",", "\"save_checkpoints\"", ")", "\n", "self", ".", "save_inference_model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", "[", "\"output_path\"", "]", ",", "\"save_inference_model\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_checkpoints_path", "=", "\"./output/save_checkpoints/\"", "\n", "self", ".", "save_inference_model_path", "=", "\"./output/save_inference_model/\"", "\n", "\n", "# \u6587\u5fc3\u7684\u8c03\u7528", "\n", "", "if", "self", ".", "multi_devices", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "model_class", ".", "_layers", ".", "set_optimizer", "(", ")", "\n", "self", ".", "optimizer", "=", "fleet", ".", "distributed_optimizer", "(", "self", ".", "optimizer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "self", ".", "model_class", ".", "set_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.do_train": [[87, 92], ["None"], "methods", ["None"], ["", "", "def", "do_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u542f\u52a8\u6570\u636e\u96c6\u5faa\u73af\uff0c\u5f00\u59cb\u8bad\u7ec3\uff0c\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\u5177\u4f53\u65b9\u6cd5\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.do_evaluate": [[93, 101], ["None"], "methods", ["None"], ["", "def", "do_evaluate", "(", "self", ",", "reader", ",", "phase", ",", "step", ")", ":", "\n", "        ", "\"\"\"\u6a21\u578b\u6548\u679c\u8bc4\u4f30\uff0c\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0\u5177\u4f53\u65b9\u6cd5\n        :param reader:\n        :param phase:\n        :param step:\n        :return: loss\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.parser_meta": [[102, 129], ["logging.info", "dynamic_trainer.BaseDynamicTrainer.params.get", "dynamic_trainer.BaseDynamicTrainer.load_model_meta_info", "dynamic_trainer.BaseDynamicTrainer.get", "dynamic_trainer.BaseDynamicTrainer.get", "dynamic_trainer.BaseDynamicTrainer.get", "dynamic_trainer.BaseDynamicTrainer.get", "dynamic_trainer.BaseDynamicTrainer.get.get", "dynamic_trainer.BaseDynamicTrainer.load_model_meta_info"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_model_meta_info", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_model_meta_info"], ["", "def", "parser_meta", "(", "self", ")", ":", "\n", "        ", "\"\"\"parser_meta\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"parser meta ....\"", ")", "\n", "model_meta_info", "=", "{", "}", "\n", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "or", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "            ", "model_meta_info", "=", "self", ".", "load_model_meta_info", "(", "\"net_model\"", ")", "\n", "", "elif", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "            ", "model_meta_info", "=", "self", ".", "load_model_meta_info", "(", "\"pre_train_model\"", ")", "\n", "# \u7531\u5916\u90e8json\u914d\u7f6e\u4f20\u5165", "\n", "", "meta_param", "=", "{", "}", "\n", "extra_param", "=", "self", ".", "params", ".", "get", "(", "\"extra_param\"", ",", "None", ")", "\n", "if", "extra_param", ":", "\n", "            ", "meta_param", "=", "extra_param", ".", "get", "(", "\"meta\"", ",", "None", ")", "\n", "\n", "", "self", ".", "meta_dict", "=", "{", "\n", "\"framework_version\"", ":", "version", ".", "full_version", ",", "\n", "\"model_type\"", ":", "model_meta_info", ".", "get", "(", "\"model_type\"", ",", "\"\"", ")", ",", "\n", "\"pretrain_model_version\"", ":", "model_meta_info", ".", "get", "(", "\"pretrain_model_version\"", ",", "\"\"", ")", ",", "\n", "\"pretrain_model_type\"", ":", "model_meta_info", ".", "get", "(", "\"pretrain_model_type\"", ",", "\"\"", ")", ",", "\n", "\"job_type\"", ":", "meta_param", ".", "get", "(", "\"job_type\"", ",", "\"custom\"", ")", ",", "\n", "\"net_type\"", ":", "self", ".", "model_class", ".", "__class__", ".", "__name__", ",", "\n", "\"task_type\"", ":", "\"train\"", ",", "\n", "\"deploy_type\"", ":", "4", ",", "\n", "\"is_dynamic\"", ":", "1", "\n", "}", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.load_model_meta_info": [[130, 151], ["dynamic_trainer.load_meta", "dynamic_trainer.load_meta", "logging.info", "os.path.dirname", "dynamic_trainer.load_meta"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.load_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.load_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.load_meta"], ["", "def", "load_model_meta_info", "(", "self", ",", "load_model", ")", ":", "\n", "        ", "\"\"\"\n        \u83b7\u53d6\u6a21\u578b\u7684meta\u4fe1\u606f\n        :param load_model:\n        :return:\n        \"\"\"", "\n", "meta_info", "=", "{", "}", "\n", "if", "load_model", "==", "\"net_model\"", ":", "\n", "            ", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "\n", "meta_info", "=", "load_meta", "(", "original_path", ")", "\n", "", "elif", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_parameters\"", "]", "\n", "meta_info", "=", "load_meta", "(", "original_path", ")", "\n", "", "", "elif", "load_model", "==", "\"pre_train_model\"", ":", "\n", "            ", "for", "pre_train_model", "in", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "                ", "logging", ".", "info", "(", "\"pre_train_model's name = %s\"", "%", "pre_train_model", "[", "\"name\"", "]", ")", "\n", "# params_path = pre_train_model[\"params_path\"]", "\n", "params_path", "=", "os", ".", "path", ".", "dirname", "(", "pre_train_model", "[", "\"params_path\"", "]", ")", "\n", "meta_info", "=", "load_meta", "(", "params_path", ")", "\n", "", "", "return", "meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.save_models": [[152, 182], ["utils.util_helper.get_model_paths", "os.path.join", "paddle.save", "paddle.save", "paddle.save", "paddle.save", "paddle.save", "paddle.save", "paddle.save", "paddle.save", "utils.util_helper.save_meta_data", "os.path.join", "logging.info", "common.jit_wenxin.WenxinTracedLayer.trace", "static_wenxin.save_inference_model", "utils.util_helper.save_meta_data", "utils.util_helper.save_meta_data", "dynamic_trainer.BaseDynamicTrainer.original_model.state_dict", "dynamic_trainer.BaseDynamicTrainer.original_model.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.get_model_paths", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.jit_wenxin.WenxinTracedLayer.trace", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data"], ["", "def", "save_models", "(", "self", ",", "step", ",", "fields_dict", ",", "save_checkpoint", "=", "True", ",", "save_inference", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u6a21\u578b\u4fdd\u5b58\uff1acheckpoints\u6587\u4ef6\u7528\u6765\u70ed\u542f\u52a8\uff0cinference\u6587\u4ef6\u7528\u6765\u9884\u6d4b\u63a8\u7406\n        :param step:\n        :param fields_dict:\n        :param save_checkpoint\n        :param save_inference\n        :return:\n        \"\"\"", "\n", "path_dict", "=", "get_model_paths", "(", "self", ".", "save_checkpoints_path", ",", "self", ".", "save_inference_model_path", ",", "step", ")", "\n", "if", "save_checkpoint", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "path_dict", "[", "\"checkpoints_model_path\"", "]", ",", "\"wenxin\"", ")", "\n", "paddle", ".", "save", "(", "self", ".", "original_model", ".", "state_dict", "(", ")", ",", "\"{0}.pdparams\"", ".", "format", "(", "save_path", ")", ")", "\n", "paddle", ".", "save", "(", "self", ".", "original_model", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\"{0}.pdopt\"", ".", "format", "(", "save_path", ")", ")", "\n", "meta_path", "=", "path_dict", "[", "\"checkpoints_meta_path\"", "]", "\n", "save_meta_data", "(", "self", ".", "meta_dict", ",", "meta_path", ")", "\n", "\n", "", "if", "save_inference", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "path_dict", "[", "\"inference_model_path\"", "]", ",", "\"wenxin\"", ")", "\n", "logging", ".", "info", "(", "\"save path: {0}\"", ".", "format", "(", "path_dict", "[", "\"inference_model_path\"", "]", ")", ")", "\n", "output", ",", "static_wenxin", "=", "WenxinTracedLayer", ".", "trace", "(", "self", ".", "original_model", ",", "\n", "inputs", "=", "fields_dict", ",", "\n", "phase", "=", "\"save_inference\"", ")", "\n", "static_wenxin", ".", "save_inference_model", "(", "save_path", ")", "\n", "\n", "meta_path", "=", "path_dict", "[", "\"inference_meta_path\"", "]", "\n", "save_meta_data", "(", "self", ".", "meta_dict", ",", "meta_path", ")", "\n", "\n", "infer_dict", "=", "{", "\"fields\"", ":", "output", "[", "InstanceName", ".", "TARGET_FEED_NAMES", "]", "}", "\n", "infer_meta_path", "=", "path_dict", "[", "\"inference_infer_meta_path\"", "]", "\n", "save_meta_data", "(", "infer_dict", ",", "infer_meta_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.BaseDynamicTrainer.load_pretrain_model": [[183, 246], ["ValueError", "logging.info", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "paddle.load.update", "paddle.load.update", "logging.info", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "os.path.join", "os.path.join", "set_model_class.set_state_dict", "dynamic_trainer.BaseDynamicTrainer.model_class.set_state_dict", "os.path.join", "set_model_class.set_state_dict", "dynamic_trainer.BaseDynamicTrainer.model_class.set_state_dict", "logging.info", "os.path.exists", "paddle.load", "paddle.load", "paddle.load", "paddle.load", "dynamic_trainer.BaseDynamicTrainer.params.get", "list", "set_model_class.set_state_dict", "dynamic_trainer.BaseDynamicTrainer.model_class.set_state_dict", "print", "dynamic_trainer.BaseDynamicTrainer.model_class.state_dict().items", "print", "paddle.load.keys", "paddle.load.keys", "paddle.load.pop", "paddle.load.pop", "functools.reduce", "dynamic_trainer.BaseDynamicTrainer.model_class.state_dict", "paddle.load.keys", "paddle.load.keys", "print", "functools.reduce", "utils.util_helper.append_name"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name"], ["", "", "def", "load_pretrain_model", "(", "self", ",", "add_prefix_name", "=", "None", ",", "set_model_class", "=", "None", ")", ":", "\n", "        ", "\"\"\"\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u6216\u8005\u70ed\u542f\u52a8\u6a21\u578b\u53c2\u6570\n        \"\"\"", "\n", "sd_param", "=", "None", "\n", "if", "\"load_checkpoint\"", "in", "self", ".", "params", "and", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "and", "\"load_parameters\"", "in", "self", ".", "params", "and", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"ERROR: config 'load_checkpoint' and 'load_parameters' \"", "\n", "\"both are set! Only one of them should be set. \"", "\n", "\"if you want warmstart checkpoint keep its learning_rate and moments, plese set 'load_checkpoint'. \"", "\n", "\"if you want warmstart checkpoint with only its parameters, and you want reset a new learning_rate \"", "\n", "\"by config, plese set 'load_parameters'\"", ")", "\n", "", "if", "\"load_checkpoint\"", "in", "self", ".", "params", "and", "self", ".", "params", "[", "\"load_checkpoint\"", "]", ":", "\n", "            ", "logging", ".", "info", "(", "\"load checkpoints path: {0}\"", ".", "format", "(", "self", ".", "params", "[", "\"load_checkpoint\"", "]", ")", ")", "\n", "load_checkpoint_prefix", "=", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "\n", "sd_param", "=", "paddle", ".", "load", "(", "os", ".", "path", ".", "join", "(", "load_checkpoint_prefix", ",", "\"wenxin.pdparams\"", ")", ")", "\n", "sd_opt", "=", "paddle", ".", "load", "(", "os", ".", "path", ".", "join", "(", "load_checkpoint_prefix", ",", "\"wenxin.pdopt\"", ")", ")", "\n", "sd_param", ".", "update", "(", "sd_opt", ")", "\n", "if", "set_model_class", "is", "not", "None", ":", "\n", "                ", "set_model_class", ".", "set_state_dict", "(", "sd_param", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model_class", ".", "set_state_dict", "(", "sd_param", ")", "\n", "", "", "if", "\"load_parameters\"", "in", "self", ".", "params", "and", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "            ", "logging", ".", "info", "(", "\"load parameters path: {0}\"", ".", "format", "(", "self", ".", "params", "[", "\"load_parameters\"", "]", ")", ")", "\n", "load_parameters_prefix", "=", "self", ".", "params", "[", "\"load_parameters\"", "]", "\n", "sd_param", "=", "paddle", ".", "load", "(", "os", ".", "path", ".", "join", "(", "load_parameters_prefix", ",", "\"wenxin.pdparams\"", ")", ")", "\n", "if", "set_model_class", "is", "not", "None", ":", "\n", "                ", "set_model_class", ".", "set_state_dict", "(", "sd_param", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model_class", ".", "set_state_dict", "(", "sd_param", ")", "\n", "", "", "elif", "\"pre_train_model\"", "in", "self", ".", "params", "and", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "            ", "for", "pre_train_model", "in", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "                ", "state_dict_path", "=", "pre_train_model", "[", "\"params_path\"", "]", "\n", "logging", ".", "info", "(", "\"load pre_train_model path: {0}\"", ".", "format", "(", "state_dict_path", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "state_dict_path", ")", ":", "\n", "                    ", "sd_param", "=", "paddle", ".", "load", "(", "state_dict_path", ")", "\n", "if", "add_prefix_name", "is", "not", "None", ":", "\n", "                        ", "all_keys", "=", "list", "(", "sd_param", ".", "keys", "(", ")", ")", "\n", "for", "one_key", "in", "all_keys", ":", "\n", "                            ", "sd_param", "[", "append_name", "(", "add_prefix_name", ",", "one_key", ")", "]", "=", "sd_param", ".", "pop", "(", "one_key", ")", "\n", "", "", "if", "set_model_class", "is", "not", "None", ":", "\n", "                        ", "set_model_class", ".", "set_state_dict", "(", "sd_param", ",", "use_structured_name", "=", "False", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "model_class", ".", "set_state_dict", "(", "sd_param", ",", "use_structured_name", "=", "False", ")", "\n", "# \u7528\u4e8eprompt\u7b49\u573a\u666f\u51bb\u7ed3\u9884\u8bad\u7ec3\u6a21\u578b\u53c2\u6570", "\n", "", "if", "self", ".", "params", ".", "get", "(", "\"is_freeze\"", ",", "False", ")", ":", "\n", "                        ", "print", "(", "\"'using freeze in load model!!!! only prompt will be optimized'\"", ")", "\n", "trainable_param_num", "=", "0", "\n", "all_param_num", "=", "0", "\n", "for", "k", ",", "v", "in", "self", ".", "model_class", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                            ", "if", "v", ".", "name", "in", "sd_param", ".", "keys", "(", ")", ":", "\n", "                                ", "v", ".", "trainable", "=", "False", "\n", "", "else", ":", "\n", "                                ", "v", ".", "trainable", "=", "True", "\n", "print", "(", "'training:{}, shape:{}'", ".", "format", "(", "k", ",", "v", ".", "shape", ")", ")", "\n", "trainable_param_num", "+=", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "*", "b", ",", "v", ".", "shape", ")", "\n", "", "all_param_num", "+=", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "*", "b", ",", "v", ".", "shape", ")", "\n", "", "ratio", "=", "trainable_param_num", "*", "100", "/", "all_param_num", "\n", "print", "(", "'trainable-num:{}, all-num:{}, ratio:{}%'", ".", "format", "(", "trainable_param_num", ",", "\n", "all_param_num", ",", "\n", "ratio", ")", ")", "\n", "\n", "", "", "", "", "return", "sd_param", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.dynamic_trainer.load_meta": [[248, 267], ["os.listdir", "file.endswith", "open", "open.read", "json.loads", "logging.error", "os.path.join"], "function", ["None"], ["", "", "def", "load_meta", "(", "model_dir", ")", ":", "\n", "    ", "\"\"\"\n    :param model_dir:\n    :return: meta_dict\n    \"\"\"", "\n", "json_path", "=", "None", "\n", "meta_dict", "=", "{", "}", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\".meta\"", ")", ":", "\n", "            ", "json_path", "=", "file", "\n", "break", "\n", "", "", "try", ":", "\n", "        ", "if", "json_path", ":", "\n", "            ", "json_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "json_path", ")", ",", "'r'", ")", "\n", "model_info", "=", "json_file", ".", "read", "(", ")", "\n", "meta_dict", "=", "json", ".", "loads", "(", "model_info", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logging", ".", "error", "(", "\"error in parser model.meta.....\"", ")", "\n", "", "return", "meta_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.__init__": [[18, 40], ["inference.BaseInference.params.get", "inference.BaseInference.params.get", "inference.BaseInference.params.get", "inference.BaseInference.parser_input_keys", "inference.BaseInference.init_env", "os.getenv"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.parser_input_keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.init_env"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "parser_handler", ")", ":", "\n", "        ", "\"\"\"\n        :param params:\u524d\u7aefjson\u4e2d\u8bbe\u7f6e\u7684\u53c2\u6570\n        :param data_set_reader: \u9884\u6d4b\u96c6reader\n        :param parser_handler: \u98de\u6868\u9884\u6d4b\u7ed3\u679c\u901a\u8fc7parser_handler\u53c2\u6570\u56de\u8c03\u5230\u5177\u4f53\u7684\u4efb\u52a1\u4e2d\uff0c\u7531\u7528\u6237\u63a7\u5236\u5177\u4f53\u7ed3\u679c\u89e3\u6790\n        \"\"\"", "\n", "self", ".", "data_set_reader", "=", "data_set_reader", "\n", "if", "self", ".", "data_set_reader", "is", "not", "None", ":", "\n", "            ", "self", ".", "data_set_reader", ".", "predict_reader", ".", "need_generate_examples", "=", "True", "\n", "", "self", ".", "params", "=", "params", "\n", "self", ".", "parser_handler", "=", "parser_handler", "\n", "self", ".", "input_names", "=", "[", "]", "\n", "self", ".", "input_handles", "=", "[", "]", "\n", "self", ".", "predictor", "=", "None", "\n", "self", ".", "place_type", "=", "self", ".", "params", ".", "get", "(", "\"PADDLE_PLACE_TYPE\"", ",", "os", ".", "getenv", "(", "\"PADDLE_PLACE_TYPE\"", ",", "\"cpu\"", ")", ")", "\n", "self", ".", "model_path", "=", "self", ".", "params", "[", "\"inference_model_path\"", "]", "\n", "# eg: \"./output/cls_bow_ch/save_inference_model/inference_step_250/\"", "\n", "self", ".", "thread_num", "=", "self", ".", "params", ".", "get", "(", "\"thread_num\"", ",", "1", ")", "\n", "self", ".", "use_memory_optim", "=", "self", ".", "params", ".", "get", "(", "\"use_memory_optim\"", ",", "False", ")", "\n", "self", ".", "input_keys", "=", "[", "]", "\n", "self", ".", "parser_input_keys", "(", ")", "\n", "self", ".", "init_env", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.inference_batch": [[41, 45], ["None"], "methods", ["None"], ["", "def", "inference_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.inference_query": [[46, 51], ["None"], "methods", ["None"], ["", "def", "inference_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "\"\"\"\u5355\u6761query\u9884\u6d4b\n        :param query\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.init_env": [[52, 60], ["logging.info", "inference.BaseInference.load_inference_model", "inference.BaseInference.predictor.get_input_names", "inference.BaseInference.predictor.get_input_handle", "inference.BaseInference.input_handles.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.load_inference_model"], ["", "def", "init_env", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"init env, build inference....\"", ")", "\n", "self", ".", "predictor", "=", "self", ".", "load_inference_model", "(", "self", ".", "model_path", ",", "self", ".", "thread_num", ",", "self", ".", "use_memory_optim", ")", "\n", "\n", "self", ".", "input_names", "=", "self", ".", "predictor", ".", "get_input_names", "(", ")", "\n", "for", "one_input", "in", "self", ".", "input_names", ":", "\n", "            ", "one_handler", "=", "self", ".", "predictor", ".", "get_input_handle", "(", "one_input", ")", "\n", "self", ".", "input_handles", ".", "append", "(", "one_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.load_inference_model": [[61, 101], ["os.path.join", "os.path.join", "paddle.Config", "paddle.Config.switch_ir_optim", "paddle.create_predictor", "logging.info", "paddle.Config.enable_xpu", "paddle.Config.set_cpu_math_library_num_threads", "logging.info", "paddle.Config.enable_use_gpu", "paddle.Config.set_cpu_math_library_num_threads", "logging.info", "paddle.Config.set_cpu_math_library_num_threads", "paddle.Config.enable_mkldnn", "paddle.Config.enable_memory_optim"], "methods", ["None"], ["", "", "def", "load_inference_model", "(", "self", ",", "model_path", ",", "thread_num", "=", "1", ",", "use_memory_optim", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param model_path:\n        :param thread_num\n        :param use_memory_optim \u4e3a\u4e86\u9632\u6b62\u6709\u4e9b\u6a21\u578b\u5728gpu\u9884\u6d4b\u7684\u65f6\u5019\u62a5\u663e\u5b58\uff0c\u9ed8\u8ba4\u5173\u95ed\uff0c\u62a5\u663e\u5b58\u65f6\u6253\u5f00\n        :return: inference\n        \"\"\"", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "\"wenxin.pdmodel\"", ")", "\n", "params_file", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "\"wenxin.pdiparams\"", ")", "\n", "config", "=", "paddle_infer", ".", "Config", "(", "model_file", ",", "params_file", ")", "\n", "config", ".", "switch_ir_optim", "(", "False", ")", "\n", "\n", "if", "self", ".", "place_type", "==", "\"xpu\"", "or", "self", ".", "place_type", "==", "\"XPU\"", ":", "\n", "            ", "logging", ".", "info", "(", "\"xpu inference....\"", ")", "\n", "# config.enable_lite_engine(PrecisionType.Float32, True)", "\n", "# l3_workspace_size - l3 cache \u5206\u914d\u7684\u663e\u5b58\u5927\u5c0f, \u4ee5MB\u4e3a\u5355\u4f4d", "\n", "# https://paddle-inference.readthedocs.io/en/latest/api_reference/python_api_doc/Config/XPUConfig.html", "\n", "config", ".", "enable_xpu", "(", "1024", ")", "\n", "config", ".", "set_cpu_math_library_num_threads", "(", "thread_num", ")", "\n", "\n", "", "elif", "self", ".", "place_type", "==", "\"gpu\"", "or", "self", ".", "place_type", "==", "\"GPU\"", ":", "\n", "            ", "logging", ".", "info", "(", "\"gpu inference....\"", ")", "\n", "# config.enable_lite_engine(PrecisionType.Float32, True)", "\n", "# memory_pool_init_size_mb - \u521d\u59cb\u5316\u5206\u914d\u7684gpu\u663e\u5b58\uff0c\u4ee5MB\u4e3a\u5355\u4f4d", "\n", "# paddle.inference.Config.enable_use_gpu(memory_pool_init_size_mb: int, device_id: int)", "\n", "# https://paddle-inference.readthedocs.io/en/latest/api_reference/python_api_doc/Config/GPUConfig.html", "\n", "config", ".", "enable_use_gpu", "(", "1024", ")", "\n", "config", ".", "set_cpu_math_library_num_threads", "(", "thread_num", ")", "\n", "if", "use_memory_optim", ":", "\n", "                ", "config", ".", "enable_memory_optim", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "# \u9ed8\u8ba4\u4f7f\u7528CPU\u9884\u6d4b", "\n", "            ", "logging", ".", "info", "(", "\"cpu inference....\"", ")", "\n", "# https://paddle-inference.readthedocs.io/en/latest/api_reference/python_api_doc/Config/CPUConfig.html", "\n", "config", ".", "set_cpu_math_library_num_threads", "(", "thread_num", ")", "\n", "config", ".", "enable_mkldnn", "(", ")", "\n", "\n", "", "predictor", "=", "paddle_infer", ".", "create_predictor", "(", "config", ")", "\n", "return", "predictor", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.inference.BaseInference.parser_input_keys": [[102, 109], ["os.path.join", "utils.params.from_file", "utils.params.replace_none", "utils.params.replace_none.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.from_file", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.params.replace_none", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "parser_input_keys", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u4ecemeta\u6587\u4ef6\u4e2d\u89e3\u6790\u51fa\u6a21\u578b\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u9700\u8981feed\u7684\u53d8\u91cf\u540d\u79f0\uff0c\u4e0emodel.forward\u7684fields_dict\u5bf9\u5e94\u8d77\u6765\n        \"\"\"", "\n", "data_params_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_path", ",", "\"infer_data_params.json\"", ")", "\n", "param_dict", "=", "params", ".", "from_file", "(", "data_params_path", ")", "\n", "param_dict", "=", "params", ".", "replace_none", "(", "param_dict", ")", "\n", "self", ".", "input_keys", "=", "param_dict", ".", "get", "(", "\"fields\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.__init__": [[36, 66], ["static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.parser_meta", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_env_static", "os.path.join", "os.path.join", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.keys"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.parser_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_env_static", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["def", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        :param params\n        :param data_set_reader\n        :param model\n        \"\"\"", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "data_set_reader", "=", "data_set_reader", "\n", "self", ".", "model_class", "=", "model", "\n", "\n", "# \u53c2\u6570\u89e3\u6790", "\n", "# \u52a8\u6001\u56feor\u9759\u6001\u56fe", "\n", "self", ".", "enable_static", "=", "True", "\n", "self", ".", "is_recompute", "=", "self", ".", "params", ".", "get", "(", "\"is_recompute\"", ",", "0", ")", "\n", "if", "'output_path'", "in", "self", ".", "params", ".", "keys", "(", ")", "and", "self", ".", "params", "[", "\"output_path\"", "]", ":", "\n", "            ", "self", ".", "save_checkpoints_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", "[", "\"output_path\"", "]", ",", "\"save_checkpoints\"", ")", "\n", "self", ".", "save_inference_model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", "[", "\"output_path\"", "]", ",", "\"save_inference_model\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_checkpoints_path", "=", "\"./output/save_checkpoints/\"", "\n", "self", ".", "save_inference_model_path", "=", "\"./output/save_inference_model/\"", "\n", "\n", "", "self", ".", "forward_train_output", "=", "{", "}", "\n", "self", ".", "fetch_list_train", "=", "[", "]", "\n", "self", ".", "fetch_list_evaluate", "=", "[", "]", "\n", "self", ".", "fetch_list_train_key", "=", "[", "]", "\n", "self", ".", "fetch_list_evaluate_key", "=", "[", "]", "\n", "\n", "self", ".", "parser_meta", "(", ")", "\n", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "init_env_static", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.do_train": [[67, 73], ["None"], "methods", ["None"], ["", "def", "do_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u542f\u52a8\u6570\u636e\u96c6\u5faa\u73af\uff0c\u5f00\u59cb\u8bad\u7ec3\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.do_evaluate": [[74, 81], ["None"], "methods", ["None"], ["", "def", "do_evaluate", "(", "self", ",", "reader", ",", "phase", ",", "step", ")", ":", "\n", "        ", "\"\"\"\u5728\u5f53\u524d\u7684\u8bad\u7ec3\u72b6\u6001\u4e0b\uff0c\u5bf9\u67d0\u4e2a\u6d4b\u8bd5\u96c6\u8fdb\u884c\u8bc4\u4f30\n        :param reader:\u5f85\u8bc4\u4f30\u6570\u636e\u96c6\n        :param phase:\u5f53\u524d\u7684\u8fd0\u884c\u9636\u6bb5\n        :param step:\u5f53\u524d\u7684\u8fd0\u884c\u6b65\u6570\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.do_visual": [[82, 86], ["None"], "methods", ["None"], ["", "def", "do_visual", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u8bc4\u4f30\u6307\u6807\u7684\u53ef\u89c6\u5316\u5c55\u793a\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.parser_meta": [[87, 113], ["logging.info", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.load_model_meta_info", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.load_model_meta_info"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_model_meta_info", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_model_meta_info"], ["", "def", "parser_meta", "(", "self", ")", ":", "\n", "        ", "\"\"\"parse_meta\"\"\"", "\n", "logging", ".", "info", "(", "\"parser meta ....\"", ")", "\n", "model_meta_info", "=", "{", "}", "\n", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "or", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "            ", "model_meta_info", "=", "self", ".", "load_model_meta_info", "(", "\"net_model\"", ")", "\n", "", "elif", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "            ", "model_meta_info", "=", "self", ".", "load_model_meta_info", "(", "\"pre_train_model\"", ")", "\n", "# \u7531\u5916\u90e8json\u914d\u7f6e\u4f20\u5165", "\n", "", "meta_param", "=", "{", "}", "\n", "extra_param", "=", "self", ".", "params", ".", "get", "(", "\"extra_param\"", ",", "None", ")", "\n", "if", "extra_param", ":", "\n", "            ", "meta_param", "=", "extra_param", ".", "get", "(", "\"meta\"", ",", "None", ")", "\n", "\n", "", "self", ".", "meta_dict", "=", "{", "\n", "\"framework_version\"", ":", "version", ".", "full_version", ",", "\n", "\"model_type\"", ":", "model_meta_info", ".", "get", "(", "\"model_type\"", ",", "\"\"", ")", ",", "\n", "\"pretrain_model_version\"", ":", "model_meta_info", ".", "get", "(", "\"pretrain_model_version\"", ",", "\"\"", ")", ",", "\n", "\"pretrain_model_type\"", ":", "model_meta_info", ".", "get", "(", "\"pretrain_model_type\"", ",", "\"\"", ")", ",", "\n", "\"job_type\"", ":", "meta_param", ".", "get", "(", "\"job_type\"", ",", "\"custom\"", ")", ",", "\n", "\"net_type\"", ":", "self", ".", "model_class", ".", "__class__", ".", "__name__", ",", "\n", "\"task_type\"", ":", "\"train\"", ",", "\n", "\"deploy_type\"", ":", "4", ",", "\n", "\"is_dynamic\"", ":", "0", "\n", "}", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_env_static": [[114, 340], ["logging.info", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.DistributedStrategy", "paddle.DistributedStrategy", "paddle.DistributedStrategy", "paddle.DistributedStrategy", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_model_net", "paddle.Executor", "paddle.Executor", "paddle.Executor", "paddle.Executor", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.executor.run", "os.getenv", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "logging.info", "os.getenv().split", "int", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "len", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.load_static_model_params", "int", "paddle.init", "paddle.init", "paddle.init", "paddle.init", "logging.info", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "paddle.worker_index", "paddle.worker_index", "paddle.worker_index", "paddle.worker_index", "os.getenv", "paddle.worker_endpoints", "paddle.worker_endpoints", "paddle.worker_endpoints", "paddle.worker_endpoints", "len", "logging.debug", "logging.info", "os.getenv().split", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "logging.info", "logging.info", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "int", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.load_static_model_params", "paddle.ParallelExecutor", "paddle.ParallelExecutor", "paddle.ParallelExecutor", "paddle.ParallelExecutor", "os.getenv", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.model_params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.model_params.get", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.get", "os.environ.get", "logging.info", "paddle.PaddleCloudRoleMaker", "paddle.PaddleCloudRoleMaker", "paddle.PaddleCloudRoleMaker", "paddle.PaddleCloudRoleMaker", "paddle.init", "paddle.init", "paddle.init", "paddle.init", "paddle.worker_num", "paddle.worker_num", "paddle.worker_num", "paddle.worker_num", "os.getenv", "multiprocessing.cpu_count", "paddle.worker_num", "paddle.worker_num", "paddle.worker_num", "paddle.worker_num"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_model_net", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_static_model_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_static_model_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "init_env_static", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u521d\u59cb\u5316\u9759\u6001\u56fe\u7684\u8fd0\u884c\u65f6\u73af\u5883\uff1a\u5305\u62ec\uff1aprogram\u3001executor\u3001fleet\u3001cuda\u3001place\n        :return:\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"init environment on static mode......\"", ")", "\n", "paddle", ".", "enable_static", "(", ")", "\n", "\n", "# step1: init program", "\n", "self", ".", "startup_program", "=", "static", ".", "Program", "(", ")", "\n", "self", ".", "train_program", "=", "static", ".", "Program", "(", ")", "\n", "self", ".", "test_program", "=", "static", ".", "Program", "(", ")", "\n", "self", ".", "evaluate_program", "=", "static", ".", "Program", "(", ")", "\n", "self", ".", "save_inference_program", "=", "static", ".", "Program", "(", ")", "\n", "\n", "random_seed", "=", "self", ".", "params", ".", "get", "(", "\"random_seed\"", ",", "0", ")", "\n", "if", "random_seed", "is", "not", "None", ":", "\n", "            ", "self", ".", "startup_program", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "train_program", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "test_program", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "evaluate_program", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "save_inference_program", ".", "random_seed", "=", "random_seed", "\n", "\n", "# step2: init run place\u3001executor\u3001fleet", "\n", "", "self", ".", "num_trainers", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "\n", "self", ".", "place_type", "=", "self", ".", "params", ".", "get", "(", "\"PADDLE_PLACE_TYPE\"", ",", "os", ".", "getenv", "(", "\"PADDLE_PLACE_TYPE\"", ",", "\"cpu\"", ")", ")", "\n", "self", ".", "params", "[", "\"PADDLE_PLACE_TYPE\"", "]", "=", "self", ".", "place_type", "\n", "\n", "# executor\u6267\u884c\u5668\u7684\u4e00\u4e9b\u53c2\u6570\u8bbe\u7f6e", "\n", "self", ".", "use_fast_executor", "=", "self", ".", "params", ".", "get", "(", "\"use_fast_executor\"", ",", "False", ")", "\n", "self", ".", "exe_strategy", "=", "paddle", ".", "static", ".", "ExecutionStrategy", "(", ")", "\n", "self", ".", "exe_strategy", ".", "use_experimental_executor", "=", "self", ".", "use_fast_executor", "\n", "self", ".", "exe_strategy", ".", "num_threads", "=", "4", "if", "self", ".", "params", ".", "get", "(", "\"use_amp\"", ",", "False", ")", "else", "2", "\n", "self", ".", "exe_strategy", ".", "num_iteration_per_run", "=", "self", ".", "params", ".", "get", "(", "\"num_iteration_per_run\"", ",", "1", ")", "\n", "self", ".", "exe_strategy", ".", "num_iteration_per_drop_scope", "=", "self", ".", "params", ".", "get", "(", "\"num_iteration_per_drop_scope\"", ",", "10", ")", "\n", "\n", "self", ".", "build_strategy", "=", "paddle", ".", "static", ".", "BuildStrategy", "(", ")", "\n", "self", ".", "strategy", "=", "fleet", ".", "DistributedStrategy", "(", ")", "\n", "self", ".", "strategy", ".", "execution_strategy", "=", "self", ".", "exe_strategy", "\n", "self", ".", "strategy", ".", "build_strategy", "=", "self", ".", "build_strategy", "\n", "# TODO nccl_comm_num \u53ef\u4ee5\u52a0\u5febGPU\u4e4b\u95f4\u7684\u901a\u4fe1\u6548\u7387\uff0c\u5efa\u8bae\u5355\u673a\u8bbe\u7f6e\u4e3a1\uff0c\u591a\u673a\u8bbe\u7f6e\u4e3a2\u3002", "\n", "# TODO \u627e\u4e2a\u5224\u65ad\u591a\u673a\u7684\u65b9\u6cd5\uff0c\u8bbe\u7f6enccl_comm_num\u53c2\u6570", "\n", "self", ".", "strategy", ".", "nccl_comm_num", "=", "3", "\n", "#self.strategy.sync_nccl_allreduce = True", "\n", "#self.strategy.fuse_all_reduce_ops = True", "\n", "\n", "if", "self", ".", "place_type", "==", "\"gpu\"", ":", "\n", "            ", "logging", ".", "info", "(", "\"gpu place....\"", ")", "\n", "gpus", "=", "os", ".", "getenv", "(", "'FLAGS_selected_gpus'", ",", "'0'", ")", ".", "split", "(", "\",\"", ")", "\n", "self", ".", "gpu_id", "=", "int", "(", "gpus", "[", "0", "]", ")", "\n", "self", ".", "run_place", "=", "paddle", ".", "CUDAPlace", "(", "int", "(", "gpus", "[", "0", "]", ")", ")", "\n", "self", ".", "dev_count", "=", "len", "(", "gpus", ")", "\n", "self", ".", "exe_strategy", ".", "num_threads", "=", "self", ".", "dev_count", "\n", "self", ".", "use_cuda", "=", "True", "\n", "\"\"\"\n            gpu fleet \u4f7f\u7528\u4e09\u6b65\u9aa4\uff1a\n            1.\u5bfc\u5165\u4f9d\u8d56\u5305\uff1afrom paddle.distributed import fleet\n            2.\u521d\u59cb\u5316fleet\u73af\u5883:\u5305\u62ec\u5b9a\u4e49\u7f3a\u7701\u7684\u5206\u5e03\u5f0f\u7b56\u7565\uff0c\u7136\u540e\u901a\u8fc7\u5c06\u53c2\u6570is_collective\u8bbe\u7f6e\u4e3aTrue\uff0c\u4f7f\u8bad\u7ec3\u67b6\u6784\u8bbe\u5b9a\u4e3aCollective\u67b6\u6784\u3002\n            strategy = fleet.DistributedStrategy()\n            fleet.init(is_collective=True, strategy=strategy)\n            3.\u4f7f\u7528distributed_optimizer\u8bbe\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\u4f18\u5316\u5668\n            optimizer = fleet.distributed_optimizer(optimizer)\n            \"\"\"", "\n", "if", "self", ".", "params", ".", "get", "(", "\"PADDLE_IS_FLEET\"", ",", "0", ")", ":", "\n", "                ", "fleet", ".", "init", "(", "is_collective", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"fleet init ...\"", ")", "\n", "self", ".", "use_fleet", "=", "True", "\n", "\n", "# amp\u8bbe\u7f6e", "\n", "self", ".", "use_amp", "=", "self", ".", "params", ".", "get", "(", "\"use_amp\"", ",", "False", ")", "\n", "if", "self", ".", "use_amp", ":", "\n", "                    ", "opt_params", "=", "self", ".", "model_class", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "init_loss_scaling", "=", "opt_params", ".", "get", "(", "\"init_loss_scaling\"", ",", "1", ")", "\n", "incr_every_n_steps", "=", "opt_params", ".", "get", "(", "\"incr_every_n_steps\"", ",", "1000", ")", "\n", "decr_every_n_nan_or_inf", "=", "opt_params", ".", "get", "(", "\"decr_every_n_nan_or_inf\"", ",", "2", ")", "\n", "incr_ratio", "=", "opt_params", ".", "get", "(", "\"incr_ratio\"", ",", "2.0", ")", "\n", "decr_ratio", "=", "opt_params", ".", "get", "(", "\"decr_ratio\"", ",", "0.8", ")", "\n", "\n", "self", ".", "strategy", ".", "amp", "=", "True", "\n", "self", ".", "strategy", ".", "amp_configs", "=", "{", "\n", "\"init_loss_scaling\"", ":", "init_loss_scaling", ",", "\n", "\"decr_every_n_nan_or_inf\"", ":", "decr_every_n_nan_or_inf", ",", "\n", "\"incr_every_n_steps\"", ":", "incr_every_n_steps", ",", "\n", "\"incr_ratio\"", ":", "incr_ratio", ",", "\n", "\"use_dynamic_loss_scaling\"", ":", "True", ",", "\n", "\"decr_ratio\"", ":", "decr_ratio", ",", "\n", "\"custom_white_list\"", ":", "[", "]", ",", "\n", "\"custom_black_list\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "# sharding\u8bbe\u7f6e", "\n", "", "self", ".", "use_sharding", "=", "self", ".", "params", ".", "get", "(", "\"use_sharding\"", ",", "False", ")", "\n", "if", "self", ".", "use_sharding", ":", "\n", "                    ", "sharding_num", "=", "fleet", ".", "worker_num", "(", ")", "if", "fleet", ".", "worker_num", "(", ")", "<=", "8", "else", "8", "\n", "self", ".", "strategy", ".", "sharding", "=", "True", "\n", "opt_params", "=", "self", ".", "model_class", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "use_release_paddle", "=", "opt_params", ".", "get", "(", "\"use_release_paddle\"", ",", "False", ")", "\n", "if", "use_release_paddle", ":", "\n", "                        ", "self", ".", "strategy", ".", "sharding_configs", "=", "{", "\"segment_broadcast_MB\"", ":", "32", ",", "\n", "\"sharding_degree\"", ":", "sharding_num", ",", "\n", "\"mp_degree\"", ":", "1", ",", "\n", "\"pp_degree\"", ":", "1", ",", "\n", "\"dp_degree\"", ":", "1", ",", "\n", "\"gradient_merge_acc_step\"", ":", "1", ",", "\n", "\"optimize_offload\"", ":", "False", "\n", "}", "\n", "", "else", ":", "\n", "                        ", "self", ".", "strategy", ".", "sharding_configs", "=", "{", "\n", "\"sharding_segment_strategy\"", ":", "\"segment_broadcast_MB\"", ",", "\n", "\"segment_broadcast_MB\"", ":", "32", ",", "\n", "\"segment_anchors\"", ":", "None", ",", "\n", "\"hybrid_dp\"", ":", "False", ",", "\n", "\"sharding_degree\"", ":", "sharding_num", ",", "\n", "\"gradient_merge_acc_step\"", ":", "1", ",", "\n", "\"mp_degree\"", ":", "1", "\n", "}", "\n", "\n", "#fleet.init(is_collective=True, strategy=self.strategy)", "\n", "# \u4ee5\u4e0b\u4ee3\u7801\u662f\u4e3a\u4e86\u6253\u5370\u65e5\u5fd7\uff0c\u4e0d\u5f71\u54cd\u8bad\u7ec3", "\n", "", "", "trainer_id", "=", "fleet", ".", "worker_index", "(", ")", "\n", "current_endpoint", "=", "os", ".", "getenv", "(", "\"PADDLE_CURRENT_ENDPOINT\"", ")", "\n", "worker_endpoints", "=", "fleet", ".", "worker_endpoints", "(", ")", "\n", "trainers_num", "=", "len", "(", "worker_endpoints", ")", "\n", "logging", ".", "debug", "(", "\"worker_endpoints:{} trainers_num:{} current_endpoint:{} trainer_id:{}\"", ".", "format", "(", "\n", "worker_endpoints", ",", "\n", "trainers_num", ",", "\n", "current_endpoint", ",", "\n", "trainer_id", ")", ")", "\n", "self", ".", "num_trainers", "=", "trainers_num", "\n", "self", ".", "trainer_id", "=", "trainer_id", "\n", "", "else", ":", "\n", "                ", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "num_trainers", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "\n", "", "", "elif", "self", ".", "place_type", "==", "\"xpu\"", ":", "\n", "            ", "logging", ".", "info", "(", "\"xpu_place, support single device mode only\"", ")", "\n", "xpus", "=", "os", ".", "getenv", "(", "'FLAGS_selected_xpus'", ",", "'0'", ")", ".", "split", "(", "\",\"", ")", "\n", "# self.run_place = paddle.XPUPlace(int(xpus[0]))", "\n", "self", ".", "run_place", "=", "paddle", ".", "set_device", "(", "\"xpu:\"", "+", "xpus", "[", "0", "]", ")", "\n", "self", ".", "dev_count", "=", "1", "\n", "self", ".", "exe_strategy", ".", "num_threads", "=", "self", ".", "dev_count", "\n", "self", ".", "gpu_id", "=", "0", "\n", "self", ".", "use_cuda", "=", "False", "\n", "logging", ".", "info", "(", "\"finish prepare xpu single deviece env\"", ")", "\n", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "num_trainers", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"cpu place....\"", ")", "\n", "self", ".", "run_place", "=", "paddle", ".", "CPUPlace", "(", ")", "\n", "self", ".", "dev_count", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'CPU_NUM'", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", ")", "\n", "self", ".", "use_cuda", "=", "False", "\n", "self", ".", "gpu_id", "=", "0", "\n", "self", ".", "exe_strategy", ".", "num_threads", "=", "self", ".", "dev_count", "\n", "\"\"\"\n            cpu fleet \u4f7f\u7528\u6b65\u9aa4\n            https://fleetx.readthedocs.io/en/latest/paddle_fleet_rst/parameter_server/ps_quick_start.html\n            1.\u5bfc\u5165\u4f9d\u8d56:\n            import paddle.distributed.fleet as fleet\n            import paddle.distributed.fleet.base.role_maker as role_maker\n\n            2.\u5b9a\u4e49\u5206\u5e03\u5f0f\u6a21\u5f0f\u5e76\u521d\u59cb\u5316\u5206\u5e03\u5f0f\u8bad\u7ec3\u73af\u5883\uff0c\u5f53\u524d\u53c2\u6570\u670d\u52a1\u5668\u6a21\u5f0f\u53ea\u652f\u6301\u9759\u6001\u56fe\u6a21\u5f0f\n            \u901a\u8fc7fleet.init()\u63a5\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u8bad\u7ec3\u76f8\u5173\u7684\u73af\u5883\uff0c\u6ce8\u610f\u6b64\u73af\u5883\u662f\u7528\u6237\u9884\u5148\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u914d\u7f6e\u597d\u7684\uff0c\n            \u5305\u62ec\uff1a\u8bad\u7ec3\u8282\u70b9\u4e2a\u6570\uff0c\u670d\u52a1\u8282\u70b9\u4e2a\u6570\uff0c\u5f53\u524d\u8282\u70b9\u7684\u5e8f\u53f7\uff0c\u670d\u52a1\u8282\u70b9\u5b8c\u6574\u7684IP:PORT\u5217\u8868\u7b49\u3002\n            paddle.enable_static()\n            role = role_maker.PaddleCloudRoleMaker()\n            fleet.init(role)\n\n            3.\u7ec4\u7f51\uff0c\u52a0\u8f7dreader\n            model = init_net()\n            reader = init_dataset_reader()\n\n            4.\u5b9a\u4e49\u540c\u6b65\u8bad\u7ec3 Strategy \u53ca Optimizer\n            optimizer = paddle.optimizer.SGD(learning_rate=0.0001)\n            strategy = fleet.DistributedStrategy()\n            strategy.a_sync = True\n            optimizer = fleet.distributed_optimizer(optimizer, strategy)\n            optimizer.minimize(model.cost)\n\n            5.\u8bad\u7ec3\n\n            \"\"\"", "\n", "if", "self", ".", "params", ".", "get", "(", "\"PADDLE_IS_FLEET\"", ",", "0", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\"int fleet parameter server mode in multi cpus....\"", ")", "\n", "role", "=", "role_maker", ".", "PaddleCloudRoleMaker", "(", "is_collective", "=", "False", ")", "\n", "fleet", ".", "init", "(", "role", ")", "\n", "self", ".", "use_fleet", "=", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "num_trainers", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "\n", "# step3: init model net", "\n", "", "", "self", ".", "init_static_model_net", "(", ")", "\n", "\n", "# step4: init executor with run place", "\n", "self", ".", "executor", "=", "static", ".", "Executor", "(", "self", ".", "run_place", ")", "\n", "\n", "# step5: run executor", "\n", "self", ".", "executor", ".", "run", "(", "self", ".", "startup_program", ")", "\n", "\n", "# step6: load model params: checkpoints or pre_train_model", "\n", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "or", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "            ", "self", ".", "load_static_model_params", "(", "\"net_model\"", ",", "self", ".", "train_program", ")", "\n", "", "elif", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "            ", "self", ".", "load_static_model_params", "(", "\"pre_train_model\"", ",", "self", ".", "train_program", ")", "\n", "\n", "# step7: init train_executor", "\n", "", "if", "self", ".", "use_fleet", ":", "\n", "            ", "self", ".", "train_exe", "=", "self", ".", "executor", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "place_type", "==", "\"xpu\"", ":", "\n", "                ", "self", ".", "train_exe", "=", "self", ".", "executor", "\n", "", "else", ":", "\n", "# \u5355\u673a\u6a21\u5f0f\u4e0b\u53ef\u4ee5\u4f7f\u7528ParallelExecutor\u6765\u63d0\u901f", "\n", "                ", "self", ".", "train_exe", "=", "static", ".", "ParallelExecutor", "(", "\n", "use_cuda", "=", "self", ".", "use_cuda", ",", "\n", "loss_name", "=", "self", ".", "forward_train_output", "[", "InstanceName", ".", "LOSS", "]", ".", "name", ",", "\n", "exec_strategy", "=", "self", ".", "exe_strategy", ",", "\n", "build_strategy", "=", "self", ".", "build_strategy", ",", "\n", "main_program", "=", "self", ".", "train_program", ",", "\n", "num_trainers", "=", "self", ".", "num_trainers", ",", "\n", "trainer_id", "=", "self", ".", "trainer_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_model_net": [[341, 354], ["logging.info", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_train_net", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_evaluate_net", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_evaluate_net", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_save_inference_net"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_train_net", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_evaluate_net", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_evaluate_net", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_save_inference_net"], ["", "", "", "def", "init_static_model_net", "(", "self", ")", ":", "\n", "        ", "\"\"\"init static model net\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"init_model_net.....\"", ")", "\n", "self", ".", "init_static_train_net", "(", ")", "\n", "if", "self", ".", "params", "[", "\"is_eval_dev\"", "]", ":", "\n", "            ", "self", ".", "evaluate_program", "=", "self", ".", "init_static_evaluate_net", "(", "self", ".", "data_set_reader", ".", "dev_reader", ",", "\n", "self", ".", "evaluate_program", ")", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_test\"", "]", ":", "\n", "            ", "self", ".", "test_program", "=", "self", ".", "init_static_evaluate_net", "(", "self", ".", "data_set_reader", ".", "test_reader", ",", "self", ".", "test_program", ")", "\n", "\n", "", "if", "self", ".", "params", "[", "\"save_inference_model\"", "]", ":", "\n", "            ", "self", ".", "init_static_save_inference_net", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_train_net": [[355, 387], ["paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.data_set_reader.train_reader.create_reader", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.data_set_reader.train_reader.instance_fields_dict", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.structure", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.forward", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "paddle.fluid.layers.mean", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.set_optimizer", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.optimizer.minimize", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_train_output.__contains__", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_train_output.__contains__", "list", "list", "paddle.distributed_optimizer", "paddle.distributed_optimizer", "paddle.distributed_optimizer", "paddle.distributed_optimizer", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_train_output.pop", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_train_output.pop", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_train_output.values", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_train_output.keys"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.create_reader", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.instance_fields_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.structure", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.PositionWiseFeedForwardLayer.forward", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.set_optimizer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["", "", "def", "init_static_train_net", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u8bad\u7ec3\u7f51\u7edc\u521d\u59cb\u5316\uff0c\u524d\u5411+\u540e\u5411\n        :return:\n        \"\"\"", "\n", "with", "static", ".", "program_guard", "(", "self", ".", "train_program", ",", "self", ".", "startup_program", ")", ":", "\n", "            ", "with", "paddle", ".", "fluid", ".", "unique_name", ".", "guard", "(", ")", ":", "\n", "                ", "self", ".", "data_set_reader", ".", "train_reader", ".", "create_reader", "(", ")", "\n", "fields_dict", "=", "self", ".", "data_set_reader", ".", "train_reader", ".", "instance_fields_dict", "(", ")", "\n", "self", ".", "model_class", ".", "structure", "(", ")", "\n", "self", ".", "forward_train_output", "=", "self", ".", "model_class", ".", "forward", "(", "self", ".", "data_set_reader", ".", "train_reader", ",", "\n", "fields_dict", ",", "phase", "=", "InstanceName", ".", "TRAINING", ")", "\n", "loss", "=", "self", ".", "forward_train_output", "[", "InstanceName", ".", "LOSS", "]", "\n", "loss", "=", "paddle", ".", "fluid", ".", "layers", ".", "mean", "(", "loss", ")", "\n", "self", ".", "model_class", ".", "set_optimizer", "(", ")", "\n", "if", "self", ".", "is_recompute", ":", "\n", "                    ", "self", ".", "strategy", ".", "recompute", "=", "True", "\n", "self", ".", "strategy", ".", "recompute_configs", "=", "{", "\"checkpoints\"", ":", "self", ".", "forward_train_output", "[", "'checkpoints'", "]", "}", "\n", "\n", "", "if", "self", ".", "use_fleet", ":", "\n", "                    ", "self", ".", "optimizer", "=", "fleet", ".", "distributed_optimizer", "(", "self", ".", "model_class", ".", "optimizer", ",", "self", ".", "strategy", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "optimizer", "=", "self", ".", "model_class", ".", "optimizer", "\n", "\n", "", "self", ".", "optimizer", ".", "minimize", "(", "loss", ")", "\n", "\n", "if", "self", ".", "forward_train_output", ".", "__contains__", "(", "InstanceName", ".", "TARGET_FEED", ")", ":", "\n", "                    ", "self", ".", "forward_train_output", ".", "pop", "(", "InstanceName", ".", "TARGET_FEED", ")", "\n", "", "if", "self", ".", "forward_train_output", ".", "__contains__", "(", "InstanceName", ".", "TARGET_PREDICTS", ")", ":", "\n", "                    ", "self", ".", "forward_train_output", ".", "pop", "(", "InstanceName", ".", "TARGET_PREDICTS", ")", "\n", "", "self", ".", "fetch_list_train", "=", "list", "(", "self", ".", "forward_train_output", ".", "values", "(", ")", ")", "\n", "self", ".", "fetch_list_train_key", "=", "list", "(", "self", ".", "forward_train_output", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_evaluate_net": [[388, 415], ["program.clone.clone.clone", "paddle.distributed.fleet.meta_optimizers.sharding.utils.add_sync_comm", "paddle.distributed.fleet.meta_optimizers.sharding.utils.add_sync_comm", "paddle.distributed.fleet.meta_optimizers.sharding.utils.add_sync_comm", "paddle.distributed.fleet.meta_optimizers.sharding.utils.add_sync_comm", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "reader.create_reader", "reader.instance_fields_dict", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.structure", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.forward", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_evaluate_output.__contains__", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_evaluate_output.__contains__", "list", "list", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_evaluate_output.keys", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_evaluate_output.pop", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_evaluate_output.pop", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_evaluate_output.values", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.forward_evaluate_output.keys"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.create_reader", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.instance_fields_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.structure", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.PositionWiseFeedForwardLayer.forward", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["", "", "", "def", "init_static_evaluate_net", "(", "self", ",", "reader", ",", "program", ")", ":", "\n", "        ", "\"\"\"\u521d\u59cb\u5316\u8bc4\u4f30\u8fc7\u7a0b\u7684\u7f51\u7edc\uff0c\u7f51\u7edc\u53ea\u6709\u524d\u5411\n        :return:\n        \"\"\"", "\n", "with", "static", ".", "program_guard", "(", "program", ",", "self", ".", "startup_program", ")", ":", "\n", "            ", "with", "paddle", ".", "fluid", ".", "unique_name", ".", "guard", "(", ")", ":", "\n", "                ", "reader", ".", "create_reader", "(", ")", "\n", "fields_dict", "=", "reader", ".", "instance_fields_dict", "(", ")", "\n", "self", ".", "model_class", ".", "structure", "(", ")", "\n", "self", ".", "forward_evaluate_output", "=", "self", ".", "model_class", ".", "forward", "(", "reader", ",", "\n", "fields_dict", ",", "phase", "=", "InstanceName", ".", "EVALUATE", ")", "\n", "if", "\"mems\"", "in", "self", ".", "forward_evaluate_output", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "mems_eval", "=", "self", ".", "forward_evaluate_output", "[", "\"mems\"", "]", "\n", "del", "self", ".", "forward_evaluate_output", "[", "\"mems\"", "]", "\n", "\n", "", "if", "self", ".", "forward_evaluate_output", ".", "__contains__", "(", "InstanceName", ".", "TARGET_FEED", ")", ":", "\n", "                    ", "self", ".", "forward_evaluate_output", ".", "pop", "(", "InstanceName", ".", "TARGET_FEED", ")", "\n", "\n", "", "if", "self", ".", "forward_evaluate_output", ".", "__contains__", "(", "InstanceName", ".", "TARGET_PREDICTS", ")", ":", "\n", "                    ", "self", ".", "forward_evaluate_output", ".", "pop", "(", "InstanceName", ".", "TARGET_PREDICTS", ")", "\n", "\n", "", "self", ".", "fetch_list_evaluate", "=", "list", "(", "self", ".", "forward_evaluate_output", ".", "values", "(", ")", ")", "\n", "self", ".", "fetch_list_evaluate_key", "=", "list", "(", "self", ".", "forward_evaluate_output", ".", "keys", "(", ")", ")", "\n", "\n", "", "", "program", "=", "program", ".", "clone", "(", "for_test", "=", "True", ")", "\n", "add_sync_comm", "(", "program", ",", "1", ")", "\n", "return", "program", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.init_static_save_inference_net": [[416, 437], ["static_trainer_ernie_gen.BaseStaticTrainerErnieGen.save_inference_program.clone", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.data_set_reader.predict_reader.create_reader", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.data_set_reader.predict_reader.instance_fields_dict", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.structure", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.model_class.forward", "static_trainer_ernie_gen.get_infer_data_meta", "target_feed_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.create_reader", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.instance_fields_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.structure", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.PositionWiseFeedForwardLayer.forward", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.get_infer_data_meta"], ["", "def", "init_static_save_inference_net", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u521d\u59cb\u5316\u7528\u6765\u4fdd\u5b58inference model\u7684\u7f51\u7edc\uff0c\u53ea\u6709\u524d\u5411\uff0c\u4e14\u662f\u88c1\u5207\u8fc7\u540e\u7684\u7f51\u7edc\u3002\n        :return:\n        \"\"\"", "\n", "with", "static", ".", "program_guard", "(", "self", ".", "save_inference_program", ",", "self", ".", "startup_program", ")", ":", "\n", "            ", "with", "paddle", ".", "fluid", ".", "unique_name", ".", "guard", "(", ")", ":", "\n", "                ", "self", ".", "data_set_reader", ".", "predict_reader", ".", "create_reader", "(", ")", "\n", "fields_dict", "=", "self", ".", "data_set_reader", ".", "predict_reader", ".", "instance_fields_dict", "(", ")", "\n", "self", ".", "model_class", ".", "structure", "(", ")", "\n", "forward_output_dict", "=", "self", ".", "model_class", ".", "forward", "(", "self", ".", "data_set_reader", ".", "predict_reader", ",", "\n", "fields_dict", ",", "phase", "=", "InstanceName", ".", "SAVE_INFERENCE", ")", "\n", "feed_tensor", "=", "forward_output_dict", "[", "InstanceName", ".", "TARGET_FEED", "]", "\n", "target_feed_list", "=", "[", "]", "\n", "for", "x", "in", "feed_tensor", ":", "\n", "                    ", "target_feed_list", ".", "append", "(", "x", ".", "name", ")", "\n", "\n", "", "self", ".", "infer_dict", "=", "get_infer_data_meta", "(", "target_feed_list", ",", "fields_dict", ")", "\n", "self", ".", "feed_target_tensor", "=", "feed_tensor", "\n", "self", ".", "inference_output", "=", "forward_output_dict", "[", "InstanceName", ".", "TARGET_PREDICTS", "]", "\n", "\n", "", "", "self", ".", "save_inference_program", "=", "self", ".", "save_inference_program", ".", "clone", "(", "for_test", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.load_static_model_params": [[438, 466], ["logging.info", "ValueError", "static_trainer_ernie_gen.init_checkpoint", "static_trainer_ernie_gen.init_pretraining_params", "logging.info", "static_trainer_ernie_gen.init_pretraining_params"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.init_checkpoint", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.init_pretraining_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.init_pretraining_params"], ["", "def", "load_static_model_params", "(", "self", ",", "params_type", ",", "program", ")", ":", "\n", "        ", "\"\"\"load_static_model_params\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"load_model_params on static mode....\"", ")", "\n", "if", "params_type", "==", "\"net_model\"", ":", "\n", "            ", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "and", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"ERROR: config 'load_checkpoint' and 'load_parameters' \"", "\n", "\"both are set! Only one of them should be set. \"", "\n", "\"if you want warmstart checkpoint keep its learning_rate and moments, plese set 'load_checkpoint'. \"", "\n", "\"if you want warmstart checkpoint with only its parameters, and you want reset a new learning_rate \"", "\n", "\"by config, plese set 'load_parameters'\"", ")", "\n", "", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "\n", "init_checkpoint", "(", "exe", "=", "self", ".", "executor", ",", "init_checkpoint_path", "=", "original_path", ",", "main_program", "=", "program", ")", "\n", "", "elif", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_parameters\"", "]", "\n", "init_pretraining_params", "(", "exe", "=", "self", ".", "executor", ",", "\n", "pretraining_params_path", "=", "original_path", ",", "main_program", "=", "program", ")", "\n", "\n", "", "", "elif", "params_type", "==", "\"pre_train_model\"", ":", "\n", "# pretrain_embedding_path = self.get_pretrain_embedding_path()", "\n", "            ", "for", "pre_train_model", "in", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "                ", "logging", ".", "info", "(", "\"pre_train_model's name = %s\"", "%", "pre_train_model", "[", "\"name\"", "]", ")", "\n", "params_path", "=", "pre_train_model", "[", "\"params_path\"", "]", "\n", "init_pretraining_params", "(", "exe", "=", "self", ".", "executor", ",", "\n", "pretraining_params_path", "=", "params_path", ",", "\n", "main_program", "=", "program", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.save_model": [[467, 478], ["logging.info", "logging.info", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.save_checkpoint", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.save_inference"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_checkpoint", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_inference"], ["", "", "", "def", "save_model", "(", "self", ",", "steps", ",", "save_checkpoint", "=", "True", ",", "save_inference", "=", "True", ")", ":", "\n", "        ", "\"\"\"save_model\"\"\"", "\n", "if", "self", ".", "enable_static", ":", "\n", "            ", "logging", ".", "info", "(", "\"save model on static....\"", ")", "\n", "if", "save_checkpoint", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", "self", ".", "executor", ",", "self", ".", "train_program", ",", "steps", ")", "\n", "", "if", "save_inference", ":", "\n", "                ", "self", ".", "save_inference", "(", "self", ".", "executor", ",", "self", ".", "feed_target_tensor", ",", "self", ".", "inference_output", ",", "\n", "self", ".", "save_inference_program", ",", "steps", ",", "self", ".", "infer_dict", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"save model on dynamic....\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.save_checkpoint": [[479, 497], ["erniekit.utils.util_helper.get_model_paths", "paddle.distributed.fleet.meta_optimizers.sharding.utils.save_persistables", "paddle.distributed.fleet.meta_optimizers.sharding.utils.save_persistables", "paddle.distributed.fleet.meta_optimizers.sharding.utils.save_persistables", "paddle.distributed.fleet.meta_optimizers.sharding.utils.save_persistables", "erniekit.utils.util_helper.save_meta_data", "static_trainer_ernie_gen.BaseStaticTrainerErnieGen.params.get", "erniekit.utils.util_helper.make_targz", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.get_model_paths", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.make_targz"], ["", "", "def", "save_checkpoint", "(", "self", ",", "exe", ",", "program", ",", "steps", ")", ":", "\n", "        ", "\"\"\"\n        :param exe:\n        :param program:\n        :param steps:\n        :return:\n        \"\"\"", "\n", "path_dict", "=", "get_model_paths", "(", "self", ".", "save_checkpoints_path", ",", "self", ".", "save_inference_model_path", ",", "steps", ")", "\n", "save_path", "=", "path_dict", "[", "\"checkpoints_model_path\"", "]", "\n", "# todo: \u9700\u8981\u9a8c\u8bc1\u4e00\u4e0bfleet\u7684save\u548c\u975efleet\u6709\u6ca1\u6709\u533a\u522b", "\n", "save_persistables", "(", "exe", ",", "save_path", ",", "program", ")", "\n", "meta_path", "=", "path_dict", "[", "\"checkpoints_meta_path\"", "]", "\n", "save_meta_data", "(", "self", ".", "meta_dict", ",", "meta_path", ")", "\n", "if", "self", ".", "params", ".", "get", "(", "\"need_tar\"", ",", "False", ")", ":", "\n", "# \u538b\u7f29\u4e3atar.gz", "\n", "            ", "errcode", "=", "make_targz", "(", "save_path", "+", "\".tar.gz\"", ",", "save_path", ")", "\n", "if", "errcode", "==", "0", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.save_inference": [[498, 525], ["erniekit.utils.util_helper.get_model_paths", "os.path.join", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "erniekit.utils.util_helper.save_meta_data", "erniekit.utils.util_helper.save_meta_data"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.get_model_paths", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data"], ["", "", "", "def", "save_inference", "(", "self", ",", "exe", ",", "feed_vars", ",", "target_vars", ",", "program", ",", "steps", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param exe:\n        :param feed_vars\n        :param target_vars\n        :param program:\n        :param steps:\n        :param data_dict:\n        :return:\n        \"\"\"", "\n", "path_dict", "=", "get_model_paths", "(", "self", ".", "save_checkpoints_path", ",", "self", ".", "save_inference_model_path", ",", "steps", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path_dict", "[", "\"inference_model_path\"", "]", ",", "\"wenxin\"", ")", "\n", "# paddle.fluid.io.save_inference_model", "\n", "# paddle.static.save_inference_model", "\n", "paddle", ".", "static", ".", "save_inference_model", "(", "\n", "save_path", ",", "\n", "feed_vars", ",", "\n", "target_vars", ",", "\n", "exe", ",", "\n", "program", "=", "program", ",", "\n", "model_filename", "=", "\"model\"", ",", "\n", "params_filename", "=", "\"params\"", ")", "\n", "\n", "infer_meta_path", "=", "path_dict", "[", "\"inference_infer_meta_path\"", "]", "\n", "meta_path", "=", "path_dict", "[", "\"inference_meta_path\"", "]", "\n", "save_meta_data", "(", "data_dict", ",", "infer_meta_path", ")", "\n", "save_meta_data", "(", "self", ".", "meta_dict", ",", "meta_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.BaseStaticTrainerErnieGen.load_model_meta_info": [[526, 547], ["static_trainer_ernie_gen.parse_meta", "static_trainer_ernie_gen.parse_meta", "logging.info", "os.path.dirname", "static_trainer_ernie_gen.parse_meta"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.parse_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.parse_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.parse_meta"], ["", "def", "load_model_meta_info", "(", "self", ",", "load_model", ")", ":", "\n", "        ", "\"\"\"\n        \u83b7\u53d6\u6a21\u578b\u7684meta\u4fe1\u606f\n        :param load_model:\n        :return:\n        \"\"\"", "\n", "meta_info", "=", "{", "}", "\n", "if", "load_model", "==", "\"net_model\"", ":", "\n", "            ", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "\n", "meta_info", "=", "parse_meta", "(", "original_path", ")", "\n", "", "elif", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_parameters\"", "]", "\n", "meta_info", "=", "parse_meta", "(", "original_path", ")", "\n", "", "", "elif", "load_model", "==", "\"pre_train_model\"", ":", "\n", "            ", "for", "pre_train_model", "in", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "                ", "logging", ".", "info", "(", "\"pre_train_model's name = %s\"", "%", "pre_train_model", "[", "\"name\"", "]", ")", "\n", "# params_path = pre_train_model[\"params_path\"]", "\n", "params_path", "=", "os", ".", "path", ".", "dirname", "(", "pre_train_model", "[", "\"params_path\"", "]", ")", "\n", "meta_info", "=", "parse_meta", "(", "params_path", ")", "\n", "", "", "return", "meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.get_infer_data_meta": [[549, 566], ["fields_dict.items", "v1.items", "infer_dict[].append"], "function", ["None"], ["", "", "def", "get_infer_data_meta", "(", "target_feed_list", ",", "fields_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param target_feed_list:\n    :param fields_dict:\n    :return:\n    \"\"\"", "\n", "infer_dict", "=", "{", "\"fields\"", ":", "[", "]", "}", "\n", "for", "name", "in", "target_feed_list", ":", "\n", "        ", "for", "k1", ",", "v1", "in", "fields_dict", ".", "items", "(", ")", ":", "# dict_keys(['text_a', 'label'])", "\n", "            ", "for", "k2", ",", "v2", "in", "v1", ".", "items", "(", ")", ":", "\n", "                ", "if", "v2", ":", "\n", "                    ", "for", "k3", "in", "v2", ":", "\n", "# logging.info(k3)", "\n", "                        ", "if", "v2", "[", "k3", "]", "and", "v2", "[", "k3", "]", ".", "name", "==", "name", ":", "\n", "                            ", "field_ele", "=", "\"%s#%s\"", "%", "(", "k1", ",", "k3", ")", "\n", "infer_dict", "[", "\"fields\"", "]", ".", "append", "(", "field_ele", ")", "\n", "", "", "", "", "", "", "return", "infer_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.parse_meta": [[568, 587], ["os.listdir", "file.endswith", "open", "open.read", "json.loads", "logging.error", "os.path.join"], "function", ["None"], ["", "def", "parse_meta", "(", "model_dir", ")", ":", "\n", "    ", "\"\"\"\n    :param model_dir:\n    :return: meta_dict\n    \"\"\"", "\n", "json_path", "=", "None", "\n", "meta_dict", "=", "{", "}", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\".meta\"", ")", ":", "\n", "            ", "json_path", "=", "file", "\n", "break", "\n", "", "", "try", ":", "\n", "        ", "if", "json_path", ":", "\n", "            ", "json_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "json_path", ")", ",", "'r'", ")", "\n", "model_info", "=", "json_file", ".", "read", "(", ")", "\n", "meta_dict", "=", "json", ".", "loads", "(", "model_info", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logging", ".", "error", "(", "\"error in parser model.meta.....\"", ")", "\n", "", "return", "meta_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.init_checkpoint": [[589, 608], ["os.path.exists", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "logging.info", "os.path.exists", "paddle.fluid.io.is_persistable", "paddle.fluid.io.is_persistable", "paddle.fluid.io.is_persistable", "paddle.fluid.io.is_persistable", "os.path.join"], "function", ["None"], ["", "def", "init_checkpoint", "(", "exe", ",", "init_checkpoint_path", ",", "main_program", ")", ":", "\n", "    ", "\"\"\"\u52a0\u8f7dcheckpoints\u6587\u4ef6\n    :param exe:\n    :param init_checkpoint_path:\n    :param main_program:\n    :return:\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "init_checkpoint_path", ")", ",", "\"[%s] cann't be found.\"", "%", "init_checkpoint_path", "\n", "\n", "def", "existed_persitables", "(", "var", ")", ":", "\n", "        ", "\"\"\"\n        existed_presitables\n        \"\"\"", "\n", "if", "not", "paddle", ".", "fluid", ".", "io", ".", "is_persistable", "(", "var", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "init_checkpoint_path", ",", "var", ".", "name", ")", ")", "\n", "\n", "", "paddle", ".", "fluid", ".", "io", ".", "load_vars", "(", "exe", ",", "init_checkpoint_path", ",", "main_program", "=", "main_program", ",", "predicate", "=", "existed_persitables", ")", "\n", "logging", ".", "info", "(", "\"Load model from {}\"", ".", "format", "(", "init_checkpoint_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer_ernie_gen.init_pretraining_params": [[610, 628], ["os.path.exists", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "os.path.exists", "isinstance", "os.path.join"], "function", ["None"], ["", "def", "init_pretraining_params", "(", "exe", ",", "pretraining_params_path", ",", "main_program", ")", ":", "\n", "    ", "\"\"\"\n    :param exe:\n    :param pretraining_params_path:\n    :param main_program:\n    :return:\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "pretraining_params_path", ")", ",", "\"[%s] cann't be found.\"", "%", "pretraining_params_path", "\n", "\n", "def", "existed_params", "(", "var", ")", ":", "\n", "        ", "\"\"\"\n        existed_params\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "var", ",", "paddle", ".", "fluid", ".", "framework", ".", "Parameter", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "pretraining_params_path", ",", "var", ".", "name", ")", ")", "\n", "\n", "", "paddle", ".", "fluid", ".", "io", ".", "load_vars", "(", "exe", ",", "pretraining_params_path", ",", "main_program", "=", "main_program", ",", "predicate", "=", "existed_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.__init__": [[35, 65], ["static_trainer.BaseStaticTrainer.params.get", "static_trainer.BaseStaticTrainer.parser_meta", "static_trainer.BaseStaticTrainer.init_env_static", "os.path.join", "os.path.join", "static_trainer.BaseStaticTrainer.params.keys"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.parser_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_env_static", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "data_set_reader", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        :param params\n        :param data_set_reader\n        :param model\n        \"\"\"", "\n", "self", ".", "params", "=", "params", "\n", "self", ".", "data_set_reader", "=", "data_set_reader", "\n", "self", ".", "model_class", "=", "model", "\n", "\n", "# \u53c2\u6570\u89e3\u6790", "\n", "# \u52a8\u6001\u56feor\u9759\u6001\u56fe", "\n", "self", ".", "enable_static", "=", "True", "\n", "self", ".", "is_recompute", "=", "self", ".", "params", ".", "get", "(", "\"is_recompute\"", ",", "0", ")", "\n", "if", "'output_path'", "in", "self", ".", "params", ".", "keys", "(", ")", "and", "self", ".", "params", "[", "\"output_path\"", "]", ":", "\n", "            ", "self", ".", "save_checkpoints_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", "[", "\"output_path\"", "]", ",", "\"save_checkpoints\"", ")", "\n", "self", ".", "save_inference_model_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "params", "[", "\"output_path\"", "]", ",", "\"save_inference_model\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "save_checkpoints_path", "=", "\"./output/save_checkpoints/\"", "\n", "self", ".", "save_inference_model_path", "=", "\"./output/save_inference_model/\"", "\n", "\n", "", "self", ".", "forward_train_output", "=", "{", "}", "\n", "self", ".", "fetch_list_train", "=", "[", "]", "\n", "self", ".", "fetch_list_evaluate", "=", "[", "]", "\n", "self", ".", "fetch_list_train_key", "=", "[", "]", "\n", "self", ".", "fetch_list_evaluate_key", "=", "[", "]", "\n", "\n", "self", ".", "parser_meta", "(", ")", "\n", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "init_env_static", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_train": [[66, 72], ["None"], "methods", ["None"], ["", "def", "do_train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u542f\u52a8\u6570\u636e\u96c6\u5faa\u73af\uff0c\u5f00\u59cb\u8bad\u7ec3\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_evaluate": [[73, 80], ["None"], "methods", ["None"], ["", "def", "do_evaluate", "(", "self", ",", "reader", ",", "phase", ",", "step", ")", ":", "\n", "        ", "\"\"\"\u5728\u5f53\u524d\u7684\u8bad\u7ec3\u72b6\u6001\u4e0b\uff0c\u5bf9\u67d0\u4e2a\u6d4b\u8bd5\u96c6\u8fdb\u884c\u8bc4\u4f30\n        :param reader:\u5f85\u8bc4\u4f30\u6570\u636e\u96c6\n        :param phase:\u5f53\u524d\u7684\u8fd0\u884c\u9636\u6bb5\n        :param step:\u5f53\u524d\u7684\u8fd0\u884c\u6b65\u6570\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.do_visual": [[81, 85], ["None"], "methods", ["None"], ["", "def", "do_visual", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u8bc4\u4f30\u6307\u6807\u7684\u53ef\u89c6\u5316\u5c55\u793a\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.parser_meta": [[86, 111], ["logging.info", "static_trainer.BaseStaticTrainer.params.get", "static_trainer.BaseStaticTrainer.load_model_meta_info", "static_trainer.BaseStaticTrainer.get", "static_trainer.BaseStaticTrainer.get", "static_trainer.BaseStaticTrainer.get", "static_trainer.BaseStaticTrainer.get", "static_trainer.BaseStaticTrainer.get.get", "static_trainer.BaseStaticTrainer.load_model_meta_info"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_model_meta_info", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_model_meta_info"], ["", "def", "parser_meta", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"parser meta ....\"", ")", "\n", "model_meta_info", "=", "{", "}", "\n", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "or", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "            ", "model_meta_info", "=", "self", ".", "load_model_meta_info", "(", "\"net_model\"", ")", "\n", "", "elif", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "            ", "model_meta_info", "=", "self", ".", "load_model_meta_info", "(", "\"pre_train_model\"", ")", "\n", "# \u7531\u5916\u90e8json\u914d\u7f6e\u4f20\u5165", "\n", "", "meta_param", "=", "{", "}", "\n", "extra_param", "=", "self", ".", "params", ".", "get", "(", "\"extra_param\"", ",", "None", ")", "\n", "if", "extra_param", ":", "\n", "            ", "meta_param", "=", "extra_param", ".", "get", "(", "\"meta\"", ",", "None", ")", "\n", "\n", "", "self", ".", "meta_dict", "=", "{", "\n", "\"framework_version\"", ":", "version", ".", "full_version", ",", "\n", "\"model_type\"", ":", "model_meta_info", ".", "get", "(", "\"model_type\"", ",", "\"\"", ")", ",", "\n", "\"pretrain_model_version\"", ":", "model_meta_info", ".", "get", "(", "\"pretrain_model_version\"", ",", "\"\"", ")", ",", "\n", "\"pretrain_model_type\"", ":", "model_meta_info", ".", "get", "(", "\"pretrain_model_type\"", ",", "\"\"", ")", ",", "\n", "\"job_type\"", ":", "meta_param", ".", "get", "(", "\"job_type\"", ",", "\"custom\"", ")", ",", "\n", "\"net_type\"", ":", "self", ".", "model_class", ".", "__class__", ".", "__name__", ",", "\n", "\"task_type\"", ":", "\"train\"", ",", "\n", "\"deploy_type\"", ":", "4", ",", "\n", "\"is_dynamic\"", ":", "0", "\n", "}", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_env_static": [[112, 309], ["logging.info", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.enable_static", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "paddle.Program", "static_trainer.BaseStaticTrainer.params.get", "static_trainer.BaseStaticTrainer.params.get", "static_trainer.BaseStaticTrainer.params.get", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "paddle.static.ExecutionStrategy", "static_trainer.BaseStaticTrainer.params.get", "static_trainer.BaseStaticTrainer.params.get", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.static.BuildStrategy", "paddle.Executor", "paddle.Executor", "paddle.Executor", "paddle.Executor", "static_trainer.BaseStaticTrainer.init_static_model_net", "static_trainer.BaseStaticTrainer.executor.run", "os.getenv", "logging.info", "os.getenv().split", "int", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "paddle.CUDAPlace", "len", "static_trainer.BaseStaticTrainer.params.get", "static_trainer.BaseStaticTrainer.load_static_model_params", "int", "paddle.init", "paddle.init", "paddle.init", "paddle.init", "logging.info", "paddle.DistributedStrategy", "paddle.DistributedStrategy", "paddle.DistributedStrategy", "paddle.DistributedStrategy", "static_trainer.BaseStaticTrainer.params.get", "paddle.init", "paddle.init", "paddle.init", "paddle.init", "paddle.worker_index", "paddle.worker_index", "paddle.worker_index", "paddle.worker_index", "os.getenv", "paddle.worker_endpoints", "paddle.worker_endpoints", "paddle.worker_endpoints", "paddle.worker_endpoints", "len", "logging.debug", "logging.info", "os.getenv().split", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "paddle.set_device", "logging.info", "logging.info", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "paddle.CPUPlace", "int", "static_trainer.BaseStaticTrainer.params.get", "static_trainer.BaseStaticTrainer.load_static_model_params", "paddle.ParallelExecutor", "paddle.ParallelExecutor", "paddle.ParallelExecutor", "paddle.ParallelExecutor", "os.getenv", "static_trainer.BaseStaticTrainer.model_class.model_params.get", "static_trainer.BaseStaticTrainer.get", "static_trainer.BaseStaticTrainer.get", "static_trainer.BaseStaticTrainer.get", "static_trainer.BaseStaticTrainer.get", "static_trainer.BaseStaticTrainer.get", "os.environ.get", "logging.info", "paddle.PaddleCloudRoleMaker", "paddle.PaddleCloudRoleMaker", "paddle.PaddleCloudRoleMaker", "paddle.PaddleCloudRoleMaker", "paddle.init", "paddle.init", "paddle.init", "paddle.init", "os.getenv", "multiprocessing.cpu_count"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_model_net", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_static_model_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_static_model_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "init_env_static", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u521d\u59cb\u5316\u9759\u6001\u56fe\u7684\u8fd0\u884c\u65f6\u73af\u5883\uff1a\u5305\u62ec\uff1aprogram\u3001executor\u3001fleet\u3001cuda\u3001place\n        :return:\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"init environment on static mode......\"", ")", "\n", "paddle", ".", "enable_static", "(", ")", "\n", "\n", "# step1: init program", "\n", "self", ".", "startup_program", "=", "static", ".", "Program", "(", ")", "\n", "self", ".", "train_program", "=", "static", ".", "Program", "(", ")", "\n", "self", ".", "test_program", "=", "static", ".", "Program", "(", ")", "\n", "self", ".", "evaluate_program", "=", "static", ".", "Program", "(", ")", "\n", "self", ".", "save_inference_program", "=", "static", ".", "Program", "(", ")", "\n", "\n", "random_seed", "=", "self", ".", "params", ".", "get", "(", "\"random_seed\"", ",", "0", ")", "\n", "if", "random_seed", "is", "not", "None", ":", "\n", "            ", "self", ".", "startup_program", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "train_program", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "test_program", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "evaluate_program", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "save_inference_program", ".", "random_seed", "=", "random_seed", "\n", "\n", "# step2: init run place\u3001executor\u3001fleet", "\n", "", "self", ".", "num_trainers", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "\n", "self", ".", "place_type", "=", "self", ".", "params", ".", "get", "(", "\"PADDLE_PLACE_TYPE\"", ",", "os", ".", "getenv", "(", "\"PADDLE_PLACE_TYPE\"", ",", "\"cpu\"", ")", ")", "\n", "self", ".", "params", "[", "\"PADDLE_PLACE_TYPE\"", "]", "=", "self", ".", "place_type", "\n", "\n", "# executor\u6267\u884c\u5668\u7684\u4e00\u4e9b\u53c2\u6570\u8bbe\u7f6e", "\n", "self", ".", "use_fast_executor", "=", "self", ".", "params", ".", "get", "(", "\"use_fast_executor\"", ",", "False", ")", "\n", "self", ".", "exe_strategy", "=", "paddle", ".", "static", ".", "ExecutionStrategy", "(", ")", "\n", "self", ".", "exe_strategy", ".", "num_iteration_per_run", "=", "self", ".", "params", ".", "get", "(", "\"num_iteration_per_run\"", ",", "1", ")", "\n", "self", ".", "exe_strategy", ".", "num_iteration_per_drop_scope", "=", "self", ".", "params", ".", "get", "(", "\"num_iteration_per_drop_scope\"", ",", "10", ")", "\n", "\n", "self", ".", "build_strategy", "=", "paddle", ".", "static", ".", "BuildStrategy", "(", ")", "\n", "\n", "if", "self", ".", "place_type", "==", "\"gpu\"", ":", "\n", "            ", "logging", ".", "info", "(", "\"gpu place....\"", ")", "\n", "gpus", "=", "os", ".", "getenv", "(", "'FLAGS_selected_gpus'", ",", "'0'", ")", ".", "split", "(", "\",\"", ")", "\n", "self", ".", "gpu_id", "=", "int", "(", "gpus", "[", "0", "]", ")", "\n", "self", ".", "run_place", "=", "paddle", ".", "CUDAPlace", "(", "int", "(", "gpus", "[", "0", "]", ")", ")", "\n", "self", ".", "dev_count", "=", "len", "(", "gpus", ")", "\n", "self", ".", "exe_strategy", ".", "num_threads", "=", "self", ".", "dev_count", "\n", "self", ".", "use_cuda", "=", "True", "\n", "\"\"\"\n            gpu fleet \u4f7f\u7528\u4e09\u6b65\u9aa4\uff1a\n            1.\u5bfc\u5165\u4f9d\u8d56\u5305\uff1afrom paddle.distributed import fleet\n            2.\u521d\u59cb\u5316fleet\u73af\u5883:\u5305\u62ec\u5b9a\u4e49\u7f3a\u7701\u7684\u5206\u5e03\u5f0f\u7b56\u7565\uff0c\u7136\u540e\u901a\u8fc7\u5c06\u53c2\u6570is_collective\u8bbe\u7f6e\u4e3aTrue\uff0c\u4f7f\u8bad\u7ec3\u67b6\u6784\u8bbe\u5b9a\u4e3aCollective\u67b6\u6784\u3002\n            strategy = fleet.DistributedStrategy()\n            fleet.init(is_collective=True, strategy=strategy)\n            3.\u4f7f\u7528distributed_optimizer\u8bbe\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\u4f18\u5316\u5668\n            optimizer = fleet.distributed_optimizer(optimizer)\n            \"\"\"", "\n", "if", "self", ".", "params", ".", "get", "(", "\"PADDLE_IS_FLEET\"", ",", "0", ")", ":", "\n", "                ", "fleet", ".", "init", "(", "is_collective", "=", "True", ")", "\n", "logging", ".", "info", "(", "\"fleet init ...\"", ")", "\n", "self", ".", "use_fleet", "=", "True", "\n", "self", ".", "strategy", "=", "fleet", ".", "DistributedStrategy", "(", ")", "\n", "self", ".", "strategy", ".", "execution_strategy", "=", "self", ".", "exe_strategy", "\n", "self", ".", "strategy", ".", "build_strategy", "=", "self", ".", "build_strategy", "\n", "# TODO nccl_comm_num \u53ef\u4ee5\u52a0\u5febGPU\u4e4b\u95f4\u7684\u901a\u4fe1\u6548\u7387\uff0c\u5efa\u8bae\u5355\u673a\u8bbe\u7f6e\u4e3a1\uff0c\u591a\u673a\u8bbe\u7f6e\u4e3a2\u3002", "\n", "# TODO \u627e\u4e2a\u5224\u65ad\u591a\u673a\u7684\u65b9\u6cd5\uff0c\u8bbe\u7f6enccl_comm_num\u53c2\u6570", "\n", "self", ".", "strategy", ".", "nccl_comm_num", "=", "1", "\n", "self", ".", "strategy", ".", "sync_nccl_allreduce", "=", "True", "\n", "self", ".", "strategy", ".", "fuse_all_reduce_ops", "=", "True", "\n", "\n", "# amp\u8bbe\u7f6e", "\n", "self", ".", "use_amp", "=", "self", ".", "params", ".", "get", "(", "\"use_amp\"", ",", "False", ")", "\n", "if", "self", ".", "use_amp", ":", "\n", "                    ", "opt_params", "=", "self", ".", "model_class", ".", "model_params", ".", "get", "(", "'optimization'", ",", "None", ")", "\n", "init_loss_scaling", "=", "opt_params", ".", "get", "(", "\"init_loss_scaling\"", ",", "1.0", ")", "\n", "incr_every_n_steps", "=", "opt_params", ".", "get", "(", "\"incr_every_n_steps\"", ",", "1000", ")", "\n", "decr_every_n_nan_or_inf", "=", "opt_params", ".", "get", "(", "\"decr_every_n_nan_or_inf\"", ",", "2", ")", "\n", "incr_ratio", "=", "opt_params", ".", "get", "(", "\"incr_ratio\"", ",", "2.0", ")", "\n", "decr_ratio", "=", "opt_params", ".", "get", "(", "\"decr_ratio\"", ",", "0.8", ")", "\n", "\n", "self", ".", "strategy", ".", "amp", "=", "True", "\n", "self", ".", "strategy", ".", "amp_configs", "=", "{", "\n", "\"init_loss_scaling\"", ":", "init_loss_scaling", ",", "\n", "\"decr_every_n_nan_or_inf\"", ":", "decr_every_n_nan_or_inf", ",", "\n", "\"incr_every_n_steps\"", ":", "incr_every_n_steps", ",", "\n", "\"incr_ratio\"", ":", "incr_ratio", ",", "\n", "\"use_dynamic_loss_scaling\"", ":", "True", ",", "\n", "\"decr_ratio\"", ":", "decr_ratio", ",", "\n", "\"custom_white_list\"", ":", "[", "]", ",", "\n", "\"custom_black_list\"", ":", "[", "]", ",", "\n", "}", "\n", "\n", "", "fleet", ".", "init", "(", "is_collective", "=", "True", ",", "strategy", "=", "self", ".", "strategy", ")", "\n", "# \u4ee5\u4e0b\u4ee3\u7801\u662f\u4e3a\u4e86\u6253\u5370\u65e5\u5fd7\uff0c\u4e0d\u5f71\u54cd\u8bad\u7ec3", "\n", "trainer_id", "=", "fleet", ".", "worker_index", "(", ")", "\n", "current_endpoint", "=", "os", ".", "getenv", "(", "\"PADDLE_CURRENT_ENDPOINT\"", ")", "\n", "worker_endpoints", "=", "fleet", ".", "worker_endpoints", "(", ")", "\n", "trainers_num", "=", "len", "(", "worker_endpoints", ")", "\n", "logging", ".", "debug", "(", "\"worker_endpoints:{} trainers_num:{} current_endpoint:{} trainer_id:{}\"", ".", "format", "(", "\n", "worker_endpoints", ",", "\n", "trainers_num", ",", "\n", "current_endpoint", ",", "\n", "trainer_id", ")", ")", "\n", "self", ".", "num_trainers", "=", "trainers_num", "\n", "self", ".", "trainer_id", "=", "trainer_id", "\n", "", "else", ":", "\n", "                ", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "num_trainers", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "\n", "", "", "elif", "self", ".", "place_type", "==", "\"xpu\"", ":", "\n", "            ", "logging", ".", "info", "(", "\"xpu_place, support single device mode only\"", ")", "\n", "xpus", "=", "os", ".", "getenv", "(", "'FLAGS_selected_xpus'", ",", "'0'", ")", ".", "split", "(", "\",\"", ")", "\n", "# self.run_place = paddle.XPUPlace(int(xpus[0]))", "\n", "self", ".", "run_place", "=", "paddle", ".", "set_device", "(", "\"xpu:\"", "+", "xpus", "[", "0", "]", ")", "\n", "self", ".", "dev_count", "=", "1", "\n", "self", ".", "exe_strategy", ".", "num_threads", "=", "self", ".", "dev_count", "\n", "self", ".", "gpu_id", "=", "0", "\n", "self", ".", "use_cuda", "=", "False", "\n", "logging", ".", "info", "(", "\"finish prepare xpu single deviece env\"", ")", "\n", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "num_trainers", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"cpu place....\"", ")", "\n", "self", ".", "run_place", "=", "paddle", ".", "CPUPlace", "(", ")", "\n", "self", ".", "dev_count", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'CPU_NUM'", ",", "multiprocessing", ".", "cpu_count", "(", ")", ")", ")", "\n", "self", ".", "use_cuda", "=", "False", "\n", "self", ".", "gpu_id", "=", "0", "\n", "self", ".", "exe_strategy", ".", "num_threads", "=", "self", ".", "dev_count", "\n", "\"\"\"\n            cpu fleet \u4f7f\u7528\u6b65\u9aa4\n            https://fleetx.readthedocs.io/en/latest/paddle_fleet_rst/parameter_server/ps_quick_start.html\n            1.\u5bfc\u5165\u4f9d\u8d56:\n            import paddle.distributed.fleet as fleet\n            import paddle.distributed.fleet.base.role_maker as role_maker\n            \n            2.\u5b9a\u4e49\u5206\u5e03\u5f0f\u6a21\u5f0f\u5e76\u521d\u59cb\u5316\u5206\u5e03\u5f0f\u8bad\u7ec3\u73af\u5883\uff0c\u5f53\u524d\u53c2\u6570\u670d\u52a1\u5668\u6a21\u5f0f\u53ea\u652f\u6301\u9759\u6001\u56fe\u6a21\u5f0f\n            \u901a\u8fc7fleet.init()\u63a5\u53e3\uff0c\u7528\u6237\u53ef\u4ee5\u5b9a\u4e49\u8bad\u7ec3\u76f8\u5173\u7684\u73af\u5883\uff0c\u6ce8\u610f\u6b64\u73af\u5883\u662f\u7528\u6237\u9884\u5148\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u914d\u7f6e\u597d\u7684\uff0c\n            \u5305\u62ec\uff1a\u8bad\u7ec3\u8282\u70b9\u4e2a\u6570\uff0c\u670d\u52a1\u8282\u70b9\u4e2a\u6570\uff0c\u5f53\u524d\u8282\u70b9\u7684\u5e8f\u53f7\uff0c\u670d\u52a1\u8282\u70b9\u5b8c\u6574\u7684IP:PORT\u5217\u8868\u7b49\u3002\n            paddle.enable_static()\n            role = role_maker.PaddleCloudRoleMaker()\n            fleet.init(role)\n            \n            3.\u7ec4\u7f51\uff0c\u52a0\u8f7dreader\n            model = init_net()\n            reader = init_dataset_reader()\n            \n            4.\u5b9a\u4e49\u540c\u6b65\u8bad\u7ec3 Strategy \u53ca Optimizer\n            optimizer = paddle.optimizer.SGD(learning_rate=0.0001)\n            strategy = fleet.DistributedStrategy()\n            strategy.a_sync = True\n            optimizer = fleet.distributed_optimizer(optimizer, strategy)\n            optimizer.minimize(model.cost)\n            \n            5.\u8bad\u7ec3\n        \n            \"\"\"", "\n", "if", "self", ".", "params", ".", "get", "(", "\"PADDLE_IS_FLEET\"", ",", "0", ")", ":", "\n", "                ", "logging", ".", "info", "(", "\"int fleet parameter server mode in multi cpus....\"", ")", "\n", "role", "=", "role_maker", ".", "PaddleCloudRoleMaker", "(", "is_collective", "=", "False", ")", "\n", "fleet", ".", "init", "(", "role", ")", "\n", "self", ".", "use_fleet", "=", "True", "\n", "", "else", ":", "\n", "                ", "self", ".", "use_fleet", "=", "False", "\n", "self", ".", "num_trainers", "=", "1", "\n", "self", ".", "trainer_id", "=", "0", "\n", "\n", "# step3: init executor with run place", "\n", "", "", "self", ".", "executor", "=", "static", ".", "Executor", "(", "self", ".", "run_place", ")", "\n", "\n", "# step4: init model net", "\n", "self", ".", "init_static_model_net", "(", ")", "\n", "\n", "# step5: run executor", "\n", "self", ".", "executor", ".", "run", "(", "self", ".", "startup_program", ")", "\n", "\n", "# step6: load model params: checkpoints or pre_train_model", "\n", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "or", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "            ", "self", ".", "load_static_model_params", "(", "\"net_model\"", ")", "\n", "", "elif", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "            ", "self", ".", "load_static_model_params", "(", "\"pre_train_model\"", ")", "\n", "\n", "# step7: init train_executor", "\n", "", "if", "self", ".", "use_fleet", ":", "\n", "            ", "self", ".", "train_exe", "=", "self", ".", "executor", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "place_type", "==", "\"xpu\"", ":", "\n", "                ", "self", ".", "train_exe", "=", "self", ".", "executor", "\n", "", "else", ":", "\n", "# \u5355\u673a\u6a21\u5f0f\u4e0b\u53ef\u4ee5\u4f7f\u7528ParallelExecutor\u6765\u63d0\u901f", "\n", "                ", "self", ".", "train_exe", "=", "static", ".", "ParallelExecutor", "(", "\n", "use_cuda", "=", "self", ".", "use_cuda", ",", "\n", "loss_name", "=", "self", ".", "forward_train_output", "[", "InstanceName", ".", "LOSS", "]", ".", "name", ",", "\n", "exec_strategy", "=", "self", ".", "exe_strategy", ",", "\n", "build_strategy", "=", "self", ".", "build_strategy", ",", "\n", "main_program", "=", "self", ".", "train_program", ",", "\n", "num_trainers", "=", "self", ".", "num_trainers", ",", "\n", "trainer_id", "=", "self", ".", "trainer_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_model_net": [[310, 321], ["logging.info", "static_trainer.BaseStaticTrainer.init_static_train_net", "static_trainer.BaseStaticTrainer.init_static_save_inference_net", "static_trainer.BaseStaticTrainer.init_static_evaluate_net", "static_trainer.BaseStaticTrainer.init_static_evaluate_net"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_train_net", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_save_inference_net", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_evaluate_net", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_evaluate_net"], ["", "", "", "def", "init_static_model_net", "(", "self", ")", ":", "\n", "        ", "\"\"\"init static model net\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"init_model_net.....\"", ")", "\n", "self", ".", "init_static_train_net", "(", ")", "\n", "if", "self", ".", "params", "[", "\"is_eval_dev\"", "]", ":", "\n", "            ", "self", ".", "evaluate_program", "=", "self", ".", "init_static_evaluate_net", "(", "self", ".", "data_set_reader", ".", "dev_reader", ",", "\n", "self", ".", "evaluate_program", ")", "\n", "", "if", "self", ".", "params", "[", "\"is_eval_test\"", "]", ":", "\n", "            ", "self", ".", "test_program", "=", "self", ".", "init_static_evaluate_net", "(", "self", ".", "data_set_reader", ".", "test_reader", ",", "self", ".", "test_program", ")", "\n", "", "self", ".", "init_static_save_inference_net", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_train_net": [[322, 361], ["paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "static_trainer.BaseStaticTrainer.data_set_reader.train_reader.dataset.create_reader", "static_trainer.BaseStaticTrainer.data_set_reader.train_reader.dataset.instance_fields_dict", "static_trainer.BaseStaticTrainer.model_class.structure", "getattr", "static_trainer.BaseStaticTrainer.model_class.forward", "static_trainer.BaseStaticTrainer.model_class.set_optimizer", "static_trainer.BaseStaticTrainer.optimizer.minimize", "static_trainer.BaseStaticTrainer.forward_train_output.__contains__", "static_trainer.BaseStaticTrainer.forward_train_output.__contains__", "static_trainer.BaseStaticTrainer.forward_train_output.update", "list", "list", "static_trainer.BaseStaticTrainer.model_class.set_param_attrs", "paddle.distributed_optimizer", "paddle.distributed_optimizer", "paddle.distributed_optimizer", "paddle.distributed_optimizer", "static_trainer.BaseStaticTrainer.forward_train_output.pop", "static_trainer.BaseStaticTrainer.forward_train_output.pop", "static_trainer.BaseStaticTrainer.forward_train_output.values", "static_trainer.BaseStaticTrainer.forward_train_output.keys"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.create_reader", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.instance_fields_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.structure", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.PositionWiseFeedForwardLayer.forward", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.set_optimizer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["", "def", "init_static_train_net", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u8bad\u7ec3\u7f51\u7edc\u521d\u59cb\u5316\uff0c\u524d\u5411+\u540e\u5411\n        :return:\n        \"\"\"", "\n", "with", "static", ".", "program_guard", "(", "self", ".", "train_program", ",", "self", ".", "startup_program", ")", ":", "\n", "            ", "with", "paddle", ".", "fluid", ".", "unique_name", ".", "guard", "(", ")", ":", "\n", "                ", "self", ".", "data_set_reader", ".", "train_reader", ".", "dataset", ".", "create_reader", "(", ")", "\n", "fields_dict", "=", "self", ".", "data_set_reader", ".", "train_reader", ".", "dataset", ".", "instance_fields_dict", "(", ")", "\n", "self", ".", "model_class", ".", "structure", "(", ")", "\n", "if", "getattr", "(", "self", ".", "model_class", ",", "'param_attrs'", ",", "None", ")", ":", "\n", "                    ", "self", ".", "model_class", ".", "set_param_attrs", "(", "self", ".", "train_program", ")", "\n", "", "self", ".", "forward_train_output", "=", "self", ".", "model_class", ".", "forward", "(", "fields_dict", ",", "phase", "=", "InstanceName", ".", "TRAINING", ")", "\n", "loss", "=", "self", ".", "forward_train_output", "[", "InstanceName", ".", "LOSS", "]", "\n", "self", ".", "model_class", ".", "set_optimizer", "(", ")", "\n", "\n", "# \u52a0\u5165recompute\u529f\u80fd", "\n", "if", "self", ".", "is_recompute", ":", "\n", "                    ", "self", ".", "strategy", ".", "recompute", "=", "True", "\n", "self", ".", "strategy", ".", "recompute_configs", "=", "{", "\"checkpoints\"", ":", "self", ".", "forward_train_output", "[", "'checkpoints'", "]", "}", "\n", "del", "self", ".", "forward_train_output", "[", "\"checkpoints\"", "]", "\n", "\n", "", "if", "self", ".", "use_fleet", ":", "\n", "                    ", "self", ".", "optimizer", "=", "fleet", ".", "distributed_optimizer", "(", "self", ".", "model_class", ".", "optimizer", ",", "strategy", "=", "self", ".", "strategy", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "optimizer", "=", "self", ".", "model_class", ".", "optimizer", "\n", "\n", "", "self", ".", "optimizer", ".", "minimize", "(", "loss", ")", "\n", "\n", "if", "self", ".", "forward_train_output", ".", "__contains__", "(", "InstanceName", ".", "TARGET_FEED", ")", ":", "\n", "                    ", "self", ".", "forward_train_output", ".", "pop", "(", "InstanceName", ".", "TARGET_FEED", ")", "\n", "", "if", "self", ".", "forward_train_output", ".", "__contains__", "(", "InstanceName", ".", "TARGET_PREDICTS", ")", ":", "\n", "                    ", "self", ".", "forward_train_output", ".", "pop", "(", "InstanceName", ".", "TARGET_PREDICTS", ")", "\n", "# TODO:\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\uff0c\u6216\u8bb8\u6709\u5751", "\n", "# self.forward_train_output.update(self.optimizer_output_dict)", "\n", "# \u5982\u679c\u60f3\u83b7\u53d6\u5b66\u4e60\u7387\uff0c\u52a0\u4e0a\u4e0b\u9762\u8fd9\u4e00\u884c\u5c31\u80fdfetch\u51fa\u6765", "\n", "", "self", ".", "forward_train_output", ".", "update", "(", "{", "\"lr\"", ":", "\"learning_rate_0\"", "}", ")", "\n", "self", ".", "fetch_list_train", "=", "list", "(", "self", ".", "forward_train_output", ".", "values", "(", ")", ")", "\n", "self", ".", "fetch_list_train_key", "=", "list", "(", "self", ".", "forward_train_output", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_evaluate_net": [[362, 387], ["program.clone.clone.clone", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "reader.dataset.create_reader", "reader.dataset.instance_fields_dict", "static_trainer.BaseStaticTrainer.model_class.structure", "static_trainer.BaseStaticTrainer.model_class.forward", "static_trainer.BaseStaticTrainer.forward_evaluate_output.__contains__", "static_trainer.BaseStaticTrainer.forward_evaluate_output.__contains__", "list", "list", "static_trainer.BaseStaticTrainer.forward_evaluate_output.keys", "static_trainer.BaseStaticTrainer.forward_evaluate_output.pop", "static_trainer.BaseStaticTrainer.forward_evaluate_output.pop", "static_trainer.BaseStaticTrainer.forward_evaluate_output.values", "static_trainer.BaseStaticTrainer.forward_evaluate_output.keys"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.create_reader", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.instance_fields_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.structure", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.PositionWiseFeedForwardLayer.forward", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["", "", "", "def", "init_static_evaluate_net", "(", "self", ",", "reader", ",", "program", ")", ":", "\n", "        ", "\"\"\"\u521d\u59cb\u5316\u8bc4\u4f30\u8fc7\u7a0b\u7684\u7f51\u7edc\uff0c\u7f51\u7edc\u53ea\u6709\u524d\u5411\n        :return:\n        \"\"\"", "\n", "with", "static", ".", "program_guard", "(", "program", ",", "self", ".", "startup_program", ")", ":", "\n", "            ", "with", "paddle", ".", "fluid", ".", "unique_name", ".", "guard", "(", ")", ":", "\n", "                ", "reader", ".", "dataset", ".", "create_reader", "(", ")", "\n", "fields_dict", "=", "reader", ".", "dataset", ".", "instance_fields_dict", "(", ")", "\n", "self", ".", "model_class", ".", "structure", "(", ")", "\n", "self", ".", "forward_evaluate_output", "=", "self", ".", "model_class", ".", "forward", "(", "fields_dict", ",", "phase", "=", "InstanceName", ".", "EVALUATE", ")", "\n", "if", "\"mems\"", "in", "self", ".", "forward_evaluate_output", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "mems_eval", "=", "self", ".", "forward_evaluate_output", "[", "\"mems\"", "]", "\n", "del", "self", ".", "forward_evaluate_output", "[", "\"mems\"", "]", "\n", "\n", "", "if", "self", ".", "forward_evaluate_output", ".", "__contains__", "(", "InstanceName", ".", "TARGET_FEED", ")", ":", "\n", "                    ", "self", ".", "forward_evaluate_output", ".", "pop", "(", "InstanceName", ".", "TARGET_FEED", ")", "\n", "\n", "", "if", "self", ".", "forward_evaluate_output", ".", "__contains__", "(", "InstanceName", ".", "TARGET_PREDICTS", ")", ":", "\n", "                    ", "self", ".", "forward_evaluate_output", ".", "pop", "(", "InstanceName", ".", "TARGET_PREDICTS", ")", "\n", "\n", "", "self", ".", "fetch_list_evaluate", "=", "list", "(", "self", ".", "forward_evaluate_output", ".", "values", "(", ")", ")", "\n", "self", ".", "fetch_list_evaluate_key", "=", "list", "(", "self", ".", "forward_evaluate_output", ".", "keys", "(", ")", ")", "\n", "\n", "", "", "program", "=", "program", ".", "clone", "(", "for_test", "=", "True", ")", "\n", "return", "program", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.init_static_save_inference_net": [[388, 408], ["static_trainer.BaseStaticTrainer.save_inference_program.clone", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.program_guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "paddle.fluid.unique_name.guard", "static_trainer.BaseStaticTrainer.data_set_reader.predict_reader.dataset.create_reader", "static_trainer.BaseStaticTrainer.data_set_reader.predict_reader.dataset.instance_fields_dict", "static_trainer.BaseStaticTrainer.model_class.structure", "static_trainer.BaseStaticTrainer.model_class.forward", "static_trainer.get_infer_data_meta", "target_feed_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.create_reader", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.instance_fields_dict", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.model.model.BaseModel.structure", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.PositionWiseFeedForwardLayer.forward", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.get_infer_data_meta"], ["", "def", "init_static_save_inference_net", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u521d\u59cb\u5316\u7528\u6765\u4fdd\u5b58inference model\u7684\u7f51\u7edc\uff0c\u53ea\u6709\u524d\u5411\uff0c\u4e14\u662f\u88c1\u5207\u8fc7\u540e\u7684\u7f51\u7edc\u3002\n        :return:\n        \"\"\"", "\n", "with", "static", ".", "program_guard", "(", "self", ".", "save_inference_program", ",", "self", ".", "startup_program", ")", ":", "\n", "            ", "with", "paddle", ".", "fluid", ".", "unique_name", ".", "guard", "(", ")", ":", "\n", "                ", "self", ".", "data_set_reader", ".", "predict_reader", ".", "dataset", ".", "create_reader", "(", ")", "\n", "fields_dict", "=", "self", ".", "data_set_reader", ".", "predict_reader", ".", "dataset", ".", "instance_fields_dict", "(", ")", "\n", "self", ".", "model_class", ".", "structure", "(", ")", "\n", "forward_output_dict", "=", "self", ".", "model_class", ".", "forward", "(", "fields_dict", ",", "phase", "=", "InstanceName", ".", "SAVE_INFERENCE", ")", "\n", "feed_tensor", "=", "forward_output_dict", "[", "InstanceName", ".", "TARGET_FEED", "]", "\n", "target_feed_list", "=", "[", "]", "\n", "for", "x", "in", "feed_tensor", ":", "\n", "                    ", "target_feed_list", ".", "append", "(", "x", ".", "name", ")", "\n", "\n", "", "self", ".", "infer_dict", "=", "get_infer_data_meta", "(", "target_feed_list", ",", "fields_dict", ")", "\n", "self", ".", "feed_target_tensor", "=", "feed_tensor", "\n", "self", ".", "inference_output", "=", "forward_output_dict", "[", "InstanceName", ".", "TARGET_PREDICTS", "]", "\n", "\n", "", "", "self", ".", "save_inference_program", "=", "self", ".", "save_inference_program", ".", "clone", "(", "for_test", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_static_model_params": [[409, 437], ["logging.info", "ValueError", "static_trainer.init_checkpoint", "static_trainer.init_pretraining_params", "logging.info", "static_trainer.init_pretraining_params"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.init_checkpoint", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.init_pretraining_params", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.init_pretraining_params"], ["", "def", "load_static_model_params", "(", "self", ",", "params_type", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "logging", ".", "info", "(", "\"load_model_params on static mode....\"", ")", "\n", "if", "params_type", "==", "\"net_model\"", ":", "\n", "            ", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "and", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"ERROR: config 'load_checkpoint' and 'load_parameters' \"", "\n", "\"both are set! Only one of them should be set. \"", "\n", "\"if you want warmstart checkpoint keep its learning_rate and moments, plese set 'load_checkpoint'. \"", "\n", "\"if you want warmstart checkpoint with only its parameters, and you want reset a new learning_rate \"", "\n", "\"by config, plese set 'load_parameters'\"", ")", "\n", "", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "\n", "init_checkpoint", "(", "exe", "=", "self", ".", "executor", ",", "init_checkpoint_path", "=", "original_path", ",", "main_program", "=", "self", ".", "train_program", ")", "\n", "", "elif", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_parameters\"", "]", "\n", "init_pretraining_params", "(", "exe", "=", "self", ".", "executor", ",", "\n", "pretraining_params_path", "=", "original_path", ",", "main_program", "=", "self", ".", "train_program", ")", "\n", "\n", "", "", "elif", "params_type", "==", "\"pre_train_model\"", ":", "\n", "# pretrain_embedding_path = self.get_pretrain_embedding_path()", "\n", "            ", "for", "pre_train_model", "in", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "                ", "logging", ".", "info", "(", "\"pre_train_model's name = %s\"", "%", "pre_train_model", "[", "\"name\"", "]", ")", "\n", "params_path", "=", "pre_train_model", "[", "\"params_path\"", "]", "\n", "init_pretraining_params", "(", "exe", "=", "self", ".", "executor", ",", "\n", "pretraining_params_path", "=", "params_path", ",", "\n", "main_program", "=", "self", ".", "train_program", ")", "\n", "# self.save_model(0)", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_model": [[440, 450], ["logging.info", "logging.info", "static_trainer.BaseStaticTrainer.save_checkpoint", "static_trainer.BaseStaticTrainer.save_inference"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_checkpoint", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_inference"], ["", "", "", "def", "save_model", "(", "self", ",", "steps", ",", "save_checkpoint", "=", "True", ",", "save_inference", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "enable_static", ":", "\n", "            ", "logging", ".", "info", "(", "\"save model on static....\"", ")", "\n", "if", "save_checkpoint", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", "self", ".", "executor", ",", "self", ".", "train_program", ",", "steps", ")", "\n", "", "if", "save_inference", ":", "\n", "                ", "self", ".", "save_inference", "(", "self", ".", "executor", ",", "self", ".", "feed_target_tensor", ",", "self", ".", "inference_output", ",", "\n", "self", ".", "save_inference_program", ",", "steps", ",", "self", ".", "infer_dict", ")", "\n", "", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "\"save model on dynamic....\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_checkpoint": [[451, 469], ["utils.util_helper.get_model_paths", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "paddle.fluid.io.save_persistables", "utils.util_helper.save_meta_data", "static_trainer.BaseStaticTrainer.params.get", "utils.util_helper.make_targz", "shutil.rmtree"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.get_model_paths", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.make_targz"], ["", "", "def", "save_checkpoint", "(", "self", ",", "exe", ",", "program", ",", "steps", ")", ":", "\n", "        ", "\"\"\"\n        :param exe:\n        :param program:\n        :param steps:\n        :return:\n        \"\"\"", "\n", "path_dict", "=", "get_model_paths", "(", "self", ".", "save_checkpoints_path", ",", "self", ".", "save_inference_model_path", ",", "steps", ")", "\n", "save_path", "=", "path_dict", "[", "\"checkpoints_model_path\"", "]", "\n", "# todo: \u9700\u8981\u9a8c\u8bc1\u4e00\u4e0bfleet\u7684save\u548c\u975efleet\u6709\u6ca1\u6709\u533a\u522b", "\n", "paddle", ".", "fluid", ".", "io", ".", "save_persistables", "(", "exe", ",", "save_path", ",", "program", ")", "\n", "meta_path", "=", "path_dict", "[", "\"checkpoints_meta_path\"", "]", "\n", "save_meta_data", "(", "self", ".", "meta_dict", ",", "meta_path", ")", "\n", "if", "self", ".", "params", ".", "get", "(", "\"need_tar\"", ",", "False", ")", ":", "\n", "# \u538b\u7f29\u4e3atar.gz", "\n", "            ", "errcode", "=", "make_targz", "(", "save_path", "+", "\".tar.gz\"", ",", "save_path", ")", "\n", "if", "errcode", "==", "0", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.save_inference": [[470, 497], ["utils.util_helper.get_model_paths", "os.path.join", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "paddle.static.save_inference_model", "utils.util_helper.save_meta_data", "utils.util_helper.save_meta_data"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.get_model_paths", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.save_meta_data"], ["", "", "", "def", "save_inference", "(", "self", ",", "exe", ",", "feed_vars", ",", "target_vars", ",", "program", ",", "steps", ",", "data_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param exe:\n        :param feed_vars\n        :param target_vars\n        :param program:\n        :param steps:\n        :param data_dict:\n        :return:\n        \"\"\"", "\n", "path_dict", "=", "get_model_paths", "(", "self", ".", "save_checkpoints_path", ",", "self", ".", "save_inference_model_path", ",", "steps", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "path_dict", "[", "\"inference_model_path\"", "]", ",", "\"wenxin\"", ")", "\n", "# paddle.fluid.io.save_inference_model", "\n", "# paddle.static.save_inference_model", "\n", "paddle", ".", "static", ".", "save_inference_model", "(", "\n", "save_path", ",", "\n", "feed_vars", ",", "\n", "target_vars", ",", "\n", "exe", ",", "\n", "program", "=", "program", ",", "\n", "model_filename", "=", "\"model\"", ",", "\n", "params_filename", "=", "\"params\"", ")", "\n", "\n", "infer_meta_path", "=", "path_dict", "[", "\"inference_infer_meta_path\"", "]", "\n", "meta_path", "=", "path_dict", "[", "\"inference_meta_path\"", "]", "\n", "save_meta_data", "(", "data_dict", ",", "infer_meta_path", ")", "\n", "save_meta_data", "(", "self", ".", "meta_dict", ",", "meta_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.BaseStaticTrainer.load_model_meta_info": [[498, 519], ["static_trainer.parse_meta", "static_trainer.parse_meta", "logging.info", "os.path.dirname", "static_trainer.parse_meta"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.parse_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.parse_meta", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.parse_meta"], ["", "def", "load_model_meta_info", "(", "self", ",", "load_model", ")", ":", "\n", "        ", "\"\"\"\n        \u83b7\u53d6\u6a21\u578b\u7684meta\u4fe1\u606f\n        :param load_model:\n        :return:\n        \"\"\"", "\n", "meta_info", "=", "{", "}", "\n", "if", "load_model", "==", "\"net_model\"", ":", "\n", "            ", "if", "self", ".", "params", "[", "\"load_checkpoint\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_checkpoint\"", "]", "\n", "meta_info", "=", "parse_meta", "(", "original_path", ")", "\n", "", "elif", "self", ".", "params", "[", "\"load_parameters\"", "]", ":", "\n", "                ", "original_path", "=", "self", ".", "params", "[", "\"load_parameters\"", "]", "\n", "meta_info", "=", "parse_meta", "(", "original_path", ")", "\n", "", "", "elif", "load_model", "==", "\"pre_train_model\"", ":", "\n", "            ", "for", "pre_train_model", "in", "self", ".", "params", "[", "\"pre_train_model\"", "]", ":", "\n", "                ", "logging", ".", "info", "(", "\"pre_train_model's name = %s\"", "%", "pre_train_model", "[", "\"name\"", "]", ")", "\n", "params_path", "=", "os", ".", "path", ".", "dirname", "(", "pre_train_model", "[", "\"params_path\"", "]", ")", "\n", "# original_path = params_path = os.path.dirname(pre_train_model[\"params_path\"])", "\n", "meta_info", "=", "parse_meta", "(", "params_path", ")", "\n", "", "", "return", "meta_info", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.get_infer_data_meta": [[521, 538], ["fields_dict.items", "v1.items", "infer_dict[].append"], "function", ["None"], ["", "", "def", "get_infer_data_meta", "(", "target_feed_list", ",", "fields_dict", ")", ":", "\n", "    ", "\"\"\"\n    :param target_feed_list:\n    :param fields_dict:\n    :return:\n    \"\"\"", "\n", "infer_dict", "=", "{", "\"fields\"", ":", "[", "]", "}", "\n", "for", "name", "in", "target_feed_list", ":", "\n", "        ", "for", "k1", ",", "v1", "in", "fields_dict", ".", "items", "(", ")", ":", "# dict_keys(['text_a', 'label'])", "\n", "            ", "for", "k2", ",", "v2", "in", "v1", ".", "items", "(", ")", ":", "\n", "                ", "if", "v2", ":", "\n", "                    ", "for", "k3", "in", "v2", ":", "\n", "# logging.info(k3)", "\n", "                        ", "if", "v2", "[", "k3", "]", "and", "v2", "[", "k3", "]", ".", "name", "==", "name", ":", "\n", "                            ", "field_ele", "=", "\"%s#%s\"", "%", "(", "k1", ",", "k3", ")", "\n", "infer_dict", "[", "\"fields\"", "]", ".", "append", "(", "field_ele", ")", "\n", "", "", "", "", "", "", "return", "infer_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.parse_meta": [[540, 559], ["os.listdir", "file.endswith", "open", "open.read", "json.loads", "logging.error", "os.path.join"], "function", ["None"], ["", "def", "parse_meta", "(", "model_dir", ")", ":", "\n", "    ", "\"\"\"\n    :param model_dir:\n    :return: meta_dict\n    \"\"\"", "\n", "json_path", "=", "None", "\n", "meta_dict", "=", "{", "}", "\n", "for", "file", "in", "os", ".", "listdir", "(", "model_dir", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\".meta\"", ")", ":", "\n", "            ", "json_path", "=", "file", "\n", "break", "\n", "", "", "try", ":", "\n", "        ", "if", "json_path", ":", "\n", "            ", "json_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "json_path", ")", ",", "'r'", ")", "\n", "model_info", "=", "json_file", ".", "read", "(", ")", "\n", "meta_dict", "=", "json", ".", "loads", "(", "model_info", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "logging", ".", "error", "(", "\"error in parser model.meta.....\"", ")", "\n", "", "return", "meta_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.init_checkpoint": [[561, 580], ["os.path.exists", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "logging.info", "os.path.exists", "paddle.fluid.io.is_persistable", "paddle.fluid.io.is_persistable", "paddle.fluid.io.is_persistable", "paddle.fluid.io.is_persistable", "os.path.join"], "function", ["None"], ["", "def", "init_checkpoint", "(", "exe", ",", "init_checkpoint_path", ",", "main_program", ")", ":", "\n", "    ", "\"\"\"\u52a0\u8f7dcheckpoints\u6587\u4ef6\n    :param exe:\n    :param init_checkpoint_path:\n    :param main_program:\n    :return:\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "init_checkpoint_path", ")", ",", "\"[%s] cann't be found.\"", "%", "init_checkpoint_path", "\n", "\n", "def", "existed_persitables", "(", "var", ")", ":", "\n", "        ", "\"\"\"\n        existed_presitables\n        \"\"\"", "\n", "if", "not", "paddle", ".", "fluid", ".", "io", ".", "is_persistable", "(", "var", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "init_checkpoint_path", ",", "var", ".", "name", ")", ")", "\n", "\n", "", "paddle", ".", "fluid", ".", "io", ".", "load_vars", "(", "exe", ",", "init_checkpoint_path", ",", "main_program", "=", "main_program", ",", "predicate", "=", "existed_persitables", ")", "\n", "logging", ".", "info", "(", "\"Load model from {}\"", ".", "format", "(", "init_checkpoint_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.controller.static_trainer.init_pretraining_params": [[582, 600], ["os.path.exists", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "paddle.fluid.io.load_vars", "os.path.exists", "isinstance", "os.path.join"], "function", ["None"], ["", "def", "init_pretraining_params", "(", "exe", ",", "pretraining_params_path", ",", "main_program", ")", ":", "\n", "    ", "\"\"\"\n    :param exe:\n    :param pretraining_params_path:\n    :param main_program:\n    :return:\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "exists", "(", "pretraining_params_path", ")", ",", "\"[%s] cann't be found.\"", "%", "pretraining_params_path", "\n", "\n", "def", "existed_params", "(", "var", ")", ":", "\n", "        ", "\"\"\"\n        existed_params\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "var", ",", "paddle", ".", "fluid", ".", "framework", ".", "Parameter", ")", ":", "\n", "            ", "return", "False", "\n", "", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "pretraining_params_path", ",", "var", ".", "name", ")", ")", "\n", "\n", "", "paddle", ".", "fluid", ".", "io", ".", "load_vars", "(", "exe", ",", "pretraining_params_path", ",", "main_program", "=", "main_program", ",", "predicate", "=", "existed_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.BoWEncoder.__init__": [[12, 17], ["paddle.Layer.__init__", "paddle.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "emb_dim", ")", ":", "\n", "        ", "\"\"\"emb_dim\n        \"\"\"", "\n", "nn", ".", "Layer", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_emb_dim", "=", "emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.BoWEncoder.get_input_dim": [[18, 22], ["None"], "methods", ["None"], ["", "def", "get_input_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"input_dim\n        \"\"\"", "\n", "return", "self", ".", "_emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.BoWEncoder.get_output_dim": [[23, 27], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"output_dim\n        \"\"\"", "\n", "return", "self", ".", "_emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.BoWEncoder.forward": [[28, 34], ["paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"inputs\n        \"\"\"", "\n", "# Shape: (batch_size, embedding_dim)", "\n", "summed", "=", "paddle", ".", "sum", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "return", "summed", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.CNNEncoder.__init__": [[39, 70], ["paddle.Tanh", "paddle.Tanh", "paddle.Layer.__init__", "paddle.Layer.__init__", "paddle.LayerList", "paddle.LayerList", "len", "paddle.Linear", "paddle.Linear", "paddle.Conv2D", "paddle.Conv2D"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "\n", "emb_dim", ",", "\n", "num_filter", ",", "\n", "ngram_filter_sizes", "=", "(", "2", ",", "3", ",", "4", ",", "5", ")", ",", "\n", "conv_layer_activation", "=", "nn", ".", "Tanh", "(", ")", ",", "\n", "output_dim", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "nn", ".", "Layer", ".", "__init__", "(", "self", ")", "\n", "\n", "self", ".", "_emb_dim", "=", "emb_dim", "\n", "self", ".", "_num_filter", "=", "num_filter", "\n", "self", ".", "_ngram_filter_sizes", "=", "ngram_filter_sizes", "\n", "self", ".", "_activation", "=", "conv_layer_activation", "\n", "self", ".", "_output_dim", "=", "output_dim", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "LayerList", "(", "[", "\n", "nn", ".", "Conv2D", "(", "\n", "in_channels", "=", "1", ",", "\n", "out_channels", "=", "self", ".", "_num_filter", ",", "\n", "kernel_size", "=", "(", "i", ",", "self", ".", "_emb_dim", ")", ",", "\n", "**", "kwargs", ")", "for", "i", "in", "self", ".", "_ngram_filter_sizes", "\n", "]", ")", "\n", "\n", "maxpool_output_dim", "=", "self", ".", "_num_filter", "*", "len", "(", "self", ".", "_ngram_filter_sizes", ")", "\n", "if", "self", ".", "_output_dim", ":", "\n", "            ", "self", ".", "projection_layer", "=", "nn", ".", "Linear", "(", "maxpool_output_dim", ",", "self", ".", "_output_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "projection_layer", "=", "None", "\n", "self", ".", "_output_dim", "=", "maxpool_output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.CNNEncoder.forward": [[71, 91], ["inputs.unsqueeze.unsqueeze.unsqueeze", "paddle.concat", "paddle.concat", "paddle.concat", "paddle.concat", "encoder.CNNEncoder._activation().squeeze", "paddle.functional.adaptive_max_pool1d().squeeze", "paddle.functional.adaptive_max_pool1d().squeeze", "encoder.CNNEncoder.projection_layer", "encoder.CNNEncoder._activation", "paddle.functional.adaptive_max_pool1d", "paddle.functional.adaptive_max_pool1d", "conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"inputs\n        \"\"\"", "\n", "# Shape: (batch_size, 1, num_tokens, emb_dim) = (N, C, H, W)", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# If output_dim is None, result shape of (batch_size, len(ngram_filter_sizes) * num_filter));", "\n", "# else, result shape of (batch_size, output_dim).", "\n", "convs_out", "=", "[", "\n", "self", ".", "_activation", "(", "conv", "(", "inputs", ")", ")", ".", "squeeze", "(", "3", ")", "for", "conv", "in", "self", ".", "convs", "\n", "]", "\n", "maxpool_out", "=", "[", "\n", "nn", ".", "functional", ".", "adaptive_max_pool1d", "(", "t", ",", "output_size", "=", "1", ")", ".", "squeeze", "(", "2", ")", "for", "t", "in", "convs_out", "\n", "]", "\n", "result", "=", "paddle", ".", "concat", "(", "maxpool_out", ",", "axis", "=", "1", ")", "\n", "\n", "if", "self", ".", "projection_layer", "is", "not", "None", ":", "\n", "            ", "result", "=", "self", ".", "projection_layer", "(", "result", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.CNNEncoder.get_input_dim": [[92, 96], ["None"], "methods", ["None"], ["", "def", "get_input_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"input_dim\n        \"\"\"", "\n", "return", "self", ".", "_emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.CNNEncoder.get_output_dim": [[97, 101], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"output_dim\n        \"\"\"", "\n", "return", "self", ".", "_output_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.LSTMEncoder.__init__": [[106, 129], ["paddle.Layer.__init__", "paddle.Layer.__init__", "paddle.LSTM", "paddle.LSTM"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ",", "\n", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "direction", "=", "\"forward\"", ",", "\n", "dropout", "=", "0.0", ",", "\n", "pooling_type", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "nn", ".", "Layer", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_input_size", "=", "input_size", "\n", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "self", ".", "_direction", "=", "direction", "\n", "self", ".", "_pooling_type", "=", "pooling_type", "\n", "\n", "self", ".", "lstm_layer", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "direction", "=", "direction", ",", "\n", "dropout", "=", "dropout", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.LSTMEncoder.get_input_dim": [[130, 134], ["None"], "methods", ["None"], ["", "def", "get_input_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"input_dim\n        \"\"\"", "\n", "return", "self", ".", "_input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.LSTMEncoder.get_output_dim": [[135, 142], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"output_dim\n        \"\"\"", "\n", "if", "self", ".", "_direction", "==", "\"bidirect\"", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "*", "2", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.LSTMEncoder.forward": [[143, 173], ["encoder.LSTMEncoder.lstm_layer", "paddle.concat", "paddle.concat", "paddle.concat", "paddle.concat", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.max", "paddle.max", "paddle.max", "paddle.max", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "RuntimeError"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "sequence_length", ")", ":", "\n", "        ", "\"\"\"\n        :params inputs\n        :params sequence_length\n        \"\"\"", "\n", "encoded_text", ",", "(", "last_hidden", ",", "last_cell", ")", "=", "self", ".", "lstm_layer", "(", "inputs", ",", "sequence_length", "=", "sequence_length", ")", "\n", "if", "not", "self", ".", "_pooling_type", ":", "\n", "# We exploit the `last_hidden` (the hidden state at the last time step for every layer)", "\n", "# to create a single vector.", "\n", "# If lstm is not bidirection, then output is the hidden state of the last time step", "\n", "# at last layer. Output is shape of `(batch_size, hidden_size)`.", "\n", "# If lstm is bidirection, then output is concatenation of the forward and backward hidden state", "\n", "# of the last time step at last layer. Output is shape of `(batch_size, hidden_size * 2)`.", "\n", "            ", "if", "self", ".", "_direction", "!=", "'bidirect'", ":", "\n", "                ", "output", "=", "last_hidden", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "output", "=", "paddle", ".", "concat", "(", "(", "last_hidden", "[", "-", "2", ",", ":", ",", ":", "]", ",", "last_hidden", "[", "-", "1", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "_pooling_type", "==", "'sum'", ":", "\n", "                ", "output", "=", "paddle", ".", "sum", "(", "encoded_text", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "_pooling_type", "==", "'max'", ":", "\n", "                ", "output", "=", "paddle", ".", "max", "(", "encoded_text", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "_pooling_type", "==", "'mean'", ":", "\n", "                ", "output", "=", "paddle", ".", "mean", "(", "encoded_text", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Unexpected pooling type %s .\"", "\n", "\"Pooling type must be one of sum, max and mean.\"", "%", "\n", "self", ".", "_pooling_type", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.GRUEncoder.__init__": [[178, 200], ["paddle.Layer.__init__", "paddle.Layer.__init__", "paddle.GRU", "paddle.GRU"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_size", ",", "\n", "hidden_size", ",", "\n", "num_layers", "=", "1", ",", "\n", "direction", "=", "\"forward\"", ",", "\n", "dropout", "=", "0.0", ",", "\n", "pooling_type", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "nn", ".", "Layer", ".", "__init__", "(", "self", ")", "\n", "self", ".", "_input_size", "=", "input_size", "\n", "self", ".", "_hidden_size", "=", "hidden_size", "\n", "self", ".", "_direction", "=", "direction", "\n", "self", ".", "_pooling_type", "=", "pooling_type", "\n", "\n", "self", ".", "gru_layer", "=", "nn", ".", "GRU", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "direction", "=", "direction", ",", "\n", "dropout", "=", "dropout", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.GRUEncoder.get_input_dim": [[201, 205], ["None"], "methods", ["None"], ["", "def", "get_input_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"input_dim\n        \"\"\"", "\n", "return", "self", ".", "_input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.GRUEncoder.get_output_dim": [[206, 213], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"output_dim\n        \"\"\"", "\n", "if", "self", ".", "_direction", "==", "\"bidirect\"", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "*", "2", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_hidden_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.encoder.GRUEncoder.forward": [[214, 243], ["encoder.GRUEncoder.gru_layer", "paddle.concat", "paddle.concat", "paddle.concat", "paddle.concat", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.sum", "paddle.max", "paddle.max", "paddle.max", "paddle.max", "paddle.mean", "paddle.mean", "paddle.mean", "paddle.mean", "RuntimeError"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "sequence_length", ")", ":", "\n", "        ", "\"\"\"\n        :params inputs\n        :params sequence_length\n        \"\"\"", "\n", "encoded_text", ",", "last_hidden", "=", "self", ".", "gru_layer", "(", "inputs", ",", "sequence_length", "=", "sequence_length", ")", "\n", "if", "not", "self", ".", "_pooling_type", ":", "\n", "            ", "if", "self", ".", "_direction", "!=", "'bidirect'", ":", "\n", "                ", "output", "=", "last_hidden", "[", "-", "1", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "output", "=", "paddle", ".", "concat", "(", "\n", "(", "last_hidden", "[", "-", "2", ",", ":", ",", ":", "]", ",", "last_hidden", "[", "-", "1", ",", ":", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "# We exploit the `encoded_text` (the hidden state at the every time step for last layer)", "\n", "# to create a single vector. We perform pooling on the encoded text.", "\n", "# The output shape is `(batch_size, hidden_size * 2)` if use bidirectional GRU,", "\n", "# otherwise the output shape is `(batch_size, hidden_size * 2)`.", "\n", "            ", "if", "self", ".", "_pooling_type", "==", "'sum'", ":", "\n", "                ", "output", "=", "paddle", ".", "sum", "(", "encoded_text", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "_pooling_type", "==", "'max'", ":", "\n", "                ", "output", "=", "paddle", ".", "max", "(", "encoded_text", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "_pooling_type", "==", "'mean'", ":", "\n", "                ", "output", "=", "paddle", ".", "mean", "(", "encoded_text", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Unexpected pooling type %s .\"", "\n", "\"Pooling type must be one of sum, max and mean.\"", "%", "\n", "self", ".", "_pooling_type", ")", "\n", "", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieModel.__init__": [[21, 81], ["paddle.nn.Layer.__init__", "cfg.get", "cfg.has", "cfg.get", "paddle.nn.initializer.TruncatedNormal", "ernie._build_ln", "paddle.nn.Embedding", "paddle.nn.Embedding", "cfg.get", "cfg.get", "paddle.nn.Dropout", "ernie.ErnieEncoderStack", "cfg.get", "ernie.ErnieModel.train", "cfg.get", "paddle.nn.Embedding", "cfg.get", "logging.info", "paddle.nn.Embedding", "ernie.append_name", "ernie._build_linear", "ernie.append_name", "paddle.ParamAttr", "paddle.ParamAttr", "ernie.append_name", "paddle.ParamAttr", "paddle.ParamAttr", "ernie.append_name", "ernie.append_name", "ernie.append_name", "ernie.append_name"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.has", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_ln", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieModel.train", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_linear", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name"], ["def", "__init__", "(", "self", ",", "cfg", ",", "name", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Fundamental pretrained Ernie model\n        \"\"\"", "\n", "nn", ".", "Layer", ".", "__init__", "(", "self", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "d_model", "=", "cfg", "[", "'hidden_size'", "]", "\n", "d_emb", "=", "cfg", ".", "get", "(", "'emb_size'", ",", "cfg", "[", "'hidden_size'", "]", ")", "\n", "d_vocab", "=", "cfg", "[", "'vocab_size'", "]", "\n", "d_pos", "=", "cfg", "[", "'max_position_embeddings'", "]", "\n", "#         d_sent = cfg.get(\"sent_type_vocab_size\", 4) or cfg.get('type_vocab_size', 4)", "\n", "if", "cfg", ".", "has", "(", "'sent_type_vocab_size'", ")", ":", "\n", "            ", "d_sent", "=", "cfg", "[", "'sent_type_vocab_size'", "]", "\n", "", "else", ":", "\n", "            ", "d_sent", "=", "cfg", ".", "get", "(", "'type_vocab_size'", ",", "2", ")", "\n", "\n", "", "self", ".", "n_head", "=", "cfg", "[", "'num_attention_heads'", "]", "\n", "self", ".", "return_additional_info", "=", "cfg", ".", "get", "(", "'return_additional_info'", ",", "False", ")", "\n", "self", ".", "initializer", "=", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "cfg", "[", "'initializer_range'", "]", ")", "\n", "\n", "self", ".", "ln", "=", "_build_ln", "(", "d_model", ",", "name", "=", "append_name", "(", "name", ",", "'pre_encoder'", ")", ")", "\n", "self", ".", "word_emb", "=", "nn", ".", "Embedding", "(", "\n", "d_vocab", ",", "\n", "d_emb", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "append_name", "(", "name", ",", "'word_embedding'", ")", ",", "initializer", "=", "self", ".", "initializer", ")", ")", "\n", "self", ".", "pos_emb", "=", "nn", ".", "Embedding", "(", "\n", "d_pos", ",", "\n", "d_emb", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "append_name", "(", "name", ",", "'pos_embedding'", ")", ",", "initializer", "=", "self", ".", "initializer", ")", ")", "\n", "#         self.sent_emb = nn.Embedding(", "\n", "#             d_sent,", "\n", "#             d_emb,", "\n", "#             weight_attr=paddle.ParamAttr(name=append_name(name, 'sent_embedding'), initializer=self.initializer))", "\n", "self", ".", "_use_sent_id", "=", "cfg", ".", "get", "(", "'use_sent_id'", ",", "True", ")", "\n", "if", "self", ".", "_use_sent_id", ":", "\n", "            ", "self", ".", "sent_emb", "=", "nn", ".", "Embedding", "(", "\n", "d_sent", ",", "\n", "d_emb", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "append_name", "(", "name", ",", "'sent_embedding'", ")", ",", "initializer", "=", "self", ".", "initializer", ")", ")", "\n", "", "self", ".", "_use_task_id", "=", "cfg", ".", "get", "(", "'use_task_id'", ",", "False", ")", "\n", "if", "self", ".", "_use_task_id", ":", "\n", "            ", "self", ".", "_task_types", "=", "cfg", ".", "get", "(", "'task_type_vocab_size'", ",", "3", ")", "\n", "logging", ".", "info", "(", "'using task_id, #task_types:{}'", ".", "format", "(", "self", ".", "_task_types", ")", ")", "\n", "self", ".", "task_emb", "=", "nn", ".", "Embedding", "(", "\n", "self", ".", "_task_types", ",", "\n", "d_emb", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "name", "=", "append_name", "(", "name", ",", "'task_embedding'", ")", ",", "initializer", "=", "self", ".", "initializer", ")", ")", "\n", "\n", "", "prob", "=", "cfg", "[", "'hidden_dropout_prob'", "]", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "prob", ")", "\n", "\n", "self", ".", "encoder_stack", "=", "ErnieEncoderStack", "(", "cfg", ",", "append_name", "(", "name", ",", "'encoder'", ")", ")", "\n", "\n", "if", "cfg", ".", "get", "(", "'has_pooler'", ",", "True", ")", ":", "\n", "            ", "self", ".", "pooler", "=", "_build_linear", "(", "cfg", "[", "'hidden_size'", "]", ",", "cfg", "[", "'hidden_size'", "]", ",", "append_name", "(", "name", ",", "'pooled_fc'", ")", ",", "\n", "self", ".", "initializer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pooler", "=", "None", "\n", "\n", "", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieModel.eval": [[83, 91], ["paddle.in_dynamic_mode", "ernie.ErnieModel.sublayers", "super().eval"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "\"\"\" eval \"\"\"", "\n", "if", "paddle", ".", "in_dynamic_mode", "(", ")", ":", "\n", "            ", "super", "(", "ErnieModel", ",", "self", ")", ".", "eval", "(", ")", "\n", "", "self", ".", "training", "=", "False", "\n", "for", "l", "in", "self", ".", "sublayers", "(", ")", ":", "\n", "            ", "l", ".", "training", "=", "False", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieModel.train": [[92, 100], ["paddle.in_dynamic_mode", "ernie.ErnieModel.sublayers", "super().train"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieModel.train"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\" train \"\"\"", "\n", "if", "paddle", ".", "in_dynamic_mode", "(", ")", ":", "\n", "            ", "super", "(", "ErnieModel", ",", "self", ")", ".", "train", "(", ")", "\n", "", "self", ".", "training", "=", "True", "\n", "for", "l", "in", "self", ".", "sublayers", "(", ")", ":", "\n", "            ", "l", ".", "training", "=", "True", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieModel.forward": [[101, 192], ["paddle.cast.matmul.unsqueeze().tile", "ernie.ErnieModel.word_emb", "ernie.ErnieModel.pos_emb", "ernie.ErnieModel.dropout", "ernie.ErnieModel.encoder_stack", "len", "repr", "paddle.shape", "paddle.arange().reshape().cast", "paddle.cast.unsqueeze", "paddle.cast.matmul", "paddle.zeros_like", "ernie.ErnieModel.sent_emb", "ernie.ErnieModel.task_emb", "ernie.ErnieModel.ln", "paddle.nn.functional.tanh", "paddle.cast", "len", "paddle.reshape", "len", "paddle.cast.matmul.unsqueeze", "ernie.ErnieModel.pooler", "paddle.arange().reshape", "paddle.arange", "paddle.arange", "paddle.reshape.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "src_ids", ",", "\n", "sent_ids", "=", "None", ",", "\n", "pos_ids", "=", "None", ",", "\n", "input_mask", "=", "None", ",", "\n", "task_ids", "=", "None", ",", "\n", "attn_bias", "=", "None", ",", "\n", "past_cache", "=", "None", ",", "\n", "use_causal_mask", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_ids (`Variable` of shape `[batch_size, seq_len]`):\n                Indices of input sequence tokens in the vocabulary.\n            sent_ids (optional, `Variable` of shape `[batch_size, seq_len]`):\n                aka token_type_ids, Segment token indices to indicate first and second portions of the inputs.\n                if None, assume all tokens come from `segment_a`\n            pos_ids(optional, `Variable` of shape `[batch_size, seq_len]`):\n                Indices of positions of each input sequence tokens in the position embeddings.\n            input_mask(optional `Variable` of shape `[batch_size, seq_len]`):\n                Mask to avoid performing attention on the padding token indices of the encoder input.\n            task_ids(optional `Variable` of shape `[batch_size, seq_len]`):\n                task type for pre_train task type\n            attn_bias(optional, `Variable` of shape `[batch_size, seq_len, seq_len] or False`):\n                3D version of `input_mask`, if set, overrides `input_mask`; if set not False, will not apply attention mask\n            past_cache(optional, tuple of two lists: cached key and cached value,\n                each is a list of `Variable`s of shape `[batch_size, seq_len, hidden_size]`):\n                cached key/value tensor that will be concated to generated key/value when performing self attention.\n                if set, `attn_bias` should not be None.\n\n        Returns:\n            pooled (`Variable` of shape `[batch_size, hidden_size]`):\n                output logits of pooler classifier\n            encoded(`Variable` of shape `[batch_size, seq_len, hidden_size]`):\n                output logits of transformer stack\n            info (Dictionary):\n                addtional middle level info, inclues: all hidden stats, k/v caches.\n        \"\"\"", "\n", "assert", "len", "(", "src_ids", ".", "shape", ")", "==", "2", ",", "'expect src_ids.shape = [batch, sequecen], got %s'", "%", "(", "repr", "(", "src_ids", ".", "shape", ")", ")", "\n", "assert", "attn_bias", "is", "not", "None", "if", "past_cache", "else", "True", ",", "'if `past_cache` specified; attn_bias must not be None'", "\n", "d_seqlen", "=", "paddle", ".", "shape", "(", "src_ids", ")", "[", "1", "]", "\n", "if", "pos_ids", "is", "None", ":", "\n", "            ", "pos_ids", "=", "paddle", ".", "arange", "(", "0", ",", "d_seqlen", ",", "1", ",", "dtype", "=", "'int32'", ")", ".", "reshape", "(", "[", "1", ",", "-", "1", "]", ")", ".", "cast", "(", "'int64'", ")", "\n", "\n", "", "if", "attn_bias", "is", "None", ":", "\n", "            ", "if", "input_mask", "is", "None", ":", "\n", "                ", "input_mask", "=", "paddle", ".", "cast", "(", "src_ids", "!=", "0", ",", "'float32'", ")", "\n", "", "assert", "len", "(", "input_mask", ".", "shape", ")", "==", "2", "\n", "input_mask", "=", "input_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "attn_bias", "=", "input_mask", ".", "matmul", "(", "input_mask", ",", "transpose_y", "=", "True", ")", "\n", "if", "use_causal_mask", ":", "\n", "                ", "sequence", "=", "paddle", ".", "reshape", "(", "paddle", ".", "arange", "(", "0", ",", "d_seqlen", ",", "1", ",", "dtype", "=", "'float32'", ")", "+", "1.", ",", "[", "1", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "causal_mask", "=", "(", "sequence", ".", "matmul", "(", "1.", "/", "sequence", ",", "transpose_y", "=", "True", ")", ">=", "1.", ")", ".", "cast", "(", "'float32'", ")", "\n", "attn_bias", "*=", "causal_mask", "\n", "", "", "else", ":", "\n", "            ", "assert", "len", "(", "attn_bias", ".", "shape", ")", "==", "3", ",", "'expect attn_bias tobe rank 3, got %r'", "%", "attn_bias", ".", "shape", "\n", "\n", "", "attn_bias", "=", "(", "1.", "-", "attn_bias", ")", "*", "-", "10000.0", "\n", "attn_bias", "=", "attn_bias", ".", "unsqueeze", "(", "1", ")", ".", "tile", "(", "[", "1", ",", "self", ".", "n_head", ",", "1", ",", "1", "]", ")", "# avoid broadcast =_=", "\n", "\n", "if", "sent_ids", "is", "None", ":", "\n", "            ", "sent_ids", "=", "paddle", ".", "zeros_like", "(", "src_ids", ")", "\n", "\n", "", "src_embedded", "=", "self", ".", "word_emb", "(", "src_ids", ")", "\n", "pos_embedded", "=", "self", ".", "pos_emb", "(", "pos_ids", ")", "\n", "#         sent_embedded = self.sent_emb(sent_ids)", "\n", "#         embedded = src_embedded + pos_embedded + sent_embedded", "\n", "embedded", "=", "src_embedded", "+", "pos_embedded", "\n", "if", "self", ".", "_use_sent_id", ":", "\n", "            ", "sent_embedded", "=", "self", ".", "sent_emb", "(", "sent_ids", ")", "\n", "embedded", "=", "embedded", "+", "sent_embedded", "\n", "", "if", "self", ".", "_use_task_id", ":", "\n", "            ", "task_embeded", "=", "self", ".", "task_emb", "(", "task_ids", ")", "\n", "embedded", "=", "embedded", "+", "task_embeded", "\n", "\n", "", "embedded", "=", "self", ".", "dropout", "(", "self", ".", "ln", "(", "embedded", ")", ")", "\n", "\n", "encoded", ",", "hidden_list", ",", "cache_list", "=", "self", ".", "encoder_stack", "(", "embedded", ",", "attn_bias", ",", "past_cache", "=", "past_cache", ")", "\n", "\n", "if", "self", ".", "pooler", "is", "not", "None", ":", "\n", "            ", "pooled", "=", "F", ".", "tanh", "(", "self", ".", "pooler", "(", "encoded", "[", ":", ",", "0", ",", ":", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "pooled", "=", "None", "\n", "\n", "", "additional_info", "=", "{", "\n", "'hiddens'", ":", "hidden_list", ",", "\n", "'caches'", ":", "cache_list", ",", "\n", "}", "\n", "\n", "if", "self", ".", "return_additional_info", ":", "\n", "            ", "return", "pooled", ",", "encoded", ",", "additional_info", "\n", "", "return", "pooled", ",", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieEncoderStack.__init__": [[197, 203], ["paddle.nn.Layer.__init__", "paddle.nn.LayerList", "ernie.ErnieBlock", "ernie.append_name", "range"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name"], ["def", "__init__", "(", "self", ",", "cfg", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", "ErnieEncoderStack", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_layers", "=", "cfg", "[", "'num_hidden_layers'", "]", "\n", "self", ".", "block", "=", "nn", ".", "LayerList", "(", "[", "\n", "ErnieBlock", "(", "cfg", ",", "append_name", "(", "name", ",", "'layer_%d'", "%", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "n_layers", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieEncoderStack.forward": [[205, 224], ["zip", "isinstance", "list", "b", "cache_list_k.append", "cache_list_v.append", "hidden_list.append", "repr", "zip", "len", "type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "attn_bias", "=", "None", ",", "past_cache", "=", "None", ")", ":", "\n", "        ", "\"\"\" forward function \"\"\"", "\n", "if", "past_cache", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "\n", "past_cache", ",", "tuple", "\n", ")", ",", "'unknown type of `past_cache`, expect tuple or list. got %s'", "%", "repr", "(", "type", "(", "past_cache", ")", ")", "\n", "past_cache", "=", "list", "(", "zip", "(", "*", "past_cache", ")", ")", "\n", "", "else", ":", "\n", "            ", "past_cache", "=", "[", "None", "]", "*", "len", "(", "self", ".", "block", ")", "\n", "", "cache_list_k", ",", "cache_list_v", ",", "hidden_list", "=", "[", "]", ",", "[", "]", ",", "[", "inputs", "]", "\n", "\n", "for", "b", ",", "p", "in", "zip", "(", "self", ".", "block", ",", "past_cache", ")", ":", "\n", "            ", "inputs", ",", "cache", "=", "b", "(", "inputs", ",", "attn_bias", "=", "attn_bias", ",", "past_cache", "=", "p", ")", "\n", "cache_k", ",", "cache_v", "=", "cache", "\n", "cache_list_k", ".", "append", "(", "cache_k", ")", "\n", "cache_list_v", ".", "append", "(", "cache_v", ")", "\n", "hidden_list", ".", "append", "(", "inputs", ")", "\n", "\n", "", "return", "inputs", ",", "hidden_list", ",", "(", "cache_list_k", ",", "cache_list_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieBlock.__init__": [[229, 238], ["paddle.nn.Layer.__init__", "ernie.AttentionLayer", "ernie._build_ln", "ernie.PositionWiseFeedForwardLayer", "ernie._build_ln", "cfg.get", "paddle.nn.Dropout", "ernie.append_name", "ernie.append_name", "ernie.append_name", "ernie.append_name"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_ln", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_ln", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name"], ["def", "__init__", "(", "self", ",", "cfg", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", "ErnieBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "d_model", "=", "cfg", "[", "'hidden_size'", "]", "\n", "self", ".", "attn", "=", "AttentionLayer", "(", "cfg", ",", "name", "=", "append_name", "(", "name", ",", "'multi_head_att'", ")", ")", "\n", "self", ".", "ln1", "=", "_build_ln", "(", "d_model", ",", "name", "=", "append_name", "(", "name", ",", "'post_att'", ")", ")", "\n", "self", ".", "ffn", "=", "PositionWiseFeedForwardLayer", "(", "cfg", ",", "name", "=", "append_name", "(", "name", ",", "'ffn'", ")", ")", "\n", "self", ".", "ln2", "=", "_build_ln", "(", "d_model", ",", "name", "=", "append_name", "(", "name", ",", "'post_ffn'", ")", ")", "\n", "prob", "=", "cfg", ".", "get", "(", "'intermediate_dropout_prob'", ",", "cfg", "[", "'hidden_dropout_prob'", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.ErnieBlock.forward": [[239, 251], ["ernie.ErnieBlock.attn", "ernie.ErnieBlock.dropout", "ernie.ErnieBlock.ln1", "ernie.ErnieBlock.ffn", "ernie.ErnieBlock.dropout", "ernie.ErnieBlock.ln2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "attn_bias", "=", "None", ",", "past_cache", "=", "None", ")", ":", "\n", "        ", "\"\"\" forward \"\"\"", "\n", "attn_out", ",", "cache", "=", "self", ".", "attn", "(", "inputs", ",", "inputs", ",", "inputs", ",", "attn_bias", ",", "past_cache", "=", "past_cache", ")", "# self attention", "\n", "attn_out", "=", "self", ".", "dropout", "(", "attn_out", ")", "\n", "hidden", "=", "attn_out", "+", "inputs", "\n", "hidden", "=", "self", ".", "ln1", "(", "hidden", ")", "# dropout/ add/ norm", "\n", "\n", "ffn_out", "=", "self", ".", "ffn", "(", "hidden", ")", "\n", "ffn_out", "=", "self", ".", "dropout", "(", "ffn_out", ")", "\n", "hidden", "=", "ffn_out", "+", "hidden", "\n", "hidden", "=", "self", ".", "ln2", "(", "hidden", ")", "\n", "return", "hidden", ",", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.AttentionLayer.__init__": [[256, 273], ["paddle.nn.Layer.__init__", "paddle.nn.initializer.TruncatedNormal", "ernie._build_linear", "ernie._build_linear", "ernie._build_linear", "ernie._build_linear", "paddle.nn.Dropout", "cfg.get", "cfg.get", "ernie.append_name", "ernie.append_name", "ernie.append_name", "ernie.append_name"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_linear", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_linear", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_linear", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_linear", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name"], ["def", "__init__", "(", "self", ",", "cfg", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", "AttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "initializer", "=", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "cfg", "[", "'initializer_range'", "]", ")", "\n", "d_model", "=", "cfg", "[", "'hidden_size'", "]", "\n", "n_head", "=", "cfg", "[", "'num_attention_heads'", "]", "\n", "assert", "d_model", "%", "n_head", "==", "0", "\n", "d_model_q", "=", "cfg", ".", "get", "(", "'query_hidden_size_per_head'", ",", "d_model", "//", "n_head", ")", "*", "n_head", "\n", "d_model_v", "=", "cfg", ".", "get", "(", "'value_hidden_size_per_head'", ",", "d_model", "//", "n_head", ")", "*", "n_head", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_key", "=", "d_model_q", "//", "n_head", "\n", "\n", "self", ".", "q", "=", "_build_linear", "(", "d_model", ",", "d_model_q", ",", "append_name", "(", "name", ",", "'query_fc'", ")", ",", "initializer", ")", "\n", "self", ".", "k", "=", "_build_linear", "(", "d_model", ",", "d_model_q", ",", "append_name", "(", "name", ",", "'key_fc'", ")", ",", "initializer", ")", "\n", "self", ".", "v", "=", "_build_linear", "(", "d_model", ",", "d_model_v", ",", "append_name", "(", "name", ",", "'value_fc'", ")", ",", "initializer", ")", "\n", "self", ".", "o", "=", "_build_linear", "(", "d_model_v", ",", "d_model", ",", "append_name", "(", "name", ",", "'output_fc'", ")", ",", "initializer", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "cfg", "[", "'attention_probs_dropout_prob'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.AttentionLayer.forward": [[274, 310], ["ernie.AttentionLayer.q", "ernie.AttentionLayer.k", "ernie.AttentionLayer.v", "q.scale.scale.reshape().transpose", "paddle.concat.reshape().transpose", "paddle.concat.reshape().transpose", "q.scale.scale.scale", "q.scale.scale.matmul", "paddle.nn.functional.softmax", "ernie.AttentionLayer.dropout", "ernie.AttentionLayer.matmul().transpose", "ernie.AttentionLayer.reshape", "ernie.AttentionLayer.o", "len", "len", "len", "paddle.concat", "paddle.concat", "q.scale.scale.reshape", "paddle.concat.reshape", "paddle.concat.reshape", "ernie.AttentionLayer.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "queries", ",", "keys", ",", "values", ",", "attn_bias", ",", "past_cache", ")", ":", "\n", "        ", "\"\"\" layer forward function \"\"\"", "\n", "assert", "len", "(", "queries", ".", "shape", ")", "==", "len", "(", "keys", ".", "shape", ")", "==", "len", "(", "values", ".", "shape", ")", "==", "3", "\n", "# bsz, q_len, q_dim = queries.shape", "\n", "# bsz, k_len, k_dim = keys.shape", "\n", "# bsz, v_len, v_dim = values.shape", "\n", "# assert k_len == v_len", "\n", "\n", "q", "=", "self", ".", "q", "(", "queries", ")", "\n", "k", "=", "self", ".", "k", "(", "keys", ")", "\n", "v", "=", "self", ".", "v", "(", "values", ")", "\n", "\n", "cache", "=", "(", "k", ",", "v", ")", "\n", "if", "past_cache", "is", "not", "None", ":", "\n", "            ", "cached_k", ",", "cached_v", "=", "past_cache", "\n", "k", "=", "paddle", ".", "concat", "(", "[", "cached_k", ",", "k", "]", ",", "1", ")", "\n", "v", "=", "paddle", ".", "concat", "(", "[", "cached_v", ",", "v", "]", ",", "1", ")", "\n", "\n", "# [batch, head, seq, dim]", "\n", "", "q", "=", "q", ".", "reshape", "(", "[", "0", ",", "0", ",", "self", ".", "n_head", ",", "q", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "n_head", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "# [batch, head, seq, dim]", "\n", "k", "=", "k", ".", "reshape", "(", "[", "0", ",", "0", ",", "self", ".", "n_head", ",", "k", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "n_head", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "# [batch, head, seq, dim]", "\n", "v", "=", "v", ".", "reshape", "(", "[", "0", ",", "0", ",", "self", ".", "n_head", ",", "v", ".", "shape", "[", "-", "1", "]", "//", "self", ".", "n_head", "]", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "q", "=", "q", ".", "scale", "(", "self", ".", "d_key", "**", "-", "0.5", ")", "\n", "score", "=", "q", ".", "matmul", "(", "k", ",", "transpose_y", "=", "True", ")", "\n", "\n", "if", "attn_bias", "is", "not", "None", ":", "\n", "            ", "score", "+=", "attn_bias", "\n", "", "score", "=", "F", ".", "softmax", "(", "score", ")", "\n", "score", "=", "self", ".", "dropout", "(", "score", ")", "\n", "\n", "out", "=", "score", ".", "matmul", "(", "v", ")", ".", "transpose", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "out", "=", "out", ".", "reshape", "(", "[", "0", ",", "0", ",", "out", ".", "shape", "[", "2", "]", "*", "out", ".", "shape", "[", "3", "]", "]", ")", "\n", "out", "=", "self", ".", "o", "(", "out", ")", "\n", "return", "out", ",", "cache", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.PositionWiseFeedForwardLayer.__init__": [[315, 326], ["paddle.nn.Layer.__init__", "paddle.nn.initializer.TruncatedNormal", "cfg.get", "ernie._build_linear", "ernie._build_linear", "cfg.get", "paddle.nn.Dropout", "ernie.append_name", "ernie.append_name"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_linear", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_linear", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name"], ["def", "__init__", "(", "self", ",", "cfg", ",", "name", "=", "None", ")", ":", "\n", "        ", "super", "(", "PositionWiseFeedForwardLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "initializer", "=", "nn", ".", "initializer", ".", "TruncatedNormal", "(", "std", "=", "cfg", "[", "'initializer_range'", "]", ")", "\n", "d_model", "=", "cfg", "[", "'hidden_size'", "]", "\n", "d_ffn", "=", "cfg", ".", "get", "(", "'intermediate_size'", ",", "4", "*", "d_model", ")", "\n", "\n", "self", ".", "act", "=", "ACT_DICT", "[", "cfg", "[", "'hidden_act'", "]", "]", "(", ")", "\n", "self", ".", "i", "=", "_build_linear", "(", "d_model", ",", "d_ffn", ",", "append_name", "(", "name", ",", "'fc_0'", ")", ",", "initializer", ")", "\n", "self", ".", "o", "=", "_build_linear", "(", "d_ffn", ",", "d_model", ",", "append_name", "(", "name", ",", "'fc_1'", ")", ",", "initializer", ")", "\n", "prob", "=", "cfg", ".", "get", "(", "'intermediate_dropout_prob'", ",", "0.", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.PositionWiseFeedForwardLayer.forward": [[327, 333], ["ernie.PositionWiseFeedForwardLayer.act", "ernie.PositionWiseFeedForwardLayer.dropout", "ernie.PositionWiseFeedForwardLayer.o", "ernie.PositionWiseFeedForwardLayer.i"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" forward \"\"\"", "\n", "hidden", "=", "self", ".", "act", "(", "self", ".", "i", "(", "inputs", ")", ")", "\n", "hidden", "=", "self", ".", "dropout", "(", "hidden", ")", "\n", "out", "=", "self", ".", "o", "(", "hidden", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_linear": [[335, 345], ["paddle.nn.Linear", "paddle.ParamAttr"], "function", ["None"], ["", "", "def", "_build_linear", "(", "n_in", ",", "n_out", ",", "name", ",", "init", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "return", "nn", ".", "Linear", "(", "\n", "n_in", ",", "\n", "n_out", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "\n", "name", "=", "'%s.w_0'", "%", "name", "if", "name", "is", "not", "None", "else", "None", ",", "\n", "initializer", "=", "init", ")", ",", "\n", "bias_attr", "=", "'%s.b_0'", "%", "name", "if", "name", "is", "not", "None", "else", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie._build_ln": [[347, 358], ["paddle.nn.LayerNorm", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.nn.initializer.Constant", "paddle.nn.initializer.Constant"], "function", ["None"], ["", "def", "_build_ln", "(", "n_in", ",", "name", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "return", "nn", ".", "LayerNorm", "(", "\n", "normalized_shape", "=", "n_in", ",", "\n", "weight_attr", "=", "paddle", ".", "ParamAttr", "(", "\n", "name", "=", "'%s_layer_norm_scale'", "%", "name", "if", "name", "is", "not", "None", "else", "None", ",", "\n", "initializer", "=", "nn", ".", "initializer", ".", "Constant", "(", "1.", ")", ")", ",", "\n", "bias_attr", "=", "paddle", ".", "ParamAttr", "(", "\n", "name", "=", "'%s_layer_norm_bias'", "%", "name", "if", "name", "is", "not", "None", "else", "None", ",", "\n", "initializer", "=", "nn", ".", "initializer", ".", "Constant", "(", "0.", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie.append_name": [[360, 369], ["None"], "function", ["None"], ["", "def", "append_name", "(", "name", ",", "postfix", ")", ":", "\n", "    ", "\"\"\" append name with postfix \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "        ", "ret", "=", "None", "\n", "", "elif", "name", "==", "''", ":", "\n", "        ", "ret", "=", "postfix", "\n", "", "else", ":", "\n", "        ", "ret", "=", "'%s_%s'", "%", "(", "name", ",", "postfix", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.gelu": [[26, 39], ["paddle.layers.tanh", "numpy.sqrt", "paddle.layers.pow"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "  ", "\"\"\"Gaussian Error Linear Unit.\n\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1606.08415\n  Args:\n    x: float Tensor to perform activation.\n\n  Returns:\n    `x` with the GELU activation applied.\n  \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "fluid", ".", "layers", ".", "tanh", "(", "(", "np", ".", "sqrt", "(", "2.0", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "fluid", ".", "layers", ".", "pow", "(", "x", ",", "3.0", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.multi_head_attention": [[41, 207], ["transformer_encoder_gen.multi_head_attention.__compute_qkv"], "function", ["None"], ["", "def", "multi_head_attention", "(", "queries", ",", "\n", "keys", ",", "\n", "values", ",", "\n", "attn_bias", ",", "\n", "d_key", ",", "\n", "d_value", ",", "\n", "d_model", ",", "\n", "n_head", "=", "1", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "cache", "=", "None", ",", "\n", "gather_idx", "=", "None", ",", "\n", "remove_mask", "=", "True", ",", "\n", "param_initializer", "=", "None", ",", "\n", "noise", "=", "None", ",", "\n", "attack_weights", "=", "False", ",", "\n", "attack_after_drop", "=", "False", ",", "\n", "name", "=", "'multi_head_att'", ",", "\n", "key_tag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Multi-Head Attention. Note that attn_bias is added to the logit before\n    computing softmax activiation to mask certain selected positions so that\n    they will not considered in attention weights.\n    \"\"\"", "\n", "keys", "=", "queries", "if", "keys", "is", "None", "else", "keys", "\n", "values", "=", "keys", "if", "values", "is", "None", "else", "values", "\n", "if", "not", "(", "len", "(", "queries", ".", "shape", ")", "==", "len", "(", "keys", ".", "shape", ")", "==", "len", "(", "values", ".", "shape", ")", "==", "3", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Inputs: quries, keys and values should all be 3-D tensors. but {} v.s. {} v.s. {}\"", ".", "format", "(", "queries", ".", "shape", ",", "keys", ".", "shape", ",", "values", ".", "shape", ")", ")", "\n", "\n", "", "def", "__compute_qkv", "(", "queries", ",", "keys", ",", "values", ",", "n_head", ",", "d_key", ",", "d_value", ")", ":", "\n", "        ", "\"\"\"\n        Add linear projection to queries, keys, and values.\n        \"\"\"", "\n", "q", "=", "layers", ".", "fc", "(", "input", "=", "queries", ",", "\n", "size", "=", "d_key", "*", "n_head", ",", "\n", "num_flatten_dims", "=", "2", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "name", "+", "'_query_fc.w_0'", ",", "\n", "initializer", "=", "param_initializer", ")", ",", "\n", "bias_attr", "=", "name", "+", "'_query_fc.b_0'", ")", "\n", "k", "=", "layers", ".", "fc", "(", "input", "=", "keys", ",", "\n", "size", "=", "d_key", "*", "n_head", ",", "\n", "num_flatten_dims", "=", "2", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "name", "+", "'_key_fc.w_0'", ",", "\n", "initializer", "=", "param_initializer", ")", ",", "\n", "bias_attr", "=", "name", "+", "'_key_fc.b_0'", ")", "\n", "v", "=", "layers", ".", "fc", "(", "input", "=", "values", ",", "\n", "size", "=", "d_value", "*", "n_head", ",", "\n", "num_flatten_dims", "=", "2", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "name", "+", "'_value_fc.w_0'", ",", "\n", "initializer", "=", "param_initializer", ")", ",", "\n", "bias_attr", "=", "name", "+", "'_value_fc.b_0'", ")", "\n", "return", "q", ",", "k", ",", "v", "\n", "\n", "", "def", "__split_heads", "(", "x", ",", "n_head", ")", ":", "\n", "        ", "\"\"\"\n        Reshape the last dimension of inpunt tensor x so that it becomes two\n        dimensions and then transpose. Specifically, input a tensor with shape\n        [bs, max_sequence_length, n_head * hidden_dim] then output a tensor\n        with shape [bs, n_head, max_sequence_length, hidden_dim].\n        \"\"\"", "\n", "hidden_size", "=", "x", ".", "shape", "[", "-", "1", "]", "\n", "# The value 0 in shape attr means copying the corresponding dimension", "\n", "# size of the input as the output dimension size.", "\n", "reshaped", "=", "layers", ".", "reshape", "(", "\n", "x", "=", "x", ",", "shape", "=", "[", "0", ",", "0", ",", "n_head", ",", "hidden_size", "//", "n_head", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "# permuate the dimensions into:", "\n", "# [batch_size, n_head, max_sequence_len, hidden_size_per_head]", "\n", "return", "layers", ".", "transpose", "(", "x", "=", "reshaped", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n", "", "def", "__combine_heads", "(", "x", ")", ":", "\n", "        ", "\"\"\"\n        Transpose and then reshape the last two dimensions of inpunt tensor x\n        so that it becomes one dimension, which is reverse to __split_heads.\n        \"\"\"", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "return", "x", "\n", "if", "len", "(", "x", ".", "shape", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input(x) should be a 4-D Tensor.\"", ")", "\n", "\n", "", "trans_x", "=", "layers", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "# The value 0 in shape attr means copying the corresponding dimension", "\n", "# size of the input as the output dimension size.", "\n", "return", "layers", ".", "reshape", "(", "\n", "x", "=", "trans_x", ",", "\n", "shape", "=", "[", "0", ",", "0", ",", "trans_x", ".", "shape", "[", "2", "]", "*", "trans_x", ".", "shape", "[", "3", "]", "]", ",", "\n", "inplace", "=", "True", ")", "\n", "\n", "", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "attn_bias", ",", "d_key", ",", "dropout_rate", ")", ":", "\n", "        ", "\"\"\"\n        Scaled Dot-Product Attention\n        \"\"\"", "\n", "scaled_q", "=", "layers", ".", "scale", "(", "x", "=", "q", ",", "scale", "=", "d_key", "**", "-", "0.5", ")", "\n", "product", "=", "layers", ".", "matmul", "(", "x", "=", "scaled_q", ",", "y", "=", "k", ",", "transpose_y", "=", "True", ")", "\n", "if", "attn_bias", ":", "\n", "            ", "product", "+=", "attn_bias", "\n", "", "weights", "=", "layers", ".", "softmax", "(", "product", ")", "\n", "\n", "if", "attack_after_drop", ":", "\n", "            ", "if", "dropout_rate", ":", "\n", "                ", "weights", "=", "layers", ".", "dropout", "(", "\n", "weights", ",", "\n", "dropout_prob", "=", "dropout_rate", ",", "\n", "dropout_implementation", "=", "\"upscale_in_train\"", ",", "\n", "is_test", "=", "False", ")", "\n", "", "if", "attack_weights", ":", "\n", "                ", "weights", "+=", "noise", "\n", "", "", "else", ":", "\n", "            ", "if", "attack_weights", ":", "\n", "                ", "weights", "+=", "noise", "\n", "", "if", "dropout_rate", ":", "\n", "                ", "weights", "=", "layers", ".", "dropout", "(", "\n", "weights", ",", "\n", "dropout_prob", "=", "dropout_rate", ",", "\n", "dropout_implementation", "=", "\"upscale_in_train\"", ",", "\n", "is_test", "=", "False", ")", "\n", "\n", "", "", "out", "=", "layers", ".", "matmul", "(", "weights", ",", "v", ")", "\n", "return", "out", "\n", "\n", "", "q", ",", "k", ",", "v", "=", "__compute_qkv", "(", "queries", ",", "keys", ",", "values", ",", "n_head", ",", "d_key", ",", "d_value", ")", "\n", "\n", "if", "cache", "is", "not", "None", ":", "# use cache and concat time steps", "\n", "# Since the inplace reshape in __split_heads changes the shape of k and", "\n", "# v, which is the cache input for next time step, reshape the cache", "\n", "# input from the previous time step first.", "\n", "        ", "cache_k", ",", "cache_v", "=", "cache", "[", "\"k\"", "]", ",", "cache", "[", "\"v\"", "]", "\n", "select_k", "=", "layers", ".", "gather", "(", "cache_k", ",", "index", "=", "gather_idx", ")", "\n", "select_v", "=", "layers", ".", "gather", "(", "cache_v", ",", "index", "=", "gather_idx", ")", "\n", "select_k", "=", "layers", ".", "reshape", "(", "select_k", ",", "shape", "=", "[", "0", ",", "0", ",", "d_model", "]", ")", "\n", "select_v", "=", "layers", ".", "reshape", "(", "select_v", ",", "shape", "=", "[", "0", ",", "0", ",", "d_model", "]", ")", "\n", "if", "remove_mask", ":", "\n", "            ", "tmp_k", "=", "layers", ".", "concat", "(", "[", "select_k", ",", "k", "[", ":", ",", ":", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "tmp_v", "=", "layers", ".", "concat", "(", "[", "select_v", ",", "v", "[", ":", ",", ":", "1", "]", "]", ",", "axis", "=", "1", ")", "\n", "layers", ".", "assign", "(", "tmp_k", ",", "cache", "[", "\"k\"", "]", ")", "\n", "layers", ".", "assign", "(", "tmp_v", ",", "cache", "[", "\"v\"", "]", ")", "\n", "k", "=", "layers", ".", "concat", "(", "[", "select_k", ",", "k", "]", ",", "axis", "=", "1", ")", "\n", "v", "=", "layers", ".", "concat", "(", "[", "select_v", ",", "v", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "k", "=", "layers", ".", "concat", "(", "[", "select_k", ",", "k", "]", ",", "axis", "=", "1", ")", "\n", "v", "=", "layers", ".", "concat", "(", "[", "select_v", ",", "v", "]", ",", "axis", "=", "1", ")", "\n", "layers", ".", "assign", "(", "k", ",", "cache", "[", "\"k\"", "]", ")", "\n", "layers", ".", "assign", "(", "v", ",", "cache", "[", "\"v\"", "]", ")", "\n", "\n", "\n", "", "", "q", "=", "__split_heads", "(", "q", ",", "n_head", ")", "\n", "k", "=", "__split_heads", "(", "k", ",", "n_head", ")", "\n", "v", "=", "__split_heads", "(", "v", ",", "n_head", ")", "\n", "\n", "ctx_multiheads", "=", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "attn_bias", ",", "d_key", ",", "\n", "dropout_rate", ")", "\n", "\n", "out", "=", "__combine_heads", "(", "ctx_multiheads", ")", "\n", "\n", "w", "=", "fluid", ".", "ParamAttr", "(", "name", "=", "name", "+", "'_output_fc.w_0'", ",", "initializer", "=", "param_initializer", ")", "\n", "# Project back to the model size.", "\n", "proj_out", "=", "layers", ".", "fc", "(", "input", "=", "out", ",", "\n", "size", "=", "d_model", ",", "\n", "num_flatten_dims", "=", "2", ",", "\n", "param_attr", "=", "w", ",", "\n", "bias_attr", "=", "name", "+", "'_output_fc.b_0'", ")", "\n", "\n", "return", "proj_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.positionwise_feed_forward": [[209, 251], ["paddle.fc", "paddle.fc", "transformer_encoder_gen.gelu", "paddle.dropout", "paddle.ParamAttr", "paddle.ParamAttr"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.gelu"], ["", "def", "positionwise_feed_forward", "(", "x", ",", "\n", "d_inner_hid", ",", "\n", "d_hid", ",", "\n", "dropout_rate", ",", "\n", "hidden_act", ",", "\n", "param_initializer", "=", "None", ",", "\n", "name", "=", "'ffn'", ")", ":", "\n", "    ", "\"\"\"\n    Position-wise Feed-Forward Networks.\n    This module consists of two linear transformations with a ReLU activation\n    in between, which is applied to each position separately and identically.\n    \"\"\"", "\n", "if", "hidden_act", "==", "'gelu'", "or", "hidden_act", "==", "'gelu.precise'", ":", "\n", "        ", "_hidden_act", "=", "'gelu'", "\n", "", "elif", "hidden_act", "==", "'gelu.approximate'", ":", "\n", "        ", "_hidden_act", "=", "None", "\n", "", "else", ":", "\n", "        ", "_hidden_act", "=", "hidden_act", "\n", "", "hidden", "=", "layers", ".", "fc", "(", "input", "=", "x", ",", "\n", "size", "=", "d_inner_hid", ",", "\n", "num_flatten_dims", "=", "2", ",", "\n", "act", "=", "_hidden_act", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "name", "+", "'_fc_0.w_0'", ",", "\n", "initializer", "=", "param_initializer", ")", ",", "\n", "bias_attr", "=", "name", "+", "'_fc_0.b_0'", ")", "\n", "if", "hidden_act", "==", "'gelu.approximate'", ":", "\n", "        ", "hidden", "=", "gelu", "(", "hidden", ")", "\n", "\n", "", "if", "dropout_rate", ":", "\n", "        ", "hidden", "=", "layers", ".", "dropout", "(", "\n", "hidden", ",", "\n", "dropout_prob", "=", "dropout_rate", ",", "\n", "dropout_implementation", "=", "\"upscale_in_train\"", ",", "\n", "is_test", "=", "False", ")", "\n", "", "out", "=", "layers", ".", "fc", "(", "input", "=", "hidden", ",", "\n", "size", "=", "d_hid", ",", "\n", "num_flatten_dims", "=", "2", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "name", "+", "'_fc_1.w_0'", ",", "initializer", "=", "param_initializer", ")", ",", "\n", "bias_attr", "=", "name", "+", "'_fc_1.b_0'", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.pre_post_process_layer": [[253, 292], ["paddle.layer_norm", "paddle.cast", "paddle.cast", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.dropout", "len", "paddle.initializer.Constant", "paddle.initializer.Constant"], "function", ["None"], ["", "def", "pre_post_process_layer", "(", "prev_out", ",", "\n", "out", ",", "\n", "process_cmd", ",", "\n", "dropout_rate", "=", "0.", ",", "\n", "epsilon", "=", "1e-12", ",", "\n", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\"\n    Add residual connection, layer normalization and droput to the out tensor\n    optionally according to the value of process_cmd.\n    This will be used before or after multi-head attention and position-wise\n    feed-forward networks.\n    \"\"\"", "\n", "for", "cmd", "in", "process_cmd", ":", "\n", "        ", "if", "cmd", "==", "\"a\"", ":", "# add residual connection", "\n", "            ", "out", "=", "out", "+", "prev_out", "if", "prev_out", "else", "out", "\n", "", "elif", "cmd", "==", "\"n\"", ":", "# add layer normalization", "\n", "            ", "out_dtype", "=", "out", ".", "dtype", "\n", "if", "out_dtype", "==", "fluid", ".", "core", ".", "VarDesc", ".", "VarType", ".", "FP16", ":", "\n", "                ", "out", "=", "layers", ".", "cast", "(", "x", "=", "out", ",", "dtype", "=", "\"float32\"", ")", "\n", "", "out", "=", "layers", ".", "layer_norm", "(", "\n", "out", ",", "\n", "begin_norm_axis", "=", "len", "(", "out", ".", "shape", ")", "-", "1", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "name", "+", "'_layer_norm_scale'", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "Constant", "(", "1.", ")", ")", ",", "\n", "bias_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "name", "+", "'_layer_norm_bias'", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "Constant", "(", "0.", ")", ")", ",", "\n", "epsilon", "=", "epsilon", ")", "\n", "if", "out_dtype", "==", "fluid", ".", "core", ".", "VarDesc", ".", "VarType", ".", "FP16", ":", "\n", "                ", "out", "=", "layers", ".", "cast", "(", "x", "=", "out", ",", "dtype", "=", "\"float16\"", ")", "\n", "", "", "elif", "cmd", "==", "\"d\"", ":", "# add dropout", "\n", "            ", "if", "dropout_rate", ":", "\n", "                ", "out", "=", "layers", ".", "dropout", "(", "\n", "out", ",", "\n", "dropout_prob", "=", "dropout_rate", ",", "\n", "dropout_implementation", "=", "\"upscale_in_train\"", ",", "\n", "is_test", "=", "False", ")", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.encoder_layer": [[298, 390], ["transformer_encoder_gen.multi_head_attention", "post_process_layer", "transformer_encoder_gen.positionwise_feed_forward", "pre_process_layer", "pre_process_layer", "pre_process_layer", "post_process_layer"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.multi_head_attention", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.positionwise_feed_forward"], ["def", "encoder_layer", "(", "enc_input", ",", "\n", "attn_bias", ",", "\n", "n_head", ",", "\n", "d_key", ",", "\n", "d_value", ",", "\n", "d_model", ",", "\n", "d_inner_hid", ",", "\n", "prepostprocess_dropout", ",", "\n", "attention_dropout", ",", "\n", "relu_dropout", ",", "\n", "hidden_act", ",", "\n", "preprocess_cmd", "=", "\"n\"", ",", "\n", "postprocess_cmd", "=", "\"da\"", ",", "\n", "param_initializer", "=", "None", ",", "\n", "name", "=", "''", ",", "\n", "epsilon", "=", "1e-12", ",", "\n", "kv_input", "=", "None", ",", "\n", "cache", "=", "None", ",", "\n", "gather_idx", "=", "None", ",", "\n", "remove_mask", "=", "True", ",", "\n", "noise", "=", "None", ",", "\n", "attack_weights", "=", "False", ",", "\n", "attack_after_drop", "=", "False", ",", "\n", "key_tag", "=", "None", ")", ":", "\n", "    ", "\"\"\"The encoder layers that can be stacked to form a deep encoder.\n    This module consits of a multi-head (self) attention followed by\n    position-wise feed-forward networks and both the two components companied\n    with the post_process_layer to add residual connection, layer normalization\n    and droput.\n    \"\"\"", "\n", "key_input", "=", "pre_process_layer", "(", "\n", "kv_input", ",", "\n", "preprocess_cmd", ",", "\n", "prepostprocess_dropout", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "name", "=", "name", "+", "'_pre_att'", ")", "if", "kv_input", "else", "None", "\n", "value_input", "=", "key_input", "if", "key_input", "else", "None", "\n", "\n", "attn_output", "=", "multi_head_attention", "(", "\n", "pre_process_layer", "(", "\n", "enc_input", ",", "\n", "preprocess_cmd", ",", "\n", "prepostprocess_dropout", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "name", "=", "name", "+", "'_pre_att'", ")", ",", "\n", "key_input", ",", "\n", "value_input", ",", "\n", "attn_bias", ",", "\n", "d_key", ",", "\n", "d_value", ",", "\n", "d_model", ",", "\n", "n_head", ",", "\n", "attention_dropout", ",", "\n", "param_initializer", "=", "param_initializer", ",", "\n", "name", "=", "name", "+", "'_multi_head_att'", ",", "\n", "cache", "=", "cache", ",", "\n", "gather_idx", "=", "gather_idx", ",", "\n", "remove_mask", "=", "remove_mask", ",", "\n", "noise", "=", "noise", ",", "\n", "attack_weights", "=", "attack_weights", ",", "\n", "attack_after_drop", "=", "False", ",", "\n", "key_tag", "=", "key_tag", ")", "\n", "attn_output", "=", "post_process_layer", "(", "\n", "enc_input", ",", "\n", "attn_output", ",", "\n", "postprocess_cmd", ",", "\n", "prepostprocess_dropout", ",", "\n", "name", "=", "name", "+", "'_post_att'", ",", "\n", "epsilon", "=", "epsilon", ")", "\n", "\n", "ffd_output", "=", "positionwise_feed_forward", "(", "\n", "pre_process_layer", "(", "\n", "attn_output", ",", "\n", "preprocess_cmd", ",", "\n", "prepostprocess_dropout", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "name", "=", "name", "+", "'_pre_ffn'", ")", ",", "\n", "d_inner_hid", ",", "\n", "d_model", ",", "\n", "relu_dropout", ",", "\n", "hidden_act", ",", "\n", "param_initializer", "=", "param_initializer", ",", "\n", "name", "=", "name", "+", "'_ffn'", ")", "\n", "\n", "return", "post_process_layer", "(", "\n", "attn_output", ",", "\n", "ffd_output", ",", "\n", "postprocess_cmd", ",", "\n", "prepostprocess_dropout", ",", "\n", "name", "=", "name", "+", "'_post_ffn'", ",", "\n", "epsilon", "=", "epsilon", "\n", ")", ",", "ffd_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.freeze_layer": [[391, 412], ["paddle.default_main_program().global_block().var", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "paddle.default_main_program().global_block", "paddle.default_main_program"], "function", ["None"], ["", "def", "freeze_layer", "(", "layer_num", ")", ":", "\n", "    ", "\"\"\"freeze layer\"\"\"", "\n", "freeze_params", "=", "[", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_ffn_fc_0.b_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_ffn_fc_0.w_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_ffn_fc_1.b_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_ffn_fc_1.w_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_multi_head_att_key_fc.b_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_multi_head_att_key_fc.w_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_multi_head_att_output_fc.b_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_multi_head_att_output_fc.w_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_multi_head_att_query_fc.b_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_multi_head_att_query_fc.w_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_multi_head_att_value_fc.b_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_multi_head_att_value_fc.w_0'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_post_att_layer_norm_bias'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_post_att_layer_norm_scale'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_post_ffn_layer_norm_bias'", ",", "\n", "'encoder_layer_'", "+", "str", "(", "layer_num", ")", "+", "'_post_ffn_layer_norm_scale'", "]", "\n", "for", "para_name", "in", "freeze_params", ":", "\n", "        ", "y", "=", "fluid", ".", "default_main_program", "(", ")", ".", "global_block", "(", ")", ".", "var", "(", "para_name", ")", "\n", "y", ".", "stop_gradient", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.encoder": [[413, 514], ["range", "pre_process_layer", "range", "transformer_encoder_gen.encoder_layer", "checkpoints.append", "range", "range", "ValueError", "transformer_encoder_gen.freeze_layer", "names.append", "range", "names.append", "str", "str"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.encoder_layer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.freeze_layer"], ["", "", "def", "encoder", "(", "enc_input", ",", "\n", "attn_bias", ",", "\n", "n_layer", ",", "\n", "n_head", ",", "\n", "d_key", ",", "\n", "d_value", ",", "\n", "d_model", ",", "\n", "d_inner_hid", ",", "\n", "prepostprocess_dropout", ",", "\n", "attention_dropout", ",", "\n", "relu_dropout", ",", "\n", "hidden_act", ",", "\n", "preprocess_cmd", ",", "\n", "postprocess_cmd", ",", "\n", "epsilon", ",", "\n", "n_layer_per_block", ",", "\n", "param_initializer", "=", "None", ",", "\n", "name", "=", "''", ",", "\n", "param_share", "=", "None", ",", "\n", "caches", "=", "None", ",", "\n", "gather_idx", "=", "None", ",", "\n", "remove_mask", "=", "True", ",", "\n", "freeze_num_layers", "=", "0", ",", "\n", "noise", "=", "None", ",", "\n", "attack_idx", "=", "-", "1", ",", "\n", "attack_after_drop", "=", "False", ",", "\n", "key_tag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    The encoder is composed of a stack of identical layers returned by calling\n    encoder_layer .\n    \"\"\"", "\n", "checkpoints", "=", "[", "]", "\n", "# for outer_share it will share same param in one block,", "\n", "# and for inner_share it will share param across blocks, rather than in one same block", "\n", "#", "\n", "# outer-share   inner-share", "\n", "#    [1]           [1]      ----\\ 1st block", "\n", "#    [1]           [2]      ----/", "\n", "#    [2]           [1]      ----\\ 2nd block", "\n", "#    [2]           [2]      ----/", "\n", "\n", "names", "=", "[", "]", "\n", "if", "param_share", "==", "\"normal\"", "or", "param_share", "==", "'outer_share'", ":", "\n", "#n_layer_per_block=1,  n_layer=24 for bert-large", "\n", "#n_layer_per_block=1,  n_layer=12 for bert-base", "\n", "#n_layer_per_block=12, n_layer=12 for albert-xxlarge", "\n", "#n_layer_per_block=6,  n_layer=12 for albert-xxlarge-outershare", "\n", "        ", "for", "i", "in", "range", "(", "n_layer", "//", "n_layer_per_block", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "n_layer_per_block", ")", ":", "\n", "                ", "names", ".", "append", "(", "name", "+", "'_layer_'", "+", "str", "(", "i", ")", ")", "\n", "", "", "", "elif", "param_share", "==", "\"inner_share\"", ":", "\n", "#n_layer_per_block = 2", "\n", "        ", "for", "_", "in", "range", "(", "n_layer", "//", "n_layer_per_block", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n_layer_per_block", ")", ":", "\n", "                ", "names", ".", "append", "(", "name", "+", "'_layer_'", "+", "str", "(", "i", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'unsupported param share mode'", ")", "\n", "\n", "", "attack_weights", "=", "False", "\n", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "        ", "if", "attack_idx", "==", "i", ":", "\n", "            ", "attack_weights", "=", "True", "\n", "", "else", ":", "\n", "            ", "attack_weights", "=", "False", "\n", "", "enc_output", ",", "cp", "=", "encoder_layer", "(", "\n", "enc_input", ",", "\n", "attn_bias", ",", "\n", "n_head", ",", "\n", "d_key", ",", "\n", "d_value", ",", "\n", "d_model", ",", "\n", "d_inner_hid", ",", "\n", "prepostprocess_dropout", ",", "\n", "attention_dropout", ",", "\n", "relu_dropout", ",", "\n", "hidden_act", ",", "\n", "preprocess_cmd", ",", "\n", "postprocess_cmd", ",", "\n", "param_initializer", "=", "param_initializer", ",", "\n", "name", "=", "names", "[", "i", "]", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "cache", "=", "caches", "[", "i", "]", "if", "caches", "is", "not", "None", "else", "None", ",", "\n", "gather_idx", "=", "gather_idx", ",", "\n", "remove_mask", "=", "remove_mask", ",", "\n", "noise", "=", "noise", ",", "\n", "attack_weights", "=", "attack_weights", ",", "\n", "attack_after_drop", "=", "attack_after_drop", ",", "\n", "key_tag", "=", "key_tag", ")", "\n", "checkpoints", ".", "append", "(", "cp", ")", "\n", "enc_input", "=", "enc_output", "\n", "#freeze layers", "\n", "if", "i", "<", "freeze_num_layers", ":", "\n", "            ", "freeze_layer", "(", "i", ")", "\n", "", "", "enc_output", "=", "pre_process_layer", "(", "\n", "enc_output", ",", "\n", "preprocess_cmd", ",", "\n", "prepostprocess_dropout", ",", "\n", "name", "=", "\"post_encoder\"", ",", "\n", "epsilon", "=", "epsilon", ")", "\n", "\n", "return", "enc_output", ",", "checkpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.two_stream_encoder": [[516, 620], ["range", "pre_process_layer", "pre_process_layer", "range", "paddle.concat", "transformer_encoder_gen.encoder_layer", "transformer_encoder_gen.encoder_layer", "checkpoints.append", "range", "range", "ValueError", "names.append", "range", "names.append", "str", "str"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.encoder_layer", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.encoder_layer"], ["", "def", "two_stream_encoder", "(", "enc_input_context", ",", "\n", "enc_input_query", ",", "\n", "attn_bias_context", ",", "\n", "attn_bias_query", ",", "\n", "n_layer", ",", "\n", "n_head", ",", "\n", "d_key", ",", "\n", "d_value", ",", "\n", "d_model", ",", "\n", "d_inner_hid", ",", "\n", "prepostprocess_dropout", ",", "\n", "attention_dropout", ",", "\n", "relu_dropout", ",", "\n", "hidden_act", ",", "\n", "preprocess_cmd", ",", "\n", "postprocess_cmd", ",", "\n", "epsilon", ",", "\n", "n_layer_per_block", ",", "\n", "param_initializer", "=", "None", ",", "\n", "name", "=", "''", ",", "\n", "param_share", "=", "None", ",", "\n", "key_tag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    The encoder is composed of a stack of identical layers returned by calling\n    encoder_layer .\n    \"\"\"", "\n", "checkpoints", "=", "[", "]", "\n", "names", "=", "[", "]", "\n", "if", "param_share", "==", "\"normal\"", "or", "param_share", "==", "'outer_share'", ":", "\n", "#n_layer_per_block=1,  n_layer=24 for bert-large", "\n", "#n_layer_per_block=1,  n_layer=12 for bert-base", "\n", "#n_layer_per_block=12, n_layer=12 for albert-xxlarge", "\n", "#n_layer_per_block=6,  n_layer=12 for albert-xxlarge-outershare", "\n", "        ", "for", "i", "in", "range", "(", "n_layer", "//", "n_layer_per_block", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "n_layer_per_block", ")", ":", "\n", "                ", "names", ".", "append", "(", "name", "+", "'_layer_'", "+", "str", "(", "i", ")", ")", "\n", "", "", "", "elif", "param_share", "==", "\"inner_share\"", ":", "\n", "#n_layer_per_block = 2", "\n", "        ", "for", "_", "in", "range", "(", "n_layer", "//", "n_layer_per_block", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "n_layer_per_block", ")", ":", "\n", "                ", "names", ".", "append", "(", "name", "+", "'_layer_'", "+", "str", "(", "i", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'unsupported param share mode'", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "        ", "kv_input", "=", "layers", ".", "concat", "(", "[", "enc_input_context", ",", "enc_input_query", "]", ",", "axis", "=", "1", ")", "\n", "enc_output_context", ",", "cp", "=", "encoder_layer", "(", "\n", "enc_input_context", ",", "\n", "attn_bias_context", ",", "\n", "n_head", ",", "\n", "d_key", ",", "\n", "d_value", ",", "\n", "d_model", ",", "\n", "d_inner_hid", ",", "\n", "prepostprocess_dropout", ",", "\n", "attention_dropout", ",", "\n", "relu_dropout", ",", "\n", "hidden_act", ",", "\n", "preprocess_cmd", ",", "\n", "postprocess_cmd", ",", "\n", "param_initializer", "=", "param_initializer", ",", "\n", "name", "=", "names", "[", "i", "]", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "key_tag", "=", "key_tag", ")", "\n", "\n", "enc_output_query", ",", "_", "=", "encoder_layer", "(", "\n", "enc_input_query", ",", "\n", "attn_bias_query", ",", "\n", "n_head", ",", "\n", "d_key", ",", "\n", "d_value", ",", "\n", "d_model", ",", "\n", "d_inner_hid", ",", "\n", "prepostprocess_dropout", ",", "\n", "attention_dropout", ",", "\n", "relu_dropout", ",", "\n", "hidden_act", ",", "\n", "preprocess_cmd", ",", "\n", "postprocess_cmd", ",", "\n", "param_initializer", "=", "param_initializer", ",", "\n", "name", "=", "names", "[", "i", "]", ",", "\n", "epsilon", "=", "epsilon", ",", "\n", "kv_input", "=", "kv_input", ",", "\n", "key_tag", "=", "key_tag", ")", "\n", "\n", "checkpoints", ".", "append", "(", "cp", ")", "\n", "enc_input_context", "=", "enc_output_context", "\n", "enc_input_query", "=", "enc_output_query", "\n", "\n", "", "enc_output_context", "=", "pre_process_layer", "(", "\n", "enc_output_context", ",", "\n", "preprocess_cmd", ",", "\n", "prepostprocess_dropout", ",", "\n", "name", "=", "\"post_encoder\"", ",", "\n", "epsilon", "=", "epsilon", ")", "\n", "\n", "enc_output_query", "=", "pre_process_layer", "(", "\n", "enc_output_query", ",", "\n", "preprocess_cmd", ",", "\n", "prepostprocess_dropout", ",", "\n", "name", "=", "\"post_encoder\"", ",", "\n", "epsilon", "=", "epsilon", ")", "\n", "\n", "return", "enc_output_context", ",", "enc_output_query", ",", "checkpoints", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.__init__": [[13, 18], ["ernie_config.ErnieConfig._parse"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig._parse"], ["def", "__init__", "(", "self", ",", "config_path", ")", ":", "\n", "        ", "\"\"\"\n        :param config_path:\n        \"\"\"", "\n", "self", ".", "_config_dict", "=", "self", ".", "_parse", "(", "config_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig._parse": [[19, 32], ["open", "json.load", "IOError"], "methods", ["None"], ["", "def", "_parse", "(", "self", ",", "config_path", ")", ":", "\n", "        ", "\"\"\"\n        :param config_path:\n        :return:\n        \"\"\"", "\n", "try", ":", "\n", "            ", "with", "open", "(", "config_path", ",", "'r'", ")", "as", "json_file", ":", "\n", "                ", "config_dict", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "", "except", "Exception", ":", "\n", "            ", "raise", "IOError", "(", "\"Error in parsing Ernie model config file '%s'\"", "%", "\n", "config_path", ")", "\n", "", "else", ":", "\n", "            ", "return", "config_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.__getitem__": [[33, 39], ["ernie_config.ErnieConfig._config_dict.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        :param key:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_config_dict", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.__setitem__": [[40, 45], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        :param key, value:\n        \"\"\"", "\n", "self", ".", "_config_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.has": [[46, 54], ["None"], "methods", ["None"], ["", "def", "has", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"\n        :param key:\n        :return:\n        \"\"\"", "\n", "if", "key", "in", "self", ".", "_config_dict", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get": [[55, 64], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "key", ",", "default_value", ")", ":", "\n", "        ", "\"\"\"\n        :param key,default_value:\n        :retrun:\n        \"\"\"", "\n", "if", "key", "in", "self", ".", "_config_dict", ":", "\n", "            ", "return", "self", ".", "_config_dict", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "return", "default_value", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.print_config": [[65, 72], ["sorted", "logging.info", "six.iteritems", "logging.info"], "methods", ["None"], ["", "", "def", "print_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "for", "arg", ",", "value", "in", "sorted", "(", "six", ".", "iteritems", "(", "self", ".", "_config_dict", ")", ")", ":", "\n", "            ", "logging", ".", "info", "(", "'%s: %s'", "%", "(", "arg", ",", "value", ")", ")", "\n", "", "logging", ".", "info", "(", "'------------------------------------------------'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.LinearWarmupDecay.__init__": [[14, 35], ["paddle.optimizer.lr.LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "base_lr", ",", "end_lr", ",", "warmup_steps", ",", "decay_steps", ",", "num_train_steps", ",", "power", "=", "1.0", ",", "verbose", "=", "False", ",", "\n", "cycle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\u5148\u4f7f\u7528warmup\u7ebf\u6027\u8870\u51cf\uff0c\u7531\u5c0f\u53d8\u5927\u5230base_lr\uff0c \u518d\u4f7f\u7528\u591a\u9879\u5f0f\u8870\u51cf\u7531\u5927\u53d8\u5c0f\u5230end_lr\n        :param base_lr:\n        :param end_lr:\n        :param warmup_steps:\n        :param decay_steps:\n        :param num_train_steps:\n        :param power:\n        :param verbose:\n        :param cycle:\n        \"\"\"", "\n", "self", ".", "base_lr", "=", "base_lr", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "num_train_steps", "=", "num_train_steps", "\n", "self", ".", "decay_steps", "=", "decay_steps", "# \u4e0enum_train_steps\u4e00\u81f4", "\n", "self", ".", "end_lr", "=", "end_lr", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "cycle", "=", "cycle", "\n", "# tips: \u57fa\u7c7b\u7684__init__\u65b9\u6cd5\u4e00\u5b9a\u8981\u653e\u5728\u6700\u540e\uff0c\u56e0\u4e3a\u57fa\u7c7b\u7684__init__\u4e2d\u4f1a\u76f4\u63a5\u8c03\u7528\u4e00\u6b21get_lr()", "\n", "LRScheduler", ".", "__init__", "(", "self", ",", "learning_rate", "=", "base_lr", ",", "last_epoch", "=", "-", "1", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.LinearWarmupDecay.get_lr": [[36, 47], ["ernie_lr.LinearWarmupDecay._polynomial_decay"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.LinearWarmupDecay._polynomial_decay"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u5373\u65f6\u7684\u5b66\u4e60\u7387\u8ba1\u7b97\n        \"\"\"", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "self", ".", "base_lr", "*", "(", "self", ".", "last_epoch", "/", "self", ".", "warmup_steps", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_polynomial_decay", "(", "learning_rate", "=", "self", ".", "base_lr", ",", "\n", "decay_steps", "=", "self", ".", "decay_steps", ",", "\n", "end_learning_rate", "=", "self", ".", "end_lr", ",", "\n", "power", "=", "self", ".", "power", ",", "\n", "cycle", "=", "self", ".", "cycle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.LinearWarmupDecay._polynomial_decay": [[48, 66], ["numpy.ceil", "min"], "methods", ["None"], ["", "", "def", "_polynomial_decay", "(", "self", ",", "learning_rate", ",", "decay_steps", ",", "end_learning_rate", "=", "0.0001", ",", "power", "=", "1.0", ",", "cycle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        the same algrithm as\n        paddle/fluid/layers/learning_rate_scheduler.py:\n        polynomial_decay\n        \"\"\"", "\n", "global_step", "=", "self", ".", "last_epoch", "\n", "if", "cycle", ":", "\n", "            ", "div_res", "=", "np", ".", "ceil", "(", "self", ".", "last_epoch", "/", "decay_steps", ")", "\n", "if", "self", ".", "last_epoch", "==", "0", ":", "\n", "                ", "div_res", "=", "1.0", "\n", "", "decay_steps", "=", "decay_steps", "*", "div_res", "\n", "", "else", ":", "\n", "            ", "global_step", "=", "min", "(", "decay_steps", ",", "self", ".", "last_epoch", ")", "\n", "\n", "", "decayed_lr", "=", "(", "learning_rate", "-", "end_learning_rate", ")", "*", "(", "(", "1.0", "-", "global_step", "/", "decay_steps", ")", "**", "power", ")", "+", "end_learning_rate", "\n", "return", "decayed_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.exclude_from_weight_decay": [[68, 80], ["isinstance", "name.find", "name.endswith"], "function", ["None"], ["", "", "def", "exclude_from_weight_decay", "(", "name", ")", ":", "\n", "    ", "\"\"\"exclude_from_weight_decay\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "        ", "name", "=", "name", ".", "name", "\n", "", "if", "name", ".", "find", "(", "\"layer_norm\"", ")", ">", "-", "1", ":", "\n", "        ", "return", "True", "\n", "", "bias_suffix", "=", "[", "\"_bias\"", ",", "\"_b\"", ",", "\".b_0\"", "]", "\n", "for", "suffix", "in", "bias_suffix", ":", "\n", "        ", "if", "name", ".", "endswith", "(", "suffix", ")", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.lr_decay_fn": [[82, 100], ["param.name.index", "int", "param.name.split", "param.name.index", "int", "param.name.index", "int", "param.name.split", "param.name.split"], "function", ["None"], ["", "def", "lr_decay_fn", "(", "param", ",", "decay_rate", ",", "n_layers", ",", "server_layers", ")", ":", "\n", "    ", "\"\"\"lr_decay_fn\n    \"\"\"", "\n", "if", "\"encoder_layer\"", "in", "param", ".", "name", "and", "param", ".", "name", ".", "index", "(", "\"encoder_layer\"", ")", "==", "0", ":", "\n", "        ", "depth", "=", "int", "(", "param", ".", "name", ".", "split", "(", "\"_\"", ")", "[", "2", "]", ")", "+", "1", "\n", "", "elif", "\"server_post_encoder_layer\"", "in", "param", ".", "name", "or", "\"sharing_to_task_fc.w_0\"", "in", "param", ".", "name", ":", "\n", "        ", "depth", "=", "server_layers", "\n", "", "elif", "\"nlu_encoder_layer\"", "in", "param", ".", "name", "and", "param", ".", "name", ".", "index", "(", "\"nlu_encoder_layer\"", ")", "==", "0", ":", "\n", "        ", "depth", "=", "int", "(", "param", ".", "name", ".", "split", "(", "\"_\"", ")", "[", "3", "]", ")", "+", "1", "\n", "", "elif", "\"nlg_encoder_layer\"", "in", "param", ".", "name", "and", "param", ".", "name", ".", "index", "(", "\"nlg_encoder_layer\"", ")", "==", "0", ":", "\n", "        ", "depth", "=", "int", "(", "param", ".", "name", ".", "split", "(", "\"_\"", ")", "[", "3", "]", ")", "+", "1", "\n", "", "elif", "'nlu_post_encoder_layer'", "in", "param", ".", "name", "or", "\"nlg_post_encoder_layer\"", "in", "param", ".", "name", ":", "\n", "        ", "depth", "=", "n_layers", "+", "1", "\n", "", "elif", "\"embedding\"", "in", "param", ".", "name", "or", "\"emb_hidden_mapping\"", "in", "param", ".", "name", "or", "'pre_encoder_layer'", "in", "param", ".", "name", ":", "\n", "        ", "depth", "=", "0", "\n", "", "else", ":", "\n", "        ", "depth", "=", "n_layers", "+", "2", "\n", "", "return", "decay_rate", "**", "(", "n_layers", "+", "2", "-", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_lr.lr_decay_freeze_fn": [[102, 127], ["param.name.index", "int", "param.name.split", "param.name.index", "int", "param.name.index", "int", "param.name.split", "param.name.split"], "function", ["None"], ["", "def", "lr_decay_freeze_fn", "(", "param", ",", "decay_rate", ",", "n_layers", ",", "server_layers", ")", ":", "\n", "    ", "\"\"\"lr_decay_freeze_fn\n    \"\"\"", "\n", "if", "\"encoder_layer\"", "in", "param", ".", "name", "and", "param", ".", "name", ".", "index", "(", "\"encoder_layer\"", ")", "==", "0", ":", "\n", "        ", "depth", "=", "int", "(", "param", ".", "name", ".", "split", "(", "\"_\"", ")", "[", "2", "]", ")", "+", "1", "\n", "decay_rate", "=", "0", "\n", "", "elif", "\"server_post_encoder_layer\"", "in", "param", ".", "name", "or", "\"sharing_to_task_fc.w_0\"", "in", "param", ".", "name", ":", "\n", "        ", "depth", "=", "server_layers", "\n", "decay_rate", "=", "0", "\n", "", "elif", "\"nlu_encoder_layer\"", "in", "param", ".", "name", "and", "param", ".", "name", ".", "index", "(", "\"nlu_encoder_layer\"", ")", "==", "0", ":", "\n", "        ", "depth", "=", "int", "(", "param", ".", "name", ".", "split", "(", "\"_\"", ")", "[", "3", "]", ")", "+", "1", "\n", "decay_rate", "=", "1", "\n", "", "elif", "\"nlg_encoder_layer\"", "in", "param", ".", "name", "and", "param", ".", "name", ".", "index", "(", "\"nlg_encoder_layer\"", ")", "==", "0", ":", "\n", "        ", "depth", "=", "int", "(", "param", ".", "name", ".", "split", "(", "\"_\"", ")", "[", "3", "]", ")", "+", "1", "\n", "decay_rate", "=", "1", "\n", "", "elif", "'nlu_post_encoder_layer'", "in", "param", ".", "name", "or", "\"nlg_post_encoder_layer\"", "in", "param", ".", "name", ":", "\n", "        ", "depth", "=", "n_layers", "+", "1", "\n", "decay_rate", "=", "1", "\n", "", "elif", "\"embedding\"", "in", "param", ".", "name", "or", "\"emb_hidden_mapping\"", "in", "param", ".", "name", "or", "'pre_encoder_layer'", "in", "param", ".", "name", ":", "\n", "        ", "depth", "=", "0", "\n", "decay_rate", "=", "0", "\n", "", "else", ":", "\n", "        ", "depth", "=", "n_layers", "+", "2", "\n", "decay_rate", "=", "1", "\n", "", "return", "decay_rate", "**", "(", "n_layers", "+", "2", "-", "depth", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_factory.generate_ernie_tokenizer": [[38, 60], ["paddle.utils.download.get_path_from_url", "common.register.import_modules_plugin", "os.path.join", "common.register.RegisterSet.tokenizer.__getitem__", "RegisterSet.tokenizer.__getitem__.", "RuntimeError", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.import_modules_plugin", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["def", "generate_ernie_tokenizer", "(", "model_name", ",", "root_dir", ")", ":", "\n", "    ", "\"\"\"generate ernie tokenizer\n    :param model_name: \u5f85\u83b7\u53d6\uff08\u4e0b\u8f7d\uff09\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u540d\u5b57\uff0c\u53d6\u503c\u4e3aernie_resource_dict\u4e2d\u5305\u542b\u7684\u540d\u79f0\n    :param root_dir: \u83b7\u53d6\u4e4b\u540e\u7684\u9884\u8bad\u5417\u6a21\u578b\u53ca\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u7684\u4f4d\u7f6e\n    \"\"\"", "\n", "if", "not", "model_name", "or", "not", "root_dir", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"model_name and root_dir can't be None\"", ")", "\n", "\n", "", "url", "=", "DOWNLOAD_BASE_URL", "+", "model_name", "+", "\".tgz\"", "\n", "base_path", "=", "get_path_from_url", "(", "url", "=", "url", ",", "root_dir", "=", "root_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "base_path", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Download  {} failed. \"", ".", "format", "(", "model_name", ")", ")", "\n", "\n", "", "register", ".", "import_modules_plugin", "(", ")", "\n", "\n", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "ernie_resource_dict", "[", "model_name", "]", "[", "\"vocab_file\"", "]", ")", "\n", "tokenizer_type", "=", "ernie_resource_dict", "[", "model_name", "]", "[", "\"tokenizer\"", "]", "\n", "\n", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "tokenizer_type", ")", "\n", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "vocab_file", ")", "\n", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_factory.generate_ernie_model": [[62, 97], ["paddle.utils.download.get_path_from_url", "logging.info", "common.register.import_modules_plugin", "os.path.join", "ernie_config.ErnieConfig", "common.register.RegisterSet.models.__getitem__", "os.path.join", "RuntimeError", "os.path.exists", "RuntimeError", "RegisterSet.models.__getitem__.", "RegisterSet.models.__getitem__.", "paddle.load", "net_class.set_state_dict"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.import_modules_plugin", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["", "def", "generate_ernie_model", "(", "model_name", ",", "root_dir", ",", "extra_params", "=", "None", ",", "enable_static", "=", "False", ")", ":", "\n", "    ", "\"\"\"generate ernie model\n    :param model_name: \u5f85\u83b7\u53d6\uff08\u4e0b\u8f7d\uff09\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u540d\u5b57\uff0c\u53d6\u503c\u4e3aernie_resource_dict\u4e2d\u5305\u542b\u7684\u540d\u79f0\n    :param root_dir: \u83b7\u53d6\u4e4b\u540e\u7684\u9884\u8bad\u5417\u6a21\u578b\u53ca\u914d\u7f6e\u6587\u4ef6\u5b58\u653e\u7684\u4f4d\u7f6e\n    :enable_static: \u662f\u5426\u4f7f\u7528\u9759\u6001\u56fe\u65b9\u5f0f\uff0c\u9759\u6001\u56fe\u6a21\u5f0f\u4e0b\u9700\u8981\u5728\u63d2\u4ef6\u5916\u90e8\u8fdb\u884c\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u53c2\u6570\u521d\u59cb\u5316\n    \"\"\"", "\n", "if", "not", "model_name", "or", "not", "root_dir", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"model_name and root_dir can't be None\"", ")", "\n", "\n", "", "url", "=", "DOWNLOAD_BASE_URL", "+", "model_name", "+", "\".tgz\"", "\n", "base_path", "=", "get_path_from_url", "(", "url", "=", "url", ",", "root_dir", "=", "root_dir", ")", "\n", "logging", ".", "info", "(", "\"base path is {}\"", ".", "format", "(", "base_path", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "base_path", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Download  {} failed. \"", ".", "format", "(", "model_name", ")", ")", "\n", "\n", "", "register", ".", "import_modules_plugin", "(", ")", "\n", "\n", "cfg_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "ernie_resource_dict", "[", "model_name", "]", "[", "\"config_file\"", "]", ")", "\n", "cfg_dict", "=", "ErnieConfig", "(", "cfg_path", ")", "\n", "\n", "net_name", "=", "ernie_resource_dict", "[", "model_name", "]", "[", "\"net_name\"", "]", "\n", "net_class", "=", "RegisterSet", ".", "models", ".", "__getitem__", "(", "net_name", ")", "\n", "\n", "if", "extra_params", "is", "not", "None", ":", "\n", "        ", "ernie_model", "=", "net_class", "(", "cfg_dict", ",", "extra_params", ")", "\n", "", "else", ":", "\n", "        ", "ernie_model", "=", "net_class", "(", "cfg_dict", ")", "\n", "\n", "", "model_params_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "ernie_resource_dict", "[", "model_name", "]", "[", "\"params_file\"", "]", ")", "\n", "if", "not", "enable_static", ":", "\n", "        ", "ernie_model_dict", "=", "paddle", ".", "load", "(", "model_params_path", ")", "\n", "ernie_model", ".", "set_state_dict", "(", "ernie_model_dict", ",", "use_structured_name", "=", "False", ")", "\n", "\n", "", "return", "model_params_path", ",", "ernie_model", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.__init__": [[27, 117], ["config.get", "config.get", "config.get", "config.get", "config.get", "config.get", "config.get", "config.get", "config.get", "config.get", "config.get", "config.get", "config.get", "config.has", "config.get", "config.get", "config.get", "paddle.initializer.TruncatedNormal", "ernie_gen.ErnieGenModel._build_model", "config.get", "config.get", "paddle.layers.fill_constant_batch_size_like", "paddle.layers.fill_constant_batch_size_like", "range"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.has", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel._build_model", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "\n", "src_ids", ",", "\n", "position_ids", ",", "\n", "sentence_ids", ",", "\n", "input_mask", ",", "\n", "config", ",", "\n", "use_fp16", "=", "False", ",", "\n", "role_ids", "=", "None", ",", "\n", "turn_ids", "=", "None", ",", "\n", "weight_sharing", "=", "True", ",", "\n", "task_type", "=", "\"normal\"", ",", "\n", "two_stream", "=", "False", ",", "\n", "decoding", "=", "False", ",", "\n", "gather_idx", "=", "None", ",", "\n", "key_tag", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param src_ids:\n        :param position_ids:\n        :param sentence_ids:\n        :param task_ids:\n        :param input_mask:\n        :param config:\n        :param weight_sharing:\n        :param use_fp16:\n        \"\"\"", "\n", "self", ".", "_hidden_size", "=", "config", ".", "get", "(", "'hidden_size'", ",", "768", ")", "\n", "self", ".", "_emb_size", "=", "config", ".", "get", "(", "'emb_size'", ",", "self", ".", "_hidden_size", ")", "\n", "self", ".", "_n_layer", "=", "config", ".", "get", "(", "'num_hidden_layers'", ",", "12", ")", "\n", "self", ".", "_n_head", "=", "config", ".", "get", "(", "'num_attention_heads'", ",", "12", ")", "\n", "self", ".", "_voc_size", "=", "config", ".", "get", "(", "'vocab_size'", ",", "30522", ")", "\n", "self", ".", "_max_position_seq_len", "=", "config", ".", "get", "(", "'max_position_embeddings'", ",", "512", ")", "\n", "self", ".", "_param_share", "=", "config", ".", "get", "(", "'param_share'", ",", "\"normal\"", ")", "\n", "self", ".", "_pre_encoder_cmd", "=", "config", ".", "get", "(", "'pre_encoder_cmd'", ",", "\"nd\"", ")", "\n", "self", ".", "_preprocess_cmd", "=", "config", ".", "get", "(", "'preprocess_cmd'", ",", "\"\"", ")", "\n", "self", ".", "_postprocess_cmd", "=", "config", ".", "get", "(", "'postprocess_cmd'", ",", "\"dan\"", ")", "\n", "self", ".", "_epsilon", "=", "config", ".", "get", "(", "'epsilon'", ",", "1e-05", ")", "\n", "self", ".", "_emb_mapping_in", "=", "config", ".", "get", "(", "'emb_mapping_in'", ",", "False", ")", "\n", "self", ".", "_n_layer_per_block", "=", "config", ".", "get", "(", "'n_layer_per_block'", ",", "1", ")", "\n", "\n", "if", "config", ".", "has", "(", "'sent_type_vocab_size'", ")", ":", "\n", "            ", "self", ".", "_sent_types", "=", "config", "[", "'sent_type_vocab_size'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_sent_types", "=", "config", ".", "get", "(", "'type_vocab_size'", ",", "2", ")", "\n", "\n", "", "self", ".", "_hidden_act", "=", "config", ".", "get", "(", "'hidden_act'", ",", "'gelu'", ")", "\n", "self", ".", "_prepostprocess_dropout", "=", "config", ".", "get", "(", "'hidden_dropout_prob'", ",", "0.1", ")", "\n", "self", ".", "_attention_dropout", "=", "config", ".", "get", "(", "'attention_probs_dropout_prob'", ",", "0.1", ")", "\n", "self", ".", "_weight_sharing", "=", "weight_sharing", "\n", "\n", "self", ".", "_word_emb_name", "=", "\"word_embedding\"", "\n", "self", ".", "_pos_emb_name", "=", "\"pos_embedding\"", "\n", "self", ".", "_sent_emb_name", "=", "\"sent_embedding\"", "\n", "self", ".", "_dtype", "=", "\"float16\"", "if", "use_fp16", "else", "\"float32\"", "\n", "self", ".", "_emb_dtype", "=", "\"float32\"", "\n", "\n", "self", ".", "_task_type", "=", "task_type", "\n", "self", ".", "_is_dialogue_task", "=", "(", "task_type", "==", "\"dialog\"", ")", "\n", "if", "self", ".", "_is_dialogue_task", ":", "\n", "            ", "self", ".", "_role_type_size", "=", "config", "[", "\"role_type_size\"", "]", "\n", "self", ".", "_turn_type_size", "=", "config", "[", "\"turn_type_size\"", "]", "\n", "self", ".", "_role_emb_name", "=", "\"role_embedding\"", "\n", "self", ".", "_turn_emb_name", "=", "\"turn_embedding\"", "\n", "\n", "", "self", ".", "_two_stream", "=", "two_stream", "\n", "if", "decoding", ":", "\n", "            ", "self", ".", "caches", "=", "[", "{", "\n", "\"k\"", ":", "\n", "fluid", ".", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "src_ids", ",", "\n", "shape", "=", "[", "-", "1", ",", "0", ",", "self", ".", "_hidden_size", "]", ",", "\n", "dtype", "=", "self", ".", "_dtype", ",", "\n", "value", "=", "0", ")", ",", "\n", "\"v\"", ":", "\n", "fluid", ".", "layers", ".", "fill_constant_batch_size_like", "(", "\n", "input", "=", "src_ids", ",", "\n", "shape", "=", "[", "-", "1", ",", "0", ",", "self", ".", "_hidden_size", "]", ",", "\n", "dtype", "=", "self", ".", "_dtype", ",", "\n", "value", "=", "0", ")", ",", "\n", "}", "for", "i", "in", "range", "(", "self", ".", "_n_layer", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "caches", "=", "None", "\n", "\n", "# Initialize all weigths by truncated normal initializer, and all biases", "\n", "# will be initialized by constant zero by default.", "\n", "", "self", ".", "_param_initializer", "=", "fluid", ".", "initializer", ".", "TruncatedNormal", "(", "\n", "scale", "=", "config", ".", "get", "(", "'initializer_range'", ",", "0.02", ")", ")", "\n", "self", ".", "key_tag", "=", "key_tag", "\n", "\n", "self", ".", "_build_model", "(", "src_ids", ",", "position_ids", ",", "sentence_ids", ",", "\n", "input_mask", ",", "gather_idx", ",", "role_ids", ",", "turn_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel._gen_input": [[118, 195], ["paddle.layers.embedding", "paddle.layers.embedding", "erniekit.modules.transformer_encoder_gen.pre_process_layer", "paddle.layers.scale", "paddle.layers.stack", "paddle.layers.embedding", "paddle.layers.embedding", "paddle.layers.embedding", "paddle.layers.fc", "paddle.layers.cast", "paddle.layers.cast", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr", "paddle.ParamAttr"], "methods", ["None"], ["", "def", "_gen_input", "(", "self", ",", "src_ids", ",", "position_ids", ",", "sentence_ids", ",", "input_mask", ",", "\n", "role_ids", "=", "None", ",", "turn_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param src_ids:\n        :param position_ids:\n        :param sentence_ids:\n        :param task_ids:\n        :param input_mask:\n        :return:\n        \"\"\"", "\n", "# padding id in vocabulary must be set to 0", "\n", "emb_out", "=", "fluid", ".", "layers", ".", "embedding", "(", "\n", "input", "=", "src_ids", ",", "\n", "size", "=", "[", "self", ".", "_voc_size", ",", "self", ".", "_emb_size", "]", ",", "\n", "dtype", "=", "self", ".", "_emb_dtype", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "self", ".", "_word_emb_name", ",", "initializer", "=", "self", ".", "_param_initializer", ")", ",", "\n", "is_sparse", "=", "False", ")", "\n", "\n", "position_emb_out", "=", "fluid", ".", "layers", ".", "embedding", "(", "\n", "input", "=", "position_ids", ",", "\n", "size", "=", "[", "self", ".", "_max_position_seq_len", ",", "self", ".", "_emb_size", "]", ",", "\n", "dtype", "=", "self", ".", "_emb_dtype", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "self", ".", "_pos_emb_name", ",", "initializer", "=", "self", ".", "_param_initializer", ")", ")", "\n", "\n", "if", "not", "self", ".", "_is_dialogue_task", ":", "\n", "            ", "sent_emb_out", "=", "fluid", ".", "layers", ".", "embedding", "(", "\n", "sentence_ids", ",", "\n", "size", "=", "[", "self", ".", "_sent_types", ",", "self", ".", "_emb_size", "]", ",", "\n", "dtype", "=", "self", ".", "_emb_dtype", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "self", ".", "_sent_emb_name", ",", "initializer", "=", "self", ".", "_param_initializer", ")", ")", "\n", "emb_out", "=", "emb_out", "+", "position_emb_out", "+", "sent_emb_out", "\n", "\n", "", "else", ":", "\n", "            ", "role_emb_out", "=", "fluid", ".", "layers", ".", "embedding", "(", "\n", "input", "=", "role_ids", ",", "\n", "size", "=", "[", "self", ".", "_role_type_size", ",", "self", ".", "_emb_size", "]", ",", "\n", "dtype", "=", "self", ".", "_emb_dtype", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "self", ".", "_role_emb_name", ",", "initializer", "=", "self", ".", "_param_initializer", ")", ")", "\n", "turn_emb_out", "=", "fluid", ".", "layers", ".", "embedding", "(", "\n", "input", "=", "turn_ids", ",", "\n", "size", "=", "[", "self", ".", "_turn_type_size", ",", "self", ".", "_emb_size", "]", ",", "\n", "dtype", "=", "self", ".", "_emb_dtype", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "self", ".", "_turn_emb_name", ",", "initializer", "=", "self", ".", "_param_initializer", ")", ")", "\n", "emb_out", "=", "emb_out", "+", "position_emb_out", "+", "role_emb_out", "+", "turn_emb_out", "\n", "\n", "", "emb_out", "=", "pre_process_layer", "(", "\n", "emb_out", ",", "\n", "self", ".", "_pre_encoder_cmd", ",", "\n", "self", ".", "_prepostprocess_dropout", ",", "\n", "name", "=", "\"pre_encoder\"", ",", "\n", "epsilon", "=", "self", ".", "_epsilon", ")", "\n", "if", "self", ".", "_emb_mapping_in", ":", "\n", "            ", "emb_out", "=", "fluid", ".", "layers", ".", "fc", "(", "input", "=", "emb_out", ",", "\n", "num_flatten_dims", "=", "2", ",", "\n", "size", "=", "self", ".", "_hidden_size", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "'emb_hidden_mapping'", ",", "\n", "initializer", "=", "self", ".", "_param_initializer", ")", ",", "\n", "bias_attr", "=", "'emb_hidden_mapping_bias'", ")", "\n", "\n", "", "if", "self", ".", "_dtype", "is", "\"float16\"", ":", "\n", "            ", "emb_out", "=", "fluid", ".", "layers", ".", "cast", "(", "x", "=", "emb_out", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "input_mask", "=", "fluid", ".", "layers", ".", "cast", "(", "x", "=", "input_mask", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "\n", "", "self_attn_mask", "=", "input_mask", "\n", "self_attn_mask", "=", "fluid", ".", "layers", ".", "scale", "(", "\n", "x", "=", "self_attn_mask", ",", "scale", "=", "1e4", ",", "bias", "=", "-", "1.0", ",", "bias_after_scale", "=", "False", ")", "\n", "n_head_self_attn_mask", "=", "fluid", ".", "layers", ".", "stack", "(", "\n", "x", "=", "[", "self_attn_mask", "]", "*", "self", ".", "_n_head", ",", "axis", "=", "1", ")", "\n", "n_head_self_attn_mask", ".", "stop_gradient", "=", "True", "\n", "\n", "return", "emb_out", ",", "n_head_self_attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode": [[196, 267], ["ernie_gen.ErnieGenModel._gen_input", "ernie_gen.ErnieGenModel._gen_input", "erniekit.modules.transformer_encoder_gen.two_stream_encoder", "ernie_gen.ErnieGenModel._gen_input", "erniekit.modules.transformer_encoder_gen.encoder", "paddle.layers.cast"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel._gen_input", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel._gen_input", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.two_stream_encoder", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel._gen_input", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.transformer_encoder_gen.encoder"], ["", "def", "encode", "(", "self", ",", "src_ids", ",", "position_ids", ",", "sentence_ids", ",", "\n", "input_mask", ",", "gather_idx", "=", "None", ",", "remove_mask", "=", "False", ",", "\n", "role_ids", "=", "None", ",", "turn_ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"transformer encode\"\"\"", "\n", "\n", "if", "self", ".", "_two_stream", ":", "\n", "            ", "emb_out", ",", "n_head_self_attn_mask", "=", "self", ".", "_gen_input", "(", "src_ids", "[", "0", "]", ",", "\n", "position_ids", "[", "0", "]", ",", "sentence_ids", "[", "0", "]", ",", "input_mask", "[", "0", "]", ",", "\n", "role_ids", "=", "role_ids", "[", "0", "]", ",", "turn_ids", "=", "turn_ids", "[", "0", "]", ")", "\n", "g_emb_out", ",", "n_head_query_attn_mask", "=", "self", ".", "_gen_input", "(", "src_ids", "[", "1", "]", ",", "\n", "position_ids", "[", "1", "]", ",", "sentence_ids", "[", "1", "]", ",", "input_mask", "[", "1", "]", ",", "\n", "role_ids", "=", "role_ids", "[", "1", "]", ",", "turn_ids", "=", "turn_ids", "[", "1", "]", ")", "\n", "\n", "self", ".", "_enc_out_context", ",", "self", ".", "_enc_out_query", ",", "self", ".", "_checkpoints", "=", "two_stream_encoder", "(", "\n", "enc_input_context", "=", "emb_out", ",", "\n", "enc_input_query", "=", "g_emb_out", ",", "\n", "attn_bias_context", "=", "n_head_self_attn_mask", ",", "\n", "attn_bias_query", "=", "n_head_query_attn_mask", ",", "\n", "n_layer", "=", "self", ".", "_n_layer", ",", "\n", "n_head", "=", "self", ".", "_n_head", ",", "\n", "d_key", "=", "self", ".", "_hidden_size", "//", "self", ".", "_n_head", ",", "\n", "d_value", "=", "self", ".", "_hidden_size", "//", "self", ".", "_n_head", ",", "\n", "d_model", "=", "self", ".", "_hidden_size", ",", "\n", "d_inner_hid", "=", "self", ".", "_hidden_size", "*", "4", ",", "\n", "prepostprocess_dropout", "=", "self", ".", "_prepostprocess_dropout", ",", "\n", "attention_dropout", "=", "self", ".", "_attention_dropout", ",", "\n", "relu_dropout", "=", "0", ",", "\n", "hidden_act", "=", "self", ".", "_hidden_act", ",", "\n", "preprocess_cmd", "=", "self", ".", "_preprocess_cmd", ",", "\n", "postprocess_cmd", "=", "self", ".", "_postprocess_cmd", ",", "\n", "param_initializer", "=", "self", ".", "_param_initializer", ",", "\n", "name", "=", "'encoder'", ",", "\n", "param_share", "=", "self", ".", "_param_share", ",", "\n", "epsilon", "=", "self", ".", "_epsilon", ",", "\n", "n_layer_per_block", "=", "self", ".", "_n_layer_per_block", ",", "\n", "key_tag", "=", "self", ".", "key_tag", ")", "\n", "\n", "enc_out", "=", "self", ".", "_enc_out_query", "\n", "", "else", ":", "\n", "            ", "emb_out", ",", "n_head_self_attn_mask", "=", "self", ".", "_gen_input", "(", "src_ids", ",", "\n", "position_ids", ",", "sentence_ids", ",", "input_mask", ",", "\n", "role_ids", "=", "role_ids", ",", "turn_ids", "=", "turn_ids", ")", "\n", "enc_out", ",", "self", ".", "_checkpoints", "=", "encoder", "(", "\n", "enc_input", "=", "emb_out", ",", "\n", "attn_bias", "=", "n_head_self_attn_mask", ",", "\n", "n_layer", "=", "self", ".", "_n_layer", ",", "\n", "n_head", "=", "self", ".", "_n_head", ",", "\n", "d_key", "=", "self", ".", "_hidden_size", "//", "self", ".", "_n_head", ",", "\n", "d_value", "=", "self", ".", "_hidden_size", "//", "self", ".", "_n_head", ",", "\n", "d_model", "=", "self", ".", "_hidden_size", ",", "\n", "d_inner_hid", "=", "self", ".", "_hidden_size", "*", "4", ",", "\n", "prepostprocess_dropout", "=", "self", ".", "_prepostprocess_dropout", ",", "\n", "attention_dropout", "=", "self", ".", "_attention_dropout", ",", "\n", "relu_dropout", "=", "0", ",", "\n", "hidden_act", "=", "self", ".", "_hidden_act", ",", "\n", "preprocess_cmd", "=", "self", ".", "_preprocess_cmd", ",", "\n", "postprocess_cmd", "=", "self", ".", "_postprocess_cmd", ",", "\n", "param_initializer", "=", "self", ".", "_param_initializer", ",", "\n", "name", "=", "'encoder'", ",", "\n", "param_share", "=", "self", ".", "_param_share", ",", "\n", "epsilon", "=", "self", ".", "_epsilon", ",", "\n", "n_layer_per_block", "=", "self", ".", "_n_layer_per_block", ",", "\n", "caches", "=", "self", ".", "caches", ",", "\n", "gather_idx", "=", "gather_idx", ",", "\n", "remove_mask", "=", "remove_mask", ",", "\n", "key_tag", "=", "self", ".", "key_tag", ")", "\n", "\n", "", "if", "self", ".", "_dtype", "==", "\"float16\"", ":", "\n", "            ", "enc_out", "=", "fluid", ".", "layers", ".", "cast", "(", "\n", "x", "=", "enc_out", ",", "dtype", "=", "self", ".", "_emb_dtype", ")", "\n", "", "return", "enc_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel._build_model": [[268, 273], ["ernie_gen.ErnieGenModel.encode"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode"], ["", "def", "_build_model", "(", "self", ",", "src_ids", ",", "position_ids", ",", "sentence_ids", ",", "\n", "input_mask", ",", "gather_idx", "=", "None", ",", "role_ids", "=", "None", ",", "turn_ids", "=", "None", ")", ":", "\n", "        ", "self", ".", "_enc_out", "=", "self", ".", "encode", "(", "src_ids", ",", "position_ids", ",", "sentence_ids", ",", "\n", "input_mask", ",", "gather_idx", ",", "remove_mask", "=", "False", ",", "\n", "role_ids", "=", "role_ids", ",", "turn_ids", "=", "turn_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.get_sequence_output": [[274, 279], ["None"], "methods", ["None"], ["", "def", "get_sequence_output", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "_enc_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.get_pooled_output": [[280, 292], ["paddle.layers.slice", "paddle.layers.fc", "paddle.ParamAttr"], "methods", ["None"], ["", "def", "get_pooled_output", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the first feature of each sequence for classification\"\"\"", "\n", "next_sent_feat", "=", "fluid", ".", "layers", ".", "slice", "(", "\n", "input", "=", "self", ".", "_enc_out", ",", "axes", "=", "[", "1", "]", ",", "starts", "=", "[", "0", "]", ",", "ends", "=", "[", "1", "]", ")", "\n", "next_sent_feat", "=", "fluid", ".", "layers", ".", "fc", "(", "\n", "input", "=", "next_sent_feat", ",", "\n", "size", "=", "self", ".", "_hidden_size", ",", "\n", "act", "=", "\"tanh\"", ",", "\n", "param_attr", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "\"pooled_fc.w_0\"", ",", "initializer", "=", "self", ".", "_param_initializer", ")", ",", "\n", "bias_attr", "=", "\"pooled_fc.b_0\"", ")", "\n", "return", "next_sent_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.custom_token_embedding.CustomTokenEmbedding.__init__": [[22, 29], ["base_token_embedding.BaseTokenEmbedding.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "emb_params", ")", ":", "\n", "        ", "BaseTokenEmbedding", ".", "__init__", "(", "self", ",", "emb_params", ")", "\n", "self", ".", "params_name", "=", "None", "\n", "self", ".", "emb_dim", "=", "self", ".", "emb_params", "[", "\"emb_dim\"", "]", "\n", "self", ".", "vocab_size", "=", "self", ".", "emb_params", "[", "\"vocab_size\"", "]", "\n", "self", ".", "vec_path", "=", "self", ".", "emb_params", "[", "\"vec_path\"", "]", "\n", "self", ".", "vocab_path", "=", "self", ".", "emb_params", "[", "\"vocab_path\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.custom_token_embedding.CustomTokenEmbedding.build": [[30, 70], ["open", "logging.info", "logging.info", "logging.info", "time.time", "numpy.stack", "time.time", "logging.info", "numpy.save", "line.rstrip().split", "int", "id2word.append", "open", "f.readline", "os.path.join", "line.strip().split", "numpy.asarray", "numpy.stack.append", "numpy.stack.append", "str", "line.rstrip", "len", "logging.info", "len", "numpy.random.uniform().astype", "datetime.timedelta", "line.strip", "len", "numpy.random.uniform"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "vec_name", ")", ":", "\n", "        ", "\"\"\"\n        \u6dfb\u52a0\u4e00\u4e9b\u81ea\u9876\u4e00\u4e2a\u521d\u59cb\u5316\u4fe1\u606f\uff0c\u5982\u53c2\u6570\u540d\u79f0\n        :return:\n        \"\"\"", "\n", "word2id", "=", "{", "}", "\n", "id2word", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "self", ".", "vocab_path", ",", "\"r\"", ")", ":", "\n", "            ", "word", ",", "idx", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "word2id", "[", "word", "]", "=", "int", "(", "idx", ")", "\n", "id2word", ".", "append", "(", "word", ")", "\n", "", "logging", ".", "info", "(", "\"the size of the vocab is %d\"", "%", "self", ".", "vocab_size", ")", "\n", "logging", ".", "info", "(", "\"loading word2vec from %s\"", "%", "self", ".", "vec_path", ")", "\n", "logging", ".", "info", "(", "\"please wait for a minute.\"", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "vecs", "=", "[", "]", "\n", "word2vec", "=", "{", "}", "\n", "with", "open", "(", "self", ".", "vec_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "readline", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "info", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\" \"", ")", "\n", "word", "=", "info", "[", "0", "]", "\n", "if", "word", "not", "in", "word2id", ":", "\n", "                    ", "continue", "\n", "", "vector", "=", "info", "[", "1", ":", "]", "\n", "if", "len", "(", "vector", ")", "!=", "self", ".", "emb_dim", ":", "\n", "                    ", "logging", ".", "info", "(", "len", "(", "vector", ")", ")", "\n", "", "assert", "(", "len", "(", "vector", ")", "==", "self", ".", "emb_dim", ")", "\n", "word2vec", "[", "word", "]", "=", "np", ".", "asarray", "(", "vector", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "", "", "for", "word", "in", "id2word", ":", "\n", "            ", "if", "word", "in", "word2vec", ":", "\n", "                ", "vecs", ".", "append", "(", "word2vec", "[", "word", "]", ")", "\n", "", "else", ":", "\n", "                ", "vecs", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "-", "0.05", ",", "0.05", ",", "size", "=", "[", "self", ".", "emb_dim", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "", "vecs", "=", "np", ".", "stack", "(", "vecs", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "\"Spent %s on loading word2vec.\"", "%", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "end", "-", "start", ")", ")", ")", "\n", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "'./data/custom_embedding/'", ",", "vec_name", ")", ",", "vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.custom_token_embedding.CustomTokenEmbedding.get_token_embedding": [[71, 101], ["paddle.fluid.layers.sequence_unpad", "os.path.splitext", "numpy.load", "paddle.fluid.ParamAttr", "paddle.fluid.layers.embedding", "os.path.exists", "custom_token_embedding.CustomTokenEmbedding.build", "os.path.join", "os.path.split", "os.path.join", "paddle.fluid.initializer.NumpyArrayInitializer"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build"], ["", "def", "get_token_embedding", "(", "self", ",", "tokens_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens_dict:\n        :return:\n        \"\"\"", "\n", "emb_dict", "=", "{", "}", "\n", "tokens", "=", "tokens_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "tokens_length", "=", "tokens_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "\n", "unpad_data", "=", "fluid", ".", "layers", ".", "sequence_unpad", "(", "tokens", ",", "length", "=", "tokens_length", ")", "\n", "vec_name", ",", "vec_extension_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "self", ".", "vec_path", ")", "[", "1", "]", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "'./data/custom_embedding/'", ",", "vec_name", "+", "'.npy'", ")", ")", ":", "\n", "            ", "CustomTokenEmbedding", ".", "build", "(", "self", ",", "vec_name", ")", "\n", "\n", "", "weight_data", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "'./data/custom_embedding/'", ",", "vec_name", "+", "'.npy'", ")", ")", "\n", "w_param_attrs", "=", "fluid", ".", "ParamAttr", "(", "\n", "name", "=", "self", ".", "name", ",", "\n", "learning_rate", "=", "1", ",", "\n", "initializer", "=", "fluid", ".", "initializer", ".", "NumpyArrayInitializer", "(", "weight_data", ")", ",", "\n", "trainable", "=", "True", ")", "\n", "emb", "=", "fluid", ".", "layers", ".", "embedding", "(", "input", "=", "unpad_data", ",", "\n", "size", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", "]", ",", "\n", "is_sparse", "=", "False", ",", "\n", "param_attr", "=", "w_param_attrs", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "emb_dict", "=", "{", "\n", "InstanceName", ".", "SEQUENCE_EMB", ":", "emb", ",", "\n", "InstanceName", ".", "POOLED_EMB", ":", "None", "\n", "}", "\n", "return", "emb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.custom_token_embedding.CustomTokenEmbedding.get_output_dim": [[102, 107], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "emb_dim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.custom_fluid_embedding.CustomFluidTokenEmbedding.__init__": [[15, 20], ["base_token_embedding.BaseTokenEmbedding.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "emb_params", ")", ":", "\n", "        ", "BaseTokenEmbedding", ".", "__init__", "(", "self", ",", "emb_params", ")", "\n", "self", ".", "params_name", "=", "None", "\n", "self", ".", "vocab_size", "=", "self", ".", "emb_params", "[", "\"vocab_size\"", "]", "\n", "self", ".", "emb_dim", "=", "self", ".", "emb_params", "[", "\"emb_dim\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.custom_fluid_embedding.CustomFluidTokenEmbedding.build": [[21, 27], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        \u6dfb\u52a0\u4e00\u4e9b\u81ea\u9876\u4e00\u4e2a\u521d\u59cb\u5316\u4fe1\u606f\uff0c\u5982\u53c2\u6570\u540d\u79f0\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.custom_fluid_embedding.CustomFluidTokenEmbedding.get_token_embedding": [[28, 42], ["paddle.fluid.layers.sequence_unpad", "paddle.fluid.layers.embedding"], "methods", ["None"], ["", "def", "get_token_embedding", "(", "self", ",", "tokens_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens_dict:\n        :return:\n        \"\"\"", "\n", "tokens", "=", "tokens_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "\n", "tokens_length", "=", "tokens_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "\n", "unpad_data", "=", "fluid", ".", "layers", ".", "sequence_unpad", "(", "tokens", ",", "length", "=", "tokens_length", ")", "\n", "emb", "=", "fluid", ".", "layers", ".", "embedding", "(", "input", "=", "unpad_data", ",", "size", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", "]", ")", "\n", "emb_dict", "=", "{", "\n", "InstanceName", ".", "SEQUENCE_EMB", ":", "emb", ",", "\n", "InstanceName", ".", "POOLED_EMB", ":", "None", "\n", "}", "\n", "return", "emb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.custom_fluid_embedding.CustomFluidTokenEmbedding.get_output_dim": [[43, 48], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "emb_dim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.__init__": [[10, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "emb_params", ")", ":", "\n", "        ", "self", ".", "name", "=", "\"token_emb\"", "\n", "self", ".", "emb_params", "=", "emb_params", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.build": [[14, 19], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.get_token_embedding": [[20, 26], ["None"], "methods", ["None"], ["", "def", "get_token_embedding", "(", "self", ",", "tokens_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens_dict: dict\u5f62\u5f0f\uff0c\u5b58\u50a8\u8f6c\u6362embedding\u4e2d\u9700\u8981\u7684\u539f\u59cbid\u53ca\u4e00\u4e9b\u53c2\u6570\n        :return: dict\u5f62\u5f0f\uff0c\u8bcd\u7ea7\u522b\u548c\u53e5\u5b50\u7ea7\u522b\u7684embedding\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.get_output_dim": [[27, 32], ["None"], "methods", ["None"], ["", "def", "get_output_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.gen_eval.GenerationEval.__init__": [[30, 36], ["erniekit.data.tokenizer.tokenization_wp.BasicTokenizer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "vocab_file", "=", "None", ",", "params", "=", "{", "\"do_lower_case\"", ":", "True", "}", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "eval_script", "=", "None", "\n", "self", ".", "eval_mertrics", "=", "[", "\"bleu\"", "]", "\n", "self", ".", "tokenized_input", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.gen_eval.GenerationEval.eval": [[37, 72], ["subprocess.check_output", "json.loads", "open", "sorted", "json.loads.get", "ret.append", "len", "len", "preds.append", "features.keys", "getattr", "Exception", "gen_eval.GenerationEval.basic_tokenizer.tokenize", "features[].tgt.decode().split", "refs.append", "refs.append", "getattr.", "list", "line.strip", "features.values", "features[].tgt.decode", "gen_eval.GenerationEval.tokenizer.merge_subword", "gen_eval.GenerationEval.basic_tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.FullTokenizer.merge_subword", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize"], ["", "def", "eval", "(", "self", ",", "output_file", ",", "phase", "=", "\"\"", ",", "features", "=", "None", ")", ":", "\n", "        ", "\"\"\"run eval\"\"\"", "\n", "eval_res", "=", "{", "}", "\n", "\n", "if", "len", "(", "self", ".", "eval_mertrics", ")", "==", "0", "or", "len", "(", "features", ")", "==", "0", "or", "list", "(", "features", ".", "values", "(", ")", ")", "[", "0", "]", ".", "tgt", "is", "None", ":", "\n", "            ", "return", "\"no eval result\"", "\n", "", "if", "self", ".", "eval_script", ":", "\n", "            ", "eval_res", "=", "subprocess", ".", "check_output", "(", "[", "self", ".", "eval_script", ",", "output_file", ",", "phase", "]", ")", "\n", "eval_res", "=", "json", ".", "loads", "(", "eval_res", ")", "\n", "", "else", ":", "\n", "            ", "preds", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "output_file", ")", ":", "\n", "                ", "preds", ".", "append", "(", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "\n", "", "refs", "=", "[", "]", "\n", "for", "id", "in", "sorted", "(", "features", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "self", ".", "tokenized_input", ":", "\n", "                    ", "ref", "=", "features", "[", "id", "]", ".", "tgt", ".", "decode", "(", "\"utf8\"", ")", ".", "split", "(", "\" \"", ")", "\n", "refs", ".", "append", "(", "[", "self", ".", "tokenizer", ".", "merge_subword", "(", "ref", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "refs", ".", "append", "(", "[", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "features", "[", "id", "]", ".", "tgt", ")", "]", ")", "\n", "\n", "", "", "for", "mertric", "in", "self", ".", "eval_mertrics", ":", "\n", "                ", "eval_func", "=", "getattr", "(", "self", ",", "mertric", ",", "None", ")", "\n", "if", "eval_func", ":", "\n", "                    ", "eval_res", "[", "mertric", "]", "=", "eval_func", "(", "refs", ",", "preds", ")", "\n", "\n", "", "", "", "ret", "=", "[", "]", "\n", "for", "mertric", "in", "self", ".", "eval_mertrics", ":", "\n", "            ", "mertric_res", "=", "eval_res", ".", "get", "(", "mertric", ",", "None", ")", "\n", "if", "mertric_res", "is", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"Eval mertric: %s is not supported\"", "%", "mertric", ")", "\n", "", "ret", ".", "append", "(", "\"%s: %f\"", "%", "(", "mertric", ",", "mertric_res", ")", ")", "\n", "\n", "", "return", "\", \"", ".", "join", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.gen_eval.GenerationEval.bleu": [[73, 76], ["gen_eval._compute_bleu"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.gen_eval._compute_bleu"], ["", "def", "bleu", "(", "self", ",", "refs", ",", "preds", ")", ":", "\n", "        ", "\"\"\"bleu mertric\"\"\"", "\n", "return", "_compute_bleu", "(", "refs", ",", "preds", ",", "max_order", "=", "4", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.gen_eval._get_ngrams": [[78, 85], ["collections.Counter", "range", "range", "tuple", "len"], "function", ["None"], ["", "", "def", "_get_ngrams", "(", "segment", ",", "max_order", ")", ":", "\n", "    ", "ngram_counts", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "order", "in", "range", "(", "1", ",", "max_order", "+", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "segment", ")", "-", "order", "+", "1", ")", ":", "\n", "            ", "ngram", "=", "tuple", "(", "segment", "[", "i", ":", "i", "+", "order", "]", ")", "\n", "ngram_counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "ngram_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.gen_eval._compute_bleu": [[87, 136], ["zip", "range", "min", "len", "collections.Counter", "gen_eval._get_ngrams", "range", "min", "sum", "math.exp", "float", "math.exp", "gen_eval._get_ngrams", "len", "len", "float", "math.log", "len"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.gen_eval._get_ngrams", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.gen_eval._get_ngrams"], ["", "def", "_compute_bleu", "(", "reference_corpus", ",", "translation_corpus", ",", "max_order", "=", "4", ",", "smooth", "=", "False", ")", ":", "\n", "    ", "matches_by_order", "=", "[", "0", "]", "*", "max_order", "\n", "possible_matches_by_order", "=", "[", "0", "]", "*", "max_order", "\n", "reference_length", "=", "0", "\n", "translation_length", "=", "0", "\n", "for", "(", "references", ",", "translation", ")", "in", "zip", "(", "reference_corpus", ",", "translation_corpus", ")", ":", "\n", "        ", "reference_length", "+=", "min", "(", "len", "(", "r", ")", "for", "r", "in", "references", ")", "\n", "translation_length", "+=", "len", "(", "translation", ")", "\n", "\n", "merged_ref_ngram_counts", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "reference", "in", "references", ":", "\n", "            ", "merged_ref_ngram_counts", "|=", "_get_ngrams", "(", "reference", ",", "max_order", ")", "\n", "", "translation_ngram_counts", "=", "_get_ngrams", "(", "translation", ",", "max_order", ")", "\n", "overlap", "=", "translation_ngram_counts", "&", "merged_ref_ngram_counts", "\n", "for", "ngram", "in", "overlap", ":", "\n", "            ", "matches_by_order", "[", "len", "(", "ngram", ")", "-", "1", "]", "+=", "overlap", "[", "ngram", "]", "\n", "", "for", "order", "in", "range", "(", "1", ",", "max_order", "+", "1", ")", ":", "\n", "            ", "possible_matches", "=", "len", "(", "translation", ")", "-", "order", "+", "1", "\n", "if", "possible_matches", ">", "0", ":", "\n", "                ", "possible_matches_by_order", "[", "order", "-", "1", "]", "+=", "possible_matches", "\n", "\n", "", "", "", "precisions", "=", "[", "0", "]", "*", "max_order", "\n", "for", "i", "in", "range", "(", "0", ",", "max_order", ")", ":", "\n", "        ", "if", "smooth", ":", "\n", "            ", "precisions", "[", "i", "]", "=", "(", "(", "matches_by_order", "[", "i", "]", "+", "1.", ")", "/", "\n", "(", "possible_matches_by_order", "[", "i", "]", "+", "1.", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "possible_matches_by_order", "[", "i", "]", ">", "0", ":", "\n", "                ", "precisions", "[", "i", "]", "=", "(", "float", "(", "matches_by_order", "[", "i", "]", ")", "/", "\n", "possible_matches_by_order", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "precisions", "[", "i", "]", "=", "0.0", "\n", "\n", "", "", "", "if", "min", "(", "precisions", ")", ">", "0", ":", "\n", "        ", "p_log_sum", "=", "sum", "(", "(", "1.", "/", "max_order", ")", "*", "math", ".", "log", "(", "p", ")", "for", "p", "in", "precisions", ")", "\n", "geo_mean", "=", "math", ".", "exp", "(", "p_log_sum", ")", "\n", "", "else", ":", "\n", "        ", "geo_mean", "=", "0", "\n", "\n", "", "ratio", "=", "float", "(", "translation_length", ")", "/", "reference_length", "\n", "\n", "if", "ratio", ">", "1.0", ":", "\n", "        ", "bp", "=", "1.", "\n", "", "else", ":", "\n", "        ", "bp", "=", "math", ".", "exp", "(", "1", "-", "1.", "/", "(", "ratio", "+", "1e-4", ")", ")", "\n", "\n", "", "bleu", "=", "geo_mean", "*", "bp", "\n", "ret", "=", "[", "bleu", ",", "precisions", ",", "bp", ",", "ratio", ",", "translation_length", ",", "reference_length", "]", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.__init__": [[42, 49], ["super().__init__", "dict", "enumerate"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "label_list", ",", "suffix", "=", "False", ")", ":", "\n", "        ", "super", "(", "ChunkEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "id2label_dict", "=", "dict", "(", "enumerate", "(", "label_list", ")", ")", "\n", "self", ".", "suffix", "=", "suffix", "\n", "self", ".", "num_infer_chunks", "=", "0", "\n", "self", ".", "num_label_chunks", "=", "0", "\n", "self", ".", "num_correct_chunks", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.compute": [[50, 88], ["chunk_metrics.extract_tp_actual_correct", "tp_sum.sum", "pred_sum.sum", "true_sum.sum", "chunk_metrics.ChunkEvaluator.update", "isinstance", "labels.numpy.numpy.numpy", "isinstance", "predictions.numpy.numpy.numpy", "range", "chunk_metrics.ChunkEvaluator.id2label_dict.get", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.extract_tp_actual_correct", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "compute", "(", "self", ",", "lengths", ",", "predictions", ",", "labels", ",", "dummy", "=", "None", ")", ":", "\n", "        ", "\"\"\"Computes the precision, recall and F1-score for chunk detection.\n        Args:\n            lengths (tensor): The valid length of every sequence, a tensor with shape `[batch_size]`\n            predictions (tensor): The predictions index, a tensor with shape `[batch_size, sequence_length]`.\n            labels (tensor): The labels index, a tensor with shape `[batch_size, sequence_length]`.\n            dummy (tensor, optional): Unnecessary parameter for compatibility with older versions with parameters list `inputs`, `lengths`, `predictions`, `labels`. Defaults to None.\n        Returns:\n            num_infer_chunks (tensor): the number of the inference chunks.\n            num_label_chunks (tensor): the number of the label chunks.\n            num_correct_chunks (tensor): the number of the correct chunks.\n        \"\"\"", "\n", "if", "dummy", "is", "not", "None", ":", "\n", "# TODO(qiujinxuan): rm compatibility support after lic.", "\n", "            ", "dummy", ",", "lengths", ",", "predictions", ",", "labels", "=", "lengths", ",", "predictions", ",", "labels", ",", "dummy", "\n", "\n", "", "if", "not", "isinstance", "(", "labels", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "labels", "=", "labels", ".", "numpy", "(", ")", "\n", "", "if", "not", "isinstance", "(", "predictions", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "predictions", "=", "predictions", ".", "numpy", "(", ")", "\n", "", "unpad_labels", "=", "[", "[", "\n", "self", ".", "id2label_dict", "[", "index", "]", "\n", "for", "index", "in", "labels", "[", "sent_index", "]", "[", ":", "lengths", "[", "sent_index", "]", "]", "\n", "]", "for", "sent_index", "in", "range", "(", "len", "(", "lengths", ")", ")", "]", "\n", "unpad_predictions", "=", "[", "[", "\n", "self", ".", "id2label_dict", ".", "get", "(", "index", ",", "\"O\"", ")", "\n", "for", "index", "in", "predictions", "[", "sent_index", "]", "[", ":", "lengths", "[", "sent_index", "]", "]", "\n", "]", "for", "sent_index", "in", "range", "(", "len", "(", "lengths", ")", ")", "]", "\n", "\n", "pred_sum", ",", "tp_sum", ",", "true_sum", "=", "extract_tp_actual_correct", "(", "\n", "unpad_labels", ",", "unpad_predictions", ",", "self", ".", "suffix", ")", "\n", "num_correct_chunks", "=", "tp_sum", ".", "sum", "(", ")", "\n", "num_infer_chunks", "=", "pred_sum", ".", "sum", "(", ")", "\n", "num_label_chunks", "=", "true_sum", ".", "sum", "(", ")", "\n", "\n", "self", ".", "update", "(", "num_infer_chunks", ",", "num_label_chunks", ",", "num_correct_chunks", ")", "\n", "\n", "return", "self", ".", "num_infer_chunks", ",", "self", ".", "num_label_chunks", ",", "self", ".", "num_correct_chunks", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator._is_number_or_matrix": [[89, 97], ["chunk_metrics.ChunkEvaluator._is_number_or_matrix._is_number_"], "methods", ["None"], ["", "def", "_is_number_or_matrix", "(", "self", ",", "var", ")", ":", "\n", "        ", "def", "_is_number_", "(", "var", ")", ":", "\n", "            ", "return", "isinstance", "(", "\n", "var", ",", "int", ")", "or", "isinstance", "(", "var", ",", "np", ".", "int64", ")", "or", "isinstance", "(", "\n", "var", ",", "float", ")", "or", "(", "isinstance", "(", "var", ",", "np", ".", "ndarray", ")", "and", "\n", "var", ".", "shape", "==", "(", "1", ",", ")", ")", "\n", "\n", "", "return", "_is_number_", "(", "var", ")", "or", "isinstance", "(", "var", ",", "np", ".", "ndarray", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update": [[98, 125], ["chunk_metrics.ChunkEvaluator._is_number_or_matrix", "ValueError", "chunk_metrics.ChunkEvaluator._is_number_or_matrix", "ValueError", "chunk_metrics.ChunkEvaluator._is_number_or_matrix", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator._is_number_or_matrix", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator._is_number_or_matrix", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator._is_number_or_matrix"], ["", "def", "update", "(", "self", ",", "num_infer_chunks", ",", "num_label_chunks", ",", "num_correct_chunks", ")", ":", "\n", "        ", "\"\"\"\n        This function takes (num_infer_chunks, num_label_chunks, num_correct_chunks) as input,\n        to accumulate and update the corresponding status of the ChunkEvaluator object. The update method is as follows:\n        .. math::\n                   \\\\\\\\ \\\\begin{array}{l}{\\\\text { self. num_infer_chunks }+=\\\\text { num_infer_chunks }} \\\\\\\\ {\\\\text { self. num_Label_chunks }+=\\\\text { num_label_chunks }} \\\\\\\\ {\\\\text { self. num_correct_chunks }+=\\\\text { num_correct_chunks }}\\\\end{array} \\\\\\\\\n        Args:\n            num_infer_chunks(int|numpy.array): The number of chunks in Inference on the given minibatch.\n            num_label_chunks(int|numpy.array): The number of chunks in Label on the given mini-batch.\n            num_correct_chunks(int|float|numpy.array): The number of chunks both in Inference and Label on the\n                                                  given mini-batch.\n        \"\"\"", "\n", "if", "not", "self", ".", "_is_number_or_matrix", "(", "num_infer_chunks", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The 'num_infer_chunks' must be a number(int) or a numpy ndarray.\"", "\n", ")", "\n", "", "if", "not", "self", ".", "_is_number_or_matrix", "(", "num_label_chunks", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The 'num_label_chunks' must be a number(int, float) or a numpy ndarray.\"", "\n", ")", "\n", "", "if", "not", "self", ".", "_is_number_or_matrix", "(", "num_correct_chunks", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The 'num_correct_chunks' must be a number(int, float) or a numpy ndarray.\"", "\n", ")", "\n", "", "self", ".", "num_infer_chunks", "+=", "num_infer_chunks", "\n", "self", ".", "num_label_chunks", "+=", "num_label_chunks", "\n", "self", ".", "num_correct_chunks", "+=", "num_correct_chunks", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.accumulate": [[126, 140], ["float", "float", "float"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function returns the mean precision, recall and f1 score for all accumulated minibatches.\n        Returns:\n            float: mean precision, recall and f1 score.\n        \"\"\"", "\n", "precision", "=", "float", "(", "\n", "self", ".", "num_correct_chunks", "/", "\n", "self", ".", "num_infer_chunks", ")", "if", "self", ".", "num_infer_chunks", "else", "0.", "\n", "recall", "=", "float", "(", "self", ".", "num_correct_chunks", "/", "\n", "self", ".", "num_label_chunks", ")", "if", "self", ".", "num_label_chunks", "else", "0.", "\n", "f1_score", "=", "float", "(", "2", "*", "precision", "*", "recall", "/", "(", "\n", "precision", "+", "recall", ")", ")", "if", "self", ".", "num_correct_chunks", "else", "0.", "\n", "return", "precision", ",", "recall", ",", "f1_score", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.reset": [[141, 148], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reset function empties the evaluation memory for previous mini-batches.\n        \"\"\"", "\n", "self", ".", "num_infer_chunks", "=", "0", "\n", "self", ".", "num_label_chunks", "=", "0", "\n", "self", ".", "num_correct_chunks", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.name": [[149, 154], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return name of metric instance.\n        \"\"\"", "\n", "return", "\"precision\"", ",", "\"recall\"", ",", "\"f1\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.extract_tp_actual_correct": [[11, 33], ["collections.defaultdict", "collections.defaultdict", "seqeval.metrics.sequence_labeling.get_entities", "seqeval.metrics.sequence_labeling.get_entities", "sorted", "numpy.array", "numpy.array", "numpy.array", "entities_true[].add", "entities_pred[].add", "collections.defaultdict.get", "collections.defaultdict.get", "numpy.append", "numpy.append", "numpy.append", "set", "set", "set", "set", "len", "len", "len", "collections.defaultdict.keys", "collections.defaultdict.keys"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["def", "extract_tp_actual_correct", "(", "y_true", ",", "y_pred", ",", "suffix", ",", "*", "args", ")", ":", "\n", "    ", "\"\"\"actual_correct\"\"\"", "\n", "entities_true", "=", "defaultdict", "(", "set", ")", "\n", "entities_pred", "=", "defaultdict", "(", "set", ")", "\n", "for", "type_name", ",", "start", ",", "end", "in", "get_entities", "(", "y_true", ",", "suffix", ")", ":", "\n", "        ", "entities_true", "[", "type_name", "]", ".", "add", "(", "(", "start", ",", "end", ")", ")", "\n", "", "for", "type_name", ",", "start", ",", "end", "in", "get_entities", "(", "y_pred", ",", "suffix", ")", ":", "\n", "        ", "entities_pred", "[", "type_name", "]", ".", "add", "(", "(", "start", ",", "end", ")", ")", "\n", "\n", "", "target_names", "=", "sorted", "(", "set", "(", "entities_true", ".", "keys", "(", ")", ")", "|", "set", "(", "entities_pred", ".", "keys", "(", ")", ")", ")", "\n", "\n", "tp_sum", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pred_sum", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "true_sum", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "type_name", "in", "target_names", ":", "\n", "        ", "entities_true_type", "=", "entities_true", ".", "get", "(", "type_name", ",", "set", "(", ")", ")", "\n", "entities_pred_type", "=", "entities_pred", ".", "get", "(", "type_name", ",", "set", "(", ")", ")", "\n", "tp_sum", "=", "np", ".", "append", "(", "tp_sum", ",", "len", "(", "entities_true_type", "&", "entities_pred_type", ")", ")", "\n", "pred_sum", "=", "np", ".", "append", "(", "pred_sum", ",", "len", "(", "entities_pred_type", ")", ")", "\n", "true_sum", "=", "np", ".", "append", "(", "true_sum", ",", "len", "(", "entities_true_type", ")", ")", "\n", "\n", "", "return", "pred_sum", ",", "tp_sum", ",", "true_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.Metrics.eval": [[31, 34], ["None"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "\"\"\"need overwrite\uff0c run_value\u662f\u52a8\u6001fetch\u56de\u6765\u7684\u503c\uff0c\u6309\u9700\u8981\u8fdb\u884c\u8ba1\u7b97\u548c\u6253\u5370\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.Chunk.eval": [[38, 53], ["paddle.fluid.metrics.ChunkEvaluator", "isinstance", "paddle.fluid.metrics.ChunkEvaluator.eval", "range", "range", "float", "float", "float", "len", "paddle.fluid.metrics.ChunkEvaluator.update", "len", "paddle.fluid.metrics.ChunkEvaluator.update", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "chunk_metrics", "=", "fluid", ".", "metrics", ".", "ChunkEvaluator", "(", ")", "\n", "num_infer_chunks", ",", "num_label_chunks", ",", "num_correct_chunks", "=", "run_value", "\n", "if", "isinstance", "(", "num_infer_chunks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "num_infer_chunks", ")", ")", ":", "\n", "                ", "chunk_metrics", ".", "update", "(", "np", ".", "array", "(", "num_infer_chunks", "[", "i", "]", "[", "0", "]", ")", ",", "np", ".", "array", "(", "num_label_chunks", "[", "i", "]", "[", "0", "]", ")", ",", "\n", "np", ".", "array", "(", "num_correct_chunks", "[", "i", "]", "[", "0", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "num_infer_chunks", ")", ")", ":", "\n", "                ", "chunk_metrics", ".", "update", "(", "np", ".", "array", "(", "num_infer_chunks", "[", "i", "]", ")", ",", "np", ".", "array", "(", "num_label_chunks", "[", "i", "]", ")", ",", "\n", "np", ".", "array", "(", "num_correct_chunks", "[", "i", "]", ")", ")", "\n", "", "", "precision", ",", "recall", ",", "f1_score", "=", "chunk_metrics", ".", "eval", "(", ")", "\n", "result", "=", "{", "\"precision\"", ":", "float", "(", "\"%.4f\"", "%", "precision", ")", ",", "\"recall\"", ":", "float", "(", "\"%.4f\"", "%", "recall", ")", ",", "\n", "\"f1_score\"", ":", "float", "(", "\"%.4f\"", "%", "f1_score", ")", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.Acc.eval": [[57, 83], ["isinstance", "numpy.array", "isinstance", "sklearn.metrics.accuracy_score", "float", "numpy.array", "numpy.array", "tmp_arr.append", "tmp_arr.extend", "label.flatten", "tmp_arr.append", "numpy.argmax", "numpy.argmax"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "predict", ",", "label", "=", "run_value", "\n", "if", "isinstance", "(", "predict", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "predict", ":", "\n", "                ", "for", "pre", "in", "one_batch", ":", "\n", "                    ", "tmp_arr", ".", "append", "(", "np", ".", "argmax", "(", "pre", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "pre", "in", "predict", ":", "\n", "                ", "tmp_arr", ".", "append", "(", "np", ".", "argmax", "(", "pre", ")", ")", "\n", "\n", "", "", "predict_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "\n", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "label", ":", "\n", "                ", "batch_arr", "=", "[", "one_label", "for", "one_label", "in", "one_batch", "]", "\n", "tmp_arr", ".", "extend", "(", "batch_arr", ")", "\n", "", "label_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "", "else", ":", "\n", "            ", "label_arr", "=", "np", ".", "array", "(", "label", ".", "flatten", "(", ")", ")", "\n", "\n", "", "score", "=", "metrics", ".", "accuracy_score", "(", "label_arr", ",", "predict_arr", ")", "\n", "\n", "return", "float", "(", "\"%.4f\"", "%", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.Precision.eval": [[87, 113], ["isinstance", "numpy.array", "isinstance", "sklearn.metrics.precision_score", "float", "numpy.array", "numpy.array", "tmp_arr.append", "tmp_arr.extend", "label.flatten", "tmp_arr.append", "numpy.argmax", "numpy.argmax"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "predict", ",", "label", "=", "run_value", "\n", "if", "isinstance", "(", "predict", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "predict", ":", "\n", "                ", "for", "pre", "in", "one_batch", ":", "\n", "                    ", "tmp_arr", ".", "append", "(", "np", ".", "argmax", "(", "pre", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "pre", "in", "predict", ":", "\n", "                ", "tmp_arr", ".", "append", "(", "np", ".", "argmax", "(", "pre", ")", ")", "\n", "\n", "", "", "predict_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "\n", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "label", ":", "\n", "                ", "batch_arr", "=", "[", "one_label", "for", "one_label", "in", "one_batch", "]", "\n", "tmp_arr", ".", "extend", "(", "batch_arr", ")", "\n", "", "label_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "", "else", ":", "\n", "            ", "label_arr", "=", "np", ".", "array", "(", "label", ".", "flatten", "(", ")", ")", "\n", "\n", "", "score", "=", "metrics", ".", "precision_score", "(", "label_arr", ",", "predict_arr", ",", "average", "=", "\"macro\"", ")", "\n", "# logging.info(\"sklearn precision macro score = \", score)", "\n", "return", "float", "(", "\"%.4f\"", "%", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.Recall.eval": [[117, 145], ["isinstance", "numpy.array", "isinstance", "sklearn.metrics.recall_score", "float", "numpy.array", "numpy.array", "tmp_arr.append", "tmp_arr.extend", "label.flatten", "tmp_arr.append", "numpy.argmax", "numpy.argmax"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "predict", ",", "label", "=", "run_value", "\n", "predict_arr", "=", "None", "\n", "label_arr", "=", "None", "\n", "if", "isinstance", "(", "predict", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "predict", ":", "\n", "                ", "for", "pre", "in", "one_batch", ":", "\n", "                    ", "tmp_arr", ".", "append", "(", "np", ".", "argmax", "(", "pre", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "pre", "in", "predict", ":", "\n", "                ", "tmp_arr", ".", "append", "(", "np", ".", "argmax", "(", "pre", ")", ")", "\n", "\n", "", "", "predict_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "\n", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "label", ":", "\n", "                ", "batch_arr", "=", "[", "one_label", "for", "one_label", "in", "one_batch", "]", "\n", "tmp_arr", ".", "extend", "(", "batch_arr", ")", "\n", "", "label_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "", "else", ":", "\n", "            ", "label_arr", "=", "np", ".", "array", "(", "label", ".", "flatten", "(", ")", ")", "\n", "\n", "", "score", "=", "metrics", ".", "recall_score", "(", "label_arr", ",", "predict_arr", ",", "average", "=", "\"macro\"", ")", "\n", "# logging.info(\"sklearn recall macro score = \", score)", "\n", "return", "float", "(", "\"%.4f\"", "%", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.F1.eval": [[150, 178], ["isinstance", "numpy.array", "isinstance", "sklearn.metrics.f1_score", "float", "numpy.array", "numpy.array", "tmp_arr.append", "tmp_arr.extend", "label.flatten", "tmp_arr.append", "numpy.argmax", "numpy.argmax"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "predict", ",", "label", "=", "run_value", "\n", "predict_arr", "=", "None", "\n", "label_arr", "=", "None", "\n", "if", "isinstance", "(", "predict", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "predict", ":", "\n", "                ", "for", "pre", "in", "one_batch", ":", "\n", "                    ", "tmp_arr", ".", "append", "(", "np", ".", "argmax", "(", "pre", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "pre", "in", "predict", ":", "\n", "                ", "tmp_arr", ".", "append", "(", "np", ".", "argmax", "(", "pre", ")", ")", "\n", "\n", "", "", "predict_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "\n", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "label", ":", "\n", "                ", "batch_arr", "=", "[", "one_label", "for", "one_label", "in", "one_batch", "]", "\n", "tmp_arr", ".", "extend", "(", "batch_arr", ")", "\n", "", "label_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "", "else", ":", "\n", "            ", "label_arr", "=", "np", ".", "array", "(", "label", ".", "flatten", "(", ")", ")", "\n", "\n", "", "score", "=", "metrics", ".", "f1_score", "(", "label_arr", ",", "predict_arr", ",", "average", "=", "\"macro\"", ")", "\n", "# logging.info(\"sklearn f1 macro score = \", score)", "\n", "return", "float", "(", "\"%.4f\"", "%", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.Auc.eval": [[182, 215], ["isinstance", "numpy.array", "isinstance", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "float", "numpy.array", "numpy.array", "tmp_arr.append", "tmp_arr.extend", "label.flatten", "tmp_arr.append", "len", "len"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "predict", ",", "label", "=", "run_value", "\n", "predict_arr", "=", "None", "\n", "label_arr", "=", "None", "\n", "\n", "if", "isinstance", "(", "predict", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "predict", ":", "\n", "                ", "for", "pre", "in", "one_batch", ":", "\n", "                    ", "assert", "len", "(", "pre", ")", "==", "2", ",", "\"auc metrics only support binary classification, \\\n                                                          and the positive label must be 1, negative label must be 0\"", "\n", "tmp_arr", ".", "append", "(", "pre", "[", "1", "]", ")", "\n", "", "", "", "else", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "pre", "in", "predict", ":", "\n", "                ", "assert", "len", "(", "pre", ")", "==", "2", ",", "\"auc metrics only support binary classification, \"", "\"and the positive label must be 1, negative label must be 0\"", "\n", "tmp_arr", ".", "append", "(", "pre", "[", "1", "]", ")", "\n", "\n", "", "", "predict_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "\n", "if", "isinstance", "(", "label", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "label", ":", "\n", "                ", "batch_arr", "=", "[", "one_label", "for", "one_label", "in", "one_batch", "]", "\n", "tmp_arr", ".", "extend", "(", "batch_arr", ")", "\n", "", "label_arr", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "", "else", ":", "\n", "            ", "label_arr", "=", "np", ".", "array", "(", "label", ".", "flatten", "(", ")", ")", "\n", "\n", "", "fpr", ",", "tpr", ",", "thresholds", "=", "metrics", ".", "roc_curve", "(", "label_arr", ",", "predict_arr", ")", "\n", "score", "=", "metrics", ".", "auc", "(", "fpr", ",", "tpr", ")", "\n", "return", "float", "(", "\"%.4f\"", "%", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.Pn.eval": [[219, 229], ["numpy.sum", "numpy.sum", "float", "float"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "pos_score", ",", "neg_score", "=", "run_value", "\n", "wrong_cnt", "=", "np", ".", "sum", "(", "pos_score", "<=", "neg_score", ")", "\n", "right_cnt", "=", "np", ".", "sum", "(", "pos_score", ">", "neg_score", ")", "\n", "if", "wrong_cnt", "==", "0", ":", "\n", "            ", "pn", "=", "float", "(", "\"inf\"", ")", "\n", "", "else", ":", "\n", "            ", "pn", "=", "float", "(", "right_cnt", ")", "/", "wrong_cnt", "\n", "\n", "", "return", "pn", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.PairWiseAcc.eval": [[233, 247], ["isinstance", "float", "range", "numpy.sum", "numpy.sum", "len", "numpy.sum", "numpy.sum", "float"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "pos_score", ",", "neg_score", "=", "run_value", "\n", "wrong_cnt", "=", "0", "\n", "right_cnt", "=", "0", "\n", "if", "isinstance", "(", "pos_score", ",", "list", ")", ":", "\n", "            ", "for", "index", "in", "range", "(", "len", "(", "pos_score", ")", ")", ":", "\n", "                ", "wrong_cnt", "+=", "np", ".", "sum", "(", "pos_score", "[", "index", "]", "<=", "neg_score", "[", "index", "]", ")", "\n", "right_cnt", "+=", "np", ".", "sum", "(", "pos_score", "[", "index", "]", ">", "neg_score", "[", "index", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "wrong_cnt", "=", "np", ".", "sum", "(", "pos_score", "<=", "neg_score", ")", "\n", "right_cnt", "=", "np", ".", "sum", "(", "pos_score", ">", "neg_score", ")", "\n", "\n", "", "pn", "=", "float", "(", "right_cnt", ")", "/", "(", "wrong_cnt", "+", "right_cnt", ")", "*", "1.0", "\n", "return", "float", "(", "\"%.4f\"", "%", "pn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.Ppl.eval": [[252, 274], ["numpy.mean", "isinstance", "numpy.sum", "numpy.exp", "float", "numpy.array", "int", "float", "tmp_arr.extend"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "label_len", ",", "loss", "=", "run_value", "\n", "cost_train", "=", "np", ".", "mean", "(", "loss", ")", "\n", "\n", "if", "isinstance", "(", "label_len", ",", "list", ")", ":", "\n", "            ", "tmp_arr", "=", "[", "]", "\n", "for", "one_batch", "in", "label_len", ":", "\n", "                ", "batch_arr", "=", "[", "one_len", "for", "one_len", "in", "one_batch", "]", "\n", "tmp_arr", ".", "extend", "(", "batch_arr", ")", "\n", "", "label_len", "=", "np", ".", "array", "(", "tmp_arr", ")", "\n", "\n", "", "word_count", "=", "np", ".", "sum", "(", "label_len", ")", "\n", "total_loss", "=", "cost_train", "*", "label_len", ".", "shape", "[", "0", "]", "\n", "try_loss", "=", "total_loss", "/", "word_count", "\n", "ppl", "=", "np", ".", "exp", "(", "total_loss", "/", "word_count", ")", "\n", "\n", "p_inf", "=", "float", "(", "\"inf\"", ")", "\n", "if", "ppl", "<", "p_inf", ":", "\n", "            ", "ppl", "=", "int", "(", "ppl", ")", "\n", "\n", "", "result", "=", "{", "\"ave_loss\"", ":", "float", "(", "\"%.4f\"", "%", "try_loss", ")", ",", "\"ppl\"", ":", "ppl", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.write_predictions": [[279, 422], ["logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "sorted", "collections.namedtuple", "sklearn.metrics.MRC._compute_softmax", "enumerate", "open", "writer.write", "open", "writer.write", "sklearn.metrics.MRC._get_best_indexes", "sklearn.metrics.MRC._get_best_indexes", "nbest.append", "nbest.append", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "len", "tok_text.strip.strip.replace", "tok_text.strip.strip.replace", "tok_text.strip.strip.strip", "sklearn.metrics.MRC.get_final_text", "collections.namedtuple.", "collections.namedtuple.", "json.dumps", "json.dumps", "sorted.append", "tok_text.strip.strip.split", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._compute_softmax", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.get_final_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "write_predictions", "(", "self", ",", "all_examples", ",", "all_features", ",", "all_results", ",", "n_best_size", ",", "\n", "max_answer_length", ",", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ")", ":", "\n", "\n", "        ", "\"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "logging", ".", "info", "(", "\"Writing predictions to: %s\"", "%", "(", "output_prediction_file", ")", ")", "\n", "logging", ".", "info", "(", "\"Writing nbest to: %s\"", "%", "(", "output_nbest_file", ")", ")", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "            ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "            ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "[", "\n", "\"feature_index\"", ",", "\"start_index\"", ",", "\"end_index\"", ",", "\"start_logit\"", ",", "\n", "\"end_logit\"", "\n", "]", ")", "\n", "\n", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "            ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "prelim_predictions", "=", "[", "]", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "start_indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "start_logits", ",", "n_best_size", ")", "\n", "end_indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "end_logits", ",", "n_best_size", ")", "\n", "\n", "for", "start_index", "in", "start_indexes", ":", "\n", "                    ", "for", "end_index", "in", "end_indexes", ":", "\n", "# We could hypothetically create invalid predictions, e.g., predict", "\n", "# that the start of the span is in the question. We throw out all", "\n", "# invalid predictions.", "\n", "                        ", "if", "start_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "start_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                            ", "continue", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "start_index", ",", "False", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", "<", "start_index", ":", "\n", "                            ", "continue", "\n", "", "length", "=", "end_index", "-", "start_index", "+", "1", "\n", "if", "length", ">", "max_answer_length", ":", "\n", "                            ", "continue", "\n", "", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "start_index", ",", "\n", "end_index", "=", "end_index", ",", "\n", "start_logit", "=", "result", ".", "start_logits", "[", "start_index", "]", ",", "\n", "end_logit", "=", "result", ".", "end_logits", "[", "end_index", "]", ")", ")", "\n", "\n", "", "", "", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "start_logit", "+", "x", ".", "end_logit", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "                ", "if", "len", "(", "nbest", ")", ">=", "n_best_size", ":", "\n", "                    ", "break", "\n", "", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "if", "pred", ".", "start_index", ">", "0", ":", "# this is a non-null prediction", "\n", "                    ", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "start_index", ":", "(", "pred", ".", "end_index", "+", "1", "\n", ")", "]", "\n", "orig_doc_start", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "start_index", "]", "\n", "orig_doc_end", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "end_index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc_start", ":", "(", "orig_doc_end", "+", "\n", "1", ")", "]", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_tokens", ")", "\n", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\"\"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "final_text", "=", "self", ".", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ")", "\n", "if", "final_text", "in", "seen_predictions", ":", "\n", "                        ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "final_text", "=", "\"\"", "\n", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "\n", "", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "start_logit", "=", "pred", ".", "start_logit", ",", "\n", "end_logit", "=", "pred", ".", "end_logit", ")", ")", "\n", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "if", "not", "nbest", ":", "\n", "                ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "\"empty\"", ",", "start_logit", "=", "0.0", ",", "end_logit", "=", "0.0", ")", ")", "\n", "\n", "", "total_scores", "=", "[", "]", "\n", "best_non_null_entry", "=", "None", "\n", "for", "entry", "in", "nbest", ":", "\n", "                ", "total_scores", ".", "append", "(", "entry", ".", "start_logit", "+", "entry", ".", "end_logit", ")", "\n", "\n", "", "probs", "=", "self", ".", "_compute_softmax", "(", "total_scores", ")", "\n", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "                ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"start_logit\"", "]", "=", "entry", ".", "start_logit", "\n", "output", "[", "\"end_logit\"", "]", "=", "entry", ".", "end_logit", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "\n", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "[", "0", "]", "[", "\"text\"", "]", "\n", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ",", "ensure_ascii", "=", "False", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "with", "open", "(", "output_nbest_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_nbest_json", ",", "indent", "=", "4", ",", "ensure_ascii", "=", "False", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.write_predictions_with_negative": [[423, 599], ["logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "prelim_predictions.append", "collections.namedtuple", "sklearn.metrics.MRC._compute_softmax", "enumerate", "open", "writer.write", "open", "writer.write", "numpy.exp", "sklearn.metrics.MRC._get_best_indexes", "sklearn.metrics.MRC._get_best_indexes", "sorted", "any", "prelim_predictions.append", "nbest.append", "nbest.append", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "numpy.sum", "collections.namedtuple.", "tok_text.strip.strip.replace", "tok_text.strip.strip.replace", "tok_text.strip.strip.strip", "sklearn.metrics.MRC.get_final_text", "collections.namedtuple.", "collections.namedtuple.", "json.dumps", "json.dumps", "numpy.max", "prelim_predictions.append", "tok_text.strip.strip.split", "len", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._compute_softmax", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.get_final_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "", "def", "write_predictions_with_negative", "(", "self", ",", "all_examples", ",", "all_features", ",", "all_results", ",", "n_best_size", ",", "\n", "max_answer_length", ",", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ",", "threshold", "=", "0.5", ")", ":", "\n", "\n", "        ", "\"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "logging", ".", "info", "(", "\"Writing predictions to: %s\"", "%", "(", "output_prediction_file", ")", ")", "\n", "logging", ".", "info", "(", "\"Writing nbest to: %s\"", "%", "(", "output_nbest_file", ")", ")", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "            ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "            ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "[", "\n", "\"feature_index\"", ",", "\"start_index\"", ",", "\"end_index\"", ",", "\"start_logit\"", ",", "\n", "\"end_logit\"", "\n", "]", ")", "\n", "\n", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "            ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "min_null_prediction", "=", "None", "\n", "prelim_predictions", "=", "[", "]", "\n", "score_answerable", "=", "-", "1", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "\n", "exp_answerable_scores", "=", "np", ".", "exp", "(", "result", ".", "cls_logits", "-", "np", ".", "max", "(", "result", ".", "cls_logits", ")", ")", "\n", "feature_answerable_score", "=", "exp_answerable_scores", "/", "np", ".", "sum", "(", "exp_answerable_scores", ")", "\n", "\n", "if", "feature_answerable_score", "[", "-", "1", "]", ">", "score_answerable", ":", "\n", "                    ", "score_answerable", "=", "feature_answerable_score", "[", "-", "1", "]", "\n", "answerable_probs", "=", "feature_answerable_score", "\n", "\n", "", "feature_null_score", "=", "result", ".", "start_logits", "[", "0", "]", "+", "result", ".", "end_logits", "[", "0", "]", "\n", "\n", "if", "min_null_prediction", "is", "None", "or", "min_null_prediction", ".", "start_logit", "+", "min_null_prediction", ".", "end_logit", ">", "feature_null_score", ":", "\n", "                    ", "min_null_prediction", "=", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "0", ",", "\n", "end_index", "=", "0", ",", "\n", "start_logit", "=", "result", ".", "start_logits", "[", "0", "]", ",", "\n", "end_logit", "=", "result", ".", "end_logits", "[", "0", "]", "\n", ")", "\n", "\n", "", "start_indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "start_logits", ",", "n_best_size", ")", "\n", "end_indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "end_logits", ",", "n_best_size", ")", "\n", "\n", "for", "start_index", "in", "start_indexes", ":", "\n", "                    ", "for", "end_index", "in", "end_indexes", ":", "\n", "# We could hypothetically create invalid predictions, e.g., predict", "\n", "# that the start of the span is in the question. We throw out all", "\n", "# invalid predictions.", "\n", "                        ", "if", "start_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "start_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                            ", "continue", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "start_index", ",", "False", ")", ":", "\n", "                            ", "continue", "\n", "", "if", "end_index", "<", "start_index", ":", "\n", "                            ", "continue", "\n", "", "length", "=", "end_index", "-", "start_index", "+", "1", "\n", "if", "length", ">", "max_answer_length", ":", "\n", "                            ", "continue", "\n", "", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "start_index", ",", "\n", "end_index", "=", "end_index", ",", "\n", "start_logit", "=", "result", ".", "start_logits", "[", "start_index", "]", ",", "\n", "end_logit", "=", "result", ".", "end_logits", "[", "end_index", "]", ")", ")", "\n", "\n", "", "", "", "prelim_predictions", ".", "append", "(", "min_null_prediction", ")", "\n", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "start_logit", "+", "x", ".", "end_logit", ")", ",", "\n", "reverse", "=", "True", ")", "[", ":", "n_best_size", "]", "\n", "\n", "if", "not", "any", "(", "p", ".", "start_index", "==", "0", "and", "p", ".", "end_index", "==", "0", "for", "p", "in", "prelim_predictions", ")", ":", "\n", "                ", "prelim_predictions", ".", "append", "(", "min_null_prediction", ")", "\n", "\n", "", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "                ", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "if", "pred", ".", "start_index", ">", "0", ":", "# this is a non-null prediction", "\n", "                    ", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "start_index", ":", "(", "pred", ".", "end_index", "+", "1", "\n", ")", "]", "\n", "orig_doc_start", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "start_index", "]", "\n", "orig_doc_end", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "end_index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc_start", ":", "(", "orig_doc_end", "+", "\n", "1", ")", "]", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_tokens", ")", "\n", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\"\"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "final_text", "=", "self", ".", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ")", "\n", "if", "final_text", "==", "\"\"", ":", "\n", "                        ", "final_text", "=", "\"no answer\"", "\n", "", "if", "final_text", "in", "seen_predictions", ":", "\n", "                        ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "", "else", ":", "\n", "                    ", "final_text", "=", "\"no answer\"", "\n", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "\n", "", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "start_logit", "=", "pred", ".", "start_logit", ",", "\n", "end_logit", "=", "pred", ".", "end_logit", ")", ")", "\n", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "if", "not", "nbest", ":", "\n", "                ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "\"no answer\"", ",", "start_logit", "=", "0.0", ",", "end_logit", "=", "0.0", ")", ")", "\n", "\n", "", "total_scores", "=", "[", "]", "\n", "for", "entry", "in", "nbest", ":", "\n", "                ", "total_scores", ".", "append", "(", "entry", ".", "start_logit", "+", "entry", ".", "end_logit", ")", "\n", "\n", "", "probs", "=", "self", ".", "_compute_softmax", "(", "total_scores", ")", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "                ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"start_logit\"", "]", "=", "entry", ".", "start_logit", "\n", "output", "[", "\"end_logit\"", "]", "=", "entry", ".", "end_logit", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "\n", "i", "=", "0", "\n", "while", "nbest_json", "[", "i", "]", "[", "'text'", "]", "==", "\"no answer\"", "and", "i", "<", "len", "(", "nbest_json", ")", "-", "1", ":", "\n", "                ", "i", "+=", "1", "\n", "", "best_non_null_entry", "=", "nbest_json", "[", "i", "]", "\n", "\n", "if", "answerable_probs", "[", "1", "]", "<", "threshold", ":", "\n", "                ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "\"no answer\"", "\n", "", "else", ":", "\n", "                ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "best_non_null_entry", "[", "\"text\"", "]", "\n", "\n", "", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ",", "ensure_ascii", "=", "False", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "with", "open", "(", "output_nbest_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_nbest_json", ",", "indent", "=", "4", ",", "ensure_ascii", "=", "False", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.write_cloze_predictions": [[600, 784], ["logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "dict", "dict", "collections.OrderedDict.items", "dict", "dict.items", "json.dump", "example_index_to_features[].append", "enumerate", "sorted", "collections.namedtuple", "sklearn.metrics.MRC._compute_softmax", "enumerate", "key.split", "dict", "dict", "dict.items", "open", "sklearn.metrics.MRC._get_best_indexes", "nbest.append", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "all_context_dict[].append", "dict.items", "len", "sorted.append", "len", "tok_text.strip.strip.replace", "tok_text.strip.strip.replace", "tok_text.strip.strip.strip", "sklearn.metrics.MRC.get_final_text", "nbest.append", "collections.namedtuple.", "len", "int.replace", "int.replace", "len", "feature.token_is_max_context.get", "collections.namedtuple.", "tok_text.strip.strip.split", "collections.namedtuple.", "len", "logging.error", "logging.error", "logging.error", "logging.error", "len", "len", "len", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._compute_softmax", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.get_final_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "", "def", "write_cloze_predictions", "(", "self", ",", "all_examples", ",", "all_features", ",", "all_results", ",", "n_best_size", ",", "\n", "max_answer_length", ",", "do_lower_case", ",", "output_prediction_file", ",", "\n", "output_nbest_file", ")", ":", "\n", "        ", "\"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "\n", "logging", ".", "info", "(", "\"Writing predictions to: %s\"", "%", "(", "output_prediction_file", ")", ")", "\n", "logging", ".", "info", "(", "\"Writing nbest to: %s\"", "%", "(", "output_nbest_file", ")", ")", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "            ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "            ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "[", "\n", "\"feature_index\"", ",", "\"index\"", ",", "\"logit\"", "]", ")", "\n", "\n", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "            ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "prelim_predictions", "=", "[", "]", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "                ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "indexes", "=", "self", ".", "_get_best_indexes", "(", "result", ".", "logits", ",", "n_best_size", ")", "\n", "\n", "for", "index", "in", "indexes", ":", "\n", "                    ", "if", "index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                        ", "continue", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "index", ",", "False", ")", ":", "\n", "                        ", "continue", "\n", "", "length", "=", "1", "\n", "\n", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "index", "=", "index", ",", "\n", "logit", "=", "result", ".", "logits", "[", "index", "]", ")", ")", "\n", "\n", "", "", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "logit", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"logit\"", "]", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "                ", "if", "len", "(", "nbest", ")", ">=", "n_best_size", ":", "\n", "                    ", "break", "\n", "", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "if", "pred", ".", "index", ">", "0", ":", "# this is a non-null prediction", "\n", "                    ", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "index", ":", "(", "pred", ".", "index", "+", "1", ")", "]", "\n", "orig_doc", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc", ":", "(", "orig_doc", "+", "1", ")", "]", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_tokens", ")", "\n", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\"\"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "final_text", "=", "self", ".", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ")", "\n", "if", "final_text", "in", "seen_predictions", ":", "\n", "                        ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "logit", "=", "pred", ".", "logit", ")", ")", "\n", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "", "if", "not", "nbest", ":", "\n", "                ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "\"empty\"", ",", "logit", "=", "0.0", ")", ")", "\n", "\n", "", "total_scores", "=", "[", "]", "\n", "for", "entry", "in", "nbest", ":", "\n", "                ", "total_scores", ".", "append", "(", "entry", ".", "logit", ")", "\n", "\n", "", "probs", "=", "self", ".", "_compute_softmax", "(", "total_scores", ")", "\n", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "                ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"logit\"", "]", "=", "entry", ".", "logit", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "\n", "# all_predictions[example.qas_id] = nbest_json[0][\"text\"]", "\n", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "[", "[", "tmp", "[", "\"text\"", "]", "for", "tmp", "in", "nbest_json", "]", ",", "[", "tmp", "[", "'probability'", "]", "for", "tmp", "in", "nbest_json", "]", "]", "\n", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "all_examples_dict", "=", "dict", "(", ")", "\n", "for", "example", "in", "all_examples", ":", "\n", "            ", "all_examples_dict", "[", "example", ".", "qas_id", "]", "=", "example", "\n", "\n", "", "all_context_dict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "all_predictions", ".", "items", "(", ")", ":", "\n", "            ", "context_id", ",", "answer_id", "=", "key", ".", "split", "(", "\"###\"", ")", "\n", "example", "=", "all_examples_dict", "[", "key", "]", "\n", "if", "context_id", "in", "all_context_dict", ":", "\n", "                ", "all_context_dict", "[", "context_id", "]", ".", "append", "(", "[", "example", ",", "answer_id", ",", "value", "]", ")", "\n", "", "else", ":", "\n", "                ", "all_context_dict", "[", "context_id", "]", "=", "[", "[", "example", ",", "answer_id", ",", "value", "]", "]", "\n", "\n", "", "", "out_put_predict", "=", "dict", "(", ")", "\n", "for", "key", ",", "value", "in", "all_context_dict", ".", "items", "(", ")", ":", "\n", "            ", "final_id", "=", "key", "\n", "answer_position_num", "=", "0", "\n", "answer_position_to_id", "=", "None", "\n", "answer_id_to_predict_val", "=", "dict", "(", ")", "\n", "\n", "for", "example", ",", "answer_id", ",", "val", "in", "value", ":", "\n", "                ", "if", "answer_position_num", "==", "0", ":", "\n", "                    ", "answer_position_num", "=", "len", "(", "example", ".", "orig_answer_text", ")", "\n", "", "elif", "answer_position_num", "!=", "len", "(", "example", ".", "orig_answer_text", ")", ":", "\n", "                    ", "logging", ".", "error", "(", "\"error\"", ")", "\n", "", "answer_position_to_id", "=", "example", ".", "orig_answer_text", "\n", "answer_id_to_predict_val", "[", "answer_id", "]", "=", "val", "\n", "\n", "", "answer_text_dict", "=", "dict", "(", ")", "\n", "while", "True", ":", "# search best answer for every choices", "\n", "                ", "is_update", "=", "False", "\n", "for", "key", ",", "value", "in", "answer_id_to_predict_val", ".", "items", "(", ")", ":", "\n", "                    ", "if", "len", "(", "value", "[", "0", "]", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "best_answer_text", "=", "value", "[", "0", "]", "[", "0", "]", "\n", "best_answer_score", "=", "value", "[", "1", "]", "[", "0", "]", "\n", "if", "best_answer_text", "in", "answer_text_dict", ":", "\n", "                        ", "answer_text_score_id", "=", "answer_text_dict", "[", "best_answer_text", "]", "\n", "if", "best_answer_score", ">", "answer_text_score_id", "[", "0", "]", ":", "\n", "                            ", "tmp_value", "=", "answer_id_to_predict_val", "[", "answer_text_score_id", "[", "1", "]", "]", "\n", "tmp_value", "[", "0", "]", "=", "tmp_value", "[", "0", "]", "[", "1", ":", "]", "\n", "tmp_value", "[", "1", "]", "=", "tmp_value", "[", "1", "]", "[", "1", ":", "]", "\n", "answer_id_to_predict_val", "[", "answer_text_score_id", "[", "1", "]", "]", "=", "tmp_value", "\n", "answer_text_dict", "[", "best_answer_text", "]", "=", "[", "best_answer_score", ",", "key", "]", "\n", "is_update", "=", "True", "\n", "", "elif", "answer_text_score_id", "[", "1", "]", "!=", "key", ":", "\n", "                            ", "tmp_value", "=", "answer_id_to_predict_val", "[", "key", "]", "\n", "tmp_value", "[", "0", "]", "=", "tmp_value", "[", "0", "]", "[", "1", ":", "]", "\n", "tmp_value", "[", "1", "]", "=", "tmp_value", "[", "1", "]", "[", "1", ":", "]", "\n", "answer_id_to_predict_val", "[", "key", "]", "=", "tmp_value", "\n", "is_update", "=", "True", "\n", "", "", "else", ":", "\n", "                        ", "answer_text_dict", "[", "best_answer_text", "]", "=", "[", "best_answer_score", ",", "key", "]", "\n", "is_update", "=", "True", "\n", "", "", "if", "is_update", "==", "False", ":", "\n", "                    ", "break", "\n", "\n", "", "", "out_put_predict", "[", "final_id", "]", "=", "[", "-", "1", "]", "*", "len", "(", "answer_position_to_id", ")", "\n", "for", "key", ",", "value_1", "in", "answer_id_to_predict_val", ".", "items", "(", ")", ":", "#get final predict file", "\n", "                ", "if", "len", "(", "value_1", ")", ">", "0", "and", "len", "(", "value_1", "[", "0", "]", ")", ">", "0", ":", "\n", "                    ", "answer_pos", "=", "value_1", "[", "0", "]", "[", "0", "]", "\n", "answer_pos", "=", "answer_pos", ".", "replace", "(", "\"[unused\"", ",", "\"\"", ")", "\n", "answer_pos", "=", "answer_pos", ".", "replace", "(", "\"]\"", ",", "\"\"", ")", "\n", "try", ":", "\n", "                        ", "answer_pos", "=", "int", "(", "answer_pos", ")", "\n", "out_put_predict", "[", "final_id", "]", "[", "answer_pos", "-", "5", "]", "=", "int", "(", "key", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "", "", "json", ".", "dump", "(", "out_put_predict", ",", "open", "(", "output_prediction_file", ",", "mode", "=", "\"w\"", ")", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.get_final_text": [[785, 868], ["erniekit.metrics.tokenization.BasicTokenizer", "tok_text.find", "sklearn.metrics.MRC.get_final_text._strip_spaces"], "methods", ["None"], ["", "def", "get_final_text", "(", "self", ",", "pred_text", ",", "orig_text", ",", "do_lower_case", ")", ":", "\n", "        ", "\"\"\"Project the tokenized prediction back to the original text.\"\"\"", "\n", "\n", "# When we created the data, we kept track of the alignment between original", "\n", "# (whitespace tokenized) tokens and our WordPiece tokenized tokens. So", "\n", "# now `orig_text` contains the span of our original text corresponding to the", "\n", "# span that we predicted.", "\n", "#", "\n", "# However, `orig_text` may contain extra characters that we don't want in", "\n", "# our prediction.", "\n", "#", "\n", "# For example, let's say:", "\n", "#   pred_text = steve smith", "\n", "#   orig_text = Steve Smith's", "\n", "#", "\n", "# We don't want to return `orig_text` because it contains the extra \"'s\".", "\n", "#", "\n", "# We don't want to return `pred_text` because it's already been normalized", "\n", "# (the SQuAD eval script also does punctuation stripping/lower casing but", "\n", "# our tokenizer does additional normalization like stripping accent", "\n", "# characters).", "\n", "#", "\n", "# What we really want to return is \"Steve Smith\".", "\n", "#", "\n", "# Therefore, we have to apply a semi-complicated alignment heruistic between", "\n", "# `pred_text` and `orig_text` to get a character-to-charcter alignment. This", "\n", "# can fail in certain cases in which case we just return `orig_text`.", "\n", "\n", "def", "_strip_spaces", "(", "text", ")", ":", "\n", "            ", "ns_chars", "=", "[", "]", "\n", "ns_to_s_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "(", "i", ",", "c", ")", "in", "enumerate", "(", "text", ")", ":", "\n", "                ", "if", "c", "==", "\" \"", ":", "\n", "                    ", "continue", "\n", "", "ns_to_s_map", "[", "len", "(", "ns_chars", ")", "]", "=", "i", "\n", "ns_chars", ".", "append", "(", "c", ")", "\n", "", "ns_text", "=", "\"\"", ".", "join", "(", "ns_chars", ")", "\n", "return", "(", "ns_text", ",", "ns_to_s_map", ")", "\n", "\n", "# We first tokenize `orig_text`, strip whitespace from the result", "\n", "# and `pred_text`, and check if they are the same length. If they are", "\n", "# NOT the same length, the heuristic has failed. If they are the same", "\n", "# length, we assume the characters are one-to-one aligned.", "\n", "", "tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_text", ")", ")", "\n", "\n", "start_position", "=", "tok_text", ".", "find", "(", "pred_text", ")", "\n", "if", "start_position", "==", "-", "1", ":", "\n", "            ", "return", "orig_text", "\n", "", "end_position", "=", "start_position", "+", "len", "(", "pred_text", ")", "-", "1", "\n", "\n", "(", "orig_ns_text", ",", "orig_ns_to_s_map", ")", "=", "_strip_spaces", "(", "orig_text", ")", "\n", "(", "tok_ns_text", ",", "tok_ns_to_s_map", ")", "=", "_strip_spaces", "(", "tok_text", ")", "\n", "\n", "if", "len", "(", "orig_ns_text", ")", "!=", "len", "(", "tok_ns_text", ")", ":", "\n", "            ", "return", "orig_text", "\n", "\n", "# We then project the characters in `pred_text` back to `orig_text` using", "\n", "# the character-to-character alignment.", "\n", "", "tok_s_to_ns_map", "=", "{", "}", "\n", "for", "(", "i", ",", "tok_index", ")", "in", "six", ".", "iteritems", "(", "tok_ns_to_s_map", ")", ":", "\n", "            ", "tok_s_to_ns_map", "[", "tok_index", "]", "=", "i", "\n", "\n", "", "orig_start_position", "=", "None", "\n", "if", "start_position", "in", "tok_s_to_ns_map", ":", "\n", "            ", "ns_start_position", "=", "tok_s_to_ns_map", "[", "start_position", "]", "\n", "if", "ns_start_position", "in", "orig_ns_to_s_map", ":", "\n", "                ", "orig_start_position", "=", "orig_ns_to_s_map", "[", "ns_start_position", "]", "\n", "\n", "", "", "if", "orig_start_position", "is", "None", ":", "\n", "            ", "return", "orig_text", "\n", "\n", "", "orig_end_position", "=", "None", "\n", "if", "end_position", "in", "tok_s_to_ns_map", ":", "\n", "            ", "ns_end_position", "=", "tok_s_to_ns_map", "[", "end_position", "]", "\n", "if", "ns_end_position", "in", "orig_ns_to_s_map", ":", "\n", "                ", "orig_end_position", "=", "orig_ns_to_s_map", "[", "ns_end_position", "]", "\n", "\n", "", "", "if", "orig_end_position", "is", "None", ":", "\n", "            ", "return", "orig_text", "\n", "\n", "", "output_text", "=", "orig_text", "[", "orig_start_position", ":", "(", "orig_end_position", "+", "1", ")", "]", "\n", "return", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._get_best_indexes": [[870, 881], ["sorted", "range", "enumerate", "len", "best_indexes.append"], "methods", ["None"], ["", "def", "_get_best_indexes", "(", "self", ",", "logits", ",", "n_best_size", ")", ":", "\n", "        ", "\"\"\"Get the n-best logits from a list.\"\"\"", "\n", "index_and_score", "=", "sorted", "(", "\n", "enumerate", "(", "logits", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "best_indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "index_and_score", ")", ")", ":", "\n", "            ", "if", "i", ">=", "n_best_size", ":", "\n", "                ", "break", "\n", "", "best_indexes", ".", "append", "(", "index_and_score", "[", "i", "]", "[", "0", "]", ")", "\n", "", "return", "best_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._compute_softmax": [[883, 904], ["math.exp", "exp_scores.append", "probs.append"], "methods", ["None"], ["", "def", "_compute_softmax", "(", "self", ",", "scores", ")", ":", "\n", "        ", "\"\"\"Compute softmax probability over raw logits.\"\"\"", "\n", "if", "not", "scores", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "max_score", "=", "None", "\n", "for", "score", "in", "scores", ":", "\n", "            ", "if", "max_score", "is", "None", "or", "score", ">", "max_score", ":", "\n", "                ", "max_score", "=", "score", "\n", "\n", "", "", "exp_scores", "=", "[", "]", "\n", "total_sum", "=", "0.0", "\n", "for", "score", "in", "scores", ":", "\n", "            ", "x", "=", "math", ".", "exp", "(", "score", "-", "max_score", ")", "\n", "exp_scores", ".", "append", "(", "x", ")", "\n", "total_sum", "+=", "x", "\n", "\n", "", "probs", "=", "[", "]", "\n", "for", "score", "in", "exp_scores", ":", "\n", "            ", "probs", ".", "append", "(", "score", "/", "total_sum", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._mixed_segmentation": [[905, 934], ["str().decode.lower().strip", "str().decode", "six.u", "nltk.word_tokenize", "segs_out.extend", "str().decode.lower", "re.search", "segs_out.append", "str", "nltk.word_tokenize", "segs_out.extend"], "methods", ["None"], ["", "def", "_mixed_segmentation", "(", "self", ",", "in_str", ",", "rm_punc", "=", "False", ")", ":", "\n", "        ", "\"\"\"mixed_segmentation\"\"\"", "\n", "if", "six", ".", "PY2", ":", "\n", "            ", "in_str", "=", "str", "(", "in_str", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "", "in_str", "=", "in_str", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "segs_out", "=", "[", "]", "\n", "temp_str", "=", "\"\"", "\n", "sp_char", "=", "[", "'-'", ",", "':'", ",", "'_'", ",", "'*'", ",", "'^'", ",", "'/'", ",", "'\\\\'", ",", "'~'", ",", "'`'", ",", "'+'", ",", "'='", ",", "\n", "'\uff0c'", ",", "'\u3002'", ",", "'\uff1a'", ",", "'\uff1f'", ",", "'\uff01'", ",", "'\u201c'", ",", "'\u201d'", ",", "'\uff1b'", ",", "'\u2019'", ",", "'\u300a'", ",", "'\u300b'", ",", "'\u2026\u2026'", ",", "'\u00b7'", ",", "'\u3001'", ",", "\n", "'\u300c'", ",", "'\u300d'", ",", "'\uff08'", ",", "'\uff09'", ",", "'\uff0d'", ",", "'\uff5e'", ",", "'\u300e'", ",", "'\u300f'", "]", "\n", "for", "char", "in", "in_str", ":", "\n", "            ", "if", "rm_punc", "and", "char", "in", "sp_char", ":", "\n", "                ", "continue", "\n", "", "pattern", "=", "six", ".", "u", "(", "r'[\\u4e00-\\u9fa5]'", ")", "\n", "if", "re", ".", "search", "(", "pattern", ",", "char", ")", "or", "char", "in", "sp_char", ":", "\n", "                ", "if", "temp_str", "!=", "\"\"", ":", "\n", "                    ", "ss", "=", "nltk", ".", "word_tokenize", "(", "temp_str", ")", "\n", "segs_out", ".", "extend", "(", "ss", ")", "\n", "temp_str", "=", "\"\"", "\n", "", "segs_out", ".", "append", "(", "char", ")", "\n", "", "else", ":", "\n", "                ", "temp_str", "+=", "char", "\n", "\n", "#handling last part", "\n", "", "", "if", "temp_str", "!=", "\"\"", ":", "\n", "            ", "ss", "=", "nltk", ".", "word_tokenize", "(", "temp_str", ")", "\n", "segs_out", ".", "extend", "(", "ss", ")", "\n", "\n", "", "return", "segs_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._remove_punctuation": [[936, 951], ["str().decode.lower().strip", "str().decode", "str().decode.lower", "out_segs.append", "str"], "methods", ["None"], ["", "def", "_remove_punctuation", "(", "self", ",", "in_str", ")", ":", "\n", "        ", "\"\"\"remove_punctuation\"\"\"", "\n", "if", "six", ".", "PY2", ":", "\n", "            ", "in_str", "=", "str", "(", "in_str", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "", "in_str", "=", "in_str", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "sp_char", "=", "[", "'-'", ",", "':'", ",", "'_'", ",", "'*'", ",", "'^'", ",", "'/'", ",", "'\\\\'", ",", "'~'", ",", "'`'", ",", "'+'", ",", "'='", ",", "\n", "'\uff0c'", ",", "'\u3002'", ",", "'\uff1a'", ",", "'\uff1f'", ",", "'\uff01'", ",", "'\u201c'", ",", "'\u201d'", ",", "'\uff1b'", ",", "'\u2019'", ",", "'\u300a'", ",", "'\u300b'", ",", "'\u2026\u2026'", ",", "'\u00b7'", ",", "'\u3001'", ",", "\n", "'\u300c'", ",", "'\u300d'", ",", "'\uff08'", ",", "'\uff09'", ",", "'\uff0d'", ",", "'\uff5e'", ",", "'\u300e'", ",", "'\u300f'", "]", "\n", "out_segs", "=", "[", "]", "\n", "for", "char", "in", "in_str", ":", "\n", "            ", "if", "char", "in", "sp_char", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "out_segs", ".", "append", "(", "char", ")", "\n", "", "", "return", "''", ".", "join", "(", "out_segs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._find_lcs": [[953, 966], ["range", "len", "range", "range", "len", "range", "len", "len"], "methods", ["None"], ["", "def", "_find_lcs", "(", "self", ",", "s1", ",", "s2", ")", ":", "\n", "        ", "\"\"\"find lcs\"\"\"", "\n", "m", "=", "[", "[", "0", "for", "i", "in", "range", "(", "len", "(", "s2", ")", "+", "1", ")", "]", "for", "j", "in", "range", "(", "len", "(", "s1", ")", "+", "1", ")", "]", "\n", "mmax", "=", "0", "\n", "p", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "s1", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "s2", ")", ")", ":", "\n", "                ", "if", "s1", "[", "i", "]", "==", "s2", "[", "j", "]", ":", "\n", "                    ", "m", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "=", "m", "[", "i", "]", "[", "j", "]", "+", "1", "\n", "if", "m", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", ">", "mmax", ":", "\n", "                        ", "mmax", "=", "m", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "\n", "p", "=", "i", "+", "1", "\n", "", "", "", "", "return", "s1", "[", "p", "-", "mmax", ":", "p", "]", ",", "mmax", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._evaluate": [[967, 1014], ["instance[].strip", "qas[].strip", "qas[].strip", "str", "qas.keys", "sys.stderr.write", "sklearn.metrics.MRC._calc_f1_score", "sklearn.metrics.MRC._calc_em_score", "str.lower", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._calc_f1_score", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._calc_em_score"], ["", "def", "_evaluate", "(", "self", ",", "ground_truth_file", ",", "prediction_file", ")", ":", "\n", "        ", "\"\"\"evaluate form files\"\"\"", "\n", "f1", "=", "0", "\n", "em", "=", "0", "\n", "total_count", "=", "0", "\n", "skip_count", "=", "0", "\n", "for", "instances", "in", "ground_truth_file", "[", "\"data\"", "]", ":", "\n", "            ", "for", "instance", "in", "instances", "[", "\"paragraphs\"", "]", ":", "\n", "                ", "context_text", "=", "instance", "[", "'context'", "]", ".", "strip", "(", ")", "\n", "for", "qas", "in", "instance", "[", "'qas'", "]", ":", "\n", "                    ", "total_count", "+=", "1", "\n", "query_id", "=", "qas", "[", "'id'", "]", ".", "strip", "(", ")", "\n", "query_text", "=", "qas", "[", "'question'", "]", ".", "strip", "(", ")", "\n", "is_impossible", "=", "None", "\n", "if", "\"is_impossible\"", "in", "qas", ".", "keys", "(", ")", ":", "\n", "                        ", "is_impossible", "=", "qas", "[", "\"is_impossible\"", "]", "\n", "if", "is_impossible", ":", "\n", "                            ", "assert", "len", "(", "qas", "[", "\"answers\"", "]", ")", "==", "1", "\n", "answers", "=", "[", "\"no answer\"", "]", "\n", "", "else", ":", "\n", "                            ", "answers", "=", "[", "ans", "[", "\"text\"", "]", "for", "ans", "in", "qas", "[", "\"answers\"", "]", "]", "\n", "", "", "else", ":", "\n", "                        ", "answers", "=", "[", "ans", "[", "\"text\"", "]", "for", "ans", "in", "qas", "[", "\"answers\"", "]", "]", "\n", "\n", "", "if", "query_id", "not", "in", "prediction_file", ":", "\n", "                        ", "sys", ".", "stderr", ".", "write", "(", "'Unanswered question: {}\\n'", ".", "format", "(", "query_id", ")", ")", "\n", "skip_count", "+=", "1", "\n", "continue", "\n", "\n", "", "prediction", "=", "str", "(", "prediction_file", "[", "query_id", "]", ")", "\n", "if", "is_impossible", ":", "\n", "                        ", "if", "prediction", ".", "lower", "(", ")", "==", "\"no answer\"", ":", "\n", "                            ", "_f1", "=", "1.0", "\n", "_em", "=", "1.0", "\n", "", "else", ":", "\n", "                            ", "_f1", "=", "0.0", "\n", "_em", "=", "0.0", "\n", "", "", "else", ":", "\n", "                        ", "_f1", "=", "self", ".", "_calc_f1_score", "(", "answers", ",", "prediction", ")", "\n", "_em", "=", "self", ".", "_calc_em_score", "(", "answers", ",", "prediction", ")", "\n", "\n", "", "f1", "+=", "_f1", "\n", "em", "+=", "_em", "\n", "\n", "", "", "", "f1_score", "=", "100.0", "*", "f1", "/", "total_count", "\n", "em_score", "=", "100.0", "*", "em", "/", "total_count", "\n", "return", "f1_score", ",", "em_score", ",", "(", "total_count", ",", "skip_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._calc_f1_score": [[1016, 1031], ["max", "sklearn.metrics.MRC._mixed_segmentation", "sklearn.metrics.MRC._mixed_segmentation", "sklearn.metrics.MRC._find_lcs", "f1_scores.append", "f1_scores.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._mixed_segmentation", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._mixed_segmentation", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._find_lcs"], ["", "def", "_calc_f1_score", "(", "self", ",", "answers", ",", "prediction", ")", ":", "\n", "        ", "\"\"\"calculate f1 score\"\"\"", "\n", "f1_scores", "=", "[", "]", "\n", "for", "ans", "in", "answers", ":", "\n", "            ", "ans_segs", "=", "self", ".", "_mixed_segmentation", "(", "ans", ",", "rm_punc", "=", "True", ")", "\n", "prediction_segs", "=", "self", ".", "_mixed_segmentation", "(", "prediction", ",", "rm_punc", "=", "True", ")", "\n", "lcs", ",", "lcs_len", "=", "self", ".", "_find_lcs", "(", "ans_segs", ",", "prediction_segs", ")", "\n", "if", "lcs_len", "==", "0", ":", "\n", "                ", "f1_scores", ".", "append", "(", "0", ")", "\n", "continue", "\n", "", "precision", "=", "1.0", "*", "lcs_len", "/", "len", "(", "prediction_segs", ")", "\n", "recall", "=", "1.0", "*", "lcs_len", "/", "len", "(", "ans_segs", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "f1_scores", ".", "append", "(", "f1", ")", "\n", "", "return", "max", "(", "f1_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._calc_em_score": [[1033, 1043], ["sklearn.metrics.MRC._remove_punctuation", "sklearn.metrics.MRC._remove_punctuation"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._remove_punctuation", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._remove_punctuation"], ["", "def", "_calc_em_score", "(", "self", ",", "answers", ",", "prediction", ")", ":", "\n", "        ", "\"\"\"calculate em score\"\"\"", "\n", "em", "=", "0", "\n", "for", "ans", "in", "answers", ":", "\n", "            ", "ans_", "=", "self", ".", "_remove_punctuation", "(", "ans", ")", "\n", "prediction_", "=", "self", ".", "_remove_punctuation", "(", "prediction", ")", "\n", "if", "ans_", "==", "prediction_", ":", "\n", "                ", "em", "=", "1", "\n", "break", "\n", "", "", "return", "em", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC.eval": [[1045, 1053], ["json.load", "json.load", "sklearn.metrics.MRC._evaluate", "open", "open"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.MRC._evaluate"], ["", "def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "\"\"\"evaluation\"\"\"", "\n", "dataset_file", ",", "prediction_file", "=", "run_value", "\n", "ground_truth_file", "=", "json", ".", "load", "(", "open", "(", "dataset_file", ",", "'rb'", ")", ")", "\n", "prediction_file", "=", "json", ".", "load", "(", "open", "(", "prediction_file", ",", "'rb'", ")", ")", "\n", "F1", ",", "EM", ",", "(", "TOTAL", ",", "SKIP", ")", "=", "self", ".", "_evaluate", "(", "ground_truth_file", ",", "prediction_file", ")", "\n", "AVG", "=", "(", "EM", "+", "F1", ")", "*", "0.5", "\n", "return", "EM", ",", "F1", ",", "(", "AVG", ",", "TOTAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.eval": [[1058, 1080], ["metrics.calculate_f1", "six.moves.xrange", "sklearn.metrics.NerChunk.chunk_eval_glyce", "len", "pred_label.append", "gold_label.append", "pred_mask.append", "sklearn.metrics.NerChunk.chunk_eval_cluener", "sklearn.metrics.NerChunk.chunk_eval_std", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.calculate_f1", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.chunk_eval_glyce", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.chunk_eval_cluener", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.chunk_eval_std"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "\"\"\"evaluation\"\"\"", "\n", "np_labels", ",", "np_infers", ",", "np_lens", ",", "tag_num", ",", "max_len", ",", "label_map", ",", "is_glyce", ",", "is_cluener", "=", "run_value", "\n", "if", "is_glyce", ":", "\n", "            ", "pred_label", ",", "gold_label", ",", "pred_mask", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "xrange", "(", "len", "(", "np_lens", ")", ")", ":", "\n", "                ", "seg_st", "=", "i", "*", "max_len", "+", "1", "\n", "seg_en", "=", "seg_st", "+", "(", "np_lens", "[", "i", "]", "-", "2", ")", "\n", "pred_label", ".", "append", "(", "np_infers", "[", "seg_st", ":", "seg_en", "]", ")", "\n", "gold_label", ".", "append", "(", "np_labels", "[", "seg_st", ":", "seg_en", "]", ")", "\n", "pred_mask", ".", "append", "(", "[", "1", "]", "*", "len", "(", "np_infers", "[", "seg_st", ":", "seg_en", "]", ")", ")", "\n", "", "num_label", ",", "num_infer", ",", "num_correct", "=", "self", ".", "chunk_eval_glyce", "(", "gold_label", ",", "pred_label", ",", "pred_mask", ",", "tag_num", ")", "\n", "\n", "", "elif", "is_cluener", ":", "\n", "            ", "num_label", ",", "num_infer", ",", "num_correct", "=", "self", ".", "chunk_eval_cluener", "(", "np_labels", ",", "np_infers", ",", "np_lens", ",", "tag_num", ",", "max_len", ",", "label_map", ")", "\n", "", "else", ":", "\n", "            ", "num_label", ",", "num_infer", ",", "num_correct", "=", "self", ".", "chunk_eval_std", "(", "np_labels", ",", "np_infers", ",", "np_lens", ",", "tag_num", ",", "max_len", ")", "\n", "\n", "", "precision", ",", "recall", ",", "f1", "=", "calculate_f1", "(", "num_label", ",", "num_infer", ",", "num_correct", ")", "\n", "return", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.chunk_eval_std": [[1081, 1162], ["six.moves.xrange", "six.moves.xrange", "len", "sklearn.metrics.NerChunk.chunk_eval_std.extract_bio_chunk"], "methods", ["None"], ["", "def", "chunk_eval_std", "(", "self", ",", "np_labels", ",", "np_infers", ",", "np_lens", ",", "tag_num", ",", "max_len", ")", ":", "\n", "        ", "\"\"\" chunk_eval_std \"\"\"", "\n", "\n", "def", "extract_bio_chunk", "(", "seq", ")", ":", "\n", "            ", "\"\"\" extract_bio_chunk \"\"\"", "\n", "mod", "=", "2", "\n", "chunks", "=", "[", "]", "\n", "cur_chunk", "=", "None", "\n", "null_index", "=", "tag_num", "-", "1", "\n", "for", "index", "in", "xrange", "(", "len", "(", "seq", ")", ")", ":", "\n", "                ", "tag", "=", "seq", "[", "index", "]", "\n", "tag_type", "=", "tag", "//", "mod", "\n", "tag_pos", "=", "tag", "%", "mod", "\n", "\n", "if", "tag", "==", "null_index", ":", "\n", "                    ", "if", "cur_chunk", "is", "not", "None", ":", "\n", "                        ", "chunks", ".", "append", "(", "cur_chunk", ")", "\n", "cur_chunk", "=", "None", "\n", "", "continue", "\n", "\n", "", "cmd", "=", "(", "tag_pos", "==", "0", ")", "\n", "if", "cmd", ":", "\n", "                    ", "if", "cur_chunk", "is", "not", "None", ":", "\n", "                        ", "chunks", ".", "append", "(", "cur_chunk", ")", "\n", "cur_chunk", "=", "{", "}", "\n", "", "cur_chunk", "=", "{", "\"st\"", ":", "index", ",", "\"en\"", ":", "index", "+", "1", ",", "\"type\"", ":", "tag_type", "}", "\n", "\n", "", "else", ":", "\n", "                    ", "if", "cur_chunk", "is", "None", ":", "\n", "                        ", "cur_chunk", "=", "{", "\"st\"", ":", "index", ",", "\"en\"", ":", "index", "+", "1", ",", "\"type\"", ":", "tag_type", "}", "\n", "continue", "\n", "\n", "", "if", "cur_chunk", "[", "\"type\"", "]", "==", "tag_type", ":", "\n", "                        ", "cur_chunk", "[", "\"en\"", "]", "=", "index", "+", "1", "\n", "", "else", ":", "\n", "                        ", "chunks", ".", "append", "(", "cur_chunk", ")", "\n", "cur_chunk", "=", "{", "\"st\"", ":", "index", ",", "\"en\"", ":", "index", "+", "1", ",", "\"type\"", ":", "tag_type", "}", "\n", "\n", "", "", "", "if", "cur_chunk", "is", "not", "None", ":", "\n", "                ", "chunks", ".", "append", "(", "cur_chunk", ")", "\n", "", "return", "chunks", "\n", "\n", "", "null_index", "=", "tag_num", "-", "1", "\n", "num_label", "=", "0", "\n", "num_infer", "=", "0", "\n", "num_correct", "=", "0", "\n", "\n", "labels", ",", "infers", ",", "lens", "=", "np_labels", ",", "np_infers", ",", "np_lens", "\n", "\n", "base_index", "=", "0", "\n", "\n", "for", "i", "in", "xrange", "(", "len", "(", "lens", ")", ")", ":", "\n", "            ", "seq_st", "=", "base_index", "+", "i", "*", "max_len", "+", "1", "\n", "seq_en", "=", "seq_st", "+", "(", "lens", "[", "i", "]", "-", "2", ")", "\n", "infer_chunks", "=", "extract_bio_chunk", "(", "infers", "[", "seq_st", ":", "seq_en", "]", ")", "\n", "label_chunks", "=", "extract_bio_chunk", "(", "labels", "[", "seq_st", ":", "seq_en", "]", ")", "\n", "num_infer", "+=", "len", "(", "infer_chunks", ")", "\n", "num_label", "+=", "len", "(", "label_chunks", ")", "\n", "\n", "infer_index", "=", "0", "\n", "label_index", "=", "0", "\n", "while", "label_index", "<", "len", "(", "label_chunks", ")", "and", "infer_index", "<", "len", "(", "infer_chunks", ")", ":", "\n", "                ", "if", "infer_chunks", "[", "infer_index", "]", "[", "\"st\"", "]", "<", "label_chunks", "[", "label_index", "]", "[", "\"st\"", "]", ":", "\n", "                    ", "infer_index", "+=", "1", "\n", "", "elif", "infer_chunks", "[", "infer_index", "]", "[", "\"st\"", "]", ">", "label_chunks", "[", "label_index", "]", "[", "\"st\"", "]", ":", "\n", "                    ", "label_index", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "if", "infer_chunks", "[", "infer_index", "]", "[", "\"en\"", "]", "==", "label_chunks", "[", "label_index", "]", "[", "\"en\"", "]", "and", "infer_chunks", "[", "infer_index", "]", "[", "\"type\"", "]", "==", "label_chunks", "[", "label_index", "]", "[", "\"type\"", "]", ":", "\n", "                        ", "num_correct", "+=", "1", "\n", "\n", "", "infer_index", "+=", "1", "\n", "label_index", "+=", "1", "\n", "\n", "", "", "", "base_index", "+=", "max_len", "*", "len", "(", "lens", ")", "\n", "return", "num_label", ",", "num_infer", ",", "num_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.extract_entities": [[1163, 1207], ["dict", "sklearn.metrics.NerChunk.extract_entities.gen_entities"], "methods", ["None"], ["", "def", "extract_entities", "(", "self", ",", "labels_lst", ",", "start_label", "=", "\"1_4\"", ")", ":", "\n", "        ", "\"\"\"extract_entities\"\"\"", "\n", "\n", "def", "gen_entities", "(", "label_lst", ",", "start_label", "=", "1", ",", "dims", "=", "1", ")", ":", "\n", "            ", "\"\"\"gen_entities\"\"\"", "\n", "# rules -> if end_mark > start_label", "\n", "entities", "=", "dict", "(", ")", "\n", "\n", "if", "\"_\"", "in", "start_label", ":", "\n", "                ", "start_label", "=", "start_label", ".", "split", "(", "\"_\"", ")", "\n", "start_label", "=", "[", "int", "(", "tmp", ")", "for", "tmp", "in", "start_label", "]", "\n", "ind_func", "=", "lambda", "x", ":", "(", "bool", "(", "label", "in", "start_label", ")", "for", "label", "in", "x", ")", "\n", "indicator", "=", "sum", "(", "[", "int", "(", "tmp", ")", "for", "tmp", "in", "ind_func", "(", "label_lst", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "start_label", "=", "int", "(", "start_label", ")", "\n", "indicator", "=", "1", "if", "start_label", "in", "labels_lst", "else", "0", "\n", "\n", "", "if", "indicator", ">", "0", ":", "\n", "                ", "if", "isinstance", "(", "start_label", ",", "list", ")", ":", "\n", "                    ", "ixs", ",", "_", "=", "zip", "(", "*", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", "in", "start_label", ",", "enumerate", "(", "label_lst", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "start_label", ",", "int", ")", ":", "\n", "                    ", "ixs", ",", "_", "=", "zip", "(", "*", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", "==", "start_label", ",", "enumerate", "(", "label_lst", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"You Should Notice that The FORMAT of your INPUT\"", ")", "\n", "\n", "", "ixs", "=", "list", "(", "ixs", ")", "\n", "ixs", ".", "append", "(", "len", "(", "label_lst", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "ixs", ")", "-", "1", ")", ":", "\n", "                    ", "sub_label", "=", "label_lst", "[", "ixs", "[", "i", "]", ":", "ixs", "[", "i", "+", "1", "]", "]", "\n", "end_mark", "=", "max", "(", "sub_label", ")", "\n", "end_ix", "=", "ixs", "[", "i", "]", "+", "sub_label", ".", "index", "(", "end_mark", ")", "+", "1", "\n", "entities", "[", "\"{}_{}\"", ".", "format", "(", "ixs", "[", "i", "]", ",", "end_ix", ")", "]", "=", "label_lst", "[", "ixs", "[", "i", "]", ":", "end_ix", "]", "\n", "", "", "return", "entities", "\n", "\n", "", "if", "start_label", "==", "\"1\"", ":", "\n", "            ", "entities", "=", "gen_entities", "(", "labels_lst", ",", "start_label", "=", "int", "(", "start_label", ")", ")", "\n", "", "elif", "start_label", "==", "\"4\"", ":", "\n", "            ", "entities", "=", "gen_entities", "(", "labels_lst", ",", "start_label", "=", "int", "(", "start_label", ")", ")", "\n", "", "elif", "\"_\"", "in", "start_label", ":", "\n", "            ", "entities", "=", "gen_entities", "(", "labels_lst", ",", "start_label", "=", "start_label", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You Should Check The FOMAT Of your SPLIT NUMBER !!!!!\"", ")", "\n", "\n", "", "return", "entities", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.chunk_eval_glyce": [[1208, 1255], ["list", "list", "range", "range", "range", "len", "len", "len", "sklearn.metrics.NerChunk.extract_entities", "sklearn.metrics.NerChunk.extract_entities", "len", "len", "sklearn.metrics.NerChunk.keys", "list", "filter", "float", "float", "zip", "str", "str", "enumerate", "enumerate", "enumerate", "zip", "sklearn.metrics.NerChunk.chunk_eval_glyce"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.extract_entities", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.extract_entities", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.chunk_eval_glyce"], ["", "def", "chunk_eval_glyce", "(", "self", ",", "gold_label", ",", "pred_label", ",", "pred_mask", ",", "tag_num", ",", "dims", "=", "2", ")", ":", "\n", "        ", "\"\"\"chunk_eval_glyce\"\"\"", "\n", "\n", "start_label_1", "=", "list", "(", "range", "(", "0", ",", "tag_num", "-", "1", ",", "4", ")", ")", "\n", "start_label_2", "=", "list", "(", "range", "(", "3", ",", "tag_num", "-", "1", ",", "4", ")", ")", "\n", "assert", "len", "(", "start_label_1", ")", "==", "len", "(", "start_label_2", ")", "\n", "start_label", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "start_label_1", ")", ")", ":", "\n", "            ", "start_label", "+=", "[", "str", "(", "start_label_1", "[", "i", "]", ")", "]", "+", "[", "str", "(", "start_label_2", "[", "i", "]", ")", "]", "\n", "", "start_label", "=", "\"_\"", ".", "join", "(", "start_label", ")", "\n", "\n", "#print(pred_label, gold_label, pred_mask)", "\n", "if", "dims", "==", "1", ":", "\n", "            ", "mask_index", "=", "[", "tmp_idx", "for", "tmp_idx", ",", "tmp", "in", "enumerate", "(", "pred_mask", ")", "if", "tmp", "!=", "0", "]", "\n", "pred_label", "=", "[", "tmp", "for", "tmp_idx", ",", "tmp", "in", "enumerate", "(", "pred_label", ")", "if", "tmp_idx", "in", "mask_index", "]", "\n", "gold_label", "=", "[", "tmp", "for", "tmp_idx", ",", "tmp", "in", "enumerate", "(", "gold_label", ")", "if", "tmp_idx", "in", "mask_index", "]", "\n", "\n", "pred_entities", "=", "self", ".", "extract_entities", "(", "pred_label", ",", "start_label", "=", "start_label", ")", "\n", "truth_entities", "=", "self", ".", "extract_entities", "(", "gold_label", ",", "start_label", "=", "start_label", ")", "\n", "\n", "num_true", "=", "len", "(", "truth_entities", ")", "\n", "num_extraction", "=", "len", "(", "pred_entities", ")", "\n", "\n", "num_true_positive", "=", "0", "\n", "for", "entity_idx", "in", "pred_entities", ".", "keys", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "if", "truth_entities", "[", "entity_idx", "]", "==", "pred_entities", "[", "entity_idx", "]", ":", "\n", "                        ", "num_true_positive", "+=", "1", "\n", "", "", "except", ":", "\n", "                    ", "pass", "\n", "\n", "", "", "dict_match", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "==", "x", "[", "1", "]", ",", "zip", "(", "pred_label", ",", "gold_label", ")", ")", ")", "\n", "return", "num_true_positive", ",", "float", "(", "num_extraction", ")", ",", "float", "(", "num_true", ")", "\n", "\n", "", "elif", "dims", "==", "2", ":", "\n", "            ", "acc", ",", "posit", ",", "extra", ",", "true", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "pred_item", ",", "truth_item", ",", "mask_item", "in", "zip", "(", "pred_label", ",", "gold_label", ",", "pred_mask", ")", ":", "\n", "                ", "if", "not", "pred_item", "or", "not", "truth_item", "or", "not", "mask_item", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "tmp_posit", ",", "tmp_extra", ",", "tmp_true", "=", "self", ".", "chunk_eval_glyce", "(", "truth_item", ",", "pred_item", ",", "mask_item", ",", "tag_num", ",", "dims", "=", "1", ")", "\n", "", "posit", "+=", "tmp_posit", "\n", "extra", "+=", "tmp_extra", "\n", "true", "+=", "tmp_true", "\n", "\n", "", "return", "true", ",", "extra", ",", "posit", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NerChunk.chunk_eval_cluener": [[1256, 1331], ["json.load", "dict", "six.moves.xrange", "zip", "len", "len", "len", "enumerate", "open", "zip", "len", "pred_label.append", "gold_label.append", "sklearn.metrics.NerChunk.chunk_eval_cluener.get_entity_bios"], "methods", ["None"], ["", "", "def", "chunk_eval_cluener", "(", "self", ",", "np_labels", ",", "np_infers", ",", "np_lens", ",", "tag_num", ",", "max_len", ",", "label_map_config", ")", ":", "\n", "        ", "\"\"\"chunk_eval_cluener\"\"\"", "\n", "\n", "def", "get_entity_bios", "(", "seq", ",", "id2label", ")", ":", "\n", "            ", "\"\"\"Gets entities from sequence.\n            note: BIOS\n            Args:\n                seq (list): sequence of labels.\n            Returns:\n                list: list of (chunk_type, chunk_start, chunk_end).\n            Example:\n                # >>> seq = ['B-PER', 'I-PER', 'O', 'S-LOC']\n                # >>> get_entity_bios(seq)\n                [['PER', 0,1], ['LOC', 3, 3]]\n            \"\"\"", "\n", "chunks", "=", "[", "]", "\n", "chunk", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "for", "indx", ",", "tag", "in", "enumerate", "(", "seq", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "tag", ",", "str", ")", ":", "\n", "                    ", "tag", "=", "id2label", "[", "tag", "]", "\n", "", "if", "tag", ".", "startswith", "(", "\"S-\"", ")", ":", "\n", "                    ", "if", "chunk", "[", "2", "]", "!=", "-", "1", ":", "\n", "                        ", "chunks", ".", "append", "(", "chunk", ")", "\n", "", "chunk", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "chunk", "[", "1", "]", "=", "indx", "\n", "chunk", "[", "2", "]", "=", "indx", "\n", "chunk", "[", "0", "]", "=", "tag", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "chunks", ".", "append", "(", "chunk", ")", "\n", "chunk", "=", "(", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "if", "tag", ".", "startswith", "(", "\"B-\"", ")", ":", "\n", "                    ", "if", "chunk", "[", "2", "]", "!=", "-", "1", ":", "\n", "                        ", "chunks", ".", "append", "(", "chunk", ")", "\n", "", "chunk", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "chunk", "[", "1", "]", "=", "indx", "\n", "chunk", "[", "0", "]", "=", "tag", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "", "elif", "tag", ".", "startswith", "(", "'I-'", ")", "and", "chunk", "[", "1", "]", "!=", "-", "1", ":", "\n", "                    ", "_type", "=", "tag", ".", "split", "(", "'-'", ")", "[", "1", "]", "\n", "if", "_type", "==", "chunk", "[", "0", "]", ":", "\n", "                        ", "chunk", "[", "2", "]", "=", "indx", "\n", "", "if", "indx", "==", "len", "(", "seq", ")", "-", "1", ":", "\n", "                        ", "chunks", ".", "append", "(", "chunk", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "chunk", "[", "2", "]", "!=", "-", "1", ":", "\n", "                        ", "chunks", ".", "append", "(", "chunk", ")", "\n", "", "chunk", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "", "", "return", "chunks", "\n", "\n", "", "pred_label", ",", "gold_label", "=", "[", "]", ",", "[", "]", "\n", "label2id", "=", "json", ".", "load", "(", "open", "(", "label_map_config", ")", ")", "\n", "id2label", "=", "dict", "(", "zip", "(", "label2id", ".", "values", "(", ")", ",", "label2id", ".", "keys", "(", ")", ")", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "len", "(", "np_lens", ")", ")", ":", "\n", "            ", "seg_st", "=", "i", "*", "max_len", "+", "1", "\n", "seg_en", "=", "seg_st", "+", "(", "np_lens", "[", "i", "]", "-", "2", ")", "\n", "pred_label", ".", "append", "(", "np_infers", "[", "seg_st", ":", "seg_en", "]", ")", "\n", "gold_label", ".", "append", "(", "np_labels", "[", "seg_st", ":", "seg_en", "]", ")", "\n", "\n", "", "origins", "=", "[", "]", "\n", "founds", "=", "[", "]", "\n", "rights", "=", "[", "]", "\n", "\n", "for", "gold", ",", "pred", "in", "zip", "(", "gold_label", ",", "pred_label", ")", ":", "\n", "            ", "label_entities", "=", "get_entity_bios", "(", "gold", ",", "id2label", ")", "\n", "pre_entities", "=", "get_entity_bios", "(", "pred", ",", "id2label", ")", "\n", "right_entities", "=", "[", "pre_entity", "for", "pre_entity", "in", "pre_entities", "if", "pre_entity", "in", "label_entities", "]", "\n", "\n", "origins", ".", "extend", "(", "label_entities", ")", "\n", "founds", ".", "extend", "(", "pre_entities", ")", "\n", "rights", ".", "extend", "(", "right_entities", ")", "\n", "\n", "", "num_label", "=", "len", "(", "origins", ")", "\n", "num_infer", "=", "len", "(", "founds", ")", "\n", "num_correct", "=", "len", "(", "rights", ")", "\n", "\n", "return", "num_label", ",", "num_infer", ",", "num_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.LmPpl.eval": [[1460, 1469], ["int", "numpy.exp", "numpy.mean", "len"], "methods", ["None"], ["def", "eval", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "label_len", ",", "loss", "=", "run_value", "\n", "total_ppl", "=", "0.0", "\n", "for", "seq_loss", "in", "loss", ":", "\n", "            ", "avg_ppl", "=", "np", ".", "exp", "(", "seq_loss", ")", "\n", "seq_ppl", "=", "np", ".", "mean", "(", "avg_ppl", ")", "\n", "total_ppl", "+=", "seq_ppl", "\n", "", "ave_ppl", "=", "total_ppl", "/", "len", "(", "loss", ")", "\n", "return", "int", "(", "ave_ppl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.chunk_eval": [[1333, 1418], ["np_labels.reshape().astype().tolist", "np_infers.reshape().astype().tolist", "np_lens.reshape().astype().tolist", "six.moves.xrange", "six.moves.xrange", "six.moves.xrange", "len", "chunks.append", "np_labels.reshape().astype", "np_infers.reshape().astype", "np_lens.reshape().astype", "max", "len", "metrics.chunk_eval.extract_bio_chunk"], "function", ["None"], ["", "", "def", "chunk_eval", "(", "np_labels", ",", "np_infers", ",", "np_lens", ",", "tag_num", ",", "dev_count", "=", "1", ")", ":", "\n", "    ", "\"\"\" chunk_eval \"\"\"", "\n", "def", "extract_bio_chunk", "(", "seq", ")", ":", "\n", "        ", "\"\"\" extract_bio_chunk \"\"\"", "\n", "chunks", "=", "[", "]", "\n", "cur_chunk", "=", "None", "\n", "null_index", "=", "tag_num", "-", "1", "\n", "for", "index", "in", "xrange", "(", "len", "(", "seq", ")", ")", ":", "\n", "            ", "tag", "=", "seq", "[", "index", "]", "\n", "tag_type", "=", "tag", "//", "2", "\n", "tag_pos", "=", "tag", "%", "2", "\n", "\n", "if", "tag", "==", "null_index", ":", "\n", "                ", "if", "cur_chunk", "is", "not", "None", ":", "\n", "                    ", "chunks", ".", "append", "(", "cur_chunk", ")", "\n", "cur_chunk", "=", "None", "\n", "", "continue", "\n", "\n", "", "if", "tag_pos", "==", "0", ":", "\n", "                ", "if", "cur_chunk", "is", "not", "None", ":", "\n", "                    ", "chunks", ".", "append", "(", "cur_chunk", ")", "\n", "cur_chunk", "=", "{", "}", "\n", "", "cur_chunk", "=", "{", "\"st\"", ":", "index", ",", "\"en\"", ":", "index", "+", "1", ",", "\"type\"", ":", "tag_type", "}", "\n", "\n", "", "else", ":", "\n", "                ", "if", "cur_chunk", "is", "None", ":", "\n", "                    ", "cur_chunk", "=", "{", "\"st\"", ":", "index", ",", "\"en\"", ":", "index", "+", "1", ",", "\"type\"", ":", "tag_type", "}", "\n", "continue", "\n", "\n", "", "if", "cur_chunk", "[", "\"type\"", "]", "==", "tag_type", ":", "\n", "                    ", "cur_chunk", "[", "\"en\"", "]", "=", "index", "+", "1", "\n", "", "else", ":", "\n", "                    ", "chunks", ".", "append", "(", "cur_chunk", ")", "\n", "cur_chunk", "=", "{", "\"st\"", ":", "index", ",", "\"en\"", ":", "index", "+", "1", ",", "\"type\"", ":", "tag_type", "}", "\n", "\n", "", "", "", "if", "cur_chunk", "is", "not", "None", ":", "\n", "            ", "chunks", ".", "append", "(", "cur_chunk", ")", "\n", "", "return", "chunks", "\n", "\n", "", "null_index", "=", "tag_num", "-", "1", "\n", "num_label", "=", "0", "\n", "num_infer", "=", "0", "\n", "num_correct", "=", "0", "\n", "labels", "=", "np_labels", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "infers", "=", "np_infers", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "all_lens", "=", "np_lens", ".", "reshape", "(", "[", "dev_count", ",", "-", "1", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "\n", "base_index", "=", "0", "\n", "for", "dev_index", "in", "xrange", "(", "dev_count", ")", ":", "\n", "        ", "lens", "=", "all_lens", "[", "dev_index", "]", "\n", "max_len", "=", "0", "\n", "for", "l", "in", "lens", ":", "\n", "            ", "max_len", "=", "max", "(", "max_len", ",", "l", ")", "\n", "\n", "", "for", "i", "in", "xrange", "(", "len", "(", "lens", ")", ")", ":", "\n", "            ", "seq_st", "=", "base_index", "+", "i", "*", "max_len", "+", "1", "\n", "seq_en", "=", "seq_st", "+", "(", "lens", "[", "i", "]", "-", "2", ")", "\n", "infer_chunks", "=", "extract_bio_chunk", "(", "infers", "[", "seq_st", ":", "seq_en", "]", ")", "\n", "label_chunks", "=", "extract_bio_chunk", "(", "labels", "[", "seq_st", ":", "seq_en", "]", ")", "\n", "num_infer", "+=", "len", "(", "infer_chunks", ")", "\n", "num_label", "+=", "len", "(", "label_chunks", ")", "\n", "\n", "infer_index", "=", "0", "\n", "label_index", "=", "0", "\n", "while", "label_index", "<", "len", "(", "label_chunks", ")", "and", "infer_index", "<", "len", "(", "infer_chunks", ")", ":", "\n", "                ", "if", "infer_chunks", "[", "infer_index", "]", "[", "\"st\"", "]", "<", "label_chunks", "[", "label_index", "]", "[", "\"st\"", "]", ":", "\n", "                    ", "infer_index", "+=", "1", "\n", "", "elif", "infer_chunks", "[", "infer_index", "]", "[", "\"st\"", "]", ">", "label_chunks", "[", "label_index", "]", "[", "\"st\"", "]", ":", "\n", "                    ", "label_index", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "if", "infer_chunks", "[", "infer_index", "]", "[", "\"en\"", "]", "==", "label_chunks", "[", "label_index", "]", "[", "\"en\"", "]", "and", "infer_chunks", "[", "infer_index", "]", "[", "\"type\"", "]", "==", "label_chunks", "[", "label_index", "]", "[", "\"type\"", "]", ":", "\n", "                        ", "num_correct", "+=", "1", "\n", "\n", "", "infer_index", "+=", "1", "\n", "label_index", "+=", "1", "\n", "\n", "", "", "", "base_index", "+=", "max_len", "*", "len", "(", "lens", ")", "\n", "\n", "", "return", "num_label", ",", "num_infer", ",", "num_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.calculate_f1": [[1420, 1437], ["None"], "function", ["None"], ["", "def", "calculate_f1", "(", "num_label", ",", "num_infer", ",", "num_correct", ")", ":", "\n", "    ", "\"\"\" calculate_f1 \"\"\"", "\n", "if", "num_infer", "==", "0", ":", "\n", "        ", "precision", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "precision", "=", "num_correct", "*", "1.0", "/", "num_infer", "\n", "\n", "", "if", "num_label", "==", "0", ":", "\n", "        ", "recall", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "recall", "=", "num_correct", "*", "1.0", "/", "num_label", "\n", "\n", "", "if", "num_correct", "==", "0", ":", "\n", "        ", "f1", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "return", "precision", ",", "recall", ",", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.DCG": [[1439, 1447], ["range", "len", "math.log"], "function", ["None"], ["", "def", "DCG", "(", "label_list", ")", ":", "\n", "    ", "\"\"\" DCG \"\"\"", "\n", "import", "math", "\n", "dcgsum", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "label_list", ")", ")", ":", "\n", "        ", "dcg", "=", "(", "2", "**", "label_list", "[", "i", "]", "-", "1", ")", "/", "math", ".", "log", "(", "i", "+", "2", ",", "2", ")", "\n", "dcgsum", "+=", "dcg", "\n", "", "return", "dcgsum", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.NDCG": [[1448, 1456], ["metrics.DCG", "sorted", "metrics.DCG"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.DCG", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.DCG"], ["", "def", "NDCG", "(", "label_list", ",", "topK", ")", ":", "\n", "    ", "\"\"\" NDCG \"\"\"", "\n", "dcg", "=", "DCG", "(", "label_list", "[", "0", ":", "topK", "]", ")", "\n", "ideal_list", "=", "sorted", "(", "label_list", ",", "reverse", "=", "True", ")", "\n", "ideal_dcg", "=", "DCG", "(", "ideal_list", "[", "0", ":", "topK", "]", ")", "\n", "if", "ideal_dcg", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "dcg", "/", "ideal_dcg", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.compare_list": [[1470, 1484], ["range", "len", "len", "len", "len", "len", "str", "str"], "function", ["None"], ["", "", "def", "compare_list", "(", "ground_truth", ",", "prediction", ")", ":", "\n", "    ", "\"\"\"compare list\"\"\"", "\n", "right_count", "=", "0", "\n", "min_len", "=", "len", "(", "ground_truth", ")", "if", "len", "(", "ground_truth", ")", "<", "len", "(", "prediction", ")", "else", "len", "(", "prediction", ")", "\n", "gap_count", "=", "len", "(", "ground_truth", ")", "-", "min_len", "\n", "\n", "for", "k", "in", "range", "(", "min_len", ")", ":", "\n", "        ", "if", "str", "(", "ground_truth", "[", "k", "]", ")", "==", "str", "(", "prediction", "[", "k", "]", ")", ":", "\n", "            ", "right_count", "+=", "1", "\n", "\n", "", "", "final_right_count", "=", "right_count", "-", "gap_count", "\n", "if", "final_right_count", "<", "0", ":", "\n", "        ", "final_right_count", "=", "0", "\n", "", "return", "final_right_count", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.cal_qac_and_pac": [[1485, 1526], ["json.load", "json.load", "open", "open", "len", "logging.info", "logging.info", "logging.info", "logging.info", "metrics.compare_list", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.compare_list"], ["", "def", "cal_qac_and_pac", "(", "ground_truth_file", ",", "prediction_file", ")", ":", "\n", "    ", "\"\"\"calculate qac and pac for cmrc2019\"\"\"", "\n", "qac", "=", "0", "\n", "pac", "=", "0", "\n", "qac_score", "=", "0", "\n", "pac_score", "=", "0", "\n", "total_question_count", "=", "0", "\n", "skip_question_count", "=", "0", "\n", "total_passage_count", "=", "0", "\n", "\n", "ground_truth_file", "=", "json", ".", "load", "(", "open", "(", "ground_truth_file", ",", "'rb'", ")", ")", "\n", "prediction_file", "=", "json", ".", "load", "(", "open", "(", "prediction_file", ",", "'rb'", ")", ")", "\n", "\n", "for", "instance", "in", "ground_truth_file", "[", "\"data\"", "]", ":", "\n", "        ", "context", "=", "instance", "[", "\"context\"", "]", "\n", "context_id", "=", "instance", "[", "\"context_id\"", "]", "\n", "choices", "=", "instance", "[", "\"choices\"", "]", "\n", "answers", "=", "instance", "[", "\"answers\"", "]", "\n", "\n", "predictions", "=", "[", "]", "\n", "if", "context_id", "not", "in", "prediction_file", ":", "\n", "            ", "logging", ".", "info", "(", "\"Not found context_id in prediction: {}\\n\"", ".", "format", "(", "context_id", ")", ")", "\n", "right_question_count", "=", "0", "\n", "", "else", ":", "\n", "            ", "predictions", "=", "prediction_file", "[", "context_id", "]", "\n", "right_question_count", "=", "compare_list", "(", "answers", ",", "predictions", ")", "\n", "\n", "", "qac", "+=", "right_question_count", "\n", "pac", "+=", "(", "right_question_count", "==", "len", "(", "answers", ")", ")", "\n", "\n", "total_question_count", "+=", "len", "(", "answers", ")", "\n", "skip_question_count", "+=", "len", "(", "answers", ")", "-", "len", "(", "predictions", ")", "\n", "total_passage_count", "+=", "1", "\n", "\n", "", "qac_score", "=", "100.0", "*", "qac", "/", "total_question_count", "\n", "pac_score", "=", "100.0", "*", "pac", "/", "total_passage_count", "\n", "\n", "if", "skip_question_count", ":", "\n", "        ", "logging", ".", "info", "(", "\"***Number of predicted samples is not equal to ground truth!***\"", ")", "\n", "\n", "", "return", "qac_score", ",", "pac_score", ",", "(", "total_question_count", ",", "skip_question_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.logits_matrix_to_array": [[1528, 1551], ["numpy.array", "numpy.transpose", "enumerate", "sorted", "sorted", "enumerate", "set", "set", "sorted.append", "range", "range", "sorted.append", "set.remove", "set.remove"], "function", ["None"], ["", "def", "logits_matrix_to_array", "(", "logits_matrix", ",", "index_2_uniqueid", ",", "index_2_label", ")", ":", "\n", "    ", "\"\"\"evaluation for chid\"\"\"", "\n", "logits_matrix", "=", "np", ".", "array", "(", "logits_matrix", ")", "\n", "logits_matrix", "=", "np", ".", "transpose", "(", "logits_matrix", ")", "\n", "tmp", "=", "[", "]", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "logits_matrix", ")", ":", "\n", "        ", "for", "j", ",", "col", "in", "enumerate", "(", "row", ")", ":", "\n", "            ", "tmp", ".", "append", "(", "(", "i", ",", "j", ",", "col", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "choice", "=", "set", "(", "range", "(", "i", "+", "1", ")", ")", "\n", "blanks", "=", "set", "(", "range", "(", "j", "+", "1", ")", ")", "\n", "", "tmp", "=", "sorted", "(", "tmp", ",", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ",", "reverse", "=", "True", ")", "\n", "results", "=", "[", "]", "\n", "for", "i", ",", "j", ",", "v", "in", "tmp", ":", "\n", "        ", "if", "(", "j", "in", "blanks", ")", "and", "(", "i", "in", "choice", ")", ":", "\n", "            ", "results", ".", "append", "(", "(", "i", ",", "j", ")", ")", "\n", "blanks", ".", "remove", "(", "j", ")", "\n", "choice", ".", "remove", "(", "i", ")", "\n", "", "", "results", "=", "sorted", "(", "results", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "False", ")", "\n", "\n", "ret_results", "=", "[", "[", "index_2_uniqueid", "[", "j", "]", ",", "i", "]", "for", "i", ",", "j", "in", "results", "]", "\n", "ret_labels", "=", "[", "[", "index_2_label", "[", "j", "]", ",", "i", "]", "for", "i", ",", "j", "in", "results", "]", "\n", "return", "ret_results", ",", "ret_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.chid_eval": [[1553, 1583], ["range", "raw_resluts.items", "sum", "len", "len", "len", "len", "len", "metrics.logits_matrix_to_array", "results.extend", "rel_labels.extend", "float", "float", "raw_resluts[].append", "int", "len", "enumerate", "enumerate"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.metrics.logits_matrix_to_array"], ["", "def", "chid_eval", "(", "logits", ",", "labels", ",", "qids", ",", "example_ids", ")", ":", "\n", "    ", "\"\"\"evaluation for chid\"\"\"", "\n", "assert", "len", "(", "logits", ")", "==", "len", "(", "labels", ")", "==", "len", "(", "qids", ")", "==", "len", "(", "example_ids", ")", "\n", "raw_resluts", "=", "{", "}", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "logits", ")", ")", ":", "\n", "        ", "e_id", "=", "example_ids", "[", "i", "]", "\n", "if", "e_id", "not", "in", "raw_resluts", ":", "\n", "            ", "raw_resluts", "[", "e_id", "]", "=", "[", "(", "logits", "[", "i", "]", ",", "qids", "[", "i", "]", ",", "labels", "[", "i", "]", ")", "]", "\n", "", "else", ":", "\n", "            ", "raw_resluts", "[", "e_id", "]", ".", "append", "(", "(", "logits", "[", "i", "]", ",", "qids", "[", "i", "]", ",", "labels", "[", "i", "]", ")", ")", "\n", "\n", "", "", "results", "=", "[", "]", "\n", "rel_labels", "=", "[", "]", "\n", "\n", "for", "e_id", ",", "elem", "in", "raw_resluts", ".", "items", "(", ")", ":", "\n", "        ", "index_2_uniqueid", "=", "{", "index", ":", "q_id", "for", "index", ",", "(", "_", ",", "q_id", ",", "_", ")", "in", "enumerate", "(", "elem", ")", "}", "\n", "index_2_label", "=", "{", "index", ":", "label", "for", "index", ",", "(", "_", ",", "_", ",", "label", ")", "in", "enumerate", "(", "elem", ")", "}", "\n", "\n", "all_logits", "=", "[", "logits", "for", "(", "logits", ",", "_", ",", "_", ")", "in", "elem", "]", "\n", "\n", "tmp_result", ",", "tmp_label", "=", "logits_matrix_to_array", "(", "all_logits", ",", "index_2_uniqueid", ",", "index_2_label", ")", "\n", "results", ".", "extend", "(", "tmp_result", ")", "\n", "rel_labels", ".", "extend", "(", "tmp_label", ")", "\n", "\n", "\n", "", "num_correct", "=", "sum", "(", "[", "int", "(", "ele", "[", "0", "]", "==", "ele", "[", "1", "]", ")", "for", "ele", "in", "rel_labels", "]", ")", "\n", "acc", "=", "float", "(", "num_correct", ")", "/", "float", "(", "len", "(", "rel_labels", ")", ")", "\n", "\n", "return", "acc", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.__init__": [[11, 13], ["erniekit.metrics.metrics.Metrics.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MRR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval": [[14, 21], ["print", "mrr.MRR.eval_twotower", "mrr.MRR.eval_pin"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval_twotower", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval_pin"], ["", "def", "eval", "(", "self", ",", "run_value", ",", "is_two_tower", "=", "False", ")", ":", "\n", "        ", "\"\"\"eval\"\"\"", "\n", "print", "(", "\"evaluating\"", ",", "is_two_tower", ")", "\n", "if", "is_two_tower", ":", "\n", "            ", "return", "self", ".", "eval_twotower", "(", "run_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "eval_pin", "(", "run_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval_twotower": [[22, 62], ["numpy.matmul", "numpy.take", "c.sum().min", "score.transpose.transpose.transpose", "numpy.take", "c.sum().min", "numpy.concatenate", "numpy.concatenate", "h_img.transpose", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.expand_dims", "c.sum", "numpy.arange", "numpy.expand_dims", "c.sum", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "", "def", "eval_twotower", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "\"\"\"eval_twotower\"\"\"", "\n", "h_cls_list", ",", "h_img_list", "=", "run_value", "\n", "h_cls", ",", "h_img", "=", "np", ".", "concatenate", "(", "\n", "h_cls_list", ",", "0", ")", ",", "np", ".", "concatenate", "(", "\n", "h_img_list", ",", "0", ")", "\n", "score", "=", "np", ".", "matmul", "(", "h_cls", ",", "h_img", ".", "transpose", "(", ")", ")", "# n * n", "\n", "n", "=", "score", ".", "shape", "[", "0", "]", "\n", "result", "=", "{", "}", "\n", "# text to image", "\n", "y", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "n", ")", ",", "1", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "n", ")", ",", "1", ")", "*", "n", "\n", "z", "=", "np", ".", "take", "(", "score", ",", "y", ")", "\n", "c", "=", "np", ".", "expand_dims", "(", "score", ",", "2", ")", ">", "np", ".", "expand_dims", "(", "z", ",", "1", ")", "\n", "ans_idx", "=", "c", ".", "sum", "(", "1", ")", ".", "min", "(", "1", ")", "\n", "r1", "=", "(", "ans_idx", "<", "1", ")", ".", "sum", "(", ")", "/", "n", "\n", "r5", "=", "(", "ans_idx", "<", "5", ")", ".", "sum", "(", ")", "/", "n", "\n", "r10", "=", "(", "ans_idx", "<", "10", ")", ".", "sum", "(", ")", "/", "n", "\n", "mrr", "=", "(", "1.0", "/", "(", "1.0", "+", "ans_idx", ")", ")", ".", "sum", "(", ")", "/", "n", "\n", "mr", "=", "(", "r1", "+", "r5", "+", "r10", ")", "/", "3.0", "\n", "result", "[", "\"text\"", "]", "=", "{", "\"r1\"", ":", "r1", ",", "\"r5\"", ":", "r5", ",", "\"r10\"", ":", "r10", ",", "\"mR\"", ":", "mr", ",", "\"mRR\"", ":", "mrr", "}", "\n", "# image to text", "\n", "score", "=", "score", ".", "transpose", "(", ")", "\n", "y", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "n", ")", ",", "1", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "n", ")", ",", "1", ")", "*", "n", "\n", "z", "=", "np", ".", "take", "(", "score", ",", "y", ")", "\n", "c", "=", "np", ".", "expand_dims", "(", "score", ",", "2", ")", ">", "np", ".", "expand_dims", "(", "z", ",", "1", ")", "\n", "ans_idx", "=", "c", ".", "sum", "(", "1", ")", ".", "min", "(", "1", ")", "\n", "r1", "=", "(", "ans_idx", "<", "1", ")", ".", "sum", "(", ")", "/", "n", "\n", "r5", "=", "(", "ans_idx", "<", "5", ")", ".", "sum", "(", ")", "/", "n", "\n", "r10", "=", "(", "ans_idx", "<", "10", ")", ".", "sum", "(", ")", "/", "n", "\n", "mrr", "=", "(", "1.0", "/", "(", "1.0", "+", "ans_idx", ")", ")", ".", "sum", "(", ")", "/", "n", "\n", "mr", "=", "(", "r1", "+", "r5", "+", "r10", ")", "/", "3.0", "\n", "result", "[", "\"image\"", "]", "=", "{", "\n", "\"r1\"", ":", "r1", ",", "\n", "\"r5\"", ":", "r5", ",", "\n", "\"r10\"", ":", "r10", ",", "\n", "\"mR\"", ":", "mr", ",", "\n", "\"mRR\"", ":", "mrr", "}", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.mrr.MRR.eval_pin": [[63, 132], ["collections.defaultdict", "collections.defaultdict", "zip", "len", "collections.defaultdict.items", "collections.defaultdict.items", "numpy.array", "zip", "sorted", "image_id_sort.index", "sorted", "text_id_sort.index", "numpy.array", "numpy.array", "text_res_dict[].append", "image_res_dict[].append", "len", "len"], "methods", ["None"], ["", "def", "eval_pin", "(", "self", ",", "run_value", ")", ":", "\n", "        ", "\"\"\"\n        run_value = [match_score, match_in_score]\n        match_score\u548cmatch_in_score\u5f62\u72b6\u662fbatch * batch\n        \"\"\"", "\n", "match_all_score_list", ",", "image_index_list", ",", "text_index_list", "=", "run_value", "\n", "text_res_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "image_res_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "match_all_score", ",", "image_index", ",", "text_index", "in", "zip", "(", "\n", "match_all_score_list", ",", "image_index_list", ",", "text_index_list", "\n", ")", ":", "\n", "# match_score, match_in_score = match_all_score[:,", "\n", "#                                               0], match_all_score[:, 1]", "\n", "            ", "image_index", ",", "text_index", "=", "(", "\n", "np", ".", "array", "(", "image_index", ")", ",", "\n", "np", ".", "array", "(", "text_index", ")", ",", "\n", ")", "\n", "scores", "=", "np", ".", "array", "(", "match_all_score", ")", "\n", "for", "score", ",", "img_idx", ",", "txt_idx", "in", "zip", "(", "\n", "scores", ",", "image_index", ",", "text_index", ")", ":", "\n", "                ", "text_res_dict", "[", "txt_idx", "]", ".", "append", "(", "(", "score", ",", "img_idx", ")", ")", "\n", "image_res_dict", "[", "img_idx", "]", ".", "append", "(", "(", "score", ",", "txt_idx", ")", ")", "\n", "", "", "number", "=", "len", "(", "text_res_dict", ")", "\n", "\n", "result", "=", "{", "}", "\n", "# text retrieval", "\n", "r1", ",", "r5", ",", "r10", ",", "idx_all", ",", "cnt", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "for", "idx", ",", "res_list", "in", "text_res_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "res_list", ")", "!=", "number", ":", "\n", "                ", "return", "{", "}", "\n", "", "res_list", "=", "sorted", "(", "res_list", ",", "reverse", "=", "True", ")", "\n", "image_id_sort", "=", "[", "x", "[", "1", "]", "for", "x", "in", "res_list", "]", "\n", "ans_idx", "=", "image_id_sort", ".", "index", "(", "idx", ")", "\n", "if", "ans_idx", "<", "1", ":", "\n", "                ", "r1", "+=", "1", "\n", "", "if", "ans_idx", "<", "5", ":", "\n", "                ", "r5", "+=", "1", "\n", "", "if", "ans_idx", "<", "10", ":", "\n", "                ", "r10", "+=", "1", "\n", "", "idx_all", "+=", "1.0", "/", "(", "ans_idx", "+", "1", ")", "\n", "cnt", "+=", "1", "\n", "", "r1", ",", "r5", ",", "r10", ",", "mRR", "=", "r1", "/", "cnt", ",", "r5", "/", "cnt", ",", "r10", "/", "cnt", ",", "idx_all", "/", "cnt", "\n", "mR", "=", "(", "r1", "+", "r5", "+", "r10", ")", "/", "3.0", "\n", "result", "[", "\"text\"", "]", "=", "{", "\"r1\"", ":", "r1", ",", "\"r5\"", ":", "r5", ",", "\"r10\"", ":", "r10", ",", "\"mR\"", ":", "mR", ",", "\"mRR\"", ":", "mRR", "}", "\n", "# image retrieval", "\n", "r1", ",", "r5", ",", "r10", ",", "idx_all", ",", "cnt", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "for", "idx", ",", "res_list", "in", "image_res_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "len", "(", "res_list", ")", "!=", "number", ":", "\n", "                ", "return", "{", "}", "\n", "", "res_list", "=", "sorted", "(", "res_list", ",", "reverse", "=", "True", ")", "\n", "text_id_sort", "=", "[", "x", "[", "1", "]", "for", "x", "in", "res_list", "]", "\n", "ans_idx", "=", "text_id_sort", ".", "index", "(", "idx", ")", "\n", "if", "ans_idx", "<", "1", ":", "\n", "                ", "r1", "+=", "1", "\n", "", "if", "ans_idx", "<", "5", ":", "\n", "                ", "r5", "+=", "1", "\n", "", "if", "ans_idx", "<", "10", ":", "\n", "                ", "r10", "+=", "1", "\n", "", "idx_all", "+=", "1.0", "/", "(", "ans_idx", "+", "1", ")", "\n", "cnt", "+=", "1", "\n", "", "r1", ",", "r5", ",", "r10", ",", "mRR", "=", "r1", "/", "cnt", ",", "r5", "/", "cnt", ",", "r10", "/", "cnt", ",", "idx_all", "/", "cnt", "\n", "mR", "=", "(", "r1", "+", "r5", "+", "r10", ")", "/", "3.0", "\n", "result", "[", "\"image\"", "]", "=", "{", "\n", "\"r1\"", ":", "r1", ",", "\n", "\"r5\"", ":", "r5", ",", "\n", "\"r10\"", ":", "r10", ",", "\n", "\"mR\"", ":", "mR", ",", "\n", "\"mRR\"", ":", "mRR", "}", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.get_f1": [[9, 30], ["None"], "function", ["None"], ["def", "get_f1", "(", "num_correct", ",", "num_infer", ",", "num_label", ")", ":", "\n", "    ", "\"\"\"\n    get p r f1\n    input: 10, 15, 20\n    output: (0.6666666666666666, 0.5, 0.5714285714285715)\n    \"\"\"", "\n", "if", "num_infer", "==", "0", ":", "\n", "        ", "precision", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "precision", "=", "num_correct", "*", "1.0", "/", "num_infer", "\n", "\n", "", "if", "num_label", "==", "0", ":", "\n", "        ", "recall", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "recall", "=", "num_correct", "*", "1.0", "/", "num_label", "\n", "\n", "", "if", "num_correct", "==", "0", ":", "\n", "        ", "f1", "=", "0.0", "\n", "", "else", ":", "\n", "        ", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", ")", "\n", "", "return", "(", "precision", ",", "recall", ",", "f1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.get_bool_ids_greater_than": [[32, 55], ["numpy.array", "len", "enumerate", "result.append", "tuple.get_bool_ids_greater_than", "result.append", "result.append"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.get_bool_ids_greater_than"], ["", "def", "get_bool_ids_greater_than", "(", "probs", ",", "limit", ",", "return_prob", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    get idx of the last dim in prob arraies, which is greater than a limitation\n    input: [[0.1, 0.1, 0.2, 0.5, 0.1, 0.3], [0.7, 0.6, 0.1, 0.1, 0.1, 0.1]]\n        0.4\n    output: [[3], [0, 1]]\n    \"\"\"", "\n", "probs", "=", "np", ".", "array", "(", "probs", ")", "\n", "dim_len", "=", "len", "(", "probs", ".", "shape", ")", "\n", "if", "dim_len", ">", "1", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "p", "in", "probs", ":", "\n", "            ", "result", ".", "append", "(", "get_bool_ids_greater_than", "(", "p", ",", "limit", ",", "return_prob", ")", ")", "\n", "", "return", "result", "\n", "", "else", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "probs", ")", ":", "\n", "            ", "if", "p", ">", "limit", ":", "\n", "                ", "if", "return_prob", ":", "\n", "                    ", "result", ".", "append", "(", "(", "i", ",", "p", ")", ")", "\n", "", "else", ":", "\n", "                    ", "result", ".", "append", "(", "i", ")", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.get_span_v2": [[57, 75], ["sorted", "sorted", "set", "filter", "len", "set.append"], "function", ["None"], ["", "", "def", "get_span_v2", "(", "start_ids", ",", "end_ids", ")", ":", "\n", "    ", "\"\"\"\n    start id can only be used once\n    end id can use multi times\n    get span set from position start and end list\n    input: [1, 2, 10] [4, 12]\n    output: set((2, 4), (10, 12))\n    \"\"\"", "\n", "result", "=", "[", "]", "\n", "start_ids", "=", "sorted", "(", "start_ids", ")", "\n", "end_ids", "=", "sorted", "(", "end_ids", ")", "\n", "for", "s_id", "in", "start_ids", ":", "\n", "        ", "e_id_list", "=", "filter", "(", "lambda", "x", ":", "x", ">=", "s_id", ",", "end_ids", ")", "\n", "if", "len", "(", "e_id_list", ")", ">", "0", ":", "\n", "            ", "e_id", "=", "e_id_list", "[", "0", "]", "\n", "result", ".", "append", "(", "(", "s_id", ",", "e_id", ")", ")", "\n", "", "", "result", "=", "set", "(", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.get_span_v3": [[77, 139], ["sorted", "len", "len", "set", "id_dict.setdefault", "id_dict.setdefault", "tuple", "id_dict.values"], "function", ["None"], ["", "def", "get_span_v3", "(", "start_ids", ",", "end_ids", ")", ":", "\n", "    ", "\"\"\"\n    every id can only be used once\n    pick the highest score among points options\n    get span set from position start and end list\n    input: [(1, 0.51), (2, 0.51), (10, 0.51)] [(4, 0.51), (12, 0.51)]\n    output: set(((2, 0.51), (4, 0.51)), ((10, 0.51), (12, 0.51)))\n    \"\"\"", "\n", "id_dict", "=", "{", "}", "\n", "for", "x", "in", "start_ids", ":", "\n", "        ", "id_dict", ".", "setdefault", "(", "x", "[", "0", "]", ",", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "\"\"", "]", ")", "\n", "id_dict", "[", "x", "[", "0", "]", "]", "[", "2", "]", "+=", "\"s\"", "\n", "", "for", "x", "in", "end_ids", ":", "\n", "        ", "id_dict", ".", "setdefault", "(", "x", "[", "0", "]", ",", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "\"\"", "]", ")", "\n", "id_dict", "[", "x", "[", "0", "]", "]", "[", "2", "]", "+=", "\"e\"", "\n", "", "id_list", "=", "[", "tuple", "(", "x", ")", "for", "x", "in", "id_dict", ".", "values", "(", ")", "]", "\n", "id_list", "=", "sorted", "(", "id_list", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "start_pointer", "=", "0", "\n", "start_best", "=", "None", "\n", "end_best", "=", "None", "\n", "end_pointer", "=", "0", "\n", "len_start", "=", "len", "(", "start_ids", ")", "\n", "len_end", "=", "len", "(", "end_ids", ")", "\n", "couple_dict", "=", "{", "}", "\n", "meet", "=", "False", "\n", "prev_start_pointer", "=", "True", "\n", "prev_end_pointer", "=", "True", "\n", "\n", "for", "this_id", "in", "id_list", ":", "\n", "# print \"This is\", this_id", "\n", "# meet end", "\n", "        ", "if", "prev_end_pointer", "and", "\"s\"", "in", "this_id", "[", "-", "1", "]", ":", "\n", "# print \"MEET\", start_best, end_best", "\n", "            ", "if", "start_best", "and", "end_best", "and", "start_best", "[", "0", "]", "<=", "end_best", "[", "0", "]", ":", "\n", "                ", "couple_dict", "[", "end_best", "]", "=", "start_best", "\n", "start_best", "=", "None", "\n", "end_best", "=", "None", "\n", "# keep best start", "\n", "", "", "if", "\"s\"", "in", "this_id", "[", "-", "1", "]", ":", "\n", "            ", "if", "start_best", "is", "None", "or", "this_id", "[", "1", "]", ">", "start_best", "[", "1", "]", ":", "\n", "                ", "start_best", "=", "this_id", "\n", "# keep best end", "\n", "", "", "if", "\"e\"", "in", "this_id", "[", "-", "1", "]", ":", "\n", "            ", "if", "end_best", "is", "None", "or", "this_id", "[", "1", "]", ">", "end_best", "[", "1", "]", ":", "\n", "                ", "end_best", "=", "this_id", "\n", "# print \"best\", start_best, end_best", "\n", "# next pointer", "\n", "", "", "prev_start_pointer", "=", "\"s\"", "in", "this_id", "[", "-", "1", "]", "\n", "prev_end_pointer", "=", "\"e\"", "in", "this_id", "[", "-", "1", "]", "\n", "\n", "", "if", "start_best", "and", "end_best", "and", "start_best", "[", "0", "]", "<=", "end_best", "[", "0", "]", ":", "\n", "        ", "couple_dict", "[", "end_best", "]", "=", "start_best", "\n", "start_best", "=", "None", "\n", "end_best", "=", "None", "\n", "", "result", "=", "[", "(", "couple_dict", "[", "end", "]", ",", "end", ")", "for", "end", "in", "couple_dict", "]", "\n", "result", "=", "set", "(", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.get_span": [[141, 192], ["len", "len", "set", "sorted", "sorted", "sorted", "sorted"], "function", ["None"], ["", "def", "get_span", "(", "start_ids", ",", "end_ids", ",", "with_prob", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    every id can only be used once\n    get span set from position start and end list\n    input: [1, 2, 10] [4, 12]\n    output: set((2, 4), (10, 12))\n    \"\"\"", "\n", "if", "with_prob", ":", "\n", "        ", "start_ids", "=", "sorted", "(", "start_ids", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "end_ids", "=", "sorted", "(", "end_ids", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "#start_ids = sorted(start_ids)", "\n", "#end_ids = sorted(end_ids)", "\n", "        ", "start_ids", "=", "sorted", "(", "start_ids", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "end_ids", "=", "sorted", "(", "end_ids", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "\n", "\n", "", "start_pointer", "=", "0", "\n", "end_pointer", "=", "0", "\n", "len_start", "=", "len", "(", "start_ids", ")", "\n", "len_end", "=", "len", "(", "end_ids", ")", "\n", "couple_dict", "=", "{", "}", "\n", "while", "start_pointer", "<", "len_start", "and", "end_pointer", "<", "len_end", ":", "\n", "        ", "if", "with_prob", ":", "\n", "            ", "if", "start_ids", "[", "start_pointer", "]", "[", "0", "]", "==", "end_ids", "[", "end_pointer", "]", "[", "0", "]", ":", "\n", "                ", "couple_dict", "[", "end_ids", "[", "end_pointer", "]", "]", "=", "start_ids", "[", "start_pointer", "]", "\n", "start_pointer", "+=", "1", "\n", "end_pointer", "+=", "1", "\n", "continue", "\n", "", "if", "start_ids", "[", "start_pointer", "]", "[", "0", "]", "<", "end_ids", "[", "end_pointer", "]", "[", "0", "]", ":", "\n", "                ", "couple_dict", "[", "end_ids", "[", "end_pointer", "]", "]", "=", "start_ids", "[", "start_pointer", "]", "\n", "start_pointer", "+=", "1", "\n", "continue", "\n", "", "if", "start_ids", "[", "start_pointer", "]", "[", "0", "]", ">", "end_ids", "[", "end_pointer", "]", "[", "0", "]", ":", "\n", "                ", "end_pointer", "+=", "1", "\n", "continue", "\n", "", "", "else", ":", "\n", "            ", "if", "start_ids", "[", "start_pointer", "]", "[", "0", "]", "==", "end_ids", "[", "end_pointer", "]", "[", "0", "]", ":", "\n", "                ", "couple_dict", "[", "end_ids", "[", "end_pointer", "]", "[", "0", "]", "]", "=", "start_ids", "[", "start_pointer", "]", "[", "0", "]", "\n", "start_pointer", "+=", "1", "\n", "end_pointer", "+=", "1", "\n", "continue", "\n", "", "if", "start_ids", "[", "start_pointer", "]", "[", "0", "]", "<", "end_ids", "[", "end_pointer", "]", "[", "0", "]", ":", "\n", "                ", "couple_dict", "[", "end_ids", "[", "end_pointer", "]", "[", "0", "]", "]", "=", "start_ids", "[", "start_pointer", "]", "[", "0", "]", "\n", "start_pointer", "+=", "1", "\n", "continue", "\n", "", "if", "start_ids", "[", "start_pointer", "]", "[", "0", "]", ">", "end_ids", "[", "end_pointer", "]", "[", "0", "]", ":", "\n", "                ", "end_pointer", "+=", "1", "\n", "continue", "\n", "", "", "", "result", "=", "[", "(", "couple_dict", "[", "end", "]", ",", "end", ")", "for", "end", "in", "couple_dict", "]", "\n", "result", "=", "set", "(", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.eval_span": [[194, 207], ["tuple.get_span", "tuple.get_span", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.get_span", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.get_span"], ["", "def", "eval_span", "(", "predict_start_ids", ",", "predict_end_ids", ",", "label_start_ids", ",", "label_end_ids", ")", ":", "\n", "    ", "\"\"\"\n    evaluate position extraction (start, end)\n    return num_correct, num_infer, num_label\n    input: [1, 2, 10] [4, 12] [2, 10] [4, 11]\n    output: (1, 2, 2)\n    \"\"\"", "\n", "pred_set", "=", "get_span", "(", "predict_start_ids", ",", "predict_end_ids", ")", "\n", "label_set", "=", "get_span", "(", "label_start_ids", ",", "label_end_ids", ")", "\n", "num_correct", "=", "len", "(", "pred_set", "&", "label_set", ")", "\n", "num_infer", "=", "len", "(", "pred_set", ")", "\n", "num_label", "=", "len", "(", "label_set", ")", "\n", "return", "(", "num_correct", ",", "num_infer", ",", "num_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.eval_multi_class_span": [[209, 228], ["zip", "tuple.eval_span"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.eval_span"], ["", "def", "eval_multi_class_span", "(", "predict_start_ids_list", ",", "predict_end_ids_list", ",", "label_start_ids_list", ",", "label_end_ids_list", ")", ":", "\n", "    ", "\"\"\"\n    evaluate position extraction (start, end), input is an ids list\n    return num_correct, num_infer, num_label\n    input: [[1, 2, 10]], [[4, 12]], [[2, 10]], [[4, 11]]\n    output: (1, 2, 2)\n    \"\"\"", "\n", "num_correct", "=", "0", "\n", "num_infer", "=", "0", "\n", "num_label", "=", "0", "\n", "for", "predict_start_ids", ",", "predict_end_ids", ",", "label_start_ids", ",", "label_end_ids", "in", "zip", "(", "predict_start_ids_list", ",", "predict_end_ids_list", ",", "label_start_ids_list", ",", "label_end_ids_list", ")", ":", "\n", "        ", "result", "=", "eval_span", "(", "predict_start_ids", ",", "predict_end_ids", ",", "label_start_ids", ",", "label_end_ids", ")", "\n", "num_correct", "+=", "result", "[", "0", "]", "\n", "num_infer", "+=", "result", "[", "1", "]", "\n", "num_label", "+=", "result", "[", "2", "]", "\n", "", "return", "(", "num_correct", ",", "num_infer", ",", "num_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tuple.sets_compare": [[230, 247], ["zip", "set", "set", "len", "len", "len"], "function", ["None"], ["", "def", "sets_compare", "(", "sets_predict", ",", "sets_label", ")", ":", "\n", "    ", "\"\"\"\n    sets_compare_label\n    input: [data [tuple list [ tuple ...] ... ] ...]\n    output: num_correct, num_pred, num_label\n    NOTE: basic set should be tuple\n    \"\"\"", "\n", "num_correct", "=", "0", "\n", "num_pred", "=", "0", "\n", "num_label", "=", "0", "\n", "for", "set_1", ",", "set_2", "in", "zip", "(", "sets_predict", ",", "sets_label", ")", ":", "\n", "        ", "set_1", "=", "set", "(", "set_1", ")", "\n", "set_2", "=", "set", "(", "set_2", ")", "\n", "num_pred", "+=", "len", "(", "set_1", ")", "\n", "num_label", "+=", "len", "(", "set_2", ")", "\n", "num_correct", "+=", "len", "(", "set_1", "&", "set_2", ")", "\n", "", "return", "(", "num_correct", ",", "num_pred", ",", "num_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.FullTokenizer.__init__": [[125, 130], ["tokenization.load_vocab", "tokenization.BasicTokenizer", "tokenization.WordpieceTokenizer", "tokenization.FullTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "inv_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ")", "\n", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.FullTokenizer.tokenize": [[131, 139], ["tokenization.FullTokenizer.basic_tokenizer.tokenize", "tokenization.FullTokenizer.wordpiece_tokenizer.tokenize", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"tokenize\"\"\"", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "            ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.FullTokenizer.convert_tokens_to_ids": [[140, 143], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"convert_tokens_to_ids\"\"\"", "\n", "return", "convert_by_vocab", "(", "self", ".", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.FullTokenizer.convert_ids_to_tokens": [[144, 147], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"convert_ids_to_tokens\"\"\"", "\n", "return", "convert_by_vocab", "(", "self", ".", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.CharTokenizer.__init__": [[152, 156], ["tokenization.load_vocab", "tokenization.WordpieceTokenizer", "tokenization.CharTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "inv_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.CharTokenizer.tokenize": [[157, 164], ["text.lower().split", "tokenization.CharTokenizer.tokenizer.tokenize", "text.lower", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"tokenize\"\"\"", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ".", "lower", "(", ")", ".", "split", "(", "\" \"", ")", ":", "\n", "            ", "for", "sub_token", "in", "self", ".", "tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.CharTokenizer.convert_tokens_to_ids": [[165, 168], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"convert_tokens_to_ids\"\"\"", "\n", "return", "convert_by_vocab", "(", "self", ".", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.CharTokenizer.convert_ids_to_tokens": [[169, 172], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"convert_ids_to_tokens\"\"\"", "\n", "return", "convert_by_vocab", "(", "self", ".", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.BasicTokenizer.__init__": [[177, 184], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ")", ":", "\n", "        ", "\"\"\"Constructs a BasicTokenizer.\n\n        Args:\n            do_lower_case: Whether to lower case the input.\n        \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.BasicTokenizer.tokenize": [[185, 208], ["tokenization.convert_to_unicode", "tokenization.BasicTokenizer._clean_text", "tokenization.BasicTokenizer._tokenize_chinese_chars", "tokenization.whitespace_tokenize", "tokenization.whitespace_tokenize", "split_tokens.extend", "tokenization.BasicTokenizer.lower", "tokenization.BasicTokenizer._run_strip_accents", "tokenization.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.BasicTokenizer._run_strip_accents": [[209, 219], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.BasicTokenizer._run_split_on_punc": [[220, 239], ["list", "len", "tokenization._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.BasicTokenizer._tokenize_chinese_chars": [[240, 252], ["ord", "tokenization.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.BasicTokenizer._is_chinese_char": [[253, 274], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#     https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.BasicTokenizer._clean_text": [[275, 287], ["ord", "tokenization._is_whitespace", "tokenization._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_whitespace", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.SentencepieceTokenizer.__init__": [[292, 300], ["tokenization.load_vocab", "sentencepiece.SentencePieceProcessor", "tokenization.SentencepieceTokenizer.tokenizer.Load", "tokenization.SentencepieceTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ",", "unk_token", "=", "\"[UNK]\"", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "inv_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "tokenizer", "=", "sp", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "tokenizer", ".", "Load", "(", "vocab_file", "+", "\".model\"", ")", "\n", "self", ".", "sp_unk_token", "=", "\"<unk>\"", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.SentencepieceTokenizer.tokenize": [[301, 322], ["tokenization.convert_to_unicode", "tokenization.SentencepieceTokenizer.tokenizer.EncodeAsPieces", "convert_to_unicode.lower", "convert_to_unicode.replace", "output_tokens.append", "output_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        Returns:\n            A list of wordpiece tokens.\n        \"\"\"", "\n", "text", "=", "text", ".", "lower", "(", ")", "if", "self", ".", "do_lower_case", "else", "text", "\n", "text", "=", "convert_to_unicode", "(", "text", ".", "replace", "(", "\"\\1\"", ",", "\" \"", ")", ")", "\n", "tokens", "=", "self", ".", "tokenizer", ".", "EncodeAsPieces", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "token", "==", "self", ".", "sp_unk_token", ":", "\n", "                ", "token", "=", "self", ".", "unk_token", "\n", "\n", "", "if", "token", "in", "self", ".", "vocab", ":", "\n", "                ", "output_tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.SentencepieceTokenizer.convert_tokens_to_ids": [[323, 326], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"convert_tokens_to_ids\"\"\"", "\n", "return", "convert_by_vocab", "(", "self", ".", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.SentencepieceTokenizer.convert_ids_to_tokens": [[327, 330], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"convert_ids_to_tokens\"\"\"", "\n", "return", "convert_by_vocab", "(", "self", ".", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.WordsegTokenizer.__init__": [[335, 345], ["tokenization.load_vocab", "sentencepiece.SentencePieceProcessor", "tokenization.WordsegTokenizer.tokenizer.Load", "tokenization.WordsegTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ",", "unk_token", "=", "\"[UNK]\"", ",", "\n", "split_token", "=", "\"\\1\"", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "inv_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "self", ".", "tokenizer", "=", "sp", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "tokenizer", ".", "Load", "(", "vocab_file", "+", "\".model\"", ")", "\n", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "split_token", "=", "split_token", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.WordsegTokenizer.tokenize": [[346, 365], ["tokenization.convert_to_unicode", "convert_to_unicode.split", "convert_to_unicode.lower", "output_tokens.append", "tokenization.WordsegTokenizer.tokenizer.EncodeAsPieces", "output_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        Returns:\n            A list of wordpiece tokens.\n        \"\"\"", "\n", "text", "=", "text", ".", "lower", "(", ")", "if", "self", ".", "do_lower_case", "else", "text", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ".", "split", "(", "self", ".", "split_token", ")", ":", "\n", "            ", "if", "token", "in", "self", ".", "vocab", ":", "\n", "                ", "output_tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "sp_tokens", "=", "self", ".", "tokenizer", ".", "EncodeAsPieces", "(", "token", ")", "\n", "for", "sp_token", "in", "sp_tokens", ":", "\n", "                    ", "if", "sp_token", "in", "self", ".", "vocab", ":", "\n", "                        ", "output_tokens", ".", "append", "(", "sp_token", ")", "\n", "", "", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.WordsegTokenizer.convert_tokens_to_ids": [[366, 369], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"convert_tokens_to_ids\"\"\"", "\n", "return", "convert_by_vocab", "(", "self", ".", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.WordsegTokenizer.convert_ids_to_tokens": [[370, 373], ["tokenization.convert_by_vocab"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"convert_ids_to_tokens\"\"\"", "\n", "return", "convert_by_vocab", "(", "self", ".", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.WordpieceTokenizer.__init__": [[378, 382], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.WordpieceTokenizer.tokenize": [[383, 435], ["tokenization.convert_to_unicode", "tokenization.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n            input = \"unaffable\"\n            output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n            text: A single token or whitespace separated tokens. This should have\n                already been passed through `BasicTokenizer.\n\n        Returns:\n            A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.convert_to_unicode": [[26, 44], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "text.decode", "isinstance", "ValueError", "type", "type"], "function", ["None"], ["def", "convert_to_unicode", "(", "text", ")", ":", "\n", "    ", "\"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "return", "text", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.printable_text": [[46, 67], ["isinstance", "isinstance", "isinstance", "ValueError", "text.decode", "ValueError", "isinstance", "text.encode", "ValueError", "type", "type"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode"], ["", "", "def", "printable_text", "(", "text", ")", ":", "\n", "    ", "\"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"", "\n", "\n", "# These functions want `str` for both Python2 and Python3, but in one case", "\n", "# it's a Unicode string and in the other it's a byte string.", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "return", "text", ".", "encode", "(", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.load_vocab": [[69, 82], ["collections.OrderedDict", "open", "enumerate", "convert_to_unicode().split", "token.strip.strip", "int", "len", "tokenization.convert_to_unicode", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "", "def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "fin", "=", "open", "(", "vocab_file", ")", "\n", "for", "num", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "        ", "items", "=", "convert_to_unicode", "(", "line", ".", "strip", "(", ")", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "items", ")", ">", "2", ":", "\n", "            ", "break", "\n", "", "token", "=", "items", "[", "0", "]", "\n", "index", "=", "items", "[", "1", "]", "if", "len", "(", "items", ")", "==", "2", "else", "num", "\n", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "int", "(", "index", ")", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.convert_by_vocab": [[84, 90], ["output.append"], "function", ["None"], ["", "def", "convert_by_vocab", "(", "vocab", ",", "items", ")", ":", "\n", "    ", "\"\"\"Converts a sequence of [tokens|ids] using the vocab.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "item", "in", "items", ":", "\n", "        ", "output", ".", "append", "(", "vocab", "[", "item", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.convert_tokens_to_ids_include_unk": [[92, 101], ["output.append", "output.append"], "function", ["None"], ["", "def", "convert_tokens_to_ids_include_unk", "(", "vocab", ",", "tokens", ",", "unk_token", "=", "\"[UNK]\"", ")", ":", "\n", "    ", "\"\"\"convert_tokens_to_ids_include_unk\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "if", "token", "in", "vocab", ":", "\n", "            ", "output", ".", "append", "(", "vocab", "[", "token", "]", ")", "\n", "", "else", ":", "\n", "            ", "output", ".", "append", "(", "vocab", "[", "unk_token", "]", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.convert_tokens_to_ids": [[103, 106], ["tokenization.convert_by_vocab"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "vocab", ",", "tokens", ")", ":", "\n", "    ", "\"\"\"convert_tokens_to_ids\"\"\"", "\n", "return", "convert_by_vocab", "(", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.convert_ids_to_tokens": [[108, 111], ["tokenization.convert_by_vocab"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "inv_vocab", ",", "ids", ")", ":", "\n", "    ", "\"\"\"convert_ids_to_tokens\"\"\"", "\n", "return", "convert_by_vocab", "(", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.whitespace_tokenize": [[113, 120], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a peice of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization._is_whitespace": [[437, 447], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization._is_control": [[449, 459], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization._is_punctuation": [[461, 475], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.tokenization.tokenize_chinese_chars": [[476, 517], ["ord", "tokenization.tokenize_chinese_chars._is_chinese_char"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._is_chinese_char"], ["", "def", "tokenize_chinese_chars", "(", "text", ")", ":", "\n", "    ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "\n", "def", "_is_chinese_char", "(", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#     https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n", "", "output", "=", "[", "]", "\n", "buff", "=", "\"\"", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "_is_chinese_char", "(", "cp", ")", ":", "\n", "            ", "if", "buff", "!=", "\"\"", ":", "\n", "                ", "output", ".", "append", "(", "buff", ")", "\n", "buff", "=", "\"\"", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "else", ":", "\n", "            ", "buff", "+=", "char", "\n", "\n", "", "", "if", "buff", "!=", "\"\"", ":", "\n", "        ", "output", ".", "append", "(", "buff", ")", "\n", "\n", "", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.data_set.DataSet.__init__": [[17, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param params_dict:\n        \"\"\"", "\n", "self", ".", "train_reader", "=", "None", "\n", "self", ".", "test_reader", "=", "None", "\n", "self", ".", "dev_reader", "=", "None", "\n", "self", ".", "predict_reader", "=", "None", "\n", "\n", "self", ".", "params_dict", "=", "params_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.data_set.DataSet.build": [[28, 106], ["data_set.DataSet.params_dict.__contains__", "data_set.DataSet.params_dict.__contains__", "data_set.DataSet.params_dict.__contains__", "data_set.DataSet.params_dict.__contains__", "data_set_reader_dict.__contains__", "data_set_reader_dict.__contains__", "data_set_reader_dict.__contains__", "data_set_reader_dict.__contains__", "reader_list.append", "reader_list.append", "reader_list.append", "reader_list.append", "data_set.DataSet.params_dict.get().get", "reader_config.ReaderConfig", "reader_config.ReaderConfig.build", "data_set.DataSet.params_dict.get().get", "common.register.RegisterSet.data_set_reader.__getitem__", "common.register.RegisterSet.data_set_reader.__getitem__.", "paddle.io.DataLoader", "data_set_reader_dict.__contains__", "field.Field", "field.Field.build", "data_set.DataSet.params_dict.get().get", "data_set.DataSet.params_dict.get().get", "reader_config.ReaderConfig", "reader_config.ReaderConfig.build", "data_set.DataSet.params_dict.get().get", "common.register.RegisterSet.data_set_reader.__getitem__", "common.register.RegisterSet.data_set_reader.__getitem__.", "paddle.io.DataLoader", "data_set.DataSet.params_dict.get", "field.Field.reader_info.get", "common.register.RegisterSet.field_reader.__getitem__", "common.register.RegisterSet.field_reader.__getitem__.", "train_fields.append", "data_set.DataSet.params_dict.get", "field.Field", "field.Field.build", "data_set.DataSet.params_dict.get().get", "data_set.DataSet.params_dict.get", "data_set.DataSet.params_dict.get", "field.Field.reader_info.get", "common.register.RegisterSet.field_reader.__getitem__", "common.register.RegisterSet.field_reader.__getitem__.", "predict_fields.append", "data_set.DataSet.params_dict.get", "data_set.DataSet.params_dict.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "reader_list", "=", "[", "]", "\n", "data_set_reader_dict", "=", "{", "}", "\n", "\n", "if", "self", ".", "params_dict", ".", "__contains__", "(", "\"train_reader\"", ")", ":", "\n", "            ", "reader_list", ".", "append", "(", "\"train_reader\"", ")", "\n", "", "if", "self", ".", "params_dict", ".", "__contains__", "(", "\"test_reader\"", ")", ":", "\n", "            ", "reader_list", ".", "append", "(", "\"test_reader\"", ")", "\n", "", "if", "self", ".", "params_dict", ".", "__contains__", "(", "\"dev_reader\"", ")", ":", "\n", "            ", "reader_list", ".", "append", "(", "\"dev_reader\"", ")", "\n", "", "if", "self", ".", "params_dict", ".", "__contains__", "(", "\"predict_reader\"", ")", ":", "\n", "            ", "reader_list", ".", "append", "(", "\"predict_reader\"", ")", "\n", "\n", "", "for", "reader_name", "in", "reader_list", ":", "\n", "            ", "cfg_list", "=", "self", ".", "params_dict", ".", "get", "(", "reader_name", ")", ".", "get", "(", "\"fields\"", ")", "\n", "train_fields", "=", "[", "]", "\n", "for", "item", "in", "cfg_list", ":", "\n", "                ", "item_field", "=", "Field", "(", ")", "\n", "item_field", ".", "build", "(", "item", ")", "\n", "if", "item_field", ".", "reader_info", "and", "item_field", ".", "reader_info", ".", "get", "(", "\"type\"", ",", "None", ")", ":", "\n", "                    ", "reader_class", "=", "RegisterSet", ".", "field_reader", ".", "__getitem__", "(", "item_field", ".", "reader_info", "[", "\"type\"", "]", ")", "\n", "field_reader", "=", "reader_class", "(", "item_field", ")", "\n", "item_field", ".", "field_reader", "=", "field_reader", "\n", "train_fields", ".", "append", "(", "item_field", ")", "\n", "\n", "", "", "reader_cfg", "=", "ReaderConfig", "(", ")", "\n", "reader_cfg", ".", "build", "(", "self", ".", "params_dict", ".", "get", "(", "reader_name", ")", ".", "get", "(", "\"config\"", ")", ")", "\n", "\n", "dataset_reader_name", "=", "self", ".", "params_dict", ".", "get", "(", "reader_name", ")", ".", "get", "(", "\"type\"", ")", "\n", "dataset_reader_class", "=", "RegisterSet", ".", "data_set_reader", ".", "__getitem__", "(", "dataset_reader_name", ")", "\n", "one_reader", "=", "dataset_reader_class", "(", "name", "=", "reader_name", ",", "fields", "=", "train_fields", ",", "config", "=", "reader_cfg", ")", "\n", "# TODO:\u8fd9\u91cc\u9700\u8981\u7528dataset\u6765\u6784\u9020\u51fadataloader", "\n", "one_loader", "=", "DataLoader", "(", "one_reader", ",", "\n", "batch_size", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "data_set_reader_dict", "[", "reader_name", "]", "=", "one_loader", "\n", "\n", "", "if", "data_set_reader_dict", ".", "__contains__", "(", "\"train_reader\"", ")", ":", "\n", "            ", "self", ".", "train_reader", "=", "data_set_reader_dict", "[", "\"train_reader\"", "]", "\n", "\n", "", "if", "data_set_reader_dict", ".", "__contains__", "(", "\"test_reader\"", ")", ":", "\n", "            ", "self", ".", "test_reader", "=", "data_set_reader_dict", "[", "\"test_reader\"", "]", "\n", "\n", "", "if", "data_set_reader_dict", ".", "__contains__", "(", "\"dev_reader\"", ")", ":", "\n", "            ", "self", ".", "dev_reader", "=", "data_set_reader_dict", "[", "\"dev_reader\"", "]", "\n", "\n", "", "if", "data_set_reader_dict", ".", "__contains__", "(", "\"predict_reader\"", ")", ":", "\n", "            ", "self", ".", "predict_reader", "=", "data_set_reader_dict", "[", "\"predict_reader\"", "]", "\n", "", "elif", "data_set_reader_dict", ".", "__contains__", "(", "\"train_reader\"", ")", ":", "\n", "            ", "cfg_list", "=", "self", ".", "params_dict", ".", "get", "(", "\"train_reader\"", ")", ".", "get", "(", "\"fields\"", ")", "\n", "predict_fields", "=", "[", "]", "\n", "for", "item", "in", "cfg_list", ":", "\n", "                ", "item_field", "=", "Field", "(", ")", "\n", "item_field", ".", "build", "(", "item", ")", "\n", "if", "item_field", ".", "reader_info", "and", "item_field", ".", "reader_info", ".", "get", "(", "\"type\"", ",", "None", ")", ":", "\n", "                    ", "reader_class", "=", "RegisterSet", ".", "field_reader", ".", "__getitem__", "(", "item_field", ".", "reader_info", "[", "\"type\"", "]", ")", "\n", "field_reader", "=", "reader_class", "(", "item_field", ")", "\n", "item_field", ".", "field_reader", "=", "field_reader", "\n", "predict_fields", ".", "append", "(", "item_field", ")", "\n", "\n", "", "", "reader_cfg", "=", "ReaderConfig", "(", ")", "\n", "reader_cfg", ".", "build", "(", "self", ".", "params_dict", ".", "get", "(", "\"train_reader\"", ")", ".", "get", "(", "\"config\"", ")", ")", "\n", "\n", "dataset_reader_name", "=", "self", ".", "params_dict", ".", "get", "(", "\"train_reader\"", ")", ".", "get", "(", "\"type\"", ")", "\n", "dataset_reader_class", "=", "RegisterSet", ".", "data_set_reader", ".", "__getitem__", "(", "dataset_reader_name", ")", "\n", "predict_reader", "=", "dataset_reader_class", "(", "name", "=", "\"predict_reader\"", ",", "fields", "=", "predict_fields", ",", "\n", "config", "=", "reader_cfg", ")", "\n", "\n", "# TODO:\u8fd9\u91cc\u9700\u8981\u7528dataset\u6765\u6784\u9020\u51fadataloader", "\n", "self", ".", "predict_reader", "=", "DataLoader", "(", "predict_reader", ",", "\n", "batch_size", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.data_set_ernie3.DataSet.__init__": [[17, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "params_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param params_dict:\n        \"\"\"", "\n", "self", ".", "train_reader", "=", "None", "\n", "self", ".", "test_reader", "=", "None", "\n", "self", ".", "dev_reader", "=", "None", "\n", "self", ".", "predict_reader", "=", "None", "\n", "\n", "self", ".", "params_dict", "=", "params_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.data_set_ernie3.DataSet.build": [[28, 100], ["data_set_ernie3.DataSet.params_dict.__contains__", "data_set_ernie3.DataSet.params_dict.__contains__", "data_set_ernie3.DataSet.params_dict.__contains__", "data_set_ernie3.DataSet.params_dict.__contains__", "data_set_reader_dict.__contains__", "data_set_reader_dict.__contains__", "data_set_reader_dict.__contains__", "data_set_reader_dict.__contains__", "reader_list.append", "reader_list.append", "reader_list.append", "reader_list.append", "data_set_ernie3.DataSet.params_dict.get().get", "erniekit.data.reader_config.ReaderConfig", "erniekit.data.reader_config.ReaderConfig.build", "data_set_ernie3.DataSet.params_dict.get().get", "erniekit.common.register.RegisterSet.data_set_reader.__getitem__", "erniekit.common.register.RegisterSet.data_set_reader.__getitem__.", "data_set_reader_dict.__contains__", "erniekit.data.field.Field", "erniekit.data.field.Field.build", "data_set_ernie3.DataSet.params_dict.get().get", "data_set_ernie3.DataSet.params_dict.get().get", "erniekit.data.reader_config.ReaderConfig", "erniekit.data.reader_config.ReaderConfig.build", "data_set_ernie3.DataSet.params_dict.get().get", "erniekit.common.register.RegisterSet.data_set_reader.__getitem__", "erniekit.common.register.RegisterSet.data_set_reader.__getitem__.", "data_set_ernie3.DataSet.params_dict.get", "erniekit.data.field.Field.reader_info.get", "erniekit.common.register.RegisterSet.field_reader.__getitem__", "erniekit.common.register.RegisterSet.field_reader.__getitem__.", "train_fields.append", "data_set_ernie3.DataSet.params_dict.get", "erniekit.data.field.Field", "erniekit.data.field.Field.build", "data_set_ernie3.DataSet.params_dict.get().get", "data_set_ernie3.DataSet.params_dict.get", "data_set_ernie3.DataSet.params_dict.get", "erniekit.data.field.Field.reader_info.get", "erniekit.common.register.RegisterSet.field_reader.__getitem__", "erniekit.common.register.RegisterSet.field_reader.__getitem__.", "predict_fields.append", "data_set_ernie3.DataSet.params_dict.get", "data_set_ernie3.DataSet.params_dict.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "reader_list", "=", "[", "]", "\n", "data_set_reader_dict", "=", "{", "}", "\n", "\n", "if", "self", ".", "params_dict", ".", "__contains__", "(", "\"train_reader\"", ")", ":", "\n", "            ", "reader_list", ".", "append", "(", "\"train_reader\"", ")", "\n", "", "if", "self", ".", "params_dict", ".", "__contains__", "(", "\"test_reader\"", ")", ":", "\n", "            ", "reader_list", ".", "append", "(", "\"test_reader\"", ")", "\n", "", "if", "self", ".", "params_dict", ".", "__contains__", "(", "\"dev_reader\"", ")", ":", "\n", "            ", "reader_list", ".", "append", "(", "\"dev_reader\"", ")", "\n", "", "if", "self", ".", "params_dict", ".", "__contains__", "(", "\"predict_reader\"", ")", ":", "\n", "            ", "reader_list", ".", "append", "(", "\"predict_reader\"", ")", "\n", "\n", "", "for", "reader_name", "in", "reader_list", ":", "\n", "            ", "cfg_list", "=", "self", ".", "params_dict", ".", "get", "(", "reader_name", ")", ".", "get", "(", "\"fields\"", ")", "\n", "train_fields", "=", "[", "]", "\n", "for", "item", "in", "cfg_list", ":", "\n", "                ", "item_field", "=", "Field", "(", ")", "\n", "item_field", ".", "build", "(", "item", ")", "\n", "if", "item_field", ".", "reader_info", "and", "item_field", ".", "reader_info", ".", "get", "(", "\"type\"", ",", "None", ")", ":", "\n", "                    ", "reader_class", "=", "RegisterSet", ".", "field_reader", ".", "__getitem__", "(", "item_field", ".", "reader_info", "[", "\"type\"", "]", ")", "\n", "field_reader", "=", "reader_class", "(", "item_field", ")", "\n", "item_field", ".", "field_reader", "=", "field_reader", "\n", "train_fields", ".", "append", "(", "item_field", ")", "\n", "\n", "", "", "reader_cfg", "=", "ReaderConfig", "(", ")", "\n", "reader_cfg", ".", "build", "(", "self", ".", "params_dict", ".", "get", "(", "reader_name", ")", ".", "get", "(", "\"config\"", ")", ")", "\n", "\n", "dataset_reader_name", "=", "self", ".", "params_dict", ".", "get", "(", "reader_name", ")", ".", "get", "(", "\"type\"", ")", "\n", "dataset_reader_class", "=", "RegisterSet", ".", "data_set_reader", ".", "__getitem__", "(", "dataset_reader_name", ")", "\n", "one_reader", "=", "dataset_reader_class", "(", "name", "=", "reader_name", ",", "fields", "=", "train_fields", ",", "config", "=", "reader_cfg", ")", "\n", "# TODO:\u8fd9\u91cc\u9700\u8981\u7528dataset\u6765\u6784\u9020\u51fadataloader", "\n", "# one_loader = DataLoader(one_reader,", "\n", "#         batch_size=None,", "\n", "#         shuffle=False,", "\n", "#         drop_last=False)", "\n", "\n", "data_set_reader_dict", "[", "reader_name", "]", "=", "one_reader", "\n", "\n", "", "if", "data_set_reader_dict", ".", "__contains__", "(", "\"train_reader\"", ")", ":", "\n", "            ", "self", ".", "train_reader", "=", "data_set_reader_dict", "[", "\"train_reader\"", "]", "\n", "\n", "", "if", "data_set_reader_dict", ".", "__contains__", "(", "\"test_reader\"", ")", ":", "\n", "            ", "self", ".", "test_reader", "=", "data_set_reader_dict", "[", "\"test_reader\"", "]", "\n", "\n", "", "if", "data_set_reader_dict", ".", "__contains__", "(", "\"dev_reader\"", ")", ":", "\n", "            ", "self", ".", "dev_reader", "=", "data_set_reader_dict", "[", "\"dev_reader\"", "]", "\n", "\n", "", "if", "data_set_reader_dict", ".", "__contains__", "(", "\"predict_reader\"", ")", ":", "\n", "            ", "self", ".", "predict_reader", "=", "data_set_reader_dict", "[", "\"predict_reader\"", "]", "\n", "", "elif", "data_set_reader_dict", ".", "__contains__", "(", "\"train_reader\"", ")", ":", "\n", "            ", "cfg_list", "=", "self", ".", "params_dict", ".", "get", "(", "\"train_reader\"", ")", ".", "get", "(", "\"fields\"", ")", "\n", "predict_fields", "=", "[", "]", "\n", "for", "item", "in", "cfg_list", ":", "\n", "                ", "item_field", "=", "Field", "(", ")", "\n", "item_field", ".", "build", "(", "item", ")", "\n", "if", "item_field", ".", "reader_info", "and", "item_field", ".", "reader_info", ".", "get", "(", "\"type\"", ",", "None", ")", ":", "\n", "                    ", "reader_class", "=", "RegisterSet", ".", "field_reader", ".", "__getitem__", "(", "item_field", ".", "reader_info", "[", "\"type\"", "]", ")", "\n", "field_reader", "=", "reader_class", "(", "item_field", ")", "\n", "item_field", ".", "field_reader", "=", "field_reader", "\n", "predict_fields", ".", "append", "(", "item_field", ")", "\n", "\n", "", "", "reader_cfg", "=", "ReaderConfig", "(", ")", "\n", "reader_cfg", ".", "build", "(", "self", ".", "params_dict", ".", "get", "(", "\"train_reader\"", ")", ".", "get", "(", "\"config\"", ")", ")", "\n", "\n", "dataset_reader_name", "=", "self", ".", "params_dict", ".", "get", "(", "\"train_reader\"", ")", ".", "get", "(", "\"type\"", ")", "\n", "dataset_reader_class", "=", "RegisterSet", ".", "data_set_reader", ".", "__getitem__", "(", "dataset_reader_name", ")", "\n", "self", ".", "predict_reader", "=", "dataset_reader_class", "(", "name", "=", "\"predict_reader\"", ",", "fields", "=", "predict_fields", ",", "\n", "config", "=", "reader_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.__init__": [[11, 23], ["vocabulary.Vocabulary.load_vocab", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_path", ",", "unk_token", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab_path: \u8bcd\u8868\u5730\u5740\uff0c\u5fc5\u586b\n        :param unk_token: unk\u9ed8\u8ba4\u7684token\uff0c\u5fc5\u586b\n        \"\"\"", "\n", "if", "not", "vocab_path", ":", "\n", "            ", "raise", "ValueError", "(", "\"vocab_path can't be None\"", ")", "\n", "\n", "", "self", ".", "vocab_path", "=", "vocab_path", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "vocab_dict", ",", "self", ".", "id_dict", "=", "self", ".", "load_vocab", "(", ")", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "id_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.load_vocab": [[24, 45], ["collections.OrderedDict", "collections.OrderedDict", "open", "enumerate", "utils.util_helper.convert_to_unicode().split", "int", "len", "len", "str", "utils.util_helper.convert_to_unicode", "line.strip"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "load_vocab", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return:\n        \"\"\"", "\n", "vocab_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "id_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "file_vocab", "=", "open", "(", "self", ".", "vocab_path", ")", "\n", "for", "num", ",", "line", "in", "enumerate", "(", "file_vocab", ")", ":", "\n", "            ", "items", "=", "convert_to_unicode", "(", "line", ".", "strip", "(", ")", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "items", ")", ">", "2", ":", "\n", "                ", "break", "\n", "", "token", "=", "items", "[", "0", "]", "\n", "if", "len", "(", "items", ")", "==", "2", ":", "\n", "                ", "index", "=", "items", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "str", "(", "num", ")", "\n", "\n", "", "vocab_dict", "[", "token", "]", "=", "int", "(", "index", ")", "\n", "id_dict", "[", "index", "]", "=", "token", "\n", "\n", "", "return", "vocab_dict", ",", "id_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.add_reserve_id": [[46, 51], ["None"], "methods", ["None"], ["", "def", "add_reserve_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u6dfb\u52a0\u9884\u7559\u7684\u4e00\u4e9bid\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.convert_tokens_to_ids": [[52, 62], ["output.append", "vocabulary.Vocabulary.vocab_dict.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "output", "=", "[", "]", "\n", "UNK", "=", "self", ".", "vocab_dict", "[", "self", ".", "unk_token", "]", "\n", "for", "item", "in", "tokens", ":", "\n", "            ", "output", ".", "append", "(", "self", ".", "vocab_dict", ".", "get", "(", "item", ",", "UNK", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.convert_ids_to_tokens": [[63, 72], ["output.append", "vocabulary.Vocabulary.id_dict.get", "str"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "item", "in", "ids", ":", "\n", "            ", "output", ".", "append", "(", "self", ".", "id_dict", ".", "get", "(", "str", "(", "item", ")", ",", "self", ".", "unk_token", ")", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.get_vocab_size": [[73, 78], ["len"], "methods", ["None"], ["", "def", "get_vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u8bcd\u8868\u5927\u5c0f\n        :return:\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "id_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.covert_id_to_token": [[79, 85], ["vocabulary.Vocabulary.id_dict.get", "str"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "covert_id_to_token", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"\n        :param id:\n        :return: token\n        \"\"\"", "\n", "return", "self", ".", "id_dict", ".", "get", "(", "str", "(", "id", ")", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.covert_token_to_id": [[86, 93], ["vocabulary.Vocabulary.vocab_dict.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "covert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\"\n        :param token:\n        :return: id\n        \"\"\"", "\n", "UNK", "=", "self", ".", "vocab_dict", "[", "self", ".", "unk_token", "]", "\n", "return", "self", ".", "vocab_dict", ".", "get", "(", "token", ",", "UNK", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.field.Field.__init__": [[10, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "None", "\n", "self", ".", "data_type", "=", "DataShape", ".", "STRING", "\n", "self", ".", "reader_info", "=", "None", "# \u9700\u8981\u4ec0\u4e48reader", "\n", "self", ".", "tokenizer_info", "=", "None", "\n", "self", ".", "need_convert", "=", "True", "# \u662f\u5426\u9700\u8981\u8fdb\u884c\u6587\u672c\u8f6cid\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u5df2\u7ecf\u6570\u503c\u5316\u4e86\u7684\u6587\u672c\u5c31\u4e0d\u9700\u8981\u518d\u8f6c\u4e86", "\n", "self", ".", "vocab_path", "=", "None", "\n", "self", ".", "max_seq_len", "=", "512", "\n", "self", ".", "embedding_info", "=", "None", "\n", "self", ".", "truncation_type", "=", "MaxTruncation", ".", "KEEP_HEAD", "\n", "self", ".", "padding_id", "=", "0", "\n", "self", ".", "field_reader", "=", "None", "\n", "self", ".", "label_start_id", "=", "4", "\n", "self", ".", "label_end_id", "=", "5", "\n", "self", ".", "join_calculation", "=", "True", "\n", "self", ".", "extra_params", "=", "{", "}", "\n", "self", ".", "is_prompt_tuning", "=", "False", "\n", "self", ".", "prompt_len", "=", "5", "\n", "self", ".", "is_mask_res", "=", "False", "\n", "self", ".", "mask_res_len", "=", "1", "\n", "self", ".", "use_label_map", "=", "False", "\n", "self", ".", "label_map_str", "=", "None", "\n", "self", ".", "num_labels", "=", "2", "\n", "self", ".", "prompt", "=", "None", "\n", "self", ".", "text_tokenizer", "=", "None", "\n", "self", ".", "text_vocab_path", "=", "None", "\n", "self", ".", "label_map_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.field.Field.build": [[38, 79], ["params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.__contains__", "params_dict.__contains__", "field.Field.extra_params.update", "params_dict.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "build", "(", "self", ",", "params_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param params_dict:\n        :return:\n        \"\"\"", "\n", "self", ".", "name", "=", "params_dict", "[", "\"name\"", "]", "\n", "self", ".", "data_type", "=", "params_dict", "[", "\"data_type\"", "]", "\n", "self", ".", "reader_info", "=", "params_dict", "[", "\"reader\"", "]", "\n", "\n", "self", ".", "need_convert", "=", "params_dict", ".", "get", "(", "\"need_convert\"", ",", "True", ")", "\n", "self", ".", "vocab_path", "=", "params_dict", ".", "get", "(", "\"vocab_path\"", ",", "None", ")", "\n", "self", ".", "max_seq_len", "=", "params_dict", ".", "get", "(", "\"max_seq_len\"", ",", "512", ")", "\n", "self", ".", "truncation_type", "=", "params_dict", ".", "get", "(", "\"truncation_type\"", ",", "MaxTruncation", ".", "KEEP_HEAD", ")", "\n", "self", ".", "padding_id", "=", "params_dict", ".", "get", "(", "\"padding_id\"", ",", "0", ")", "\n", "self", ".", "join_calculation", "=", "params_dict", ".", "get", "(", "\"join_calculation\"", ",", "True", ")", "\n", "# for prompt tuning", "\n", "self", ".", "is_prompt_tuning", "=", "params_dict", ".", "get", "(", "\"is_prompt_tuning\"", ",", "False", ")", "\n", "self", ".", "prompt_len", "=", "params_dict", ".", "get", "(", "\"prompt_len\"", ",", "5", ")", "\n", "self", ".", "is_mask_res", "=", "params_dict", ".", "get", "(", "\"is_mask_res\"", ",", "False", ")", "\n", "self", ".", "mask_res_len", "=", "params_dict", ".", "get", "(", "\"mask_res_len\"", ",", "1", ")", "\n", "self", ".", "label_map_str", "=", "params_dict", ".", "get", "(", "\"label_map_str\"", ",", "None", ")", "\n", "self", ".", "num_labels", "=", "params_dict", ".", "get", "(", "\"num_labels\"", ",", "2", ")", "\n", "self", ".", "use_label_map", "=", "params_dict", ".", "get", "(", "\"use_label_map\"", ",", "False", ")", "\n", "self", ".", "prompt", "=", "params_dict", ".", "get", "(", "\"prompt\"", ",", "None", ")", "\n", "# text tokenizer and vocab for label in prompt", "\n", "self", ".", "text_tokenizer", "=", "params_dict", ".", "get", "(", "\"text_tokenizer\"", ",", "None", ")", "\n", "self", ".", "text_vocab_path", "=", "params_dict", ".", "get", "(", "\"text_vocab_path\"", ",", "None", ")", "\n", "# for verbalizers for prompt", "\n", "self", ".", "label_map_path", "=", "params_dict", ".", "get", "(", "\"label_map_path\"", ",", "None", ")", "\n", "\n", "if", "\"num_labels\"", "in", "params_dict", ":", "\n", "            ", "self", ".", "num_labels", "=", "params_dict", "[", "\"num_labels\"", "]", "\n", "\n", "# self.label_start_id = params_dict[\"label_start_id\"]", "\n", "# self.label_end_id = params_dict[\"label_end_id\"]", "\n", "\n", "", "if", "params_dict", ".", "__contains__", "(", "\"embedding\"", ")", ":", "\n", "            ", "self", ".", "embedding_info", "=", "params_dict", "[", "\"embedding\"", "]", "\n", "", "if", "params_dict", ".", "__contains__", "(", "\"tokenizer\"", ")", ":", "\n", "            ", "self", ".", "tokenizer_info", "=", "params_dict", "[", "\"tokenizer\"", "]", "\n", "", "self", ".", "extra_params", ".", "update", "(", "params_dict", ".", "get", "(", "\"extra_params\"", ",", "{", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.__init__": [[9, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "data_path", "=", "None", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "batch_size", "=", "8", "\n", "self", ".", "sampling_rate", "=", "1.0", "\n", "self", ".", "epoch", "=", "1", "\n", "# \u6570\u636e\u662f\u5426\u9700\u8981\u6309\u5361\u6570\u8fdb\u884c\u5206\u53d1\uff1a\u591a\u5361\u6a21\u5f0f\u4e0b\uff0c\u8bad\u7ec3\u96c6\u4e00\u822c\u9700\u8981\u591a\u5361\u6309\u5361\u53f7\u5206\u53d1\uff0c\u6d4b\u8bd5\u96c6\u548c\u9a8c\u8bc1\u96c6\u4e0d\u9700\u8981\u6309\u5361\u5206\u53d1\uff0c\u9884\u6d4b\u96c6\u6682\u65f6\u4e5f\u4e0d\u8fdb\u884c\u5206\u53d1\u3002", "\n", "self", ".", "need_data_distribute", "=", "False", "\n", "self", ".", "need_generate_examples", "=", "False", "\n", "self", ".", "extra_params", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.reader_config.ReaderConfig.build": [[20, 35], ["params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get", "params_dict.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "build", "(", "self", ",", "params_dict", ")", ":", "\n", "        ", "\"\"\"\n        :param params_dict:\n        :return:\n        \"\"\"", "\n", "self", ".", "has_keyTag", "=", "params_dict", ".", "get", "(", "\"key_tag\"", ",", "False", ")", "\n", "self", ".", "data_path", "=", "params_dict", "[", "\"data_path\"", "]", "\n", "self", ".", "shuffle", "=", "params_dict", ".", "get", "(", "\"shuffle\"", ",", "False", ")", "\n", "self", ".", "batch_size", "=", "params_dict", ".", "get", "(", "\"batch_size\"", ",", "8", ")", "\n", "self", ".", "sampling_rate", "=", "params_dict", ".", "get", "(", "\"sampling_rate\"", ",", "1", ")", "\n", "self", ".", "epoch", "=", "params_dict", ".", "get", "(", "\"epoch\"", ",", "1", ")", "\n", "self", ".", "need_data_distribute", "=", "params_dict", ".", "get", "(", "\"need_data_distribute\"", ",", "False", ")", "\n", "self", ".", "need_generate_examples", "=", "params_dict", ".", "get", "(", "\"need_generate_examples\"", ",", "False", ")", "\n", "\n", "self", ".", "extra_params", "=", "params_dict", ".", "get", "(", "\"extra_params\"", ",", "{", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.read_doieat_file": [[15, 49], ["collections.namedtuple", "isinstance", "os.path.basename", "open", "collections.namedtuple.", "json.loads", "json.loads.get", "data_filter", "line.strip", "json.loads.get", "json.loads.get", "json.loads.get", "json.loads.get"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["if", "name", "is", "None", ":", "\n", "        ", "ret", "=", "None", "\n", "", "elif", "name", "==", "''", ":", "\n", "        ", "ret", "=", "postfix", "\n", "", "else", ":", "\n", "        ", "ret", "=", "'%s_%s'", "%", "(", "name", ",", "postfix", ")", "\n", "", "return", "ret", "\n", "\n", "\n", "", "def", "parse_data_config", "(", "config_path", ")", ":", "\n", "    ", "\"\"\"truncate_seq_pair\n    :param config_path:\n    :return:\n    \"\"\"", "\n", "try", ":", "\n", "        ", "with", "open", "(", "config_path", ")", "as", "json_file", ":", "\n", "            ", "config_dict", "=", "json", ".", "load", "(", "json_file", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "", "", "except", "Exception", ":", "\n", "        ", "raise", "IOError", "(", "\"Error in parsing Ernie model config file '%s'\"", "%", "config_path", ")", "\n", "", "else", ":", "\n", "        ", "return", "config_dict", "\n", "\n", "\n", "", "", "def", "parse_version_code", "(", "version_str", ",", "default_version_code", "=", "1.5", ")", ":", "\n", "    ", "\"\"\"\n    parser paddle fluid version code to float type\n    :param version_str:\n    :param default_version_code:\n    :return:\n    \"\"\"", "\n", "if", "version_str", ":", "\n", "        ", "v1", "=", "version_str", ".", "split", "(", "\".\"", ")", "[", "0", ":", "2", "]", "\n", "v_code_str", "=", "\".\"", ".", "join", "(", "v1", ")", "\n", "v_code", "=", "float", "(", "v_code_str", ")", "\n", "return", "v_code", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.read_tsv_file": [[50, 72], ["isinstance", "os.path.basename", "collections.namedtuple", "enumerate", "open", "utils.util_helper.convert_to_unicode", "utils.util_helper.convert_to_unicode.rstrip().split", "collections.namedtuple.", "next().rstrip().split", "utils.util_helper.convert_to_unicode.rstrip", "data_filter", "utils.util_helper.convert_to_unicode.rstrip", "next().rstrip", "next"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "else", ":", "\n", "        ", "return", "default_version_code", "\n", "\n", "\n", "", "", "def", "truncation_words", "(", "words", ",", "max_seq_length", ",", "truncation_type", ")", ":", "\n", "    ", "\"\"\"\n    :param words:\n    :param max_seq_length:\n    :param truncation_type:\n    :return:\n    \"\"\"", "\n", "if", "len", "(", "words", ")", ">", "max_seq_length", ":", "\n", "        ", "if", "truncation_type", "==", "MaxTruncation", ".", "KEEP_HEAD", ":", "\n", "            ", "words", "=", "words", "[", "0", ":", "max_seq_length", "]", "\n", "", "elif", "truncation_type", "==", "MaxTruncation", ".", "KEEP_TAIL", ":", "\n", "            ", "tmp", "=", "words", "[", "0", ":", "max_seq_length", "-", "1", "]", "\n", "tmp", ".", "append", "(", "words", "[", "-", "1", "]", ")", "\n", "words", "=", "tmp", "\n", "", "elif", "truncation_type", "==", "MaxTruncation", ".", "KEEP_BOTH_HEAD_TAIL", ":", "\n", "            ", "tmp", "=", "words", "[", "1", ":", "max_seq_length", "-", "2", "]", "\n", "tmp", ".", "insert", "(", "0", ",", "words", "[", "0", "]", ")", "\n", "tmp", ".", "insert", "(", "max_seq_length", "-", "1", ",", "words", "[", "-", "1", "]", ")", "\n", "words", "=", "tmp", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.read_json_file": [[73, 92], ["isinstance", "os.path.basename", "enumerate", "open", "line.strip.strip", "json.loads"], "function", ["None"], ["", "else", ":", "\n", "            ", "words", "=", "words", "[", "0", ":", "max_seq_length", "]", "\n", "\n", "", "", "return", "words", "\n", "\n", "\n", "", "def", "truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "    ", "\"\"\"\n    :param tokens_a:\n    :param tokens_a:\n    :param max_length:\n    :return:\n    \"\"\"", "\n", "while", "True", ":", "\n", "        ", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "            ", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "            ", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.convert_text_to_id": [[93, 116], ["ValueError", "isinstance", "TypeError", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "text.split", "len", "utils.util_helper.truncation_words"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words"], ["            ", "tokens_b", ".", "pop", "(", ")", "\n", "\n", "\n", "", "", "", "def", "convert_to_unicode", "(", "text", ")", ":", "\n", "    ", "\"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "return", "text", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n", "\n", "", "", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.padding_batch_data": [[118, 144], ["max", "numpy.array", "np.array.astype().reshape", "numpy.array", "len", "np.array.astype().reshape", "len", "list", "np.array.astype", "len", "np.array.astype", "len"], "function", ["None"], ["text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n", "\n", "", "def", "is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n", "\n", "", "def", "is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.mask_batch_data": [[146, 167], ["max", "numpy.array", "numpy.expand_dims", "np.expand_dims.astype", "numpy.array", "len", "np.array.astype().reshape", "len", "len", "len", "np.array.astype", "len"], "function", ["None"], ["", "return", "False", "\n", "\n", "\n", "", "def", "is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n", "\n", "", "def", "clean_text", "(", "text", ")", ":", "\n", "    ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data": [[169, 236], ["max", "numpy.array", "numpy.array", "np.array.astype().reshape", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "np.array.astype().reshape", "np.expand_dims.astype().reshape", "len", "np.array.astype().reshape", "len", "len", "np.array.astype", "len", "list", "list", "np.array.astype", "np.expand_dims.astype", "np.array.astype", "list", "range", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["        ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "is_control", "(", "char", ")", ":", "\n", "            ", "continue", "\n", "", "if", "is_whitespace", "(", "char", ")", ":", "\n", "            ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "            ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n", "\n", "", "def", "printable_text", "(", "text", ")", ":", "\n", "    ", "\"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"", "\n", "\n", "# These functions want `str` for both Python2 and Python3, but in one case", "\n", "# it's a Unicode string and in the other it's a byte string.", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "            ", "return", "text", ".", "decode", "(", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "        ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "            ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "return", "text", ".", "encode", "(", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n", "\n", "", "", "def", "save_meta_data", "(", "data_dict", ",", "save_file", ",", "mode", "=", "\"add\"", ")", ":", "\n", "    ", "\"\"\"\n    :param data_dict:\n    :param save_file:\n    :param mode: \u4fdd\u5b58\u6a21\u5f0f: override, add\n    :return:\n    \"\"\"", "\n", "# \u76ee\u6807\u6587\u4ef6\u5df2\u5b58\u5728\u4e14\u662f\u8ffd\u52a0\u6a21\u5f0f\u7684\u65f6\u5019\uff0c\u9700\u8981\u5148\u5c06\u539f\u6765\u7684dict\u8bfb\u51fa\u6765\uff0c\u518d\u7528\u65b0\u7684dict\u53bb\u66f4\u65b0\u539f\u6765\u7684dict\uff0c\u6700\u540e\u4fdd\u5b58", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_file", ")", "and", "mode", "==", "\"add\"", ":", "\n", "        ", "meta_dict", "=", "params", ".", "from_file", "(", "save_file", ")", "\n", "_meta", "=", "params", ".", "replace_none", "(", "meta_dict", ")", "\n", "_meta", ".", "update", "(", "data_dict", ")", "\n", "json_str", "=", "json", ".", "dumps", "(", "_meta", ")", "\n", "", "else", ":", "\n", "        ", "json_str", "=", "json", ".", "dumps", "(", "data_dict", ")", "\n", "", "with", "open", "(", "save_file", ",", "'w'", ")", "as", "json_file", ":", "\n", "        ", "json_file", ".", "write", "(", "json_str", ")", "\n", "\n", "\n", "", "", "def", "get_model_paths", "(", "path_checkpoint", ",", "path_inference_model", ",", "steps", ",", "need_encryption", "=", "False", ")", ":", "\n", "    ", "\"\"\" \u901a\u8fc7step\u548ctrainer_param\u914d\u7f6e\u4e2d\u7684output\u8def\u5f84\uff0c\u8ba1\u7b97\u51fa\u6a21\u578b\u5b58\u50a8\u65f6\u9700\u8981\u7528\u5230\u7684\u6240\u6709\u8def\u5f84\n    :param path_checkpoint:\n    :param path_inference_model:\n    :param steps:\n    :param need_encryption:\n    :return:\n    \"\"\"", "\n", "suffix", "=", "\"\"", "\n", "infer_meta_name", "=", "\"infer_data_params.json\"", "\n", "model_meta_name", "=", "\"model.meta\"", "\n", "if", "need_encryption", ":", "\n", "        ", "suffix", "=", "\"_enc\"", "\n", "\n", "# \u6587\u4ef6\u4fdd\u5b58\u7684\u539f\u59cb\u8def\u5f84\uff0c\u5f53\u4e0d\u9700\u8981\u52a0\u5bc6\u7684\u65f6\u5019\uff0c\u539f\u59cb\u8def\u5f84\u548c\u6700\u7ec8\u7684\u6a21\u578b\u4fdd\u5b58\u8def\u5f84\u662f\u540c\u4e00\u4e2a", "\n", "", "checkpoint_original_name", "=", "\"checkpoints_step_\"", "+", "str", "(", "steps", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.generate_pad_batch_data": [[238, 292], ["max", "numpy.array", "np.array.astype().reshape", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.array", "len", "np.array.astype().reshape", "np.expand_dims.astype", "len", "np.array.astype().reshape", "len", "list", "np.array.astype", "len", "list", "np.array.astype", "np.array.astype", "range", "len", "len", "len", "len", "len"], "function", ["None"], ["checkpoint_name", "=", "\"checkpoints_step_\"", "+", "str", "(", "steps", ")", "+", "suffix", "\n", "checkpoint_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_name", ",", "model_meta_name", ")", "\n", "checkpoint_model_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_name", ")", "\n", "checkpoint_infer_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_name", ",", "infer_meta_name", ")", "\n", "checkpoint_irepo_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_checkpoint", ",", "checkpoint_name", "+", "\".meta\"", ")", "\n", "\n", "inference_original_name", "=", "\"inference_step_\"", "+", "str", "(", "steps", ")", "\n", "inference_original_model_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_original_name", ")", "\n", "inference_name", "=", "\"inference_step_\"", "+", "str", "(", "steps", ")", "+", "suffix", "\n", "inference_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_name", ",", "model_meta_name", ")", "\n", "inference_model_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_name", ")", "\n", "inference_infer_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_name", ",", "infer_meta_name", ")", "\n", "inference_irepo_meta_path", "=", "os", ".", "path", ".", "join", "(", "path_inference_model", ",", "inference_name", "+", "\".meta\"", ")", "\n", "\n", "path_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "path_dict", "[", "\"checkpoints_name\"", "]", "=", "checkpoint_name", "\n", "path_dict", "[", "\"checkpoints_original_name\"", "]", "=", "checkpoint_original_name", "\n", "path_dict", "[", "\"checkpoints_original_model_path\"", "]", "=", "checkpoint_original_model_path", "\n", "path_dict", "[", "\"checkpoints_model_path\"", "]", "=", "checkpoint_model_path", "\n", "path_dict", "[", "\"checkpoints_meta_path\"", "]", "=", "checkpoint_meta_path", "\n", "path_dict", "[", "\"checkpoints_infer_meta_path\"", "]", "=", "checkpoint_infer_meta_path", "\n", "path_dict", "[", "\"checkpoints_irepo_meta_path\"", "]", "=", "checkpoint_irepo_meta_path", "\n", "path_dict", "[", "\"inference_name\"", "]", "=", "inference_name", "\n", "path_dict", "[", "\"inference_original_name\"", "]", "=", "inference_original_name", "\n", "path_dict", "[", "\"inference_original_model_path\"", "]", "=", "inference_original_model_path", "\n", "path_dict", "[", "\"inference_model_path\"", "]", "=", "inference_model_path", "\n", "path_dict", "[", "\"inference_meta_path\"", "]", "=", "inference_meta_path", "\n", "path_dict", "[", "\"inference_infer_meta_path\"", "]", "=", "inference_infer_meta_path", "\n", "path_dict", "[", "\"inference_irepo_meta_path\"", "]", "=", "inference_irepo_meta_path", "\n", "\n", "return", "path_dict", "\n", "\n", "\n", "", "def", "format_convert_bio", "(", "dir_path", ",", "vocab_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"return\"\"\"", "\n", "\n", "def", "is_alphabet_or_digit", "(", "c", ")", ":", "\n", "        ", "\"\"\"return\"\"\"", "\n", "alphabet", "=", "list", "(", "u\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"", ")", "\n", "digit", "=", "list", "(", "u\"0123456789.\"", ")", "\n", "if", "c", "in", "alphabet", "or", "c", "in", "digit", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "vocab_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "count", "=", "0", "\n", "filelist", "=", "os", ".", "listdir", "(", "dir_path", ")", "\n", "for", "file_path", "in", "filelist", ":", "\n", "        ", "if", "file_path", ".", "endswith", "(", "\".txt\"", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_path", ")", "\n", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "fp1", ":", "\n", "                ", "with", "open", "(", "file_path", "+", "\"_bio\"", ",", "\"w\"", ")", "as", "fp2", ":", "\n", "                    ", "for", "line", "in", "fp1", ":", "\n", "                        ", "try", ":", "\n", "                            ", "tokens", ",", "triple", ",", "offset", "=", "line", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.gen_unidirectional_mask": [[294, 309], ["max", "numpy.zeros", "enumerate", "numpy.array().reshape", "len", "numpy.tril", "len", "len", "numpy.ones", "numpy.array"], "function", ["None"], ["subject_start", ",", "subject_end", ",", "object_start", ",", "object_end", "=", "offset", ".", "split", "(", "\" \"", ")", "\n", "", "except", "Exception", ":", "\n", "                            ", "print", "(", "line", ".", "strip", "(", "\"\\n\"", ")", ")", "\n", "continue", "\n", "", "tokens", "=", "list", "(", "convert_to_unicode", "(", "tokens", ")", ")", "\n", "labels", "=", "[", "\"O\"", "]", "*", "len", "(", "tokens", ")", "\n", "labels", "[", "int", "(", "subject_start", ")", "]", "=", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"S\"", "\n", "for", "i", "in", "range", "(", "int", "(", "subject_start", ")", "+", "1", ",", "int", "(", "subject_end", ")", "+", "1", ")", ":", "\n", "                            ", "labels", "[", "i", "]", "=", "\"I\"", "\n", "", "if", "not", "(", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"S\"", ")", "in", "vocab_map", ":", "\n", "                            ", "vocab_map", "[", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"S\"", "]", "=", "count", "\n", "count", "+=", "1", "\n", "", "labels", "[", "int", "(", "object_start", ")", "]", "=", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"O\"", "\n", "for", "i", "in", "range", "(", "int", "(", "object_start", ")", "+", "1", ",", "int", "(", "object_end", ")", "+", "1", ")", ":", "\n", "                            ", "labels", "[", "i", "]", "=", "\"I\"", "\n", "", "if", "not", "(", "\"B-\"", "+", "predicate", "+", "\"@\"", "+", "\"O\"", ")", "in", "vocab_map", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.gen_query_input": [[311, 331], ["len", "max", "numpy.zeros", "range", "enumerate", "numpy.ones", "tgt_pos.extend", "range", "np.zeros.astype", "mask_ids.astype", "numpy.array().reshape().astype", "len", "range", "list", "range", "numpy.array().reshape", "numpy.array"], "function", ["None"], ["count", "+=", "1", "\n", "# sub_tokens = []", "\n", "# sub_labels = []", "\n", "# sub_token = \"\"", "\n", "# sub_label = \"\"", "\n", "# is_first = True", "\n", "# for i in range(len(tokens)):", "\n", "# if is_alphabet_or_digit(tokens[i]):", "\n", "# sub_token += tokens[i]", "\n", "# if is_first:", "\n", "# sub_label = labels[i]", "\n", "# is_first = False", "\n", "# else:", "\n", "# if sub_token != \"\":", "\n", "# sub_tokens.append(sub_token)", "\n", "# sub_labels.append(sub_label)", "\n", "# sub_token = \"\"", "\n", "# is_first = True", "\n", "# sub_tokens.append(tokens[i])", "\n", "# sub_labels.append(labels[i])", "\n", "# if sub_token != \"\":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.gen_query_input2": [[333, 364], ["len", "max", "numpy.zeros", "range", "enumerate", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "tgt_pos.extend", "range", "np.zeros.astype", "mask_ids.astype", "mask_phonetic_a_ids.astype", "mask_phonetic_b_ids.astype", "mask_glyph_a_ids.astype", "mask_glyph_b_ids.astype", "mask_glyph_c_ids.astype", "mask_glyph_d_ids.astype", "numpy.array().reshape().astype", "len", "range", "list", "range", "numpy.array().reshape", "numpy.array"], "function", ["None"], ["# sub_labels.append(sub_label)", "\n", "# if len(sub_tokens) != len(sub_labels) or u\"\" in sub_tokens:", "\n", "# print(\"Hello\", \"*****\")", "\n", "# continue", "\n", "", "fp2", ".", "write", "(", "\" \"", ".", "join", "(", "tokens", ")", "+", "\"\\t\"", ")", "\n", "fp2", ".", "write", "(", "\" \"", ".", "join", "(", "labels", ")", "+", "\"\\n\"", ")", "\n", "", "", "", "os", ".", "remove", "(", "file_path", ")", "\n", "", "", "vocab_map", "[", "\"I\"", "]", "=", "count", "\n", "vocab_map", "[", "\"O\"", "]", "=", "count", "+", "1", "\n", "# if vocab_path:", "\n", "#    with open(vocab_path, \"w\") as fp3:", "\n", "#        for key in vocab_map.keys():", "\n", "#            fp3.write(key + \"\\t\" + str(vocab_map[key]) + \"\\n\")", "\n", "#    return len(vocab_map)", "\n", "return", "None", "\n", "\n", "\n", "", "def", "make_targz", "(", "output_filename", ",", "source_dir", ")", ":", "\n", "    ", "\"\"\"\u538b\u7f29\u67d0\u4e2a\u6587\u4ef6\u4e3atar.gz\n    :param output_filename: \u538b\u7f29\u5305\u8def\u5f84\n    :param source_dir: \u5f85\u538b\u7f29\u539f\u59cb\u8def\u5f84\n    :return:\n    \"\"\"", "\n", "errcode", "=", "-", "1", "\n", "with", "tarfile", ".", "open", "(", "output_filename", ",", "\"w:gz\"", ")", "as", "tar", ":", "\n", "        ", "tar", ".", "add", "(", "source_dir", ",", "arcname", "=", "os", ".", "path", ".", "basename", "(", "source_dir", ")", ")", "\n", "errcode", "=", "0", "\n", "", "return", "errcode", "\n", "\n", "\n", "", "def", "get_warmup_and_linear_decay", "(", "max_steps", ",", "warmup_steps", ")", ":", "\n", "    ", "\"\"\" warmup linear decay function \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.get_hierar_relations_array": [[365, 398], ["model_params.get", "model_params.get", "open", "open", "len", "numpy.zeros", "hierar_relations.items", "utils.util_helper.convert_to_unicode().split", "utils.util_helper.convert_to_unicode().split", "utils.util_helper.convert_to_unicode", "utils.util_helper.convert_to_unicode", "line.strip", "line.strip", "int", "int"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["return", "lambda", "step", ":", "min", "(", "step", "/", "warmup_steps", ",", "1.", "-", "(", "step", "-", "warmup_steps", ")", "/", "(", "max_steps", "-", "warmup_steps", ")", ")", "\n", "\n", "\n", "", "_work_dir", "=", "None", "\n", "\n", "\n", "def", "get_work_path", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    get_work_path\n    \"\"\"", "\n", "if", "not", "path", "or", "not", "_work_dir", "or", "path", "[", "0", "]", "in", "'./'", ":", "\n", "        ", "return", "path", "\n", "", "return", "os", ".", "path", ".", "join", "(", "_work_dir", ",", "path", ")", "\n", "\n", "\n", "# paddle _import_module_from_library\u51fd\u6570\u91cd\u5199\uff0c\u5f85paddle\u4e0a\u7ebf\u540e\u53ef\u5e9f\u5f03", "\n", "", "import", "logging", "\n", "import", "sys", "\n", "from", "paddle", ".", "fluid", "import", "core", "\n", "from", "paddle", ".", "fluid", ".", "framework", "import", "OpProtoHolder", "\n", "import", "threading", "\n", "import", "atexit", "\n", "import", "textwrap", "\n", "from", "importlib", "import", "machinery", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"utils.util_helper\"", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "fmt", "=", "'%(asctime)s - %(levelname)s - %(message)s'", ")", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "\n", "def", "log_v", "(", "info", ",", "verbose", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.get_random_pos_id": [[399, 418], ["len", "len", "random.randint", "range", "random_batch_pos_ids.append", "random_pos_ids.append", "len", "random.sample", "range"], "function", ["None"], ["    ", "\"\"\"\n    Print log information on stdout.\n    \"\"\"", "\n", "if", "verbose", ":", "\n", "        ", "logger", ".", "info", "(", "info", ")", "\n", "\n", "\n", "", "", "OS_NAME", "=", "sys", ".", "platform", "\n", "IS_WINDOWS", "=", "OS_NAME", ".", "startswith", "(", "'win'", ")", "\n", "\n", "\n", "def", "load_op_meta_info_and_register_op", "(", "lib_filename", ")", ":", "\n", "    ", "\"\"\"\n    load of meta info and register op\n    \"\"\"", "\n", "core", ".", "load_op_meta_info_and_register_op", "(", "lib_filename", ")", "\n", "return", "OpProtoHolder", ".", "instance", "(", ")", ".", "update_op_proto", "(", ")", "\n", "\n", "\n", "", "def", "import_module_from_library_wenxin", "(", "module_name", ",", "build_directory", ",", "verbose", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.nlpc_wordseg_tokenizer.NLPCWordsegTokenizer.__init__": [[14, 21], ["tokenizer.Tokenizer.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab_file: \u8bcd\u8868\u6587\u4ef6\u8def\u5f84\n        :param split_char: \u660e\u6587\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\n        \"\"\"", "\n", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "self", ".", "split_char", "=", "split_char", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.nlpc_wordseg_tokenizer.NLPCWordsegTokenizer.tokenize": [[22, 32], ["wordseg.segmenter.handle_query", "utils.util_helper.convert_to_unicode", "utils.util_helper.convert_to_unicode.split"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "from", ".", ".", "wordseg", "import", "wordseg", "\n", "text", "=", "wordseg", ".", "segmenter", ".", "handle_query", "(", "text", ")", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "split_tokens", "=", "text", ".", "split", "(", "self", ".", "split_char", ")", "\n", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.nlpc_wordseg_tokenizer.NLPCWordsegTokenizer.convert_tokens_to_ids": [[33, 39], ["nlpc_wordseg_tokenizer.NLPCWordsegTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.nlpc_wordseg_tokenizer.NLPCWordsegTokenizer.convert_ids_to_tokens": [[40, 46], ["nlpc_wordseg_tokenizer.NLPCWordsegTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.FullTokenizerErnieM.__init__": [[181, 207], ["params.get", "params.get", "params.get", "tokenization_utils.PreTrainedFullTokenizer.__init__", "sentencepiece.SentencePieceProcessor", "tokenization_erniem.FullTokenizerErnieM.sp_model.Load", "tokenization_erniem.load_vocab", "ValueError", "tokenization_erniem.FullTokenizerErnieM.vocab.items"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "    ", "do_lower_case", "=", "params", ".", "get", "(", "\"do_lower_case\"", ",", "False", ")", "\n", "assert", "params", ".", "get", "(", "\"spm_model_file\"", ",", "False", ")", ",", "\"params must have spm_model_file\"", "\n", "spm_model_file", "=", "params", ".", "get", "(", "\"spm_model_file\"", ")", "\n", "super", "(", "FullTokenizerErnieM", ",", "self", ")", ".", "__init__", "(", "\n", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ",", "\n", ")", "\n", "self", ".", "sp_model", "=", "None", "\n", "if", "spm_model_file", ":", "\n", "      ", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "#tf.logging.info(\"loading sentence piece model\")", "\n", "self", ".", "sp_model", ".", "Load", "(", "spm_model_file", ")", "\n", "# Note(mingdachen): For the purpose of consisent API, we are", "\n", "# generating a vocabulary for the sentence piece tokenizer.", "\n", "#self.vocab = {self.sp_model.IdToPiece(i): i for i", "\n", "#              in range(self.sp_model.GetPieceSize())}", "\n", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "", "else", ":", "\n", "#self.vocab = load_vocab(vocab_file)", "\n", "#self.basic_tokenizer = BasicTokenizer(do_lower_case=do_lower_case)", "\n", "#self.wordpiece_tokenizer = WordpieceTokenizer(vocab=self.vocab)", "\n", "# (liujiaxiang) comment useless code for a better diff code", "\n", "      ", "raise", "ValueError", "(", "'albert use spm by default'", ")", "\n", "", "self", ".", "inv_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "#print(self.vocab)", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.FullTokenizerErnieM.tokenize": [[209, 222], ["tokenization_erniem.encode_pieces", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.encode_pieces"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"tokenize text\"\"\"", "\n", "if", "self", ".", "sp_model", ":", "\n", "      ", "split_tokens", "=", "encode_pieces", "(", "self", ".", "sp_model", ",", "text", ",", "return_unicode", "=", "False", ")", "\n", "", "else", ":", "\n", "#split_tokens = []", "\n", "#for token in self.basic_tokenizer.tokenize(text):", "\n", "#  for sub_token in self.wordpiece_tokenizer.tokenize(token):", "\n", "#    split_tokens.append(sub_token)", "\n", "# (liujiaxiang) comment useless code for a better diff code", "\n", "      ", "raise", "ValueError", "(", "'albert use spm by default'", ")", "\n", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.FullTokenizerErnieM.tokenize_for_pretrain": [[223, 258], ["tokenization_erniem.encode_pieces", "tokenization_erniem.FullTokenizerErnieM.convert_tokens_to_ids", "tokenization_erniem.FullTokenizerErnieM.inverse_index_str", "zip", "len", "len", "t.decode.decode.decode", "tok_protocol.Tok", "len", "sent_piece_tokens.append", "len", "tokenization_erniem.preprocess_text", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.encode_pieces", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.inverse_index_str", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.preprocess_text"], ["", "def", "tokenize_for_pretrain", "(", "self", ",", "tok_list", ")", ":", "\n", "    ", "\"\"\"tokenize text for pretrain\"\"\"", "\n", "import", "tok", "as", "tok_protocol", "\n", "text", "=", "\" \"", ".", "join", "(", "[", "t", ".", "token", "for", "t", "in", "tok_list", "]", ")", "\n", "\n", "#split_tokens = encode_pieces(self.sp_model, text, return_unicode=True)", "\n", "split_tokens", "=", "encode_pieces", "(", "self", ".", "sp_model", ",", "text", ",", "return_unicode", "=", "False", ")", "\n", "ids", "=", "self", ".", "convert_tokens_to_ids", "(", "split_tokens", ")", "\n", "\n", "# +1 for head _ : 'hello world' -> ['_hello', '_world']", "\n", "\n", "if", "not", "(", "len", "(", "preprocess_text", "(", "''", ".", "join", "(", "split_tokens", ")", ")", ")", "==", "len", "(", "text", ")", "+", "1", ")", ":", "\n", "      ", "return", "None", "\n", "\n", "", "if", "len", "(", "split_tokens", ")", "!=", "len", "(", "ids", ")", ":", "\n", "      ", "return", "None", "\n", "\n", "", "sent_piece_tokens", "=", "[", "]", "\n", "i", "=", "0", "\n", "position_to_nth", "=", "self", ".", "inverse_index_str", "(", "\"_\"", "+", "text", ")", "\n", "for", "t", ",", "id", "in", "zip", "(", "split_tokens", ",", "ids", ")", ":", "\n", "      ", "t", "=", "t", ".", "decode", "(", "'utf8'", ")", "\n", "nth", "=", "position_to_nth", "[", "i", "]", "\n", "token", "=", "tok_list", "[", "nth", "]", "\n", "\n", "tok", "=", "tok_protocol", ".", "Tok", "(", ")", "\n", "tok", ".", "token", "=", "t", "\n", "tok", ".", "id", "=", "id", "\n", "tok", ".", "bio", "=", "token", ".", "bio", "\n", "tok", ".", "origin", "=", "token", ".", "origin", "\n", "tok", ".", "appear", "=", "token", ".", "appear", "\n", "i", "+=", "len", "(", "t", ")", "\n", "sent_piece_tokens", ".", "append", "(", "tok", ")", "\n", "\n", "", "return", "sent_piece_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.FullTokenizerErnieM.inverse_index_str": [[259, 268], ["enumerate"], "methods", ["None"], ["", "def", "inverse_index_str", "(", "self", ",", "s", ")", ":", "\n", "    ", "\"\"\"inverse the str of index\"\"\"", "\n", "nth_tok", "=", "0", "\n", "position_to_nth", "=", "{", "}", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "s", ")", ":", "\n", "        ", "if", "c", "==", "\" \"", ":", "\n", "            ", "nth_tok", "+=", "1", "\n", "", "position_to_nth", "[", "i", "]", "=", "nth_tok", "\n", "", "return", "position_to_nth", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.FullTokenizerErnieM.convert_tokens_to_ids": [[278, 290], ["tokenization_utils.convert_to_unicode", "tokens_out.append", "tokens_out.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "    ", "\"\"\"get ids of tokens\"\"\"", "\n", "vocab", "=", "vocab", "=", "self", ".", "vocab", "\n", "tokens_out", "=", "[", "]", "\n", "for", "i", "in", "tokens", ":", "\n", "#item = i.decode('utf8')", "\n", "      ", "item", "=", "convert_to_unicode", "(", "i", ")", "\n", "if", "item", "in", "vocab", ":", "\n", "        ", "tokens_out", ".", "append", "(", "vocab", "[", "item", "]", ")", "\n", "", "else", ":", "\n", "        ", "tokens_out", ".", "append", "(", "3", ")", "\n", "", "", "return", "tokens_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.FullTokenizerErnieM.convert_ids_to_tokens": [[291, 298], ["tokenization_utils.convert_by_vocab", "tokenization_erniem.FullTokenizerErnieM.sp_model.IdToPiece"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "    ", "\"\"\"get tokens of ids\"\"\"", "\n", "if", "self", ".", "sp_model", ":", "\n", "#tf.logging.info(\"using sentence piece tokenzier.\")", "\n", "      ", "return", "[", "self", ".", "sp_model", ".", "IdToPiece", "(", "id_", ")", "for", "id_", "in", "ids", "]", "\n", "", "else", ":", "\n", "      ", "return", "convert_by_vocab", "(", "self", ".", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.FullTokenizerErnieM.merge_subword": [[299, 316], ["token.startswith", "ret.append", "len", "ret.append"], "methods", ["None"], ["", "", "def", "merge_subword", "(", "self", ",", "tokens", ")", ":", "\n", "    ", "\"\"\"\n    :param tokens:\n    :return: merged_tokens\n    \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "      ", "if", "token", ".", "startswith", "(", "u\"\u2581\"", ")", ":", "\n", "        ", "ret", ".", "append", "(", "token", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "ret", ")", ":", "\n", "          ", "ret", "[", "-", "1", "]", "+=", "token", "\n", "", "else", ":", "\n", "          ", "ret", ".", "append", "(", "token", ")", "\n", "\n", "", "", "", "ret", "=", "[", "token", "for", "token", "in", "ret", "if", "token", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.validate_case_matches_checkpoint": [[39, 88], ["re.match", "re.match.group", "six.ensure_str", "ValueError"], "function", ["None"], ["def", "validate_case_matches_checkpoint", "(", "do_lower_case", ",", "init_checkpoint", ")", ":", "\n", "  ", "\"\"\"Checks whether the casing config is consistent with the checkpoint name.\"\"\"", "\n", "\n", "# The casing has to be passed in by the user and there is no explicit check", "\n", "# as to whether it matches the checkpoint. The casing information probably", "\n", "# should have been stored in the bert_config.json file, but it's not, so", "\n", "# we have to heuristically detect it to validate.", "\n", "\n", "if", "not", "init_checkpoint", ":", "\n", "    ", "return", "\n", "\n", "", "m", "=", "re", ".", "match", "(", "\"^.*?([A-Za-z0-9_-]+)/bert_model.ckpt\"", ",", "\n", "six", ".", "ensure_str", "(", "init_checkpoint", ")", ")", "\n", "if", "m", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "model_name", "=", "m", ".", "group", "(", "1", ")", "\n", "\n", "lower_models", "=", "[", "\n", "\"uncased_L-24_H-1024_A-16\"", ",", "\"uncased_L-12_H-768_A-12\"", ",", "\n", "\"multilingual_L-12_H-768_A-12\"", ",", "\"chinese_L-12_H-768_A-12\"", "\n", "]", "\n", "\n", "cased_models", "=", "[", "\n", "\"cased_L-12_H-768_A-12\"", ",", "\"cased_L-24_H-1024_A-16\"", ",", "\n", "\"multi_cased_L-12_H-768_A-12\"", "\n", "]", "\n", "\n", "is_bad_config", "=", "False", "\n", "if", "model_name", "in", "lower_models", "and", "not", "do_lower_case", ":", "\n", "    ", "is_bad_config", "=", "True", "\n", "actual_flag", "=", "\"False\"", "\n", "case_name", "=", "\"lowercased\"", "\n", "opposite_flag", "=", "\"True\"", "\n", "\n", "", "if", "model_name", "in", "cased_models", "and", "do_lower_case", ":", "\n", "    ", "is_bad_config", "=", "True", "\n", "actual_flag", "=", "\"True\"", "\n", "case_name", "=", "\"cased\"", "\n", "opposite_flag", "=", "\"False\"", "\n", "\n", "", "if", "is_bad_config", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. \"", "\n", "\"However, `%s` seems to be a %s model, so you \"", "\n", "\"should pass in `--do_lower_case=%s` so that the fine-tuning matches \"", "\n", "\"how the model was pre-training. If this error is wrong, please \"", "\n", "\"just comment out this check.\"", "%", "(", "actual_flag", ",", "init_checkpoint", ",", "\n", "model_name", ",", "case_name", ",", "opposite_flag", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.clean_text": [[90, 107], ["text.replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "tokenization_utils._is_control", "tokenization_utils._is_whitespace", "text.replace().replace().replace().replace().replace.replace().replace().replace().replace", "output.append", "output.append", "text.replace().replace().replace().replace().replace.replace().replace().replace", "text.replace().replace().replace().replace().replace.replace().replace", "text.replace().replace().replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_control", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_whitespace"], ["", "", "def", "clean_text", "(", "text", ")", ":", "\n", "  ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "text", "=", "text", ".", "replace", "(", "u\"\u201c\"", ",", "u'\"'", ")", ".", "replace", "(", "u'\u201d'", ",", "u'\"'", ")", ".", "replace", "(", "u'\u2018'", ",", "\"'\"", ")", ".", "replace", "(", "u'\u2019'", ",", "u\"'\"", ")", ".", "replace", "(", "u'\u2014'", ",", "u'-'", ")", "\n", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "if", "_is_control", "(", "char", ")", ":", "\n", "          ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "          ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "          ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.preprocess_text": [[109, 128], ["unicodedata.normalize", "isinstance", "six.ensure_text.lower", "inputs.strip().split", "six.ensure_text", "six.ensure_text", "inputs.strip", "unicodedata.combining"], "function", ["None"], ["", "def", "preprocess_text", "(", "inputs", ",", "remove_space", "=", "True", ",", "lower", "=", "False", ")", ":", "\n", "  ", "\"\"\"preprocess data by removing extra space and normalize data.\"\"\"", "\n", "\n", "outputs", "=", "inputs", "\n", "if", "remove_space", ":", "\n", "    ", "outputs", "=", "\" \"", ".", "join", "(", "inputs", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "\n", "", "if", "six", ".", "PY2", "and", "isinstance", "(", "outputs", ",", "str", ")", ":", "\n", "    ", "try", ":", "\n", "      ", "outputs", "=", "six", ".", "ensure_text", "(", "outputs", ",", "\"utf-8\"", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "      ", "outputs", "=", "six", ".", "ensure_text", "(", "outputs", ",", "\"latin-1\"", ")", "\n", "\n", "", "", "outputs", "=", "unicodedata", ".", "normalize", "(", "\"NFKD\"", ",", "outputs", ")", "\n", "outputs", "=", "\"\"", ".", "join", "(", "[", "c", "for", "c", "in", "outputs", "if", "not", "unicodedata", ".", "combining", "(", "c", ")", "]", ")", "\n", "if", "lower", ":", "\n", "    ", "outputs", "=", "outputs", ".", "lower", "(", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.encode_pieces": [[130, 170], ["tokenization_erniem.clean_text", "isinstance", "six.ensure_binary", "sp_model.EncodeAsPieces", "sp_model.SampleEncodeAsPieces", "tokenization_utils.printable_text", "piece[].isdigit", "sp_model.EncodeAsPieces", "sp_model.EncodeAsPieces.append", "new_pieces.extend", "new_pieces.append", "isinstance", "ret_pieces.append", "len", "six.ensure_binary().replace", "six.ensure_text", "len", "six.ensure_binary"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.clean_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.printable_text"], ["", "def", "encode_pieces", "(", "sp_model", ",", "text", ",", "return_unicode", "=", "True", ",", "sample", "=", "False", ")", ":", "\n", "  ", "\"\"\"turn sentences into word pieces.\"\"\"", "\n", "\n", "# liujiaxiang: add for ernie-albert, mainly consider for \u201c/\u201d/\u2018/\u2019/\u2014 causing too many unk", "\n", "text", "=", "clean_text", "(", "text", ")", "\n", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "text", ",", "six", ".", "text_type", ")", ":", "\n", "    ", "text", "=", "six", ".", "ensure_binary", "(", "text", ",", "\"utf-8\"", ")", "\n", "\n", "", "if", "not", "sample", ":", "\n", "    ", "pieces", "=", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "else", ":", "\n", "    ", "pieces", "=", "sp_model", ".", "SampleEncodeAsPieces", "(", "text", ",", "64", ",", "0.1", ")", "\n", "\n", "", "new_pieces", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "    ", "piece", "=", "printable_text", "(", "piece", ")", "\n", "if", "len", "(", "piece", ")", ">", "1", "and", "piece", "[", "-", "1", "]", "==", "\",\"", "and", "piece", "[", "-", "2", "]", ".", "isdigit", "(", ")", ":", "\n", "      ", "cur_pieces", "=", "sp_model", ".", "EncodeAsPieces", "(", "\n", "six", ".", "ensure_binary", "(", "piece", "[", ":", "-", "1", "]", ")", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "b\"\"", ")", ")", "\n", "if", "piece", "[", "0", "]", "!=", "SPIECE_UNDERLINE", "and", "cur_pieces", "[", "0", "]", "[", "0", "]", "==", "SPIECE_UNDERLINE", ":", "\n", "        ", "if", "len", "(", "cur_pieces", "[", "0", "]", ")", "==", "1", ":", "\n", "          ", "cur_pieces", "=", "cur_pieces", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "          ", "cur_pieces", "[", "0", "]", "=", "cur_pieces", "[", "0", "]", "[", "1", ":", "]", "\n", "", "", "cur_pieces", ".", "append", "(", "piece", "[", "-", "1", "]", ")", "\n", "new_pieces", ".", "extend", "(", "cur_pieces", ")", "\n", "", "else", ":", "\n", "      ", "new_pieces", ".", "append", "(", "piece", ")", "\n", "\n", "# note(zhiliny): convert back to unicode for py2", "\n", "", "", "if", "six", ".", "PY2", "and", "return_unicode", ":", "\n", "    ", "ret_pieces", "=", "[", "]", "\n", "for", "piece", "in", "new_pieces", ":", "\n", "      ", "if", "isinstance", "(", "piece", ",", "str", ")", ":", "\n", "        ", "piece", "=", "six", ".", "ensure_text", "(", "piece", ",", "\"utf-8\"", ")", "\n", "", "ret_pieces", ".", "append", "(", "piece", ")", "\n", "", "new_pieces", "=", "ret_pieces", "\n", "\n", "", "return", "new_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.encode_ids": [[172, 177], ["tokenization_erniem.encode_pieces", "sp_model.PieceToId"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.encode_pieces"], ["", "def", "encode_ids", "(", "sp_model", ",", "text", ",", "sample", "=", "False", ")", ":", "\n", "  ", "\"\"\"encode ids\"\"\"", "\n", "pieces", "=", "encode_pieces", "(", "sp_model", ",", "text", ",", "return_unicode", "=", "False", ",", "sample", "=", "sample", ")", "\n", "ids", "=", "[", "sp_model", ".", "PieceToId", "(", "piece", ")", "for", "piece", "in", "pieces", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_erniem.load_vocab": [[317, 330], ["collections.OrderedDict", "open", "enumerate", "tokenization_utils.convert_to_unicode().split", "token.strip.strip", "int", "len", "tokenization_utils.convert_to_unicode", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "", "def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "fin", "=", "open", "(", "vocab_file", ")", "\n", "for", "num", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "        ", "items", "=", "convert_to_unicode", "(", "line", ".", "strip", "(", ")", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "items", ")", ">", "2", ":", "\n", "            ", "break", "\n", "", "token", "=", "items", "[", "0", "]", "\n", "index", "=", "items", "[", "1", "]", "if", "len", "(", "items", ")", "==", "2", "else", "num", "\n", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "int", "(", "index", ")", "\n", "", "return", "vocab", "\n", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.__init__": [[181, 206], ["params.get", "params.get", "params.get", "tokenization_utils.PreTrainedFullTokenizer.__init__", "sentencepiece.SentencePieceProcessor", "tokenization_spm.FullTokenizerSpm.sp_model.Load", "ValueError", "tokenization_spm.FullTokenizerSpm.sp_model.IdToPiece", "tokenization_spm.FullTokenizerSpm.vocab.items", "six.moves.range", "tokenization_spm.FullTokenizerSpm.sp_model.GetPieceSize"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "    ", "do_lower_case", "=", "params", ".", "get", "(", "\"do_lower_case\"", ",", "False", ")", "\n", "assert", "params", ".", "get", "(", "\"spm_model_file\"", ",", "False", ")", ",", "\"params must have spm_model_file\"", "\n", "spm_model_file", "=", "params", ".", "get", "(", "\"spm_model_file\"", ")", "\n", "super", "(", "FullTokenizerSpm", ",", "self", ")", ".", "__init__", "(", "\n", "vocab_file", "=", "vocab_file", ",", "\n", "do_lower_case", "=", "do_lower_case", ",", "\n", ")", "\n", "self", ".", "sp_model", "=", "None", "\n", "if", "spm_model_file", ":", "\n", "      ", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "#tf.logging.info(\"loading sentence piece model\")", "\n", "self", ".", "sp_model", ".", "Load", "(", "spm_model_file", ")", "\n", "# Note(mingdachen): For the purpose of consisent API, we are", "\n", "# generating a vocabulary for the sentence piece tokenizer.", "\n", "self", ".", "vocab", "=", "{", "self", ".", "sp_model", ".", "IdToPiece", "(", "i", ")", ":", "i", "for", "i", "\n", "in", "range", "(", "self", ".", "sp_model", ".", "GetPieceSize", "(", ")", ")", "}", "\n", "# import pdb; pdb.set_trace()", "\n", "", "else", ":", "\n", "#self.vocab = load_vocab(vocab_file)", "\n", "#self.basic_tokenizer = BasicTokenizer(do_lower_case=do_lower_case)", "\n", "#self.wordpiece_tokenizer = WordpieceTokenizer(vocab=self.vocab)", "\n", "# (liujiaxiang) comment useless code for a better diff code", "\n", "      ", "raise", "ValueError", "(", "'albert use spm by default'", ")", "\n", "", "self", ".", "inv_vocab", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "vocab", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.tokenize": [[207, 220], ["tokenization_spm.encode_pieces", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.encode_pieces"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"tokenize text\"\"\"", "\n", "if", "self", ".", "sp_model", ":", "\n", "      ", "split_tokens", "=", "encode_pieces", "(", "self", ".", "sp_model", ",", "text", ",", "return_unicode", "=", "False", ")", "\n", "", "else", ":", "\n", "#split_tokens = []", "\n", "#for token in self.basic_tokenizer.tokenize(text):", "\n", "#  for sub_token in self.wordpiece_tokenizer.tokenize(token):", "\n", "#    split_tokens.append(sub_token)", "\n", "# (liujiaxiang) comment useless code for a better diff code", "\n", "      ", "raise", "ValueError", "(", "'albert use spm by default'", ")", "\n", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.tokenize_for_pretrain": [[221, 256], ["tokenization_spm.encode_pieces", "tokenization_spm.FullTokenizerSpm.convert_tokens_to_ids", "tokenization_spm.FullTokenizerSpm.inverse_index_str", "zip", "len", "len", "t.decode.decode.decode", "tok_protocol.Tok", "len", "sent_piece_tokens.append", "len", "tokenization_spm.preprocess_text", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.encode_pieces", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.inverse_index_str", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.preprocess_text"], ["", "def", "tokenize_for_pretrain", "(", "self", ",", "tok_list", ")", ":", "\n", "    ", "\"\"\"tokenize text for pretrain\"\"\"", "\n", "import", "tok", "as", "tok_protocol", "\n", "text", "=", "\" \"", ".", "join", "(", "[", "t", ".", "token", "for", "t", "in", "tok_list", "]", ")", "\n", "\n", "#split_tokens = encode_pieces(self.sp_model, text, return_unicode=True)", "\n", "split_tokens", "=", "encode_pieces", "(", "self", ".", "sp_model", ",", "text", ",", "return_unicode", "=", "False", ")", "\n", "ids", "=", "self", ".", "convert_tokens_to_ids", "(", "split_tokens", ")", "\n", "\n", "# +1 for head _ : 'hello world' -> ['_hello', '_world']", "\n", "\n", "if", "not", "(", "len", "(", "preprocess_text", "(", "''", ".", "join", "(", "split_tokens", ")", ")", ")", "==", "len", "(", "text", ")", "+", "1", ")", ":", "\n", "      ", "return", "None", "\n", "\n", "", "if", "len", "(", "split_tokens", ")", "!=", "len", "(", "ids", ")", ":", "\n", "      ", "return", "None", "\n", "\n", "", "sent_piece_tokens", "=", "[", "]", "\n", "i", "=", "0", "\n", "position_to_nth", "=", "self", ".", "inverse_index_str", "(", "\"_\"", "+", "text", ")", "\n", "for", "t", ",", "id", "in", "zip", "(", "split_tokens", ",", "ids", ")", ":", "\n", "      ", "t", "=", "t", ".", "decode", "(", "'utf8'", ")", "\n", "nth", "=", "position_to_nth", "[", "i", "]", "\n", "token", "=", "tok_list", "[", "nth", "]", "\n", "\n", "tok", "=", "tok_protocol", ".", "Tok", "(", ")", "\n", "tok", ".", "token", "=", "t", "\n", "tok", ".", "id", "=", "id", "\n", "tok", ".", "bio", "=", "token", ".", "bio", "\n", "tok", ".", "origin", "=", "token", ".", "origin", "\n", "tok", ".", "appear", "=", "token", ".", "appear", "\n", "i", "+=", "len", "(", "t", ")", "\n", "sent_piece_tokens", ".", "append", "(", "tok", ")", "\n", "\n", "", "return", "sent_piece_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.inverse_index_str": [[257, 266], ["enumerate"], "methods", ["None"], ["", "def", "inverse_index_str", "(", "self", ",", "s", ")", ":", "\n", "    ", "\"\"\"inverse the str of index\"\"\"", "\n", "nth_tok", "=", "0", "\n", "position_to_nth", "=", "{", "}", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "s", ")", ":", "\n", "        ", "if", "c", "==", "\" \"", ":", "\n", "            ", "nth_tok", "+=", "1", "\n", "", "position_to_nth", "[", "i", "]", "=", "nth_tok", "\n", "", "return", "position_to_nth", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.convert_tokens_to_ids": [[267, 275], ["tokenization_utils.convert_by_vocab", "tokenization_spm.FullTokenizerSpm.sp_model.PieceToId", "tokenization_utils.printable_text"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.printable_text"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "    ", "\"\"\" get ids of tokens\"\"\"", "\n", "if", "self", ".", "sp_model", ":", "\n", "#tf.logging.info(\"using sentence piece tokenzier.\")", "\n", "      ", "return", "[", "self", ".", "sp_model", ".", "PieceToId", "(", "\n", "printable_text", "(", "token", ")", ")", "for", "token", "in", "tokens", "]", "\n", "", "else", ":", "\n", "      ", "return", "convert_by_vocab", "(", "self", ".", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.convert_ids_to_tokens": [[276, 283], ["tokenization_utils.convert_by_vocab", "tokenization_spm.FullTokenizerSpm.sp_model.IdToPiece"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "    ", "\"\"\"get tokens of ids\"\"\"", "\n", "if", "self", ".", "sp_model", ":", "\n", "#tf.logging.info(\"using sentence piece tokenzier.\")", "\n", "      ", "return", "[", "self", ".", "sp_model", ".", "IdToPiece", "(", "id_", ")", "for", "id_", "in", "ids", "]", "\n", "", "else", ":", "\n", "      ", "return", "convert_by_vocab", "(", "self", ".", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.FullTokenizerSpm.merge_subword": [[284, 301], ["token.startswith", "ret.append", "len", "ret.append"], "methods", ["None"], ["", "", "def", "merge_subword", "(", "self", ",", "tokens", ")", ":", "\n", "    ", "\"\"\"\n    :param tokens:\n    :return: merged_tokens\n    \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "      ", "if", "token", ".", "startswith", "(", "u\"\u2581\"", ")", ":", "\n", "        ", "ret", ".", "append", "(", "token", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "if", "len", "(", "ret", ")", ":", "\n", "          ", "ret", "[", "-", "1", "]", "+=", "token", "\n", "", "else", ":", "\n", "          ", "ret", ".", "append", "(", "token", ")", "\n", "\n", "", "", "", "ret", "=", "[", "token", "for", "token", "in", "ret", "if", "token", "]", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.validate_case_matches_checkpoint": [[39, 88], ["re.match", "re.match.group", "six.ensure_str", "ValueError"], "function", ["None"], ["def", "validate_case_matches_checkpoint", "(", "do_lower_case", ",", "init_checkpoint", ")", ":", "\n", "  ", "\"\"\"Checks whether the casing config is consistent with the checkpoint name.\"\"\"", "\n", "\n", "# The casing has to be passed in by the user and there is no explicit check", "\n", "# as to whether it matches the checkpoint. The casing information probably", "\n", "# should have been stored in the bert_config.json file, but it's not, so", "\n", "# we have to heuristically detect it to validate.", "\n", "\n", "if", "not", "init_checkpoint", ":", "\n", "    ", "return", "\n", "\n", "", "m", "=", "re", ".", "match", "(", "\"^.*?([A-Za-z0-9_-]+)/bert_model.ckpt\"", ",", "\n", "six", ".", "ensure_str", "(", "init_checkpoint", ")", ")", "\n", "if", "m", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "model_name", "=", "m", ".", "group", "(", "1", ")", "\n", "\n", "lower_models", "=", "[", "\n", "\"uncased_L-24_H-1024_A-16\"", ",", "\"uncased_L-12_H-768_A-12\"", ",", "\n", "\"multilingual_L-12_H-768_A-12\"", ",", "\"chinese_L-12_H-768_A-12\"", "\n", "]", "\n", "\n", "cased_models", "=", "[", "\n", "\"cased_L-12_H-768_A-12\"", ",", "\"cased_L-24_H-1024_A-16\"", ",", "\n", "\"multi_cased_L-12_H-768_A-12\"", "\n", "]", "\n", "\n", "is_bad_config", "=", "False", "\n", "if", "model_name", "in", "lower_models", "and", "not", "do_lower_case", ":", "\n", "    ", "is_bad_config", "=", "True", "\n", "actual_flag", "=", "\"False\"", "\n", "case_name", "=", "\"lowercased\"", "\n", "opposite_flag", "=", "\"True\"", "\n", "\n", "", "if", "model_name", "in", "cased_models", "and", "do_lower_case", ":", "\n", "    ", "is_bad_config", "=", "True", "\n", "actual_flag", "=", "\"True\"", "\n", "case_name", "=", "\"cased\"", "\n", "opposite_flag", "=", "\"False\"", "\n", "\n", "", "if", "is_bad_config", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "\"You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. \"", "\n", "\"However, `%s` seems to be a %s model, so you \"", "\n", "\"should pass in `--do_lower_case=%s` so that the fine-tuning matches \"", "\n", "\"how the model was pre-training. If this error is wrong, please \"", "\n", "\"just comment out this check.\"", "%", "(", "actual_flag", ",", "init_checkpoint", ",", "\n", "model_name", ",", "case_name", ",", "opposite_flag", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.clean_text": [[90, 107], ["text.replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "tokenization_utils._is_control", "tokenization_utils._is_whitespace", "text.replace().replace().replace().replace().replace.replace().replace().replace().replace", "output.append", "output.append", "text.replace().replace().replace().replace().replace.replace().replace().replace", "text.replace().replace().replace().replace().replace.replace().replace", "text.replace().replace().replace().replace().replace.replace"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_control", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_whitespace"], ["", "", "def", "clean_text", "(", "text", ")", ":", "\n", "  ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "text", "=", "text", ".", "replace", "(", "u\"\u201c\"", ",", "u'\"'", ")", ".", "replace", "(", "u'\u201d'", ",", "u'\"'", ")", ".", "replace", "(", "u'\u2018'", ",", "\"'\"", ")", ".", "replace", "(", "u'\u2019'", ",", "u\"'\"", ")", ".", "replace", "(", "u'\u2014'", ",", "u'-'", ")", "\n", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "if", "_is_control", "(", "char", ")", ":", "\n", "          ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "          ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "          ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.preprocess_text": [[109, 128], ["unicodedata.normalize", "isinstance", "six.ensure_text.lower", "inputs.strip().split", "six.ensure_text", "six.ensure_text", "inputs.strip", "unicodedata.combining"], "function", ["None"], ["", "def", "preprocess_text", "(", "inputs", ",", "remove_space", "=", "True", ",", "lower", "=", "False", ")", ":", "\n", "  ", "\"\"\"preprocess data by removing extra space and normalize data.\"\"\"", "\n", "\n", "outputs", "=", "inputs", "\n", "if", "remove_space", ":", "\n", "    ", "outputs", "=", "\" \"", ".", "join", "(", "inputs", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "\n", "", "if", "six", ".", "PY2", "and", "isinstance", "(", "outputs", ",", "str", ")", ":", "\n", "    ", "try", ":", "\n", "      ", "outputs", "=", "six", ".", "ensure_text", "(", "outputs", ",", "\"utf-8\"", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "      ", "outputs", "=", "six", ".", "ensure_text", "(", "outputs", ",", "\"latin-1\"", ")", "\n", "\n", "", "", "outputs", "=", "unicodedata", ".", "normalize", "(", "\"NFKD\"", ",", "outputs", ")", "\n", "outputs", "=", "\"\"", ".", "join", "(", "[", "c", "for", "c", "in", "outputs", "if", "not", "unicodedata", ".", "combining", "(", "c", ")", "]", ")", "\n", "if", "lower", ":", "\n", "    ", "outputs", "=", "outputs", ".", "lower", "(", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.encode_pieces": [[130, 170], ["tokenization_spm.clean_text", "isinstance", "six.ensure_binary", "sp_model.EncodeAsPieces", "sp_model.SampleEncodeAsPieces", "tokenization_utils.printable_text", "piece[].isdigit", "sp_model.EncodeAsPieces", "sp_model.EncodeAsPieces.append", "new_pieces.extend", "new_pieces.append", "isinstance", "ret_pieces.append", "len", "six.ensure_binary().replace", "six.ensure_text", "len", "six.ensure_binary"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.clean_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.printable_text"], ["", "def", "encode_pieces", "(", "sp_model", ",", "text", ",", "return_unicode", "=", "True", ",", "sample", "=", "False", ")", ":", "\n", "  ", "\"\"\"turn sentences into word pieces.\"\"\"", "\n", "\n", "# liujiaxiang: add for ernie-albert, mainly consider for \u201c/\u201d/\u2018/\u2019/\u2014 causing too many unk", "\n", "text", "=", "clean_text", "(", "text", ")", "\n", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "text", ",", "six", ".", "text_type", ")", ":", "\n", "    ", "text", "=", "six", ".", "ensure_binary", "(", "text", ",", "\"utf-8\"", ")", "\n", "\n", "", "if", "not", "sample", ":", "\n", "    ", "pieces", "=", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "else", ":", "\n", "    ", "pieces", "=", "sp_model", ".", "SampleEncodeAsPieces", "(", "text", ",", "64", ",", "0.1", ")", "\n", "\n", "", "new_pieces", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "    ", "piece", "=", "printable_text", "(", "piece", ")", "\n", "if", "len", "(", "piece", ")", ">", "1", "and", "piece", "[", "-", "1", "]", "==", "\",\"", "and", "piece", "[", "-", "2", "]", ".", "isdigit", "(", ")", ":", "\n", "      ", "cur_pieces", "=", "sp_model", ".", "EncodeAsPieces", "(", "\n", "six", ".", "ensure_binary", "(", "piece", "[", ":", "-", "1", "]", ")", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "b\"\"", ")", ")", "\n", "if", "piece", "[", "0", "]", "!=", "SPIECE_UNDERLINE", "and", "cur_pieces", "[", "0", "]", "[", "0", "]", "==", "SPIECE_UNDERLINE", ":", "\n", "        ", "if", "len", "(", "cur_pieces", "[", "0", "]", ")", "==", "1", ":", "\n", "          ", "cur_pieces", "=", "cur_pieces", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "          ", "cur_pieces", "[", "0", "]", "=", "cur_pieces", "[", "0", "]", "[", "1", ":", "]", "\n", "", "", "cur_pieces", ".", "append", "(", "piece", "[", "-", "1", "]", ")", "\n", "new_pieces", ".", "extend", "(", "cur_pieces", ")", "\n", "", "else", ":", "\n", "      ", "new_pieces", ".", "append", "(", "piece", ")", "\n", "\n", "# note(zhiliny): convert back to unicode for py2", "\n", "", "", "if", "six", ".", "PY2", "and", "return_unicode", ":", "\n", "    ", "ret_pieces", "=", "[", "]", "\n", "for", "piece", "in", "new_pieces", ":", "\n", "      ", "if", "isinstance", "(", "piece", ",", "str", ")", ":", "\n", "        ", "piece", "=", "six", ".", "ensure_text", "(", "piece", ",", "\"utf-8\"", ")", "\n", "", "ret_pieces", ".", "append", "(", "piece", ")", "\n", "", "new_pieces", "=", "ret_pieces", "\n", "\n", "", "return", "new_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.encode_ids": [[172, 177], ["tokenization_spm.encode_pieces", "sp_model.PieceToId"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.encode_pieces"], ["", "def", "encode_ids", "(", "sp_model", ",", "text", ",", "sample", "=", "False", ")", ":", "\n", "  ", "\"\"\"encode ids\"\"\"", "\n", "pieces", "=", "encode_pieces", "(", "sp_model", ",", "text", ",", "return_unicode", "=", "False", ",", "sample", "=", "sample", ")", "\n", "ids", "=", "[", "sp_model", ".", "PieceToId", "(", "piece", ")", "for", "piece", "in", "pieces", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.__init__": [[24, 80], ["doie_basic_tokenizer.DoieBasicTokenizer.load_vocab", "isinstance", "isinstance", "doie_basic_tokenizer.DoieBasicTokenizer.translate_dict.update"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.load_vocab", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.update"], ["def", "__init__", "(", "self", ",", "\n", "vocab_file", ",", "\n", "unk_token", "=", "\"[UNK]\"", ",", "\n", "keep_whitespace", "=", "True", ",", "\n", "merge_whitespace", "=", "False", ",", "\n", "whitespace_token", "=", "\"[PAD]\"", ",", "\n", "do_lower_case", "=", "True", ",", "\n", "do_remove_accent", "=", "False", ",", "\n", "eng_word_tokenizer", "=", "\"wordpiece\"", ",", "\n", "num_word_tokenizer", "=", "\"wordpiece\"", ",", "\n", "max_input_chars_per_word", "=", "100", ",", "\n", "do_char_translate", "=", "False", ",", "\n", "translate_dict", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "vocab", "=", "{", "}", "\n", "self", ".", "inv_vocab", "=", "{", "}", "\n", "self", ".", "load_vocab", "(", "vocab_file", ")", "\n", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "if", "isinstance", "(", "unk_token", ",", "int", ")", ":", "\n", "            ", "self", ".", "unk_id", "=", "unk_token", "\n", "", "else", ":", "\n", "            ", "self", ".", "unk_id", "=", "self", ".", "vocab", "[", "unk_token", "]", "\n", "\n", "", "self", ".", "keep_whitespace", "=", "keep_whitespace", "\n", "self", ".", "merge_whitespace", "=", "merge_whitespace", "\n", "self", ".", "whitespace_token", "=", "whitespace_token", "\n", "if", "keep_whitespace", ":", "\n", "            ", "if", "isinstance", "(", "whitespace_token", ",", "int", ")", ":", "\n", "                ", "self", ".", "whitespace_id", "=", "whitespace_token", "\n", "", "else", ":", "\n", "                ", "self", ".", "whitespace_id", "=", "self", ".", "vocab", "[", "whitespace_token", "]", "\n", "\n", "", "", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "do_remove_accent", "=", "do_remove_accent", "\n", "\n", "self", ".", "eng_word_tokenize_type", "=", "0", "\n", "if", "eng_word_tokenizer", "==", "'char'", ":", "\n", "            ", "self", ".", "eng_word_tokenize_type", "=", "self", ".", "CHAR_TOKENIZE", "\n", "", "elif", "eng_word_tokenizer", "==", "'wordpiece'", ":", "\n", "            ", "self", ".", "eng_word_tokenize_type", "=", "self", ".", "WORDPIECE_TOKENIZE", "\n", "", "self", ".", "num_word_tokenize_type", "=", "0", "\n", "if", "num_word_tokenizer", "==", "'char'", ":", "\n", "            ", "self", ".", "num_word_tokenize_type", "=", "self", ".", "CHAR_TOKENIZE", "\n", "", "elif", "num_word_tokenizer", "==", "'wordpiece'", ":", "\n", "            ", "self", ".", "num_word_tokenize_type", "=", "self", ".", "WORDPIECE_TOKENIZE", "\n", "\n", "", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "self", ".", "do_char_translate", "=", "do_char_translate", "\n", "self", ".", "translate_dict", "=", "{", "}", "\n", "\n", "if", "translate_dict", ":", "\n", "            ", "self", ".", "translate_dict", ".", "update", "(", "translate_dict", ")", "\n", "\n", "#self.token_cls = collections.namedtuple(\"Token\", ['token', 'orig_token', 'offset'])", "\n", "", "self", ".", "token_cls", "=", "Token", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.load_vocab": [[81, 98], ["ValueError", "codecs.open", "enumerate", "os.path.exists", "line.strip().split", "int", "token.strip.strip.strip", "len", "line.strip", "len"], "methods", ["None"], ["", "def", "load_vocab", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "self", ".", "vocab", "=", "{", "}", "\n", "self", ".", "inv_vocab", "=", "{", "}", "\n", "if", "not", "vocab_file", "or", "not", "os", ".", "path", ".", "exists", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"%s: vocab_file not existed: %s\"", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "vocab_file", ")", ")", "\n", "", "with", "codecs", ".", "open", "(", "vocab_file", ",", "encoding", "=", "'utf8'", ")", "as", "fin", ":", "\n", "            ", "for", "num", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "items", ")", ">", "2", ":", "\n", "                    ", "break", "\n", "", "token", "=", "items", "[", "0", "]", "\n", "index", "=", "items", "[", "1", "]", "if", "len", "(", "items", ")", "==", "2", "else", "num", "\n", "index", "=", "int", "(", "index", ")", "\n", "token", "=", "token", ".", "strip", "(", ")", "\n", "self", ".", "vocab", "[", "token", "]", "=", "index", "\n", "self", ".", "inv_vocab", "[", "index", "]", "=", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace": [[99, 110], ["len", "unicodedata.category", "six.text_type"], "methods", ["None"], ["", "", "", "def", "is_whitespace", "(", "self", ",", "char", ")", ":", "\n", "        ", "\"\"\"\n        is whitespace\n        \"\"\"", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "            ", "return", "True", "\n", "", "if", "len", "(", "char", ")", "==", "1", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "six", ".", "text_type", "(", "char", ")", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "                ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_alpha": [[111, 120], ["None"], "methods", ["None"], ["", "def", "is_alpha", "(", "self", ",", "char", ")", ":", "\n", "        ", "\"\"\"\n        is_alpha\n        \"\"\"", "\n", "if", "'a'", "<=", "char", "<=", "'z'", ":", "\n", "            ", "return", "True", "\n", "", "if", "'A'", "<=", "char", "<=", "'Z'", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.remove_char_accent": [[121, 126], ["unicodedata.normalize"], "methods", ["None"], ["", "def", "remove_char_accent", "(", "self", ",", "char", ")", ":", "\n", "        ", "\"\"\"\n        remove_char_accent\n        \"\"\"", "\n", "return", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "char", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.remove_accents": [[127, 137], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "remove_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"remove accents\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.tokenize": [[138, 208], ["enumerate", "zip", "isinstance", "ValueError", "doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace", "tokens.append", "orig_tokens.append", "offsets.append", "zip", "doie_basic_tokenizer.DoieBasicTokenizer.translate_dict.get", "doie_basic_tokenizer.DoieBasicTokenizer.remove_char_accent", "char.lower.lower.lower", "doie_basic_tokenizer.DoieBasicTokenizer.is_alpha", "doie_basic_tokenizer.DoieBasicTokenizer.token_cls", "ex_tokens.append", "char.lower.lower.isdigit", "len", "doie_basic_tokenizer.DoieBasicTokenizer.is_alpha", "lst_token[].isdigit", "doie_basic_tokenizer.DoieBasicTokenizer.wordpiece_for_single_token", "doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace", "doie_basic_tokenizer.DoieBasicTokenizer.is_alpha", "len", "tokens.pop", "orig_tokens.pop", "offsets.pop", "enumerate", "lst_char.isdigit", "tokens.append", "orig_tokens.append", "offsets.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.remove_char_accent", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_alpha", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_alpha", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.wordpiece_for_single_token", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_alpha"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "extra_info", "=", "False", ")", ":", "\n", "        ", "\"\"\"tokenize\"\"\"", "\n", "if", "not", "isinstance", "(", "text", ",", "six", ".", "text_type", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"tokenizer input text must be unicode object\"", ")", "\n", "", "tokens", ",", "orig_tokens", ",", "offsets", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "lst_char", "=", "None", "\n", "for", "offset", ",", "orig_char", "in", "enumerate", "(", "text", ")", ":", "\n", "            ", "char", "=", "orig_char", "\n", "if", "self", ".", "do_char_translate", ":", "\n", "                ", "char", "=", "self", ".", "translate_dict", ".", "get", "(", "char", ",", "orig_char", ")", "\n", "", "if", "self", ".", "do_remove_accent", ":", "\n", "                ", "char", "=", "self", ".", "remove_char_accent", "(", "char", ")", "\n", "", "if", "self", ".", "do_lower_case", ":", "\n", "                ", "char", "=", "char", ".", "lower", "(", ")", "\n", "", "if", "self", ".", "is_whitespace", "(", "char", ")", ":", "\n", "                ", "if", "not", "self", ".", "keep_whitespace", ":", "\n", "                    ", "lst_char", "=", "char", "\n", "continue", "\n", "", "elif", "self", ".", "merge_whitespace", "and", "self", ".", "is_whitespace", "(", "lst_char", ")", ":", "\n", "                    ", "tokens", "[", "-", "1", "]", "+=", "char", "\n", "orig_tokens", "[", "-", "1", "]", "+=", "orig_char", "\n", "lst_char", "=", "char", "\n", "continue", "\n", "", "", "elif", "self", ".", "is_alpha", "(", "char", ")", ":", "\n", "                ", "if", "self", ".", "eng_word_tokenize_type", "!=", "self", ".", "CHAR_TOKENIZE", "and", "lst_char", "and", "self", ".", "is_alpha", "(", "lst_char", ")", ":", "\n", "                    ", "tokens", "[", "-", "1", "]", "+=", "char", "\n", "orig_tokens", "[", "-", "1", "]", "+=", "orig_char", "\n", "lst_char", "=", "char", "\n", "continue", "\n", "", "", "elif", "char", ".", "isdigit", "(", ")", ":", "\n", "                ", "if", "self", ".", "num_word_tokenize_type", "!=", "self", ".", "CHAR_TOKENIZE", "and", "lst_char", "and", "lst_char", ".", "isdigit", "(", ")", ":", "\n", "                    ", "tokens", "[", "-", "1", "]", "+=", "char", "\n", "orig_tokens", "[", "-", "1", "]", "+=", "orig_char", "\n", "lst_char", "=", "char", "\n", "continue", "\n", "\n", "", "", "if", "tokens", "and", "len", "(", "tokens", "[", "-", "1", "]", ")", ">", "1", ":", "\n", "                ", "do_wordpiece", "=", "False", "\n", "lst_token", "=", "tokens", "[", "-", "1", "]", "\n", "if", "self", ".", "eng_word_tokenize_type", "==", "self", ".", "WORDPIECE_TOKENIZE", "and", "self", ".", "is_alpha", "(", "lst_token", "[", "0", "]", ")", ":", "\n", "                    ", "do_wordpiece", "=", "True", "\n", "", "if", "self", ".", "num_word_tokenize_type", "==", "self", ".", "WORDPIECE_TOKENIZE", "and", "lst_token", "[", "0", "]", ".", "isdigit", "(", ")", ":", "\n", "                    ", "do_wordpiece", "=", "True", "\n", "", "if", "do_wordpiece", ":", "\n", "                    ", "sub_tokens", "=", "self", ".", "wordpiece_for_single_token", "(", "lst_token", ")", "\n", "if", "len", "(", "sub_tokens", ")", ">", "1", ":", "\n", "                        ", "tokens", ".", "pop", "(", ")", "\n", "lst_orig_token", "=", "orig_tokens", ".", "pop", "(", ")", "\n", "lst_offset", "=", "offsets", ".", "pop", "(", ")", "\n", "sub_offset", "=", "0", "\n", "for", "i", ",", "sub_token", "in", "enumerate", "(", "sub_tokens", ")", ":", "\n", "                            ", "sub_token_len", "=", "len", "(", "sub_token", ")", "if", "i", "==", "0", "else", "len", "(", "sub_token", ")", "-", "2", "\n", "tokens", ".", "append", "(", "sub_token", ")", "\n", "orig_tokens", ".", "append", "(", "lst_orig_token", "[", "sub_offset", ":", "sub_offset", "+", "sub_token_len", "]", ")", "\n", "offsets", ".", "append", "(", "lst_offset", "+", "sub_offset", ")", "\n", "sub_offset", "+=", "sub_token_len", "\n", "\n", "", "", "", "", "tokens", ".", "append", "(", "char", ")", "\n", "orig_tokens", ".", "append", "(", "orig_char", ")", "\n", "offsets", ".", "append", "(", "offset", ")", "\n", "lst_char", "=", "char", "\n", "\n", "", "if", "extra_info", ":", "\n", "            ", "ex_tokens", "=", "[", "]", "\n", "for", "token", ",", "orig_token", ",", "offset", "in", "zip", "(", "tokens", ",", "orig_tokens", ",", "offsets", ")", ":", "\n", "                ", "ex_token", "=", "self", ".", "token_cls", "(", "token", "=", "token", ",", "orig_token", "=", "orig_token", ",", "offset", "=", "offset", ")", "\n", "ex_tokens", ".", "append", "(", "ex_token", ")", "\n", "", "return", "ex_tokens", "\n", "\n", "", "return", "zip", "(", "tokens", ",", "orig_tokens", ",", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.wordpiece_for_single_token": [[209, 237], ["len", "len", "len", "sub_tokens.append"], "methods", ["None"], ["", "def", "wordpiece_for_single_token", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\"\n        wordpiece_tokenize for single token without UNK replaced\n        \"\"\"", "\n", "if", "len", "(", "token", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "            ", "return", "[", "token", "]", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "token", ")", ":", "\n", "            ", "end", "=", "len", "(", "token", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                ", "substr", "=", "token", "[", "start", ":", "end", "]", "\n", "if", "start", ">", "0", ":", "\n", "                    ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                    ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "", "if", "is_bad", ":", "\n", "            ", "return", "[", "token", "]", "\n", "", "return", "sub_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.convert_tokens_to_ids": [[238, 251], ["isinstance", "doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace", "output.append", "output.append", "doie_basic_tokenizer.DoieBasicTokenizer.vocab.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        convert_tokens_to_ids\n        \"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "isinstance", "(", "token", ",", "self", ".", "token_cls", ")", ":", "\n", "                ", "token", "=", "token", ".", "token", "\n", "", "if", "self", ".", "is_whitespace", "(", "token", "[", "0", "]", ")", ":", "\n", "                ", "output", ".", "append", "(", "self", ".", "whitespace_id", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "self", ".", "vocab", ".", "get", "(", "token", ",", "self", ".", "unk_id", ")", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.convert_ids_to_tokens": [[252, 260], ["output.append"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "\"\"\"\n        convert_ids_to_tokens\n        \"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "token_id", "in", "token_ids", ":", "\n", "            ", "output", ".", "append", "(", "self", ".", "inv_vocab", "[", "token_id", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.insert_token": [[261, 278], ["ex_tokens.insert", "len", "len", "doie_basic_tokenizer.DoieBasicTokenizer.token_cls", "range", "len", "len"], "methods", ["None"], ["", "def", "insert_token", "(", "self", ",", "ex_tokens", ",", "index", ",", "token", ",", "orig_token", ")", ":", "\n", "        ", "\"\"\"\n        insert token into ex_tokens\n        \"\"\"", "\n", "offset", "=", "0", "\n", "if", "index", ">=", "len", "(", "ex_tokens", ")", ":", "\n", "            ", "if", "len", "(", "ex_tokens", ")", "!=", "0", ":", "\n", "                ", "offset", "=", "ex_tokens", "[", "-", "1", "]", ".", "end", "\n", "", "else", ":", "\n", "                ", "offset", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "offset", "=", "ex_tokens", "[", "index", "]", ".", "start", "\n", "", "ex_tokens", ".", "insert", "(", "index", ",", "self", ".", "token_cls", "(", "token", ",", "orig_token", ",", "offset", ")", ")", "\n", "tk_len", "=", "len", "(", "orig_token", ")", "\n", "if", "tk_len", ">", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "index", "+", "1", ",", "len", "(", "ex_tokens", ")", ")", ":", "\n", "                ", "ex_tokens", "[", "i", "]", ".", "offset", "+=", "tk_len", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.append_token": [[279, 285], ["ex_tokens.append", "doie_basic_tokenizer.DoieBasicTokenizer.token_cls", "len"], "methods", ["None"], ["", "", "", "def", "append_token", "(", "self", ",", "ex_tokens", ",", "token", ",", "orig_token", ")", ":", "\n", "        ", "\"\"\"\n        append_token\n        \"\"\"", "\n", "offset", "=", "ex_tokens", "[", "-", "1", "]", ".", "end", "if", "len", "(", "ex_tokens", ")", ">", "0", "else", "0", "\n", "ex_tokens", ".", "append", "(", "self", ".", "token_cls", "(", "token", ",", "orig_token", ",", "offset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.Token.__init__": [[291, 295], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "token", ",", "orig_token", ",", "offset", ")", ":", "\n", "        ", "self", ".", "token", "=", "token", "\n", "self", ".", "orig_token", "=", "orig_token", "\n", "self", ".", "offset", "=", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.Token.end": [[296, 300], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "end", "(", "self", ")", ":", "\n", "        ", "\"\"\"emd offset of token\"\"\"", "\n", "return", "self", ".", "offset", "+", "len", "(", "self", ".", "orig_token", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.Token.start": [[300, 304], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "start", "(", "self", ")", ":", "\n", "        ", "\"\"\"start offset of token\"\"\"", "\n", "return", "self", ".", "offset", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.Token.__iter__": [[304, 306], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "(", "self", ".", "token", ",", "self", ".", "orig_token", ",", "self", ".", "offset", ")", ")", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.Token.__dict__": [[306, 311], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "__dict__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'token'", ":", "self", ".", "token", ",", "\n", "'orig_token'", ":", "self", ".", "orig_token", ",", "\n", "'offset'", ":", "self", ".", "offset", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.test": [[313, 335], ["doie_basic_tokenizer.DoieBasicTokenizer", "doie_basic_tokenizer.DoieBasicTokenizer.tokenize", "doie_basic_tokenizer.DoieBasicTokenizer.convert_tokens_to_ids", "doie_basic_tokenizer.DoieBasicTokenizer.convert_ids_to_tokens", "zip", "print().encode", "print"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "\"\"\"\n    test\n    \"\"\"", "\n", "vocab_file", "=", "'ernie_model/vocab.txt'", "\n", "#text = '\u683c \u68c0 \u67e5*T36.0\u2103  *P108\u6b21/\u5206    *R20\u6b21/\u5206   *BP120/69mmHg\u4e00\u822c\u60c5\u51b5\uff1a\u53d1\u80b2:\u6b63\u5e38\u3002'", "\n", "#text = 'T 36 8\u2103\u814b\u6e29 P 129\u6b21/\u5206 R 32\u6b21/\u5206 BP 0/0mmHg WT6 6Kg\u4e00\u822c\u60c5\u51b5\uff1a\u53d1\u80b2\u6b63\u5e38\uff0c\u8425\u517b\u826f\u597d\uff0c\u6b63\u5e38\u9762\u5bb9\uff0c\u8868\u60c5\u81ea\u5982\uff0c\u81ea\u4e3b\u4f53\u4f4d\uff0c\u795e\u5fd7\u6e05\u695a\uff0c\u67e5\u4f53\u5408\u4f5c\u3002'", "\n", "text", "=", "'\u67e5\u5c14\u65af\u00b7\u963f\u5170\u57fa\u65af\uff08Charles Ar\u00e1nguiz\uff09\uff0c1989\u5e744\u670817\u65e5\u51fa\u751f\u4e8e\u667a\u5229\u5723\u5730\u4e9a\u54e5\uff0c\u667a\u5229\u804c\u4e1a\u8db3\u7403\u8fd0\u52a8\u5458\uff0c\u53f8\u804c\u4e2d\u573a\uff0c\u6548\u529b\u4e8e\u5fb7\u56fd\u8db3\u7403\u7532\u7ea7\u8054\u8d5b\u52d2\u6c83\u5e93\u68ee\u8db3\u7403\u4ff1\u4e50\u90e8'", "\n", "tokenizer", "=", "DoieBasicTokenizer", "(", "vocab_file", ",", "\n", "keep_whitespace", "=", "True", ",", "\n", "merge_whitespace", "=", "True", ",", "\n", "whitespace_token", "=", "0", ",", "\n", "eng_word_tokenizer", "=", "'wordpiece'", ",", "\n", "num_word_tokenizer", "=", "'wordpiece'", ",", "\n", "do_lower_case", "=", "True", ",", "\n", "do_remove_accent", "=", "True", ",", "\n", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ",", "extra_info", "=", "True", ")", "\n", "token_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "rec_tokens", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "token_ids", ")", "\n", "for", "(", "token", ",", "orig_token", ",", "offset", ")", ",", "token_id", ",", "rec_token", "in", "zip", "(", "tokens", ",", "token_ids", ",", "rec_tokens", ")", ":", "\n", "        ", "print", "(", "\"%s\\t%s\\t%s\\t%s\\t%s\"", "%", "(", "offset", ",", "token", ",", "orig_token", ",", "token_id", ",", "rec_token", ")", ")", ".", "encode", "(", "'gb18030'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.SentencepieceTokenizer.__init__": [[32, 41], ["tokenizer.Tokenizer.__init__", "sentencepiece.SentencePieceProcessor", "mrc_tokenizer.SentencepieceTokenizer.tokenizer.Load"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", "=", "unk_token", ",", "params", "=", "params", ")", "\n", "self", ".", "do_lower_case", "=", "True", "\n", "if", "params", ":", "\n", "            ", "self", ".", "do_lower_case", "=", "params", "[", "\"do_lower_case\"", "]", "\n", "", "self", ".", "tokenizer", "=", "sp", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "tokenizer", ".", "Load", "(", "vocab_file", "+", "\".model\"", ")", "\n", "self", ".", "sp_unk_token", "=", "\"<unk>\"", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.SentencepieceTokenizer.tokenize": [[42, 63], ["utils.util_helper.convert_to_unicode", "mrc_tokenizer.SentencepieceTokenizer.tokenizer.EncodeAsPieces", "utils.util_helper.convert_to_unicode.lower", "utils.util_helper.convert_to_unicode.replace", "output_tokens.append", "output_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        Returns:\n            A list of wordpiece tokens.\n        \"\"\"", "\n", "text", "=", "text", ".", "lower", "(", ")", "if", "self", ".", "do_lower_case", "else", "text", "\n", "text", "=", "convert_to_unicode", "(", "text", ".", "replace", "(", "\"\\1\"", ",", "\" \"", ")", ")", "\n", "tokens", "=", "self", ".", "tokenizer", ".", "EncodeAsPieces", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "token", "==", "self", ".", "sp_unk_token", ":", "\n", "                ", "token", "=", "self", ".", "unk_token", "\n", "\n", "", "if", "token", "in", "self", ".", "vocabulary", ".", "vocab_dict", ":", "\n", "                ", "output_tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.SentencepieceTokenizer.convert_tokens_to_ids": [[64, 67], ["mrc_tokenizer.SentencepieceTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"convert tokens to ids\"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.SentencepieceTokenizer.convert_ids_to_tokens": [[68, 71], ["mrc_tokenizer.SentencepieceTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"convert ids to tokens\"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.WordsegTokenizer.__init__": [[77, 87], ["tokenizer.Tokenizer.__init__", "sentencepiece.SentencePieceProcessor", "mrc_tokenizer.WordsegTokenizer.tokenizer.Load"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\"\\1\"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", "=", "unk_token", ",", "params", "=", "params", ")", "\n", "self", ".", "tokenizer", "=", "sp", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "tokenizer", ".", "Load", "(", "vocab_file", "+", "\".model\"", ")", "\n", "\n", "self", ".", "do_lower_case", "=", "True", "\n", "if", "params", ":", "\n", "            ", "self", ".", "do_lower_case", "=", "params", "[", "\"do_lower_case\"", "]", "\n", "", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "split_token", "=", "split_char", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.WordsegTokenizer.tokenize": [[88, 107], ["utils.util_helper.convert_to_unicode", "utils.util_helper.convert_to_unicode.split", "utils.util_helper.convert_to_unicode.lower", "output_tokens.append", "mrc_tokenizer.WordsegTokenizer.tokenizer.EncodeAsPieces", "output_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        Returns:\n            A list of wordpiece tokens.\n        \"\"\"", "\n", "text", "=", "text", ".", "lower", "(", ")", "if", "self", ".", "do_lower_case", "else", "text", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ".", "split", "(", "self", ".", "split_token", ")", ":", "\n", "            ", "if", "token", "in", "self", ".", "vocabulary", ".", "vocab_dict", ":", "\n", "                ", "output_tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "sp_tokens", "=", "self", ".", "tokenizer", ".", "EncodeAsPieces", "(", "token", ")", "\n", "for", "sp_token", "in", "sp_tokens", ":", "\n", "                    ", "if", "sp_token", "in", "self", ".", "vocab", ":", "\n", "                        ", "output_tokens", ".", "append", "(", "sp_token", ")", "\n", "", "", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.WordsegTokenizer.convert_tokens_to_ids": [[108, 111], ["mrc_tokenizer.WordsegTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"convert tokens to ids\"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.WordsegTokenizer.convert_ids_to_tokens": [[112, 115], ["mrc_tokenizer.WordsegTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"convert ids to tokens\"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.mrc_tokenizer.tokenize_chinese_chars": [[117, 158], ["ord", "mrc_tokenizer.tokenize_chinese_chars._is_chinese_char"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._is_chinese_char"], ["", "", "def", "tokenize_chinese_chars", "(", "text", ")", ":", "\n", "    ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "\n", "def", "_is_chinese_char", "(", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#     https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n", "", "output", "=", "[", "]", "\n", "buff", "=", "\"\"", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "_is_chinese_char", "(", "cp", ")", ":", "\n", "            ", "if", "buff", "!=", "\"\"", ":", "\n", "                ", "output", ".", "append", "(", "buff", ")", "\n", "buff", "=", "\"\"", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "else", ":", "\n", "            ", "buff", "+=", "char", "\n", "\n", "", "", "if", "buff", "!=", "\"\"", ":", "\n", "        ", "output", ".", "append", "(", "buff", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.__init__": [[13, 26], ["vocabulary.Vocabulary"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab_file: \u8bcd\u8868\u6587\u4ef6\u8def\u5f84\n        :param split_char: \u660e\u6587\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\n        :param unk_token: unk \u5bf9\u5e94\u7684token\uff0c\u9ed8\u8ba4\u662f[UNK]\n        :param params: \u4e2a\u522btokenizer\u81ea\u5df1\u7528\u5230\u7684\u989d\u5916\u53c2\u6570\uff0cdict\u7c7b\u578b\n        \"\"\"", "\n", "self", ".", "vocabulary", "=", "None", "\n", "if", "vocab_file", ":", "\n", "            ", "self", ".", "vocabulary", "=", "Vocabulary", "(", "vocab_file", ",", "unk_token", ")", "\n", "", "self", ".", "split_char", "=", "split_char", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.tokenize": [[27, 33], ["None"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return: tokens, list\u7c7b\u578b\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.convert_tokens_to_ids": [[34, 40], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.convert_ids_to_tokens": [[41, 47], ["None"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_id_to_token": [[48, 54], ["tokenizer.Tokenizer.vocabulary.covert_id_to_token"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_id_to_token"], ["", "def", "covert_id_to_token", "(", "self", ",", "id", ")", ":", "\n", "        ", "\"\"\"\n        :param id:\n        :return: token\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "covert_id_to_token", "(", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id": [[55, 61], ["tokenizer.Tokenizer.vocabulary.covert_token_to_id"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id"], ["", "def", "covert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\"\n        :param token:\n        :return: id\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "covert_token_to_id", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.merge_subword": [[62, 68], ["None"], "methods", ["None"], ["", "def", "merge_subword", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return: merged_tokens\n        \"\"\"", "\n", "return", "tokens", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_mix.MixTokenizer.__init__": [[40, 49], ["wordseg.scw_load_worddict", "wordseg.scw_create_out", "wordseg.create_tokens", "wordseg.init_tokens", "tokenization_wp.FullTokenizer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "from", ".", ".", "wordseg_mix", "import", "wordseg", "\n", "self", ".", "wordseg", "=", "wordseg", "\n", "self", ".", "MAX_TERM_COUNT", "=", "1024", "\n", "self", ".", "dict_handle", "=", "wordseg", ".", "scw_load_worddict", "(", "\"../../erniekit/data/wordseg_mix/chinese_gbk/\"", ")", "\n", "self", ".", "result_handle", "=", "wordseg", ".", "scw_create_out", "(", "self", ".", "MAX_TERM_COUNT", "*", "10", ")", "\n", "token_handle", "=", "wordseg", ".", "create_tokens", "(", "self", ".", "MAX_TERM_COUNT", ")", "\n", "self", ".", "token_handle", "=", "wordseg", ".", "init_tokens", "(", "token_handle", ",", "self", ".", "MAX_TERM_COUNT", ")", "\n", "self", ".", "full_tokenizer", "=", "FullTokenizer", "(", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_mix.MixTokenizer.wordseg_tokenize": [[50, 75], ["line.lower.lower.lower", "tokenization_mix.MixTokenizer.wordseg.scw_segment_words", "chr", "tokenization_mix.MixTokenizer.wordseg.scw_get_token_1", "tokenization_mix.MixTokenizer.wordseg.tokens_to_list", "tokenization_mix.MixTokenizer.wordseg.scw_get_token_1", "tokenization_mix.MixTokenizer.wordseg.tokens_to_list", "len", "logging.error", "res.append", "res_phrase.append", "chr.join", "chr.join"], "methods", ["None"], ["", "def", "wordseg_tokenize", "(", "self", ",", "line", ")", ":", "\n", "        ", "\"\"\"\n        wordseg func\n        \"\"\"", "\n", "line", "=", "line", ".", "lower", "(", ")", "\n", "ret", "=", "self", ".", "wordseg", ".", "scw_segment_words", "(", "self", ".", "dict_handle", ",", "self", ".", "result_handle", ",", "line", ",", "len", "(", "line", ")", ",", "1", ")", "\n", "res", "=", "[", "]", "\n", "res_phrase", "=", "[", "]", "\n", "c", "=", "chr", "(", "1", ")", "\n", "if", "ret", "<", "0", ":", "\n", "            ", "logging", ".", "error", "(", "\"scw_segment_words() failed!\"", ")", "\n", "return", "c", ".", "join", "(", "res", ")", ",", "c", ".", "join", "(", "res_phrase", ")", "\n", "\n", "", "token_count", "=", "self", ".", "wordseg", ".", "scw_get_token_1", "(", "self", ".", "result_handle", ",", "self", ".", "wordseg", ".", "SCW_BASIC", ",", "self", ".", "token_handle", ",", "self", ".", "MAX_TERM_COUNT", ")", "\n", "l", "=", "self", ".", "wordseg", ".", "tokens_to_list", "(", "self", ".", "token_handle", ",", "token_count", ")", "\n", "for", "token", "in", "l", ":", "\n", "            ", "res", ".", "append", "(", "token", "[", "7", "]", ")", "\n", "\n", "", "token_count", "=", "self", ".", "wordseg", ".", "scw_get_token_1", "(", "self", ".", "result_handle", ",", "self", ".", "wordseg", ".", "SCW_WPCOMP", ",", "self", ".", "token_handle", ",", "self", ".", "MAX_TERM_COUNT", ")", "\n", "l", "=", "self", ".", "wordseg", ".", "tokens_to_list", "(", "self", ".", "token_handle", ",", "token_count", ")", "\n", "for", "token", "in", "l", ":", "\n", "            ", "res_phrase", ".", "append", "(", "token", "[", "7", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_mix.MixTokenizer.tokenize": [[76, 103], ["text.decode().encode.decode().encode.decode().encode", "tokenization_mix.MixTokenizer.wordseg_tokenize", "word.decode", "tokenization_mix.MixTokenizer.full_tokenizer.tokenize", "xrange", "len", "len", "text.decode().encode.decode().encode.decode", "len", "len", "tokenization_mix.MixTokenizer.full_tokenizer.convert_tokens_to_ids", "tokenization_mix.MixTokenizer.full_tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_mix.MixTokenizer.wordseg_tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "segment_chars", "=", "[", "]", "\n", "segment_words", "=", "[", "]", "\n", "\n", "text", "=", "text", ".", "decode", "(", "'utf-8'", ")", ".", "encode", "(", "'gb18030'", ")", "\n", "splited_words", "=", "self", ".", "wordseg_tokenize", "(", "text", ")", "\n", "splited_words", "=", "[", "word", ".", "decode", "(", "'gb18030'", ")", "for", "word", "in", "splited_words", "]", "\n", "for", "word", "in", "splited_words", ":", "\n", "            ", "split_chars", "=", "self", ".", "full_tokenizer", ".", "tokenize", "(", "word", ")", "\n", "segment_chars", "+=", "split_chars", "\n", "for", "i", "in", "xrange", "(", "0", ",", "len", "(", "split_chars", ")", ")", ":", "\n", "                ", "if", "i", "!=", "len", "(", "split_chars", ")", "-", "1", ":", "\n", "                    ", "segment_words", "+=", "[", "split_chars", "[", "i", "]", "]", "\n", "", "else", ":", "\n", "                    ", "unk_id", "=", "self", ".", "full_tokenizer", ".", "convert_tokens_to_ids", "(", "[", "\"[UNK]\"", "]", ")", "[", "0", "]", "\n", "word_id", "=", "self", ".", "full_tokenizer", ".", "convert_tokens_to_ids", "(", "[", "word", "]", ")", "[", "0", "]", "\n", "if", "word_id", "!=", "unk_id", ":", "\n", "                        ", "segment_words", "+=", "[", "word", "]", "\n", "", "else", ":", "\n", "                        ", "segment_words", "+=", "[", "split_chars", "[", "i", "]", "]", "\n", "\n", "", "", "", "", "assert", "len", "(", "segment_chars", ")", "==", "len", "(", "segment_words", ")", ",", "\"length of splited char not equal splited words\"", "\n", "return", "(", "segment_chars", ",", "segment_words", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedFullTokenizer.__init__": [[155, 159], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ")", ":", "\n", "    ", "\"\"\"Constructs a PreTrainedFullTokenizer. \"\"\"", "\n", "self", ".", "vocab", "=", "None", "\n", "self", ".", "inv_vocab", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedFullTokenizer.tokenize": [[160, 163], ["None"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\" tokenize interface\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedFullTokenizer.convert_tokens_to_ids": [[164, 167], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "    ", "\"\"\" convert_tokens_to_ids interface\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedFullTokenizer.convert_ids_to_tokens": [[168, 171], ["None"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "    ", "\"\"\" convert_ids_to_tokens interface\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedBasicTokenizer.__init__": [[175, 182], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ")", ":", "\n", "    ", "\"\"\"Constructs a BasicTokenizer.\n\n    Args:\n      do_lower_case: Whether to lower case the input.\n    \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedBasicTokenizer.tokenize": [[183, 206], ["tokenization_utils.convert_to_unicode", "tokenization_utils.PreTrainedBasicTokenizer._clean_text", "tokenization_utils.PreTrainedBasicTokenizer._tokenize_chinese_chars", "tokenization_utils.whitespace_tokenize", "tokenization_utils.whitespace_tokenize", "split_tokens.extend", "tokenization_utils.PreTrainedBasicTokenizer.lower", "tokenization_utils.PreTrainedBasicTokenizer._run_strip_accents", "tokenization_utils.PreTrainedBasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "      ", "if", "self", ".", "do_lower_case", ":", "\n", "        ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedBasicTokenizer._run_strip_accents": [[207, 217], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "        ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedBasicTokenizer._run_split_on_punc": [[218, 237], ["list", "len", "tokenization_utils._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "      ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "        ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "        ", "if", "start_new_word", ":", "\n", "          ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedBasicTokenizer._tokenize_chinese_chars": [[238, 250], ["ord", "tokenization_utils.PreTrainedBasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "        ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "        ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedBasicTokenizer._is_chinese_char": [[251, 272], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "    ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "      ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedBasicTokenizer._clean_text": [[273, 285], ["ord", "tokenization_utils._is_whitespace", "tokenization_utils._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_whitespace", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "      ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "        ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "        ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "        ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedWordpieceTokenizer.__init__": [[290, 294], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", "=", "\"<unk>\"", ",", "max_input_chars_per_word", "=", "200", ")", ":", "\n", "    ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.PreTrainedWordpieceTokenizer.tokenize": [[295, 347], ["tokenization_utils.convert_to_unicode", "tokenization_utils.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend", "six.ensure_str"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "    ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = \"unaffable\"\n      output = [\"un\", \"##aff\", \"##able\"]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    \"\"\"", "\n", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "      ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "        ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "        ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "          ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "            ", "substr", "=", "\"##\"", "+", "six", ".", "ensure_str", "(", "substr", ")", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "            ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "          ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "        ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "        ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.load_vocab": [[28, 41], ["collections.OrderedDict", "open", "enumerate", "convert_to_unicode().split", "token.strip.strip", "int", "len", "tokenization_utils.convert_to_unicode", "len", "line.strip"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "  ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "fin", "=", "open", "(", "vocab_file", ")", "\n", "for", "num", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "    ", "items", "=", "convert_to_unicode", "(", "line", ".", "strip", "(", ")", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "if", "len", "(", "items", ")", ">", "2", ":", "\n", "      ", "break", "\n", "", "token", "=", "items", "[", "0", "]", "\n", "index", "=", "items", "[", "1", "]", "if", "len", "(", "items", ")", "==", "2", "else", "num", "\n", "token", "=", "token", ".", "strip", "(", ")", "\n", "vocab", "[", "token", "]", "=", "int", "(", "index", ")", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode": [[43, 61], ["isinstance", "isinstance", "isinstance", "ValueError", "six.ensure_text", "ValueError", "six.ensure_text", "isinstance", "ValueError", "type", "type"], "function", ["None"], ["", "def", "convert_to_unicode", "(", "text", ")", ":", "\n", "  ", "\"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"", "\n", "if", "six", ".", "PY3", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "      ", "return", "six", ".", "ensure_text", "(", "text", ",", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "six", ".", "ensure_text", "(", "text", ",", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "six", ".", "text_type", ")", ":", "\n", "      ", "return", "text", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.printable_text": [[63, 84], ["isinstance", "isinstance", "isinstance", "ValueError", "six.ensure_text", "ValueError", "isinstance", "six.ensure_binary", "ValueError", "type", "type"], "function", ["None"], ["", "", "def", "printable_text", "(", "text", ")", ":", "\n", "  ", "\"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"", "\n", "\n", "# These functions want `str` for both Python2 and Python3, but in one case", "\n", "# it's a Unicode string and in the other it's a byte string.", "\n", "if", "six", ".", "PY3", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "bytes", ")", ":", "\n", "      ", "return", "six", ".", "ensure_text", "(", "text", ",", "\"utf-8\"", ",", "\"ignore\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "elif", "six", ".", "PY2", ":", "\n", "    ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "      ", "return", "text", "\n", "", "elif", "isinstance", "(", "text", ",", "six", ".", "text_type", ")", ":", "\n", "      ", "return", "six", ".", "ensure_binary", "(", "text", ",", "\"utf-8\"", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "\"Unsupported string type: %s\"", "%", "(", "type", "(", "text", ")", ")", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "\"Not running on Python2 or Python 3?\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab": [[86, 92], ["output.append"], "function", ["None"], ["", "", "def", "convert_by_vocab", "(", "vocab", ",", "items", ")", ":", "\n", "  ", "\"\"\"Converts a sequence of [tokens|ids] using the vocab.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "item", "in", "items", ":", "\n", "    ", "output", ".", "append", "(", "vocab", "[", "item", "]", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_tokens_to_ids": [[94, 97], ["tokenization_utils.convert_by_vocab"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_tokens_to_ids", "(", "vocab", ",", "tokens", ")", ":", "\n", "  ", "\"\"\"get ids of tokens\"\"\"", "\n", "return", "convert_by_vocab", "(", "vocab", ",", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_ids_to_tokens": [[99, 102], ["tokenization_utils.convert_by_vocab"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_by_vocab"], ["", "def", "convert_ids_to_tokens", "(", "inv_vocab", ",", "ids", ")", ":", "\n", "  ", "\"\"\"get tokens of ids\"\"\"", "\n", "return", "convert_by_vocab", "(", "inv_vocab", ",", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize": [[104, 111], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "  ", "\"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "    ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_whitespace": [[113, 123], ["unicodedata.category"], "function", ["None"], ["", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically control characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "    ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_control": [[125, 135], ["unicodedata.category"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "    ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "in", "(", "\"Cc\"", ",", "\"Cf\"", ")", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils._is_punctuation": [[137, 151], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "  ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "    ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "    ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.FullTokenizer.__init__": [[39, 48], ["tokenizer.Tokenizer.__init__", "tokenization_wp.BasicTokenizer", "params.get", "tokenization_wp.SentencePieceTokenizer", "tokenization_wp.WordPieceTokenizer"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "Tokenizer", ".", "__init__", "(", "self", ",", "None", ",", "split_char", ",", "params", "=", "params", ")", "\n", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "vocab_file", "=", "None", ",", "unk_token", "=", "unk_token", ",", "params", "=", "params", ")", "\n", "if", "params", "and", "params", ".", "get", "(", "\"use_sentence_piece_vocab\"", ",", "None", ")", ":", "\n", "            ", "self", ".", "wordpiece_tokenizer", "=", "SentencePieceTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "params", "=", "params", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "wordpiece_tokenizer", "=", "WordPieceTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "params", "=", "params", ")", "\n", "", "self", ".", "vocabulary", "=", "self", ".", "wordpiece_tokenizer", ".", "vocabulary", "\n", "self", ".", "vocab", ",", "self", ".", "inv_vocab", "=", "self", ".", "vocabulary", ".", "vocab_dict", ",", "self", ".", "vocabulary", ".", "id_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.FullTokenizer.tokenize": [[49, 61], ["utils.util_helper.convert_to_unicode", "tokenization_wp.FullTokenizer.basic_tokenizer.tokenize", "tokenization_wp.FullTokenizer.wordpiece_tokenizer.tokenize", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ")", ":", "\n", "            ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.FullTokenizer.convert_tokens_to_ids": [[62, 68], ["tokenization_wp.FullTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.FullTokenizer.convert_ids_to_tokens": [[69, 75], ["tokenization_wp.FullTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.FullTokenizer.merge_subword": [[76, 92], ["token.startswith", "len", "ret.append", "ret.append"], "methods", ["None"], ["", "def", "merge_subword", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return: merged_tokens\n        \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "token", ".", "startswith", "(", "\"##\"", ")", ":", "\n", "                ", "real_token", "=", "token", "[", "2", ":", "]", "\n", "if", "len", "(", "ret", ")", ":", "\n", "                    ", "ret", "[", "-", "1", "]", "+=", "real_token", "\n", "", "else", ":", "\n", "                    ", "ret", ".", "append", "(", "real_token", ")", "\n", "", "", "else", ":", "\n", "                ", "ret", ".", "append", "(", "token", ")", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer.__init__": [[97, 102], ["tokenizer.Tokenizer.__init__", "params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "self", ".", "do_lower_case", "=", "True", "\n", "if", "params", ":", "\n", "            ", "self", ".", "do_lower_case", "=", "params", ".", "get", "(", "\"do_lower_case\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer.tokenize": [[103, 126], ["utils.util_helper.convert_to_unicode", "tokenization_wp.BasicTokenizer._clean_text", "tokenization_wp.BasicTokenizer._tokenize_chinese_chars", "utils.util_helper.whitespace_tokenize", "utils.util_helper.whitespace_tokenize", "split_tokens.extend", "tokenization_wp.BasicTokenizer.lower", "tokenization_wp.BasicTokenizer._run_strip_accents", "tokenization_wp.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._run_split_on_punc"], ["", "", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "\n", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer.convert_tokens_to_ids": [[127, 133], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer.convert_ids_to_tokens": [[134, 140], ["None"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._run_strip_accents": [[141, 151], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._run_split_on_punc": [[152, 171], ["list", "len", "utils.util_helper.is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._tokenize_chinese_chars": [[172, 184], ["ord", "tokenization_wp.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._is_chinese_char": [[185, 206], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#     https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.BasicTokenizer._clean_text": [[207, 219], ["ord", "utils.util_helper.is_whitespace", "utils.util_helper.is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WordPieceTokenizer.__init__": [[225, 230], ["tokenizer.Tokenizer.__init__", "params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", "=", "unk_token", ",", "params", "=", "params", ")", "\n", "self", ".", "max_input_chars_per_word", "=", "100", "\n", "if", "params", ":", "\n", "            ", "self", ".", "max_input_chars_per_word", "=", "params", ".", "get", "(", "\"max_input_chars_per_word\"", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WordPieceTokenizer.tokenize": [[231, 283], ["utils.util_helper.convert_to_unicode", "utils.util_helper.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize"], ["", "", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n            input = \"unaffable\"\n            output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n            text: A single token or whitespace separated tokens. This should have\n                already been passed through `BasicTokenizer.\n\n        Returns:\n            A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocabulary", ".", "vocab_dict", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WordPieceTokenizer.convert_tokens_to_ids": [[284, 290], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WordPieceTokenizer.convert_ids_to_tokens": [[291, 297], ["None"], "methods", ["None"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.SentencePieceTokenizer.tokenize": [[302, 339], ["utils.util_helper.convert_to_unicode", "utils.util_helper.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.whitespace_tokenize"], ["def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", "==", "0", ":", "\n", "                        ", "substr", "=", "u'\\u2581'", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocabulary", ".", "vocab_dict", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.CharTokenizer.__init__": [[345, 348], ["tokenizer.Tokenizer.__init__", "tokenization_wp.WordPieceTokenizer"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "self", ".", "wordpiece_tokenizer", "=", "WordPieceTokenizer", "(", "vocab_file", "=", "vocab_file", ",", "params", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.CharTokenizer.tokenize": [[349, 361], ["utils.util_helper.convert_to_unicode", "utils.util_helper.convert_to_unicode.lower().split", "tokenization_wp.CharTokenizer.wordpiece_tokenizer.tokenize", "utils.util_helper.convert_to_unicode.lower", "split_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ".", "lower", "(", ")", ".", "split", "(", "\" \"", ")", ":", "\n", "            ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.CharTokenizer.convert_tokens_to_ids": [[362, 368], ["tokenization_wp.CharTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.CharTokenizer.convert_ids_to_tokens": [[369, 375], ["tokenization_wp.CharTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WordsegTokenizer.__init__": [[380, 386], ["tokenizer.Tokenizer.__init__", "params.get", "sentencepiece.SentencePieceProcessor", "tokenization_wp.WordsegTokenizer.tokenizer.Load", "params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\"\\1\"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "model_file", "=", "params", ".", "get", "(", "\"sentence_piece_model\"", ",", "None", ")", "\n", "self", ".", "tokenizer", "=", "sp", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "tokenizer", ".", "Load", "(", "model_file", ")", "\n", "self", ".", "do_lower_case", "=", "params", ".", "get", "(", "\"do_lower_case\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WordsegTokenizer.tokenize": [[387, 406], ["utils.util_helper.convert_to_unicode", "utils.util_helper.convert_to_unicode.split", "utils.util_helper.convert_to_unicode.lower", "output_tokens.append", "tokenization_wp.WordsegTokenizer.tokenizer.EncodeAsPieces", "output_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        Returns:\n            A list of wordpiece tokens.\n        \"\"\"", "\n", "text", "=", "text", ".", "lower", "(", ")", "if", "self", ".", "do_lower_case", "else", "text", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ".", "split", "(", "self", ".", "split_token", ")", ":", "\n", "            ", "if", "token", "in", "self", ".", "vocab", ":", "\n", "                ", "output_tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "sp_tokens", "=", "self", ".", "tokenizer", ".", "EncodeAsPieces", "(", "token", ")", "\n", "for", "sp_token", "in", "sp_tokens", ":", "\n", "                    ", "if", "sp_token", "in", "self", ".", "vocab", ":", "\n", "                        ", "output_tokens", ".", "append", "(", "sp_token", ")", "\n", "", "", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WordsegTokenizer.convert_tokens_to_ids": [[407, 410], ["tokenization_wp.WordsegTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"convert tokens to ids\"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WordsegTokenizer.convert_ids_to_tokens": [[411, 414], ["tokenization_wp.WordsegTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"convert ids to tokens\"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.SentencepieceTokenizerErnie.__init__": [[419, 426], ["tokenizer.Tokenizer.__init__", "params.get", "sentencepiece.SentencePieceProcessor", "tokenization_wp.SentencepieceTokenizerErnie.tokenizer.Load", "params.get"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "model_file", "=", "params", ".", "get", "(", "\"sentence_piece_model\"", ",", "None", ")", "\n", "self", ".", "tokenizer", "=", "sp", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "tokenizer", ".", "Load", "(", "model_file", ")", "\n", "self", ".", "do_lower_case", "=", "params", ".", "get", "(", "\"do_lower_case\"", ",", "True", ")", "\n", "self", ".", "sp_unk_token", "=", "\"<unk>\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.SentencepieceTokenizerErnie.tokenize": [[427, 448], ["utils.util_helper.convert_to_unicode", "tokenization_wp.SentencepieceTokenizerErnie.tokenizer.EncodeAsPieces", "utils.util_helper.convert_to_unicode.lower", "utils.util_helper.convert_to_unicode.replace", "output_tokens.append", "output_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        Returns:\n            A list of wordpiece tokens.\n        \"\"\"", "\n", "text", "=", "text", ".", "lower", "(", ")", "if", "self", ".", "do_lower_case", "else", "text", "\n", "text", "=", "convert_to_unicode", "(", "text", ".", "replace", "(", "\"\\1\"", ",", "\" \"", ")", ")", "\n", "tokens", "=", "self", ".", "tokenizer", ".", "EncodeAsPieces", "(", "text", ")", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "token", "==", "self", ".", "sp_unk_token", ":", "\n", "                ", "token", "=", "self", ".", "unk_token", "\n", "\n", "", "if", "token", "in", "self", ".", "vocab", ":", "\n", "                ", "output_tokens", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.SentencepieceTokenizerErnie.convert_tokens_to_ids": [[449, 452], ["tokenization_wp.SentencepieceTokenizerErnie.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"convert tokens to ids\"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.SentencepieceTokenizerErnie.convert_ids_to_tokens": [[453, 456], ["tokenization_wp.SentencepieceTokenizerErnie.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"convert ids to tokens\"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WSSPTokenizer.__init__": [[462, 472], ["tokenizer.Tokenizer.__init__", "sentencepiece.SentencePieceProcessor", "params.get", "tokenization_wp.WSSPTokenizer.sp_model.Load", "pickle.load", "pickle.load", "open", "open"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", "=", "None", ")", ":", "\n", "        ", "super", "(", "WSSPTokenizer", ",", "self", ")", ".", "__init__", "(", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", "=", "None", ")", "\n", "self", ".", "sp_model", "=", "sp", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "window_size", "=", "5", "\n", "self", ".", "do_sp", "=", "params", ".", "get", "(", "\"need_sp\"", ",", "1", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "            ", "self", ".", "dict", "=", "pickle", ".", "load", "(", "open", "(", "params", "[", "\"wordseg_dict\"", "]", ",", "'rb'", ")", ",", "encoding", "=", "'utf8'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dict", "=", "pickle", ".", "load", "(", "open", "(", "params", "[", "\"wordseg_dict\"", "]", ",", "'rb'", ")", ")", "\n", "", "self", ".", "sp_model", ".", "Load", "(", "params", "[", "\"sp_model_dir\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WSSPTokenizer.cut": [[473, 492], ["utils.util_helper.convert_to_unicode", "utils.util_helper.clean_text", "len", "six.moves.range", "words.append", "words.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_spm.clean_text"], ["", "def", "cut", "(", "self", ",", "chars", ")", ":", "\n", "        ", "\"\"\"cut\"\"\"", "\n", "chars", "=", "convert_to_unicode", "(", "chars", ")", "\n", "chars", "=", "clean_text", "(", "chars", ")", "\n", "words", "=", "[", "]", "\n", "idx", "=", "0", "\n", "while", "idx", "<", "len", "(", "chars", ")", ":", "\n", "            ", "matched", "=", "False", "\n", "for", "i", "in", "range", "(", "self", ".", "window_size", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "cand", "=", "chars", "[", "idx", ":", "idx", "+", "i", "]", "\n", "if", "cand", "in", "self", ".", "dict", ":", "\n", "                    ", "words", ".", "append", "(", "cand", ")", "\n", "matched", "=", "True", "\n", "break", "\n", "", "", "if", "not", "matched", ":", "\n", "                ", "i", "=", "1", "\n", "words", ".", "append", "(", "chars", "[", "idx", "]", ")", "\n", "", "idx", "+=", "i", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WSSPTokenizer.tokenize": [[493, 504], ["s.lower", "tokenization_wp.WSSPTokenizer.sp_model.EncodeAsPieces", "tokenization_wp.WSSPTokenizer.cut"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.cut"], ["", "def", "tokenize", "(", "self", ",", "sen", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "sen", "=", "[", "s", "for", "s", "in", "self", ".", "cut", "(", "sen", ")", "if", "s", "!=", "' '", "]", "\n", "sen", "=", "[", "s", ".", "lower", "(", ")", "for", "s", "in", "sen", "]", "\n", "if", "self", ".", "do_sp", ":", "\n", "            ", "sen", "=", "' '", ".", "join", "(", "sen", ")", "\n", "sen", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "sen", ")", "\n", "", "return", "sen", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WSSPTokenizer.convert_tokens_to_ids": [[505, 511], ["tokenization_wp.WSSPTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_wp.WSSPTokenizer.convert_ids_to_tokens": [[512, 518], ["tokenization_wp.WSSPTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.custom_tokenizer.CustomTokenizer.__init__": [[14, 21], ["tokenizer.Tokenizer.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab_file: \u8bcd\u8868\u6587\u4ef6\u8def\u5f84\n        :param split_char: \u660e\u6587\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\n        \"\"\"", "\n", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "self", ".", "split_char", "=", "split_char", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.custom_tokenizer.CustomTokenizer.tokenize": [[22, 30], ["utils.util_helper.convert_to_unicode", "utils.util_helper.convert_to_unicode.split"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "split_tokens", "=", "text", ".", "split", "(", "self", ".", "split_char", ")", "\n", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.custom_tokenizer.CustomTokenizer.convert_tokens_to_ids": [[31, 37], ["custom_tokenizer.CustomTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.custom_tokenizer.CustomTokenizer.convert_ids_to_tokens": [[38, 44], ["custom_tokenizer.CustomTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.__init__": [[28, 45], ["doie_basic_tokenizer.DoieBasicTokenizer.__init__", "sentencepiece.SentencePieceProcessor", "doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.sp_model.Load", "pickle.load", "pickle.load", "open", "open"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_file", ",", "\n", "need_sp", "=", "True", ",", "\n", "wordseg_dict", "=", "None", ",", "\n", "sp_model_dir", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "DoieBasicTokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "sp_model", "=", "sp", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "window_size", "=", "5", "\n", "self", ".", "do_sp", "=", "need_sp", "\n", "if", "six", ".", "PY3", ":", "\n", "            ", "self", ".", "dict", "=", "pickle", ".", "load", "(", "open", "(", "wordseg_dict", ",", "'rb'", ")", ",", "encoding", "=", "'utf8'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dict", "=", "pickle", ".", "load", "(", "open", "(", "wordseg_dict", ",", "'rb'", ")", ")", "\n", "", "self", ".", "sp_model", ".", "Load", "(", "sp_model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.cut": [[46, 68], ["len", "doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.is_whitespace", "words.append", "range", "words.append", "words.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_basic_tokenizer.DoieBasicTokenizer.is_whitespace"], ["", "def", "cut", "(", "self", ",", "chars", ")", ":", "\n", "        ", "\"\"\"cut\"\"\"", "\n", "words", "=", "[", "]", "\n", "idx", "=", "0", "\n", "while", "idx", "<", "len", "(", "chars", ")", ":", "\n", "            ", "matched", "=", "False", "\n", "if", "self", ".", "is_whitespace", "(", "chars", "[", "idx", "]", ")", "and", "self", ".", "keep_whitespace", ":", "\n", "                ", "i", "=", "1", "\n", "matched", "=", "True", "\n", "words", ".", "append", "(", "chars", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "window_size", ",", "0", ",", "-", "1", ")", ":", "\n", "                    ", "cand", "=", "chars", "[", "idx", ":", "idx", "+", "i", "]", "\n", "if", "cand", "in", "self", ".", "dict", ":", "\n", "                        ", "words", ".", "append", "(", "cand", ")", "\n", "matched", "=", "True", "\n", "break", "\n", "", "", "", "if", "not", "matched", ":", "\n", "                ", "i", "=", "1", "\n", "words", ".", "append", "(", "chars", "[", "idx", "]", ")", "\n", "", "idx", "+=", "i", "\n", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.tokenize": [[69, 109], ["doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.cut", "enumerate", "enumerate", "enumerate", "zip", "doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.sp_model.EncodeAsPieces", "token.strip", "tokens.append", "orig_tokens.append", "offsets.append", "zip", "s.lower", "len", "doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.token_cls", "ex_tokens.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.doie_ernie_tiny_tokenizer.DoieErnieTinyTokenizer.cut"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "extra_info", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "# print(\"-----\")", "\n", "# print(text.encode(\"utf8\"))", "\n", "tokens", ",", "orig_tokens", ",", "offsets", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# text = [s for s in self.cut(text) if s != ' ']", "\n", "text", "=", "self", ".", "cut", "(", "text", ")", "\n", "if", "self", ".", "do_lower_case", ":", "\n", "            ", "text", "=", "[", "s", ".", "lower", "(", ")", "for", "s", "in", "text", "]", "\n", "", "for", "i", ",", "t", "in", "enumerate", "(", "text", ")", ":", "\n", "            ", "if", "t", "==", "\" \"", ":", "\n", "                ", "text", "[", "i", "]", "=", "u\"\u662f\"", "\n", "", "", "if", "self", ".", "do_sp", ":", "\n", "            ", "text", "=", "' '", ".", "join", "(", "text", ")", "\n", "text", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "for", "i", ",", "t", "in", "enumerate", "(", "text", ")", ":", "\n", "            ", "if", "t", "==", "u\"\u2581\u662f\"", ":", "\n", "                ", "text", "[", "i", "]", "=", "self", ".", "whitespace_token", "\n", "", "", "offset", "=", "0", "\n", "for", "index", ",", "token", "in", "enumerate", "(", "text", ")", ":", "\n", "            ", "ori_token", "=", "token", ".", "strip", "(", "u\"\u2581\"", ")", "\n", "tokens", ".", "append", "(", "token", ")", "\n", "orig_tokens", ".", "append", "(", "ori_token", ")", "\n", "offsets", ".", "append", "(", "offset", ")", "\n", "if", "ori_token", "==", "self", ".", "whitespace_token", ":", "\n", "                ", "offset", "+=", "1", "\n", "", "else", ":", "\n", "                ", "offset", "+=", "len", "(", "ori_token", ")", "\n", "\n", "", "", "if", "extra_info", ":", "\n", "            ", "ex_tokens", "=", "[", "]", "\n", "for", "token", ",", "orig_token", ",", "offset", "in", "zip", "(", "tokens", ",", "orig_tokens", ",", "offsets", ")", ":", "\n", "                ", "ex_token", "=", "self", ".", "token_cls", "(", "token", "=", "token", ",", "orig_token", "=", "orig_token", ",", "offset", "=", "offset", ")", "\n", "ex_tokens", ".", "append", "(", "ex_token", ")", "\n", "", "return", "ex_tokens", "\n", "\n", "", "return", "zip", "(", "tokens", ",", "orig_tokens", ",", "offsets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.__init__": [[15, 29], ["tokenizer.Tokenizer.__init__", "SegWord", "ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.wordseg_inst.initialize", "logging.error", "exit", "logging.debug"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab_file: \u8bcd\u8868\u6587\u4ef6\u8def\u5f84\n        :param split_char: \u660e\u6587\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\n        \"\"\"", "\n", "super", "(", "ErnieSimSlimTokenizer", ",", "self", ")", ".", "__init__", "(", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "from", ".", ".", "erniesim_slim_wordseg", ".", "wordseg_client", "import", "SegWord", "\n", "self", ".", "wordseg_inst", "=", "SegWord", "(", ")", "\n", "seg_stat", "=", "self", ".", "wordseg_inst", ".", "initialize", "(", ")", "\n", "if", "not", "seg_stat", ":", "\n", "            ", "logging", ".", "error", "(", "\"wordseg init error\"", ")", "\n", "exit", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "debug", "(", "\"wordseg init succeed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.bigram_seg": [[30, 46], ["chr", "text.split", "xrange", "bigram_list.append", "len", "len", "len", "cols[].find", "cols[].find"], "methods", ["None"], ["", "", "def", "bigram_seg", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        cal freq\n        \"\"\"", "\n", "delim", "=", "chr", "(", "1", ")", "\n", "bigram_list", "=", "[", "]", "\n", "cols", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "if", "len", "(", "cols", ")", "==", "1", "or", "len", "(", "cols", ")", ">", "1024", ":", "\n", "            ", "return", "bigram_list", "\n", "\n", "", "for", "i", "in", "xrange", "(", "0", ",", "len", "(", "cols", ")", "-", "1", ")", ":", "\n", "            ", "bigram", "=", "cols", "[", "i", "]", "+", "delim", "+", "cols", "[", "i", "+", "1", "]", "\n", "if", "cols", "[", "i", "]", ".", "find", "(", "delim", ")", "!=", "-", "1", "or", "cols", "[", "i", "+", "1", "]", ".", "find", "(", "delim", ")", "!=", "-", "1", ":", "\n", "                ", "continue", "\n", "", "bigram_list", ".", "append", "(", "bigram", ")", "\n", "", "return", "bigram_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.tokenize": [[47, 77], ["logging.debug", "utils.util_helper.convert_to_unicode().encode", "ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.wordseg_inst.segword", "ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.wordseg_inst.segword", "ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.bigram_seg", "logging.debug", "token.decode", "utils.util_helper.convert_to_unicode", "tmp_list.append", "tmp_list.append"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_gen.ErnieGenModel.encode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.bigram_seg", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "logging", ".", "debug", "(", "\"origin text:{}\"", ".", "format", "(", "text", ")", ")", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", ".", "encode", "(", "'gbk'", ")", "\n", "seg_basic", "=", "self", ".", "wordseg_inst", ".", "segword", "(", "text", ",", "'basic'", ")", "\n", "seg_comp", "=", "self", ".", "wordseg_inst", ".", "segword", "(", "text", ",", "'comp'", ")", "\n", "\n", "seg_list", "=", "[", "]", "\n", "\n", "tmp_list", "=", "[", "]", "\n", "for", "token", "in", "seg_basic", ":", "\n", "            ", "if", "token", "not", "in", "tmp_list", ":", "\n", "                ", "tmp_list", ".", "append", "(", "token", ")", "\n", "", "", "seg_list", "+=", "tmp_list", "\n", "\n", "tmp_list", "=", "[", "]", "\n", "for", "token", "in", "seg_comp", ":", "\n", "            ", "if", "token", "not", "in", "tmp_list", ":", "\n", "                ", "tmp_list", ".", "append", "(", "token", ")", "\n", "", "", "seg_list", "+=", "tmp_list", "\n", "\n", "seg_list", "+=", "self", ".", "bigram_seg", "(", "\" \"", ".", "join", "(", "seg_basic", ")", ")", "\n", "unicode_seg", "=", "[", "token", ".", "decode", "(", "'gbk'", ")", "for", "token", "in", "seg_list", "]", "\n", "logging", ".", "debug", "(", "\"tokenzied text:{}\"", ".", "format", "(", "\" \"", ".", "join", "(", "unicode_seg", ")", ")", ")", "\n", "unicode_seg", "=", "[", "token", "for", "token", "in", "unicode_seg", "if", "token", "in", "self", ".", "vocabulary", ".", "vocab_dict", "]", "\n", "\n", "return", "unicode_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.convert_tokens_to_ids": [[78, 84], ["ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.convert_ids_to_tokens": [[85, 91], ["ernie_sim_slim_tokenizer.ErnieSimSlimTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.__init__": [[16, 25], ["tokenizer.Tokenizer.__init__", "LAC"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", "=", "\" \"", ",", "unk_token", "=", "\"[UNK]\"", ",", "params", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab_file: \u8bcd\u8868\u6587\u4ef6\u8def\u5f84\n        :param split_char: \u660e\u6587\u5206\u9694\u7b26\uff0c\u9ed8\u8ba4\u662f\u7a7a\u683c\n        \"\"\"", "\n", "Tokenizer", ".", "__init__", "(", "self", ",", "vocab_file", ",", "split_char", ",", "unk_token", ",", "params", ")", "\n", "self", ".", "split_char", "=", "split_char", "\n", "from", "LAC", "import", "LAC", "\n", "self", ".", "lac", "=", "LAC", "(", "mode", "=", "\"seg\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize": [[26, 40], ["utils.util_helper.convert_to_unicode", "lac_tokenizer.LACTokenizer.lac.run", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data_set_reader.base_dataset_reader_ernie_gen.BaseDataSetReaderErnieGen.run"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        :param text:\n        :return:\n        \"\"\"", "\n", "text", "=", "convert_to_unicode", "(", "text", ")", "\n", "if", "len", "(", "text", ")", "==", "0", ":", "\n", "            ", "return", "text", "\n", "\n", "", "split_tokens", "=", "self", ".", "lac", ".", "run", "(", "text", ")", "\n", "if", "six", ".", "PY2", ":", "\n", "            ", "split_tokens", "=", "[", "w", "[", "0", "]", "for", "w", "in", "split_tokens", "]", "\n", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids": [[41, 47], ["lac_tokenizer.LACTokenizer.vocabulary.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"\n        :param tokens:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens": [[48, 54], ["lac_tokenizer.LACTokenizer.vocabulary.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_ids_to_tokens"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        :param ids:\n        :return:\n        \"\"\"", "\n", "return", "self", ".", "vocabulary", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader.ErnieTextFieldReader.__init__": [[22, 37], ["base_field_reader.BaseFieldReader.__init__", "common.register.RegisterSet.tokenizer.__getitem__", "ernie_text_field_reader.ErnieTextFieldReader.field_config.tokenizer_info.__contains__", "common.register.RegisterSet.tokenizer.__getitem__."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ":", "\n", "            ", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"type\"", "]", ")", "\n", "params", "=", "None", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ".", "__contains__", "(", "\"params\"", ")", ":", "\n", "                ", "params", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"params\"", "]", "\n", "", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ",", "\n", "split_char", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"split_char\"", "]", ",", "\n", "unk_token", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"unk_token\"", "]", ",", "\n", "params", "=", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader.ErnieTextFieldReader.init_reader": [[44, 103], ["shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "TypeError", "range", "len", "data_list.append", "paddle.static.data"], "methods", ["None"], ["", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "\n", "shape", "=", "[", "]", "\n", "types", "=", "[", "]", "\n", "levels", "=", "[", "]", "\n", "feed_names", "=", "[", "]", "\n", "data_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "STRING", ":", "\n", "            ", "\"\"\"src_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"ErnieTextFieldReader's data_type must string\"", ")", "\n", "\n", "", "\"\"\"sentence_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SENTENCE_IDS", ")", "\n", "\n", "\"\"\"position_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "POS_IDS", ")", "\n", "\n", "\"\"\"mask_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'float32'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "MASK_IDS", ")", "\n", "\n", "\"\"\"task_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "TASK_IDS", ")", "\n", "\n", "\"\"\"seq_lens\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SEQ_LENS", ")", "\n", "\n", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "feed_names", ")", ")", ":", "\n", "                ", "data_list", ".", "append", "(", "paddle", ".", "static", ".", "data", "(", "name", "=", "feed_names", "[", "i", "]", ",", "shape", "=", "shape", "[", "i", "]", ",", "\n", "dtype", "=", "types", "[", "i", "]", ",", "lod_level", "=", "levels", "[", "i", "]", ")", ")", "\n", "", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader.ErnieTextFieldReader.convert_texts_to_ids": [[104, 163], ["util_helper.pad_batch_data", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "src_ids.append", "list", "util_helper.get_random_pos_id.append", "task_ids.append", "sentence_ids.append", "util_helper.get_random_pos_id", "ernie_text_field_reader.ErnieTextFieldReader.tokenizer.tokenize", "tokens.append", "tokens.append", "ernie_text_field_reader.ErnieTextFieldReader.tokenizer.convert_tokens_to_ids", "isinstance", "utils.util_helper.truncation_words.insert", "utils.util_helper.truncation_words.append", "range", "len", "len", "len", "utils.util_helper.truncation_words", "tokens.append", "text.split.split.split", "int", "len", "utils.util_helper.truncation_words", "ernie_text_field_reader.ErnieTextFieldReader.tokenizer.covert_token_to_id", "ernie_text_field_reader.ErnieTextFieldReader.tokenizer.covert_token_to_id", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.get_random_pos_id", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ",", "use_random_pos", "=", "False", ",", "max_pos_id", "=", "2048", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "position_ids", "=", "[", "]", "\n", "task_ids", "=", "[", "]", "\n", "sentence_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "if", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "tokens_text", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "# \u52a0\u4e0a\u622a\u65ad\u7b56\u7565", "\n", "if", "len", "(", "tokens_text", ")", ">", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ":", "\n", "                    ", "tokens_text", "=", "truncation_words", "(", "tokens_text", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ",", "\n", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "tokens", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "for", "token", "in", "tokens_text", ":", "\n", "                    ", "tokens", ".", "append", "(", "token", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "                    ", "text", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "", "src_id", "=", "[", "int", "(", "i", ")", "for", "i", "in", "text", "]", "\n", "if", "len", "(", "src_id", ")", ">", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ":", "\n", "                    ", "src_id", "=", "truncation_words", "(", "src_id", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ",", "\n", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "src_id", ".", "insert", "(", "0", ",", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "\"[CLS]\"", ")", ")", "\n", "src_id", ".", "append", "(", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "\"[SEP]\"", ")", ")", "\n", "\n", "", "src_ids", ".", "append", "(", "src_id", ")", "\n", "pos_id", "=", "list", "(", "range", "(", "len", "(", "src_id", ")", ")", ")", "\n", "task_id", "=", "[", "0", "]", "*", "len", "(", "src_id", ")", "\n", "sentence_id", "=", "[", "0", "]", "*", "len", "(", "src_id", ")", "\n", "position_ids", ".", "append", "(", "pos_id", ")", "\n", "task_ids", ".", "append", "(", "task_id", ")", "\n", "sentence_ids", ".", "append", "(", "sentence_id", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "if", "use_random_pos", ":", "\n", "            ", "position_ids", "=", "get_random_pos_id", "(", "position_ids", ",", "max_pos_id", ")", "\n", "", "padded_ids", ",", "input_mask", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "return_input_mask", "=", "True", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "sent_ids_batch", "=", "pad_batch_data", "(", "sentence_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "pos_ids_batch", "=", "pad_batch_data", "(", "position_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "task_ids_batch", "=", "pad_batch_data", "(", "task_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "# append src_ids", "\n", "return_list", ".", "append", "(", "sent_ids_batch", ")", "# append sent_ids", "\n", "return_list", ".", "append", "(", "pos_ids_batch", ")", "# append pos_ids", "\n", "return_list", ".", "append", "(", "input_mask", ")", "# append mask", "\n", "return_list", ".", "append", "(", "task_ids_batch", ")", "# append task_ids", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "# append seq_lens", "\n", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader.ErnieTextFieldReader.structure_fields_dict": [[164, 189], ["ernie_text_field_reader.ErnieTextFieldReader.token_embedding.get_token_embedding"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.get_token_embedding"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "=", "fields_id", "[", "start_index", "+", "1", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "POS_IDS", "]", "=", "fields_id", "[", "start_index", "+", "2", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "MASK_IDS", "]", "=", "fields_id", "[", "start_index", "+", "3", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "TASK_IDS", "]", "=", "fields_id", "[", "start_index", "+", "4", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "=", "fields_id", "[", "start_index", "+", "5", "]", "\n", "\n", "record_emb_dict", "=", "None", "\n", "if", "need_emb", "and", "self", ".", "token_embedding", ":", "\n", "            ", "record_emb_dict", "=", "self", ".", "token_embedding", ".", "get_token_embedding", "(", "record_id_dict", ")", "\n", "\n", "", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "record_emb_dict", "\n", "\n", "return", "record_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader.ErnieTextFieldReader.get_field_length": [[190, 195], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "FieldLength", ".", "ERNIE_TEXT_FIELD", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.base_field_reader.BaseFieldReader.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "self", ".", "field_config", "=", "field_config", "\n", "self", ".", "tokenizer", "=", "None", "# \u7528\u6765\u5206\u8bcd\uff0c\u9700\u8981\u5404\u4e2a\u5b50\u7c7b\u5b9e\u73b0", "\n", "self", ".", "token_embedding", "=", "None", "# \u7528\u6765\u751f\u6210embedding\u5411\u91cf\uff0c\u9700\u8981\u5404\u4e2a\u5b50\u7c7b\u5b9e\u73b0", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.base_field_reader.BaseFieldReader.init_reader": [[18, 25], ["None"], "methods", ["None"], ["", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.base_field_reader.BaseFieldReader.convert_texts_to_ids": [[26, 32], ["None"], "methods", ["None"], ["", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\" \u660e\u6587\u5e8f\u5217\u5316\n        :param:batch_text\n        :return: id_list\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.base_field_reader.BaseFieldReader.get_field_length": [[33, 38], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.base_field_reader.BaseFieldReader.structure_fields_dict": [[39, 48], ["None"], "methods", ["None"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.__init__": [[21, 36], ["base_field_reader.BaseFieldReader.__init__", "common.register.RegisterSet.tokenizer.__getitem__", "ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.field_config.tokenizer_info.__contains__", "common.register.RegisterSet.tokenizer.__getitem__."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ":", "\n", "            ", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"type\"", "]", ")", "\n", "params", "=", "None", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ".", "__contains__", "(", "\"params\"", ")", ":", "\n", "                ", "params", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"params\"", "]", "\n", "", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ",", "\n", "split_char", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"split_char\"", "]", ",", "\n", "unk_token", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"unk_token\"", "]", ",", "\n", "params", "=", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.init_reader": [[43, 96], ["shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "TypeError", "range", "len", "data_list.append", "paddle.static.data"], "methods", ["None"], ["", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "shape", "=", "[", "]", "\n", "types", "=", "[", "]", "\n", "levels", "=", "[", "]", "\n", "feed_names", "=", "[", "]", "\n", "data_list", "=", "[", "]", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "STRING", ":", "\n", "            ", "\"\"\"src_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"ErnieTextFieldReader's data_type must string\"", ")", "\n", "\n", "", "\"\"\"sentence_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SENTENCE_IDS", ")", "\n", "\"\"\"position_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "POS_IDS", ")", "\n", "\"\"\"mask_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'float32'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "MASK_IDS", ")", "\n", "\"\"\"task_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "TASK_IDS", ")", "\n", "\"\"\"seq_lens\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SEQ_LENS", ")", "\n", "\n", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "feed_names", ")", ")", ":", "\n", "                ", "data_list", ".", "append", "(", "paddle", ".", "static", ".", "data", "(", "name", "=", "feed_names", "[", "i", "]", ",", "shape", "=", "shape", "[", "i", "]", ",", "\n", "dtype", "=", "types", "[", "i", "]", ",", "lod_level", "=", "levels", "[", "i", "]", ")", ")", "\n", "", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.convert_texts_to_ids": [[97, 168], ["util_helper.pad_batch_data", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "src_ids.append", "list", "position_ids.append", "task_ids.append", "sentence_ids.append", "ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.tokenizer.tokenize", "tokens.append", "tokens.append", "ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.tokenizer.convert_tokens_to_ids", "isinstance", "utils.util_helper.truncation_words.append", "utils.util_helper.truncation_words.append", "range", "len", "len", "len", "utils.util_helper.truncation_words", "tokens.append", "text.split", "int", "len", "utils.util_helper.truncation_words", "ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.tokenizer.covert_token_to_id", "ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.tokenizer.covert_token_to_id", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "position_ids", "=", "[", "]", "\n", "task_ids", "=", "[", "]", "\n", "sentence_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "if", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "tokens_text", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "# \u52a0\u4e0a\u622a\u65ad\u7b56\u7565", "\n", "if", "len", "(", "tokens_text", ")", ">", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ":", "\n", "                    ", "tokens_text", "=", "truncation_words", "(", "tokens_text", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ",", "\n", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "tokens", "=", "[", "]", "\n", "#tokens.append(\"[CLS]\")", "\n", "for", "token", "in", "tokens_text", ":", "\n", "                    ", "tokens", ".", "append", "(", "token", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "                    ", "src_id", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "", "src_id", "=", "[", "int", "(", "i", ")", "for", "i", "in", "text", "]", "\n", "if", "len", "(", "src_id", ")", ">", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ":", "\n", "                    ", "src_id", "=", "truncation_words", "(", "src_id", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ",", "\n", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "#src_id.insert(0, self.tokenizer.covert_token_to_id(\"[CLS]\"))", "\n", "", "src_id", ".", "append", "(", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "\"[SEP]\"", ")", ")", "\n", "src_id", ".", "append", "(", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "\"[CLS]\"", ")", ")", "\n", "\n", "", "src_ids", ".", "append", "(", "src_id", ")", "\n", "pos_id", "=", "list", "(", "range", "(", "len", "(", "src_id", ")", ")", ")", "\n", "task_id", "=", "[", "0", "]", "*", "len", "(", "src_id", ")", "\n", "sentence_id", "=", "[", "0", "]", "*", "len", "(", "src_id", ")", "\n", "position_ids", ".", "append", "(", "pos_id", ")", "\n", "task_ids", ".", "append", "(", "task_id", ")", "\n", "sentence_ids", ".", "append", "(", "sentence_id", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "padded_ids", ",", "input_mask", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "final_cls", "=", "True", ",", "\n", "force_max_len", "=", "self", ".", "field_config", ".", "max_seq_len", ",", "\n", "return_input_mask", "=", "True", ",", "\n", "return_seq_lens", "=", "True", ",", "\n", "force_3d", "=", "True", ")", "\n", "sent_ids_batch", "=", "pad_batch_data", "(", "sentence_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "force_max_len", "=", "self", ".", "field_config", ".", "max_seq_len", ",", "\n", "force_3d", "=", "True", ")", "\n", "pos_ids_batch", "=", "pad_batch_data", "(", "position_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "force_max_len", "=", "self", ".", "field_config", ".", "max_seq_len", ",", "\n", "force_3d", "=", "True", ")", "\n", "task_ids_batch", "=", "pad_batch_data", "(", "task_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "force_max_len", "=", "self", ".", "field_config", ".", "max_seq_len", ",", "\n", "force_3d", "=", "True", ")", "\n", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "# append src_ids", "\n", "return_list", ".", "append", "(", "sent_ids_batch", ")", "# append sent_ids", "\n", "return_list", ".", "append", "(", "pos_ids_batch", ")", "# append pos_ids", "\n", "return_list", ".", "append", "(", "input_mask", ")", "# append mask", "\n", "return_list", ".", "append", "(", "task_ids_batch", ")", "# append task_ids", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "# append seq_lens", "\n", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.structure_fields_dict": [[169, 194], ["ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.token_embedding.get_token_embedding"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.get_token_embedding"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "=", "fields_id", "[", "start_index", "+", "1", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "POS_IDS", "]", "=", "fields_id", "[", "start_index", "+", "2", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "MASK_IDS", "]", "=", "fields_id", "[", "start_index", "+", "3", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "TASK_IDS", "]", "=", "fields_id", "[", "start_index", "+", "4", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "=", "fields_id", "[", "start_index", "+", "5", "]", "\n", "\n", "record_emb_dict", "=", "None", "\n", "if", "need_emb", "and", "self", ".", "token_embedding", ":", "\n", "            ", "record_emb_dict", "=", "self", ".", "token_embedding", ".", "get_token_embedding", "(", "record_id_dict", ")", "\n", "\n", "", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "record_emb_dict", "\n", "\n", "return", "record_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader_for_doc.ErnieTextFieldReaderForErnieDoc.get_field_length": [[195, 200], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "FieldLength", ".", "ERNIE_TEXT_FIELD", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_array_field_reader.ScalarArrayFieldReader.__init__": [[22, 29], ["base_field_reader.BaseFieldReader.__init__", "tokenizer.custom_tokenizer.CustomTokenizer"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "if", "field_config", ".", "vocab_path", "and", "field_config", ".", "need_convert", ":", "\n", "            ", "self", ".", "tokenizer", "=", "CustomTokenizer", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_array_field_reader.ScalarArrayFieldReader.init_reader": [[30, 59], ["types.append", "range", "TypeError", "len", "data_list.append", "paddle.fluid.layers.data"], "methods", ["None"], ["", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "shape", "=", "[", "[", "-", "1", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "1", "]", ",", "[", "-", "1", "]", "]", "\n", "levels", "=", "[", "0", ",", "0", "]", "\n", "feed_names", "=", "[", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", ",", "\n", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SEQ_LENS", "]", "\n", "data_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "INT", ":", "\n", "            ", "types", "=", "[", "'int64'", "]", "\n", "\n", "", "elif", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "FLOAT", ":", "\n", "            ", "types", "=", "[", "'float32'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"ScalarArrayFieldReader's data_type must be int or float\"", ")", "\n", "", "\"\"\"seq_length\"\"\"", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "\n", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "feed_names", ")", ")", ":", "\n", "                ", "data_list", ".", "append", "(", "fluid", ".", "layers", ".", "data", "(", "name", "=", "feed_names", "[", "i", "]", ",", "shape", "=", "shape", "[", "i", "]", ",", "\n", "dtype", "=", "types", "[", "i", "]", ",", "lod_level", "=", "levels", "[", "i", "]", ")", ")", "\n", "", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_array_field_reader.ScalarArrayFieldReader.convert_texts_to_ids": [[60, 87], ["util_helper.pad_batch_data", "return_list.append", "return_list.append", "src_ids.append", "scalar_array_field_reader.ScalarArrayFieldReader.tokenizer.tokenize", "scalar_array_field_reader.ScalarArrayFieldReader.tokenizer.convert_tokens_to_ids", "text.split", "len", "utils.util_helper.truncation_words"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\" \u660e\u6587\u5e8f\u5217\u5316\n        :return: id_list\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "if", "self", ".", "tokenizer", "and", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "", "else", ":", "\n", "                ", "src_id", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "\n", "# \u52a0\u4e0a\u622a\u65ad\u7b56\u7565", "\n", "", "if", "len", "(", "src_id", ")", ">", "self", ".", "field_config", ".", "max_seq_len", ":", "\n", "                ", "src_id", "=", "truncation_words", "(", "src_id", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "src_ids", ".", "append", "(", "src_id", ")", "\n", "\n", "", "data_type", "=", "\"int64\"", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "INT", "else", "\"float32\"", "\n", "\n", "padded_ids", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "insts_data_type", "=", "data_type", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "return_input_mask", "=", "False", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "return_list", "=", "[", "]", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_array_field_reader.ScalarArrayFieldReader.get_field_length": [[88, 93], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "FieldLength", ".", "ARRAY_SCALAR_FIELD", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_array_field_reader.ScalarArrayFieldReader.structure_fields_dict": [[94, 110], ["None"], "methods", ["None"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "=", "fields_id", "[", "start_index", "+", "1", "]", "\n", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "None", "\n", "\n", "return", "record_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.text_field_reader.TextFieldReader.__init__": [[20, 35], ["base_field_reader.BaseFieldReader.__init__", "common.register.RegisterSet.tokenizer.__getitem__", "text_field_reader.TextFieldReader.field_config.tokenizer_info.__contains__", "common.register.RegisterSet.tokenizer.__getitem__."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ":", "\n", "            ", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"type\"", "]", ")", "\n", "params", "=", "None", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ".", "__contains__", "(", "\"params\"", ")", ":", "\n", "                ", "params", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"params\"", "]", "\n", "", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ",", "\n", "split_char", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"split_char\"", "]", ",", "\n", "unk_token", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"unk_token\"", "]", ",", "\n", "params", "=", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.text_field_reader.TextFieldReader.init_reader": [[36, 70], ["shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "TypeError", "range", "len", "data_list.append", "paddle.static.data"], "methods", ["None"], ["", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "shape", "=", "[", "]", "\n", "types", "=", "[", "]", "\n", "levels", "=", "[", "]", "\n", "feed_names", "=", "[", "]", "\n", "data_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "STRING", ":", "\n", "            ", "\"\"\"src_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"TextFieldReader's data_type must be string\"", ")", "\n", "\n", "", "\"\"\"seq_length\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SEQ_LENS", ")", "\n", "\n", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "feed_names", ")", ")", ":", "\n", "                ", "data_list", ".", "append", "(", "paddle", ".", "static", ".", "data", "(", "name", "=", "feed_names", "[", "i", "]", ",", "shape", "=", "shape", "[", "i", "]", ",", "\n", "dtype", "=", "types", "[", "i", "]", ",", "lod_level", "=", "levels", "[", "i", "]", ")", ")", "\n", "", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.text_field_reader.TextFieldReader.convert_texts_to_ids": [[71, 98], ["util_helper.pad_batch_data", "return_list.append", "return_list.append", "src_ids.append", "text_field_reader.TextFieldReader.tokenizer.tokenize", "text_field_reader.TextFieldReader.tokenizer.convert_tokens_to_ids", "text.split", "len", "utils.util_helper.truncation_words"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "if", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "", "else", ":", "\n", "                ", "src_id", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "\n", "# \u52a0\u4e0a\u622a\u65ad\u7b56\u7565", "\n", "", "if", "len", "(", "src_id", ")", ">", "self", ".", "field_config", ".", "max_seq_len", ":", "\n", "                ", "src_id", "=", "truncation_words", "(", "src_id", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "src_ids", ".", "append", "(", "src_id", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "padded_ids", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "return_input_mask", "=", "False", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "\n", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.text_field_reader.TextFieldReader.structure_fields_dict": [[99, 114], ["None"], "methods", ["None"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "=", "fields_id", "[", "start_index", "+", "1", "]", "\n", "\n", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "None", "\n", "\n", "return", "record_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.text_field_reader.TextFieldReader.get_field_length": [[115, 120], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "FieldLength", ".", "BASIC_TEXT_FIELD", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_classification_field_reader.ErnieClassificationFieldReader.__init__": [[21, 37], ["base_field_reader.BaseFieldReader.__init__", "common.register.RegisterSet.tokenizer.__getitem__", "ernie_classification_field_reader.ErnieClassificationFieldReader.field_config.tokenizer_info.__contains__", "common.register.RegisterSet.tokenizer.__getitem__."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "# self.tokenizer = FullTokenizer(vocab_file=self.field_config.vocab_path)", "\n", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ":", "\n", "            ", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"type\"", "]", ")", "\n", "params", "=", "None", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ".", "__contains__", "(", "\"params\"", ")", ":", "\n", "                ", "params", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"params\"", "]", "\n", "", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ",", "\n", "split_char", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"split_char\"", "]", ",", "\n", "unk_token", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"unk_token\"", "]", ",", "\n", "params", "=", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_classification_field_reader.ErnieClassificationFieldReader.init_reader": [[39, 97], ["shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "TypeError", "range", "len", "data_list.append", "paddle.static.data"], "methods", ["None"], ["", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\"\u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type: dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "shape", "=", "[", "]", "\n", "types", "=", "[", "]", "\n", "levels", "=", "[", "]", "\n", "feed_names", "=", "[", "]", "\n", "data_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "STRING", ":", "\n", "            ", "\"\"\"src_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"ErnieClassificationFieldReader's data_type must be string\"", ")", "\n", "\n", "", "\"\"\"sentence_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SENTENCE_IDS", ")", "\n", "\n", "\"\"\"position_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "POS_IDS", ")", "\n", "\n", "\"\"\"mask_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'float32'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "MASK_IDS", ")", "\n", "\n", "\"\"\"task_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "TASK_IDS", ")", "\n", "\n", "\"\"\"seq_lens\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SEQ_LENS", ")", "\n", "\n", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "feed_names", ")", ")", ":", "\n", "                ", "data_list", ".", "append", "(", "paddle", ".", "static", ".", "data", "(", "name", "=", "feed_names", "[", "i", "]", ",", "shape", "=", "shape", "[", "i", "]", ",", "\n", "dtype", "=", "types", "[", "i", "]", ",", "lod_level", "=", "levels", "[", "i", "]", ")", ")", "\n", "", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_classification_field_reader.ErnieClassificationFieldReader.convert_texts_to_ids": [[98, 163], ["zip", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "len", "len", "src_ids.append", "list", "position_ids.append", "task_ids.append", "sentence_ids.append", "ernie_classification_field_reader.ErnieClassificationFieldReader.tokenizer.tokenize", "ernie_classification_field_reader.ErnieClassificationFieldReader.tokenizer.tokenize", "utils.util_helper.truncate_seq_pair", "tokens.append", "tokens.append", "ernie_classification_field_reader.ErnieClassificationFieldReader.tokenizer.convert_tokens_to_ids", "text_a.split", "text_b.split", "utils.util_helper.truncate_seq_pair", "range", "len", "len", "len", "tokens.append", "len", "len", "len", "utils.util_helper.truncation_words", "utils.util_helper.truncation_words.insert", "utils.util_helper.truncation_words.append", "len", "ernie_classification_field_reader.ErnieClassificationFieldReader.tokenizer.covert_token_to_id", "ernie_classification_field_reader.ErnieClassificationFieldReader.tokenizer.covert_token_to_id"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncate_seq_pair", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncate_seq_pair", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "position_ids", "=", "[", "]", "\n", "task_ids", "=", "[", "]", "\n", "sentence_ids", "=", "[", "]", "\n", "batch_text_a", ",", "batch_text_b", "=", "batch_text", "\n", "assert", "len", "(", "batch_text_a", ")", "==", "len", "(", "batch_text_b", ")", "\n", "\n", "for", "text_a", ",", "text_b", "in", "zip", "(", "batch_text_a", ",", "batch_text_b", ")", ":", "\n", "            ", "if", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "tokens_text_a", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text_a", ")", "\n", "tokens_text_b", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text_b", ")", "\n", "# \u52a0\u4e0a\u622a\u65ad\u7b56\u7565", "\n", "truncate_seq_pair", "(", "tokens_text_a", ",", "tokens_text_b", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "3", ")", "\n", "text_a_len", ",", "text_b_len", "=", "len", "(", "tokens_text_a", ")", ",", "len", "(", "tokens_text_b", ")", "\n", "tokens_text", "=", "tokens_text_a", "+", "[", "\"[SEP]\"", "]", "+", "tokens_text_b", "\n", "tokens", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "for", "token", "in", "tokens_text", ":", "\n", "                    ", "tokens", ".", "append", "(", "token", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "", "else", ":", "\n", "                ", "src_a_id", "=", "text_a", ".", "split", "(", "\" \"", ")", "\n", "src_b_id", "=", "text_b", ".", "split", "(", "\" \"", ")", "\n", "truncate_seq_pair", "(", "src_a_id", ",", "src_b_id", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "3", ")", "\n", "text_a_len", ",", "text_b_len", "=", "len", "(", "src_a_id", ")", ",", "len", "(", "src_b_id", ")", "\n", "src_id", "=", "src_a_id", "+", "[", "\"[SEP]\"", "]", "+", "src_b_id", "\n", "\n", "if", "len", "(", "src_id", ")", ">", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ":", "\n", "                    ", "src_id", "=", "truncation_words", "(", "src_id", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ",", "\n", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "src_id", ".", "insert", "(", "0", ",", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "\"[CLS]\"", ")", ")", "\n", "src_id", ".", "append", "(", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "\"[SEP]\"", ")", ")", "\n", "\n", "", "", "src_ids", ".", "append", "(", "src_id", ")", "\n", "pos_id", "=", "list", "(", "range", "(", "len", "(", "src_id", ")", ")", ")", "\n", "task_id", "=", "[", "0", "]", "*", "len", "(", "src_id", ")", "\n", "sentence_id", "=", "[", "0", "]", "*", "(", "text_a_len", "+", "2", ")", "+", "[", "1", "]", "*", "(", "text_b_len", "+", "1", ")", "\n", "position_ids", ".", "append", "(", "pos_id", ")", "\n", "task_ids", ".", "append", "(", "task_id", ")", "\n", "sentence_ids", ".", "append", "(", "sentence_id", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "\n", "padded_ids", ",", "input_mask", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "return_input_mask", "=", "True", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "sent_ids_batch", "=", "pad_batch_data", "(", "sentence_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "pos_ids_batch", "=", "pad_batch_data", "(", "position_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "task_ids_batch", "=", "pad_batch_data", "(", "task_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "# append src_ids", "\n", "return_list", ".", "append", "(", "sent_ids_batch", ")", "# append sent_ids", "\n", "return_list", ".", "append", "(", "pos_ids_batch", ")", "# append pos_ids", "\n", "return_list", ".", "append", "(", "input_mask", ")", "# append mask", "\n", "return_list", ".", "append", "(", "task_ids_batch", ")", "# append task_ids", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "# append seq_lens", "\n", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_classification_field_reader.ErnieClassificationFieldReader.structure_fields_dict": [[164, 189], ["ernie_classification_field_reader.ErnieClassificationFieldReader.token_embedding.get_token_embedding"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.get_token_embedding"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SENTENCE_IDS", "]", "=", "fields_id", "[", "start_index", "+", "1", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "POS_IDS", "]", "=", "fields_id", "[", "start_index", "+", "2", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "MASK_IDS", "]", "=", "fields_id", "[", "start_index", "+", "3", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "TASK_IDS", "]", "=", "fields_id", "[", "start_index", "+", "4", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "=", "fields_id", "[", "start_index", "+", "5", "]", "\n", "\n", "record_emb_dict", "=", "None", "\n", "if", "need_emb", "and", "self", ".", "token_embedding", ":", "\n", "            ", "record_emb_dict", "=", "self", ".", "token_embedding", ".", "get_token_embedding", "(", "record_id_dict", ")", "\n", "\n", "", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "record_emb_dict", "\n", "\n", "return", "record_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_classification_field_reader.ErnieClassificationFieldReader.get_field_length": [[190, 195], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "FieldLength", ".", "ERNIE_TEXT_FIELD", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.custom_text_field_reader.CustomTextFieldReader.__init__": [[19, 41], ["base_field_reader.BaseFieldReader.__init__", "common.register.RegisterSet.tokenizer.__getitem__", "custom_text_field_reader.CustomTextFieldReader.field_config.tokenizer_info.__contains__", "common.register.RegisterSet.tokenizer.__getitem__.", "common.register.RegisterSet.embedding.__getitem__", "custom_text_field_reader.CustomTextFieldReader.tokenizer.vocabulary.get_vocab_size", "common.register.RegisterSet.embedding.__getitem__."], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.vocabulary.Vocabulary.get_vocab_size"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ":", "\n", "            ", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"type\"", "]", ")", "\n", "params", "=", "None", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ".", "__contains__", "(", "\"params\"", ")", ":", "\n", "                ", "params", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"params\"", "]", "\n", "", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ",", "\n", "split_char", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"split_char\"", "]", ",", "\n", "unk_token", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"unk_token\"", "]", ",", "\n", "params", "=", "params", ")", "\n", "\n", "", "if", "self", ".", "field_config", ".", "embedding_info", "and", "self", ".", "field_config", ".", "embedding_info", "[", "\"use_reader_emb\"", "]", ":", "\n", "            ", "embedding_class", "=", "RegisterSet", ".", "embedding", ".", "__getitem__", "(", "self", ".", "field_config", ".", "embedding_info", "[", "\"type\"", "]", ")", "\n", "emb_params", "=", "self", ".", "field_config", ".", "embedding_info", "[", "\"emb_params\"", "]", "\n", "emb_params", "[", "\"vocab_size\"", "]", "=", "self", ".", "tokenizer", ".", "vocabulary", ".", "get_vocab_size", "(", ")", "\n", "emb_params", "[", "\"vocab_path\"", "]", "=", "self", ".", "field_config", ".", "vocab_path", "\n", "self", ".", "token_embedding", "=", "embedding_class", "(", "emb_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.custom_text_field_reader.CustomTextFieldReader.init_reader": [[42, 83], ["shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "TypeError", "range", "len", "data_list.append", "paddle.static.data"], "methods", ["None"], ["", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "\n", "shape", "=", "[", "]", "\n", "types", "=", "[", "]", "\n", "levels", "=", "[", "]", "\n", "feed_names", "=", "[", "]", "\n", "data_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "STRING", ":", "\n", "            ", "\"\"\"src_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"CustomTextFieldReader's data_type must be string\"", ")", "\n", "\n", "", "\"\"\"mask_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'float32'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "MASK_IDS", ")", "\n", "\n", "\"\"\"seq_length\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SEQ_LENS", ")", "\n", "\n", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "feed_names", ")", ")", ":", "\n", "                ", "data_list", ".", "append", "(", "paddle", ".", "static", ".", "data", "(", "name", "=", "feed_names", "[", "i", "]", ",", "shape", "=", "shape", "[", "i", "]", ",", "\n", "dtype", "=", "types", "[", "i", "]", ",", "lod_level", "=", "levels", "[", "i", "]", ")", ")", "\n", "", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.custom_text_field_reader.CustomTextFieldReader.convert_texts_to_ids": [[84, 112], ["util_helper.pad_batch_data", "return_list.append", "return_list.append", "return_list.append", "src_ids.append", "custom_text_field_reader.CustomTextFieldReader.tokenizer.tokenize", "custom_text_field_reader.CustomTextFieldReader.tokenizer.convert_tokens_to_ids", "text.split", "len", "utils.util_helper.truncation_words"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "if", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "", "else", ":", "\n", "                ", "src_id", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "\n", "# \u52a0\u4e0a\u622a\u65ad\u7b56\u7565", "\n", "", "if", "len", "(", "src_id", ")", ">", "self", ".", "field_config", ".", "max_seq_len", ":", "\n", "                ", "src_id", "=", "truncation_words", "(", "src_id", ",", "self", ".", "field_config", ".", "max_seq_len", ",", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "src_ids", ".", "append", "(", "src_id", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "padded_ids", ",", "mask_ids", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "return_input_mask", "=", "True", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "\n", "return_list", ".", "append", "(", "mask_ids", ")", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "\n", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.custom_text_field_reader.CustomTextFieldReader.structure_fields_dict": [[113, 134], ["custom_text_field_reader.CustomTextFieldReader.token_embedding.get_token_embedding"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.get_token_embedding"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "MASK_IDS", "]", "=", "fields_id", "[", "start_index", "+", "1", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "=", "fields_id", "[", "start_index", "+", "2", "]", "\n", "record_emb_dict", "=", "{", "}", "\n", "if", "need_emb", "and", "self", ".", "token_embedding", ":", "\n", "            ", "record_emb_dict", "=", "self", ".", "token_embedding", ".", "get_token_embedding", "(", "record_id_dict", ")", "\n", "\n", "", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "record_emb_dict", "\n", "\n", "return", "record_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.custom_text_field_reader.CustomTextFieldReader.get_field_length": [[135, 140], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "FieldLength", ".", "CUSTOM_TEXT_FIELD", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_text_field_reader_for_multilingual.ErnieTextFieldReaderForMultilingual.convert_texts_to_ids": [[25, 82], ["util_helper.pad_batch_data", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "util_helper.pad_batch_data", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "return_list.append", "src_ids.append", "list", "position_ids.append", "task_ids.append", "sentence_ids.append", "ernie_text_field_reader_for_multilingual.ErnieTextFieldReaderForMultilingual.tokenizer.tokenize", "tokens.append", "tokens.append", "ernie_text_field_reader_for_multilingual.ErnieTextFieldReaderForMultilingual.tokenizer.convert_tokens_to_ids", "isinstance", "utils.util_helper.truncation_words.insert", "utils.util_helper.truncation_words.append", "range", "len", "len", "len", "utils.util_helper.truncation_words", "tokens.append", "text.split", "int", "len", "utils.util_helper.truncation_words", "ernie_text_field_reader_for_multilingual.ErnieTextFieldReaderForMultilingual.tokenizer.covert_token_to_id", "ernie_text_field_reader_for_multilingual.ErnieTextFieldReaderForMultilingual.tokenizer.covert_token_to_id", "len"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id"], ["def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "position_ids", "=", "[", "]", "\n", "task_ids", "=", "[", "]", "\n", "sentence_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "if", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "tokens_text", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "# \u52a0\u4e0a\u622a\u65ad\u7b56\u7565", "\n", "if", "len", "(", "tokens_text", ")", ">", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ":", "\n", "                    ", "tokens_text", "=", "truncation_words", "(", "tokens_text", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ",", "\n", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "tokens", "=", "[", "]", "\n", "tokens", ".", "append", "(", "\"[CLS]\"", ")", "\n", "for", "token", "in", "tokens_text", ":", "\n", "                    ", "tokens", ".", "append", "(", "token", ")", "\n", "", "tokens", ".", "append", "(", "\"[SEP]\"", ")", "\n", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "                    ", "src_id", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "", "src_id", "=", "[", "int", "(", "i", ")", "for", "i", "in", "text", "]", "\n", "if", "len", "(", "src_id", ")", ">", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ":", "\n", "                    ", "src_id", "=", "truncation_words", "(", "src_id", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ",", "\n", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "src_id", ".", "insert", "(", "0", ",", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "\"[CLS]\"", ")", ")", "\n", "src_id", ".", "append", "(", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "\"[SEP]\"", ")", ")", "\n", "\n", "", "src_ids", ".", "append", "(", "src_id", ")", "\n", "pos_id", "=", "list", "(", "range", "(", "2", ",", "len", "(", "src_id", ")", "+", "2", ")", ")", "\n", "task_id", "=", "[", "0", "]", "*", "len", "(", "src_id", ")", "\n", "sentence_id", "=", "[", "0", "]", "*", "len", "(", "src_id", ")", "\n", "position_ids", ".", "append", "(", "pos_id", ")", "\n", "task_ids", ".", "append", "(", "task_id", ")", "\n", "sentence_ids", ".", "append", "(", "sentence_id", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "padded_ids", ",", "input_mask", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "return_input_mask", "=", "True", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "sent_ids_batch", "=", "pad_batch_data", "(", "sentence_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "pos_ids_batch", "=", "pad_batch_data", "(", "position_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "task_ids_batch", "=", "pad_batch_data", "(", "task_ids", ",", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ")", "\n", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "# append src_ids", "\n", "return_list", ".", "append", "(", "sent_ids_batch", ")", "# append sent_ids", "\n", "return_list", ".", "append", "(", "pos_ids_batch", ")", "# append pos_ids", "\n", "return_list", ".", "append", "(", "input_mask", ")", "# append mask", "\n", "return_list", ".", "append", "(", "task_ids_batch", ")", "# append task_ids", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "# append seq_lens", "\n", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.__init__": [[21, 41], ["base_field_reader.BaseFieldReader.__init__", "common.register.RegisterSet.tokenizer.__getitem__", "ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.field_config.tokenizer_info.__contains__", "common.register.RegisterSet.tokenizer.__getitem__.", "modules.token_embedding.custom_fluid_embedding.CustomFluidTokenEmbedding"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ":", "\n", "            ", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"type\"", "]", ")", "\n", "\n", "params", "=", "None", "\n", "if", "self", ".", "field_config", ".", "tokenizer_info", ".", "__contains__", "(", "\"params\"", ")", ":", "\n", "                ", "params", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"params\"", "]", "\n", "\n", "", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ",", "\n", "split_char", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"split_char\"", "]", ",", "\n", "unk_token", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"unk_token\"", "]", ",", "\n", "params", "=", "params", ")", "\n", "\n", "", "if", "self", ".", "field_config", ".", "embedding_info", "and", "self", ".", "field_config", ".", "embedding_info", "[", "\"use_reader_emb\"", "]", ":", "\n", "            ", "self", ".", "token_embedding", "=", "CustomFluidTokenEmbedding", "(", "self", ".", "field_config", ".", "embedding_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.init_reader": [[42, 85], ["shape.append", "levels.append", "types.append", "feed_names.append", "levels.append", "types.append", "feed_names.append", "shape.append", "levels.append", "types.append", "feed_names.append", "TypeError", "shape.append", "shape.append", "range", "len", "data_list.append", "paddle.static.data"], "methods", ["None"], ["", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "shape", "=", "[", "]", "\n", "types", "=", "[", "]", "\n", "levels", "=", "[", "]", "\n", "feed_names", "=", "[", "]", "\n", "data_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "STRING", ":", "\n", "            ", "\"\"\"src_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"ErnieSeqlabelLabelFieldReader's data_type must be string\"", ")", "\n", "\n", "", "\"\"\"mask_ids\"\"\"", "\n", "shape", ".", "append", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'float32'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "MASK_IDS", ")", "\n", "\n", "\"\"\"seq_length\"\"\"", "\n", "if", "paddle", ".", "__version__", "[", ":", "3", "]", "<=", "'1.5'", ":", "\n", "            ", "shape", ".", "append", "(", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "shape", ".", "append", "(", "[", "-", "1", "]", ")", "\n", "", "levels", ".", "append", "(", "0", ")", "\n", "types", ".", "append", "(", "'int64'", ")", "\n", "feed_names", ".", "append", "(", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SEQ_LENS", ")", "\n", "\n", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "feed_names", ")", ")", ":", "\n", "                ", "data_list", ".", "append", "(", "paddle", ".", "static", ".", "data", "(", "name", "=", "feed_names", "[", "i", "]", ",", "shape", "=", "shape", "[", "i", "]", ",", "\n", "dtype", "=", "types", "[", "i", "]", ",", "lod_level", "=", "levels", "[", "i", "]", ")", ")", "\n", "", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.convert_texts_to_ids": [[86, 119], ["util_helper.pad_batch_data", "return_list.append", "return_list.append", "return_list.append", "text.split.insert", "text.split.append", "src_ids.append", "ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.tokenizer.tokenize", "ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.tokenizer.convert_tokens_to_ids", "isinstance", "len", "utils.util_helper.truncation_words", "text.split", "int"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.data.util_helper.pad_batch_data", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.tokenize", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.lac_tokenizer.LACTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.utils.util_helper.truncation_words"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ",", "use_random_pos", "=", "False", ",", "max_pos_id", "=", "2048", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "if", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "src_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "", "else", ":", "\n", "                ", "if", "isinstance", "(", "text", ",", "str", ")", ":", "\n", "                    ", "src_id", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "", "src_id", "=", "[", "int", "(", "i", ")", "for", "i", "in", "text", "]", "\n", "\n", "# \u52a0\u4e0a\u622a\u65ad\u7b56\u7565", "\n", "", "if", "len", "(", "src_id", ")", ">", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ":", "\n", "                ", "src_id", "=", "truncation_words", "(", "src_id", ",", "self", ".", "field_config", ".", "max_seq_len", "-", "2", ",", "self", ".", "field_config", ".", "truncation_type", ")", "\n", "", "unk_id", "=", "self", ".", "tokenizer", ".", "vocabulary", ".", "vocab_dict", "[", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"unk_token\"", "]", "]", "\n", "src_id", ".", "insert", "(", "0", ",", "unk_id", ")", "\n", "src_id", ".", "append", "(", "unk_id", ")", "\n", "src_ids", ".", "append", "(", "src_id", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "padded_ids", ",", "mask_ids", ",", "batch_seq_lens", "=", "pad_batch_data", "(", "src_ids", ",", "\n", "pad_idx", "=", "self", ".", "field_config", ".", "padding_id", ",", "\n", "return_input_mask", "=", "True", ",", "\n", "return_seq_lens", "=", "True", ")", "\n", "return_list", ".", "append", "(", "padded_ids", ")", "\n", "return_list", ".", "append", "(", "mask_ids", ")", "\n", "return_list", ".", "append", "(", "batch_seq_lens", ")", "\n", "\n", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.structure_fields_dict": [[120, 142], ["ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.token_embedding.get_token_embedding"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.token_embedding.base_token_embedding.BaseTokenEmbedding.get_token_embedding"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "MASK_IDS", "]", "=", "fields_id", "[", "start_index", "+", "1", "]", "\n", "record_id_dict", "[", "InstanceName", ".", "SEQ_LENS", "]", "=", "fields_id", "[", "start_index", "+", "2", "]", "\n", "\n", "record_emb_dict", "=", "None", "\n", "if", "need_emb", "and", "self", ".", "token_embedding", ":", "\n", "            ", "record_emb_dict", "=", "self", ".", "token_embedding", ".", "get_token_embedding", "(", "record_id_dict", ")", "\n", "\n", "", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "record_emb_dict", "\n", "\n", "return", "record_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.ernie_seqlabel_label_field_reader.ErnieSeqlabelLabelFieldReader.get_field_length": [[143, 148], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "FieldLength", ".", "CUSTOM_TEXT_FIELD", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.__init__": [[20, 34], ["base_field_reader.BaseFieldReader.__init__", "common.register.RegisterSet.tokenizer.__getitem__", "common.register.RegisterSet.tokenizer.__getitem__.", "tokenizer.custom_tokenizer.CustomTokenizer"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__"], ["def", "__init__", "(", "self", ",", "field_config", ")", ":", "\n", "        ", "\"\"\"\n        :param field_config:\n        \"\"\"", "\n", "BaseFieldReader", ".", "__init__", "(", "self", ",", "field_config", "=", "field_config", ")", "\n", "\n", "if", "field_config", ".", "vocab_path", "and", "field_config", ".", "need_convert", ":", "\n", "            ", "if", "self", ".", "field_config", ".", "tokenizer_info", ":", "\n", "                ", "tokenizer_class", "=", "RegisterSet", ".", "tokenizer", ".", "__getitem__", "(", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"type\"", "]", ")", "\n", "self", ".", "tokenizer", "=", "tokenizer_class", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ",", "\n", "split_char", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"split_char\"", "]", ",", "\n", "unk_token", "=", "self", ".", "field_config", ".", "tokenizer_info", "[", "\"unk_token\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "tokenizer", "=", "CustomTokenizer", "(", "vocab_file", "=", "self", ".", "field_config", ".", "vocab_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.init_reader": [[35, 61], ["types.append", "data_list.append", "types.append", "TypeError", "paddle.static.data"], "methods", ["None"], ["", "", "", "def", "init_reader", "(", "self", ",", "dataset_type", "=", "InstanceName", ".", "TYPE_PY_READER", ")", ":", "\n", "        ", "\"\"\" \u521d\u59cb\u5316reader\u683c\u5f0f\uff0c\u4e24\u79cd\u6a21\u5f0f\uff0c\u5982\u679c\u662fpy_reader\u6a21\u5f0f\u7684\u8bdd\uff0c\u8fd4\u56dereader\u7684shape\u3001type\u3001level\uff1b\n        \u5982\u679c\u662fdata_loader\u6a21\u5f0f\uff0c\u8fd4\u56defluid.data\u6570\u7ec4\n        :param dataset_type : dataset\u7684\u7c7b\u578b\uff0c\u76ee\u524d\u6709\u4e24\u79cd\uff1apy_reader\u3001data_loader\uff0c \u9ed8\u8ba4\u662fpy_reader\n        :return:\n        \"\"\"", "\n", "\n", "shape", "=", "[", "[", "-", "1", ",", "1", "]", "]", "\n", "types", "=", "[", "]", "\n", "levels", "=", "[", "0", "]", "\n", "data_list", "=", "[", "]", "\n", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "INT", ":", "\n", "            ", "types", ".", "append", "(", "'int64'", ")", "\n", "", "elif", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "FLOAT", ":", "\n", "            ", "types", ".", "append", "(", "'float32'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"ScalarFieldReader's data_type must be int or float\"", ")", "\n", "\n", "", "if", "dataset_type", "==", "InstanceName", ".", "TYPE_DATA_LOADER", ":", "\n", "            ", "name", "=", "self", ".", "field_config", ".", "name", "+", "\"_\"", "+", "InstanceName", ".", "SRC_IDS", "\n", "data_list", ".", "append", "(", "paddle", ".", "static", ".", "data", "(", "name", "=", "name", ",", "shape", "=", "shape", "[", "0", "]", ",", "\n", "dtype", "=", "types", "[", "0", "]", ",", "lod_level", "=", "levels", "[", "0", "]", ")", ")", "\n", "return", "data_list", "\n", "", "else", ":", "\n", "            ", "return", "shape", ",", "types", ",", "levels", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.convert_texts_to_ids": [[62, 85], ["text.split", "src_ids.append", "return_list.append", "scalar_field_reader.ScalarFieldReader.tokenizer.covert_token_to_id", "numpy.array().astype().reshape", "return_list.append", "utils.util_helper.convert_to_unicode", "numpy.array().astype().reshape", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenizer.Tokenizer.covert_token_to_id", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.tokenizer.tokenization_utils.convert_to_unicode"], ["", "", "def", "convert_texts_to_ids", "(", "self", ",", "batch_text", ")", ":", "\n", "        ", "\"\"\"\u5c06\u4e00\u4e2abatch\u7684\u660e\u6587text\u8f6c\u6210id\n        :param batch_text:\n        :return:\n        \"\"\"", "\n", "src_ids", "=", "[", "]", "\n", "for", "text", "in", "batch_text", ":", "\n", "            ", "src_id", "=", "text", ".", "split", "(", "\" \"", ")", "\n", "# \u56e0\u4e3a\u662f\u5355\u4e2a\u6807\u91cf\u6570\u636e\uff0c\u6240\u4ee5\u76f4\u63a5\u53d6\u7b2c0\u4e2a\u5c31\u884c", "\n", "if", "self", ".", "tokenizer", "and", "self", ".", "field_config", ".", "need_convert", ":", "\n", "                ", "scalar", "=", "self", ".", "tokenizer", ".", "covert_token_to_id", "(", "convert_to_unicode", "(", "src_id", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "scalar", "=", "src_id", "[", "0", "]", "\n", "", "src_ids", ".", "append", "(", "scalar", ")", "\n", "\n", "", "return_list", "=", "[", "]", "\n", "if", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "FLOAT", ":", "\n", "            ", "return_list", ".", "append", "(", "np", ".", "array", "(", "src_ids", ")", ".", "astype", "(", "\"float32\"", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", ")", "\n", "\n", "", "elif", "self", ".", "field_config", ".", "data_type", "==", "DataShape", ".", "INT", ":", "\n", "            ", "return_list", ".", "append", "(", "np", ".", "array", "(", "src_ids", ")", ".", "astype", "(", "\"int64\"", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", ")", "\n", "\n", "", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.structure_fields_dict": [[86, 101], ["None"], "methods", ["None"], ["", "def", "structure_fields_dict", "(", "self", ",", "fields_id", ",", "start_index", ",", "need_emb", "=", "True", ")", ":", "\n", "        ", "\"\"\"\u9759\u6001\u56fe\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u751f\u6210\u4e00\u4e2adict\uff0c dict\u6709\u4e24\u4e2akey:id , emb. id\u5bf9\u5e94\u7684\u662fpyreader\u8bfb\u51fa\u6765\u7684\u5404\u4e2afield\u4ea7\u51fa\u7684id\uff0cemb\u5bf9\u5e94\u7684\u662f\u5404\u4e2a\n        field\u5bf9\u5e94\u7684embedding\n        :param fields_id: pyreader\u8f93\u51fa\u7684\u5b8c\u6574\u7684id\u5e8f\u5217\n        :param start_index:\u5f53\u524d\u9700\u8981\u5904\u7406\u7684field\u5728field_id_list\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n        :param need_emb:\u662f\u5426\u9700\u8981embedding\uff08\u9884\u6d4b\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981embedding\u7684\uff09\n        :return:\n        \"\"\"", "\n", "record_id_dict", "=", "{", "}", "\n", "record_id_dict", "[", "InstanceName", ".", "SRC_IDS", "]", "=", "fields_id", "[", "start_index", "]", "\n", "record_dict", "=", "{", "}", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_ID", "]", "=", "record_id_dict", "\n", "record_dict", "[", "InstanceName", ".", "RECORD_EMB", "]", "=", "None", "\n", "\n", "return", "record_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.field_reader.scalar_field_reader.ScalarFieldReader.get_field_length": [[102, 107], ["None"], "methods", ["None"], ["", "def", "get_field_length", "(", "self", ")", ":", "\n", "        ", "\"\"\"\u83b7\u53d6\u5f53\u524d\u8fd9\u4e2afield\u5728\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u5728field_id_list\u4e2d\u5360\u591a\u5c11\u957f\u5ea6\n        :return:\n        \"\"\"", "\n", "return", "FieldLength", ".", "SINGLE_SCALAR_FIELD", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.rule.FluidDataType.__init__": [[26, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "shape", ",", "dtype", ",", "lod_level", ",", "name", "=", "None", ")", ":", "\n", "        ", "self", ".", "shape", "=", "shape", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "lod_level", "=", "lod_level", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.jit_wenxin.WenxinTracedLayer.__init__": [[14, 22], ["paddle.fluid.dygraph.TracedLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__"], ["def", "__init__", "(", "self", ",", "program", ",", "parameters", ",", "feed_names", ",", "fetch_names", ")", ":", "\n", "        ", "\"\"\"\n        :param program\n        :param parameters\n        :param feed_names\n        :param fetch_names\n        \"\"\"", "\n", "TracedLayer", ".", "__init__", "(", "self", ",", "program", ",", "parameters", ",", "feed_names", ",", "fetch_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.jit_wenxin.WenxinTracedLayer.trace": [[23, 46], ["isinstance", "jit_wenxin._trace_wenxin", "paddle.fluid.dygraph.TracedLayer", "type"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.jit_wenxin._trace_wenxin"], ["", "@", "staticmethod", "\n", "@", "dygraph_only", "\n", "def", "trace", "(", "layer", ",", "inputs", ",", "phase", "=", "\"save_inference\"", ")", ":", "\n", "        ", "\"\"\"\n        :param layer (paddle.nn.Layer): the layer object to be traced.\n        :param inputs (list(Tensor)|tuple(Tensor)|Tensor): the input tensors of the layer object.\n        :param phase\n        :return A tuple of 2 items, whose the first item is the output of code:`layer(*inputs)` ,\n        and the second item is the created TracedLayer object.\n        \"\"\"", "\n", "assert", "isinstance", "(", "\n", "layer", ",", "Layer", "\n", ")", ",", "\"The type of 'layer' in fluid.dygraph.jit.TracedLayer.trace must be fluid.dygraph.Layer, but received {}.\"", ".", "format", "(", "type", "(", "layer", ")", ")", "\n", "out", "=", "_trace_wenxin", "(", "layer", ",", "inputs", ",", "phase", "=", "\"save_inference\"", ")", "\n", "outs", "=", "out", "[", "0", "]", "\n", "prog", "=", "out", "[", "1", "]", "\n", "feed", "=", "out", "[", "2", "]", "\n", "fetch", "=", "out", "[", "3", "]", "\n", "parameters", "=", "out", "[", "4", "]", "\n", "\n", "traced", "=", "TracedLayer", "(", "prog", ",", "parameters", ",", "feed", ",", "fetch", ")", "\n", "return", "outs", ",", "traced", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.jit_wenxin._trace_wenxin": [[49, 82], ["isinstance", "paddle.fluid.framework._dygraph_tracer()._get_program_desc_tracer", "paddle.fluid.dygraph.base.program_desc_tracing_guard", "layer", "layer.get", "layer.get", "_dygraph_tracer()._get_program_desc_tracer.create_program_desc", "_dygraph_tracer()._get_program_desc_tracer.reset", "paddle.fluid.framework._dygraph_guard", "paddle.fluid.dygraph.jit.create_program_from_desc", "paddle.fluid.framework._dygraph_tracer"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.modules.ernie_config.ErnieConfig.get", "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.metrics.chunk_metrics.ChunkEvaluator.reset"], ["", "", "@", "dygraph_only", "\n", "def", "_trace_wenxin", "(", "layer", ",", "\n", "inputs", ",", "\n", "phase", "=", "\"save_inference\"", ",", "\n", "feed_prefix", "=", "'feed_'", ",", "\n", "fetch_prefix", "=", "'fetch_'", ",", "\n", "tmp_prefix", "=", "'t_'", ")", ":", "\n", "    ", "\"\"\"\n    :param layer\n    :param inputs\n    :param phase\n    :param feed_prefix\n    :param fetch_prefix\n    :param tmp_prefix\n    \"\"\"", "\n", "assert", "isinstance", "(", "layer", ",", "Layer", ")", "\n", "\n", "tracer", "=", "_dygraph_tracer", "(", ")", ".", "_get_program_desc_tracer", "(", ")", "\n", "\n", "with", "program_desc_tracing_guard", "(", "True", ")", ":", "\n", "        ", "original_outputs", "=", "layer", "(", "inputs", ",", "phase", ")", "\n", "\n", "var_list", "=", "original_outputs", ".", "get", "(", "\"target_feed\"", ")", "\n", "out_vars", "=", "original_outputs", ".", "get", "(", "\"target_predicts\"", ")", "\n", "\n", "program_desc", ",", "feed_names", ",", "fetch_names", ",", "parameters", "=", "tracer", ".", "create_program_desc", "(", "var_list", ",", "feed_prefix", ",", "out_vars", ",", "\n", "fetch_prefix", ",", "tmp_prefix", ")", "\n", "tracer", ".", "reset", "(", ")", "\n", "\n", "", "with", "_dygraph_guard", "(", "None", ")", ":", "\n", "        ", "program", "=", "create_program_from_desc", "(", "program_desc", ")", "\n", "\n", "", "return", "[", "original_outputs", ",", "program", ",", "feed_names", ",", "fetch_names", ",", "parameters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__init__": [[15, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "registry_name", ")", ":", "\n", "        ", "self", ".", "_dict", "=", "{", "}", "\n", "self", ".", "_name", "=", "registry_name", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__setitem__": [[19, 27], ["callable", "Exception", "logging.warning"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "not", "callable", "(", "value", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Value of a Registry must be a callable.\"", ")", "\n", "", "if", "key", "is", "None", ":", "\n", "            ", "key", "=", "value", ".", "__name__", "\n", "", "if", "key", "in", "self", ".", "_dict", ":", "\n", "            ", "logging", ".", "warning", "(", "\"Key %s already in registry %s.\"", "%", "(", "key", ",", "self", ".", "_name", ")", ")", "\n", "", "self", ".", "_dict", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.register": [[28, 41], ["callable", "register.Register.register.decorator"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "param", ")", ":", "\n", "        ", "\"\"\"Decorator to register a function or class.\"\"\"", "\n", "\n", "def", "decorator", "(", "key", ",", "value", ")", ":", "\n", "            ", "\"\"\"decorator\"\"\"", "\n", "self", "[", "key", "]", "=", "value", "\n", "return", "value", "\n", "\n", "", "if", "callable", "(", "param", ")", ":", "\n", "# @reg.register", "\n", "            ", "return", "decorator", "(", "None", ",", "param", ")", "\n", "# @reg.register('alias')", "\n", "", "return", "lambda", "x", ":", "decorator", "(", "param", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__getitem__": [[42, 48], ["logging.error"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "_dict", "[", "key", "]", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logging", ".", "error", "(", "\"module {key} not found: {e}\"", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.__contains__": [[49, 51], ["None"], "methods", ["None"], ["", "", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "key", "in", "self", ".", "_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys": [[52, 55], ["register.Register._dict.keys"], "methods", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.Register.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "\"\"\"key\"\"\"", "\n", "return", "self", ".", "_dict", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.import_modules_plugin": [[83, 90], ["register.import_new_module"], "function", ["home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.import_new_module"], ["", "", "def", "import_modules_plugin", "(", ")", ":", "\n", "    ", "\"\"\"import ernie \u63d2\u4ef6\u7248\u9700\u8981\u7684\u5305\uff0c\u7ed3\u5408\u6ce8\u518c\u673a\u5236\u7528\n    \"\"\"", "\n", "PLUGIN_MODULES", "=", "[", "(", "\"erniekit.data.tokenizer\"", ",", "\"tokenization_wp\"", ")", ",", "(", "\"erniekit.modules\"", ",", "\"ernie_origin\"", ")", "]", "\n", "\n", "for", "package_name", ",", "file_name", "in", "PLUGIN_MODULES", ":", "\n", "        ", "import_new_module", "(", "package_name", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.import_modules": [[92, 108], ["importlib.import_module", "logging.error", "logging.error", "traceback.format_exc"], "function", ["None"], ["", "", "def", "import_modules", "(", ")", ":", "\n", "    ", "\"\"\"import\u9700\u8981\u7684\u5305\uff0c\u7ed3\u5408\u6ce8\u518c\u673a\u5236\u7528\n    :return:\n    \"\"\"", "\n", "for", "base_dir", ",", "modules", "in", "RegisterSet", ".", "ALL_MODULES", ":", "\n", "        ", "for", "name", "in", "modules", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "base_dir", "!=", "\"\"", ":", "\n", "                    ", "full_name", "=", "base_dir", "+", "\".\"", "+", "name", "\n", "", "else", ":", "\n", "                    ", "full_name", "=", "name", "\n", "", "importlib", ".", "import_module", "(", "full_name", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "                ", "logging", ".", "error", "(", "\"error in import modules\"", ")", "\n", "logging", ".", "error", "(", "\"traceback.format_exc():\\n%s\"", "%", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PaddlePaddle_ERNIE.common.register.import_new_module": [[110, 126], ["importlib.import_module", "logging.error", "logging.error", "traceback.format_exc"], "function", ["None"], ["", "", "", "", "def", "import_new_module", "(", "package_name", ",", "file_name", ")", ":", "\n", "    ", "\"\"\"import\u4e00\u4e2a\u65b0\u7684\u7c7b\n    :param package_name: \u5305\u540d\n    :param file_name: \u6587\u4ef6\u540d\uff0c\u4e0d\u9700\u8981\u6587\u4ef6\u540e\u7f00\n    :return:\n    \"\"\"", "\n", "try", ":", "\n", "        ", "if", "package_name", "!=", "\"\"", ":", "\n", "            ", "full_name", "=", "package_name", "+", "\".\"", "+", "file_name", "\n", "", "else", ":", "\n", "            ", "full_name", "=", "file_name", "\n", "", "importlib", ".", "import_module", "(", "full_name", ")", "\n", "\n", "", "except", "Exception", ":", "\n", "        ", "logging", ".", "error", "(", "\"error in import %s\"", "%", "file_name", ")", "\n", "logging", ".", "error", "(", "\"traceback.format_exc():\\n%s\"", "%", "traceback", ".", "format_exc", "(", ")", ")", "\n", "", "", ""]]}