{"home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.run_evaluations.quick_run": [[10, 13], ["rgnn.quick_evaluate"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.quick_evaluate"], ["def", "quick_run", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", ":", "\n", "\n", "  ", "evaluate", ".", "quick_evaluate", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.run_evaluations.run": [[14, 16], ["rgnn.evaluate"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate"], ["", "def", "run", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", ":", "\n", "  ", "evaluate", ".", "evaluate", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.run_evaluations.resume": [[17, 19], ["rgnn.resume_evaluation"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.resume_evaluation"], ["", "def", "resume", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", ":", "\n", "  ", "return", "evaluate", ".", "resume_evaluation", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.run_evaluations.summarize": [[20, 28], ["rgnn.summarize_evaluation", "rgnn.find_eval_dir"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.summarize_evaluation", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.find_eval_dir"], ["", "def", "summarize", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", ":", "\n", "  ", "if", "dsm", ".", "default_split", "!=", "0", ":", "\n", "    ", "split", "=", "dsm", ".", "default_split", "\n", "", "else", ":", "\n", "    ", "split", "=", "None", "\n", "\n", "", "return", "summary", ".", "summarize_evaluation", "(", "\n", "evaluate", ".", "find_eval_dir", "(", "mf", ",", "dsm", ",", "split", "=", "split", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.run_evaluations.rankings": [[29, 31], ["rgnn.ranking_util_evaluate"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.ranking_util_evaluate"], ["", "def", "rankings", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", ":", "\n", "  ", "return", "evaluate", ".", "ranking_util_evaluate", "(", "mf", ",", "dsm", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.playground.time_str": [[27, 29], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "time_str", "(", ")", ":", "\n", "  ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.playground.experiment": [[30, 116], ["list", "print", "model", "print", "print", "provider.unload_dataset", "isinstance", "print", "print", "provider.find_compatible_encodings", "len", "list", "provider.get", "provider.get_split", "playground.time_str", "tensorflow.keras.callbacks.TensorBoard", "print", "print", "model.fit", "print", "model.fit", "model.evaluate", "numpy.around", "funcy.filter", "len", "dict", "provider.get.cache", "model.predict", "ds_val.cache", "dict"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.unload_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.find_compatible_encodings", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.time_str", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.fit", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.fit", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.predict", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache"], ["", "def", "experiment", "(", "\n", "provider", ",", "model", ",", "log", "=", "True", ",", "verbose", "=", "2", ",", "epochs", "=", "1000", ",", "\n", "prefer_in_enc", "=", "None", ",", "prefer_out_enc", "=", "None", ",", "**", "config", ")", ":", "\n", "  ", "encs", "=", "list", "(", "provider", ".", "find_compatible_encodings", "(", "model", ")", ")", "\n", "if", "len", "(", "encs", ")", ">", "1", ":", "\n", "    ", "filtered_encs", "=", "list", "(", "fy", ".", "filter", "(", "\n", "lambda", "enc", ":", "(", "\n", "(", "prefer_in_enc", "is", "None", "or", "enc", "[", "0", "]", "==", "prefer_in_enc", ")", "\n", "and", "(", "prefer_out_enc", "is", "None", "or", "enc", "[", "1", "]", "==", "prefer_out_enc", ")", "\n", ")", ",", "encs", ")", ")", "\n", "if", "len", "(", "filtered_encs", ")", ">", "0", ":", "\n", "      ", "encs", "=", "filtered_encs", "\n", "\n", "", "", "enc", "=", "encs", "[", "0", "]", "\n", "in_enc", "=", "enc", "[", "0", "]", "\n", "out_enc", "=", "enc", "[", "1", "]", "\n", "dim", "=", "64", "\n", "depth", "=", "5", "\n", "fc_layer_args", "=", "None", "\n", "\n", "print", "(", "f\"Evaluating model with enc {enc}...\"", ")", "\n", "\n", "if", "\"pref\"", "in", "in_enc", ":", "\n", "    ", "edim", "=", "dim", "\n", "fc_layer_args", "=", "{", "-", "1", ":", "dict", "(", "activation", "=", "None", ")", "}", "\n", "", "elif", "out_enc", "==", "\"binary\"", "or", "out_enc", "==", "\"rank_normalized\"", ":", "\n", "    ", "edim", "=", "1", "\n", "", "elif", "out_enc", "==", "\"float\"", ":", "\n", "    ", "edim", "=", "1", "\n", "fc_layer_args", "=", "{", "-", "1", ":", "dict", "(", "activation", "=", "None", ")", "}", "\n", "", "else", ":", "\n", "    ", "edim", "=", "None", "\n", "", "m", "=", "model", "(", "\n", "enc", "=", "enc", ",", "\n", "in_meta", "=", "provider", ".", "in_meta", ",", "out_meta", "=", "provider", ".", "out_meta", ",", "\n", "conv_layer_units", "=", "[", "dim", "]", "*", "depth", ",", "\n", "att_conv_layer_units", "=", "[", "dim", "]", "*", "depth", ",", "\n", "fc_layer_units", "=", "[", "dim", ",", "dim", ",", "edim", "]", ",", "\n", "fc_layer_args", "=", "fc_layer_args", ",", "\n", "cmp_layer_units", "=", "[", "edim", "]", ",", "\n", "activation", "=", "\"sigmoid\"", ",", "inner_activation", "=", "\"relu\"", ",", "\n", "att_conv_activation", "=", "\"sigmoid\"", ",", "\n", "# pooling=\"sum\",", "\n", "pooling", "=", "\"softmax\"", ",", "\n", "learning_rate", "=", "0.001", ",", "\n", "# kernel=\"rbf\",", "\n", "C", "=", "0.1", ")", "\n", "print", "(", "\"Instanciated model.\"", ")", "\n", "\n", "if", "epochs", "==", "0", ":", "\n", "    ", "return", "m", "\n", "\n", "", "if", "provider", ".", "dataset_size", "<", "10", ":", "\n", "    ", "ds_train", "=", "provider", ".", "get", "(", "enc", ",", "config", "=", "config", ")", "\n", "ds_val", ",", "ds_test", "=", "ds_train", ",", "ds_train", "\n", "#  targets = provider.dataset[1]", "\n", "", "else", ":", "\n", "    ", "ds_train", ",", "ds_val", ",", "ds_test", "=", "provider", ".", "get_split", "(", "\n", "enc", ",", "config", "=", "config", ")", "\n", "#  targets = provider.get_test_split(outer_idx=5)[1]", "\n", "\n", "", "print", "(", "\"Loaded encoded datasets.\"", ")", "\n", "provider", ".", "unload_dataset", "(", ")", "\n", "\n", "if", "isinstance", "(", "m", ",", "keras", ".", "Model", ")", ":", "\n", "    ", "t", "=", "time_str", "(", ")", "\n", "log_dir", "=", "f\"../logs/{t}_{m.name}_{provider.name}/\"", "\n", "tb", "=", "keras", ".", "callbacks", ".", "TensorBoard", "(", "\n", "log_dir", "=", "log_dir", ",", "\n", "histogram_freq", "=", "50", ",", "\n", "profile_batch", "=", "\"100,115\"", ")", "\n", "print", "(", "\"Compiled model.\"", ")", "\n", "print", "(", "\"Fitting Keras model...\"", ")", "\n", "\n", "m", ".", "fit", "(", "\n", "ds_train", ".", "cache", "(", ")", ",", "\n", "validation_data", "=", "ds_val", ".", "cache", "(", ")", ",", "\n", "epochs", "=", "epochs", ",", "verbose", "=", "verbose", ",", "\n", "callbacks", "=", "[", "tb", "]", "if", "log", "else", "[", "]", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "\"Fitting model...\"", ")", "\n", "m", ".", "fit", "(", "ds_train", ",", "validation_data", "=", "ds_val", ")", "\n", "\n", "", "print", "(", "\"Completed training.\"", ",", "m", ".", "evaluate", "(", "ds_test", ")", ")", "\n", "print", "(", "np", ".", "around", "(", "m", ".", "predict", "(", "ds_test", ")", ",", "2", ")", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.playground.sort_experiment": [[117, 136], ["print", "playground.experiment", "provider.get_split_indices", "print", "print", "print", "rgnn.evaluate_model_sort", "rgnn.evaluate_model_sort", "rgnn.evaluate_model_sort"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.playground.experiment", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split_indices", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.evaluate_model_sort", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.evaluate_model_sort", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.evaluate_model_sort"], ["", "def", "sort_experiment", "(", "provider", ",", "model", ",", "**", "config", ")", ":", "\n", "  ", "print", "(", "\"Staring sort experiment...\"", ")", "\n", "bsl", "=", "40000", "\n", "m", "=", "experiment", "(", "\n", "provider", ",", "model", ",", "batch_size_limit", "=", "bsl", ",", "\n", "mode", "=", "\"train_random\"", ",", "\n", "neighbor_radius", "=", "2", ",", "sample_ratio", "=", "20", ",", "# => ~4 comps. per graph (i.e. linear)", "\n", "min_distance", "=", "0.001", ",", "log", "=", "False", ",", "verbose", "=", "2", ",", "**", "config", ")", "\n", "\n", "train_idxs", ",", "val_idxs", ",", "test_idxs", "=", "provider", ".", "get_split_indices", "(", "relative", "=", "True", ")", "\n", "train_get", "=", "provider", ".", "get_train_split", "\n", "val_get", "=", "provider", ".", "get_validation_split", "\n", "test_get", "=", "provider", ".", "get_test_split", "\n", "\n", "bsl", "=", "1000", "\n", "print", "(", "\"Train\"", ",", "sort", ".", "evaluate_model_sort", "(", "train_idxs", ",", "train_get", ",", "m", ",", "batch_size_limit", "=", "bsl", ",", "**", "config", ")", ")", "\n", "print", "(", "\"Val\"", ",", "sort", ".", "evaluate_model_sort", "(", "val_idxs", ",", "val_get", ",", "m", ",", "batch_size_limit", "=", "bsl", ",", "**", "config", ")", ")", "\n", "print", "(", "\"Test\"", ",", "sort", ".", "evaluate_model_sort", "(", "test_idxs", ",", "test_get", ",", "m", ",", "batch_size_limit", "=", "bsl", ",", "**", "config", ")", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.NumpyEncoder.default": [[65, 75], ["isinstance", "super().default", "obj.tolist", "isinstance", "isinstance", "isinstance", "isinstance", "numpy.asscalar"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.NumpyEncoder.default"], ["  ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "if", "(", "\n", "isinstance", "(", "obj", ",", "np", ".", "float32", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "float64", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "int32", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "int64", ")", ")", ":", "\n", "      ", "return", "np", ".", "asscalar", "(", "obj", ")", "\n", "", "return", "super", "(", ")", ".", "default", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.NumpyDecoder.__init__": [[77, 79], ["json.JSONDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "object_hook", "=", "self", ".", "object_hook", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.NumpyDecoder.object_hook": [[80, 91], ["isinstance", "funcy.all", "isinstance", "numpy.array", "obj.keys", "isinstance", "utils.NumpyDecoder.object_hook", "utils.NumpyDecoder.object_hook"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.NumpyDecoder.object_hook", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.NumpyDecoder.object_hook"], ["", "def", "object_hook", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "      ", "if", "fy", ".", "all", "(", "lambda", "o", ":", "isinstance", "(", "o", ",", "numbers", ".", "Number", ")", ",", "obj", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "obj", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "self", ".", "object_hook", "(", "o", ")", "for", "o", "in", "obj", "]", "\n", "", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "      ", "for", "key", "in", "obj", ".", "keys", "(", ")", ":", "\n", "        ", "obj", "[", "key", "]", "=", "self", ".", "object_hook", "(", "obj", "[", "key", "]", ")", "\n", "\n", "", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.memoize.__init__": [[314, 317], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "f", ")", ":", "\n", "    ", "self", ".", "f", "=", "f", "\n", "self", ".", "lut", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.memoize.__call__": [[318, 327], ["tuple", "utils.memoize.f"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "    ", "key", "=", "tuple", "(", "args", ")", "\n", "\n", "if", "key", "in", "self", ".", "lut", ":", "\n", "      ", "return", "self", ".", "lut", "[", "key", "]", "\n", "\n", "", "res", "=", "self", ".", "f", "(", "*", "args", ")", "\n", "self", ".", "lut", "[", "key", "]", "=", "res", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant": [[13, 42], ["hasattr", "inspect.getfullargspec", "funcy.wraps", "utils.entry_duplicator.f", "utils.tolerant", "inspect.isclass", "funcy.project", "len", "len"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant"], ["def", "tolerant", "(", "f", "=", "None", ",", "only_named", "=", "True", ",", "ignore_varkwargs", "=", "False", ")", ":", "\n", "  ", "if", "f", "is", "None", ":", "\n", "    ", "return", "lambda", "f", ":", "tolerant", "(", "f", ",", "only_named", ",", "ignore_varkwargs", ")", "\n", "\n", "", "if", "hasattr", "(", "f", ",", "\"__tolerant__\"", ")", ":", "\n", "    ", "return", "f", "\n", "\n", "", "spec", "=", "inspect", ".", "getfullargspec", "(", "f", ".", "__init__", "if", "inspect", ".", "isclass", "(", "f", ")", "else", "f", ")", "\n", "f_varargs", "=", "spec", ".", "varargs", "is", "not", "None", "\n", "f_varkws", "=", "not", "ignore_varkwargs", "and", "spec", ".", "varkw", "is", "not", "None", "\n", "\n", "if", "(", "only_named", "or", "f_varargs", ")", "and", "f_varkws", ":", "\n", "    ", "return", "f", "\n", "\n", "", "f_args", "=", "spec", ".", "args", "\n", "f_kwonlyargs", "=", "spec", ".", "kwonlyargs", "\n", "\n", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "(", "only_named", "or", "f_varargs", ")", ":", "\n", "      ", "args", "=", "args", "[", ":", "len", "(", "f_args", ")", "]", "\n", "", "if", "not", "f_varkws", ":", "\n", "      ", "kwargs", "=", "fy", ".", "project", "(", "kwargs", ",", "f_args", "[", "len", "(", "args", ")", ":", "]", "+", "f_kwonlyargs", ")", "\n", "\n", "", "return", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "wrapper", ".", "__tolerant__", "=", "True", "\n", "\n", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.unwrap_method": [[43, 45], ["getattr"], "function", ["None"], ["", "def", "unwrap_method", "(", "f", ")", ":", "\n", "  ", "return", "getattr", "(", "f", ",", "\"__func__\"", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method": [[46, 48], ["utils.tolerant", "utils.unwrap_method"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.unwrap_method"], ["", "def", "tolerant_method", "(", "f", ")", ":", "\n", "  ", "return", "tolerant", "(", "unwrap_method", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.select_prefixed_keys": [[52, 63], ["map.items", "dict", "k.startswith", "len"], "function", ["None"], ["def", "select_prefixed_keys", "(", "map", ",", "prefix", ",", "include_others", "=", "False", ",", "target", "=", "None", ")", ":", "\n", "  ", "if", "target", "is", "None", ":", "\n", "    ", "target", "=", "dict", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "map", ".", "items", "(", ")", ":", "\n", "    ", "if", "k", ".", "startswith", "(", "prefix", ")", ":", "\n", "      ", "target", "[", "k", "[", "len", "(", "prefix", ")", ":", "]", "]", "=", "v", "\n", "", "elif", "include_others", ":", "\n", "      ", "target", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.obj_array": [[92, 97], ["numpy.empty", "len"], "function", ["None"], ["", "", "def", "obj_array", "(", "objects", ")", ":", "\n", "  ", "a", "=", "np", ".", "empty", "(", "len", "(", "objects", ")", ",", "dtype", "=", "\"O\"", ")", "\n", "a", "[", ":", "]", "=", "objects", "\n", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.local_seed": [[98, 106], ["numpy.random.get_state", "numpy.random.seed", "numpy.random.set_state"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "local_seed", "(", "seed", ")", ":", "\n", "  ", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "    ", "yield", "\n", "", "finally", ":", "\n", "    ", "np", ".", "random", ".", "set_state", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart": [[107, 113], ["len", "itertools.product", "dict", "zip", "itertools.product", "params.values"], "function", ["None"], ["", "", "def", "cart", "(", "*", "pos_params", ",", "**", "params", ")", ":", "\n", "  ", "\"Lazily computes the cartesian product of the given lists or dicts.\"", "\n", "if", "len", "(", "pos_params", ")", ">", "0", ":", "\n", "    ", "return", "itertools", ".", "product", "(", "*", "pos_params", ")", "\n", "\n", "", "return", "(", "dict", "(", "zip", "(", "params", ",", "x", ")", ")", "for", "x", "in", "itertools", ".", "product", "(", "*", "params", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart_merge": [[114, 117], ["funcy.merge", "itertools.product"], "function", ["None"], ["", "def", "cart_merge", "(", "*", "dicts", ")", ":", "\n", "  ", "\"Lazily computes all possible merge combinations of the given dicts.\"", "\n", "return", "(", "fy", ".", "merge", "(", "*", "c", ")", "for", "c", "in", "itertools", ".", "product", "(", "*", "dicts", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.entry_duplicator": [[118, 128], ["duplicates.items"], "function", ["None"], ["", "def", "entry_duplicator", "(", "duplicates", ")", ":", "\n", "  ", "def", "f", "(", "d", ")", ":", "\n", "    ", "for", "source", ",", "targets", "in", "duplicates", ".", "items", "(", ")", ":", "\n", "      ", "d_source", "=", "d", "[", "source", "]", "\n", "for", "target", "in", "targets", ":", "\n", "        ", "d", "[", "target", "]", "=", "d_source", "\n", "\n", "", "", "return", "d", "\n", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.unzip": [[129, 131], ["list", "zip"], "function", ["None"], ["", "def", "unzip", "(", "tuples", ")", ":", "\n", "  ", "return", "list", "(", "zip", "(", "*", "tuples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.vec_to_unit": [[132, 138], ["enumerate", "numpy.clip"], "function", ["None"], ["", "def", "vec_to_unit", "(", "feat", ")", ":", "\n", "  ", "u", "=", "0", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "np", ".", "clip", "(", "feat", ",", "0", ",", "1", ")", ",", "1", ")", ":", "\n", "    ", "u", "+=", "(", "2", "**", "-", "i", ")", "*", "s", "\n", "\n", "", "return", "u", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.draw_graph": [[139, 174], ["matplotlib.figure", "matplotlib.get_cmap", "matplotlib.show", "matplotlib.title", "dict", "utils.entry_duplicator.f", "utils.entry_duplicator.f", "utils.vec_to_unit", "g.nodes", "str", "g.nodes", "d.get", "data.get", "d.get"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.vec_to_unit", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["", "def", "draw_graph", "(", "\n", "g", ",", "y", "=", "None", ",", "with_features", "=", "False", ",", "with_colors", "=", "True", ",", "\n", "label_colors", "=", "True", ",", "layout", "=", "\"spring\"", ")", ":", "\n", "  ", "plt", ".", "figure", "(", ")", "\n", "\n", "if", "y", "is", "not", "None", ":", "\n", "    ", "plt", ".", "title", "(", "'Label: {}'", ".", "format", "(", "y", ")", ")", "\n", "\n", "", "cmap", "=", "plt", ".", "get_cmap", "(", "\"hsv\"", ")", "\n", "node_color", "=", "[", "\n", "vec_to_unit", "(", "[", "d", ".", "get", "(", "\"label\"", ",", "0", ")", "]", "if", "label_colors", "else", "d", ".", "get", "(", "\"features\"", ",", "[", "]", ")", ")", "\n", "for", "n", ",", "d", "in", "g", ".", "nodes", "(", "data", "=", "True", ")", "]", "if", "with_colors", "else", "\"#1f78b4\"", "\n", "\n", "f", "=", "dict", "(", "\n", "spring", "=", "nx", ".", "draw_spring", ",", "\n", "planar", "=", "nx", ".", "draw_planar", ",", "\n", "spectral", "=", "nx", ".", "draw_spectral", ",", "\n", "circular", "=", "nx", ".", "draw_circular", ",", "\n", "random", "=", "nx", ".", "draw_random", ",", "\n", "kawai", "=", "nx", ".", "draw_kamada_kawai", ")", "[", "layout", "]", "\n", "\n", "if", "with_features", ":", "\n", "    ", "labels", "=", "{", "\n", "n", ":", "f\"{n}:\"", "+", "str", "(", "data", ".", "get", "(", "\"features\"", ")", ")", "\n", "for", "n", ",", "data", "in", "g", ".", "nodes", "(", "data", "=", "True", ")", "\n", "}", "\n", "f", "(", "\n", "g", ",", "labels", "=", "labels", ",", "\n", "node_color", "=", "node_color", ",", "vmin", "=", "0", ",", "vmax", "=", "1", ",", "cmap", "=", "cmap", ")", "\n", "", "else", ":", "\n", "    ", "f", "(", "\n", "g", ",", "with_labels", "=", "True", ",", "\n", "node_color", "=", "node_color", ",", "vmin", "=", "0", ",", "vmax", "=", "1", ",", "cmap", "=", "cmap", ")", "\n", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graph_feature_dims": [[175, 192], ["g.nodes", "g.edges", "data.get", "data.get", "len", "len"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["", "def", "graph_feature_dims", "(", "g", ")", ":", "\n", "  ", "dim_node_features", "=", "0", "\n", "dim_edge_features", "=", "0", "\n", "\n", "for", "_", ",", "data", "in", "g", ".", "nodes", "(", "data", "=", "True", ")", ":", "\n", "    ", "f", "=", "data", ".", "get", "(", "\"features\"", ")", "\n", "if", "f", "is", "not", "None", ":", "\n", "      ", "dim_node_features", "=", "len", "(", "f", ")", "\n", "", "break", "\n", "\n", "", "for", "_", ",", "_", ",", "data", "in", "g", ".", "edges", "(", "data", "=", "True", ")", ":", "\n", "    ", "f", "=", "data", ".", "get", "(", "\"features\"", ")", "\n", "if", "f", "is", "not", "None", ":", "\n", "      ", "dim_edge_features", "=", "len", "(", "f", ")", "\n", "", "break", "\n", "\n", "", "return", "dim_node_features", ",", "dim_edge_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graphs_meta": [[193, 228], ["utils.graph_feature_dims", "dict", "len", "set", "set", "g.nodes", "g.edges", "max", "max", "set", "min", "set", "min", "set.add", "set.add"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graph_feature_dims"], ["", "def", "graphs_meta", "(", "graphs", ",", "labels", "=", "True", ")", ":", "\n", "  ", "assert", "len", "(", "graphs", ")", ">", "0", "\n", "if", "labels", ":", "\n", "    ", "n_labels", "=", "set", "(", ")", "\n", "e_labels", "=", "set", "(", ")", "\n", "\n", "for", "g", "in", "graphs", ":", "\n", "      ", "for", "n", ",", "d", "in", "g", ".", "nodes", "(", "data", "=", "True", ")", ":", "\n", "        ", "if", "\"label\"", "in", "d", ":", "\n", "          ", "n_labels", ".", "add", "(", "d", "[", "\"label\"", "]", ")", "\n", "\n", "", "", "for", "u", ",", "v", ",", "d", "in", "g", ".", "edges", "(", "data", "=", "True", ")", ":", "\n", "        ", "if", "\"label\"", "in", "d", ":", "\n", "          ", "e_labels", ".", "add", "(", "d", "[", "\"label\"", "]", ")", "\n", "\n", "", "", "", "n_nl", "=", "(", "\n", "max", "(", "n_labels", ")", "if", "n_labels", "!=", "set", "(", ")", "else", "0", ")", "\n", "if", "n_nl", "!=", "0", "and", "min", "(", "n_labels", ")", "==", "0", ":", "\n", "      ", "n_nl", "+=", "1", "\n", "\n", "", "n_el", "=", "(", "\n", "max", "(", "e_labels", ")", "if", "e_labels", "!=", "set", "(", ")", "else", "0", ")", "\n", "if", "n_el", "!=", "0", "and", "min", "(", "e_labels", ")", "==", "0", ":", "\n", "      ", "n_el", "+=", "1", "\n", "", "", "else", ":", "\n", "    ", "n_nl", "=", "0", "\n", "n_el", "=", "0", "\n", "\n", "", "d_nf", ",", "d_ef", "=", "graph_feature_dims", "(", "graphs", "[", "0", "]", ")", "\n", "\n", "return", "dict", "(", "\n", "node_feature_dim", "=", "d_nf", ",", "\n", "edge_feature_dim", "=", "d_ef", ",", "\n", "node_label_count", "=", "n_nl", ",", "\n", "edge_label_count", "=", "n_el", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir": [[230, 235], ["dir.exists", "os.makedirs"], "function", ["None"], ["", "def", "make_dir", "(", "dir", ")", ":", "\n", "  ", "if", "not", "dir", ".", "exists", "(", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "return", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_format": [[239, 248], ["staticmethod", "staticmethod"], "function", ["None"], ["def", "cache_format", "(", "loader", ",", "dumper", ",", "type", "=", "\"binary\"", ")", ":", "\n", "  ", "assert", "type", "in", "cache_format_types", "\n", "\n", "class", "CacheFormat", ":", "\n", "    ", "type", "=", "type", "\n", "load", "=", "staticmethod", "(", "loader", ")", "\n", "dump", "=", "staticmethod", "(", "dumper", ")", "\n", "\n", "", "return", "CacheFormat", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.register_cache_format": [[262, 265], ["utils.cache_format"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_format"], ["def", "register_cache_format", "(", "format", ",", "load", ",", "dump", ",", "type", "=", "\"binary\"", ")", ":", "\n", "  ", "cache_formats", "[", "format", "]", "=", "cache_format", "(", "load", ",", "dump", ",", "type", ")", "\n", "return", "format", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_read": [[266, 276], ["cache_format.load", "open", "cache_format.load"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load"], ["", "def", "cache_read", "(", "file", ",", "format", "=", "\"pickle\"", ")", ":", "\n", "  ", "assert", "format", "in", "cache_formats", ",", "f\"Unknown format '{format}'.\"", "\n", "cache_format", "=", "cache_formats", "[", "format", "]", "\n", "type", "=", "\"binary\"", "if", "format", "==", "\"pickle\"", "else", "cache_format", ".", "type", "\n", "\n", "if", "type", "==", "\"custom\"", ":", "\n", "    ", "return", "cache_format", ".", "load", "(", "file", ")", "\n", "", "else", ":", "\n", "    ", "with", "open", "(", "file", ",", "\"rb\"", "if", "type", "==", "\"binary\"", "else", "\"r\"", ")", "as", "f", ":", "\n", "      ", "return", "cache_format", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write": [[277, 287], ["cache_format.dump", "open", "cache_format.dump"], "function", ["None"], ["", "", "", "def", "cache_write", "(", "file", ",", "data", ",", "format", "=", "\"pickle\"", ")", ":", "\n", "  ", "assert", "format", "in", "cache_formats", ",", "f\"Unknown format '{format}'.\"", "\n", "cache_format", "=", "cache_formats", "[", "format", "]", "\n", "type", "=", "\"binary\"", "if", "format", "==", "\"pickle\"", "else", "cache_format", ".", "type", "\n", "\n", "if", "type", "==", "\"custom\"", ":", "\n", "    ", "cache_format", ".", "dump", "(", "data", ",", "file", ")", "\n", "", "else", ":", "\n", "    ", "with", "open", "(", "file", ",", "\"wb\"", "if", "type", "==", "\"binary\"", "else", "\"w\"", ")", "as", "f", ":", "\n", "      ", "cache_format", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache": [[288, 296], ["file.exists", "utils.entry_duplicator.f", "utils.cache_write", "utils.cache_read"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_read"], ["", "", "", "def", "cache", "(", "f", ",", "file", ",", "format", "=", "\"pickle\"", ")", ":", "\n", "  ", "if", "file", ".", "exists", "(", ")", ":", "\n", "    ", "return", "cache_read", "(", "file", ",", "format", ")", "\n", "\n", "", "res", "=", "f", "(", ")", "\n", "cache_write", "(", "file", ",", "res", ",", "format", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method": [[297, 312], ["funcy.wraps", "utils.make_dir", "utils.cache", "callable", "suffix", "callable", "format", "m"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache"], ["", "def", "cached_method", "(", "dir_name", "=", "None", ",", "suffix", "=", "\"\"", ",", "format", "=", "\"pickle\"", ")", ":", "\n", "  ", "def", "cache_annotator", "(", "m", ")", ":", "\n", "    ", "@", "fy", ".", "wraps", "(", "m", ")", "\n", "def", "cached_m", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "      ", "su", "=", "suffix", "(", "*", "args", ",", "**", "kwargs", ")", "if", "callable", "(", "suffix", ")", "else", "suffix", "\n", "fm", "=", "format", "(", "*", "args", ",", "**", "kwargs", ")", "if", "callable", "(", "format", ")", "else", "format", "\n", "ext", "=", "\"json\"", "if", "fm", "==", "\"pretty_json\"", "else", "fm", "\n", "\n", "dir", "=", "make_dir", "(", "\n", "self", ".", "data_dir", "if", "dir_name", "is", "None", "\n", "else", "self", ".", "data_dir", "/", "dir_name", ")", "\n", "cache_file", "=", "dir", "/", "f\"{self.name}{su}.{ext}\"", "\n", "return", "cache", "(", "lambda", ":", "m", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ",", "cache_file", ",", "fm", ")", "\n", "", "return", "cached_m", "\n", "", "return", "cache_annotator", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.scikit.create_preprocessor": [[5, 14], ["rgnn.register_preprocessor"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.register_preprocessor"], ["def", "create_preprocessor", "(", "type", ",", "enc", ",", "in_encoder", "=", "None", ",", "out_encoder", "=", "None", ")", ":", "\n", "  ", "class", "Preprocessor", "(", "preproc", ".", "Preprocessor", ")", ":", "\n", "    ", "if", "in_encoder", "is", "not", "None", ":", "\n", "      ", "in_encoder_gen", "=", "in_encoder", "\n", "", "if", "out_encoder", "is", "not", "None", ":", "\n", "      ", "out_encoder_gen", "=", "out_encoder", "\n", "\n", "", "", "preproc", ".", "register_preprocessor", "(", "type", ",", "enc", ",", "Preprocessor", ")", "\n", "return", "Preprocessor", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.scikit.create_graph_preprocessors": [[15, 31], ["scikit.create_preprocessor", "scikit.create_preprocessor", "scikit.create_preprocessor", "scikit.create_preprocessor", "rgnn.g2v.Graph2VecEncoder"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor"], ["", "def", "create_graph_preprocessors", "(", "in_enc", ",", "in_encoder_gen", ",", ")", ":", "\n", "# Regression:", "\n", "  ", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"integer\"", ")", ",", "(", "in_enc", ",", "\"float\"", ",", "\"scikit\"", ")", ",", "\n", "in_encoder_gen", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"float\"", ")", ",", "(", "in_enc", ",", "\"float\"", ",", "\"scikit\"", ")", ",", "\n", "in_encoder_gen", ")", "\n", "\n", "# Classification:", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"binary\"", ")", ",", "(", "in_enc", ",", "\"class\"", ",", "\"scikit\"", ")", ",", "\n", "in_encoder_gen", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"integer\"", ")", ",", "(", "in_enc", ",", "\"class\"", ",", "\"scikit\"", ")", ",", "\n", "in_encoder_gen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder._make_slicable": [[11, 13], ["numpy.asanyarray"], "methods", ["None"], ["def", "_make_slicable", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "np", ".", "asanyarray", "(", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder.preprocess": [[14, 16], ["encoder.Encoder._make_slicable"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.NullEncoder._make_slicable"], ["", "def", "preprocess", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "self", ".", "_make_slicable", "(", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder.slice_raw": [[17, 20], ["encoder.Encoder._make_slicable"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.NullEncoder._make_slicable"], ["", "def", "slice_raw", "(", "self", ",", "elements", ",", "indices", ")", ":", "\n", "    ", "assert", "self", ".", "can_slice_raw", ",", "\"Cannot slice raw data.\"", "\n", "return", "self", ".", "_make_slicable", "(", "elements", ")", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder.slice_encoded": [[21, 24], ["None"], "methods", ["None"], ["", "def", "slice_encoded", "(", "self", ",", "elements", ",", "indices", ",", "train_indices", "=", "None", ")", ":", "\n", "    ", "assert", "self", ".", "can_slice_encoded", ",", "\"Cannot slice encoded data.\"", "\n", "return", "elements", "[", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder.encode_element": [[25, 27], ["None"], "methods", ["None"], ["", "def", "encode_element", "(", "self", ",", "element", ")", ":", "\n", "    ", "return", "element", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder.append": [[28, 30], ["aggregator.append", "encoder.Encoder.encode_element"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Encoder.encode_element"], ["", "def", "append", "(", "self", ",", "aggregator", ",", "element", ")", ":", "\n", "    ", "aggregator", ".", "append", "(", "self", ".", "encode_element", "(", "element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder.produce_train_metadata": [[31, 33], ["None"], "methods", ["None"], ["", "def", "produce_train_metadata", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder.transform": [[34, 39], ["super().transform", "encoder.Encoder.finalize"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize"], ["", "def", "transform", "(", "self", ",", "elements", ",", "train_metadata", "=", "None", ")", ":", "\n", "    ", "if", "self", ".", "__class__", "==", "__class__", ":", "\n", "      ", "return", "self", ".", "finalize", "(", "elements", ")", "\n", "\n", "", "return", "super", "(", ")", ".", "transform", "(", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.Encoder.finalize": [[40, 42], ["encoder.Encoder._make_slicable"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.NullEncoder._make_slicable"], ["", "def", "finalize", "(", "self", ",", "aggregator", ")", ":", "\n", "    ", "return", "self", ".", "_make_slicable", "(", "aggregator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.ObjectEncoder._make_slicable": [[46, 51], ["isinstance", "rgnn.obj_array", "rgnn.obj_array"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.obj_array", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.obj_array"], ["def", "_make_slicable", "(", "self", ",", "elements", ")", ":", "\n", "    ", "if", "isinstance", "(", "elements", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "return", "elements", "\n", "\n", "", "return", "utils", ".", "obj_array", "(", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.NullEncoder._make_slicable": [[55, 57], ["None"], "methods", ["None"], ["def", "_make_slicable", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.NullEncoder.slice_raw": [[58, 60], ["None"], "methods", ["None"], ["", "def", "slice_raw", "(", "self", ",", "elements", ",", "indices", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.NullEncoder.slice_encoded": [[61, 63], ["None"], "methods", ["None"], ["", "def", "slice_encoded", "(", "self", ",", "elements", ",", "indices", ",", "train_indices", "=", "None", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.NullEncoder.transform": [[64, 66], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "elements", ",", "train_metadata", "=", "None", ")", ":", "\n", "    ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.TupleEncoder.__init__": [[68, 82], ["super().__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ",", "*", "encoders", ",", "size", "=", "2", ")", ":", "\n", "    ", "can_slice_raw", "=", "True", "\n", "can_slice_encoded", "=", "True", "\n", "uses_train_metadata", "=", "False", "\n", "\n", "for", "enc", "in", "encoders", ":", "\n", "      ", "can_slice_raw", "=", "can_slice_raw", "and", "enc", ".", "can_slice_raw", "\n", "can_slice_encoded", "=", "can_slice_encoded", "and", "enc", ".", "can_slice_encoded", "\n", "uses_train_metadata", "=", "uses_train_metadata", "or", "enc", ".", "uses_train_metadata", "\n", "assert", "isinstance", "(", "enc", ",", "Encoder", ")", "\n", "\n", "", "self", ".", "can_slice_raw", "=", "can_slice_raw", "\n", "self", ".", "can_slice_encoded", "=", "can_slice_encoded", "\n", "super", "(", ")", ".", "__init__", "(", "*", "encoders", ",", "size", "=", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.TupleEncoder.slice_raw": [[83, 87], ["tuple", "enc.slice_raw", "zip"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_raw"], ["", "def", "slice_raw", "(", "self", ",", "elements", ",", "indices", ")", ":", "\n", "    ", "return", "tuple", "(", "\n", "enc", ".", "slice_raw", "(", "el", ",", "indices", ")", "\n", "for", "enc", ",", "el", "in", "zip", "(", "self", ".", "transformers", ",", "elements", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.TupleEncoder.slice_encoded": [[88, 92], ["tuple", "enc.slice_encoded", "zip"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_encoded"], ["", "def", "slice_encoded", "(", "self", ",", "elements", ",", "indices", ",", "train_indices", "=", "None", ")", ":", "\n", "    ", "return", "tuple", "(", "\n", "enc", ".", "slice_encoded", "(", "el", ",", "indices", ",", "train_indices", ")", "\n", "for", "enc", ",", "el", "in", "zip", "(", "self", ".", "transformers", ",", "elements", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.encoder.TupleEncoder.produce_train_metadata": [[93, 100], ["tuple", "AssertionError", "enc.produce_train_metadata", "zip"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.produce_train_metadata"], ["", "def", "produce_train_metadata", "(", "self", ",", "elements", ")", ":", "\n", "    ", "if", "self", ".", "uses_train_metadata", ":", "\n", "      ", "return", "tuple", "(", "\n", "enc", ".", "produce_train_metadata", "(", "el", ")", "\n", "for", "enc", ",", "el", "in", "zip", "(", "self", ".", "transformers", ",", "elements", ")", ")", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "\"This encoder does not use train metadata.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.kernel.KernelEncoder.__init__": [[9, 15], ["rgnn.Encoder.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["def", "__init__", "(", "self", ",", "nystroem", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nystroem", "=", "nystroem", "\n", "\n", "if", "nystroem", ":", "\n", "      ", "self", ".", "can_slice_encoded", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.kernel.KernelEncoder._compute_kernel": [[16, 19], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "_compute_kernel", "(", "self", ",", "graphs", ",", "gram", "=", "True", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.kernel.KernelEncoder._apply_kernel": [[20, 23], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_apply_kernel", "(", "self", ",", "kernel", ",", "graphs", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.kernel.KernelEncoder.slice_encoded": [[24, 29], ["None"], "methods", ["None"], ["", "def", "slice_encoded", "(", "self", ",", "gram", ",", "indices", ",", "train_indices", "=", "None", ")", ":", "\n", "    ", "assert", "train_indices", "is", "not", "False", ",", "\"Presplit data not supported.\"", "\n", "if", "train_indices", "is", "None", ":", "\n", "      ", "train_indices", "=", "indices", "\n", "", "return", "gram", "[", "indices", ",", ":", "]", "[", ":", ",", "train_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.kernel.KernelEncoder.encode_element": [[30, 33], ["AssertionError"], "methods", ["None"], ["", "def", "encode_element", "(", "self", ",", "graph", ")", ":", "\n", "    ", "raise", "AssertionError", "(", "\n", "\"Graph-by-graph transformation does not work for gram computation.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.kernel.KernelEncoder.produce_train_metadata": [[34, 36], ["kernel.KernelEncoder._compute_kernel"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder._compute_kernel"], ["", "def", "produce_train_metadata", "(", "self", ",", "graphs", ")", ":", "\n", "    ", "return", "self", ".", "_compute_kernel", "(", "graphs", ",", "gram", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.kernel.KernelEncoder.transform": [[37, 42], ["kernel.KernelEncoder._compute_kernel", "kernel.KernelEncoder._apply_kernel"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder._compute_kernel", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder._apply_kernel"], ["", "def", "transform", "(", "self", ",", "graphs", ",", "train_metadata", "=", "None", ")", ":", "\n", "    ", "if", "train_metadata", "is", "None", ":", "\n", "      ", "return", "self", ".", "_compute_kernel", "(", "graphs", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_apply_kernel", "(", "train_metadata", ",", "graphs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.Batcher.__init__": [[4, 21], ["rgnn.Transformer.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "batch_size_limit", "=", "None", ",", "batch_space_limit", "=", "None", ",", "\n", "lazy_batching", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size_limit", "=", "batch_size_limit", "\n", "self", ".", "batch_space_limit", "=", "batch_space_limit", "\n", "self", ".", "lazy_batching", "=", "lazy_batching", "\n", "self", ".", "basename", "=", "self", ".", "name", "\n", "name", "=", "self", ".", "name", "\n", "\n", "if", "batch_size_limit", "is", "not", "None", ":", "\n", "      ", "name", "+=", "f\"_size{batch_size_limit}\"", "\n", "", "if", "batch_space_limit", "is", "not", "None", ":", "\n", "      ", "name", "+=", "f\"_space{batch_space_limit}\"", "\n", "\n", "", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.Batcher.compute_space": [[22, 24], ["None"], "methods", ["None"], ["", "def", "compute_space", "(", "self", ",", "element", ",", "batch", ")", ":", "\n", "    ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.Batcher.batch_generator": [[25, 73], ["batcher.Batcher.preprocess", "batcher.Batcher.iterate", "batcher.Batcher.create_aggregator", "batcher.Batcher.iterate", "batcher.Batcher.create_aggregator", "batcher.Batcher.append", "batcher.Batcher.append", "batcher.Batcher.finalize", "batcher.Batcher.compute_space", "batcher.Batcher.create_aggregator", "batcher.Batcher.finalize", "batcher.Batcher.compute_space", "batcher.Batcher.finalize"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityToNormalizedRankBatcher.preprocess", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.iterate", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.create_aggregator", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.iterate", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.create_aggregator", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Batcher.compute_space", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.create_aggregator", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Batcher.compute_space", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize"], ["", "def", "batch_generator", "(", "self", ",", "elements", ")", ":", "\n", "    ", "batch_size_limit", "=", "self", ".", "batch_size_limit", "\n", "batch_space_limit", "=", "self", ".", "batch_space_limit", "\n", "elements", "=", "self", ".", "preprocess", "(", "elements", ")", "\n", "\n", "if", "batch_size_limit", "==", "1", ":", "\n", "      ", "def", "batch_generator", "(", ")", ":", "\n", "        ", "for", "e", "in", "self", ".", "iterate", "(", "elements", ")", ":", "\n", "          ", "batch", "=", "self", ".", "create_aggregator", "(", "elements", ")", "\n", "\n", "if", "batch_space_limit", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "compute_space", "(", "e", ",", "batch", ")", "<=", "batch_space_limit", "\n", "\n", "", "self", ".", "append", "(", "batch", ",", "e", ")", "\n", "yield", "self", ".", "finalize", "(", "batch", ")", "\n", "", "", "", "else", ":", "\n", "      ", "def", "batch_generator", "(", ")", ":", "\n", "        ", "batch", "=", "self", ".", "create_aggregator", "(", "elements", ")", "\n", "batch_size", "=", "0", "\n", "batch_space", "=", "0", "\n", "batch_full", "=", "False", "\n", "\n", "for", "e", "in", "self", ".", "iterate", "(", "elements", ")", ":", "\n", "          ", "if", "batch_space_limit", "is", "not", "None", ":", "\n", "            ", "e_space", "=", "self", ".", "compute_space", "(", "e", ",", "batch", ")", "\n", "assert", "e_space", "<=", "batch_space_limit", "\n", "batch_space", "+=", "e_space", "\n", "\n", "if", "batch_space", ">", "batch_space_limit", ":", "\n", "              ", "batch_space", "=", "e_space", "\n", "batch_full", "=", "True", "\n", "\n", "", "", "if", "batch_size_limit", "is", "not", "None", "and", "batch_size", ">=", "batch_size_limit", ":", "\n", "            ", "batch_full", "=", "True", "\n", "\n", "", "if", "batch_full", ":", "\n", "            ", "yield", "self", ".", "finalize", "(", "batch", ")", "\n", "batch", "=", "self", ".", "create_aggregator", "(", "elements", ")", "\n", "batch_size", "=", "0", "\n", "batch_full", "=", "False", "\n", "\n", "", "self", ".", "append", "(", "batch", ",", "e", ")", "\n", "batch_size", "+=", "1", "\n", "\n", "", "if", "batch_size", ">", "0", ":", "\n", "          ", "yield", "self", ".", "finalize", "(", "batch", ")", "\n", "\n", "", "", "", "return", "batch_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.Batcher.transform": [[74, 77], ["batcher.Batcher.batch_generator", "batcher.Batcher.", "list", "batcher.Batcher."], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.Batcher.batch_generator"], ["", "def", "transform", "(", "self", ",", "elements", ")", ":", "\n", "    ", "gen", "=", "self", ".", "batch_generator", "(", "elements", ")", "\n", "return", "gen", "(", ")", "if", "self", ".", "lazy_batching", "else", "list", "(", "gen", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.TupleBatcher.__init__": [[79, 117], ["enumerate", "super().__init__", "kwargs.get", "kwargs.get", "kwargs.get", "isinstance", "len", "space_limiting_batchers.append", "min"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["  ", "def", "__init__", "(", "self", ",", "*", "batchers", ",", "size", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "    ", "batch_space_limit", "=", "0", "\n", "batch_size_limit", "=", "None", "\n", "space_limiting_batchers", "=", "[", "]", "\n", "lazy_batching", "=", "True", "\n", "\n", "for", "i", ",", "bat", "in", "enumerate", "(", "batchers", ")", ":", "\n", "      ", "assert", "isinstance", "(", "bat", ",", "Batcher", ")", "\n", "if", "bat", ".", "batch_size_limit", "is", "not", "None", ":", "\n", "        ", "if", "batch_size_limit", "is", "None", ":", "\n", "          ", "batch_size_limit", "=", "bat", ".", "batch_size_limit", "\n", "", "else", ":", "\n", "          ", "batch_size_limit", "=", "min", "(", "batch_size_limit", ",", "bat", ".", "batch_size_limit", ")", "\n", "", "", "if", "bat", ".", "batch_space_limit", "is", "not", "None", ":", "\n", "        ", "batch_space_limit", "+=", "bat", ".", "batch_space_limit", "\n", "space_limiting_batchers", ".", "append", "(", "i", ")", "\n", "", "if", "not", "bat", ".", "lazy_batching", ":", "\n", "        ", "lazy_batching", "=", "False", "\n", "\n", "", "", "super", "(", ")", ".", "__init__", "(", "*", "batchers", ",", "size", "=", "size", ")", "\n", "self", ".", "batch_size_limit", "=", "kwargs", ".", "get", "(", "\n", "\"batch_size_limit\"", ",", "batch_size_limit", ")", "\n", "self", ".", "batch_space_limit", "=", "kwargs", ".", "get", "(", "\n", "\"batch_space_limit\"", ",", "batch_space_limit", ")", "\n", "self", ".", "space_limiting_batchers", "=", "space_limiting_batchers", "\n", "self", ".", "lazy_batching", "=", "kwargs", ".", "get", "(", "\n", "\"lazy_batching\"", ",", "lazy_batching", ")", "\n", "base", "=", "\"-\"", ".", "join", "(", "b", ".", "basename", "for", "b", "in", "batchers", ")", "\n", "name", "=", "base", "\n", "sep", "=", "\"-\"", "\n", "\n", "if", "self", ".", "batch_size_limit", "is", "not", "None", ":", "\n", "      ", "name", "+=", "f\"{sep}size{self.batch_size_limit}\"", "\n", "sep", "=", "\"_\"", "\n", "", "if", "len", "(", "space_limiting_batchers", ")", ">", "0", ":", "\n", "      ", "name", "+=", "f\"{sep}space{self.batch_space_limit}\"", "\n", "\n", "", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.TupleBatcher.compute_space": [[118, 123], ["sum", "batchers[].compute_space"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Batcher.compute_space"], ["", "def", "compute_space", "(", "self", ",", "element", ",", "batch", ")", ":", "\n", "    ", "batchers", "=", "self", ".", "transformers", "\n", "return", "sum", "(", "\n", "batchers", "[", "i", "]", ".", "compute_space", "(", "element", "[", "i", "]", ",", "batch", "[", "i", "]", ")", "\n", "for", "i", "in", "self", ".", "space_limiting_batchers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.TFPreprocessor.__finalize_with_batcher": [[121, 132], ["batcher.batch_generator", "tf.make_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.Batcher.batch_generator", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.make_dataset"], ["def", "__finalize_with_batcher", "(", "self", ",", "elements", ",", "batcher", ")", ":", "\n", "    ", "batch_gen", "=", "batcher", ".", "batch_generator", "(", "elements", ")", "\n", "in_enc", ",", "out_enc", ",", "_", "=", "self", ".", "enc", "\n", "if", "not", "self", ".", "has_out", ":", "\n", "      ", "out_enc", "=", "None", "\n", "\n", "", "return", "make_dataset", "(", "\n", "batch_gen", ",", "\n", "in_enc", ",", "self", ".", "in_args", ",", "\n", "out_enc", ",", "self", ".", "out_args", ",", "\n", "batcher", ".", "lazy_batching", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.TFPreprocessor.finalized_names": [[133, 136], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "finalized_names", "(", "self", ")", ":", "\n", "    ", "return", "(", ")", "# Explicitly forbids orthogonal in/out batch caching.", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.TFPreprocessor.finalize": [[137, 143], ["tensorflow.TFPreprocessor.__finalize_with_batcher", "tensorflow.TFPreprocessor.__finalize_with_batcher", "tensorflow.TFPreprocessor.batcher"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.TFPreprocessor.__finalize_with_batcher", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.TFPreprocessor.__finalize_with_batcher"], ["", "def", "finalize", "(", "self", ",", "elements", ")", ":", "\n", "    ", "if", "self", ".", "reconfigurable_finalization", ":", "\n", "      ", "return", "lambda", "**", "config", ":", "self", ".", "__finalize_with_batcher", "(", "\n", "elements", ",", "self", ".", "batcher", "(", "config", ")", ")", "\n", "\n", "", "return", "self", ".", "__finalize_with_batcher", "(", "elements", ",", "self", ".", "batcher", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.wl1": [[12, 21], ["rgnn.feature_dim", "tensorflow.TensorSpec", "tensorflow.TensorSpec", "tensorflow.TensorSpec", "tensorflow.TensorSpec", "tensorflow.TensorSpec"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.feature_dim"], ["def", "wl1", "(", "meta", ")", ":", "\n", "  ", "feature_dim", "=", "wl1_enc", ".", "feature_dim", "(", "**", "meta", ")", "\n", "\n", "return", "{", "\n", "\"X\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", ",", "feature_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "\"ref_a\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"ref_b\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"graph_idx\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"n\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.wl2": [[23, 33], ["rgnn.feature_dim", "tensorflow.TensorSpec", "tensorflow.TensorSpec", "tensorflow.TensorSpec", "tensorflow.TensorSpec", "tensorflow.TensorSpec", "tensorflow.TensorSpec"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.feature_dim"], ["", "def", "wl2", "(", "meta", ")", ":", "\n", "  ", "feature_dim", "=", "wl2_enc", ".", "feature_dim", "(", "**", "meta", ")", "\n", "\n", "return", "{", "\n", "\"X\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", ",", "feature_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "\"ref_a\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"ref_b\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"backref\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"graph_idx\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"n\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.vec32": [[35, 39], ["tensorflow.TensorSpec"], "function", ["None"], ["", "def", "vec32", "(", "meta", ")", ":", "\n", "  ", "shape", "=", "[", "None", ",", "meta", "[", "\"feature_dim\"", "]", "]", "if", "\"feature_dim\"", "in", "meta", "else", "[", "None", "]", "\n", "\n", "return", "tf", ".", "TensorSpec", "(", "shape", "=", "shape", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.multiclass": [[40, 48], ["tf.vec32", "dict", "meta.get"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.vec32", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["", "def", "multiclass", "(", "meta", ")", ":", "\n", "  ", "if", "\"classes\"", "in", "meta", ":", "\n", "    ", "classes", "=", "meta", "[", "\"classes\"", "]", "\n", "", "elif", "\"max\"", "in", "meta", ":", "\n", "    ", "classes", "=", "1", "+", "meta", "[", "\"max\"", "]", "-", "meta", ".", "get", "(", "\"min\"", ",", "0", ")", "\n", "", "else", ":", "\n", "    ", "classes", "=", "2", "\n", "", "return", "vec32", "(", "dict", "(", "feature_dim", "=", "classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.graph2vec": [[49, 51], ["tf.vec32", "dict", "meta.get"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.vec32", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["", "def", "graph2vec", "(", "meta", ")", ":", "\n", "  ", "return", "vec32", "(", "dict", "(", "feature_dim", "=", "meta", ".", "get", "(", "\"embedding_dim\"", ",", "g2v", ".", "default_dim", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.pref": [[52, 61], ["enc", "tensorflow.TensorSpec", "tensorflow.TensorSpec"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.enc"], ["", "def", "pref", "(", "enc", ")", ":", "\n", "  ", "def", "pref_enc", "(", "meta", ")", ":", "\n", "    ", "signature", "=", "enc", "(", "meta", ")", "\n", "return", "{", "\n", "**", "signature", ",", "\n", "\"pref_a\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "\"pref_b\"", ":", "tf", ".", "TensorSpec", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "}", "\n", "", "return", "pref_enc", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.make_dataset": [[76, 95], ["tensorflow.data.Dataset.from_generator", "list", "batch_generator"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.batcher.Batcher.batch_generator"], ["def", "make_dataset", "(", "\n", "batch_generator", ",", "in_enc", ",", "in_meta", "=", "None", ",", "out_enc", "=", "None", ",", "out_meta", "=", "None", ",", "\n", "lazy_batching", "=", "True", ")", ":", "\n", "  ", "input_sig", "=", "encodings", "[", "in_enc", "]", "(", "in_meta", ")", "\n", "\n", "if", "out_enc", "is", "None", ":", "\n", "    ", "signature", "=", "input_sig", "\n", "", "else", ":", "\n", "    ", "output_sig", "=", "encodings", "[", "out_enc", "]", "(", "out_meta", ")", "\n", "signature", "=", "(", "input_sig", ",", "output_sig", ")", "\n", "\n", "", "if", "lazy_batching", ":", "\n", "    ", "gen", "=", "batch_generator", "\n", "", "else", ":", "\n", "    ", "batches", "=", "list", "(", "batch_generator", "(", ")", ")", "\n", "gen", "=", "lambda", ":", "batches", "\n", "\n", "", "return", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "gen", ",", "output_signature", "=", "signature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.make_inputs": [[96, 107], ["isinstance", "tensorflow.Input", "tensorflow.Input", "spec.items", "tuple", "tuple", "spec.shape.as_list", "s.shape.as_list"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple"], ["", "def", "make_inputs", "(", "enc", ",", "meta", "=", "{", "}", ")", ":", "\n", "  ", "spec", "=", "encodings", "[", "enc", "]", "(", "meta", ")", "\n", "\n", "if", "isinstance", "(", "spec", ",", "dict", ")", ":", "\n", "    ", "return", "{", "\n", "k", ":", "keras", ".", "Input", "(", "\n", "name", "=", "k", ",", "dtype", "=", "s", ".", "dtype", ",", "shape", "=", "tuple", "(", "s", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "for", "k", ",", "s", "in", "spec", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "    ", "return", "keras", ".", "Input", "(", "\n", "name", "=", "\"X\"", ",", "dtype", "=", "spec", ".", "dtype", ",", "shape", "=", "tuple", "(", "spec", ".", "shape", ".", "as_list", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.load_tfrecords": [[108, 110], ["tensorflow.data.TFRecordDataset", "str"], "function", ["None"], ["", "", "def", "load_tfrecords", "(", "file", ")", ":", "\n", "  ", "return", "tf", ".", "data", ".", "TFRecordDataset", "(", "[", "str", "(", "file", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.dump_tfrecords": [[111, 114], ["tensorflow.data.experimental.TFRecordWriter", "tf.data.experimental.TFRecordWriter.write", "str", "dataset.map"], "function", ["None"], ["", "def", "dump_tfrecords", "(", "dataset", ",", "file", ")", ":", "\n", "  ", "writer", "=", "tf", ".", "data", ".", "experimental", ".", "TFRecordWriter", "(", "str", "(", "file", ")", ")", "\n", "writer", ".", "write", "(", "dataset", ".", "map", "(", "tf", ".", "io", ".", "serialize_tensor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor": [[144, 164], ["rgnn.register_preprocessor", "rgnn.pref_util.UtilityToNormalizedRankBatcher", "rgnn.pref_util.UtilityToNormalizedRankBatcher", "rgnn.cls_enc.MulticlassEncoder", "rgnn.cls_enc.MulticlassEncoder"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.register_preprocessor"], ["", "", "def", "create_preprocessor", "(", "\n", "type", ",", "enc", ",", "\n", "in_encoder", "=", "None", ",", "in_batcher", "=", "None", ",", "\n", "out_encoder", "=", "None", ",", "out_batcher", "=", "None", ",", "\n", "io_encoder", "=", "False", ",", "io_batcher", "=", "False", ")", ":", "\n", "  ", "e", "=", "enc", "\n", "\n", "class", "Preprocessor", "(", "TFPreprocessor", ")", ":", "\n", "    ", "enc", "=", "e", "\n", "if", "in_encoder", "is", "not", "None", ":", "\n", "      ", "in_encoder_gen", "=", "in_encoder", "\n", "", "if", "out_encoder", "is", "not", "None", "or", "io_encoder", ":", "\n", "      ", "out_encoder_gen", "=", "out_encoder", "\n", "", "if", "in_batcher", "is", "not", "None", ":", "\n", "      ", "in_batcher_gen", "=", "in_batcher", "\n", "", "if", "out_batcher", "is", "not", "None", "or", "io_batcher", ":", "\n", "      ", "out_batcher_gen", "=", "out_batcher", "\n", "\n", "", "", "preprocessor", ".", "register_preprocessor", "(", "type", ",", "enc", ",", "Preprocessor", ")", "\n", "return", "Preprocessor", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_graph_preprocessors": [[165, 209], ["tf.create_preprocessor", "tf.create_preprocessor", "tf.create_preprocessor", "tf.create_preprocessor", "tf.create_preprocessor", "tf.create_preprocessor", "tf.create_preprocessor", "tf.create_preprocessor", "tf.create_preprocessor", "tf.create_preprocessor", "rgnn.g2v.Graph2VecEncoder", "rgnn.wl1_enc.WL1Encoder", "rgnn.wl1_enc.WL1Batcher", "rgnn.wl1_enc.WL1UtilityPreferenceBatcher", "rgnn.wl2_enc.WL2Encoder", "rgnn.wl2_enc.WL2Batcher", "rgnn.wl2_enc.WL2UtilityPreferenceBatcher"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.create_preprocessor"], ["", "def", "create_graph_preprocessors", "(", "\n", "name", ",", "encoder", ",", "batcher", "=", "None", ",", "pref_util_batcher", "=", "None", ")", ":", "\n", "# Regression:", "\n", "  ", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"integer\"", ")", ",", "(", "name", ",", "\"float\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "batcher", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"integer\"", ")", ",", "(", "name", ",", "\"rank_normalized\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "batcher", ",", "\n", "None", ",", "pref_util", ".", "UtilityToNormalizedRankBatcher", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"float\"", ")", ",", "(", "name", ",", "\"float\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "batcher", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"float\"", ")", ",", "(", "name", ",", "\"rank_normalized\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "batcher", ",", "\n", "None", ",", "pref_util", ".", "UtilityToNormalizedRankBatcher", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"vector\"", ")", ",", "(", "name", ",", "\"vector\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "batcher", ")", "\n", "\n", "# Classification:", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"binary\"", ")", ",", "(", "name", ",", "\"binary\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "batcher", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"binary\"", ")", ",", "(", "name", ",", "\"multiclass\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "batcher", ",", "\n", "cls_enc", ".", "MulticlassEncoder", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"integer\"", ")", ",", "(", "name", ",", "\"multiclass\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "batcher", ",", "\n", "cls_enc", ".", "MulticlassEncoder", ")", "\n", "\n", "# Ranking:", "\n", "if", "pref_util_batcher", "is", "not", "None", ":", "\n", "    ", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"integer\"", ")", ",", "(", "f\"{name}_pref\"", ",", "\"binary\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "pref_util_batcher", ",", "\n", "io_batcher", "=", "True", ")", "# pref_util_batcher processes (graphs, utils) tuples", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"float\"", ")", ",", "(", "f\"{name}_pref\"", ",", "\"binary\"", ",", "\"tf\"", ")", ",", "\n", "encoder", ",", "pref_util_batcher", ",", "\n", "io_batcher", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.__init__": [[28, 90], ["super().__init__", "rgnn.utils.select_prefixed_keys", "rgnn.utils.select_prefixed_keys", "rgnn.utils.select_prefixed_keys", "rgnn.utils.select_prefixed_keys", "rgnn.utils.select_prefixed_keys", "rgnn.utils.select_prefixed_keys", "funcy.merge", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "funcy.merge", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.tuple", "rgnn.tuple", "rgnn.tuple", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.select_prefixed_keys", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.select_prefixed_keys", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.select_prefixed_keys", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.select_prefixed_keys", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.select_prefixed_keys", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.select_prefixed_keys", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method"], ["def", "__init__", "(", "\n", "self", ",", "in_meta", "=", "None", ",", "out_meta", "=", "None", ",", "config", "=", "None", ",", "\n", "reconfigurable_finalization", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "in_meta", "is", "None", ":", "\n", "      ", "in_meta", "=", "{", "}", "\n", "", "if", "config", "is", "None", ":", "\n", "      ", "config", "=", "{", "}", "\n", "\n", "", "self", ".", "config", "=", "config", "\n", "self", ".", "reconfigurable_finalization", "=", "reconfigurable_finalization", "\n", "\n", "if", "self", ".", "reconfigurable_finalization", ":", "\n", "      ", "self", ".", "finalized_cacheable", "=", "False", "\n", "\n", "", "self", ".", "in_config", "=", "select_prefixed_keys", "(", "config", ",", "\"in_\"", ",", "True", ")", "\n", "self", ".", "out_config", "=", "select_prefixed_keys", "(", "config", ",", "\"out_\"", ",", "True", ")", "\n", "self", ".", "in_meta", "=", "in_meta", "\n", "self", ".", "out_meta", "=", "out_meta", "\n", "self", ".", "in_args", "=", "fy", ".", "merge", "(", "self", ".", "in_config", ",", "in_meta", ")", "\n", "\n", "in_enc_cls", "=", "tolerant_method", "(", "self", ".", "in_encoder_gen", ")", "\n", "orthogonal_preprocess", "=", "False", "\n", "\n", "if", "out_meta", "is", "None", ":", "\n", "      ", "self", ".", "encoder", "=", "in_enc_cls", "(", "**", "self", ".", "in_args", ")", "\n", "self", ".", "out_args", "=", "None", "\n", "self", ".", "has_out", "=", "False", "\n", "", "else", ":", "\n", "      ", "self", ".", "out_args", "=", "fy", ".", "merge", "(", "self", ".", "out_config", ",", "out_meta", ")", "\n", "self", ".", "has_out", "=", "True", "\n", "if", "self", ".", "out_encoder_gen", "is", "None", ":", "\n", "        ", "self", ".", "encoder", "=", "in_enc_cls", "(", "self", ".", "in_args", ",", "self", ".", "out_args", ",", "**", "config", ")", "\n", "", "else", ":", "\n", "        ", "in_enc", "=", "in_enc_cls", "(", "**", "self", ".", "in_args", ")", "\n", "out_enc", "=", "tolerant_method", "(", "self", ".", "out_encoder_gen", ")", "(", "**", "self", ".", "out_args", ")", "\n", "self", ".", "encoder", "=", "transformer", ".", "tuple", "(", "in_enc", ",", "out_enc", ")", "\n", "orthogonal_preprocess", "=", "True", "\n", "\n", "", "", "self", ".", "orthogonal_preprocess", "=", "orthogonal_preprocess", "\n", "\n", "assert", "self", ".", "encoder", ".", "can_slice_raw", "or", "self", ".", "encoder", ".", "can_slice_encoded", ",", "\"Invalid encoder.\"", "\n", "\n", "if", "orthogonal_preprocess", ":", "\n", "      ", "self", ".", "uses_train_metadata", "=", "[", "\n", "t", ".", "uses_train_metadata", "for", "t", "in", "self", ".", "encoder", ".", "transformers", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "uses_train_metadata", "=", "self", ".", "encoder", ".", "uses_train_metadata", "\n", "\n", "", "if", "self", ".", "slice_after_preprocess", ":", "\n", "      ", "if", "orthogonal_preprocess", ":", "\n", "        ", "self", ".", "slice_after_preprocess", "=", "[", "\n", "t", ".", "can_slice_encoded", "for", "t", "in", "self", ".", "encoder", ".", "transformers", "]", "\n", "", "else", ":", "\n", "        ", "self", ".", "slice_after_preprocess", "=", "self", ".", "encoder", ".", "can_slice_encoded", "\n", "", "", "else", ":", "\n", "      ", "if", "orthogonal_preprocess", ":", "\n", "        ", "self", ".", "slice_after_preprocess", "=", "[", "\n", "t", ".", "can_slice_raw", "for", "t", "in", "self", ".", "encoder", ".", "transformers", "]", "\n", "", "else", ":", "\n", "        ", "self", ".", "slice_after_preprocess", "=", "self", ".", "encoder", ".", "can_slice_raw", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.preprocessed_name": [[91, 94], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "preprocessed_name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "encoder", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.preprocessed_names": [[95, 98], ["preprocessor.add_io_prefixes", "getattr"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.add_io_prefixes"], ["", "@", "property", "\n", "def", "preprocessed_names", "(", "self", ")", ":", "\n", "    ", "return", "add_io_prefixes", "(", "getattr", "(", "self", ".", "encoder", ",", "\"names\"", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.finalized_name": [[99, 105], ["Exception", "funcy.any"], "methods", ["None"], ["", "@", "property", "\n", "def", "finalized_name", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "slice_after_preprocess", "and", "(", "\n", "not", "self", ".", "orthogonal_preprocess", "or", "fy", ".", "any", "(", "self", ".", "slice_after_preprocess", ")", ")", ":", "\n", "      ", "return", "self", ".", "encoder", ".", "name", "+", "\"_sliced\"", "\n", "", "raise", "Exception", "(", "\"This preprocessor has no post-encoding processing stage.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.finalized_names": [[106, 111], ["Exception", "preprocessor.add_io_prefixes", "getattr"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.add_io_prefixes"], ["", "@", "property", "\n", "def", "finalized_names", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "slice_after_preprocess", ":", "\n", "      ", "return", "add_io_prefixes", "(", "getattr", "(", "self", ".", "encoder", ",", "\"names\"", ",", "None", ")", ",", "\"_sliced\"", ")", "\n", "", "raise", "Exception", "(", "\"This preprocessor has no post-encoding processing stage.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.preprocess": [[112, 123], ["preprocessor.Preprocessor.encoder.transform", "preprocessor.Preprocessor.encoder.transformers[].transform"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform"], ["", "def", "preprocess", "(", "self", ",", "elements", ",", "only", "=", "None", ",", "train_metadata", "=", "None", ")", ":", "\n", "    ", "if", "only", "is", "not", "None", ":", "\n", "      ", "assert", "self", ".", "orthogonal_preprocess", ",", "\"Orthogonality required.\"", "\n", "if", "only", "==", "\"in\"", ":", "\n", "        ", "only", "=", "0", "\n", "", "elif", "only", "==", "\"out\"", ":", "\n", "        ", "only", "=", "1", "\n", "", "return", "self", ".", "encoder", ".", "transformers", "[", "only", "]", ".", "transform", "(", "\n", "elements", ",", "train_metadata", ")", "\n", "\n", "", "return", "self", ".", "encoder", ".", "transform", "(", "elements", ",", "train_metadata", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_raw": [[124, 138], ["enc.slice_raw"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_raw"], ["", "def", "slice_raw", "(", "self", ",", "elements", ",", "indices", ",", "only", "=", "None", ")", ":", "\n", "    ", "if", "indices", "is", "None", "or", "indices", "is", "False", ":", "\n", "      ", "return", "elements", "\n", "\n", "", "enc", "=", "self", ".", "encoder", "\n", "if", "only", "is", "not", "None", ":", "\n", "      ", "assert", "self", ".", "orthogonal_preprocess", ",", "\"Orthogonality required.\"", "\n", "if", "only", "==", "\"in\"", ":", "\n", "        ", "only", "=", "0", "\n", "", "elif", "only", "==", "\"out\"", ":", "\n", "        ", "only", "=", "1", "\n", "", "enc", "=", "enc", ".", "transformers", "[", "only", "]", "\n", "\n", "", "return", "enc", ".", "slice_raw", "(", "elements", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_encoded": [[139, 153], ["enc.slice_encoded"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_encoded"], ["", "def", "slice_encoded", "(", "self", ",", "elements", ",", "indices", ",", "train_indices", "=", "None", ",", "only", "=", "None", ")", ":", "\n", "    ", "if", "indices", "is", "None", ":", "\n", "      ", "return", "elements", "\n", "\n", "", "enc", "=", "self", ".", "encoder", "\n", "if", "only", "is", "not", "None", ":", "\n", "      ", "assert", "self", ".", "orthogonal_preprocess", ",", "\"Orthogonality required.\"", "\n", "if", "only", "==", "\"in\"", ":", "\n", "        ", "only", "=", "0", "\n", "", "elif", "only", "==", "\"out\"", ":", "\n", "        ", "only", "=", "1", "\n", "", "enc", "=", "enc", ".", "transformers", "[", "only", "]", "\n", "\n", "", "return", "enc", ".", "slice_encoded", "(", "elements", ",", "indices", ",", "train_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.produce_train_metadata": [[154, 165], ["enc.produce_train_metadata"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.produce_train_metadata"], ["", "def", "produce_train_metadata", "(", "self", ",", "elements", ",", "only", "=", "None", ")", ":", "\n", "    ", "enc", "=", "self", ".", "encoder", "\n", "if", "only", "is", "not", "None", ":", "\n", "      ", "assert", "self", ".", "orthogonal_preprocess", ",", "\"Orthogonality required.\"", "\n", "if", "only", "==", "\"in\"", ":", "\n", "        ", "only", "=", "0", "\n", "", "elif", "only", "==", "\"out\"", ":", "\n", "        ", "only", "=", "1", "\n", "", "enc", "=", "enc", ".", "transformers", "[", "only", "]", "\n", "\n", "", "return", "enc", ".", "produce_train_metadata", "(", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.finalize": [[166, 171], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ",", "elements", ")", ":", "\n", "    ", "if", "self", ".", "reconfigurable_finalization", ":", "\n", "      ", "return", "lambda", "**", "kwargs", ":", "elements", "# no reconfiguration possible here.", "\n", "\n", "", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.hooked_transform": [[172, 215], ["rgnn.utils.memoize", "rgnn.utils.memoize", "rgnn.utils.memoize", "rgnn.utils.memoize", "rgnn.utils.memoize", "rgnn.utils.memoize", "tuple", "preprocess_hook", "preprocessor.Preprocessor.finalize", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "preprocessor.Preprocessor.slice_encoded", "preprocessor.Preprocessor.slice_encoded", "preprocessor.Preprocessor.preprocess", "preprocess_hook", "enumerate", "g", "zip", "preprocessor.Preprocessor.slice_raw", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "preprocessor.Preprocessor.preprocess", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "train_metadata_hook", "preprocessor.Preprocessor.slice_raw", "preprocessor.Preprocessor.produce_train_metadata", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "train_metadata_hook", "preprocessor.Preprocessor.slice_raw", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "preprocessor.Preprocessor.produce_train_metadata", "preprocessor.Preprocessor.slice_raw", "rgnn.utils.memoize.", "rgnn.utils.memoize.", "rgnn.utils.memoize."], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_encoded", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_encoded", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityToNormalizedRankBatcher.preprocess", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_raw", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityToNormalizedRankBatcher.preprocess", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_raw", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.produce_train_metadata", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_raw", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.produce_train_metadata", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.slice_raw"], ["", "def", "hooked_transform", "(", "\n", "self", ",", "get_elements", ",", "indices", "=", "None", ",", "train_indices", "=", "None", ",", "\n", "get_train_elements", "=", "None", ",", "finalize", "=", "True", ",", "\n", "preprocess_hook", "=", "None", ",", "train_metadata_hook", "=", "None", ")", ":", "\n", "    ", "f", "=", "memoize", "(", "get_elements", ")", "\n", "if", "get_train_elements", "is", "None", ":", "\n", "      ", "ft", "=", "f", "\n", "", "else", ":", "\n", "      ", "ft", "=", "memoize", "(", "get_train_elements", ")", "\n", "", "if", "preprocess_hook", "is", "None", ":", "\n", "      ", "preprocess_hook", "=", "lambda", "f", ",", "i", ",", "slice", ":", "f", "(", "i", ",", "slice", ")", "\n", "", "if", "train_metadata_hook", "is", "None", ":", "\n", "      ", "train_metadata_hook", "=", "lambda", "f", ",", "i", ":", "f", "(", "i", ")", "\n", "\n", "", "if", "self", ".", "orthogonal_preprocess", ":", "\n", "      ", "g", "=", "lambda", "i", ":", "lambda", "elements", ":", "self", ".", "slice_encoded", "(", "\n", "elements", ",", "indices", ",", "train_indices", ",", "only", "=", "i", ")", "\n", "ds", "=", "tuple", "(", "\n", "(", "g", "(", "i", ")", "if", "slice_after", "else", "fy", ".", "identity", ")", "(", "preprocess_hook", "(", "\n", "lambda", "i", ",", "slice", ":", "self", ".", "preprocess", "(", "\n", "self", ".", "slice_raw", "(", "f", "(", ")", "[", "i", "]", ",", "indices", ",", "only", "=", "i", ")", "if", "slice", "else", "f", "(", ")", "[", "i", "]", ",", "\n", "train_metadata", "=", "train_metadata_hook", "(", "\n", "lambda", "i", ":", "self", ".", "produce_train_metadata", "(", "\n", "self", ".", "slice_raw", "(", "ft", "(", ")", "[", "i", "]", ",", "train_indices", ",", "only", "=", "i", ")", ",", "only", "=", "i", ")", ",", "\n", "i", ")", "if", "use_meta", "and", "slice", "else", "None", ",", "\n", "only", "=", "i", ")", ",", "\n", "i", ",", "not", "slice_after", ")", ")", "\n", "for", "i", ",", "(", "slice_after", ",", "use_meta", ")", "in", "enumerate", "(", "\n", "zip", "(", "self", ".", "slice_after_preprocess", ",", "self", ".", "uses_train_metadata", ")", ")", ")", "\n", "", "else", ":", "\n", "      ", "ds", "=", "preprocess_hook", "(", "\n", "lambda", "i", ",", "slice", ":", "self", ".", "preprocess", "(", "\n", "self", ".", "slice_raw", "(", "f", "(", ")", ",", "indices", ")", "if", "slice", "else", "f", "(", ")", ",", "\n", "train_metadata", "=", "train_metadata_hook", "(", "\n", "lambda", "i", ":", "self", ".", "produce_train_metadata", "(", "\n", "self", ".", "slice_raw", "(", "ft", "(", ")", ",", "train_indices", ")", ")", "\n", ")", "if", "self", ".", "uses_train_metadata", "else", "None", ")", ",", "\n", "None", ",", "not", "self", ".", "slice_after_preprocess", ")", "\n", "\n", "if", "self", ".", "slice_after_preprocess", ":", "\n", "        ", "ds", "=", "self", ".", "slice_encoded", "(", "ds", ",", "indices", ",", "train_indices", ")", "\n", "\n", "", "", "return", "self", ".", "finalize", "(", "ds", ")", "if", "finalize", "else", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.transform": [[216, 222], ["preprocessor.Preprocessor.hooked_transform"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.hooked_transform"], ["", "def", "transform", "(", "\n", "self", ",", "elements", ",", "indices", "=", "None", ",", "train_indices", "=", "None", ",", "\n", "train_elements", "=", "None", ",", "finalize", "=", "True", ")", ":", "\n", "    ", "return", "self", ".", "hooked_transform", "(", "\n", "lambda", ":", "elements", ",", "indices", ",", "train_indices", ",", "\n", "lambda", ":", "train_elements", "or", "elements", ",", "finalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.BatchingPreprocessor.__init__": [[227, 260], ["preprocessor.Preprocessor.__init__", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.tuple", "rgnn.tuple", "rgnn.tuple", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.tuple", "rgnn.tuple", "rgnn.tuple", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "funcy.merge", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "funcy.merge", "funcy.merge", "funcy.merge"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method"], ["def", "__init__", "(", "\n", "self", ",", "in_meta", "=", "None", ",", "out_meta", "=", "None", ",", "config", "=", "None", ",", "\n", "reconfigurable_finalization", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "in_meta", ",", "out_meta", ",", "config", ",", "reconfigurable_finalization", ")", "\n", "\n", "in_bat_cls", "=", "tolerant_method", "(", "self", ".", "in_batcher_gen", ")", "\n", "\n", "if", "out_meta", "is", "None", ":", "\n", "      ", "if", "self", ".", "reconfigurable_finalization", ":", "\n", "        ", "self", ".", "batcher", "=", "lambda", "config", ":", "in_bat_cls", "(", "\n", "**", "fy", ".", "merge", "(", "self", ".", "in_args", ",", "config", ")", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "batcher", "=", "in_bat_cls", "(", "**", "self", ".", "in_args", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "self", ".", "out_batcher_gen", "is", "None", ":", "\n", "        ", "if", "self", ".", "reconfigurable_finalization", ":", "\n", "          ", "self", ".", "batcher", "=", "lambda", "config", ":", "in_bat_cls", "(", "\n", "self", ".", "in_args", ",", "self", ".", "out_args", ",", "**", "fy", ".", "merge", "(", "self", ".", "config", ",", "config", ")", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "batcher", "=", "in_bat_cls", "(", "self", ".", "in_args", ",", "self", ".", "out_args", ",", "**", "self", ".", "config", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "self", ".", "reconfigurable_finalization", ":", "\n", "          ", "def", "bat_gen", "(", "config", ")", ":", "\n", "            ", "in_bat", "=", "in_bat_cls", "(", "**", "fy", ".", "merge", "(", "self", ".", "in_args", ",", "config", ")", ")", "\n", "out_bat", "=", "tolerant_method", "(", "self", ".", "out_batcher_gen", ")", "(", "\n", "**", "fy", ".", "merge", "(", "self", ".", "out_args", ",", "config", ")", ")", "\n", "return", "transformer", ".", "tuple", "(", "in_bat", ",", "out_bat", ")", "\n", "\n", "", "self", ".", "batcher", "=", "bat_gen", "\n", "", "else", ":", "\n", "          ", "in_bat", "=", "in_bat_cls", "(", "**", "self", ".", "in_args", ")", "\n", "out_bat", "=", "tolerant_method", "(", "self", ".", "out_batcher_gen", ")", "(", "**", "self", ".", "out_args", ")", "\n", "self", ".", "batcher", "=", "transformer", ".", "tuple", "(", "in_bat", ",", "out_bat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.BatchingPreprocessor.finalized_name": [[261, 264], ["None"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "finalized_name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "batcher", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.BatchingPreprocessor.finalized_names": [[265, 268], ["preprocessor.add_io_prefixes", "getattr"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.add_io_prefixes"], ["", "@", "property", "\n", "def", "finalized_names", "(", "self", ")", ":", "\n", "    ", "return", "add_io_prefixes", "(", "getattr", "(", "self", ".", "batcher", ",", "\"names\"", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.BatchingPreprocessor.finalize": [[269, 279], ["preprocessor.BatchingPreprocessor.batcher.transform", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method", "rgnn.utils.tolerant_method.transform", "rgnn.utils.tolerant_method.transform", "rgnn.utils.tolerant_method.transform", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method.", "rgnn.utils.tolerant_method."], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform"], ["", "def", "finalize", "(", "self", ",", "elements", ")", ":", "\n", "    ", "if", "self", ".", "reconfigurable_finalization", ":", "\n", "      ", "bat_gen", "=", "tolerant_method", "(", "self", ".", "batcher", ")", "\n", "\n", "def", "reconfigurable_finalizer", "(", "**", "config", ")", ":", "\n", "        ", "return", "bat_gen", "(", "**", "config", ")", ".", "transform", "(", "elements", ")", "\n", "\n", "", "return", "reconfigurable_finalizer", "\n", "\n", "", "return", "self", ".", "batcher", ".", "transform", "(", "elements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.add_io_prefixes": [[10, 16], ["AssertionError", "len", "len"], "function", ["None"], ["def", "add_io_prefixes", "(", "names", ",", "suffix", "=", "\"\"", ")", ":", "\n", "  ", "if", "names", "is", "None", "or", "len", "(", "names", ")", "==", "0", ":", "\n", "    ", "return", "(", ")", "\n", "", "elif", "len", "(", "names", ")", "==", "2", ":", "\n", "    ", "return", "(", "\"in_\"", "+", "names", "[", "0", "]", "+", "suffix", ",", "\"out_\"", "+", "names", "[", "1", "]", "+", "suffix", ")", "\n", "", "raise", "AssertionError", "(", "\"Unsupported names list.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.register_preprocessor": [[298, 304], ["None"], "function", ["None"], ["def", "register_preprocessor", "(", "type", ",", "enc", ",", "preprocessor", ")", ":", "\n", "  ", "in_type", "=", "type", "[", "0", "]", "\n", "preprocessors", "[", "type", "]", "[", "enc", "]", "=", "preprocessor", "\n", "preprocessors", "[", "in_type", "]", "[", "enc", "]", "=", "preprocessor", "\n", "\n", "return", "preprocessor", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_encodings": [[305, 307], ["preprocessors[].keys"], "function", ["None"], ["", "def", "find_encodings", "(", "type", ")", ":", "\n", "  ", "return", "preprocessors", "[", "type", "]", ".", "keys", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_preprocessor": [[308, 317], ["None"], "function", ["None"], ["", "def", "find_preprocessor", "(", "type", ",", "enc", ")", ":", "\n", "  ", "if", "enc", "is", "None", ":", "\n", "    ", "return", "DefaultPreprocessor", "\n", "", "elif", "enc", "==", "\"null_out\"", ":", "\n", "    ", "return", "InDefaultPreprocessor", "\n", "", "elif", "enc", "==", "\"null_in\"", ":", "\n", "    ", "return", "OutDefaultPreprocessor", "\n", "", "else", ":", "\n", "    ", "return", "preprocessors", "[", "type", "]", "[", "enc", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.classification.MulticlassEncoder.__init__": [[8, 14], ["numpy.eye"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "min", "=", "0", ",", "max", "=", "1", ",", "classes", "=", "None", ")", ":", "\n", "    ", "if", "classes", "is", "None", ":", "\n", "      ", "classes", "=", "1", "+", "max", "-", "min", "\n", "", "self", ".", "min", "=", "min", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "e", "=", "np", ".", "eye", "(", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.classification.MulticlassEncoder.encode_element": [[15, 17], ["None"], "methods", ["None"], ["", "def", "encode_element", "(", "self", ",", "c", ")", ":", "\n", "    ", "return", "self", ".", "e", "[", "c", "-", "self", ".", "min", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.Transformer.preprocess": [[4, 6], ["None"], "methods", ["None"], ["def", "preprocess", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.Transformer.iterate": [[7, 9], ["None"], "methods", ["None"], ["", "def", "iterate", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "elements", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.Transformer.create_aggregator": [[10, 12], ["None"], "methods", ["None"], ["", "def", "create_aggregator", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.Transformer.append": [[13, 15], ["aggregator.append"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["", "def", "append", "(", "self", ",", "aggregator", ",", "element", ")", ":", "\n", "    ", "aggregator", ".", "append", "(", "element", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.Transformer.finalize": [[16, 18], ["None"], "methods", ["None"], ["", "def", "finalize", "(", "self", ",", "aggregator", ")", ":", "\n", "    ", "return", "aggregator", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.Transformer.transform": [[19, 27], ["transformer.Transformer.preprocess", "transformer.Transformer.create_aggregator", "transformer.Transformer.iterate", "transformer.Transformer.finalize", "transformer.Transformer.append"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityToNormalizedRankBatcher.preprocess", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.create_aggregator", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.iterate", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["", "def", "transform", "(", "self", ",", "elements", ")", ":", "\n", "    ", "elements", "=", "self", ".", "preprocess", "(", "elements", ")", "\n", "agg", "=", "self", ".", "create_aggregator", "(", "elements", ")", "\n", "\n", "for", "element", "in", "self", ".", "iterate", "(", "elements", ")", ":", "\n", "      ", "self", ".", "append", "(", "agg", ",", "element", ")", "\n", "\n", "", "return", "self", ".", "finalize", "(", "agg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.TupleTransformer.__init__": [[32, 44], ["super().__init__", "len", "max"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ",", "*", "transformers", ",", "size", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "lb", "=", "len", "(", "transformers", ")", "\n", "size", "=", "max", "(", "lb", ",", "size", ")", "\n", "if", "lb", "<", "size", ":", "\n", "      ", "transformers", "+=", "(", "self", ".", "identity", ",", ")", "*", "(", "size", "-", "lb", ")", "\n", "\n", "", "self", ".", "transformers", "=", "transformers", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "names", "=", "[", "t", ".", "name", "for", "t", "in", "transformers", "]", "\n", "self", ".", "name", "=", "\"-\"", ".", "join", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.TupleTransformer.preprocess": [[45, 48], ["tup", "t.preprocess", "zip"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityToNormalizedRankBatcher.preprocess"], ["", "def", "preprocess", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "tup", "(", "\n", "t", ".", "preprocess", "(", "el", ")", "for", "t", ",", "el", "in", "zip", "(", "self", ".", "transformers", ",", "elements", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.TupleTransformer.iterate": [[49, 51], ["zip", "t.iterate", "zip"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.iterate"], ["", "def", "iterate", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "zip", "(", "*", "(", "t", ".", "iterate", "(", "e", ")", "for", "t", ",", "e", "in", "zip", "(", "self", ".", "transformers", ",", "elements", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.TupleTransformer.create_aggregator": [[52, 55], ["tup", "t.create_aggregator", "zip"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.create_aggregator"], ["", "def", "create_aggregator", "(", "self", ",", "elements", ")", ":", "\n", "    ", "return", "tup", "(", "\n", "t", ".", "create_aggregator", "(", "e", ")", "for", "t", ",", "e", "in", "zip", "(", "self", ".", "transformers", ",", "elements", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.TupleTransformer.append": [[56, 59], ["zip", "t.append"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["", "def", "append", "(", "self", ",", "aggregator", ",", "element", ")", ":", "\n", "    ", "for", "t", ",", "sub_agg", ",", "sub_e", "in", "zip", "(", "self", ".", "transformers", ",", "aggregator", ",", "element", ")", ":", "\n", "      ", "t", ".", "append", "(", "sub_agg", ",", "sub_e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.TupleTransformer.finalize": [[60, 62], ["tup", "t.finalize", "zip"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize"], ["", "", "def", "finalize", "(", "self", ",", "aggregator", ")", ":", "\n", "    ", "return", "tup", "(", "t", ".", "finalize", "(", "a", ")", "for", "t", ",", "a", "in", "zip", "(", "self", ".", "transformers", ",", "aggregator", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.register_transformer": [[66, 69], ["transformer_cls"], "function", ["None"], ["def", "register_transformer", "(", "transformer_cls", ",", "tuple_cls", ")", ":", "\n", "  ", "transformer_cls", ".", "identity", "=", "transformer_cls", "(", ")", "\n", "tuple_transformers", "[", "transformer_cls", "]", "=", "tuple_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple": [[72, 82], ["tuple_cls", "len"], "function", ["None"], ["def", "tuple", "(", "*", "transformers", ",", "size", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "  ", "assert", "len", "(", "transformers", ")", ">", "0", ",", "\"At least one transformer is required.\"", "\n", "classes", "=", "transformers", "[", "0", "]", ".", "__class__", ".", "__mro__", "\n", "tuple_cls", "=", "TupleTransformer", "\n", "for", "cls", "in", "classes", ":", "\n", "    ", "if", "cls", "in", "tuple_transformers", ":", "\n", "      ", "tuple_cls", "=", "tuple_transformers", "[", "cls", "]", "\n", "break", "\n", "\n", "", "", "return", "tuple_cls", "(", "*", "transformers", ",", "size", "=", "size", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.pair": [[83, 87], ["transformer.tuple"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple"], ["", "def", "pair", "(", "transformer", "=", "Transformer", ".", "identity", ")", ":", "\n", "  ", "t", "=", "tuple", "(", "transformer", ",", "transformer", ")", "\n", "t", ".", "name", "=", "f\"{transformer.name}_pair\"", "\n", "return", "t", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_graph_batch": [[5, 72], ["len", "numpy.empty", "numpy.empty", "enumerate", "len", "numpy.empty", "numpy.empty", "numpy.empty", "len", "len", "meta_fns.items", "meta_fns.items", "numpy.empty", "meta_fn", "numpy.arange", "masking_fns.items", "typing.get_type_hints().get", "mask_fn", "typing.get_type_hints"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["import", "contextlib", "\n", "import", "numpy", "as", "np", "\n", "import", "funcy", "as", "fy", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "networkx", "as", "nx", "\n", "import", "inspect", "\n", "import", "pickle", "\n", "\n", "def", "tolerant", "(", "f", "=", "None", ",", "only_named", "=", "True", ",", "ignore_varkwargs", "=", "False", ")", ":", "\n", "  ", "if", "f", "is", "None", ":", "\n", "    ", "return", "lambda", "f", ":", "tolerant", "(", "f", ",", "only_named", ",", "ignore_varkwargs", ")", "\n", "\n", "", "if", "hasattr", "(", "f", ",", "\"__tolerant__\"", ")", ":", "\n", "    ", "return", "f", "\n", "\n", "", "spec", "=", "inspect", ".", "getfullargspec", "(", "f", ".", "__init__", "if", "inspect", ".", "isclass", "(", "f", ")", "else", "f", ")", "\n", "f_varargs", "=", "spec", ".", "varargs", "is", "not", "None", "\n", "f_varkws", "=", "not", "ignore_varkwargs", "and", "spec", ".", "varkw", "is", "not", "None", "\n", "\n", "if", "(", "only_named", "or", "f_varargs", ")", "and", "f_varkws", ":", "\n", "    ", "return", "f", "\n", "\n", "", "f_args", "=", "spec", ".", "args", "\n", "f_kwonlyargs", "=", "spec", ".", "kwonlyargs", "\n", "\n", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "(", "only_named", "or", "f_varargs", ")", ":", "\n", "      ", "args", "=", "args", "[", ":", "len", "(", "f_args", ")", "]", "\n", "", "if", "not", "f_varkws", ":", "\n", "      ", "kwargs", "=", "fy", ".", "project", "(", "kwargs", ",", "f_args", "[", "len", "(", "args", ")", ":", "]", "+", "f_kwonlyargs", ")", "\n", "\n", "", "return", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "wrapper", ".", "__tolerant__", "=", "True", "\n", "\n", "return", "wrapper", "\n", "\n", "", "def", "unwrap_method", "(", "f", ")", ":", "\n", "  ", "return", "getattr", "(", "f", ",", "\"__func__\"", ",", "f", ")", "\n", "\n", "", "def", "tolerant_method", "(", "f", ")", ":", "\n", "  ", "return", "tolerant", "(", "unwrap_method", "(", "f", ")", ")", "\n", "\n", "\n", "", "fully_tolerant", "=", "tolerant", "(", "only_named", "=", "False", ")", "\n", "\n", "def", "select_prefixed_keys", "(", "map", ",", "prefix", ",", "include_others", "=", "False", ",", "target", "=", "None", ")", ":", "\n", "  ", "if", "target", "is", "None", ":", "\n", "    ", "target", "=", "dict", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "map", ".", "items", "(", ")", ":", "\n", "    ", "if", "k", ".", "startswith", "(", "prefix", ")", ":", "\n", "      ", "target", "[", "k", "[", "len", "(", "prefix", ")", ":", "]", "]", "=", "v", "\n", "", "elif", "include_others", ":", "\n", "      ", "target", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "target", "\n", "\n", "", "class", "NumpyEncoder", "(", "json", ".", "JSONEncoder", ")", ":", "\n", "  ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "if", "(", "\n", "isinstance", "(", "obj", ",", "np", ".", "float32", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "float64", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "int32", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "int64", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split": [[74, 87], ["sklearn.model_selection.train_test_split", "numpy.arange"], "function", ["None"], ["", "return", "super", "(", ")", ".", "default", "(", "obj", ")", "\n", "\n", "", "", "class", "NumpyDecoder", "(", "json", ".", "JSONDecoder", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "object_hook", "=", "self", ".", "object_hook", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "object_hook", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "      ", "if", "fy", ".", "all", "(", "lambda", "o", ":", "isinstance", "(", "o", ",", "numbers", ".", "Number", ")", ",", "obj", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "obj", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "self", ".", "object_hook", "(", "o", ")", "for", "o", "in", "obj", "]", "\n", "", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "      ", "for", "key", "in", "obj", ".", "keys", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits": [[88, 99], ["sklearn.model_selection.StratifiedKFold.split", "sklearn.model_selection.KFold", "sklearn.model_selection.StratifiedKFold"], "function", ["None"], ["        ", "obj", "[", "key", "]", "=", "self", ".", "object_hook", "(", "obj", "[", "key", "]", ")", "\n", "\n", "", "", "return", "obj", "\n", "\n", "", "", "def", "obj_array", "(", "objects", ")", ":", "\n", "  ", "a", "=", "np", ".", "empty", "(", "len", "(", "objects", ")", ",", "dtype", "=", "\"O\"", ")", "\n", "a", "[", ":", "]", "=", "objects", "\n", "\n", "return", "a", "\n", "\n", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "local_seed", "(", "seed", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.PreferenceAggregator.__init__": [[9, 16], ["numpy.full"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "objects", ")", ":", "\n", "    ", "self", ".", "all_objects", "=", "objects", "\n", "self", ".", "lut", "=", "np", ".", "full", "(", "objects", ".", "size", ",", "-", "1", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "objects", "=", "[", "]", "\n", "self", ".", "pref_a", "=", "[", "]", "\n", "self", ".", "pref_b", "=", "[", "]", "\n", "self", ".", "i", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.PreferenceAggregator.append": [[17, 43], ["pref_a.append", "pref_b.append", "utility.PreferenceAggregator.objects.append", "utility.PreferenceAggregator.objects.append"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["", "def", "append", "(", "self", ",", "pref", ")", ":", "\n", "    ", "a", ",", "b", "=", "pref", "\n", "lut", "=", "self", ".", "lut", "\n", "pref_a", "=", "self", ".", "pref_a", "\n", "pref_b", "=", "self", ".", "pref_b", "\n", "i", "=", "self", ".", "i", "\n", "\n", "if", "lut", "[", "a", "]", "==", "-", "1", ":", "\n", "      ", "lut", "[", "a", "]", "=", "i", "\n", "a_lut", "=", "i", "\n", "self", ".", "objects", ".", "append", "(", "self", ".", "all_objects", "[", "a", "]", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "      ", "a_lut", "=", "lut", "[", "a", "]", "\n", "\n", "", "if", "lut", "[", "b", "]", "==", "-", "1", ":", "\n", "      ", "lut", "[", "b", "]", "=", "i", "\n", "b_lut", "=", "i", "\n", "self", ".", "objects", ".", "append", "(", "self", ".", "all_objects", "[", "b", "]", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "      ", "b_lut", "=", "lut", "[", "b", "]", "\n", "\n", "", "self", ".", "i", "=", "i", "\n", "pref_a", ".", "append", "(", "a_lut", ")", "\n", "pref_b", ".", "append", "(", "b_lut", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.PreferenceAggregator.compute_space": [[44, 55], ["object_space_fn", "object_space_fn"], "methods", ["None"], ["", "def", "compute_space", "(", "self", ",", "pref", ",", "object_space_fn", ")", ":", "\n", "    ", "a", ",", "b", "=", "pref", "\n", "space", "=", "0", "\n", "lut", "=", "self", ".", "lut", "\n", "\n", "if", "lut", "[", "a", "]", "==", "-", "1", ":", "\n", "      ", "space", "+=", "object_space_fn", "(", "self", ".", "all_objects", "[", "a", "]", ")", "\n", "", "if", "lut", "[", "b", "]", "==", "-", "1", ":", "\n", "      ", "space", "+=", "object_space_fn", "(", "self", ".", "all_objects", "[", "b", "]", ")", "\n", "\n", "", "return", "space", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.PreferenceAggregator.finalize": [[56, 66], ["object_finalize_fn", "numpy.ones", "len"], "methods", ["None"], ["", "def", "finalize", "(", "self", ",", "object_finalize_fn", ")", ":", "\n", "    ", "obj", "=", "object_finalize_fn", "(", "self", ".", "objects", ")", "\n", "pref_a", "=", "self", ".", "pref_a", "\n", "pref_b", "=", "self", ".", "pref_b", "\n", "\n", "return", "{", "\n", "**", "obj", ",", "\n", "\"pref_a\"", ":", "pref_a", ",", "\n", "\"pref_b\"", ":", "pref_b", "\n", "}", ",", "np", ".", "ones", "(", "len", "(", "pref_a", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.__init__": [[73, 86], ["rgnn.Batcher.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_meta", "=", "None", ",", "out_meta", "=", "None", ",", "\n", "mode", "=", "\"train_neighbors\"", ",", "neighbor_radius", "=", "1", ",", "min_distance", "=", "0", ",", "\n", "sample_ratio", "=", "1", ",", "linear_samping", "=", "True", ",", "seed", "=", "1337", ",", "pivot_partitions", "=", "None", ",", "\n", "**", "config", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "**", "config", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "neighbor_radius", "=", "neighbor_radius", "\n", "self", ".", "min_distance", "=", "min_distance", "\n", "self", ".", "sample_ratio", "=", "sample_ratio", "\n", "self", ".", "linear_sampling", "=", "linear_samping", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "pivot_partitions", "=", "pivot_partitions", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.preprocess": [[87, 99], ["utility.is_pair", "numpy.argsort", "AssertionError", "utility.is_pair"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.is_pair", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.is_pair"], ["", "def", "preprocess", "(", "self", ",", "elements", ")", ":", "\n", "    ", "if", "self", ".", "mode", "==", "\"train_neighbors\"", "or", "self", ".", "mode", "==", "\"train_random\"", ":", "\n", "      ", "assert", "is_pair", "(", "elements", ")", ",", "\"Utilities are required during training.\"", "\n", "objects", ",", "us", "=", "elements", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "us", ")", "\n", "\n", "return", "objects", ",", "us", ",", "sort_idx", "\n", "", "elif", "self", ".", "mode", "==", "\"pivot_partitions\"", ":", "\n", "      ", "objects", "=", "elements", "[", "0", "]", "if", "is_pair", "(", "elements", ")", "else", "elements", "\n", "return", "objects", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "f\"Unknown mode '{self.mode}'.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.__iterate_train_neighbors": [[100, 124], ["collections.deque", "curr_part.append", "collections.deque.append"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["", "", "def", "__iterate_train_neighbors", "(", "self", ",", "elements", ")", ":", "\n", "    ", "objects", ",", "us", ",", "sort_idx", "=", "elements", "\n", "olen", "=", "objects", ".", "size", "\n", "u_max", "=", "np", ".", "NINF", "\n", "prev_parts", "=", "collections", ".", "deque", "(", "maxlen", "=", "self", ".", "neighbor_radius", ")", "\n", "dist", "=", "self", ".", "min_distance", "\n", "curr_part", "=", "[", "]", "\n", "i", "=", "0", "\n", "\n", "while", "i", "<", "olen", ":", "\n", "      ", "idx", "=", "sort_idx", "[", "i", "]", "\n", "u", "=", "us", "[", "idx", "]", "\n", "\n", "if", "u", "-", "u_max", ">", "dist", ":", "\n", "        ", "prev_parts", ".", "append", "(", "curr_part", ")", "\n", "curr_part", "=", "[", "]", "\n", "u_max", "=", "u", "\n", "\n", "", "for", "prev_part", "in", "prev_parts", ":", "\n", "        ", "for", "p_idx", "in", "prev_part", ":", "\n", "          ", "yield", "p_idx", ",", "idx", "\n", "\n", "", "", "curr_part", ".", "append", "(", "idx", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.__iterate_train_random": [[125, 141], ["min", "numpy.random.default_rng", "numpy.random.default_rng.choice", "int", "zip", "numpy.sqrt"], "methods", ["None"], ["", "", "def", "__iterate_train_random", "(", "self", ",", "elements", ")", ":", "\n", "    ", "objects", ",", "us", ",", "sort_idx", "=", "elements", "\n", "olen", "=", "objects", ".", "size", "\n", "seed", "=", "self", ".", "seed", "+", "olen", "\n", "pair_count", "=", "(", "olen", "*", "(", "olen", "-", "1", ")", ")", "//", "2", "\n", "sample_base", "=", "olen", "if", "self", ".", "linear_sampling", "else", "pair_count", "\n", "sample_size", "=", "min", "(", "int", "(", "self", ".", "sample_ratio", "*", "sample_base", ")", ",", "pair_count", ")", "\n", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "seed", ")", "\n", "\n", "sample", "=", "rng", ".", "choice", "(", "pair_count", ",", "sample_size", ",", "replace", "=", "False", ")", "\n", "sample_b", "=", "(", "np", ".", "sqrt", "(", "sample", "*", "2", "+", "1", "/", "4", ")", "+", "1", "/", "2", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "sample_a", "=", "sample", "-", "(", "sample_b", "*", "(", "sample_b", "-", "1", ")", ")", "//", "2", "\n", "idx_a", "=", "sort_idx", "[", "sample_a", "]", "\n", "idx_b", "=", "sort_idx", "[", "sample_b", "]", "\n", "\n", "yield", "from", "zip", "(", "idx_a", ",", "idx_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.__iterate_pivot_partitions": [[142, 151], ["None"], "methods", ["None"], ["", "def", "__iterate_pivot_partitions", "(", "self", ",", "objects", ")", ":", "\n", "    ", "partitions", "=", "self", ".", "pivot_partitions", "\n", "assert", "partitions", "is", "not", "None", "\n", "\n", "for", "partition", "in", "partitions", ":", "\n", "      ", "pivot_idx", "=", "partition", "[", "0", "]", "\n", "rest_idxs", "=", "partition", "[", "1", ":", "]", "\n", "for", "idx", "in", "rest_idxs", ":", "\n", "        ", "yield", "pivot_idx", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.iterate": [[152, 161], ["utility.UtilityPreferenceBatcher.__iterate_train_neighbors", "utility.UtilityPreferenceBatcher.__iterate_train_random", "AssertionError", "utility.UtilityPreferenceBatcher.__iterate_pivot_partitions"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.__iterate_train_neighbors", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.__iterate_train_random", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.__iterate_pivot_partitions"], ["", "", "", "def", "iterate", "(", "self", ",", "elements", ")", ":", "\n", "    ", "if", "self", ".", "mode", "==", "\"train_neighbors\"", ":", "\n", "      ", "yield", "from", "self", ".", "__iterate_train_neighbors", "(", "elements", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"train_random\"", ":", "\n", "      ", "yield", "from", "self", ".", "__iterate_train_random", "(", "elements", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"pivot_partitions\"", ":", "\n", "      ", "yield", "from", "self", ".", "__iterate_pivot_partitions", "(", "elements", ")", "\n", "", "else", ":", "\n", "      ", "raise", "AssertionError", "(", "f\"Unknown mode '{self.mode}'.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.create_aggregator": [[162, 166], ["utility.PreferenceAggregator"], "methods", ["None"], ["", "", "def", "create_aggregator", "(", "self", ",", "elements", ")", ":", "\n", "    ", "objects", "=", "elements", "if", "self", ".", "mode", "==", "\"pivot_partitions\"", "else", "elements", "[", "0", "]", "\n", "\n", "return", "PreferenceAggregator", "(", "objects", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append": [[167, 169], ["batch.append"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["", "def", "append", "(", "self", ",", "batch", ",", "pref", ")", ":", "\n", "    ", "batch", ".", "append", "(", "pref", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.compute_object_space": [[170, 173], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "compute_object_space", "(", "self", ",", "object", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.compute_space": [[174, 176], ["batch.compute_space"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Batcher.compute_space"], ["", "def", "compute_space", "(", "self", ",", "element", ",", "batch", ")", ":", "\n", "    ", "return", "batch", ".", "compute_space", "(", "element", ",", "self", ".", "compute_object_space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.finalize_objects": [[177, 180], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "finalize_objects", "(", "self", ",", "objects", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.finalize": [[181, 183], ["batch.finalize"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize"], ["", "def", "finalize", "(", "self", ",", "batch", ")", ":", "\n", "    ", "return", "batch", ".", "finalize", "(", "self", ".", "finalize_objects", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityToNormalizedRankBatcher.preprocess": [[187, 195], ["numpy.true_divide", "len", "numpy.array", "len", "numpy.array", "scipy.stats.rankdata", "numpy.max"], "methods", ["None"], ["def", "preprocess", "(", "self", ",", "elements", ")", ":", "\n", "    ", "if", "len", "(", "elements", ")", "==", "0", ":", "\n", "      ", "return", "np", ".", "array", "(", "[", "]", ")", "\n", "", "if", "len", "(", "elements", ")", "==", "1", ":", "\n", "      ", "return", "np", ".", "array", "(", "[", "0.0", "]", ")", "\n", "\n", "", "ranks", "=", "sp", ".", "stats", ".", "rankdata", "(", "elements", ",", "method", "=", "\"dense\"", ")", "-", "1", "\n", "return", "np", ".", "true_divide", "(", "ranks", ",", "np", ".", "max", "(", "ranks", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.is_pair": [[67, 69], ["isinstance", "len"], "function", ["None"], ["", "", "def", "is_pair", "(", "elements", ")", ":", "\n", "  ", "return", "isinstance", "(", "elements", ",", "tuple", ")", "and", "len", "(", "elements", ")", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder.__init__": [[7, 41], ["rgnn.preprocessing.kernel.KernelEncoder.__init__", "grakel.GraphKernel"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["uses_train_metadata", "=", "True", "\n", "\n", "def", "__init__", "(", "self", ",", "nystroem", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nystroem", "=", "nystroem", "\n", "\n", "if", "nystroem", ":", "\n", "      ", "self", ".", "can_slice_encoded", "=", "False", "\n", "\n", "", "", "@", "abstractmethod", "\n", "def", "_compute_kernel", "(", "self", ",", "graphs", ",", "gram", "=", "True", ")", ":", "\n", "    ", "pass", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "_apply_kernel", "(", "self", ",", "kernel", ",", "graphs", ")", ":", "\n", "    ", "pass", "\n", "\n", "", "def", "slice_encoded", "(", "self", ",", "gram", ",", "indices", ",", "train_indices", "=", "None", ")", ":", "\n", "    ", "assert", "train_indices", "is", "not", "False", ",", "\"Presplit data not supported.\"", "\n", "if", "train_indices", "is", "None", ":", "\n", "      ", "train_indices", "=", "indices", "\n", "", "return", "gram", "[", "indices", ",", ":", "]", "[", ":", ",", "train_indices", "]", "\n", "\n", "", "def", "encode_element", "(", "self", ",", "graph", ")", ":", "\n", "    ", "raise", "AssertionError", "(", "\n", "\"Graph-by-graph transformation does not work for gram computation.\"", ")", "\n", "\n", "", "def", "produce_train_metadata", "(", "self", ",", "graphs", ")", ":", "\n", "    ", "return", "self", ".", "_compute_kernel", "(", "graphs", ",", "gram", "=", "False", ")", "\n", "\n", "", "def", "transform", "(", "self", ",", "graphs", ",", "train_metadata", "=", "None", ")", ":", "\n", "    ", "if", "train_metadata", "is", "None", ":", "\n", "      ", "return", "self", ".", "_compute_kernel", "(", "graphs", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_apply_kernel", "(", "train_metadata", ",", "graphs", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder._enc_graphs": [[42, 96], ["grakel.graph_from_networkx", "node_labeler", "kernel.GrakelEncoder._enc_graphs.edge_labeler"], "methods", ["None"], ["", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder._compute_kernel": [[97, 105], ["kernel.GrakelEncoder._enc_graphs", "kernel.GrakelEncoder.kernel.fit_transform", "kernel.GrakelEncoder.kernel.fit"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder._enc_graphs", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.fit"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder._apply_kernel": [[106, 109], ["kernel.GrakelEncoder._enc_graphs", "kernel.transform"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.kernel.GrakelEncoder._enc_graphs", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing.__init__": [[25, 39], ["graph2vec.WeisfeilerLehmanHashing._set_features", "graph2vec.WeisfeilerLehmanHashing._do_recursions"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing._set_features", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing._do_recursions"], ["def", "__init__", "(", "\n", "self", ",", "graph", ":", "nx", ".", "classes", ".", "graph", ".", "Graph", ",", "wl_iterations", ":", "int", ",", "\n", "erase_base_features", ":", "bool", ",", "\n", "node_attributes", "=", "None", ",", "edge_attributes", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Initialization method which also executes feature extraction.\n    \"\"\"", "\n", "self", ".", "wl_iterations", "=", "wl_iterations", "\n", "self", ".", "graph", "=", "graph", "\n", "self", ".", "node_attributes", "=", "node_attributes", "\n", "self", ".", "edge_attributes", "=", "edge_attributes", "\n", "self", ".", "erase_base_features", "=", "erase_base_features", "\n", "self", ".", "_set_features", "(", ")", "\n", "self", ".", "_do_recursions", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing._set_features": [[40, 66], ["str", "len", "str", "graph2vec.WeisfeilerLehmanHashing.features.items", "g.nodes.items", "g.degree", "g.nodes", "g.neighbors", "str", "str"], "methods", ["None"], ["", "def", "_set_features", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Creating the features.\n    \"\"\"", "\n", "g", "=", "self", ".", "graph", "\n", "if", "self", ".", "node_attributes", ":", "\n", "      ", "attrs", "=", "self", ".", "node_attributes", "\n", "self", ".", "features", "=", "{", "\n", "n", ":", "\",\"", ".", "join", "(", "[", "str", "(", "d", "[", "a", "]", ")", "for", "a", "in", "attrs", "]", ")", "\n", "for", "n", ",", "d", "in", "g", ".", "nodes", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "      ", "self", ".", "features", "=", "{", "\n", "node", ":", "str", "(", "g", ".", "degree", "(", "node", ")", ")", "\n", "for", "node", "in", "g", ".", "nodes", "(", ")", "}", "\n", "\n", "", "if", "self", ".", "edge_attributes", "and", "len", "(", "self", ".", "edge_attributes", ")", ">", "0", ":", "\n", "      ", "eattrs", "=", "self", ".", "edge_attributes", "\n", "self", ".", "edge_features", "=", "{", "\n", "(", "v", ",", "u", ")", ":", "\",\"", ".", "join", "(", "[", "str", "(", "g", ".", "edges", "[", "v", ",", "u", "]", "[", "a", "]", ")", "for", "a", "in", "eattrs", "]", ")", "\n", "for", "v", "in", "g", ".", "nodes", "\n", "for", "u", "in", "g", ".", "neighbors", "(", "v", ")", "\n", "}", "\n", "", "else", ":", "\n", "      ", "self", ".", "edge_features", "=", "None", "\n", "\n", "", "self", ".", "extracted_features", "=", "{", "k", ":", "[", "str", "(", "v", ")", "]", "for", "k", ",", "v", "in", "self", ".", "features", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing._erase_base_features": [[67, 73], ["graph2vec.WeisfeilerLehmanHashing.extracted_features.items"], "methods", ["None"], ["", "def", "_erase_base_features", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Erasing the base features\n    \"\"\"", "\n", "for", "k", ",", "v", "in", "self", ".", "extracted_features", ".", "items", "(", ")", ":", "\n", "      ", "del", "self", ".", "extracted_features", "[", "k", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing._do_a_recursion": [[74, 98], ["graph2vec.WeisfeilerLehmanHashing.graph.nodes", "graph2vec.WeisfeilerLehmanHashing.graph.neighbors", "hashlib.md5", "hashlib.md5.hexdigest", "sorted", "features.encode", "new_features.items", "str"], "methods", ["None"], ["", "", "def", "_do_a_recursion", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    The method does a single WL recursion.\n    Return types:\n      * **new_features** *(dict of strings)* - The hash table with WL features.\n    \"\"\"", "\n", "new_features", "=", "{", "}", "\n", "for", "node", "in", "self", ".", "graph", ".", "nodes", "(", ")", ":", "\n", "      ", "nebs", "=", "self", ".", "graph", ".", "neighbors", "(", "node", ")", "\n", "if", "self", ".", "edge_features", ":", "\n", "        ", "neb_fs", "=", "[", "\n", "self", ".", "edge_features", "[", "(", "node", ",", "neb", ")", "]", "+", "\":\"", "+", "self", ".", "features", "[", "neb", "]", "\n", "for", "neb", "in", "nebs", "]", "\n", "", "else", ":", "\n", "        ", "neb_fs", "=", "[", "self", ".", "features", "[", "neb", "]", "for", "neb", "in", "nebs", "]", "\n", "", "features", "=", "[", "str", "(", "self", ".", "features", "[", "node", "]", ")", "]", "+", "sorted", "(", "neb_fs", ")", "\n", "features", "=", "\"_\"", ".", "join", "(", "features", ")", "\n", "hash_object", "=", "hashlib", ".", "md5", "(", "features", ".", "encode", "(", ")", ")", "\n", "hashing", "=", "hash_object", ".", "hexdigest", "(", ")", "\n", "new_features", "[", "node", "]", "=", "hashing", "\n", "", "self", ".", "extracted_features", "=", "{", "\n", "k", ":", "self", ".", "extracted_features", "[", "k", "]", "+", "[", "v", "]", "\n", "for", "k", ",", "v", "in", "new_features", ".", "items", "(", ")", "}", "\n", "return", "new_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing._do_recursions": [[99, 107], ["range", "graph2vec.WeisfeilerLehmanHashing._do_a_recursion", "graph2vec.WeisfeilerLehmanHashing._erase_base_features"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing._do_a_recursion", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing._erase_base_features"], ["", "def", "_do_recursions", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    The method does a series of WL recursions.\n    \"\"\"", "\n", "for", "_", "in", "range", "(", "self", ".", "wl_iterations", ")", ":", "\n", "      ", "self", ".", "features", "=", "self", ".", "_do_a_recursion", "(", ")", "\n", "", "if", "self", ".", "erase_base_features", ":", "\n", "      ", "self", ".", "_erase_base_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing.get_node_features": [[108, 113], ["None"], "methods", ["None"], ["", "", "def", "get_node_features", "(", "self", ")", "->", "Dict", "[", "int", ",", "List", "[", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    Return the node level features.\n    \"\"\"", "\n", "return", "self", ".", "extracted_features", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing.get_graph_features": [[114, 122], ["graph2vec.WeisfeilerLehmanHashing.extracted_features.items"], "methods", ["None"], ["", "def", "get_graph_features", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Return the graph level features.\n    \"\"\"", "\n", "return", "[", "\n", "feature", "\n", "for", "node", ",", "features", "in", "self", ".", "extracted_features", ".", "items", "(", ")", "\n", "for", "feature", "in", "features", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.__init__": [[148, 169], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "wl_iterations", ":", "int", "=", "2", ",", "\n", "node_attributes", "=", "None", ",", "edge_attributes", "=", "None", ",", "\n", "dimensions", ":", "int", "=", "default_dim", ",", "workers", ":", "int", "=", "4", ",", "\n", "down_sampling", ":", "float", "=", "0.0001", ",", "epochs", ":", "int", "=", "10", ",", "\n", "learning_rate", ":", "float", "=", "0.025", ",", "min_count", ":", "int", "=", "5", ",", "\n", "seed", ":", "int", "=", "42", ",", "erase_base_features", ":", "bool", "=", "False", ")", ":", "\n", "\n", "    ", "self", ".", "wl_iterations", "=", "wl_iterations", "\n", "self", ".", "node_attributes", "=", "node_attributes", "\n", "self", ".", "edge_attributes", "=", "edge_attributes", "\n", "self", ".", "dimensions", "=", "dimensions", "\n", "self", ".", "workers", "=", "workers", "\n", "self", ".", "down_sampling", "=", "down_sampling", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "min_count", "=", "min_count", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "erase_base_features", "=", "erase_base_features", "\n", "self", ".", "_model", "=", "None", "\n", "self", ".", "_loaded", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec._graph_to_words": [[170, 176], ["graph2vec.WeisfeilerLehmanHashing", "graph2vec.WeisfeilerLehmanHashing.get_graph_features"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.WeisfeilerLehmanHashing.get_graph_features"], ["", "def", "_graph_to_words", "(", "self", ",", "graph", ")", ":", "\n", "    ", "wl_hashes", "=", "WeisfeilerLehmanHashing", "(", "\n", "graph", ",", "self", ".", "wl_iterations", ",", "self", ".", "erase_base_features", ",", "\n", "self", ".", "node_attributes", ",", "self", ".", "edge_attributes", ")", "\n", "\n", "return", "wl_hashes", ".", "get_graph_features", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load": [[177, 181], ["gensim.models.doc2vec.Doc2Vec.load", "str"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load"], ["", "def", "load", "(", "self", ",", "file", ")", ":", "\n", "    ", "self", ".", "_model", "=", "Doc2Vec", ".", "load", "(", "str", "(", "file", ")", ")", "\n", "self", ".", "_loaded", "=", "True", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.save": [[182, 185], ["graph2vec.Graph2Vec._model.save", "str"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.save"], ["", "def", "save", "(", "self", ",", "file", ")", ":", "\n", "    ", "assert", "self", ".", "_model", "is", "not", "None", ",", "\"Model not yet fitted.\"", "\n", "self", ".", "_model", ".", "save", "(", "str", "(", "file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.fit": [[186, 213], ["random.seed", "numpy.random.seed", "gensim.models.doc2vec.Doc2Vec", "gensim.models.doc2vec.TaggedDocument", "enumerate", "enumerate", "graph2vec.Graph2Vec._graph_to_words", "str", "str"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec._graph_to_words"], ["", "def", "fit", "(", "self", ",", "graphs", ":", "List", "[", "nx", ".", "classes", ".", "graph", ".", "Graph", "]", ")", ":", "\n", "    ", "\"\"\"\n    Fitting a Graph2Vec model.\n    Arg types:\n      * **graphs** *(List of NetworkX graphs)* - The graphs to be embedded.\n    \"\"\"", "\n", "assert", "not", "self", ".", "_loaded", ",", "\"Loaded models cannot be refitted.\"", "\n", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "seed", ")", "\n", "documents", "=", "[", "\n", "TaggedDocument", "(", "words", "=", "self", ".", "_graph_to_words", "(", "g", ")", ",", "tags", "=", "[", "str", "(", "i", ")", "]", ")", "\n", "for", "i", ",", "g", "in", "enumerate", "(", "graphs", ")", "]", "\n", "\n", "model", "=", "Doc2Vec", "(", "\n", "documents", ",", "\n", "vector_size", "=", "self", ".", "dimensions", ",", "\n", "window", "=", "0", ",", "\n", "min_count", "=", "self", ".", "min_count", ",", "\n", "dm", "=", "0", ",", "\n", "sample", "=", "self", ".", "down_sampling", ",", "\n", "workers", "=", "self", ".", "workers", ",", "\n", "epochs", "=", "self", ".", "epochs", ",", "\n", "alpha", "=", "self", ".", "learning_rate", ",", "\n", "seed", "=", "self", ".", "seed", ")", "\n", "\n", "self", ".", "_model", "=", "model", "\n", "self", ".", "_embedding", "=", "[", "model", ".", "dv", "[", "str", "(", "i", ")", "]", "for", "i", ",", "_", "in", "enumerate", "(", "documents", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.get_embedding": [[214, 227], ["numpy.array", "numpy.array", "graph2vec.Graph2Vec._model.infer_vector", "graph2vec.Graph2Vec._graph_to_words"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec._graph_to_words"], ["", "def", "get_embedding", "(", "self", ",", "graphs", "=", "None", ")", "->", "np", ".", "array", ":", "\n", "    ", "r\"\"\"Getting the embedding of graphs.\n    Return types:\n      * **embedding** *(Numpy array)* - The embedding of graphs.\n    \"\"\"", "\n", "assert", "self", ".", "_model", "is", "not", "None", ",", "\"Model not yet fitted.\"", "\n", "\n", "if", "graphs", "is", "None", ":", "\n", "      ", "return", "np", ".", "array", "(", "self", ".", "_embedding", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "\n", "self", ".", "_model", ".", "infer_vector", "(", "self", ".", "_graph_to_words", "(", "g", ")", ")", "\n", "for", "g", "in", "graphs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.__init__": [[233, 269], ["graph2vec.Graph2VecEncoder.node_attributes.append", "graph2vec.Graph2VecEncoder.node_attributes.append", "graph2vec.Graph2VecEncoder.edge_attributes.append", "graph2vec.Graph2VecEncoder.edge_attributes.append"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["def", "__init__", "(", "\n", "self", ",", "T", ":", "int", "=", "3", ",", "embedding_dim", ":", "int", "=", "default_dim", ",", "\n", "node_label_count", "=", "0", ",", "edge_label_count", "=", "0", ",", "\n", "node_feature_dim", "=", "0", ",", "edge_feature_dim", "=", "0", ",", "\n", "discrete_node_features", "=", "False", ",", "discrete_edge_features", "=", "False", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ",", "\n", "ignore_edge_features", "=", "False", ",", "ignore_edge_labels", "=", "False", ")", ":", "\n", "    ", "self", ".", "name", "=", "f\"graph2vec_T{T}_d{embedding_dim}\"", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "node_labels", "=", "node_label_count", ">", "0", "and", "not", "ignore_node_labels", "\n", "self", ".", "edge_labels", "=", "edge_label_count", ">", "0", "and", "not", "ignore_edge_labels", "\n", "self", ".", "node_features", "=", "(", "\n", "discrete_node_features", "and", "not", "ignore_node_features", "\n", "and", "node_feature_dim", ">", "0", ")", "\n", "self", ".", "edge_features", "=", "(", "\n", "discrete_edge_features", "and", "not", "ignore_edge_features", "\n", "and", "edge_feature_dim", ">", "0", ")", "\n", "self", ".", "node_attributes", "=", "[", "]", "\n", "self", ".", "edge_attributes", "=", "[", "]", "\n", "\n", "if", "self", ".", "node_features", ":", "\n", "      ", "self", ".", "node_attributes", ".", "append", "(", "\"features\"", ")", "\n", "self", ".", "name", "+=", "\"_nf\"", "\n", "", "if", "self", ".", "node_labels", ":", "\n", "      ", "self", ".", "node_attributes", ".", "append", "(", "\"label\"", ")", "\n", "", "elif", "ignore_node_labels", "and", "node_label_count", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_inl\"", "\n", "\n", "", "if", "self", ".", "edge_features", ":", "\n", "      ", "self", ".", "edge_attributes", ".", "append", "(", "\"features\"", ")", "\n", "self", ".", "name", "+=", "\"_ef\"", "\n", "", "if", "self", ".", "edge_labels", ":", "\n", "      ", "self", ".", "edge_attributes", ".", "append", "(", "\"label\"", ")", "\n", "", "elif", "ignore_edge_labels", "and", "edge_label_count", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_iel\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.encode_element": [[270, 273], ["AssertionError"], "methods", ["None"], ["", "", "def", "encode_element", "(", "self", ",", "graph", ")", ":", "\n", "    ", "raise", "AssertionError", "(", "\n", "\"Graph-by-graph transformation does not work for gram computation.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder._create_g2v": [[274, 279], ["graph2vec.Graph2Vec"], "methods", ["None"], ["", "def", "_create_g2v", "(", "self", ")", ":", "\n", "    ", "return", "Graph2Vec", "(", "\n", "wl_iterations", "=", "self", ".", "T", ",", "dimensions", "=", "self", ".", "embedding_dim", ",", "\n", "node_attributes", "=", "self", ".", "node_attributes", ",", "\n", "edge_attributes", "=", "self", ".", "edge_attributes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.produce_train_metadata": [[280, 285], ["graph2vec.Graph2VecEncoder._create_g2v", "graph2vec.Graph2VecEncoder.fit"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder._create_g2v", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.fit"], ["", "def", "produce_train_metadata", "(", "self", ",", "graphs", ")", ":", "\n", "    ", "g2v", "=", "self", ".", "_create_g2v", "(", ")", "\n", "g2v", ".", "fit", "(", "graphs", ")", "\n", "\n", "return", "g2v", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform": [[286, 295], ["isinstance", "graph2vec.Graph2VecEncoder.get_embedding", "graph2vec.Graph2VecEncoder._create_g2v", "graph2vec.Graph2VecEncoder.load"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.get_embedding", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder._create_g2v", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load"], ["", "def", "transform", "(", "self", ",", "graphs", ",", "train_metadata", "=", "None", ")", ":", "\n", "    ", "assert", "train_metadata", "is", "not", "None", ",", "\"Embedder not yet trained.\"", "\n", "if", "isinstance", "(", "train_metadata", ",", "Graph2Vec", ")", ":", "\n", "      ", "g2v", "=", "train_metadata", "\n", "", "else", ":", "\n", "      ", "g2v", "=", "self", ".", "_create_g2v", "(", ")", "\n", "g2v", ".", "load", "(", "train_metadata", ")", "\n", "\n", "", "return", "g2v", ".", "get_embedding", "(", "graphs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.WL2Encoder.__init__": [[136, 160], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "radius", "=", "1", ",", "\n", "node_feature_dim", "=", "0", ",", "node_label_count", "=", "0", ",", "\n", "edge_feature_dim", "=", "0", ",", "edge_label_count", "=", "0", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ",", "\n", "ignore_edge_features", "=", "False", ",", "ignore_edge_labels", "=", "False", ")", ":", "\n", "    ", "self", ".", "radius", "=", "radius", "\n", "self", ".", "node_feature_dim", "=", "node_feature_dim", "\n", "self", ".", "node_label_count", "=", "node_label_count", "\n", "self", ".", "edge_feature_dim", "=", "edge_feature_dim", "\n", "self", ".", "edge_label_count", "=", "edge_label_count", "\n", "self", ".", "ignore_node_features", "=", "ignore_node_features", "\n", "self", ".", "ignore_node_labels", "=", "ignore_node_labels", "\n", "self", ".", "ignore_edge_features", "=", "ignore_edge_features", "\n", "self", ".", "ignore_edge_labels", "=", "ignore_edge_labels", "\n", "self", ".", "name", "=", "f\"wl2_r{radius}\"", "\n", "if", "ignore_node_features", "and", "node_feature_dim", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_inf\"", "\n", "", "if", "ignore_node_labels", "and", "node_label_count", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_inl\"", "\n", "", "if", "ignore_edge_features", "and", "edge_feature_dim", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_ief\"", "\n", "", "if", "ignore_edge_labels", "and", "edge_label_count", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_iel\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.WL2Encoder.encode_element": [[161, 168], ["wl2.encode_graph"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.encode_graph"], ["", "", "def", "encode_element", "(", "self", ",", "graph", ")", ":", "\n", "    ", "return", "encode_graph", "(", "\n", "graph", ",", "self", ".", "radius", ",", "\n", "self", ".", "node_feature_dim", ",", "self", ".", "node_label_count", ",", "\n", "self", ".", "edge_feature_dim", ",", "self", ".", "edge_label_count", ",", "\n", "self", ".", "ignore_node_features", ",", "self", ".", "ignore_node_labels", ",", "\n", "self", ".", "ignore_edge_features", ",", "self", ".", "ignore_edge_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.WL2Batcher.__init__": [[178, 186], ["rgnn.Batcher.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["def", "__init__", "(", "self", ",", "space_metric", "=", "\"embeddings_count\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "space_metric", "in", "space_metrics", ",", "\"Unknown WL2 space metric.\"", "\n", "self", ".", "space_metric", "=", "space_metric", "\n", "if", "self", ".", "batch_space_limit", "is", "not", "None", ":", "\n", "      ", "suffix", "=", "f\"_{space_metric}_metric\"", "\n", "self", ".", "name", "+=", "suffix", "\n", "self", ".", "basename", "+=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.WL2Batcher.finalize": [[187, 189], ["wl2.make_wl2_batch"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.make_wl2_batch"], ["", "", "def", "finalize", "(", "self", ",", "graphs", ")", ":", "\n", "    ", "return", "make_wl2_batch", "(", "graphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.WL2Batcher.compute_space": [[190, 192], ["None"], "methods", ["None"], ["", "def", "compute_space", "(", "self", ",", "graph", ",", "batch", ")", ":", "\n", "    ", "return", "space_metrics", "[", "self", ".", "space_metric", "]", "(", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.WL2UtilityPreferenceBatcher.__init__": [[196, 205], ["rgnn.UtilityPreferenceBatcher.__init__", "in_meta.get"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["def", "__init__", "(", "self", ",", "in_meta", ",", "out_meta", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "in_meta", ",", "out_meta", ",", "**", "kwargs", ")", "\n", "self", ".", "space_metric", "=", "in_meta", ".", "get", "(", "\"space_metric\"", ",", "\"embeddings_count\"", ")", "\n", "assert", "self", ".", "space_metric", "in", "space_metrics", ",", "\"Unknown WL2 space metric.\"", "\n", "\n", "if", "self", ".", "batch_space_limit", "is", "not", "None", ":", "\n", "      ", "suffix", "=", "f\"_{self.space_metric}_metric\"", "\n", "self", ".", "name", "+=", "suffix", "\n", "self", ".", "basename", "+=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.WL2UtilityPreferenceBatcher.finalize_objects": [[206, 208], ["wl2.make_wl2_batch"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.make_wl2_batch"], ["", "", "def", "finalize_objects", "(", "self", ",", "graphs", ")", ":", "\n", "    ", "return", "make_wl2_batch", "(", "graphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.WL2UtilityPreferenceBatcher.compute_object_space": [[209, 211], ["None"], "methods", ["None"], ["", "def", "compute_object_space", "(", "self", ",", "graph", ")", ":", "\n", "    ", "return", "space_metrics", "[", "self", ".", "space_metric", "]", "(", "graph", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.feature_dim": [[10, 27], ["None"], "function", ["None"], ["@", "tolerant", "\n", "def", "feature_dim", "(", "\n", "node_feature_dim", "=", "0", ",", "node_label_count", "=", "0", ",", "\n", "edge_feature_dim", "=", "0", ",", "edge_label_count", "=", "0", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ",", "\n", "ignore_edge_features", "=", "False", ",", "ignore_edge_labels", "=", "False", ")", ":", "\n", "  ", "if", "ignore_node_features", ":", "\n", "    ", "node_feature_dim", "=", "0", "\n", "", "if", "ignore_node_labels", ":", "\n", "    ", "node_label_count", "=", "0", "\n", "", "if", "ignore_edge_features", ":", "\n", "    ", "edge_feature_dim", "=", "0", "\n", "", "if", "ignore_edge_labels", ":", "\n", "    ", "edge_label_count", "=", "0", "\n", "\n", "", "return", "3", "+", "node_feature_dim", "+", "node_label_count", "+", "edge_feature_dim", "+", "edge_label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.eid_lookup": [[28, 33], ["None"], "function", ["None"], ["", "def", "eid_lookup", "(", "e_ids", ",", "i", ",", "j", ")", ":", "\n", "  ", "if", "i", ">", "j", ":", "\n", "    ", "i", ",", "j", "=", "j", ",", "i", "\n", "\n", "", "return", "e_ids", "[", "(", "i", ",", "j", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.encode_graph": [[34, 116], ["networkx.power", "nx.power.size", "wl2.feature_dim", "numpy.zeros", "numpy.eye", "numpy.eye", "dict", "nx.power.add_edge", "list", "len", "enumerate", "networkx.common_neighbors", "wl2.eid_lookup", "wl2.eid_lookup", "ref_a.append", "ref_b.append", "g.has_edge", "numpy.array", "numpy.array", "numpy.array", "g.order", "wl2.eid_lookup", "wl2.eid_lookup", "d.get", "d.get"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.feature_dim", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.eid_lookup", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.eid_lookup", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.eid_lookup", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.eid_lookup", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["", "def", "encode_graph", "(", "\n", "g", ",", "radius", "=", "1", ",", "\n", "node_feature_dim", "=", "0", ",", "node_label_count", "=", "0", ",", "\n", "edge_feature_dim", "=", "0", ",", "edge_label_count", "=", "0", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ",", "\n", "ignore_edge_features", "=", "False", ",", "ignore_edge_labels", "=", "False", ")", ":", "\n", "  ", "assert", "radius", ">=", "1", "\n", "\n", "if", "ignore_node_features", ":", "\n", "    ", "node_feature_dim", "=", "0", "\n", "", "if", "ignore_node_labels", ":", "\n", "    ", "node_label_count", "=", "0", "\n", "", "if", "ignore_edge_features", ":", "\n", "    ", "edge_feature_dim", "=", "0", "\n", "", "if", "ignore_edge_labels", ":", "\n", "    ", "edge_label_count", "=", "0", "\n", "\n", "", "g_p", "=", "nx", ".", "power", "(", "g", ",", "radius", ")", "\n", "for", "node", "in", "g", ".", "nodes", ":", "\n", "    ", "g_p", ".", "add_edge", "(", "node", ",", "node", ")", "\n", "\n", "", "e_count", "=", "g_p", ".", "size", "(", ")", "\n", "X_dim", "=", "feature_dim", "(", "\n", "node_feature_dim", ",", "node_label_count", ",", "\n", "edge_feature_dim", ",", "edge_label_count", ")", "\n", "X", "=", "np", ".", "zeros", "(", "(", "e_count", ",", "X_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ref_a", "=", "[", "]", "\n", "ref_b", "=", "[", "]", "\n", "backref", "=", "[", "]", "\n", "I_n", "=", "np", ".", "eye", "(", "node_label_count", ")", "\n", "I_e", "=", "np", ".", "eye", "(", "edge_label_count", ")", "\n", "node_label_offset", "=", "3", "\n", "node_feature_offset", "=", "node_label_offset", "+", "node_label_count", "\n", "edge_label_offset", "=", "node_feature_offset", "+", "node_feature_dim", "\n", "edge_feature_offset", "=", "edge_label_offset", "+", "edge_label_count", "\n", "e_ids", "=", "{", "e", ":", "i", "for", "i", ",", "e", "in", "enumerate", "(", "g_p", ".", "edges", ")", "}", "\n", "i", "=", "0", "\n", "for", "edge", "in", "g_p", ".", "edges", ":", "\n", "    ", "a", ",", "b", "=", "edge", "\n", "neighbors", "=", "list", "(", "nx", ".", "common_neighbors", "(", "g_p", ",", "a", ",", "b", ")", ")", "\n", "n_count", "=", "len", "(", "neighbors", ")", "\n", "n_a", "=", "[", "eid_lookup", "(", "e_ids", ",", "a", ",", "k", ")", "for", "k", "in", "neighbors", "]", "\n", "n_b", "=", "[", "eid_lookup", "(", "e_ids", ",", "b", ",", "k", ")", "for", "k", "in", "neighbors", "]", "\n", "\n", "if", "a", "==", "b", ":", "\n", "      ", "X", "[", "i", ",", "0", "]", "=", "1", "\n", "d", "=", "g", ".", "nodes", "[", "a", "]", "\n", "if", "node_label_count", ">", "0", ":", "\n", "        ", "label", "=", "I_n", "[", "d", ".", "get", "(", "\"label\"", ",", "0", ")", "-", "1", "]", "\n", "X", "[", "i", ",", "node_label_offset", ":", "node_feature_offset", "]", "=", "label", "\n", "", "if", "node_feature_dim", ">", "0", ":", "\n", "        ", "X", "[", "i", ",", "node_feature_offset", ":", "edge_label_offset", "]", "=", "d", "[", "\"features\"", "]", "\n", "\n", "", "ref_a", ".", "append", "(", "i", ")", "\n", "ref_b", ".", "append", "(", "i", ")", "\n", "n_count", "+=", "1", "\n", "", "else", ":", "\n", "      ", "if", "g", ".", "has_edge", "(", "a", ",", "b", ")", ":", "\n", "        ", "X", "[", "i", ",", "1", "]", "=", "1", "\n", "d", "=", "g", ".", "edges", "[", "edge", "]", "\n", "if", "edge_label_count", ">", "0", ":", "\n", "          ", "label", "=", "I_e", "[", "d", ".", "get", "(", "\"label\"", ",", "0", ")", "-", "1", "]", "\n", "X", "[", "i", ",", "edge_label_offset", ":", "edge_feature_offset", "]", "=", "label", "\n", "", "if", "edge_feature_dim", ">", "0", ":", "\n", "          ", "X", "[", "i", ",", "edge_feature_offset", ":", "X_dim", "]", "=", "d", "[", "\"features\"", "]", "\n", "", "", "else", ":", "\n", "        ", "X", "[", "i", ",", "2", "]", "=", "1", "\n", "", "ref_a", "+=", "[", "i", ",", "eid_lookup", "(", "e_ids", ",", "a", ",", "a", ")", "]", "\n", "ref_b", "+=", "[", "eid_lookup", "(", "e_ids", ",", "b", ",", "b", ")", ",", "i", "]", "\n", "n_count", "+=", "2", "\n", "\n", "", "ref_a", "+=", "n_a", "\n", "ref_b", "+=", "n_b", "\n", "backref", "+=", "[", "i", "]", "*", "n_count", "\n", "i", "+=", "1", "\n", "\n", "", "return", "dict", "(", "\n", "X", "=", "X", ",", "\n", "ref_a", "=", "np", ".", "array", "(", "ref_a", ")", ",", "\n", "ref_b", "=", "np", ".", "array", "(", "ref_b", ")", ",", "\n", "backref", "=", "np", ".", "array", "(", "backref", ")", ",", "\n", "n", "=", "g", ".", "order", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.vertex_count": [[117, 119], ["None"], "function", ["None"], ["", "def", "vertex_count", "(", "e", ")", ":", "\n", "  ", "return", "e", "[", "\"n\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.embeddings_count": [[120, 122], ["len"], "function", ["None"], ["", "def", "embeddings_count", "(", "e", ")", ":", "\n", "  ", "return", "len", "(", "e", "[", "\"X\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.total_count": [[123, 125], ["len", "len"], "function", ["None"], ["", "def", "total_count", "(", "e", ")", ":", "\n", "  ", "return", "len", "(", "e", "[", "\"X\"", "]", ")", "+", "len", "(", "e", "[", "\"ref_a\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl2.make_wl2_batch": [[169, 174], ["rgnn.make_graph_batch", "dict"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_graph_batch"], ["", "", "def", "make_wl2_batch", "(", "graphs", ")", ":", "\n", "  ", "return", "enc_utils", ".", "make_graph_batch", "(", "\n", "graphs", ",", "\n", "ref_keys", "=", "[", "\"ref_a\"", ",", "\"ref_b\"", ",", "\"backref\"", "]", ",", "\n", "meta_fns", "=", "dict", "(", "n", "=", "vertex_count", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Encoder.__init__": [[83, 99], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "node_feature_dim", "=", "None", ",", "node_label_count", "=", "None", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ",", "\n", "ordered", "=", "False", ")", ":", "\n", "    ", "self", ".", "node_feature_dim", "=", "node_feature_dim", "\n", "self", ".", "node_label_count", "=", "node_label_count", "\n", "self", ".", "ignore_node_features", "=", "ignore_node_features", "\n", "self", ".", "ignore_node_labels", "=", "ignore_node_labels", "\n", "self", ".", "ordered", "=", "ordered", "\n", "\n", "if", "ordered", ":", "\n", "      ", "self", ".", "name", "+=", "\"_ord\"", "\n", "", "if", "ignore_node_features", "and", "node_feature_dim", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_inf\"", "\n", "", "if", "ignore_node_labels", "and", "node_label_count", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_inl\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Encoder.encode_element": [[100, 113], ["wl1.encode_graph"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.encode_graph"], ["", "", "def", "encode_element", "(", "self", ",", "graph", ")", ":", "\n", "    ", "if", "self", ".", "ordered", ":", "\n", "      ", "graph", ",", "node_ordering", "=", "graph", "\n", "", "else", ":", "\n", "      ", "node_ordering", "=", "None", "\n", "\n", "", "return", "encode_graph", "(", "\n", "graph", ",", "\n", "node_feature_dim", "=", "self", ".", "node_feature_dim", ",", "\n", "node_label_count", "=", "self", ".", "node_label_count", ",", "\n", "ignore_node_features", "=", "self", ".", "ignore_node_features", ",", "\n", "ignore_node_labels", "=", "self", ".", "ignore_node_labels", ",", "\n", "node_ordering", "=", "node_ordering", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Batcher.__init__": [[126, 140], ["rgnn.Batcher.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["def", "__init__", "(", "self", ",", "masking", "=", "False", ",", "space_metric", "=", "\"embeddings_count\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "space_metric", "in", "space_metrics", ",", "\"Unknown WL1 space metric.\"", "\n", "self", ".", "masking", "=", "masking", "\n", "self", ".", "space_metric", "=", "space_metric", "\n", "\n", "suffix", "=", "\"\"", "\n", "if", "self", ".", "batch_space_limit", "is", "not", "None", ":", "\n", "      ", "suffix", "+=", "f\"_{space_metric}_metric\"", "\n", "", "if", "masking", ":", "\n", "      ", "suffix", "+=", "\"_masked\"", "\n", "\n", "", "self", ".", "name", "+=", "suffix", "\n", "self", ".", "basename", "+=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Batcher.finalize": [[141, 143], ["wl1.make_wl1_batch"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.make_wl1_batch"], ["", "def", "finalize", "(", "self", ",", "graphs", ")", ":", "\n", "    ", "return", "make_wl1_batch", "(", "graphs", ",", "self", ".", "masking", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1Batcher.compute_space": [[144, 146], ["None"], "methods", ["None"], ["", "def", "compute_space", "(", "self", ",", "graph", ",", "batch", ")", ":", "\n", "    ", "return", "space_metrics", "[", "self", ".", "space_metric", "]", "(", "graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1UtilityPreferenceBatcher.__init__": [[150, 165], ["rgnn.UtilityPreferenceBatcher.__init__", "in_meta.get", "in_meta.get"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["def", "__init__", "(", "\n", "self", ",", "in_meta", ",", "out_meta", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "in_meta", ",", "out_meta", ",", "**", "kwargs", ")", "\n", "self", ".", "space_metric", "=", "in_meta", ".", "get", "(", "\"space_metric\"", ",", "\"embeddings_count\"", ")", "\n", "assert", "self", ".", "space_metric", "in", "space_metrics", ",", "\"Unknown WL1 space metric.\"", "\n", "self", ".", "masking", "=", "in_meta", ".", "get", "(", "\"masking\"", ",", "False", ")", "\n", "\n", "suffix", "=", "\"\"", "\n", "if", "self", ".", "batch_space_limit", "is", "not", "None", ":", "\n", "      ", "suffix", "+=", "f\"_{self.space_metric}_metric\"", "\n", "", "if", "self", ".", "masking", ":", "\n", "      ", "suffix", "+=", "\"_masked\"", "\n", "\n", "", "self", ".", "name", "+=", "suffix", "\n", "self", ".", "basename", "+=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1UtilityPreferenceBatcher.finalize_objects": [[166, 168], ["wl1.make_wl1_batch"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.make_wl1_batch"], ["", "def", "finalize_objects", "(", "self", ",", "graphs", ")", ":", "\n", "    ", "return", "make_wl1_batch", "(", "graphs", ",", "self", ".", "masking", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.WL1UtilityPreferenceBatcher.compute_object_space": [[169, 171], ["None"], "methods", ["None"], ["", "def", "compute_object_space", "(", "self", ",", "graph", ")", ":", "\n", "    ", "return", "space_metrics", "[", "self", ".", "space_metric", "]", "(", "graph", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.feature_dim": [[9, 19], ["max"], "function", ["None"], ["@", "tolerant", "\n", "def", "feature_dim", "(", "\n", "node_feature_dim", "=", "0", ",", "node_label_count", "=", "0", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ")", ":", "\n", "  ", "if", "ignore_node_features", ":", "\n", "    ", "node_feature_dim", "=", "0", "\n", "", "if", "ignore_node_labels", ":", "\n", "    ", "node_label_count", "=", "0", "\n", "\n", "", "return", "max", "(", "node_feature_dim", "+", "node_label_count", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.encode_graph": [[20, 67], ["g.order", "g.size", "wl1.feature_dim", "numpy.eye", "x_init", "numpy.zeros", "numpy.zeros", "g.edges", "dict"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.feature_dim"], ["", "def", "encode_graph", "(", "\n", "g", ",", "node_ordering", "=", "None", ",", "\n", "node_feature_dim", "=", "None", ",", "node_label_count", "=", "None", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ")", ":", "\n", "  ", "if", "node_feature_dim", "is", "None", "or", "ignore_node_features", ":", "\n", "    ", "node_feature_dim", "=", "0", "\n", "\n", "", "if", "node_label_count", "is", "None", "or", "ignore_node_labels", ":", "\n", "    ", "node_label_count", "=", "0", "\n", "\n", "", "if", "node_ordering", "is", "None", ":", "\n", "    ", "node_ordering", "=", "g", ".", "nodes", "\n", "\n", "", "n_count", "=", "g", ".", "order", "(", ")", "\n", "e_count", "=", "g", ".", "size", "(", ")", "\n", "node_dim", "=", "feature_dim", "(", "node_feature_dim", ",", "node_label_count", ")", "\n", "I_n", "=", "np", ".", "eye", "(", "node_label_count", ")", "\n", "if", "node_feature_dim", ">", "0", "or", "node_label_count", ">", "0", ":", "\n", "    ", "x_init", "=", "np", ".", "zeros", "\n", "", "else", ":", "\n", "    ", "x_init", "=", "np", ".", "ones", "\n", "", "X", "=", "x_init", "(", "(", "n_count", ",", "node_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ref_a", "=", "np", ".", "zeros", "(", "e_count", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "ref_b", "=", "np", ".", "zeros", "(", "e_count", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "n_ids", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "node", "in", "node_ordering", ":", "\n", "    ", "data", "=", "g", ".", "nodes", "[", "node", "]", "\n", "if", "node_label_count", ">", "0", ":", "\n", "      ", "X", "[", "i", ",", "0", ":", "node_label_count", "]", "=", "I_n", "[", "data", "[", "\"label\"", "]", "-", "1", "]", "\n", "", "if", "node_feature_dim", ">", "0", ":", "\n", "      ", "X", "[", "i", ",", "node_label_count", ":", "node_dim", "]", "=", "data", "[", "\"features\"", "]", "\n", "\n", "", "n_ids", "[", "node", "]", "=", "i", "\n", "i", "+=", "1", "\n", "\n", "", "i", "=", "0", "\n", "for", "a", ",", "b", "in", "g", ".", "edges", "(", ")", ":", "\n", "    ", "ref_a", "[", "i", "]", "=", "n_ids", "[", "a", "]", "\n", "ref_b", "[", "i", "]", "=", "n_ids", "[", "b", "]", "\n", "i", "+=", "1", "\n", "\n", "", "return", "dict", "(", "\n", "X", "=", "X", ",", "\n", "ref_a", "=", "ref_a", ",", "\n", "ref_b", "=", "ref_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.vertex_count": [[68, 70], ["len"], "function", ["None"], ["", "def", "vertex_count", "(", "e", ")", ":", "\n", "  ", "return", "len", "(", "e", "[", "\"X\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.total_count": [[71, 73], ["len", "len"], "function", ["None"], ["", "def", "total_count", "(", "e", ")", ":", "\n", "  ", "return", "len", "(", "e", "[", "\"X\"", "]", ")", "+", "len", "(", "e", "[", "\"ref_a\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.wl1.make_wl1_batch": [[114, 122], ["rgnn.make_graph_batch", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_graph_batch"], ["", "", "def", "make_wl1_batch", "(", "graphs", ",", "masking", "=", "False", ")", ":", "\n", "  ", "return", "enc_utils", ".", "make_graph_batch", "(", "\n", "graphs", ",", "\n", "ref_keys", "=", "[", "\"ref_a\"", ",", "\"ref_b\"", "]", ",", "\n", "masking_fns", "=", "dict", "(", "\n", "ref_a_idx", "=", "lambda", "e", ":", "e", "[", "\"ref_a\"", "]", ",", "\n", "ref_b_idx", "=", "lambda", "e", ":", "e", "[", "\"ref_b\"", "]", ")", "if", "masking", "else", "None", ",", "\n", "meta_fns", "=", "dict", "(", "n", "=", "vertex_count", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.__init__": [[22, 47], ["collections.defaultdict"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "loader", ":", "ldr", ".", "DatasetLoader", ",", "\n", "outer_k", "=", "10", ",", "inner_k", "=", "None", ",", "\n", "inner_holdout", "=", "0.1", ",", "\n", "outer_holdout", "=", "0.1", ",", "\n", "default_split", "=", "0", ",", "\n", "default_preprocess_config", "=", "None", ",", "\n", "stratify", "=", "True", ",", "\n", "name_suffix", "=", "\"\"", ",", "\n", "in_memory_cache", "=", "True", ")", ":", "\n", "    ", "self", ".", "loader", "=", "loader", "\n", "assert", "outer_k", "is", "None", "or", "outer_k", ">", "0", "\n", "self", ".", "outer_k", "=", "outer_k", "\n", "assert", "inner_k", "is", "None", "or", "inner_k", ">", "0", "\n", "self", ".", "inner_k", "=", "inner_k", "\n", "assert", "outer_k", "is", "not", "None", "or", "outer_holdout", "is", "not", "None", "\n", "assert", "inner_k", "is", "not", "None", "or", "inner_holdout", "is", "not", "None", "\n", "self", ".", "outer_holdout", "=", "outer_holdout", "\n", "self", ".", "inner_holdout", "=", "inner_holdout", "\n", "self", ".", "default_split", "=", "default_split", "\n", "self", ".", "default_preprocess_config", "=", "default_preprocess_config", "\n", "self", ".", "stratify", "=", "stratify", "and", "loader", ".", "stratifiable", "\n", "self", ".", "name_suffix", "=", "name_suffix", "\n", "self", ".", "in_memory_cache", "=", "in_memory_cache", "\n", "self", ".", "_train_metadata_lut", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.in_meta": [[48, 51], ["provider.DatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "in_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"in_meta\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.out_meta": [[52, 55], ["provider.DatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "out_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"out_meta\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.full_name": [[56, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full_name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "name", "+", "self", ".", "name_suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.dataset": [[60, 63], ["provider.DatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ")", "[", "\"elements\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.dataset_size": [[64, 67], ["provider.DatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "dataset_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"size\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.stratify_labels": [[68, 74], ["provider.DatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "stratify_labels", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "stratify", ":", "\n", "      ", "return", "None", "\n", "\n", "", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ")", "[", "\"stratify_labels\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.dataset_type": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset_type", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "loader", ".", "dataset_type", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.stats": [[79, 82], ["provider.DatasetProvider._get_stats"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._get_stats"], ["", "@", "property", "\n", "def", "stats", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_get_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.splits": [[83, 89], ["provider.DatasetProvider._make_splits"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._make_splits"], ["", "@", "property", "\n", "def", "splits", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_splits", "is", "None", ":", "\n", "      ", "self", ".", "_splits", "=", "self", ".", "_make_splits", "(", ")", "\n", "\n", "", "return", "self", ".", "_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.named_splits": [[90, 96], ["provider.DatasetProvider._get_named_splits"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._get_named_splits"], ["", "@", "property", "\n", "def", "named_splits", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_named_splits", "is", "None", ":", "\n", "      ", "self", ".", "_named_splits", "=", "self", ".", "_get_named_splits", "(", ")", "\n", "\n", "", "return", "self", ".", "_named_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._load_dataset": [[97, 99], ["provider.DatasetProvider.loader.load_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.load_dataset"], ["", "def", "_load_dataset", "(", "self", ",", "only_meta", "=", "False", ",", "id", "=", "None", ")", ":", "\n", "    ", "return", "self", ".", "loader", ".", "load_dataset", "(", "only_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._cache_dataset": [[100, 108], ["provider.DatasetProvider._load_dataset", "provider.DatasetProvider._load_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset"], ["", "def", "_cache_dataset", "(", "self", ",", "only_meta", "=", "False", ",", "id", "=", "None", ")", ":", "\n", "    ", "if", "not", "self", ".", "in_memory_cache", ":", "\n", "      ", "return", "self", ".", "_load_dataset", "(", "only_meta", ",", "id", ")", "\n", "\n", "", "if", "self", ".", "_dataset", "is", "None", "or", "not", "(", "only_meta", "or", "\"elements\"", "in", "self", ".", "_dataset", ")", ":", "\n", "      ", "self", ".", "_dataset", "=", "self", ".", "_load_dataset", "(", "only_meta", ",", "id", ")", "\n", "\n", "", "return", "self", ".", "_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.unload_dataset": [[109, 111], ["None"], "methods", ["None"], ["", "def", "unload_dataset", "(", "self", ")", ":", "\n", "    ", "self", ".", "_dataset", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.unload_train_metadata": [[112, 114], ["collections.defaultdict"], "methods", ["None"], ["", "def", "unload_train_metadata", "(", "self", ")", ":", "\n", "    ", "self", ".", "_train_metadata_lut", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.__make_model_selection_splits": [[115, 127], ["rgnn.make_holdout_split", "rgnn.make_holdout_split", "rgnn.make_holdout_split", "rgnn.make_holdout_split", "rgnn.make_holdout_split", "dict", "dict", "rgnn.make_kfold_splits", "rgnn.make_kfold_splits", "rgnn.make_kfold_splits", "rgnn.make_kfold_splits", "rgnn.make_kfold_splits"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits"], ["", "def", "__make_model_selection_splits", "(", "self", ",", "train_o", ",", "strat_o", "=", "None", ")", ":", "\n", "    ", "if", "self", ".", "inner_k", "is", "None", ":", "\n", "      ", "train_i", ",", "val_i", ",", "_", "=", "preproc_utils", ".", "make_holdout_split", "(", "\n", "self", ".", "inner_holdout", ",", "train_o", ",", "strat_o", ")", "\n", "return", "[", "dict", "(", "\n", "train", "=", "train_i", ",", "\n", "validation", "=", "val_i", ")", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "dict", "(", "train", "=", "train_i", ",", "validation", "=", "val_i", ")", "\n", "for", "train_i", ",", "val_i", ",", "_", "in", "preproc_utils", ".", "make_kfold_splits", "(", "\n", "self", ".", "inner_k", ",", "train_o", ",", "strat_o", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._make_splits": [[128, 145], ["numpy.arange", "rgnn.make_holdout_split", "rgnn.make_holdout_split", "rgnn.make_holdout_split", "rgnn.make_holdout_split", "rgnn.make_holdout_split", "dict", "dict", "rgnn.make_kfold_splits", "rgnn.make_kfold_splits", "rgnn.make_kfold_splits", "rgnn.make_kfold_splits", "rgnn.make_kfold_splits", "provider.DatasetProvider.__make_model_selection_splits", "provider.DatasetProvider.__make_model_selection_splits"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_kfold_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.__make_model_selection_splits", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.__make_model_selection_splits"], ["", "", "def", "_make_splits", "(", "self", ")", ":", "\n", "    ", "all_idxs", "=", "np", ".", "arange", "(", "self", ".", "dataset_size", ")", "\n", "strat_labels", "=", "self", ".", "stratify_labels", "\n", "\n", "if", "self", ".", "outer_k", "is", "None", ":", "\n", "      ", "train_o", ",", "test_o", ",", "strat_o", "=", "preproc_utils", ".", "make_holdout_split", "(", "\n", "self", ".", "outer_holdout", ",", "all_idxs", ",", "strat_labels", ")", "\n", "return", "[", "dict", "(", "\n", "test", "=", "test_o", ",", "\n", "model_selection", "=", "self", ".", "__make_model_selection_splits", "(", "train_o", ",", "strat_o", ")", ")", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "dict", "(", "\n", "test", "=", "test_o", ",", "\n", "model_selection", "=", "self", ".", "__make_model_selection_splits", "(", "train_o", ",", "strat_o", ")", ")", "\n", "for", "train_o", ",", "test_o", ",", "strat_o", "in", "preproc_utils", ".", "make_kfold_splits", "(", "\n", "self", ".", "outer_k", ",", "all_idxs", ",", "strat_labels", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._make_named_splits": [[146, 148], ["dict"], "methods", ["None"], ["", "", "def", "_make_named_splits", "(", "self", ")", ":", "\n", "    ", "return", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_named_splits": [[149, 151], ["provider.DatasetProvider._make_named_splits"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetProvider._make_named_splits"], ["", "def", "_get_named_splits", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_make_named_splits", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_preprocessor": [[152, 161], ["rgnn.find_preprocessor", "rgnn.find_preprocessor", "rgnn.find_preprocessor", "rgnn.find_preprocessor", "rgnn.find_preprocessor", "funcy.merge"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_preprocessor"], ["", "def", "_get_preprocessor", "(", "self", ",", "enc", ",", "config", ",", "reconfigurable_finalization", "=", "False", ")", ":", "\n", "    ", "if", "self", ".", "default_preprocess_config", "is", "not", "None", ":", "\n", "      ", "if", "config", "is", "None", ":", "\n", "        ", "config", "=", "self", ".", "default_preprocess_config", "\n", "", "else", ":", "\n", "        ", "config", "=", "fy", ".", "merge", "(", "self", ".", "default_preprocess_config", ",", "config", ")", "\n", "\n", "", "", "return", "preproc", ".", "find_preprocessor", "(", "self", ".", "dataset_type", ",", "enc", ")", "(", "\n", "self", ".", "in_meta", ",", "self", ".", "out_meta", ",", "config", ",", "reconfigurable_finalization", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_train_metadata_key": [[162, 167], ["isinstance"], "methods", ["None"], ["", "def", "_get_train_metadata_key", "(", "self", ",", "index_id", ",", "ds_id", "=", "None", ")", ":", "\n", "    ", "if", "index_id", "is", "None", ":", "\n", "      ", "return", "None", "\n", "", "assert", "isinstance", "(", "index_id", ",", "tuple", ")", ",", "f\"Unsupported index id {index_id}.\"", "\n", "return", "index_id", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_train_metadata_hook": [[168, 184], ["provider.DatasetProvider._get_train_metadata_key", "produce_metadata"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._get_train_metadata_key"], ["", "def", "_get_train_metadata_hook", "(", "self", ",", "pre", ",", "index_id", ",", "ds_id", "=", "None", ")", ":", "\n", "    ", "key", "=", "self", ".", "_get_train_metadata_key", "(", "index_id", ",", "ds_id", ")", "\n", "pre_name", "=", "pre", ".", "preprocessed_name", "\n", "pre_names", "=", "pre", ".", "preprocessed_names", "\n", "\n", "def", "hook", "(", "produce_metadata", ",", "i", ")", ":", "\n", "      ", "key2", "=", "pre_names", "[", "i", "]", "if", "i", "is", "not", "None", "else", "pre_name", "\n", "if", "key2", "in", "self", ".", "_train_metadata_lut", "[", "key", "]", ":", "\n", "        ", "return", "self", ".", "_train_metadata_lut", "[", "key", "]", "[", "key2", "]", "\n", "", "metadata", "=", "produce_metadata", "(", "i", ")", "\n", "self", ".", "_train_metadata_lut", "[", "key", "]", "[", "key2", "]", "=", "metadata", "\n", "return", "metadata", "\n", "\n", "", "hook", ".", "key", "=", "key", "\n", "\n", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._preprocess": [[185, 191], ["pre.hooked_transform", "provider.DatasetProvider._get_train_metadata_hook"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.hooked_transform", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_train_metadata_hook"], ["", "def", "_preprocess", "(", "\n", "self", ",", "pre", ":", "preproc", ".", "Preprocessor", ",", "ds_get", ",", "indices", ",", "train_indices", ",", "\n", "index_id", "=", "None", ",", "finalize", "=", "True", ",", "ds_id", "=", "None", ",", "train_ds_get", "=", "None", ")", ":", "\n", "    ", "return", "pre", ".", "hooked_transform", "(", "\n", "ds_get", ",", "indices", ",", "train_indices", ",", "train_ds_get", ",", "finalize", ",", "\n", "train_metadata_hook", "=", "self", ".", "_get_train_metadata_hook", "(", "pre", ",", "index_id", ",", "ds_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get": [[192, 216], ["provider.DatasetProvider._preprocess", "provider.DatasetProvider._get_preprocessor", "numpy.random.shuffle", "numpy.arange", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._preprocess", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_preprocessor"], ["", "def", "get", "(", "\n", "self", ",", "enc", "=", "None", ",", "config", "=", "None", ",", "\n", "indices", "=", "None", ",", "train_indices", "=", "None", ",", "\n", "preprocessor", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "index_id", "=", "None", ",", "finalize", "=", "True", ",", "\n", "reconfigurable_finalization", "=", "False", ")", ":", "\n", "    ", "if", "preprocessor", "is", "None", ":", "\n", "      ", "preprocessor", "=", "self", ".", "_get_preprocessor", "(", "\n", "enc", ",", "config", ",", "reconfigurable_finalization", ")", "\n", "", "if", "shuffle", ":", "\n", "      ", "if", "indices", "is", "None", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "self", ".", "dataset_size", ")", "\n", "", "else", ":", "\n", "        ", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "if", "index_id", "is", "None", ":", "\n", "        ", "index_id", "=", "(", "\"shuffled\"", ",", ")", "\n", "", "else", ":", "\n", "        ", "index_id", "=", "(", "\"shuffled\"", ",", ")", "+", "index_id", "\n", "\n", "", "", "return", "self", ".", "_preprocess", "(", "\n", "preprocessor", ",", "lambda", ":", "self", ".", "dataset", ",", "\n", "indices", ",", "train_indices", ",", "index_id", ",", "finalize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get_split_indices": [[217, 240], ["isinstance", "numpy.arange", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "get_split_indices", "(", "self", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "relative", "=", "False", ")", ":", "\n", "    ", "outer_idx", "=", "outer_idx", "or", "self", ".", "default_split", "\n", "inner_idx", "=", "inner_idx", "or", "0", "\n", "\n", "if", "isinstance", "(", "outer_idx", ",", "str", ")", ":", "\n", "      ", "split", "=", "self", ".", "named_splits", "[", "outer_idx", "]", "\n", "", "else", ":", "\n", "      ", "assert", "(", "outer_idx", "==", "0", "or", "outer_idx", "<", "self", ".", "outer_k", ")", "and", "(", "inner_idx", "==", "0", "or", "inner_idx", "<", "self", ".", "inner_k", ")", "\n", "split", "=", "self", ".", "splits", "[", "outer_idx", "]", "\n", "\n", "", "inner_fold", "=", "split", "[", "\"model_selection\"", "]", "[", "inner_idx", "]", "\n", "test_idxs", "=", "split", "[", "\"test\"", "]", "\n", "train_idxs", "=", "inner_fold", "[", "\"train\"", "]", "\n", "val_idxs", "=", "inner_fold", "[", "\"validation\"", "]", "\n", "\n", "if", "relative", ":", "\n", "      ", "return", "(", "\n", "np", ".", "arange", "(", "train_idxs", ".", "size", ")", ",", "\n", "np", ".", "arange", "(", "val_idxs", ".", "size", ")", ",", "\n", "np", ".", "arange", "(", "test_idxs", ".", "size", ")", ")", "\n", "\n", "", "return", "train_idxs", ",", "val_idxs", ",", "test_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get_train_split_indices": [[241, 244], ["provider.DatasetProvider.get_split_indices"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split_indices"], ["", "def", "get_train_split_indices", "(", "\n", "self", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "relative", "=", "False", ")", ":", "\n", "    ", "return", "self", ".", "get_split_indices", "(", "outer_idx", ",", "inner_idx", ",", "relative", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get_validation_split_indices": [[245, 248], ["provider.DatasetProvider.get_split_indices"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split_indices"], ["", "def", "get_validation_split_indices", "(", "\n", "self", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "relative", "=", "False", ")", ":", "\n", "    ", "return", "self", ".", "get_split_indices", "(", "outer_idx", ",", "inner_idx", ",", "relative", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get_test_split_indices": [[249, 252], ["provider.DatasetProvider.get_split_indices"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split_indices"], ["", "def", "get_test_split_indices", "(", "\n", "self", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "relative", "=", "False", ")", ":", "\n", "    ", "return", "self", ".", "get_split_indices", "(", "outer_idx", ",", "inner_idx", ",", "relative", ")", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get_split": [[253, 304], ["provider.DatasetProvider.get_split_indices", "provider.DatasetProvider._get_preprocessor", "config.get", "numpy.concatenate", "provider.DatasetProvider.get", "provider.DatasetProvider.get", "provider.DatasetProvider.get", "AssertionError"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split_indices", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["", "def", "get_split", "(", "\n", "self", ",", "enc", "=", "None", ",", "config", "=", "None", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "\n", "only", "=", "None", ",", "finalize", "=", "True", ",", "reconfigurable_finalization", "=", "False", ",", "\n", "indices", "=", "None", ")", ":", "\n", "    ", "assert", "indices", "is", "None", "or", "only", "is", "not", "None", ",", "\"Index subsets can only be provided if a single split is requested.\"", "\n", "outer_idx", "=", "outer_idx", "or", "self", ".", "default_split", "\n", "inner_idx", "=", "inner_idx", "or", "0", "\n", "train_idxs", ",", "val_idxs", ",", "test_idxs", "=", "self", ".", "get_split_indices", "(", "\n", "outer_idx", ",", "inner_idx", ")", "\n", "pre", "=", "self", ".", "_get_preprocessor", "(", "enc", ",", "config", ",", "reconfigurable_finalization", ")", "\n", "no_validation", "=", "config", "is", "not", "None", "and", "config", ".", "get", "(", "\"no_validation\"", ",", "False", ")", "\n", "\n", "if", "no_validation", ":", "\n", "      ", "train_idxs", "=", "np", ".", "concatenate", "(", "[", "train_idxs", ",", "val_idxs", "]", ")", "\n", "\n", "", "if", "only", "is", "None", "or", "only", "==", "\"train\"", ":", "\n", "      ", "if", "indices", "is", "not", "None", ":", "\n", "        ", "train_idxs", "=", "train_idxs", "[", "indices", "]", "\n", "\n", "", "train_ds", "=", "self", ".", "get", "(", "\n", "enc", ",", "indices", "=", "train_idxs", ",", "preprocessor", "=", "pre", ",", "\n", "index_id", "=", "(", "outer_idx", ",", "inner_idx", ",", "\"train\"", ")", ",", "finalize", "=", "finalize", ")", "\n", "if", "only", "==", "\"train\"", ":", "\n", "        ", "return", "train_ds", "\n", "\n", "", "", "if", "only", "is", "None", "or", "only", "==", "\"test\"", ":", "\n", "      ", "if", "indices", "is", "not", "None", ":", "\n", "        ", "test_idxs", "=", "test_idxs", "[", "indices", "]", "\n", "\n", "", "test_ds", "=", "self", ".", "get", "(", "\n", "enc", ",", "indices", "=", "test_idxs", ",", "train_indices", "=", "train_idxs", ",", "preprocessor", "=", "pre", ",", "\n", "index_id", "=", "(", "outer_idx", ",", "inner_idx", ",", "\"test\"", ")", ",", "finalize", "=", "finalize", ")", "\n", "if", "only", "==", "\"test\"", ":", "\n", "        ", "return", "test_ds", "\n", "\n", "", "", "if", "not", "no_validation", ":", "\n", "      ", "if", "indices", "is", "not", "None", ":", "\n", "        ", "val_idxs", "=", "val_idxs", "[", "indices", "]", "\n", "\n", "", "val_ds", "=", "self", ".", "get", "(", "\n", "enc", ",", "indices", "=", "val_idxs", ",", "train_indices", "=", "train_idxs", ",", "preprocessor", "=", "pre", ",", "\n", "index_id", "=", "(", "outer_idx", ",", "inner_idx", ",", "\"val\"", ")", ",", "finalize", "=", "finalize", ")", "\n", "if", "only", "is", "None", ":", "\n", "        ", "return", "train_ds", ",", "val_ds", ",", "test_ds", "\n", "", "elif", "only", "==", "\"val\"", ":", "\n", "        ", "return", "val_ds", "\n", "", "raise", "AssertionError", "(", "f\"Invalid only-selector: {only}.\"", ")", "\n", "", "else", ":", "\n", "      ", "assert", "only", "is", "None", ",", "f\"Invalid only-selector: {only}.\"", "\n", "return", "train_ds", ",", "test_ds", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get_train_split": [[305, 312], ["provider.DatasetProvider.get_split"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split"], ["", "", "def", "get_train_split", "(", "\n", "self", ",", "enc", "=", "None", ",", "config", "=", "None", ",", "\n", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "finalize", "=", "True", ",", "\n", "reconfigurable_finalization", "=", "False", ",", "indices", "=", "None", ")", ":", "\n", "    ", "return", "self", ".", "get_split", "(", "\n", "enc", ",", "config", ",", "outer_idx", ",", "inner_idx", ",", "\"train\"", ",", "finalize", ",", "\n", "reconfigurable_finalization", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get_validation_split": [[313, 320], ["provider.DatasetProvider.get_split"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split"], ["", "def", "get_validation_split", "(", "\n", "self", ",", "enc", "=", "None", ",", "config", "=", "None", ",", "\n", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "finalize", "=", "True", ",", "\n", "reconfigurable_finalization", "=", "False", ",", "indices", "=", "None", ")", ":", "\n", "    ", "return", "self", ".", "get_split", "(", "\n", "enc", ",", "config", ",", "outer_idx", ",", "inner_idx", ",", "\"val\"", ",", "finalize", ",", "\n", "reconfigurable_finalization", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.get_test_split": [[321, 328], ["provider.DatasetProvider.get_split"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split"], ["", "def", "get_test_split", "(", "\n", "self", ",", "enc", "=", "None", ",", "config", "=", "None", ",", "\n", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "finalize", "=", "True", ",", "\n", "reconfigurable_finalization", "=", "False", ",", "indices", "=", "None", ")", ":", "\n", "    ", "return", "self", ".", "get_split", "(", "\n", "enc", ",", "config", ",", "outer_idx", ",", "inner_idx", ",", "\"test\"", ",", "finalize", ",", "\n", "reconfigurable_finalization", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._compute_stats": [[329, 343], ["isinstance", "rgnn.find_stat_computer", "rgnn.find_stat_computer", "rgnn.find_stat_computer", "rgnn.find_stat_computer", "rgnn.find_stat_computer", "len"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer"], ["", "def", "_compute_stats", "(", "self", ")", ":", "\n", "    ", "t", "=", "self", ".", "dataset_type", "\n", "named_splits", "=", "self", ".", "named_splits", "\n", "\n", "if", "named_splits", "is", "None", "or", "len", "(", "named_splits", ")", "==", "0", ":", "\n", "      ", "named_splits", "=", "None", "\n", "\n", "", "res", "=", "stats", ".", "find_stat_computer", "(", "t", ")", "(", "\n", "self", ".", "dataset", ",", "named_splits", ")", "\n", "\n", "if", "isinstance", "(", "t", ",", "tuple", ")", ":", "\n", "      ", "return", "{", "\"in\"", ":", "res", "[", "0", "]", ",", "\"out\"", ":", "res", "[", "1", "]", "}", "\n", "", "else", ":", "\n", "      ", "return", "{", "\"in\"", ":", "res", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_stats": [[344, 351], ["dict", "provider.DatasetProvider._compute_stats"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._compute_stats"], ["", "", "def", "_get_stats", "(", "self", ")", ":", "\n", "    ", "return", "dict", "(", "\n", "type", "=", "self", ".", "dataset_type", ",", "\n", "**", "self", ".", "_compute_stats", "(", ")", ",", "\n", "size", "=", "self", ".", "dataset_size", ",", "\n", "in_meta", "=", "self", ".", "in_meta", ",", "\n", "out_meta", "=", "self", ".", "out_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.find_compatible_encodings": [[352, 372], ["rgnn.find_encodings", "rgnn.find_encodings", "rgnn.find_encodings", "rgnn.find_encodings", "rgnn.find_encodings", "set", "set", "funcy.filter", "hasattr", "hasattr", "hasattr", "len"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_encodings", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_encodings", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_encodings", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_encodings", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.find_encodings"], ["", "def", "find_compatible_encodings", "(", "\n", "self", ",", "input_encodings", ",", "output_encodings", "=", "None", ",", "family", "=", "None", ")", ":", "\n", "    ", "if", "family", "is", "None", "and", "hasattr", "(", "input_encodings", ",", "\"family\"", ")", ":", "\n", "      ", "family", "=", "input_encodings", ".", "family", "\n", "\n", "", "if", "output_encodings", "is", "None", "and", "hasattr", "(", "input_encodings", ",", "\"input_encodings\"", ")", "and", "hasattr", "(", "input_encodings", ",", "\"output_encodings\"", ")", ":", "\n", "      ", "output_encodings", "=", "input_encodings", ".", "output_encodings", "\n", "input_encodings", "=", "input_encodings", ".", "input_encodings", "\n", "\n", "", "compatible_encodings", "=", "preproc", ".", "find_encodings", "(", "self", ".", "dataset_type", ")", "\n", "in_set", "=", "set", "(", "input_encodings", ")", "\n", "out_set", "=", "set", "(", "output_encodings", ")", "\n", "\n", "return", "fy", ".", "filter", "(", "\n", "lambda", "enc", ":", "(", "\n", "enc", "[", "0", "]", "in", "in_set", "and", "enc", "[", "1", "]", "in", "out_set", "\n", "and", "(", "family", "is", "None", "or", "len", "(", "enc", ")", "<", "3", "or", "enc", "[", "2", "]", "==", "family", ")", ")", ",", "\n", "compatible_encodings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider.__init__": [[377, 386], ["provider.DatasetProvider.__init__", "rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir"], ["def", "__init__", "(", "\n", "self", ",", "*", "args", ",", "load_cache", "=", "True", ",", "preprocessed_cache", "=", "True", ",", "\n", "finalize_cache", "=", "False", ",", "\n", "cache", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "load_cache", "=", "cache", "and", "load_cache", "\n", "self", ".", "preprocessed_cache", "=", "cache", "and", "preprocessed_cache", "\n", "self", ".", "finalize_cache", "=", "cache", "and", "finalize_cache", "\n", "self", ".", "data_dir", "=", "utils", ".", "make_dir", "(", "self", ".", "root_dir", "/", "self", ".", "full_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._load_dataset": [[387, 415], ["rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir", "checked_file.exists", "provider.DatasetProvider._load_dataset", "provider.DatasetProvider._load_dataset", "rgnn.cache_read", "rgnn.cache_read", "rgnn.cache_read", "rgnn.cache_read", "rgnn.cache_read", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write", "meta_cache_file.exists", "super()._load_dataset.copy", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write", "meta_cache_file.exists", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write", "rgnn.cache_write"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_read", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_read", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_read", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_read", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_read", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write"], ["", "def", "_load_dataset", "(", "self", ",", "only_meta", "=", "False", ",", "id", "=", "None", ")", ":", "\n", "    ", "if", "not", "self", ".", "load_cache", ":", "\n", "      ", "return", "super", "(", ")", ".", "_load_dataset", "(", "only_meta", ",", "id", ")", "\n", "\n", "", "dir", "=", "utils", ".", "make_dir", "(", "self", ".", "data_dir", "/", "\"processed\"", ")", "\n", "suffix", "=", "f\"_{id}\"", "if", "id", "is", "not", "None", "else", "\"\"", "\n", "meta_cache_file", "=", "dir", "/", "f\"{self.name}{suffix}_meta.json\"", "\n", "data_cache_file", "=", "dir", "/", "f\"{self.name}{suffix}.pickle\"", "\n", "checked_file", "=", "meta_cache_file", "if", "only_meta", "else", "data_cache_file", "\n", "checked_format", "=", "\"json\"", "if", "only_meta", "else", "\"pickle\"", "\n", "\n", "if", "checked_file", ".", "exists", "(", ")", ":", "\n", "      ", "return", "utils", ".", "cache_read", "(", "checked_file", ",", "checked_format", ")", "\n", "\n", "", "ds", "=", "super", "(", ")", ".", "_load_dataset", "(", "only_meta", ",", "id", ")", "\n", "\n", "if", "\"elements\"", "in", "ds", ":", "\n", "      ", "utils", ".", "cache_write", "(", "data_cache_file", ",", "ds", ",", "\"pickle\"", ")", "\n", "if", "not", "meta_cache_file", ".", "exists", "(", ")", ":", "\n", "        ", "ds_meta", "=", "ds", ".", "copy", "(", ")", "\n", "del", "ds_meta", "[", "\"elements\"", "]", "\n", "if", "\"stratify_labels\"", "in", "ds", ":", "\n", "          ", "del", "ds_meta", "[", "\"stratify_labels\"", "]", "\n", "", "utils", ".", "cache_write", "(", "meta_cache_file", ",", "ds_meta", ",", "\"pretty_json\"", ")", "\n", "", "", "elif", "not", "meta_cache_file", ".", "exists", "(", ")", ":", "\n", "      ", "utils", ".", "cache_write", "(", "meta_cache_file", ",", "ds", ",", "\"pretty_json\"", ")", "\n", "\n", "", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._make_splits": [[416, 419], ["rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "provider.DatasetProvider._make_splits"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._make_splits"], ["", "@", "utils", ".", "cached_method", "(", "\"processed\"", ",", "suffix", "=", "\"_splits\"", ",", "format", "=", "\"json\"", ")", "\n", "def", "_make_splits", "(", "self", ")", ":", "\n", "    ", "return", "super", "(", ")", ".", "_make_splits", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._get_named_splits": [[420, 423], ["rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "provider.DatasetProvider._get_named_splits"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._get_named_splits"], ["", "@", "utils", ".", "cached_method", "(", "\"processed\"", ",", "suffix", "=", "\"_named_splits\"", ",", "format", "=", "\"json\"", ")", "\n", "def", "_get_named_splits", "(", "self", ")", ":", "\n", "    ", "return", "super", "(", ")", ".", "_get_named_splits", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._get_stats": [[424, 427], ["rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "rgnn.cached_method", "provider.DatasetProvider._get_stats"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cached_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._get_stats"], ["", "@", "utils", ".", "cached_method", "(", "suffix", "=", "\"_stats\"", ",", "format", "=", "\"pretty_json\"", ")", "\n", "def", "_get_stats", "(", "self", ")", ":", "\n", "    ", "return", "super", "(", ")", ".", "_get_stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._preprocess": [[428, 500], ["provider.CachingDatasetProvider._get_train_metadata_hook", "pre.hooked_transform", "rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir", "rgnn.make_dir", "rgnn.cache", "rgnn.cache", "rgnn.cache", "rgnn.cache", "rgnn.cache", "provider.CachingDatasetProvider._preprocess.transform"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_train_metadata_hook", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.preprocessor.Preprocessor.hooked_transform", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2VecEncoder.transform"], ["", "def", "_preprocess", "(", "\n", "self", ",", "pre", ":", "preproc", ".", "Preprocessor", ",", "ds_get", ",", "indices", ",", "train_indices", ",", "\n", "index_id", "=", "None", ",", "finalize", "=", "True", ",", "ds_id", "=", "None", ",", "train_ds_get", "=", "None", ")", ":", "\n", "    ", "preprocessed_cache", "=", "pre", ".", "preprocessed_cacheable", "and", "self", ".", "preprocessed_cache", "\n", "preprocessed_dir", "=", "self", ".", "data_dir", "/", "pre", ".", "preprocessed_name", "\n", "ds_suffix", "=", "\"\"", "if", "ds_id", "is", "None", "else", "\"_\"", "+", "\"_\"", ".", "join", "(", "fy", ".", "map", "(", "str", ",", "ds_id", ")", ")", "\n", "idx_suffix", "=", "\"\"", "if", "index_id", "is", "None", "else", "\"_\"", "+", "\"_\"", ".", "join", "(", "\n", "fy", ".", "map", "(", "str", ",", "index_id", ")", ")", "\n", "\n", "def", "transform", "(", ")", ":", "\n", "      ", "train_metadata_hook", "=", "self", ".", "_get_train_metadata_hook", "(", "\n", "pre", ",", "index_id", ",", "ds_id", ")", "\n", "train_metadata_key", "=", "train_metadata_hook", ".", "key", "\n", "\n", "if", "preprocessed_cache", ":", "\n", "        ", "orthogonal_preprocess", "=", "pre", ".", "orthogonal_preprocess", "\n", "preproc_format", "=", "pre", ".", "preprocessed_format", "or", "\"pickle\"", "\n", "preprocessed_dirs", "=", "[", "self", ".", "data_dir", "/", "d", "for", "d", "in", "pre", ".", "preprocessed_names", "]", "\n", "if", "orthogonal_preprocess", ":", "\n", "          ", "for", "d", "in", "preprocessed_dirs", ":", "\n", "            ", "utils", ".", "make_dir", "(", "d", ")", "\n", "", "", "else", ":", "\n", "          ", "utils", ".", "make_dir", "(", "preprocessed_dir", ")", "\n", "\n", "", "meta_suffix", "=", "\"\"", "if", "train_metadata_key", "is", "None", "else", "\"_\"", "+", "\"_\"", ".", "join", "(", "\n", "fy", ".", "map", "(", "str", ",", "train_metadata_key", ")", ")", "\n", "meta_fname_base", "=", "f\"{self.name}{meta_suffix}_train_meta\"", "\n", "meta_fname", "=", "f\"{meta_fname_base}.pickle\"", "\n", "meta_fname_custom", "=", "f\"{meta_fname_base}.custom\"", "\n", "pre_fname", "=", "f\"{self.name}{ds_suffix}.{preproc_format}\"", "\n", "pre_fname_idx", "=", "f\"{self.name}{ds_suffix}{idx_suffix}.{preproc_format}\"", "\n", "\n", "def", "preprocess_hook", "(", "f", ",", "i", ",", "slice", ")", ":", "\n", "          ", "d", "=", "preprocessed_dir", "if", "i", "is", "None", "else", "preprocessed_dirs", "[", "i", "]", "\n", "file", "=", "pre_fname_idx", "if", "slice", "else", "pre_fname", "\n", "return", "utils", ".", "cache", "(", "lambda", ":", "f", "(", "i", ",", "slice", ")", ",", "d", "/", "file", ")", "\n", "\n", "", "base_metadata_hook", "=", "train_metadata_hook", "\n", "\n", "def", "train_metadata_hook", "(", "f", ",", "i", ")", ":", "\n", "          ", "d", "=", "preprocessed_dir", "if", "i", "is", "None", "else", "preprocessed_dirs", "[", "i", "]", "\n", "custom_file", "=", "d", "/", "meta_fname_custom", "\n", "if", "custom_file", ".", "exists", "(", ")", ":", "\n", "            ", "return", "custom_file", "\n", "", "file", "=", "d", "/", "meta_fname", "\n", "if", "file", ".", "exists", "(", ")", ":", "\n", "            ", "return", "utils", ".", "cache_read", "(", "file", ",", "format", "=", "\"pickle\"", ")", "\n", "\n", "", "train_metadata", "=", "base_metadata_hook", "(", "f", ",", "i", ")", "\n", "if", "train_metadata", "is", "not", "None", "and", "hasattr", "(", "train_metadata", ",", "\"save\"", ")", ":", "\n", "            ", "train_metadata", ".", "save", "(", "custom_file", ")", "\n", "", "else", ":", "\n", "            ", "utils", ".", "cache_write", "(", "file", ",", "train_metadata", ",", "format", "=", "\"pickle\"", ")", "\n", "\n", "", "return", "train_metadata", "\n", "", "", "else", ":", "\n", "        ", "preprocess_hook", "=", "None", "\n", "\n", "", "return", "pre", ".", "hooked_transform", "(", "\n", "ds_get", ",", "indices", ",", "train_indices", ",", "train_ds_get", ",", "\n", "finalize", ",", "preprocess_hook", ",", "train_metadata_hook", ")", "\n", "\n", "", "if", "finalize", "and", "pre", ".", "finalized_cacheable", "and", "self", ".", "finalize_cache", ":", "\n", "      ", "finalized_dir", "=", "utils", ".", "make_dir", "(", "\n", "preprocessed_dir", "/", "f\"final-{pre.finalized_name}\"", ")", "\n", "finalized_format", "=", "pre", ".", "finalized_format", "or", "\"pickle\"", "\n", "finalized_file", "=", "finalized_dir", "/", "f\"{self.name}{ds_suffix}{idx_suffix}.{finalized_format}\"", "\n", "return", "utils", ".", "cache", "(", "\n", "transform", ",", "finalized_file", ",", "finalized_format", ")", "\n", "", "else", ":", "\n", "      ", "return", "transform", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.__init__": [[507, 512], ["provider.DatasetProvider.__init__", "rgnn.PresplitDatasetLoader", "rgnn.PresplitDatasetLoader", "rgnn.PresplitDatasetLoader", "rgnn.PresplitDatasetLoader", "rgnn.PresplitDatasetLoader"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["def", "__init__", "(", "\n", "self", ",", "loader_train", ",", "loader_val", "=", "None", ",", "loader_test", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "\n", "loader", ".", "PresplitDatasetLoader", "(", "loader_train", ",", "loader_val", ",", "loader_test", ")", ",", "\n", "outer_k", "=", "None", ",", "inner_k", "=", "None", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset": [[513, 521], ["AssertionError", "provider.PresplitDatasetProvider.loader.load_train_dataset", "provider.PresplitDatasetProvider.loader.load_validation_dataset", "provider.PresplitDatasetProvider.loader.load_test_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.PresplitDatasetLoader.load_train_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.PresplitDatasetLoader.load_validation_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.PresplitDatasetLoader.load_test_dataset"], ["", "def", "_load_dataset", "(", "self", ",", "only_meta", "=", "False", ",", "id", "=", "None", ")", ":", "\n", "    ", "if", "id", "==", "\"train\"", ":", "\n", "      ", "return", "self", ".", "loader", ".", "load_train_dataset", "(", "only_meta", ")", "\n", "", "elif", "id", "==", "\"val\"", ":", "\n", "      ", "return", "self", ".", "loader", ".", "load_validation_dataset", "(", "only_meta", ")", "\n", "", "elif", "id", "==", "\"test\"", ":", "\n", "      ", "return", "self", ".", "loader", ".", "load_test_dataset", "(", "only_meta", ")", "\n", "", "raise", "AssertionError", "(", "f\"Unknown dataset id {id}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset": [[522, 556], ["dict", "provider.PresplitDatasetProvider._load_dataset", "provider.PresplitDatasetProvider._load_dataset", "provider.PresplitDatasetProvider._load_dataset", "provider.PresplitDatasetProvider._cache_dataset", "provider.PresplitDatasetProvider._load_dataset", "provider.PresplitDatasetProvider._load_dataset", "provider.PresplitDatasetProvider._cache_dataset", "provider.PresplitDatasetProvider._cache_dataset", "provider.PresplitDatasetProvider._load_dataset", "provider.PresplitDatasetProvider._load_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._load_dataset"], ["", "def", "_cache_dataset", "(", "self", ",", "only_meta", "=", "False", ",", "id", "=", "None", ")", ":", "\n", "    ", "if", "not", "self", ".", "in_memory_cache", ":", "\n", "      ", "if", "id", "is", "None", ":", "\n", "        ", "return", "dict", "(", "\n", "train", "=", "self", ".", "_load_dataset", "(", "only_meta", ",", "\"train\"", ")", ",", "\n", "val", "=", "self", ".", "_load_dataset", "(", "\n", "only_meta", ",", "\"val\"", ")", "if", "self", ".", "loader", ".", "val", "else", "None", ",", "\n", "test", "=", "self", ".", "_load_dataset", "(", "\n", "only_meta", ",", "\"test\"", ")", "if", "self", ".", "loader", ".", "test", "else", "None", ")", "\n", "", "else", ":", "\n", "        ", "return", "self", ".", "_load_dataset", "(", "only_meta", ",", "id", ")", "\n", "\n", "", "", "if", "id", "==", "\"train\"", ":", "\n", "      ", "if", "self", ".", "_train_dataset", "is", "None", "or", "not", "(", "\n", "only_meta", "or", "\"elements\"", "in", "self", ".", "_train_dataset", ")", ":", "\n", "        ", "self", ".", "_train_dataset", "=", "self", ".", "_load_dataset", "(", "only_meta", ",", "\"train\"", ")", "\n", "", "return", "self", ".", "_train_dataset", "\n", "", "elif", "id", "==", "\"val\"", ":", "\n", "      ", "if", "self", ".", "_val_dataset", "is", "None", "or", "not", "(", "\n", "only_meta", "or", "\"elements\"", "in", "self", ".", "_val_dataset", ")", ":", "\n", "        ", "self", ".", "_val_dataset", "=", "self", ".", "_load_dataset", "(", "only_meta", ",", "\"val\"", ")", "\n", "", "return", "self", ".", "_val_dataset", "\n", "", "elif", "id", "==", "\"test\"", ":", "\n", "      ", "if", "self", ".", "_test_dataset", "is", "None", "or", "not", "(", "\n", "only_meta", "or", "\"elements\"", "in", "self", ".", "_test_dataset", ")", ":", "\n", "        ", "self", ".", "_test_dataset", "=", "self", ".", "_load_dataset", "(", "only_meta", ",", "\"test\"", ")", "\n", "", "return", "self", ".", "_test_dataset", "\n", "", "else", ":", "\n", "      ", "self", ".", "_cache_dataset", "(", "only_meta", ",", "\"train\"", ")", "\n", "if", "self", ".", "loader", ".", "val", ":", "\n", "        ", "self", ".", "_cache_dataset", "(", "only_meta", ",", "\"val\"", ")", "\n", "", "if", "self", ".", "loader", ".", "test", ":", "\n", "        ", "self", ".", "_cache_dataset", "(", "only_meta", ",", "\"test\"", ")", "\n", "", "return", "self", ".", "_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.unload_dataset": [[557, 561], ["None"], "methods", ["None"], ["", "", "def", "unload_dataset", "(", "self", ")", ":", "\n", "    ", "self", ".", "_train_dataset", "=", "None", "\n", "self", ".", "_val_dataset", "=", "None", "\n", "self", ".", "_test_dataset", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._dataset": [[562, 568], ["dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "_dataset", "(", "self", ")", ":", "\n", "    ", "return", "dict", "(", "\n", "train", "=", "self", ".", "_train_dataset", ",", "\n", "val", "=", "self", ".", "_val_dataset", ",", "\n", "test", "=", "self", ".", "_test_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.in_meta": [[569, 572], ["provider.PresplitDatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "in_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ",", "id", "=", "\"train\"", ")", "[", "\"in_meta\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.out_meta": [[573, 576], ["provider.PresplitDatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "out_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ",", "id", "=", "\"train\"", ")", "[", "\"out_meta\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.full_name": [[577, 580], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "full_name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "name", "+", "self", ".", "name_suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.dataset": [[581, 588], ["provider.PresplitDatasetProvider._cache_dataset", "dict"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "    ", "ds", "=", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ")", "\n", "return", "dict", "(", "\n", "train", "=", "ds", "[", "\"train\"", "]", "[", "\"elements\"", "]", ",", "\n", "val", "=", "ds", "[", "\"val\"", "]", "[", "\"elements\"", "]", "if", "ds", "[", "\"val\"", "]", "else", "None", ",", "\n", "test", "=", "ds", "[", "\"test\"", "]", "[", "\"elements\"", "]", "if", "ds", "[", "\"test\"", "]", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.train_dataset": [[590, 593], ["provider.PresplitDatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "train_dataset", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ",", "id", "=", "\"train\"", ")", "[", "\"elements\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.validation_dataset": [[594, 597], ["provider.PresplitDatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "validation_dataset", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ",", "id", "=", "\"val\"", ")", "[", "\"elements\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.test_dataset": [[598, 601], ["provider.PresplitDatasetProvider._cache_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "test_dataset", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ",", "id", "=", "\"test\"", ")", "[", "\"elements\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.dataset_split_sizes": [[602, 609], ["provider.PresplitDatasetProvider._cache_dataset", "dict"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._cache_dataset"], ["", "@", "property", "\n", "def", "dataset_split_sizes", "(", "self", ")", ":", "\n", "    ", "ds", "=", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "\n", "return", "dict", "(", "\n", "train", "=", "ds", "[", "\"train\"", "]", "[", "\"size\"", "]", ",", "\n", "val", "=", "ds", "[", "\"val\"", "]", "[", "\"size\"", "]", "if", "ds", "[", "\"val\"", "]", "else", "None", ",", "\n", "test", "=", "ds", "[", "\"test\"", "]", "[", "\"size\"", "]", "if", "ds", "[", "\"test\"", "]", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.train_dataset_size": [[611, 614], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_dataset_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "dataset_split_sizes", "[", "\"train\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.validation_dataset_size": [[615, 618], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "validation_dataset_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "dataset_split_sizes", "[", "\"val\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.test_dataset_size": [[619, 622], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_dataset_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "dataset_split_sizes", "[", "\"test\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.dataset_size": [[623, 626], ["sum", "funcy.keep", "provider.PresplitDatasetProvider.dataset_split_sizes.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset_size", "(", "self", ")", ":", "\n", "    ", "return", "sum", "(", "fy", ".", "keep", "(", "self", ".", "dataset_split_sizes", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.stratify_labels": [[627, 630], ["Exception"], "methods", ["None"], ["", "@", "property", "\n", "def", "stratify_labels", "(", "self", ")", ":", "\n", "    ", "raise", "Exception", "(", "\"This dataset has fixed train, val and test splits.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._make_splits": [[631, 633], ["Exception"], "methods", ["None"], ["", "def", "_make_splits", "(", "self", ")", ":", "\n", "    ", "raise", "Exception", "(", "\"This dataset has fixed train, val and test splits.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get": [[634, 636], ["Exception"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "Exception", "(", "\"Presplit datasets cannot be resliced.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_train_split_indices": [[637, 641], ["numpy.arange"], "methods", ["None"], ["", "def", "get_train_split_indices", "(", "\n", "self", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "relative", "=", "True", ")", ":", "\n", "    ", "assert", "relative", ",", "\"Absolute indexing is not possible in presplit datasets.\"", "\n", "return", "np", ".", "arange", "(", "self", ".", "train_dataset_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_validation_split_indices": [[642, 646], ["numpy.arange"], "methods", ["None"], ["", "def", "get_validation_split_indices", "(", "\n", "self", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "relative", "=", "True", ")", ":", "\n", "    ", "assert", "relative", ",", "\"Absolute indexing is not possible in presplit datasets.\"", "\n", "return", "np", ".", "arange", "(", "self", ".", "validation_dataset_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_test_split_indices": [[647, 651], ["numpy.arange"], "methods", ["None"], ["", "def", "get_test_split_indices", "(", "\n", "self", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "relative", "=", "True", ")", ":", "\n", "    ", "assert", "relative", ",", "\"Absolute indexing is not possible in presplit datasets.\"", "\n", "return", "np", ".", "arange", "(", "self", ".", "test_dataset_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split_indices": [[652, 658], ["provider.PresplitDatasetProvider.get_train_split_indices", "provider.PresplitDatasetProvider.get_validation_split_indices", "provider.PresplitDatasetProvider.get_test_split_indices"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_train_split_indices", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_validation_split_indices", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_test_split_indices"], ["", "def", "get_split_indices", "(", "self", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "relative", "=", "True", ")", ":", "\n", "    ", "assert", "relative", ",", "\"Absolute indexing is not possible in presplit datasets.\"", "\n", "return", "(", "\n", "self", ".", "get_train_split_indices", "(", ")", ",", "\n", "self", ".", "get_validation_split_indices", "(", ")", ",", "\n", "self", ".", "get_test_split_indices", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._get_train_metadata_key": [[659, 662], ["None"], "methods", ["None"], ["", "def", "_get_train_metadata_key", "(", "self", ",", "index_id", ",", "ds_id", "=", "None", ")", ":", "\n", "    ", "assert", "index_id", "is", "None", ",", "f\"Unsupported index id {index_id}.\"", "\n", "return", "None", "# Only one possible training set.", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split": [[663, 698], ["provider.PresplitDatasetProvider._get_preprocessor", "provider.PresplitDatasetProvider._preprocess", "provider.PresplitDatasetProvider._preprocess", "provider.PresplitDatasetProvider._preprocess"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider._get_preprocessor", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._preprocess", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._preprocess", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.CachingDatasetProvider._preprocess"], ["", "def", "get_split", "(", "\n", "self", ",", "enc", "=", "None", ",", "config", "=", "None", ",", "outer_idx", "=", "None", ",", "inner_idx", "=", "None", ",", "\n", "only", "=", "None", ",", "finalize", "=", "True", ",", "reconfigurable_finalization", "=", "False", ",", "indices", "=", "None", ")", ":", "\n", "    ", "assert", "indices", "is", "None", "or", "only", "is", "not", "None", ",", "\"Index subsets can only be provided if a single split is requested.\"", "\n", "pre", "=", "self", ".", "_get_preprocessor", "(", "enc", ",", "config", ",", "reconfigurable_finalization", ")", "\n", "res", "=", "(", ")", "\n", "if", "only", "is", "None", "or", "only", "==", "\"train\"", ":", "\n", "      ", "train_ds", "=", "self", ".", "_preprocess", "(", "\n", "pre", ",", "lambda", ":", "self", ".", "train_dataset", ",", "\n", "indices", ",", "None", ",", "None", ",", "finalize", ",", "(", "\"train\"", ",", ")", ")", "\n", "if", "only", "==", "\"train\"", ":", "\n", "        ", "return", "train_ds", "\n", "", "else", ":", "\n", "        ", "res", "+=", "(", "train_ds", ",", ")", "\n", "\n", "", "", "if", "self", ".", "loader", ".", "val", "and", "(", "only", "is", "None", "or", "only", "==", "\"val\"", ")", ":", "\n", "      ", "val_ds", "=", "self", ".", "_preprocess", "(", "\n", "pre", ",", "lambda", ":", "self", ".", "validation_dataset", ",", "\n", "indices", ",", "False", ",", "None", ",", "finalize", ",", "(", "\"val\"", ",", ")", ",", "\n", "lambda", ":", "self", ".", "train_dataset", ")", "\n", "if", "only", "==", "\"val\"", ":", "\n", "        ", "return", "val_ds", "\n", "", "res", "+=", "(", "val_ds", ",", ")", "\n", "", "if", "self", ".", "loader", ".", "test", "and", "(", "only", "is", "None", "or", "only", "==", "\"test\"", ")", ":", "\n", "      ", "test_ds", "=", "self", ".", "_preprocess", "(", "\n", "pre", ",", "lambda", ":", "self", ".", "test_dataset", ",", "\n", "indices", ",", "False", ",", "None", ",", "finalize", ",", "(", "\"test\"", ",", ")", ",", "\n", "lambda", ":", "self", ".", "train_dataset", ")", "\n", "if", "only", "==", "\"test\"", ":", "\n", "        ", "return", "test_ds", "\n", "", "res", "+=", "(", "test_ds", ",", ")", "\n", "\n", "", "assert", "only", "is", "None", ",", "f\"Invalid only-selector: {only}.\"", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider._compute_stats": [[699, 707], ["rgnn.find_stat_computer", "rgnn.find_stat_computer", "rgnn.find_stat_computer", "rgnn.find_stat_computer", "rgnn.find_stat_computer", "dict", "rgnn.find_stat_computer.", "rgnn.find_stat_computer.", "rgnn.find_stat_computer."], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer"], ["", "def", "_compute_stats", "(", "self", ")", ":", "\n", "    ", "computer", "=", "stats", ".", "find_stat_computer", "(", "self", ".", "dataset_type", ")", "\n", "ds", "=", "self", ".", "dataset", "\n", "\n", "return", "dict", "(", "\n", "train", "=", "computer", "(", "ds", "[", "\"train\"", "]", ")", ",", "\n", "val", "=", "computer", "(", "ds", "[", "\"val\"", "]", ")", "if", "ds", "[", "\"val\"", "]", "else", "None", ",", "\n", "test", "=", "computer", "(", "ds", "[", "\"test\"", "]", ")", "if", "ds", "[", "\"test\"", "]", "else", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.DatasetLoader.load_dataset": [[15, 17], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "load_dataset", "(", "self", ",", "only_meta", ":", "bool", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.PresplitDatasetLoader.__init__": [[19, 32], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "train", ":", "DatasetLoader", ",", "\n", "val", ":", "DatasetLoader", "=", "None", ",", "\n", "test", ":", "DatasetLoader", "=", "None", ")", ":", "\n", "    ", "self", ".", "train", "=", "train", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "dataset_type", "=", "self", ".", "train", ".", "dataset_type", "\n", "if", "val", ":", "\n", "      ", "assert", "self", ".", "dataset_type", "==", "val", ".", "dataset_type", "\n", "", "if", "test", ":", "\n", "      ", "assert", "self", ".", "dataset_type", "==", "test", ".", "dataset_type", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.PresplitDatasetLoader.load_train_dataset": [[33, 35], ["loader.PresplitDatasetLoader.train.load_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.load_dataset"], ["", "", "def", "load_train_dataset", "(", "self", ",", "only_meta", "=", "True", ")", ":", "\n", "    ", "return", "self", ".", "train", ".", "load_dataset", "(", "only_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.PresplitDatasetLoader.load_validation_dataset": [[36, 39], ["loader.PresplitDatasetLoader.val.load_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.load_dataset"], ["", "def", "load_validation_dataset", "(", "self", ",", "only_meta", "=", "True", ")", ":", "\n", "    ", "assert", "self", ".", "val", "is", "not", "None", "\n", "return", "self", ".", "val", ".", "load_dataset", "(", "only_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.PresplitDatasetLoader.load_test_dataset": [[40, 43], ["loader.PresplitDatasetLoader.test.load_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.load_dataset"], ["", "def", "load_test_dataset", "(", "self", ",", "only_meta", "=", "True", ")", ":", "\n", "    ", "assert", "self", ".", "test", "is", "not", "None", "\n", "return", "self", ".", "test", ".", "load_dataset", "(", "only_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.PresplitDatasetLoader.load_dataset": [[44, 52], ["dict", "loader.PresplitDatasetLoader.val.load_dataset", "loader.PresplitDatasetLoader.test.load_dataset", "loader.PresplitDatasetLoader.train.load_dataset"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.load_dataset", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.load_dataset"], ["", "def", "load_dataset", "(", "self", ",", "only_meta", "=", "True", ")", ":", "\n", "    ", "res", "=", "dict", "(", "train", "=", "self", ".", "train", ".", "load_dataset", "(", "only_meta", ")", ")", "\n", "if", "self", ".", "val", ":", "\n", "      ", "res", "[", "\"val\"", "]", "=", "self", ".", "val", ".", "load_dataset", "(", "only_meta", ")", "\n", "", "if", "self", ".", "test", ":", "\n", "      ", "res", "[", "\"test\"", "]", "=", "self", ".", "test", ".", "load_dataset", "(", "only_meta", ")", "\n", "\n", "", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable": [[6, 10], ["out_meta.get"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["def", "is_stratifiable", "(", "out_type", ",", "out_meta", "=", "None", ")", ":", "\n", "  ", "return", "type", "==", "\"binary\"", "or", "(", "\n", "type", "==", "\"integer\"", "and", "out_meta", "is", "not", "None", "\n", "and", "out_meta", ".", "get", "(", "\"max\"", ",", "None", ")", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.OGBDatasetLoader.__init__": [[14, 18], ["rgnn.DatasetLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["\n", "class", "DatasetProvider", ":", "\n", "  ", "name", "=", "None", "\n", "loader", ":", "ldr", ".", "DatasetLoader", "=", "None", "\n", "_dataset", "=", "None", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.OGBDatasetLoader.ogb_dataset": [[19, 29], ["ogb.GraphPropPredDataset"], "methods", ["None"], ["_splits", "=", "None", "\n", "_named_splits", "=", "None", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "loader", ":", "ldr", ".", "DatasetLoader", ",", "\n", "outer_k", "=", "10", ",", "inner_k", "=", "None", ",", "\n", "inner_holdout", "=", "0.1", ",", "\n", "outer_holdout", "=", "0.1", ",", "\n", "default_split", "=", "0", ",", "\n", "default_preprocess_config", "=", "None", ",", "\n", "stratify", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.OGBDatasetLoader.dataset_type": [[30, 33], ["None"], "methods", ["None"], ["name_suffix", "=", "\"\"", ",", "\n", "in_memory_cache", "=", "True", ")", ":", "\n", "    ", "self", ".", "loader", "=", "loader", "\n", "assert", "outer_k", "is", "None", "or", "outer_k", ">", "0", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.OGBDatasetLoader.stratifiable": [[34, 37], ["rgnn.is_stratifiable", "rgnn.is_stratifiable", "rgnn.is_stratifiable", "rgnn.is_stratifiable"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable"], ["self", ".", "outer_k", "=", "outer_k", "\n", "assert", "inner_k", "is", "None", "or", "inner_k", ">", "0", "\n", "self", ".", "inner_k", "=", "inner_k", "\n", "assert", "outer_k", "is", "not", "None", "or", "outer_holdout", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.OGBDatasetLoader.load_dataset": [[38, 63], ["numpy.array", "numpy.empty", "enumerate", "rgnn.graphs_meta", "rgnn.graphs_meta", "rgnn.graphs_meta", "rgnn.graphs_meta", "rgnn.OGBDatasetLoader.config.copy", "dict", "rgnn.create_graph_from_ogb", "rgnn.create_graph_from_ogb", "rgnn.create_graph_from_ogb", "rgnn.create_graph_from_ogb", "numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graphs_meta", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graphs_meta", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graphs_meta", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graphs_meta", "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.utils.create_graph_from_ogb", "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.utils.create_graph_from_ogb", "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.utils.create_graph_from_ogb", "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.utils.create_graph_from_ogb"], ["assert", "inner_k", "is", "not", "None", "or", "inner_holdout", "is", "not", "None", "\n", "self", ".", "outer_holdout", "=", "outer_holdout", "\n", "self", ".", "inner_holdout", "=", "inner_holdout", "\n", "self", ".", "default_split", "=", "default_split", "\n", "self", ".", "default_preprocess_config", "=", "default_preprocess_config", "\n", "self", ".", "stratify", "=", "stratify", "and", "loader", ".", "stratifiable", "\n", "self", ".", "name_suffix", "=", "name_suffix", "\n", "self", ".", "in_memory_cache", "=", "in_memory_cache", "\n", "self", ".", "_train_metadata_lut", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "", "@", "property", "\n", "def", "in_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"in_meta\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "out_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"out_meta\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "full_name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "name", "+", "self", ".", "name_suffix", "\n", "\n", "", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ")", "[", "\"elements\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.OGBDatasetLoader.named_splits": [[64, 72], ["rgnn.OGBDatasetLoader.ogb_dataset.get_idx_split", "dict", "dict", "dict"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"size\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "stratify_labels", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "stratify", ":", "\n", "      ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.OGBDatasetProvider.__init__": [[76, 80], ["rgnn.OGBDatasetLoader", "rgnn.CachingDatasetProvider.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["def", "dataset_type", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "loader", ".", "dataset_type", "\n", "\n", "", "@", "property", "\n", "def", "stats", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.OGBDatasetProvider._make_named_splits": [[81, 83], ["None"], "methods", ["None"], ["    ", "return", "self", ".", "_get_stats", "(", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.provider.ogb_dataset": [[84, 88], ["funcy.func_partial"], "function", ["None"], ["def", "splits", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_splits", "is", "None", ":", "\n", "      ", "self", ".", "_splits", "=", "self", ".", "_make_splits", "(", ")", "\n", "\n", "", "return", "self", ".", "_splits", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.ogb.utils.create_graph_from_ogb": [[4, 21], ["numpy.transpose", "networkx.Graph", "enumerate", "zip", "nx.Graph.add_node", "nx.Graph.add_edge"], "function", ["None"], ["import", "itertools", "\n", "import", "contextlib", "\n", "import", "numpy", "as", "np", "\n", "import", "funcy", "as", "fy", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "networkx", "as", "nx", "\n", "import", "inspect", "\n", "import", "pickle", "\n", "\n", "def", "tolerant", "(", "f", "=", "None", ",", "only_named", "=", "True", ",", "ignore_varkwargs", "=", "False", ")", ":", "\n", "  ", "if", "f", "is", "None", ":", "\n", "    ", "return", "lambda", "f", ":", "tolerant", "(", "f", ",", "only_named", ",", "ignore_varkwargs", ")", "\n", "\n", "", "if", "hasattr", "(", "f", ",", "\"__tolerant__\"", ")", ":", "\n", "    ", "return", "f", "\n", "\n", "", "spec", "=", "inspect", ".", "getfullargspec", "(", "f", ".", "__init__", "if", "inspect", ".", "isclass", "(", "f", ")", "else", "f", ")", "\n", "f_varargs", "=", "spec", ".", "varargs", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetLoader.__init__": [[10, 14], ["rgnn.DatasetLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["import", "rgnn", ".", "datasets", ".", "loader", "as", "loader", "\n", "\n", "ldr", "=", "loader", "\n", "CACHE_ROOT", "=", "Path", "(", "\"../data/\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetLoader.compute_meta": [[15, 17], ["None"], "methods", ["None"], ["class", "DatasetProvider", ":", "\n", "  ", "name", "=", "None", "\n", "loader", ":", "ldr", ".", "DatasetLoader", "=", "None", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetLoader.compute_size": [[18, 20], ["None"], "methods", ["None"], ["_dataset", "=", "None", "\n", "_splits", "=", "None", "\n", "_named_splits", "=", "None", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetLoader.compute_stratify_labels": [[21, 23], ["None"], "methods", ["None"], ["\n", "def", "__init__", "(", "\n", "self", ",", "loader", ":", "ldr", ".", "DatasetLoader", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetLoader.load_dataset": [[24, 33], ["rgnn.SyntheticDatasetLoader.generator", "rgnn.SyntheticDatasetLoader.compute_meta", "dict", "rgnn.SyntheticDatasetLoader.compute_size", "rgnn.SyntheticDatasetLoader.compute_stratify_labels"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticGraphEmbedDatasetLoader.compute_meta", "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticGraphEmbedDatasetLoader.compute_size", "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticGraphEmbedDatasetLoader.compute_stratify_labels"], ["outer_k", "=", "10", ",", "inner_k", "=", "None", ",", "\n", "inner_holdout", "=", "0.1", ",", "\n", "outer_holdout", "=", "0.1", ",", "\n", "default_split", "=", "0", ",", "\n", "default_preprocess_config", "=", "None", ",", "\n", "stratify", "=", "True", ",", "\n", "name_suffix", "=", "\"\"", ",", "\n", "in_memory_cache", "=", "True", ")", ":", "\n", "    ", "self", ".", "loader", "=", "loader", "\n", "assert", "outer_k", "is", "None", "or", "outer_k", ">", "0", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetProvider.__init__": [[38, 43], ["rgnn.SyntheticDatasetProvider.loaderClass", "rgnn.CachingDatasetProvider.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["assert", "inner_k", "is", "not", "None", "or", "inner_holdout", "is", "not", "None", "\n", "self", ".", "outer_holdout", "=", "outer_holdout", "\n", "self", ".", "inner_holdout", "=", "inner_holdout", "\n", "self", ".", "default_split", "=", "default_split", "\n", "self", ".", "default_preprocess_config", "=", "default_preprocess_config", "\n", "self", ".", "stratify", "=", "stratify", "and", "loader", ".", "stratifiable", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetProvider.register_splitter": [[44, 63], ["funcy.wraps", "f", "dict", "hasattr", "dict", "cls.register_splitter", "numpy.array", "dict", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetProvider.register_splitter"], ["self", ".", "name_suffix", "=", "name_suffix", "\n", "self", ".", "in_memory_cache", "=", "in_memory_cache", "\n", "self", ".", "_train_metadata_lut", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "", "@", "property", "\n", "def", "in_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"in_meta\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "out_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"out_meta\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "full_name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "name", "+", "self", ".", "name_suffix", "\n", "\n", "", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ")", "[", "\"elements\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetProvider._make_named_splits": [[64, 72], ["hasattr", "dict", "rgnn.SyntheticDatasetProvider.register_splitter.splitter", "rgnn.SyntheticDatasetProvider.splitters.items"], "methods", ["None"], ["", "@", "property", "\n", "def", "dataset_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"size\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "stratify_labels", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "stratify", ":", "\n", "      ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.PresplitSyntheticDatasetProvider.__init__": [[79, 89], ["rgnn.PresplitSyntheticDatasetProvider.loaderClass", "rgnn.PresplitSyntheticDatasetProvider.loaderClass", "rgnn.PresplitSyntheticDatasetProvider.loaderClass", "rgnn.CachingDatasetProvider.__init__", "funcy.func_partial", "funcy.func_partial", "funcy.func_partial"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["", "@", "property", "\n", "def", "stats", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_get_stats", "(", ")", "\n", "\n", "", "@", "property", "\n", "def", "splits", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_splits", "is", "None", ":", "\n", "      ", "self", ".", "_splits", "=", "self", ".", "_make_splits", "(", ")", "\n", "\n", "", "return", "self", ".", "_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.PresplitSyntheticDatasetProvider.generate": [[90, 98], ["rgnn.PresplitSyntheticDatasetProvider.generator"], "methods", ["None"], ["", "@", "property", "\n", "def", "named_splits", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_named_splits", "is", "None", ":", "\n", "      ", "self", ".", "_named_splits", "=", "self", ".", "_get_named_splits", "(", ")", "\n", "\n", "", "return", "self", ".", "_named_splits", "\n", "\n", "", "def", "_load_dataset", "(", "self", ",", "only_meta", "=", "False", ",", "id", "=", "None", ")", ":", "\n", "    ", "return", "self", ".", "loader", ".", "load_dataset", "(", "only_meta", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticGraphEmbedDatasetLoader.dataset_type": [[100, 103], ["None"], "methods", ["None"], ["", "def", "_cache_dataset", "(", "self", ",", "only_meta", "=", "False", ",", "id", "=", "None", ")", ":", "\n", "    ", "if", "not", "self", ".", "in_memory_cache", ":", "\n", "      ", "return", "self", ".", "_load_dataset", "(", "only_meta", ",", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticGraphEmbedDatasetLoader.stratifiable": [[104, 107], ["rgnn.is_stratifiable", "rgnn.is_stratifiable", "rgnn.is_stratifiable"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable"], ["", "if", "self", ".", "_dataset", "is", "None", "or", "not", "(", "only_meta", "or", "\"elements\"", "in", "self", ".", "_dataset", ")", ":", "\n", "      ", "self", ".", "_dataset", "=", "self", ".", "_load_dataset", "(", "only_meta", ",", "id", ")", "\n", "\n", "", "return", "self", ".", "_dataset", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticGraphEmbedDatasetLoader.compute_meta": [[108, 114], ["rgnn.graphs_meta", "rgnn.graphs_meta", "rgnn.graphs_meta"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graphs_meta", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graphs_meta", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.graphs_meta"], ["\n", "", "def", "unload_dataset", "(", "self", ")", ":", "\n", "    ", "self", ".", "_dataset", "=", "None", "\n", "\n", "", "def", "unload_train_metadata", "(", "self", ")", ":", "\n", "    ", "self", ".", "_train_metadata_lut", "=", "defaultdict", "(", "dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticGraphEmbedDatasetLoader.compute_size": [[115, 117], ["len"], "methods", ["None"], ["", "def", "__make_model_selection_splits", "(", "self", ",", "train_o", ",", "strat_o", "=", "None", ")", ":", "\n", "    ", "if", "self", ".", "inner_k", "is", "None", ":", "\n", "      ", "train_i", ",", "val_i", ",", "_", "=", "preproc_utils", ".", "make_holdout_split", "(", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticGraphEmbedDatasetLoader.compute_stratify_labels": [[118, 120], ["numpy.array"], "methods", ["None"], ["self", ".", "inner_holdout", ",", "train_o", ",", "strat_o", ")", "\n", "return", "[", "dict", "(", "\n", "train", "=", "train_i", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.synthetic_dataset_decorator": [[128, 160], ["funcy.select_keys", "funcy.select_keys", "rgnn.unwrap_method", "funcy.merge", "funcy.compose", "provider.synthetic_dataset_decorator.dataset_decorator"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.unwrap_method"], ["", "", "def", "_make_splits", "(", "self", ")", ":", "\n", "    ", "all_idxs", "=", "np", ".", "arange", "(", "self", ".", "dataset_size", ")", "\n", "strat_labels", "=", "self", ".", "stratify_labels", "\n", "\n", "if", "self", ".", "outer_k", "is", "None", ":", "\n", "      ", "train_o", ",", "test_o", ",", "strat_o", "=", "preproc_utils", ".", "make_holdout_split", "(", "\n", "self", ".", "outer_holdout", ",", "all_idxs", ",", "strat_labels", ")", "\n", "return", "[", "dict", "(", "\n", "test", "=", "test_o", ",", "\n", "model_selection", "=", "self", ".", "__make_model_selection_splits", "(", "train_o", ",", "strat_o", ")", ")", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "dict", "(", "\n", "test", "=", "test_o", ",", "\n", "model_selection", "=", "self", ".", "__make_model_selection_splits", "(", "train_o", ",", "strat_o", ")", ")", "\n", "for", "train_o", ",", "test_o", ",", "strat_o", "in", "preproc_utils", ".", "make_kfold_splits", "(", "\n", "self", ".", "outer_k", ",", "all_idxs", ",", "strat_labels", ")", "]", "\n", "\n", "", "", "def", "_make_named_splits", "(", "self", ")", ":", "\n", "    ", "return", "dict", "(", ")", "\n", "\n", "", "def", "_get_named_splits", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_make_named_splits", "(", ")", "\n", "\n", "", "def", "_get_preprocessor", "(", "self", ",", "enc", ",", "config", ",", "reconfigurable_finalization", "=", "False", ")", ":", "\n", "    ", "if", "self", ".", "default_preprocess_config", "is", "not", "None", ":", "\n", "      ", "if", "config", "is", "None", ":", "\n", "        ", "config", "=", "self", ".", "default_preprocess_config", "\n", "", "else", ":", "\n", "        ", "config", "=", "fy", ".", "merge", "(", "self", ".", "default_preprocess_config", ",", "config", ")", "\n", "\n", "", "", "return", "preproc", ".", "find_preprocessor", "(", "self", ".", "dataset_type", ",", "enc", ")", "(", "\n", "self", ".", "in_meta", ",", "self", ".", "out_meta", ",", "config", ",", "reconfigurable_finalization", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.twothree_dataset": [[13, 22], ["rgnn.datasets.synthetic.provider.synthetic_graph_embed_dataset", "networkx.Graph", "nx.Graph.add_edge", "networkx.Graph", "networkx.add_cycle", "range", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.threesix_dataset": [[23, 33], ["rgnn.datasets.synthetic.provider.synthetic_graph_embed_dataset", "networkx.Graph", "networkx.add_cycle", "networkx.add_cycle", "networkx.Graph", "networkx.add_cycle", "range", "range", "range", "numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.small_grid_dataset": [[34, 45], ["rgnn.datasets.synthetic.provider.synthetic_graph_embed_dataset", "networkx.grid_graph", "networkx.grid_graph", "networkx.grid_graph", "networkx.grid_graph", "networkx.grid_graph", "networkx.grid_graph"], "function", ["None"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.noisy_triangle_graph": [[46, 78], ["networkx.Graph", "numpy.arange", "numpy.arange", "nx.Graph.add_nodes_from", "nx.Graph.add_nodes_from", "networkx.add_cycle", "range", "range", "range", "numpy.arange", "numpy.random.choice", "numpy.random.choice", "nx.Graph.add_edge", "int", "datasets.noisy_triangle_graph.try_adding_non_triangle_edge"], "function", ["None"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.triangle_classification_dataset": [[79, 101], ["rgnn.datasets.synthetic.provider.synthetic_graph_embed_dataset", "rgnn.utils.local_seed", "range", "rgnn.utils.unzip", "numpy.array", "rgnn.utils.cart", "funcy.repeatedly", "funcy.partial"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.local_seed", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.unzip", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.geo": [[102, 107], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.triangle_count_graph": [[108, 145], ["networkx.balanced_tree", "datasets.geo", "datasets.geo", "numpy.array", "numpy.random.shuffle", "funcy.first", "nx.balanced_tree.add_edge", "max", "range", "numpy.random.choice", "list", "int", "numpy.random.choice", "networkx.neighbors", "nx.balanced_tree.add_edge", "nx.balanced_tree.has_edge", "len", "list", "nx.balanced_tree.has_edge", "len", "networkx.common_neighbors", "list", "networkx.common_neighbors"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.geo", "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.geo"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.triangle_count_dataset": [[146, 189], ["rgnn.datasets.synthetic.provider.synthetic_graph_embed_dataset", "rgnn.utils.local_seed", "range", "range", "range", "funcy.group_by().values", "numpy.array", "rgnn.utils.cart", "funcy.group_by", "bin_graphs.append", "bin_ys.append", "datasets.geo", "networkx.could_be_isomorphic", "e[].size", "e[].order", "funcy.repeatedly", "funcy.partial"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.local_seed", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.geo"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.size_extrapolated_triangle_count_split": [[190, 211], ["triangle_count_dataset.register_splitter", "enumerate", "rgnn.utils.local_seed", "rgnn.make_holdout_split", "numpy.array", "numpy.random.shuffle", "g.order", "train_idxs.append", "np.array.append", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetProvider.register_splitter", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.local_seed", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.datasets.count_extrapolated_triangle_count_split": [[212, 233], ["triangle_count_dataset.register_splitter", "enumerate", "rgnn.utils.local_seed", "rgnn.make_holdout_split", "numpy.array", "numpy.random.shuffle", "train_idxs.append", "np.array.append", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.synthetic.provider.SyntheticDatasetProvider.register_splitter", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.local_seed", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.utils.make_holdout_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.__init__": [[15, 20], ["rgnn.DatasetLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["class", "DatasetProvider", ":", "\n", "  ", "name", "=", "None", "\n", "loader", ":", "ldr", ".", "DatasetLoader", "=", "None", "\n", "_dataset", "=", "None", "\n", "_splits", "=", "None", "\n", "_named_splits", "=", "None", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.dataset_type": [[21, 24], ["None"], "methods", ["None"], ["\n", "def", "__init__", "(", "\n", "self", ",", "loader", ":", "ldr", ".", "DatasetLoader", ",", "\n", "outer_k", "=", "10", ",", "inner_k", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.stratifiable": [[25, 28], ["rgnn.is_stratifiable", "rgnn.is_stratifiable", "rgnn.is_stratifiable", "rgnn.is_stratifiable"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.loader.is_stratifiable"], ["inner_holdout", "=", "0.1", ",", "\n", "outer_holdout", "=", "0.1", ",", "\n", "default_split", "=", "0", ",", "\n", "default_preprocess_config", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.download_url": [[29, 32], ["None"], "methods", ["None"], ["stratify", "=", "True", ",", "\n", "name_suffix", "=", "\"\"", ",", "\n", "in_memory_cache", "=", "True", ")", ":", "\n", "    ", "self", ".", "loader", "=", "loader", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader._download_raw": [[33, 43], ["rgnn.TUDatasetLoader.raw_dir.exists", "requests.get", "io.BytesIO", "zipfile.ZipFile", "z.namelist", "z.extract"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["assert", "outer_k", "is", "None", "or", "outer_k", ">", "0", "\n", "self", ".", "outer_k", "=", "outer_k", "\n", "assert", "inner_k", "is", "None", "or", "inner_k", ">", "0", "\n", "self", ".", "inner_k", "=", "inner_k", "\n", "assert", "outer_k", "is", "not", "None", "or", "outer_holdout", "is", "not", "None", "\n", "assert", "inner_k", "is", "not", "None", "or", "inner_holdout", "is", "not", "None", "\n", "self", ".", "outer_holdout", "=", "outer_holdout", "\n", "self", ".", "inner_holdout", "=", "inner_holdout", "\n", "self", ".", "default_split", "=", "default_split", "\n", "self", ".", "default_preprocess_config", "=", "default_preprocess_config", "\n", "self", ".", "stratify", "=", "stratify", "and", "loader", ".", "stratifiable", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader._parse_tu_data": [[44, 48], ["rgnn.TUDatasetLoader._download_raw", "rgnn.parse_tu_data", "rgnn.parse_tu_data", "rgnn.parse_tu_data", "rgnn.parse_tu_data"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader._download_raw", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.parse_tu_data", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.parse_tu_data", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.parse_tu_data", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.parse_tu_data"], ["self", ".", "name_suffix", "=", "name_suffix", "\n", "self", ".", "in_memory_cache", "=", "in_memory_cache", "\n", "self", ".", "_train_metadata_lut", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader.load_dataset": [[49, 77], ["rgnn.TUDatasetLoader._parse_tu_data", "graphs_data.pop", "enumerate", "rgnn.obj_array", "rgnn.obj_array", "rgnn.obj_array", "rgnn.obj_array", "numpy.array", "rgnn.TUDatasetLoader.config.copy", "dict", "rgnn.create_graph_from_tu_data", "rgnn.create_graph_from_tu_data", "rgnn.create_graph_from_tu_data", "rgnn.create_graph_from_tu_data", "graphs.append", "numpy.array.append", "len", "graphs_data.items", "rgnn.create_graph_from_tu_data.order", "rgnn.create_graph_from_tu_data.size"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetLoader._parse_tu_data", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.obj_array", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.obj_array", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.obj_array", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.obj_array", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.create_graph_from_tu_data", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.create_graph_from_tu_data", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.create_graph_from_tu_data", "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.create_graph_from_tu_data", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["def", "in_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"in_meta\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "out_meta", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"out_meta\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "full_name", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "name", "+", "self", ".", "name_suffix", "\n", "\n", "", "@", "property", "\n", "def", "dataset", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ")", "[", "\"elements\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "dataset_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "True", ")", "[", "\"size\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "stratify_labels", "(", "self", ")", ":", "\n", "    ", "if", "not", "self", ".", "stratify", ":", "\n", "      ", "return", "None", "\n", "\n", "", "return", "self", ".", "_cache_dataset", "(", "only_meta", "=", "False", ")", "[", "\"stratify_labels\"", "]", "\n", "\n", "", "@", "property", "\n", "def", "dataset_type", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "loader", ".", "dataset_type", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetProvider.__init__": [[81, 87], ["rgnn.TUDatasetLoader", "rgnn.CachingDatasetProvider.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["    ", "return", "self", ".", "_get_stats", "(", ")", "\n", "\n", "", "@", "property", "\n", "def", "splits", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_splits", "is", "None", ":", "\n", "      ", "self", ".", "_splits", "=", "self", ".", "_make_splits", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.TUDatasetProvider._make_named_splits": [[88, 98], ["dict", "dict", "dict", "dict"], "methods", ["None"], ["", "return", "self", ".", "_splits", "\n", "\n", "", "@", "property", "\n", "def", "named_splits", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "_named_splits", "is", "None", ":", "\n", "      ", "self", ".", "_named_splits", "=", "self", ".", "_get_named_splits", "(", ")", "\n", "\n", "", "return", "self", ".", "_named_splits", "\n", "\n", "", "def", "_load_dataset", "(", "self", ",", "only_meta", "=", "False", ",", "id", "=", "None", ")", ":", "\n", "    ", "return", "self", ".", "loader", ".", "load_dataset", "(", "only_meta", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.PresplitTUDatasetProvider.__init__": [[103, 113], ["rgnn.TUDatasetLoader", "rgnn.TUDatasetLoader", "rgnn.TUDatasetLoader", "rgnn.CachingDatasetProvider.__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["\n", "", "if", "self", ".", "_dataset", "is", "None", "or", "not", "(", "only_meta", "or", "\"elements\"", "in", "self", ".", "_dataset", ")", ":", "\n", "      ", "self", ".", "_dataset", "=", "self", ".", "_load_dataset", "(", "only_meta", ",", "id", ")", "\n", "\n", "", "return", "self", ".", "_dataset", "\n", "\n", "", "def", "unload_dataset", "(", "self", ")", ":", "\n", "    ", "self", ".", "_dataset", "=", "None", "\n", "\n", "", "def", "unload_train_metadata", "(", "self", ")", ":", "\n", "    ", "self", ".", "_train_metadata_lut", "=", "defaultdict", "(", "dict", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.tu_dataset": [[114, 120], ["funcy.func_partial"], "function", ["None"], ["\n", "", "def", "__make_model_selection_splits", "(", "self", ",", "train_o", ",", "strat_o", "=", "None", ")", ":", "\n", "    ", "if", "self", ".", "inner_k", "is", "None", ":", "\n", "      ", "train_i", ",", "val_i", ",", "_", "=", "preproc_utils", ".", "make_holdout_split", "(", "\n", "self", ".", "inner_holdout", ",", "train_o", ",", "strat_o", ")", "\n", "return", "[", "dict", "(", "\n", "train", "=", "train_i", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.provider.presplit_tu_dataset": [[121, 127], ["funcy.func_partial"], "function", ["None"], ["validation", "=", "val_i", ")", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "\n", "dict", "(", "train", "=", "train_i", ",", "validation", "=", "val_i", ")", "\n", "for", "train_i", ",", "val_i", ",", "_", "in", "preproc_utils", ".", "make_kfold_splits", "(", "\n", "self", ".", "inner_k", ",", "train_o", ",", "strat_o", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.parse_tu_data": [[5, 127], ["set", "set", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "node_labels_path.exists", "edge_labels_path.exists", "node_attrs_path.exists", "edge_attrs_path.exists", "graph_labels_path.exists", "open", "enumerate", "open", "enumerate", "max", "max", "f.readlines", "line.rstrip.rstrip", "int", "indicator.append", "graph_nodes[].append", "f.readlines", "line.rstrip.rstrip", "edge_indicator.append", "graph_edges[].append", "open", "enumerate", "open", "enumerate", "open", "enumerate", "open", "enumerate", "open", "enumerate", "open", "enumerate", "set", "min", "set", "min", "int", "f.readlines", "line.rstrip.rstrip", "int", "set.add", "node_labels[].append", "f.readlines", "line.rstrip.rstrip", "int", "set.add", "edge_labels[].append", "f.readlines", "line.rstrip.rstrip", "numpy.array", "node_attrs[].append", "f.readlines", "line.rstrip.rstrip", "numpy.array", "edge_attrs[].append", "f.readlines", "line.rstrip.rstrip", "int", "min", "f.readlines", "line.rstrip.rstrip", "float", "graph_targets.append", "line.rstrip.split", "line.rstrip.split", "line.rstrip.split", "graph_targets.append", "graph_targets.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["import", "contextlib", "\n", "import", "numpy", "as", "np", "\n", "import", "funcy", "as", "fy", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "networkx", "as", "nx", "\n", "import", "inspect", "\n", "import", "pickle", "\n", "\n", "def", "tolerant", "(", "f", "=", "None", ",", "only_named", "=", "True", ",", "ignore_varkwargs", "=", "False", ")", ":", "\n", "  ", "if", "f", "is", "None", ":", "\n", "    ", "return", "lambda", "f", ":", "tolerant", "(", "f", ",", "only_named", ",", "ignore_varkwargs", ")", "\n", "\n", "", "if", "hasattr", "(", "f", ",", "\"__tolerant__\"", ")", ":", "\n", "    ", "return", "f", "\n", "\n", "", "spec", "=", "inspect", ".", "getfullargspec", "(", "f", ".", "__init__", "if", "inspect", ".", "isclass", "(", "f", ")", "else", "f", ")", "\n", "f_varargs", "=", "spec", ".", "varargs", "is", "not", "None", "\n", "f_varkws", "=", "not", "ignore_varkwargs", "and", "spec", ".", "varkw", "is", "not", "None", "\n", "\n", "if", "(", "only_named", "or", "f_varargs", ")", "and", "f_varkws", ":", "\n", "    ", "return", "f", "\n", "\n", "", "f_args", "=", "spec", ".", "args", "\n", "f_kwonlyargs", "=", "spec", ".", "kwonlyargs", "\n", "\n", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "(", "only_named", "or", "f_varargs", ")", ":", "\n", "      ", "args", "=", "args", "[", ":", "len", "(", "f_args", ")", "]", "\n", "", "if", "not", "f_varkws", ":", "\n", "      ", "kwargs", "=", "fy", ".", "project", "(", "kwargs", ",", "f_args", "[", "len", "(", "args", ")", ":", "]", "+", "f_kwonlyargs", ")", "\n", "\n", "", "return", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "wrapper", ".", "__tolerant__", "=", "True", "\n", "\n", "return", "wrapper", "\n", "\n", "", "def", "unwrap_method", "(", "f", ")", ":", "\n", "  ", "return", "getattr", "(", "f", ",", "\"__func__\"", ",", "f", ")", "\n", "\n", "", "def", "tolerant_method", "(", "f", ")", ":", "\n", "  ", "return", "tolerant", "(", "unwrap_method", "(", "f", ")", ")", "\n", "\n", "\n", "", "fully_tolerant", "=", "tolerant", "(", "only_named", "=", "False", ")", "\n", "\n", "def", "select_prefixed_keys", "(", "map", ",", "prefix", ",", "include_others", "=", "False", ",", "target", "=", "None", ")", ":", "\n", "  ", "if", "target", "is", "None", ":", "\n", "    ", "target", "=", "dict", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "map", ".", "items", "(", ")", ":", "\n", "    ", "if", "k", ".", "startswith", "(", "prefix", ")", ":", "\n", "      ", "target", "[", "k", "[", "len", "(", "prefix", ")", ":", "]", "]", "=", "v", "\n", "", "elif", "include_others", ":", "\n", "      ", "target", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "target", "\n", "\n", "", "class", "NumpyEncoder", "(", "json", ".", "JSONEncoder", ")", ":", "\n", "  ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "if", "(", "\n", "isinstance", "(", "obj", ",", "np", ".", "float32", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "float64", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "int32", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "int64", ")", ")", ":", "\n", "      ", "return", "np", ".", "asscalar", "(", "obj", ")", "\n", "", "return", "super", "(", ")", ".", "default", "(", "obj", ")", "\n", "\n", "", "", "class", "NumpyDecoder", "(", "json", ".", "JSONDecoder", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "object_hook", "=", "self", ".", "object_hook", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "object_hook", "(", "self", ",", "obj", ")", ":", "\n", "    ", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "      ", "if", "fy", ".", "all", "(", "lambda", "o", ":", "isinstance", "(", "o", ",", "numbers", ".", "Number", ")", ",", "obj", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "obj", ")", "\n", "", "else", ":", "\n", "        ", "return", "[", "self", ".", "object_hook", "(", "o", ")", "for", "o", "in", "obj", "]", "\n", "", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "      ", "for", "key", "in", "obj", ".", "keys", "(", ")", ":", "\n", "        ", "obj", "[", "key", "]", "=", "self", ".", "object_hook", "(", "obj", "[", "key", "]", ")", "\n", "\n", "", "", "return", "obj", "\n", "\n", "", "", "def", "obj_array", "(", "objects", ")", ":", "\n", "  ", "a", "=", "np", ".", "empty", "(", "len", "(", "objects", ")", ",", "dtype", "=", "\"O\"", ")", "\n", "a", "[", ":", "]", "=", "objects", "\n", "\n", "return", "a", "\n", "\n", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "local_seed", "(", "seed", ")", ":", "\n", "  ", "state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "try", ":", "\n", "    ", "yield", "\n", "", "finally", ":", "\n", "    ", "np", ".", "random", ".", "set_state", "(", "state", ")", "\n", "\n", "", "", "def", "cart", "(", "*", "pos_params", ",", "**", "params", ")", ":", "\n", "  ", "\"Lazily computes the cartesian product of the given lists or dicts.\"", "\n", "if", "len", "(", "pos_params", ")", ">", "0", ":", "\n", "    ", "return", "itertools", ".", "product", "(", "*", "pos_params", ")", "\n", "\n", "", "return", "(", "dict", "(", "zip", "(", "params", ",", "x", ")", ")", "for", "x", "in", "itertools", ".", "product", "(", "*", "params", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "def", "cart_merge", "(", "*", "dicts", ")", ":", "\n", "  ", "\"Lazily computes all possible merge combinations of the given dicts.\"", "\n", "return", "(", "fy", ".", "merge", "(", "*", "c", ")", "for", "c", "in", "itertools", ".", "product", "(", "*", "dicts", ")", ")", "\n", "\n", "", "def", "entry_duplicator", "(", "duplicates", ")", ":", "\n", "  ", "def", "f", "(", "d", ")", ":", "\n", "    ", "for", "source", ",", "targets", "in", "duplicates", ".", "items", "(", ")", ":", "\n", "      ", "d_source", "=", "d", "[", "source", "]", "\n", "for", "target", "in", "targets", ":", "\n", "        ", "d", "[", "target", "]", "=", "d_source", "\n", "\n", "", "", "return", "d", "\n", "\n", "", "return", "f", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.tu.utils.create_graph_from_tu_data": [[129, 159], ["networkx.Graph", "enumerate", "enumerate", "dict", "nx.Graph.add_node", "dict", "nx.Graph.add_edge"], "function", ["None"], ["", "def", "unzip", "(", "tuples", ")", ":", "\n", "  ", "return", "list", "(", "zip", "(", "*", "tuples", ")", ")", "\n", "\n", "", "def", "vec_to_unit", "(", "feat", ")", ":", "\n", "  ", "u", "=", "0", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "np", ".", "clip", "(", "feat", ",", "0", ",", "1", ")", ",", "1", ")", ":", "\n", "    ", "u", "+=", "(", "2", "**", "-", "i", ")", "*", "s", "\n", "\n", "", "return", "u", "\n", "\n", "", "def", "draw_graph", "(", "\n", "g", ",", "y", "=", "None", ",", "with_features", "=", "False", ",", "with_colors", "=", "True", ",", "\n", "label_colors", "=", "True", ",", "layout", "=", "\"spring\"", ")", ":", "\n", "  ", "plt", ".", "figure", "(", ")", "\n", "\n", "if", "y", "is", "not", "None", ":", "\n", "    ", "plt", ".", "title", "(", "'Label: {}'", ".", "format", "(", "y", ")", ")", "\n", "\n", "", "cmap", "=", "plt", ".", "get_cmap", "(", "\"hsv\"", ")", "\n", "node_color", "=", "[", "\n", "vec_to_unit", "(", "[", "d", ".", "get", "(", "\"label\"", ",", "0", ")", "]", "if", "label_colors", "else", "d", ".", "get", "(", "\"features\"", ",", "[", "]", ")", ")", "\n", "for", "n", ",", "d", "in", "g", ".", "nodes", "(", "data", "=", "True", ")", "]", "if", "with_colors", "else", "\"#1f78b4\"", "\n", "\n", "f", "=", "dict", "(", "\n", "spring", "=", "nx", ".", "draw_spring", ",", "\n", "planar", "=", "nx", ".", "draw_planar", ",", "\n", "spectral", "=", "nx", ".", "draw_spectral", ",", "\n", "circular", "=", "nx", ".", "draw_circular", ",", "\n", "random", "=", "nx", ".", "draw_random", ",", "\n", "kawai", "=", "nx", ".", "draw_kamada_kawai", ")", "[", "layout", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.History.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "if", "in_encoder", "is", "not", "None", ":", "\n", "      ", "in_encoder_gen", "=", "in_encoder", "\n", "", "if", "out_encoder", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.__init__": [[15, 24], ["scikit.SkModel._validate_enc", "scikit.SkModel.config.get", "scikit.SkModel.config.get", "rgnn.tolerant_method", "rgnn.tolerant_method", "funcy.merge"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel._validate_enc", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant_method"], ["", "def", "create_graph_preprocessors", "(", "in_enc", ",", "in_encoder_gen", ",", ")", ":", "\n", "# Regression:", "\n", "  ", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"integer\"", ")", ",", "(", "in_enc", ",", "\"float\"", ",", "\"scikit\"", ")", ",", "\n", "in_encoder_gen", ")", "\n", "create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"float\"", ")", ",", "(", "in_enc", ",", "\"float\"", ",", "\"scikit\"", ")", ",", "\n", "in_encoder_gen", ")", "\n", "\n", "# Classification:", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.enc": [[25, 28], ["None"], "methods", ["None"], ["create_preprocessor", "(", "\n", "(", "\"graph\"", ",", "\"binary\"", ")", ",", "(", "in_enc", ",", "\"class\"", ",", "\"scikit\"", ")", ",", "\n", "in_encoder_gen", ")", "\n", "create_preprocessor", "(", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.metrics_names": [[29, 32], ["None"], "methods", ["None"], ["(", "\"graph\"", ",", "\"integer\"", ")", ",", "(", "in_enc", ",", "\"class\"", ",", "\"scikit\"", ")", ",", "\n", "in_encoder_gen", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel._validate_enc": [[33, 36], ["rgnn.process_model_encs", "rgnn.process_model_encs"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.process_model_encs", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.process_model_encs"], ["", "vector_input_encodings", "=", "[", "\"graph2vec\"", "]", "\n", "kernel_input_encodings", "=", "[", "\"wlst\"", ",", "\"wlsp\"", "]", "\n", "svm_output_encodings", "=", "[", "\"class\"", ",", "\"float\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.fit": [[37, 50], ["scikit.SkModel.model.fit().score", "scikit.History", "scikit.SkModel.model.score", "scikit.SkModel.model.fit"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.fit"], ["create_graph_preprocessors", "(", "\n", "\"graph2vec\"", ",", "g2v", ".", "Graph2VecEncoder", ")", "\n", "\n", "create_graph_preprocessors", "(", "\n", "\"wlst\"", ",", "lambda", "T", "=", "5", ",", "\n", "**", "config", ":", "gk", ".", "GrakelEncoder", "(", "\n", "f\"gram_wlst_{T}\"", ",", "[", "dict", "(", "name", "=", "\"WL\"", ",", "n_iter", "=", "T", ")", ",", "\"VH\"", "]", ",", "**", "config", ")", ")", "\n", "\n", "create_graph_preprocessors", "(", "\n", "\"wlsp\"", ",", "lambda", "T", "=", "5", ",", "\n", "**", "config", ":", "gk", ".", "GrakelEncoder", "(", "\n", "f\"gram_wlsp_{T}\"", ",", "[", "dict", "(", "name", "=", "\"WL\"", ",", "n_iter", "=", "T", ")", ",", "\"SP\"", "]", ",", "**", "config", ")", ")", "\n", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.evaluate": [[51, 53], ["scikit.SkModel.model.score"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.predict": [[54, 58], ["scikit.SkModel.model.predict", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.predict"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.create_model": [[59, 74], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.pipeline_step": [[6, 43], ["hasattr", "rgnn.utils.tolerant", "funcy.wraps", "funcy.wraps", "pipeline.pipeline_step", "funcy.merge", "rgnn.utils.select_prefixed_keys", "rgnn.utils.tolerant.", "rgnn.utils.tolerant.", "pipeline.create_pipeline"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.pipeline_step", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.select_prefixed_keys", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.create_pipeline"], ["def", "pipeline_step", "(", "f", "=", "None", ",", "macro", "=", "False", ",", "share_prefix", "=", "False", ")", ":", "\n", "  ", "if", "f", "is", "None", ":", "\n", "    ", "return", "lambda", "f", ":", "pipeline_step", "(", "f", ",", "macro", ",", "share_prefix", ")", "\n", "\n", "", "if", "hasattr", "(", "f", ",", "\"__pipeline_step__\"", ")", ":", "\n", "    ", "return", "f", "\n", "\n", "", "f", "=", "tolerant", "(", "f", ")", "\n", "\n", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "step", "(", "*", "args", ",", "prefix", "=", "None", ",", "**", "kwargs1", ")", ":", "\n", "    ", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "execute", "(", "input", ",", "**", "kwargs2", ")", ":", "\n", "      ", "if", "prefix", "is", "not", "None", ":", "\n", "        ", "kwargs3", "=", "select_prefixed_keys", "(", "kwargs2", ",", "prefix", "+", "\"_\"", ")", "\n", "", "else", ":", "\n", "        ", "kwargs3", "=", "{", "}", "\n", "\n", "", "kwargs", "=", "fy", ".", "merge", "(", "kwargs2", ",", "kwargs3", ",", "kwargs1", ")", "\n", "\n", "if", "share_prefix", ":", "\n", "        ", "res", "=", "f", "(", "input", ",", "*", "args", ",", "prefix", "=", "prefix", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "res", "=", "f", "(", "input", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "if", "macro", ":", "\n", "        ", "return", "create_pipeline", "(", "res", ")", "(", "input", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "return", "res", "\n", "\n", "", "", "execute", ".", "__tolerant__", "=", "True", "\n", "\n", "return", "execute", "\n", "\n", "", "step", ".", "__pipeline_step__", "=", "True", "\n", "\n", "return", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.pipeline_start": [[44, 55], ["rgnn.utils.tolerant", "funcy.wraps", "pipeline.pipeline_step", "rgnn.utils.tolerant."], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.pipeline_step"], ["", "def", "pipeline_start", "(", "f", ")", ":", "\n", "  ", "f", "=", "tolerant", "(", "f", ")", "\n", "\n", "# input is ignored because f returns the initial input:", "\n", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "_", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "f", "(", "**", "kwargs", ")", "\n", "\n", "", "wrapper", ".", "__tolerant__", "=", "True", "\n", "\n", "return", "pipeline_step", "(", "wrapper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.to_executable_step": [[57, 73], ["hasattr", "isinstance", "rgnn.utils.tolerant", "f", "tuple", "isinstance", "pipeline.create_pipeline", "pipeline.to_executable_step", "p"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.create_pipeline", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.to_executable_step"], ["", "def", "to_executable_step", "(", "f", ")", ":", "\n", "  ", "if", "hasattr", "(", "f", ",", "\"__pipeline_step__\"", ")", ":", "\n", "    ", "return", "f", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "f", ",", "coll", ".", "Iterable", ")", ":", "\n", "    ", "pipelines", "=", "[", "(", "\n", "create_pipeline", "(", "s", ")", "if", "isinstance", "(", "s", ",", "coll", ".", "Iterable", ")", "\n", "else", "to_executable_step", "(", "s", ")", ")", "\n", "for", "s", "in", "f", "]", "\n", "\n", "def", "split_step", "(", "input", ",", "**", "kwargs", ")", ":", "\n", "      ", "return", "tuple", "(", "p", "(", "input", ",", "**", "kwargs", ")", "for", "p", "in", "pipelines", ")", "\n", "\n", "", "return", "split_step", "\n", "\n", "", "return", "tolerant", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.create_pipeline": [[74, 90], ["pipeline.to_executable_step", "funcy.merge", "arg_transformer", "executable_step"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.to_executable_step", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.keras.arg_transformer"], ["", "def", "create_pipeline", "(", "steps", ",", "arg_transformer", "=", "None", ",", "**", "kwargs1", ")", ":", "\n", "  ", "executable_steps", "=", "[", "to_executable_step", "(", "step", ")", "for", "step", "in", "steps", "]", "\n", "\n", "def", "pipeline", "(", "input", "=", "None", ",", "**", "kwargs2", ")", ":", "\n", "    ", "a", "=", "input", "\n", "kwargs", "=", "fy", ".", "merge", "(", "kwargs1", ",", "kwargs2", ")", "\n", "\n", "if", "arg_transformer", "is", "not", "None", ":", "\n", "      ", "kwargs", "=", "arg_transformer", "(", "kwargs", ")", "\n", "\n", "", "for", "executable_step", "in", "executable_steps", ":", "\n", "      ", "a", "=", "executable_step", "(", "a", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "a", "\n", "\n", "", "return", "pipeline", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.keras.as_model": [[8, 37], ["isinstance", "tensorflow.keras.Model", "list", "tensorflow.keras.optimizers.get", "tensorflow.keras.losses.get", "keras.Model.compile", "list.values", "isinstance", "dict", "tensorflow.keras.metrics.get", "dict"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["@", "pipeline", ".", "pipeline_step", "\n", "def", "as_model", "(", "\n", "io", ",", "name", ",", "compile", "=", "True", ",", "\n", "optimizer", "=", "\"adam\"", ",", "\n", "learning_rate", "=", "None", ",", "\n", "loss", "=", "\"mse\"", ",", "\n", "metrics", "=", "[", "]", ")", ":", "\n", "  ", "inputs", ",", "outputs", "=", "io", "\n", "\n", "if", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "    ", "inputs", "=", "list", "(", "inputs", ".", "values", "(", ")", ")", "\n", "\n", "", "m", "=", "keras", ".", "Model", "(", "\n", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ",", "name", "=", "name", ")", "\n", "\n", "if", "compile", ":", "\n", "    ", "if", "learning_rate", "is", "not", "None", "and", "isinstance", "(", "optimizer", ",", "str", ")", ":", "\n", "      ", "optimizer", "=", "dict", "(", "\n", "class_name", "=", "optimizer", ",", "\n", "config", "=", "dict", "(", "learning_rate", "=", "learning_rate", ")", ")", "\n", "", "optimizer", "=", "keras", ".", "optimizers", ".", "get", "(", "optimizer", ")", "\n", "loss", "=", "keras", ".", "losses", ".", "get", "(", "loss", ")", "\n", "metrics", "=", "[", "]", "if", "metrics", "is", "None", "else", "[", "\n", "keras", ".", "metrics", ".", "get", "(", "m", ")", "for", "m", "in", "metrics", "]", "\n", "\n", "m", ".", "compile", "(", "\n", "optimizer", "=", "optimizer", ",", "loss", "=", "loss", ",", "metrics", "=", "metrics", ")", "\n", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.keras.arg_transformer": [[38, 56], ["kwargs.get", "rgnn.tolerant"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant"], ["", "def", "arg_transformer", "(", "evaluation_selector", ")", ":", "\n", "  ", "if", "evaluation_selector", "is", "None", ":", "\n", "    ", "return", "fy", ".", "identity", "\n", "\n", "", "def", "transformer", "(", "kwargs", ")", ":", "\n", "    ", "if", "not", "kwargs", ".", "get", "(", "\"compile\"", ",", "True", ")", ":", "\n", "      ", "return", "kwargs", "\n", "\n", "", "loss", ",", "metrics", "=", "utils", ".", "tolerant", "(", "evaluation_selector", ")", "(", "**", "kwargs", ")", "\n", "\n", "if", "loss", "is", "not", "None", "and", "\"loss\"", "not", "in", "kwargs", ":", "\n", "      ", "kwargs", "[", "\"loss\"", "]", "=", "loss", "\n", "", "if", "metrics", "is", "not", "None", "and", "\"metrics\"", "not", "in", "kwargs", ":", "\n", "      ", "kwargs", "[", "\"metrics\"", "]", "=", "metrics", "\n", "\n", "", "return", "kwargs", "\n", "\n", "", "return", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.keras.default_evaluation_selector": [[57, 69], ["None"], "function", ["None"], ["", "def", "default_evaluation_selector", "(", "out_enc", ")", ":", "\n", "  ", "if", "out_enc", "==", "\"multiclass\"", ":", "\n", "    ", "loss", "=", "\"categorical_crossentropy\"", "\n", "metrics", "=", "[", "\"categorical_accuracy\"", "]", "\n", "", "elif", "out_enc", "==", "\"binary\"", ":", "\n", "    ", "loss", "=", "\"binary_crossentropy\"", "\n", "metrics", "=", "[", "\"binary_accuracy\"", "]", "\n", "", "else", ":", "\n", "    ", "loss", "=", "\"mse\"", "\n", "metrics", "=", "[", "\"mae\"", "]", "\n", "\n", "", "return", "loss", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.keras.create_model": [[70, 78], ["rgnn.create_model", "keras.arg_transformer"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.create_model", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.keras.arg_transformer"], ["", "def", "create_model", "(", "\n", "name", ",", "steps", ",", "evaluation_selector", "=", "default_evaluation_selector", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "return", "model", ".", "create_model", "(", "\n", "as_model", ",", "name", ",", "steps", ",", "\n", "model_family", "=", "\"tf\"", ",", "\n", "arg_transformer", "=", "arg_transformer", "(", "evaluation_selector", ")", ",", "\n", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.model_inputs": [[5, 17], ["rgnn.tolerant", "funcy.wraps", "rgnn.pipeline_start", "pipeline.tolerant."], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.pipeline_start"], ["def", "model_inputs", "(", "f", ")", ":", "\n", "  ", "f", "=", "pipeline", ".", "tolerant", "(", "f", ")", "\n", "\n", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "inputs", "=", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "return", "inputs", ",", "inputs", "\n", "\n", "", "wrapper", ".", "__tolerant__", "=", "True", "\n", "\n", "return", "pipeline", ".", "pipeline_start", "(", "wrapper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.model_step": [[18, 37], ["rgnn.tolerant", "funcy.wraps", "rgnn.pipeline_step", "pipeline.tolerant.", "model.model_step"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.pipeline_step", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.model_step"], ["", "def", "model_step", "(", "f", "=", "None", ",", "macro", "=", "False", ")", ":", "\n", "  ", "if", "f", "is", "None", ":", "\n", "    ", "return", "lambda", "f", ":", "model_step", "(", "f", ",", "macro", ")", "\n", "\n", "", "f", "=", "pipeline", ".", "tolerant", "(", "f", ")", "\n", "\n", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "io", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "inputs", ",", "outputs", "=", "io", "\n", "new_outputs", "=", "f", "(", "outputs", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "macro", ":", "\n", "      ", "return", "new_outputs", "\n", "", "else", ":", "\n", "      ", "return", "inputs", ",", "new_outputs", "\n", "\n", "", "", "wrapper", ".", "__tolerant__", "=", "True", "\n", "\n", "return", "pipeline", ".", "pipeline_step", "(", "wrapper", ",", "macro", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.process_model_encs": [[38, 88], ["kwargs.get", "kwargs.get", "kwargs.get", "funcy.first", "funcy.first", "funcy.first", "funcy.first", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["", "def", "process_model_encs", "(", "input_encodings", ",", "output_encodings", ",", "model_family", ")", ":", "\n", "  ", "def", "processor", "(", "kwargs", ")", ":", "\n", "    ", "in_enc", "=", "kwargs", ".", "get", "(", "\"in_enc\"", ",", "None", ")", "\n", "out_enc", "=", "kwargs", ".", "get", "(", "\"out_enc\"", ",", "None", ")", "\n", "family", "=", "kwargs", ".", "get", "(", "\"family\"", ",", "None", ")", "\n", "\n", "if", "\"enc\"", "in", "kwargs", ":", "\n", "      ", "enc", "=", "kwargs", "[", "\"enc\"", "]", "\n", "del", "kwargs", "[", "\"enc\"", "]", "\n", "if", "in_enc", "is", "None", ":", "\n", "        ", "in_enc", "=", "enc", "[", "0", "]", "\n", "", "if", "out_enc", "is", "None", ":", "\n", "        ", "out_enc", "=", "enc", "[", "1", "]", "\n", "", "if", "family", "is", "None", "and", "len", "(", "enc", ")", ">", "2", ":", "\n", "        ", "family", "=", "enc", "[", "2", "]", "\n", "\n", "", "", "if", "len", "(", "input_encodings", ")", "==", "1", "and", "in_enc", "is", "None", ":", "\n", "      ", "in_enc", "=", "fy", ".", "first", "(", "input_encodings", ")", "\n", "\n", "", "if", "len", "(", "output_encodings", ")", "==", "1", "and", "out_enc", "is", "None", ":", "\n", "      ", "out_enc", "=", "fy", ".", "first", "(", "output_encodings", ")", "\n", "\n", "", "if", "in_enc", "is", "not", "None", ":", "\n", "      ", "assert", "in_enc", "in", "input_encodings", ",", "f\"'{in_enc}' inputs are not supported.\"", "\n", "", "else", ":", "\n", "      ", "assert", "len", "(", "input_encodings", ")", "==", "1", ",", "\"Unknown model input encoding.\"", "\n", "in_enc", "=", "fy", ".", "first", "(", "input_encodings", ")", "\n", "\n", "", "if", "out_enc", "is", "not", "None", ":", "\n", "      ", "assert", "out_enc", "in", "output_encodings", ",", "f\"'{out_enc}' outputs are not supported.\"", "\n", "", "else", ":", "\n", "      ", "assert", "len", "(", "output_encodings", ")", "==", "1", ",", "\"Unknown model output encoding.\"", "\n", "out_enc", "=", "fy", ".", "first", "(", "output_encodings", ")", "\n", "\n", "", "if", "family", "is", "not", "None", "and", "model_family", "is", "not", "None", ":", "\n", "      ", "assert", "family", "==", "model_family", ",", "f\"This model is not from the family '{family}'.\"", "\n", "", "else", ":", "\n", "      ", "family", "=", "model_family", "\n", "\n", "", "kwargs", "[", "\"in_enc\"", "]", "=", "in_enc", "\n", "kwargs", "[", "\"out_enc\"", "]", "=", "out_enc", "\n", "kwargs", "[", "\"family\"", "]", "=", "family", "\n", "kwargs", "[", "\"enc\"", "]", "=", "(", "in_enc", ",", "out_enc", ",", "family", ")", "\n", "return", "kwargs", "\n", "", "return", "processor", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.add_enc": [[89, 100], ["None"], "function", ["None"], ["", "def", "add_enc", "(", "model", ",", "in_enc", "=", "None", ",", "out_enc", "=", "None", ",", "family", "=", "None", ")", ":", "\n", "  ", "try", ":", "\n", "    ", "if", "in_enc", "is", "not", "None", ":", "\n", "      ", "model", ".", "in_enc", "=", "in_enc", "\n", "", "if", "out_enc", "is", "not", "None", ":", "\n", "      ", "model", ".", "out_enc", "=", "out_enc", "\n", "", "if", "family", "is", "not", "None", ":", "\n", "      ", "model", ".", "family", "=", "family", "\n", "", "model", ".", "enc", "=", "(", "in_enc", ",", "out_enc", ",", "family", ")", "\n", "", "finally", ":", "\n", "    ", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.create_model": [[101, 142], ["set", "set", "rgnn.create_pipeline", "funcy.merge", "model.create_model", "as_model", "funcy.compose", "model.process_model_encs"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.pipeline.create_pipeline", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.create_model", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.keras.as_model", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.process_model_encs"], ["", "", "def", "create_model", "(", "\n", "as_model", ",", "name", ",", "steps", ",", "extend_at", "=", "None", ",", "\n", "input_encodings", "=", "[", "]", ",", "output_encodings", "=", "[", "]", ",", "\n", "model_family", "=", "None", ",", "arg_transformer", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "input_encodings", "=", "set", "(", "input_encodings", ")", "\n", "output_encodings", "=", "set", "(", "output_encodings", ")", "\n", "modelFactory", "=", "pipeline", ".", "create_pipeline", "(", "\n", "[", "*", "steps", ",", "as_model", "(", "name", ")", ",", "add_enc", "]", ",", "\n", "arg_transformer", "=", "fy", ".", "compose", "(", "\n", "arg_transformer", "or", "fy", ".", "identity", ",", "\n", "process_model_encs", "(", "\n", "input_encodings", ",", "output_encodings", ",", "model_family", ")", ")", ",", "\n", "**", "kwargs", ")", "\n", "\n", "def", "extend", "(", "\n", "name", ",", "additional_steps", ",", "at", "=", "None", ",", "\n", "input_encodings", "=", "input_encodings", ",", "output_encodings", "=", "output_encodings", ",", "\n", "**", "additional_kwargs", ")", ":", "\n", "    ", "ext_kwargs", "=", "fy", ".", "merge", "(", "kwargs", ",", "additional_kwargs", ")", "\n", "at", "=", "at", "or", "extend_at", "\n", "if", "at", "is", "not", "None", "and", "at", "!=", "\"end\"", ":", "\n", "      ", "before", "=", "steps", "[", ":", "at", "]", "\n", "after", "=", "steps", "[", "at", ":", "]", "\n", "", "else", ":", "\n", "      ", "before", "=", "steps", "\n", "after", "=", "[", "]", "\n", "\n", "", "return", "create_model", "(", "\n", "as_model", ",", "name", ",", "before", "+", "additional_steps", "+", "after", ",", "\n", "extend_at", "=", "extend_at", ",", "\n", "input_encodings", "=", "input_encodings", ",", "output_encodings", "=", "output_encodings", ",", "\n", "**", "ext_kwargs", ")", "\n", "\n", "", "modelFactory", ".", "extend", "=", "extend", "\n", "modelFactory", ".", "name", "=", "name", "\n", "modelFactory", ".", "input_encodings", "=", "input_encodings", "\n", "modelFactory", ".", "output_encodings", "=", "output_encodings", "\n", "modelFactory", ".", "family", "=", "model_family", "\n", "\n", "return", "modelFactory", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layers": [[143, 185], ["rgnn.tolerant", "len", "range", "rgnn.tolerant", "hs.append", "callable", "TypeError", "isinstance", "pipeline.tolerant.", "funcy.merge", "pipeline.tolerant.", "layer_args.get", "funcy.merge", "layer_args.get"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["", "@", "pipeline", ".", "pipeline_step", "\n", "def", "with_layers", "(", "\n", "io", ",", "layer", ",", "layer_units", "=", "[", "]", ",", "layer_args", "=", "None", ",", "\n", "stack_tf", "=", "None", ",", "stack_tf_lookup", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "input", ",", "output", "=", "io", "\n", "layer", "=", "pipeline", ".", "tolerant", "(", "layer", ")", "\n", "hs", "=", "[", "output", "]", "\n", "layer_count", "=", "len", "(", "layer_units", ")", "\n", "\n", "if", "stack_tf", "is", "not", "None", ":", "\n", "    ", "if", "stack_tf_lookup", "is", "not", "None", ":", "\n", "      ", "stack_tf", "=", "stack_tf_lookup", "[", "stack_tf", "]", "\n", "\n", "", "if", "not", "callable", "(", "stack_tf", ")", ":", "\n", "      ", "raise", "TypeError", "(", "\n", "\"Stack transformers need to be callable or resolve to a callable.\"", ")", "\n", "\n", "", "stack_tf", "=", "pipeline", ".", "tolerant", "(", "stack_tf", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "layer_count", ")", ":", "\n", "    ", "if", "layer_args", "is", "None", ":", "\n", "      ", "args", "=", "kwargs", "\n", "", "elif", "isinstance", "(", "layer_args", ",", "dict", ")", ":", "\n", "      ", "args", "=", "fy", ".", "merge", "(", "\n", "kwargs", ",", "layer_args", ".", "get", "(", "i", ",", "layer_args", ".", "get", "(", "i", "-", "layer_count", ",", "{", "}", ")", ")", ")", "\n", "", "elif", "i", "<", "layer_count", "and", "layer_args", "[", "i", "]", "is", "not", "None", ":", "\n", "      ", "args", "=", "fy", ".", "merge", "(", "kwargs", ",", "layer_args", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "      ", "args", "=", "kwargs", "\n", "\n", "", "units", "=", "layer_units", "[", "i", "]", "\n", "h", "=", "hs", "[", "i", "]", "\n", "\n", "if", "stack_tf", "is", "not", "None", ":", "\n", "      ", "h", ",", "units", "=", "stack_tf", "(", "\n", "h", ",", "units", ",", "\n", "input", "=", "input", ",", "hs", "=", "hs", ",", "layer_units", "=", "layer_units", ",", "i", "=", "i", ")", "\n", "\n", "", "hs", ".", "append", "(", "layer", "(", "units", "=", "units", ",", "**", "args", ")", "(", "h", ")", ")", "\n", "\n", "", "return", "input", ",", "hs", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer": [[186, 194], ["rgnn.tolerant", "rgnn.tolerant"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant"], ["", "@", "pipeline", ".", "pipeline_step", "\n", "def", "with_layer", "(", "io", ",", "layer", ",", "with_inputs", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "  ", "if", "with_inputs", ":", "\n", "    ", "return", "pipeline", ".", "tolerant", "(", "layer", ")", "(", "**", "kwargs", ")", "(", "io", ")", "\n", "\n", "", "input", ",", "output", "=", "io", "\n", "\n", "return", "input", ",", "pipeline", ".", "tolerant", "(", "layer", ")", "(", "**", "kwargs", ")", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.merge_ios": [[195, 201], ["len", "merger"], "function", ["None"], ["", "@", "pipeline", ".", "pipeline_step", "\n", "def", "merge_ios", "(", "ios", ",", "merger", "=", "tuple", ")", ":", "\n", "  ", "assert", "len", "(", "ios", ")", ">", "0", "\n", "input", "=", "ios", "[", "0", "]", "[", "0", "]", "\n", "\n", "return", "input", ",", "merger", "(", "output", "for", "_", ",", "output", "in", "ios", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.stack_tf_seq": [[204, 214], ["rgnn.tolerant", "t"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant"], ["", "def", "stack_tf_seq", "(", "*", "transformers", ")", ":", "\n", "  ", "transformers", "=", "[", "pipeline", ".", "tolerant", "(", "t", ")", "for", "t", "in", "transformers", "]", "\n", "\n", "def", "tf_seq", "(", "h", ",", "units", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "t", "in", "transformers", ":", "\n", "      ", "h", ",", "units", "=", "t", "(", "h", ",", "units", ",", "**", "kwargs", ")", "\n", "\n", "", "return", "h", ",", "units", "\n", "\n", "", "return", "tf_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.add_input_tf": [[215, 217], ["None"], "function", ["None"], ["", "def", "add_input_tf", "(", "h", ",", "units", ",", "input", ")", ":", "\n", "  ", "return", "(", "input", ",", "h", ")", ",", "units", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.summarize_graph_stats": [[6, 13], ["dict", "rgnn.stats.utils.statistics", "rgnn.stats.utils.statistics", "rgnn.stats.utils.statistics", "rgnn.stats.utils.statistics", "rgnn.stats.utils.statistics"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics"], ["def", "summarize_graph_stats", "(", "stats", ")", ":", "\n", "  ", "return", "dict", "(", "\n", "node_counts", "=", "statistics", "(", "stats", "[", "\"node_counts\"", "]", ")", ",", "\n", "edge_counts", "=", "statistics", "(", "stats", "[", "\"edge_counts\"", "]", ")", ",", "\n", "node_degrees", "=", "statistics", "(", "stats", "[", "\"node_degrees\"", "]", ")", ",", "\n", "radii", "=", "statistics", "(", "stats", "[", "\"radii\"", "]", ",", "mask_invalid", "=", "True", ")", ",", "\n", "triangles", "=", "statistics", "(", "stats", "[", "\"triangles\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.filter_graph_stats": [[14, 21], ["dict"], "function", ["None"], ["", "def", "filter_graph_stats", "(", "stats", ",", "idxs", ")", ":", "\n", "  ", "return", "dict", "(", "\n", "node_counts", "=", "stats", "[", "\"node_counts\"", "]", "[", "idxs", "]", ",", "\n", "edge_counts", "=", "stats", "[", "\"edge_counts\"", "]", "[", "idxs", "]", ",", "\n", "node_degrees", "=", "stats", "[", "\"node_degrees\"", "]", "[", "idxs", "]", ",", "\n", "radii", "=", "stats", "[", "\"radii\"", "]", "[", "idxs", "]", ",", "\n", "triangles", "=", "stats", "[", "\"triangles\"", "]", "[", "idxs", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.graphs_stats": [[22, 55], ["len", "dict", "node_counts.append", "edge_counts.append", "triangles.append", "graph.summarize_graph_stats", "g.order", "g.size", "radii.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "g.degree", "networkx.algorithms.distance_measures.radius", "radii.append", "sum", "networkx.triangles().values", "networkx.triangles"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.summarize_graph_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["", "def", "graphs_stats", "(", "graphs", ",", "summarize", "=", "True", ")", ":", "\n", "  ", "gl", "=", "len", "(", "graphs", ")", "\n", "log", "=", "gl", ">", "1000", "\n", "node_counts", "=", "[", "]", "\n", "edge_counts", "=", "[", "]", "\n", "radii", "=", "[", "]", "\n", "degrees", "=", "[", "]", "\n", "triangles", "=", "[", "]", "\n", "i", "=", "0", "\n", "\n", "for", "g", "in", "graphs", ":", "\n", "    ", "if", "log", ":", "\n", "      ", "if", "i", "%", "500", "==", "0", ":", "\n", "        ", "print", "(", "f\"[dbg] Graph {i}/{gl}...\"", ")", "\n", "", "i", "+=", "1", "\n", "", "node_counts", ".", "append", "(", "g", ".", "order", "(", ")", ")", "\n", "edge_counts", ".", "append", "(", "g", ".", "size", "(", ")", ")", "\n", "degrees", "+=", "[", "d", "for", "n", ",", "d", "in", "g", ".", "degree", "(", ")", "]", "\n", "try", ":", "\n", "      ", "radii", ".", "append", "(", "nx", ".", "algorithms", ".", "distance_measures", ".", "radius", "(", "g", ")", ")", "\n", "", "except", "Exception", ":", "\n", "      ", "radii", ".", "append", "(", "np", ".", "inf", ")", "\n", "\n", "", "triangles", ".", "append", "(", "sum", "(", "nx", ".", "triangles", "(", "g", ")", ".", "values", "(", ")", ")", "//", "3", ")", "\n", "\n", "", "res", "=", "dict", "(", "\n", "node_counts", "=", "np", ".", "array", "(", "node_counts", ")", ",", "\n", "edge_counts", "=", "np", ".", "array", "(", "edge_counts", ")", ",", "\n", "node_degrees", "=", "np", ".", "array", "(", "degrees", ")", ",", "\n", "radii", "=", "np", ".", "array", "(", "radii", ")", ",", "\n", "triangles", "=", "np", ".", "array", "(", "triangles", ")", ")", "\n", "\n", "return", "summarize_graph_stats", "(", "res", ")", "if", "summarize", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.graph_stat_computer": [[57, 77], ["rgnn.stats.utils.register_stat_computer", "graph.graphs_stats", "dict", "named_splits.items", "graph.summarize_graph_stats", "dict", "graph.summarize_graph_stats", "graph.summarize_graph_stats", "dict", "graph.filter_graph_stats", "graph.summarize_graph_stats", "graph.summarize_graph_stats", "graph.filter_graph_stats", "graph.filter_graph_stats"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.register_stat_computer", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.graphs_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.summarize_graph_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.summarize_graph_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.summarize_graph_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.filter_graph_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.summarize_graph_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.summarize_graph_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.filter_graph_stats", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.graph.filter_graph_stats"], ["", "@", "register_stat_computer", "(", "\"graph\"", ")", "\n", "def", "graph_stat_computer", "(", "graphs", ",", "named_splits", "=", "None", ")", ":", "\n", "  ", "all_stats", "=", "graphs_stats", "(", "graphs", ",", "summarize", "=", "False", ")", "\n", "\n", "if", "named_splits", "is", "None", ":", "\n", "    ", "return", "summarize_graph_stats", "(", "all_stats", ")", "\n", "\n", "", "stats", "=", "dict", "(", "all", "=", "summarize_graph_stats", "(", "all_stats", ")", ")", "\n", "\n", "for", "split_name", ",", "split", "in", "named_splits", ".", "items", "(", ")", ":", "\n", "    ", "stats", "[", "split_name", "]", "=", "dict", "(", "\n", "model_selection", "=", "[", "dict", "(", "\n", "train", "=", "summarize_graph_stats", "(", "filter_graph_stats", "(", "all_stats", ",", "m", "[", "\"train\"", "]", ")", ")", ",", "\n", "val", "=", "summarize_graph_stats", "(", "filter_graph_stats", "(", "\n", "all_stats", ",", "m", "[", "\"validation\"", "]", ")", ")", ")", "\n", "for", "m", "in", "split", "[", "\"model_selection\"", "]", "]", ",", "\n", "test", "=", "summarize_graph_stats", "(", "filter_graph_stats", "(", "all_stats", ",", "split", "[", "\"test\"", "]", ")", ")", "\n", ")", "\n", "\n", "", "return", "stats", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics": [[4, 26], ["numpy.ma.masked_invalid", "numpy.mean", "numpy.std", "numpy.median", "numpy.min", "numpy.max", "numpy.max", "numpy.min", "len", "np.ma.masked_invalid.count", "numpy.mean", "numpy.std", "numpy.median", "numpy.min", "numpy.max", "isinstance", "len"], "function", ["None"], ["import", "itertools", "\n", "import", "contextlib", "\n", "import", "numpy", "as", "np", "\n", "import", "funcy", "as", "fy", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "networkx", "as", "nx", "\n", "import", "inspect", "\n", "import", "pickle", "\n", "\n", "def", "tolerant", "(", "f", "=", "None", ",", "only_named", "=", "True", ",", "ignore_varkwargs", "=", "False", ")", ":", "\n", "  ", "if", "f", "is", "None", ":", "\n", "    ", "return", "lambda", "f", ":", "tolerant", "(", "f", ",", "only_named", ",", "ignore_varkwargs", ")", "\n", "\n", "", "if", "hasattr", "(", "f", ",", "\"__tolerant__\"", ")", ":", "\n", "    ", "return", "f", "\n", "\n", "", "spec", "=", "inspect", ".", "getfullargspec", "(", "f", ".", "__init__", "if", "inspect", ".", "isclass", "(", "f", ")", "else", "f", ")", "\n", "f_varargs", "=", "spec", ".", "varargs", "is", "not", "None", "\n", "f_varkws", "=", "not", "ignore_varkwargs", "and", "spec", ".", "varkw", "is", "not", "None", "\n", "\n", "if", "(", "only_named", "or", "f_varargs", ")", "and", "f_varkws", ":", "\n", "    ", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.general_computer": [[29, 46], ["utils.statistics", "dict", "named_splits.items", "dict", "utils.statistics", "dict", "utils.statistics", "utils.statistics"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics"], ["\n", "@", "fy", ".", "wraps", "(", "f", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "(", "only_named", "or", "f_varargs", ")", ":", "\n", "      ", "args", "=", "args", "[", ":", "len", "(", "f_args", ")", "]", "\n", "", "if", "not", "f_varkws", ":", "\n", "      ", "kwargs", "=", "fy", ".", "project", "(", "kwargs", ",", "f_args", "[", "len", "(", "args", ")", ":", "]", "+", "f_kwonlyargs", ")", "\n", "\n", "", "return", "f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "wrapper", ".", "__tolerant__", "=", "True", "\n", "\n", "return", "wrapper", "\n", "\n", "", "def", "unwrap_method", "(", "f", ")", ":", "\n", "  ", "return", "getattr", "(", "f", ",", "\"__func__\"", ",", "f", ")", "\n", "\n", "", "def", "tolerant_method", "(", "f", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.register_stat_computer": [[50, 57], ["utils.register_stat_computer"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.register_stat_computer"], ["", "fully_tolerant", "=", "tolerant", "(", "only_named", "=", "False", ")", "\n", "\n", "def", "select_prefixed_keys", "(", "map", ",", "prefix", ",", "include_others", "=", "False", ",", "target", "=", "None", ")", ":", "\n", "  ", "if", "target", "is", "None", ":", "\n", "    ", "target", "=", "dict", "(", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "map", ".", "items", "(", ")", ":", "\n", "    ", "if", "k", ".", "startswith", "(", "prefix", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer": [[58, 65], ["isinstance", "stat_computer.get", "tuple", "utils.find_stat_computer", "zip"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.transformer.tuple", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.find_stat_computer"], ["      ", "target", "[", "k", "[", "len", "(", "prefix", ")", ":", "]", "]", "=", "v", "\n", "", "elif", "include_others", ":", "\n", "      ", "target", "[", "k", "]", "=", "v", "\n", "\n", "", "", "return", "target", "\n", "\n", "", "class", "NumpyEncoder", "(", "json", ".", "JSONEncoder", ")", ":", "\n", "  ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.normalize": [[66, 70], ["numpy.ptp", "a.astype", "numpy.min"], "function", ["None"], ["    ", "if", "isinstance", "(", "obj", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "if", "(", "\n", "isinstance", "(", "obj", ",", "np", ".", "float32", ")", "\n", "or", "isinstance", "(", "obj", ",", "np", ".", "float64", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl2.WL2Layer.__init__": [[5, 12], ["super().__init__", "tensorflow.keras.activations.get", "tensorflow.keras.activations.get"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["import", "rgnn", ".", "preprocessing", ".", "utils", "as", "enc_utils", "\n", "import", "rgnn", ".", "preprocessing", ".", "batcher", "as", "batcher", "\n", "import", "rgnn", ".", "preprocessing", ".", "encoder", "as", "encoder", "\n", "import", "rgnn", ".", "preprocessing", ".", "preference", ".", "utility", "as", "pref_util", "\n", "\n", "@", "tolerant", "\n", "def", "feature_dim", "(", "\n", "node_feature_dim", "=", "0", ",", "node_label_count", "=", "0", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl2.WL2Layer.get_config": [[13, 20], ["dict", "super().get_config", "tensorflow.keras.activations.serialize", "tensorflow.keras.activations.serialize"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.CmpLayer.get_config"], ["edge_feature_dim", "=", "0", ",", "edge_label_count", "=", "0", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ",", "\n", "ignore_edge_features", "=", "False", ",", "ignore_edge_labels", "=", "False", ")", ":", "\n", "  ", "if", "ignore_node_features", ":", "\n", "    ", "node_feature_dim", "=", "0", "\n", "", "if", "ignore_node_labels", ":", "\n", "    ", "node_label_count", "=", "0", "\n", "", "if", "ignore_edge_features", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl2.WL2Layer.build": [[21, 42], ["wl2.WL2Layer.add_weight", "wl2.WL2Layer.add_weight", "wl2.WL2Layer.add_weight", "wl2.WL2Layer.add_weight", "wl2.WL2Layer.add_weight"], "methods", ["None"], ["    ", "edge_feature_dim", "=", "0", "\n", "", "if", "ignore_edge_labels", ":", "\n", "    ", "edge_label_count", "=", "0", "\n", "\n", "", "return", "3", "+", "node_feature_dim", "+", "node_label_count", "+", "edge_feature_dim", "+", "edge_label_count", "\n", "\n", "", "def", "eid_lookup", "(", "e_ids", ",", "i", ",", "j", ")", ":", "\n", "  ", "if", "i", ">", "j", ":", "\n", "    ", "i", ",", "j", "=", "j", ",", "i", "\n", "\n", "", "return", "e_ids", "[", "(", "i", ",", "j", ")", "]", "\n", "\n", "", "def", "encode_graph", "(", "\n", "g", ",", "radius", "=", "1", ",", "\n", "node_feature_dim", "=", "0", ",", "node_label_count", "=", "0", ",", "\n", "edge_feature_dim", "=", "0", ",", "edge_label_count", "=", "0", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ",", "\n", "ignore_edge_features", "=", "False", ",", "ignore_edge_labels", "=", "False", ")", ":", "\n", "  ", "assert", "radius", ">=", "1", "\n", "\n", "if", "ignore_node_features", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl2.WL2Layer.call": [[43, 61], ["wl2.wl2_convolution", "wl2.WL2Layer.activation", "tensorflow.nn.bias_add"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl2.wl2_convolution"], ["    ", "node_feature_dim", "=", "0", "\n", "", "if", "ignore_node_labels", ":", "\n", "    ", "node_label_count", "=", "0", "\n", "", "if", "ignore_edge_features", ":", "\n", "    ", "edge_feature_dim", "=", "0", "\n", "", "if", "ignore_edge_labels", ":", "\n", "    ", "edge_label_count", "=", "0", "\n", "\n", "", "g_p", "=", "nx", ".", "power", "(", "g", ",", "radius", ")", "\n", "for", "node", "in", "g", ".", "nodes", ":", "\n", "    ", "g_p", ".", "add_edge", "(", "node", ",", "node", ")", "\n", "\n", "", "e_count", "=", "g_p", ".", "size", "(", ")", "\n", "X_dim", "=", "feature_dim", "(", "\n", "node_feature_dim", ",", "node_label_count", ",", "\n", "edge_feature_dim", ",", "edge_label_count", ")", "\n", "X", "=", "np", ".", "zeros", "(", "(", "e_count", ",", "X_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ref_a", "=", "[", "]", "\n", "ref_b", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl2.WL2Layer.combine": [[62, 69], ["wl2.WL2Layer.inner_activation", "tensorflow.nn.bias_add"], "methods", ["None"], ["backref", "=", "[", "]", "\n", "I_n", "=", "np", ".", "eye", "(", "node_label_count", ")", "\n", "I_e", "=", "np", ".", "eye", "(", "edge_label_count", ")", "\n", "node_label_offset", "=", "3", "\n", "node_feature_offset", "=", "node_label_offset", "+", "node_label_count", "\n", "edge_label_offset", "=", "node_feature_offset", "+", "node_feature_dim", "\n", "edge_feature_offset", "=", "edge_label_offset", "+", "edge_label_count", "\n", "e_ids", "=", "{", "e", ":", "i", "for", "i", ",", "e", "in", "enumerate", "(", "g_p", ".", "edges", ")", "}", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl2.wl2_convolution": [[70, 78], ["tensorflow.gather", "tensorflow.gather", "combinator", "tensorflow.expand_dims", "tensorflow.shape", "tensorflow.scatter_nd"], "function", ["None"], ["i", "=", "0", "\n", "for", "edge", "in", "g_p", ".", "edges", ":", "\n", "    ", "a", ",", "b", "=", "edge", "\n", "neighbors", "=", "list", "(", "nx", ".", "common_neighbors", "(", "g_p", ",", "a", ",", "b", ")", ")", "\n", "n_count", "=", "len", "(", "neighbors", ")", "\n", "n_a", "=", "[", "eid_lookup", "(", "e_ids", ",", "a", ",", "k", ")", "for", "k", "in", "neighbors", "]", "\n", "n_b", "=", "[", "eid_lookup", "(", "e_ids", ",", "b", ",", "k", ")", "for", "k", "in", "neighbors", "]", "\n", "\n", "if", "a", "==", "b", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pooling.SegmentPooling.__init__": [[6, 8], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pooling.SegmentPooling.call": [[9, 15], ["pooling.SegmentPooling.pool", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.pool"], ["", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "    ", "X", "=", "input", "[", "\"X\"", "]", "\n", "graph_idx", "=", "input", "[", "\"graph_idx\"", "]", "\n", "N", "=", "tf", ".", "shape", "(", "input", "[", "\"n\"", "]", ")", "[", "0", "]", "\n", "y", "=", "self", ".", "pool", "(", "X", ",", "graph_idx", ",", "num_segments", "=", "N", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pooling.SegmentPooling.pool": [[16, 19], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "@", "abstractmethod", "\n", "def", "pool", "(", "X", ",", "graph_idx", ",", "num_segments", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pooling.SoftmaxPooling.__init__": [[33, 35], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pooling.SoftmaxPooling.call": [[36, 49], ["tensorflow.exp", "tensorflow.exp", "tensorflow.math.unsorted_segment_sum", "tensorflow.math.unsorted_segment_sum", "tensorflow.math.unsorted_segment_sum", "tensorflow.math.unsorted_segment_sum", "tensorflow.math.divide_no_nan", "tensorflow.math.divide_no_nan", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "    ", "X", "=", "input", "[", "\"X\"", "]", "\n", "X_att", "=", "input", "[", "\"X_att\"", "]", "\n", "graph_idx", "=", "input", "[", "\"graph_idx\"", "]", "\n", "N", "=", "tf", ".", "shape", "(", "input", "[", "\"n\"", "]", ")", "[", "0", "]", "\n", "\n", "X_att", "=", "tf", ".", "exp", "(", "X_att", ")", "\n", "X", "=", "X_att", "*", "X", "\n", "y_att", "=", "tf", ".", "math", ".", "unsorted_segment_sum", "(", "\n", "X_att", ",", "graph_idx", ",", "num_segments", "=", "N", ")", "\n", "y", "=", "tf", ".", "math", ".", "unsorted_segment_sum", "(", "\n", "X", ",", "graph_idx", ",", "num_segments", "=", "N", ")", "\n", "return", "tf", ".", "math", ".", "divide_no_nan", "(", "y", ",", "y_att", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pooling.merge_attention": [[50, 54], ["None"], "function", ["None"], ["", "", "def", "merge_attention", "(", "inputs", ")", ":", "\n", "  ", "input", ",", "input_att", "=", "inputs", "\n", "\n", "return", "{", "**", "input", ",", "\"X_att\"", ":", "input_att", "[", "\"X\"", "]", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GCNPreprocessLayer.__init__": [[5, 7], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["import", "rgnn", ".", "preprocessing", ".", "batcher", "as", "batcher", "\n", "import", "rgnn", ".", "preprocessing", ".", "encoder", "as", "encoder", "\n", "import", "rgnn", ".", "preprocessing", ".", "preference", ".", "utility", "as", "pref_util", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GCNPreprocessLayer.call": [[8, 15], ["wl1.gcn_norm"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.gcn_norm"], ["\n", "@", "tolerant", "\n", "def", "feature_dim", "(", "\n", "node_feature_dim", "=", "0", ",", "node_label_count", "=", "0", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ")", ":", "\n", "  ", "if", "ignore_node_features", ":", "\n", "    ", "node_feature_dim", "=", "0", "\n", "", "if", "ignore_node_labels", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GCNLayer.__init__": [[17, 22], ["super().__init__", "tensorflow.keras.activations.get"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["\n", "", "return", "max", "(", "node_feature_dim", "+", "node_label_count", ",", "1", ")", "\n", "\n", "", "def", "encode_graph", "(", "\n", "g", ",", "node_ordering", "=", "None", ",", "\n", "node_feature_dim", "=", "None", ",", "node_label_count", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GCNLayer.get_config": [[23, 29], ["dict", "super().get_config", "tensorflow.keras.activations.serialize"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.CmpLayer.get_config"], ["ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ")", ":", "\n", "  ", "if", "node_feature_dim", "is", "None", "or", "ignore_node_features", ":", "\n", "    ", "node_feature_dim", "=", "0", "\n", "\n", "", "if", "node_label_count", "is", "None", "or", "ignore_node_labels", ":", "\n", "    ", "node_label_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GCNLayer.build": [[30, 42], ["wl1.GCNLayer.add_weight", "wl1.GCNLayer.add_weight"], "methods", ["None"], ["", "if", "node_ordering", "is", "None", ":", "\n", "    ", "node_ordering", "=", "g", ".", "nodes", "\n", "\n", "", "n_count", "=", "g", ".", "order", "(", ")", "\n", "e_count", "=", "g", ".", "size", "(", ")", "\n", "node_dim", "=", "feature_dim", "(", "node_feature_dim", ",", "node_label_count", ")", "\n", "I_n", "=", "np", ".", "eye", "(", "node_label_count", ")", "\n", "if", "node_feature_dim", ">", "0", "or", "node_label_count", ">", "0", ":", "\n", "    ", "x_init", "=", "np", ".", "zeros", "\n", "", "else", ":", "\n", "    ", "x_init", "=", "np", ".", "ones", "\n", "", "X", "=", "x_init", "(", "(", "n_count", ",", "node_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ref_a", "=", "np", ".", "zeros", "(", "e_count", ",", "dtype", "=", "np", ".", "int32", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GCNLayer.call": [[43, 58], ["wl1.wl1_convolution", "wl1.GCNLayer.activation", "tensorflow.nn.bias_add"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.wl1_convolution"], ["ref_b", "=", "np", ".", "zeros", "(", "e_count", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "n_ids", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "node", "in", "node_ordering", ":", "\n", "    ", "data", "=", "g", ".", "nodes", "[", "node", "]", "\n", "if", "node_label_count", ">", "0", ":", "\n", "      ", "X", "[", "i", ",", "0", ":", "node_label_count", "]", "=", "I_n", "[", "data", "[", "\"label\"", "]", "-", "1", "]", "\n", "", "if", "node_feature_dim", ">", "0", ":", "\n", "      ", "X", "[", "i", ",", "node_label_count", ":", "node_dim", "]", "=", "data", "[", "\"features\"", "]", "\n", "\n", "", "n_ids", "[", "node", "]", "=", "i", "\n", "i", "+=", "1", "\n", "\n", "", "i", "=", "0", "\n", "for", "a", ",", "b", "in", "g", ".", "edges", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GINLayer.__init__": [[60, 66], ["super().__init__", "tensorflow.keras.activations.get"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["ref_b", "[", "i", "]", "=", "n_ids", "[", "b", "]", "\n", "i", "+=", "1", "\n", "\n", "", "return", "dict", "(", "\n", "X", "=", "X", ",", "\n", "ref_a", "=", "ref_a", ",", "\n", "ref_b", "=", "ref_b", ")", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GINLayer.get_config": [[67, 73], ["dict", "super().get_config", "tensorflow.keras.activations.serialize"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.CmpLayer.get_config"], ["\n", "", "def", "vertex_count", "(", "e", ")", ":", "\n", "  ", "return", "len", "(", "e", "[", "\"X\"", "]", ")", "\n", "\n", "", "def", "total_count", "(", "e", ")", ":", "\n", "  ", "return", "len", "(", "e", "[", "\"X\"", "]", ")", "+", "len", "(", "e", "[", "\"ref_a\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GINLayer.build": [[74, 93], ["wl1.GINLayer.add_weight", "wl1.GINLayer.add_weight", "wl1.GINLayer.add_weight", "wl1.GINLayer.add_weight"], "methods", ["None"], ["\n", "", "space_metrics", "=", "dict", "(", "\n", "embeddings_count", "=", "vertex_count", ",", "\n", "total_count", "=", "total_count", "\n", ")", "\n", "\n", "class", "WL1Encoder", "(", "encoder", ".", "ObjectEncoder", ")", ":", "\n", "  ", "name", "=", "\"wl1\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "node_feature_dim", "=", "None", ",", "node_label_count", "=", "None", ",", "\n", "ignore_node_features", "=", "False", ",", "ignore_node_labels", "=", "False", ",", "\n", "ordered", "=", "False", ")", ":", "\n", "    ", "self", ".", "node_feature_dim", "=", "node_feature_dim", "\n", "self", ".", "node_label_count", "=", "node_label_count", "\n", "self", ".", "ignore_node_features", "=", "ignore_node_features", "\n", "self", ".", "ignore_node_labels", "=", "ignore_node_labels", "\n", "self", ".", "ordered", "=", "ordered", "\n", "\n", "if", "ordered", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.GINLayer.call": [[94, 109], ["wl1.wl1_convolution", "wl1.GINLayer.activation", "tensorflow.nn.bias_add", "tensorflow.nn.bias_add"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.wl1_convolution"], ["      ", "self", ".", "name", "+=", "\"_ord\"", "\n", "", "if", "ignore_node_features", "and", "node_feature_dim", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_inf\"", "\n", "", "if", "ignore_node_labels", "and", "node_label_count", ">", "0", ":", "\n", "      ", "self", ".", "name", "+=", "\"_inl\"", "\n", "\n", "", "", "def", "encode_element", "(", "self", ",", "graph", ")", ":", "\n", "    ", "if", "self", ".", "ordered", ":", "\n", "      ", "graph", ",", "node_ordering", "=", "graph", "\n", "", "else", ":", "\n", "      ", "node_ordering", "=", "None", "\n", "\n", "", "return", "encode_graph", "(", "\n", "graph", ",", "\n", "node_feature_dim", "=", "self", ".", "node_feature_dim", ",", "\n", "node_label_count", "=", "self", ".", "node_label_count", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.wl1_convolution": [[110, 119], ["tensorflow.gather", "tensorflow.expand_dims", "tensorflow.tensor_scatter_nd_add", "tensorflow.gather", "tensorflow.expand_dims", "tensorflow.tensor_scatter_nd_add"], "function", ["None"], ["ignore_node_features", "=", "self", ".", "ignore_node_features", ",", "\n", "ignore_node_labels", "=", "self", ".", "ignore_node_labels", ",", "\n", "node_ordering", "=", "node_ordering", ")", "\n", "\n", "", "", "def", "make_wl1_batch", "(", "graphs", ",", "masking", "=", "False", ")", ":", "\n", "  ", "return", "enc_utils", ".", "make_graph_batch", "(", "\n", "graphs", ",", "\n", "ref_keys", "=", "[", "\"ref_a\"", ",", "\"ref_b\"", "]", ",", "\n", "masking_fns", "=", "dict", "(", "\n", "ref_a_idx", "=", "lambda", "e", ":", "e", "[", "\"ref_a\"", "]", ",", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.gcn_norm": [[120, 126], ["tensorflow.ones", "wl1.wl1_convolution", "tensorflow.math.rsqrt", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.wl1.wl1_convolution"], ["ref_b_idx", "=", "lambda", "e", ":", "e", "[", "\"ref_b\"", "]", ")", "if", "masking", "else", "None", ",", "\n", "meta_fns", "=", "dict", "(", "n", "=", "vertex_count", ")", ")", "\n", "\n", "", "class", "WL1Batcher", "(", "batcher", ".", "Batcher", ")", ":", "\n", "  ", "name", "=", "\"wl1\"", "\n", "\n", "def", "__init__", "(", "self", ",", "masking", "=", "False", ",", "space_metric", "=", "\"embeddings_count\"", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefLookupLayer.__init__": [[10, 12], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefLookupLayer.call": [[13, 17], ["pref.pref_lookup"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.pref_lookup"], ["", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "    ", "X", ",", "pref_a", ",", "pref_b", "=", "input", "\n", "\n", "return", "pref_lookup", "(", "X", ",", "pref_a", ",", "pref_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefDiffLayer.__init__": [[19, 21], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefDiffLayer.call": [[22, 26], ["None"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "    ", "X_a", ",", "X_b", "=", "input", "\n", "\n", "return", "X_b", "-", "X_a", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefFirstLayer.__init__": [[28, 30], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefFirstLayer.call": [[31, 35], ["None"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "    ", "X_a", ",", "X_b", "=", "input", "\n", "\n", "return", "X_a", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefQuotientLayer.__init__": [[37, 39], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefQuotientLayer.call": [[40, 44], ["tensorflow.math.divide_no_nan"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "    ", "X_a", ",", "X_b", "=", "input", "\n", "\n", "return", "tf", ".", "math", ".", "divide_no_nan", "(", "X_a", ",", "X_a", "+", "X_b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefSigmoidDiffLayer.__init__": [[46, 48], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.PrefSigmoidDiffLayer.call": [[49, 53], ["tensorflow.sigmoid"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "    ", "X_a", ",", "X_b", "=", "input", "\n", "\n", "return", "tf", ".", "sigmoid", "(", "X_b", "-", "X_a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.CmpLayer.__init__": [[55, 60], ["super().__init__", "tensorflow.keras.activations.get"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get"], ["  ", "def", "__init__", "(", "self", ",", "units", ",", "use_bias", "=", "True", ",", "activation", "=", "None", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "units", "=", "units", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "activation", "=", "keras", ".", "activations", ".", "get", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.CmpLayer.get_config": [[61, 67], ["dict", "super().get_config", "tensorflow.keras.activations.serialize"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.CmpLayer.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "    ", "return", "dict", "(", "\n", "**", "super", "(", ")", ".", "get_config", "(", ")", ",", "\n", "units", "=", "self", ".", "units", ",", "\n", "use_bias", "=", "self", ".", "use_bias", ",", "\n", "activation", "=", "keras", ".", "activations", ".", "serialize", "(", "self", ".", "activation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.CmpLayer.build": [[68, 84], ["pref.CmpLayer.add_weight", "pref.CmpLayer.add_weight", "pref.CmpLayer.add_weight"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "    ", "in_dim", "=", "input_shape", "[", "0", "]", "[", "-", "1", "]", "\n", "assert", "in_dim", "==", "input_shape", "[", "1", "]", "[", "-", "1", "]", ",", "\"Compared objects must be of equal dimensionality.\"", "\n", "\n", "self", ".", "W_1", "=", "self", ".", "add_weight", "(", "\n", "\"W_1\"", ",", "shape", "=", "(", "in_dim", ",", "self", ".", "units", ")", ",", "\n", "trainable", "=", "True", ",", "initializer", "=", "tf", ".", "initializers", ".", "GlorotUniform", ")", "\n", "self", ".", "W_2", "=", "self", ".", "add_weight", "(", "\n", "\"W_2\"", ",", "shape", "=", "(", "in_dim", ",", "self", ".", "units", ")", ",", "\n", "trainable", "=", "True", ",", "initializer", "=", "tf", ".", "initializers", ".", "GlorotUniform", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "      ", "self", ".", "b", "=", "self", ".", "add_weight", "(", "\n", "\"b\"", ",", "shape", "=", "(", "self", ".", "units", ",", ")", ",", "\n", "trainable", "=", "True", ",", "initializer", "=", "tf", ".", "initializers", ".", "Zeros", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.CmpLayer.call": [[85, 103], ["pref.CmpLayer.activation", "pref.CmpLayer.activation", "tensorflow.nn.bias_add", "tensorflow.nn.bias_add"], "methods", ["None"], ["", "", "def", "call", "(", "self", ",", "input", ")", ":", "\n", "    ", "X_a", ",", "X_b", "=", "input", "\n", "XW_a1", "=", "X_a", "@", "self", ".", "W_1", "\n", "XW_b1", "=", "X_b", "@", "self", ".", "W_1", "\n", "XW_a2", "=", "X_a", "@", "self", ".", "W_2", "\n", "XW_b2", "=", "X_b", "@", "self", ".", "W_2", "\n", "\n", "XW_ab", "=", "XW_a1", "+", "XW_b2", "\n", "XW_ba", "=", "XW_b1", "+", "XW_a2", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "      ", "XW_ab", "=", "tf", ".", "nn", ".", "bias_add", "(", "XW_ab", ",", "self", ".", "b", ")", "\n", "XW_ba", "=", "tf", ".", "nn", ".", "bias_add", "(", "XW_ba", ",", "self", ".", "b", ")", "\n", "\n", "", "Y_ab", "=", "self", ".", "activation", "(", "XW_ab", ")", "\n", "Y_ba", "=", "self", ".", "activation", "(", "XW_ba", ")", "\n", "\n", "return", "Y_ab", ",", "Y_ba", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.layers.pref.pref_lookup": [[4, 8], ["tensorflow.gather", "tensorflow.gather"], "function", ["None"], ["def", "pref_lookup", "(", "X", ",", "pref_a", ",", "pref_b", ")", ":", "\n", "  ", "X_a", "=", "tf", ".", "gather", "(", "X", ",", "pref_a", ",", "axis", "=", "0", ")", "\n", "X_b", "=", "tf", ".", "gather", "(", "X", ",", "pref_b", ",", "axis", "=", "0", ")", "\n", "return", "X_a", ",", "X_b", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.svm.svm_model": [[7, 26], ["config.get", "config.get", "rgnn.tolerant"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.tolerant"], ["def", "svm_model", "(", "in_enc", ",", "out_enc", ",", "**", "config", ")", ":", "\n", "  ", "if", "out_enc", "==", "\"class\"", ":", "\n", "    ", "if", "config", ".", "get", "(", "\"kernel\"", ",", "\"linear\"", ")", "==", "\"linear\"", ":", "\n", "      ", "cls", "=", "svm", ".", "LinearSVC", "\n", "if", "\"dual\"", "not", "in", "config", ":", "\n", "        ", "config", "[", "\"dual\"", "]", "=", "False", "\n", "", "", "else", ":", "\n", "      ", "cls", "=", "svm", ".", "SVC", "\n", "", "metric", "=", "\"accuracy\"", "\n", "", "else", ":", "\n", "    ", "if", "config", ".", "get", "(", "\"kernel\"", ",", "\"linear\"", ")", "==", "\"linear\"", ":", "\n", "      ", "cls", "=", "svm", ".", "LinearSVR", "\n", "if", "\"dual\"", "not", "in", "config", ":", "\n", "        ", "config", "[", "\"dual\"", "]", "=", "False", "\n", "", "", "else", ":", "\n", "      ", "cls", "=", "svm", ".", "SVR", "\n", "", "metric", "=", "\"r2\"", "\n", "\n", "", "return", "utils", ".", "tolerant", "(", "cls", ",", "ignore_varkwargs", "=", "True", ")", "(", "**", "config", ")", ",", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.sort": [[5, 59], ["len", "numpy.zeros", "print", "sum", "print", "compare", "range", "len", "len", "range", "len", "len", "len", "len", "lp.append", "rp.append", "new_partitions.append", "new_ranges.append", "new_partitions.append", "new_ranges.append"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["def", "sort", "(", "indices", ",", "compare", ")", ":", "\n", "  ", "n", "=", "len", "(", "indices", ")", "\n", "\n", "if", "n", "<=", "1", ":", "\n", "    ", "return", "indices", "\n", "\n", "", "sorted_indices", "=", "np", ".", "zeros", "(", "n", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "ranges", "=", "[", "0", "]", "\n", "partitions", "=", "[", "indices", "]", "\n", "print", "(", "f\"[dbg] started sorting {n} objects\"", ")", "\n", "m", "=", "1", "\n", "while", "m", ">", "0", ":", "\n", "    ", "todo", "=", "sum", "(", "len", "(", "p", ")", "for", "p", "in", "partitions", ")", "\n", "print", "(", "f\"[dbg] {m} partitions, still unsorted: {todo}/{len(indices)}\"", ")", "\n", "comparisons", "=", "compare", "(", "partitions", ")", "\n", "new_ranges", "=", "[", "]", "\n", "new_partitions", "=", "[", "]", "\n", "comp_start", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "      ", "p_start", "=", "ranges", "[", "i", "]", "\n", "p", "=", "partitions", "[", "i", "]", "\n", "p_len", "=", "len", "(", "p", ")", "\n", "lp", "=", "[", "]", "\n", "rp", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "p_len", "-", "1", ")", ":", "\n", "        ", "if", "comparisons", "[", "comp_start", "+", "j", "]", "<", "0.5", ":", "\n", "          ", "lp", ".", "append", "(", "p", "[", "j", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "          ", "rp", ".", "append", "(", "p", "[", "j", "+", "1", "]", ")", "\n", "\n", "", "", "lp_len", "=", "len", "(", "lp", ")", "\n", "rp_len", "=", "len", "(", "rp", ")", "\n", "sorted_indices", "[", "p_start", "+", "lp_len", "]", "=", "p", "[", "0", "]", "\n", "comp_start", "+=", "p_len", "-", "1", "\n", "\n", "if", "lp_len", "==", "1", ":", "\n", "        ", "sorted_indices", "[", "p_start", "]", "=", "lp", "[", "0", "]", "\n", "", "elif", "lp_len", ">", "1", ":", "\n", "        ", "new_partitions", ".", "append", "(", "lp", ")", "\n", "new_ranges", ".", "append", "(", "p_start", ")", "\n", "\n", "", "if", "rp_len", "==", "1", ":", "\n", "        ", "sorted_indices", "[", "p_start", "+", "lp_len", "+", "1", "]", "=", "rp", "[", "0", "]", "\n", "", "elif", "rp_len", ">", "1", ":", "\n", "        ", "new_partitions", ".", "append", "(", "rp", ")", "\n", "new_ranges", ".", "append", "(", "p_start", "+", "lp_len", "+", "1", ")", "\n", "\n", "", "", "ranges", "=", "new_ranges", "\n", "partitions", "=", "new_partitions", "\n", "m", "=", "len", "(", "partitions", ")", "\n", "\n", "", "return", "sorted_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.model_sort": [[60, 76], ["provider_get", "sort.sort", "sort.model_sort.run"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.sort", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.run_evaluations.run"], ["", "def", "model_sort", "(", "indices", ",", "provider_get", ",", "model", "=", "None", ",", "enc", "=", "None", ",", "**", "config", ")", ":", "\n", "  ", "enc", "=", "enc", "or", "(", "model", "and", "model", ".", "enc", ")", "\n", "assert", "enc", "is", "not", "None", ",", "\"Unknown encoding.\"", "\n", "\n", "data_getter", "=", "provider_get", "(", "enc", ",", "config", "=", "{", "\n", "**", "config", ",", "\"mode\"", ":", "\"pivot_partitions\"", "}", ",", "\n", "reconfigurable_finalization", "=", "True", ")", "\n", "\n", "def", "run", "(", "model", ")", ":", "\n", "    ", "def", "compare", "(", "partitions", ")", ":", "\n", "      ", "data", "=", "data_getter", "(", "pivot_partitions", "=", "partitions", ")", "\n", "return", "model", ".", "predict", "(", "data", ")", "\n", "\n", "", "return", "sort", "(", "indices", ",", "compare", ")", "\n", "\n", "", "return", "run", "if", "model", "is", "None", "else", "run", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.evaluate_model_sort": [[77, 105], ["print", "provider_get", "print", "sort.model_sort", "print", "rgnn.bucket_sorted_metrics", "sort.evaluate_model_sort.rank_metrics"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.model_sort", "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucket_sorted_metrics"], ["", "def", "evaluate_model_sort", "(", "indices", ",", "provider_get", ",", "model", "=", "None", ",", "enc", "=", "None", ",", "**", "config", ")", ":", "\n", "  ", "enc", "=", "enc", "or", "(", "model", "and", "model", ".", "enc", ")", "\n", "assert", "enc", "is", "not", "None", ",", "\"Unknown encoding.\"", "\n", "in_enc", "=", "enc", "[", "0", "]", "\n", "out_enc", "=", "enc", "[", "1", "]", "\n", "\n", "print", "(", "\"Loading target rankings...\"", ")", "\n", "_", ",", "object_rankings", "=", "provider_get", "(", "\n", "enc", "=", "\"null_in\"", ",", "indices", "=", "indices", ",", "config", "=", "config", ")", "\n", "print", "(", "f\"Loaded {len(object_rankings)} target rankings.\"", ")", "\n", "\n", "if", "\"pref\"", "in", "in_enc", ":", "\n", "    ", "predicted_ordering", "=", "model_sort", "(", "indices", ",", "provider_get", ",", "enc", "=", "enc", ",", "**", "config", ")", "\n", "", "elif", "out_enc", "==", "\"float\"", "or", "out_enc", "==", "\"rank_normalized\"", ":", "\n", "    ", "data", "=", "provider_get", "(", "enc", ",", "indices", "=", "indices", ",", "config", "=", "config", ")", "\n", "\n", "def", "predicted_ordering", "(", "model", ")", ":", "\n", "      ", "predicted_rankings", "=", "model", ".", "predict", "(", "data", ")", "\n", "return", "indices", "[", "np", ".", "argsort", "(", "predicted_rankings", ")", "]", "\n", "", "", "else", ":", "\n", "    ", "raise", "Exception", "(", "f\"Unsupported enc {enc}.\"", ")", "\n", "\n", "", "def", "rank_metrics", "(", "model", ")", ":", "\n", "    ", "print", "(", "\"Computing sort metrics...\"", ")", "\n", "return", "rank_metric", ".", "bucket_sorted_metrics", "(", "\n", "indices", ",", "object_rankings", ",", "predicted_ordering", "(", "model", ")", ")", "\n", "\n", "", "return", "rank_metrics", "if", "model", "is", "None", "else", "rank_metrics", "(", "model", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.inputs": [[9, 12], ["rgnn.make_inputs"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preprocessing.tf.make_inputs"], ["@", "cm", ".", "model_inputs", "\n", "def", "inputs", "(", "in_enc", ",", "in_meta", "=", "{", "}", ")", ":", "\n", "  ", "return", "tf_enc", ".", "make_inputs", "(", "in_enc", ",", "in_meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.nn.finalize": [[13, 20], ["tensorflow.squeeze"], "function", ["None"], ["", "@", "cm", ".", "model_step", "\n", "def", "finalize", "(", "input", ",", "out_enc", ",", "out_meta", "=", "None", ",", "squeeze_output", "=", "False", ")", ":", "\n", "  ", "if", "squeeze_output", "or", "out_enc", "==", "\"binary\"", "or", "out_enc", "==", "\"float\"", "or", "out_enc", "==", "\"rank_normalized\"", ":", "\n", "    ", "return", "tf", ".", "squeeze", "(", "input", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "    ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.pool": [[16, 31], ["pl.SoftmaxPooling.", "rgnn.MeanPooling", "rgnn.SumPooling", "rgnn.MaxPooling", "rgnn.MinPooling", "rgnn.SoftmaxPooling", "AssertionError"], "function", ["None"], ["@", "cm", ".", "model_step", "\n", "def", "pool", "(", "input", ",", "pooling", "=", "\"mean\"", ")", ":", "\n", "  ", "if", "pooling", "==", "\"mean\"", ":", "\n", "    ", "pool", "=", "pl", ".", "MeanPooling", "(", ")", "\n", "", "elif", "pooling", "==", "\"sum\"", ":", "\n", "    ", "pool", "=", "pl", ".", "SumPooling", "(", ")", "\n", "", "elif", "pooling", "==", "\"max\"", ":", "\n", "    ", "pool", "=", "pl", ".", "MaxPooling", "(", ")", "\n", "", "elif", "pooling", "==", "\"min\"", ":", "\n", "    ", "pool", "=", "pl", ".", "MinPooling", "(", ")", "\n", "", "elif", "pooling", "==", "\"softmax\"", ":", "\n", "    ", "pool", "=", "pl", ".", "SoftmaxPooling", "(", ")", "\n", "", "else", ":", "\n", "    ", "raise", "AssertionError", "(", "f\"Unknown pooling type '{pooling}'.\"", ")", "\n", "", "return", "pool", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.graph_embed": [[32, 44], ["rgnn.model_step", "rgnn.with_layers", "rgnn.with_layers", "rgnn.merge_ios"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.model_step", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layers", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layers", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.merge_ios"], ["", "@", "cm", ".", "model_step", "(", "macro", "=", "True", ")", "\n", "def", "graph_embed", "(", "_", ",", "conv_layer", ",", "pooling", "=", "None", ")", ":", "\n", "  ", "conv_layers", "=", "cm", ".", "with_layers", "(", "conv_layer", ",", "prefix", "=", "\"conv\"", ")", "\n", "\n", "if", "pooling", "==", "\"softmax\"", ":", "\n", "    ", "att_conv_layers", "=", "cm", ".", "with_layers", "(", "conv_layer", ",", "prefix", "=", "\"att_conv\"", ")", "\n", "return", "[", "\n", "(", "conv_layers", ",", "att_conv_layers", ")", ",", "\n", "cm", ".", "merge_ios", "(", "pl", ".", "merge_attention", ")", ",", "\n", "pool", "]", "\n", "", "else", ":", "\n", "    ", "return", "[", "conv_layers", ",", "pool", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.index_selector": [[45, 50], ["None"], "function", ["None"], ["", "", "def", "index_selector", "(", "idx", ")", ":", "\n", "  ", "@", "cm", ".", "model_step", "\n", "def", "selector", "(", "input", ")", ":", "\n", "    ", "return", "input", "[", "idx", "]", "\n", "", "return", "selector", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.createDirectRankGNN": [[77, 105], ["rgnn.create_model", "rgnn.create_model", "rgnn.with_layer", "gnn.index_selector", "gnn.index_selector", "rgnn.with_layer", "rgnn.with_layer", "rgnn.with_layer", "rgnn.with_layer", "gnn.graph_embed", "rgnn.with_layers", "rgnn.wl1.GCNLayer", "rgnn.wl1.GINLayer", "rgnn.wl2.WL2Layer"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.create_model", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.create_model", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.index_selector", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.index_selector", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.graph_embed", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layers"], ["def", "createDirectRankGNN", "(", "name", ",", "gnnLayer", ",", "enc", ",", "prepend", "=", "(", ")", ")", ":", "\n", "  ", "top", "=", "[", "\n", "inputs", ",", "\n", "*", "prepend", ",", "\n", "(", "[", "graph_embed", "(", "gnnLayer", ")", ",", "\n", "cm", ".", "with_layers", "(", "Dense", ",", "prefix", "=", "\"fc\"", ")", "]", ",", "\n", "index_selector", "(", "\"pref_a\"", ")", ",", "index_selector", "(", "\"pref_b\"", ")", ")", ",", "\n", "cm", ".", "merge_ios", ",", "\n", "cm", ".", "with_layer", "(", "pref", ".", "PrefLookupLayer", ")", "]", "\n", "\n", "dr", "=", "ck", ".", "create_model", "(", "name", ",", "[", "\n", "*", "top", ",", "\n", "cm", ".", "with_layer", "(", "pref", ".", "PrefDiffLayer", ")", ",", "\n", "cm", ".", "with_layer", "(", "Dense", ",", "units", "=", "1", ",", "activation", "=", "\"sigmoid\"", ",", "use_bias", "=", "False", ")", ",", "\n", "finalize", "]", ",", "\n", "input_encodings", "=", "[", "f\"{enc}_pref\"", "]", ",", "\n", "output_encodings", "=", "[", "\"binary\"", "]", ")", "\n", "\n", "# For debugging and analysis purposes:", "\n", "dr", ".", "decomposed", "=", "ck", ".", "create_model", "(", "name", ",", "[", "\n", "*", "top", ",", "\n", "cm", ".", "with_layer", "(", "pref", ".", "PrefFirstLayer", ")", ",", "\n", "cm", ".", "with_layer", "(", "Dense", ",", "units", "=", "1", ",", "activation", "=", "None", ",", "use_bias", "=", "False", ")", ",", "\n", "finalize", "]", ",", "\n", "input_encodings", "=", "[", "f\"{enc}_pref\"", "]", ",", "\n", "output_encodings", "=", "[", "\"binary\"", "]", ")", "\n", "\n", "return", "dr", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.createCmpGNN": [[106, 121], ["rgnn.create_model", "rgnn.with_layer", "rgnn.with_layers", "rgnn.with_layer", "rgnn.with_layer", "gnn.index_selector", "gnn.index_selector", "gnn.graph_embed", "rgnn.with_layers", "rgnn.wl1.GCNLayer", "rgnn.wl1.GINLayer", "rgnn.wl2.WL2Layer"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.create_model", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layers", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layer", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.index_selector", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.index_selector", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.gnn.graph_embed", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.model.with_layers"], ["", "def", "createCmpGNN", "(", "name", ",", "gnnLayer", ",", "enc", ",", "prepend", "=", "(", ")", ")", ":", "\n", "  ", "return", "ck", ".", "create_model", "(", "name", ",", "[", "\n", "inputs", ",", "\n", "*", "prepend", ",", "\n", "(", "[", "graph_embed", "(", "gnnLayer", ")", ",", "\n", "cm", ".", "with_layers", "(", "Dense", ",", "prefix", "=", "\"fc\"", ")", "]", ",", "\n", "index_selector", "(", "\"pref_a\"", ")", ",", "index_selector", "(", "\"pref_b\"", ")", ")", ",", "\n", "cm", ".", "merge_ios", ",", "\n", "cm", ".", "with_layer", "(", "pref", ".", "PrefLookupLayer", ")", ",", "\n", "cm", ".", "with_layers", "(", "pref", ".", "CmpLayer", ",", "prefix", "=", "\"cmp\"", ")", ",", "\n", "cm", ".", "with_layer", "(", "pref", ".", "CmpLayer", ",", "units", "=", "1", ",", "prefix", "=", "\"cmp\"", ")", ",", "\n", "cm", ".", "with_layer", "(", "pref", ".", "PrefSigmoidDiffLayer", ")", ",", "\n", "finalize", "]", ",", "\n", "input_encodings", "=", "[", "f\"{enc}_pref\"", "]", ",", "\n", "output_encodings", "=", "[", "\"binary\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucked_sorted_list_to_ranking": [[5, 24], ["dict", "zip", "real_ranks.append", "predicted_ranks.append"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["def", "bucked_sorted_list_to_ranking", "(", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", ":", "\n", "  ", "lut", "=", "dict", "(", "zip", "(", "objects", ",", "object_ranks", ")", ")", "\n", "real_ranks", "=", "[", "]", "\n", "predicted_ranks", "=", "[", "]", "\n", "\n", "curr_object_rank", "=", "None", "\n", "curr_pred_rank", "=", "-", "1", "\n", "\n", "for", "o", "in", "predicted_ordering", ":", "\n", "    ", "o_rank", "=", "lut", "[", "o", "]", "\n", "\n", "if", "curr_object_rank", "!=", "o_rank", ":", "\n", "      ", "curr_object_rank", "=", "o_rank", "\n", "curr_pred_rank", "+=", "1", "\n", "\n", "", "real_ranks", ".", "append", "(", "o_rank", ")", "\n", "predicted_ranks", ".", "append", "(", "curr_pred_rank", ")", "\n", "\n", "", "return", "predicted_ranks", ",", "real_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucket_sorted_tau": [[25, 30], ["rank.bucked_sorted_list_to_ranking", "scipy.stats.kendalltau"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucked_sorted_list_to_ranking"], ["", "def", "bucket_sorted_tau", "(", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", ":", "\n", "  ", "predicted_ranks", ",", "real_ranks", "=", "bucked_sorted_list_to_ranking", "(", "\n", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", "\n", "\n", "return", "sci", ".", "stats", ".", "kendalltau", "(", "predicted_ranks", ",", "real_ranks", ")", ".", "correlation", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucket_sorted_ndcg": [[31, 36], ["rank.bucked_sorted_list_to_ranking", "sklearn.ndcg_score"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucked_sorted_list_to_ranking"], ["", "def", "bucket_sorted_ndcg", "(", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", ":", "\n", "  ", "predicted_ranks", ",", "real_ranks", "=", "bucked_sorted_list_to_ranking", "(", "\n", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", "\n", "\n", "return", "metrics", ".", "ndcg_score", "(", "real_ranks", ",", "predicted_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.invert_ranks": [[37, 41], ["max", "min", "numpy.array"], "function", ["None"], ["", "def", "invert_ranks", "(", "ranks", ")", ":", "\n", "  ", "high", "=", "max", "(", "ranks", ")", "\n", "low", "=", "min", "(", "ranks", ")", "\n", "return", "low", "+", "high", "-", "np", ".", "array", "(", "ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.inverted_bucket_sorted_ndcg": [[42, 49], ["rank.bucked_sorted_list_to_ranking", "rank.invert_ranks", "rank.invert_ranks", "sklearn.ndcg_score"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucked_sorted_list_to_ranking", "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.invert_ranks", "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.invert_ranks"], ["", "def", "inverted_bucket_sorted_ndcg", "(", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", ":", "\n", "  ", "predicted_ranks", ",", "real_ranks", "=", "bucked_sorted_list_to_ranking", "(", "\n", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", "\n", "predicted_ranks", "=", "invert_ranks", "(", "predicted_ranks", ")", "\n", "predicted_ranks", "=", "invert_ranks", "(", "predicted_ranks", ")", "\n", "\n", "return", "metrics", ".", "ndcg_score", "(", "real_ranks", ",", "predicted_ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucket_sorted_metrics": [[50, 61], ["rank.bucked_sorted_list_to_ranking", "rank.invert_ranks", "rank.invert_ranks", "dict", "sklearn.ndcg_score", "sklearn.ndcg_score", "scipy.stats.kendalltau"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.bucked_sorted_list_to_ranking", "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.invert_ranks", "home.repos.pwc.inspect_result.Cortys_rankgnn.metrics.rank.invert_ranks"], ["", "def", "bucket_sorted_metrics", "(", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", ":", "\n", "  ", "predicted_ranks", ",", "real_ranks", "=", "bucked_sorted_list_to_ranking", "(", "\n", "objects", ",", "object_ranks", ",", "predicted_ordering", ")", "\n", "\n", "i_real_ranks", "=", "invert_ranks", "(", "real_ranks", ")", "\n", "i_predicted_ranks", "=", "invert_ranks", "(", "predicted_ranks", ")", "\n", "\n", "return", "dict", "(", "\n", "tau", "=", "sci", ".", "stats", ".", "kendalltau", "(", "predicted_ranks", ",", "real_ranks", ")", ".", "correlation", ",", "\n", "ndcg", "=", "metrics", ".", "ndcg_score", "(", "[", "real_ranks", "]", ",", "[", "predicted_ranks", "]", ")", ",", "\n", "inverted_ndcg", "=", "metrics", ".", "ndcg_score", "(", "[", "i_real_ranks", "]", ",", "[", "i_predicted_ranks", "]", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory": [[6, 30], ["enumerate", "hp_f", "rgnn.gnn.GCN", "rgnn.gnn.GCN", "rgnn.gnn.DirectRankGCN", "rgnn.gnn.CmpGCN", "rgnn.gnn.GIN", "rgnn.gnn.GIN", "rgnn.gnn.DirectRankGIN", "rgnn.gnn.CmpGIN", "rgnn.gnn.WL2GNN", "rgnn.gnn.WL2GNN", "rgnn.gnn.DirectRankWL2GNN", "rgnn.gnn.CmpWL2GNN", "rgnn.nn.MLP", "rgnn.svm.SVM", "rgnn.svm.KernelSVM", "rgnn.svm.KernelSVM"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.GCN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.GCN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.DirectRankGCN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.CmpGCN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.GIN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.GIN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.DirectRankGIN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.CmpGIN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.WL2GNN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.WL2GNN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.DirectRankWL2GNN", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.CmpWL2GNN"], ["def", "model_factory", "(", "\n", "model_cls", ",", "prefer_in_enc", "=", "None", ",", "prefer_out_enc", "=", "None", ",", "ds_config", "=", "None", ")", ":", "\n", "  ", "pie", "=", "prefer_in_enc", "\n", "poe", "=", "prefer_out_enc", "\n", "\n", "def", "dec", "(", "hp_f", ")", ":", "\n", "    ", "class", "ModelFactory", ":", "\n", "      ", "name", "=", "hp_f", ".", "__name__", "\n", "prefer_in_enc", "=", "pie", "\n", "prefer_out_enc", "=", "poe", "\n", "config", "=", "ds_config", "or", "{", "}", "\n", "\n", "@", "staticmethod", "\n", "def", "get_model", "(", ")", ":", "\n", "        ", "return", "model_cls", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_hyperparams", "(", "enc", ",", "in_meta", ",", "out_meta", ",", "**", "hp_args", ")", ":", "\n", "        ", "return", "[", "\n", "{", "\"i\"", ":", "i", ",", "**", "c", "}", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "hp_f", "(", "enc", ",", "in_meta", ",", "out_meta", ",", "**", "hp_args", ")", ")", "]", "\n", "\n", "", "", "return", "ModelFactory", "\n", "", "return", "dec", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams": [[31, 73], ["rgnn.utils.cart_merge", "dict", "rgnn.utils.cart", "rgnn.utils.cart", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart_merge", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart"], ["", "def", "default_gnn_hyperparams", "(", "\n", "enc", ",", "\n", "layer_widths", "=", "[", "32", ",", "64", "]", ",", "\n", "layer_depths", "=", "[", "3", ",", "5", "]", ",", "\n", "learning_rates", "=", "[", "0.01", ",", "0.001", ",", "0.0001", "]", ",", "\n", "pooling", "=", "[", "\"mean\"", ",", "\"sum\"", ",", "\"softmax\"", "]", ",", "\n", "**", "additional_params", ")", ":", "\n", "  ", "in_enc", ",", "out_enc", "=", "enc", "[", ":", "2", "]", "\n", "edim", "=", "None", "\n", "fc_layer_args", "=", "[", "None", "]", "\n", "\n", "if", "\"pref\"", "in", "in_enc", ":", "\n", "    ", "fc_layer_args", "=", "[", "{", "-", "1", ":", "dict", "(", "activation", "=", "None", ")", "}", "]", "\n", "", "elif", "out_enc", "==", "\"binary\"", "or", "out_enc", "==", "\"rank_normalized\"", ":", "\n", "    ", "edim", "=", "1", "\n", "", "elif", "out_enc", "==", "\"float\"", ":", "\n", "    ", "edim", "=", "1", "\n", "fc_layer_args", "=", "[", "{", "-", "1", ":", "dict", "(", "activation", "=", "None", ")", "}", "]", "\n", "\n", "", "hidden", "=", "[", "\n", "(", "[", "b", "]", "*", "l", ",", "[", "b", ",", "b", ",", "edim", "or", "b", "]", ")", "\n", "for", "b", ",", "l", "in", "cart", "(", "layer_widths", ",", "layer_depths", ")", "]", "\n", "\n", "hidden_hp", "=", "[", "dict", "(", "\n", "conv_layer_units", "=", "[", "*", "ch", "]", ",", "\n", "att_conv_layer_units", "=", "[", "*", "ch", "]", ",", "\n", "fc_layer_units", "=", "[", "*", "fh", "]", ",", "\n", "cmp_layer_units", "=", "[", "fh", "[", "-", "1", "]", "]", "\n", ")", "for", "ch", ",", "fh", "in", "hidden", "]", "\n", "\n", "return", "cart_merge", "(", "cart", "(", "\n", "conv_activation", "=", "[", "\"sigmoid\"", "]", ",", "\n", "att_conv_activation", "=", "[", "\"sigmoid\"", "]", ",", "\n", "fc_activation", "=", "[", "\"sigmoid\"", "]", ",", "\n", "fc_layer_args", "=", "fc_layer_args", ",", "\n", "cmp_activation", "=", "[", "\"sigmoid\"", "]", ",", "\n", "conv_use_bias", "=", "[", "True", "]", ",", "\n", "fc_use_bias", "=", "[", "True", "]", ",", "\n", "pooling", "=", "pooling", ",", "\n", "learning_rate", "=", "learning_rates", ",", "\n", "**", "additional_params", "\n", ")", ",", "hidden_hp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_nn_hyperparams": [[74, 108], ["rgnn.utils.cart_merge", "dict", "rgnn.utils.cart", "rgnn.utils.cart", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart_merge", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart"], ["", "def", "default_nn_hyperparams", "(", "\n", "enc", ",", "\n", "layer_widths", "=", "[", "32", ",", "64", "]", ",", "\n", "layer_depths", "=", "[", "3", ",", "5", "]", ",", "\n", "learning_rates", "=", "[", "0.01", ",", "0.001", ",", "0.0001", "]", ",", "\n", "**", "additional_params", ")", ":", "\n", "  ", "in_enc", ",", "out_enc", "=", "enc", "\n", "edim", "=", "None", "\n", "fc_layer_args", "=", "[", "None", "]", "\n", "\n", "if", "\"pref\"", "in", "in_enc", ":", "\n", "    ", "fc_layer_args", "=", "[", "{", "-", "1", ":", "dict", "(", "activation", "=", "None", ")", "}", "]", "\n", "", "elif", "out_enc", "==", "\"binary\"", "or", "out_enc", "==", "\"rank_normalized\"", ":", "\n", "    ", "edim", "=", "1", "\n", "", "elif", "out_enc", "==", "\"float\"", ":", "\n", "    ", "edim", "=", "1", "\n", "fc_layer_args", "=", "[", "{", "-", "1", ":", "dict", "(", "activation", "=", "None", ")", "}", "]", "\n", "\n", "", "hidden", "=", "[", "\n", "(", "[", "b", "]", "*", "l", ",", "[", "b", ",", "b", ",", "edim", "or", "b", "]", ")", "\n", "for", "b", ",", "l", "in", "cart", "(", "layer_widths", ",", "layer_depths", ")", "]", "\n", "\n", "hidden_hp", "=", "[", "dict", "(", "\n", "fc_layer_units", "=", "[", "*", "fh", "]", ",", "\n", "cmp_layer_units", "=", "[", "fh", "[", "-", "1", "]", "]", "\n", ")", "for", "ch", ",", "fh", "in", "hidden", "]", "\n", "\n", "return", "cart_merge", "(", "cart", "(", "\n", "fc_activation", "=", "[", "\"sigmoid\"", "]", ",", "\n", "fc_layer_args", "=", "fc_layer_args", ",", "\n", "fc_use_bias", "=", "[", "True", "]", ",", "\n", "learning_rate", "=", "learning_rates", ",", "\n", "**", "additional_params", "\n", ")", ",", "hidden_hp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_svm_hyperparams": [[109, 111], ["rgnn.utils.cart"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cart"], ["", "def", "default_svm_hyperparams", "(", ")", ":", "\n", "  ", "return", "cart", "(", "C", "=", "[", "1", ",", "0.1", ",", "0.01", ",", "0.001", ",", "0.0001", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.GCN": [[112, 115], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "GCN", ")", "\n", "def", "GCN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.GCN_rankn": [[116, 119], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "GCN", ",", "prefer_out_enc", "=", "\"rank_normalized\"", ")", "\n", "def", "GCN_rankn", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.DirectRankGCN": [[120, 123], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "DirectRankGCN", ")", "\n", "def", "DirectRankGCN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.CmpGCN": [[124, 127], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "CmpGCN", ")", "\n", "def", "CmpGCN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.GIN": [[128, 131], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "GIN", ")", "\n", "def", "GIN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.GIN_rankn": [[132, 135], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "GIN", ",", "prefer_out_enc", "=", "\"rank_normalized\"", ")", "\n", "def", "GIN_rankn", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.DirectRankGIN": [[136, 139], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "DirectRankGIN", ")", "\n", "def", "DirectRankGIN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.CmpGIN": [[140, 143], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "CmpGIN", ")", "\n", "def", "CmpGIN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "enc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.WL2GNN": [[144, 149], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "WL2GNN", ")", "\n", "def", "WL2GNN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "\n", "enc", ",", "\n", "conv_inner_activation", "=", "[", "\"relu\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.WL2GNN_rankn": [[150, 155], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "WL2GNN", ",", "prefer_out_enc", "=", "\"rank_normalized\"", ")", "\n", "def", "WL2GNN_rankn", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "\n", "enc", ",", "\n", "conv_inner_activation", "=", "[", "\"relu\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.DirectRankWL2GNN": [[156, 161], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "DirectRankWL2GNN", ")", "\n", "def", "DirectRankWL2GNN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "\n", "enc", ",", "\n", "conv_inner_activation", "=", "[", "\"relu\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.CmpWL2GNN": [[162, 167], ["models.model_factory", "models.default_gnn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_gnn_hyperparams"], ["", "@", "model_factory", "(", "gnn", ".", "CmpWL2GNN", ")", "\n", "def", "CmpWL2GNN", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_gnn_hyperparams", "(", "\n", "enc", ",", "\n", "conv_inner_activation", "=", "[", "\"relu\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.Graph2Vec_MLP": [[168, 171], ["models.model_factory", "models.default_nn_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_nn_hyperparams"], ["", "@", "model_factory", "(", "nn", ".", "MLP", ",", "prefer_in_enc", "=", "\"graph2vec\"", ")", "\n", "def", "Graph2Vec_MLP", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_nn_hyperparams", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.Graph2Vec_SVM": [[172, 175], ["models.model_factory", "models.default_svm_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_svm_hyperparams"], ["", "@", "model_factory", "(", "svm", ".", "SVM", ",", "prefer_in_enc", "=", "\"graph2vec\"", ")", "\n", "def", "Graph2Vec_SVM", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_svm_hyperparams", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.WL_st_SVM": [[176, 179], ["models.model_factory", "models.default_svm_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_svm_hyperparams"], ["", "@", "model_factory", "(", "svm", ".", "KernelSVM", ",", "prefer_in_enc", "=", "\"wlst\"", ")", "\n", "def", "WL_st_SVM", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_svm_hyperparams", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.WL_sp_SVM": [[180, 183], ["models.model_factory", "models.default_svm_hyperparams"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.model_factory", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.models.default_svm_hyperparams"], ["", "@", "model_factory", "(", "svm", ".", "KernelSVM", ",", "prefer_in_enc", "=", "\"wlsp\"", ")", "\n", "def", "WL_sp_SVM", "(", "enc", ",", "in_meta", ",", "out_meta", ")", ":", "\n", "  ", "return", "default_svm_hyperparams", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.dict_map": [[28, 30], ["d.items", "rgnn.stats.utils.statistics", "rgnn.stats.utils.statistics"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics"], ["def", "dict_map", "(", "f", ",", "d", ")", ":", "\n", "  ", "return", "{", "k", ":", "f", "(", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.summarize_evaluation": [[31, 158], ["results_dir.exists", "funcy.group_by", "list", "list.sort", "rgnn.utils.cache_write", "eval_dir.exists", "print", "open", "json.load", "open", "json.load", "summary_dir.exists", "os.makedirs", "funcy.group_by", "fold_param_files.items", "list", "len", "summary.dict_map", "summary.dict_map", "list", "os.listdir", "fy.group_by.items", "param_files.items", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "numpy.argsort", "funcy.compose", "dict", "results.append", "print", "funcy.merge_with", "funcy.merge_with", "funcy.map", "len", "len", "result[].items", "result[].items", "result[].items", "all_selection_vals.append", "numpy.array", "len", "len", "f[].split", "open", "json.load", "hp_train_results[].append", "hp_val_results[].append", "hp_test_results[].append", "selection_vals.append", "summary.dict_map", "summary.dict_map", "summary.dict_map", "numpy.mean", "len", "len", "map", "map", "numpy.array", "summary.dict_map", "summary.dict_map"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.sort", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache_write", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.dict_map", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.dict_map", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.dict_map", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.dict_map", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.dict_map", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.dict_map", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.dict_map"], ["", "def", "summarize_evaluation", "(", "\n", "eval_dir", ",", "selection_metric", "=", "\"tau\"", ",", "ignore_worst", "=", "0", ")", ":", "\n", "  ", "if", "not", "eval_dir", ".", "exists", "(", ")", ":", "\n", "    ", "print", "(", "f\"No evalutation '{eval_dir}' found.\"", ")", "\n", "return", "\n", "\n", "", "with", "open", "(", "eval_dir", "/", "\"config.json\"", ")", "as", "f", ":", "\n", "    ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "eval_dir", "/", "\"hyperparams.json\"", ")", "as", "f", ":", "\n", "    ", "hps", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "results_dir", "=", "eval_dir", "/", "\"results\"", "\n", "assert", "results_dir", ".", "exists", "(", ")", ",", "f\"No results found for '{eval_dir}'.\"", "\n", "summary_dir", "=", "eval_dir", "/", "\"summary\"", "\n", "\n", "if", "not", "summary_dir", ".", "exists", "(", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "summary_dir", ")", "\n", "\n", "", "result_files", "=", "[", "\n", "(", "list", "(", "fy", ".", "map", "(", "int", ",", "f", "[", ":", "-", "5", "]", ".", "split", "(", "\"-\"", ")", ")", ")", ",", "results_dir", "/", "f", ")", "\n", "for", "f", "in", "os", ".", "listdir", "(", "results_dir", ")", "]", "\n", "\n", "fold_files", "=", "fy", ".", "group_by", "(", "lambda", "f", ":", "f", "[", "0", "]", "[", "0", "]", ",", "result_files", ")", "\n", "fold_param_files", "=", "{", "\n", "fold", ":", "fy", ".", "group_by", "(", "lambda", "f", ":", "f", "[", "0", "]", "[", "1", "]", ",", "files", ")", "\n", "for", "fold", ",", "files", "in", "fold_files", ".", "items", "(", ")", "}", "\n", "folds", "=", "list", "(", "fold_param_files", ".", "items", "(", ")", ")", "\n", "folds", ".", "sort", "(", "key", "=", "fy", ".", "first", ")", "\n", "\n", "best_goal", "=", "selection_metrics", "[", "selection_metric", "]", "\n", "\n", "results", "=", "[", "]", "\n", "all_hps", "=", "True", "\n", "\n", "for", "fold_i", ",", "param_files", "in", "folds", ":", "\n", "    ", "best_res", "=", "None", "\n", "param_file_items", "=", "list", "(", "param_files", ".", "items", "(", ")", ")", "\n", "\n", "all_hps", "=", "all_hps", "and", "len", "(", "param_files", ")", "==", "len", "(", "hps", ")", "\n", "\n", "for", "hp_i", ",", "files", "in", "param_file_items", ":", "\n", "      ", "hp_train_results", "=", "defaultdict", "(", "list", ")", "\n", "hp_val_results", "=", "defaultdict", "(", "list", ")", "\n", "hp_test_results", "=", "defaultdict", "(", "list", ")", "\n", "selection_vals", "=", "[", "]", "\n", "all_selection_vals", "=", "[", "]", "\n", "for", "(", "_", ",", "_", ",", "i", ")", ",", "file", "in", "files", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "f", ":", "\n", "          ", "result", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "metric", ",", "val", "in", "result", "[", "\"train\"", "]", ".", "items", "(", ")", ":", "\n", "          ", "hp_train_results", "[", "metric", "]", ".", "append", "(", "val", ")", "\n", "", "for", "metric", ",", "val", "in", "result", "[", "\"val\"", "]", ".", "items", "(", ")", ":", "\n", "          ", "hp_val_results", "[", "metric", "]", ".", "append", "(", "val", ")", "\n", "", "for", "metric", ",", "val", "in", "result", "[", "\"test\"", "]", ".", "items", "(", ")", ":", "\n", "          ", "hp_test_results", "[", "metric", "]", ".", "append", "(", "val", ")", "\n", "\n", "", "selection_val", "=", "result", "[", "\"val\"", "]", "[", "selection_metric", "]", "\n", "all_selection_vals", ".", "append", "(", "selection_val", ")", "\n", "if", "i", "<", "config", "[", "\"repeat\"", "]", ":", "\n", "          ", "selection_vals", ".", "append", "(", "selection_val", ")", "\n", "\n", "", "", "top_idxs", "=", "np", ".", "argsort", "(", "np", ".", "array", "(", "all_selection_vals", ")", ")", "\n", "\n", "if", "len", "(", "all_selection_vals", ")", ">", "ignore_worst", ":", "\n", "        ", "if", "best_goal", "==", "\"max\"", ":", "\n", "          ", "top_idxs", "=", "top_idxs", "[", "ignore_worst", ":", "]", "\n", "", "elif", "best_goal", "==", "\"min\"", ":", "\n", "          ", "top_idxs", "=", "top_idxs", "[", ":", "-", "ignore_worst", "]", "\n", "\n", "", "", "top_statistics", "=", "fy", ".", "compose", "(", "\n", "statistics", ",", "\n", "lambda", "l", ":", "np", ".", "array", "(", "l", ")", "[", "top_idxs", "]", ")", "\n", "\n", "hp_res", "=", "dict", "(", "\n", "fold_idx", "=", "fold_i", ",", "\n", "train", "=", "dict_map", "(", "top_statistics", ",", "hp_train_results", ")", ",", "\n", "val", "=", "dict_map", "(", "top_statistics", ",", "hp_val_results", ")", ",", "\n", "test", "=", "dict_map", "(", "top_statistics", ",", "hp_test_results", ")", ",", "\n", "select", "=", "np", ".", "mean", "(", "selection_vals", ")", ",", "\n", "hp_i", "=", "hp_i", ",", "\n", "hp", "=", "hps", "[", "hp_i", "]", ",", "\n", "select_repeats", "=", "len", "(", "selection_vals", ")", ",", "\n", "eval_repeats", "=", "len", "(", "files", ")", ")", "\n", "\n", "if", "(", "\n", "best_res", "is", "None", "\n", "or", "(", "best_goal", "==", "\"max\"", "and", "best_res", "[", "\"select\"", "]", "<", "hp_res", "[", "\"select\"", "]", ")", "\n", "or", "(", "best_goal", "==", "\"min\"", "and", "best_res", "[", "\"select\"", "]", ">", "hp_res", "[", "\"select\"", "]", ")", "\n", "or", "(", "\n", "best_res", "[", "\"select\"", "]", "==", "hp_res", "[", "\"select\"", "]", "\n", "and", "best_res", "[", "\"eval_repeats\"", "]", "<", "hp_res", "[", "\"eval_repeats\"", "]", ")", ")", ":", "\n", "        ", "best_res", "=", "hp_res", "\n", "\n", "", "", "if", "best_res", "is", "not", "None", ":", "\n", "      ", "results", ".", "append", "(", "best_res", ")", "\n", "all_hps", "=", "all_hps", "and", "best_res", "[", "\"eval_repeats\"", "]", ">=", "config", "[", "\"winner_repeat\"", "]", "\n", "", "else", ":", "\n", "      ", "print", "(", "f\"No results for {fold_i}.\"", ")", "\n", "\n", "", "", "if", "len", "(", "results", ")", "==", "1", ":", "\n", "    ", "combined_train", "=", "results", "[", "0", "]", "[", "\"train\"", "]", "\n", "combined_test", "=", "results", "[", "0", "]", "[", "\"test\"", "]", "\n", "", "else", ":", "\n", "    ", "combined_train", "=", "dict_map", "(", "\n", "statistics", ",", "\n", "fy", ".", "merge_with", "(", "np", ".", "array", ",", "*", "map", "(", "\n", "lambda", "res", ":", "dict_map", "(", "lambda", "t", ":", "t", "[", "\"mean\"", "]", ",", "res", "[", "\"train\"", "]", ")", ",", "results", ")", ")", ")", "\n", "combined_test", "=", "dict_map", "(", "\n", "statistics", ",", "\n", "fy", ".", "merge_with", "(", "np", ".", "array", ",", "*", "map", "(", "\n", "lambda", "res", ":", "dict_map", "(", "lambda", "t", ":", "t", "[", "\"mean\"", "]", ",", "res", "[", "\"test\"", "]", ")", ",", "results", ")", ")", ")", "\n", "\n", "", "results_summary", "=", "{", "\n", "\"folds\"", ":", "results", ",", "\n", "\"combined_train\"", ":", "combined_train", ",", "\n", "\"combined_test\"", ":", "combined_test", ",", "\n", "\"args\"", ":", "{", "\n", "\"ignore_worst\"", ":", "ignore_worst", "\n", "}", ",", "\n", "\"done\"", ":", "all_hps", "and", "len", "(", "folds", ")", "==", "config", "[", "\"outer_k\"", "]", "\n", "}", "\n", "\n", "cache_write", "(", "summary_dir", "/", "\"results.json\"", ",", "results_summary", ",", "\"pretty_json\"", ")", "\n", "\n", "return", "results_summary", "\n", "", ""]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.__init__": [[27, 30], ["timeit.default_timer"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "times", "=", "[", "]", "\n", "self", ".", "currTime", "=", "timer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.on_epoch_end": [[31, 35], ["timeit.default_timer", "evaluate.EpochTimeCallback.times.append"], "methods", ["home.repos.pwc.inspect_result.Cortys_rankgnn.preference.utility.UtilityPreferenceBatcher.append"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "    ", "currTime", "=", "timer", "(", ")", "\n", "self", ".", "times", ".", "append", "(", "currTime", "-", "self", ".", "currTime", ")", "\n", "self", ".", "currTime", "=", "currTime", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.EpochTimeCallback.on_train_end": [[36, 38], ["None"], "methods", ["None"], ["", "def", "on_train_end", "(", "self", ",", "logs", "=", "{", "}", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.time_str": [[23, 25], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["def", "time_str", "(", ")", ":", "\n", "  ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H-%M-%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.train": [[39, 76], ["evaluate.time_str", "isinstance", "model.fit", "tensorflow.keras.callbacks.TensorBoard", "tensorflow.keras.callbacks.EarlyStopping", "evaluate.EpochTimeCallback"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.time_str", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.fit"], ["", "", "def", "train", "(", "\n", "model", ",", "train_ds", ",", "val_ds", "=", "None", ",", "label", "=", "None", ",", "\n", "log_dir_base", "=", "log_dir_base", ",", "\n", "epochs", "=", "1000", ",", "patience", "=", "100", ",", "restore_best", "=", "False", ",", "\n", "stopping_min_delta", "=", "0.0001", ",", "\n", "verbose", "=", "2", ",", "measure_epoch_times", "=", "False", ")", ":", "\n", "  ", "label", "=", "\"_\"", "+", "label", "if", "label", "is", "not", "None", "else", "\"\"", "\n", "\n", "t", "=", "time_str", "(", ")", "\n", "if", "isinstance", "(", "model", ",", "keras", ".", "Model", ")", ":", "\n", "    ", "tb", "=", "keras", ".", "callbacks", ".", "TensorBoard", "(", "\n", "log_dir", "=", "log_dir_base", "/", "f\"{t}{label}/\"", ",", "\n", "histogram_freq", "=", "10", ",", "\n", "write_images", "=", "False", ")", "\n", "es", "=", "keras", ".", "callbacks", ".", "EarlyStopping", "(", "\n", "monitor", "=", "\"loss\"", "if", "val_ds", "is", "None", "else", "\"val_loss\"", ",", "\n", "patience", "=", "patience", ",", "\n", "min_delta", "=", "stopping_min_delta", ",", "\n", "restore_best_weights", "=", "restore_best", ")", "\n", "\n", "if", "measure_epoch_times", ":", "\n", "      ", "tc", "=", "EpochTimeCallback", "(", ")", "\n", "callbacks", "=", "[", "tb", ",", "es", ",", "tc", "]", "\n", "", "else", ":", "\n", "      ", "callbacks", "=", "[", "tb", ",", "es", "]", "\n", "", "", "else", ":", "\n", "    ", "callbacks", "=", "[", "]", "\n", "\n", "", "hist", "=", "model", ".", "fit", "(", "\n", "train_ds", ",", "validation_data", "=", "val_ds", ",", "\n", "epochs", "=", "epochs", ",", "callbacks", "=", "callbacks", ",", "\n", "verbose", "=", "verbose", ")", "\n", "\n", "if", "measure_epoch_times", ":", "\n", "    ", "return", "hist", ".", "history", ",", "tc", ".", "times", "\n", "", "else", ":", "\n", "    ", "return", "hist", ".", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluation_step": [[77, 150], ["res_file.exists", "print", "timeit.default_timer", "model_ctr", "evaluate.evaluate.load_ds", "evaluate.train", "timeit.default_timer", "model_ctr.evaluate", "model_ctr.evaluate", "timeit.default_timer", "dict", "dict", "dict", "gc.collect", "tensorflow.keras.backend.clear_session", "gc.collect", "print", "print", "evaluate.time_str", "model_ctr.evaluate", "zip", "zip", "zip", "custom_evaluator", "funcy.merge", "funcy.merge", "funcy.merge", "open", "json.dump", "evaluate.time_str"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.train", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.time_str", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.time_str"], ["", "", "@", "tolerant", "\n", "def", "evaluation_step", "(", "\n", "model_ctr", ",", "load_ds", ",", "k", ",", "hp_i", ",", "i", ",", "hp", ",", "\n", "res_dir", ",", "fold_str", ",", "hp_str", ",", "verbose", ",", "log_dir_base", ",", "\n", "epochs", ",", "patience", ",", "stopping_min_delta", ",", "restore_best", ",", "\n", "repeat", ",", "winner_repeat", ",", "pos_hp_i", "=", "None", ",", "custom_evaluator", "=", "None", ")", ":", "\n", "  ", "if", "i", ">=", "repeat", ":", "\n", "    ", "repeat", "=", "winner_repeat", "\n", "\n", "", "rep_str", "=", "f\"{i+1}/{repeat}\"", "\n", "label", "=", "f\"{k}-{hp_i}-{i}\"", "\n", "res_file", "=", "res_dir", "/", "f\"{label}.json\"", "\n", "\n", "if", "res_file", ".", "exists", "(", ")", ":", "\n", "    ", "print", "(", "\n", "time_str", "(", ")", ",", "\n", "f\"- Iteration {rep_str}, fold {fold_str}, hps {hp_str} already done.\"", ")", "\n", "return", "False", "\n", "\n", "", "print", "(", "\n", "time_str", "(", ")", ",", "\n", "f\"- Iteration {rep_str}, fold {fold_str}, hps {hp_str}...\"", ")", "\n", "\n", "t_start", "=", "timer", "(", ")", "\n", "model", "=", "model_ctr", "(", "**", "hp", ")", "\n", "train_ds", ",", "val_ds", ",", "test_ds", "=", "load_ds", "(", ")", "\n", "history", "=", "train", "(", "\n", "model", ",", "train_ds", ",", "val_ds", ",", "label", ",", "\n", "epochs", "=", "epochs", ",", "patience", "=", "patience", ",", "\n", "stopping_min_delta", "=", "stopping_min_delta", ",", "\n", "restore_best", "=", "restore_best", ",", "\n", "log_dir_base", "=", "log_dir_base", ",", "\n", "verbose", "=", "verbose", ")", "\n", "t_end", "=", "timer", "(", ")", "\n", "train_dur", "=", "t_end", "-", "t_start", "\n", "t_start", "=", "t_end", "\n", "train_res", "=", "model", ".", "evaluate", "(", "train_ds", ")", "\n", "val_res", "=", "model", ".", "evaluate", "(", "val_ds", ")", "if", "val_ds", "is", "not", "None", "else", "{", "}", "\n", "test_res", "=", "model", ".", "evaluate", "(", "test_ds", ")", "\n", "t_end", "=", "timer", "(", ")", "\n", "eval_dur", "=", "t_end", "-", "t_start", "\n", "train_res", "=", "dict", "(", "zip", "(", "model", ".", "metrics_names", ",", "train_res", ")", ")", "\n", "val_res", "=", "dict", "(", "zip", "(", "model", ".", "metrics_names", ",", "val_res", ")", ")", "\n", "test_res", "=", "dict", "(", "zip", "(", "model", ".", "metrics_names", ",", "test_res", ")", ")", "\n", "train_ds", "=", "None", "\n", "val_ds", "=", "None", "\n", "test_ds", "=", "None", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "if", "custom_evaluator", "is", "not", "None", ":", "\n", "    ", "train_cust", ",", "val_cust", ",", "test_cust", "=", "custom_evaluator", "(", "model", ")", "\n", "train_res", "=", "fy", ".", "merge", "(", "train_res", ",", "train_cust", ")", "\n", "val_res", "=", "fy", ".", "merge", "(", "val_res", ",", "val_cust", ")", "\n", "test_res", "=", "fy", ".", "merge", "(", "test_res", ",", "test_cust", ")", "\n", "\n", "", "with", "open", "(", "res_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "    ", "json", ".", "dump", "(", "{", "\n", "\"history\"", ":", "history", ",", "\n", "\"train\"", ":", "train_res", ",", "\n", "\"val\"", ":", "val_res", ",", "\n", "\"test\"", ":", "test_res", ",", "\n", "\"train_duration\"", ":", "train_dur", ",", "\n", "\"eval_duration\"", ":", "eval_dur", "\n", "}", ",", "f", ",", "cls", "=", "NumpyEncoder", ")", "\n", "\n", "", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "print", "(", "\n", "f\"\\nTest results in {train_dur}s/{eval_dur}s for\"", ",", "\n", "f\"it {rep_str}, fold {fold_str}, hps {hp_str}:\"", ",", "\n", "test_res", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.find_eval_dir": [[151, 157], ["isinstance"], "function", ["None"], ["", "def", "find_eval_dir", "(", "model_factory", ",", "ds_provider", ",", "label", "=", "None", ",", "split", "=", "None", ")", ":", "\n", "  ", "label", "=", "\"_\"", "+", "label", "if", "label", "is", "not", "None", "else", "\"\"", "\n", "split", "=", "\"_\"", "+", "split", "if", "isinstance", "(", "split", ",", "str", ")", "else", "\"\"", "\n", "mf_name", "=", "model_factory", ".", "name", "\n", "ds_name", "=", "ds_provider", ".", "full_name", "\n", "return", "eval_dir_base", "/", "f\"{ds_name}{split}_{mf_name}{label}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.sort_evaluator": [[158, 175], ["ds_provider.get_split_indices", "funcy.partial", "funcy.partial", "funcy.partial", "rgnn.evaluate_model_sort", "rgnn.evaluate_model_sort", "rgnn.evaluate_model_sort", "model_sort.evaluate_model_sort.", "model_sort.evaluate_model_sort.", "model_sort.evaluate_model_sort."], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split_indices", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.evaluate_model_sort", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.evaluate_model_sort", "home.repos.pwc.inspect_result.Cortys_rankgnn.models.sort.evaluate_model_sort"], ["", "def", "sort_evaluator", "(", "ds_provider", ",", "enc", ",", "outer_idx", ",", "**", "config", ")", ":", "\n", "  ", "train_idxs", ",", "val_idxs", ",", "test_idxs", "=", "ds_provider", ".", "get_split_indices", "(", "\n", "outer_idx", "=", "outer_idx", ",", "relative", "=", "True", ")", "\n", "train_get", "=", "fy", ".", "partial", "(", "ds_provider", ".", "get_train_split", ",", "outer_idx", "=", "outer_idx", ")", "\n", "val_get", "=", "fy", ".", "partial", "(", "ds_provider", ".", "get_validation_split", ",", "outer_idx", "=", "outer_idx", ")", "\n", "test_get", "=", "fy", ".", "partial", "(", "ds_provider", ".", "get_test_split", ",", "outer_idx", "=", "outer_idx", ")", "\n", "train_eval", "=", "model_sort", ".", "evaluate_model_sort", "(", "\n", "train_idxs", ",", "train_get", ",", "enc", "=", "enc", ",", "**", "config", ")", "\n", "val_eval", "=", "model_sort", ".", "evaluate_model_sort", "(", "\n", "val_idxs", ",", "val_get", ",", "enc", "=", "enc", ",", "**", "config", ")", "\n", "test_eval", "=", "model_sort", ".", "evaluate_model_sort", "(", "\n", "test_idxs", ",", "test_get", ",", "enc", "=", "enc", ",", "**", "config", ")", "\n", "\n", "def", "evaluator", "(", "model", ")", ":", "\n", "    ", "return", "train_eval", "(", "model", ")", ",", "val_eval", "(", "model", ")", ",", "test_eval", "(", "model", ")", "\n", "\n", "", "return", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate": [[176, 441], ["model_factory.get_model", "list", "funcy.func_partial", "evaluate.time_str", "rgnn.utils.make_dir", "rgnn.utils.make_dir", "print", "model_factory.get_hyperparams", "len", "hp_file.exists", "rgnn.summarize_evaluation", "timeit.default_timer", "rgnn.summarize_evaluation", "print", "ds_provider.find_compatible_encodings", "len", "list", "evaluate.find_eval_dir", "rgnn.utils.make_dir", "find_eval_dir.exists", "print", "print", "print", "pos_file.exists", "pos_file.read_text().split", "dict", "json.dumps", "hp_file.read_text", "print", "print", "print", "range", "timeit.default_timer", "evaluate.time_str", "funcy.filter", "len", "open", "json.dump", "open", "json.load", "len", "funcy.map", "print", "open", "json.dump", "print", "print", "timeit.default_timer", "enumerate", "timeit.default_timer", "rgnn.summarize_evaluation", "print", "pos_file.read_text", "evaluate.time_str", "ds_provider.get_split", "print", "evaluate.evaluate.load_ds"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.time_str", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.summarize_evaluation", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.summarize_evaluation", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.find_compatible_encodings", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.find_eval_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.time_str", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.summarize_evaluation", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.time_str", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split"], ["", "def", "evaluate", "(", "\n", "model_factory", ",", "ds_provider", ",", "\n", "split", "=", "None", ",", "repeat", "=", "1", ",", "winner_repeat", "=", "3", ",", "epochs", "=", "2000", ",", "\n", "patience", "=", "100", ",", "stopping_min_delta", "=", "0.0001", ",", "\n", "restore_best", "=", "True", ",", "hp_args", "=", "None", ",", "label", "=", "None", ",", "\n", "selection_metric", "=", "\"tau\"", ",", "\n", "eval_dir", "=", "None", ",", "verbose", "=", "2", ",", "dry", "=", "False", ",", "ignore_worst", "=", "0", ",", "single_hp", "=", "None", ",", "\n", "ds_cache", "=", "True", ")", ":", "\n", "  ", "if", "ds_provider", ".", "default_split", "!=", "0", "and", "split", "is", "None", ":", "\n", "    ", "split", "=", "ds_provider", ".", "default_split", "\n", "\n", "", "outer_k", "=", "ds_provider", ".", "outer_k", "if", "split", "is", "None", "else", "1", "\n", "inner_k", "=", "None", "\n", "\n", "model", "=", "model_factory", ".", "get_model", "(", ")", "\n", "mf_name", "=", "model_factory", ".", "name", "\n", "ds_config", "=", "model_factory", ".", "config", "\n", "ds_name", "=", "ds_provider", ".", "full_name", "\n", "\n", "prefer_in_enc", "=", "model_factory", ".", "prefer_in_enc", "\n", "prefer_out_enc", "=", "model_factory", ".", "prefer_out_enc", "\n", "encs", "=", "list", "(", "ds_provider", ".", "find_compatible_encodings", "(", "model", ")", ")", "\n", "if", "len", "(", "encs", ")", ">", "1", ":", "\n", "    ", "filtered_encs", "=", "list", "(", "fy", ".", "filter", "(", "\n", "lambda", "enc", ":", "(", "\n", "(", "prefer_in_enc", "is", "None", "or", "enc", "[", "0", "]", "==", "prefer_in_enc", ")", "\n", "and", "(", "prefer_out_enc", "is", "None", "or", "enc", "[", "1", "]", "==", "prefer_out_enc", ")", "\n", ")", ",", "encs", ")", ")", "\n", "if", "len", "(", "filtered_encs", ")", ">", "0", ":", "\n", "      ", "encs", "=", "filtered_encs", "\n", "\n", "", "", "enc", "=", "encs", "[", "0", "]", "\n", "model_ctr", "=", "fy", ".", "func_partial", "(", "\n", "model", ",", "enc", "=", "enc", ",", "in_meta", "=", "ds_provider", ".", "in_meta", ",", "out_meta", "=", "ds_provider", ".", "out_meta", ")", "\n", "\n", "t", "=", "time_str", "(", ")", "\n", "if", "eval_dir", "is", "None", ":", "\n", "    ", "eval_dir", "=", "find_eval_dir", "(", "model_factory", ",", "ds_provider", ",", "label", ",", "split", ")", "\n", "make_dir", "(", "eval_dir", ")", "\n", "\n", "with", "open", "(", "eval_dir", "/", "\"config.json\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "      ", "config", "=", "{", "\n", "\"outer_k\"", ":", "outer_k", ",", "\n", "\"inner_k\"", ":", "inner_k", ",", "\n", "\"repeat\"", ":", "repeat", ",", "\n", "\"winner_repeat\"", ":", "winner_repeat", ",", "\n", "\"epochs\"", ":", "epochs", ",", "\n", "\"patience\"", ":", "patience", ",", "\n", "\"stopping_min_delta\"", ":", "stopping_min_delta", ",", "\n", "\"restore_best\"", ":", "restore_best", ",", "\n", "\"hp_args\"", ":", "hp_args", ",", "\n", "\"enc\"", ":", "enc", ",", "\n", "\"ds_name\"", ":", "ds_name", ",", "\n", "\"mf_name\"", ":", "mf_name", ",", "\n", "\"split\"", ":", "split", ",", "\n", "\"start_time\"", ":", "t", ",", "\n", "\"end_time\"", ":", "None", ",", "\n", "\"duration\"", ":", "0", "\n", "}", "\n", "json", ".", "dump", "(", "config", ",", "f", ",", "indent", "=", "\"\\t\"", ",", "sort_keys", "=", "True", ",", "cls", "=", "NumpyEncoder", ")", "\n", "", "resume", "=", "False", "\n", "", "else", ":", "\n", "    ", "assert", "eval_dir", ".", "exists", "(", ")", ",", "\"Invalid resume directory.\"", "\n", "print", "(", ")", "\n", "with", "open", "(", "eval_dir", "/", "\"config.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "      ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "assert", "(", "\n", "config", "[", "\"outer_k\"", "]", "==", "outer_k", "\n", "and", "config", "[", "\"inner_k\"", "]", "==", "inner_k", "\n", "and", "config", "[", "\"repeat\"", "]", "==", "repeat", "\n", "and", "config", "[", "\"winner_repeat\"", "]", "==", "winner_repeat", "\n", "and", "config", "[", "\"epochs\"", "]", "==", "epochs", "\n", "and", "config", "[", "\"patience\"", "]", "==", "patience", "\n", "and", "config", "[", "\"stopping_min_delta\"", "]", "==", "stopping_min_delta", "\n", "and", "config", "[", "\"restore_best\"", "]", "==", "restore_best", "\n", "and", "config", "[", "\"hp_args\"", "]", "==", "hp_args", "\n", "and", "tuple", "(", "config", "[", "\"enc\"", "]", ")", "==", "tuple", "(", "enc", ")", "\n", "and", "config", "[", "\"ds_name\"", "]", "==", "ds_name", "\n", "and", "config", "[", "\"mf_name\"", "]", "==", "mf_name", "\n", "and", "config", "[", "\"split\"", "]", "==", "split", ")", ",", "\"Incompatible config.\"", "\n", "", "resume", "=", "True", "\n", "\n", "", "log_dir_base", "=", "eval_dir", "/", "\"logs\"", "\n", "res_dir", "=", "eval_dir", "/", "\"results\"", "\n", "pos_file", "=", "eval_dir", "/", "\"state.txt\"", "\n", "\n", "make_dir", "(", "res_dir", ")", "\n", "make_dir", "(", "log_dir_base", ")", "\n", "\n", "k_start", "=", "0", "\n", "hp_start", "=", "0", "\n", "i_start", "=", "-", "1", "\n", "print", "(", "t", ",", "f\"- Evaluating {ds_name} using {mf_name}...\"", ")", "\n", "\n", "if", "single_hp", "is", "not", "None", ":", "\n", "    ", "print", "(", "f\"!!! USING SINGLE HP MODE FOR HYPERPARAM {single_hp} !!!\"", ")", "\n", "print", "(", "\"The resulting mean accuracy might be negatively affected.\"", ")", "\n", "\n", "", "if", "resume", "and", "pos_file", ".", "exists", "(", ")", ":", "\n", "    ", "pos", "=", "pos_file", ".", "read_text", "(", ")", ".", "split", "(", "\",\"", ")", "\n", "if", "len", "(", "pos", ")", "==", "3", ":", "\n", "      ", "k_start", ",", "hp_start", ",", "i_start", "=", "fy", ".", "map", "(", "int", ",", "pos", ")", "\n", "print", "(", "f\"Continuing at {k_start}, {hp_start}, {i_start}.\"", ")", "\n", "\n", "", "", "hp_args", "=", "hp_args", "or", "dict", "(", ")", "\n", "hps", "=", "model_factory", ".", "get_hyperparams", "(", "\n", "enc", ",", "in_meta", "=", "ds_provider", ".", "in_meta", ",", "out_meta", "=", "ds_provider", ".", "out_meta", ",", "**", "hp_args", ")", "\n", "hpc", "=", "len", "(", "hps", ")", "\n", "\n", "hp_file", "=", "eval_dir", "/", "\"hyperparams.json\"", "\n", "if", "hp_file", ".", "exists", "(", ")", ":", "\n", "    ", "hps_json", "=", "json", ".", "dumps", "(", "hps", ",", "indent", "=", "\"\\t\"", ",", "sort_keys", "=", "True", ",", "cls", "=", "NumpyEncoder", ")", "\n", "old_hps_json", "=", "hp_file", ".", "read_text", "(", ")", "\n", "\n", "assert", "hps_json", "==", "old_hps_json", ",", "f\"Existing hyperparam list incompatible to:\\n{hps_json}\"", "\n", "\n", "print", "(", "\"Existing hyperparam list is compatible.\"", ")", "\n", "", "else", ":", "\n", "    ", "with", "open", "(", "hp_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "      ", "json", ".", "dump", "(", "hps", ",", "f", ",", "indent", "=", "\"\\t\"", ",", "sort_keys", "=", "True", ",", "cls", "=", "NumpyEncoder", ")", "\n", "\n", "", "", "if", "dry", ":", "\n", "    ", "print", "(", "f\"Completed dry evaluation of {ds_name} using {mf_name}.\"", ")", "\n", "return", "\n", "\n", "", "summ", "=", "summary", ".", "summarize_evaluation", "(", "\n", "eval_dir", ",", "selection_metric", "=", "selection_metric", ",", "ignore_worst", "=", "ignore_worst", ")", "\n", "\n", "if", "summ", "[", "\"done\"", "]", ":", "\n", "    ", "print", "(", "t", ",", "f\"- Already evaluated {ds_name} using {mf_name}. Skipped.\"", ")", "\n", "return", "\n", "\n", "", "t_start_eval", "=", "timer", "(", ")", "\n", "completed_evaluation_step", "=", "False", "\n", "try", ":", "\n", "    ", "for", "k", "in", "range", "(", "k_start", ",", "outer_k", ")", ":", "\n", "      ", "print", "(", ")", "\n", "fold_str", "=", "f\"{k+1}/{outer_k}\"", "\n", "print", "(", "time_str", "(", ")", ",", "f\"- Evaluating fold {fold_str}...\"", ")", "\n", "t_start_fold", "=", "timer", "(", ")", "\n", "if", "split", "is", "None", ":", "\n", "        ", "outer_idx", "=", "k", "\n", "", "elif", "split", "is", "True", ":", "\n", "        ", "outer_idx", "=", "None", "\n", "", "else", ":", "\n", "        ", "outer_idx", "=", "split", "\n", "\n", "", "def", "load_ds", "(", ")", ":", "\n", "        ", "train_ds", ",", "val_ds", ",", "test_ds", "=", "ds_provider", ".", "get_split", "(", "\n", "enc", ",", "outer_idx", "=", "outer_idx", ",", "config", "=", "ds_config", ")", "\n", "\n", "if", "enc", "[", "1", "]", "==", "\"rank_normalized\"", ":", "\n", "          ", "val_ds", "=", "None", "# Validation data not useful for early stopping here.", "\n", "\n", "", "if", "enc", "[", "-", "1", "]", "==", "\"tf\"", ":", "\n", "          ", "train_ds", "=", "train_ds", ".", "cache", "(", ")", "\n", "if", "val_ds", "is", "not", "None", ":", "\n", "            ", "val_ds", "=", "val_ds", ".", "cache", "(", ")", "\n", "", "", "return", "train_ds", ",", "val_ds", ",", "test_ds", "\n", "\n", "", "load_evaluator", "=", "lambda", "model", ":", "sort_evaluator", "(", "\n", "ds_provider", ",", "enc", ",", "outer_idx", ",", "**", "ds_config", ")", "(", "model", ")", "\n", "\n", "if", "ds_cache", ":", "\n", "        ", "print", "(", "time_str", "(", ")", ",", "f\"- Preloading fold {fold_str}.\"", ")", "\n", "train_ds", ",", "val_ds", ",", "test_ds", "=", "load_ds", "(", ")", "\n", "\n", "if", "train_ds", "is", "None", "or", "test_ds", "is", "None", ":", "\n", "          ", "print", "(", "time_str", "(", ")", ",", "f\"- Data of fold {fold_str} could not be loaded.\"", ")", "\n", "continue", "\n", "", "custom_evaluator", "=", "sort_evaluator", "(", "\n", "ds_provider", ",", "enc", ",", "outer_idx", ",", "**", "ds_config", ")", "\n", "load_ds", "=", "lambda", ":", "(", "train_ds", ",", "val_ds", ",", "test_ds", ")", "\n", "load_evaluator", "=", "lambda", "model", ":", "custom_evaluator", "(", "model", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "time_str", "(", ")", ",", "f\"- Note that fold {fold_str} will not be cached.\"", ")", "\n", "\n", "", "for", "hp_i", ",", "hp", "in", "enumerate", "(", "hps", ")", ":", "\n", "        ", "hp_str", "=", "f\"{hp_i+1}/{hpc}\"", "\n", "curr_i_start", "=", "0", "\n", "\n", "if", "single_hp", "is", "not", "None", "and", "hp_i", "not", "in", "single_hp", ":", "\n", "          ", "print", "(", "f\"Skipping {fold_str} with hp {hp_str} due to single hp mode.\"", ")", "\n", "continue", "\n", "\n", "", "if", "k", "==", "k_start", ":", "\n", "          ", "if", "hp_i", "<", "hp_start", ":", "\n", "            ", "print", "(", "f\"Already evaluated {fold_str} with hyperparams {hp_str}.\"", ")", "\n", "continue", "\n", "", "elif", "hp_i", "==", "hp_start", "and", "i_start", ">=", "0", ":", "\n", "            ", "print", "(", "\n", "f\"Already evaluated {fold_str} with hyperparams {hp_str}\"", ",", "\n", "f\"{i_start + 1}/{repeat} times.\"", ")", "\n", "curr_i_start", "=", "i_start", "+", "1", "\n", "\n", "", "", "print", "(", "f\"\\nFold {fold_str} with hyperparams {hp_str}.\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "curr_i_start", ",", "repeat", ")", ":", "\n", "          ", "try", ":", "\n", "            ", "completed_evaluation_step", "|=", "evaluation_step", "(", "\n", "model_ctr", ",", "load_ds", ",", "k", ",", "hp_i", ",", "i", ",", "hp", ",", "\n", "res_dir", ",", "fold_str", ",", "hp_str", ",", "verbose", ",", "log_dir_base", ",", "\n", "custom_evaluator", "=", "load_evaluator", ",", "\n", "**", "config", ")", "\n", "if", "single_hp", "is", "None", ":", "\n", "              ", "pos_file", ".", "write_text", "(", "f\"{k},{hp_i},{i}\"", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "f\"Error at fold {fold_str} with hp {hp_str}:\"", ")", "\n", "print", "(", "hp", ")", "\n", "raise", "e", "\n", "\n", "", "", "", "t_end_fold", "=", "timer", "(", ")", "\n", "dur_fold", "=", "t_end_fold", "-", "t_start_fold", "\n", "summ", "=", "summary", ".", "summarize_evaluation", "(", "\n", "eval_dir", ",", "selection_metric", "=", "selection_metric", ",", "ignore_worst", "=", "ignore_worst", ")", "\n", "print", "(", "time_str", "(", ")", ",", "f\"- Evaluated hps of fold {fold_str} in {dur_fold}s.\"", ")", "\n", "\n", "if", "winner_repeat", ">", "repeat", ":", "\n", "        ", "if", "single_hp", "is", "not", "None", "and", "\"repeat\"", "not", "in", "single_hp", ":", "\n", "          ", "print", "(", "f\"No repeats because of single hp mode for hp={single_hp}.\"", ")", "\n", "", "elif", "hp_start", "==", "hpc", "and", "i_start", "+", "1", "==", "winner_repeat", ":", "\n", "          ", "print", "(", "f\"Already did winner evaluations of fold {fold_str}.\"", ")", "\n", "", "else", ":", "\n", "          ", "best_hp_i", "=", "summ", "[", "\"folds\"", "]", "[", "k", "]", "[", "\"hp_i\"", "]", "\n", "best_hp", "=", "hps", "[", "best_hp_i", "]", "\n", "hp_str", "=", "f\"{best_hp_i+1}/{hpc}\"", "\n", "add_rep", "=", "winner_repeat", "-", "repeat", "\n", "print", "(", "\n", "time_str", "(", ")", ",", "\n", "f\"- Additional {add_rep} evals of fold {fold_str}\"", ",", "\n", "f\"and winning hp {hp_str}.\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "repeat", ",", "winner_repeat", ")", ":", "\n", "            ", "completed_evaluation_step", "=", "evaluation_step", "(", "\n", "model_ctr", ",", "load_ds", ",", "k", ",", "best_hp_i", ",", "i", ",", "best_hp", ",", "\n", "res_dir", ",", "fold_str", ",", "hp_str", ",", "verbose", ",", "log_dir_base", ",", "\n", "custom_evaluator", "=", "load_evaluator", ",", "\n", "**", "config", ")", "\n", "if", "single_hp", "is", "None", ":", "\n", "              ", "pos_file", ".", "write_text", "(", "f\"{k},{hpc},{i}\"", ")", "\n", "\n", "", "", "summary", ".", "summarize_evaluation", "(", "\n", "eval_dir", ",", "selection_metric", "=", "selection_metric", ",", "\n", "ignore_worst", "=", "ignore_worst", ")", "\n", "print", "(", "\n", "time_str", "(", ")", ",", "\n", "f\"- Completed additional {add_rep} evals of fold {fold_str}\"", ",", "\n", "f\"and winning hp {hp_str}.\"", ")", "\n", "", "", "", "", "finally", ":", "\n", "    ", "t_end_eval", "=", "timer", "(", ")", "\n", "dur_eval", "=", "t_end_eval", "-", "t_start_eval", "\n", "\n", "if", "completed_evaluation_step", ":", "\n", "      ", "with", "open", "(", "eval_dir", "/", "\"config.json\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "config", "[", "\"duration\"", "]", "+=", "dur_eval", "\n", "config", "[", "\"end_time\"", "]", "=", "time_str", "(", ")", "\n", "json", ".", "dump", "(", "config", ",", "f", ",", "indent", "=", "\"\\t\"", ",", "sort_keys", "=", "True", ",", "cls", "=", "NumpyEncoder", ")", "\n", "\n", "", "", "", "summary", ".", "summarize_evaluation", "(", "\n", "eval_dir", ",", "selection_metric", "=", "selection_metric", ",", "ignore_worst", "=", "ignore_worst", ")", "\n", "print", "(", "\n", "time_str", "(", ")", ",", "\n", "f\"- Evaluation of {ds_name} using {mf_name} completed in {dur_eval}s.\"", ",", "\n", "\"No steps were executed.\"", "if", "not", "completed_evaluation_step", "else", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.resume_evaluation": [[442, 473], ["print", "evaluate.evaluate", "evaluate.find_eval_dir", "print", "evaluate.evaluate", "open", "json.load", "funcy.omit", "json.load.keys"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.find_eval_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate", "home.repos.pwc.inspect_result.Cortys_rankgnn.graph.graph2vec.Graph2Vec.load"], ["", "def", "resume_evaluation", "(", "\n", "model_factory", ",", "ds_provider", ",", "eval_dir", "=", "None", ",", "split", "=", "None", ",", "label", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "  ", "if", "ds_provider", ".", "default_split", "!=", "0", "and", "split", "is", "None", ":", "\n", "    ", "split", "=", "ds_provider", ".", "default_split", "\n", "\n", "", "if", "eval_dir", "is", "None", ":", "\n", "    ", "eval_dir", "=", "find_eval_dir", "(", "model_factory", ",", "ds_provider", ",", "label", ",", "split", ")", "\n", "\n", "", "if", "not", "(", "eval_dir", "/", "\"config.json\"", ")", ".", "exists", "(", ")", ":", "\n", "    ", "print", "(", "f\"Starting new evaluation at {eval_dir}...\"", ")", "\n", "return", "evaluate", "(", "\n", "model_factory", ",", "ds_provider", ",", "label", "=", "label", ",", "split", "=", "split", ",", "**", "kwargs", ")", "\n", "\n", "", "print", "(", "f\"Resuming evaluation at {eval_dir}...\"", ")", "\n", "\n", "with", "open", "(", "eval_dir", "/", "\"config.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "    ", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "evaluate", "(", "\n", "model_factory", ",", "ds_provider", ",", "\n", "split", "=", "config", "[", "\"split\"", "]", ",", "\n", "repeat", "=", "config", "[", "\"repeat\"", "]", ",", "\n", "winner_repeat", "=", "config", "[", "\"winner_repeat\"", "]", ",", "\n", "epochs", "=", "config", "[", "\"epochs\"", "]", ",", "\n", "patience", "=", "config", "[", "\"patience\"", "]", ",", "\n", "stopping_min_delta", "=", "config", "[", "\"stopping_min_delta\"", "]", ",", "\n", "restore_best", "=", "config", "[", "\"restore_best\"", "]", ",", "\n", "hp_args", "=", "config", "[", "\"hp_args\"", "]", ",", "\n", "eval_dir", "=", "eval_dir", ",", "\n", "**", "fy", ".", "omit", "(", "kwargs", ",", "config", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.quick_evaluate": [[474, 479], ["evaluate.evaluate", "funcy.omit"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate"], ["", "def", "quick_evaluate", "(", "model_factory", ",", "ds_provider", ",", "**", "kwargs", ")", ":", "\n", "  ", "return", "evaluate", "(", "\n", "model_factory", ",", "ds_provider", ",", "\n", "epochs", "=", "1", ",", "repeat", "=", "1", ",", "winner_repeat", "=", "1", ",", "label", "=", "\"quick\"", ",", "\n", "**", "fy", ".", "omit", "(", "kwargs", ",", "[", "\"epochs\"", ",", "\"repeat\"", ",", "\"winner_repeat\"", ",", "\"label\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.compute_ranking_utils": [[480, 515], ["print", "provider_get", "rgnn.stats.utils.normalize", "rgnn.stats.utils.normalize", "rgnn.stats.utils.normalize", "numpy.argsort", "dict", "provider_get", "model.predict", "model.predict", "provider_get.", "provider_get", "rgnn.stats.utils.statistics"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.normalize", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.normalize", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.normalize", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.predict", "home.repos.pwc.inspect_result.Cortys_rankgnn.chaining.scikit.SkModel.predict", "home.repos.pwc.inspect_result.Cortys_rankgnn.stats.utils.statistics"], ["", "def", "compute_ranking_utils", "(", "indices", ",", "provider_get", ",", "model", ",", "config", ")", ":", "\n", "  ", "print", "(", "\"Loading target rankings...\"", ")", "\n", "_", ",", "object_rankings", "=", "provider_get", "(", "\n", "enc", "=", "\"null_in\"", ",", "indices", "=", "indices", ",", "config", "=", "config", ")", "\n", "norm_object_rankings", "=", "normalize", "(", "object_rankings", ")", "\n", "\n", "enc", "=", "model", ".", "enc", "\n", "in_enc", "=", "enc", "[", "0", "]", "\n", "\n", "if", "\"pref\"", "in", "in_enc", ":", "\n", "    ", "data_getter", "=", "provider_get", "(", "enc", ",", "config", "=", "{", "\n", "**", "config", ",", "\"mode\"", ":", "\"pivot_partitions\"", "}", ",", "\n", "reconfigurable_finalization", "=", "True", ")", "\n", "pivot_partitions", "=", "[", "\n", "[", "i", ",", "i", "]", "for", "i", "in", "indices", "]", "\n", "predicted_rankings", "=", "model", ".", "predict", "(", "data_getter", "(", "\n", "pivot_partitions", "=", "pivot_partitions", ")", ")", "\n", "", "else", ":", "\n", "    ", "predicted_rankings", "=", "model", ".", "predict", "(", "provider_get", "(", "\n", "enc", ",", "config", "=", "config", ")", ")", "\n", "\n", "", "norm_predicted_rankings", "=", "normalize", "(", "predicted_rankings", ")", "\n", "tnorm_predicted_rankings", "=", "normalize", "(", "predicted_rankings", ",", "object_rankings", ")", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "object_rankings", ")", "\n", "target_curve", "=", "norm_object_rankings", "[", "sort_idx", "]", "\n", "pred_curve", "=", "norm_predicted_rankings", "[", "sort_idx", "]", "\n", "pred_curve_t", "=", "tnorm_predicted_rankings", "[", "sort_idx", "]", "\n", "\n", "return", "dict", "(", "\n", "target", "=", "target_curve", ",", "\n", "pred", "=", "pred_curve", ",", "\n", "pred_aligned", "=", "pred_curve_t", ",", "\n", "raw_target", "=", "object_rankings", "[", "sort_idx", "]", ",", "\n", "raw_pred", "=", "predicted_rankings", "[", "sort_idx", "]", ",", "\n", "raw_pred_stats", "=", "statistics", "(", "predicted_rankings", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.ranking_util_evaluate": [[516, 613], ["model_factory.get_model", "getattr", "evaluate.find_eval_dir", "rgnn.utils.make_dir", "rankings_file.exists", "list", "funcy.func_partial", "model_factory.get_hyperparams", "ds_provider.get_split", "ds_provider.get_split_indices", "funcy.partial", "funcy.partial", "funcy.partial", "rgnn.summarize_evaluation", "fy.func_partial.", "print", "print", "print", "tensorflow.keras.backend.clear_session", "gc.collect", "print", "print", "ds_provider.find_compatible_encodings", "len", "list", "funcy.func_partial", "train_ds.cache.cache", "val_ds.cache.cache", "evaluate.train", "model_ctr.evaluate", "md.set_weights", "open", "dict", "json.dump", "funcy.filter", "len", "util_model_ctr", "model_ctr.get_weights", "evaluate.compute_ranking_utils", "evaluate.compute_ranking_utils", "evaluate.compute_ranking_utils"], "function", ["home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.find_eval_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.make_dir", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.PresplitDatasetProvider.get_split_indices", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.summary.summarize_evaluation", "home.repos.pwc.inspect_result.Cortys_rankgnn.datasets.provider.DatasetProvider.find_compatible_encodings", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache", "home.repos.pwc.inspect_result.Cortys_rankgnn.rgnn.utils.cache", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.train", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.evaluate", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.compute_ranking_utils", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.compute_ranking_utils", "home.repos.pwc.inspect_result.Cortys_rankgnn.evaluation.evaluate.compute_ranking_utils"], ["", "def", "ranking_util_evaluate", "(", "\n", "model_factory", ",", "ds_provider", ",", "split", "=", "None", ",", "label", "=", "None", ",", "\n", "epochs", "=", "2000", ",", "single_hp", "=", "None", ",", "\n", "selection_metric", "=", "\"tau\"", ",", "ignore_worst", "=", "0", ")", ":", "\n", "  ", "if", "ds_provider", ".", "default_split", "!=", "0", "and", "split", "is", "None", ":", "\n", "    ", "split", "=", "ds_provider", ".", "default_split", "\n", "\n", "", "if", "split", "is", "None", ":", "\n", "    ", "outer_idx", "=", "0", "\n", "", "elif", "split", "is", "True", ":", "\n", "    ", "outer_idx", "=", "None", "\n", "", "else", ":", "\n", "    ", "outer_idx", "=", "split", "\n", "\n", "", "ds_config", "=", "model_factory", ".", "config", "\n", "model", "=", "model_factory", ".", "get_model", "(", ")", "\n", "util_model", "=", "getattr", "(", "model", ",", "\"decomposed\"", ",", "None", ")", "\n", "\n", "eval_dir", "=", "find_eval_dir", "(", "model_factory", ",", "ds_provider", ",", "label", ",", "split", ")", "\n", "log_dir_base", "=", "make_dir", "(", "eval_dir", "/", "\"rank_util_logs\"", ")", "\n", "rankings_file", "=", "eval_dir", "/", "\"rank_utils.json\"", "\n", "\n", "if", "rankings_file", ".", "exists", "(", ")", ":", "\n", "    ", "print", "(", "f\"Already existing ranking eval found at {rankings_file}.\"", ")", "\n", "return", "\n", "\n", "", "prefer_in_enc", "=", "model_factory", ".", "prefer_in_enc", "\n", "prefer_out_enc", "=", "model_factory", ".", "prefer_out_enc", "\n", "encs", "=", "list", "(", "ds_provider", ".", "find_compatible_encodings", "(", "model", ")", ")", "\n", "if", "len", "(", "encs", ")", ">", "1", ":", "\n", "    ", "filtered_encs", "=", "list", "(", "fy", ".", "filter", "(", "\n", "lambda", "enc", ":", "(", "\n", "(", "prefer_in_enc", "is", "None", "or", "enc", "[", "0", "]", "==", "prefer_in_enc", ")", "\n", "and", "(", "prefer_out_enc", "is", "None", "or", "enc", "[", "1", "]", "==", "prefer_out_enc", ")", "\n", ")", ",", "encs", ")", ")", "\n", "if", "len", "(", "filtered_encs", ")", ">", "0", ":", "\n", "      ", "encs", "=", "filtered_encs", "\n", "\n", "", "", "enc", "=", "encs", "[", "0", "]", "\n", "model_ctr", "=", "fy", ".", "func_partial", "(", "\n", "model", ",", "enc", "=", "enc", ",", "in_meta", "=", "ds_provider", ".", "in_meta", ",", "\n", "out_meta", "=", "ds_provider", ".", "out_meta", ")", "\n", "util_model_ctr", "=", "fy", ".", "func_partial", "(", "\n", "util_model", ",", "enc", "=", "enc", ",", "\n", "in_meta", "=", "ds_provider", ".", "in_meta", ",", "\n", "out_meta", "=", "ds_provider", ".", "out_meta", ")", "if", "util_model", "else", "None", "\n", "hps", "=", "model_factory", ".", "get_hyperparams", "(", "\n", "enc", ",", "in_meta", "=", "ds_provider", ".", "in_meta", ",", "out_meta", "=", "ds_provider", ".", "out_meta", ")", "\n", "\n", "train_ds", ",", "val_ds", ",", "test_ds", "=", "ds_provider", ".", "get_split", "(", "\n", "enc", ",", "outer_idx", "=", "outer_idx", ",", "config", "=", "ds_config", ")", "\n", "\n", "train_idxs", ",", "val_idxs", ",", "test_idxs", "=", "ds_provider", ".", "get_split_indices", "(", "\n", "outer_idx", "=", "outer_idx", ",", "relative", "=", "True", ")", "\n", "train_get", "=", "fy", ".", "partial", "(", "ds_provider", ".", "get_train_split", ",", "outer_idx", "=", "outer_idx", ")", "\n", "val_get", "=", "fy", ".", "partial", "(", "ds_provider", ".", "get_validation_split", ",", "outer_idx", "=", "outer_idx", ")", "\n", "test_get", "=", "fy", ".", "partial", "(", "ds_provider", ".", "get_test_split", ",", "outer_idx", "=", "outer_idx", ")", "\n", "\n", "if", "enc", "[", "-", "1", "]", "==", "\"tf\"", ":", "\n", "    ", "train_ds", "=", "train_ds", ".", "cache", "(", ")", "\n", "val_ds", "=", "val_ds", ".", "cache", "(", ")", "\n", "\n", "", "summ", "=", "summary", ".", "summarize_evaluation", "(", "\n", "eval_dir", ",", "selection_metric", "=", "selection_metric", ",", "ignore_worst", "=", "ignore_worst", ")", "\n", "best_hp_i", "=", "summ", "[", "\"folds\"", "]", "[", "0", "]", "[", "\"hp_i\"", "]", "\n", "best_hp", "=", "hps", "[", "best_hp_i", "]", "\n", "m", "=", "model_ctr", "(", "**", "best_hp", ")", "\n", "\n", "print", "(", "f\"Created model with hp {best_hp_i} and enc {enc}. Training...\"", ")", "\n", "\n", "if", "epochs", ">", "0", ":", "\n", "    ", "train", "(", "\n", "m", ",", "train_ds", ",", "val_ds", ",", "\n", "log_dir_base", "=", "log_dir_base", ",", "\n", "epochs", "=", "epochs", ",", "\n", "patience", "=", "300", ",", "restore_best", "=", "True", ")", "\n", "\n", "", "print", "(", "\"Completed training. Computing rank curves...\"", ")", "\n", "print", "(", "m", ".", "evaluate", "(", "test_ds", ")", ")", "\n", "\n", "if", "util_model_ctr", "is", "not", "None", ":", "\n", "    ", "md", "=", "util_model_ctr", "(", "**", "best_hp", ")", "if", "util_model_ctr", "else", "m", "\n", "md", ".", "set_weights", "(", "m", ".", "get_weights", "(", ")", ")", "\n", "", "else", ":", "\n", "    ", "md", "=", "m", "\n", "\n", "", "with", "open", "(", "rankings_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "    ", "rankings", "=", "dict", "(", "\n", "train", "=", "compute_ranking_utils", "(", "train_idxs", ",", "train_get", ",", "md", ",", "ds_config", ")", ",", "\n", "val", "=", "compute_ranking_utils", "(", "val_idxs", ",", "val_get", ",", "md", ",", "ds_config", ")", ",", "\n", "test", "=", "compute_ranking_utils", "(", "test_idxs", ",", "test_get", ",", "md", ",", "ds_config", ")", ")", "\n", "\n", "json", ".", "dump", "(", "rankings", ",", "f", ",", "indent", "=", "\"\\t\"", ",", "sort_keys", "=", "True", ",", "cls", "=", "NumpyEncoder", ")", "\n", "\n", "", "tf", ".", "keras", ".", "backend", ".", "clear_session", "(", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "print", "(", "\"Done.\"", ")", "\n", "", ""]]}