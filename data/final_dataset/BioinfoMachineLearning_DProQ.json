{"home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.None.inference.check_distance": [[73, 83], ["src.utils.distance_helper", "src.utils.distance_helper", "src.utils.distance_helper", "ERROR_LIST.append", "logging.warning", "print"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.distance_helper", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.distance_helper", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.distance_helper"], ["", "def", "check_distance", "(", "pdb_file", ":", "str", ",", "decoy_name", ":", "str", ",", "output_folder", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"Check CA-CA, CB-CB, N-O distance maps are same shape.\"\"\"", "\n", "caca_dist_shape", "=", "distance_helper", "(", "pdb_file", ",", "decoy_name", ",", "output_folder", ",", "atom_type", "=", "'CA'", ")", "\n", "cbcb_dist_shape", "=", "distance_helper", "(", "pdb_file", ",", "decoy_name", ",", "output_folder", ",", "atom_type", "=", "'CB'", ")", "\n", "no_dist_shape", "=", "distance_helper", "(", "pdb_file", ",", "decoy_name", ",", "output_folder", ",", "atom_type", "=", "'NO'", ")", "\n", "if", "not", "caca_dist_shape", "==", "cbcb_dist_shape", "==", "no_dist_shape", ":", "\n", "        ", "ERROR_LIST", ".", "append", "(", "pdb_file", ")", "\n", "logging", ".", "warning", "(", "'Requires CA-CA, CB-CB, N-O with same shape.'", ")", "\n", "print", "(", "f'{decoy_name} CA shape: {caca_dist_shape}, CB shape: {cbcb_dist_shape}, NO shape: {no_dist_shape}'", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.None.inference.wrapper": [[113, 118], ["src.build_protein_graph.build_protein_graph", "data_entry.split"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.build_protein_graph.build_protein_graph"], ["def", "wrapper", "(", "data_entry", ":", "str", ")", ":", "\n", "    ", "build_protein_graph", "(", "pdb_file", "=", "data_entry", ",", "\n", "model_name", "=", "data_entry", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "9", "]", ",", "# remove _tidy.pdb", "\n", "out", "=", "dgl_folder", ",", "\n", "dist_path", "=", "dist_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.build_protein_graph.build_protein_graph": [[15, 80], ["print", "sklearn.preprocessing.MinMaxScaler", "src.utils.pdb2fasta", "src.utils.pdb2graph_new_chain_info", "src.utils.run_dssp", "src.utils.ss3_one_hot", "torch.tensor", "torch.tensor", "torch.tensor().reshape", "src.utils.sequence_one_hot", "src.utils.laplacian_positional_encoding", "torch.sin().reshape", "numpy.load", "numpy.load", "numpy.load", "torch.tensor().reshape", "torch.tensor", "torch.tensor", "torch.tensor", "src.utils.update_node_feature", "src.utils.update_edge_feature", "dgl.save_graphs", "print", "os.path.isdir", "FileNotFoundError", "sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.preprocessing.MinMaxScaler.fit_transform", "os.path.join", "os.path.join", "os.path.join", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.preprocessing.MinMaxScaler.fit_transform", "sklearn.preprocessing.MinMaxScaler.fit_transform", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor", "torch.sin", "torch.tensor", "torch.tensor().reshape", "torch.tensor().reshape", "torch.tensor().reshape", "os.path.join", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "g.edges", "g.edges"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.pdb2fasta", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.pdb2graph_new_chain_info", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.run_dssp", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.ss3_one_hot", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.sequence_one_hot", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.laplacian_positional_encoding", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.update_node_feature", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.update_edge_feature"], ["def", "build_protein_graph", "(", "pdb_file", ":", "str", ",", "\n", "model_name", ":", "str", ",", "\n", "out", ":", "str", ",", "\n", "dist_path", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"Build KNN graph and assign node and edge features. node feature: N * 35, Edge feature: E * 6\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dist_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "f'Please check distance folder {dist_path}'", ")", "\n", "\n", "", "print", "(", "f'Processing {model_name}'", ")", "\n", "scaler", "=", "MinMaxScaler", "(", ")", "\n", "\n", "# 1. extract sequence from pdb", "\n", "sequence", "=", "pdb2fasta", "(", "pdb_file", ")", "\n", "\n", "# 3. build graph and extract edges and PEEE", "\n", "atom_df_full", ",", "g", ",", "edges", ",", "peee", "=", "pdb2graph_new_chain_info", "(", "pdb_file", ",", "knn", "=", "10", ")", "\n", "\n", "# 4. node features", "\n", "# 4.1. SS8, rasa, phi, psi", "\n", "feature_df", "=", "run_dssp", "(", "pdb_file", ")", "\n", "ss3_feature", "=", "ss3_one_hot", "(", "feature_df", ")", "\n", "phi_feature", "=", "torch", ".", "tensor", "(", "scaler", ".", "fit_transform", "(", "torch", ".", "tensor", "(", "feature_df", "[", "'phi'", "]", ".", "values", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "psi_feature", "=", "torch", ".", "tensor", "(", "scaler", ".", "fit_transform", "(", "torch", ".", "tensor", "(", "feature_df", "[", "'psi'", "]", ".", "values", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "rasa_feature", "=", "torch", ".", "tensor", "(", "feature_df", "[", "'rasa'", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# 4.2. sequence one hot as node", "\n", "one_hot_feature", "=", "sequence_one_hot", "(", "sequence", ")", "\n", "\n", "# 4.3. laplacian positional encoding", "\n", "lap_enc_feature", "=", "laplacian_positional_encoding", "(", "g", ",", "pos_enc_dim", "=", "8", ")", "\n", "\n", "# 5. edge features", "\n", "# 5.1. edge sine position encoding", "\n", "edge_sin_pos", "=", "torch", ".", "sin", "(", "(", "g", ".", "edges", "(", ")", "[", "0", "]", "-", "g", ".", "edges", "(", ")", "[", "1", "]", ")", ".", "float", "(", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "# 5.2. CA-CA, CB-CB, N-O distance", "\n", "# load distance map", "\n", "CACA", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dist_path", ",", "model_name", "+", "'_CA.npy'", ")", ")", "\n", "CBCB", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dist_path", ",", "model_name", "+", "'_CB.npy'", ")", ")", "\n", "NO", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "dist_path", ",", "model_name", "+", "'_NO.npy'", ")", ")", "\n", "\n", "caca_feature", ",", "cbcb_feature", ",", "no_feature", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "edges", ":", "\n", "        ", "caca_feature", ".", "append", "(", "CACA", "[", "i", "]", ")", "\n", "cbcb_feature", ".", "append", "(", "CBCB", "[", "i", "]", ")", "\n", "no_feature", ".", "append", "(", "NO", "[", "i", "]", ")", "\n", "\n", "", "contact_feature", "=", "torch", ".", "tensor", "(", "[", "1", "if", "cb_distance", "<", "8.0", "else", "0", "for", "cb_distance", "in", "cbcb_feature", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "caca_feature", "=", "torch", ".", "tensor", "(", "scaler", ".", "fit_transform", "(", "torch", ".", "tensor", "(", "caca_feature", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "cbcb_feature", "=", "torch", ".", "tensor", "(", "scaler", ".", "fit_transform", "(", "torch", ".", "tensor", "(", "cbcb_feature", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "no_feature", "=", "torch", ".", "tensor", "(", "scaler", ".", "fit_transform", "(", "torch", ".", "tensor", "(", "no_feature", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "\n", "\n", "# 6. add feature to graph", "\n", "update_node_feature", "(", "g", ",", "[", "ss3_feature", ",", "rasa_feature", ",", "\n", "phi_feature", ",", "psi_feature", ",", "\n", "lap_enc_feature", ",", "one_hot_feature", "]", ")", "\n", "\n", "update_edge_feature", "(", "g", ",", "[", "edge_sin_pos", ",", "caca_feature", ",", "\n", "cbcb_feature", ",", "no_feature", ",", "\n", "contact_feature", ",", "peee", "]", ")", "\n", "\n", "dgl", ".", "save_graphs", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "out", ",", "f'{model_name}.dgl'", ")", ",", "g_list", "=", "g", ")", "\n", "print", "(", "f'{model_name} SUCCESS'", ")", "\n", "return", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.clean_pipe.clean_pipe": [[24, 115], ["pdb_file.endswith", "biopandas.pdb.PandasPdb().read_pdb", "PandasPdb().read_pdb.amino3to1", "ppdb.amino3to1.loc[].tolist", "os.path.join", "subprocess.call", "enumerate", "os.path.join", "subprocess.call", "os.path.join", "subprocess.call", "os.path.join", "subprocess.call", "shutil.copy", "chain_list.append", "print", "PandasPdb().read_pdb.df[].loc[].tolist", "PandasPdb().read_pdb.to_pdb", "os.path.join", "subprocess.call", "tmp_pdb_list.append", "os.path.join", "subprocess.call", "re_residue_list.append", "print", "os.remove", "os.remove", "os.remove", "os.path.isfile", "[].split", "pdb_file.split", "biopandas.pdb.PandasPdb", "re.sub", "element_symbol_list.append", "os.remove", "os.remove", "os.remove", "PandasPdb().read_pdb.df[].loc[].unique", "pdb_file.split"], "function", ["None"], ["def", "clean_pipe", "(", "pdb_file", ":", "str", ",", "output_folder", ":", "str", ",", "save_flag", "=", "False", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Reformat pdb by:\n    1. set each chain's residue number starts from 1\n    2. set whole pdb file's atom number starts from 1\n    3. add TER\n    \"\"\"", "\n", "\n", "# add postfix for file if it does not end with .pdb", "\n", "ENDSPDB", "=", "True", "\n", "if", "pdb_file", ".", "endswith", "(", "'.pdb'", ")", ":", "\n", "        ", "model_name", "=", "pdb_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "ENDSPDB", "=", "False", "\n", "model_name", "=", "pdb_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "new_pdb_file", "=", "pdb_file", "+", "'.pdb'", "\n", "copy", "(", "pdb_file", ",", "new_pdb_file", ")", "\n", "pdb_file", "=", "new_pdb_file", "\n", "\n", "# get chain list", "\n", "", "ppdb", "=", "PandasPdb", "(", ")", ".", "read_pdb", "(", "pdb_file", ")", "\n", "sequence", "=", "ppdb", ".", "amino3to1", "(", ")", "\n", "chain_list_tmp", "=", "sequence", ".", "loc", "[", ":", ",", "'chain_id'", "]", ".", "tolist", "(", ")", "\n", "chain_list", "=", "[", "]", "\n", "[", "chain_list", ".", "append", "(", "x", ")", "for", "x", "in", "chain_list_tmp", "if", "x", "not", "in", "chain_list", "]", "\n", "\n", "if", "ppdb", ".", "df", "[", "'ATOM'", "]", ".", "loc", "[", ":", ",", "'element_symbol'", "]", ".", "unique", "(", ")", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "print", "(", "f'The element_symbol column is empty, {pdb_file}'", ")", "\n", "atom_name_list", "=", "ppdb", ".", "df", "[", "'ATOM'", "]", ".", "loc", "[", ":", ",", "'atom_name'", "]", ".", "tolist", "(", ")", "\n", "element_symbol_list", "=", "[", "]", "\n", "for", "i", "in", "atom_name_list", ":", "\n", "            ", "i", "=", "re", ".", "sub", "(", "r'[^a-zA-Z]'", ",", "''", ",", "i", ")", "\n", "element_symbol_list", ".", "append", "(", "i", "[", "0", "]", ")", "\n", "", "ppdb", ".", "df", "[", "'ATOM'", "]", ".", "loc", "[", ":", ",", "'element_symbol'", "]", "=", "element_symbol_list", "\n", "ppdb", ".", "to_pdb", "(", "path", "=", "pdb_file", ",", "# overwrite the raw file", "\n", "records", "=", "None", ",", "\n", "gz", "=", "False", ",", "\n", "append_newline", "=", "True", ")", "\n", "\n", "# 1. Keep ATOM", "\n", "", "tmp_file_1", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "model_name", "+", "'_tmp_v1.pdb'", ")", "\n", "cmd", "=", "f'python {keep_tool} {pdb_file} {tmp_file_1}'", "\n", "call", "(", "[", "cmd", "]", ",", "shell", "=", "True", ")", "\n", "\n", "# 2. Split chain", "\n", "tmp_pdb_list", "=", "[", "]", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "chain_list", ")", ":", "\n", "        ", "tmp_pdb_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "model_name", "+", "'_'", "+", "chain_list", "[", "idx", "]", "+", "'.pdb'", ")", "\n", "cmd", "=", "f'python {chain_tool} -{chain_list[idx]} {tmp_file_1} > {tmp_pdb_file}'", "\n", "call", "(", "[", "cmd", "]", ",", "shell", "=", "True", ")", "\n", "tmp_pdb_list", ".", "append", "(", "tmp_pdb_file", ")", "\n", "\n", "# 3. Re-residue", "\n", "", "re_residue_list", "=", "[", "]", "\n", "for", "i", "in", "tmp_pdb_list", ":", "\n", "        ", "chain_id", "=", "i", "[", "-", "5", "]", "\n", "tmp_pdb_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "model_name", "+", "'_'", "+", "chain_id", "+", "'_reresidue.pdb'", ")", "\n", "cmd", "=", "f'python {residue_tool} -1 {i} > {tmp_pdb_file}'", "\n", "call", "(", "[", "cmd", "]", ",", "shell", "=", "True", ")", "\n", "re_residue_list", ".", "append", "(", "tmp_pdb_file", ")", "\n", "\n", "# 4. Combine", "\n", "", "merge_list", "=", "' '", ".", "join", "(", "i", "for", "i", "in", "re_residue_list", ")", "\n", "merged_dile", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "model_name", "+", "'_merged.pdb'", ")", "\n", "cmd", "=", "f\"python {merge_tool} {merge_list} > {merged_dile}\"", "\n", "call", "(", "[", "cmd", "]", ",", "shell", "=", "True", ")", "\n", "\n", "# 5. Re-atom", "\n", "re_atom_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "model_name", "+", "'_reatom.pdb'", ")", "\n", "cmd", "=", "f\"python {atom_tool} -1 {merged_dile} > {re_atom_file}\"", "\n", "call", "(", "[", "cmd", "]", ",", "shell", "=", "True", ")", "\n", "\n", "# 6. tidy", "\n", "tidy_file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "model_name", "+", "'_tidy.pdb'", ")", "\n", "cmd", "=", "f\"python {tidy_tool} {re_atom_file} > {tidy_file}\"", "\n", "call", "(", "[", "cmd", "]", ",", "shell", "=", "True", ")", "\n", "\n", "# remove tmp files", "\n", "if", "not", "save_flag", ":", "\n", "        ", "print", "(", "'Remove tmp files'", ")", "\n", "os", ".", "remove", "(", "tmp_file_1", ")", "\n", "for", "i", "in", "tmp_pdb_list", ":", "\n", "            ", "os", ".", "remove", "(", "i", ")", "\n", "", "for", "i", "in", "re_residue_list", ":", "\n", "            ", "os", ".", "remove", "(", "i", ")", "\n", "", "os", ".", "remove", "(", "merged_dile", ")", "\n", "os", ".", "remove", "(", "re_atom_file", ")", "\n", "\n", "", "if", "not", "ENDSPDB", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "new_pdb_file", ")", ":", "\n", "            ", "os", ".", "remove", "(", "new_pdb_file", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.MultiHeadAttentionLayer.__init__": [[58, 78], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ",", "num_heads", ":", "int", ",", "use_bias", ":", "bool", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n", "if", "use_bias", ":", "\n", "            ", "self", ".", "Q", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "True", ")", "\n", "self", ".", "K", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "True", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "True", ")", "\n", "self", ".", "proj_e", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "True", ")", "\n", "self", ".", "e_gate", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "True", ")", "\n", "self", ".", "n_gate", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "Q", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "K", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "proj_e", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "False", ")", "\n", "self", ".", "e_gate", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "True", ")", "\n", "self", ".", "n_gate", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", "*", "num_heads", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.MultiHeadAttentionLayer.propagate_attention": [[79, 102], ["g.apply_edges", "g.apply_edges", "g.apply_edges", "g.apply_edges", "g.apply_edges", "g.apply_edges", "g.edges", "g.send_and_recv", "g.apply_nodes", "g.send_and_recv", "graph_transformer_edge_layer.src_dot_dst", "graph_transformer_edge_layer.scaling", "graph_transformer_edge_layer.imp_exp_attn", "graph_transformer_edge_layer.out_edge_features", "graph_transformer_edge_layer.sigmoid_gage", "graph_transformer_edge_layer.exp", "dgl.src_mul_edge", "dgl.sum", "dgl.copy_edge", "dgl.sum", "numpy.sqrt", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.src_dot_dst", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.scaling", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.imp_exp_attn", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.out_edge_features", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.sigmoid_gage", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.exp"], ["", "", "def", "propagate_attention", "(", "self", ",", "g", ")", ":", "\n", "# Compute attention score, Q.dot(K.T) = score", "\n", "        ", "g", ".", "apply_edges", "(", "src_dot_dst", "(", "'K_h'", ",", "'Q_h'", ",", "'score'", ")", ")", "# , edges)", "\n", "\n", "g", ".", "apply_edges", "(", "scaling", "(", "'score'", ",", "np", ".", "sqrt", "(", "self", ".", "out_dim", ")", ")", ")", "\n", "\n", "# Use available edge features to modify the scores, score(in equation named w) = score.dot(proj_e)", "\n", "g", ".", "apply_edges", "(", "imp_exp_attn", "(", "'score'", ",", "'proj_e'", ")", ")", "\n", "\n", "# Copy edge features as e_out to be passed to FFN_e, set e_out as score", "\n", "g", ".", "apply_edges", "(", "out_edge_features", "(", "'score'", ")", ")", "\n", "\n", "# add edge gate", "\n", "g", ".", "apply_edges", "(", "sigmoid_gage", "(", "'score'", ",", "'e_gate'", ")", ")", "\n", "\n", "# softmax", "\n", "g", ".", "apply_edges", "(", "exp", "(", "'score'", ")", ")", "\n", "\n", "# Send weighted values to target nodes", "\n", "eids", "=", "g", ".", "edges", "(", ")", "\n", "g", ".", "send_and_recv", "(", "eids", ",", "fn", ".", "src_mul_edge", "(", "'V_h'", ",", "'score'", ",", "'V_h'", ")", ",", "fn", ".", "sum", "(", "'V_h'", ",", "'wV'", ")", ")", "\n", "g", ".", "apply_nodes", "(", "lambda", "nodes", ":", "{", "'vW'", ":", "torch", ".", "mul", "(", "nodes", ".", "data", "[", "'wV'", "]", ",", "nodes", ".", "data", "[", "'n_gate'", "]", ")", "}", ")", "# node gate", "\n", "g", ".", "send_and_recv", "(", "eids", ",", "fn", ".", "copy_edge", "(", "'score'", ",", "'score'", ")", ",", "fn", ".", "sum", "(", "'score'", ",", "'z'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.MultiHeadAttentionLayer.forward": [[103, 126], ["graph_transformer_edge_layer.MultiHeadAttentionLayer.Q", "graph_transformer_edge_layer.MultiHeadAttentionLayer.K", "graph_transformer_edge_layer.MultiHeadAttentionLayer.V", "graph_transformer_edge_layer.MultiHeadAttentionLayer.proj_e", "graph_transformer_edge_layer.MultiHeadAttentionLayer.e_gate", "graph_transformer_edge_layer.MultiHeadAttentionLayer.n_gate", "graph_transformer_edge_layer.MultiHeadAttentionLayer.view", "graph_transformer_edge_layer.MultiHeadAttentionLayer.view", "graph_transformer_edge_layer.MultiHeadAttentionLayer.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "graph_transformer_edge_layer.MultiHeadAttentionLayer.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "graph_transformer_edge_layer.MultiHeadAttentionLayer.propagate_attention", "graph_transformer_edge_layer.MultiHeadAttentionLayer.view", "graph_transformer_edge_layer.MultiHeadAttentionLayer.view", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like"], "methods", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.MultiHeadAttentionLayer.propagate_attention"], ["", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ")", ":", "\n", "\n", "        ", "Q_h", "=", "self", ".", "Q", "(", "h", ")", "\n", "K_h", "=", "self", ".", "K", "(", "h", ")", "\n", "V_h", "=", "self", ".", "V", "(", "h", ")", "\n", "proj_e", "=", "self", ".", "proj_e", "(", "e", ")", "\n", "e_gate", "=", "self", ".", "e_gate", "(", "e", ")", "# gate for edge feature update (Q.dot(K.T)).dot(proj_e) X sigmoid(e_gate)", "\n", "n_gate", "=", "self", ".", "n_gate", "(", "h", ")", "# gate for node feature update: (W.dot(V)) X sigmoid(n_gate)", "\n", "\n", "# Reshaping into [num_nodes, num_heads, feat_dim] to", "\n", "# get projections for multi-head attention", "\n", "g", ".", "ndata", "[", "'Q_h'", "]", "=", "Q_h", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "out_dim", ")", "\n", "g", ".", "ndata", "[", "'K_h'", "]", "=", "K_h", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "out_dim", ")", "\n", "g", ".", "ndata", "[", "'V_h'", "]", "=", "V_h", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "out_dim", ")", "\n", "g", ".", "ndata", "[", "'n_gate'", "]", "=", "torch", ".", "sigmoid", "(", "n_gate", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "out_dim", ")", ")", "\n", "g", ".", "edata", "[", "'proj_e'", "]", "=", "proj_e", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "out_dim", ")", "\n", "g", ".", "edata", "[", "'e_gate'", "]", "=", "torch", ".", "sigmoid", "(", "e_gate", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "out_dim", ")", ")", "\n", "\n", "self", ".", "propagate_attention", "(", "g", ")", "\n", "\n", "h_out", "=", "g", ".", "ndata", "[", "'wV'", "]", "/", "(", "g", ".", "ndata", "[", "'z'", "]", "+", "torch", ".", "full_like", "(", "g", ".", "ndata", "[", "'z'", "]", ",", "1e-6", ")", ")", "# adding eps to all values here", "\n", "e_out", "=", "g", ".", "edata", "[", "'e_out'", "]", "\n", "return", "h_out", ",", "e_out", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.GraphTransformerLayer.__init__": [[130, 169], ["torch.Module.__init__", "graph_transformer_edge_layer.MultiHeadAttentionLayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "num_heads", ",", "dropout", "=", "0.0", ",", "layer_norm", "=", "False", ",", "batch_norm", "=", "True", ",", "residual", "=", "True", ",", "\n", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_dim", "\n", "self", ".", "out_channels", "=", "out_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "attention", "=", "MultiHeadAttentionLayer", "(", "in_dim", ",", "out_dim", "//", "num_heads", ",", "num_heads", ",", "use_bias", ")", "\n", "\n", "self", ".", "O_h", "=", "nn", ".", "Linear", "(", "out_dim", ",", "out_dim", ")", "\n", "self", ".", "O_e", "=", "nn", ".", "Linear", "(", "out_dim", ",", "out_dim", ")", "\n", "\n", "if", "self", ".", "layer_norm", ":", "\n", "            ", "self", ".", "layer_norm1_h", "=", "nn", ".", "LayerNorm", "(", "out_dim", ")", "\n", "self", ".", "layer_norm1_e", "=", "nn", ".", "LayerNorm", "(", "out_dim", ")", "\n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "self", ".", "batch_norm1_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "self", ".", "batch_norm1_e", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n", "# FFN for h", "\n", "", "self", ".", "FFN_h_layer1", "=", "nn", ".", "Linear", "(", "out_dim", ",", "out_dim", "*", "2", ")", "\n", "self", ".", "FFN_h_layer2", "=", "nn", ".", "Linear", "(", "out_dim", "*", "2", ",", "out_dim", ")", "\n", "\n", "# FFN for e", "\n", "self", ".", "FFN_e_layer1", "=", "nn", ".", "Linear", "(", "out_dim", ",", "out_dim", "*", "2", ")", "\n", "self", ".", "FFN_e_layer2", "=", "nn", ".", "Linear", "(", "out_dim", "*", "2", ",", "out_dim", ")", "\n", "\n", "if", "self", ".", "layer_norm", ":", "\n", "            ", "self", ".", "layer_norm2_h", "=", "nn", ".", "LayerNorm", "(", "out_dim", ")", "\n", "self", ".", "layer_norm2_e", "=", "nn", ".", "LayerNorm", "(", "out_dim", ")", "\n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "self", ".", "batch_norm2_h", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "self", ".", "batch_norm2_e", "=", "nn", ".", "BatchNorm1d", "(", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.GraphTransformerLayer.forward": [[170, 226], ["graph_transformer_edge_layer.GraphTransformerLayer.attention", "h_attn_out.view", "e_attn_out.view", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "graph_transformer_edge_layer.GraphTransformerLayer.O_h", "graph_transformer_edge_layer.GraphTransformerLayer.O_e", "graph_transformer_edge_layer.GraphTransformerLayer.FFN_h_layer1", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "graph_transformer_edge_layer.GraphTransformerLayer.FFN_h_layer2", "graph_transformer_edge_layer.GraphTransformerLayer.FFN_e_layer1", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "graph_transformer_edge_layer.GraphTransformerLayer.FFN_e_layer2", "graph_transformer_edge_layer.GraphTransformerLayer.layer_norm1_h", "graph_transformer_edge_layer.GraphTransformerLayer.layer_norm1_e", "graph_transformer_edge_layer.GraphTransformerLayer.batch_norm1_h", "graph_transformer_edge_layer.GraphTransformerLayer.batch_norm1_e", "graph_transformer_edge_layer.GraphTransformerLayer.layer_norm2_h", "graph_transformer_edge_layer.GraphTransformerLayer.layer_norm2_e", "graph_transformer_edge_layer.GraphTransformerLayer.batch_norm2_h", "graph_transformer_edge_layer.GraphTransformerLayer.batch_norm2_e"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "g", ",", "h", ",", "e", ")", ":", "\n", "        ", "h_in1", "=", "h", "# for first residual connection", "\n", "e_in1", "=", "e", "# for first residual connection", "\n", "\n", "# multi-head attention out", "\n", "h_attn_out", ",", "e_attn_out", "=", "self", ".", "attention", "(", "g", ",", "h", ",", "e", ")", "\n", "\n", "h", "=", "h_attn_out", ".", "view", "(", "-", "1", ",", "self", ".", "out_channels", ")", "\n", "e", "=", "e_attn_out", ".", "view", "(", "-", "1", ",", "self", ".", "out_channels", ")", "\n", "\n", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "e", "=", "F", ".", "dropout", "(", "e", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "h", "=", "self", ".", "O_h", "(", "h", ")", "\n", "e", "=", "self", ".", "O_e", "(", "e", ")", "\n", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in1", "+", "h", "# residual connection", "\n", "e", "=", "e_in1", "+", "e", "# residual connection", "\n", "\n", "", "if", "self", ".", "layer_norm", ":", "\n", "            ", "h", "=", "self", ".", "layer_norm1_h", "(", "h", ")", "\n", "e", "=", "self", ".", "layer_norm1_e", "(", "e", ")", "\n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "batch_norm1_h", "(", "h", ")", "\n", "e", "=", "self", ".", "batch_norm1_e", "(", "e", ")", "\n", "\n", "", "h_in2", "=", "h", "# for second residual connection", "\n", "e_in2", "=", "e", "# for second residual connection", "\n", "\n", "# FFN for h", "\n", "h", "=", "self", ".", "FFN_h_layer1", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "F", ".", "dropout", "(", "h", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "h", "=", "self", ".", "FFN_h_layer2", "(", "h", ")", "\n", "\n", "# FFN for e", "\n", "e", "=", "self", ".", "FFN_e_layer1", "(", "e", ")", "\n", "e", "=", "F", ".", "relu", "(", "e", ")", "\n", "e", "=", "F", ".", "dropout", "(", "e", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "e", "=", "self", ".", "FFN_e_layer2", "(", "e", ")", "\n", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "h", "=", "h_in2", "+", "h", "# residual connection", "\n", "e", "=", "e_in2", "+", "e", "# residual connection", "\n", "\n", "", "if", "self", ".", "layer_norm", ":", "\n", "            ", "h", "=", "self", ".", "layer_norm2_h", "(", "h", ")", "\n", "e", "=", "self", ".", "layer_norm2_e", "(", "e", ")", "\n", "\n", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "h", "=", "self", ".", "batch_norm2_h", "(", "h", ")", "\n", "e", "=", "self", ".", "batch_norm2_e", "(", "e", ")", "\n", "\n", "", "return", "h", ",", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.GraphTransformerLayer.__repr__": [[227, 233], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}(in_channels={}, out_channels={}, heads={}, residual={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ",", "\n", "self", ".", "num_heads", ",", "\n", "self", ".", "residual", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.src_dot_dst": [[13, 17], ["None"], "function", ["None"], ["def", "src_dot_dst", "(", "src_field", ",", "dst_field", ",", "out_field", ")", ":", "\n", "    ", "def", "func", "(", "edges", ")", ":", "\n", "        ", "return", "{", "out_field", ":", "(", "edges", ".", "src", "[", "src_field", "]", "*", "edges", ".", "dst", "[", "dst_field", "]", ")", "}", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.scaling": [[19, 23], ["None"], "function", ["None"], ["", "def", "scaling", "(", "field", ",", "scale_constant", ")", ":", "\n", "    ", "def", "func", "(", "edges", ")", ":", "\n", "        ", "return", "{", "field", ":", "(", "(", "edges", ".", "data", "[", "field", "]", ")", "/", "scale_constant", ")", "}", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.imp_exp_attn": [[26, 34], ["None"], "function", ["None"], ["", "def", "imp_exp_attn", "(", "implicit_attn", ",", "explicit_edge", ")", ":", "\n", "    ", "\"\"\"\n        implicit_attn: the output of K Q\n        explicit_edge: the explicit edge features\n    \"\"\"", "\n", "def", "func", "(", "edges", ")", ":", "\n", "        ", "return", "{", "implicit_attn", ":", "(", "edges", ".", "data", "[", "implicit_attn", "]", "*", "edges", ".", "data", "[", "explicit_edge", "]", ")", "}", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.out_edge_features": [[37, 41], ["None"], "function", ["None"], ["", "def", "out_edge_features", "(", "edge_feat", ")", ":", "\n", "    ", "def", "func", "(", "edges", ")", ":", "\n", "        ", "return", "{", "'e_out'", ":", "edges", ".", "data", "[", "edge_feat", "]", "}", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.exp": [[43, 48], ["torch.exp", "torch.exp", "torch.exp", "edges.data[].sum().clamp", "edges.data[].sum"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.exp", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.exp", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.exp"], ["", "def", "exp", "(", "field", ")", ":", "\n", "    ", "def", "func", "(", "edges", ")", ":", "\n", "# clamp for softmax numerical stability", "\n", "        ", "return", "{", "field", ":", "torch", ".", "exp", "(", "(", "edges", ".", "data", "[", "field", "]", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", ")", ".", "clamp", "(", "-", "5", ",", "5", ")", ")", "}", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.graph_transformer_edge_layer.sigmoid_gage": [[50, 54], ["torch.mul", "torch.mul", "torch.mul", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "sigmoid_gage", "(", "attention_score", ",", "gate", ")", ":", "\n", "    ", "def", "func", "(", "edges", ")", ":", "\n", "        ", "return", "{", "attention_score", ":", "torch", ".", "mul", "(", "edges", ".", "data", "[", "attention_score", "]", ",", "torch", ".", "sigmoid", "(", "edges", ".", "data", "[", "gate", "]", ")", ")", "}", "\n", "", "return", "func", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.run_DPROQ_li_multitask_v2_gate.ResNetEmbedding.__init__": [[54, 65], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData.__init__"], ["def", "__init__", "(", "self", ",", "node_input_dim", ":", "int", ",", "edge_input_dim", ":", "int", ",", "out_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", "ResNetEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "node_input_dim", "=", "node_input_dim", "\n", "self", ".", "edge_input_dim", "=", "edge_input_dim", "\n", "\n", "# net work module", "\n", "self", ".", "node_embedding", "=", "nn", ".", "Linear", "(", "node_input_dim", ",", "out_dim", ")", "\n", "self", ".", "bn_node", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "out_dim", ")", "\n", "self", ".", "edge_embedding", "=", "nn", ".", "Linear", "(", "edge_input_dim", ",", "out_dim", ")", "\n", "self", ".", "bn_edge", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "out_dim", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.run_DPROQ_li_multitask_v2_gate.ResNetEmbedding.forward": [[66, 73], ["run_DPROQ_li_multitask_v2_gate.ResNetEmbedding.node_embedding", "run_DPROQ_li_multitask_v2_gate.ResNetEmbedding.relu", "run_DPROQ_li_multitask_v2_gate.ResNetEmbedding.edge_embedding", "run_DPROQ_li_multitask_v2_gate.ResNetEmbedding.relu", "run_DPROQ_li_multitask_v2_gate.ResNetEmbedding.bn_node", "run_DPROQ_li_multitask_v2_gate.ResNetEmbedding.bn_edge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "node_feature", ",", "edge_feature", ")", ":", "\n", "        ", "node_feature_embedded", "=", "self", ".", "node_embedding", "(", "node_feature", ")", "\n", "node_feature_embedded", "=", "self", ".", "relu", "(", "self", ".", "bn_node", "(", "node_feature_embedded", ")", ")", "\n", "edge_feature_embedded", "=", "self", ".", "edge_embedding", "(", "edge_feature", ")", "\n", "edge_feature_embedded", "=", "self", ".", "relu", "(", "self", ".", "bn_edge", "(", "edge_feature_embedded", ")", ")", "\n", "\n", "return", "node_feature_embedded", ",", "edge_feature_embedded", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.__init__": [[77, 88], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.list_FC_layer.add_module", "run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.list_FC_layer.add_module", "run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.list_FC_layer.add_module", "run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.list_FC_layer.add_module", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ":", "int", ",", "output_dim", ":", "int", ",", "dp_rate", "=", "0.5", ",", "L", "=", "2", ")", ":", "\n", "        ", "super", "(", "MLPReadoutClassV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "L", "=", "L", "\n", "self", ".", "list_FC_layer", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "L", ")", ":", "\n", "            ", "self", ".", "list_FC_layer", ".", "add_module", "(", "f'Linear {i}'", ",", "nn", ".", "Linear", "(", "input_dim", "//", "2", "**", "i", ",", "input_dim", "//", "2", "**", "(", "i", "+", "1", ")", ",", "bias", "=", "True", ")", ")", "\n", "self", ".", "list_FC_layer", ".", "add_module", "(", "f'BN {i}'", ",", "nn", ".", "BatchNorm1d", "(", "input_dim", "//", "2", "**", "(", "i", "+", "1", ")", ")", ")", "\n", "self", ".", "list_FC_layer", ".", "add_module", "(", "f'relu {i}'", ",", "nn", ".", "LeakyReLU", "(", ")", ")", "\n", "self", ".", "list_FC_layer", ".", "add_module", "(", "f'dp {i}'", ",", "nn", ".", "Dropout", "(", "p", "=", "dp_rate", ")", ")", "\n", "", "self", ".", "last_layer_classification", "=", "nn", ".", "Linear", "(", "input_dim", "//", "2", "**", "L", ",", "4", ",", "bias", "=", "True", ")", "\n", "self", ".", "last_layer", "=", "nn", ".", "Linear", "(", "4", ",", "output_dim", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.forward": [[89, 94], ["run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.list_FC_layer", "run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.last_layer_classification", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2.last_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "list_FC_layer", "(", "x", ")", "\n", "y_2", "=", "self", ".", "last_layer_classification", "(", "x", ")", "# class label", "\n", "y_1", "=", "torch", ".", "sigmoid", "(", "self", ".", "last_layer", "(", "y_2", ")", ")", "# dockq_score", "\n", "return", "y_1", ",", "y_2", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.run_DPROQ_li_multitask_v2_gate.DPROQLi.__init__": [[98, 145], ["pytorch_lightning.LightningModule.__init__", "torchmetrics.Accuracy", "pytorch_lightning.utilities.seed.seed_everything", "run_DPROQ_li_multitask_v2_gate.ResNetEmbedding", "torch.ModuleList", "torch.ModuleList", "run_DPROQ_li_multitask_v2_gate.MLPReadoutClassV2", "print", "torchmetrics.MeanSquaredError", "print", "torchmetrics.MeanAbsoluteError", "print", "torchmetrics.MeanSquaredError", "src.graph_transformer_edge_layer.GraphTransformerLayer", "range"], "methods", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "node_input_dim", "=", "_node_input_dim", "\n", "self", ".", "edge_input_dim", "=", "_edge_input_dim", "\n", "self", ".", "num_heads", "=", "_graph_n_heads", "\n", "self", ".", "graph_n_layer", "=", "_graph_n_layer", "\n", "self", ".", "readout", "=", "_readout", "\n", "self", ".", "dp_rate", "=", "_graph_transformer_dropout", "\n", "self", ".", "layer_norm", "=", "_layer_norm", "\n", "self", ".", "batch_norm", "=", "_batch_norm", "\n", "self", ".", "residual", "=", "_residual", "\n", "self", ".", "init_lr", "=", "_init_lr", "\n", "self", ".", "weight_decay", "=", "_weight_decay", "\n", "self", ".", "hidden_dim", "=", "_hidden_dim", "\n", "self", ".", "opt", "=", "_optimizer", "\n", "if", "_criterion", "==", "'mse'", ":", "\n", "            ", "print", "(", "'USE MSE'", ")", "\n", "self", ".", "criterion", "=", "torchmetrics", ".", "MeanSquaredError", "(", ")", "\n", "", "elif", "_criterion", "==", "'mae'", ":", "\n", "            ", "print", "(", "'USE MAE'", ")", "\n", "self", ".", "criterion", "=", "torchmetrics", ".", "MeanAbsoluteError", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'DEFAULT IS MSE'", ")", "\n", "self", ".", "criterion", "=", "torchmetrics", ".", "MeanSquaredError", "(", ")", "\n", "", "self", ".", "criterion_acc", "=", "torchmetrics", ".", "Accuracy", "(", ")", "\n", "\n", "pl", ".", "utilities", ".", "seed", ".", "seed_everything", "(", "_seed", ")", "\n", "\n", "# model components", "\n", "self", ".", "mse_weight", "=", "_mse_weight", "\n", "self", ".", "ce_weight", "=", "1", "-", "self", ".", "mse_weight", "\n", "\n", "self", ".", "resnet_embedding", "=", "ResNetEmbedding", "(", "self", ".", "node_input_dim", ",", "\n", "self", ".", "edge_input_dim", ",", "\n", "self", ".", "hidden_dim", ")", "\n", "self", ".", "graph_transformer_layer", "=", "nn", ".", "ModuleList", "(", "\n", "[", "GraphTransformerLayer", "(", "in_dim", "=", "self", ".", "hidden_dim", ",", "\n", "out_dim", "=", "self", ".", "hidden_dim", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "dropout", "=", "self", ".", "dp_rate", ",", "\n", "layer_norm", "=", "self", ".", "layer_norm", ",", "\n", "batch_norm", "=", "self", ".", "batch_norm", ",", "\n", "residual", "=", "self", ".", "residual", ",", "\n", "use_bias", "=", "True", "\n", ")", "for", "_", "in", "range", "(", "self", ".", "graph_n_layer", ")", "]", "\n", ")", "\n", "self", ".", "MLP_layer", "=", "MLPReadoutClassV2", "(", "input_dim", "=", "self", ".", "hidden_dim", ",", "output_dim", "=", "1", ",", "dp_rate", "=", "_readout_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.run_DPROQ_li_multitask_v2_gate.DPROQLi.forward": [[146, 163], ["run_DPROQ_li_multitask_v2_gate.DPROQLi.resnet_embedding", "run_DPROQ_li_multitask_v2_gate.DPROQLi.MLP_layer", "layer", "dgl.sum_nodes", "dgl.max_nodes", "dgl.mean_nodes", "dgl.mean_nodes"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "node_feature", ",", "edge_feature", ")", ":", "\n", "        ", "node_feature_embedded", ",", "edge_feature_embedded", "=", "self", ".", "resnet_embedding", "(", "node_feature", ",", "edge_feature", ")", "\n", "for", "layer", "in", "self", ".", "graph_transformer_layer", ":", "\n", "            ", "h", ",", "e", "=", "layer", "(", "g", ",", "node_feature_embedded", ",", "edge_feature_embedded", ")", "\n", "", "g", ".", "ndata", "[", "'h'", "]", "=", "h", "\n", "\n", "if", "self", ".", "readout", "==", "\"sum\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "sum_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"max\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "max_nodes", "(", "g", ",", "'h'", ")", "\n", "", "elif", "self", ".", "readout", "==", "\"mean\"", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "", "else", ":", "\n", "            ", "hg", "=", "dgl", ".", "mean_nodes", "(", "g", ",", "'h'", ")", "\n", "\n", "", "y_1", "=", "self", ".", "MLP_layer", "(", "hg", ")", "\n", "return", "y_1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData.__init__": [[276, 281], ["os.listdir", "utils.TestData._prepare", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData._prepare"], ["def", "__init__", "(", "self", ",", "dgl_folder", ":", "str", ")", ":", "\n", "        ", "self", ".", "data_list", "=", "os", ".", "listdir", "(", "dgl_folder", ")", "\n", "self", ".", "data_list", "=", "[", "os", ".", "path", ".", "join", "(", "dgl_folder", ",", "i", ")", "for", "i", "in", "self", ".", "data_list", "]", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "_prepare", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData.__len__": [[282, 284], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData.__getitem__": [[285, 287], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.TestData._prepare": [[288, 292], ["range", "len", "dgl.data.utils.load_graphs", "utils.TestData.data.append"], "methods", ["None"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "data_list", ")", ")", ":", "\n", "            ", "g", ",", "tmp", "=", "dgl", ".", "data", ".", "utils", ".", "load_graphs", "(", "self", ".", "data_list", "[", "i", "]", ")", "\n", "self", ".", "data", ".", "append", "(", "g", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.run_dssp": [[20, 46], ["Bio.PDB.PDBParser", "Bio.PDB.PDBParser.get_structure", "Bio.PDB.DSSP.DSSP", "list", "pandas.DataFrame", "[].split", "Bio.PDB.DSSP.DSSP.keys", "ss8_list.append", "rasa_list.append", "phi_list.append", "psi_list.append", "list", "zip", "pdb_file.split"], "function", ["None"], ["def", "run_dssp", "(", "pdb_file", ":", "str", ")", "->", "pd", ".", "DataFrame", ":", "\n", "    ", "\"\"\"Run biopython DSSP for SS8(3), RASA Angle(Phi, Phi)\"\"\"", "\n", "pdb_name", "=", "pdb_file", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "p", "=", "PDBParser", "(", ")", "\n", "\n", "structure", "=", "p", ".", "get_structure", "(", "pdb_name", ",", "pdb_file", ")", "\n", "model", "=", "structure", "[", "0", "]", "\n", "dssp", "=", "DSSP", "(", "model", ",", "pdb_file", ")", "\n", "key_list", "=", "list", "(", "dssp", ".", "keys", "(", ")", ")", "\n", "\n", "ss8_list", "=", "[", "]", "\n", "rasa_list", "=", "[", "]", "\n", "phi_list", "=", "[", "]", "\n", "psi_list", "=", "[", "]", "\n", "\n", "for", "key", "in", "key_list", ":", "\n", "        ", "ss8", ",", "rasa", ",", "phi", ",", "psi", "=", "dssp", "[", "key", "]", "[", "2", ":", "6", "]", "\n", "ss8_list", ".", "append", "(", "ss8", ")", "\n", "rasa_list", ".", "append", "(", "rasa", ")", "\n", "phi_list", ".", "append", "(", "phi", ")", "\n", "psi_list", ".", "append", "(", "psi", ")", "\n", "\n", "", "feature_df", "=", "pd", ".", "DataFrame", "(", "list", "(", "zip", "(", "ss8_list", ",", "rasa_list", ",", "phi_list", ",", "psi_list", ")", ")", ",", "\n", "columns", "=", "[", "'ss8'", ",", "'rasa'", ",", "'phi'", ",", "'psi'", "]", ")", "\n", "\n", "return", "feature_df", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.laplacian_positional_encoding": [[48, 69], ["g.adjacency_matrix", "torch.sparse_coo_tensor", "torch.sparse_coo_tensor.to_dense", "scipy.diags", "numpy.linalg.eig", "EigVal.argsort", "torch.from_numpy().float().reshape", "scipy.eye", "numpy.real", "s.to_dense.coalesce().indices", "s.to_dense.coalesce().values", "s.to_dense.coalesce().size", "dgl.backend.asnumpy().clip", "g.number_of_nodes", "torch.from_numpy().float", "s.to_dense.coalesce", "s.to_dense.coalesce", "s.to_dense.coalesce", "dgl.backend.asnumpy", "torch.from_numpy", "g.in_degrees"], "function", ["None"], ["", "def", "laplacian_positional_encoding", "(", "g", ":", "dgl", ".", "DGLGraph", ",", "pos_enc_dim", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n        Graph positional encoding v/ Laplacian eigenvectors\n        :return torch.Tensor (L, pos_enc_dim)\n    \"\"\"", "\n", "\n", "# Laplacian", "\n", "A", "=", "g", ".", "adjacency_matrix", "(", ")", "\n", "s", "=", "torch", ".", "sparse_coo_tensor", "(", "indices", "=", "A", ".", "coalesce", "(", ")", ".", "indices", "(", ")", ",", "\n", "values", "=", "A", ".", "coalesce", "(", ")", ".", "values", "(", ")", ",", "\n", "size", "=", "A", ".", "coalesce", "(", ")", ".", "size", "(", ")", ")", "\n", "A", "=", "s", ".", "to_dense", "(", ")", "\n", "N", "=", "sp", ".", "diags", "(", "dgl", ".", "backend", ".", "asnumpy", "(", "g", ".", "in_degrees", "(", ")", ")", ".", "clip", "(", "1", ")", "**", "-", "0.5", ",", "dtype", "=", "float", ")", "\n", "L", "=", "sp", ".", "eye", "(", "g", ".", "number_of_nodes", "(", ")", ")", "-", "N", "*", "A", "*", "N", "\n", "\n", "# Eigenvectors with numpy", "\n", "EigVal", ",", "EigVec", "=", "np", ".", "linalg", ".", "eig", "(", "L", ".", "A", ")", "\n", "idx", "=", "EigVal", ".", "argsort", "(", ")", "# increasing order", "\n", "EigVal", ",", "EigVec", "=", "EigVal", "[", "idx", "]", ",", "np", ".", "real", "(", "EigVec", "[", ":", ",", "idx", "]", ")", "\n", "laplacian_feature", "=", "torch", ".", "from_numpy", "(", "EigVec", "[", ":", ",", "1", ":", "pos_enc_dim", "+", "1", "]", ")", ".", "float", "(", ")", ".", "reshape", "(", "-", "1", ",", "pos_enc_dim", ")", "\n", "return", "laplacian_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.ss3_one_hot": [[71, 84], ["numpy.zeros", "df.ss8.to_list", "enumerate", "torch.from_numpy().reshape", "KeyError", "torch.from_numpy"], "function", ["None"], ["", "def", "ss3_one_hot", "(", "df", ":", "pd", ".", "DataFrame", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"treat ss8 to ss3 get one hot encoding, return size L * 3\"\"\"", "\n", "tokens_dict", "=", "{", "'H'", ":", "0", ",", "'B'", ":", "2", ",", "'E'", ":", "2", ",", "'G'", ":", "0", ",", "'I'", ":", "0", ",", "'T'", ":", "1", ",", "'S'", ":", "1", ",", "'-'", ":", "1", "}", "\n", "one_hot_array", "=", "np", ".", "zeros", "(", "[", "df", ".", "shape", "[", "0", "]", ",", "3", "]", ")", "\n", "ss8_list", "=", "df", ".", "ss8", ".", "to_list", "(", ")", "\n", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "ss8_list", ")", ":", "\n", "        ", "if", "item", "not", "in", "tokens_dict", ":", "\n", "            ", "raise", "KeyError", "(", "f'This {item} is not secondary structure type.'", ")", "\n", "", "col_idx", "=", "tokens_dict", "[", "item", "]", "\n", "one_hot_array", "[", "idx", ",", "col_idx", "]", "=", "1", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "one_hot_array", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.pdb2fasta": [[86, 114], ["os.path.isfile", "FileExistsError", "open", "file.readlines", "line[].strip", "seq.append"], "function", ["None"], ["", "def", "pdb2fasta", "(", "pdb_file", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"extract sequence from pdb file\"\"\"", "\n", "\n", "amino", "=", "{", "'ALA'", ":", "'A'", ",", "'ARG'", ":", "'R'", ",", "'ASN'", ":", "'N'", ",", "\n", "'ASP'", ":", "'D'", ",", "'CYS'", ":", "'C'", ",", "'GLU'", ":", "'E'", ",", "\n", "'GLN'", ":", "'Q'", ",", "'GLY'", ":", "'G'", ",", "'HIS'", ":", "'H'", ",", "\n", "'ILE'", ":", "'I'", ",", "'LEU'", ":", "'L'", ",", "'LYS'", ":", "'K'", ",", "\n", "'MET'", ":", "'M'", ",", "'PHE'", ":", "'F'", ",", "'PRO'", ":", "'P'", ",", "\n", "'SER'", ":", "'S'", ",", "'THR'", ":", "'T'", ",", "'TRP'", ":", "'W'", ",", "\n", "'TYR'", ":", "'Y'", ",", "'VAL'", ":", "'V'", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "pdb_file", ")", ":", "\n", "        ", "raise", "FileExistsError", "(", "f'PDB File does not exist {pdb_file}'", ")", "\n", "\n", "", "with", "open", "(", "pdb_file", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "content", "=", "file", ".", "readlines", "(", ")", "\n", "\n", "", "seq", "=", "[", "]", "\n", "prev_mark", "=", "-", "1", "\n", "\n", "for", "line", "in", "content", ":", "\n", "        ", "if", "line", "[", ":", "4", "]", "==", "'ATOM'", ":", "\n", "            ", "pos_mark", "=", "line", "[", "22", ":", "26", "]", ".", "strip", "(", ")", "\n", "if", "pos_mark", "!=", "prev_mark", ":", "\n", "                ", "seq", ".", "append", "(", "amino", "[", "line", "[", "17", ":", "20", "]", "]", ")", "\n", "", "prev_mark", "=", "pos_mark", "\n", "\n", "", "", "return", "\"\"", ".", "join", "(", "seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.read_fasta": [[116, 136], ["open", "f.readlines", "f.close", "len", "content[].strip", "content[].split", "target_id.strip().strip.strip().strip", "int", "content[].strip", "int.strip", "target_id.strip().strip.strip"], "function", ["None"], ["", "def", "read_fasta", "(", "fasta_file", ":", "str", ")", "->", "tuple", "[", "str", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    Read fasta file, return sequence id, length and content\n    Support Fasta format example:\n    >Target_id|length\n    CCCCCCCCCCCCCCCCC\n    \"\"\"", "\n", "with", "open", "(", "fasta_file", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "", "seq", "=", "''", "\n", "if", "len", "(", "content", ")", "==", "1", ":", "\n", "        ", "seq", "+=", "content", "[", "0", "]", ".", "strip", "(", ")", "\n", "return", "seq", "\n", "", "else", ":", "\n", "        ", "target_id", ",", "length", "=", "content", "[", "0", "]", ".", "split", "(", "'|'", ")", "\n", "target_id", "=", "target_id", ".", "strip", "(", ")", ".", "strip", "(", "'>'", ")", "\n", "length", "=", "int", "(", "length", ".", "strip", "(", ")", ")", "\n", "seq", "+=", "content", "[", "1", "]", ".", "strip", "(", ")", "\n", "", "return", "target_id", ",", "length", ",", "seq", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.sequence_one_hot": [[138, 158], ["len", "numpy.zeros", "enumerate", "torch.from_numpy().reshape", "seq.upper", "tokens_dict_regular_order.keys", "torch.from_numpy"], "function", ["None"], ["", "def", "sequence_one_hot", "(", "fasta_file", ":", "str", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Sequence one hot encoding, return size L * 21\"\"\"", "\n", "tokens_dict_regular_order", "=", "{", "'A'", ":", "0", ",", "'C'", ":", "1", ",", "'D'", ":", "2", ",", "'E'", ":", "3", ",", "'F'", ":", "4", ",", "\n", "'G'", ":", "5", ",", "'H'", ":", "6", ",", "'I'", ":", "7", ",", "'K'", ":", "8", ",", "'L'", ":", "9", ",", "\n", "'M'", ":", "10", ",", "'N'", ":", "11", ",", "'P'", ":", "12", ",", "'Q'", ":", "13", ",", "\n", "'R'", ":", "14", ",", "'S'", ":", "15", ",", "'T'", ":", "16", ",", "'V'", ":", "17", ",", "\n", "'W'", ":", "18", ",", "'Y'", ":", "19", ",", "'X'", ":", "20", "}", "\n", "\n", "seq", "=", "fasta_file", "\n", "length", "=", "len", "(", "seq", ")", "\n", "\n", "one_hot_array", "=", "np", ".", "zeros", "(", "[", "length", ",", "21", "]", ")", "\n", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "seq", ".", "upper", "(", ")", ")", ":", "\n", "        ", "if", "item", "not", "in", "tokens_dict_regular_order", ".", "keys", "(", ")", ":", "\n", "            ", "item", "=", "'X'", "\n", "", "col_idx", "=", "tokens_dict_regular_order", "[", "item", "]", "\n", "one_hot_array", "[", "idx", ",", "col_idx", "]", "=", "1", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "one_hot_array", ")", ".", "reshape", "(", "-", "1", ",", "21", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.edge_sin_pos": [[160, 163], ["torch.sin().reshape", "torch.sin", "g.edges", "g.edges"], "function", ["None"], ["", "def", "edge_sin_pos", "(", "g", ":", "dgl", ".", "DGLGraph", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"Edge wise encoding\"\"\"", "\n", "return", "torch", ".", "sin", "(", "(", "g", ".", "edges", "(", ")", "[", "0", "]", "-", "g", ".", "edges", "(", ")", "[", "1", "]", ")", ".", "float", "(", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.update_node_feature": [[165, 172], ["torch.cat"], "function", ["None"], ["", "def", "update_node_feature", "(", "graph", ":", "dgl", ".", "DGLGraph", ",", "new_node_features", ":", "List", ")", "->", "None", ":", "\n", "    ", "\"\"\"Node feature update helper\"\"\"", "\n", "for", "node_feature", "in", "new_node_features", ":", "\n", "        ", "if", "not", "graph", ".", "ndata", ":", "\n", "            ", "graph", ".", "ndata", "[", "'f'", "]", "=", "node_feature", "\n", "", "else", ":", "\n", "            ", "graph", ".", "ndata", "[", "'f'", "]", "=", "torch", ".", "cat", "(", "(", "graph", ".", "ndata", "[", "'f'", "]", ",", "node_feature", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.update_edge_feature": [[174, 182], ["torch.cat"], "function", ["None"], ["", "", "", "def", "update_edge_feature", "(", "graph", ":", "dgl", ".", "DGLGraph", ",", "new_edge_features", ":", "List", ")", "->", "None", ":", "\n", "    ", "\"\"\"Edge feature update helper\"\"\"", "\n", "for", "edge_feature", "in", "new_edge_features", ":", "\n", "        ", "if", "not", "graph", ".", "edata", ":", "\n", "            ", "graph", ".", "edata", "[", "'f'", "]", "=", "edge_feature", "\n", "", "else", ":", "\n", "            ", "graph", ".", "edata", "[", "'f'", "]", "=", "torch", ".", "cat", "(", "(", "graph", ".", "edata", "[", "'f'", "]", ",", "edge_feature", ")", ",", "dim", "=", "1", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.remove_n": [[184, 186], ["i.strip"], "function", ["None"], ["", "def", "remove_n", "(", "lst", ":", "List", ",", "pattern", "=", "'\\n'", ")", "->", "List", ":", "\n", "    ", "return", "[", "i", ".", "strip", "(", "pattern", ")", "for", "i", "in", "lst", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.txt_to_list": [[188, 194], ["utils.remove_n", "open", "f.readlines"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.remove_n"], ["", "def", "txt_to_list", "(", "txt_file", ":", "str", ",", "pattern", "=", "'\\n'", ")", "->", "List", ":", "\n", "    ", "\"\"\"read txt file to list\"\"\"", "\n", "with", "open", "(", "txt_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "tmp_list", "=", "f", ".", "readlines", "(", ")", "\n", "", "tmp_list", "=", "remove_n", "(", "tmp_list", ",", "pattern", "=", "pattern", ")", "\n", "return", "tmp_list", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.list_to_txt": [[196, 202], ["open", "f.writelines"], "function", ["None"], ["", "def", "list_to_txt", "(", "lst", ":", "List", ",", "txt_file", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"read out list to txt file\"\"\"", "\n", "with", "open", "(", "txt_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "i", "in", "lst", ":", "\n", "            ", "f", ".", "writelines", "(", "i", "+", "'\\n'", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.pdb2graph_new_chain_info": [[204, 235], ["copy.deepcopy", "torch.tensor", "dgl.knn_graph", "utils..remove_self_loop", "list", "atom_df_ca.loc[].tolist", "dict", "utils..edges", "utils..edges", "zip", "zip", "u.item.item", "v.item.item", "torch.tensor().reshape", "biopandas.pdb.PandasPdb().read_pdb", "uniform_chain_feature.append", "uniform_chain_feature.append", "abs", "torch.tensor", "biopandas.pdb.PandasPdb", "range", "len"], "function", ["None"], ["", "def", "pdb2graph_new_chain_info", "(", "pdb_file", ":", "str", ",", "knn", "=", "10", ")", "->", "tuple", "[", "pd", ".", "DataFrame", ",", "dgl", ".", "DGLGraph", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"\n    Build KNN graph for a protein, return graph and src vertex\n    and end dst vertex for graph, without self-loop, PEEE chain ID\n    \"\"\"", "\n", "atom_df", "=", "PandasPdb", "(", ")", ".", "read_pdb", "(", "pdb_file", ")", ".", "df", "[", "'ATOM'", "]", "\n", "atom_df_full", "=", "deepcopy", "(", "atom_df", ")", "# return all atom df for distance calculation", "\n", "atom_df", "=", "atom_df", "[", "atom_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'CA'", "]", "\n", "node_coords", "=", "torch", ".", "tensor", "(", "atom_df", "[", "[", "'x_coord'", ",", "'y_coord'", ",", "'z_coord'", "]", "]", ".", "values", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "protein_graph", "=", "dgl", ".", "knn_graph", "(", "node_coords", ",", "knn", ")", "\n", "protein_graph", "=", "protein_graph", ".", "remove_self_loop", "(", ")", "# remove self loop", "\n", "srcs", "=", "protein_graph", ".", "edges", "(", ")", "[", "0", "]", "\n", "dsts", "=", "protein_graph", ".", "edges", "(", ")", "[", "1", "]", "\n", "\n", "edges", "=", "list", "(", "zip", "(", "srcs", ",", "dsts", ")", ")", "\n", "\n", "# CA-CA distance", "\n", "atom_df_ca", "=", "atom_df", "[", "atom_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'CA'", "]", "\n", "chain_id_list", "=", "atom_df_ca", ".", "loc", "[", ":", ",", "'chain_id'", "]", ".", "tolist", "(", ")", "\n", "chain_id_dict", "=", "dict", "(", "zip", "(", "[", "i", "for", "i", "in", "range", "(", "len", "(", "chain_id_list", ")", ")", "]", ",", "chain_id_list", ")", ")", "# {idx: chain_id}", "\n", "\n", "uniform_chain_feature", "=", "[", "]", "\n", "for", "i", "in", "edges", ":", "\n", "        ", "u", ",", "v", "=", "i", "\n", "u", "=", "u", ".", "item", "(", ")", "\n", "v", "=", "v", ".", "item", "(", ")", "\n", "if", "(", "chain_id_dict", "[", "u", "]", "==", "chain_id_list", "[", "v", "]", ")", "and", "(", "abs", "(", "u", "-", "v", ")", "==", "1", ")", ":", "\n", "            ", "uniform_chain_feature", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "uniform_chain_feature", ".", "append", "(", "0", ")", "\n", "", "", "return", "atom_df_full", ",", "protein_graph", ",", "edges", ",", "torch", ".", "tensor", "(", "uniform_chain_feature", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.distance_helper": [[237, 272], ["biopandas.pdb.PandasPdb().read_pdb", "numpy.round", "filtered_df.loc[].values.tolist", "sklearn.metrics.pairwise.euclidean_distances", "filtered_df[].loc[].values.tolist", "filtered_df[].loc[].values.tolist", "sklearn.metrics.pairwise.euclidean_distances", "numpy.save", "biopandas.pdb.PandasPdb", "ValueError", "os.path.join"], "function", ["None"], ["", "def", "distance_helper", "(", "pdb_file", ":", "str", ",", "pdb_name", ":", "str", ",", "\n", "output_folder", ":", "str", ",", "atom_type", "=", "'CB'", ",", "\n", "save_flag", "=", "True", ")", "->", "Union", "[", "tuple", ",", "np", ".", "ndarray", "]", ":", "\n", "    ", "\"\"\"Calculate CA-CA, or CB-CB or N-O distance for a pdb file\"\"\"", "\n", "ppdb", "=", "PandasPdb", "(", ")", ".", "read_pdb", "(", "pdb_file", ")", "\n", "test_df", "=", "ppdb", ".", "df", "[", "'ATOM'", "]", "\n", "\n", "if", "atom_type", "==", "'CB'", ":", "\n", "# GLY does not have CB, use CA to instead of.", "\n", "        ", "filtered_df", "=", "test_df", "[", "(", "(", "test_df", ".", "loc", "[", ":", ",", "'residue_name'", "]", "==", "'GLY'", ")", "&", "(", "test_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'CA'", ")", ")", "|", "(", "test_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'CB'", ")", "]", "\n", "", "elif", "atom_type", "==", "'CA'", ":", "\n", "        ", "filtered_df", "=", "test_df", "[", "test_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'CA'", "]", "\n", "", "elif", "atom_type", "==", "'NO'", ":", "\n", "        ", "filtered_df", "=", "test_df", "[", "(", "test_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'N'", ")", "|", "(", "test_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'O'", ")", "]", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Atom type should be CA, CB or NO.'", ")", "\n", "\n", "", "if", "atom_type", "!=", "'NO'", ":", "\n", "        ", "coord", "=", "filtered_df", ".", "loc", "[", ":", ",", "[", "'x_coord'", ",", "'y_coord'", ",", "'z_coord'", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "real_dist", "=", "euclidean_distances", "(", "coord", ")", "\n", "", "else", ":", "\n", "        ", "coord_N", "=", "filtered_df", "[", "filtered_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'N'", "]", ".", "loc", "[", ":", ",", "\n", "[", "'x_coord'", ",", "'y_coord'", ",", "'z_coord'", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "coord_O", "=", "filtered_df", "[", "filtered_df", ".", "loc", "[", ":", ",", "'atom_name'", "]", "==", "'O'", "]", ".", "loc", "[", ":", ",", "\n", "[", "'x_coord'", ",", "'y_coord'", ",", "'z_coord'", "]", "]", ".", "values", ".", "tolist", "(", ")", "\n", "real_dist", "=", "euclidean_distances", "(", "coord_N", ",", "coord_O", ")", "# up-triangle N-O, low-triangle O-N", "\n", "\n", "", "real_dist", "=", "np", ".", "round", "(", "real_dist", ",", "3", ")", "\n", "\n", "if", "save_flag", ":", "\n", "        ", "np", ".", "save", "(", "file", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "pdb_name", "+", "f'_{atom_type}.npy'", ")", ",", "arr", "=", "real_dist", ")", "\n", "return", "real_dist", ".", "shape", "\n", "", "else", ":", "\n", "        ", "return", "real_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.src.utils.collate": [[294, 298], ["dgl.batch"], "function", ["None"], ["", "", "", "def", "collate", "(", "samples", ")", "->", "dgl", ".", "DGLGraph", ":", "\n", "    ", "\"\"\"Customer collate function\"\"\"", "\n", "batched_graph", "=", "dgl", ".", "batch", "(", "samples", ")", "\n", "return", "batched_graph", "\n", "", ""]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_reres.check_input": [[42, 105], ["len", "sys.stdin.isatty", "int", "sys.stderr.write", "sys.exit", "len", "args[].startswith", "sys.stderr.write", "sys.exit", "sys.stdin.isatty", "open", "len", "open", "sys.stderr.write", "sys.exit", "emsg.format", "sys.stderr.write", "sys.stderr.write", "sys.exit", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "args[].startswith", "sys.stderr.write", "sys.stderr.write", "sys.exit", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "emsg.format", "emsg.format", "emsg.format"], "function", ["None"], ["def", "check_input", "(", "args", ")", ":", "\n", "    ", "\"\"\"Checks whether to read from stdin/file and validates user input/options.\n    \"\"\"", "\n", "\n", "# Defaults", "\n", "option", "=", "1", "\n", "fh", "=", "sys", ".", "stdin", "# file handle", "\n", "\n", "if", "not", "len", "(", "args", ")", ":", "\n", "# Reading from pipe with default option", "\n", "        ", "if", "sys", ".", "stdin", ".", "isatty", "(", ")", ":", "\n", "            ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "# One of two options: option & Pipe OR file & default option", "\n", "        ", "if", "args", "[", "0", "]", ".", "startswith", "(", "'-'", ")", ":", "\n", "            ", "option", "=", "args", "[", "0", "]", "[", "1", ":", "]", "\n", "if", "sys", ".", "stdin", ".", "isatty", "(", ")", ":", "# ensure the PDB data is streamed in", "\n", "                ", "emsg", "=", "'ERROR!! No data to process!\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "0", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "fh", "=", "open", "(", "args", "[", "0", "]", ",", "'r'", ")", "\n", "\n", "", "", "elif", "len", "(", "args", ")", "==", "2", ":", "\n", "# Two options: option & File", "\n", "        ", "if", "not", "args", "[", "0", "]", ".", "startswith", "(", "'-'", ")", ":", "\n", "            ", "emsg", "=", "'ERROR! First argument is not an option: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "0", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", "[", "1", "]", ")", ":", "\n", "            ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "1", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "option", "=", "args", "[", "0", "]", "[", "1", ":", "]", "\n", "fh", "=", "open", "(", "args", "[", "1", "]", ",", "'r'", ")", "\n", "\n", "", "else", ":", "# Whatever ...", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# Validate option", "\n", "", "try", ":", "\n", "        ", "option", "=", "int", "(", "option", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "emsg", "=", "'ERROR!! You provided an invalid residue number: \\'{}\\''", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "option", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "return", "(", "fh", ",", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_reres.pad_line": [[107, 114], ["len", "line.strip"], "function", ["None"], ["", "def", "pad_line", "(", "line", ")", ":", "\n", "    ", "\"\"\"Helper function to pad line to 80 characters in case it is shorter\"\"\"", "\n", "size_of_line", "=", "len", "(", "line", ")", "\n", "if", "size_of_line", "<", "80", ":", "\n", "        ", "padding", "=", "80", "-", "size_of_line", "+", "1", "\n", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "+", "' '", "*", "padding", "+", "'\\n'", "\n", "", "return", "line", "[", ":", "81", "]", "# 80 + newline character", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_reres.run": [[116, 159], ["_pad_line", "_pad_line.startswith", "_pad_line.startswith", "sys.stderr.write", "sys.exit", "str().rjust", "str"], "function", ["None"], ["", "def", "run", "(", "fhandle", ",", "starting_resid", ")", ":", "\n", "    ", "\"\"\"\n    Reset the residue number column to start from a specific number.\n\n    This function is a generator.\n\n    Parameters\n    ----------\n    fhandle : a line-by-line iterator of the original PDB file.\n\n    starting_resid : int\n        The starting residue number.\n\n    Yields\n    ------\n    str (line-by-line)\n        The modified (or not) PDB line.\n    \"\"\"", "\n", "_pad_line", "=", "pad_line", "\n", "prev_resid", "=", "None", "# tracks chain and resid", "\n", "resid", "=", "starting_resid", "-", "1", "# account for first residue", "\n", "records", "=", "(", "'ATOM'", ",", "'HETATM'", ",", "'TER'", ",", "'ANISOU'", ")", "\n", "for", "line", "in", "fhandle", ":", "\n", "        ", "line", "=", "_pad_line", "(", "line", ")", "\n", "if", "line", ".", "startswith", "(", "'MODEL'", ")", ":", "\n", "            ", "resid", "=", "starting_resid", "-", "1", "# account for first residue", "\n", "prev_resid", "=", "None", "# tracks chain and resid", "\n", "yield", "line", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "records", ")", ":", "\n", "            ", "line_resuid", "=", "line", "[", "17", ":", "27", "]", "\n", "if", "line_resuid", "!=", "prev_resid", ":", "\n", "                ", "prev_resid", "=", "line_resuid", "\n", "resid", "+=", "1", "\n", "if", "resid", ">", "9999", ":", "\n", "                    ", "emsg", "=", "'Cannot set residue number above 9999.\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "yield", "line", "[", ":", "22", "]", "+", "str", "(", "resid", ")", ".", "rjust", "(", "4", ")", "+", "line", "[", "26", ":", "]", "\n", "\n", "", "else", ":", "\n", "            ", "yield", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_reres.main": [[164, 193], ["pdb_reres.check_input", "pdb_reres.run", "pdbfh.close", "sys.exit", "enumerate", "sys.stdout.write", "sys.stdout.flush", "_buffer.append", "sys.stdout.write"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.check_input", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.run"], ["def", "main", "(", ")", ":", "\n", "# Check Input", "\n", "    ", "pdbfh", ",", "starting_resid", "=", "check_input", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n", "# Do the job", "\n", "new_pdb", "=", "run", "(", "pdbfh", ",", "starting_resid", ")", "\n", "\n", "# Output results", "\n", "try", ":", "\n", "        ", "_buffer", "=", "[", "]", "\n", "_buffer_size", "=", "5000", "# write N lines at a time", "\n", "for", "lineno", ",", "line", "in", "enumerate", "(", "new_pdb", ")", ":", "\n", "            ", "if", "not", "(", "lineno", "%", "_buffer_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "_buffer", "=", "[", "]", "\n", "", "_buffer", ".", "append", "(", "line", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "except", "IOError", ":", "\n", "# This is here to catch Broken Pipes", "\n", "# for example to use 'head' or 'tail' without", "\n", "# the error message showing up", "\n", "        ", "pass", "\n", "\n", "# last line of the script", "\n", "# Close file handle even if it is sys.stdin, no problem here.", "\n", "", "pdbfh", ".", "close", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_merge.check_input": [[44, 67], ["len", "sys.stderr.write", "sys.exit", "open", "fl.append", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "emsg.format"], "function", ["None"], ["def", "check_input", "(", "args", ")", ":", "\n", "    ", "\"\"\"Checks whether to read from stdin/file and validates user input/options.\n    \"\"\"", "\n", "\n", "# Defaults", "\n", "fl", "=", "[", "]", "# file list", "\n", "\n", "if", "len", "(", "args", ")", ">=", "1", ":", "\n", "        ", "for", "fn", "in", "args", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "                ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "fn", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "fh", "=", "open", "(", "fn", ",", "'r'", ")", "\n", "fl", ".", "append", "(", "fh", ")", "\n", "\n", "", "", "else", ":", "# Whatever ...", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "return", "fl", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_merge.run": [[69, 88], ["fhandle.close"], "function", ["None"], ["", "def", "run", "(", "flist", ")", ":", "\n", "    ", "\"\"\"\n    Iterate over a list of files and yields each line sequentially.\n\n    Parameters\n    ----------\n    flist : list of file-like objects\n        Must handle `.close()` attribute.\n\n    Yields\n    ------\n    str (line-by-line)\n        Lines from the concatenated PDB files.\n    \"\"\"", "\n", "\n", "for", "fhandle", "in", "flist", ":", "\n", "        ", "for", "line", "in", "fhandle", ":", "\n", "            ", "yield", "line", "\n", "", "fhandle", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_merge.main": [[93, 118], ["pdb_merge.check_input", "pdb_merge.run", "sys.exit", "enumerate", "sys.stdout.write", "sys.stdout.flush", "_buffer.append", "sys.stdout.write"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.check_input", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.run"], ["def", "main", "(", ")", ":", "\n", "# Check Input", "\n", "    ", "pdbfh", "=", "check_input", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n", "# Do the job", "\n", "new_pdb", "=", "run", "(", "pdbfh", ")", "\n", "\n", "try", ":", "\n", "        ", "_buffer", "=", "[", "]", "\n", "_buffer_size", "=", "5000", "# write N lines at a time", "\n", "for", "lineno", ",", "line", "in", "enumerate", "(", "new_pdb", ")", ":", "\n", "            ", "if", "not", "(", "lineno", "%", "_buffer_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "_buffer", "=", "[", "]", "\n", "", "_buffer", ".", "append", "(", "line", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "except", "IOError", ":", "\n", "# This is here to catch Broken Pipes", "\n", "# for example to use 'head' or 'tail' without", "\n", "# the error message showing up", "\n", "        ", "pass", "\n", "\n", "", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_tidy.check_input": [[46, 101], ["len", "sys.stdin.isatty", "sys.stderr.write", "sys.exit", "len", "sys.stdin.isatty", "open", "len", "open", "sys.stderr.write", "sys.exit", "sys.stderr.write", "sys.stderr.write", "sys.exit", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "sys.stderr.write", "sys.stderr.write", "sys.exit", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "emsg.format", "emsg.format", "emsg.format"], "function", ["None"], ["def", "check_input", "(", "args", ")", ":", "\n", "    ", "\"\"\"Checks whether to read from stdin/file and validates user input/options.\n    \"\"\"", "\n", "\n", "# Defaults", "\n", "option", "=", "False", "\n", "fh", "=", "sys", ".", "stdin", "# file handle", "\n", "\n", "if", "not", "len", "(", "args", ")", ":", "\n", "# Reading from pipe with default option", "\n", "        ", "if", "sys", ".", "stdin", ".", "isatty", "(", ")", ":", "\n", "            ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "# One of two options: option & Pipe OR file & default option", "\n", "        ", "if", "args", "[", "0", "]", "==", "'-strict'", ":", "\n", "            ", "option", "=", "True", "\n", "if", "sys", ".", "stdin", ".", "isatty", "(", ")", ":", "# ensure the PDB data is streamed in", "\n", "                ", "emsg", "=", "'ERROR!! No data to process!\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "0", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "fh", "=", "open", "(", "args", "[", "0", "]", ",", "'r'", ")", "\n", "\n", "", "", "elif", "len", "(", "args", ")", "==", "2", ":", "\n", "# Two options: option & File", "\n", "        ", "if", "not", "args", "[", "0", "]", "==", "'-strict'", ":", "\n", "            ", "emsg", "=", "'ERROR! First argument is not a valid option: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "0", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", "[", "1", "]", ")", ":", "\n", "            ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "1", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "option", "=", "args", "[", "0", "]", "[", "1", ":", "]", "\n", "fh", "=", "open", "(", "args", "[", "1", "]", ",", "'r'", ")", "\n", "\n", "", "else", ":", "# Whatever ...", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "return", "(", "fh", ",", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_tidy.run": [[103, 239], ["fmt_TER.format", "line.strip.strip", "line.strip.startswith", "line.strip.startswith", "line.strip.startswith", "line.strip.strip", "line.strip.startswith", "line.strip.startswith", "int", "line.strip.startswith", "sys.stderr.write", "sys.stderr.write", "sys.exit", "str().rjust", "int", "line.strip.startswith", "pdb_tidy.run.make_TER"], "function", ["None"], ["", "def", "run", "(", "fhandle", ",", "strict", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Add TER/END statements and pads all lines to 80 characters.\n    This function is a generator.\n    Parameters\n    ----------\n    fhandle : a line-by-line iterator of the original PDB file.\n    strict : bool\n        If True, does not add TER statements at intra-chain breaks.\n    Yields\n    ------\n    str (line-by-line)\n        The modified (or not) PDB line.\n    \"\"\"", "\n", "not_strict", "=", "not", "strict", "\n", "\n", "def", "make_TER", "(", "prev_line", ")", ":", "\n", "        ", "\"\"\"Creates a TER statement based on the last ATOM/HETATM line.\n        \"\"\"", "\n", "\n", "# Add last TER statement", "\n", "serial", "=", "int", "(", "prev_line", "[", "6", ":", "11", "]", ")", "+", "1", "\n", "rname", "=", "prev_line", "[", "17", ":", "20", "]", "\n", "chain", "=", "prev_line", "[", "21", "]", "\n", "resid", "=", "prev_line", "[", "22", ":", "26", "]", "\n", "icode", "=", "prev_line", "[", "26", "]", "\n", "\n", "return", "fmt_TER", ".", "format", "(", "serial", ",", "rname", ",", "chain", ",", "resid", ",", "icode", ")", "\n", "\n", "# TER     606      LEU A  75", "\n", "", "fmt_TER", "=", "\"TER   {:>5d}      {:3s} {:1s}{:>4s}{:1s}\"", "+", "\" \"", "*", "53", "+", "\"\\n\"", "\n", "\n", "records", "=", "(", "'ATOM'", ",", "'HETATM'", ")", "\n", "ignored", "=", "(", "'TER'", ",", "'END'", ",", "'CONECT'", ",", "'MASTER'", ",", "'ENDMDL'", ")", "\n", "# Iterate up to the first ATOM/HETATM line", "\n", "prev_line", "=", "None", "\n", "num_models", "=", "1", "\n", "in_model", "=", "False", "\n", "for", "line", "in", "fhandle", ":", "\n", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "# We will pad/add \\n later to make uniform", "\n", "\n", "if", "line", ".", "startswith", "(", "'MODEL'", ")", ":", "\n", "            ", "line", "=", "\"MODEL \"", "+", "\"    \"", "+", "str", "(", "num_models", ")", ".", "rjust", "(", "4", ")", "\n", "num_models", "+=", "1", "\n", "in_model", "=", "True", "\n", "\n", "", "if", "line", ".", "startswith", "(", "ignored", ")", ":", "# to avoid matching END _and_ ENDMDL", "\n", "            ", "continue", "\n", "\n", "# Check line length", "\n", "", "line", "=", "\"{:<80}\\n\"", ".", "format", "(", "line", ")", "\n", "\n", "yield", "line", "\n", "\n", "if", "line", ".", "startswith", "(", "records", ")", ":", "\n", "            ", "prev_line", "=", "line", "\n", "break", "\n", "\n", "# Now go through all the remaining lines", "\n", "", "", "atom_section", "=", "False", "\n", "serial_offset", "=", "0", "# To offset after adding TER records", "\n", "for", "line", "in", "fhandle", ":", "\n", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "\n", "if", "line", ".", "startswith", "(", "ignored", ")", ":", "\n", "            ", "continue", "\n", "\n", "# Treat ATOM/HETATM differently", "\n", "#   - no TER in HETATM", "\n", "", "if", "line", ".", "startswith", "(", "'ATOM'", ")", ":", "\n", "\n", "            ", "is_gap", "=", "(", "int", "(", "line", "[", "22", ":", "26", "]", ")", "-", "int", "(", "prev_line", "[", "22", ":", "26", "]", ")", ")", ">", "1", "\n", "if", "atom_section", "and", "(", "line", "[", "21", "]", "!=", "prev_line", "[", "21", "]", "or", "(", "not_strict", "and", "is_gap", ")", ")", ":", "\n", "                ", "serial_offset", "+=", "1", "# account for TER statement", "\n", "yield", "make_TER", "(", "prev_line", ")", "\n", "\n", "", "serial", "=", "int", "(", "line", "[", "6", ":", "11", "]", ")", "+", "serial_offset", "\n", "line", "=", "line", "[", ":", "6", "]", "+", "str", "(", "serial", ")", ".", "rjust", "(", "5", ")", "+", "line", "[", "11", ":", "]", "\n", "prev_line", "=", "line", "\n", "atom_section", "=", "True", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "'HETATM'", ")", ":", "\n", "            ", "if", "atom_section", ":", "\n", "                ", "atom_section", "=", "False", "\n", "serial_offset", "+=", "1", "# account for TER statement", "\n", "yield", "make_TER", "(", "prev_line", ")", "\n", "\n", "", "serial", "=", "int", "(", "line", "[", "6", ":", "11", "]", ")", "+", "serial_offset", "\n", "line", "=", "line", "[", ":", "6", "]", "+", "str", "(", "serial", ")", ".", "rjust", "(", "5", ")", "+", "line", "[", "11", ":", "]", "\n", "prev_line", "=", "line", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "'ANISOU'", ")", ":", "\n", "# Fix serial based on previous atom", "\n", "# Avoids doing the offset again", "\n", "            ", "serial", "=", "int", "(", "prev_line", "[", "6", ":", "11", "]", ")", "\n", "line", "=", "line", "[", ":", "6", "]", "+", "str", "(", "serial", ")", ".", "rjust", "(", "5", ")", "+", "line", "[", "11", ":", "]", "\n", "\n", "", "else", ":", "\n", "            ", "if", "atom_section", ":", "\n", "                ", "atom_section", "=", "False", "\n", "yield", "make_TER", "(", "prev_line", ")", "\n", "if", "in_model", ":", "\n", "                    ", "yield", "\"{:<80}\\n\"", ".", "format", "(", "\"ENDMDL\"", ")", "\n", "in_model", "=", "False", "\n", "\n", "", "", "if", "line", ".", "startswith", "(", "'MODEL'", ")", ":", "\n", "                ", "line", "=", "\"MODEL \"", "+", "\"    \"", "+", "str", "(", "num_models", ")", ".", "rjust", "(", "4", ")", "\n", "num_models", "+=", "1", "\n", "in_model", "=", "True", "\n", "serial_offset", "=", "0", "\n", "\n", "\n", "", "", "if", "serial", ">", "99999", ":", "\n", "            ", "emsg", "=", "'ERROR!! Structure contains more than 99.999 atoms.\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# Check line length", "\n", "", "line", "=", "\"{:<80}\\n\"", ".", "format", "(", "line", ")", "\n", "\n", "yield", "line", "\n", "\n", "", "else", ":", "\n", "        ", "if", "atom_section", ":", "\n", "# Add last TER statement", "\n", "            ", "atom_section", "=", "False", "\n", "yield", "make_TER", "(", "prev_line", ")", "\n", "if", "in_model", ":", "\n", "                ", "yield", "\"{:<80}\\n\"", ".", "format", "(", "\"ENDMDL\"", ")", "\n", "in_model", "=", "False", "\n", "\n", "# Add END statement", "\n", "", "", "", "yield", "\"{:<80}\\n\"", ".", "format", "(", "\"END\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_tidy.main": [[244, 272], ["pdb_tidy.check_input", "pdb_tidy.run", "pdbfh.close", "sys.exit", "enumerate", "sys.stdout.write", "sys.stdout.flush", "_buffer.append", "sys.stdout.write"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.check_input", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.run"], ["def", "main", "(", ")", ":", "\n", "# Check Input", "\n", "    ", "pdbfh", ",", "strict", "=", "check_input", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n", "# Do the job", "\n", "new_pdb", "=", "run", "(", "pdbfh", ",", "strict", ")", "\n", "\n", "try", ":", "\n", "        ", "_buffer", "=", "[", "]", "\n", "_buffer_size", "=", "5000", "# write N lines at a time", "\n", "for", "lineno", ",", "line", "in", "enumerate", "(", "new_pdb", ")", ":", "\n", "            ", "if", "not", "(", "lineno", "%", "_buffer_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "_buffer", "=", "[", "]", "\n", "", "_buffer", ".", "append", "(", "line", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "except", "IOError", ":", "\n", "# This is here to catch Broken Pipes", "\n", "# for example to use 'head' or 'tail' without", "\n", "# the error message showing up", "\n", "        ", "pass", "\n", "\n", "# last line of the script", "\n", "# We can close it even if it is sys.stdin", "\n", "", "pdbfh", ".", "close", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_reatom.check_input": [[42, 105], ["len", "sys.stdin.isatty", "int", "sys.stderr.write", "sys.exit", "len", "args[].startswith", "sys.stderr.write", "sys.exit", "sys.stdin.isatty", "open", "len", "open", "sys.stderr.write", "sys.exit", "emsg.format", "sys.stderr.write", "sys.stderr.write", "sys.exit", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "args[].startswith", "sys.stderr.write", "sys.stderr.write", "sys.exit", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "emsg.format", "emsg.format", "emsg.format"], "function", ["None"], ["def", "check_input", "(", "args", ")", ":", "\n", "    ", "\"\"\"Checks whether to read from stdin/file and validates user input/options.\n    \"\"\"", "\n", "\n", "# Defaults", "\n", "option", "=", "1", "\n", "fh", "=", "sys", ".", "stdin", "# file handle", "\n", "\n", "if", "not", "len", "(", "args", ")", ":", "\n", "# Reading from pipe with default option", "\n", "        ", "if", "sys", ".", "stdin", ".", "isatty", "(", ")", ":", "\n", "            ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "# One of two options: option & Pipe OR file & default option", "\n", "        ", "if", "args", "[", "0", "]", ".", "startswith", "(", "'-'", ")", ":", "\n", "            ", "option", "=", "args", "[", "0", "]", "[", "1", ":", "]", "\n", "if", "sys", ".", "stdin", ".", "isatty", "(", ")", ":", "# ensure the PDB data is streamed in", "\n", "                ", "emsg", "=", "'ERROR!! No data to process!\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "0", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "fh", "=", "open", "(", "args", "[", "0", "]", ",", "'r'", ")", "\n", "\n", "", "", "elif", "len", "(", "args", ")", "==", "2", ":", "\n", "# Two options: option & File", "\n", "        ", "if", "not", "args", "[", "0", "]", ".", "startswith", "(", "'-'", ")", ":", "\n", "            ", "emsg", "=", "'ERROR! First argument is not an option: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "0", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", "[", "1", "]", ")", ":", "\n", "            ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "1", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "option", "=", "args", "[", "0", "]", "[", "1", ":", "]", "\n", "fh", "=", "open", "(", "args", "[", "1", "]", ",", "'r'", ")", "\n", "\n", "", "else", ":", "# Whatever ...", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# Validate option", "\n", "", "try", ":", "\n", "        ", "option", "=", "int", "(", "option", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "emsg", "=", "'ERROR!! You provided an invalid atom serial number: \\'{}\\''", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "option", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "return", "(", "fh", ",", "option", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_reatom.run": [[107, 167], ["slice", "slice", "slice", "slice", "slice", "line.startswith", "line.startswith", "sys.stderr.write", "sys.exit", "line.startswith", "line[].strip", "fmt_CONECT.format", "line.startswith", "str().rjust", "line[].strip", "str", "line.startswith", "str().rjust", "serial_equiv.get", "str", "str", "str().rjust", "str"], "function", ["None"], ["", "def", "run", "(", "fhandle", ",", "starting_value", ")", ":", "\n", "    ", "\"\"\"\n    Reset the atom serial number column to start from a specific number.\n\n    This function is a generator.\n\n    Parameters\n    ----------\n    fhandle : a line-by-line iterator of the original PDB file.\n\n    Yields\n    ------\n    str (line-by-line)\n        The modified (or not) PDB line.\n    \"\"\"", "\n", "\n", "# CONECT 1179  746 1184 1195 1203", "\n", "fmt_CONECT", "=", "\"CONECT{:>5s}{:>5s}{:>5s}{:>5s}{:>5s}\"", "+", "\" \"", "*", "49", "+", "\"\\n\"", "\n", "char_ranges", "=", "(", "slice", "(", "6", ",", "11", ")", ",", "slice", "(", "11", ",", "16", ")", ",", "\n", "slice", "(", "16", ",", "21", ")", ",", "slice", "(", "21", ",", "26", ")", ",", "slice", "(", "26", ",", "31", ")", ")", "\n", "\n", "serial_equiv", "=", "{", "''", ":", "''", "}", "# store for conect statements", "\n", "\n", "serial", "=", "starting_value", "\n", "records", "=", "(", "'ATOM'", ",", "'HETATM'", ")", "\n", "for", "line", "in", "fhandle", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "records", ")", ":", "\n", "            ", "serial_equiv", "[", "line", "[", "6", ":", "11", "]", ".", "strip", "(", ")", "]", "=", "serial", "\n", "yield", "line", "[", ":", "6", "]", "+", "str", "(", "serial", ")", ".", "rjust", "(", "5", ")", "+", "line", "[", "11", ":", "]", "\n", "serial", "+=", "1", "\n", "if", "serial", ">", "99999", ":", "\n", "                ", "emsg", "=", "'Cannot set atom serial number above 99999.\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "elif", "line", ".", "startswith", "(", "'ANISOU'", ")", ":", "\n", "# Keep atom id as previous atom", "\n", "            ", "yield", "line", "[", ":", "6", "]", "+", "str", "(", "serial", "-", "1", ")", ".", "rjust", "(", "5", ")", "+", "line", "[", "11", ":", "]", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "'CONECT'", ")", ":", "\n", "# 6:11, 11:16, 16:21, 21:26, 26:31", "\n", "            ", "serials", "=", "[", "line", "[", "cr", "]", ".", "strip", "(", ")", "for", "cr", "in", "char_ranges", "]", "\n", "\n", "# If not found, return default", "\n", "new_serials", "=", "[", "str", "(", "serial_equiv", ".", "get", "(", "s", ",", "s", ")", ")", "for", "s", "in", "serials", "]", "\n", "conect_line", "=", "fmt_CONECT", ".", "format", "(", "*", "new_serials", ")", "\n", "\n", "yield", "conect_line", "\n", "continue", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "'MODEL'", ")", ":", "\n", "            ", "serial", "=", "starting_value", "\n", "yield", "line", "\n", "\n", "", "elif", "line", ".", "startswith", "(", "'TER'", ")", ":", "\n", "            ", "yield", "line", "[", ":", "6", "]", "+", "str", "(", "serial", ")", ".", "rjust", "(", "5", ")", "+", "line", "[", "11", ":", "]", "\n", "serial", "+=", "1", "\n", "\n", "", "else", ":", "\n", "            ", "yield", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_reatom.main": [[172, 201], ["pdb_reatom.check_input", "pdb_reatom.run", "pdbfh.close", "sys.exit", "enumerate", "sys.stdout.write", "sys.stdout.flush", "_buffer.append", "sys.stdout.write"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.check_input", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.run"], ["def", "main", "(", ")", ":", "\n", "# Check Input", "\n", "    ", "pdbfh", ",", "starting_resid", "=", "check_input", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n", "# Do the job", "\n", "new_pdb", "=", "run", "(", "pdbfh", ",", "starting_resid", ")", "\n", "\n", "# Output results", "\n", "try", ":", "\n", "        ", "_buffer", "=", "[", "]", "\n", "_buffer_size", "=", "5000", "# write N lines at a time", "\n", "for", "lineno", ",", "line", "in", "enumerate", "(", "new_pdb", ")", ":", "\n", "            ", "if", "not", "(", "lineno", "%", "_buffer_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "_buffer", "=", "[", "]", "\n", "", "_buffer", ".", "append", "(", "line", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "except", "IOError", ":", "\n", "# This is here to catch Broken Pipes", "\n", "# for example to use 'head' or 'tail' without", "\n", "# the error message showing up", "\n", "        ", "pass", "\n", "\n", "# last line of the script", "\n", "# Close file handle even if it is sys.stdin, no problem here.", "\n", "", "pdbfh", ".", "close", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.check_input": [[42, 112], ["set", "len", "sys.stdin.isatty", "sys.stderr.write", "sys.stderr.write", "sys.exit", "sys.stderr.write", "sys.exit", "len", "args[].startswith", "o.strip", "sys.stdin.isatty", "open", "len", "open", "sys.stderr.write", "sys.exit", "option.split", "o.strip().isalnum", "len", "sys.stderr.write", "sys.stderr.write", "sys.exit", "sys.stderr.write", "sys.stderr.write", "sys.exit", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "args[].startswith", "sys.stderr.write", "sys.stderr.write", "sys.exit", "os.path.isfile", "sys.stderr.write", "sys.stderr.write", "sys.exit", "emsg.format", "emsg.format", "emsg.format", "emsg.format", "o.strip"], "function", ["None"], ["def", "check_input", "(", "args", ")", ":", "\n", "    ", "\"\"\"Checks whether to read from stdin/file and validates user input/options.\n    \"\"\"", "\n", "\n", "# Defaults", "\n", "option", "=", "''", "\n", "fh", "=", "sys", ".", "stdin", "# file handle", "\n", "\n", "if", "not", "len", "(", "args", ")", ":", "\n", "# Reading from pipe with default option", "\n", "        ", "if", "sys", ".", "stdin", ".", "isatty", "(", ")", ":", "\n", "            ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "# One of two options: option & Pipe OR file & default option", "\n", "        ", "if", "args", "[", "0", "]", ".", "startswith", "(", "'-'", ")", ":", "\n", "            ", "option", "=", "args", "[", "0", "]", "[", "1", ":", "]", "\n", "if", "sys", ".", "stdin", ".", "isatty", "(", ")", ":", "# ensure the PDB data is streamed in", "\n", "                ", "emsg", "=", "'ERROR!! No data to process!\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", "[", "0", "]", ")", ":", "\n", "                ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "0", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "fh", "=", "open", "(", "args", "[", "0", "]", ",", "'r'", ")", "\n", "\n", "", "", "elif", "len", "(", "args", ")", "==", "2", ":", "\n", "# Two options: option & File", "\n", "        ", "if", "not", "args", "[", "0", "]", ".", "startswith", "(", "'-'", ")", ":", "\n", "            ", "emsg", "=", "'ERROR! First argument is not an option: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "0", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "args", "[", "1", "]", ")", ":", "\n", "            ", "emsg", "=", "'ERROR!! File not found or not readable: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "args", "[", "1", "]", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "option", "=", "args", "[", "0", "]", "[", "1", ":", "]", "\n", "fh", "=", "open", "(", "args", "[", "1", "]", ",", "'r'", ")", "\n", "\n", "", "else", ":", "# Whatever ...", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "# Validate option", "\n", "", "option_set", "=", "set", "(", "[", "o", ".", "strip", "(", ")", "for", "o", "in", "option", ".", "split", "(", "','", ")", "if", "o", ".", "strip", "(", ")", ".", "isalnum", "(", ")", "]", ")", "\n", "if", "not", "option_set", ":", "\n", "        ", "emsg", "=", "'ERROR!! You must provide at least one chain identifier\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "for", "chain_id", "in", "option_set", ":", "\n", "            ", "if", "len", "(", "chain_id", ")", ">", "1", ":", "\n", "                ", "emsg", "=", "'ERROR!! Chain identifier name is invalid: \\'{}\\'\\n'", "\n", "sys", ".", "stderr", ".", "write", "(", "emsg", ".", "format", "(", "chain_id", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "__doc__", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "", "return", "(", "fh", ",", "option_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.run": [[114, 139], ["line.startswith"], "function", ["None"], ["", "def", "run", "(", "fhandle", ",", "chain_set", ")", ":", "\n", "    ", "\"\"\"\n    Filter the PDB file for specific chain identifiers.\n\n    This function is a generator.\n\n    Parameters\n    ----------\n    fhandle : a line-by-line iterator of the original PDB file.\n\n    chain_set : set, or list, or tuple\n        The group of chains to kepp.\n        Example: ('A', 'B'), keeps only atoms from chains A and B.\n\n    Yields\n    ------\n    str (line-by-line)\n        The PDB lines for those matching the selected chains.\n    \"\"\"", "\n", "records", "=", "(", "'ATOM'", ",", "'HETATM'", ",", "'TER'", ",", "'ANISOU'", ")", "\n", "for", "line", "in", "fhandle", ":", "\n", "        ", "if", "line", ".", "startswith", "(", "records", ")", ":", "\n", "            ", "if", "line", "[", "21", "]", "not", "in", "chain_set", ":", "\n", "                ", "continue", "\n", "", "", "yield", "line", "\n", "\n"]], "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.main": [[144, 172], ["pdb_selchain.check_input", "pdb_selchain.run", "pdbfh.close", "sys.exit", "enumerate", "sys.stdout.write", "sys.stdout.flush", "_buffer.append", "sys.stdout.write"], "function", ["home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.check_input", "home.repos.pwc.inspect_result.BioinfoMachineLearning_DProQ.tool.pdb_selchain.run"], ["def", "main", "(", ")", ":", "\n", "# Check Input", "\n", "    ", "pdbfh", ",", "chain", "=", "check_input", "(", "sys", ".", "argv", "[", "1", ":", "]", ")", "\n", "\n", "# Do the job", "\n", "new_pdb", "=", "run", "(", "pdbfh", ",", "chain", ")", "\n", "\n", "try", ":", "\n", "        ", "_buffer", "=", "[", "]", "\n", "_buffer_size", "=", "5000", "# write N lines at a time", "\n", "for", "lineno", ",", "line", "in", "enumerate", "(", "new_pdb", ")", ":", "\n", "            ", "if", "not", "(", "lineno", "%", "_buffer_size", ")", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "_buffer", "=", "[", "]", "\n", "", "_buffer", ".", "append", "(", "line", ")", "\n", "\n", "", "sys", ".", "stdout", ".", "write", "(", "''", ".", "join", "(", "_buffer", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "except", "IOError", ":", "\n", "# This is here to catch Broken Pipes", "\n", "# for example to use 'head' or 'tail' without", "\n", "# the error message showing up", "\n", "        ", "pass", "\n", "\n", "# last line of the script", "\n", "# We can close it even if it is sys.stdin", "\n", "", "pdbfh", ".", "close", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]]}