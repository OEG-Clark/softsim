{"home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.DataGenerator.__init__": [[70, 89], ["numpy.random.seed", "sorted", "int", "numpy.random.shuffle", "os.path.split", "glob.glob", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_dir_input1", ",", "image_dir_input2", ",", "image_dir_output", ",", "\n", "image_ext", "=", "'.jpg'", ",", "target_shape", "=", "(", "64", ",", "64", ")", ",", "rescale", "=", "1.", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "numpy", ".", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "_imdir_in1", "=", "image_dir_input1", "\n", "self", ".", "_imdir_in2", "=", "image_dir_input2", "\n", "self", ".", "_imdir_out", "=", "image_dir_output", "\n", "self", ".", "_imext", "=", "image_ext", "\n", "self", ".", "_shape", "=", "target_shape", "\n", "self", ".", "_scale", "=", "rescale", "\n", "self", ".", "_batch", "=", "batch_size", "\n", "self", ".", "_shake", "=", "shuffle", "\n", "self", ".", "_files", "=", "sorted", "(", "[", "os", ".", "path", ".", "split", "(", "path", ")", "[", "-", "1", "]", "for", "path", "in", "glob", ".", "glob", "(", "'{}/*{}'", ".", "format", "(", "image_dir_input1", ",", "image_ext", ")", ")", "]", ")", "\n", "self", ".", "_steps", "=", "int", "(", "len", "(", "self", ".", "_files", ")", "/", "self", ".", "_batch", "+", "0.5", ")", "\n", "self", ".", "_index", "=", "0", "\n", "if", "shuffle", ":", "\n", "            ", "numpy", ".", "random", ".", "shuffle", "(", "self", ".", "_files", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.DataGenerator.flow": [[90, 123], ["numpy.random.shuffle", "os.path.join", "os.path.join", "os.path.join", "x1.append", "x2.append", "y1.append", "numpy.asarray", "numpy.asarray", "numpy.asarray", "len", "PIL.Image.open().convert().resize", "numpy.asarray", "numpy.atleast_3d", "PIL.Image.open().convert().resize", "numpy.asarray", "numpy.atleast_3d", "PIL.Image.open().convert().resize", "numpy.asarray", "numpy.atleast_3d", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize"], ["", "def", "flow", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "x1", "=", "[", "]", "\n", "x2", "=", "[", "]", "\n", "y1", "=", "[", "]", "\n", "endidx", "=", "self", ".", "_index", "+", "self", ".", "_batch", "\n", "subset", "=", "self", ".", "_files", "[", "self", ".", "_index", ":", "endidx", "]", "\n", "self", ".", "_index", "=", "endidx", "if", "endidx", "<", "len", "(", "self", ".", "_files", ")", "else", "0", "\n", "if", "self", ".", "_shake", ":", "\n", "                ", "numpy", ".", "random", ".", "shuffle", "(", "subset", ")", "\n", "", "for", "file", "in", "subset", ":", "\n", "                ", "file_input1", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_imdir_in1", ",", "file", ")", "\n", "file_input2", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_imdir_in2", ",", "file", ")", "\n", "file_output", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_imdir_out", ",", "file", ")", "\n", "try", ":", "\n", "                    ", "input1", "=", "Image", ".", "open", "(", "file_input1", ")", ".", "convert", "(", "'RGB'", ")", ".", "resize", "(", "self", ".", "_shape", ")", "\n", "input1", "=", "numpy", ".", "asarray", "(", "input1", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "input1", "=", "numpy", ".", "atleast_3d", "(", "input1", ")", "\n", "input2", "=", "Image", ".", "open", "(", "file_input2", ")", ".", "convert", "(", "'L'", ")", ".", "resize", "(", "self", ".", "_shape", ")", "\n", "input2", "=", "numpy", ".", "asarray", "(", "input2", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "input2", "=", "numpy", ".", "atleast_3d", "(", "input2", ")", "\n", "output", "=", "Image", ".", "open", "(", "file_output", ")", ".", "convert", "(", "'RGB'", ")", ".", "resize", "(", "self", ".", "_shape", ")", "\n", "output", "=", "numpy", ".", "asarray", "(", "output", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "output", "=", "numpy", ".", "atleast_3d", "(", "output", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "", "x1", ".", "append", "(", "input1", ")", "\n", "x2", ".", "append", "(", "input2", ")", "\n", "y1", ".", "append", "(", "output", ")", "\n", "", "x1", "=", "numpy", ".", "asarray", "(", "x1", ",", "dtype", "=", "numpy", ".", "float32", ")", "*", "self", ".", "_scale", "\n", "x2", "=", "numpy", ".", "asarray", "(", "x2", ",", "dtype", "=", "numpy", ".", "float32", ")", "*", "self", ".", "_scale", "\n", "y1", "=", "numpy", ".", "asarray", "(", "y1", ",", "dtype", "=", "numpy", ".", "float32", ")", "*", "self", ".", "_scale", "\n", "yield", "[", "[", "x1", ",", "x2", "]", ",", "y1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.Colornet.__new__": [[127, 186], ["keras.layers.Input", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.BatchNormalization", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.BatchNormalization", "keras.layers.Concatenate", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.MaxPooling2D", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.MaxPooling2D", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.layers.convolutional.Conv2D", "keras.layers.LeakyReLU", "keras.models.Model.load_weights"], "methods", ["None"], ["    ", "def", "__new__", "(", "self", ",", "input_shapes", ",", "optimizer", ",", "loss", ",", "weights", "=", "None", ")", ":", "\n", "# build network", "\n", "        ", "x1", "=", "Input", "(", "input_shapes", "[", "0", "]", ")", "\n", "x2", "=", "Input", "(", "input_shapes", "[", "1", "]", ")", "\n", "\n", "y1", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "x1", ")", "\n", "y1", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y1", ")", "\n", "y1", "=", "BatchNormalization", "(", ")", "(", "y1", ")", "\n", "\n", "y2", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "x2", ")", "\n", "y2", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y2", ")", "\n", "y2", "=", "BatchNormalization", "(", ")", "(", "y2", ")", "\n", "\n", "y", "=", "Concatenate", "(", ")", "(", "[", "y1", ",", "y2", "]", ")", "\n", "\n", "y", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "\n", "y", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "y", ")", "\n", "\n", "y", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "\n", "y", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ")", "(", "y", ")", "\n", "\n", "y", "=", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "256", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "\n", "y", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "128", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "\n", "y", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "\n", "y", "=", "Conv2D", "(", "filters", "=", "3", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ")", "(", "y", ")", "\n", "y", "=", "LeakyReLU", "(", "alpha", "=", "0.2", ")", "(", "y", ")", "\n", "\n", "# compile network", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "x1", ",", "x2", "]", ",", "outputs", "=", "y", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "loss", ")", "\n", "\n", "# optionally load existing weights into network", "\n", "try", ":", "\n", "            ", "if", "not", "weights", "is", "None", ":", "\n", "                ", "model", ".", "load_weights", "(", "weights", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.ProgressMonitor.__init__": [[190, 205], ["max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_dir_input1", ",", "image_dir_input2", ",", "image_dir_output", ",", "\n", "save_to_dir", ",", "image_ext", "=", "'.jpg'", ",", "rescale", "=", "1.", ",", "\n", "thumbnail_size", "=", "(", "64", ",", "64", ")", ",", "messenger", "=", "None", ",", "notify_every", "=", "1", ",", "\n", "network_id", "=", "'network'", ")", ":", "\n", "        ", "self", ".", "_imdir_in1", "=", "image_dir_input1", "\n", "self", ".", "_imdir_in2", "=", "image_dir_input2", "\n", "self", ".", "_imdir_out", "=", "image_dir_output", "\n", "self", ".", "_imdir_dmp", "=", "save_to_dir", "\n", "self", ".", "_img_ext", "=", "image_ext", "\n", "self", ".", "_rescale", "=", "rescale", "\n", "self", ".", "_tn_size", "=", "thumbnail_size", "\n", "self", ".", "_msg_app", "=", "messenger", "\n", "self", ".", "_msg_frq", "=", "max", "(", "1", ",", "notify_every", ")", "\n", "self", ".", "_network", "=", "network_id", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.ProgressMonitor.on_train_begin": [[206, 214], ["colornet.ProgressMonitor._msg_app.send_message"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_message"], ["", "def", "on_train_begin", "(", "self", ",", "logs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "self", ".", "_msg_app", "is", "None", ":", "\n", "                ", "self", ".", "_msg_app", ".", "send_message", "(", "'`A new {} training has been started.\\nI will post an update every {} epoch{}.`'", ".", "format", "(", "self", ".", "_network", ",", "self", ".", "_msg_frq", ",", "'s'", "if", "self", ".", "_msg_frq", ">", "1", "else", "''", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.ProgressMonitor.on_train_end": [[215, 223], ["colornet.ProgressMonitor._msg_app.send_message"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_message"], ["", "def", "on_train_end", "(", "self", ",", "logs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "self", ".", "_msg_app", "is", "None", ":", "\n", "                ", "self", ".", "_msg_app", ".", "send_message", "(", "'`An ongoing {} training is finished.`'", ".", "format", "(", "self", ".", "_network", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.ProgressMonitor.on_epoch_end": [[224, 261], ["sorted", "sorted", "sorted", "zip", "glob.glob", "glob.glob", "glob.glob", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert.resize", "numpy.atleast_3d", "numpy.expand_dims", "PIL.Image.open().convert.resize", "numpy.atleast_3d", "numpy.expand_dims", "colornet.ProgressMonitor.model.predict", "numpy.squeeze", "numpy.asarray", "PIL.Image.fromarray", "colornet.ProgressMonitor._postprocess_image", "colornet.ProgressMonitor._combine_images", "colornet.ProgressMonitor._save_image", "colornet.ProgressMonitor._msg_app.send_message", "colornet.ProgressMonitor._msg_app.send_photos", "numpy.asarray", "numpy.asarray", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "logs.get", "logs.get", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.ProgressMonitor._postprocess_image", "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor._combine_images", "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor._save_image", "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_message", "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_photos"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", ")", ":", "\n", "        ", "images_in1", "=", "sorted", "(", "glob", ".", "glob", "(", "self", ".", "_imdir_in1", "+", "'/*'", "+", "self", ".", "_img_ext", ")", ")", "\n", "images_in2", "=", "sorted", "(", "glob", ".", "glob", "(", "self", ".", "_imdir_in2", "+", "'/*'", "+", "self", ".", "_img_ext", ")", ")", "\n", "images_out", "=", "sorted", "(", "glob", ".", "glob", "(", "self", ".", "_imdir_out", "+", "'/*'", "+", "self", ".", "_img_ext", ")", ")", "\n", "for", "image_in1", ",", "image_in2", ",", "image_out", "in", "zip", "(", "images_in1", ",", "images_in2", ",", "images_out", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "img_in1", "=", "Image", ".", "open", "(", "image_in1", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img_in2", "=", "Image", ".", "open", "(", "image_in2", ")", ".", "convert", "(", "'L'", ")", "\n", "img_out", "=", "Image", ".", "open", "(", "image_out", ")", ".", "convert", "(", "'RGB'", ")", "\n", "x1", "=", "img_in1", ".", "resize", "(", "self", ".", "model", ".", "input_shape", "[", "0", "]", "[", "1", ":", "3", "]", ")", "\n", "x1", "=", "numpy", ".", "asarray", "(", "x1", ",", "dtype", "=", "numpy", ".", "float32", ")", "*", "self", ".", "_rescale", "\n", "x1", "=", "numpy", ".", "atleast_3d", "(", "x1", ")", "\n", "x1", "=", "numpy", ".", "expand_dims", "(", "x1", ",", "axis", "=", "0", ")", "\n", "x2", "=", "img_in2", ".", "resize", "(", "self", ".", "model", ".", "input_shape", "[", "1", "]", "[", "1", ":", "3", "]", ")", "\n", "x2", "=", "numpy", ".", "asarray", "(", "x2", ",", "dtype", "=", "numpy", ".", "float32", ")", "*", "self", ".", "_rescale", "\n", "x2", "=", "numpy", ".", "atleast_3d", "(", "x2", ")", "\n", "x2", "=", "numpy", ".", "expand_dims", "(", "x2", ",", "axis", "=", "0", ")", "\n", "y1", "=", "self", ".", "model", ".", "predict", "(", "[", "x1", ",", "x2", "]", ")", "\n", "y1", "=", "numpy", ".", "squeeze", "(", "y1", ")", "\n", "y1", "=", "numpy", ".", "asarray", "(", "y1", "/", "self", ".", "_rescale", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "img_gen", "=", "Image", ".", "fromarray", "(", "y1", ")", "\n", "img_gen", "=", "self", ".", "_postprocess_image", "(", "img_gen", ",", "img_in2", ")", "\n", "img_res", "=", "self", ".", "_combine_images", "(", "[", "img_in1", ",", "img_in2", ",", "img_out", ",", "img_gen", "]", ",", "self", ".", "_tn_size", ")", "\n", "dmp_res", "=", "self", ".", "_imdir_dmp", "+", "'/epoch_{}/{}.jpg'", ".", "format", "(", "epoch", "+", "1", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image_out", ")", ")", "[", "0", "]", ")", "\n", "self", ".", "_save_image", "(", "dmp_res", ",", "img_res", ")", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "_msg_frq", "==", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_msg_app", ".", "send_message", "(", "'`Epoch {}\\nloss: {:.4f} - val_loss: {:.4f}`'", ".", "format", "(", "epoch", "+", "1", ",", "logs", ".", "get", "(", "'loss'", ")", ",", "logs", ".", "get", "(", "'val_loss'", ")", ")", ")", "\n", "img_dir", "=", "self", ".", "_imdir_dmp", "+", "'/epoch_{}/'", ".", "format", "(", "epoch", "+", "1", ")", "\n", "caption", "=", "'`Epoch {}`'", ".", "format", "(", "epoch", "+", "1", ")", "\n", "self", ".", "_msg_app", ".", "send_photos", "(", "img_dir", ",", "caption", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.ProgressMonitor._postprocess_image": [[262, 267], ["PIL.Image.new", "mask.convert().resize", "PIL.Image.new.paste", "mask.convert"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize"], ["", "def", "_postprocess_image", "(", "self", ",", "image", ",", "mask", ")", ":", "\n", "        ", "image_pped", "=", "Image", ".", "new", "(", "image", ".", "mode", ",", "image", ".", "size", ")", "\n", "image_mask", "=", "mask", ".", "convert", "(", "'L'", ")", ".", "resize", "(", "image", ".", "size", ")", "\n", "image_pped", ".", "paste", "(", "image", ",", "(", "0", ",", "0", ")", ",", "image_mask", ")", "\n", "return", "image_pped", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.ProgressMonitor._combine_images": [[268, 285], ["len", "PIL.Image.new", "enumerate", "PIL.Image.new.paste", "PIL.Image.new", "PIL.Image.new.paste", "image.convert().resize", "len", "image.convert"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize"], ["", "def", "_combine_images", "(", "self", ",", "images", "=", "[", "]", ",", "size", "=", "(", "64", ",", "64", ")", ",", "\n", "border_colors", "=", "[", "]", ",", "border_width", "=", "0", ")", ":", "\n", "        ", "n", "=", "len", "(", "images", ")", "\n", "w", "=", "n", "*", "(", "size", "[", "0", "]", "+", "2", "*", "border_width", ")", "\n", "h", "=", "size", "[", "1", "]", "+", "2", "*", "border_width", "\n", "surf", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", ",", "h", ")", ")", "\n", "flag", "=", "True", "if", "len", "(", "border_colors", ")", "==", "n", "and", "border_width", ">", "0", "else", "False", "\n", "for", "index", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "x", "=", "index", "*", "w", "//", "n", "\n", "y", "=", "0", "\n", "if", "flag", ":", "\n", "                ", "back", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", "//", "n", ",", "h", ")", ",", "border_colors", "[", "index", "]", ")", "\n", "surf", ".", "paste", "(", "back", ",", "(", "x", ",", "y", ")", ")", "\n", "", "x", "+=", "border_width", "\n", "y", "+=", "border_width", "\n", "surf", ".", "paste", "(", "image", ".", "convert", "(", "'RGB'", ")", ".", "resize", "(", "size", ")", ",", "(", "x", ",", "y", ")", ")", "\n", "", "return", "surf", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.ProgressMonitor._save_image": [[286, 292], ["os.path.dirname", "image.save", "os.makedirs", "os.path.isdir"], "methods", ["None"], ["", "def", "_save_image", "(", "self", ",", "filepath", ",", "image", ")", ":", "\n", "        ", "directory", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", "and", "directory", "!=", "''", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "image", ".", "save", "(", "filepath", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.tensorflow_version": [[295, 297], ["int", "tensorflow.__version__.split"], "function", ["None"], ["", "", "def", "tensorflow_version", "(", ")", ":", "\n", "    ", "return", "int", "(", "tensorflow", ".", "__version__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.colornet.train": [[300, 405], ["numpy.random.seed", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.TelegramIM", "colornet.DataGenerator", "colornet.DataGenerator", "print", "colornet.Colornet", "print", "Colornet.summary", "keras.callbacks.CSVLogger", "keras.callbacks.ModelCheckpoint", "keras.callbacks.ModelCheckpoint", "colornet.ProgressMonitor", "Colornet.fit_generator", "colornet.tensorflow_version", "tensorflow.random.set_seed", "tensorflow.set_random_seed", "os.path.isdir", "print", "open", "file.write", "os.path.isdir", "print", "os.path.isdir", "os.makedirs", "Colornet.to_json", "os.path.join.format", "ARCHITECTURE.upper", "colornet.DataGenerator.flow", "colornet.DataGenerator.flow", "len", "print", "glob.glob", "os.path.join"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.tensorflow_version", "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.DataGenerator.flow", "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.DataGenerator.flow"], ["", "def", "train", "(", ")", ":", "\n", "# setup seed for random number generators for reproducibility", "\n", "    ", "numpy", ".", "random", ".", "seed", "(", "RANDOM_SEED", ")", "\n", "\n", "if", "tensorflow_version", "(", ")", "==", "2", ":", "\n", "        ", "tensorflow", ".", "random", ".", "set_seed", "(", "RANDOM_SEED", ")", "\n", "", "else", ":", "\n", "        ", "tensorflow", ".", "set_random_seed", "(", "RANDOM_SEED", ")", "\n", "\n", "# setup paths", "\n", "", "mdl_dir", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_DIR", ",", "'models'", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_DIR", ",", "'logs'", ")", "\n", "cpt_dir", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_DIR", ",", "'checkpoints'", ")", "\n", "pro_dir", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_DIR", ",", "'progress'", ")", "\n", "\n", "setup_flag", "=", "True", "\n", "for", "directory", "in", "[", "TRAIN_IMAGES_DIR", ",", "VALID_IMAGES_DIR", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "\n", "            ", "print", "(", "'[INFO] Data directory not found at {}'", ".", "format", "(", "directory", ")", ")", "\n", "setup_flag", "=", "False", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "TEST_IMAGES_DIR", ")", ":", "\n", "        ", "print", "(", "'[INFO] Data directory not found at {}'", ".", "format", "(", "directory", ")", ")", "\n", "", "for", "directory", "in", "[", "OUTPUT_DIR", ",", "mdl_dir", ",", "log_dir", ",", "cpt_dir", ",", "pro_dir", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "elif", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "'*.*'", ")", ")", ")", ">", "0", ":", "\n", "            ", "print", "(", "'[INFO] Output directory {} must be empty'", ".", "format", "(", "directory", ")", ")", "\n", "setup_flag", "=", "False", "\n", "", "", "if", "not", "setup_flag", ":", "\n", "        ", "return", "\n", "\n", "", "mdl_file", "=", "os", ".", "path", ".", "join", "(", "mdl_dir", ",", "'{}.json'", ".", "format", "(", "ARCHITECTURE", ")", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'{}_training.csv'", ".", "format", "(", "ARCHITECTURE", ")", ")", "\n", "cpt_file_best", "=", "os", ".", "path", ".", "join", "(", "cpt_dir", ",", "'{}_weights.h5'", ".", "format", "(", "ARCHITECTURE", ")", ")", "\n", "cpt_file_last", "=", "os", ".", "path", ".", "join", "(", "cpt_dir", ",", "'{}_weights_{{}}.h5'", ".", "format", "(", "ARCHITECTURE", ")", ")", "\n", "\n", "# initialize messenger", "\n", "messenger", "=", "TelegramIM", "(", "auth_token", "=", "AUTH_TOKEN", ",", "chat_id", "=", "CHAT_ID", ")", "\n", "\n", "# initialize train data generator", "\n", "train_datagen", "=", "DataGenerator", "(", "image_dir_input1", "=", "TRAIN_IMAGES_DIR", "+", "'/input_color/'", ",", "\n", "image_dir_input2", "=", "TRAIN_IMAGES_DIR", "+", "'/input_mask/'", ",", "\n", "image_dir_output", "=", "TRAIN_IMAGES_DIR", "+", "'/output_color/'", ",", "\n", "image_ext", "=", "IMAGE_FILE_EXT", ",", "\n", "target_shape", "=", "INPUT_IMAGE_SIZE", ",", "\n", "rescale", "=", "SCALE_COEFF_IMG", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "RANDOM_SEED", ")", "\n", "\n", "# initialize valid data generator", "\n", "valid_datagen", "=", "DataGenerator", "(", "image_dir_input1", "=", "VALID_IMAGES_DIR", "+", "'/input_color/'", ",", "\n", "image_dir_input2", "=", "VALID_IMAGES_DIR", "+", "'/input_mask/'", ",", "\n", "image_dir_output", "=", "VALID_IMAGES_DIR", "+", "'/output_color/'", ",", "\n", "image_ext", "=", "IMAGE_FILE_EXT", ",", "\n", "target_shape", "=", "INPUT_IMAGE_SIZE", ",", "\n", "rescale", "=", "SCALE_COEFF_IMG", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "RANDOM_SEED", ")", "\n", "\n", "# build and serialize network", "\n", "print", "(", "'[INFO] Building network... '", ",", "end", "=", "''", ")", "\n", "colornet", "=", "Colornet", "(", "input_shapes", "=", "[", "INPUT_IMAGE_SIZE", "+", "(", "3", ",", ")", ",", "INPUT_IMAGE_SIZE", "+", "(", "1", ",", ")", "]", ",", "\n", "optimizer", "=", "FUNCTION_OPTIM", ",", "\n", "loss", "=", "FUNCTION_LOSS", ",", "\n", "weights", "=", "None", ")", "\n", "print", "(", "'done'", ")", "\n", "colornet", ".", "summary", "(", ")", "\n", "\n", "with", "open", "(", "mdl_file", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "colornet", ".", "to_json", "(", ")", ")", "\n", "\n", "# create callbacks", "\n", "", "csv_logs", "=", "CSVLogger", "(", "filename", "=", "log_file", ",", "append", "=", "True", ")", "\n", "cpt_best", "=", "ModelCheckpoint", "(", "filepath", "=", "cpt_file_best", ",", "\n", "monitor", "=", "'val_loss'", ",", "\n", "verbose", "=", "1", ",", "\n", "save_best_only", "=", "True", ",", "\n", "save_weights_only", "=", "True", ")", "\n", "cpt_last", "=", "ModelCheckpoint", "(", "filepath", "=", "cpt_file_last", ".", "format", "(", "'{epoch:d}'", ")", ",", "\n", "monitor", "=", "'val_loss'", ",", "\n", "verbose", "=", "0", ",", "\n", "save_best_only", "=", "False", ",", "\n", "save_weights_only", "=", "True", ")", "\n", "progress", "=", "ProgressMonitor", "(", "image_dir_input1", "=", "TEST_IMAGES_DIR", "+", "'/input_color/'", ",", "\n", "image_dir_input2", "=", "TEST_IMAGES_DIR", "+", "'/input_mask/'", ",", "\n", "image_dir_output", "=", "TEST_IMAGES_DIR", "+", "'/output_color/'", ",", "\n", "save_to_dir", "=", "pro_dir", ",", "\n", "image_ext", "=", "IMAGE_FILE_EXT", ",", "\n", "rescale", "=", "SCALE_COEFF_IMG", ",", "\n", "thumbnail_size", "=", "(", "64", ",", "64", ")", ",", "\n", "messenger", "=", "messenger", ",", "\n", "notify_every", "=", "NOTIFY_EVERY", ",", "\n", "network_id", "=", "ARCHITECTURE", ".", "upper", "(", ")", ")", "\n", "\n", "# train network", "\n", "colornet", ".", "fit_generator", "(", "generator", "=", "train_datagen", ".", "flow", "(", ")", ",", "\n", "steps_per_epoch", "=", "train_datagen", ".", "_steps", ",", "\n", "epochs", "=", "NUM_EPOCHS", ",", "\n", "callbacks", "=", "[", "csv_logs", ",", "cpt_best", ",", "cpt_last", ",", "progress", "]", ",", "\n", "validation_data", "=", "valid_datagen", ".", "flow", "(", ")", ",", "\n", "validation_steps", "=", "valid_datagen", ".", "_steps", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.DataGenerator.__init__": [[77, 95], ["list", "int", "numpy.random.seed", "numpy.random.shuffle", "itertools.product", "list", "list", "os.listdir", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source_chars", ",", "target_chars", ",", "image_dir", ",", "image_ext", "=", "'.jpg'", ",", "\n", "mode", "=", "'RGB'", ",", "target_shape", "=", "(", "64", ",", "64", ")", ",", "rescale", "=", "1.0", ",", "batch_size", "=", "1", ",", "\n", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "_chars", "=", "source_chars", "\n", "self", ".", "_perms", "=", "list", "(", "itertools", ".", "product", "(", "list", "(", "source_chars", ")", ",", "\n", "list", "(", "target_chars", ")", ",", "\n", "os", ".", "listdir", "(", "image_dir", ")", ")", ")", "\n", "self", ".", "_imdir", "=", "image_dir", "\n", "self", ".", "_imext", "=", "image_ext", "\n", "self", ".", "_imtyp", "=", "mode", "\n", "self", ".", "_shape", "=", "target_shape", "\n", "self", ".", "_scale", "=", "rescale", "\n", "self", ".", "_batch", "=", "batch_size", "\n", "self", ".", "_steps", "=", "int", "(", "len", "(", "self", ".", "_perms", ")", "/", "self", ".", "_batch", "+", "0.5", ")", "\n", "self", ".", "_index", "=", "0", "\n", "numpy", ".", "random", ".", "seed", "(", "seed", ")", "\n", "numpy", ".", "random", ".", "shuffle", "(", "self", ".", "_perms", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.DataGenerator.flow": [[96, 130], ["numpy.random.shuffle", "numpy.asarray", "str", "str", "os.path.join", "os.path.join", "x.append", "y.append", "fannet.DataGenerator._chars.find", "numpy.asarray.append", "numpy.asarray", "numpy.asarray", "len", "ord", "ord", "PIL.Image.open().convert().resize", "numpy.asarray", "numpy.atleast_3d", "PIL.Image.open().convert().resize", "numpy.asarray", "numpy.atleast_3d", "len", "numpy.asarray().reshape", "PIL.Image.open().convert", "PIL.Image.open().convert", "numpy.asarray", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize"], ["", "def", "flow", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "onehot", "=", "[", "]", "\n", "endidx", "=", "self", ".", "_index", "+", "self", ".", "_batch", "\n", "subset", "=", "self", ".", "_perms", "[", "self", ".", "_index", ":", "endidx", "]", "\n", "numpy", ".", "random", ".", "shuffle", "(", "subset", ")", "\n", "self", ".", "_index", "=", "endidx", "if", "endidx", "<", "len", "(", "self", ".", "_perms", ")", "else", "0", "\n", "for", "perm", "in", "subset", ":", "\n", "                ", "ch_src", "=", "str", "(", "ord", "(", "perm", "[", "0", "]", ")", ")", "\n", "ch_dst", "=", "str", "(", "ord", "(", "perm", "[", "1", "]", ")", ")", "\n", "ch_fnt", "=", "perm", "[", "2", "]", "\n", "im_src", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_imdir", ",", "ch_fnt", ",", "ch_src", "+", "self", ".", "_imext", ")", "\n", "im_dst", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_imdir", ",", "ch_fnt", ",", "ch_dst", "+", "self", ".", "_imext", ")", "\n", "try", ":", "\n", "                    ", "img_x0", "=", "Image", ".", "open", "(", "im_src", ")", ".", "convert", "(", "self", ".", "_imtyp", ")", ".", "resize", "(", "self", ".", "_shape", ")", "\n", "img_x0", "=", "numpy", ".", "asarray", "(", "img_x0", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "img_x0", "=", "numpy", ".", "atleast_3d", "(", "img_x0", ")", "\n", "img_y0", "=", "Image", ".", "open", "(", "im_dst", ")", ".", "convert", "(", "self", ".", "_imtyp", ")", ".", "resize", "(", "self", ".", "_shape", ")", "\n", "img_y0", "=", "numpy", ".", "asarray", "(", "img_y0", ",", "dtype", "=", "numpy", ".", "uint8", ")", "\n", "img_y0", "=", "numpy", ".", "atleast_3d", "(", "img_y0", ")", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "", "x", ".", "append", "(", "img_x0", ")", "\n", "y", ".", "append", "(", "img_y0", ")", "\n", "idx", "=", "self", ".", "_chars", ".", "find", "(", "perm", "[", "1", "]", ")", "\n", "hot", "=", "[", "0", "]", "*", "len", "(", "self", ".", "_chars", ")", "\n", "hot", "[", "idx", "]", "=", "1", "\n", "onehot", ".", "append", "(", "numpy", ".", "asarray", "(", "hot", ",", "numpy", ".", "uint8", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "", "x", "=", "numpy", ".", "asarray", "(", "x", ",", "numpy", ".", "float32", ")", "*", "self", ".", "_scale", "\n", "y", "=", "numpy", ".", "asarray", "(", "y", ",", "numpy", ".", "float32", ")", "*", "self", ".", "_scale", "\n", "onehot", "=", "numpy", ".", "asarray", "(", "onehot", ",", "numpy", ".", "float32", ")", "\n", "yield", "[", "[", "x", ",", "onehot", "]", ",", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.FANnet.__new__": [[134, 172], ["keras.layers.Input", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.Conv2D", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Flatten", "keras.layers.Dense", "keras.layers.Concatenate", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.layers.convolutional.UpSampling2D", "keras.layers.convolutional.Conv2D", "keras.models.Model.load_weights"], "methods", ["None"], ["    ", "def", "__new__", "(", "self", ",", "input_shapes", ",", "optimizer", ",", "loss", ",", "weights", "=", "None", ")", ":", "\n", "# build network", "\n", "        ", "x1", "=", "Input", "(", "input_shapes", "[", "0", "]", ")", "\n", "x2", "=", "Input", "(", "input_shapes", "[", "1", "]", ")", "\n", "\n", "y1", "=", "Conv2D", "(", "filters", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "(", "x1", ")", "\n", "y1", "=", "Conv2D", "(", "filters", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "(", "y1", ")", "\n", "y1", "=", "Conv2D", "(", "filters", "=", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "(", "y1", ")", "\n", "y1", "=", "Flatten", "(", ")", "(", "y1", ")", "\n", "y1", "=", "Dense", "(", "units", "=", "512", ",", "activation", "=", "'relu'", ")", "(", "y1", ")", "\n", "\n", "y2", "=", "Flatten", "(", ")", "(", "x2", ")", "\n", "y2", "=", "Dense", "(", "units", "=", "512", ",", "activation", "=", "'relu'", ")", "(", "y2", ")", "\n", "\n", "y", "=", "Concatenate", "(", ")", "(", "[", "y1", ",", "y2", "]", ")", "\n", "y", "=", "Dense", "(", "units", "=", "1024", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "y", "=", "Dropout", "(", "0.5", ")", "(", "y", ")", "\n", "y", "=", "Dense", "(", "units", "=", "1024", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "y", "=", "Reshape", "(", "target_shape", "=", "(", "8", ",", "8", ",", "16", ")", ")", "(", "y", ")", "\n", "y", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "y", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "16", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "y", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ")", "(", "y", ")", "\n", "y", "=", "Conv2D", "(", "filters", "=", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "\n", "# compile network", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "x1", ",", "x2", "]", ",", "outputs", "=", "y", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "loss", ")", "\n", "\n", "# optionally load existing weights into network", "\n", "try", ":", "\n", "            ", "if", "not", "weights", "is", "None", ":", "\n", "                ", "model", ".", "load_weights", "(", "weights", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor.__init__": [[176, 190], ["max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "out_dir", ",", "charset", ",", "img_dir", ",", "img_ext", "=", "'.jpg'", ",", "mode", "=", "'RGB'", ",", "\n", "rescale", "=", "1.0", ",", "thumbnail_size", "=", "(", "64", ",", "64", ")", ",", "messenger", "=", "None", ",", "\n", "notify_every", "=", "1", ",", "network_id", "=", "'network'", ")", ":", "\n", "        ", "self", ".", "_out_dir", "=", "out_dir", "\n", "self", ".", "_charset", "=", "charset", "\n", "self", ".", "_img_dir", "=", "img_dir", "\n", "self", ".", "_img_ext", "=", "img_ext", "\n", "self", ".", "_img_typ", "=", "mode", "\n", "self", ".", "_rescale", "=", "rescale", "\n", "self", ".", "_tn_size", "=", "thumbnail_size", "\n", "self", ".", "_msg_app", "=", "messenger", "\n", "self", ".", "_msg_frq", "=", "max", "(", "1", ",", "notify_every", ")", "\n", "self", ".", "_network", "=", "network_id", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor.on_train_begin": [[191, 199], ["fannet.ProgressMonitor._msg_app.send_message"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_message"], ["", "def", "on_train_begin", "(", "self", ",", "logs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "self", ".", "_msg_app", "is", "None", ":", "\n", "                ", "self", ".", "_msg_app", ".", "send_message", "(", "'`A new {} training has been started.\\nI will post an update every {} epoch{}.`'", ".", "format", "(", "self", ".", "_network", ",", "self", ".", "_msg_frq", ",", "'s'", "if", "self", ".", "_msg_frq", ">", "1", "else", "''", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor.on_train_end": [[200, 208], ["fannet.ProgressMonitor._msg_app.send_message"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_message"], ["", "def", "on_train_end", "(", "self", ",", "logs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "not", "self", ".", "_msg_app", "is", "None", ":", "\n", "                ", "self", ".", "_msg_app", ".", "send_message", "(", "'`An ongoing {} training is finished.`'", ".", "format", "(", "self", ".", "_network", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor.on_epoch_end": [[209, 244], ["glob.glob", "PIL.Image.open().convert", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "Image.open().convert.crop.resize", "numpy.atleast_3d", "numpy.expand_dims", "fannet.ProgressMonitor._charset.find", "numpy.asarray().reshape", "fannet.ProgressMonitor.model.predict", "numpy.squeeze", "numpy.asarray", "PIL.Image.fromarray", "fannet.ProgressMonitor._combine_images", "fannet.ProgressMonitor._save_image", "fannet.ProgressMonitor._msg_app.send_message", "fannet.ProgressMonitor._msg_app.send_photos", "numpy.asarray", "[].split", "chr", "len", "PIL.Image.open", "int", "numpy.asarray", "logs.get", "logs.get", "os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor._combine_images", "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor._save_image", "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_message", "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_photos"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", ")", ":", "\n", "        ", "images", "=", "glob", ".", "glob", "(", "self", ".", "_img_dir", "+", "'/**/*'", "+", "self", ".", "_img_ext", ",", "recursive", "=", "True", ")", "\n", "for", "image", "in", "images", ":", "\n", "            ", "try", ":", "\n", "                ", "im_org", "=", "Image", ".", "open", "(", "image", ")", ".", "convert", "(", "self", ".", "_img_typ", ")", "\n", "im_src", "=", "im_org", ".", "crop", "(", "(", "0", ",", "0", ",", "im_org", ".", "width", "//", "2", ",", "im_org", ".", "height", ")", ")", "\n", "im_dst", "=", "im_org", ".", "crop", "(", "(", "im_org", ".", "width", "//", "2", ",", "0", ",", "im_org", ".", "width", ",", "im_org", ".", "height", ")", ")", "\n", "img_x0", "=", "im_src", ".", "resize", "(", "self", ".", "model", ".", "input_shape", "[", "0", "]", "[", "1", ":", "3", "]", ")", "\n", "img_x0", "=", "numpy", ".", "asarray", "(", "img_x0", ",", "numpy", ".", "float32", ")", "*", "self", ".", "_rescale", "\n", "img_x0", "=", "numpy", ".", "atleast_3d", "(", "img_x0", ")", "\n", "img_x0", "=", "numpy", ".", "expand_dims", "(", "img_x0", ",", "0", ")", "\n", "dst_ch", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image", ")", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "idx_ch", "=", "self", ".", "_charset", ".", "find", "(", "chr", "(", "int", "(", "dst_ch", ")", ")", ")", "\n", "onehot", "=", "[", "0", "]", "*", "len", "(", "self", ".", "_charset", ")", "\n", "onehot", "[", "idx_ch", "]", "=", "1", "\n", "onehot", "=", "numpy", ".", "asarray", "(", "onehot", ",", "numpy", ".", "uint8", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "img_y0", "=", "self", ".", "model", ".", "predict", "(", "[", "img_x0", ",", "onehot", "]", ")", "\n", "img_y0", "=", "numpy", ".", "squeeze", "(", "img_y0", ")", "\n", "img_y0", "=", "numpy", ".", "asarray", "(", "img_y0", "/", "self", ".", "_rescale", ",", "numpy", ".", "uint8", ")", "\n", "im_prd", "=", "Image", ".", "fromarray", "(", "img_y0", ")", "\n", "result", "=", "self", ".", "_combine_images", "(", "[", "im_src", ",", "im_dst", ",", "im_prd", "]", ",", "self", ".", "_tn_size", ")", "\n", "impath", "=", "self", ".", "_out_dir", "+", "'/epoch_{}/{}.jpg'", ".", "format", "(", "epoch", "+", "1", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image", ")", ")", "[", "0", "]", ")", "\n", "self", ".", "_save_image", "(", "impath", ",", "result", ")", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "if", "(", "epoch", "+", "1", ")", "%", "self", ".", "_msg_frq", "==", "0", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_msg_app", ".", "send_message", "(", "'`Epoch {}\\nloss: {:.4f} - val_loss: {:.4f}`'", ".", "format", "(", "epoch", "+", "1", ",", "logs", ".", "get", "(", "'loss'", ")", ",", "logs", ".", "get", "(", "'val_loss'", ")", ")", ")", "\n", "img_dir", "=", "self", ".", "_out_dir", "+", "'/epoch_{}/'", ".", "format", "(", "epoch", "+", "1", ")", "\n", "caption", "=", "'`Epoch {}`'", ".", "format", "(", "epoch", "+", "1", ")", "\n", "self", ".", "_msg_app", ".", "send_photos", "(", "img_dir", ",", "caption", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor._combine_images": [[245, 262], ["len", "PIL.Image.new", "enumerate", "PIL.Image.new.paste", "PIL.Image.new", "PIL.Image.new.paste", "image.convert().resize", "len", "image.convert"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize"], ["", "def", "_combine_images", "(", "self", ",", "images", "=", "[", "]", ",", "size", "=", "(", "64", ",", "64", ")", ",", "\n", "border_colors", "=", "[", "]", ",", "border_width", "=", "0", ")", ":", "\n", "        ", "n", "=", "len", "(", "images", ")", "\n", "w", "=", "n", "*", "(", "size", "[", "0", "]", "+", "2", "*", "border_width", ")", "\n", "h", "=", "size", "[", "1", "]", "+", "2", "*", "border_width", "\n", "surf", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", ",", "h", ")", ")", "\n", "flag", "=", "True", "if", "len", "(", "border_colors", ")", "==", "n", "and", "border_width", ">", "0", "else", "False", "\n", "for", "index", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "x", "=", "index", "*", "w", "//", "n", "\n", "y", "=", "0", "\n", "if", "flag", ":", "\n", "                ", "back", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", "//", "n", ",", "h", ")", ",", "border_colors", "[", "index", "]", ")", "\n", "surf", ".", "paste", "(", "back", ",", "(", "x", ",", "y", ")", ")", "\n", "", "x", "+=", "border_width", "\n", "y", "+=", "border_width", "\n", "surf", ".", "paste", "(", "image", ".", "convert", "(", "'RGB'", ")", ".", "resize", "(", "size", ")", ",", "(", "x", ",", "y", ")", ")", "\n", "", "return", "surf", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.ProgressMonitor._save_image": [[263, 269], ["os.path.dirname", "image.save", "os.makedirs", "os.path.isdir"], "methods", ["None"], ["", "def", "_save_image", "(", "self", ",", "filepath", ",", "image", ")", ":", "\n", "        ", "directory", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", "and", "directory", "!=", "''", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "image", ".", "save", "(", "filepath", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.tensorflow_version": [[272, 274], ["int", "tensorflow.__version__.split"], "function", ["None"], ["", "", "def", "tensorflow_version", "(", ")", ":", "\n", "    ", "return", "int", "(", "tensorflow", ".", "__version__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.train": [[277, 380], ["numpy.random.seed", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils.TelegramIM", "fannet.DataGenerator", "fannet.DataGenerator", "print", "fannet.FANnet", "print", "FANnet.summary", "keras.callbacks.CSVLogger", "keras.callbacks.ModelCheckpoint", "keras.callbacks.ModelCheckpoint", "fannet.ProgressMonitor", "FANnet.fit_generator", "fannet.tensorflow_version", "tensorflow.random.set_seed", "tensorflow.set_random_seed", "os.path.isdir", "print", "open", "file.write", "os.path.isdir", "print", "os.path.isdir", "os.makedirs", "FANnet.to_json", "os.path.join.format", "ARCHITECTURE.upper", "fannet.DataGenerator.flow", "fannet.DataGenerator.flow", "len", "print", "glob.glob", "os.path.join"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.tensorflow_version", "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.DataGenerator.flow", "home.repos.pwc.inspect_result.prasunroy_stefann.None.fannet.DataGenerator.flow"], ["", "def", "train", "(", ")", ":", "\n", "# setup seed for random number generators for reproducibility", "\n", "    ", "numpy", ".", "random", ".", "seed", "(", "RANDOM_SEED", ")", "\n", "\n", "if", "tensorflow_version", "(", ")", "==", "2", ":", "\n", "        ", "tensorflow", ".", "random", ".", "set_seed", "(", "RANDOM_SEED", ")", "\n", "", "else", ":", "\n", "        ", "tensorflow", ".", "set_random_seed", "(", "RANDOM_SEED", ")", "\n", "\n", "# setup paths", "\n", "", "mdl_dir", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_DIR", ",", "'models'", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_DIR", ",", "'logs'", ")", "\n", "cpt_dir", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_DIR", ",", "'checkpoints'", ")", "\n", "pro_dir", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_DIR", ",", "'progress'", ")", "\n", "\n", "setup_flag", "=", "True", "\n", "for", "directory", "in", "[", "TRAIN_IMAGES_DIR", ",", "VALID_IMAGES_DIR", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "\n", "            ", "print", "(", "'[INFO] Data directory not found at {}'", ".", "format", "(", "directory", ")", ")", "\n", "setup_flag", "=", "False", "\n", "", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "PAIRS_IMAGES_DIR", ")", ":", "\n", "        ", "print", "(", "'[INFO] Data directory not found at {}'", ".", "format", "(", "directory", ")", ")", "\n", "", "for", "directory", "in", "[", "OUTPUT_DIR", ",", "mdl_dir", ",", "log_dir", ",", "cpt_dir", ",", "pro_dir", "]", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "elif", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "directory", ",", "'*.*'", ")", ")", ")", ">", "0", ":", "\n", "            ", "print", "(", "'[INFO] Output directory {} must be empty'", ".", "format", "(", "directory", ")", ")", "\n", "setup_flag", "=", "False", "\n", "", "", "if", "not", "setup_flag", ":", "\n", "        ", "return", "\n", "\n", "", "mdl_file", "=", "os", ".", "path", ".", "join", "(", "mdl_dir", ",", "'{}.json'", ".", "format", "(", "ARCHITECTURE", ")", ")", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'{}_training.csv'", ".", "format", "(", "ARCHITECTURE", ")", ")", "\n", "cpt_file_best", "=", "os", ".", "path", ".", "join", "(", "cpt_dir", ",", "'{}_weights.h5'", ".", "format", "(", "ARCHITECTURE", ")", ")", "\n", "cpt_file_last", "=", "os", ".", "path", ".", "join", "(", "cpt_dir", ",", "'{}_weights_{{}}.h5'", ".", "format", "(", "ARCHITECTURE", ")", ")", "\n", "\n", "# initialize messenger", "\n", "messenger", "=", "TelegramIM", "(", "auth_token", "=", "AUTH_TOKEN", ",", "chat_id", "=", "CHAT_ID", ")", "\n", "\n", "# initialize train data generator", "\n", "train_datagen", "=", "DataGenerator", "(", "source_chars", "=", "SOURCE_CHARS", ",", "\n", "target_chars", "=", "TARGET_CHARS", ",", "\n", "image_dir", "=", "TRAIN_IMAGES_DIR", ",", "\n", "image_ext", "=", "IMAGE_FILE_EXT", ",", "\n", "mode", "=", "IMAGE_READ_MODE", ",", "\n", "target_shape", "=", "INPUT_SHAPE_IMG", "[", ":", "2", "]", ",", "\n", "rescale", "=", "SCALE_COEFF_IMG", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "seed", "=", "RANDOM_SEED", ")", "\n", "\n", "# initialize valid data generator", "\n", "valid_datagen", "=", "DataGenerator", "(", "source_chars", "=", "SOURCE_CHARS", ",", "\n", "target_chars", "=", "TARGET_CHARS", ",", "\n", "image_dir", "=", "VALID_IMAGES_DIR", ",", "\n", "image_ext", "=", "IMAGE_FILE_EXT", ",", "\n", "mode", "=", "IMAGE_READ_MODE", ",", "\n", "target_shape", "=", "INPUT_SHAPE_IMG", "[", ":", "2", "]", ",", "\n", "rescale", "=", "SCALE_COEFF_IMG", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "seed", "=", "RANDOM_SEED", ")", "\n", "\n", "# build and serialize network", "\n", "print", "(", "'[INFO] Building network... '", ",", "end", "=", "''", ")", "\n", "fannet", "=", "FANnet", "(", "input_shapes", "=", "[", "INPUT_SHAPE_IMG", ",", "INPUT_SHAPE_HOT", "]", ",", "\n", "optimizer", "=", "FUNCTION_OPTIM", ",", "loss", "=", "FUNCTION_LOSS", ",", "weights", "=", "None", ")", "\n", "print", "(", "'done'", ")", "\n", "fannet", ".", "summary", "(", ")", "\n", "\n", "with", "open", "(", "mdl_file", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "file", ".", "write", "(", "fannet", ".", "to_json", "(", ")", ")", "\n", "\n", "# create callbacks", "\n", "", "csv_logs", "=", "CSVLogger", "(", "filename", "=", "log_file", ",", "append", "=", "True", ")", "\n", "cpt_best", "=", "ModelCheckpoint", "(", "filepath", "=", "cpt_file_best", ",", "\n", "monitor", "=", "'val_loss'", ",", "\n", "verbose", "=", "1", ",", "\n", "save_best_only", "=", "True", ",", "\n", "save_weights_only", "=", "True", ")", "\n", "cpt_last", "=", "ModelCheckpoint", "(", "filepath", "=", "cpt_file_last", ".", "format", "(", "'{epoch:d}'", ")", ",", "\n", "monitor", "=", "'val_loss'", ",", "\n", "verbose", "=", "0", ",", "\n", "save_best_only", "=", "False", ",", "\n", "save_weights_only", "=", "True", ")", "\n", "progress", "=", "ProgressMonitor", "(", "out_dir", "=", "pro_dir", ",", "\n", "charset", "=", "SOURCE_CHARS", ",", "\n", "img_dir", "=", "PAIRS_IMAGES_DIR", ",", "\n", "img_ext", "=", "IMAGE_FILE_EXT", ",", "\n", "mode", "=", "IMAGE_READ_MODE", ",", "\n", "rescale", "=", "SCALE_COEFF_IMG", ",", "\n", "thumbnail_size", "=", "(", "64", ",", "64", ")", ",", "\n", "messenger", "=", "messenger", ",", "\n", "notify_every", "=", "NOTIFY_EVERY", ",", "\n", "network_id", "=", "ARCHITECTURE", ".", "upper", "(", ")", ")", "\n", "\n", "# train network", "\n", "fannet", ".", "fit_generator", "(", "generator", "=", "train_datagen", ".", "flow", "(", ")", ",", "\n", "steps_per_epoch", "=", "train_datagen", ".", "_steps", ",", "\n", "epochs", "=", "NUM_EPOCHS", ",", "\n", "callbacks", "=", "[", "csv_logs", ",", "cpt_best", ",", "cpt_last", ",", "progress", "]", ",", "\n", "validation_data", "=", "valid_datagen", ".", "flow", "(", ")", ",", "\n", "validation_steps", "=", "valid_datagen", ".", "_steps", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.__init__": [[23, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "auth_token", ",", "chat_id", ")", ":", "\n", "        ", "self", ".", "_api_url", "=", "f'https://api.telegram.org/bot{auth_token}'", "\n", "self", ".", "_chat_id", "=", "chat_id", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_message": [[27, 36], ["requests.post"], "methods", ["None"], ["", "def", "send_message", "(", "self", ",", "text", ",", "parse_mode", "=", "'Markdown'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "requests", ".", "post", "(", "self", ".", "_api_url", "+", "'/sendMessage'", ",", "data", "=", "{", "\n", "'chat_id'", ":", "self", ".", "_chat_id", ",", "\n", "'text'", ":", "text", ",", "\n", "'parse_mode'", ":", "parse_mode", "\n", "}", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_photo": [[37, 48], ["requests.post", "utils.TelegramIM._read_photo"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM._read_photo"], ["", "", "def", "send_photo", "(", "self", ",", "photo", ",", "caption", "=", "''", ",", "parse_mode", "=", "'Markdown'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "requests", ".", "post", "(", "self", ".", "_api_url", "+", "'/sendPhoto'", ",", "data", "=", "{", "\n", "'chat_id'", ":", "self", ".", "_chat_id", ",", "\n", "'caption'", ":", "caption", ",", "\n", "'parse_mode'", ":", "parse_mode", "\n", "}", ",", "files", "=", "{", "\n", "'photo'", ":", "self", ".", "_read_photo", "(", "photo", ")", "\n", "}", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_photos": [[49, 67], ["sorted", "max", "sum", "PIL.Image.new", "utils.TelegramIM.send_photo", "glob.glob", "PIL.Image.new.paste", "images.append", "len", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM.send_photo"], ["", "", "def", "send_photos", "(", "self", ",", "img_dir", ",", "caption", "=", "''", ",", "parse_mode", "=", "'Markdown'", ",", "limit", "=", "10", ")", ":", "\n", "        ", "inputs", "=", "sorted", "(", "glob", ".", "glob", "(", "img_dir", "+", "'/**/*.*'", ",", "recursive", "=", "True", ")", ")", "\n", "images", "=", "[", "]", "\n", "for", "file", "in", "inputs", ":", "\n", "            ", "try", ":", "\n", "                ", "images", ".", "append", "(", "Image", ".", "open", "(", "file", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "if", "len", "(", "images", ")", ">=", "limit", ":", "\n", "                ", "break", "\n", "", "", "imgs_w", "=", "max", "(", "[", "image", ".", "width", "for", "image", "in", "images", "]", ")", "\n", "imgs_h", "=", "sum", "(", "[", "image", ".", "height", "for", "image", "in", "images", "]", ")", "\n", "merged", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "imgs_w", ",", "imgs_h", ")", ")", "\n", "offset", "=", "0", "\n", "for", "image", "in", "images", ":", "\n", "            ", "merged", ".", "paste", "(", "image", ",", "(", "0", ",", "offset", ")", ")", "\n", "offset", "+=", "image", ".", "height", "\n", "", "self", ".", "send_photo", "(", "merged", ",", "caption", ",", "parse_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.None.utils.TelegramIM._read_photo": [[68, 76], ["isinstance", "io.BytesIO", "PIL.Image.fromarray.save", "io.BytesIO.getbuffer", "PIL.Image.open", "isinstance", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "_read_photo", "(", "self", ",", "photo", ")", ":", "\n", "        ", "if", "isinstance", "(", "photo", ",", "str", ")", ":", "\n", "            ", "photo", "=", "Image", ".", "open", "(", "photo", ")", "\n", "", "elif", "isinstance", "(", "photo", ",", "numpy", ".", "ndarray", ")", ":", "\n", "            ", "photo", "=", "Image", ".", "fromarray", "(", "photo", ")", "\n", "", "buffer", "=", "BytesIO", "(", ")", "\n", "photo", ".", "save", "(", "buffer", ",", "'JPEG'", ")", "\n", "return", "buffer", ".", "getbuffer", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.GUI.__init__": [[91, 96], ["PyQt5.QtWidgets.QMainWindow.__init__", "stefann.GUI.init_ui"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.GUI.__init__", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.GUI.init_ui"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "None", ")", ":", "\n", "        ", "super", "(", "GUI", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "init_ui", "(", ")", "\n", "self", ".", "imdir", "=", "root", "\n", "self", ".", "image", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.GUI.init_ui": [[97, 137], ["PyQt5.QtGui.QPixmap", "PyQt5.QtGui.QPixmap.loadFromData", "stefann.GUI.setGeometry", "stefann.GUI.setWindowIcon", "stefann.GUI.setWindowTitle", "PyQt5.QtWidgets.QLabel", "PyQt5.QtWidgets.QLabel.setAlignment", "PyQt5.QtWidgets.QLabel.setStyleSheet", "PyQt5.QtWidgets.QPushButton", "PyQt5.QtWidgets.QPushButton", "PyQt5.QtWidgets.QPushButton", "PyQt5.QtWidgets.QWidget", "PyQt5.QtWidgets.QVBoxLayout", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QHBoxLayout.addWidget", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QVBoxLayout.addLayout", "PyQt5.QtWidgets.QWidget.setLayout", "stefann.GUI.setCentralWidget", "stefann.GUI.setFixedSize", "stefann.GUI.move_window_to_center", "PyQt5.QtWidgets.QPushButton.clicked.connect", "PyQt5.QtWidgets.QPushButton.clicked.connect", "PyQt5.QtWidgets.QPushButton.clicked.connect", "PyQt5.QtCore.QByteArray.fromBase64", "PyQt5.QtGui.QIcon", "button.setMinimumSize", "button.setStyleSheet", "stefann.GUI.size", "webbrowser.open", "webbrowser.open"], "methods", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.GUI.move_window_to_center"], ["", "def", "init_ui", "(", "self", ")", ":", "\n", "# set properties", "\n", "        ", "icon", "=", "QPixmap", "(", ")", "\n", "icon", ".", "loadFromData", "(", "QByteArray", ".", "fromBase64", "(", "APP_ICON", ")", ")", "\n", "self", ".", "setGeometry", "(", "0", ",", "0", ",", "500", ",", "250", ")", "\n", "self", ".", "setWindowIcon", "(", "QIcon", "(", "icon", ")", ")", "\n", "self", ".", "setWindowTitle", "(", "APP_NAME", ")", "\n", "\n", "# create widgets", "\n", "header", "=", "QLabel", "(", "'STEFANN'", ")", "\n", "header", ".", "setAlignment", "(", "Qt", ".", "AlignCenter", ")", "\n", "header", ".", "setStyleSheet", "(", "'QLabel {font-size: 80px; font-weight: bold;}'", ")", "\n", "button_image", "=", "QPushButton", "(", "'Open Image'", ")", "\n", "button_paper", "=", "QPushButton", "(", "'About Project'", ")", "\n", "button_about", "=", "QPushButton", "(", "'README'", ")", "\n", "for", "button", "in", "[", "button_image", ",", "button_paper", ",", "button_about", "]", ":", "\n", "            ", "button", ".", "setMinimumSize", "(", "150", ",", "30", ")", "\n", "button", ".", "setStyleSheet", "(", "'QPushButton {font-size: 12px;}'", ")", "\n", "\n", "# create layout", "\n", "", "main_widget", "=", "QWidget", "(", ")", "\n", "main_layout", "=", "QVBoxLayout", "(", ")", "\n", "layout_1", "=", "QHBoxLayout", "(", ")", "\n", "layout_2", "=", "QHBoxLayout", "(", ")", "\n", "layout_1", ".", "addWidget", "(", "header", ")", "\n", "layout_2", ".", "addWidget", "(", "button_image", ")", "\n", "layout_2", ".", "addWidget", "(", "button_paper", ")", "\n", "layout_2", ".", "addWidget", "(", "button_about", ")", "\n", "main_layout", ".", "addLayout", "(", "layout_1", ")", "\n", "main_layout", ".", "addLayout", "(", "layout_2", ")", "\n", "main_widget", ".", "setLayout", "(", "main_layout", ")", "\n", "self", ".", "setCentralWidget", "(", "main_widget", ")", "\n", "self", ".", "setFixedSize", "(", "self", ".", "size", "(", ")", ")", "\n", "self", ".", "move_window_to_center", "(", ")", "\n", "\n", "# set actions", "\n", "button_image", ".", "clicked", ".", "connect", "(", "self", ".", "open_image", ")", "\n", "button_paper", ".", "clicked", ".", "connect", "(", "lambda", ":", "webbrowser", ".", "open", "(", "'https://prasunroy.github.io/stefann'", ")", ")", "\n", "button_about", ".", "clicked", ".", "connect", "(", "lambda", ":", "webbrowser", ".", "open", "(", "'readme.html'", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.GUI.move_window_to_center": [[138, 144], ["stefann.GUI.frameGeometry", "PyQt5.QtWidgets.QDesktopWidget().availableGeometry().center", "stefann.GUI.moveCenter", "stefann.GUI.move", "stefann.GUI.topLeft", "PyQt5.QtWidgets.QDesktopWidget().availableGeometry", "PyQt5.QtWidgets.QDesktopWidget"], "methods", ["None"], ["", "def", "move_window_to_center", "(", "self", ")", ":", "\n", "        ", "window_rect", "=", "self", ".", "frameGeometry", "(", ")", "\n", "screen_cent", "=", "QDesktopWidget", "(", ")", ".", "availableGeometry", "(", ")", ".", "center", "(", ")", "\n", "window_rect", ".", "moveCenter", "(", "screen_cent", ")", "\n", "self", ".", "move", "(", "window_rect", ".", "topLeft", "(", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.GUI.open_image": [[145, 154], ["PyQt5.QtWidgets.QFileDialog.getOpenFileName", "os.path.isfile", "os.path.expanduser", "stefann.GUI.close", "os.path.isdir", "str"], "methods", ["None"], ["", "def", "open_image", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "imdir", "is", "None", "or", "not", "os", ".", "path", ".", "isdir", "(", "str", "(", "self", ".", "imdir", ")", ")", ":", "\n", "            ", "self", ".", "imdir", "=", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", "\n", "", "self", ".", "image", ",", "_", "=", "QFileDialog", ".", "getOpenFileName", "(", "self", ",", "'Open Image'", ",", "self", ".", "imdir", ",", "'Image Files (*.bmp *.dib *.jpeg *.jpg *.jpe *.jp2 *.png *.webp *.pbm *.pgm *.ppm *.pxm *.pnm *.sr *.ras *.tiff *.tif *.exr *.hdr *.pic)'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "image", ")", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "image", "=", "None", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.launcher": [[158, 164], ["PyQt5.QtWidgets.QApplication", "stefann.GUI", "GUI.show", "PyQt5.QtWidgets.QApplication.exec"], "function", ["None"], ["", "", "def", "launcher", "(", "root", "=", "None", ")", ":", "\n", "    ", "app", "=", "QApplication", "(", "[", "]", ")", "\n", "gui", "=", "GUI", "(", "root", ")", "\n", "gui", ".", "show", "(", ")", "\n", "app", ".", "exec", "(", ")", "\n", "return", "gui", ".", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.opencv_version": [[168, 170], ["int", "cv2.__version__.split"], "function", ["None"], ["", "def", "opencv_version", "(", ")", ":", "\n", "    ", "return", "int", "(", "cv2", ".", "__version__", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.draw_grid": [[174, 188], ["image.copy", "range", "range", "cv2.line", "cv2.line"], "function", ["None"], ["", "def", "draw_grid", "(", "image", ",", "line_space", "=", "10", ",", "line_color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "line_thickness", "=", "1", ")", ":", "\n", "# get image size", "\n", "    ", "output", "=", "image", ".", "copy", "(", ")", "\n", "nr", ",", "nc", "=", "output", ".", "shape", "[", ":", "2", "]", "\n", "\n", "# draw horizontal lines", "\n", "for", "r", "in", "range", "(", "0", ",", "nr", ",", "line_space", ")", ":", "\n", "        ", "cv2", ".", "line", "(", "output", ",", "(", "0", ",", "r", ")", ",", "(", "nc", "-", "1", ",", "r", ")", ",", "line_color", ",", "line_thickness", ")", "\n", "\n", "# draw vertical lines", "\n", "", "for", "c", "in", "range", "(", "0", ",", "nc", ",", "line_space", ")", ":", "\n", "        ", "cv2", ".", "line", "(", "output", ",", "(", "c", ",", "0", ")", ",", "(", "c", ",", "nr", "-", "1", ")", ",", "line_color", ",", "line_thickness", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.select_region": [[192, 210], ["points.append", "len", "points.clear", "type", "len", "points.pop", "len", "points.pop"], "function", ["None"], ["", "def", "select_region", "(", "event", ",", "x", ",", "y", ",", "flags", ",", "points", ")", ":", "\n", "# no reference to points list is passed", "\n", "    ", "if", "points", "is", "None", "or", "not", "type", "(", "points", ")", "is", "list", ":", "\n", "        ", "return", "\n", "\n", "# handle events", "\n", "# - insert : left click", "\n", "# - remove : right click", "\n", "", "if", "event", "==", "cv2", ".", "EVENT_LBUTTONDOWN", ":", "\n", "        ", "if", "len", "(", "points", ")", ">", "4", ":", "\n", "            ", "points", ".", "clear", "(", ")", "\n", "", "elif", "len", "(", "points", ")", "==", "4", ":", "\n", "            ", "points", ".", "pop", "(", "0", ")", "\n", "", "points", ".", "append", "(", "(", "x", ",", "y", ")", ")", "\n", "", "elif", "event", "==", "cv2", ".", "EVENT_RBUTTONDOWN", ":", "\n", "        ", "if", "len", "(", "points", ")", ">", "0", ":", "\n", "            ", "points", ".", "pop", "(", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.sort_points": [[214, 219], ["sorted", "sorted", "sorted"], "function", ["None"], ["", "def", "sort_points", "(", "points", ")", ":", "\n", "    ", "points", "=", "sorted", "(", "points", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "points", "=", "sorted", "(", "points", "[", ":", "2", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "+", "sorted", "(", "points", "[", "2", ":", "]", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.scale_points": [[223, 229], ["points.copy", "round", "round"], "function", ["None"], ["", "def", "scale_points", "(", "points", ",", "fscale", "=", "1.0", ")", ":", "\n", "    ", "scaled_points", "=", "points", ".", "copy", "(", ")", "\n", "for", "point", "in", "scaled_points", ":", "\n", "        ", "point", "[", "0", "]", "=", "round", "(", "point", "[", "0", "]", "*", "fscale", ")", "\n", "point", "[", "1", "]", "=", "round", "(", "point", "[", "1", "]", "*", "fscale", ")", "\n", "", "return", "scaled_points", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.draw_region": [[233, 243], ["image.copy", "stefann.sort_points", "len", "range", "range", "cv2.line", "cv2.circle", "cv2.circle"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.sort_points"], ["", "def", "draw_region", "(", "image", ",", "points", ")", ":", "\n", "    ", "output", "=", "image", ".", "copy", "(", ")", "\n", "points", "=", "sort_points", "(", "points", ")", "\n", "npoint", "=", "len", "(", "points", ")", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "cv2", ".", "line", "(", "output", ",", "points", "[", "i", "]", ",", "points", "[", "(", "i", "+", "1", ")", "%", "npoint", "]", ",", "(", "0", ",", "0", ",", "255", ")", ",", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "cv2", ".", "circle", "(", "output", ",", "points", "[", "i", "]", ",", "5", ",", "(", "0", ",", "0", ",", "0", ")", ",", "-", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "cv2", ".", "circle", "(", "output", ",", "points", "[", "i", "]", ",", "4", ",", "(", "0", ",", "255", ",", "0", ")", ",", "-", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.binarize": [[247, 276], ["cv2.bitwise_and.copy", "set", "tuple", "numpy.zeros", "cv2.bitwise_and", "stefann.sort_points", "numpy.array", "numpy.zeros_like", "cv2.fillConvexPoly", "cv2.bitwise_and", "cv2.MSER_create().detectRegions", "numpy.transpose", "cv2.threshold", "type", "len", "tuple.add", "list", "cv2.MSER_create"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.sort_points"], ["", "def", "binarize", "(", "image", ",", "points", "=", "None", ",", "thresh", "=", "128", ",", "maxval", "=", "255", ",", "thresh_type", "=", "0", ")", ":", "\n", "# convert image to grayscale", "\n", "    ", "image", "=", "image", ".", "copy", "(", ")", "\n", "\n", "# remove everything except the region bounded by given points", "\n", "if", "not", "points", "is", "None", "and", "type", "(", "points", ")", "is", "list", "and", "len", "(", "points", ")", ">", "2", ":", "\n", "        ", "points", "=", "sort_points", "(", "points", ")", "\n", "points", "=", "numpy", ".", "array", "(", "points", ",", "numpy", ".", "int64", ")", "\n", "mask", "=", "numpy", ".", "zeros_like", "(", "image", ",", "numpy", ".", "uint8", ")", "\n", "cv2", ".", "fillConvexPoly", "(", "mask", ",", "points", ",", "(", "255", ",", "255", ",", "255", ")", ",", "cv2", ".", "LINE_AA", ")", "\n", "image", "=", "cv2", ".", "bitwise_and", "(", "image", ",", "mask", ")", "\n", "\n", "# estimate mask 1 from MSER", "\n", "", "msers", "=", "cv2", ".", "MSER_create", "(", ")", ".", "detectRegions", "(", "image", ")", "[", "0", "]", "\n", "setyx", "=", "set", "(", ")", "\n", "for", "region", "in", "msers", ":", "\n", "        ", "for", "point", "in", "region", ":", "\n", "            ", "setyx", ".", "add", "(", "(", "point", "[", "1", "]", ",", "point", "[", "0", "]", ")", ")", "\n", "", "", "setyx", "=", "tuple", "(", "numpy", ".", "transpose", "(", "list", "(", "setyx", ")", ")", ")", "\n", "mask1", "=", "numpy", ".", "zeros", "(", "image", ".", "shape", ",", "numpy", ".", "uint8", ")", "\n", "mask1", "[", "setyx", "]", "=", "maxval", "\n", "\n", "# estimate mask 2 from thresholding", "\n", "mask2", "=", "cv2", ".", "threshold", "(", "image", ",", "thresh", ",", "maxval", ",", "thresh_type", ")", "[", "1", "]", "\n", "\n", "# get binary image from estimated masks", "\n", "image", "=", "cv2", ".", "bitwise_and", "(", "mask1", ",", "mask2", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.find_contours": [[280, 302], ["image.copy.copy", "stefann.opencv_version", "len", "zip", "cv2.findContours", "cv2.findContours", "cv2.boundingRect", "cv2.contourArea", "sorted", "zip"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.opencv_version"], ["", "def", "find_contours", "(", "image", ",", "min_area", "=", "0", ",", "sort", "=", "True", ")", ":", "\n", "# convert image to grayscale", "\n", "    ", "image", "=", "image", ".", "copy", "(", ")", "\n", "\n", "# find contours", "\n", "if", "opencv_version", "(", ")", "==", "3", ":", "\n", "        ", "contours", "=", "cv2", ".", "findContours", "(", "image", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "contours", "=", "cv2", ".", "findContours", "(", "image", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "[", "0", "]", "\n", "\n", "# filter contours by area", "\n", "", "contours", "=", "[", "contour", "for", "contour", "in", "contours", "if", "cv2", ".", "contourArea", "(", "contour", ")", ">=", "min_area", "]", "\n", "\n", "if", "len", "(", "contours", ")", "<", "1", ":", "\n", "        ", "return", "(", "[", "]", ",", "[", "]", ")", "\n", "\n", "# sort contours from left to right using respective bounding boxes", "\n", "", "if", "sort", ":", "\n", "        ", "bndboxes", "=", "[", "cv2", ".", "boundingRect", "(", "contour", ")", "for", "contour", "in", "contours", "]", "\n", "contours", ",", "bndboxes", "=", "zip", "(", "*", "sorted", "(", "zip", "(", "contours", ",", "bndboxes", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "0", "]", ")", ")", "\n", "\n", "", "return", "contours", ",", "bndboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.draw_contours": [[306, 315], ["numpy.zeros_like", "range", "cv2.bitwise_and", "cv2.cvtColor", "cv2.bitwise_and.copy", "len", "cv2.drawContours", "cv2.drawContours", "len"], "function", ["None"], ["", "def", "draw_contours", "(", "image", ",", "contours", ",", "index", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "color_mode", "=", "None", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "color_mode", ")", "if", "color_mode", "else", "image", ".", "copy", "(", ")", "\n", "drawn", "=", "numpy", ".", "zeros_like", "(", "image", ",", "numpy", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "contours", ")", ")", ":", "\n", "        ", "drawn", "=", "cv2", ".", "drawContours", "(", "drawn", ",", "contours", ",", "i", ",", "(", "255", ",", "255", ",", "255", ")", ",", "-", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "", "if", "len", "(", "contours", ")", ">", "0", "and", "index", ">=", "0", ":", "\n", "        ", "drawn", "=", "cv2", ".", "drawContours", "(", "drawn", ",", "contours", ",", "index", ",", "color", ",", "-", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "", "image", "=", "cv2", ".", "bitwise_and", "(", "drawn", ",", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.grab_region": [[319, 330], ["numpy.zeros_like", "cv2.drawContours", "cv2.bitwise_and", "cv2.bitwise_and", "len", "len"], "function", ["None"], ["", "def", "grab_region", "(", "image", ",", "bwmask", ",", "contours", ",", "bndboxes", ",", "index", ")", ":", "\n", "    ", "region", "=", "numpy", ".", "zeros_like", "(", "bwmask", ",", "numpy", ".", "uint8", ")", "\n", "if", "len", "(", "contours", ")", ">", "0", "and", "len", "(", "bndboxes", ")", ">", "0", "and", "index", ">=", "0", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "bndboxes", "[", "index", "]", "\n", "region", "=", "cv2", ".", "drawContours", "(", "region", ",", "contours", ",", "index", ",", "(", "255", ",", "255", ",", "255", ")", ",", "-", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "region", "=", "region", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "bwmask", "=", "bwmask", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "bwmask", "=", "cv2", ".", "bitwise_and", "(", "region", ",", "region", ",", "mask", "=", "bwmask", ")", "\n", "region", "=", "image", "[", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "region", "=", "cv2", ".", "bitwise_and", "(", "region", ",", "region", ",", "mask", "=", "bwmask", ")", "\n", "", "return", "region", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.grab_regions": [[334, 339], ["range", "len", "regions.append", "stefann.grab_region"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.grab_region"], ["", "def", "grab_regions", "(", "image", ",", "image_mask", ",", "contours", ",", "bndboxes", ")", ":", "\n", "    ", "regions", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "len", "(", "bndboxes", ")", ")", ":", "\n", "        ", "regions", ".", "append", "(", "grab_region", "(", "image", ",", "image_mask", ",", "contours", ",", "bndboxes", ",", "index", ")", ")", "\n", "", "return", "regions", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.image2tensor": [[343, 358], ["numpy.atleast_3d", "int", "numpy.zeros", "cv2.resize", "numpy.atleast_3d", "output.reshape.reshape", "cv2.cvtColor", "image.copy", "numpy.ceil", "numpy.asarray", "max"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize"], ["", "def", "image2tensor", "(", "image", ",", "shape", ",", "padding", "=", "0.0", ",", "rescale", "=", "1.0", ",", "color_mode", "=", "None", ")", ":", "\n", "    ", "output", "=", "cv2", ".", "cvtColor", "(", "image", ",", "color_mode", ")", "if", "color_mode", "else", "image", ".", "copy", "(", ")", "\n", "output", "=", "numpy", ".", "atleast_3d", "(", "output", ")", "\n", "rect_w", "=", "output", ".", "shape", "[", "1", "]", "\n", "rect_h", "=", "output", ".", "shape", "[", "0", "]", "\n", "sqrlen", "=", "int", "(", "numpy", ".", "ceil", "(", "(", "1.0", "+", "padding", ")", "*", "max", "(", "rect_w", ",", "rect_h", ")", ")", ")", "\n", "sqrbox", "=", "numpy", ".", "zeros", "(", "(", "sqrlen", ",", "sqrlen", ",", "output", ".", "shape", "[", "2", "]", ")", ",", "numpy", ".", "uint8", ")", "\n", "rect_x", "=", "(", "sqrlen", "-", "rect_w", ")", "//", "2", "\n", "rect_y", "=", "(", "sqrlen", "-", "rect_h", ")", "//", "2", "\n", "sqrbox", "[", "rect_y", ":", "rect_y", "+", "rect_h", ",", "rect_x", ":", "rect_x", "+", "rect_w", "]", "=", "output", "\n", "output", "=", "cv2", ".", "resize", "(", "sqrbox", ",", "shape", "[", ":", "2", "]", ")", "\n", "output", "=", "numpy", ".", "atleast_3d", "(", "output", ")", "\n", "output", "=", "numpy", ".", "asarray", "(", "output", ",", "numpy", ".", "float32", ")", "*", "rescale", "\n", "output", "=", "output", ".", "reshape", "(", "(", "1", ",", ")", "+", "output", ".", "shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.char2onehot": [[362, 367], ["numpy.asarray().reshape", "len", "len", "alphabet.index", "numpy.asarray"], "function", ["None"], ["", "def", "char2onehot", "(", "character", ",", "alphabet", ")", ":", "\n", "    ", "onehot", "=", "[", "0.", "]", "*", "len", "(", "alphabet", ")", "\n", "onehot", "[", "alphabet", ".", "index", "(", "character", ")", "]", "=", "1.", "\n", "onehot", "=", "numpy", ".", "asarray", "(", "onehot", ",", "numpy", ".", "float32", ")", ".", "reshape", "(", "1", ",", "len", "(", "alphabet", ")", ",", "1", ")", "\n", "return", "onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize": [[371, 387], ["PIL.Image.fromarray", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray.getbbox", "numpy.asarray.crop", "int", "int"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize"], ["", "def", "resize", "(", "image", ",", "w", "=", "-", "1", ",", "h", "=", "-", "1", ",", "bbox", "=", "False", ")", ":", "\n", "    ", "image", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "bnbox", "=", "image", ".", "getbbox", "(", ")", "if", "bbox", "else", "None", "\n", "image", "=", "image", ".", "crop", "(", "bnbox", ")", "if", "bnbox", "else", "image", "\n", "if", "w", "<=", "0", "and", "h", "<=", "0", ":", "\n", "        ", "w", "=", "image", ".", "width", "\n", "h", "=", "image", ".", "height", "\n", "", "elif", "w", "<=", "0", "and", "h", ">", "0", ":", "\n", "        ", "w", "=", "int", "(", "image", ".", "width", "/", "image", ".", "height", "*", "h", ")", "\n", "", "elif", "w", ">", "0", "and", "h", "<=", "0", ":", "\n", "        ", "h", "=", "int", "(", "image", ".", "height", "/", "image", ".", "width", "*", "w", ")", "\n", "", "else", ":", "\n", "        ", "pass", "\n", "", "image", "=", "image", ".", "resize", "(", "(", "w", ",", "h", ")", ")", "\n", "image", "=", "numpy", ".", "asarray", "(", "image", ",", "numpy", ".", "uint8", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.update_bndboxes": [[391, 402], ["list", "range", "range", "tuple", "len"], "function", ["None"], ["", "def", "update_bndboxes", "(", "bndboxes", ",", "index", ",", "image", ")", ":", "\n", "    ", "change_x", "=", "(", "image", ".", "shape", "[", "1", "]", "-", "bndboxes", "[", "index", "]", "[", "2", "]", ")", "//", "2", "\n", "bndboxes", "=", "list", "(", "bndboxes", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "index", "+", "1", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "bndboxes", "[", "i", "]", "\n", "bndboxes", "[", "i", "]", "=", "(", "x", "-", "change_x", ",", "y", ",", "w", ",", "h", ")", "\n", "", "for", "i", "in", "range", "(", "index", "+", "1", ",", "len", "(", "bndboxes", ")", ")", ":", "\n", "        ", "x", ",", "y", ",", "w", ",", "h", "=", "bndboxes", "[", "i", "]", "\n", "bndboxes", "[", "i", "]", "=", "(", "x", "+", "change_x", ",", "y", ",", "w", ",", "h", ")", "\n", "", "bndboxes", "=", "tuple", "(", "bndboxes", ")", "\n", "return", "bndboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.paste_images": [[406, 413], ["PIL.Image.fromarray", "zip", "numpy.asarray", "PIL.Image.fromarray", "numpy.asarray.paste"], "function", ["None"], ["", "def", "paste_images", "(", "image", ",", "patches", ",", "bndboxes", ")", ":", "\n", "    ", "image", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "for", "patch", ",", "bndbox", "in", "zip", "(", "patches", ",", "bndboxes", ")", ":", "\n", "        ", "patch", "=", "Image", ".", "fromarray", "(", "patch", ")", "\n", "image", ".", "paste", "(", "patch", ",", "bndbox", "[", ":", "2", "]", ")", "\n", "", "image", "=", "numpy", ".", "asarray", "(", "image", ",", "numpy", ".", "uint8", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.inpaint": [[417, 422], ["numpy.ones", "cv2.dilate", "cv2.inpaint"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.inpaint"], ["", "def", "inpaint", "(", "image", ",", "mask", ")", ":", "\n", "    ", "k", "=", "numpy", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "numpy", ".", "uint8", ")", "\n", "m", "=", "cv2", ".", "dilate", "(", "mask", ",", "k", ",", "iterations", "=", "1", ")", "\n", "i", "=", "cv2", ".", "inpaint", "(", "image", ",", "m", ",", "10", ",", "cv2", ".", "INPAINT_TELEA", ")", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.transfer_color_max": [[426, 436], ["source.convert().getcolors", "sorted", "PIL.Image.new", "PIL.Image.new", "Image.new.paste", "target.convert", "source.convert", "len"], "function", ["None"], ["", "def", "transfer_color_max", "(", "source", ",", "target", ")", ":", "\n", "    ", "colors", "=", "source", ".", "convert", "(", "'RGB'", ")", ".", "getcolors", "(", "256", "*", "256", "*", "256", ")", "\n", "colors", "=", "sorted", "(", "colors", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ",", "reverse", "=", "True", ")", "\n", "maxcol", "=", "colors", "[", "0", "]", "[", "1", "]", "if", "len", "(", "colors", ")", "==", "1", "else", "colors", "[", "0", "]", "[", "1", "]", "if", "colors", "[", "0", "]", "[", "1", "]", "!=", "(", "0", ",", "0", ",", "0", ")", "else", "colors", "[", "1", "]", "[", "1", "]", "\n", "output", "=", "Image", ".", "new", "(", "'RGB'", ",", "target", ".", "size", ")", "\n", "colors", "=", "Image", ".", "new", "(", "'RGB'", ",", "target", ".", "size", ",", "maxcol", ")", "\n", "output", ".", "paste", "(", "colors", ",", "(", "0", ",", "0", ")", ",", "target", ".", "convert", "(", "'L'", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.transfer_color_pal": [[440, 457], ["source.convert.convert", "source.convert.getbbox", "PIL.Image.new", "numpy.asarray", "range", "target.convert.convert", "colors.resize.resize", "PIL.Image.new", "Image.new.paste", "source.convert.crop", "source.convert.copy", "src_np[].reshape", "numpy.delete", "PIL.Image.fromarray().resize", "colors.resize.paste", "numpy.where", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize"], ["", "def", "transfer_color_pal", "(", "source", ",", "target", ")", ":", "\n", "    ", "source", "=", "source", ".", "convert", "(", "'RGB'", ")", "\n", "src_bb", "=", "source", ".", "getbbox", "(", ")", "\n", "src_bb", "=", "source", ".", "crop", "(", "src_bb", ")", "if", "src_bb", "else", "source", ".", "copy", "(", ")", "\n", "colors", "=", "Image", ".", "new", "(", "'RGB'", ",", "src_bb", ".", "size", ")", "\n", "src_np", "=", "numpy", ".", "asarray", "(", "src_bb", ",", "numpy", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "src_np", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "row_np", "=", "src_np", "[", "i", "]", ".", "reshape", "(", "1", ",", "-", "1", ",", "3", ")", "\n", "col_id", "=", "numpy", ".", "where", "(", "row_np", "==", "0", ")", "[", "1", "]", "\n", "row_np", "=", "numpy", ".", "delete", "(", "row_np", ",", "col_id", ",", "axis", "=", "1", ")", "\n", "row_im", "=", "Image", ".", "fromarray", "(", "row_np", ")", ".", "resize", "(", "(", "colors", ".", "width", ",", "1", ")", ")", "\n", "colors", ".", "paste", "(", "row_im", ",", "(", "0", ",", "i", ")", ")", "\n", "", "target", "=", "target", ".", "convert", "(", "'L'", ")", "\n", "colors", "=", "colors", ".", "resize", "(", "target", ".", "size", ")", "\n", "output", "=", "Image", ".", "new", "(", "'RGB'", ",", "target", ".", "size", ")", "\n", "output", ".", "paste", "(", "colors", ",", "(", "0", ",", "0", ")", ",", "target", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.edit_char": [[461, 518], ["stefann.grab_region", "stefann.image2tensor", "stefann.char2onehot", "fannet.predict", "numpy.squeeze", "numpy.asarray", "stefann.grab_region", "PIL.Image.fromarray", "PIL.Image.fromarray", "stefann.transfer_color_max", "numpy.asarray", "stefann.resize", "stefann.resize", "stefann.grab_regions", "numpy.zeros_like", "stefann.paste_images", "stefann.inpaint", "stefann.grab_regions", "stefann.update_bndboxes", "numpy.zeros_like", "stefann.paste_images", "numpy.zeros_like", "stefann.paste_images", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "Image.fromarray.paste", "numpy.asarray", "numpy.asarray", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.grab_region", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.image2tensor", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.char2onehot", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.grab_region", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.transfer_color_max", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.resize", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.grab_regions", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.paste_images", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.inpaint", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.grab_regions", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.update_bndboxes", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.paste_images", "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.paste_images"], ["", "def", "edit_char", "(", "image", ",", "image_mask", ",", "contours", ",", "bndboxes", ",", "index", ",", "char", ",", "alphabet", ",", "fannet", ",", "colornet", ")", ":", "\n", "# validate parameters", "\n", "    ", "if", "len", "(", "contours", ")", "<=", "0", "or", "len", "(", "bndboxes", ")", "<=", "0", "or", "len", "(", "contours", ")", "!=", "len", "(", "bndboxes", ")", "or", "index", "<", "0", ":", "\n", "        ", "return", "\n", "\n", "# generate character", "\n", "", "region_f", "=", "grab_region", "(", "image_mask", ",", "image_mask", ",", "contours", ",", "bndboxes", ",", "index", ")", "\n", "tensor_f", "=", "image2tensor", "(", "region_f", ",", "fannet", ".", "input_shape", "[", "0", "]", "[", "1", ":", "3", "]", ",", ".1", ",", "1.", ")", "\n", "onehot_f", "=", "char2onehot", "(", "char", ",", "alphabet", ")", "\n", "output_f", "=", "fannet", ".", "predict", "(", "[", "tensor_f", ",", "onehot_f", "]", ")", "\n", "output_f", "=", "numpy", ".", "squeeze", "(", "output_f", ")", "\n", "output_f", "=", "numpy", ".", "asarray", "(", "output_f", ",", "numpy", ".", "uint8", ")", "\n", "\n", "# transfer color", "\n", "region_c", "=", "grab_region", "(", "image", ",", "image_mask", ",", "contours", ",", "bndboxes", ",", "index", ")", "\n", "source_c", "=", "Image", ".", "fromarray", "(", "region_c", ")", "\n", "target_f", "=", "Image", ".", "fromarray", "(", "output_f", ")", "\n", "output_c", "=", "transfer_color_max", "(", "source_c", ",", "target_f", ")", "\n", "output_c", "=", "numpy", ".", "asarray", "(", "output_c", ",", "numpy", ".", "uint8", ")", "\n", "# output_c = transfer_color_pal(source_c, target_f)", "\n", "# output_c = numpy.asarray(output_c, numpy.uint8)", "\n", "# input1_c = image2tensor(region_c, colornet.input_shape[0][1:3], .1, 1.)", "\n", "# input2_f = image2tensor(output_f, colornet.input_shape[0][1:3], .1, 1.)", "\n", "# output_c = colornet.predict([input1_c, input2_f])", "\n", "# output_c = numpy.squeeze(output_c)", "\n", "# output_c = numpy.asarray(output_c, numpy.uint8)", "\n", "# output_c = cv2.bitwise_and(output_c, output_c, mask=output_f)", "\n", "\n", "output_f", "=", "resize", "(", "output_f", ",", "-", "1", ",", "region_f", ".", "shape", "[", "0", "]", ",", "True", ")", "\n", "output_c", "=", "resize", "(", "output_c", ",", "-", "1", ",", "region_c", ".", "shape", "[", "0", "]", ",", "True", ")", "\n", "\n", "# inpaint old layout", "\n", "mpatches", "=", "grab_regions", "(", "image_mask", ",", "image_mask", ",", "contours", ",", "bndboxes", ")", "\n", "o_layout", "=", "numpy", ".", "zeros_like", "(", "image_mask", ",", "numpy", ".", "uint8", ")", "\n", "o_layout", "=", "paste_images", "(", "o_layout", ",", "mpatches", ",", "bndboxes", ")", "\n", "inpainted_image", "=", "inpaint", "(", "image", ",", "o_layout", ")", "\n", "\n", "# create new layout", "\n", "bpatches", "=", "grab_regions", "(", "image", ",", "image_mask", ",", "contours", ",", "bndboxes", ")", "\n", "bndboxes", "=", "update_bndboxes", "(", "bndboxes", ",", "index", ",", "output_f", ")", "\n", "bpatches", "[", "index", "]", "=", "output_c", "\n", "n_layout", "=", "numpy", ".", "zeros_like", "(", "image", ",", "numpy", ".", "uint8", ")", "\n", "n_layout", "=", "paste_images", "(", "n_layout", ",", "bpatches", ",", "bndboxes", ")", "\n", "mpatches", "[", "index", "]", "=", "output_f", "\n", "m_layout", "=", "numpy", ".", "zeros_like", "(", "image_mask", ",", "numpy", ".", "uint8", ")", "\n", "m_layout", "=", "paste_images", "(", "m_layout", ",", "mpatches", ",", "bndboxes", ")", "\n", "\n", "# generate final result", "\n", "n_layout", "=", "Image", ".", "fromarray", "(", "n_layout", ")", "\n", "m_layout", "=", "Image", ".", "fromarray", "(", "m_layout", ")", "\n", "inpainted_image", "=", "Image", ".", "fromarray", "(", "inpainted_image", ")", "\n", "inpainted_image", ".", "paste", "(", "n_layout", ",", "(", "0", ",", "0", ")", ",", "m_layout", ")", "\n", "\n", "layout", "=", "numpy", ".", "asarray", "(", "m_layout", ",", "numpy", ".", "uint8", ")", "\n", "edited", "=", "numpy", ".", "asarray", "(", "inpainted_image", ",", "numpy", ".", "uint8", ")", "\n", "\n", "return", "(", "layout", ",", "edited", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.watermark": [[522, 544], ["PIL.Image.new", "PIL.ImageFont.truetype", "ImageFont.truetype.getsize", "PIL.ImageDraw.Draw", "ImageDraw.Draw.text", "PIL.Image.alpha_composite().convert", "PIL.Image.fromarray().convert", "image.convert", "max", "io.BytesIO", "numpy.uint8", "type", "min", "base64.b64decode", "int", "PIL.Image.alpha_composite", "type", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "watermark", "(", "image", ",", "text", ",", "size", "=", "None", ",", "color", "=", "None", ",", "alpha", "=", "1.0", ",", "position", "=", "0", ")", ":", "\n", "    ", "back", "=", "Image", ".", "fromarray", "(", "image", ")", ".", "convert", "(", "'RGBA'", ")", "if", "type", "(", "image", ")", "is", "numpy", ".", "ndarray", "else", "image", ".", "convert", "(", "'RGBA'", ")", "\n", "fore", "=", "Image", ".", "new", "(", "back", ".", "mode", ",", "back", ".", "size", ",", "(", "0", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "size", "=", "min", "(", "back", ".", "width", ",", "back", ".", "height", ")", "//", "20", "if", "size", "is", "None", "else", "max", "(", "20", ",", "size", ")", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "io", ".", "BytesIO", "(", "base64", ".", "b64decode", "(", "APP_FONT", ")", ")", ",", "size", ")", "\n", "w", ",", "h", "=", "font", ".", "getsize", "(", "text", ")", "\n", "rgba", "=", "(", "255", ",", "255", ",", "255", ")", "if", "color", "is", "None", "else", "color", "\n", "rgba", "=", "rgba", "+", "(", "int", "(", "255", "*", "alpha", ")", ",", ")", "\n", "if", "position", "==", "0", ":", "\n", "        ", "x", ",", "y", "=", "(", "back", ".", "width", "-", "w", ")", "//", "2", ",", "(", "back", ".", "height", "-", "h", ")", "//", "2", "\n", "", "elif", "position", "==", "1", ":", "\n", "        ", "x", ",", "y", "=", "8", ",", "4", "\n", "", "elif", "position", "==", "2", ":", "\n", "        ", "x", ",", "y", "=", "back", ".", "width", "-", "w", "-", "8", ",", "4", "\n", "", "elif", "position", "==", "3", ":", "\n", "        ", "x", ",", "y", "=", "back", ".", "width", "-", "w", "-", "8", ",", "back", ".", "height", "-", "h", "-", "8", "\n", "", "elif", "position", "==", "4", ":", "\n", "        ", "x", ",", "y", "=", "8", ",", "back", ".", "height", "-", "h", "-", "8", "\n", "", "draw", "=", "ImageDraw", ".", "Draw", "(", "fore", ")", "\n", "draw", ".", "text", "(", "(", "x", ",", "y", ")", ",", "text", ",", "rgba", ",", "font", ")", "\n", "output", "=", "Image", ".", "alpha_composite", "(", "back", ",", "fore", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "numpy", ".", "uint8", "(", "output", ")", "if", "type", "(", "image", ")", "is", "numpy", ".", "ndarray", "else", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.prasunroy_stefann.release.stefann.timestamp": [[548, 550], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "timestamp", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d-%H-%M-%S'", ")", "\n", "\n"]]}