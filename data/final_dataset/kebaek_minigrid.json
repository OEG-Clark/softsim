{"home.repos.pwc.inspect_result.kebaek_minigrid.None.model.QModel.__init__": [[20, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ")", ":", "\n", "        ", "super", "(", "QModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n", ",", "m", ",", "_", "=", "obs_space", "[", "'image'", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "image_conv", "=", "nn", ".", "Sequential", "(", "\n", "self", ".", "conv1", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "self", ".", "conv2", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "conv3", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "embedding_size", "=", "(", "(", "n", "-", "1", ")", "//", "2", "-", "2", ")", "*", "(", "(", "m", "-", "1", ")", "//", "2", "-", "2", ")", "*", "64", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "action_space", ".", "n", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.None.model.QModel.forward": [[45, 49], ["model.QModel.image.permute", "model.QModel.image_conv", "model.QModel.head", "model.QModel.reshape", "model.QModel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "obs", ")", ":", "\n", "        ", "obs", "=", "obs", ".", "image", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "obs", "=", "self", ".", "image_conv", "(", "obs", ")", "\n", "return", "self", ".", "head", "(", "obs", ".", "reshape", "(", "obs", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.None.model.ACModel.__init__": [[52, 105], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model.ACModel.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ",", "use_memory", "=", "False", ",", "use_text", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Decide which components are enabled", "\n", "self", ".", "use_text", "=", "use_text", "\n", "self", ".", "use_memory", "=", "use_memory", "\n", "\n", "# Define image embedding", "\n", "self", ".", "image_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "(", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "n", "=", "obs_space", "[", "\"image\"", "]", "[", "0", "]", "\n", "m", "=", "obs_space", "[", "\"image\"", "]", "[", "1", "]", "\n", "self", ".", "image_embedding_size", "=", "(", "(", "n", "-", "1", ")", "//", "2", "-", "2", ")", "*", "(", "(", "m", "-", "1", ")", "//", "2", "-", "2", ")", "*", "64", "\n", "\n", "# Define memory", "\n", "if", "self", ".", "use_memory", ":", "\n", "            ", "self", ".", "memory_rnn", "=", "nn", ".", "LSTMCell", "(", "self", ".", "image_embedding_size", ",", "self", ".", "semi_memory_size", ")", "\n", "\n", "# Define text embedding", "\n", "", "if", "self", ".", "use_text", ":", "\n", "            ", "self", ".", "word_embedding_size", "=", "32", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "obs_space", "[", "\"text\"", "]", ",", "self", ".", "word_embedding_size", ")", "\n", "self", ".", "text_embedding_size", "=", "128", "\n", "self", ".", "text_rnn", "=", "nn", ".", "GRU", "(", "self", ".", "word_embedding_size", ",", "self", ".", "text_embedding_size", ",", "batch_first", "=", "True", ")", "\n", "\n", "# Resize image embedding", "\n", "", "self", ".", "embedding_size", "=", "self", ".", "semi_memory_size", "\n", "if", "self", ".", "use_text", ":", "\n", "            ", "self", ".", "embedding_size", "+=", "self", ".", "text_embedding_size", "\n", "\n", "# Define actor's model", "\n", "", "self", ".", "actor", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "action_space", ".", "n", ")", "\n", ")", "\n", "\n", "# Define critic's model", "\n", "self", ".", "critic", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "embedding_size", ",", "64", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "1", ")", "\n", ")", "\n", "\n", "# Initialize parameters correctly", "\n", "self", ".", "apply", "(", "init_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.None.model.ACModel.memory_size": [[106, 109], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "memory_size", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "self", ".", "semi_memory_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.None.model.ACModel.semi_memory_size": [[110, 113], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "semi_memory_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_embedding_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.None.model.ACModel.forward": [[114, 139], ["obs.image.transpose().transpose", "model.ACModel.image_conv", "model.ACModel.reshape", "model.ACModel.actor", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "model.ACModel.critic", "model.ACModel.squeeze", "model.ACModel.memory_rnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.ACModel._get_embed_text", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "obs.image.transpose", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.None.model.ACModel._get_embed_text"], ["", "def", "forward", "(", "self", ",", "obs", ",", "memory", ")", ":", "\n", "        ", "x", "=", "obs", ".", "image", ".", "transpose", "(", "1", ",", "3", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "\n", "x", "=", "self", ".", "image_conv", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_memory", ":", "\n", "            ", "hidden", "=", "(", "memory", "[", ":", ",", ":", "self", ".", "semi_memory_size", "]", ",", "memory", "[", ":", ",", "self", ".", "semi_memory_size", ":", "]", ")", "\n", "hidden", "=", "self", ".", "memory_rnn", "(", "x", ",", "hidden", ")", "\n", "embedding", "=", "hidden", "[", "0", "]", "\n", "memory", "=", "torch", ".", "cat", "(", "hidden", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "x", "\n", "\n", "", "if", "self", ".", "use_text", ":", "\n", "            ", "embed_text", "=", "self", ".", "_get_embed_text", "(", "obs", ".", "text", ")", "\n", "embedding", "=", "torch", ".", "cat", "(", "(", "embedding", ",", "embed_text", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "self", ".", "actor", "(", "embedding", ")", "\n", "dist", "=", "Categorical", "(", "logits", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", ")", "\n", "\n", "x", "=", "self", ".", "critic", "(", "embedding", ")", "\n", "value", "=", "x", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "dist", ",", "value", ",", "memory", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.None.model.ACModel._get_embed_text": [[140, 143], ["model.ACModel.text_rnn", "model.ACModel.word_embedding"], "methods", ["None"], ["", "def", "_get_embed_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "_", ",", "hidden", "=", "self", ".", "text_rnn", "(", "self", ".", "word_embedding", "(", "text", ")", ")", "\n", "return", "hidden", "[", "-", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.None.model.init_params": [[10, 17], ["classname.find", "m.weight.data.normal_", "torch.sqrt", "torch.sqrt", "torch.sqrt", "m.bias.data.fill_", "m.weight.data.pow().sum", "m.weight.data.pow"], "function", ["None"], ["def", "init_params", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "m", ".", "weight", ".", "data", "*=", "1", "/", "torch", ".", "sqrt", "(", "m", ".", "weight", ".", "data", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.Vocabulary.__init__": [[68, 71], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_size", ")", ":", "\n", "        ", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "vocab", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.Vocabulary.load_vocab": [[72, 74], ["None"], "methods", ["None"], ["", "def", "load_vocab", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.Vocabulary.__getitem__": [[75, 81], ["format.Vocabulary.vocab.keys", "len", "ValueError", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "not", "token", "in", "self", ".", "vocab", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "vocab", ")", ">=", "self", ".", "max_size", ":", "\n", "                ", "raise", "ValueError", "(", "\"Maximum vocabulary capacity reached\"", ")", "\n", "", "self", ".", "vocab", "[", "token", "]", "=", "len", "(", "self", ".", "vocab", ")", "+", "1", "\n", "", "return", "self", ".", "vocab", "[", "token", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.get_obss_preprocessor": [[12, 38], ["isinstance", "torch_ac.DictList", "isinstance", "format.Vocabulary", "ValueError", "list", "torch_ac.DictList", "format.preprocess_images", "obs_space.spaces.keys", "str", "format.preprocess_images", "format.preprocess_texts"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.preprocess_images", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.preprocess_images", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.preprocess_texts"], ["def", "get_obss_preprocessor", "(", "obs_space", ")", ":", "\n", "# Check if obs_space is an image space", "\n", "    ", "if", "isinstance", "(", "obs_space", ",", "gym", ".", "spaces", ".", "Box", ")", ":", "\n", "        ", "obs_space", "=", "{", "\"image\"", ":", "obs_space", ".", "shape", "}", "\n", "\n", "def", "preprocess_obss", "(", "obss", ",", "device", "=", "None", ")", ":", "\n", "            ", "return", "torch_ac", ".", "DictList", "(", "{", "\n", "\"image\"", ":", "preprocess_images", "(", "obss", ",", "device", "=", "device", ")", "\n", "}", ")", "\n", "\n", "# Check if it is a MiniGrid observation space", "\n", "", "", "elif", "isinstance", "(", "obs_space", ",", "gym", ".", "spaces", ".", "Dict", ")", "and", "list", "(", "obs_space", ".", "spaces", ".", "keys", "(", ")", ")", "==", "[", "\"image\"", "]", ":", "\n", "        ", "obs_space", "=", "{", "\"image\"", ":", "obs_space", ".", "spaces", "[", "\"image\"", "]", ".", "shape", ",", "\"text\"", ":", "100", "}", "\n", "\n", "vocab", "=", "Vocabulary", "(", "obs_space", "[", "\"text\"", "]", ")", "\n", "def", "preprocess_obss", "(", "obss", ",", "device", "=", "None", ")", ":", "\n", "            ", "return", "torch_ac", ".", "DictList", "(", "{", "\n", "\"image\"", ":", "preprocess_images", "(", "[", "obs", "[", "\"image\"", "]", "for", "obs", "in", "obss", "]", ",", "device", "=", "device", ")", ",", "\n", "\"text\"", ":", "preprocess_texts", "(", "[", "obs", "[", "\"mission\"", "]", "for", "obs", "in", "obss", "]", ",", "vocab", ",", "device", "=", "device", ")", "\n", "}", ")", "\n", "", "preprocess_obss", ".", "vocab", "=", "vocab", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown observation space: \"", "+", "str", "(", "obs_space", ")", ")", "\n", "\n", "", "return", "obs_space", ",", "preprocess_obss", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.preprocess_images": [[40, 44], ["numpy.array", "torch.tensor"], "function", ["None"], ["", "def", "preprocess_images", "(", "images", ",", "device", "=", "None", ")", ":", "\n", "# Bug of Pytorch: very slow if not first converted to numpy array", "\n", "    ", "images", "=", "numpy", ".", "array", "(", "images", ")", "\n", "return", "torch", ".", "tensor", "(", "images", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.preprocess_texts": [[46, 62], ["numpy.zeros", "enumerate", "torch.tensor", "re.findall", "numpy.array", "var_indexed_texts.append", "max", "text.lower", "len", "len", "len"], "function", ["None"], ["", "def", "preprocess_texts", "(", "texts", ",", "vocab", ",", "device", "=", "None", ")", ":", "\n", "    ", "var_indexed_texts", "=", "[", "]", "\n", "max_text_len", "=", "0", "\n", "\n", "for", "text", "in", "texts", ":", "\n", "        ", "tokens", "=", "re", ".", "findall", "(", "\"([a-z]+)\"", ",", "text", ".", "lower", "(", ")", ")", "\n", "var_indexed_text", "=", "numpy", ".", "array", "(", "[", "vocab", "[", "token", "]", "for", "token", "in", "tokens", "]", ")", "\n", "var_indexed_texts", ".", "append", "(", "var_indexed_text", ")", "\n", "max_text_len", "=", "max", "(", "len", "(", "var_indexed_text", ")", ",", "max_text_len", ")", "\n", "\n", "", "indexed_texts", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "texts", ")", ",", "max_text_len", ")", ")", "\n", "\n", "for", "i", ",", "indexed_text", "in", "enumerate", "(", "var_indexed_texts", ")", ":", "\n", "        ", "indexed_texts", "[", "i", ",", ":", "len", "(", "indexed_text", ")", "]", "=", "indexed_text", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "indexed_texts", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.other.seed": [[7, 13], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.seed"], ["def", "seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "numpy", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.other.synthesize": [[15, 22], ["collections.OrderedDict", "numpy.mean", "numpy.std", "numpy.amin", "numpy.amax"], "function", ["None"], ["", "", "def", "synthesize", "(", "array", ")", ":", "\n", "    ", "d", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "d", "[", "\"mean\"", "]", "=", "numpy", ".", "mean", "(", "array", ")", "\n", "d", "[", "\"std\"", "]", "=", "numpy", ".", "std", "(", "array", ")", "\n", "d", "[", "\"min\"", "]", "=", "numpy", ".", "amin", "(", "array", ")", "\n", "d", "[", "\"max\"", "]", "=", "numpy", ".", "amax", "(", "array", ")", "\n", "return", "d", "\n", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.DQNAgent.__init__": [[10, 24], ["utils.get_obss_preprocessor", "model.QModel", "agent.DQNAgent.model.load_state_dict", "agent.DQNAgent.model.to", "agent.DQNAgent.model.eval", "hasattr", "utils.get_model_state", "agent.DQNAgent.preprocess_obss.vocab.load_vocab", "utils.get_vocab"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.get_obss_preprocessor", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_model_state", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.Vocabulary.load_vocab", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_vocab"], ["    ", "def", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ",", "model_dir", ",", "\n", "device", "=", "None", ",", "argmax", "=", "False", ",", "num_envs", "=", "1", ")", ":", "\n", "        ", "obs_space", ",", "self", ".", "preprocess_obss", "=", "utils", ".", "get_obss_preprocessor", "(", "\n", "obs_space", "\n", ")", "\n", "self", ".", "model", "=", "QModel", "(", "obs_space", ",", "action_space", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "argmax", "=", "argmax", "\n", "self", ".", "num_envs", "=", "num_envs", "\n", "self", ".", "model", ".", "load_state_dict", "(", "utils", ".", "get_model_state", "(", "model_dir", ")", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "hasattr", "(", "self", ".", "preprocess_obss", ",", "\"vocab\"", ")", ":", "\n", "            ", "self", ".", "preprocess_obss", ".", "vocab", ".", "load_vocab", "(", "utils", ".", "get_vocab", "(", "model_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.DQNAgent.get_actions": [[25, 35], ["agent.DQNAgent.preprocess_obss", "agent.DQNAgent.model", "numpy.zeros", "enumerate", "random.randrange", "a[].item", "len", "len", "torch.max"], "methods", ["None"], ["", "", "def", "get_actions", "(", "self", ",", "obss", ")", ":", "\n", "        ", "preprocessed_obss", "=", "self", ".", "preprocess_obss", "(", "obss", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "Q", "=", "self", ".", "model", "(", "preprocessed_obss", ")", "\n", "actions", "=", "np", ".", "zeros", "(", "(", "len", "(", "Q", ")", ",", ")", ")", "\n", "for", "i", ",", "q", "in", "enumerate", "(", "Q", ")", ":", "\n", "            ", "a", "=", "(", "q", "==", "torch", ".", "max", "(", "q", ")", ")", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "j", "=", "random", ".", "randrange", "(", "len", "(", "a", ")", ")", "\n", "actions", "[", "i", "]", "=", "a", "[", "j", "]", ".", "item", "(", ")", "\n", "", "return", "actions", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.DQNAgent.get_action": [[36, 38], ["agent.DQNAgent.get_actions"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.get_actions"], ["", "def", "get_action", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "get_actions", "(", "[", "obs", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.DQNAgent.analyze_feedbacks": [[39, 41], ["None"], "methods", ["None"], ["", "def", "analyze_feedbacks", "(", "self", ",", "rewards", ",", "dones", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.DQNAgent.analyze_feedback": [[42, 44], ["agent.DQNAgent.analyze_feedbacks"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.analyze_feedbacks"], ["", "def", "analyze_feedback", "(", "self", ",", "reward", ",", "done", ")", ":", "\n", "        ", "return", "self", ".", "analyze_feedbacks", "(", "[", "reward", "]", ",", "[", "done", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.__init__": [[52, 68], ["utils.get_obss_preprocessor", "model.ACModel", "agent.ACAgent.acmodel.load_state_dict", "agent.ACAgent.acmodel.to", "agent.ACAgent.acmodel.eval", "hasattr", "torch.zeros", "utils.get_model_state", "agent.ACAgent.preprocess_obss.vocab.load_vocab", "utils.get_vocab"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.get_obss_preprocessor", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_model_state", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.format.Vocabulary.load_vocab", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_vocab"], ["def", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ",", "model_dir", ",", "\n", "device", "=", "None", ",", "argmax", "=", "False", ",", "num_envs", "=", "1", ",", "use_memory", "=", "False", ",", "use_text", "=", "False", ")", ":", "\n", "        ", "obs_space", ",", "self", ".", "preprocess_obss", "=", "utils", ".", "get_obss_preprocessor", "(", "obs_space", ")", "\n", "self", ".", "acmodel", "=", "ACModel", "(", "obs_space", ",", "action_space", ",", "use_memory", "=", "use_memory", ",", "use_text", "=", "use_text", ")", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "argmax", "=", "argmax", "\n", "self", ".", "num_envs", "=", "num_envs", "\n", "\n", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "            ", "self", ".", "memories", "=", "torch", ".", "zeros", "(", "self", ".", "num_envs", ",", "self", ".", "acmodel", ".", "memory_size", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "acmodel", ".", "load_state_dict", "(", "utils", ".", "get_model_state", "(", "model_dir", ")", ")", "\n", "self", ".", "acmodel", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "acmodel", ".", "eval", "(", ")", "\n", "if", "hasattr", "(", "self", ".", "preprocess_obss", ",", "\"vocab\"", ")", ":", "\n", "            ", "self", ".", "preprocess_obss", ".", "vocab", ".", "load_vocab", "(", "utils", ".", "get_vocab", "(", "model_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.get_actions": [[69, 84], ["agent.ACAgent.preprocess_obss", "dist.sample.cpu().numpy", "torch.no_grad", "dist.sample", "agent.ACAgent.acmodel", "agent.ACAgent.acmodel", "dist.probs.max", "dist.sample.cpu"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.sample"], ["", "", "def", "get_actions", "(", "self", ",", "obss", ")", ":", "\n", "        ", "preprocessed_obss", "=", "self", ".", "preprocess_obss", "(", "obss", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "                ", "dist", ",", "_", ",", "self", ".", "memories", "=", "self", ".", "acmodel", "(", "preprocessed_obss", ",", "self", ".", "memories", ")", "\n", "", "else", ":", "\n", "                ", "dist", ",", "_", "=", "self", ".", "acmodel", "(", "preprocessed_obss", ")", "\n", "\n", "", "", "if", "self", ".", "argmax", ":", "\n", "            ", "actions", "=", "dist", ".", "probs", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "actions", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "", "return", "actions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.get_action": [[85, 87], ["agent.ACAgent.get_actions"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.get_actions"], ["", "def", "get_action", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "self", ".", "get_actions", "(", "[", "obs", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.analyze_feedbacks": [[88, 92], ["torch.tensor().unsqueeze", "torch.tensor"], "methods", ["None"], ["", "def", "analyze_feedbacks", "(", "self", ",", "rewards", ",", "dones", ")", ":", "\n", "        ", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "            ", "masks", "=", "1", "-", "torch", ".", "tensor", "(", "dones", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "self", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", "\n", "self", ".", "memories", "*=", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.analyze_feedback": [[93, 95], ["agent.ACAgent.analyze_feedbacks"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.agent.ACAgent.analyze_feedbacks"], ["", "", "def", "analyze_feedback", "(", "self", ",", "reward", ",", "done", ")", ":", "\n", "        ", "return", "self", ".", "analyze_feedbacks", "(", "[", "reward", "]", ",", "[", "done", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.wrapper.FlatObsWrapper.__init__": [[10, 24], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "# Since the outer walls are always present, we remove left, right, top, bottom walls", "\n", "# from the observation space of the agent. There are 3 channels, but for simplicity,", "\n", "# we will deal with flattened version of state.", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "(", "self", ".", "env", ".", "width", "-", "2", ")", "*", "(", "self", ".", "env", ".", "height", "-", "2", ")", "*", "3", ",", ")", ",", "# number of cells", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "self", ".", "unwrapped", ".", "max_steps", "=", "max_env_steps", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.wrapper.FlatObsWrapper.observation": [[25, 38], ["env.grid.encode", "numpy.array", "env.grid.encode.flatten"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "# this method is called in the step() function to get the observation", "\n", "# we provide code that gets the grid state and places the agent in it", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "full_grid", "=", "env", ".", "grid", ".", "encode", "(", ")", "\n", "full_grid", "[", "env", ".", "agent_pos", "[", "0", "]", "]", "[", "env", ".", "agent_pos", "[", "1", "]", "]", "=", "np", ".", "array", "(", "[", "\n", "OBJECT_TO_IDX", "[", "'agent'", "]", ",", "\n", "COLOR_TO_IDX", "[", "'red'", "]", ",", "\n", "env", ".", "agent_dir", "\n", "]", ")", "\n", "full_grid", "=", "full_grid", "[", "1", ":", "-", "1", ",", "1", ":", "-", "1", "]", "# remove outer walls of the environment (for efficiency)", "\n", "flattened_grid", "=", "full_grid", ".", "flatten", "(", ")", "\n", "return", "flattened_grid", ",", "env", ".", "agent_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.wrapper.FlatObsWrapper.render": [[39, 43], ["wrapper.FlatObsWrapper.unwrapped.render"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "render", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"This removes the default visualization of the partially observable field of view.\"\"\"", "\n", "kwargs", "[", "'highlight'", "]", "=", "False", "\n", "return", "self", ".", "unwrapped", ".", "render", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.hash_state_action": [[2, 4], ["str"], "function", ["None"], ["def", "hash_state_action", "(", "state", ",", "action", ")", ":", "\n", "    ", "return", "state", "+", "\"|\"", "+", "str", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.reverse_hashing_state_action": [[7, 12], ["hashing_state_action.split", "int"], "function", ["None"], ["", "def", "reverse_hashing_state_action", "(", "hashing_state_action", ")", ":", "\n", "    ", "state", ",", "action", "=", "hashing_state_action", ".", "split", "(", "\"|\"", ")", "\n", "#state = reverse_hashing_state(state)", "\n", "action", "=", "int", "(", "action", ")", "\n", "return", "state", ",", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.get_max_action": [[15, 24], ["range", "float", "hash.hash_state_action"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.hash_state_action"], ["", "def", "get_max_action", "(", "state", ",", "q_value_function", ",", "maze_env", ")", ":", "\n", "    ", "max_action", "=", "None", "\n", "max_q_value", "=", "-", "float", "(", "'inf'", ")", "\n", "for", "action", "in", "range", "(", "maze_env", ".", "action_space", ".", "n", ")", ":", "\n", "        ", "current_q_value", "=", "q_value_function", "[", "hash_state_action", "(", "state", ",", "action", ")", "]", "\n", "if", "current_q_value", ">", "max_q_value", ":", "\n", "            ", "max_q_value", "=", "current_q_value", "\n", "max_action", "=", "action", "\n", "", "", "return", "max_action", ",", "max_q_value", "\n", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.create_folders_if_necessary": [[10, 14], ["os.path.dirname", "os.path.isdir", "os.makedirs"], "function", ["None"], ["def", "create_folders_if_necessary", "(", "path", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "path", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_storage_dir": [[16, 20], ["None"], "function", ["None"], ["", "", "def", "get_storage_dir", "(", ")", ":", "\n", "    ", "if", "\"RL_STORAGE\"", "in", "os", ".", "environ", ":", "\n", "        ", "return", "os", ".", "environ", "[", "\"RL_STORAGE\"", "]", "\n", "", "return", "\"storage\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_model_dir": [[22, 24], ["os.path.join", "storage.get_storage_dir"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_storage_dir"], ["", "def", "get_model_dir", "(", "model_name", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "get_storage_dir", "(", ")", ",", "model_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_status_path": [[26, 28], ["os.path.join"], "function", ["None"], ["", "def", "get_status_path", "(", "model_dir", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"status.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_status": [[30, 33], ["storage.get_status_path", "torch.load"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_status_path"], ["", "def", "get_status", "(", "model_dir", ")", ":", "\n", "    ", "path", "=", "get_status_path", "(", "model_dir", ")", "\n", "return", "torch", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.save_status": [[35, 39], ["storage.get_status_path", "utils.create_folders_if_necessary", "torch.save"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_status_path", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.create_folders_if_necessary"], ["", "def", "save_status", "(", "status", ",", "model_dir", ")", ":", "\n", "    ", "path", "=", "get_status_path", "(", "model_dir", ")", "\n", "utils", ".", "create_folders_if_necessary", "(", "path", ")", "\n", "torch", ".", "save", "(", "status", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_vocab": [[41, 43], ["storage.get_status"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_status"], ["", "def", "get_vocab", "(", "model_dir", ")", ":", "\n", "    ", "return", "get_status", "(", "model_dir", ")", "[", "\"vocab\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_model_state": [[45, 47], ["storage.get_status"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_status"], ["", "def", "get_model_state", "(", "model_dir", ")", ":", "\n", "    ", "return", "get_status", "(", "model_dir", ")", "[", "\"model_state\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_txt_logger": [[49, 63], ["os.path.join", "utils.create_folders_if_necessary", "logging.basicConfig", "logging.getLogger", "logging.FileHandler", "logging.StreamHandler"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.create_folders_if_necessary"], ["", "def", "get_txt_logger", "(", "model_dir", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"log.txt\"", ")", "\n", "utils", ".", "create_folders_if_necessary", "(", "path", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "\n", "level", "=", "logging", ".", "INFO", ",", "\n", "format", "=", "\"%(message)s\"", ",", "\n", "handlers", "=", "[", "\n", "logging", ".", "FileHandler", "(", "filename", "=", "path", ")", ",", "\n", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "]", "\n", ")", "\n", "\n", "return", "logging", ".", "getLogger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_csv_logger": [[65, 70], ["os.path.join", "utils.create_folders_if_necessary", "open", "csv.writer"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.create_folders_if_necessary"], ["", "def", "get_csv_logger", "(", "model_dir", ")", ":", "\n", "    ", "csv_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"log.csv\"", ")", "\n", "utils", ".", "create_folders_if_necessary", "(", "csv_path", ")", "\n", "csv_file", "=", "open", "(", "csv_path", ",", "\"a\"", ")", "\n", "return", "csv_file", ",", "csv", ".", "writer", "(", "csv_file", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.env.make_env": [[6, 10], ["gym.make", "gym.make.seed"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.seed"], ["def", "make_env", "(", "env_key", ",", "seed", "=", "None", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_key", ")", "\n", "env", ".", "seed", "(", "seed", ")", "\n", "return", "env", "\n", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.dictlist.DictList.__len__": [[16, 18], ["len", "next", "iter", "dict.values"], "methods", ["None"], ["def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "next", "(", "iter", "(", "dict", ".", "values", "(", "self", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.dictlist.DictList.__getitem__": [[19, 21], ["dictlist.DictList", "dict.items"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "DictList", "(", "{", "key", ":", "value", "[", "index", "]", "for", "key", ",", "value", "in", "dict", ".", "items", "(", "self", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.dictlist.DictList.__setitem__": [[22, 25], ["d.items", "dict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.utils.dictlist.DictList.__getitem__"], ["", "def", "__setitem__", "(", "self", ",", "index", ",", "d", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "d", ".", "items", "(", ")", ":", "\n", "            ", "dict", ".", "__getitem__", "(", "self", ",", "key", ")", "[", "index", "]", "=", "value", "", "", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.penv.ParallelEnv.__init__": [[21, 36], ["len", "multiprocessing.Pipe", "penv.ParallelEnv.locals.append", "multiprocessing.Process", "multiprocessing.Process.start", "remote.close"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.close"], ["def", "__init__", "(", "self", ",", "envs", ")", ":", "\n", "        ", "assert", "len", "(", "envs", ")", ">=", "1", ",", "\"No environment given.\"", "\n", "\n", "self", ".", "envs", "=", "envs", "\n", "self", ".", "observation_space", "=", "self", ".", "envs", "[", "0", "]", ".", "observation_space", "\n", "self", ".", "action_space", "=", "self", ".", "envs", "[", "0", "]", ".", "action_space", "\n", "\n", "self", ".", "locals", "=", "[", "]", "\n", "for", "env", "in", "self", ".", "envs", "[", "1", ":", "]", ":", "\n", "            ", "local", ",", "remote", "=", "Pipe", "(", ")", "\n", "self", ".", "locals", ".", "append", "(", "local", ")", "\n", "p", "=", "Process", "(", "target", "=", "worker", ",", "args", "=", "(", "remote", ",", "env", ")", ")", "\n", "p", ".", "daemon", "=", "True", "\n", "p", ".", "start", "(", ")", "\n", "remote", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.penv.ParallelEnv.reset": [[37, 42], ["local.send", "penv.ParallelEnv.envs[].reset", "local.recv"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "local", "in", "self", ".", "locals", ":", "\n", "            ", "local", ".", "send", "(", "(", "\"reset\"", ",", "None", ")", ")", "\n", "", "results", "=", "[", "self", ".", "envs", "[", "0", "]", ".", "reset", "(", ")", "]", "+", "[", "local", ".", "recv", "(", ")", "for", "local", "in", "self", ".", "locals", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.penv.ParallelEnv.step": [[43, 51], ["zip", "penv.ParallelEnv.envs[].step", "zip", "local.send", "penv.ParallelEnv.envs[].reset", "local.recv"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "for", "local", ",", "action", "in", "zip", "(", "self", ".", "locals", ",", "actions", "[", "1", ":", "]", ")", ":", "\n", "            ", "local", ".", "send", "(", "(", "\"step\"", ",", "action", ")", ")", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "envs", "[", "0", "]", ".", "step", "(", "actions", "[", "0", "]", ")", "\n", "if", "done", ":", "\n", "            ", "obs", "=", "self", ".", "envs", "[", "0", "]", ".", "reset", "(", ")", "\n", "", "results", "=", "zip", "(", "*", "[", "(", "obs", ",", "reward", ",", "done", ",", "info", ")", "]", "+", "[", "local", ".", "recv", "(", ")", "for", "local", "in", "self", ".", "locals", "]", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.penv.ParallelEnv.render": [[52, 54], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.utils.penv.worker": [[4, 17], ["conn.recv", "env.step", "conn.send", "env.reset", "env.reset", "conn.send"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["def", "worker", "(", "conn", ",", "env", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "cmd", ",", "data", "=", "conn", ".", "recv", "(", ")", "\n", "if", "cmd", "==", "\"step\"", ":", "\n", "            ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "data", ")", "\n", "if", "done", ":", "\n", "                ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "", "conn", ".", "send", "(", "(", "obs", ",", "reward", ",", "done", ",", "info", ")", ")", "\n", "", "elif", "cmd", "==", "\"reset\"", ":", "\n", "            ", "obs", "=", "env", ".", "reset", "(", ")", "\n", "conn", ".", "send", "(", "obs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.torch_ac.format.default_preprocess_obss": [[3, 5], ["torch.tensor"], "function", ["None"], ["import", "numpy", "\n", "import", "re", "\n", "import", "torch", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.torch_ac.model.ACModel.__init__": [[8, 11], ["None"], "methods", ["None"], ["\n", "# Function from https://github.com/ikostrikov/pytorch-a2c-ppo-acktr/blob/master/model.py", "\n", "def", "init_params", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.torch_ac.model.ACModel.forward": [[12, 15], ["None"], "methods", ["None"], ["if", "classname", ".", "find", "(", "\"Linear\"", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "m", ".", "weight", ".", "data", "*=", "1", "/", "torch", ".", "sqrt", "(", "m", ".", "weight", ".", "data", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.torch_ac.model.RecurrentACModel.forward": [[19, 22], ["None"], "methods", ["None"], ["\n", "    ", "def", "__init__", "(", "self", ",", "obs_space", ",", "action_space", ")", ":", "\n", "        ", "super", "(", "QModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n", ",", "m", ",", "_", "=", "obs_space", "[", "'image'", "]", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.torch_ac.model.RecurrentACModel.memory_size": [[23, 27], ["None"], "methods", ["None"], ["self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "(", "2", ",", "2", ")", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "(", "2", ",", "2", ")", ")", "\n", "\n", "self", ".", "image_conv", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.a2c.A2CAlgo.__init__": [[10, 20], ["torch_ac.algos.base.BaseAlgo.__init__", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "a2c.A2CAlgo.acmodel.parameters"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "envs", ",", "acmodel", ",", "device", "=", "None", ",", "num_frames_per_proc", "=", "None", ",", "discount", "=", "0.99", ",", "lr", "=", "0.01", ",", "gae_lambda", "=", "0.95", ",", "\n", "entropy_coef", "=", "0.01", ",", "value_loss_coef", "=", "0.5", ",", "max_grad_norm", "=", "0.5", ",", "recurrence", "=", "4", ",", "\n", "rmsprop_alpha", "=", "0.99", ",", "rmsprop_eps", "=", "1e-8", ",", "preprocess_obss", "=", "None", ",", "reshape_reward", "=", "None", ")", ":", "\n", "        ", "num_frames_per_proc", "=", "num_frames_per_proc", "or", "8", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "envs", ",", "acmodel", ",", "device", ",", "num_frames_per_proc", ",", "discount", ",", "lr", ",", "gae_lambda", ",", "entropy_coef", ",", "\n", "value_loss_coef", ",", "max_grad_norm", ",", "recurrence", ",", "preprocess_obss", ",", "reshape_reward", ")", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "acmodel", ".", "parameters", "(", ")", ",", "lr", ",", "\n", "alpha", "=", "rmsprop_alpha", ",", "eps", "=", "rmsprop_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.a2c.A2CAlgo.update_parameters": [[21, 94], ["a2c.A2CAlgo._get_starting_indexes", "range", "a2c.A2CAlgo.optimizer.zero_grad", "update_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "a2c.A2CAlgo.optimizer.step", "dist.entropy().mean", "dist.entropy().mean.item", "value.mean().item", "policy_loss.item", "value_loss.item", "sum", "a2c.A2CAlgo.acmodel.parameters", "a2c.A2CAlgo.acmodel", "a2c.A2CAlgo.acmodel", "dist.entropy", "value.mean", "p.grad.data.norm", "a2c.A2CAlgo.acmodel.parameters", "dist.log_prob"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.algos.a2c.A2CAlgo._get_starting_indexes", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "update_parameters", "(", "self", ",", "exps", ")", ":", "\n", "# Compute starting indexes", "\n", "\n", "        ", "inds", "=", "self", ".", "_get_starting_indexes", "(", ")", "\n", "\n", "# Initialize update values", "\n", "\n", "update_entropy", "=", "0", "\n", "update_value", "=", "0", "\n", "update_policy_loss", "=", "0", "\n", "update_value_loss", "=", "0", "\n", "update_loss", "=", "0", "\n", "\n", "# Initialize memory", "\n", "\n", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "            ", "memory", "=", "exps", ".", "memory", "[", "inds", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "recurrence", ")", ":", "\n", "# Create a sub-batch of experience", "\n", "\n", "            ", "sb", "=", "exps", "[", "inds", "+", "i", "]", "\n", "\n", "# Compute loss", "\n", "\n", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "                ", "dist", ",", "value", ",", "memory", "=", "self", ".", "acmodel", "(", "sb", ".", "obs", ",", "memory", "*", "sb", ".", "mask", ")", "\n", "", "else", ":", "\n", "                ", "dist", ",", "value", "=", "self", ".", "acmodel", "(", "sb", ".", "obs", ")", "\n", "\n", "", "entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "policy_loss", "=", "-", "(", "dist", ".", "log_prob", "(", "sb", ".", "action", ")", "*", "sb", ".", "advantage", ")", ".", "mean", "(", ")", "\n", "\n", "value_loss", "=", "(", "value", "-", "sb", ".", "returnn", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "policy_loss", "-", "self", ".", "entropy_coef", "*", "entropy", "+", "self", ".", "value_loss_coef", "*", "value_loss", "\n", "\n", "# Update batch values", "\n", "\n", "update_entropy", "+=", "entropy", ".", "item", "(", ")", "\n", "update_value", "+=", "value", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "update_policy_loss", "+=", "policy_loss", ".", "item", "(", ")", "\n", "update_value_loss", "+=", "value_loss", ".", "item", "(", ")", "\n", "update_loss", "+=", "loss", "\n", "\n", "# Update update values", "\n", "\n", "", "update_entropy", "/=", "self", ".", "recurrence", "\n", "update_value", "/=", "self", ".", "recurrence", "\n", "update_policy_loss", "/=", "self", ".", "recurrence", "\n", "update_value_loss", "/=", "self", ".", "recurrence", "\n", "update_loss", "/=", "self", ".", "recurrence", "\n", "\n", "# Update actor-critic", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "update_loss", ".", "backward", "(", ")", "\n", "update_grad_norm", "=", "sum", "(", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", "**", "2", "for", "p", "in", "self", ".", "acmodel", ".", "parameters", "(", ")", ")", "**", "0.5", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "acmodel", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Log some values", "\n", "\n", "logs", "=", "{", "\n", "\"entropy\"", ":", "update_entropy", ",", "\n", "\"value\"", ":", "update_value", ",", "\n", "\"policy_loss\"", ":", "update_policy_loss", ",", "\n", "\"value_loss\"", ":", "update_value_loss", ",", "\n", "\"grad_norm\"", ":", "update_grad_norm", "\n", "}", "\n", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.a2c.A2CAlgo._get_starting_indexes": [[95, 111], ["numpy.arange"], "methods", ["None"], ["", "def", "_get_starting_indexes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gives the indexes of the observations given to the model and the\n        experiences used to compute the loss at first.\n\n        The indexes are the integers from 0 to `self.num_frames` with a step of\n        `self.recurrence`. If the model is not recurrent, they are all the\n        integers from 0 to `self.num_frames`.\n\n        Returns\n        -------\n        starting_indexes : list of int\n            the indexes of the experiences to be used at first\n        \"\"\"", "\n", "\n", "starting_indexes", "=", "numpy", ".", "arange", "(", "0", ",", "self", ".", "num_frames", ",", "self", ".", "recurrence", ")", "\n", "return", "starting_indexes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.base.BaseAlgo.__init__": [[10, 104], ["torch_ac.utils.ParallelEnv", "base.BaseAlgo.acmodel.to", "base.BaseAlgo.acmodel.train", "len", "base.BaseAlgo.env.reset", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.scripts.qlearn.train", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["def", "__init__", "(", "self", ",", "envs", ",", "acmodel", ",", "device", ",", "num_frames_per_proc", ",", "discount", ",", "lr", ",", "gae_lambda", ",", "entropy_coef", ",", "\n", "value_loss_coef", ",", "max_grad_norm", ",", "recurrence", ",", "preprocess_obss", ",", "reshape_reward", ")", ":", "\n", "        ", "\"\"\"\n        Initializes a `BaseAlgo` instance.\n\n        Parameters:\n        ----------\n        envs : list\n            a list of environments that will be run in parallel\n        acmodel : torch.Module\n            the model\n        num_frames_per_proc : int\n            the number of frames collected by every process for an update\n        discount : float\n            the discount for future rewards\n        lr : float\n            the learning rate for optimizers\n        gae_lambda : float\n            the lambda coefficient in the GAE formula\n            ([Schulman et al., 2015](https://arxiv.org/abs/1506.02438))\n        entropy_coef : float\n            the weight of the entropy cost in the final objective\n        value_loss_coef : float\n            the weight of the value loss in the final objective\n        max_grad_norm : float\n            gradient will be clipped to be at most this value\n        recurrence : int\n            the number of steps the gradient is propagated back in time\n        preprocess_obss : function\n            a function that takes observations returned by the environment\n            and converts them into the format that the model can handle\n        reshape_reward : function\n            a function that shapes the reward, takes an\n            (observation, action, reward, done) tuple as an input\n        \"\"\"", "\n", "\n", "# Store parameters", "\n", "\n", "self", ".", "env", "=", "ParallelEnv", "(", "envs", ")", "\n", "self", ".", "acmodel", "=", "acmodel", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "num_frames_per_proc", "=", "num_frames_per_proc", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "gae_lambda", "=", "gae_lambda", "\n", "self", ".", "entropy_coef", "=", "entropy_coef", "\n", "self", ".", "value_loss_coef", "=", "value_loss_coef", "\n", "self", ".", "max_grad_norm", "=", "max_grad_norm", "\n", "self", ".", "recurrence", "=", "recurrence", "\n", "self", ".", "preprocess_obss", "=", "preprocess_obss", "or", "default_preprocess_obss", "\n", "self", ".", "reshape_reward", "=", "reshape_reward", "\n", "\n", "# Control parameters", "\n", "\n", "assert", "self", ".", "acmodel", ".", "recurrent", "or", "self", ".", "recurrence", "==", "1", "\n", "assert", "self", ".", "num_frames_per_proc", "%", "self", ".", "recurrence", "==", "0", "\n", "\n", "# Configure acmodel", "\n", "\n", "self", ".", "acmodel", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "acmodel", ".", "train", "(", ")", "\n", "\n", "# Store helpers values", "\n", "\n", "self", ".", "num_procs", "=", "len", "(", "envs", ")", "\n", "self", ".", "num_frames", "=", "self", ".", "num_frames_per_proc", "*", "self", ".", "num_procs", "\n", "\n", "# Initialize experience values", "\n", "\n", "shape", "=", "(", "self", ".", "num_frames_per_proc", ",", "self", ".", "num_procs", ")", "\n", "\n", "self", ".", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "obss", "=", "[", "None", "]", "*", "(", "shape", "[", "0", "]", ")", "\n", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "            ", "self", ".", "memory", "=", "torch", ".", "zeros", "(", "shape", "[", "1", "]", ",", "self", ".", "acmodel", ".", "memory_size", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "memories", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "self", ".", "acmodel", ".", "memory_size", ",", "device", "=", "self", ".", "device", ")", "\n", "", "self", ".", "mask", "=", "torch", ".", "ones", "(", "shape", "[", "1", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "masks", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "actions", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "self", ".", "values", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "rewards", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "advantages", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "log_probs", "=", "torch", ".", "zeros", "(", "*", "shape", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Initialize log values", "\n", "\n", "self", ".", "log_episode_return", "=", "torch", ".", "zeros", "(", "self", ".", "num_procs", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "log_episode_reshaped_return", "=", "torch", ".", "zeros", "(", "self", ".", "num_procs", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "log_episode_num_frames", "=", "torch", ".", "zeros", "(", "self", ".", "num_procs", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "self", ".", "log_done_counter", "=", "0", "\n", "self", ".", "log_return", "=", "[", "0", "]", "*", "self", ".", "num_procs", "\n", "self", ".", "log_reshaped_return", "=", "[", "0", "]", "*", "self", ".", "num_procs", "\n", "self", ".", "log_num_frames", "=", "[", "0", "]", "*", "self", ".", "num_procs", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.base.BaseAlgo.collect_experiences": [[105, 240], ["range", "base.BaseAlgo.preprocess_obss", "reversed", "torch_ac.utils.DictList", "base.BaseAlgo.actions.transpose().reshape", "base.BaseAlgo.values.transpose().reshape", "base.BaseAlgo.rewards.transpose().reshape", "base.BaseAlgo.advantages.transpose().reshape", "base.BaseAlgo.log_probs.transpose().reshape", "base.BaseAlgo.preprocess_obss", "max", "base.BaseAlgo.preprocess_obss", "dist.sample", "base.BaseAlgo.env.step", "dist.log_prob", "torch.tensor", "torch.ones", "enumerate", "torch.no_grad", "range", "base.BaseAlgo.memories.transpose().reshape", "base.BaseAlgo.masks.transpose().reshape().unsqueeze", "torch.no_grad", "dist.sample.cpu().numpy", "torch.tensor", "torch.tensor", "torch.tensor", "base.BaseAlgo.acmodel", "base.BaseAlgo.acmodel", "range", "range", "base.BaseAlgo.actions.transpose", "base.BaseAlgo.values.transpose", "base.BaseAlgo.rewards.transpose", "base.BaseAlgo.advantages.transpose", "base.BaseAlgo.log_probs.transpose", "base.BaseAlgo.acmodel", "base.BaseAlgo.acmodel", "base.BaseAlgo.log_return.append", "base.BaseAlgo.log_reshaped_return.append", "base.BaseAlgo.log_num_frames.append", "base.BaseAlgo.memories.transpose", "base.BaseAlgo.masks.transpose().reshape", "dist.sample.cpu", "base.BaseAlgo.reshape_reward", "base.BaseAlgo.log_episode_return[].item", "base.BaseAlgo.log_episode_reshaped_return[].item", "base.BaseAlgo.log_episode_num_frames[].item", "base.BaseAlgo.mask.unsqueeze", "base.BaseAlgo.mask.unsqueeze", "zip", "base.BaseAlgo.masks.transpose"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.sample", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "collect_experiences", "(", "self", ")", ":", "\n", "        ", "\"\"\"Collects rollouts and computes advantages.\n\n        Runs several environments concurrently. The next actions are computed\n        in a batch mode for all environments at the same time. The rollouts\n        and advantages from all environments are concatenated together.\n\n        Returns\n        -------\n        exps : DictList\n            Contains actions, rewards, advantages etc as attributes.\n            Each attribute, e.g. `exps.reward` has a shape\n            (self.num_frames_per_proc * num_envs, ...). k-th block\n            of consecutive `self.num_frames_per_proc` frames contains\n            data obtained from the k-th environment. Be careful not to mix\n            data from different environments!\n        logs : dict\n            Useful stats about the training process, including the average\n            reward, policy loss, value loss, etc.\n        \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_frames_per_proc", ")", ":", "\n", "# Do one agent-environment interaction", "\n", "\n", "            ", "preprocessed_obs", "=", "self", ".", "preprocess_obss", "(", "self", ".", "obs", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "                    ", "dist", ",", "value", ",", "memory", "=", "self", ".", "acmodel", "(", "preprocessed_obs", ",", "self", ".", "memory", "*", "self", ".", "mask", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                    ", "dist", ",", "value", "=", "self", ".", "acmodel", "(", "preprocessed_obs", ")", "\n", "", "", "action", "=", "dist", ".", "sample", "(", ")", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "_", "=", "self", ".", "env", ".", "step", "(", "action", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Update experiences values", "\n", "\n", "self", ".", "obss", "[", "i", "]", "=", "self", ".", "obs", "\n", "self", ".", "obs", "=", "obs", "\n", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "                ", "self", ".", "memories", "[", "i", "]", "=", "self", ".", "memory", "\n", "self", ".", "memory", "=", "memory", "\n", "", "self", ".", "masks", "[", "i", "]", "=", "self", ".", "mask", "\n", "self", ".", "mask", "=", "1", "-", "torch", ".", "tensor", "(", "done", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "actions", "[", "i", "]", "=", "action", "\n", "self", ".", "values", "[", "i", "]", "=", "value", "\n", "if", "self", ".", "reshape_reward", "is", "not", "None", ":", "\n", "                ", "self", ".", "rewards", "[", "i", "]", "=", "torch", ".", "tensor", "(", "[", "\n", "self", ".", "reshape_reward", "(", "obs_", ",", "action_", ",", "reward_", ",", "done_", ")", "\n", "for", "obs_", ",", "action_", ",", "reward_", ",", "done_", "in", "zip", "(", "obs", ",", "action", ",", "reward", ",", "done", ")", "\n", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "rewards", "[", "i", "]", "=", "torch", ".", "tensor", "(", "reward", ",", "device", "=", "self", ".", "device", ")", "\n", "", "self", ".", "log_probs", "[", "i", "]", "=", "dist", ".", "log_prob", "(", "action", ")", "\n", "\n", "# Update log values", "\n", "\n", "self", ".", "log_episode_return", "+=", "torch", ".", "tensor", "(", "reward", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "self", ".", "log_episode_reshaped_return", "+=", "self", ".", "rewards", "[", "i", "]", "\n", "self", ".", "log_episode_num_frames", "+=", "torch", ".", "ones", "(", "self", ".", "num_procs", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "for", "i", ",", "done_", "in", "enumerate", "(", "done", ")", ":", "\n", "                ", "if", "done_", ":", "\n", "                    ", "self", ".", "log_done_counter", "+=", "1", "\n", "self", ".", "log_return", ".", "append", "(", "self", ".", "log_episode_return", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "log_reshaped_return", ".", "append", "(", "self", ".", "log_episode_reshaped_return", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "self", ".", "log_num_frames", ".", "append", "(", "self", ".", "log_episode_num_frames", "[", "i", "]", ".", "item", "(", ")", ")", "\n", "\n", "", "", "self", ".", "log_episode_return", "*=", "self", ".", "mask", "\n", "self", ".", "log_episode_reshaped_return", "*=", "self", ".", "mask", "\n", "self", ".", "log_episode_num_frames", "*=", "self", ".", "mask", "\n", "\n", "# Add advantage and return to experiences", "\n", "\n", "", "preprocessed_obs", "=", "self", ".", "preprocess_obss", "(", "self", ".", "obs", ",", "device", "=", "self", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "                ", "_", ",", "next_value", ",", "_", "=", "self", ".", "acmodel", "(", "preprocessed_obs", ",", "self", ".", "memory", "*", "self", ".", "mask", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "next_value", "=", "self", ".", "acmodel", "(", "preprocessed_obs", ")", "\n", "\n", "", "", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "num_frames_per_proc", ")", ")", ":", "\n", "            ", "next_mask", "=", "self", ".", "masks", "[", "i", "+", "1", "]", "if", "i", "<", "self", ".", "num_frames_per_proc", "-", "1", "else", "self", ".", "mask", "\n", "next_value", "=", "self", ".", "values", "[", "i", "+", "1", "]", "if", "i", "<", "self", ".", "num_frames_per_proc", "-", "1", "else", "next_value", "\n", "next_advantage", "=", "self", ".", "advantages", "[", "i", "+", "1", "]", "if", "i", "<", "self", ".", "num_frames_per_proc", "-", "1", "else", "0", "\n", "\n", "delta", "=", "self", ".", "rewards", "[", "i", "]", "+", "self", ".", "discount", "*", "next_value", "*", "next_mask", "-", "self", ".", "values", "[", "i", "]", "\n", "self", ".", "advantages", "[", "i", "]", "=", "delta", "+", "self", ".", "discount", "*", "self", ".", "gae_lambda", "*", "next_advantage", "*", "next_mask", "\n", "\n", "# Define experiences:", "\n", "#   the whole experience is the concatenation of the experience", "\n", "#   of each process.", "\n", "# In comments below:", "\n", "#   - T is self.num_frames_per_proc,", "\n", "#   - P is self.num_procs,", "\n", "#   - D is the dimensionality.", "\n", "\n", "", "exps", "=", "DictList", "(", ")", "\n", "exps", ".", "obs", "=", "[", "self", ".", "obss", "[", "i", "]", "[", "j", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "num_procs", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_frames_per_proc", ")", "]", "\n", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "# T x P x D -> P x T x D -> (P * T) x D", "\n", "            ", "exps", ".", "memory", "=", "self", ".", "memories", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "*", "self", ".", "memories", ".", "shape", "[", "2", ":", "]", ")", "\n", "# T x P -> P x T -> (P * T) x 1", "\n", "exps", ".", "mask", "=", "self", ".", "masks", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# for all tensors below, T x P -> P x T -> P * T", "\n", "", "exps", ".", "action", "=", "self", ".", "actions", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "exps", ".", "value", "=", "self", ".", "values", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "exps", ".", "reward", "=", "self", ".", "rewards", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "exps", ".", "advantage", "=", "self", ".", "advantages", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "exps", ".", "returnn", "=", "exps", ".", "value", "+", "exps", ".", "advantage", "\n", "exps", ".", "log_prob", "=", "self", ".", "log_probs", ".", "transpose", "(", "0", ",", "1", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "# Preprocess experiences", "\n", "\n", "exps", ".", "obs", "=", "self", ".", "preprocess_obss", "(", "exps", ".", "obs", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Log some values", "\n", "\n", "keep", "=", "max", "(", "self", ".", "log_done_counter", ",", "self", ".", "num_procs", ")", "\n", "\n", "logs", "=", "{", "\n", "\"return_per_episode\"", ":", "self", ".", "log_return", "[", "-", "keep", ":", "]", ",", "\n", "\"reshaped_return_per_episode\"", ":", "self", ".", "log_reshaped_return", "[", "-", "keep", ":", "]", ",", "\n", "\"num_frames_per_episode\"", ":", "self", ".", "log_num_frames", "[", "-", "keep", ":", "]", ",", "\n", "\"num_frames\"", ":", "self", ".", "num_frames", ",", "\n", "\"done\"", ":", "self", ".", "log_done_counter", "\n", "}", "\n", "\n", "self", ".", "log_done_counter", "=", "0", "\n", "self", ".", "log_return", "=", "self", ".", "log_return", "[", "-", "self", ".", "num_procs", ":", "]", "\n", "self", ".", "log_reshaped_return", "=", "self", ".", "log_reshaped_return", "[", "-", "self", ".", "num_procs", ":", "]", "\n", "self", ".", "log_num_frames", "=", "self", ".", "log_num_frames", "[", "-", "self", ".", "num_procs", ":", "]", "\n", "\n", "return", "exps", ",", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.base.BaseAlgo.update_parameters": [[241, 244], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "update_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.__init__": [[12, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "'''\n            Initialize a buffer containing max_size experiences\n        '''", "\n", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.add": [[20, 28], ["len", "dqn.ReplayMemory.memory.append"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "experience", ")", ":", "\n", "        ", "'''\n            Add an experience to the buffer\n        '''", "\n", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "memory", "[", "self", ".", "position", "]", "=", "experience", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.sample": [[29, 34], ["random.sample"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "'''\n            Sample a batch of experiences from the buffer\n        '''", "\n", "return", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.DQNAlgo.__init__": [[43, 71], ["torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "torch.optim.RMSprop", "dqn.ReplayMemory", "dqn.DQNAlgo.policy_network.parameters"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "env", ",", "policy_network", ",", "target_network", ",", "device", ",", "max_memory", ",", "\n", "discount", ",", "lr", ",", "update_interval", ",", "batch_size", ",", "preprocess_obs", ")", ":", "\n", "# parameters", "\n", "        ", "self", ".", "env", "=", "env", "#ParallelEnv(envs)", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "discount", "=", "discount", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "preprocess_obs", "=", "preprocess_obs", "\n", "self", ".", "policy_network", "=", "policy_network", "\n", "self", ".", "target_network", "=", "target_network", "\n", "self", ".", "n_actions", "=", "env", ".", "action_space", ".", "n", "\n", "self", ".", "learn_step_counter", "=", "1", "\n", "self", ".", "update_target", "=", "update_interval", "\n", "\n", "# exploration parameter", "\n", "self", ".", "epsilon", "=", "0.8", "\n", "self", ".", "eps_end", "=", "0.05", "\n", "self", ".", "eps_decay", "=", "200", "\n", "self", ".", "steps_done", "=", "0", "\n", "\n", "# optimizer", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "\n", "self", ".", "policy_network", ".", "parameters", "(", ")", ",", "\n", "lr", "\n", ")", "\n", "\n", "# experience", "\n", "self", ".", "memory", "=", "ReplayMemory", "(", "max_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.DQNAlgo.collect_experiences": [[72, 118], ["dqn.DQNAlgo.env.reset", "dqn.DQNAlgo.train", "log_loss.append", "dqn.DQNAlgo.preprocess_obs", "random.random", "dqn.DQNAlgo.env.step", "log_reward.append", "dqn.DQNAlgo.memory.add", "random.randrange", "action[].item", "random.randrange", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "dqn.DQNAlgo.policy_network", "len", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.kebaek_minigrid.scripts.qlearn.train", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.add"], ["", "def", "collect_experiences", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "\n", "log_episodes", "=", "0", "\n", "log_loss", "=", "[", "]", "\n", "log_reward", "=", "[", "]", "\n", "while", "not", "done", ":", "\n", "# prepocess obs", "\n", "            ", "preprocessed_obs", "=", "self", ".", "preprocess_obs", "(", "[", "obs", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "# Predict the action", "\n", "sample", "=", "random", ".", "random", "(", ")", "\n", "# eps_threshold = self.eps_end + (self.epsilon - self.eps_end) * \\", "\n", "#     math.exp(-1. * self.steps_done / self.eps_decay)", "\n", "self", ".", "steps_done", "+=", "1", "\n", "if", "sample", ">", "self", ".", "epsilon", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "Q", "=", "self", ".", "policy_network", "(", "preprocessed_obs", ")", "\n", "", "action", "=", "(", "Q", "==", "torch", ".", "max", "(", "Q", ")", ")", ".", "nonzero", "(", ")", "[", ":", ",", "1", "]", "\n", "i", "=", "random", ".", "randrange", "(", "len", "(", "action", ")", ")", "\n", "action", "=", "action", "[", "i", "]", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "action", "=", "random", ".", "randrange", "(", "self", ".", "n_actions", ")", "\n", "\n", "# Apply action, get rewards and new state", "\n", "", "new_obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Statistics", "\n", "log_reward", ".", "append", "(", "reward", ")", "\n", "log_episodes", "+=", "1", "\n", "\n", "# Store experience", "\n", "self", ".", "memory", ".", "add", "(", "[", "obs", ",", "action", ",", "reward", ",", "new_obs", ",", "done", "]", ")", "\n", "\n", "# update", "\n", "obs", "=", "new_obs", "\n", "\n", "# train model", "\n", "", "loss", "=", "self", ".", "train", "(", ")", "\n", "log_loss", ".", "append", "(", "loss", ")", "\n", "\n", "return", "{", "\n", "\"num_frames\"", ":", "log_episodes", ",", "\n", "\"rewards\"", ":", "log_reward", ",", "\n", "\"loss\"", ":", "log_loss", ",", "\n", "\"won\"", ":", "info", "[", "'success'", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.DQNAlgo.train": [[120, 176], ["dqn.DQNAlgo.optimizer.zero_grad", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dqn.DQNAlgo.preprocess_obs", "dqn.DQNAlgo.preprocess_obs", "numpy.arange", "torch.functional.smooth_l1_loss", "torch.functional.smooth_l1_loss", "torch.functional.smooth_l1_loss.backward", "dqn.DQNAlgo.optimizer.step", "torch.functional.smooth_l1_loss.item", "len", "dqn.DQNAlgo.memory.sample", "dqn.DQNAlgo.memory.sample", "dqn.DQNAlgo.update_target_network", "min", "dqn.DQNAlgo.policy_network", "dqn.DQNAlgo.target_network().max", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "len", "len", "dqn.DQNAlgo.target_network"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.sample", "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.sample", "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.DQNAlgo.update_target_network"], ["", "def", "train", "(", "self", ")", ":", "\n", "# load sample of memory", "\n", "        ", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "batch_size", ":", "\n", "            ", "batch", "=", "self", ".", "memory", ".", "sample", "(", "len", "(", "self", ".", "memory", ")", ")", "\n", "", "else", ":", "\n", "            ", "batch", "=", "self", ".", "memory", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "\n", "# Zero the parameter gradients", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# update target network if necessary", "\n", "if", "self", ".", "learn_step_counter", "%", "self", ".", "update_target", "==", "0", ":", "\n", "            ", "self", ".", "update_target_network", "(", ")", "\n", "\n", "# Q-Table", "\n", "", "Q_policy", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "batch", ")", ",", "1", ")", ",", "\n", "device", "=", "self", ".", "device", "\n", ")", "\n", "Q_target", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "batch", ")", ",", "1", ")", ",", "\n", "device", "=", "self", ".", "device", "\n", ")", "\n", "\n", "# preprocess obss", "\n", "obs", "=", "self", ".", "preprocess_obs", "(", "\n", "[", "exp", "[", "0", "]", "for", "exp", "in", "batch", "]", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "new_obs", "=", "self", ".", "preprocess_obs", "(", "\n", "[", "exp", "[", "3", "]", "for", "exp", "in", "batch", "]", ",", "device", "=", "self", ".", "device", "\n", ")", "\n", "\n", "# preprocess experience", "\n", "actions", "=", "[", "exp", "[", "1", "]", "for", "exp", "in", "batch", "]", "\n", "rewards", "=", "[", "exp", "[", "2", "]", "for", "exp", "in", "batch", "]", "\n", "dones", "=", "[", "exp", "[", "4", "]", "for", "exp", "in", "batch", "]", "\n", "\n", "# fill Q Table", "\n", "indices", "=", "np", ".", "arange", "(", "min", "(", "self", ".", "batch_size", ",", "len", "(", "self", ".", "memory", ")", ")", ")", "\n", "Q_policy", "=", "self", ".", "policy_network", "(", "obs", ")", "[", "indices", ",", "actions", "]", "\n", "max_actions", "=", "self", ".", "target_network", "(", "new_obs", ")", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "# Update Q-Table", "\n", "Q_target", "=", "torch", ".", "tensor", "(", "\n", "rewards", ",", "device", "=", "self", ".", "device", "\n", ")", "+", "self", ".", "discount", "*", "max_actions", "\n", "#Q_target[dones] = 100.0", "\n", "\n", "# compute loss", "\n", "# loss = nn.MSELoss()(Q_policy, Q_target)", "\n", "loss", "=", "nn", ".", "functional", ".", "smooth_l1_loss", "(", "Q_policy", ",", "Q_target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "learn_step_counter", "+=", "1", "\n", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.DQNAlgo.update_target_network": [[177, 181], ["print", "dqn.DQNAlgo.target_network.load_state_dict", "dqn.DQNAlgo.policy_network.state_dict"], "methods", ["None"], ["", "def", "update_target_network", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Target network update\"", ")", "\n", "self", ".", "target_network", ".", "load_state_dict", "(", "\n", "self", ".", "policy_network", ".", "state_dict", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.ppo.PPOAlgo.__init__": [[11, 28], ["torch_ac.algos.base.BaseAlgo.__init__", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "ppo.PPOAlgo.acmodel.parameters"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "envs", ",", "acmodel", ",", "device", "=", "None", ",", "num_frames_per_proc", "=", "None", ",", "discount", "=", "0.99", ",", "lr", "=", "0.001", ",", "gae_lambda", "=", "0.95", ",", "\n", "entropy_coef", "=", "0.01", ",", "value_loss_coef", "=", "0.5", ",", "max_grad_norm", "=", "0.5", ",", "recurrence", "=", "4", ",", "\n", "adam_eps", "=", "1e-8", ",", "clip_eps", "=", "0.2", ",", "epochs", "=", "4", ",", "batch_size", "=", "256", ",", "preprocess_obss", "=", "None", ",", "\n", "reshape_reward", "=", "None", ")", ":", "\n", "        ", "num_frames_per_proc", "=", "num_frames_per_proc", "or", "128", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "envs", ",", "acmodel", ",", "device", ",", "num_frames_per_proc", ",", "discount", ",", "lr", ",", "gae_lambda", ",", "entropy_coef", ",", "\n", "value_loss_coef", ",", "max_grad_norm", ",", "recurrence", ",", "preprocess_obss", ",", "reshape_reward", ")", "\n", "\n", "self", ".", "clip_eps", "=", "clip_eps", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "assert", "self", ".", "batch_size", "%", "self", ".", "recurrence", "==", "0", "\n", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "acmodel", ".", "parameters", "(", ")", ",", "lr", ",", "eps", "=", "adam_eps", ")", "\n", "self", ".", "batch_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.ppo.PPOAlgo.update_parameters": [[29, 129], ["range", "ppo.PPOAlgo._get_batches_starting_indexes", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "range", "ppo.PPOAlgo.optimizer.zero_grad", "batch_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "ppo.PPOAlgo.optimizer.step", "log_entropies.append", "log_values.append", "log_policy_losses.append", "log_value_losses.append", "log_grad_norms.append", "dist.entropy().mean", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.max().mean", "torch.max().mean", "torch.max().mean", "torch.max().mean", "dist.entropy().mean.item", "value.mean().item", "policy_loss.item", "torch.max().mean.item", "torch.max().mean.item", "sum", "ppo.PPOAlgo.acmodel.parameters", "ppo.PPOAlgo.acmodel", "ppo.PPOAlgo.acmodel", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.min().mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "memory.detach", "dist.entropy", "dist.log_prob", "torch.max", "torch.max", "torch.max", "torch.max", "value.mean", "torch.min", "torch.min", "torch.min", "torch.min", "p.grad.data.norm().item", "ppo.PPOAlgo.acmodel.parameters", "p.grad.data.norm"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.algos.ppo.PPOAlgo._get_batches_starting_indexes", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "update_parameters", "(", "self", ",", "exps", ")", ":", "\n", "# Collect experiences", "\n", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "# Initialize log values", "\n", "\n", "            ", "log_entropies", "=", "[", "]", "\n", "log_values", "=", "[", "]", "\n", "log_policy_losses", "=", "[", "]", "\n", "log_value_losses", "=", "[", "]", "\n", "log_grad_norms", "=", "[", "]", "\n", "\n", "for", "inds", "in", "self", ".", "_get_batches_starting_indexes", "(", ")", ":", "\n", "# Initialize batch values", "\n", "\n", "                ", "batch_entropy", "=", "0", "\n", "batch_value", "=", "0", "\n", "batch_policy_loss", "=", "0", "\n", "batch_value_loss", "=", "0", "\n", "batch_loss", "=", "0", "\n", "\n", "# Initialize memory", "\n", "\n", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "                    ", "memory", "=", "exps", ".", "memory", "[", "inds", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "recurrence", ")", ":", "\n", "# Create a sub-batch of experience", "\n", "\n", "                    ", "sb", "=", "exps", "[", "inds", "+", "i", "]", "\n", "\n", "# Compute loss", "\n", "\n", "if", "self", ".", "acmodel", ".", "recurrent", ":", "\n", "                        ", "dist", ",", "value", ",", "memory", "=", "self", ".", "acmodel", "(", "sb", ".", "obs", ",", "memory", "*", "sb", ".", "mask", ")", "\n", "", "else", ":", "\n", "                        ", "dist", ",", "value", "=", "self", ".", "acmodel", "(", "sb", ".", "obs", ")", "\n", "\n", "", "entropy", "=", "dist", ".", "entropy", "(", ")", ".", "mean", "(", ")", "\n", "\n", "ratio", "=", "torch", ".", "exp", "(", "dist", ".", "log_prob", "(", "sb", ".", "action", ")", "-", "sb", ".", "log_prob", ")", "\n", "surr1", "=", "ratio", "*", "sb", ".", "advantage", "\n", "surr2", "=", "torch", ".", "clamp", "(", "ratio", ",", "1.0", "-", "self", ".", "clip_eps", ",", "1.0", "+", "self", ".", "clip_eps", ")", "*", "sb", ".", "advantage", "\n", "policy_loss", "=", "-", "torch", ".", "min", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "value_clipped", "=", "sb", ".", "value", "+", "torch", ".", "clamp", "(", "value", "-", "sb", ".", "value", ",", "-", "self", ".", "clip_eps", ",", "self", ".", "clip_eps", ")", "\n", "surr1", "=", "(", "value", "-", "sb", ".", "returnn", ")", ".", "pow", "(", "2", ")", "\n", "surr2", "=", "(", "value_clipped", "-", "sb", ".", "returnn", ")", ".", "pow", "(", "2", ")", "\n", "value_loss", "=", "torch", ".", "max", "(", "surr1", ",", "surr2", ")", ".", "mean", "(", ")", "\n", "\n", "loss", "=", "policy_loss", "-", "self", ".", "entropy_coef", "*", "entropy", "+", "self", ".", "value_loss_coef", "*", "value_loss", "\n", "\n", "# Update batch values", "\n", "\n", "batch_entropy", "+=", "entropy", ".", "item", "(", ")", "\n", "batch_value", "+=", "value", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "batch_policy_loss", "+=", "policy_loss", ".", "item", "(", ")", "\n", "batch_value_loss", "+=", "value_loss", ".", "item", "(", ")", "\n", "batch_loss", "+=", "loss", "\n", "\n", "# Update memories for next epoch", "\n", "\n", "if", "self", ".", "acmodel", ".", "recurrent", "and", "i", "<", "self", ".", "recurrence", "-", "1", ":", "\n", "                        ", "exps", ".", "memory", "[", "inds", "+", "i", "+", "1", "]", "=", "memory", ".", "detach", "(", ")", "\n", "\n", "# Update batch values", "\n", "\n", "", "", "batch_entropy", "/=", "self", ".", "recurrence", "\n", "batch_value", "/=", "self", ".", "recurrence", "\n", "batch_policy_loss", "/=", "self", ".", "recurrence", "\n", "batch_value_loss", "/=", "self", ".", "recurrence", "\n", "batch_loss", "/=", "self", ".", "recurrence", "\n", "\n", "# Update actor-critic", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch_loss", ".", "backward", "(", ")", "\n", "grad_norm", "=", "sum", "(", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", ".", "item", "(", ")", "**", "2", "for", "p", "in", "self", ".", "acmodel", ".", "parameters", "(", ")", ")", "**", "0.5", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "acmodel", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Update log values", "\n", "\n", "log_entropies", ".", "append", "(", "batch_entropy", ")", "\n", "log_values", ".", "append", "(", "batch_value", ")", "\n", "log_policy_losses", ".", "append", "(", "batch_policy_loss", ")", "\n", "log_value_losses", ".", "append", "(", "batch_value_loss", ")", "\n", "log_grad_norms", ".", "append", "(", "grad_norm", ")", "\n", "\n", "# Log some values", "\n", "\n", "", "", "logs", "=", "{", "\n", "\"entropy\"", ":", "numpy", ".", "mean", "(", "log_entropies", ")", ",", "\n", "\"value\"", ":", "numpy", ".", "mean", "(", "log_values", ")", ",", "\n", "\"policy_loss\"", ":", "numpy", ".", "mean", "(", "log_policy_losses", ")", ",", "\n", "\"value_loss\"", ":", "numpy", ".", "mean", "(", "log_value_losses", ")", ",", "\n", "\"grad_norm\"", ":", "numpy", ".", "mean", "(", "log_grad_norms", ")", "\n", "}", "\n", "\n", "return", "logs", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.algos.ppo.PPOAlgo._get_batches_starting_indexes": [[130, 157], ["numpy.arange", "numpy.random.permutation", "range", "len"], "methods", ["None"], ["", "def", "_get_batches_starting_indexes", "(", "self", ")", ":", "\n", "        ", "\"\"\"Gives, for each batch, the indexes of the observations given to\n        the model and the experiences used to compute the loss at first.\n\n        First, the indexes are the integers from 0 to `self.num_frames` with a step of\n        `self.recurrence`, shifted by `self.recurrence//2` one time in two for having\n        more diverse batches. Then, the indexes are splited into the different batches.\n\n        Returns\n        -------\n        batches_starting_indexes : list of list of int\n            the indexes of the experiences to be used at first for each batch\n        \"\"\"", "\n", "\n", "indexes", "=", "numpy", ".", "arange", "(", "0", ",", "self", ".", "num_frames", ",", "self", ".", "recurrence", ")", "\n", "indexes", "=", "numpy", ".", "random", ".", "permutation", "(", "indexes", ")", "\n", "\n", "# Shift starting indexes by self.recurrence//2 half the time", "\n", "if", "self", ".", "batch_num", "%", "2", "==", "1", ":", "\n", "            ", "indexes", "=", "indexes", "[", "(", "indexes", "+", "self", ".", "recurrence", ")", "%", "self", ".", "num_frames_per_proc", "!=", "0", "]", "\n", "indexes", "+=", "self", ".", "recurrence", "//", "2", "\n", "", "self", ".", "batch_num", "+=", "1", "\n", "\n", "num_indexes", "=", "self", ".", "batch_size", "//", "self", ".", "recurrence", "\n", "batches_starting_indexes", "=", "[", "indexes", "[", "i", ":", "i", "+", "num_indexes", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "indexes", ")", ",", "num_indexes", ")", "]", "\n", "\n", "return", "batches_starting_indexes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.scripts.qlearn.parse_arguments": [[14, 36], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# add arguments", "\n", "parser", ".", "add_argument", "(", "'--env'", ",", "type", "=", "str", ",", "default", "=", "'../env/maze_2.txt'", ",", "\n", "help", "=", "'name of the environment'", ")", "\n", "parser", ".", "add_argument", "(", "\"--dir\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"name of the directory to episodes\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_episode'", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "\n", "help", "=", "'the number of train episodes'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_episode_length'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "'the maximum of the length of an episode'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'the learning rate of the q learning algorithm'", ")", "\n", "parser", ".", "add_argument", "(", "'--discount'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'the discount factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "0.8", ",", "\n", "help", "=", "'the value for the eps-greedy strategy'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'random seed for environment'", ")", "\n", "# parse arguments", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.scripts.qlearn.train": [[38, 109], ["set", "collections.defaultdict", "collections.defaultdict", "time.time", "progress.bar.IncrementalBar", "print", "range", "print", "time.time", "progress.bar.IncrementalBar.finish", "print", "print", "open", "csv.DictWriter", "collections.defaultdict.items", "open.close", "open", "csv.DictWriter", "open.close", "print", "maze_env.reset", "str", "progress.bar.IncrementalBar.next", "episodes_length.append", "reverse_hashing_state_action", "csv.DictWriter.writerow", "get_max_action", "csv.DictWriter.writerow", "set.add", "maze_env.step", "str", "get_max_action", "random.random", "random.randint", "get_max_action", "sum", "len", "hash_state_action", "visited_actions[].index", "random.randint", "hash_state_action"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.close", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.close", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.reverse_hashing_state_action", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.get_max_action", "home.repos.pwc.inspect_result.kebaek_minigrid.algos.dqn.ReplayMemory.add", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.get_max_action", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.get_max_action", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.hash_state_action", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.hash.hash_state_action"], ["", "def", "train", "(", "maze_env", ",", "model_dir", ",", "num_episode", ",", "max_episode_length", ",", "lr", ",", "\n", "discount", ",", "eps", ",", "**", "kwargs", ")", ":", "\n", "\n", "# create value function and q value function", "\n", "    ", "q_value_function", "=", "{", "}", "\n", "visited_actions", "=", "{", "}", "\n", "visited_states", "=", "set", "(", ")", "\n", "q_value_function", "=", "defaultdict", "(", "lambda", ":", "0", ",", "q_value_function", ")", "\n", "visited_actions", "=", "defaultdict", "(", "lambda", ":", "[", "False", "]", "*", "maze_env", ".", "action_space", ".", "n", ",", "visited_actions", ")", "\n", "# train agent", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "episodes_length", "=", "[", "]", "\n", "bar", "=", "IncrementalBar", "(", "'Countdown'", ",", "max", "=", "num_episode", ")", "\n", "\n", "print", "(", "\"Start to train q value function.\"", ")", "\n", "for", "_", "in", "range", "(", "num_episode", ")", ":", "\n", "        ", "current_length", "=", "0", "\n", "is_terminal", "=", "0", "\n", "obs", "=", "maze_env", ".", "reset", "(", ")", "\n", "state", "=", "str", "(", "maze_env", ")", "\n", "while", "not", "is_terminal", ":", "\n", "            ", "visited_states", ".", "add", "(", "state", ")", "\n", "if", "random", ".", "random", "(", ")", "<=", "eps", ":", "\n", "                ", "action", "=", "random", ".", "randint", "(", "0", ",", "maze_env", ".", "action_space", ".", "n", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "action", ",", "value", "=", "get_max_action", "(", "state", ",", "q_value_function", ",", "maze_env", ")", "\n", "if", "value", "==", "0", ":", "\n", "                    ", "if", "False", "in", "visited_actions", "[", "state", "]", ":", "\n", "                        ", "action", "=", "visited_actions", "[", "state", "]", ".", "index", "(", "False", ")", "\n", "", "else", ":", "\n", "                        ", "action", "=", "random", ".", "randint", "(", "0", ",", "maze_env", ".", "action_space", ".", "n", "-", "1", ")", "\n", "", "", "", "visited_actions", "[", "state", "]", "[", "action", "]", "=", "True", "\n", "\n", "next_obs", ",", "reward", ",", "is_terminal", ",", "info", "=", "maze_env", ".", "step", "(", "action", ")", "\n", "next_state", "=", "str", "(", "maze_env", ")", "\n", "current_length", "+=", "1", "\n", "next_action", ",", "next_q_value", "=", "get_max_action", "(", "next_state", ",", "q_value_function", ",", "maze_env", ")", "\n", "max_q_value_target", "=", "reward", "+", "discount", "*", "next_q_value", "\n", "q_value_function", "[", "hash_state_action", "(", "state", ",", "action", ")", "]", "=", "(", "1", "-", "lr", ")", "*", "q_value_function", "[", "hash_state_action", "(", "state", ",", "action", ")", "]", "+", "lr", "*", "max_q_value_target", "\n", "state", "=", "next_state", "\n", "", "bar", ".", "next", "(", ")", "\n", "episodes_length", ".", "append", "(", "current_length", ")", "\n", "", "print", "(", "\"Finish training q value function.\"", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "bar", ".", "finish", "(", ")", "\n", "print", "(", "\"[Statistics]: Avg_length {0} and Time {1}s\"", ".", "format", "(", "sum", "(", "episodes_length", ")", "/", "len", "(", "episodes_length", ")", ",", "end", "-", "start", ")", ")", "\n", "\n", "# output", "\n", "print", "(", "\"Start to output q value function and policy to file.\"", ")", "\n", "file", "=", "open", "(", "model_dir", "+", "'/q_value.csv'", ",", "\"w\"", ")", "\n", "fieldnames", "=", "[", "'state'", ",", "'action'", ",", "'value'", "]", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "file", ",", "fieldnames", "=", "fieldnames", ")", "\n", "for", "key", ",", "value", "in", "q_value_function", ".", "items", "(", ")", ":", "\n", "        ", "state", ",", "action", "=", "reverse_hashing_state_action", "(", "key", ")", "\n", "writer", ".", "writerow", "(", "{", "'state'", ":", "state", ",", "'action'", ":", "action", ",", "'value'", ":", "value", "}", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n", "file", "=", "open", "(", "model_dir", "+", "'/policy.csv'", ",", "\"w\"", ")", "\n", "fieldnames", "=", "[", "'state'", ",", "'action'", "]", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "file", ",", "fieldnames", "=", "fieldnames", ")", "\n", "for", "state", "in", "visited_states", ":", "\n", "        ", "action", ",", "value", "=", "get_max_action", "(", "state", ",", "q_value_function", ",", "maze_env", ")", "\n", "if", "value", "==", "0", ":", "\n", "            ", "action", "=", "-", "1", "\n", "", "writer", ".", "writerow", "(", "{", "'state'", ":", "state", ",", "'action'", ":", "action", "}", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n", "\n", "\n", "print", "(", "\"Finish outputting q value function to file.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.scripts.qlearn.main": [[111, 123], ["qlearn.parse_arguments", "utils.make_env", "print", "utils.get_model_dir", "os.makedirs", "print", "qlearn.train", "vars"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.scripts.qlearn.parse_arguments", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.env.make_env", "home.repos.pwc.inspect_result.kebaek_minigrid.utils.storage.get_model_dir", "home.repos.pwc.inspect_result.kebaek_minigrid.scripts.qlearn.train"], ["", "def", "main", "(", ")", ":", "\n", "# parse arguments", "\n", "    ", "args", "=", "parse_arguments", "(", ")", "\n", "# create env", "\n", "maze_env", "=", "utils", ".", "make_env", "(", "args", ".", "env", ",", "args", ".", "seed", "+", "10000", ")", "\n", "print", "(", "'Environment Loaded\\n'", ")", "\n", "\n", "model_dir", "=", "utils", ".", "get_model_dir", "(", "args", ".", "env", "+", "'/'", "+", "args", ".", "dir", "+", "'/aQL/lr%.2f_discount%.2f_eps%.2f/epi%dseed%d'", "%", "(", "args", ".", "lr", ",", "args", ".", "discount", ",", "args", ".", "eps", ",", "args", ".", "num_episode", ",", "args", ".", "seed", ")", ")", "\n", "os", ".", "makedirs", "(", "model_dir", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "model_dir", ")", "\n", "# train agent", "\n", "train", "(", "maze_env", ",", "model_dir", ",", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.scripts._init_paths.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym-minigrid.manual_control.redraw": [[11, 16], ["window.show_img", "env.render"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.show_img", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.render"], ["def", "redraw", "(", "img", ")", ":", "\n", "    ", "if", "not", "args", ".", "agent_view", ":", "\n", "        ", "img", "=", "env", ".", "render", "(", "'rgb_array'", ",", "tile_size", "=", "args", ".", "tile_size", ")", "\n", "\n", "", "window", ".", "show_img", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym-minigrid.manual_control.reset": [[17, 28], ["env.reset", "hasattr", "manual_control.redraw", "env.seed", "print", "window.set_caption"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.kebaek_minigrid.gym-minigrid.manual_control.redraw", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.set_caption"], ["", "def", "reset", "(", ")", ":", "\n", "    ", "if", "args", ".", "seed", "!=", "-", "1", ":", "\n", "        ", "env", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "obs", "=", "env", ".", "reset", "(", ")", "\n", "\n", "if", "hasattr", "(", "env", ",", "'mission'", ")", ":", "\n", "        ", "print", "(", "'Mission: %s'", "%", "env", ".", "mission", ")", "\n", "window", ".", "set_caption", "(", "env", ".", "mission", ")", "\n", "\n", "", "redraw", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym-minigrid.manual_control.step": [[29, 38], ["env.step", "print", "print", "manual_control.reset", "manual_control.redraw"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.kebaek_minigrid.gym-minigrid.manual_control.redraw"], ["", "def", "step", "(", "action", ")", ":", "\n", "    ", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "print", "(", "'step=%s, reward=%.2f'", "%", "(", "env", ".", "step_count", ",", "reward", ")", ")", "\n", "\n", "if", "done", ":", "\n", "        ", "print", "(", "'done!'", ")", "\n", "reset", "(", ")", "\n", "", "else", ":", "\n", "        ", "redraw", "(", "obs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym-minigrid.manual_control.key_handler": [[39, 74], ["print", "window.close", "manual_control.reset", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step", "manual_control.step"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.close", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "", "def", "key_handler", "(", "event", ")", ":", "\n", "    ", "print", "(", "'pressed'", ",", "event", ".", "key", ")", "\n", "\n", "if", "event", ".", "key", "==", "'escape'", ":", "\n", "        ", "window", ".", "close", "(", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'backspace'", ":", "\n", "        ", "reset", "(", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'left'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "left", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'right'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "right", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'up'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "forward", ")", "\n", "return", "\n", "\n", "# Spacebar", "\n", "", "if", "event", ".", "key", "==", "' '", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "toggle", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'pageup'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "pickup", ")", "\n", "return", "\n", "", "if", "event", ".", "key", "==", "'pagedown'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "drop", ")", "\n", "return", "\n", "\n", "", "if", "event", ".", "key", "==", "'enter'", ":", "\n", "        ", "step", "(", "env", ".", "actions", ".", "done", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ReseedWrapper.__init__": [[17, 21], ["list", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "seeds", "=", "[", "0", "]", ",", "seed_idx", "=", "0", ")", ":", "\n", "        ", "self", ".", "seeds", "=", "list", "(", "seeds", ")", "\n", "self", ".", "seed_idx", "=", "seed_idx", "\n", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ReseedWrapper.reset": [[22, 27], ["wrappers.ReseedWrapper.env.seed", "wrappers.ReseedWrapper.env.reset", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "seed", "=", "self", ".", "seeds", "[", "self", ".", "seed_idx", "]", "\n", "self", ".", "seed_idx", "=", "(", "self", ".", "seed_idx", "+", "1", ")", "%", "len", "(", "self", ".", "seeds", ")", "\n", "self", ".", "env", ".", "seed", "(", "seed", ")", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ReseedWrapper.step": [[28, 31], ["wrappers.ReseedWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ActionBonus.__init__": [[39, 42], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ActionBonus.step": [[43, 62], ["wrappers.ActionBonus.env.step", "tuple", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "env", "=", "self", ".", "unwrapped", "\n", "tup", "=", "(", "tuple", "(", "env", ".", "agent_pos", ")", ",", "env", ".", "agent_dir", ",", "action", ")", "\n", "\n", "# Get the count for this (s,a) pair", "\n", "pre_count", "=", "0", "\n", "if", "tup", "in", "self", ".", "counts", ":", "\n", "            ", "pre_count", "=", "self", ".", "counts", "[", "tup", "]", "\n", "\n", "# Update the count for this (s,a) pair", "\n", "", "new_count", "=", "pre_count", "+", "1", "\n", "self", ".", "counts", "[", "tup", "]", "=", "new_count", "\n", "\n", "bonus", "=", "1", "/", "math", ".", "sqrt", "(", "new_count", ")", "\n", "reward", "+=", "bonus", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ActionBonus.reset": [[63, 65], ["wrappers.ActionBonus.env.reset"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.StateBonus.__init__": [[72, 75], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "counts", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.StateBonus.step": [[76, 97], ["wrappers.StateBonus.env.step", "tuple", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n", "# Tuple based on which we index the counts", "\n", "# We use the position after an update", "\n", "env", "=", "self", ".", "unwrapped", "\n", "tup", "=", "(", "tuple", "(", "env", ".", "agent_pos", ")", ")", "\n", "\n", "# Get the count for this key", "\n", "pre_count", "=", "0", "\n", "if", "tup", "in", "self", ".", "counts", ":", "\n", "            ", "pre_count", "=", "self", ".", "counts", "[", "tup", "]", "\n", "\n", "# Update the count for this key", "\n", "", "new_count", "=", "pre_count", "+", "1", "\n", "self", ".", "counts", "[", "tup", "]", "=", "new_count", "\n", "\n", "bonus", "=", "1", "/", "math", ".", "sqrt", "(", "new_count", ")", "\n", "reward", "+=", "bonus", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.StateBonus.reset": [[98, 100], ["wrappers.StateBonus.env.reset"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ImgObsWrapper.__init__": [[106, 109], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "observation_space", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ImgObsWrapper.observation": [[110, 112], ["None"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "return", "obs", "[", "'image'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.OneHotPartialObsWrapper.__init__": [[119, 134], ["super().__init__", "gym.spaces.Box", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "tile_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", "[", "'image'", "]", ".", "shape", "\n", "\n", "# Number of bits per cell", "\n", "num_bits", "=", "len", "(", "OBJECT_TO_IDX", ")", "+", "len", "(", "COLOR_TO_IDX", ")", "+", "len", "(", "STATE_TO_IDX", ")", "\n", "\n", "self", ".", "observation_space", ".", "spaces", "[", "\"image\"", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "obs_shape", "[", "0", "]", ",", "obs_shape", "[", "1", "]", ",", "num_bits", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.OneHotPartialObsWrapper.observation": [[136, 153], ["numpy.zeros", "range", "range", "len", "len", "len"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "img", "=", "obs", "[", "'image'", "]", "\n", "out", "=", "np", ".", "zeros", "(", "self", ".", "observation_space", ".", "spaces", "[", "'image'", "]", ".", "shape", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "img", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "type", "=", "img", "[", "i", ",", "j", ",", "0", "]", "\n", "color", "=", "img", "[", "i", ",", "j", ",", "1", "]", "\n", "state", "=", "img", "[", "i", ",", "j", ",", "2", "]", "\n", "\n", "out", "[", "i", ",", "j", ",", "type", "]", "=", "1", "\n", "out", "[", "i", ",", "j", ",", "len", "(", "OBJECT_TO_IDX", ")", "+", "color", "]", "=", "1", "\n", "out", "[", "i", ",", "j", ",", "len", "(", "OBJECT_TO_IDX", ")", "+", "len", "(", "COLOR_TO_IDX", ")", "+", "state", "]", "=", "1", "\n", "\n", "", "", "return", "{", "\n", "'mission'", ":", "obs", "[", "'mission'", "]", ",", "\n", "'image'", ":", "out", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.RGBImgObsWrapper.__init__": [[162, 172], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "tile_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n", "self", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", "*", "tile_size", ",", "self", ".", "env", ".", "height", "*", "tile_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.RGBImgObsWrapper.observation": [[174, 186], ["env.render"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "\n", "rgb_img", "=", "env", ".", "render", "(", "\n", "mode", "=", "'rgb_array'", ",", "\n", "highlight", "=", "False", ",", "\n", "tile_size", "=", "self", ".", "tile_size", "\n", ")", "\n", "\n", "return", "{", "\n", "'mission'", ":", "obs", "[", "'mission'", "]", ",", "\n", "'image'", ":", "rgb_img", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.RGBImgPartialObsWrapper.__init__": [[195, 206], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "tile_size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "tile_size", "=", "tile_size", "\n", "\n", "obs_shape", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", ".", "shape", "\n", "self", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "obs_shape", "[", "0", "]", "*", "tile_size", ",", "obs_shape", "[", "1", "]", "*", "tile_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.RGBImgPartialObsWrapper.observation": [[208, 219], ["env.get_obs_render"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.get_obs_render"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "\n", "rgb_img_partial", "=", "env", ".", "get_obs_render", "(", "\n", "obs", "[", "'image'", "]", ",", "\n", "tile_size", "=", "self", ".", "tile_size", "\n", ")", "\n", "\n", "return", "{", "\n", "'mission'", ":", "obs", "[", "'mission'", "]", ",", "\n", "'image'", ":", "rgb_img_partial", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.FullyObsWrapper.__init__": [[226, 234], ["super().__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "observation_space", ".", "spaces", "[", "\"image\"", "]", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "env", ".", "width", ",", "self", ".", "env", ".", "height", ",", "3", ")", ",", "# number of cells", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.FullyObsWrapper.observation": [[236, 248], ["env.grid.encode", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "env", "=", "self", ".", "unwrapped", "\n", "full_grid", "=", "env", ".", "grid", ".", "encode", "(", ")", "\n", "full_grid", "[", "env", ".", "agent_pos", "[", "0", "]", "]", "[", "env", ".", "agent_pos", "[", "1", "]", "]", "=", "np", ".", "array", "(", "[", "\n", "OBJECT_TO_IDX", "[", "'agent'", "]", ",", "\n", "COLOR_TO_IDX", "[", "'red'", "]", ",", "\n", "env", ".", "agent_dir", "\n", "]", ")", "\n", "\n", "return", "{", "\n", "'mission'", ":", "obs", "[", "'mission'", "]", ",", "\n", "'image'", ":", "full_grid", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.FlatObsWrapper.__init__": [[256, 274], ["super().__init__", "functools.reduce", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "maxStrLen", "=", "96", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "self", ".", "maxStrLen", "=", "maxStrLen", "\n", "self", ".", "numCharCodes", "=", "27", "\n", "\n", "imgSpace", "=", "env", ".", "observation_space", ".", "spaces", "[", "'image'", "]", "\n", "imgSize", "=", "reduce", "(", "operator", ".", "mul", ",", "imgSpace", ".", "shape", ",", "1", ")", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "imgSize", "+", "self", ".", "numCharCodes", "*", "self", ".", "maxStrLen", ",", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "\n", "self", ".", "cachedStr", "=", "None", "\n", "self", ".", "cachedArray", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.FlatObsWrapper.observation": [[275, 300], ["numpy.concatenate", "mission.lower.lower.lower", "numpy.zeros", "enumerate", "len", "len", "image.flatten", "wrappers.FlatObsWrapper.cachedArray.flatten", "ord", "ord", "ord", "ord"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "image", "=", "obs", "[", "'image'", "]", "\n", "mission", "=", "obs", "[", "'mission'", "]", "\n", "\n", "# Cache the last-encoded mission string", "\n", "if", "mission", "!=", "self", ".", "cachedStr", ":", "\n", "            ", "assert", "len", "(", "mission", ")", "<=", "self", ".", "maxStrLen", ",", "'mission string too long ({} chars)'", ".", "format", "(", "len", "(", "mission", ")", ")", "\n", "mission", "=", "mission", ".", "lower", "(", ")", "\n", "\n", "strArray", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "maxStrLen", ",", "self", ".", "numCharCodes", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "idx", ",", "ch", "in", "enumerate", "(", "mission", ")", ":", "\n", "                ", "if", "ch", ">=", "'a'", "and", "ch", "<=", "'z'", ":", "\n", "                    ", "chNo", "=", "ord", "(", "ch", ")", "-", "ord", "(", "'a'", ")", "\n", "", "elif", "ch", "==", "' '", ":", "\n", "                    ", "chNo", "=", "ord", "(", "'z'", ")", "-", "ord", "(", "'a'", ")", "+", "1", "\n", "", "assert", "chNo", "<", "self", ".", "numCharCodes", ",", "'%s : %d'", "%", "(", "ch", ",", "chNo", ")", "\n", "strArray", "[", "idx", ",", "chNo", "]", "=", "1", "\n", "\n", "", "self", ".", "cachedStr", "=", "mission", "\n", "self", ".", "cachedArray", "=", "strArray", "\n", "\n", "", "obs", "=", "np", ".", "concatenate", "(", "(", "image", ".", "flatten", "(", ")", ",", "self", ".", "cachedArray", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ViewSizeWrapper.__init__": [[307, 327], ["super().__init__", "gym.spaces.Box", "gym.spaces.Dict"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "agent_view_size", "=", "7", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "\n", "assert", "agent_view_size", "%", "2", "==", "1", "\n", "assert", "agent_view_size", ">=", "3", "\n", "\n", "# Override default view size", "\n", "env", ".", "unwrapped", ".", "agent_view_size", "=", "agent_view_size", "\n", "\n", "# Compute observation space with specified view size", "\n", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "agent_view_size", ",", "agent_view_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "\n", "# Override the environment's observation space", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "{", "\n", "'image'", ":", "observation_space", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ViewSizeWrapper.reset": [[329, 331], ["wrappers.ViewSizeWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.ViewSizeWrapper.step": [[332, 334], ["wrappers.ViewSizeWrapper.env.step"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.DirectionObsWrapper.__init__": [[341, 345], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "type", "=", "'slope'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "goal_position", "=", "None", "\n", "self", ".", "type", "=", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.DirectionObsWrapper.reset": [[346, 353], ["wrappers.DirectionObsWrapper.env.reset", "len", "enumerate", "isinstance", "int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "if", "not", "self", ".", "goal_position", ":", "\n", "            ", "self", ".", "goal_position", "=", "[", "x", "for", "x", ",", "y", "in", "enumerate", "(", "self", ".", "grid", ".", "grid", ")", "if", "isinstance", "(", "y", ",", "(", "Goal", ")", ")", "]", "\n", "if", "len", "(", "self", ".", "goal_position", ")", ">=", "1", ":", "# in case there are multiple goals , needs to be handled for other env types", "\n", "                ", "self", ".", "goal_position", "=", "(", "int", "(", "self", ".", "goal_position", "[", "0", "]", "/", "self", ".", "height", ")", ",", "self", ".", "goal_position", "[", "0", "]", "%", "self", ".", "width", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.wrappers.DirectionObsWrapper.observation": [[354, 358], ["numpy.divide", "numpy.arctan"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "slope", "=", "np", ".", "divide", "(", "self", ".", "goal_position", "[", "1", "]", "-", "self", ".", "agent_pos", "[", "1", "]", ",", "self", ".", "goal_position", "[", "0", "]", "-", "self", ".", "agent_pos", "[", "0", "]", ")", "\n", "obs", "[", "'goal_direction'", "]", "=", "np", ".", "arctan", "(", "slope", ")", "if", "self", ".", "type", "==", "'angle'", "else", "slope", "\n", "return", "obs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.downsample": [[4, 17], ["img.mean.reshape", "img.mean.mean", "img.mean.mean"], "function", ["None"], ["def", "downsample", "(", "img", ",", "factor", ")", ":", "\n", "    ", "\"\"\"\n    Downsample an image along both dimensions by some factor\n    \"\"\"", "\n", "\n", "assert", "img", ".", "shape", "[", "0", "]", "%", "factor", "==", "0", "\n", "assert", "img", ".", "shape", "[", "1", "]", "%", "factor", "==", "0", "\n", "\n", "img", "=", "img", ".", "reshape", "(", "[", "img", ".", "shape", "[", "0", "]", "//", "factor", ",", "factor", ",", "img", ".", "shape", "[", "1", "]", "//", "factor", ",", "factor", ",", "3", "]", ")", "\n", "img", "=", "img", ".", "mean", "(", "axis", "=", "3", ")", "\n", "img", "=", "img", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords": [[18, 31], ["range", "range", "rendering.point_in_line.fn"], "function", ["None"], ["", "def", "fill_coords", "(", "img", ",", "fn", ",", "color", ")", ":", "\n", "    ", "\"\"\"\n    Fill pixels of an image with coordinates matching a filter function\n    \"\"\"", "\n", "\n", "for", "y", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "img", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "yf", "=", "(", "y", "+", "0.5", ")", "/", "img", ".", "shape", "[", "0", "]", "\n", "xf", "=", "(", "x", "+", "0.5", ")", "/", "img", ".", "shape", "[", "1", "]", "\n", "if", "fn", "(", "xf", ",", "yf", ")", ":", "\n", "                ", "img", "[", "y", ",", "x", "]", "=", "color", "\n", "\n", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.rotate_fn": [[32, 43], ["fin", "math.sin", "math.sin", "math.cos", "math.cos"], "function", ["None"], ["", "def", "rotate_fn", "(", "fin", ",", "cx", ",", "cy", ",", "theta", ")", ":", "\n", "    ", "def", "fout", "(", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "x", "-", "cx", "\n", "y", "=", "y", "-", "cy", "\n", "\n", "x2", "=", "cx", "+", "x", "*", "math", ".", "cos", "(", "-", "theta", ")", "-", "y", "*", "math", ".", "sin", "(", "-", "theta", ")", "\n", "y2", "=", "cy", "+", "y", "*", "math", ".", "cos", "(", "-", "theta", ")", "+", "x", "*", "math", ".", "sin", "(", "-", "theta", ")", "\n", "\n", "return", "fin", "(", "x2", ",", "y2", ")", "\n", "\n", "", "return", "fout", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_line": [[44, 73], ["numpy.array", "numpy.array", "numpy.linalg.norm", "min", "max", "min", "max", "numpy.array", "numpy.dot", "numpy.clip", "numpy.linalg.norm"], "function", ["None"], ["", "def", "point_in_line", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "r", ")", ":", "\n", "    ", "p0", "=", "np", ".", "array", "(", "[", "x0", ",", "y0", "]", ")", "\n", "p1", "=", "np", ".", "array", "(", "[", "x1", ",", "y1", "]", ")", "\n", "dir", "=", "p1", "-", "p0", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "dir", ")", "\n", "dir", "=", "dir", "/", "dist", "\n", "\n", "xmin", "=", "min", "(", "x0", ",", "x1", ")", "-", "r", "\n", "xmax", "=", "max", "(", "x0", ",", "x1", ")", "+", "r", "\n", "ymin", "=", "min", "(", "y0", ",", "y1", ")", "-", "r", "\n", "ymax", "=", "max", "(", "y0", ",", "y1", ")", "+", "r", "\n", "\n", "def", "fn", "(", "x", ",", "y", ")", ":", "\n", "# Fast, early escape test", "\n", "        ", "if", "x", "<", "xmin", "or", "x", ">", "xmax", "or", "y", "<", "ymin", "or", "y", ">", "ymax", ":", "\n", "            ", "return", "False", "\n", "\n", "", "q", "=", "np", ".", "array", "(", "[", "x", ",", "y", "]", ")", "\n", "pq", "=", "q", "-", "p0", "\n", "\n", "# Closest point on line", "\n", "a", "=", "np", ".", "dot", "(", "pq", ",", "dir", ")", "\n", "a", "=", "np", ".", "clip", "(", "a", ",", "0", ",", "dist", ")", "\n", "p", "=", "p0", "+", "a", "*", "dir", "\n", "\n", "dist_to_line", "=", "np", ".", "linalg", ".", "norm", "(", "q", "-", "p", ")", "\n", "return", "dist_to_line", "<=", "r", "\n", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_circle": [[74, 78], ["None"], "function", ["None"], ["", "def", "point_in_circle", "(", "cx", ",", "cy", ",", "r", ")", ":", "\n", "    ", "def", "fn", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "(", "x", "-", "cx", ")", "*", "(", "x", "-", "cx", ")", "+", "(", "y", "-", "cy", ")", "*", "(", "y", "-", "cy", ")", "<=", "r", "*", "r", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect": [[79, 83], ["None"], "function", ["None"], ["", "def", "point_in_rect", "(", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", ")", ":", "\n", "    ", "def", "fn", "(", "x", ",", "y", ")", ":", "\n", "        ", "return", "x", ">=", "xmin", "and", "x", "<=", "xmax", "and", "y", ">=", "ymin", "and", "y", "<=", "ymax", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_triangle": [[84, 110], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.array"], "function", ["None"], ["", "def", "point_in_triangle", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "a", "=", "np", ".", "array", "(", "a", ")", "\n", "b", "=", "np", ".", "array", "(", "b", ")", "\n", "c", "=", "np", ".", "array", "(", "c", ")", "\n", "\n", "def", "fn", "(", "x", ",", "y", ")", ":", "\n", "        ", "v0", "=", "c", "-", "a", "\n", "v1", "=", "b", "-", "a", "\n", "v2", "=", "np", ".", "array", "(", "(", "x", ",", "y", ")", ")", "-", "a", "\n", "\n", "# Compute dot products", "\n", "dot00", "=", "np", ".", "dot", "(", "v0", ",", "v0", ")", "\n", "dot01", "=", "np", ".", "dot", "(", "v0", ",", "v1", ")", "\n", "dot02", "=", "np", ".", "dot", "(", "v0", ",", "v2", ")", "\n", "dot11", "=", "np", ".", "dot", "(", "v1", ",", "v1", ")", "\n", "dot12", "=", "np", ".", "dot", "(", "v1", ",", "v2", ")", "\n", "\n", "# Compute barycentric coordinates", "\n", "inv_denom", "=", "1", "/", "(", "dot00", "*", "dot11", "-", "dot01", "*", "dot01", ")", "\n", "u", "=", "(", "dot11", "*", "dot02", "-", "dot01", "*", "dot12", ")", "*", "inv_denom", "\n", "v", "=", "(", "dot00", "*", "dot12", "-", "dot01", "*", "dot02", ")", "*", "inv_denom", "\n", "\n", "# Check if point is in triangle", "\n", "return", "(", "u", ">=", "0", ")", "and", "(", "v", ">=", "0", ")", "and", "(", "u", "+", "v", ")", "<", "1", "\n", "\n", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.highlight_img": [[111, 119], ["blend_img.clip().astype.clip().astype", "blend_img.clip().astype.clip", "numpy.array"], "function", ["None"], ["", "def", "highlight_img", "(", "img", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "alpha", "=", "0.30", ")", ":", "\n", "    ", "\"\"\"\n    Add highlighting to an image\n    \"\"\"", "\n", "\n", "blend_img", "=", "img", "+", "alpha", "*", "(", "np", ".", "array", "(", "color", ",", "dtype", "=", "np", ".", "uint8", ")", "-", "img", ")", "\n", "blend_img", "=", "blend_img", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img", "[", ":", ",", ":", ",", ":", "]", "=", "blend_img", "\n", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.__init__": [[85, 97], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "type", ",", "color", ")", ":", "\n", "        ", "assert", "type", "in", "OBJECT_TO_IDX", ",", "type", "\n", "assert", "color", "in", "COLOR_TO_IDX", ",", "color", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "contains", "=", "None", "\n", "\n", "# Initial position of the object", "\n", "self", ".", "init_pos", "=", "None", "\n", "\n", "# Current position of the object", "\n", "self", ".", "cur_pos", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.can_overlap": [[98, 101], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent overlap with this?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.can_pickup": [[102, 105], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent pick this up?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.can_contain": [[106, 109], ["None"], "methods", ["None"], ["", "def", "can_contain", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can this contain another object?\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.see_behind": [[110, 113], ["None"], "methods", ["None"], ["", "def", "see_behind", "(", "self", ")", ":", "\n", "        ", "\"\"\"Can the agent see behind this object?\"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.toggle": [[114, 117], ["None"], "methods", ["None"], ["", "def", "toggle", "(", "self", ",", "env", ",", "pos", ")", ":", "\n", "        ", "\"\"\"Method to trigger/toggle an action this object performs\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.encode": [[118, 121], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Encode the a description of this object as a 3-tuple of integers\"\"\"", "\n", "return", "(", "OBJECT_TO_IDX", "[", "self", ".", "type", "]", ",", "COLOR_TO_IDX", "[", "self", ".", "color", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.decode": [[122, 156], ["minigrid.Wall", "minigrid.Floor", "minigrid.Ball", "minigrid.Key", "minigrid.Box", "minigrid.Door", "minigrid.Goal", "minigrid.Lava"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "decode", "(", "type_idx", ",", "color_idx", ",", "state", ")", ":", "\n", "        ", "\"\"\"Create an object from a 3-tuple state description\"\"\"", "\n", "\n", "obj_type", "=", "IDX_TO_OBJECT", "[", "type_idx", "]", "\n", "color", "=", "IDX_TO_COLOR", "[", "color_idx", "]", "\n", "\n", "if", "obj_type", "==", "'empty'", "or", "obj_type", "==", "'unseen'", ":", "\n", "            ", "return", "None", "\n", "\n", "# State, 0: open, 1: closed, 2: locked", "\n", "", "is_open", "=", "state", "==", "0", "\n", "is_locked", "=", "state", "==", "2", "\n", "\n", "if", "obj_type", "==", "'wall'", ":", "\n", "            ", "v", "=", "Wall", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'floor'", ":", "\n", "            ", "v", "=", "Floor", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'ball'", ":", "\n", "            ", "v", "=", "Ball", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'key'", ":", "\n", "            ", "v", "=", "Key", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'box'", ":", "\n", "            ", "v", "=", "Box", "(", "color", ")", "\n", "", "elif", "obj_type", "==", "'door'", ":", "\n", "            ", "v", "=", "Door", "(", "color", ",", "is_open", ",", "is_locked", ")", "\n", "", "elif", "obj_type", "==", "'goal'", ":", "\n", "            ", "v", "=", "Goal", "(", ")", "\n", "", "elif", "obj_type", "==", "'lava'", ":", "\n", "            ", "v", "=", "Lava", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown object type in decode '%s'\"", "%", "obj_type", "\n", "\n", "", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.WorldObj.render": [[157, 160], ["None"], "methods", ["None"], ["", "def", "render", "(", "self", ",", "r", ")", ":", "\n", "        ", "\"\"\"Draw this object with the given renderer\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Goal.__init__": [[162, 164], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'goal'", ",", "'green'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Goal.can_overlap": [[165, 167], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Goal.render": [[168, 170], ["rendering.fill_coords", "rendering.point_in_rect"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "COLORS", "[", "self", ".", "color", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Floor.__init__": [[176, 178], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "color", "=", "'blue'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'floor'", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Floor.can_overlap": [[179, 181], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Floor.render": [[182, 186], ["rendering.fill_coords", "rendering.point_in_rect"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "# Give the floor a pale color", "\n", "        ", "color", "=", "COLORS", "[", "self", ".", "color", "]", "/", "2", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.031", ",", "1", ",", "0.031", ",", "1", ")", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Lava.__init__": [[189, 191], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'lava'", ",", "'red'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Lava.can_overlap": [[192, 194], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Lava.render": [[195, 209], ["rendering.fill_coords", "range", "rendering.point_in_rect", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.point_in_line", "rendering.point_in_line", "rendering.point_in_line", "rendering.point_in_line"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_line", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_line", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_line", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_line"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "c", "=", "(", "255", ",", "128", ",", "0", ")", "\n", "\n", "# Background color", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "c", ")", "\n", "\n", "# Little waves", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "ylo", "=", "0.3", "+", "0.2", "*", "i", "\n", "yhi", "=", "0.4", "+", "0.2", "*", "i", "\n", "fill_coords", "(", "img", ",", "point_in_line", "(", "0.1", ",", "ylo", ",", "0.3", ",", "yhi", ",", "r", "=", "0.03", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_line", "(", "0.3", ",", "yhi", ",", "0.5", ",", "ylo", ",", "r", "=", "0.03", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_line", "(", "0.5", ",", "ylo", ",", "0.7", ",", "yhi", ",", "r", "=", "0.03", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_line", "(", "0.7", ",", "yhi", ",", "0.9", ",", "ylo", ",", "r", "=", "0.03", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Wall.__init__": [[211, 213], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'grey'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'wall'", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Wall.see_behind": [[214, 216], ["None"], "methods", ["None"], ["", "def", "see_behind", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Wall.render": [[217, 219], ["rendering.fill_coords", "rendering.point_in_rect"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "COLORS", "[", "self", ".", "color", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.__init__": [[221, 225], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", ",", "is_open", "=", "False", ",", "is_locked", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "'door'", ",", "color", ")", "\n", "self", ".", "is_open", "=", "is_open", "\n", "self", ".", "is_locked", "=", "is_locked", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.can_overlap": [[226, 229], ["None"], "methods", ["None"], ["", "def", "can_overlap", "(", "self", ")", ":", "\n", "        ", "\"\"\"The agent can only walk over this cell when the door is open\"\"\"", "\n", "return", "self", ".", "is_open", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.see_behind": [[230, 232], ["None"], "methods", ["None"], ["", "def", "see_behind", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "is_open", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.toggle": [[233, 243], ["None"], "methods", ["None"], ["", "def", "toggle", "(", "self", ",", "env", ",", "pos", ")", ":", "\n", "# If the player has the right key to open the door", "\n", "        ", "if", "self", ".", "is_locked", ":", "\n", "            ", "if", "self", ".", "color", "in", "env", ".", "carrying", ":", "\n", "                ", "self", ".", "is_locked", "=", "False", "\n", "self", ".", "is_open", "=", "True", "\n", "return", "True", "\n", "", "return", "False", "\n", "#self.is_open = not self.is_open", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.encode": [[244, 256], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ")", ":", "\n", "        ", "\"\"\"Encode the a description of this object as a 3-tuple of integers\"\"\"", "\n", "\n", "# State, 0: open, 1: closed, 2: locked", "\n", "if", "self", ".", "is_open", ":", "\n", "            ", "state", "=", "0", "\n", "", "elif", "self", ".", "is_locked", ":", "\n", "            ", "state", "=", "2", "\n", "", "elif", "not", "self", ".", "is_open", ":", "\n", "            ", "state", "=", "1", "\n", "\n", "", "return", "(", "OBJECT_TO_IDX", "[", "self", ".", "type", "]", ",", "COLOR_TO_IDX", "[", "self", ".", "color", "]", ",", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.render": [[257, 280], ["rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_circle", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_circle"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "c", "=", "COLORS", "[", "self", ".", "color", "]", "\n", "\n", "if", "self", ".", "is_open", ":", "\n", "            ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.88", ",", "1.00", ",", "0.00", ",", "1.00", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.92", ",", "0.96", ",", "0.04", ",", "0.96", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "return", "\n", "\n", "# Door frame and door", "\n", "", "if", "self", ".", "is_locked", ":", "\n", "            ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.00", ",", "1.00", ",", "0.00", ",", "1.00", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.06", ",", "0.94", ",", "0.06", ",", "0.94", ")", ",", "0.45", "*", "np", ".", "array", "(", "c", ")", ")", "\n", "\n", "# Draw key slot", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.52", ",", "0.75", ",", "0.50", ",", "0.56", ")", ",", "c", ")", "\n", "", "else", ":", "\n", "            ", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.00", ",", "1.00", ",", "0.00", ",", "1.00", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.04", ",", "0.96", ",", "0.04", ",", "0.96", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.08", ",", "0.92", ",", "0.08", ",", "0.92", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.12", ",", "0.88", ",", "0.12", ",", "0.88", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "# Draw door handle", "\n", "fill_coords", "(", "img", ",", "point_in_circle", "(", "cx", "=", "0.75", ",", "cy", "=", "0.50", ",", "r", "=", "0.08", ")", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Key.__init__": [[282, 284], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'blue'", ")", ":", "\n", "        ", "super", "(", "Key", ",", "self", ")", ".", "__init__", "(", "'key'", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Key.can_pickup": [[285, 287], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Key.render": [[288, 301], ["rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_circle", "rendering.point_in_circle"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_circle", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_circle"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "c", "=", "COLORS", "[", "self", ".", "color", "]", "\n", "\n", "# Vertical quad", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.50", ",", "0.63", ",", "0.31", ",", "0.88", ")", ",", "c", ")", "\n", "\n", "# Teeth", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.38", ",", "0.50", ",", "0.59", ",", "0.66", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.38", ",", "0.50", ",", "0.81", ",", "0.88", ")", ",", "c", ")", "\n", "\n", "# Ring", "\n", "fill_coords", "(", "img", ",", "point_in_circle", "(", "cx", "=", "0.56", ",", "cy", "=", "0.28", ",", "r", "=", "0.190", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_circle", "(", "cx", "=", "0.56", ",", "cy", "=", "0.28", ",", "r", "=", "0.064", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Ball.__init__": [[303, 305], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", "=", "'blue'", ")", ":", "\n", "        ", "super", "(", "Ball", ",", "self", ")", ".", "__init__", "(", "'ball'", ",", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Ball.can_pickup": [[306, 308], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Ball.render": [[309, 311], ["rendering.fill_coords", "rendering.point_in_circle"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_circle"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "fill_coords", "(", "img", ",", "point_in_circle", "(", "0.5", ",", "0.5", ",", "0.31", ")", ",", "COLORS", "[", "self", ".", "color", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.__init__": [[313, 316], ["minigrid.WorldObj.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "color", ",", "contains", "=", "None", ")", ":", "\n", "        ", "super", "(", "Box", ",", "self", ")", ".", "__init__", "(", "'box'", ",", "color", ")", "\n", "self", ".", "contains", "=", "contains", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.can_pickup": [[317, 319], ["None"], "methods", ["None"], ["", "def", "can_pickup", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.render": [[320, 329], ["rendering.fill_coords", "rendering.fill_coords", "rendering.fill_coords", "rendering.point_in_rect", "rendering.point_in_rect", "rendering.point_in_rect"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect"], ["", "def", "render", "(", "self", ",", "img", ")", ":", "\n", "        ", "c", "=", "COLORS", "[", "self", ".", "color", "]", "\n", "\n", "# Outline", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.12", ",", "0.88", ",", "0.12", ",", "0.88", ")", ",", "c", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.18", ",", "0.82", ",", "0.18", ",", "0.82", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "\n", "# Horizontal slit", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0.16", ",", "0.84", ",", "0.47", ",", "0.53", ")", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.toggle": [[330, 334], ["env.grid.set"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "toggle", "(", "self", ",", "env", ",", "pos", ")", ":", "\n", "# Replace the box by its contents", "\n", "        ", "env", ".", "grid", ".", "set", "(", "*", "pos", ",", "self", ".", "contains", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.__init__": [[343, 351], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "width", ">=", "3", "\n", "assert", "height", ">=", "3", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n", "self", ".", "grid", "=", "[", "None", "]", "*", "width", "*", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.__contains__": [[352, 366], ["isinstance", "isinstance"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "isinstance", "(", "key", ",", "WorldObj", ")", ":", "\n", "            ", "for", "e", "in", "self", ".", "grid", ":", "\n", "                ", "if", "e", "is", "key", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "elif", "isinstance", "(", "key", ",", "tuple", ")", ":", "\n", "            ", "for", "e", "in", "self", ".", "grid", ":", "\n", "                ", "if", "e", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "(", "e", ".", "color", ",", "e", ".", "type", ")", "==", "key", ":", "\n", "                    ", "return", "True", "\n", "", "if", "key", "[", "0", "]", "is", "None", "and", "key", "[", "1", "]", "==", "e", ".", "type", ":", "\n", "                    ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.__eq__": [[367, 371], ["minigrid.Grid.encode", "other.encode", "numpy.array_equal"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "grid1", "=", "self", ".", "encode", "(", ")", "\n", "grid2", "=", "other", ".", "encode", "(", ")", "\n", "return", "np", ".", "array_equal", "(", "grid2", ",", "grid1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.__ne__": [[372, 374], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.copy": [[375, 378], ["deepcopy"], "methods", ["None"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "from", "copy", "import", "deepcopy", "\n", "return", "deepcopy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set": [[379, 383], ["None"], "methods", ["None"], ["", "def", "set", "(", "self", ",", "i", ",", "j", ",", "v", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "self", ".", "width", "\n", "assert", "j", ">=", "0", "and", "j", "<", "self", ".", "height", "\n", "self", ".", "grid", "[", "j", "*", "self", ".", "width", "+", "i", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get": [[384, 388], ["None"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "assert", "i", ">=", "0", "and", "i", "<", "self", ".", "width", "\n", "assert", "j", ">=", "0", "and", "j", "<", "self", ".", "height", "\n", "return", "self", ".", "grid", "[", "j", "*", "self", ".", "width", "+", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall": [[389, 394], ["range", "minigrid.Grid.set", "obj_type"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "horz_wall", "(", "self", ",", "x", ",", "y", ",", "length", "=", "None", ",", "obj_type", "=", "Wall", ")", ":", "\n", "        ", "if", "length", "is", "None", ":", "\n", "            ", "length", "=", "self", ".", "width", "-", "x", "\n", "", "for", "i", "in", "range", "(", "0", ",", "length", ")", ":", "\n", "            ", "self", ".", "set", "(", "x", "+", "i", ",", "y", ",", "obj_type", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall": [[395, 400], ["range", "minigrid.Grid.set", "obj_type"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "", "def", "vert_wall", "(", "self", ",", "x", ",", "y", ",", "length", "=", "None", ",", "obj_type", "=", "Wall", ")", ":", "\n", "        ", "if", "length", "is", "None", ":", "\n", "            ", "length", "=", "self", ".", "height", "-", "y", "\n", "", "for", "j", "in", "range", "(", "0", ",", "length", ")", ":", "\n", "            ", "self", ".", "set", "(", "x", ",", "y", "+", "j", ",", "obj_type", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect": [[401, 406], ["minigrid.Grid.horz_wall", "minigrid.Grid.horz_wall", "minigrid.Grid.vert_wall", "minigrid.Grid.vert_wall"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall"], ["", "", "def", "wall_rect", "(", "self", ",", "x", ",", "y", ",", "w", ",", "h", ")", ":", "\n", "        ", "self", ".", "horz_wall", "(", "x", ",", "y", ",", "w", ")", "\n", "self", ".", "horz_wall", "(", "x", ",", "y", "+", "h", "-", "1", ",", "w", ")", "\n", "self", ".", "vert_wall", "(", "x", ",", "y", ",", "h", ")", "\n", "self", ".", "vert_wall", "(", "x", "+", "w", "-", "1", ",", "y", ",", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.rotate_left": [[407, 420], ["minigrid.Grid", "range", "range", "minigrid.Grid.get", "minigrid.Grid.set"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "rotate_left", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Rotate the grid to the left (counter-clockwise)\n        \"\"\"", "\n", "\n", "grid", "=", "Grid", "(", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "                ", "v", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "grid", ".", "set", "(", "j", ",", "grid", ".", "height", "-", "1", "-", "i", ",", "v", ")", "\n", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.slice": [[421, 442], ["minigrid.Grid", "range", "range", "minigrid.Grid.set", "minigrid.Grid.get", "minigrid.Wall"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get"], ["", "def", "slice", "(", "self", ",", "topX", ",", "topY", ",", "width", ",", "height", ")", ":", "\n", "        ", "\"\"\"\n        Get a subset of the grid\n        \"\"\"", "\n", "\n", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "width", ")", ":", "\n", "                ", "x", "=", "topX", "+", "i", "\n", "y", "=", "topY", "+", "j", "\n", "\n", "if", "x", ">=", "0", "and", "x", "<", "self", ".", "width", "and", "y", ">=", "0", "and", "y", "<", "self", ".", "height", ":", "\n", "                    ", "v", "=", "self", ".", "get", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                    ", "v", "=", "Wall", "(", ")", "\n", "\n", "", "grid", ".", "set", "(", "i", ",", "j", ",", "v", ")", "\n", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.render_tile": [[443, 495], ["numpy.zeros", "rendering.fill_coords", "rendering.fill_coords", "rendering.downsample", "rendering.point_in_rect", "rendering.point_in_rect", "obj.render", "rendering.point_in_triangle", "rendering.rotate_fn", "rendering.fill_coords", "rendering.highlight_img", "obj.encode"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.downsample", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.point_in_triangle", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.rotate_fn", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.fill_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.rendering.highlight_img", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "@", "classmethod", "\n", "def", "render_tile", "(", "\n", "cls", ",", "\n", "obj", ",", "\n", "agent_dir", "=", "None", ",", "\n", "highlight", "=", "False", ",", "\n", "tile_size", "=", "TILE_PIXELS", ",", "\n", "subdivs", "=", "3", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Render a tile and cache the result\n        \"\"\"", "\n", "\n", "# Hash map lookup key for the cache", "\n", "key", "=", "(", "agent_dir", ",", "highlight", ",", "tile_size", ")", "\n", "key", "=", "obj", ".", "encode", "(", ")", "+", "key", "if", "obj", "else", "key", "\n", "\n", "if", "key", "in", "cls", ".", "tile_cache", ":", "\n", "            ", "return", "cls", ".", "tile_cache", "[", "key", "]", "\n", "\n", "", "img", "=", "np", ".", "zeros", "(", "shape", "=", "(", "tile_size", "*", "subdivs", ",", "tile_size", "*", "subdivs", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Draw the grid lines (top and left edges)", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "0.031", ",", "0", ",", "1", ")", ",", "(", "100", ",", "100", ",", "100", ")", ")", "\n", "fill_coords", "(", "img", ",", "point_in_rect", "(", "0", ",", "1", ",", "0", ",", "0.031", ")", ",", "(", "100", ",", "100", ",", "100", ")", ")", "\n", "\n", "if", "obj", "!=", "None", ":", "\n", "            ", "obj", ".", "render", "(", "img", ")", "\n", "\n", "# Overlay the agent on top", "\n", "", "if", "agent_dir", "is", "not", "None", ":", "\n", "            ", "tri_fn", "=", "point_in_triangle", "(", "\n", "(", "0.12", ",", "0.19", ")", ",", "\n", "(", "0.87", ",", "0.50", ")", ",", "\n", "(", "0.12", ",", "0.81", ")", ",", "\n", ")", "\n", "\n", "# Rotate the agent based on its direction", "\n", "tri_fn", "=", "rotate_fn", "(", "tri_fn", ",", "cx", "=", "0.5", ",", "cy", "=", "0.5", ",", "theta", "=", "0.5", "*", "math", ".", "pi", "*", "agent_dir", ")", "\n", "fill_coords", "(", "img", ",", "tri_fn", ",", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "\n", "# Highlight the cell if needed", "\n", "", "if", "highlight", ":", "\n", "            ", "highlight_img", "(", "img", ")", "\n", "\n", "# Downsample the image to perform supersampling/anti-aliasing", "\n", "", "img", "=", "downsample", "(", "img", ",", "subdivs", ")", "\n", "\n", "# Cache the rendered tile", "\n", "cls", ".", "tile_cache", "[", "key", "]", "=", "img", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.render": [[496, 538], ["numpy.zeros", "range", "numpy.zeros", "range", "minigrid.Grid.get", "numpy.array_equal", "minigrid.Grid.render_tile"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.render_tile"], ["", "def", "render", "(", "\n", "self", ",", "\n", "tile_size", ",", "\n", "agent_pos", "=", "None", ",", "\n", "agent_dir", "=", "None", ",", "\n", "highlight_mask", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Render this grid at a given scale\n        :param r: target renderer object\n        :param tile_size: tile size in pixels\n        \"\"\"", "\n", "\n", "if", "highlight_mask", "is", "None", ":", "\n", "            ", "highlight_mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# Compute the total grid size", "\n", "", "width_px", "=", "self", ".", "width", "*", "tile_size", "\n", "height_px", "=", "self", ".", "height", "*", "tile_size", "\n", "\n", "img", "=", "np", ".", "zeros", "(", "shape", "=", "(", "height_px", ",", "width_px", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "# Render the grid", "\n", "for", "j", "in", "range", "(", "0", ",", "self", ".", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "width", ")", ":", "\n", "                ", "cell", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "\n", "agent_here", "=", "np", ".", "array_equal", "(", "agent_pos", ",", "(", "i", ",", "j", ")", ")", "\n", "tile_img", "=", "Grid", ".", "render_tile", "(", "\n", "cell", ",", "\n", "agent_dir", "=", "agent_dir", "if", "agent_here", "else", "None", ",", "\n", "highlight", "=", "highlight_mask", "[", "i", ",", "j", "]", ",", "\n", "tile_size", "=", "tile_size", "\n", ")", "\n", "\n", "ymin", "=", "j", "*", "tile_size", "\n", "ymax", "=", "(", "j", "+", "1", ")", "*", "tile_size", "\n", "xmin", "=", "i", "*", "tile_size", "\n", "xmax", "=", "(", "i", "+", "1", ")", "*", "tile_size", "\n", "img", "[", "ymin", ":", "ymax", ",", "xmin", ":", "xmax", ",", ":", "]", "=", "tile_img", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode": [[539, 563], ["numpy.zeros", "range", "numpy.ones", "range", "minigrid.Grid.get", "minigrid.Grid.encode"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "encode", "(", "self", ",", "vis_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Produce a compact numpy encoding of the grid\n        \"\"\"", "\n", "\n", "if", "vis_mask", "is", "None", ":", "\n", "            ", "vis_mask", "=", "np", ".", "ones", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "dtype", "=", "bool", ")", "\n", "\n", "", "array", "=", "np", ".", "zeros", "(", "(", "self", ".", "width", ",", "self", ".", "height", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "                ", "if", "vis_mask", "[", "i", ",", "j", "]", ":", "\n", "                    ", "v", "=", "self", ".", "get", "(", "i", ",", "j", ")", "\n", "\n", "if", "v", "is", "None", ":", "\n", "                        ", "array", "[", "i", ",", "j", ",", "0", "]", "=", "OBJECT_TO_IDX", "[", "'empty'", "]", "\n", "array", "[", "i", ",", "j", ",", "1", "]", "=", "0", "\n", "array", "[", "i", ",", "j", ",", "2", "]", "=", "0", "\n", "\n", "", "else", ":", "\n", "                        ", "array", "[", "i", ",", "j", ",", ":", "]", "=", "v", ".", "encode", "(", ")", "\n", "\n", "", "", "", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.decode": [[564, 584], ["numpy.ones", "minigrid.Grid", "range", "range", "minigrid.WorldObj.decode", "minigrid.Grid.set"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.decode", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "@", "staticmethod", "\n", "def", "decode", "(", "array", ")", ":", "\n", "        ", "\"\"\"\n        Decode an array grid encoding back into a grid\n        \"\"\"", "\n", "\n", "width", ",", "height", ",", "channels", "=", "array", ".", "shape", "\n", "assert", "channels", "==", "3", "\n", "\n", "vis_mask", "=", "np", ".", "ones", "(", "shape", "=", "(", "width", ",", "height", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "for", "i", "in", "range", "(", "width", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "height", ")", ":", "\n", "                ", "type_idx", ",", "color_idx", ",", "state", "=", "array", "[", "i", ",", "j", "]", "\n", "v", "=", "WorldObj", ".", "decode", "(", "type_idx", ",", "color_idx", ",", "state", ")", "\n", "grid", ".", "set", "(", "i", ",", "j", ",", "v", ")", "\n", "vis_mask", "[", "i", ",", "j", "]", "=", "(", "type_idx", "!=", "OBJECT_TO_IDX", "[", "'unseen'", "]", ")", "\n", "\n", "", "", "return", "grid", ",", "vis_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.process_vis": [[585, 623], ["numpy.zeros", "reversed", "range", "range", "range", "reversed", "range", "grid.get", "range", "grid.get", "grid.set", "grid.get.see_behind", "grid.get.see_behind"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.see_behind", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.see_behind"], ["", "def", "process_vis", "(", "grid", ",", "agent_pos", ")", ":", "\n", "        ", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "grid", ".", "width", ",", "grid", ".", "height", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "mask", "[", "agent_pos", "[", "0", "]", ",", "agent_pos", "[", "1", "]", "]", "=", "True", "\n", "\n", "for", "j", "in", "reversed", "(", "range", "(", "0", ",", "grid", ".", "height", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "grid", ".", "width", "-", "1", ")", ":", "\n", "                ", "if", "not", "mask", "[", "i", ",", "j", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "cell", "=", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "cell", "and", "not", "cell", ".", "see_behind", "(", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "mask", "[", "i", "+", "1", ",", "j", "]", "=", "True", "\n", "if", "j", ">", "0", ":", "\n", "                    ", "mask", "[", "i", "+", "1", ",", "j", "-", "1", "]", "=", "True", "\n", "mask", "[", "i", ",", "j", "-", "1", "]", "=", "True", "\n", "\n", "", "", "for", "i", "in", "reversed", "(", "range", "(", "1", ",", "grid", ".", "width", ")", ")", ":", "\n", "                ", "if", "not", "mask", "[", "i", ",", "j", "]", ":", "\n", "                    ", "continue", "\n", "\n", "", "cell", "=", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "if", "cell", "and", "not", "cell", ".", "see_behind", "(", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "mask", "[", "i", "-", "1", ",", "j", "]", "=", "True", "\n", "if", "j", ">", "0", ":", "\n", "                    ", "mask", "[", "i", "-", "1", ",", "j", "-", "1", "]", "=", "True", "\n", "mask", "[", "i", ",", "j", "-", "1", "]", "=", "True", "\n", "\n", "", "", "", "for", "j", "in", "range", "(", "0", ",", "grid", ".", "height", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "grid", ".", "width", ")", ":", "\n", "                ", "if", "not", "mask", "[", "i", ",", "j", "]", ":", "\n", "                    ", "grid", ".", "set", "(", "i", ",", "j", ",", "None", ")", "\n", "\n", "", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.__init__": [[651, 711], ["gym.spaces.Discrete", "gym.spaces.Box", "gym.spaces.Dict", "minigrid.MiniGridEnv.seed", "minigrid.MiniGridEnv.reset", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.seed", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "grid_size", "=", "None", ",", "\n", "width", "=", "None", ",", "\n", "height", "=", "None", ",", "\n", "max_steps", "=", "100", ",", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "1337", ",", "\n", "agent_view_size", "=", "7", "\n", ")", ":", "\n", "# Can't set both grid_size and width/height", "\n", "        ", "if", "grid_size", ":", "\n", "            ", "assert", "width", "==", "None", "and", "height", "==", "None", "\n", "width", "=", "grid_size", "\n", "height", "=", "grid_size", "\n", "\n", "# Action enumeration for this environment", "\n", "", "self", ".", "actions", "=", "MiniGridEnv", ".", "Actions", "\n", "\n", "# Actions are discrete integer values", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "\n", "# Number of cells (width and height) in the agent view", "\n", "assert", "agent_view_size", "%", "2", "==", "1", "\n", "assert", "agent_view_size", ">=", "3", "\n", "self", ".", "agent_view_size", "=", "agent_view_size", "\n", "\n", "# Observations are dictionaries containing an", "\n", "# encoding of the grid and a textual 'mission' string", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "self", ".", "agent_view_size", ",", "self", ".", "agent_view_size", ",", "3", ")", ",", "\n", "dtype", "=", "'uint8'", "\n", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Dict", "(", "{", "\n", "'image'", ":", "self", ".", "observation_space", "\n", "}", ")", "\n", "\n", "# Range of possible rewards", "\n", "self", ".", "reward_range", "=", "(", "0", ",", "1", ")", "\n", "\n", "# Window to use for human rendering mode", "\n", "self", ".", "window", "=", "None", "\n", "\n", "# Environment configuration", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "see_through_walls", "=", "see_through_walls", "\n", "\n", "# Current position and direction of the agent", "\n", "self", ".", "agent_pos", "=", "None", "\n", "self", ".", "agent_dir", "=", "None", "\n", "\n", "# Initialize the RNG", "\n", "self", ".", "seed", "(", "seed", "=", "seed", ")", "\n", "\n", "# Initialize the state", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.reset": [[712, 739], ["minigrid.MiniGridEnv._gen_grid", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.gen_obs", "minigrid.MiniGridEnv.can_overlap"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.can_overlap"], ["", "def", "reset", "(", "self", ")", ":", "\n", "# Current position and direction of the agent", "\n", "        ", "self", ".", "agent_pos", "=", "None", "\n", "self", ".", "agent_dir", "=", "None", "\n", "\n", "# Generate a new random grid at the start of each episode", "\n", "# To keep the same grid for each episode, call env.seed() with", "\n", "# the same seed before calling env.reset()", "\n", "self", ".", "_gen_grid", "(", "self", ".", "width", ",", "self", ".", "height", ")", "\n", "\n", "# These fields should be defined by _gen_grid", "\n", "assert", "self", ".", "agent_pos", "is", "not", "None", "\n", "assert", "self", ".", "agent_dir", "is", "not", "None", "\n", "\n", "# Check that the agent doesn't overlap with an object", "\n", "start_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "agent_pos", ")", "\n", "assert", "start_cell", "is", "None", "or", "start_cell", ".", "can_overlap", "(", ")", "\n", "\n", "# Item picked up, being carried, initially nothing", "\n", "self", ".", "carrying", "=", "[", "]", "\n", "\n", "# Step count since episode start", "\n", "self", ".", "step_count", "=", "0", "\n", "\n", "# Return first observation", "\n", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.seed": [[740, 744], ["gym.utils.seeding.np_random"], "methods", ["None"], ["", "def", "seed", "(", "self", ",", "seed", "=", "1337", ")", ":", "\n", "# Seed the random number generator", "\n", "        ", "self", ".", "np_random", ",", "_", "=", "seeding", ".", "np_random", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.hash": [[745, 756], ["hashlib.sha256", "minigrid.MiniGridEnv.grid.encode", "hashlib.sha256.update", "hashlib.sha256.hexdigest", "str().encode", "str"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "hash", "(", "self", ",", "size", "=", "16", ")", ":", "\n", "        ", "\"\"\"Compute a hash that uniquely identifies the current state of the environment.\n        :param size: Size of the hashing\n        \"\"\"", "\n", "sample_hash", "=", "hashlib", ".", "sha256", "(", ")", "\n", "\n", "to_encode", "=", "[", "self", ".", "grid", ".", "encode", "(", ")", ",", "self", ".", "agent_pos", ",", "self", ".", "agent_dir", "]", "\n", "for", "item", "in", "to_encode", ":", "\n", "            ", "sample_hash", ".", "update", "(", "str", "(", "item", ")", ".", "encode", "(", "'utf8'", ")", ")", "\n", "\n", "", "return", "sample_hash", ".", "hexdigest", "(", ")", "[", ":", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.steps_remaining": [[757, 760], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "steps_remaining", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "max_steps", "-", "self", ".", "step_count", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.__str__": [[761, 821], ["range", "range", "minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.color[].upper", "minigrid.MiniGridEnv.color[].upper", "minigrid.MiniGridEnv.color[].upper"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Produce a pretty string of the environment's grid along with the agent.\n        A grid cell is represented by 2-character string, the first one for\n        the object and the second one for the color.\n        \"\"\"", "\n", "\n", "# Map of object types to short string", "\n", "OBJECT_TO_STR", "=", "{", "\n", "'wall'", ":", "'W'", ",", "\n", "'floor'", ":", "'F'", ",", "\n", "'door'", ":", "'D'", ",", "\n", "'key'", ":", "'K'", ",", "\n", "'ball'", ":", "'A'", ",", "\n", "'box'", ":", "'B'", ",", "\n", "'goal'", ":", "'G'", ",", "\n", "'lava'", ":", "'V'", ",", "\n", "}", "\n", "\n", "# Short string for opened door", "\n", "OPENDED_DOOR_IDS", "=", "'_'", "\n", "\n", "# Map agent's direction to short string", "\n", "AGENT_DIR_TO_STR", "=", "{", "\n", "0", ":", "'>'", ",", "\n", "1", ":", "'V'", ",", "\n", "2", ":", "'<'", ",", "\n", "3", ":", "'^'", "\n", "}", "\n", "\n", "str", "=", "''", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "grid", ".", "height", ")", ":", "\n", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "grid", ".", "width", ")", ":", "\n", "                ", "if", "i", "==", "self", ".", "agent_pos", "[", "0", "]", "and", "j", "==", "self", ".", "agent_pos", "[", "1", "]", ":", "\n", "                    ", "str", "+=", "2", "*", "AGENT_DIR_TO_STR", "[", "self", ".", "agent_dir", "]", "\n", "continue", "\n", "\n", "", "c", "=", "self", ".", "grid", ".", "get", "(", "i", ",", "j", ")", "\n", "\n", "if", "c", "==", "None", ":", "\n", "                    ", "str", "+=", "'  '", "\n", "continue", "\n", "\n", "", "if", "c", ".", "type", "==", "'door'", ":", "\n", "                    ", "if", "c", ".", "is_open", ":", "\n", "                        ", "str", "+=", "'__'", "\n", "", "elif", "c", ".", "is_locked", ":", "\n", "                        ", "str", "+=", "'L'", "+", "c", ".", "color", "[", "0", "]", ".", "upper", "(", ")", "\n", "", "else", ":", "\n", "                        ", "str", "+=", "'D'", "+", "c", ".", "color", "[", "0", "]", ".", "upper", "(", ")", "\n", "", "continue", "\n", "\n", "", "str", "+=", "OBJECT_TO_STR", "[", "c", ".", "type", "]", "+", "c", ".", "color", "[", "0", "]", ".", "upper", "(", ")", "\n", "\n", "", "if", "j", "<", "self", ".", "grid", ".", "height", "-", "1", ":", "\n", "                ", "str", "+=", "'\\n'", "\n", "\n", "", "", "return", "str", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._gen_grid": [[822, 824], ["None"], "methods", ["None"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "False", ",", "\"_gen_grid needs to be implemented by each environment\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward": [[825, 831], ["None"], "methods", ["None"], ["", "def", "_reward", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the reward to be given upon success\n        \"\"\"", "\n", "\n", "return", "1", "-", "0.9", "*", "(", "self", ".", "step_count", "/", "self", ".", "max_steps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int": [[832, 838], ["minigrid.MiniGridEnv.np_random.randint"], "methods", ["None"], ["", "def", "_rand_int", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "\"\"\"\n        Generate random integer in [low,high[\n        \"\"\"", "\n", "\n", "return", "self", ".", "np_random", ".", "randint", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_float": [[839, 845], ["minigrid.MiniGridEnv.np_random.uniform"], "methods", ["None"], ["", "def", "_rand_float", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "        ", "\"\"\"\n        Generate random float in [low,high[\n        \"\"\"", "\n", "\n", "return", "self", ".", "np_random", ".", "uniform", "(", "low", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_bool": [[846, 852], ["minigrid.MiniGridEnv.np_random.randint"], "methods", ["None"], ["", "def", "_rand_bool", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate random boolean value\n        \"\"\"", "\n", "\n", "return", "(", "self", ".", "np_random", ".", "randint", "(", "0", ",", "2", ")", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem": [[853, 861], ["list", "minigrid.MiniGridEnv._rand_int", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_rand_elem", "(", "self", ",", "iterable", ")", ":", "\n", "        ", "\"\"\"\n        Pick a random element in a list\n        \"\"\"", "\n", "\n", "lst", "=", "list", "(", "iterable", ")", "\n", "idx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "lst", ")", ")", "\n", "return", "lst", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_subset": [[862, 878], ["list", "len", "len", "minigrid.MiniGridEnv._rand_elem", "list.remove", "out.append"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem"], ["", "def", "_rand_subset", "(", "self", ",", "iterable", ",", "num_elems", ")", ":", "\n", "        ", "\"\"\"\n        Sample a random subset of distinct elements of a list\n        \"\"\"", "\n", "\n", "lst", "=", "list", "(", "iterable", ")", "\n", "assert", "num_elems", "<=", "len", "(", "lst", ")", "\n", "\n", "out", "=", "[", "]", "\n", "\n", "while", "len", "(", "out", ")", "<", "num_elems", ":", "\n", "            ", "elem", "=", "self", ".", "_rand_elem", "(", "lst", ")", "\n", "lst", ".", "remove", "(", "elem", ")", "\n", "out", ".", "append", "(", "elem", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_color": [[879, 885], ["minigrid.MiniGridEnv._rand_elem"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem"], ["", "def", "_rand_color", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate a random color name (string)\n        \"\"\"", "\n", "\n", "return", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_pos": [[886, 894], ["minigrid.MiniGridEnv.np_random.randint", "minigrid.MiniGridEnv.np_random.randint"], "methods", ["None"], ["", "def", "_rand_pos", "(", "self", ",", "xLow", ",", "xHigh", ",", "yLow", ",", "yHigh", ")", ":", "\n", "        ", "\"\"\"\n        Generate a random (x,y) position tuple\n        \"\"\"", "\n", "\n", "return", "(", "\n", "self", ".", "np_random", ".", "randint", "(", "xLow", ",", "xHigh", ")", ",", "\n", "self", ".", "np_random", ".", "randint", "(", "yLow", ",", "yHigh", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj": [[896, 955], ["minigrid.MiniGridEnv.grid.set", "numpy.array", "numpy.array_equal", "max", "max", "RecursionError", "minigrid.MiniGridEnv.grid.get", "reject_fn", "minigrid.MiniGridEnv._rand_int", "minigrid.MiniGridEnv._rand_int", "min", "min"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "place_obj", "(", "self", ",", "\n", "obj", ",", "\n", "top", "=", "None", ",", "\n", "size", "=", "None", ",", "\n", "reject_fn", "=", "None", ",", "\n", "max_tries", "=", "math", ".", "inf", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Place an object at an empty position in the grid\n\n        :param top: top-left position of the rectangle where to place\n        :param size: size of the rectangle where to place\n        :param reject_fn: function to filter out potential positions\n        \"\"\"", "\n", "\n", "if", "top", "is", "None", ":", "\n", "            ", "top", "=", "(", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "top", "=", "(", "max", "(", "top", "[", "0", "]", ",", "0", ")", ",", "max", "(", "top", "[", "1", "]", ",", "0", ")", ")", "\n", "\n", "", "if", "size", "is", "None", ":", "\n", "            ", "size", "=", "(", "self", ".", "grid", ".", "width", ",", "self", ".", "grid", ".", "height", ")", "\n", "\n", "", "num_tries", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# This is to handle with rare cases where rejection sampling", "\n", "# gets stuck in an infinite loop", "\n", "            ", "if", "num_tries", ">", "max_tries", ":", "\n", "                ", "raise", "RecursionError", "(", "'rejection sampling failed in place_obj'", ")", "\n", "\n", "", "num_tries", "+=", "1", "\n", "\n", "pos", "=", "np", ".", "array", "(", "(", "\n", "self", ".", "_rand_int", "(", "top", "[", "0", "]", ",", "min", "(", "top", "[", "0", "]", "+", "size", "[", "0", "]", ",", "self", ".", "grid", ".", "width", ")", ")", ",", "\n", "self", ".", "_rand_int", "(", "top", "[", "1", "]", ",", "min", "(", "top", "[", "1", "]", "+", "size", "[", "1", "]", ",", "self", ".", "grid", ".", "height", ")", ")", "\n", ")", ")", "\n", "\n", "# Don't place the object on top of another object", "\n", "if", "self", ".", "grid", ".", "get", "(", "*", "pos", ")", "!=", "None", ":", "\n", "                ", "continue", "\n", "\n", "# Don't place the object where the agent is", "\n", "", "if", "np", ".", "array_equal", "(", "pos", ",", "self", ".", "agent_pos", ")", ":", "\n", "                ", "continue", "\n", "\n", "# Check if there is a filtering criterion", "\n", "", "if", "reject_fn", "and", "reject_fn", "(", "self", ",", "pos", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "break", "\n", "\n", "", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "obj", ")", "\n", "\n", "if", "obj", "is", "not", "None", ":", "\n", "            ", "obj", ".", "init_pos", "=", "pos", "\n", "obj", ".", "cur_pos", "=", "pos", "\n", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj": [[956, 964], ["minigrid.MiniGridEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "put_obj", "(", "self", ",", "obj", ",", "i", ",", "j", ")", ":", "\n", "        ", "\"\"\"\n        Put an object at a specific position in the grid\n        \"\"\"", "\n", "\n", "self", ".", "grid", ".", "set", "(", "i", ",", "j", ",", "obj", ")", "\n", "obj", ".", "init_pos", "=", "(", "i", ",", "j", ")", "\n", "obj", ".", "cur_pos", "=", "(", "i", ",", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_agent": [[965, 984], ["minigrid.MiniGridEnv.place_obj", "minigrid.MiniGridEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "place_agent", "(", "\n", "self", ",", "\n", "top", "=", "None", ",", "\n", "size", "=", "None", ",", "\n", "rand_dir", "=", "True", ",", "\n", "max_tries", "=", "math", ".", "inf", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Set the agent's starting point at an empty position in the grid\n        \"\"\"", "\n", "\n", "self", ".", "agent_pos", "=", "None", "\n", "pos", "=", "self", ".", "place_obj", "(", "None", ",", "top", ",", "size", ",", "max_tries", "=", "max_tries", ")", "\n", "self", ".", "agent_pos", "=", "pos", "\n", "\n", "if", "rand_dir", ":", "\n", "            ", "self", ".", "agent_dir", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "\n", "", "return", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.dir_vec": [[985, 994], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dir_vec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the direction vector for the agent, pointing in the direction\n        of forward movement.\n        \"\"\"", "\n", "\n", "assert", "self", ".", "agent_dir", ">=", "0", "and", "self", ".", "agent_dir", "<", "4", "\n", "return", "DIR_TO_VEC", "[", "self", ".", "agent_dir", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.right_vec": [[995, 1003], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "right_vec", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the vector pointing to the right of the agent.\n        \"\"\"", "\n", "\n", "dx", ",", "dy", "=", "self", ".", "dir_vec", "\n", "return", "np", ".", "array", "(", "(", "-", "dy", ",", "dx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.front_pos": [[1004, 1011], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "front_pos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the position of the cell that is right in front of the agent\n        \"\"\"", "\n", "\n", "return", "self", ".", "agent_pos", "+", "self", ".", "dir_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.get_view_coords": [[1012, 1038], ["None"], "methods", ["None"], ["", "def", "get_view_coords", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "\"\"\"\n        Translate and rotate absolute grid coordinates (i, j) into the\n        agent's partially observable view (sub-grid). Note that the resulting\n        coordinates may be negative or outside of the agent's view size.\n        \"\"\"", "\n", "\n", "ax", ",", "ay", "=", "self", ".", "agent_pos", "\n", "dx", ",", "dy", "=", "self", ".", "dir_vec", "\n", "rx", ",", "ry", "=", "self", ".", "right_vec", "\n", "\n", "# Compute the absolute coordinates of the top-left view corner", "\n", "sz", "=", "self", ".", "agent_view_size", "\n", "hs", "=", "self", ".", "agent_view_size", "//", "2", "\n", "tx", "=", "ax", "+", "(", "dx", "*", "(", "sz", "-", "1", ")", ")", "-", "(", "rx", "*", "hs", ")", "\n", "ty", "=", "ay", "+", "(", "dy", "*", "(", "sz", "-", "1", ")", ")", "-", "(", "ry", "*", "hs", ")", "\n", "\n", "lx", "=", "i", "-", "tx", "\n", "ly", "=", "j", "-", "ty", "\n", "\n", "# Project the coordinates of the object relative to the top-left", "\n", "# corner onto the agent's own coordinate system", "\n", "vx", "=", "(", "rx", "*", "lx", "+", "ry", "*", "ly", ")", "\n", "vy", "=", "-", "(", "dx", "*", "lx", "+", "dy", "*", "ly", ")", "\n", "\n", "return", "vx", ",", "vy", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.get_view_exts": [[1039, 1068], ["None"], "methods", ["None"], ["", "def", "get_view_exts", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the extents of the square set of tiles visible to the agent\n        Note: the bottom extent indices are not included in the set\n        \"\"\"", "\n", "\n", "# Facing right", "\n", "if", "self", ".", "agent_dir", "==", "0", ":", "\n", "            ", "topX", "=", "self", ".", "agent_pos", "[", "0", "]", "\n", "topY", "=", "self", ".", "agent_pos", "[", "1", "]", "-", "self", ".", "agent_view_size", "//", "2", "\n", "# Facing down", "\n", "", "elif", "self", ".", "agent_dir", "==", "1", ":", "\n", "            ", "topX", "=", "self", ".", "agent_pos", "[", "0", "]", "-", "self", ".", "agent_view_size", "//", "2", "\n", "topY", "=", "self", ".", "agent_pos", "[", "1", "]", "\n", "# Facing left", "\n", "", "elif", "self", ".", "agent_dir", "==", "2", ":", "\n", "            ", "topX", "=", "self", ".", "agent_pos", "[", "0", "]", "-", "self", ".", "agent_view_size", "+", "1", "\n", "topY", "=", "self", ".", "agent_pos", "[", "1", "]", "-", "self", ".", "agent_view_size", "//", "2", "\n", "# Facing up", "\n", "", "elif", "self", ".", "agent_dir", "==", "3", ":", "\n", "            ", "topX", "=", "self", ".", "agent_pos", "[", "0", "]", "-", "self", ".", "agent_view_size", "//", "2", "\n", "topY", "=", "self", ".", "agent_pos", "[", "1", "]", "-", "self", ".", "agent_view_size", "+", "1", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid agent direction\"", "\n", "\n", "", "botX", "=", "topX", "+", "self", ".", "agent_view_size", "\n", "botY", "=", "topY", "+", "self", ".", "agent_view_size", "\n", "\n", "return", "(", "topX", ",", "topY", ",", "botX", ",", "botY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.relative_coords": [[1069, 1080], ["minigrid.MiniGridEnv.get_view_coords"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.get_view_coords"], ["", "def", "relative_coords", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Check if a grid position belongs to the agent's field of view, and returns the corresponding coordinates\n        \"\"\"", "\n", "\n", "vx", ",", "vy", "=", "self", ".", "get_view_coords", "(", "x", ",", "y", ")", "\n", "\n", "if", "vx", "<", "0", "or", "vy", "<", "0", "or", "vx", ">=", "self", ".", "agent_view_size", "or", "vy", ">=", "self", ".", "agent_view_size", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "vx", ",", "vy", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.in_view": [[1081, 1087], ["minigrid.MiniGridEnv.relative_coords"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.relative_coords"], ["", "def", "in_view", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        check if a grid position is visible to the agent\n        \"\"\"", "\n", "\n", "return", "self", ".", "relative_coords", "(", "x", ",", "y", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.agent_sees": [[1088, 1104], ["minigrid.MiniGridEnv.relative_coords", "minigrid.MiniGridEnv.gen_obs", "minigrid.Grid.decode", "obs_grid.get", "minigrid.MiniGridEnv.grid.get"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.relative_coords", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.decode", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get"], ["", "def", "agent_sees", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Check if a non-empty grid position is visible to the agent\n        \"\"\"", "\n", "\n", "coordinates", "=", "self", ".", "relative_coords", "(", "x", ",", "y", ")", "\n", "if", "coordinates", "is", "None", ":", "\n", "            ", "return", "False", "\n", "", "vx", ",", "vy", "=", "coordinates", "\n", "\n", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "obs_grid", ",", "_", "=", "Grid", ".", "decode", "(", "obs", "[", "'image'", "]", ")", "\n", "obs_cell", "=", "obs_grid", ".", "get", "(", "vx", ",", "vy", ")", "\n", "world_cell", "=", "self", ".", "grid", ".", "get", "(", "x", ",", "y", ")", "\n", "\n", "return", "obs_cell", "is", "not", "None", "and", "obs_cell", ".", "type", "==", "world_cell", ".", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.step": [[1105, 1170], ["minigrid.MiniGridEnv.grid.get", "minigrid.MiniGridEnv.gen_obs", "minigrid.MiniGridEnv.can_overlap", "minigrid.MiniGridEnv._reward", "minigrid.MiniGridEnv.can_pickup", "numpy.array", "minigrid.MiniGridEnv.grid.set", "minigrid.MiniGridEnv.grid.set", "minigrid.MiniGridEnv.toggle"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.can_overlap", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.can_pickup", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.toggle"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "step_count", "+=", "1", "\n", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "\n", "# Get the position in front of the agent", "\n", "fwd_pos", "=", "self", ".", "front_pos", "\n", "\n", "# Get the contents of the cell in front of the agent", "\n", "fwd_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "fwd_pos", ")", "\n", "\n", "# Rotate left", "\n", "if", "action", "==", "self", ".", "actions", ".", "left", ":", "\n", "            ", "self", ".", "agent_dir", "-=", "1", "\n", "if", "self", ".", "agent_dir", "<", "0", ":", "\n", "                ", "self", ".", "agent_dir", "+=", "4", "\n", "\n", "# Rotate right", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "# Move forward", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "forward", ":", "\n", "            ", "if", "fwd_cell", "==", "None", "or", "fwd_cell", ".", "can_overlap", "(", ")", ":", "\n", "                ", "self", ".", "agent_pos", "=", "fwd_pos", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'goal'", ":", "\n", "                ", "done", "=", "True", "\n", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'lava'", ":", "\n", "                ", "done", "=", "True", "\n", "\n", "# Pick up an object", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "fwd_cell", "and", "fwd_cell", ".", "can_pickup", "(", ")", ":", "\n", "                ", "if", "self", ".", "carrying", "is", "None", ":", "\n", "                    ", "self", ".", "carrying", "=", "fwd_cell", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "np", ".", "array", "(", "[", "-", "1", ",", "-", "1", "]", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "fwd_pos", ",", "None", ")", "\n", "\n", "# Drop an object", "\n", "", "", "", "elif", "action", "==", "self", ".", "actions", ".", "drop", ":", "\n", "            ", "if", "not", "fwd_cell", "and", "self", ".", "carrying", ":", "\n", "               ", "self", ".", "grid", ".", "set", "(", "*", "fwd_pos", ",", "self", ".", "carrying", ")", "\n", "self", ".", "carrying", ".", "cur_pos", "=", "fwd_pos", "\n", "self", ".", "carrying", "=", "None", "\n", "\n", "# Toggle/activate an object", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "if", "fwd_cell", ":", "\n", "                ", "fwd_cell", ".", "toggle", "(", "self", ",", "fwd_pos", ")", "\n", "\n", "# Done action (not used by default)", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "done", ":", "\n", "            ", "pass", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown action\"", "\n", "\n", "", "if", "self", ".", "step_count", ">=", "self", ".", "max_steps", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs_grid": [[1171, 1202], ["minigrid.MiniGridEnv.get_view_exts", "minigrid.MiniGridEnv.grid.slice", "range", "grid.rotate_left.rotate_left.rotate_left", "grid.rotate_left.rotate_left.process_vis", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.get_view_exts", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.slice", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.rotate_left", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.process_vis"], ["", "def", "gen_obs_grid", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate the sub-grid observed by the agent.\n        This method also outputs a visibility mask telling us which grid\n        cells the agent can actually see.\n        \"\"\"", "\n", "\n", "topX", ",", "topY", ",", "botX", ",", "botY", "=", "self", ".", "get_view_exts", "(", ")", "\n", "\n", "grid", "=", "self", ".", "grid", ".", "slice", "(", "topX", ",", "topY", ",", "self", ".", "agent_view_size", ",", "self", ".", "agent_view_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "agent_dir", "+", "1", ")", ":", "\n", "            ", "grid", "=", "grid", ".", "rotate_left", "(", ")", "\n", "\n", "# Process occluders and visibility", "\n", "# Note that this incurs some performance cost", "\n", "", "if", "not", "self", ".", "see_through_walls", ":", "\n", "            ", "vis_mask", "=", "grid", ".", "process_vis", "(", "agent_pos", "=", "(", "self", ".", "agent_view_size", "//", "2", ",", "self", ".", "agent_view_size", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "vis_mask", "=", "np", ".", "ones", "(", "shape", "=", "(", "grid", ".", "width", ",", "grid", ".", "height", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# Make it so the agent sees what it's carrying", "\n", "# We do this by placing the carried object at the agent's position", "\n", "# in the agent's partially observable view", "\n", "", "agent_pos", "=", "grid", ".", "width", "//", "2", ",", "grid", ".", "height", "-", "1", "\n", "# if self.carrying:", "\n", "#     grid.set(*agent_pos, self.carrying)", "\n", "# else:", "\n", "#     grid.set(*agent_pos, None)", "\n", "\n", "return", "grid", ",", "vis_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs": [[1203, 1226], ["minigrid.MiniGridEnv.gen_obs_grid", "grid.encode", "hasattr"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.encode"], ["", "def", "gen_obs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate the agent's view (partially observable, low-resolution encoding)\n        \"\"\"", "\n", "\n", "grid", ",", "vis_mask", "=", "self", ".", "gen_obs_grid", "(", ")", "\n", "\n", "# Encode the partially observable view into a numpy array", "\n", "image", "=", "grid", ".", "encode", "(", "vis_mask", ")", "\n", "\n", "assert", "hasattr", "(", "self", ",", "'mission'", ")", ",", "\"environments must define a textual mission string\"", "\n", "\n", "# Observations are dictionaries containing:", "\n", "# - an image (partially observable view of the environment)", "\n", "# - the agent's direction/orientation (acting as a compass)", "\n", "# - a textual mission string (instructions for the agent)", "\n", "obs", "=", "{", "\n", "'image'", ":", "image", ",", "\n", "'direction'", ":", "self", ".", "agent_dir", ",", "\n", "'mission'", ":", "self", ".", "mission", "\n", "}", "\n", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.get_obs_render": [[1227, 1243], ["minigrid.Grid.decode", "grid.render"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.decode", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.render"], ["", "def", "get_obs_render", "(", "self", ",", "obs", ",", "tile_size", "=", "TILE_PIXELS", "//", "2", ")", ":", "\n", "        ", "\"\"\"\n        Render an agent observation for visualization\n        \"\"\"", "\n", "\n", "grid", ",", "vis_mask", "=", "Grid", ".", "decode", "(", "obs", ")", "\n", "\n", "# Render the whole grid", "\n", "img", "=", "grid", ".", "render", "(", "\n", "tile_size", ",", "\n", "agent_pos", "=", "(", "self", ".", "agent_view_size", "//", "2", ",", "self", ".", "agent_view_size", "-", "1", ")", ",", "\n", "agent_dir", "=", "3", ",", "\n", "highlight_mask", "=", "vis_mask", "\n", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.render": [[1244, 1302], ["minigrid.MiniGridEnv.gen_obs_grid", "numpy.zeros", "range", "minigrid.MiniGridEnv.grid.render", "gym_minigrid.window.Window", "minigrid.MiniGridEnv.window.show", "range", "minigrid.MiniGridEnv.window.set_caption", "minigrid.MiniGridEnv.window.show_img", "minigrid.MiniGridEnv.window.close"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.render", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.show", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.set_caption", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.show_img", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.close"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ",", "close", "=", "False", ",", "highlight", "=", "True", ",", "tile_size", "=", "TILE_PIXELS", ")", ":", "\n", "        ", "\"\"\"\n        Render the whole-grid human view\n        \"\"\"", "\n", "\n", "if", "close", ":", "\n", "            ", "if", "self", ".", "window", ":", "\n", "                ", "self", ".", "window", ".", "close", "(", ")", "\n", "", "return", "\n", "\n", "", "if", "mode", "==", "'human'", "and", "not", "self", ".", "window", ":", "\n", "            ", "import", "gym_minigrid", ".", "window", "\n", "self", ".", "window", "=", "gym_minigrid", ".", "window", ".", "Window", "(", "'gym_minigrid'", ")", "\n", "self", ".", "window", ".", "show", "(", "block", "=", "False", ")", "\n", "\n", "# Compute which cells are visible to the agent", "\n", "", "_", ",", "vis_mask", "=", "self", ".", "gen_obs_grid", "(", ")", "\n", "\n", "# Compute the world coordinates of the bottom-left corner", "\n", "# of the agent's view area", "\n", "f_vec", "=", "self", ".", "dir_vec", "\n", "r_vec", "=", "self", ".", "right_vec", "\n", "top_left", "=", "self", ".", "agent_pos", "+", "f_vec", "*", "(", "self", ".", "agent_view_size", "-", "1", ")", "-", "r_vec", "*", "(", "self", ".", "agent_view_size", "//", "2", ")", "\n", "\n", "# Mask of which cells to highlight", "\n", "highlight_mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "# For each cell in the visibility mask", "\n", "for", "vis_j", "in", "range", "(", "0", ",", "self", ".", "agent_view_size", ")", ":", "\n", "            ", "for", "vis_i", "in", "range", "(", "0", ",", "self", ".", "agent_view_size", ")", ":", "\n", "# If this cell is not visible, don't highlight it", "\n", "                ", "if", "not", "vis_mask", "[", "vis_i", ",", "vis_j", "]", ":", "\n", "                    ", "continue", "\n", "\n", "# Compute the world coordinates of this cell", "\n", "", "abs_i", ",", "abs_j", "=", "top_left", "-", "(", "f_vec", "*", "vis_j", ")", "+", "(", "r_vec", "*", "vis_i", ")", "\n", "\n", "if", "abs_i", "<", "0", "or", "abs_i", ">=", "self", ".", "width", ":", "\n", "                    ", "continue", "\n", "", "if", "abs_j", "<", "0", "or", "abs_j", ">=", "self", ".", "height", ":", "\n", "                    ", "continue", "\n", "\n", "# Mark this cell to be highlighted", "\n", "", "highlight_mask", "[", "abs_i", ",", "abs_j", "]", "=", "True", "\n", "\n", "# Render the whole grid", "\n", "", "", "img", "=", "self", ".", "grid", ".", "render", "(", "\n", "tile_size", ",", "\n", "self", ".", "agent_pos", ",", "\n", "self", ".", "agent_dir", ",", "\n", "highlight_mask", "=", "highlight_mask", "if", "highlight", "else", "None", "\n", ")", "\n", "\n", "if", "mode", "==", "'human'", ":", "\n", "            ", "self", ".", "window", ".", "set_caption", "(", "self", ".", "mission", ")", "\n", "self", ".", "window", ".", "show_img", "(", "img", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.close": [[1303, 1307], ["minigrid.MiniGridEnv.window.close"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "window", ":", "\n", "            ", "self", ".", "window", ".", "close", "(", ")", "\n", "", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.__init__": [[17, 41], ["plt.subplots", "window.Window.fig.canvas.set_window_title", "window.Window.ax.xaxis.set_ticks_position", "window.Window.ax.yaxis.set_ticks_position", "window.Window.ax.set_xticklabels", "window.Window.ax.set_yticklabels", "window.Window.fig.canvas.mpl_connect"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "title", ")", ":", "\n", "        ", "self", ".", "fig", "=", "None", "\n", "\n", "self", ".", "imshow_obj", "=", "None", "\n", "\n", "# Create the figure and axes", "\n", "self", ".", "fig", ",", "self", ".", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "# Show the env name in the window title", "\n", "self", ".", "fig", ".", "canvas", ".", "set_window_title", "(", "title", ")", "\n", "\n", "# Turn off x/y axis numbering/ticks", "\n", "self", ".", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "'none'", ")", "\n", "self", ".", "ax", ".", "yaxis", ".", "set_ticks_position", "(", "'none'", ")", "\n", "_", "=", "self", ".", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "_", "=", "self", ".", "ax", ".", "set_yticklabels", "(", "[", "]", ")", "\n", "\n", "# Flag indicating the window was closed", "\n", "self", ".", "closed", "=", "False", "\n", "\n", "def", "close_handler", "(", "evt", ")", ":", "\n", "            ", "self", ".", "closed", "=", "True", "\n", "\n", "", "self", ".", "fig", ".", "canvas", ".", "mpl_connect", "(", "'close_event'", ",", "close_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.show_img": [[42, 57], ["window.Window.imshow_obj.set_data", "window.Window.fig.canvas.draw", "plt.pause", "window.Window.ax.imshow"], "methods", ["None"], ["", "def", "show_img", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Show an image or update the image being shown\n        \"\"\"", "\n", "\n", "# Show the first image of the environment", "\n", "if", "self", ".", "imshow_obj", "is", "None", ":", "\n", "            ", "self", ".", "imshow_obj", "=", "self", ".", "ax", ".", "imshow", "(", "img", ",", "interpolation", "=", "'bilinear'", ")", "\n", "\n", "", "self", ".", "imshow_obj", ".", "set_data", "(", "img", ")", "\n", "self", ".", "fig", ".", "canvas", ".", "draw", "(", ")", "\n", "\n", "# Let matplotlib process UI events", "\n", "# This is needed for interactive mode to work properly", "\n", "plt", ".", "pause", "(", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.set_caption": [[58, 64], ["plt.xlabel"], "methods", ["None"], ["", "def", "set_caption", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Set/update the caption text below the image\n        \"\"\"", "\n", "\n", "plt", ".", "xlabel", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.reg_key_handler": [[65, 72], ["window.Window.fig.canvas.mpl_connect"], "methods", ["None"], ["", "def", "reg_key_handler", "(", "self", ",", "key_handler", ")", ":", "\n", "        ", "\"\"\"\n        Register a keyboard event handler\n        \"\"\"", "\n", "\n", "# Keyboard handler", "\n", "self", ".", "fig", ".", "canvas", ".", "mpl_connect", "(", "'key_press_event'", ",", "key_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.show": [[73, 86], ["plt.show", "plt.ion"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.show"], ["", "def", "show", "(", "self", ",", "block", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Show the window, and start an event loop\n        \"\"\"", "\n", "\n", "# If not blocking, trigger interactive mode", "\n", "if", "not", "block", ":", "\n", "            ", "plt", ".", "ion", "(", ")", "\n", "\n", "# Show the plot", "\n", "# In non-interative mode, this enters the matplotlib event loop", "\n", "# In interactive mode, this call does not block", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.close": [[87, 94], ["plt.close"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.window.Window.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Close the window\n        \"\"\"", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "self", ".", "closed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.Room.__init__": [[15, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "top", ",", "\n", "size", "\n", ")", ":", "\n", "# Top-left corner and size (tuples)", "\n", "        ", "self", ".", "top", "=", "top", "\n", "self", ".", "size", "=", "size", "\n", "\n", "# List of door objects and door positions", "\n", "# Order of the doors is right, down, left, up", "\n", "self", ".", "doors", "=", "[", "None", "]", "*", "4", "\n", "self", ".", "door_pos", "=", "[", "None", "]", "*", "4", "\n", "\n", "# List of rooms adjacent to this one", "\n", "# Order of the neighbors is right, down, left, up", "\n", "self", ".", "neighbors", "=", "[", "None", "]", "*", "4", "\n", "\n", "# Indicates if this room is behind a locked door", "\n", "self", ".", "locked", "=", "False", "\n", "\n", "# List of objects contained", "\n", "self", ".", "objs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.Room.rand_pos": [[39, 45], ["env._randPos"], "methods", ["None"], ["", "def", "rand_pos", "(", "self", ",", "env", ")", ":", "\n", "        ", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "return", "env", ".", "_randPos", "(", "\n", "topX", "+", "1", ",", "topX", "+", "sizeX", "-", "1", ",", "\n", "topY", "+", "1", ",", "topY", "+", "sizeY", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.Room.pos_inside": [[47, 62], ["None"], "methods", ["None"], ["", "def", "pos_inside", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Check if a position is within the bounds of this room\n        \"\"\"", "\n", "\n", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "\n", "if", "x", "<", "topX", "or", "y", "<", "topY", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "x", ">=", "topX", "+", "sizeX", "or", "y", ">=", "topY", "+", "sizeY", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.__init__": [[69, 99], ["minigrid.MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "room_size", "=", "7", ",", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "max_steps", "=", "100", ",", "\n", "seed", "=", "0", ",", "\n", "agent_view_size", "=", "7", "\n", ")", ":", "\n", "        ", "assert", "room_size", ">", "0", "\n", "assert", "room_size", ">=", "3", "\n", "assert", "num_rows", ">", "0", "\n", "assert", "num_cols", ">", "0", "\n", "self", ".", "room_size", "=", "room_size", "\n", "self", ".", "num_rows", "=", "num_rows", "\n", "self", ".", "num_cols", "=", "num_cols", "\n", "\n", "height", "=", "(", "room_size", "-", "1", ")", "*", "num_rows", "+", "1", "\n", "width", "=", "(", "room_size", "-", "1", ")", "*", "num_cols", "+", "1", "\n", "\n", "# By default, this environment has no mission", "\n", "self", ".", "mission", "=", "''", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "max_steps", "=", "max_steps", ",", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "seed", ",", "\n", "agent_view_size", "=", "agent_view_size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.room_from_pos": [[101, 114], ["None"], "methods", ["None"], ["", "def", "room_from_pos", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Get the room a given position maps to\"\"\"", "\n", "\n", "assert", "x", ">=", "0", "\n", "assert", "y", ">=", "0", "\n", "\n", "i", "=", "x", "//", "(", "self", ".", "room_size", "-", "1", ")", "\n", "j", "=", "y", "//", "(", "self", ".", "room_size", "-", "1", ")", "\n", "\n", "assert", "i", "<", "self", ".", "num_cols", "\n", "assert", "j", "<", "self", ".", "num_rows", "\n", "\n", "return", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.get_room": [[115, 119], ["None"], "methods", ["None"], ["", "def", "get_room", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "        ", "assert", "i", "<", "self", ".", "num_cols", "\n", "assert", "j", "<", "self", ".", "num_rows", "\n", "return", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid._gen_grid": [[120, 172], ["minigrid.Grid", "range", "range", "range", "roomgrid.RoomGrid.room_grid.append", "range", "roomgrid.Room", "row.append", "roomgrid.RoomGrid.grid.wall_rect", "roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "self", ".", "room_grid", "=", "[", "]", "\n", "\n", "# For each row of rooms", "\n", "for", "j", "in", "range", "(", "0", ",", "self", ".", "num_rows", ")", ":", "\n", "            ", "row", "=", "[", "]", "\n", "\n", "# For each column of rooms", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_cols", ")", ":", "\n", "                ", "room", "=", "Room", "(", "\n", "(", "i", "*", "(", "self", ".", "room_size", "-", "1", ")", ",", "j", "*", "(", "self", ".", "room_size", "-", "1", ")", ")", ",", "\n", "(", "self", ".", "room_size", ",", "self", ".", "room_size", ")", "\n", ")", "\n", "row", ".", "append", "(", "room", ")", "\n", "\n", "# Generate the walls for this room", "\n", "self", ".", "grid", ".", "wall_rect", "(", "*", "room", ".", "top", ",", "*", "room", ".", "size", ")", "\n", "\n", "", "self", ".", "room_grid", ".", "append", "(", "row", ")", "\n", "\n", "# For each row of rooms", "\n", "", "for", "j", "in", "range", "(", "0", ",", "self", ".", "num_rows", ")", ":", "\n", "# For each column of rooms", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_cols", ")", ":", "\n", "                ", "room", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n", "x_l", ",", "y_l", "=", "(", "room", ".", "top", "[", "0", "]", "+", "1", ",", "room", ".", "top", "[", "1", "]", "+", "1", ")", "\n", "x_m", ",", "y_m", "=", "(", "room", ".", "top", "[", "0", "]", "+", "room", ".", "size", "[", "0", "]", "-", "1", ",", "room", ".", "top", "[", "1", "]", "+", "room", ".", "size", "[", "1", "]", "-", "1", ")", "\n", "\n", "# Door positions, order is right, down, left, up", "\n", "if", "i", "<", "self", ".", "num_cols", "-", "1", ":", "\n", "                    ", "room", ".", "neighbors", "[", "0", "]", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "+", "1", "]", "\n", "room", ".", "door_pos", "[", "0", "]", "=", "(", "x_m", ",", "self", ".", "_rand_int", "(", "y_l", ",", "y_m", ")", ")", "\n", "", "if", "j", "<", "self", ".", "num_rows", "-", "1", ":", "\n", "                    ", "room", ".", "neighbors", "[", "1", "]", "=", "self", ".", "room_grid", "[", "j", "+", "1", "]", "[", "i", "]", "\n", "room", ".", "door_pos", "[", "1", "]", "=", "(", "self", ".", "_rand_int", "(", "x_l", ",", "x_m", ")", ",", "y_m", ")", "\n", "", "if", "i", ">", "0", ":", "\n", "                    ", "room", ".", "neighbors", "[", "2", "]", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "-", "1", "]", "\n", "room", ".", "door_pos", "[", "2", "]", "=", "room", ".", "neighbors", "[", "2", "]", ".", "door_pos", "[", "0", "]", "\n", "", "if", "j", ">", "0", ":", "\n", "                    ", "room", ".", "neighbors", "[", "3", "]", "=", "self", ".", "room_grid", "[", "j", "-", "1", "]", "[", "i", "]", "\n", "room", ".", "door_pos", "[", "3", "]", "=", "room", ".", "neighbors", "[", "3", "]", ".", "door_pos", "[", "1", "]", "\n", "\n", "# The agent starts in the middle, facing right", "\n", "", "", "", "self", ".", "agent_pos", "=", "(", "\n", "(", "self", ".", "num_cols", "//", "2", ")", "*", "(", "self", ".", "room_size", "-", "1", ")", "+", "(", "self", ".", "room_size", "//", "2", ")", ",", "\n", "(", "self", ".", "num_rows", "//", "2", ")", "*", "(", "self", ".", "room_size", "-", "1", ")", "+", "(", "self", ".", "room_size", "//", "2", ")", "\n", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_in_room": [[173, 191], ["roomgrid.RoomGrid.get_room", "roomgrid.RoomGrid.place_obj", "roomgrid.RoomGrid.objs.append"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "place_in_room", "(", "self", ",", "i", ",", "j", ",", "obj", ")", ":", "\n", "        ", "\"\"\"\n        Add an existing object to room (i, j)\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "pos", "=", "self", ".", "place_obj", "(", "\n", "obj", ",", "\n", "room", ".", "top", ",", "\n", "room", ".", "size", ",", "\n", "reject_fn", "=", "reject_next_to", ",", "\n", "max_tries", "=", "1000", "\n", ")", "\n", "\n", "room", ".", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "return", "obj", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object": [[192, 213], ["roomgrid.RoomGrid.place_in_room", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid._rand_color", "minigrid.Key", "minigrid.Ball", "minigrid.Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_in_room", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_color"], ["", "def", "add_object", "(", "self", ",", "i", ",", "j", ",", "kind", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a new object to room (i, j)\n        \"\"\"", "\n", "\n", "if", "kind", "==", "None", ":", "\n", "            ", "kind", "=", "self", ".", "_rand_elem", "(", "[", "'key'", ",", "'ball'", ",", "'box'", "]", ")", "\n", "\n", "", "if", "color", "==", "None", ":", "\n", "            ", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "\n", "# TODO: we probably want to add an Object.make helper function", "\n", "", "assert", "kind", "in", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "if", "kind", "==", "'key'", ":", "\n", "            ", "obj", "=", "Key", "(", "color", ")", "\n", "", "elif", "kind", "==", "'ball'", ":", "\n", "            ", "obj", "=", "Ball", "(", "color", ")", "\n", "", "elif", "kind", "==", "'box'", ":", "\n", "            ", "obj", "=", "Box", "(", "color", ")", "\n", "\n", "", "return", "self", ".", "place_in_room", "(", "i", ",", "j", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_door": [[214, 249], ["roomgrid.RoomGrid.get_room", "minigrid.Door", "roomgrid.RoomGrid.grid.set", "roomgrid.RoomGrid._rand_color", "roomgrid.RoomGrid._rand_bool", "roomgrid.RoomGrid._rand_int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_color", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_bool", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "add_door", "(", "self", ",", "i", ",", "j", ",", "door_idx", "=", "None", ",", "color", "=", "None", ",", "locked", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Add a door to a room, connecting it to a neighbor\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "if", "door_idx", "==", "None", ":", "\n", "# Need to make sure that there is a neighbor along this wall", "\n", "# and that there is not already a door", "\n", "            ", "while", "True", ":", "\n", "                ", "door_idx", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "if", "room", ".", "neighbors", "[", "door_idx", "]", "and", "room", ".", "doors", "[", "door_idx", "]", "is", "None", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "if", "color", "==", "None", ":", "\n", "            ", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "\n", "", "if", "locked", "is", "None", ":", "\n", "            ", "locked", "=", "self", ".", "_rand_bool", "(", ")", "\n", "\n", "", "assert", "room", ".", "doors", "[", "door_idx", "]", "is", "None", ",", "\"door already exists\"", "\n", "\n", "room", ".", "locked", "=", "locked", "\n", "door", "=", "Door", "(", "color", ",", "is_locked", "=", "locked", ")", "\n", "\n", "pos", "=", "room", ".", "door_pos", "[", "door_idx", "]", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "door", ")", "\n", "door", ".", "cur_pos", "=", "pos", "\n", "\n", "neighbor", "=", "room", ".", "neighbors", "[", "door_idx", "]", "\n", "room", ".", "doors", "[", "door_idx", "]", "=", "door", "\n", "neighbor", ".", "doors", "[", "(", "door_idx", "+", "2", ")", "%", "4", "]", "=", "door", "\n", "\n", "return", "door", ",", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.remove_wall": [[250, 285], ["roomgrid.RoomGrid.get_room", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set", "range", "roomgrid.RoomGrid.grid.set"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.get_room", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "remove_wall", "(", "self", ",", "i", ",", "j", ",", "wall_idx", ")", ":", "\n", "        ", "\"\"\"\n        Remove a wall between two rooms\n        \"\"\"", "\n", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "assert", "wall_idx", ">=", "0", "and", "wall_idx", "<", "4", "\n", "assert", "room", ".", "doors", "[", "wall_idx", "]", "is", "None", ",", "\"door exists on this wall\"", "\n", "assert", "room", ".", "neighbors", "[", "wall_idx", "]", ",", "\"invalid wall\"", "\n", "\n", "neighbor", "=", "room", ".", "neighbors", "[", "wall_idx", "]", "\n", "\n", "tx", ",", "ty", "=", "room", ".", "top", "\n", "w", ",", "h", "=", "room", ".", "size", "\n", "\n", "# Ordering of walls is right, down, left, up", "\n", "if", "wall_idx", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "w", "-", "1", ",", "ty", "+", "i", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "i", ",", "ty", "+", "h", "-", "1", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "h", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", ",", "ty", "+", "i", ",", "None", ")", "\n", "", "", "elif", "wall_idx", "==", "3", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "w", "-", "1", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "tx", "+", "i", ",", "ty", ",", "None", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"invalid wall index\"", "\n", "\n", "# Mark the rooms as connected", "\n", "", "room", ".", "doors", "[", "wall_idx", "]", "=", "True", "\n", "neighbor", ".", "doors", "[", "(", "wall_idx", "+", "2", ")", "%", "4", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent": [[286, 306], ["roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int", "super().place_agent", "roomgrid.RoomGrid.grid.get"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get"], ["", "def", "place_agent", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ",", "rand_dir", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Place the agent in a room\n        \"\"\"", "\n", "\n", "if", "i", "==", "None", ":", "\n", "            ", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "", "if", "j", "==", "None", ":", "\n", "            ", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "\n", "", "room", "=", "self", ".", "room_grid", "[", "j", "]", "[", "i", "]", "\n", "\n", "# Find a position that is not right in front of an object", "\n", "while", "True", ":", "\n", "            ", "super", "(", ")", ".", "place_agent", "(", "room", ".", "top", ",", "room", ".", "size", ",", "rand_dir", ",", "max_tries", "=", "1000", ")", "\n", "front_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "front_pos", ")", "\n", "if", "front_cell", "is", "None", "or", "front_cell", ".", "type", "is", "'wall'", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "self", ".", "agent_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.connect_all": [[307, 362], ["roomgrid.RoomGrid.room_from_pos", "set", "roomgrid.RoomGrid.connect_all.find_reach"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.room_from_pos", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "connect_all", "(", "self", ",", "door_colors", "=", "COLOR_NAMES", ",", "max_itrs", "=", "5000", ")", ":", "\n", "        ", "\"\"\"\n        Make sure that all rooms are reachable by the agent from its\n        starting position\n        \"\"\"", "\n", "\n", "start_room", "=", "self", ".", "room_from_pos", "(", "*", "self", ".", "agent_pos", ")", "\n", "\n", "added_doors", "=", "[", "]", "\n", "\n", "def", "find_reach", "(", ")", ":", "\n", "            ", "reach", "=", "set", "(", ")", "\n", "stack", "=", "[", "start_room", "]", "\n", "while", "len", "(", "stack", ")", ">", "0", ":", "\n", "                ", "room", "=", "stack", ".", "pop", "(", ")", "\n", "if", "room", "in", "reach", ":", "\n", "                    ", "continue", "\n", "", "reach", ".", "add", "(", "room", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "                    ", "if", "room", ".", "doors", "[", "i", "]", ":", "\n", "                        ", "stack", ".", "append", "(", "room", ".", "neighbors", "[", "i", "]", ")", "\n", "", "", "", "return", "reach", "\n", "\n", "", "num_itrs", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# This is to handle rare situations where random sampling produces", "\n", "# a level that cannot be connected, producing in an infinite loop", "\n", "            ", "if", "num_itrs", ">", "max_itrs", ":", "\n", "                ", "raise", "RecursionError", "(", "'connect_all failed'", ")", "\n", "", "num_itrs", "+=", "1", "\n", "\n", "# If all rooms are reachable, stop", "\n", "reach", "=", "find_reach", "(", ")", "\n", "if", "len", "(", "reach", ")", "==", "self", ".", "num_rows", "*", "self", ".", "num_cols", ":", "\n", "                ", "break", "\n", "\n", "# Pick a random room and door position", "\n", "", "i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "k", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "\n", "room", "=", "self", ".", "get_room", "(", "i", ",", "j", ")", "\n", "\n", "# If there is already a door there, skip", "\n", "if", "not", "room", ".", "door_pos", "[", "k", "]", "or", "room", ".", "doors", "[", "k", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "room", ".", "locked", "or", "room", ".", "neighbors", "[", "k", "]", ".", "locked", ":", "\n", "                ", "continue", "\n", "\n", "", "color", "=", "self", ".", "_rand_elem", "(", "door_colors", ")", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "i", ",", "j", ",", "k", ",", "color", ",", "False", ")", "\n", "added_doors", ".", "append", "(", "door", ")", "\n", "\n", "", "return", "added_doors", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_distractors": [[363, 400], ["len", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid._rand_elem", "roomgrid.RoomGrid.add_object", "objs.append", "dists.append", "roomgrid.RoomGrid._rand_int", "roomgrid.RoomGrid._rand_int", "objs.append"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "add_distractors", "(", "self", ",", "i", "=", "None", ",", "j", "=", "None", ",", "num_distractors", "=", "10", ",", "all_unique", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Add random objects that can potentially distract/confuse the agent.\n        \"\"\"", "\n", "\n", "# Collect a list of existing objects", "\n", "objs", "=", "[", "]", "\n", "for", "row", "in", "self", ".", "room_grid", ":", "\n", "            ", "for", "room", "in", "row", ":", "\n", "                ", "for", "obj", "in", "room", ".", "objs", ":", "\n", "                    ", "objs", ".", "append", "(", "(", "obj", ".", "type", ",", "obj", ".", "color", ")", ")", "\n", "\n", "# List of distractors added", "\n", "", "", "", "dists", "=", "[", "]", "\n", "\n", "while", "len", "(", "dists", ")", "<", "num_distractors", ":", "\n", "            ", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "type", "=", "self", ".", "_rand_elem", "(", "[", "'key'", ",", "'ball'", ",", "'box'", "]", ")", "\n", "obj", "=", "(", "type", ",", "color", ")", "\n", "\n", "if", "all_unique", "and", "obj", "in", "objs", ":", "\n", "                ", "continue", "\n", "\n", "# Add the object to a random room if no room specified", "\n", "", "room_i", "=", "i", "\n", "room_j", "=", "j", "\n", "if", "room_i", "==", "None", ":", "\n", "                ", "room_i", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_cols", ")", "\n", "", "if", "room_j", "==", "None", ":", "\n", "                ", "room_j", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "\n", "", "dist", ",", "pos", "=", "self", ".", "add_object", "(", "room_i", ",", "room_j", ",", "*", "obj", ")", "\n", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "dists", ".", "append", "(", "dist", ")", "\n", "\n", "", "return", "dists", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.reject_next_to": [[3, 13], ["abs", "abs"], "function", ["None"], ["def", "reject_next_to", "(", "env", ",", "pos", ")", ":", "\n", "    ", "\"\"\"\n    Function to filter out object positions that are right next to\n    the agent's starting point\n    \"\"\"", "\n", "\n", "sx", ",", "sy", "=", "env", ".", "agent_pos", "\n", "x", ",", "y", "=", "pos", "\n", "d", "=", "abs", "(", "sx", "-", "x", ")", "+", "abs", "(", "sy", "-", "y", ")", "\n", "return", "d", "<", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.register.register": [[5, 22], ["id.startswith", "gym.envs.registration.register", "env_list.append"], "function", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.register.register"], ["def", "register", "(", "\n", "id", ",", "\n", "entry_point", ",", "\n", "reward_threshold", "=", "0.95", "\n", ")", ":", "\n", "    ", "assert", "id", ".", "startswith", "(", "\"MiniGrid-\"", ")", "\n", "assert", "id", "not", "in", "env_list", "\n", "\n", "# Register the environment with OpenAI gym", "\n", "gym_register", "(", "\n", "id", "=", "id", ",", "\n", "entry_point", "=", "entry_point", ",", "\n", "reward_threshold", "=", "reward_threshold", "\n", ")", "\n", "\n", "# Add the environment to the set", "\n", "env_list", ".", "append", "(", "id", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.MazeEnv.__init__": [[15, 35], ["MiniGridEnv.__init__", "spaces.Discrete", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "7", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "5", ")", ",", "\n", "agent_start_dir", "=", "0", ",", "\n", "intermediate", "=", "False", ",", "\n", "one_intermediate", "=", "False", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "self", ".", "intermediate", "=", "intermediate", "\n", "self", ".", "one_intermediate", "=", "one_intermediate", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n", "self", ".", "actions", "=", "MazeEnv", ".", "Actions", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.MazeEnv._gen_grid": [[37, 67], ["Grid", "custom.MazeEnv.grid.wall_rect", "custom.MazeEnv.grid.horz_wall", "custom.MazeEnv.grid.horz_wall", "custom.MazeEnv.put_obj", "Goal", "custom.MazeEnv.place_agent", "custom.MazeEnv.grid.set", "custom.MazeEnv.grid.set", "custom.MazeEnv.grid.set", "custom.MazeEnv.grid.set", "custom.MazeEnv.grid.set", "Ball", "Ball", "Ball", "Ball", "Ball"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "1", ",", "4", ",", "length", "=", "4", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "2", ",", "length", "=", "4", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "width", "-", "2", ",", "1", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "#Place cookies", "\n", "", "if", "self", ".", "intermediate", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "2", ",", "1", ",", "Ball", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "2", ",", "3", ",", "Ball", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "5", ",", "3", ",", "Ball", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "3", ",", "5", ",", "Ball", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "one_intermediate", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "3", ",", "5", ",", "Ball", "(", ")", ")", "\n", "\n", "", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.MazeEnv.step": [[68, 108], ["custom.MazeEnv.grid.get", "custom.MazeEnv.gen_obs", "custom.MazeEnv.can_overlap", "custom.MazeEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.can_overlap", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "step_count", "+=", "1", "\n", "info", "=", "{", "'success'", ":", "False", "}", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "\n", "# Get the position in front of the agent", "\n", "fwd_pos", "=", "self", ".", "front_pos", "\n", "\n", "# Get the contents of the cell in front of the agent", "\n", "fwd_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "fwd_pos", ")", "\n", "if", "self", ".", "step_count", ">=", "self", ".", "max_steps", ":", "\n", "            ", "done", "=", "True", "\n", "# Rotate left", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "left", ":", "\n", "            ", "self", ".", "agent_dir", "-=", "1", "\n", "if", "self", ".", "agent_dir", "<", "0", ":", "\n", "                ", "self", ".", "agent_dir", "+=", "4", "\n", "\n", "# Rotate right", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "# Move forward", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "forward", ":", "\n", "            ", "if", "fwd_cell", "==", "None", "or", "fwd_cell", ".", "can_overlap", "(", ")", ":", "\n", "                ", "self", ".", "agent_pos", "=", "fwd_pos", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'goal'", ":", "\n", "                ", "done", "=", "True", "\n", "info", "[", "'success'", "]", "=", "True", "\n", "reward", "=", "10", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'ball'", ":", "\n", "                ", "reward", "=", "1", "\n", "self", ".", "grid", ".", "set", "(", "*", "fwd_pos", ",", "None", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown action\"", "\n", "\n", "", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "", "", "class", "MazeEnv0", "(", "MazeEnv", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.MazeEnv0.__init__": [[109, 111], ["custom.MazeEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "7", ",", "**", "kwargs", ")", "\n", "", "", "class", "IntermediateMazeEnv0", "(", "MazeEnv", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.IntermediateMazeEnv0.__init__": [[112, 114], ["custom.MazeEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "7", ",", "intermediate", "=", "True", ")", "\n", "", "", "class", "OneIntermediateMazeEnv0", "(", "MazeEnv", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.OneIntermediateMazeEnv0.__init__": [[115, 117], ["custom.MazeEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "7", ",", "one_intermediate", "=", "True", ")", "\n", "", "", "register", "(", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.ThreeDoorsEnv.__init__": [[143, 162], ["MiniGridEnv.__init__", "spaces.Discrete", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "9", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "7", ")", ",", "\n", "agent_start_dir", "=", "3", ",", "\n", "intermediate", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n", "self", ".", "carrying", "=", "[", "]", "\n", "self", ".", "actions", "=", "ThreeDoorsEnv", ".", "Actions", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "self", ".", "intermediate", "=", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.ThreeDoorsEnv._gen_grid": [[163, 197], ["Grid", "custom.ThreeDoorsEnv.grid.wall_rect", "custom.ThreeDoorsEnv.grid.horz_wall", "custom.ThreeDoorsEnv.grid.horz_wall", "custom.ThreeDoorsEnv.grid.horz_wall", "custom.ThreeDoorsEnv.grid.horz_wall", "custom.ThreeDoorsEnv.put_obj", "custom.ThreeDoorsEnv.grid.set", "custom.ThreeDoorsEnv.grid.set", "custom.ThreeDoorsEnv.grid.set", "custom.ThreeDoorsEnv.grid.set", "custom.ThreeDoorsEnv.grid.set", "custom.ThreeDoorsEnv.grid.set", "custom.ThreeDoorsEnv.grid.set", "custom.ThreeDoorsEnv.grid.set", "Goal", "custom.ThreeDoorsEnv.place_agent", "Key", "Key", "Key", "Key", "Door", "Door", "Door", "Door"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "1", ",", "length", "=", "5", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "3", ",", "length", "=", "5", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "5", ",", "length", "=", "5", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "7", ",", "length", "=", "5", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "7", ",", "1", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "#Place keys", "\n", "", "self", ".", "grid", ".", "set", "(", "1", ",", "2", ",", "Key", "(", "'purple'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "4", ",", "2", ",", "Key", "(", "'light green'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "3", ",", "4", ",", "Key", "(", "'blue'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "2", ",", "6", ",", "Key", "(", "'pink'", ")", ")", "\n", "\n", "#Place keys", "\n", "self", ".", "grid", ".", "set", "(", "3", ",", "2", ",", "Door", "(", "'purple'", ",", "is_locked", "=", "True", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "6", ",", "2", ",", "Door", "(", "'light green'", ",", "is_locked", "=", "True", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "5", ",", "4", ",", "Door", "(", "'blue'", ",", "is_locked", "=", "True", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "6", ",", "6", ",", "Door", "(", "'pink'", ",", "is_locked", "=", "True", ")", ")", "\n", "\n", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.ThreeDoorsEnv.step": [[198, 254], ["custom.ThreeDoorsEnv.grid.get", "custom.ThreeDoorsEnv.gen_obs", "custom.ThreeDoorsEnv.can_overlap", "custom.ThreeDoorsEnv.can_pickup", "custom.ThreeDoorsEnv.carrying.append", "custom.ThreeDoorsEnv.grid.set", "custom.ThreeDoorsEnv.toggle"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.can_overlap", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.can_pickup", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.toggle"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "step_count", "+=", "1", "\n", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "info", "=", "{", "'success'", ":", "False", "}", "\n", "\n", "# Get the position in front of the agent", "\n", "fwd_pos", "=", "self", ".", "front_pos", "\n", "\n", "# Get the contents of the cell in front of the agent", "\n", "fwd_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "fwd_pos", ")", "\n", "\n", "# Rotate left", "\n", "if", "self", ".", "step_count", ">=", "self", ".", "max_steps", ":", "\n", "            ", "done", "=", "True", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "left", ":", "\n", "            ", "self", ".", "agent_dir", "-=", "1", "\n", "if", "self", ".", "agent_dir", "<", "0", ":", "\n", "                ", "self", ".", "agent_dir", "+=", "4", "\n", "\n", "# Rotate right", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "# Move forward", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "forward", ":", "\n", "            ", "if", "fwd_cell", "==", "None", "or", "fwd_cell", ".", "can_overlap", "(", ")", ":", "\n", "                ", "self", ".", "agent_pos", "=", "fwd_pos", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'goal'", ":", "\n", "                ", "info", "[", "'success'", "]", "=", "True", "\n", "done", "=", "True", "\n", "reward", "=", "10", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "fwd_cell", "and", "fwd_cell", ".", "can_pickup", "(", ")", ":", "\n", "                ", "self", ".", "carrying", ".", "append", "(", "fwd_cell", ".", "color", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "fwd_pos", ",", "None", ")", "\n", "if", "self", ".", "intermediate", ":", "\n", "                    ", "reward", "=", "2", "\n", "", "", "", "elif", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "if", "fwd_cell", ":", "\n", "                ", "opened", "=", "fwd_cell", ".", "toggle", "(", "self", ",", "fwd_pos", ")", "\n", "if", "opened", "and", "self", ".", "intermediate", ":", "\n", "                    ", "reward", "=", "2", "\n", "", "", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown action\"", "\n", "\n", "", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "", "", "class", "DoorEnv0", "(", "ThreeDoorsEnv", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.DoorEnv0.__init__": [[255, 257], ["custom.ThreeDoorsEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.DoorEnv4.__init__": [[259, 261], ["custom.ThreeDoorsEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "intermediate", "=", "False", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.FourDoorsEnv.__init__": [[284, 305], ["MiniGridEnv.__init__", "spaces.Discrete", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "9", ",", "\n", "terminal_reward", "=", "1000", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "7", ")", ",", "\n", "agent_start_dir", "=", "3", ",", "\n", "intermediate", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n", "self", ".", "carrying", "=", "[", "]", "\n", "self", ".", "actions", "=", "FourDoorsEnv", ".", "Actions", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "len", "(", "self", ".", "actions", ")", ")", "\n", "self", ".", "terminal_reward", "=", "terminal_reward", "\n", "self", ".", "intermediate", "=", "intermediate", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.FourDoorsEnv._gen_grid": [[306, 343], ["Grid", "custom.FourDoorsEnv.grid.wall_rect", "custom.FourDoorsEnv.grid.horz_wall", "custom.FourDoorsEnv.grid.horz_wall", "custom.FourDoorsEnv.grid.horz_wall", "custom.FourDoorsEnv.grid.horz_wall", "custom.FourDoorsEnv.put_obj", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.grid.set", "Goal", "custom.FourDoorsEnv.place_agent", "Key", "Key", "Key", "Key", "Key", "Door", "Door", "Door", "Door", "Door"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "1", ",", "length", "=", "5", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "3", ",", "length", "=", "5", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "5", ",", "length", "=", "5", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "2", ",", "7", ",", "length", "=", "5", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "7", ",", "7", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "#Place keys", "\n", "", "self", ".", "grid", ".", "set", "(", "1", ",", "5", ",", "Key", "(", "'orange'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "1", ",", "2", ",", "Key", "(", "'purple'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "4", ",", "2", ",", "Key", "(", "'light green'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "3", ",", "4", ",", "Key", "(", "'blue'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "4", ",", "6", ",", "Key", "(", "'pink'", ")", ")", "\n", "\n", "#Place keys", "\n", "self", ".", "grid", ".", "set", "(", "1", ",", "3", ",", "Door", "(", "'orange'", ",", "is_locked", "=", "True", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "3", ",", "2", ",", "Door", "(", "'purple'", ",", "is_locked", "=", "True", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "6", ",", "2", ",", "Door", "(", "'light green'", ",", "is_locked", "=", "True", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "5", ",", "4", ",", "Door", "(", "'blue'", ",", "is_locked", "=", "True", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "6", ",", "6", ",", "Door", "(", "'pink'", ",", "is_locked", "=", "True", ")", ")", "\n", "\n", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.FourDoorsEnv.step": [[344, 401], ["custom.FourDoorsEnv.grid.get", "custom.FourDoorsEnv.gen_obs", "custom.FourDoorsEnv.can_overlap", "custom.FourDoorsEnv.can_pickup", "custom.FourDoorsEnv.carrying.append", "custom.FourDoorsEnv.grid.set", "custom.FourDoorsEnv.toggle"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.gen_obs", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Door.can_overlap", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.can_pickup", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Box.toggle"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "step_count", "+=", "1", "\n", "\n", "reward", "=", "0", "\n", "done", "=", "False", "\n", "info", "=", "{", "'success'", ":", "False", "}", "\n", "\n", "# Get the position in front of the agent", "\n", "fwd_pos", "=", "self", ".", "front_pos", "\n", "\n", "# Get the contents of the cell in front of the agent", "\n", "fwd_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "fwd_pos", ")", "\n", "# Rotate left", "\n", "if", "self", ".", "step_count", ">=", "self", ".", "max_steps", ":", "\n", "            ", "done", "=", "True", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "left", ":", "\n", "            ", "self", ".", "agent_dir", "-=", "1", "\n", "if", "self", ".", "agent_dir", "<", "0", ":", "\n", "                ", "self", ".", "agent_dir", "+=", "4", "\n", "\n", "# Rotate right", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "# Move forward", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "forward", ":", "\n", "            ", "if", "fwd_cell", "==", "None", "or", "fwd_cell", ".", "can_overlap", "(", ")", ":", "\n", "                ", "self", ".", "agent_pos", "=", "fwd_pos", "\n", "", "if", "fwd_cell", "!=", "None", "and", "fwd_cell", ".", "type", "==", "'goal'", ":", "\n", "                ", "info", "[", "'success'", "]", "=", "True", "\n", "done", "=", "True", "\n", "reward", "=", "self", ".", "terminal_reward", "\n", "", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "right", ":", "\n", "            ", "self", ".", "agent_dir", "=", "(", "self", ".", "agent_dir", "+", "1", ")", "%", "4", "\n", "\n", "", "elif", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "fwd_cell", "and", "fwd_cell", ".", "can_pickup", "(", ")", ":", "\n", "                ", "self", ".", "carrying", ".", "append", "(", "fwd_cell", ".", "color", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "fwd_pos", ",", "None", ")", "\n", "if", "self", ".", "intermediate", ":", "\n", "                    ", "reward", "=", "2", "\n", "", "", "", "elif", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "if", "fwd_cell", ":", "\n", "                ", "open", "=", "fwd_cell", ".", "toggle", "(", "self", ",", "fwd_pos", ")", "\n", "if", "open", "and", "self", ".", "intermediate", ":", "\n", "                    ", "reward", "=", "2", "\n", "", "", "", "elif", "self", ".", "step_count", ">=", "self", ".", "max_steps", ":", "\n", "            ", "done", "=", "True", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown action\"", "\n", "\n", "", "obs", "=", "self", ".", "gen_obs", "(", ")", "\n", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "", "", "class", "DoorEnv1", "(", "FourDoorsEnv", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.DoorEnv1.__init__": [[402, 404], ["custom.FourDoorsEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.custom.DoorEnv2.__init__": [[406, 408], ["custom.FourDoorsEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "terminal_reward", "=", "10", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.CrossingEnv.__init__": [[12, 21], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "9", ",", "num_crossings", "=", "1", ",", "obstacle_type", "=", "Lava", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_crossings", "=", "num_crossings", "\n", "self", ".", "obstacle_type", "=", "obstacle_type", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.CrossingEnv._gen_grid": [[23, 83], ["Grid", "crossing.CrossingEnv.grid.wall_rect", "crossing.CrossingEnv.put_obj", "crossing.CrossingEnv.np_random.shuffle", "sorted", "sorted", "itertools.chain", "crossing.CrossingEnv.np_random.shuffle", "Goal", "object", "object", "itertools.product", "itertools.product", "crossing.CrossingEnv.put_obj", "crossing.CrossingEnv.grid.set", "range", "range", "range", "range", "crossing.CrossingEnv.obstacle_type", "len", "len", "crossing.CrossingEnv.np_random.choice", "range", "crossing.CrossingEnv.np_random.choice", "range"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "width", "%", "2", "==", "1", "and", "height", "%", "2", "==", "1", "# odd size", "\n", "\n", "# Create an empty grid", "\n", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place the agent in the top-left corner", "\n", "self", ".", "agent_pos", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "width", "-", "2", ",", "height", "-", "2", ")", "\n", "\n", "# Place obstacles (lava or walls)", "\n", "v", ",", "h", "=", "object", "(", ")", ",", "object", "(", ")", "# singleton `vertical` and `horizontal` objects", "\n", "\n", "# Lava rivers or walls specified by direction and position in grid", "\n", "rivers", "=", "[", "(", "v", ",", "i", ")", "for", "i", "in", "range", "(", "2", ",", "height", "-", "2", ",", "2", ")", "]", "\n", "rivers", "+=", "[", "(", "h", ",", "j", ")", "for", "j", "in", "range", "(", "2", ",", "width", "-", "2", ",", "2", ")", "]", "\n", "self", ".", "np_random", ".", "shuffle", "(", "rivers", ")", "\n", "rivers", "=", "rivers", "[", ":", "self", ".", "num_crossings", "]", "# sample random rivers", "\n", "rivers_v", "=", "sorted", "(", "[", "pos", "for", "direction", ",", "pos", "in", "rivers", "if", "direction", "is", "v", "]", ")", "\n", "rivers_h", "=", "sorted", "(", "[", "pos", "for", "direction", ",", "pos", "in", "rivers", "if", "direction", "is", "h", "]", ")", "\n", "obstacle_pos", "=", "itt", ".", "chain", "(", "\n", "itt", ".", "product", "(", "range", "(", "1", ",", "width", "-", "1", ")", ",", "rivers_h", ")", ",", "\n", "itt", ".", "product", "(", "rivers_v", ",", "range", "(", "1", ",", "height", "-", "1", ")", ")", ",", "\n", ")", "\n", "for", "i", ",", "j", "in", "obstacle_pos", ":", "\n", "            ", "self", ".", "put_obj", "(", "self", ".", "obstacle_type", "(", ")", ",", "i", ",", "j", ")", "\n", "\n", "# Sample path to goal", "\n", "", "path", "=", "[", "h", "]", "*", "len", "(", "rivers_v", ")", "+", "[", "v", "]", "*", "len", "(", "rivers_h", ")", "\n", "self", ".", "np_random", ".", "shuffle", "(", "path", ")", "\n", "\n", "# Create openings", "\n", "limits_v", "=", "[", "0", "]", "+", "rivers_v", "+", "[", "height", "-", "1", "]", "\n", "limits_h", "=", "[", "0", "]", "+", "rivers_h", "+", "[", "width", "-", "1", "]", "\n", "room_i", ",", "room_j", "=", "0", ",", "0", "\n", "for", "direction", "in", "path", ":", "\n", "            ", "if", "direction", "is", "h", ":", "\n", "                ", "i", "=", "limits_v", "[", "room_i", "+", "1", "]", "\n", "j", "=", "self", ".", "np_random", ".", "choice", "(", "\n", "range", "(", "limits_h", "[", "room_j", "]", "+", "1", ",", "limits_h", "[", "room_j", "+", "1", "]", ")", ")", "\n", "room_i", "+=", "1", "\n", "", "elif", "direction", "is", "v", ":", "\n", "                ", "i", "=", "self", ".", "np_random", ".", "choice", "(", "\n", "range", "(", "limits_v", "[", "room_i", "]", "+", "1", ",", "limits_v", "[", "room_i", "+", "1", "]", ")", ")", "\n", "j", "=", "limits_h", "[", "room_j", "+", "1", "]", "\n", "room_j", "+=", "1", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "", "self", ".", "grid", ".", "set", "(", "i", ",", "j", ",", "None", ")", "\n", "\n", "", "self", ".", "mission", "=", "(", "\n", "\"avoid the lava and get to the green goal square\"", "\n", "if", "self", ".", "obstacle_type", "==", "Lava", "\n", "else", "\"find the opening and get to the green goal square\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.LavaCrossingEnv.__init__": [[86, 88], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.LavaCrossingS9N2Env.__init__": [[90, 92], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.LavaCrossingS9N3Env.__init__": [[94, 96], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.LavaCrossingS11N5Env.__init__": [[98, 100], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "11", ",", "num_crossings", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.SimpleCrossingEnv.__init__": [[122, 124], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "1", ",", "obstacle_type", "=", "Wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.SimpleCrossingS9N2Env.__init__": [[126, 128], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "2", ",", "obstacle_type", "=", "Wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.SimpleCrossingS9N3Env.__init__": [[130, 132], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "9", ",", "num_crossings", "=", "3", ",", "obstacle_type", "=", "Wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.crossing.SimpleCrossingS11N5Env.__init__": [[134, 136], ["crossing.CrossingEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "11", ",", "num_crossings", "=", "5", ",", "obstacle_type", "=", "Wall", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.fourrooms.FourRoomsEnv.__init__": [[14, 18], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "agent_pos", "=", "None", ",", "goal_pos", "=", "None", ")", ":", "\n", "        ", "self", ".", "_agent_default_pos", "=", "agent_pos", "\n", "self", ".", "_goal_default_pos", "=", "goal_pos", "\n", "super", "(", ")", ".", "__init__", "(", "grid_size", "=", "19", ",", "max_steps", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.fourrooms.FourRoomsEnv._gen_grid": [[19, 70], ["Grid", "fourrooms.FourRoomsEnv.grid.horz_wall", "fourrooms.FourRoomsEnv.grid.horz_wall", "fourrooms.FourRoomsEnv.grid.vert_wall", "fourrooms.FourRoomsEnv.grid.vert_wall", "range", "range", "fourrooms.FourRoomsEnv.grid.set", "fourrooms.FourRoomsEnv._rand_int", "fourrooms.FourRoomsEnv.place_agent", "Goal", "fourrooms.FourRoomsEnv.put_obj", "fourrooms.FourRoomsEnv.place_obj", "Goal", "fourrooms.FourRoomsEnv.grid.vert_wall", "fourrooms.FourRoomsEnv.grid.set", "fourrooms.FourRoomsEnv.grid.horz_wall", "fourrooms.FourRoomsEnv.grid.set", "fourrooms.FourRoomsEnv._rand_int", "fourrooms.FourRoomsEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "room_w", "=", "width", "//", "2", "\n", "room_h", "=", "height", "//", "2", "\n", "\n", "# For each row of rooms", "\n", "for", "j", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "\n", "# For each column", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "                ", "xL", "=", "i", "*", "room_w", "\n", "yT", "=", "j", "*", "room_h", "\n", "xR", "=", "xL", "+", "room_w", "\n", "yB", "=", "yT", "+", "room_h", "\n", "\n", "# Bottom wall and door", "\n", "if", "i", "+", "1", "<", "2", ":", "\n", "                    ", "self", ".", "grid", ".", "vert_wall", "(", "xR", ",", "yT", ",", "room_h", ")", "\n", "pos", "=", "(", "xR", ",", "self", ".", "_rand_int", "(", "yT", "+", "1", ",", "yB", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "None", ")", "\n", "\n", "# Bottom wall and door", "\n", "", "if", "j", "+", "1", "<", "2", ":", "\n", "                    ", "self", ".", "grid", ".", "horz_wall", "(", "xL", ",", "yB", ",", "room_w", ")", "\n", "pos", "=", "(", "self", ".", "_rand_int", "(", "xL", "+", "1", ",", "xR", ")", ",", "yB", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "None", ")", "\n", "\n", "# Randomize the player start position and orientation", "\n", "", "", "", "if", "self", ".", "_agent_default_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "_agent_default_pos", "\n", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "_agent_default_pos", ",", "None", ")", "\n", "self", ".", "agent_dir", "=", "self", ".", "_rand_int", "(", "0", ",", "4", ")", "# assuming random start direction", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "", "if", "self", ".", "_goal_default_pos", "is", "not", "None", ":", "\n", "            ", "goal", "=", "Goal", "(", ")", "\n", "self", ".", "put_obj", "(", "goal", ",", "*", "self", ".", "_goal_default_pos", ")", "\n", "goal", ".", "init_pos", ",", "goal", ".", "cur_pos", "=", "self", ".", "_goal_default_pos", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_obj", "(", "Goal", "(", ")", ")", "\n", "\n", "", "self", ".", "mission", "=", "'Reach the goal'", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.fourrooms.FourRoomsEnv.step": [[71, 74], ["MiniGridEnv.step"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.blockedunlockpickup.BlockedUnlockPickup.__init__": [[11, 19], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "16", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.blockedunlockpickup.BlockedUnlockPickup._gen_grid": [[21, 38], ["super()._gen_grid", "blockedunlockpickup.BlockedUnlockPickup.add_object", "blockedunlockpickup.BlockedUnlockPickup.add_door", "blockedunlockpickup.BlockedUnlockPickup._rand_color", "blockedunlockpickup.BlockedUnlockPickup.grid.set", "blockedunlockpickup.BlockedUnlockPickup.add_object", "blockedunlockpickup.BlockedUnlockPickup.place_agent", "gym_minigrid.minigrid.Ball"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_color", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Add a box to the room on the right", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "1", ",", "0", ",", "kind", "=", "\"box\"", ")", "\n", "# Make sure the two rooms are directly connected by a locked door", "\n", "door", ",", "pos", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "locked", "=", "True", ")", "\n", "# Block the door with a ball", "\n", "color", "=", "self", ".", "_rand_color", "(", ")", "\n", "self", ".", "grid", ".", "set", "(", "pos", "[", "0", "]", "-", "1", ",", "pos", "[", "1", "]", ",", "Ball", "(", "color", ")", ")", "\n", "# Add a key to unlock the door", "\n", "self", ".", "add_object", "(", "0", ",", "0", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "self", ".", "obj", "=", "obj", "\n", "self", ".", "mission", "=", "\"pick up the %s %s\"", "%", "(", "obj", ".", "color", ",", "obj", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.blockedunlockpickup.BlockedUnlockPickup.step": [[39, 48], ["super().step", "blockedunlockpickup.BlockedUnlockPickup._reward"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "self", ".", "carrying", "and", "self", ".", "carrying", "==", "self", ".", "obj", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.distshift.DistShiftEnv.__init__": [[9, 28], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "width", "=", "9", ",", "\n", "height", "=", "7", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "1", ")", ",", "\n", "agent_start_dir", "=", "0", ",", "\n", "strip2_row", "=", "2", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "self", ".", "goal_pos", "=", "(", "width", "-", "2", ",", "1", ")", "\n", "self", ".", "strip2_row", "=", "strip2_row", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "\n", "max_steps", "=", "4", "*", "width", "*", "height", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.distshift.DistShiftEnv._gen_grid": [[30, 53], ["Grid", "distshift.DistShiftEnv.grid.wall_rect", "distshift.DistShiftEnv.put_obj", "range", "Goal", "distshift.DistShiftEnv.grid.set", "distshift.DistShiftEnv.grid.set", "distshift.DistShiftEnv.place_agent", "Lava", "Lava"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "*", "self", ".", "goal_pos", ")", "\n", "\n", "# Place the lava rows", "\n", "for", "i", "in", "range", "(", "self", ".", "width", "-", "6", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "3", "+", "i", ",", "1", ",", "Lava", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "3", "+", "i", ",", "self", ".", "strip2_row", ",", "Lava", "(", ")", ")", "\n", "\n", "# Place the agent", "\n", "", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.distshift.DistShift1.__init__": [[55, 57], ["distshift.DistShiftEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "strip2_row", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.distshift.DistShift2.__init__": [[59, 61], ["distshift.DistShiftEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "strip2_row", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lockedroom.Room.__init__": [[6, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "top", ",", "\n", "size", ",", "\n", "doorPos", "\n", ")", ":", "\n", "        ", "self", ".", "top", "=", "top", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "doorPos", "=", "doorPos", "\n", "self", ".", "color", "=", "None", "\n", "self", ".", "locked", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lockedroom.Room.rand_pos": [[17, 23], ["env._rand_pos"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_pos"], ["", "def", "rand_pos", "(", "self", ",", "env", ")", ":", "\n", "        ", "topX", ",", "topY", "=", "self", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "self", ".", "size", "\n", "return", "env", ".", "_rand_pos", "(", "\n", "topX", "+", "1", ",", "topX", "+", "sizeX", "-", "1", ",", "\n", "topY", "+", "1", ",", "topY", "+", "sizeY", "-", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lockedroom.LockedRoom.__init__": [[31, 36], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "19", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "grid_size", "=", "size", ",", "max_steps", "=", "10", "*", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lockedroom.LockedRoom._gen_grid": [[37, 116], ["Grid", "range", "range", "range", "range", "lockedroom.LockedRoom._rand_elem", "lockedroom.LockedRoom.rand_pos", "lockedroom.LockedRoom.grid.set", "set", "lockedroom.LockedRoom.rand_pos", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.place_agent", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "range", "range", "lockedroom.LockedRoom.rooms.append", "lockedroom.LockedRoom.rooms.append", "Goal", "lockedroom.LockedRoom._rand_elem", "set.remove", "lockedroom.LockedRoom._rand_elem", "Key", "Wall", "Wall", "Wall", "Wall", "Wall", "Wall", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "lockedroom.Room", "lockedroom.Room", "sorted", "lockedroom.LockedRoom.grid.set", "lockedroom.LockedRoom.grid.set", "Wall", "Wall", "Door", "Door"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lockedroom.Room.rand_pos", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lockedroom.Room.rand_pos", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "for", "i", "in", "range", "(", "0", ",", "width", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "i", ",", "0", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "i", ",", "height", "-", "1", ",", "Wall", "(", ")", ")", "\n", "", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "0", ",", "j", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "width", "-", "1", ",", "j", ",", "Wall", "(", ")", ")", "\n", "\n", "# Hallway walls", "\n", "", "lWallIdx", "=", "width", "//", "2", "-", "2", "\n", "rWallIdx", "=", "width", "//", "2", "+", "2", "\n", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "lWallIdx", ",", "j", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "rWallIdx", ",", "j", ",", "Wall", "(", ")", ")", "\n", "\n", "", "self", ".", "rooms", "=", "[", "]", "\n", "\n", "# Room splitting walls", "\n", "for", "n", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "            ", "j", "=", "n", "*", "(", "height", "//", "3", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "lWallIdx", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "i", ",", "j", ",", "Wall", "(", ")", ")", "\n", "", "for", "i", "in", "range", "(", "rWallIdx", ",", "width", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "i", ",", "j", ",", "Wall", "(", ")", ")", "\n", "\n", "", "roomW", "=", "lWallIdx", "+", "1", "\n", "roomH", "=", "height", "//", "3", "+", "1", "\n", "self", ".", "rooms", ".", "append", "(", "Room", "(", "\n", "(", "0", ",", "j", ")", ",", "\n", "(", "roomW", ",", "roomH", ")", ",", "\n", "(", "lWallIdx", ",", "j", "+", "3", ")", "\n", ")", ")", "\n", "self", ".", "rooms", ".", "append", "(", "Room", "(", "\n", "(", "rWallIdx", ",", "j", ")", ",", "\n", "(", "roomW", ",", "roomH", ")", ",", "\n", "(", "rWallIdx", ",", "j", "+", "3", ")", "\n", ")", ")", "\n", "\n", "# Choose one random room to be locked", "\n", "", "lockedRoom", "=", "self", ".", "_rand_elem", "(", "self", ".", "rooms", ")", "\n", "lockedRoom", ".", "locked", "=", "True", "\n", "goalPos", "=", "lockedRoom", ".", "rand_pos", "(", "self", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "goalPos", ",", "Goal", "(", ")", ")", "\n", "\n", "# Assign the door colors", "\n", "colors", "=", "set", "(", "COLOR_NAMES", ")", "\n", "for", "room", "in", "self", ".", "rooms", ":", "\n", "            ", "color", "=", "self", ".", "_rand_elem", "(", "sorted", "(", "colors", ")", ")", "\n", "colors", ".", "remove", "(", "color", ")", "\n", "room", ".", "color", "=", "color", "\n", "if", "room", ".", "locked", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "*", "room", ".", "doorPos", ",", "Door", "(", "color", ",", "is_locked", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "*", "room", ".", "doorPos", ",", "Door", "(", "color", ")", ")", "\n", "\n", "# Select a random room to contain the key", "\n", "", "", "while", "True", ":", "\n", "            ", "keyRoom", "=", "self", ".", "_rand_elem", "(", "self", ".", "rooms", ")", "\n", "if", "keyRoom", "!=", "lockedRoom", ":", "\n", "                ", "break", "\n", "", "", "keyPos", "=", "keyRoom", ".", "rand_pos", "(", "self", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "keyPos", ",", "Key", "(", "lockedRoom", ".", "color", ")", ")", "\n", "\n", "# Randomize the player start position and orientation", "\n", "self", ".", "agent_pos", "=", "self", ".", "place_agent", "(", "\n", "top", "=", "(", "lWallIdx", ",", "0", ")", ",", "\n", "size", "=", "(", "rWallIdx", "-", "lWallIdx", ",", "height", ")", "\n", ")", "\n", "\n", "# Generate the mission string", "\n", "self", ".", "mission", "=", "(", "\n", "'get the %s key from the %s room, '", "\n", "'unlock the %s door and '", "\n", "'go to the goal'", "\n", ")", "%", "(", "lockedRoom", ".", "color", ",", "keyRoom", ".", "color", ",", "lockedRoom", ".", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lockedroom.LockedRoom.step": [[117, 120], ["MiniGridEnv.step"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.putnear.PutNearEnv.__init__": [[10, 22], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "6", ",", "\n", "numObjs", "=", "2", "\n", ")", ":", "\n", "        ", "self", ".", "numObjs", "=", "numObjs", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.putnear.PutNearEnv._gen_grid": [[24, 89], ["Grid", "putnear.PutNearEnv.grid.horz_wall", "putnear.PutNearEnv.grid.horz_wall", "putnear.PutNearEnv.grid.vert_wall", "putnear.PutNearEnv.grid.vert_wall", "putnear.PutNearEnv.place_agent", "putnear.PutNearEnv._rand_int", "len", "putnear.PutNearEnv._rand_elem", "putnear.PutNearEnv._rand_elem", "putnear.PutNearEnv.place_obj", "objs.append", "objPos.append", "len", "putnear.PutNearEnv._rand_int", "Key", "len", "Ball", "abs", "abs", "Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "# Types and colors of objects we can generate", "\n", "types", "=", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "objPos", "=", "[", "]", "\n", "\n", "def", "near_obj", "(", "env", ",", "p1", ")", ":", "\n", "            ", "for", "p2", "in", "objPos", ":", "\n", "                ", "dx", "=", "p1", "[", "0", "]", "-", "p2", "[", "0", "]", "\n", "dy", "=", "p1", "[", "1", "]", "-", "p2", "[", "1", "]", "\n", "if", "abs", "(", "dx", ")", "<=", "1", "and", "abs", "(", "dy", ")", "<=", "1", ":", "\n", "                    ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "# Until we have generated all the objects", "\n", "", "while", "len", "(", "objs", ")", "<", "self", ".", "numObjs", ":", "\n", "            ", "objType", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "objColor", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "\n", "# If this object already exists, try again", "\n", "if", "(", "objType", ",", "objColor", ")", "in", "objs", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "objType", "==", "'key'", ":", "\n", "                ", "obj", "=", "Key", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'ball'", ":", "\n", "                ", "obj", "=", "Ball", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'box'", ":", "\n", "                ", "obj", "=", "Box", "(", "objColor", ")", "\n", "\n", "", "pos", "=", "self", ".", "place_obj", "(", "obj", ",", "reject_fn", "=", "near_obj", ")", "\n", "\n", "objs", ".", "append", "(", "(", "objType", ",", "objColor", ")", ")", "\n", "objPos", ".", "append", "(", "pos", ")", "\n", "\n", "# Randomize the agent start position and orientation", "\n", "", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Choose a random object to be moved", "\n", "objIdx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "objs", ")", ")", "\n", "self", ".", "move_type", ",", "self", ".", "moveColor", "=", "objs", "[", "objIdx", "]", "\n", "self", ".", "move_pos", "=", "objPos", "[", "objIdx", "]", "\n", "\n", "# Choose a target object (to put the first object next to)", "\n", "while", "True", ":", "\n", "            ", "targetIdx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "objs", ")", ")", "\n", "if", "targetIdx", "!=", "objIdx", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "target_type", ",", "self", ".", "target_color", "=", "objs", "[", "targetIdx", "]", "\n", "self", ".", "target_pos", "=", "objPos", "[", "targetIdx", "]", "\n", "\n", "self", ".", "mission", "=", "'put the %s %s near the %s %s'", "%", "(", "\n", "self", ".", "moveColor", ",", "\n", "self", ".", "move_type", ",", "\n", "self", ".", "target_color", ",", "\n", "self", ".", "target_type", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.putnear.PutNearEnv.step": [[91, 113], ["super().step", "putnear.PutNearEnv.grid.get", "putnear.PutNearEnv._reward", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "preCarrying", "=", "self", ".", "carrying", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "u", ",", "v", "=", "self", ".", "dir_vec", "\n", "ox", ",", "oy", "=", "(", "self", ".", "agent_pos", "[", "0", "]", "+", "u", ",", "self", ".", "agent_pos", "[", "1", "]", "+", "v", ")", "\n", "tx", ",", "ty", "=", "self", ".", "target_pos", "\n", "\n", "# If we picked up the wrong object, terminate the episode", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", "and", "self", ".", "carrying", ":", "\n", "            ", "if", "self", ".", "carrying", ".", "type", "!=", "self", ".", "move_type", "or", "self", ".", "carrying", ".", "color", "!=", "self", ".", "moveColor", ":", "\n", "                ", "done", "=", "True", "\n", "\n", "# If successfully dropping an object near the target", "\n", "", "", "if", "action", "==", "self", ".", "actions", ".", "drop", "and", "preCarrying", ":", "\n", "            ", "if", "self", ".", "grid", ".", "get", "(", "ox", ",", "oy", ")", "is", "preCarrying", ":", "\n", "                ", "if", "abs", "(", "ox", "-", "tx", ")", "<=", "1", "and", "abs", "(", "oy", "-", "ty", ")", "<=", "1", ":", "\n", "                    ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "", "done", "=", "True", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.putnear.PutNear8x8N3.__init__": [[115, 117], ["putnear.PutNearEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "8", ",", "numObjs", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.redbluedoors.RedBlueDoorEnv.__init__": [[11, 18], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "8", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "width", "=", "2", "*", "size", ",", "\n", "height", "=", "size", ",", "\n", "max_steps", "=", "20", "*", "size", "*", "size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.redbluedoors.RedBlueDoorEnv._gen_grid": [[20, 43], ["Grid", "redbluedoors.RedBlueDoorEnv.grid.wall_rect", "redbluedoors.RedBlueDoorEnv.grid.wall_rect", "redbluedoors.RedBlueDoorEnv.place_agent", "redbluedoors.RedBlueDoorEnv._rand_int", "Door", "redbluedoors.RedBlueDoorEnv.grid.set", "redbluedoors.RedBlueDoorEnv._rand_int", "Door", "redbluedoors.RedBlueDoorEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the grid walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "2", "*", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "self", ".", "grid", ".", "wall_rect", "(", "self", ".", "size", "//", "2", ",", "0", ",", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "\n", "# Place the agent in the top-left corner", "\n", "self", ".", "place_agent", "(", "top", "=", "(", "self", ".", "size", "//", "2", ",", "0", ")", ",", "size", "=", "(", "self", ".", "size", ",", "self", ".", "size", ")", ")", "\n", "\n", "# Add a red door at a random position in the left wall", "\n", "pos", "=", "self", ".", "_rand_int", "(", "1", ",", "self", ".", "size", "-", "1", ")", "\n", "self", ".", "red_door", "=", "Door", "(", "\"red\"", ")", "\n", "self", ".", "grid", ".", "set", "(", "self", ".", "size", "//", "2", ",", "pos", ",", "self", ".", "red_door", ")", "\n", "\n", "# Add a blue door at a random position in the right wall", "\n", "pos", "=", "self", ".", "_rand_int", "(", "1", ",", "self", ".", "size", "-", "1", ")", "\n", "self", ".", "blue_door", "=", "Door", "(", "\"blue\"", ")", "\n", "self", ".", "grid", ".", "set", "(", "self", ".", "size", "//", "2", "+", "self", ".", "size", "-", "1", ",", "pos", ",", "self", ".", "blue_door", ")", "\n", "\n", "# Generate the mission string", "\n", "self", ".", "mission", "=", "\"open the red door then the blue door\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.redbluedoors.RedBlueDoorEnv.step": [[44, 67], ["MiniGridEnv.step", "redbluedoors.RedBlueDoorEnv._reward"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "red_door_opened_before", "=", "self", ".", "red_door", ".", "is_open", "\n", "blue_door_opened_before", "=", "self", ".", "blue_door", ".", "is_open", "\n", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "red_door_opened_after", "=", "self", ".", "red_door", ".", "is_open", "\n", "blue_door_opened_after", "=", "self", ".", "blue_door", ".", "is_open", "\n", "\n", "if", "blue_door_opened_after", ":", "\n", "            ", "if", "red_door_opened_before", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "reward", "=", "0", "\n", "done", "=", "True", "\n", "\n", "", "", "elif", "red_door_opened_after", ":", "\n", "            ", "if", "blue_door_opened_before", ":", "\n", "                ", "reward", "=", "0", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.redbluedoors.RedBlueDoorEnv6x6.__init__": [[69, 71], ["redbluedoors.RedBlueDoorEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.Room.__init__": [[5, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "top", ",", "\n", "size", ",", "\n", "entryDoorPos", ",", "\n", "exitDoorPos", "\n", ")", ":", "\n", "        ", "self", ".", "top", "=", "top", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "entryDoorPos", "=", "entryDoorPos", "\n", "self", ".", "exitDoorPos", "=", "exitDoorPos", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.MultiRoomEnv.__init__": [[21, 39], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "\n", "minNumRooms", ",", "\n", "maxNumRooms", ",", "\n", "maxRoomSize", "=", "10", "\n", ")", ":", "\n", "        ", "assert", "minNumRooms", ">", "0", "\n", "assert", "maxNumRooms", ">=", "minNumRooms", "\n", "assert", "maxRoomSize", ">=", "4", "\n", "\n", "self", ".", "minNumRooms", "=", "minNumRooms", "\n", "self", ".", "maxNumRooms", "=", "maxNumRooms", "\n", "self", ".", "maxRoomSize", "=", "maxRoomSize", "\n", "\n", "self", ".", "rooms", "=", "[", "]", "\n", "\n", "super", "(", "MultiRoomEnv", ",", "self", ")", ".", "__init__", "(", "\n", "grid_size", "=", "25", ",", "\n", "max_steps", "=", "self", ".", "maxNumRooms", "*", "20", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.MultiRoomEnv._gen_grid": [[41, 118], ["multiroom.MultiRoomEnv._rand_int", "Grid", "Wall", "enumerate", "multiroom.MultiRoomEnv.place_agent", "multiroom.MultiRoomEnv.place_obj", "len", "multiroom.MultiRoomEnv._placeRoom", "len", "range", "range", "Goal", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "len", "len", "multiroom.MultiRoomEnv.grid.set", "multiroom.MultiRoomEnv.grid.set", "multiroom.MultiRoomEnv.grid.set", "multiroom.MultiRoomEnv.grid.set", "set", "multiroom.MultiRoomEnv._rand_elem", "Door", "multiroom.MultiRoomEnv.grid.set", "set.remove", "sorted"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.MultiRoomEnv._placeRoom", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "roomList", "=", "[", "]", "\n", "\n", "# Choose a random number of rooms to generate", "\n", "numRooms", "=", "self", ".", "_rand_int", "(", "self", ".", "minNumRooms", ",", "self", ".", "maxNumRooms", "+", "1", ")", "\n", "\n", "while", "len", "(", "roomList", ")", "<", "numRooms", ":", "\n", "            ", "curRoomList", "=", "[", "]", "\n", "\n", "entryDoorPos", "=", "(", "\n", "self", ".", "_rand_int", "(", "0", ",", "width", "-", "2", ")", ",", "\n", "self", ".", "_rand_int", "(", "0", ",", "width", "-", "2", ")", "\n", ")", "\n", "\n", "# Recursively place the rooms", "\n", "self", ".", "_placeRoom", "(", "\n", "numRooms", ",", "\n", "roomList", "=", "curRoomList", ",", "\n", "minSz", "=", "4", ",", "\n", "maxSz", "=", "self", ".", "maxRoomSize", ",", "\n", "entryDoorWall", "=", "2", ",", "\n", "entryDoorPos", "=", "entryDoorPos", "\n", ")", "\n", "\n", "if", "len", "(", "curRoomList", ")", ">", "len", "(", "roomList", ")", ":", "\n", "                ", "roomList", "=", "curRoomList", "\n", "\n", "# Store the list of rooms in this environment", "\n", "", "", "assert", "len", "(", "roomList", ")", ">", "0", "\n", "self", ".", "rooms", "=", "roomList", "\n", "\n", "# Create the grid", "\n", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "wall", "=", "Wall", "(", ")", "\n", "\n", "prevDoorColor", "=", "None", "\n", "\n", "# For each room", "\n", "for", "idx", ",", "room", "in", "enumerate", "(", "roomList", ")", ":", "\n", "\n", "            ", "topX", ",", "topY", "=", "room", ".", "top", "\n", "sizeX", ",", "sizeY", "=", "room", ".", "size", "\n", "\n", "# Draw the top and bottom walls", "\n", "for", "i", "in", "range", "(", "0", ",", "sizeX", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "topX", "+", "i", ",", "topY", ",", "wall", ")", "\n", "self", ".", "grid", ".", "set", "(", "topX", "+", "i", ",", "topY", "+", "sizeY", "-", "1", ",", "wall", ")", "\n", "\n", "# Draw the left and right walls", "\n", "", "for", "j", "in", "range", "(", "0", ",", "sizeY", ")", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "topX", ",", "topY", "+", "j", ",", "wall", ")", "\n", "self", ".", "grid", ".", "set", "(", "topX", "+", "sizeX", "-", "1", ",", "topY", "+", "j", ",", "wall", ")", "\n", "\n", "# If this isn't the first room, place the entry door", "\n", "", "if", "idx", ">", "0", ":", "\n", "# Pick a door color different from the previous one", "\n", "                ", "doorColors", "=", "set", "(", "COLOR_NAMES", ")", "\n", "if", "prevDoorColor", ":", "\n", "                    ", "doorColors", ".", "remove", "(", "prevDoorColor", ")", "\n", "# Note: the use of sorting here guarantees determinism,", "\n", "# This is needed because Python's set is not deterministic", "\n", "", "doorColor", "=", "self", ".", "_rand_elem", "(", "sorted", "(", "doorColors", ")", ")", "\n", "\n", "entryDoor", "=", "Door", "(", "doorColor", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "room", ".", "entryDoorPos", ",", "entryDoor", ")", "\n", "prevDoorColor", "=", "doorColor", "\n", "\n", "prevRoom", "=", "roomList", "[", "idx", "-", "1", "]", "\n", "prevRoom", ".", "exitDoorPos", "=", "room", ".", "entryDoorPos", "\n", "\n", "# Randomize the starting agent position and direction", "\n", "", "", "self", ".", "place_agent", "(", "roomList", "[", "0", "]", ".", "top", ",", "roomList", "[", "0", "]", ".", "size", ")", "\n", "\n", "# Place the final goal in the last room", "\n", "self", ".", "goal_pos", "=", "self", ".", "place_obj", "(", "Goal", "(", ")", ",", "roomList", "[", "-", "1", "]", ".", "top", ",", "roomList", "[", "-", "1", "]", ".", "size", ")", "\n", "\n", "self", ".", "mission", "=", "'traverse the rooms to get to the goal'", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.MultiRoomEnv._placeRoom": [[119, 238], ["multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "roomList.append", "range", "len", "multiroom.Room", "set", "set.remove", "multiroom.MultiRoomEnv._rand_elem", "multiroom.MultiRoomEnv._placeRoom", "multiroom.MultiRoomEnv._rand_int", "sorted", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int", "multiroom.MultiRoomEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.MultiRoomEnv._placeRoom", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_placeRoom", "(", "\n", "self", ",", "\n", "numLeft", ",", "\n", "roomList", ",", "\n", "minSz", ",", "\n", "maxSz", ",", "\n", "entryDoorWall", ",", "\n", "entryDoorPos", "\n", ")", ":", "\n", "# Choose the room size randomly", "\n", "        ", "sizeX", "=", "self", ".", "_rand_int", "(", "minSz", ",", "maxSz", "+", "1", ")", "\n", "sizeY", "=", "self", ".", "_rand_int", "(", "minSz", ",", "maxSz", "+", "1", ")", "\n", "\n", "# The first room will be at the door position", "\n", "if", "len", "(", "roomList", ")", "==", "0", ":", "\n", "            ", "topX", ",", "topY", "=", "entryDoorPos", "\n", "# Entry on the right", "\n", "", "elif", "entryDoorWall", "==", "0", ":", "\n", "            ", "topX", "=", "entryDoorPos", "[", "0", "]", "-", "sizeX", "+", "1", "\n", "y", "=", "entryDoorPos", "[", "1", "]", "\n", "topY", "=", "self", ".", "_rand_int", "(", "y", "-", "sizeY", "+", "2", ",", "y", ")", "\n", "# Entry wall on the south", "\n", "", "elif", "entryDoorWall", "==", "1", ":", "\n", "            ", "x", "=", "entryDoorPos", "[", "0", "]", "\n", "topX", "=", "self", ".", "_rand_int", "(", "x", "-", "sizeX", "+", "2", ",", "x", ")", "\n", "topY", "=", "entryDoorPos", "[", "1", "]", "-", "sizeY", "+", "1", "\n", "# Entry wall on the left", "\n", "", "elif", "entryDoorWall", "==", "2", ":", "\n", "            ", "topX", "=", "entryDoorPos", "[", "0", "]", "\n", "y", "=", "entryDoorPos", "[", "1", "]", "\n", "topY", "=", "self", ".", "_rand_int", "(", "y", "-", "sizeY", "+", "2", ",", "y", ")", "\n", "# Entry wall on the top", "\n", "", "elif", "entryDoorWall", "==", "3", ":", "\n", "            ", "x", "=", "entryDoorPos", "[", "0", "]", "\n", "topX", "=", "self", ".", "_rand_int", "(", "x", "-", "sizeX", "+", "2", ",", "x", ")", "\n", "topY", "=", "entryDoorPos", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "entryDoorWall", "\n", "\n", "# If the room is out of the grid, can't place a room here", "\n", "", "if", "topX", "<", "0", "or", "topY", "<", "0", ":", "\n", "            ", "return", "False", "\n", "", "if", "topX", "+", "sizeX", ">", "self", ".", "width", "or", "topY", "+", "sizeY", ">=", "self", ".", "height", ":", "\n", "            ", "return", "False", "\n", "\n", "# If the room intersects with previous rooms, can't place it here", "\n", "", "for", "room", "in", "roomList", "[", ":", "-", "1", "]", ":", "\n", "            ", "nonOverlap", "=", "topX", "+", "sizeX", "<", "room", ".", "top", "[", "0", "]", "or", "room", ".", "top", "[", "0", "]", "+", "room", ".", "size", "[", "0", "]", "<=", "topX", "or", "topY", "+", "sizeY", "<", "room", ".", "top", "[", "1", "]", "or", "room", ".", "top", "[", "1", "]", "+", "room", ".", "size", "[", "1", "]", "<=", "topY", "\n", "\n", "if", "not", "nonOverlap", ":", "\n", "                ", "return", "False", "\n", "\n", "# Add this room to the list", "\n", "", "", "roomList", ".", "append", "(", "Room", "(", "\n", "(", "topX", ",", "topY", ")", ",", "\n", "(", "sizeX", ",", "sizeY", ")", ",", "\n", "entryDoorPos", ",", "\n", "None", "\n", ")", ")", "\n", "\n", "# If this was the last room, stop", "\n", "if", "numLeft", "==", "1", ":", "\n", "            ", "return", "True", "\n", "\n", "# Try placing the next room", "\n", "", "for", "i", "in", "range", "(", "0", ",", "8", ")", ":", "\n", "\n", "# Pick which wall to place the out door on", "\n", "            ", "wallSet", "=", "set", "(", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "wallSet", ".", "remove", "(", "entryDoorWall", ")", "\n", "exitDoorWall", "=", "self", ".", "_rand_elem", "(", "sorted", "(", "wallSet", ")", ")", "\n", "nextEntryWall", "=", "(", "exitDoorWall", "+", "2", ")", "%", "4", "\n", "\n", "# Pick the exit door position", "\n", "# Exit on right wall", "\n", "if", "exitDoorWall", "==", "0", ":", "\n", "                ", "exitDoorPos", "=", "(", "\n", "topX", "+", "sizeX", "-", "1", ",", "\n", "topY", "+", "self", ".", "_rand_int", "(", "1", ",", "sizeY", "-", "1", ")", "\n", ")", "\n", "# Exit on south wall", "\n", "", "elif", "exitDoorWall", "==", "1", ":", "\n", "                ", "exitDoorPos", "=", "(", "\n", "topX", "+", "self", ".", "_rand_int", "(", "1", ",", "sizeX", "-", "1", ")", ",", "\n", "topY", "+", "sizeY", "-", "1", "\n", ")", "\n", "# Exit on left wall", "\n", "", "elif", "exitDoorWall", "==", "2", ":", "\n", "                ", "exitDoorPos", "=", "(", "\n", "topX", ",", "\n", "topY", "+", "self", ".", "_rand_int", "(", "1", ",", "sizeY", "-", "1", ")", "\n", ")", "\n", "# Exit on north wall", "\n", "", "elif", "exitDoorWall", "==", "3", ":", "\n", "                ", "exitDoorPos", "=", "(", "\n", "topX", "+", "self", ".", "_rand_int", "(", "1", ",", "sizeX", "-", "1", ")", ",", "\n", "topY", "\n", ")", "\n", "", "else", ":", "\n", "                ", "assert", "False", "\n", "\n", "# Recursively create the other rooms", "\n", "", "success", "=", "self", ".", "_placeRoom", "(", "\n", "numLeft", "-", "1", ",", "\n", "roomList", "=", "roomList", ",", "\n", "minSz", "=", "minSz", ",", "\n", "maxSz", "=", "maxSz", ",", "\n", "entryDoorWall", "=", "nextEntryWall", ",", "\n", "entryDoorPos", "=", "exitDoorPos", "\n", ")", "\n", "\n", "if", "success", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.MultiRoomEnvN2S4.__init__": [[240, 245], ["multiroom.MultiRoomEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "minNumRooms", "=", "2", ",", "\n", "maxNumRooms", "=", "2", ",", "\n", "maxRoomSize", "=", "4", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.MultiRoomEnvN4S5.__init__": [[248, 253], ["multiroom.MultiRoomEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "minNumRooms", "=", "4", ",", "\n", "maxNumRooms", "=", "4", ",", "\n", "maxRoomSize", "=", "5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.multiroom.MultiRoomEnvN6.__init__": [[256, 260], ["multiroom.MultiRoomEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "minNumRooms", "=", "6", ",", "\n", "maxNumRooms", "=", "6", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotoobject.GoToObjectEnv.__init__": [[10, 22], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "6", ",", "\n", "numObjs", "=", "2", "\n", ")", ":", "\n", "        ", "self", ".", "numObjs", "=", "numObjs", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", "**", "2", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotoobject.GoToObjectEnv._gen_grid": [[24, 66], ["Grid", "gotoobject.GoToObjectEnv.grid.wall_rect", "gotoobject.GoToObjectEnv.place_agent", "gotoobject.GoToObjectEnv._rand_int", "len", "gotoobject.GoToObjectEnv._rand_elem", "gotoobject.GoToObjectEnv._rand_elem", "gotoobject.GoToObjectEnv.place_obj", "objs.append", "objPos.append", "len", "Key", "Ball", "Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Types and colors of objects we can generate", "\n", "types", "=", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "objPos", "=", "[", "]", "\n", "\n", "# Until we have generated all the objects", "\n", "while", "len", "(", "objs", ")", "<", "self", ".", "numObjs", ":", "\n", "            ", "objType", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "objColor", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "\n", "# If this object already exists, try again", "\n", "if", "(", "objType", ",", "objColor", ")", "in", "objs", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "objType", "==", "'key'", ":", "\n", "                ", "obj", "=", "Key", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'ball'", ":", "\n", "                ", "obj", "=", "Ball", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'box'", ":", "\n", "                ", "obj", "=", "Box", "(", "objColor", ")", "\n", "\n", "", "pos", "=", "self", ".", "place_obj", "(", "obj", ")", "\n", "objs", ".", "append", "(", "(", "objType", ",", "objColor", ")", ")", "\n", "objPos", ".", "append", "(", "pos", ")", "\n", "\n", "# Randomize the agent start position and orientation", "\n", "", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Choose a random object to be picked up", "\n", "objIdx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "objs", ")", ")", "\n", "self", ".", "targetType", ",", "self", ".", "target_color", "=", "objs", "[", "objIdx", "]", "\n", "self", ".", "target_pos", "=", "objPos", "[", "objIdx", "]", "\n", "\n", "descStr", "=", "'%s %s'", "%", "(", "self", ".", "target_color", ",", "self", ".", "targetType", ")", "\n", "self", ".", "mission", "=", "'go to the %s'", "%", "descStr", "\n", "#print(self.mission)", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotoobject.GoToObjectEnv.step": [[68, 85], ["MiniGridEnv.step", "gotoobject.GoToObjectEnv._reward", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "ax", ",", "ay", "=", "self", ".", "agent_pos", "\n", "tx", ",", "ty", "=", "self", ".", "target_pos", "\n", "\n", "# Toggle/pickup action terminates the episode", "\n", "if", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "# Reward performing the done action next to the target object", "\n", "", "if", "action", "==", "self", ".", "actions", ".", "done", ":", "\n", "            ", "if", "abs", "(", "ax", "-", "tx", ")", "<=", "1", "and", "abs", "(", "ay", "-", "ty", ")", "<=", "1", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "done", "=", "True", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotoobject.GotoEnv8x8N2.__init__": [[87, 89], ["gotoobject.GoToObjectEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "8", ",", "numObjs", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.empty.EmptyEnv.__init__": [[9, 23], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "8", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "1", ")", ",", "\n", "agent_start_dir", "=", "0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.empty.EmptyEnv._gen_grid": [[25, 43], ["Grid", "empty.EmptyEnv.grid.wall_rect", "empty.EmptyEnv.put_obj", "Goal", "empty.EmptyEnv.place_agent"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "width", "-", "2", ",", "height", "-", "2", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.empty.EmptyEnv5x5.__init__": [[45, 47], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.empty.EmptyRandomEnv5x5.__init__": [[49, 51], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "agent_start_pos", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.empty.EmptyEnv6x6.__init__": [[53, 55], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.empty.EmptyRandomEnv6x6.__init__": [[57, 59], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "agent_start_pos", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.empty.EmptyEnv16x16.__init__": [[61, 63], ["empty.EmptyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "16", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridor.__init__": [[10, 24], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_rows", "=", "3", ",", "\n", "obj_type", "=", "\"ball\"", ",", "\n", "room_size", "=", "6", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "self", ".", "obj_type", "=", "obj_type", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "num_rows", ",", "\n", "max_steps", "=", "30", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridor._gen_grid": [[26, 50], ["super()._gen_grid", "range", "keycorridor.KeyCorridor._rand_int", "keycorridor.KeyCorridor.add_door", "keycorridor.KeyCorridor.add_object", "keycorridor.KeyCorridor.add_object", "keycorridor.KeyCorridor.place_agent", "keycorridor.KeyCorridor.connect_all", "keycorridor.KeyCorridor.remove_wall", "keycorridor.KeyCorridor._rand_int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.connect_all", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.remove_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Connect the middle column rooms into a hallway", "\n", "for", "j", "in", "range", "(", "1", ",", "self", ".", "num_rows", ")", ":", "\n", "            ", "self", ".", "remove_wall", "(", "1", ",", "j", ",", "3", ")", "\n", "\n", "# Add a locked door on the bottom right", "\n", "# Add an object behind the locked door", "\n", "", "room_idx", "=", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "2", ",", "room_idx", ",", "2", ",", "locked", "=", "True", ")", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "2", ",", "room_idx", ",", "kind", "=", "self", ".", "obj_type", ")", "\n", "\n", "# Add a key in a random room on the left side", "\n", "self", ".", "add_object", "(", "0", ",", "self", ".", "_rand_int", "(", "0", ",", "self", ".", "num_rows", ")", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "# Place the agent in the middle", "\n", "self", ".", "place_agent", "(", "1", ",", "self", ".", "num_rows", "//", "2", ")", "\n", "\n", "# Make sure all rooms are accessible", "\n", "self", ".", "connect_all", "(", ")", "\n", "\n", "self", ".", "obj", "=", "obj", "\n", "self", ".", "mission", "=", "\"pick up the %s %s\"", "%", "(", "obj", ".", "color", ",", "obj", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridor.step": [[51, 60], ["super().step", "keycorridor.KeyCorridor._reward"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "self", ".", "carrying", "and", "self", ".", "carrying", "==", "self", ".", "obj", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridorS3R1.__init__": [[62, 67], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "1", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridorS3R2.__init__": [[70, 75], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridorS3R3.__init__": [[78, 83], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "3", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridorS4R3.__init__": [[86, 91], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "4", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridorS5R3.__init__": [[94, 99], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "5", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.keycorridor.KeyCorridorS6R3.__init__": [[102, 107], ["keycorridor.KeyCorridor.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "6", ",", "\n", "num_rows", "=", "3", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.playground_v0.PlaygroundV0.__init__": [[10, 12], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "grid_size", "=", "19", ",", "max_steps", "=", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.playground_v0.PlaygroundV0._gen_grid": [[13, 68], ["Grid", "playground_v0.PlaygroundV0.grid.horz_wall", "playground_v0.PlaygroundV0.grid.horz_wall", "playground_v0.PlaygroundV0.grid.vert_wall", "playground_v0.PlaygroundV0.grid.vert_wall", "range", "playground_v0.PlaygroundV0.place_agent", "range", "range", "playground_v0.PlaygroundV0._rand_elem", "playground_v0.PlaygroundV0._rand_elem", "playground_v0.PlaygroundV0.place_obj", "Key", "playground_v0.PlaygroundV0.grid.vert_wall", "playground_v0.PlaygroundV0._rand_elem", "playground_v0.PlaygroundV0.grid.set", "playground_v0.PlaygroundV0.grid.horz_wall", "playground_v0.PlaygroundV0._rand_elem", "playground_v0.PlaygroundV0.grid.set", "Ball", "playground_v0.PlaygroundV0._rand_int", "Door", "playground_v0.PlaygroundV0._rand_int", "Door", "Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "roomW", "=", "width", "//", "3", "\n", "roomH", "=", "height", "//", "3", "\n", "\n", "# For each row of rooms", "\n", "for", "j", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "\n", "# For each column", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                ", "xL", "=", "i", "*", "roomW", "\n", "yT", "=", "j", "*", "roomH", "\n", "xR", "=", "xL", "+", "roomW", "\n", "yB", "=", "yT", "+", "roomH", "\n", "\n", "# Bottom wall and door", "\n", "if", "i", "+", "1", "<", "3", ":", "\n", "                    ", "self", ".", "grid", ".", "vert_wall", "(", "xR", ",", "yT", ",", "roomH", ")", "\n", "pos", "=", "(", "xR", ",", "self", ".", "_rand_int", "(", "yT", "+", "1", ",", "yB", "-", "1", ")", ")", "\n", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "Door", "(", "color", ")", ")", "\n", "\n", "# Bottom wall and door", "\n", "", "if", "j", "+", "1", "<", "3", ":", "\n", "                    ", "self", ".", "grid", ".", "horz_wall", "(", "xL", ",", "yB", ",", "roomW", ")", "\n", "pos", "=", "(", "self", ".", "_rand_int", "(", "xL", "+", "1", ",", "xR", "-", "1", ")", ",", "yB", ")", "\n", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "Door", "(", "color", ")", ")", "\n", "\n", "# Randomize the player start position and orientation", "\n", "", "", "", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Place random objects in the world", "\n", "types", "=", "[", "'key'", ",", "'ball'", ",", "'box'", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "12", ")", ":", "\n", "            ", "objType", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "objColor", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "if", "objType", "==", "'key'", ":", "\n", "                ", "obj", "=", "Key", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'ball'", ":", "\n", "                ", "obj", "=", "Ball", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'box'", ":", "\n", "                ", "obj", "=", "Box", "(", "objColor", ")", "\n", "", "self", ".", "place_obj", "(", "obj", ")", "\n", "\n", "# No explicit mission in this environment", "\n", "", "self", ".", "mission", "=", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.playground_v0.PlaygroundV0.step": [[69, 72], ["MiniGridEnv.step"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.dynamicobstacles.DynamicObstaclesEnv.__init__": [[10, 34], ["MiniGridEnv.__init__", "spaces.Discrete", "int", "int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "8", ",", "\n", "agent_start_pos", "=", "(", "1", ",", "1", ")", ",", "\n", "agent_start_dir", "=", "0", ",", "\n", "n_obstacles", "=", "4", "\n", ")", ":", "\n", "        ", "self", ".", "agent_start_pos", "=", "agent_start_pos", "\n", "self", ".", "agent_start_dir", "=", "agent_start_dir", "\n", "\n", "# Reduce obstacles if there are too many", "\n", "if", "n_obstacles", "<=", "size", "/", "2", "+", "1", ":", "\n", "            ", "self", ".", "n_obstacles", "=", "int", "(", "n_obstacles", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "n_obstacles", "=", "int", "(", "size", "/", "2", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", ",", "\n", ")", "\n", "# Allow only 3 actions permitted: left, right, forward", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "self", ".", "actions", ".", "forward", "+", "1", ")", "\n", "self", ".", "reward_range", "=", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.dynamicobstacles.DynamicObstaclesEnv._gen_grid": [[35, 59], ["Grid", "dynamicobstacles.DynamicObstaclesEnv.grid.wall_rect", "dynamicobstacles.DynamicObstaclesEnv.grid.set", "range", "Goal", "dynamicobstacles.DynamicObstaclesEnv.place_agent", "dynamicobstacles.DynamicObstaclesEnv.obstacles.append", "dynamicobstacles.DynamicObstaclesEnv.place_obj", "Ball"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "grid", ".", "set", "(", "width", "-", "2", ",", "height", "-", "2", ",", "Goal", "(", ")", ")", "\n", "\n", "# Place the agent", "\n", "if", "self", ".", "agent_start_pos", "is", "not", "None", ":", "\n", "            ", "self", ".", "agent_pos", "=", "self", ".", "agent_start_pos", "\n", "self", ".", "agent_dir", "=", "self", ".", "agent_start_dir", "\n", "", "else", ":", "\n", "            ", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Place obstacles", "\n", "", "self", ".", "obstacles", "=", "[", "]", "\n", "for", "i_obst", "in", "range", "(", "self", ".", "n_obstacles", ")", ":", "\n", "            ", "self", ".", "obstacles", ".", "append", "(", "Ball", "(", ")", ")", "\n", "self", ".", "place_obj", "(", "self", ".", "obstacles", "[", "i_obst", "]", ",", "max_tries", "=", "100", ")", "\n", "\n", "", "self", ".", "mission", "=", "\"get to the green goal square\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.dynamicobstacles.DynamicObstaclesEnv.step": [[60, 90], ["dynamicobstacles.DynamicObstaclesEnv.grid.get", "range", "MiniGridEnv.step", "len", "tuple", "map", "dynamicobstacles.DynamicObstaclesEnv.place_obj", "dynamicobstacles.DynamicObstaclesEnv.grid.set"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.get", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "# Invalid action", "\n", "        ", "if", "action", ">=", "self", ".", "action_space", ".", "n", ":", "\n", "            ", "action", "=", "0", "\n", "\n", "# Check if there is an obstacle in front of the agent", "\n", "", "front_cell", "=", "self", ".", "grid", ".", "get", "(", "*", "self", ".", "front_pos", ")", "\n", "not_clear", "=", "front_cell", "and", "front_cell", ".", "type", "!=", "'goal'", "\n", "\n", "# Update obstacle positions", "\n", "for", "i_obst", "in", "range", "(", "len", "(", "self", ".", "obstacles", ")", ")", ":", "\n", "            ", "old_pos", "=", "self", ".", "obstacles", "[", "i_obst", "]", ".", "cur_pos", "\n", "top", "=", "tuple", "(", "map", "(", "add", ",", "old_pos", ",", "(", "-", "1", ",", "-", "1", ")", ")", ")", "\n", "\n", "try", ":", "\n", "                ", "self", ".", "place_obj", "(", "self", ".", "obstacles", "[", "i_obst", "]", ",", "top", "=", "top", ",", "size", "=", "(", "3", ",", "3", ")", ",", "max_tries", "=", "100", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "old_pos", ",", "None", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n", "# Update the agent's position/direction", "\n", "", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "# If the agent tried to walk over an obstacle or wall", "\n", "if", "action", "==", "self", ".", "actions", ".", "forward", "and", "not_clear", ":", "\n", "            ", "reward", "=", "-", "1", "\n", "done", "=", "True", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.dynamicobstacles.DynamicObstaclesEnv5x5.__init__": [[92, 94], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "n_obstacles", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.dynamicobstacles.DynamicObstaclesRandomEnv5x5.__init__": [[96, 98], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "agent_start_pos", "=", "None", ",", "n_obstacles", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.dynamicobstacles.DynamicObstaclesEnv6x6.__init__": [[100, 102], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "n_obstacles", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.dynamicobstacles.DynamicObstaclesRandomEnv6x6.__init__": [[104, 106], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "agent_start_pos", "=", "None", ",", "n_obstacles", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.dynamicobstacles.DynamicObstaclesEnv16x16.__init__": [[108, 110], ["dynamicobstacles.DynamicObstaclesEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "16", ",", "n_obstacles", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lavagap.LavaGapEnv.__init__": [[10, 18], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "obstacle_type", "=", "Lava", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "obstacle_type", "=", "obstacle_type", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "4", "*", "size", "*", "size", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "False", ",", "\n", "seed", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lavagap.LavaGapEnv._gen_grid": [[20, 53], ["Grid", "lavagap.LavaGapEnv.grid.wall_rect", "np.array", "lavagap.LavaGapEnv.put_obj", "np.array", "lavagap.LavaGapEnv.grid.vert_wall", "lavagap.LavaGapEnv.grid.set", "Goal", "lavagap.LavaGapEnv._rand_int", "lavagap.LavaGapEnv._rand_int"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "assert", "width", ">=", "5", "and", "height", ">=", "5", "\n", "\n", "# Create an empty grid", "\n", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place the agent in the top-left corner", "\n", "self", ".", "agent_pos", "=", "(", "1", ",", "1", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n", "# Place a goal square in the bottom-right corner", "\n", "self", ".", "goal_pos", "=", "np", ".", "array", "(", "(", "width", "-", "2", ",", "height", "-", "2", ")", ")", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "*", "self", ".", "goal_pos", ")", "\n", "\n", "# Generate and store random gap position", "\n", "self", ".", "gap_pos", "=", "np", ".", "array", "(", "(", "\n", "self", ".", "_rand_int", "(", "2", ",", "width", "-", "2", ")", ",", "\n", "self", ".", "_rand_int", "(", "1", ",", "height", "-", "1", ")", ",", "\n", ")", ")", "\n", "\n", "# Place the obstacle wall", "\n", "self", ".", "grid", ".", "vert_wall", "(", "self", ".", "gap_pos", "[", "0", "]", ",", "1", ",", "height", "-", "2", ",", "self", ".", "obstacle_type", ")", "\n", "\n", "# Put a hole in the wall", "\n", "self", ".", "grid", ".", "set", "(", "*", "self", ".", "gap_pos", ",", "None", ")", "\n", "\n", "self", ".", "mission", "=", "(", "\n", "\"avoid the lava and get to the green goal square\"", "\n", "if", "self", ".", "obstacle_type", "==", "Lava", "\n", "else", "\"find the opening and get to the green goal square\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lavagap.LavaGapS5Env.__init__": [[56, 58], ["lavagap.LavaGapEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lavagap.LavaGapS6Env.__init__": [[60, 62], ["lavagap.LavaGapEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.lavagap.LavaGapS7Env.__init__": [[64, 66], ["lavagap.LavaGapEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "7", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.fetch.FetchEnv.__init__": [[10, 22], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "8", ",", "\n", "numObjs", "=", "3", "\n", ")", ":", "\n", "        ", "self", ".", "numObjs", "=", "numObjs", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", "**", "2", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.fetch.FetchEnv._gen_grid": [[24, 73], ["Grid", "fetch.FetchEnv.grid.horz_wall", "fetch.FetchEnv.grid.horz_wall", "fetch.FetchEnv.grid.vert_wall", "fetch.FetchEnv.grid.vert_wall", "fetch.FetchEnv.place_agent", "fetch.FetchEnv._rand_int", "hasattr", "len", "fetch.FetchEnv._rand_elem", "fetch.FetchEnv._rand_elem", "fetch.FetchEnv.place_obj", "objs.append", "Key", "fetch.FetchEnv._rand_int", "Ball", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "types", "=", "[", "'key'", ",", "'ball'", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "\n", "# For each object to be generated", "\n", "while", "len", "(", "objs", ")", "<", "self", ".", "numObjs", ":", "\n", "            ", "objType", "=", "self", ".", "_rand_elem", "(", "types", ")", "\n", "objColor", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "\n", "if", "objType", "==", "'key'", ":", "\n", "                ", "obj", "=", "Key", "(", "objColor", ")", "\n", "", "elif", "objType", "==", "'ball'", ":", "\n", "                ", "obj", "=", "Ball", "(", "objColor", ")", "\n", "\n", "", "self", ".", "place_obj", "(", "obj", ")", "\n", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "# Randomize the player start position and orientation", "\n", "", "self", ".", "place_agent", "(", ")", "\n", "\n", "# Choose a random object to be picked up", "\n", "target", "=", "objs", "[", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "objs", ")", ")", "]", "\n", "self", ".", "targetType", "=", "target", ".", "type", "\n", "self", ".", "targetColor", "=", "target", ".", "color", "\n", "\n", "descStr", "=", "'%s %s'", "%", "(", "self", ".", "targetColor", ",", "self", ".", "targetType", ")", "\n", "\n", "# Generate the mission string", "\n", "idx", "=", "self", ".", "_rand_int", "(", "0", ",", "5", ")", "\n", "if", "idx", "==", "0", ":", "\n", "            ", "self", ".", "mission", "=", "'get a %s'", "%", "descStr", "\n", "", "elif", "idx", "==", "1", ":", "\n", "            ", "self", ".", "mission", "=", "'go get a %s'", "%", "descStr", "\n", "", "elif", "idx", "==", "2", ":", "\n", "            ", "self", ".", "mission", "=", "'fetch a %s'", "%", "descStr", "\n", "", "elif", "idx", "==", "3", ":", "\n", "            ", "self", ".", "mission", "=", "'go fetch a %s'", "%", "descStr", "\n", "", "elif", "idx", "==", "4", ":", "\n", "            ", "self", ".", "mission", "=", "'you must fetch a %s'", "%", "descStr", "\n", "", "assert", "hasattr", "(", "self", ",", "'mission'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.fetch.FetchEnv.step": [[74, 87], ["MiniGridEnv.step", "fetch.FetchEnv._reward"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "if", "self", ".", "carrying", ":", "\n", "            ", "if", "self", ".", "carrying", ".", "color", "==", "self", ".", "targetColor", "and", "self", ".", "carrying", ".", "type", "==", "self", ".", "targetType", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "", "else", ":", "\n", "                ", "reward", "=", "0", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.fetch.FetchEnv5x5N2.__init__": [[89, 91], ["fetch.FetchEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ",", "numObjs", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.fetch.FetchEnv6x6N2.__init__": [[93, 95], ["fetch.FetchEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ",", "numObjs", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.unlockpickup.UnlockPickup.__init__": [[10, 18], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "8", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.unlockpickup.UnlockPickup._gen_grid": [[20, 34], ["super()._gen_grid", "unlockpickup.UnlockPickup.add_object", "unlockpickup.UnlockPickup.add_door", "unlockpickup.UnlockPickup.add_object", "unlockpickup.UnlockPickup.place_agent"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Add a box to the room on the right", "\n", "obj", ",", "_", "=", "self", ".", "add_object", "(", "1", ",", "0", ",", "kind", "=", "\"box\"", ")", "\n", "# Make sure the two rooms are directly connected by a locked door", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "locked", "=", "True", ")", "\n", "# Add a key to unlock the door", "\n", "self", ".", "add_object", "(", "0", ",", "0", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "self", ".", "obj", "=", "obj", "\n", "self", ".", "mission", "=", "\"pick up the %s %s\"", "%", "(", "obj", ".", "color", ",", "obj", ".", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.unlockpickup.UnlockPickup.step": [[35, 44], ["super().step", "unlockpickup.UnlockPickup._reward"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "self", ".", "carrying", "and", "self", ".", "carrying", "==", "self", ".", "obj", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.__init__": [[11, 26], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_rows", ",", "\n", "num_cols", ",", "\n", "num_rooms_visited", ",", "\n", "seed", "=", "None", "\n", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "max_steps", "=", "4", "*", "num_rooms_visited", "*", "room_size", "**", "2", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "room_size", "=", "room_size", ",", "\n", "num_rows", "=", "num_rows", ",", "\n", "num_cols", "=", "num_cols", ",", "\n", "max_steps", "=", "max_steps", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv._gen_grid": [[28, 41], ["super()._gen_grid", "obstructedmaze.ObstructedMazeEnv._rand_subset", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_subset"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Define all possible colors for doors", "\n", "self", ".", "door_colors", "=", "self", ".", "_rand_subset", "(", "COLOR_NAMES", ",", "len", "(", "COLOR_NAMES", ")", ")", "\n", "# Define the color of the ball to pick up", "\n", "self", ".", "ball_to_find_color", "=", "COLOR_NAMES", "[", "0", "]", "\n", "# Define the color of the balls that obstruct doors", "\n", "self", ".", "blocking_ball_color", "=", "COLOR_NAMES", "[", "1", "]", "\n", "# Define the color of boxes in which keys are hidden", "\n", "self", ".", "box_color", "=", "COLOR_NAMES", "[", "2", "]", "\n", "\n", "self", ".", "mission", "=", "\"pick up the %s ball\"", "%", "self", ".", "ball_to_find_color", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.step": [[42, 51], ["super().step", "obstructedmaze.ObstructedMazeEnv._reward"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "pickup", ":", "\n", "            ", "if", "self", ".", "carrying", "and", "self", ".", "carrying", "==", "self", ".", "obj", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door": [[52, 75], ["super().add_door", "obstructedmaze.ObstructedMazeEnv.grid.set", "Key", "obstructedmaze.ObstructedMazeEnv.place_in_room", "Ball", "Box"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_in_room"], ["", "def", "add_door", "(", "self", ",", "i", ",", "j", ",", "door_idx", "=", "0", ",", "color", "=", "None", ",", "locked", "=", "False", ",", "key_in_box", "=", "False", ",", "blocked", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Add a door. If the door must be locked, it also adds the key.\n        If the key must be hidden, it is put in a box. If the door must\n        be obstructed, it adds a ball in front of the door.\n        \"\"\"", "\n", "\n", "door", ",", "door_pos", "=", "super", "(", ")", ".", "add_door", "(", "i", ",", "j", ",", "door_idx", ",", "color", ",", "locked", "=", "locked", ")", "\n", "\n", "if", "blocked", ":", "\n", "            ", "vec", "=", "DIR_TO_VEC", "[", "door_idx", "]", "\n", "blocking_ball", "=", "Ball", "(", "self", ".", "blocking_ball_color", ")", "if", "blocked", "else", "None", "\n", "self", ".", "grid", ".", "set", "(", "door_pos", "[", "0", "]", "-", "vec", "[", "0", "]", ",", "door_pos", "[", "1", "]", "-", "vec", "[", "1", "]", ",", "blocking_ball", ")", "\n", "\n", "", "if", "locked", ":", "\n", "            ", "obj", "=", "Key", "(", "door", ".", "color", ")", "\n", "if", "key_in_box", ":", "\n", "                ", "box", "=", "Box", "(", "self", ".", "box_color", ")", "if", "key_in_box", "else", "None", "\n", "box", ".", "contains", "=", "obj", "\n", "obj", "=", "box", "\n", "", "self", ".", "place_in_room", "(", "i", ",", "j", ",", "obj", ")", "\n", "\n", "", "return", "door", ",", "door_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_1Dlhb.__init__": [[82, 91], ["obstructedmaze.ObstructedMazeEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "key_in_box", "=", "True", ",", "blocked", "=", "True", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "key_in_box", "=", "key_in_box", "\n", "self", ".", "blocked", "=", "blocked", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "num_rooms_visited", "=", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_1Dlhb._gen_grid": [[93, 103], ["obstructedmaze.ObstructedMazeEnv._gen_grid", "obstructedmaze.ObstructedMaze_1Dlhb.add_door", "obstructedmaze.ObstructedMaze_1Dlhb.add_object", "obstructedmaze.ObstructedMaze_1Dlhb.place_agent"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "self", ".", "add_door", "(", "0", ",", "0", ",", "door_idx", "=", "0", ",", "color", "=", "self", ".", "door_colors", "[", "0", "]", ",", "\n", "locked", "=", "True", ",", "\n", "key_in_box", "=", "self", ".", "key_in_box", ",", "\n", "blocked", "=", "self", ".", "blocked", ")", "\n", "\n", "self", ".", "obj", ",", "_", "=", "self", ".", "add_object", "(", "1", ",", "0", ",", "\"ball\"", ",", "color", "=", "self", ".", "ball_to_find_color", ")", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_1Dl.__init__": [[105, 107], ["obstructedmaze.ObstructedMaze_1Dlhb.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "False", ",", "False", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_1Dlh.__init__": [[109, 111], ["obstructedmaze.ObstructedMaze_1Dlhb.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "True", ",", "False", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_Full.__init__": [[119, 131], ["obstructedmaze.ObstructedMazeEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "agent_room", "=", "(", "1", ",", "1", ")", ",", "key_in_box", "=", "True", ",", "blocked", "=", "True", ",", "\n", "num_quarters", "=", "4", ",", "num_rooms_visited", "=", "25", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "agent_room", "=", "agent_room", "\n", "self", ".", "key_in_box", "=", "key_in_box", "\n", "self", ".", "blocked", "=", "blocked", "\n", "self", ".", "num_quarters", "=", "num_quarters", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "3", ",", "\n", "num_cols", "=", "3", ",", "\n", "num_rooms_visited", "=", "num_rooms_visited", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_Full._gen_grid": [[133, 159], ["obstructedmaze.ObstructedMazeEnv._gen_grid", "range", "obstructedmaze.ObstructedMaze_Full._rand_elem", "obstructedmaze.ObstructedMaze_Full.add_object", "obstructedmaze.ObstructedMaze_Full.place_agent", "len", "obstructedmaze.ObstructedMaze_Full.add_door", "obstructedmaze.ObstructedMaze_Full.add_door", "len"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "middle_room", "=", "(", "1", ",", "1", ")", "\n", "# Define positions of \"side rooms\" i.e. rooms that are neither", "\n", "# corners nor the center.", "\n", "side_rooms", "=", "[", "(", "2", ",", "1", ")", ",", "(", "1", ",", "2", ")", ",", "(", "0", ",", "1", ")", ",", "(", "1", ",", "0", ")", "]", "[", ":", "self", ".", "num_quarters", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "side_rooms", ")", ")", ":", "\n", "            ", "side_room", "=", "side_rooms", "[", "i", "]", "\n", "\n", "# Add a door between the center room and the side room", "\n", "self", ".", "add_door", "(", "*", "middle_room", ",", "door_idx", "=", "i", ",", "color", "=", "self", ".", "door_colors", "[", "i", "]", ",", "locked", "=", "False", ")", "\n", "\n", "for", "k", "in", "[", "-", "1", ",", "1", "]", ":", "\n", "# Add a door to each side of the side room", "\n", "                ", "self", ".", "add_door", "(", "*", "side_room", ",", "locked", "=", "True", ",", "\n", "door_idx", "=", "(", "i", "+", "k", ")", "%", "4", ",", "\n", "color", "=", "self", ".", "door_colors", "[", "(", "i", "+", "k", ")", "%", "len", "(", "self", ".", "door_colors", ")", "]", ",", "\n", "key_in_box", "=", "self", ".", "key_in_box", ",", "\n", "blocked", "=", "self", ".", "blocked", ")", "\n", "\n", "", "", "corners", "=", "[", "(", "2", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "0", ",", "2", ")", ",", "(", "0", ",", "0", ")", "]", "[", ":", "self", ".", "num_quarters", "]", "\n", "ball_room", "=", "self", ".", "_rand_elem", "(", "corners", ")", "\n", "\n", "self", ".", "obj", ",", "_", "=", "self", ".", "add_object", "(", "*", "ball_room", ",", "\"ball\"", ",", "color", "=", "self", ".", "ball_to_find_color", ")", "\n", "self", ".", "place_agent", "(", "*", "self", ".", "agent_room", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_2Dl.__init__": [[161, 163], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "2", ",", "1", ")", ",", "False", ",", "False", ",", "1", ",", "4", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_2Dlh.__init__": [[165, 167], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "2", ",", "1", ")", ",", "True", ",", "False", ",", "1", ",", "4", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_2Dlhb.__init__": [[170, 172], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "2", ",", "1", ")", ",", "True", ",", "True", ",", "1", ",", "4", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_1Q.__init__": [[174, 176], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "1", ",", "1", ")", ",", "True", ",", "True", ",", "1", ",", "5", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMaze_2Q.__init__": [[178, 180], ["obstructedmaze.ObstructedMaze_Full.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "(", "1", ",", "1", ")", ",", "True", ",", "True", ",", "2", ",", "11", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.doorkey.DoorKeyEnv.__init__": [[9, 13], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "10", "*", "size", "*", "size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.doorkey.DoorKeyEnv._gen_grid": [[15, 45], ["Grid", "doorkey.DoorKeyEnv.grid.wall_rect", "doorkey.DoorKeyEnv.put_obj", "doorkey.DoorKeyEnv._rand_int", "doorkey.DoorKeyEnv.grid.vert_wall", "doorkey.DoorKeyEnv.place_agent", "doorkey.DoorKeyEnv._rand_int", "doorkey.DoorKeyEnv.put_obj", "doorkey.DoorKeyEnv.place_obj", "Goal", "Door", "Key"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.put_obj", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv.place_obj"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create an empty grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Place a goal in the bottom-right corner", "\n", "self", ".", "put_obj", "(", "Goal", "(", ")", ",", "width", "-", "2", ",", "height", "-", "2", ")", "\n", "\n", "# Create a vertical splitting wall", "\n", "splitIdx", "=", "self", ".", "_rand_int", "(", "2", ",", "width", "-", "2", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "splitIdx", ",", "0", ")", "\n", "\n", "# Place the agent at a random position and orientation", "\n", "# on the left side of the splitting wall", "\n", "self", ".", "place_agent", "(", "size", "=", "(", "splitIdx", ",", "height", ")", ")", "\n", "\n", "# Place a door in the wall", "\n", "doorIdx", "=", "self", ".", "_rand_int", "(", "1", ",", "width", "-", "2", ")", "\n", "self", ".", "put_obj", "(", "Door", "(", "'yellow'", ",", "is_locked", "=", "True", ")", ",", "splitIdx", ",", "doorIdx", ")", "\n", "\n", "# Place a yellow key on the left side", "\n", "self", ".", "place_obj", "(", "\n", "obj", "=", "Key", "(", "'yellow'", ")", ",", "\n", "top", "=", "(", "0", ",", "0", ")", ",", "\n", "size", "=", "(", "splitIdx", ",", "height", ")", "\n", ")", "\n", "\n", "self", ".", "mission", "=", "\"use the key to open the door and then get to the goal\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.doorkey.DoorKeyEnv5x5.__init__": [[47, 49], ["doorkey.DoorKeyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.doorkey.DoorKeyEnv6x6.__init__": [[51, 53], ["doorkey.DoorKeyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.doorkey.DoorKeyEnv16x16.__init__": [[55, 57], ["doorkey.DoorKeyEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.unlock.Unlock.__init__": [[10, 18], ["gym_minigrid.roomgrid.RoomGrid.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "room_size", "=", "6", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "num_rows", "=", "1", ",", "\n", "num_cols", "=", "2", ",", "\n", "room_size", "=", "room_size", ",", "\n", "max_steps", "=", "8", "*", "room_size", "**", "2", ",", "\n", "seed", "=", "seed", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.unlock.Unlock._gen_grid": [[20, 32], ["super()._gen_grid", "unlock.Unlock.add_door", "unlock.Unlock.add_object", "unlock.Unlock.place_agent"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid", "home.repos.pwc.inspect_result.kebaek_minigrid.envs.obstructedmaze.ObstructedMazeEnv.add_door", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.add_object", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "super", "(", ")", ".", "_gen_grid", "(", "width", ",", "height", ")", "\n", "\n", "# Make sure the two rooms are directly connected by a locked door", "\n", "door", ",", "_", "=", "self", ".", "add_door", "(", "0", ",", "0", ",", "0", ",", "locked", "=", "True", ")", "\n", "# Add a key to unlock the door", "\n", "self", ".", "add_object", "(", "0", ",", "0", ",", "'key'", ",", "door", ".", "color", ")", "\n", "\n", "self", ".", "place_agent", "(", "0", ",", "0", ")", "\n", "\n", "self", ".", "door", "=", "door", "\n", "self", ".", "mission", "=", "\"open the door\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.unlock.Unlock.step": [[33, 42], ["super().step", "unlock.Unlock._reward"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "if", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "if", "self", ".", "door", ".", "is_open", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotodoor.GoToDoorEnv.__init__": [[10, 21], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "size", "=", "5", "\n", ")", ":", "\n", "        ", "assert", "size", ">=", "5", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", "**", "2", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotodoor.GoToDoorEnv._gen_grid": [[23, 64], ["Grid", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv.grid.wall_rect", "doorPos.append", "doorPos.append", "doorPos.append", "doorPos.append", "enumerate", "gotodoor.GoToDoorEnv.place_agent", "gotodoor.GoToDoorEnv._rand_int", "len", "len", "gotodoor.GoToDoorEnv._rand_elem", "doorColors.append", "gotodoor.GoToDoorEnv.grid.set", "len", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv._rand_int", "gotodoor.GoToDoorEnv._rand_int", "Door"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.wall_rect", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.roomgrid.RoomGrid.place_agent", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# Create the grid", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Randomly vary the room width and height", "\n", "width", "=", "self", ".", "_rand_int", "(", "5", ",", "width", "+", "1", ")", "\n", "height", "=", "self", ".", "_rand_int", "(", "5", ",", "height", "+", "1", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "wall_rect", "(", "0", ",", "0", ",", "width", ",", "height", ")", "\n", "\n", "# Generate the 4 doors at random positions", "\n", "doorPos", "=", "[", "]", "\n", "doorPos", ".", "append", "(", "(", "self", ".", "_rand_int", "(", "2", ",", "width", "-", "2", ")", ",", "0", ")", ")", "\n", "doorPos", ".", "append", "(", "(", "self", ".", "_rand_int", "(", "2", ",", "width", "-", "2", ")", ",", "height", "-", "1", ")", ")", "\n", "doorPos", ".", "append", "(", "(", "0", ",", "self", ".", "_rand_int", "(", "2", ",", "height", "-", "2", ")", ")", ")", "\n", "doorPos", ".", "append", "(", "(", "width", "-", "1", ",", "self", ".", "_rand_int", "(", "2", ",", "height", "-", "2", ")", ")", ")", "\n", "\n", "# Generate the door colors", "\n", "doorColors", "=", "[", "]", "\n", "while", "len", "(", "doorColors", ")", "<", "len", "(", "doorPos", ")", ":", "\n", "            ", "color", "=", "self", ".", "_rand_elem", "(", "COLOR_NAMES", ")", "\n", "if", "color", "in", "doorColors", ":", "\n", "                ", "continue", "\n", "", "doorColors", ".", "append", "(", "color", ")", "\n", "\n", "# Place the doors in the grid", "\n", "", "for", "idx", ",", "pos", "in", "enumerate", "(", "doorPos", ")", ":", "\n", "            ", "color", "=", "doorColors", "[", "idx", "]", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos", ",", "Door", "(", "color", ")", ")", "\n", "\n", "# Randomize the agent start position and orientation", "\n", "", "self", ".", "place_agent", "(", "size", "=", "(", "width", ",", "height", ")", ")", "\n", "\n", "# Select a random target door", "\n", "doorIdx", "=", "self", ".", "_rand_int", "(", "0", ",", "len", "(", "doorPos", ")", ")", "\n", "self", ".", "target_pos", "=", "doorPos", "[", "doorIdx", "]", "\n", "self", ".", "target_color", "=", "doorColors", "[", "doorIdx", "]", "\n", "\n", "# Generate the mission string", "\n", "self", ".", "mission", "=", "'go to the %s door'", "%", "self", ".", "target_color", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotodoor.GoToDoorEnv.step": [[65, 82], ["super().step", "gotodoor.GoToDoorEnv._reward", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "\n", "ax", ",", "ay", "=", "self", ".", "agent_pos", "\n", "tx", ",", "ty", "=", "self", ".", "target_pos", "\n", "\n", "# Don't let the agent open any of the doors", "\n", "if", "action", "==", "self", ".", "actions", ".", "toggle", ":", "\n", "            ", "done", "=", "True", "\n", "\n", "# Reward performing done action in front of the target door", "\n", "", "if", "action", "==", "self", ".", "actions", ".", "done", ":", "\n", "            ", "if", "(", "ax", "==", "tx", "and", "abs", "(", "ay", "-", "ty", ")", "==", "1", ")", "or", "(", "ay", "==", "ty", "and", "abs", "(", "ax", "-", "tx", ")", "==", "1", ")", ":", "\n", "                ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "", "done", "=", "True", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotodoor.GoToDoor8x8Env.__init__": [[84, 86], ["gotodoor.GoToDoorEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.gotodoor.GoToDoor6x6Env.__init__": [[88, 90], ["gotodoor.GoToDoorEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "size", "=", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.__init__": [[14, 27], ["MiniGridEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "seed", ",", "\n", "size", "=", "8", ",", "\n", "random_length", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "random_length", "=", "random_length", "\n", "super", "(", ")", ".", "__init__", "(", "\n", "seed", "=", "seed", ",", "\n", "grid_size", "=", "size", ",", "\n", "max_steps", "=", "5", "*", "size", "**", "2", ",", "\n", "# Set this to True for maximum speed", "\n", "see_through_walls", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv._gen_grid": [[29, 87], ["Grid", "memory.MemoryEnv.grid.horz_wall", "memory.MemoryEnv.grid.horz_wall", "memory.MemoryEnv.grid.vert_wall", "memory.MemoryEnv.grid.vert_wall", "range", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "range", "range", "memory.MemoryEnv._rand_elem", "memory.MemoryEnv.grid.set", "memory.MemoryEnv._rand_elem", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "memory.MemoryEnv._rand_int", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "Wall", "Wall", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "memory.MemoryEnv.grid.set", "memory.MemoryEnv._rand_int", "memory.MemoryEnv.", "Wall", "Wall", "Wall", "Wall", "memory.MemoryEnv.grid.set", "Wall", "Wall"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.horz_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.vert_wall", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_elem", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._rand_int", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.Grid.set"], ["", "def", "_gen_grid", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "self", ".", "grid", "=", "Grid", "(", "width", ",", "height", ")", "\n", "\n", "# Generate the surrounding walls", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "horz_wall", "(", "0", ",", "height", "-", "1", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "0", ",", "0", ")", "\n", "self", ".", "grid", ".", "vert_wall", "(", "width", "-", "1", ",", "0", ")", "\n", "\n", "assert", "height", "%", "2", "==", "1", "\n", "upper_room_wall", "=", "height", "//", "2", "-", "2", "\n", "lower_room_wall", "=", "height", "//", "2", "+", "2", "\n", "if", "self", ".", "random_length", ":", "\n", "            ", "hallway_end", "=", "self", ".", "_rand_int", "(", "4", ",", "width", "-", "2", ")", "\n", "", "else", ":", "\n", "            ", "hallway_end", "=", "width", "-", "3", "\n", "\n", "# Start room", "\n", "", "for", "i", "in", "range", "(", "1", ",", "5", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "i", ",", "upper_room_wall", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "i", ",", "lower_room_wall", ",", "Wall", "(", ")", ")", "\n", "", "self", ".", "grid", ".", "set", "(", "4", ",", "upper_room_wall", "+", "1", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "4", ",", "lower_room_wall", "-", "1", ",", "Wall", "(", ")", ")", "\n", "\n", "# Horizontal hallway", "\n", "for", "i", "in", "range", "(", "5", ",", "hallway_end", ")", ":", "\n", "            ", "self", ".", "grid", ".", "set", "(", "i", ",", "upper_room_wall", "+", "1", ",", "Wall", "(", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "i", ",", "lower_room_wall", "-", "1", ",", "Wall", "(", ")", ")", "\n", "\n", "# Vertical hallway", "\n", "", "for", "j", "in", "range", "(", "0", ",", "height", ")", ":", "\n", "            ", "if", "j", "!=", "height", "//", "2", ":", "\n", "                ", "self", ".", "grid", ".", "set", "(", "hallway_end", ",", "j", ",", "Wall", "(", ")", ")", "\n", "", "self", ".", "grid", ".", "set", "(", "hallway_end", "+", "2", ",", "j", ",", "Wall", "(", ")", ")", "\n", "\n", "# Fix the player's start position and orientation", "\n", "", "self", ".", "agent_pos", "=", "(", "self", ".", "_rand_int", "(", "1", ",", "hallway_end", "+", "1", ")", ",", "height", "//", "2", ")", "\n", "self", ".", "agent_dir", "=", "0", "\n", "\n", "# Place objects", "\n", "start_room_obj", "=", "self", ".", "_rand_elem", "(", "[", "Key", ",", "Ball", "]", ")", "\n", "self", ".", "grid", ".", "set", "(", "1", ",", "height", "//", "2", "-", "1", ",", "start_room_obj", "(", "'green'", ")", ")", "\n", "\n", "other_objs", "=", "self", ".", "_rand_elem", "(", "[", "[", "Ball", ",", "Key", "]", ",", "[", "Key", ",", "Ball", "]", "]", ")", "\n", "pos0", "=", "(", "hallway_end", "+", "1", ",", "height", "//", "2", "-", "2", ")", "\n", "pos1", "=", "(", "hallway_end", "+", "1", ",", "height", "//", "2", "+", "2", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos0", ",", "other_objs", "[", "0", "]", "(", "'green'", ")", ")", "\n", "self", ".", "grid", ".", "set", "(", "*", "pos1", ",", "other_objs", "[", "1", "]", "(", "'green'", ")", ")", "\n", "\n", "# Choose the target objects", "\n", "if", "start_room_obj", "==", "other_objs", "[", "0", "]", ":", "\n", "            ", "self", ".", "success_pos", "=", "(", "pos0", "[", "0", "]", ",", "pos0", "[", "1", "]", "+", "1", ")", "\n", "self", ".", "failure_pos", "=", "(", "pos1", "[", "0", "]", ",", "pos1", "[", "1", "]", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "success_pos", "=", "(", "pos1", "[", "0", "]", ",", "pos1", "[", "1", "]", "-", "1", ")", "\n", "self", ".", "failure_pos", "=", "(", "pos0", "[", "0", "]", ",", "pos0", "[", "1", "]", "+", "1", ")", "\n", "\n", "", "self", ".", "mission", "=", "'go to the matching object at the end of the hallway'", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step": [[88, 101], ["MiniGridEnv.step", "tuple", "memory.MemoryEnv._reward", "tuple"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryEnv.step", "home.repos.pwc.inspect_result.kebaek_minigrid.gym_minigrid.minigrid.MiniGridEnv._reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "action", "==", "MiniGridEnv", ".", "Actions", ".", "pickup", ":", "\n", "            ", "action", "=", "MiniGridEnv", ".", "Actions", ".", "toggle", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "MiniGridEnv", ".", "step", "(", "self", ",", "action", ")", "\n", "\n", "if", "tuple", "(", "self", ".", "agent_pos", ")", "==", "self", ".", "success_pos", ":", "\n", "            ", "reward", "=", "self", ".", "_reward", "(", ")", "\n", "done", "=", "True", "\n", "", "if", "tuple", "(", "self", ".", "agent_pos", ")", "==", "self", ".", "failure_pos", ":", "\n", "            ", "reward", "=", "0", "\n", "done", "=", "True", "\n", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS17Random.__init__": [[103, 105], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "17", ",", "random_length", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS13Random.__init__": [[112, 114], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "13", ",", "random_length", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS13.__init__": [[121, 123], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "13", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS11.__init__": [[130, 132], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "11", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS9.__init__": [[139, 141], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__": [[148, 150], ["memory.MemoryEnv.__init__"], "methods", ["home.repos.pwc.inspect_result.kebaek_minigrid.envs.memory.MemoryS7.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "seed", "=", "seed", ",", "size", "=", "7", ")", "\n", "\n"]]}