{"home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.load_dataset": [[18, 42], ["pandas.read_pickle", "pandas.read_pickle", "pandas.read_pickle", "pandas.read_pickle", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "load_dataset", "(", "dir_training", ",", "dir_validation", ")", ":", "\n", "    ", "\"\"\"Loads the dataset of RNN and concepts\n\n    Args:\n        dir_training (str): directory containing training data\n        dir_validation (str): directory containing training data\n\n    Returns:\n        dict , dict: data for training and validation respectively \n    \"\"\"", "\n", "data_training", "=", "{", "}", "\n", "data_validation", "=", "{", "}", "\n", "\n", "data_training", "[", "\"rnn\"", "]", "=", "pd", ".", "read_pickle", "(", "os", ".", "path", ".", "join", "(", "dir_training", ",", "\"rnn.pkl\"", ")", ")", "\n", "data_training", "[", "\"concepts\"", "]", "=", "pd", ".", "read_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_training", ",", "\"metadata.pkl\"", ")", "\n", ")", "\n", "\n", "data_validation", "[", "\"rnn\"", "]", "=", "pd", ".", "read_pickle", "(", "os", ".", "path", ".", "join", "(", "dir_validation", ",", "\"rnn.pkl\"", ")", ")", "\n", "data_validation", "[", "\"concepts\"", "]", "=", "pd", ".", "read_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_validation", ",", "\"metadata.pkl\"", ")", "\n", ")", "\n", "\n", "return", "data_training", ",", "data_validation", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.get_concept_groups": [[44, 100], ["math.ceil", "range", "concept_groups[].append", "str().zfill", "str", "str", "int"], "function", ["None"], ["", "def", "get_concept_groups", "(", "config_name", ")", ":", "\n", "    ", "\"\"\"Returns concept groups investigated in this work\n\n    Args:\n        config_name (str): config to check if task is pointnav or objectnav\n\n    Returns:\n        dict: dictionary containing list of concept for each group\n    \"\"\"", "\n", "concept_groups", "=", "{", "}", "\n", "\n", "concept_groups", "[", "\"reachability\"", "]", "=", "[", "]", "\n", "rotate_step_degrees", "=", "30", "\n", "num_rotation_angles", "=", "math", ".", "ceil", "(", "360.0", "/", "rotate_step_degrees", ")", "\n", "reachability_radii", "=", "[", "\n", "2", "\n", "]", "# we also tried 4,6 times the gridSize. It leads to similar results", "\n", "\n", "for", "radius", "in", "reachability_radii", ":", "\n", "        ", "for", "rotation_angle", "in", "range", "(", "num_rotation_angles", ")", ":", "\n", "            ", "dict_key", "=", "(", "\n", "\"reachable_R=\"", "\n", "+", "str", "(", "radius", ")", "\n", "+", "\"_theta=\"", "\n", "+", "str", "(", "int", "(", "rotation_angle", "*", "rotate_step_degrees", ")", ")", ".", "zfill", "(", "3", ")", "\n", ")", "\n", "concept_groups", "[", "\"reachability\"", "]", ".", "append", "(", "dict_key", ")", "\n", "\n", "", "", "if", "\"pointnav\"", "in", "config_name", ":", "\n", "        ", "target_info", "=", "[", "\"target_r\"", ",", "\"target_theta\"", "]", "\n", "", "else", ":", "\n", "        ", "target_info", "=", "[", "\n", "\"target_r\"", ",", "\n", "\"target_theta\"", ",", "\n", "\"target_visibility\"", ",", "\n", "]", "# additional target concept (visibility) for objectnav", "\n", "", "concept_groups", "[", "\"target_info\"", "]", "=", "target_info", "\n", "\n", "agents_info", "=", "[", "\"r\"", ",", "\"theta\"", "]", "\n", "concept_groups", "[", "\"agents_info\"", "]", "=", "agents_info", "\n", "\n", "collision_info", "=", "[", "\"collision\"", "]", "\n", "concept_groups", "[", "\"collision_info\"", "]", "=", "collision_info", "\n", "\n", "concept_groups", "[", "\"areas\"", "]", "=", "[", "\"Wall_area\"", ",", "\"Floor_area\"", "]", "\n", "concept_groups", "[", "\"visited\"", "]", "=", "[", "\"visited_l\"", ",", "\"visited_lr\"", ",", "\"visited_lrh\"", "]", "\n", "concept_groups", "[", "\"ac_outputs\"", "]", "=", "[", "\n", "\"AC_MOVE_AHEAD\"", ",", "\n", "\"AC_ROTATE_LEFT\"", ",", "\n", "\"AC_ROTATE_RIGHT\"", ",", "\n", "\"AC_LOOK_DOWN\"", ",", "\n", "\"AC_LOOK_UP\"", ",", "\n", "\"AC_END\"", ",", "\n", "\"AC_POLICY\"", ",", "\n", "]", "\n", "return", "concept_groups", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.evaluate_concept_predictability": [[102, 179], ["xgboost.DMatrix", "xgboost.DMatrix", "xgboost.train", "numpy.mean", "numpy.mean", "numpy.mean", "scipy.stats.pearsonr", "X_train.to_numpy", "X_test.to_numpy", "y_train.to_numpy", "numpy.zeros_like", "sklearn.metrics.f1_score", "sklearn.metrics.roc_auc_score", "xgb.train.predict", "y_test.to_numpy", "y_train.to_numpy", "y_test.to_numpy", "y_test.to_numpy", "y_test.to_numpy", "y_test.to_numpy", "xgb.train.predict", "xgboost.DMatrix", "y_test.to_numpy", "xgb.train.predict", "y_test.to_numpy", "xgboost.DMatrix", "X_test.to_numpy", "xgboost.DMatrix", "xgb.train.predict", "X_test.to_numpy", "X_test.to_numpy", "xgboost.DMatrix", "X_test.to_numpy"], "function", ["None"], ["", "def", "evaluate_concept_predictability", "(", "data_training", ",", "data_validation", ",", "concept", ")", ":", "\n", "    ", "\"\"\"Gradient boosted tree training to evaluate how well we can predict a \n    concept from RNN.\n\n    Args:\n        data_training (dict): dataset of RNN and concepts (Training)\n        data_validation (dict): dataset of RNN and concepts (Validation)\n        concept (str): which concept to predict?\n\n    Returns:\n        dict: results of evaluation e.g. correlation, F1 score, ROC_AUC\n    \"\"\"", "\n", "y_train", "=", "data_training", "[", "\"concepts\"", "]", "[", "concept", "]", "\n", "y_test", "=", "data_validation", "[", "\"concepts\"", "]", "[", "concept", "]", "\n", "X_train", "=", "data_training", "[", "\"rnn\"", "]", "\n", "X_test", "=", "data_validation", "[", "\"rnn\"", "]", "\n", "\n", "# changing dataset format suitable for xgboost", "\n", "dtrain", "=", "xgb", ".", "DMatrix", "(", "X_train", ".", "to_numpy", "(", ")", ",", "label", "=", "y_train", ".", "to_numpy", "(", ")", ")", "\n", "dval", "=", "xgb", ".", "DMatrix", "(", "X_test", ".", "to_numpy", "(", ")", ",", "label", "=", "y_test", ".", "to_numpy", "(", ")", ")", "\n", "results", "=", "{", "}", "\n", "\n", "# check if concept is binary or not", "\n", "binary_concepts", "=", "[", "\"visited\"", ",", "\"reachable\"", ",", "\"visible\"", ",", "\"visibility\"", ",", "\"collision\"", "]", "\n", "is_binary", "=", "False", "\n", "for", "binary_concept", "in", "binary_concepts", ":", "\n", "        ", "if", "binary_concept", "in", "concept", ":", "\n", "            ", "is_binary", "=", "True", "\n", "\n", "", "", "if", "is_binary", ":", "\n", "# Logistic loss for binary concepts", "\n", "        ", "param", "=", "{", "\n", "\"max_depth\"", ":", "10", ",", "\n", "\"objective\"", ":", "\"binary:logistic\"", ",", "\n", "\"nthread\"", ":", "4", ",", "\n", "\"tree_method\"", ":", "\"gpu_hist\"", ",", "\n", "\"predictor\"", ":", "\"gpu_predictor\"", ",", "\n", "}", "\n", "", "else", ":", "\n", "# MSE loss for non-binary concepts", "\n", "        ", "param", "=", "{", "\n", "\"max_depth\"", ":", "10", ",", "\n", "\"objective\"", ":", "\"reg:squarederror\"", ",", "\n", "\"nthread\"", ":", "4", ",", "\n", "\"tree_method\"", ":", "\"gpu_hist\"", ",", "\n", "\"predictor\"", ":", "\"gpu_predictor\"", ",", "\n", "}", "\n", "\n", "# Train GBT", "\n", "", "evallist", "=", "[", "(", "dtrain", ",", "\"train\"", ")", ",", "(", "dval", ",", "\"val\"", ")", "]", "\n", "num_round", "=", "50", "\n", "model", "=", "xgb", ".", "train", "(", "param", ",", "dtrain", ",", "num_round", ",", "evallist", ",", "verbose_eval", "=", "False", ")", "\n", "\n", "# Evaluate GBT using base mse", "\n", "mean", "=", "np", ".", "mean", "(", "y_train", ".", "to_numpy", "(", ")", ")", "\n", "base_mse", "=", "np", ".", "mean", "(", "(", "mean", "-", "y_test", ".", "to_numpy", "(", ")", ")", "**", "2", ")", "\n", "mse", "=", "np", ".", "mean", "(", "\n", "(", "model", ".", "predict", "(", "xgb", ".", "DMatrix", "(", "X_test", ".", "to_numpy", "(", ")", ")", ")", "-", "y_test", ".", "to_numpy", "(", ")", ")", "**", "2", "\n", ")", "\n", "\n", "# Also calculate ROC_AUC and fscore if the concept is binary", "\n", "if", "is_binary", ":", "\n", "        ", "predicted", "=", "np", ".", "zeros_like", "(", "y_test", ".", "to_numpy", "(", ")", ")", "\n", "predicted", "[", "model", ".", "predict", "(", "xgb", ".", "DMatrix", "(", "X_test", ".", "to_numpy", "(", ")", ")", ")", ">", "0.5", "]", "=", "1", "\n", "fscore", "=", "f1_score", "(", "predicted", ",", "y_test", ".", "to_numpy", "(", ")", ",", "average", "=", "\"macro\"", ")", "\n", "roc_auc", "=", "roc_auc_score", "(", "\n", "y_test", ".", "to_numpy", "(", ")", ",", "model", ".", "predict", "(", "xgb", ".", "DMatrix", "(", "X_test", ".", "to_numpy", "(", ")", ")", ")", "\n", ")", "\n", "results", "[", "\"roc_auc\"", "]", "=", "roc_auc", "\n", "results", "[", "\"fscore\"", "]", "=", "fscore", "\n", "\n", "# Correlation between predicted and groundtruth concept values", "\n", "", "correlation", ",", "_", "=", "pearsonr", "(", "\n", "model", ".", "predict", "(", "xgb", ".", "DMatrix", "(", "X_test", ".", "to_numpy", "(", ")", ")", ")", ",", "y_test", ".", "to_numpy", "(", ")", "\n", ")", "\n", "results", "[", "\"correlation\"", "]", "=", "correlation", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.evaluate_all_concepts": [[181, 199], ["os.path.join", "os.path.join", "predict_concepts.load_dataset", "predict_concepts.get_concept_groups", "get_concept_groups.items", "predict_concepts.evaluate_concept_predictability"], "function", ["home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.load_dataset", "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.get_concept_groups", "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.evaluate_concept_predictability"], ["", "def", "evaluate_all_concepts", "(", "config", ",", "eval_results", ",", "path", ")", ":", "\n", "    ", "\"\"\"runs a for loop to evaluate predictability of all concepts investigated\n\n    Args:\n        config (str): config to check if task is pointnav or objectnav\n        eval_results (dict): to store evaluation results\n        path (str): root directory containing training and validation dataset\n    \"\"\"", "\n", "dir_training", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"train\"", ",", "config", ")", "\n", "dir_validation", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"val\"", ",", "config", ")", "\n", "data_training", ",", "data_validation", "=", "load_dataset", "(", "dir_training", ",", "dir_validation", ")", "\n", "\n", "concept_groups", "=", "get_concept_groups", "(", "config", ")", "\n", "\n", "for", "concept_group", ",", "concepts", "in", "concept_groups", ".", "items", "(", ")", ":", "\n", "        ", "for", "concept", "in", "concepts", ":", "\n", "            ", "eval_results", "[", "config", "]", "[", "concept", "]", "=", "evaluate_concept_predictability", "(", "\n", "data_training", ",", "data_validation", ",", "concept", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.plot_baseline_comparison": [[202, 279], ["pylab.cm.get_cmap", "range", "colors.append", "pandas.DataFrame().transpose", "matplotlib.subplots", "pd.DataFrame().transpose.plot.bar", "ax.set_ylabel", "ax.set_title", "ax.axhline", "ax.set_ylim", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.spines[].set_visible", "ax.set_xticklabels", "fig.tight_layout", "matplotlib.savefig", "fig.show", "cm.get_cmap.", "legend.append", "correlation_data.append", "os.path.join", "pandas.DataFrame", "str().zfill", "range", "str"], "function", ["None"], ["", "", "", "def", "plot_baseline_comparison", "(", "args", ",", "eval_results", ",", "concept_groups", ",", "save_dir_plots", ")", ":", "\n", "    ", "\"\"\"plots how well trained agent's RNN predict a concept vs. an untrained baseline\n\n    Args:\n        args (_type_): command arguments\n        eval_results (dict): evaluation results of all concepts\n        concept_groups (dict): dictionary containing list of concept for each group\n        save_dir_plots (str): path to save plots\n    \"\"\"", "\n", "task", "=", "args", ".", "task", "\n", "model", "=", "args", ".", "model", "\n", "weights", "=", "[", "\"pretrained\"", ",", "\"random\"", "]", "\n", "\n", "figure_labels", "=", "{", "}", "\n", "figure_labels", "[", "\"pretrained\"", "]", "=", "task", "\n", "figure_labels", "[", "\"random\"", "]", "=", "\"baseline\"", "\n", "\n", "groups", "=", "[", "\n", "\"visited\"", ",", "\n", "\"reachability\"", ",", "\n", "\"agents_info\"", ",", "\n", "\"target_info\"", ",", "\n", "]", "# ,'areas','collision_info','ac_outputs']", "\n", "\n", "cmap", "=", "cm", ".", "get_cmap", "(", "\"tab20\"", ")", "\n", "colors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "colors", ".", "append", "(", "cmap", "(", "i", ")", ")", "\n", "\n", "", "for", "group", "in", "groups", ":", "\n", "        ", "group_dict", "=", "{", "}", "\n", "\n", "legend", "=", "[", "]", "\n", "correlation_data", "=", "[", "]", "\n", "\n", "for", "weight", "in", "weights", ":", "\n", "            ", "model_id", "=", "task", "+", "\"_ithor_default_\"", "+", "model", "+", "\"_\"", "+", "weight", "\n", "group_dict", "[", "model_id", "]", "=", "{", "}", "\n", "for", "concept", "in", "concept_groups", "[", "group", "]", ":", "\n", "                ", "group_dict", "[", "model_id", "]", "[", "concept", "]", "=", "eval_results", "[", "model_id", "]", "[", "concept", "]", "[", "\n", "\"correlation\"", "\n", "]", "\n", "\n", "", "legend", ".", "append", "(", "figure_labels", "[", "weight", "]", ")", "\n", "correlation_data", ".", "append", "(", "group_dict", "[", "model_id", "]", ")", "\n", "\n", "", "df", "=", "pd", ".", "DataFrame", "(", "correlation_data", ",", "index", "=", "legend", ")", ".", "transpose", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "1", ",", "figsize", "=", "(", "10", ",", "6", ")", ")", "\n", "\n", "df", ".", "plot", ".", "bar", "(", "ax", "=", "ax", ",", "color", "=", "colors", ")", "\n", "ax", ".", "set_ylabel", "(", "\"correlation\"", ")", "\n", "ax", ".", "set_title", "(", "group", ")", "\n", "ax", ".", "axhline", "(", "y", "=", "0", ",", "color", "=", "\"k\"", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "0.1", ",", "1.0", "]", ")", "\n", "ax", ".", "spines", "[", "\"right\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"top\"", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "\"bottom\"", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "if", "\"reachability\"", "in", "group", ":", "\n", "            ", "thetas", "=", "[", "str", "(", "theta", ")", ".", "zfill", "(", "3", ")", "for", "theta", "in", "range", "(", "0", ",", "360", ",", "30", ")", "]", "\n", "labels", "=", "[", "r\"$\\theta_{\"", "+", "theta", "+", "\"}$\"", "for", "theta", "in", "thetas", "]", "\n", "", "elif", "\"agents_info\"", "in", "group", ":", "\n", "            ", "labels", "=", "[", "r\"$R_{a}$\"", ",", "r\"$\\theta_{a}$\"", "]", "\n", "", "elif", "\"target_info\"", "in", "group", ":", "\n", "            ", "if", "task", "==", "\"objectnav\"", ":", "\n", "                ", "labels", "=", "[", "r\"$R_{t}$\"", ",", "r\"$\\theta_{t}$\"", ",", "r\"$Visible_{t}$\"", "]", "\n", "", "else", ":", "\n", "                ", "labels", "=", "[", "r\"$R_{t}$\"", ",", "r\"$\\theta_{t}$\"", "]", "\n", "", "", "elif", "\"visited\"", "in", "group", ":", "\n", "            ", "labels", "=", "[", "r\"${l}$\"", ",", "r\"${lr}$\"", ",", "r\"${lrh}$\"", "]", "\n", "\n", "", "ax", ".", "set_xticklabels", "(", "labels", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir_plots", ",", "group", "+", "\".svg\"", ")", ")", "\n", "\n", "fig", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.parse_args": [[282, 306], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"predict concepts from agent's dynamic representation (RNN)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-t\"", ",", "\"--task\"", ",", "help", "=", "\"which task\"", ",", "default", "=", "\"objectnav\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"-m\"", ",", "\"--model\"", ",", "help", "=", "\"which model\"", ",", "default", "=", "\"resnet\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-p\"", ",", "\n", "\"--path\"", ",", "\n", "help", "=", "\"path to trajectory features\"", ",", "\n", "default", "=", "\"./data/trajectory_dataset\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-sd\"", ",", "\n", "\"--save_dir\"", ",", "\n", "help", "=", "\"save evaluation results and plots\"", ",", "\n", "default", "=", "\"./results\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.main": [[307, 338], ["predict_concepts.parse_args", "predict_concepts.get_concept_groups", "predict_concepts.evaluate_all_concepts", "predict_concepts.evaluate_all_concepts", "os.path.join", "os.path.join", "predict_concepts.plot_baseline_comparison", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "open", "pickle.dump", "os.path.join"], "function", ["home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.parse_args", "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.get_concept_groups", "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.evaluate_all_concepts", "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.evaluate_all_concepts", "home.repos.pwc.inspect_result.allenai_isee.None.predict_concepts.plot_baseline_comparison"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "eval_results", "=", "{", "}", "\n", "\n", "# evaluate how well a trained agent's RNN can predict concepts", "\n", "config_pretrained", "=", "args", ".", "task", "+", "\"_ithor_default_\"", "+", "args", ".", "model", "+", "\"_pretrained\"", "\n", "concept_groups", "=", "get_concept_groups", "(", "config_pretrained", ")", "\n", "eval_results", "[", "config_pretrained", "]", "=", "{", "}", "\n", "evaluate_all_concepts", "(", "config_pretrained", ",", "eval_results", ",", "args", ".", "path", ")", "\n", "\n", "# evaluate how well a baseline untrained agent's RNN can predict concepts", "\n", "config_baseline", "=", "args", ".", "task", "+", "\"_ithor_default_\"", "+", "args", ".", "model", "+", "\"_random\"", "\n", "eval_results", "[", "config_baseline", "]", "=", "{", "}", "\n", "evaluate_all_concepts", "(", "config_baseline", ",", "eval_results", ",", "args", ".", "path", ")", "\n", "\n", "# directory to save evaluation results data", "\n", "save_dir_data", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "\"data\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir_data", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir_data", ")", "\n", "\n", "# directory to save evaluation results plots", "\n", "", "save_dir_plots", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "\"plots\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir_plots", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir_plots", ")", "\n", "\n", "# save evaluation results", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir_data", ",", "\"feat_importance.pickle\"", ")", ",", "\"wb\"", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "eval_results", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "# generate and plot evaluation results of trained agent vs. a baseline", "\n", "", "plot_baseline_comparison", "(", "args", ",", "eval_results", ",", "concept_groups", ",", "save_dir_plots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.load_dataset": [[11, 34], ["pandas.read_pickle", "pandas.read_pickle", "pandas.read_pickle", "pandas.read_pickle", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["def", "load_dataset", "(", "dir_training", ",", "dir_validation", ")", ":", "\n", "    ", "\"\"\"Loads the dataset of RNN and concepts\n\n    Args:\n        dir_training (str): directory containing training data\n        dir_validation (str): directory containing training data\n\n    Returns:\n        dict , dict: data for training and validation respectively \n    \"\"\"", "\n", "data_training", "=", "{", "}", "\n", "data_validation", "=", "{", "}", "\n", "\n", "data_training", "[", "\"rnn\"", "]", "=", "pd", ".", "read_pickle", "(", "os", ".", "path", ".", "join", "(", "dir_training", ",", "\"rnn.pkl\"", ")", ")", "\n", "data_training", "[", "\"concepts\"", "]", "=", "pd", ".", "read_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_training", ",", "\"metadata.pkl\"", ")", "\n", ")", "\n", "data_validation", "[", "\"rnn\"", "]", "=", "pd", ".", "read_pickle", "(", "os", ".", "path", ".", "join", "(", "dir_validation", ",", "\"rnn.pkl\"", ")", ")", "\n", "data_validation", "[", "\"concepts\"", "]", "=", "pd", ".", "read_pickle", "(", "\n", "os", ".", "path", ".", "join", "(", "dir_validation", ",", "\"metadata.pkl\"", ")", "\n", ")", "\n", "\n", "return", "data_training", ",", "data_validation", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.show_topK_neurons": [[36, 94], ["xgboost.DMatrix", "xgboost.DMatrix", "xgboost.train", "shap.Explainer", "shap.Explainer.", "shap.plots.beeswarm", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "X_train.to_numpy", "X_test.to_numpy", "os.path.join", "y_train.to_numpy", "y_test.to_numpy"], "function", ["None"], ["", "def", "show_topK_neurons", "(", "data_training", ",", "data_validation", ",", "concept", ",", "save_dir_plots", ",", "k", "=", "5", ")", ":", "\n", "    ", "\"\"\"_summary_\n\n    Args:\n        data_training (dict): dataset of RNN and concepts (Training)\n        data_validation (dict): dataset of RNN and concepts (Validation)\n        concept (str): concept for which we want to find top-K neurons\n        save_dir_plots (str): path to save plots\n        k (int, optional): k in top-K. Defaults to 5.\n    \"\"\"", "\n", "y_train", "=", "data_training", "[", "\"concepts\"", "]", "[", "concept", "]", "\n", "y_test", "=", "data_validation", "[", "\"concepts\"", "]", "[", "concept", "]", "\n", "X_train", "=", "data_training", "[", "\"rnn\"", "]", "\n", "X_test", "=", "data_validation", "[", "\"rnn\"", "]", "\n", "\n", "# changing dataset format suitable for xgboost", "\n", "dtrain", "=", "xgb", ".", "DMatrix", "(", "X_train", ".", "to_numpy", "(", ")", ",", "label", "=", "y_train", ".", "to_numpy", "(", ")", ")", "\n", "dval", "=", "xgb", ".", "DMatrix", "(", "X_test", ".", "to_numpy", "(", ")", ",", "label", "=", "y_test", ".", "to_numpy", "(", ")", ")", "\n", "results", "=", "{", "}", "\n", "\n", "# check if concept is binary or not", "\n", "binary_concepts", "=", "[", "\"visited\"", ",", "\"reachable\"", ",", "\"visible\"", ",", "\"visibility\"", ",", "\"collision\"", "]", "\n", "is_binary", "=", "False", "\n", "for", "binary_concept", "in", "binary_concepts", ":", "\n", "        ", "if", "binary_concept", "in", "concept", ":", "\n", "            ", "is_binary", "=", "True", "\n", "\n", "", "", "if", "is_binary", ":", "\n", "# Logistic loss for binary concepts", "\n", "        ", "param", "=", "{", "\n", "\"max_depth\"", ":", "10", ",", "\n", "\"objective\"", ":", "\"binary:logistic\"", ",", "\n", "\"nthread\"", ":", "4", ",", "\n", "\"tree_method\"", ":", "\"gpu_hist\"", ",", "\n", "\"predictor\"", ":", "\"gpu_predictor\"", ",", "\n", "}", "\n", "", "else", ":", "\n", "# MSE loss for non-binary concepts", "\n", "        ", "param", "=", "{", "\n", "\"max_depth\"", ":", "10", ",", "\n", "\"objective\"", ":", "\"reg:squarederror\"", ",", "\n", "\"nthread\"", ":", "4", ",", "\n", "\"tree_method\"", ":", "\"gpu_hist\"", ",", "\n", "\"predictor\"", ":", "\"gpu_predictor\"", ",", "\n", "}", "\n", "\n", "# Train GBT", "\n", "", "evallist", "=", "[", "(", "dtrain", ",", "\"train\"", ")", ",", "(", "dval", ",", "\"val\"", ")", "]", "\n", "num_round", "=", "50", "\n", "model", "=", "xgb", ".", "train", "(", "param", ",", "dtrain", ",", "num_round", ",", "evallist", ",", "verbose_eval", "=", "False", ")", "\n", "\n", "# Apply SHAP to find top-k relevant neurons in prediction", "\n", "explainer", "=", "shap", ".", "Explainer", "(", "model", ")", "\n", "shap_values", "=", "explainer", "(", "X_test", ")", "\n", "shap", ".", "plots", ".", "beeswarm", "(", "shap_values", ",", "max_display", "=", "k", ",", "show", "=", "False", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "save_dir_plots", ",", "concept", "+", "\"_beeswarm.svg\"", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.parse_args": [[96, 121], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"predict concepts from agent's dynamic representation (RNN)\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-t\"", ",", "\"--task\"", ",", "help", "=", "\"which task\"", ",", "default", "=", "\"objectnav\"", ",", "type", "=", "str", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"-m\"", ",", "\"--model\"", ",", "help", "=", "\"which model\"", ",", "default", "=", "\"resnet\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "\"--concept\"", ",", "help", "=", "\"which concept\"", ",", "default", "=", "\"reachable_R=2_theta=000\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-p\"", ",", "\n", "\"--path\"", ",", "\n", "help", "=", "\"path to trajectory features\"", ",", "\n", "default", "=", "\"./data/trajectory_dataset\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-sd\"", ",", "\n", "\"--save_dir\"", ",", "\n", "help", "=", "\"save evaluation results and plots\"", ",", "\n", "default", "=", "\"./results/\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.main": [[123, 139], ["get_topK_neurons.parse_args", "os.path.join", "os.path.join", "get_topK_neurons.load_dataset", "os.path.join", "get_topK_neurons.show_topK_neurons", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.parse_args", "home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.load_dataset", "home.repos.pwc.inspect_result.allenai_isee.None.get_topK_neurons.show_topK_neurons"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "# Load dataset", "\n", "config_pretrained", "=", "args", ".", "task", "+", "\"_ithor_default_\"", "+", "args", ".", "model", "+", "\"_pretrained\"", "\n", "dir_training", "=", "os", ".", "path", ".", "join", "(", "args", ".", "path", ",", "\"train\"", ",", "config_pretrained", ")", "\n", "dir_validation", "=", "os", ".", "path", ".", "join", "(", "args", ".", "path", ",", "\"val\"", ",", "config_pretrained", ")", "\n", "data_training", ",", "data_validation", "=", "load_dataset", "(", "dir_training", ",", "dir_validation", ")", "\n", "\n", "# Create directory to save plots", "\n", "save_dir_plots", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "task", ",", "args", ".", "model", ",", "\"shap_plots\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir_plots", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir_plots", ")", "\n", "\n", "# get top-K relevant neurons for predicting a concept", "\n", "", "concept", "=", "args", ".", "concept", "\n", "show_topK_neurons", "(", "data_training", ",", "data_validation", ",", "concept", ",", "save_dir_plots", ",", "k", "=", "20", ")", "\n", "\n"]]}