{"home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.openlibraryImageDownloaderMain.main": [[7, 29], ["print", "scraper_openlibrary.OpenLibHelper", "open", "json.load", "json.dumps", "os.path.join", "os.path.exists", "os.makedirs", "x.lower", "s.OpenLibHelper.search_author", "s.OpenLibHelper.search_author"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.search_author", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.search_author"], ["def", "main", "(", "opts", ")", ":", "\n", "\n", "# read json file", "\n", "    ", "json_file", "=", "opts", ".", "dataset_json", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "illustrator_dataset", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "print", "(", "json", ".", "dumps", "(", "illustrator_dataset", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ")", "\n", "\n", "# init helper", "\n", "olh", "=", "s", ".", "OpenLibHelper", "(", "opts", ".", "openlib_username", ",", "opts", ".", "openlib_password", ")", "\n", "\n", "for", "illustrator", "in", "illustrator_dataset", ":", "\n", "        ", "dir_name", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "download_dir", ",", "illustrator", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "# search for an illustrator and books", "\n", "", "lower_case_list", "=", "[", "x", ".", "lower", "(", ")", "for", "x", "in", "illustrator_dataset", "[", "illustrator", "]", "]", "\n", "if", "opts", ".", "download_json", ":", "\n", "            ", "olh", ".", "search_author", "(", "illustrator", ",", "dir_name", ",", "lower_case_list", ")", "\n", "", "else", ":", "\n", "            ", "olh", ".", "search_author", "(", "illustrator", ",", "dir_name", ",", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.miyazaki_downloader.randdelay": [[20, 22], ["time.sleep", "random.uniform"], "function", ["None"], ["def", "randdelay", "(", "a", ",", "b", ")", ":", "\n", "    ", "time", ".", "sleep", "(", "random", ".", "uniform", "(", "a", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.miyazaki_downloader.main": [[24, 106], ["int", "selenium.webdriver.Firefox", "webdriver.Firefox.get", "range", "webdriver.Firefox.find_elements_by_xpath", "print", "print", "webdriver.Firefox.quit", "os.path.exists", "os.makedirs", "range", "miyazaki_downloader.randdelay", "len", "print", "webdriver.Firefox.execute_script", "miyazaki_downloader.randdelay", "webdriver.Firefox.find_element_by_xpath().click", "json.loads", "json.loads", "webdriver.Firefox.execute_script", "webdriver.Firefox.switch_to.window", "miyazaki_downloader.randdelay", "WebDriverWait().until.screenshot", "miyazaki_downloader.randdelay", "webdriver.Firefox.close", "webdriver.Firefox.switch_to.window", "searchtext.replace", "searchtext.replace", "print", "WebDriverWait().until.get_attribute", "WebDriverWait().until.get_attribute", "selenium.webdriver.support.ui.WebDriverWait().until", "print", "webdriver.Firefox.close", "webdriver.Firefox.switch_to.window", "print", "webdriver.Firefox.find_element_by_xpath", "selenium.webdriver.support.expected_conditions.presence_of_element_located", "print", "selenium.webdriver.support.ui.WebDriverWait", "str", "searchtext.replace"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData.get", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close"], ["", "def", "main", "(", ")", ":", "\n", "    ", "searchtext", "=", "\"miyazaki wallpaper\"", "\n", "num_requested", "=", "int", "(", "5000", ")", "\n", "number_of_scrolls", "=", "num_requested", "/", "400", "+", "1", "\n", "# number_of_scrolls * 400 images will be opened in the browser", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "download_path", "+", "searchtext", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "download_path", "+", "searchtext", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ")", "\n", "\n", "", "url", "=", "\"https://www.google.co.in/search?q=\"", "+", "searchtext", "+", "\"&source=lnms&tbm=isch\"", "\n", "# driver = webdriver.Chrome(r\"D:\\chromedriver\")", "\n", "driver", "=", "webdriver", ".", "Firefox", "(", ")", "\n", "driver", ".", "get", "(", "url", ")", "\n", "\n", "headers", "=", "{", "}", "\n", "headers", "[", "'User-Agent'", "]", "=", "\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"", "\n", "extensions", "=", "{", "\"jpg\"", ",", "'png'", ",", "'jpeg'", ",", "'tiff'", "}", "\n", "img_count", "=", "0", "\n", "downloaded_img_count", "=", "0", "\n", "\n", "for", "_", "in", "range", "(", "number_of_scrolls", ")", ":", "\n", "        ", "for", "__", "in", "range", "(", "10", ")", ":", "\n", "# multiple scrolls needed to show all 400 images", "\n", "            ", "driver", ".", "execute_script", "(", "\"window.scrollBy(0, 1000000)\"", ")", "\n", "randdelay", "(", "1", ",", "3", ")", "\n", "# to load next 400 images", "\n", "", "randdelay", "(", "1", ",", "3", ")", "\n", "try", ":", "\n", "            ", "driver", ".", "find_element_by_xpath", "(", "\"//input[@id='smb']\"", ")", ".", "click", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "\"Less images found:\"", ",", "e", ")", "\n", "break", "\n", "\n", "# imges = driver.find_elements_by_xpath('//div[@class=\"rg_meta\"]') # not working anymore", "\n", "", "", "imges", "=", "driver", ".", "find_elements_by_xpath", "(", "'//div[contains(@class,\"rg_meta\")]'", ")", "\n", "print", "(", "\"Total images:\"", ",", "len", "(", "imges", ")", ",", "\"\\n\"", ")", "\n", "for", "img", "in", "imges", ":", "\n", "        ", "img_count", "+=", "1", "\n", "img_url", "=", "json", ".", "loads", "(", "img", ".", "get_attribute", "(", "'innerHTML'", ")", ")", "[", "\"ou\"", "]", "\n", "img_type", "=", "json", ".", "loads", "(", "img", ".", "get_attribute", "(", "'innerHTML'", ")", ")", "[", "\"ity\"", "]", "\n", "print", "(", "\"Downloading image\"", ",", "img_count", ",", "\": \"", ",", "img_url", ")", "\n", "try", ":", "\n", "# Save the window opener (current window)", "\n", "            ", "main_window", "=", "driver", ".", "current_window_handle", "\n", "\n", "scripttt", "=", "'''window.open('{link}')'''", ".", "format", "(", "link", "=", "img_url", ")", "\n", "driver", ".", "execute_script", "(", "scripttt", ")", "\n", "\n", "windows", "=", "driver", ".", "window_handles", "\n", "driver", ".", "switch_to", ".", "window", "(", "windows", "[", "1", "]", ")", "\n", "\n", "delay", "=", "10", "# seconds", "\n", "try", ":", "\n", "                ", "img", "=", "WebDriverWait", "(", "driver", ",", "delay", ")", ".", "until", "(", "EC", ".", "presence_of_element_located", "(", "(", "By", ".", "TAG_NAME", ",", "'img'", ")", ")", ")", "\n", "print", "(", "\"Page is ready!\"", ")", "\n", "", "except", "TimeoutException", ":", "\n", "                ", "print", "(", "\"Loading took too much time!\"", ")", "\n", "\n", "# img = driver.find_element_by_tag_name('img')", "\n", "", "randdelay", "(", "2", ",", "4", ")", "# wait some to get ss. eger cok fazla siyah resim olursa bunu arttirmaniz lazim", "\n", "img", ".", "screenshot", "(", "download_path", "+", "searchtext", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "+", "\"/\"", "+", "str", "(", "downloaded_img_count", ")", "+", "\".png\"", ")", "\n", "randdelay", "(", "3", ",", "5", ")", "# wait some to get ss. eger cok fazla siyah resim olursa bunu arttirmaniz lazim", "\n", "\n", "# Close current window", "\n", "driver", ".", "close", "(", ")", "\n", "driver", ".", "switch_to", ".", "window", "(", "main_window", ")", "\n", "\n", "downloaded_img_count", "+=", "1", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# Close current window", "\n", "            ", "driver", ".", "close", "(", ")", "\n", "windows", "=", "driver", ".", "window_handles", "\n", "# get back to main window!!!", "\n", "driver", ".", "switch_to", ".", "window", "(", "windows", "[", "0", "]", ")", "\n", "print", "(", "\"Download failed:\"", ",", "e", ")", "\n", "", "finally", ":", "\n", "            ", "print", "\n", "", "if", "downloaded_img_count", ">=", "num_requested", ":", "\n", "            ", "break", "\n", "\n", "", "", "print", "(", "\"Total downloaded: \"", ",", "downloaded_img_count", ",", "\"/\"", ",", "img_count", ")", "\n", "driver", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.__init__": [[25, 41], ["selenium.webdriver.FirefoxProfile", "selenium.webdriver.FirefoxProfile.set_preference", "selenium.webdriver.FirefoxProfile.set_preference", "selenium.webdriver.FirefoxProfile.set_preference", "selenium.webdriver.FirefoxProfile.set_preference", "selenium.webdriver.Firefox", "scraper_openlibrary.OpenLibHelper.browser.maximize_window", "scraper_openlibrary.OpenLibHelper.browser.get", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_name", "scraper_openlibrary.OpenLibHelper.send_keys", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_name", "scraper_openlibrary.OpenLibHelper.send_keys", "scraper_openlibrary.OpenLibHelper.send_keys", "scraper_openlibrary.randdelay"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData.get", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay"], ["    ", "def", "__init__", "(", "self", ",", "login", ",", "pw", ")", ":", "\n", "        ", "profile", "=", "webdriver", ".", "FirefoxProfile", "(", ")", "\n", "profile", ".", "set_preference", "(", "\"browser.download.folderList\"", ",", "2", ")", "\n", "profile", ".", "set_preference", "(", "\"browser.download.manager.showWhenStarting\"", ",", "False", ")", "\n", "profile", ".", "set_preference", "(", "\"browser.download.dir\"", ",", "\"./\"", ")", "\n", "profile", ".", "set_preference", "(", "\"browser.helperApps.neverAsk.saveToDisk\"", ",", "\"image/jpeg\"", ")", "\n", "self", ".", "browser", "=", "webdriver", ".", "Firefox", "(", "firefox_profile", "=", "profile", ")", "\n", "self", ".", "browser", ".", "maximize_window", "(", ")", "\n", "# self.browser.find_element_by_xpath('/html/body').send_keys(Keys.F11)", "\n", "self", ".", "browser", ".", "get", "(", "\"https://openlibrary.org/account/login\"", ")", "\n", "emailElem", "=", "self", ".", "browser", ".", "find_element_by_name", "(", "'username'", ")", "\n", "emailElem", ".", "send_keys", "(", "login", ")", "\n", "passwordElem", "=", "self", ".", "browser", ".", "find_element_by_name", "(", "'password'", ")", "\n", "passwordElem", ".", "send_keys", "(", "pw", ")", "\n", "passwordElem", ".", "send_keys", "(", "Keys", ".", "RETURN", ")", "\n", "randdelay", "(", "5", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.search_author": [[42, 249], ["scraper_openlibrary.OpenLibHelper.browser.find_element_by_name", "scraper_openlibrary.OpenLibHelper.clear", "scraper_openlibrary.OpenLibHelper.send_keys", "scraper_openlibrary.OpenLibHelper.send_keys", "scraper_openlibrary.randdelay", "range", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_id", "scraper_openlibrary.OpenLibHelper.find_elements_by_tag_name", "range", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "scraper_openlibrary.OpenLibHelper.click", "scraper_openlibrary.randdelay", "len", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_id().find_elements_by_tag_name", "element.find_element_by_tag_name", "element.find_element_by_tag_name.send_keys", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.switch_to.window", "scraper_openlibrary.randdelay", "dir_name.replace.replace.replace", "dir_name.replace.replace.replace", "dir_name.replace.replace.replace", "dir_name.replace.replace.replace", "os.path.exists", "scraper_openlibrary.OpenLibHelper.click", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_xpath", "scraper_openlibrary.OpenLibHelper.click", "page_data.splitlines", "str___.replace", "re.split", "range", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text().click", "scraper_openlibrary.randdelay", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_xpath", "Exception", "Exception", "os.makedirs", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "scraper_openlibrary.OpenLibHelper.click", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "scraper_openlibrary.OpenLibHelper.click", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "scraper_openlibrary.OpenLibHelper.click", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_name", "scraper_openlibrary.OpenLibHelper.send_keys", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_name", "scraper_openlibrary.OpenLibHelper.send_keys", "scraper_openlibrary.OpenLibHelper.send_keys", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.execute_script", "scraper_openlibrary.OpenLibHelper.browser.switch_to.window", "scraper_openlibrary.OpenLibHelper.browser.maximize_window", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.close", "scraper_openlibrary.OpenLibHelper.browser.switch_to.window", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_xpath", "scraper_openlibrary.OpenLibHelper.click", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.close", "scraper_openlibrary.OpenLibHelper.browser.switch_to.window", "scraper_openlibrary.OpenLibHelper.close", "scraper_openlibrary.OpenLibHelper.browser.switch_to.window", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_id", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_tag_name", "scraper_openlibrary.OpenLibHelper.browser.execute_script", "scraper_openlibrary.OpenLibHelper.browser.execute_script", "scraper_openlibrary.OpenLibHelper.browser.execute_script", "scraper_openlibrary.OpenLibHelper.screenshot", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "print", "title.lower().replace", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "scraper_openlibrary.OpenLibHelper.click", "scraper_openlibrary.randdelay", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "str", "scraper_openlibrary.OpenLibHelper.browser.close", "scraper_openlibrary.OpenLibHelper.browser.switch_to.window", "str", "str", "title.lower", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text", "scraper_openlibrary.OpenLibHelper.browser.find_element_by_link_text"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close"], ["", "def", "search_author", "(", "self", ",", "author", ",", "data_folder", ",", "book_list", "=", "[", "]", ")", ":", "\n", "\n", "        ", "searchElem", "=", "self", ".", "browser", ".", "find_element_by_name", "(", "'q'", ")", "\n", "searchElem", ".", "clear", "(", ")", "\n", "searchElem", ".", "send_keys", "(", "author", ")", "\n", "searchElem", ".", "send_keys", "(", "Keys", ".", "RETURN", ")", "\n", "# wait up to 10 seconds for the elements to become available", "\n", "randdelay", "(", "9", ",", "12", ")", "\n", "\n", "for", "i_p", "in", "range", "(", "0", ",", "2", ")", ":", "\n", "            ", "if", "i_p", "==", "1", ":", "\n", "                ", "two_button", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'2'", ")", "\n", "two_button", ".", "click", "(", ")", "\n", "randdelay", "(", "9", ",", "11", ")", "\n", "\n", "## search results", "\n", "", "search_res", "=", "self", ".", "browser", ".", "find_element_by_id", "(", "\"searchResults\"", ")", "\n", "elementList", "=", "search_res", ".", "find_elements_by_tag_name", "(", "\"li\"", ")", "\n", "\n", "# traverse results", "\n", "for", "i", "in", "range", "(", "len", "(", "elementList", ")", ")", ":", "\n", "                ", "element", "=", "self", ".", "browser", ".", "find_element_by_id", "(", "\"searchResults\"", ")", ".", "find_elements_by_tag_name", "(", "\"li\"", ")", "[", "i", "]", "\n", "try", ":", "\n", "\n", "# Save the window opener (current window)", "\n", "                    ", "main_window", "=", "self", ".", "browser", ".", "current_window_handle", "\n", "\n", "# open result in new tab", "\n", "# borrow_button = element.find_element_by_xpath(\"//div[@class='searchResultItemCTA']//div[@class='searchResultItemCTA-lending']\")", "\n", "borrow_button_first", "=", "element", ".", "find_element_by_tag_name", "(", "'a'", ")", "\n", "borrow_button_first", ".", "send_keys", "(", "Keys", ".", "CONTROL", "+", "Keys", ".", "RETURN", ")", "\n", "randdelay", "(", "15", ",", "17", ")", "# wait for new tab to load", "\n", "\n", "\n", "# Get windows list and put focus on new window (which is on the 1st index in the list)", "\n", "windows", "=", "self", ".", "browser", ".", "window_handles", "\n", "self", ".", "browser", ".", "switch_to", ".", "window", "(", "windows", "[", "1", "]", ")", "\n", "# do whatever you have to do on this page, we will just got to sleep for now", "\n", "randdelay", "(", "7", ",", "10", ")", "\n", "\n", "\n", "title", "=", "self", ".", "browser", ".", "find_element_by_xpath", "(", "\n", "\"//body[@id='user']//div[@id='test-body-mobile']//div[@class='contentContainer']//div[@id='contentHead']//span[@itemprop='name']\"", ")", ".", "text", "\n", "if", "(", "book_list", ")", "and", "(", "not", "title", ".", "lower", "(", ")", ".", "replace", "(", "\"\u00ed\"", ",", "\"\"", ")", "in", "book_list", ")", ":", "\n", "                        ", "raise", "Exception", "(", "'Book is not in the list!'", ")", "\n", "\n", "", "dir_name", "=", "data_folder", "+", "\"/\"", "+", "title", "\n", "dir_name", "=", "dir_name", ".", "replace", "(", "\"?\"", ",", "\"\"", ")", "\n", "dir_name", "=", "dir_name", ".", "replace", "(", "\"'\"", ",", "\"\"", ")", "\n", "dir_name", "=", "dir_name", ".", "replace", "(", "\":\"", ",", "\"\"", ")", "\n", "dir_name", "=", "dir_name", ".", "replace", "(", "\"\u00ed\"", ",", "\"\"", ")", "\n", "\n", "# if we already downloaded this book, move on!!", "\n", "if", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "                        ", "raise", "Exception", "(", "'Already downloaded this book!'", ")", "# Don't! If you catch, likely to hide bugs.", "\n", "", "else", ":", "# else lets create a dir and download!", "\n", "                        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n", "#now click Borrow!! or maybe we already loaned this so try to read at least.", "\n", "", "try", ":", "\n", "                        ", "check_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'Check Availability'", ")", "\n", "check_button_second", ".", "click", "(", ")", "\n", "randdelay", "(", "7", ",", "12", ")", "\n", "borrow_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'1 Hour Borrow'", ")", "\n", "", "except", ":", "\n", "                        ", "try", ":", "\n", "                            ", "check_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'Checked Out'", ")", "\n", "title_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "title", ")", "\n", "title_button_second", ".", "click", "(", ")", "\n", "randdelay", "(", "7", ",", "12", ")", "\n", "borrow_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'1 Hour Borrow'", ")", "\n", "", "except", ":", "\n", "\n", "                            ", "try", ":", "\n", "                                ", "borrow_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'Borrow'", ")", "\n", "", "except", ":", "\n", "# try:", "\n", "                                ", "borrow_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'Read'", ")", "\n", "# except:", "\n", "#     continue # no loans available so move to the next book.", "\n", "\n", "", "", "", "borrow_button_second", ".", "click", "(", ")", "\n", "randdelay", "(", "20", ",", "23", ")", "\n", "\n", "try", ":", "\n", "                        ", "borrow_1h_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'Borrow for 1 hour'", ")", "\n", "borrow_1h_button_second", ".", "click", "(", ")", "\n", "randdelay", "(", "15", ",", "20", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "", "try", ":", "\n", "                        ", "borrow_lg_button_second", "=", "self", ".", "browser", ".", "find_element_by_link_text", "(", "'Log In and Borrow'", ")", "\n", "borrow_lg_button_second", ".", "click", "(", ")", "\n", "randdelay", "(", "7", ",", "10", ")", "\n", "emailElem", "=", "self", ".", "browser", ".", "find_element_by_name", "(", "'username'", ")", "\n", "emailElem", ".", "send_keys", "(", "'noabarzilay11@gmail.com'", ")", "\n", "passwordElem", "=", "self", ".", "browser", ".", "find_element_by_name", "(", "'password'", ")", "\n", "passwordElem", ".", "send_keys", "(", "'Nn654321'", ")", "\n", "passwordElem", ".", "send_keys", "(", "Keys", ".", "RETURN", ")", "\n", "randdelay", "(", "5", ",", "10", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "#switch to one page", "\n", "", "one_page", "=", "self", ".", "browser", ".", "find_element_by_xpath", "(", "\n", "\"//div[@id='IABookReaderWrapper']//div[@id='BookReader']//div[@class='BRfooter']//div[@class='BRnav BRnavDesktop']//div[@class='BRpage']//button[@bt-xtitle='One-page view']\"", ")", "\n", "one_page", ".", "click", "(", ")", "\n", "\n", "# now take source text, we will use it to generate full URLs", "\n", "page_data", "=", "self", ".", "browser", ".", "page_source", "\n", "page_list", "=", "page_data", ".", "splitlines", "(", ")", "\n", "# find the item index similar to this:", "\n", "# url: '//ia903101.us.archive.org/BookReader/BookReaderJSIA.php?id=lettherebelight0000unse&itemPath=", "\n", "# /5/items/lettherebelight0000unse&server=ia903101.us.archive.org&format=jsonp&subPrefix=", "\n", "# lettherebelight0000unse&requestUri=/stream/lettherebelight0000unse&version=mHe9koCz',", "\n", "str___", "=", "page_list", "[", "452", "]", "# this index may change if site is updated!", "\n", "\n", "\n", "if", "not", "(", "(", "\"url\"", "in", "str___", ")", "and", "(", "\"ia\"", "in", "str___", ")", ")", ":", "\n", "                        ", "str___", "=", "page_list", "[", "446", "]", "# this index may change if site is updated!", "\n", "\n", "", "aaa", "=", "str___", ".", "replace", "(", "\" \"", ",", "\"\"", ")", "# remove heading whitespaces", "\n", "tokens_url", "=", "re", ".", "split", "(", "';|,|\\.|/|=|&'", ",", "aaa", ")", "# now split into tokens", "\n", "# tk0 = tokens_url[0]", "\n", "# tk1 = tokens_url[1]", "\n", "tk2", "=", "tokens_url", "[", "2", "]", "# this is similar to ia903101", "\n", "tk3", "=", "tokens_url", "[", "3", "]", "# us", "\n", "tk4", "=", "tokens_url", "[", "4", "]", "# archive", "\n", "tk5", "=", "tokens_url", "[", "5", "]", "# org", "\n", "tk6", "=", "tokens_url", "[", "6", "]", "# BookReader", "\n", "tk12", "=", "tokens_url", "[", "12", "]", "\n", "tk13", "=", "tokens_url", "[", "13", "]", "\n", "tk14", "=", "tokens_url", "[", "14", "]", "\n", "\n", "# here turn pages till end!!!", "\n", "for", "j", "in", "range", "(", "1000", ")", ":", "#adjust this to pages of a book", "\n", "# print self.browser.current_url", "\n", "# str2 = \"https://ia800706.us.archive.org/BookReader/BookReaderImages.php?zip=/35/items/billpeetautobiog00peet/billpeetautobiog00peet_jp2.zip&file=billpeetautobiog00peet_jp2/billpeetautobiog00peet_0019.jp2&scale=1&rotate=0\"", "\n", "                        ", "page_num", "=", "'0001'", "\n", "if", "j", "<", "9", ":", "\n", "                            ", "page_num", "=", "'000'", "+", "str", "(", "j", "+", "1", ")", "\n", "", "elif", "j", "<", "99", ":", "\n", "                            ", "page_num", "=", "'00'", "+", "str", "(", "j", "+", "1", ")", "\n", "", "else", ":", "\n", "                            ", "page_num", "=", "'0'", "+", "str", "(", "j", "+", "1", ")", "\n", "\n", "", "file_path", "=", "dir_name", "+", "\"/page_{PAGE_NUM}.png\"", ".", "format", "(", "PAGE_NUM", "=", "page_num", ")", "\n", "\n", "source_URL", "=", "\"https://\"", "+", "tk2", "+", "'.'", "+", "tk3", "+", "'.'", "+", "tk4", "+", "'.'", "+", "tk5", "+", "'/'", "+", "tk6", "+", "\"/BookReaderImages.php?zip=/\"", "+", "tk12", "+", "\"/\"", "+", "tk13", "+", "\"/\"", "+", "tk14", "+", "'/'", "+", "tk14", "+", "\"_jp2.zip&file=\"", "+", "tk14", "+", "\"_jp2/\"", "+", "tk14", "+", "\"_{PAGE_NUM}\"", ".", "format", "(", "PAGE_NUM", "=", "page_num", ")", "+", "\".jp2&scale=1&rotate=0\"", "\n", "\n", "scripttt", "=", "'''window.open('{link}')'''", ".", "format", "(", "link", "=", "source_URL", ")", "#,'_blank'", "\n", "self", ".", "browser", ".", "execute_script", "(", "scripttt", ")", "\n", "# Get windows list and put focus on new window (which is on the 2nd index in the list)", "\n", "windows", "=", "self", ".", "browser", ".", "window_handles", "\n", "self", ".", "browser", ".", "switch_to", ".", "window", "(", "windows", "[", "2", "]", ")", "\n", "self", ".", "browser", ".", "maximize_window", "(", ")", "\n", "\n", "randdelay", "(", "15", ",", "18", ")", "# wait for page to load", "\n", "\n", "try", ":", "\n", "                            ", "img", "=", "self", ".", "browser", ".", "find_element_by_tag_name", "(", "'img'", ")", "\n", "# now lets get full image!!!", "\n", "self", ".", "browser", ".", "execute_script", "(", "\"arguments[0].setAttribute('class','overflowingVertical')\"", ",", "img", ")", "\n", "self", ".", "browser", ".", "execute_script", "(", "\"arguments[0].removeAttribute('width','')\"", ",", "img", ")", "\n", "self", ".", "browser", ".", "execute_script", "(", "\"arguments[0].removeAttribute('height','')\"", ",", "img", ")", "\n", "\n", "img", ".", "screenshot", "(", "file_path", ")", "\n", "randdelay", "(", "3", ",", "5", ")", "\n", "", "except", ":", "\n", "# Close current window", "\n", "                            ", "self", ".", "browser", ".", "close", "(", ")", "\n", "# get back to prev window!!!", "\n", "windows", "=", "self", ".", "browser", ".", "window_handles", "\n", "self", ".", "browser", ".", "switch_to", ".", "window", "(", "windows", "[", "1", "]", ")", "\n", "break", "# break from the loop", "\n", "\n", "# Close current window", "\n", "", "self", ".", "browser", ".", "close", "(", ")", "\n", "\n", "# get back to prev window!!!", "\n", "windows", "=", "self", ".", "browser", ".", "window_handles", "\n", "self", ".", "browser", ".", "switch_to", ".", "window", "(", "windows", "[", "1", "]", ")", "\n", "\n", "# now we can return our book!!", "\n", "", "self", ".", "browser", ".", "find_element_by_link_text", "(", "\"Return Book\"", ")", ".", "click", "(", ")", "\n", "randdelay", "(", "1", ",", "2", ")", "\n", "# close float tab, and go back to main window", "\n", "try", ":", "\n", "                        ", "return_button", "=", "self", ".", "browser", ".", "find_element_by_xpath", "(", "\"//div[@id='colorbox']//div[@id='cboxWrapper']//div[@id='cboxContent']//div[@id='cboxLoadedContent']//div[@class='center BRfloat']//div[@class='center BRfloatFoot']//button[@class='action red']\"", ")", "\n", "return_button", ".", "click", "(", ")", "\n", "randdelay", "(", "8", ",", "11", ")", "\n", "# Close current window", "\n", "self", ".", "browser", ".", "close", "(", ")", "\n", "# Put focus back on main window", "\n", "self", ".", "browser", ".", "switch_to", ".", "window", "(", "main_window", ")", "\n", "", "except", ":", "\n", "                        ", "print", "(", "\"no return button\"", ")", "\n", "\n", "", "randdelay", "(", "3", ",", "5", ")", "\n", "", "except", ":", "\n", "# Close current window", "\n", "                    ", "self", ".", "close", "(", ")", "\n", "# Put focus back on main window", "\n", "self", ".", "browser", ".", "switch_to", ".", "window", "(", "main_window", ")", "\n", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close": [[250, 252], ["scraper_openlibrary.OpenLibHelper.browser.close"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close"], ["", "", "", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "browser", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.randdelay": [[15, 17], ["time.sleep", "random.uniform"], "function", ["None"], ["def", "randdelay", "(", "a", ",", "b", ")", ":", "\n", "    ", "time", ".", "sleep", "(", "random", ".", "uniform", "(", "a", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.u_to_s": [[19, 21], ["unicodedata.normalize().encode", "unicodedata.normalize"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.normalize"], ["", "def", "u_to_s", "(", "uni", ")", ":", "\n", "    ", "return", "unicodedata", ".", "normalize", "(", "'NFKD'", ",", "uni", ")", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.make_dataset_aligned.get_file_paths": [[6, 18], ["os.walk", "sorted", "os.path.abspath", "os.path.join", "filename.endswith", "filename.endswith", "image_file_paths.append"], "function", ["None"], ["def", "get_file_paths", "(", "folder", ")", ":", "\n", "    ", "image_file_paths", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "folder", ")", ":", "\n", "        ", "filenames", "=", "sorted", "(", "filenames", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "input_path", "=", "os", ".", "path", ".", "abspath", "(", "root", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "input_path", ",", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "'.png'", ")", "or", "filename", ".", "endswith", "(", "'.jpg'", ")", ":", "\n", "                ", "image_file_paths", ".", "append", "(", "file_path", ")", "\n", "\n", "", "", "break", "# prevent descending into subfolders", "\n", "", "return", "image_file_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.make_dataset_aligned.align_images": [[20, 33], ["range", "os.path.exists", "os.makedirs", "len", "PIL.Image.open", "PIL.Image.open", "PIL.Image.new", "Image.new.paste", "Image.new.paste", "Image.new.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["", "def", "align_images", "(", "a_file_paths", ",", "b_file_paths", ",", "target_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "target_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "target_path", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "a_file_paths", ")", ")", ":", "\n", "        ", "img_a", "=", "Image", ".", "open", "(", "a_file_paths", "[", "i", "]", ")", "\n", "img_b", "=", "Image", ".", "open", "(", "b_file_paths", "[", "i", "]", ")", "\n", "assert", "(", "img_a", ".", "size", "==", "img_b", ".", "size", ")", "\n", "\n", "aligned_image", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "(", "img_a", ".", "size", "[", "0", "]", "*", "2", ",", "img_a", ".", "size", "[", "1", "]", ")", ")", "\n", "aligned_image", ".", "paste", "(", "img_a", ",", "(", "0", ",", "0", ")", ")", "\n", "aligned_image", ".", "paste", "(", "img_b", ",", "(", "img_a", ".", "size", "[", "0", "]", ",", "0", ")", ")", "\n", "aligned_image", ".", "save", "(", "os", ".", "path", ".", "join", "(", "target_path", ",", "'{:04d}.jpg'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.scripts.test_before_push.run": [[7, 12], ["print", "os.system", "exit"], "function", ["None"], ["def", "run", "(", "command", ")", ":", "\n", "    ", "print", "(", "command", ")", "\n", "exit_status", "=", "os", ".", "system", "(", "command", ")", "\n", "if", "exit_status", ">", "0", ":", "\n", "        ", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.scripts.pre_pro_dataset.load_images_from_folder": [[16, 27], ["os.listdir", "imageio.imread", "os.path.join", "imageio.imwrite", "imageio.imwrite"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir"], ["def", "load_images_from_folder", "(", "folder", ",", "folder_a", ",", "folder_b", ")", ":", "\n", "\n", "    ", "for", "filename", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "\n", "        ", "img", "=", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "# h,w = img.shape[0], img.shape[1]", "\n", "            ", "imgA", "=", "img", "[", ":", ",", ":", "256", "]", "\n", "imgB", "=", "img", "[", ":", ",", "256", ":", "]", "\n", "imageio", ".", "imwrite", "(", "folder_a", "+", "'\\\\'", "+", "filename", ",", "imgA", ")", "\n", "imageio", ".", "imwrite", "(", "folder_b", "+", "'\\\\'", "+", "filename", ",", "imgB", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.scripts.pre_pro_dataset2.load_images_from_folder": [[20, 35], ["os.listdir", "os.listdir", "PIL.Image.open", "os.path.join", "Image.open.resize", "img.resize.save", "str"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["def", "load_images_from_folder", "(", "parent_folder", ",", "folder_a", ")", ":", "\n", "    ", "dest_img_name", "=", "0", "\n", "for", "folder", "in", "os", ".", "listdir", "(", "parent_folder", ")", ":", "\n", "        ", "book_folder", "=", "parent_folder", "+", "'\\\\'", "+", "folder", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "book_folder", ")", ":", "\n", "\n", "# img = imageio.imread(os.path.join(folder,filename))", "\n", "            ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "book_folder", ",", "filename", ")", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "# h,w = img.shape[0], img.shape[1]", "\n", "                ", "imgA", "=", "img", ".", "resize", "(", "(", "256", ",", "256", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "# imageio.imwrite(folder_a+'\\\\' + str(dest_img_name), imgA)", "\n", "imgA", ".", "save", "(", "folder_a", "+", "'\\\\'", "+", "str", "(", "dest_img_name", ")", "+", "'.png'", ")", "\n", "dest_img_name", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.scripts.pre_pro_dataset3.load_images_from_folder": [[20, 37], ["os.listdir", "os.listdir", "os.listdir", "PIL.Image.open", "os.path.join", "Image.open.resize", "img.resize.save", "str"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["def", "load_images_from_folder", "(", "parent_folder", ",", "folder_a", ")", ":", "\n", "    ", "dest_img_name", "=", "0", "\n", "for", "folder", "in", "os", ".", "listdir", "(", "parent_folder", ")", ":", "\n", "        ", "illustrator_folder", "=", "parent_folder", "+", "'\\\\'", "+", "folder", "\n", "for", "book", "in", "os", ".", "listdir", "(", "illustrator_folder", ")", ":", "\n", "            ", "book_folder", "=", "illustrator_folder", "+", "'\\\\'", "+", "book", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "book_folder", ")", ":", "\n", "\n", "# img = imageio.imread(os.path.join(folder,filename))", "\n", "                ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "book_folder", ",", "filename", ")", ")", "\n", "if", "img", "is", "not", "None", ":", "\n", "# h,w = img.shape[0], img.shape[1]", "\n", "                    ", "imgA", "=", "img", ".", "resize", "(", "(", "256", ",", "256", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "# imageio.imwrite(folder_a+'\\\\' + str(dest_img_name), imgA)", "\n", "imgA", ".", "save", "(", "folder_a", "+", "'\\\\'", "+", "str", "(", "dest_img_name", ")", "+", "'.png'", ")", "\n", "dest_img_name", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.evaluate.main": [[22, 70], ["cityscapes.cityscapes", "len", "cityscapes.cityscapes.list_label_frames", "numpy.zeros", "enumerate", "util.get_scores", "os.path.isdir", "os.makedirs", "caffe.set_device", "caffe.set_mode_gpu", "caffe.Net", "cityscapes.cityscapes.load_label", "numpy.array", "scipy.misc.imresize", "util.fast_hist", "open", "f.write", "f.write", "f.write", "f.write", "enumerate", "os.path.isdir", "os.makedirs", "print", "idx.split", "PIL.Image.open", "util.segrun", "CS.load_label.flatten", "util.segrun.flatten", "cityscapes.cityscapes.palette", "cityscapes.cityscapes.palette", "scipy.misc.imsave", "scipy.misc.imsave", "scipy.misc.imsave", "f.write", "cityscapes.cityscapes.preprocess", "len", "len", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.list_label_frames", "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.get_scores", "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.load_label", "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.fast_hist", "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.segrun", "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.palette", "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.palette", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.preprocess"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ")", "\n", "", "if", "args", ".", "save_output_images", ">", "0", ":", "\n", "        ", "output_image_dir", "=", "args", ".", "output_dir", "+", "'image_outputs/'", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_image_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_image_dir", ")", "\n", "", "", "CS", "=", "cityscapes", "(", "args", ".", "cityscapes_dir", ")", "\n", "n_cl", "=", "len", "(", "CS", ".", "classes", ")", "\n", "label_frames", "=", "CS", ".", "list_label_frames", "(", "args", ".", "split", ")", "\n", "if", "args", ".", "run_seg", ":", "\n", "        ", "caffe", ".", "set_device", "(", "args", ".", "gpu_id", ")", "\n", "caffe", ".", "set_mode_gpu", "(", ")", "\n", "net", "=", "caffe", ".", "Net", "(", "args", ".", "caffemodel_dir", "+", "'deploy.prototxt'", ",", "\n", "args", ".", "caffemodel_dir", "+", "'fcn-8s-cityscapes.caffemodel'", ",", "\n", "caffe", ".", "TEST", ")", "\n", "\n", "", "hist_perframe", "=", "np", ".", "zeros", "(", "(", "n_cl", ",", "n_cl", ")", ")", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "label_frames", ")", ":", "\n", "        ", "if", "i", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Evaluating: %d/%d'", "%", "(", "i", ",", "len", "(", "label_frames", ")", ")", ")", "\n", "", "city", "=", "idx", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "# idx is city_shot_frame", "\n", "label", "=", "CS", ".", "load_label", "(", "args", ".", "split", ",", "city", ",", "idx", ")", "\n", "im_file", "=", "args", ".", "result_dir", "+", "'/'", "+", "idx", "+", "'_leftImg8bit.png'", "\n", "im", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "im_file", ")", ")", "\n", "# im = scipy.misc.imresize(im, (256, 256))", "\n", "im", "=", "scipy", ".", "misc", ".", "imresize", "(", "im", ",", "(", "label", ".", "shape", "[", "1", "]", ",", "label", ".", "shape", "[", "2", "]", ")", ")", "\n", "if", "args", ".", "run_seg", ":", "\n", "            ", "out", "=", "segrun", "(", "net", ",", "CS", ".", "preprocess", "(", "im", ")", ")", "\n", "", "hist_perframe", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "out", ".", "flatten", "(", ")", ",", "n_cl", ")", "\n", "if", "args", ".", "save_output_images", ">", "0", ":", "\n", "            ", "label_im", "=", "CS", ".", "palette", "(", "label", ")", "\n", "pred_im", "=", "CS", ".", "palette", "(", "out", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "output_image_dir", "+", "'/'", "+", "str", "(", "i", ")", "+", "'_pred.jpg'", ",", "pred_im", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "output_image_dir", "+", "'/'", "+", "str", "(", "i", ")", "+", "'_gt.jpg'", ",", "label_im", ")", "\n", "scipy", ".", "misc", ".", "imsave", "(", "output_image_dir", "+", "'/'", "+", "str", "(", "i", ")", "+", "'_input.jpg'", ",", "im", ")", "\n", "\n", "", "", "mean_pixel_acc", ",", "mean_class_acc", ",", "mean_class_iou", ",", "per_class_acc", ",", "per_class_iou", "=", "get_scores", "(", "hist_perframe", ")", "\n", "with", "open", "(", "args", ".", "output_dir", "+", "'/evaluation_results.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'Mean pixel accuracy: %f\\n'", "%", "mean_pixel_acc", ")", "\n", "f", ".", "write", "(", "'Mean class accuracy: %f\\n'", "%", "mean_class_acc", ")", "\n", "f", ".", "write", "(", "'Mean class IoU: %f\\n'", "%", "mean_class_iou", ")", "\n", "f", ".", "write", "(", "'************ Per class numbers below ************\\n'", ")", "\n", "for", "i", ",", "cl", "in", "enumerate", "(", "CS", ".", "classes", ")", ":", "\n", "            ", "while", "len", "(", "cl", ")", "<", "15", ":", "\n", "                ", "cl", "=", "cl", "+", "' '", "\n", "", "f", ".", "write", "(", "'%s: acc = %f, iou = %f\\n'", "%", "(", "cl", ",", "per_class_acc", "[", "i", "]", ",", "per_class_iou", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.__init__": [[10, 23], ["numpy.array", "sys.path.insert", "__import__"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ")", ":", "\n", "# data_path something like /data2/cityscapes", "\n", "        ", "self", ".", "dir", "=", "data_path", "\n", "self", ".", "classes", "=", "[", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "\n", "'pole'", ",", "'traffic light'", ",", "'traffic sign'", ",", "'vegetation'", ",", "'terrain'", ",", "\n", "'sky'", ",", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "\n", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "'bicycle'", "]", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "(", "72.78044", ",", "83.21195", ",", "73.45286", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# import cityscapes label helper and set up label mappings", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "'{}/scripts/helpers/'", ".", "format", "(", "self", ".", "dir", ")", ")", "\n", "labels", "=", "__import__", "(", "'labels'", ")", "\n", "self", ".", "id2trainId", "=", "{", "label", ".", "id", ":", "label", ".", "trainId", "for", "label", "in", "labels", ".", "labels", "}", "# dictionary mapping from raw IDs to train IDs", "\n", "self", ".", "trainId2color", "=", "{", "label", ".", "trainId", ":", "label", ".", "color", "for", "label", "in", "labels", ".", "labels", "}", "# dictionary mapping train IDs to colors as 3-tuples", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.get_dset": [[24, 36], ["open().read().splitlines", "open().read().splitlines", "open().read", "open().read", "item.split", "item.split", "open", "open"], "methods", ["None"], ["", "def", "get_dset", "(", "self", ",", "split", ")", ":", "\n", "        ", "'''\n        List images as (city, id) for the specified split\n\n        TODO(shelhamer) generate splits from cityscapes itself, instead of\n        relying on these separately made text files.\n        '''", "\n", "if", "split", "==", "'train'", ":", "\n", "            ", "dataset", "=", "open", "(", "'{}/ImageSets/segFine/train.txt'", ".", "format", "(", "self", ".", "dir", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "open", "(", "'{}/ImageSets/segFine/val.txt'", ".", "format", "(", "self", ".", "dir", ")", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "", "return", "[", "(", "item", ".", "split", "(", "'/'", ")", "[", "0", "]", ",", "item", ".", "split", "(", "'/'", ")", "[", "1", "]", ")", "for", "item", "in", "dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.load_image": [[37, 40], ["PIL.Image.open"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "split", ",", "city", ",", "idx", ")", ":", "\n", "        ", "im", "=", "Image", ".", "open", "(", "'{}/leftImg8bit_sequence/{}/{}/{}_leftImg8bit.png'", ".", "format", "(", "self", ".", "dir", ",", "split", ",", "city", ",", "idx", ")", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.assign_trainIds": [[41, 54], ["numpy.array", "cityscapes.cityscapes.id2trainId.iteritems", "cityscapes.cityscapes.id2trainId.items"], "methods", ["None"], ["", "def", "assign_trainIds", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        Map the given label IDs to the train IDs appropriate for training\n        Use the label mapping provided in labels.py from the cityscapes scripts\n        \"\"\"", "\n", "label", "=", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "id2trainId", ".", "iteritems", "(", ")", ":", "\n", "                ", "label", "[", "label", "==", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "id2trainId", ".", "items", "(", ")", ":", "\n", "                ", "label", "[", "label", "==", "k", "]", "=", "v", "\n", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.load_label": [[55, 65], ["PIL.Image.open", "cityscapes.cityscapes.assign_trainIds", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.assign_trainIds"], ["", "def", "load_label", "(", "self", ",", "split", ",", "city", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Load label image as 1 x height x width integer array of label indices.\n        The leading singleton dimension is required by the loss.\n        \"\"\"", "\n", "label", "=", "Image", ".", "open", "(", "'{}/gtFine/{}/{}/{}_gtFine_labelIds.png'", ".", "format", "(", "self", ".", "dir", ",", "split", ",", "city", ",", "idx", ")", ")", "\n", "label", "=", "self", ".", "assign_trainIds", "(", "label", ")", "# get proper labels for eval", "\n", "label", "=", "np", ".", "array", "(", "label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "label", "=", "label", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.preprocess": [[66, 79], ["numpy.array", "in_.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "im", ")", ":", "\n", "        ", "\"\"\"\n        Preprocess loaded image (by load_image) for Caffe:\n        - cast to float\n        - switch channels RGB -> BGR\n        - subtract mean\n        - transpose to channel x height x width order\n        \"\"\"", "\n", "in_", "=", "np", ".", "array", "(", "im", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "in_", "=", "in_", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "in_", "-=", "self", ".", "mean", "\n", "in_", "=", "in_", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "in_", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.palette": [[80, 94], ["numpy.empty", "cityscapes.cityscapes.trainId2color.iteritems", "cityscapes.cityscapes.trainId2color.items"], "methods", ["None"], ["", "def", "palette", "(", "self", ",", "label", ")", ":", "\n", "        ", "'''\n        Map trainIds to colors as specified in labels.py\n        '''", "\n", "if", "label", ".", "ndim", "==", "3", ":", "\n", "            ", "label", "=", "label", "[", "0", "]", "\n", "", "color", "=", "np", ".", "empty", "(", "(", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "trainId2color", ".", "iteritems", "(", ")", ":", "\n", "                ", "color", "[", "label", "==", "k", ",", ":", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "trainId2color", ".", "items", "(", ")", ":", "\n", "                ", "color", "[", "label", "==", "k", ",", ":", "]", "=", "v", "\n", "", "", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.make_boundaries": [[95, 109], ["skm.disk", "numpy.logical_xor", "numpy.logical_and", "skm.dilation", "skm.erosion"], "methods", ["None"], ["", "def", "make_boundaries", "(", "label", ",", "thickness", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Input is an image label, output is a numpy array mask encoding the boundaries of the objects\n        Extract pixels at the true boundary by dilation - erosion of label.\n        Don't just pick the void label as it is not exclusive to the boundaries.\n        \"\"\"", "\n", "assert", "(", "thickness", "is", "not", "None", ")", "\n", "import", "skimage", ".", "morphology", "as", "skm", "\n", "void", "=", "255", "\n", "mask", "=", "np", ".", "logical_and", "(", "label", ">", "0", ",", "label", "!=", "void", ")", "[", "0", "]", "\n", "selem", "=", "skm", ".", "disk", "(", "thickness", ")", "\n", "boundaries", "=", "np", ".", "logical_xor", "(", "skm", ".", "dilation", "(", "mask", ",", "selem", ")", ",", "\n", "skm", ".", "erosion", "(", "mask", ",", "selem", ")", ")", "\n", "return", "boundaries", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.list_label_frames": [[110, 125], ["os.path.basename", "sorted", "frames.extend", "os.path.basename().split", "glob.glob", "glob.glob", "cityscapes.cityscapes.list_label_frames.file2idx"], "methods", ["None"], ["", "def", "list_label_frames", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        Select labeled frames from a split for evaluation\n        collected as (city, shot, idx) tuples\n        \"\"\"", "\n", "def", "file2idx", "(", "f", ")", ":", "\n", "            ", "\"\"\"Helper to convert file path into frame ID\"\"\"", "\n", "city", ",", "shot", ",", "frame", "=", "(", "os", ".", "path", ".", "basename", "(", "f", ")", ".", "split", "(", "'_'", ")", "[", ":", "3", "]", ")", "\n", "return", "\"_\"", ".", "join", "(", "[", "city", ",", "shot", ",", "frame", "]", ")", "\n", "", "frames", "=", "[", "]", "\n", "cities", "=", "[", "os", ".", "path", ".", "basename", "(", "f", ")", "for", "f", "in", "glob", ".", "glob", "(", "'{}/gtFine/{}/*'", ".", "format", "(", "self", ".", "dir", ",", "split", ")", ")", "]", "\n", "for", "c", "in", "cities", ":", "\n", "            ", "files", "=", "sorted", "(", "glob", ".", "glob", "(", "'{}/gtFine/{}/{}/*labelIds.png'", ".", "format", "(", "self", ".", "dir", ",", "split", ",", "c", ")", ")", ")", "\n", "frames", ".", "extend", "(", "[", "file2idx", "(", "f", ")", "for", "f", "in", "files", "]", ")", "\n", "", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.cityscapes.cityscapes.collect_frame_sequence": [[126, 142], ["idx.split", "int", "range", "frame_seq.append", "PIL.Image.open"], "methods", ["None"], ["", "def", "collect_frame_sequence", "(", "self", ",", "split", ",", "idx", ",", "length", ")", ":", "\n", "        ", "\"\"\"\n        Collect sequence of frames preceding (and including) a labeled frame\n        as a list of Images.\n\n        Note: 19 preceding frames are provided for each labeled frame.\n        \"\"\"", "\n", "SEQ_LEN", "=", "length", "\n", "city", ",", "shot", ",", "frame", "=", "idx", ".", "split", "(", "'_'", ")", "\n", "frame", "=", "int", "(", "frame", ")", "\n", "frame_seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "frame", "-", "SEQ_LEN", ",", "frame", "+", "1", ")", ":", "\n", "            ", "frame_path", "=", "'{0}/leftImg8bit_sequence/val/{1}/{1}_{2}_{3:0>6d}_leftImg8bit.png'", ".", "format", "(", "\n", "self", ".", "dir", ",", "city", ",", "shot", ",", "i", ")", "\n", "frame_seq", ".", "append", "(", "Image", ".", "open", "(", "frame_path", ")", ")", "\n", "", "return", "frame_seq", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.get_out_scoremap": [[5, 7], ["net.blobs[].data[].argmax().astype", "net.blobs[].data[].argmax"], "function", ["None"], ["def", "get_out_scoremap", "(", "net", ")", ":", "\n", "    ", "return", "net", ".", "blobs", "[", "'score'", "]", ".", "data", "[", "0", "]", ".", "argmax", "(", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.feed_net": [[9, 15], ["net.blobs[].reshape"], "function", ["None"], ["", "def", "feed_net", "(", "net", ",", "in_", ")", ":", "\n", "    ", "\"\"\"\n    Load prepared input into net.\n    \"\"\"", "\n", "net", ".", "blobs", "[", "'data'", "]", ".", "reshape", "(", "1", ",", "*", "in_", ".", "shape", ")", "\n", "net", ".", "blobs", "[", "'data'", "]", ".", "data", "[", "...", "]", "=", "in_", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.segrun": [[17, 21], ["util.feed_net", "net.forward", "util.get_out_scoremap"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.feed_net", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.get_out_scoremap"], ["", "def", "segrun", "(", "net", ",", "in_", ")", ":", "\n", "    ", "feed_net", "(", "net", ",", "in_", ")", "\n", "net", ".", "forward", "(", ")", "\n", "return", "get_out_scoremap", "(", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.fast_hist": [[23, 30], ["numpy.bincount", "np.bincount.reshape", "numpy.where", "len", "a[].astype"], "function", ["None"], ["", "def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "np", ".", "where", "(", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", ")", "[", "0", "]", "\n", "bc", "=", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", "\n", "if", "len", "(", "bc", ")", "!=", "n", "**", "2", ":", "\n", "# ignore this example if dimension mismatch", "\n", "        ", "return", "0", "\n", "", "return", "bc", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.eval_cityscapes.util.get_scores": [[32, 43], ["numpy.diag().sum", "numpy.diag", "numpy.diag", "numpy.nanmean", "numpy.nanmean", "hist.sum", "hist.sum", "numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "get_scores", "(", "hist", ")", ":", "\n", "# Mean pixel accuracy", "\n", "    ", "acc", "=", "np", ".", "diag", "(", "hist", ")", ".", "sum", "(", ")", "/", "(", "hist", ".", "sum", "(", ")", "+", "1e-12", ")", "\n", "\n", "# Per class accuracy", "\n", "cl_acc", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "1e-12", ")", "\n", "\n", "# Per class IoU", "\n", "iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", "+", "1e-12", ")", "\n", "\n", "return", "acc", ",", "np", ".", "nanmean", "(", "cl_acc", ")", ",", "np", ".", "nanmean", "(", "iu", ")", ",", "cl_acc", ",", "iu", "\n", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.edges.batch_hed.parse_args": [[20, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.edges.batch_hed.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'batch proccesing: photos->edges'", ")", "\n", "parser", ".", "add_argument", "(", "'--caffe_root'", ",", "dest", "=", "'caffe_root'", ",", "help", "=", "'caffe root'", ",", "default", "=", "'../../'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--caffemodel'", ",", "dest", "=", "'caffemodel'", ",", "help", "=", "'caffemodel'", ",", "default", "=", "'./hed_pretrained_bsds.caffemodel'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--prototxt'", ",", "dest", "=", "'prototxt'", ",", "help", "=", "'caffe prototxt file'", ",", "default", "=", "'./deploy.prototxt'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--images_dir'", ",", "dest", "=", "'images_dir'", ",", "help", "=", "'directory to store input photos'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--hed_mat_dir'", ",", "dest", "=", "'hed_mat_dir'", ",", "help", "=", "'directory to store output hed edges in mat file'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--border'", ",", "dest", "=", "'border'", ",", "help", "=", "'padding border'", ",", "type", "=", "int", ",", "default", "=", "128", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "dest", "=", "'gpu_id'", ",", "help", "=", "'gpu id'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.__init__": [[7, 21], ["os.path.join", "dominate.document", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "meta", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "web_dir", ",", "title", ",", "reflesh", "=", "0", ")", ":", "\n", "        ", "self", ".", "title", "=", "title", "\n", "self", ".", "web_dir", "=", "web_dir", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "web_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "web_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "img_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "img_dir", ")", "\n", "# print(self.img_dir)", "\n", "\n", "", "self", ".", "doc", "=", "dominate", ".", "document", "(", "title", "=", "title", ")", "\n", "if", "reflesh", ">", "0", ":", "\n", "            ", "with", "self", ".", "doc", ".", "head", ":", "\n", "                ", "meta", "(", "http_equiv", "=", "\"reflesh\"", ",", "content", "=", "str", "(", "reflesh", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.get_image_dir": [[22, 24], ["None"], "methods", ["None"], ["", "", "", "def", "get_image_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "img_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.add_header": [[25, 28], ["h3"], "methods", ["None"], ["", "def", "add_header", "(", "self", ",", "str", ")", ":", "\n", "        ", "with", "self", ".", "doc", ":", "\n", "            ", "h3", "(", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.add_table": [[29, 32], ["table", "html.HTML.doc.add"], "methods", ["None"], ["", "", "def", "add_table", "(", "self", ",", "border", "=", "1", ")", ":", "\n", "        ", "self", ".", "t", "=", "table", "(", "border", "=", "border", ",", "style", "=", "\"table-layout: fixed;\"", ")", "\n", "self", ".", "doc", ".", "add", "(", "self", ".", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.add_images": [[33, 44], ["html.HTML.add_table", "tr", "zip", "td", "p", "br", "p", "a", "img", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.add_table"], ["", "def", "add_images", "(", "self", ",", "ims", ",", "txts", ",", "links", ",", "width", "=", "400", ")", ":", "\n", "        ", "self", ".", "add_table", "(", ")", "\n", "with", "self", ".", "t", ":", "\n", "            ", "with", "tr", "(", ")", ":", "\n", "                ", "for", "im", ",", "txt", ",", "link", "in", "zip", "(", "ims", ",", "txts", ",", "links", ")", ":", "\n", "                    ", "with", "td", "(", "style", "=", "\"word-wrap: break-word;\"", ",", "halign", "=", "\"center\"", ",", "valign", "=", "\"top\"", ")", ":", "\n", "                        ", "with", "p", "(", ")", ":", "\n", "                            ", "with", "a", "(", "href", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "link", ")", ")", ":", "\n", "                                ", "img", "(", "style", "=", "\"width:%dpx\"", "%", "width", ",", "src", "=", "os", ".", "path", ".", "join", "(", "'images'", ",", "im", ")", ")", "\n", "", "br", "(", ")", "\n", "p", "(", "txt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.save": [[45, 50], ["open", "open.write", "open.close", "html.HTML.doc.render"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close"], ["", "", "", "", "", "", "def", "save", "(", "self", ")", ":", "\n", "        ", "html_file", "=", "'%s/index.html'", "%", "self", ".", "web_dir", "\n", "f", "=", "open", "(", "html_file", ",", "'wt'", ")", "\n", "f", ".", "write", "(", "self", ".", "doc", ".", "render", "(", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.image_pool.ImagePool.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pool_size", ")", ":", "\n", "        ", "self", ".", "pool_size", "=", "pool_size", "\n", "if", "self", ".", "pool_size", ">", "0", ":", "\n", "            ", "self", ".", "num_imgs", "=", "0", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.image_pool.ImagePool.query": [[12, 33], ["torch.cat", "torch.unsqueeze", "image_pool.ImagePool.images.append", "torch.cat.append", "random.uniform", "random.randint", "image_pool.ImagePool.images[].clone", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "", "def", "query", "(", "self", ",", "images", ")", ":", "\n", "        ", "if", "self", ".", "pool_size", "==", "0", ":", "\n", "            ", "return", "images", "\n", "", "return_images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image", "=", "torch", ".", "unsqueeze", "(", "image", ".", "data", ",", "0", ")", "\n", "if", "self", ".", "num_imgs", "<", "self", ".", "pool_size", ":", "\n", "                ", "self", ".", "num_imgs", "=", "self", ".", "num_imgs", "+", "1", "\n", "self", ".", "images", ".", "append", "(", "image", ")", "\n", "return_images", ".", "append", "(", "image", ")", "\n", "", "else", ":", "\n", "                ", "p", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "p", ">", "0.5", ":", "\n", "                    ", "random_id", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "pool_size", "-", "1", ")", "# randint is inclusive", "\n", "tmp", "=", "self", ".", "images", "[", "random_id", "]", ".", "clone", "(", ")", "\n", "self", ".", "images", "[", "random_id", "]", "=", "image", "\n", "return_images", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "return_images", ".", "append", "(", "image", ")", "\n", "", "", "", "return_images", "=", "torch", ".", "cat", "(", "return_images", ",", "0", ")", "\n", "return", "return_images", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.Visualizer.__init__": [[56, 77], ["os.path.join", "visdom.Visdom", "os.path.join", "os.path.join", "print", "util.mkdirs", "open", "time.strftime", "log_file.write"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.mkdirs"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "display_id", "=", "opt", ".", "display_id", "\n", "self", ".", "use_html", "=", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_html", "\n", "self", ".", "win_size", "=", "opt", ".", "display_winsize", "\n", "self", ".", "name", "=", "opt", ".", "name", "\n", "self", ".", "opt", "=", "opt", "\n", "self", ".", "saved", "=", "False", "\n", "if", "self", ".", "display_id", ">", "0", ":", "\n", "            ", "import", "visdom", "\n", "self", ".", "ncols", "=", "opt", ".", "display_ncols", "\n", "self", ".", "vis", "=", "visdom", ".", "Visdom", "(", "server", "=", "opt", ".", "display_server", ",", "port", "=", "opt", ".", "display_port", ",", "env", "=", "opt", ".", "display_env", ",", "raise_exceptions", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "use_html", ":", "\n", "            ", "self", ".", "web_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'web'", ")", "\n", "self", ".", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "web_dir", ",", "'images'", ")", "\n", "print", "(", "'create web directory %s...'", "%", "self", ".", "web_dir", ")", "\n", "util", ".", "mkdirs", "(", "[", "self", ".", "web_dir", ",", "self", ".", "img_dir", "]", ")", "\n", "", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ",", "'loss_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.Visualizer.reset": [[78, 80], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "saved", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.Visualizer.throw_visdom_connection_error": [[81, 84], ["print", "exit"], "methods", ["None"], ["", "def", "throw_visdom_connection_error", "(", "self", ")", ":", "\n", "        ", "print", "(", "'\\n\\nCould not connect to Visdom server (https://github.com/facebookresearch/visdom) for displaying training progress.\\nYou can suppress connection to Visdom using the option --display_id -1. To install visdom, run \\n$ pip install visdom\\n, and start the server by \\n$ python -m visdom.server.\\n\\n'", ")", "\n", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.Visualizer.display_current_results": [[86, 154], ["visuals.items", "html.HTML", "range", "html.HTML.save", "min", "visuals.items", "visuals.items", "util.tensor2im", "os.path.join", "util.save_image", "html.HTML.add_header", "visuals.items", "html.HTML.add_images", "len", "util.tensor2im", "images.append", "numpy.ones_like", "images.append", "visualizer.Visualizer.vis.images", "visualizer.Visualizer.vis.text", "util.tensor2im", "visualizer.Visualizer.vis.image", "util.tensor2im", "ims.append", "txts.append", "links.append", "next", "util.tensor2im.transpose", "util.tensor2im.transpose", "visualizer.Visualizer.throw_visdom_connection_error", "util.tensor2im.transpose", "iter", "dict", "dict", "dict", "visuals.values"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.tensor2im", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.add_header", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.add_images", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.tensor2im", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.tensor2im", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.tensor2im", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.Visualizer.throw_visdom_connection_error"], ["", "def", "display_current_results", "(", "self", ",", "visuals", ",", "epoch", ",", "save_result", ")", ":", "\n", "        ", "if", "self", ".", "display_id", ">", "0", ":", "# show images in the browser", "\n", "            ", "ncols", "=", "self", ".", "ncols", "\n", "if", "ncols", ">", "0", ":", "\n", "                ", "ncols", "=", "min", "(", "ncols", ",", "len", "(", "visuals", ")", ")", "\n", "h", ",", "w", "=", "next", "(", "iter", "(", "visuals", ".", "values", "(", ")", ")", ")", ".", "shape", "[", ":", "2", "]", "\n", "table_css", "=", "\"\"\"<style>\n                        table {border-collapse: separate; border-spacing:4px; white-space:nowrap; text-align:center}\n                        table td {width: %dpx; height: %dpx; padding: 4px; outline: 4px solid black}\n                        </style>\"\"\"", "%", "(", "w", ",", "h", ")", "\n", "title", "=", "self", ".", "name", "\n", "label_html", "=", "''", "\n", "label_html_row", "=", "''", "\n", "images", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "label_html_row", "+=", "'<td>%s</td>'", "%", "label", "\n", "images", ".", "append", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "\n", "idx", "+=", "1", "\n", "if", "idx", "%", "ncols", "==", "0", ":", "\n", "                        ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "label_html_row", "=", "''", "\n", "", "", "white_image", "=", "np", ".", "ones_like", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ")", "*", "255", "\n", "while", "idx", "%", "ncols", "!=", "0", ":", "\n", "                    ", "images", ".", "append", "(", "white_image", ")", "\n", "label_html_row", "+=", "'<td></td>'", "\n", "idx", "+=", "1", "\n", "", "if", "label_html_row", "!=", "''", ":", "\n", "                    ", "label_html", "+=", "'<tr>%s</tr>'", "%", "label_html_row", "\n", "# pane col = image row", "\n", "", "try", ":", "\n", "                    ", "self", ".", "vis", ".", "images", "(", "images", ",", "nrow", "=", "ncols", ",", "win", "=", "self", ".", "display_id", "+", "1", ",", "\n", "padding", "=", "2", ",", "opts", "=", "dict", "(", "title", "=", "title", "+", "' images'", ")", ")", "\n", "label_html", "=", "'<table>%s</table>'", "%", "label_html", "\n", "self", ".", "vis", ".", "text", "(", "table_css", "+", "label_html", ",", "win", "=", "self", ".", "display_id", "+", "2", ",", "\n", "opts", "=", "dict", "(", "title", "=", "title", "+", "' labels'", ")", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "                    ", "self", ".", "throw_visdom_connection_error", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "                ", "idx", "=", "1", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "self", ".", "vis", ".", "image", "(", "image_numpy", ".", "transpose", "(", "[", "2", ",", "0", ",", "1", "]", ")", ",", "opts", "=", "dict", "(", "title", "=", "label", ")", ",", "\n", "win", "=", "self", ".", "display_id", "+", "idx", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "", "if", "self", ".", "use_html", "and", "(", "save_result", "or", "not", "self", ".", "saved", ")", ":", "# save images to a html file", "\n", "            ", "self", ".", "saved", "=", "True", "\n", "for", "label", ",", "image", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_dir", ",", "'epoch%.3d_%s.png'", "%", "(", "epoch", ",", "label", ")", ")", "\n", "util", ".", "save_image", "(", "image_numpy", ",", "img_path", ")", "\n", "# update website", "\n", "", "webpage", "=", "html", ".", "HTML", "(", "self", ".", "web_dir", ",", "'Experiment name = %s'", "%", "self", ".", "name", ",", "reflesh", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "epoch", ",", "0", ",", "-", "1", ")", ":", "\n", "                ", "webpage", ".", "add_header", "(", "'epoch [%d]'", "%", "n", ")", "\n", "ims", ",", "txts", ",", "links", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                    ", "image_numpy", "=", "util", ".", "tensor2im", "(", "image", ")", "\n", "img_path", "=", "'epoch%.3d_%s.png'", "%", "(", "n", ",", "label", ")", "\n", "ims", ".", "append", "(", "img_path", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "img_path", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "self", ".", "win_size", ")", "\n", "", "webpage", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.Visualizer.plot_current_losses": [[156, 173], ["visualizer.Visualizer.plot_data[].append", "visualizer.Visualizer.plot_data[].append", "hasattr", "visualizer.Visualizer.vis.line", "list", "visualizer.Visualizer.throw_visdom_connection_error", "losses.keys", "numpy.stack", "numpy.array", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.Visualizer.throw_visdom_connection_error"], ["", "", "def", "plot_current_losses", "(", "self", ",", "epoch", ",", "counter_ratio", ",", "opt", ",", "losses", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'plot_data'", ")", ":", "\n", "            ", "self", ".", "plot_data", "=", "{", "'X'", ":", "[", "]", ",", "'Y'", ":", "[", "]", ",", "'legend'", ":", "list", "(", "losses", ".", "keys", "(", ")", ")", "}", "\n", "", "self", ".", "plot_data", "[", "'X'", "]", ".", "append", "(", "epoch", "+", "counter_ratio", ")", "\n", "self", ".", "plot_data", "[", "'Y'", "]", ".", "append", "(", "[", "losses", "[", "k", "]", "for", "k", "in", "self", ".", "plot_data", "[", "'legend'", "]", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "vis", ".", "line", "(", "\n", "X", "=", "np", ".", "stack", "(", "[", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'X'", "]", ")", "]", "*", "len", "(", "self", ".", "plot_data", "[", "'legend'", "]", ")", ",", "1", ")", ",", "\n", "Y", "=", "np", ".", "array", "(", "self", ".", "plot_data", "[", "'Y'", "]", ")", ",", "\n", "opts", "=", "{", "\n", "'title'", ":", "self", ".", "name", "+", "' loss over time'", ",", "\n", "'legend'", ":", "self", ".", "plot_data", "[", "'legend'", "]", ",", "\n", "'xlabel'", ":", "'epoch'", ",", "\n", "'ylabel'", ":", "'loss'", "}", ",", "\n", "win", "=", "self", ".", "display_id", ")", "\n", "", "except", "VisdomExceptionBase", ":", "\n", "            ", "self", ".", "throw_visdom_connection_error", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.Visualizer.print_current_losses": [[175, 183], ["losses.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "", "def", "print_current_losses", "(", "self", ",", "epoch", ",", "i", ",", "losses", ",", "t", ",", "t_data", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d, time: %.3f, data: %.3f) '", "%", "(", "epoch", ",", "i", ",", "t", ",", "t_data", ")", "\n", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.visualizer.save_images": [[17, 53], ["webpage.get_image_dir", "ntpath.basename", "os.path.basename", "webpage.add_header", "visuals.items", "webpage.add_images", "os.path.splitext", "os.path.dirname", "os.path.exists", "os.makedirs", "util.tensor2im", "os.path.join", "util.save_image", "ims.append", "txts.append", "links.append", "os.path.join", "os.path.join", "scipy.misc.imresize", "scipy.misc.imresize", "scipy.misc.imresize", "os.path.splitext", "int", "int"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.get_image_dir", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.add_header", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.html.HTML.add_images", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.tensor2im", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image"], ["", "def", "save_images", "(", "webpage", ",", "visuals", ",", "image_path", ",", "aspect_ratio", "=", "1.0", ",", "width", "=", "256", ",", "f_name", "=", "\"\"", ",", "citysc", "=", "False", ")", ":", "\n", "    ", "image_dir", "=", "webpage", ".", "get_image_dir", "(", ")", "\n", "short_path", "=", "ntpath", ".", "basename", "(", "image_path", "[", "0", "]", ")", "\n", "name", "=", "os", ".", "path", ".", "splitext", "(", "short_path", ")", "[", "0", "]", "\n", "# content ve stil testlerini yapmak icin ben ekledim!!!", "\n", "aaa", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "image_path", "[", "0", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "aaa", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "aaa", ")", ")", "\n", "\n", "", "webpage", ".", "add_header", "(", "name", ")", "\n", "ims", ",", "txts", ",", "links", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "label", ",", "im_data", "in", "visuals", ".", "items", "(", ")", ":", "\n", "        ", "im", "=", "util", ".", "tensor2im", "(", "im_data", ")", "\n", "# if label == \"real_A\":", "\n", "#     continue", "\n", "\n", "# image_name = '%s.png' % (name)", "\n", "# image_name = f_name # cityscape icin eklendi", "\n", "if", "citysc", ":", "\n", "            ", "im", "=", "imresize", "(", "im", ",", "(", "1024", ",", "2048", ")", ")", "# cityscape icin eklendi", "\n", "image_name", "=", "os", ".", "path", ".", "splitext", "(", "f_name", ")", "[", "0", "]", "+", "\".png\"", "# cityscape icin eklendi", "\n", "", "else", ":", "\n", "            ", "image_name", "=", "'%s_%s.png'", "%", "(", "name", ",", "label", ")", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_name", ")", "\n", "h", ",", "w", ",", "_", "=", "im", ".", "shape", "\n", "if", "aspect_ratio", ">", "1.0", ":", "\n", "            ", "im", "=", "imresize", "(", "im", ",", "(", "h", ",", "int", "(", "w", "*", "aspect_ratio", ")", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "", "if", "aspect_ratio", "<", "1.0", ":", "\n", "            ", "im", "=", "imresize", "(", "im", ",", "(", "int", "(", "h", "/", "aspect_ratio", ")", ",", "w", ")", ",", "interp", "=", "'bicubic'", ")", "\n", "", "util", ".", "save_image", "(", "im", ",", "save_path", ")", "\n", "\n", "ims", ".", "append", "(", "image_name", ")", "\n", "txts", ".", "append", "(", "label", ")", "\n", "links", ".", "append", "(", "image_name", ")", "\n", "", "webpage", ".", "add_images", "(", "ims", ",", "txts", ",", "links", ",", "width", "=", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData.__init__": [[29, 36], ["url_dict.get", "technique.lower"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData.get"], ["def", "__init__", "(", "self", ",", "technique", "=", "'cyclegan'", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "url_dict", "=", "{", "\n", "'pix2pix'", ":", "'https://people.eecs.berkeley.edu/~tinghuiz/projects/pix2pix/datasets'", ",", "\n", "'cyclegan'", ":", "'https://people.eecs.berkeley.edu/~taesung_park/CycleGAN/datasets'", "\n", "}", "\n", "self", ".", "url", "=", "url_dict", ".", "get", "(", "technique", ".", "lower", "(", ")", ")", "\n", "self", ".", "_verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._print": [[37, 40], ["print"], "methods", ["None"], ["", "def", "_print", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "_verbose", ":", "\n", "            ", "print", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._get_options": [[41, 47], ["bs4.BeautifulSoup", "bs4.BeautifulSoup.find_all", "h.text.endswith"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_get_options", "(", "r", ")", ":", "\n", "        ", "soup", "=", "BeautifulSoup", "(", "r", ".", "text", ",", "'lxml'", ")", "\n", "options", "=", "[", "h", ".", "text", "for", "h", "in", "soup", ".", "find_all", "(", "'a'", ",", "href", "=", "True", ")", "\n", "if", "h", ".", "text", ".", "endswith", "(", "(", "'.zip'", ",", "'tar.gz'", ")", ")", "]", "\n", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._present_options": [[48, 57], ["requests.get", "get_data.GetData._get_options", "print", "enumerate", "input", "print", "int"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData.get", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._get_options"], ["", "def", "_present_options", "(", "self", ")", ":", "\n", "        ", "r", "=", "requests", ".", "get", "(", "self", ".", "url", ")", "\n", "options", "=", "self", ".", "_get_options", "(", "r", ")", "\n", "print", "(", "'Options:\\n'", ")", "\n", "for", "i", ",", "o", "in", "enumerate", "(", "options", ")", ":", "\n", "            ", "print", "(", "\"{0}: {1}\"", ".", "format", "(", "i", ",", "o", ")", ")", "\n", "", "choice", "=", "input", "(", "\"\\nPlease enter the number of the \"", "\n", "\"dataset above you wish to download:\"", ")", "\n", "return", "options", "[", "int", "(", "choice", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._download_data": [[58, 80], ["os.path.basename", "os.path.join", "os.path.basename.endswith", "get_data.GetData._print", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.isdir", "os.makedirs", "open", "requests.get", "f.write", "tarfile.open", "os.path.basename.endswith", "zipfile.ZipFile", "ValueError"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._print", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData.get"], ["", "def", "_download_data", "(", "self", ",", "dataset_url", ",", "save_path", ")", ":", "\n", "        ", "if", "not", "isdir", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "base", "=", "basename", "(", "dataset_url", ")", "\n", "temp_save_path", "=", "join", "(", "save_path", ",", "base", ")", "\n", "\n", "with", "open", "(", "temp_save_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "r", "=", "requests", ".", "get", "(", "dataset_url", ")", "\n", "f", ".", "write", "(", "r", ".", "content", ")", "\n", "\n", "", "if", "base", ".", "endswith", "(", "'.tar.gz'", ")", ":", "\n", "            ", "obj", "=", "tarfile", ".", "open", "(", "temp_save_path", ")", "\n", "", "elif", "base", ".", "endswith", "(", "'.zip'", ")", ":", "\n", "            ", "obj", "=", "ZipFile", "(", "temp_save_path", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown File Type: {0}.\"", ".", "format", "(", "base", ")", ")", "\n", "\n", "", "self", ".", "_print", "(", "\"Unpacking Data...\"", ")", "\n", "obj", ".", "extractall", "(", "save_path", ")", "\n", "obj", ".", "close", "(", ")", "\n", "os", ".", "remove", "(", "temp_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData.get": [[81, 116], ["os.path.join", "os.path.isdir", "os.path.abspath", "get_data.GetData._present_options", "warnings.warn", "get_data.GetData._print", "get_data.GetData._download_data", "get_data.GetData.split"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._present_options", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._print", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.get_data.GetData._download_data"], ["", "def", "get", "(", "self", ",", "save_path", ",", "dataset", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Download a dataset.\n\n        Args:\n            save_path : str\n                A directory to save the data to.\n            dataset : str, optional\n                A specific dataset to download.\n                Note: this must include the file extension.\n                If None, options will be presented for you\n                to choose from.\n\n        Returns:\n            save_path_full : str\n                The absolute path to the downloaded data.\n\n        \"\"\"", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "selected_dataset", "=", "self", ".", "_present_options", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_dataset", "=", "dataset", "\n", "\n", "", "save_path_full", "=", "join", "(", "save_path", ",", "selected_dataset", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "\n", "if", "isdir", "(", "save_path_full", ")", ":", "\n", "            ", "warn", "(", "\"\\n'{0}' already exists. Voiding Download.\"", ".", "format", "(", "\n", "save_path_full", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_print", "(", "'Downloading Data...'", ")", "\n", "url", "=", "\"{0}/{1}\"", ".", "format", "(", "self", ".", "url", ",", "selected_dataset", ")", "\n", "self", ".", "_download_data", "(", "url", ",", "save_path", "=", "save_path", ")", "\n", "\n", "", "return", "abspath", "(", "save_path_full", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.tensor2im": [[10, 20], ["isinstance", "image_tensor[].cpu().float().numpy", "np.tile.astype", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["    ", "\"\"\"\n    Load prepared input into net.\n    \"\"\"", "\n", "net", ".", "blobs", "[", "'data'", "]", ".", "reshape", "(", "1", ",", "*", "in_", ".", "shape", ")", "\n", "net", ".", "blobs", "[", "'data'", "]", ".", "data", "[", "...", "]", "=", "in_", "\n", "\n", "\n", "", "def", "segrun", "(", "net", ",", "in_", ")", ":", "\n", "    ", "feed_net", "(", "net", ",", "in_", ")", "\n", "net", ".", "forward", "(", ")", "\n", "return", "get_out_scoremap", "(", "net", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.diagnose_network": [[22, 33], ["net.parameters", "print", "print", "torch.mean", "torch.abs"], "function", ["None"], ["\n", "", "def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "np", ".", "where", "(", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", ")", "[", "0", "]", "\n", "bc", "=", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", "\n", "if", "len", "(", "bc", ")", "!=", "n", "**", "2", ":", "\n", "# ignore this example if dimension mismatch", "\n", "        ", "return", "0", "\n", "", "return", "bc", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n", "\n", "", "def", "get_scores", "(", "hist", ")", ":", "\n", "# Mean pixel accuracy", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.save_image": [[35, 38], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["\n", "# Per class accuracy", "\n", "cl_acc", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.print_numpy": [[40, 48], ["x.flatten.astype", "print", "x.flatten.flatten", "print", "numpy.mean", "numpy.min", "numpy.max", "numpy.median", "numpy.std"], "function", ["None"], ["iu", "=", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", "+", "1e-12", ")", "\n", "\n", "return", "acc", ",", "np", ".", "nanmean", "(", "cl_acc", ")", ",", "np", ".", "nanmean", "(", "iu", ")", ",", "cl_acc", ",", "iu", "\n", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.mkdirs": [[50, 56], ["isinstance", "util.mkdir", "isinstance", "util.mkdir"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.mkdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.mkdir"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.mkdir": [[58, 61], ["os.path.exists", "os.makedirs"], "function", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.GANLoss.__init__": [[137, 145], ["torch.Module.__init__", "networks.GANLoss.register_buffer", "networks.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.GANLoss.get_target_tensor": [[146, 152], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.GANLoss.__call__": [[153, 156], ["networks.GANLoss.get_target_tensor", "networks.GANLoss.loss"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResnetGenerator.__init__": [[163, 205], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "networks.ResnetBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "assert", "(", "n_blocks", ">=", "0", ")", "\n", "super", "(", "ResnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_nc", "=", "input_nc", "\n", "self", ".", "output_nc", "=", "output_nc", "\n", "self", ".", "ngf", "=", "ngf", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResnetGenerator.forward": [[206, 208], ["networks.ResnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResnetBlock.__init__": [[212, 215], ["torch.Module.__init__", "networks.ResnetBlock.build_conv_block"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResnetBlock.build_conv_block"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResnetBlock.build_conv_block": [[216, 247], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "torch.ReplicationPad2d", "NotImplementedError"], "methods", ["None"], ["", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "if", "use_dropout", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "\n", "", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResnetBlock.forward": [[248, 251], ["networks.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.UnetGenerator.__init__": [[258, 272], ["torch.Module.__init__", "networks.UnetSkipConnectionBlock", "range", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock", "networks.UnetSkipConnectionBlock"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n", "self", ".", "model", "=", "unet_block", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.UnetGenerator.forward": [[273, 275], ["networks.UnetGenerator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.UnetSkipConnectionBlock.__init__": [[281, 325], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "norm_layer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n", "", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n", "down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "model", "=", "down", "+", "up", "\n", "", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n", "", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.UnetSkipConnectionBlock.forward": [[326, 331], ["networks.UnetSkipConnectionBlock.model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.UnetSkipConnectionBlock.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.NLayerDiscriminator.__init__": [[335, 376], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.NLayerDiscriminator.forward": [[377, 379], ["networks.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.PixelDiscriminator.__init__": [[382, 401], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.PixelDiscriminator.net.append", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "self", ".", "net", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.PixelDiscriminator.forward": [[402, 404], ["networks.PixelDiscriminator.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.BasicBlock_orj.__init__": [[427, 438], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "networks.conv3x3", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "networks.conv3x3", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.conv3x3", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock_orj", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rp1", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "rp2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "in2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.BasicBlock_orj.forward": [[439, 459], ["networks.BasicBlock_orj.rp1", "networks.BasicBlock_orj.conv1", "networks.BasicBlock_orj.in1", "networks.BasicBlock_orj.relu", "networks.BasicBlock_orj.rp2", "networks.BasicBlock_orj.conv2", "networks.BasicBlock_orj.in2", "networks.BasicBlock_orj.relu", "networks.BasicBlock_orj.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "rp1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "in1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "rp2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "in2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.BasicBlock_Ganilla.__init__": [[464, 495], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "use_dropout", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock_Ganilla", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rp1", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "use_dropout", "=", "use_dropout", "\n", "if", "use_dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "", "self", ".", "rp2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "out_planes", "=", "planes", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "self", ".", "final_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "expansion", "*", "planes", "*", "2", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.BasicBlock_Ganilla.forward": [[497, 507], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks.BasicBlock_Ganilla.bn2", "networks.BasicBlock_Ganilla.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.BasicBlock_Ganilla.final_conv", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks.BasicBlock_Ganilla.bn1", "networks.BasicBlock_Ganilla.dropout", "networks.BasicBlock_Ganilla.conv2", "networks.BasicBlock_Ganilla.conv1", "networks.BasicBlock_Ganilla.rp2", "networks.BasicBlock_Ganilla.rp1"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BigGDBlock.shortcut"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "self", ".", "rp1", "(", "x", ")", ")", ")", ")", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "self", ".", "rp2", "(", "out", ")", ")", ")", "\n", "inputt", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "catted", "=", "torch", ".", "cat", "(", "(", "out", ",", "inputt", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "final_conv", "(", "catted", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.PyramidFeatures_v3.__init__": [[510, 540], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C3_size", ",", "C4_size", ",", "C5_size", ",", "feature_size", "=", "128", ")", ":", "\n", "        ", "super", "(", "PyramidFeatures_v3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# upsample C5 to get P5 from the FPN paper", "\n", "self", ".", "P5_1", "=", "nn", ".", "Conv2d", "(", "C5_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P5_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp1 = nn.ReflectionPad2d(1)", "\n", "#self.P5_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "# add P5 elementwise to C4", "\n", "self", ".", "P4_1", "=", "nn", ".", "Conv2d", "(", "C4_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P4_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp2 = nn.ReflectionPad2d(1)", "\n", "#self.P4_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "# add P4 elementwise to C3", "\n", "self", ".", "P3_1", "=", "nn", ".", "Conv2d", "(", "C3_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P3_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "# self.rp3 = nn.ReflectionPad2d(1)", "\n", "# self.P3_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "#self.P2_1 = nn.Conv2d(C2_size, feature_size, kernel_size=1, stride=1, padding=0)", "\n", "# self.P2_upsampled = nn.Upsample(scale_factor=2, mode='nearest')", "\n", "# self.rp4 = nn.ReflectionPad2d(1)", "\n", "# self.P2_2 = nn.Conv2d(feature_size, feature_size/2, kernel_size=3, stride=1, padding=0)", "\n", "\n", "self", ".", "P1_1", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P1_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "rp5", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "P1_2", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", "/", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.PyramidFeatures_v3.forward": [[541, 562], ["networks.PyramidFeatures_v3.P5_1", "networks.PyramidFeatures_v3.P5_upsampled", "networks.PyramidFeatures_v3.P4_1", "networks.PyramidFeatures_v3.P4_upsampled", "networks.PyramidFeatures_v3.P3_1", "networks.PyramidFeatures_v3.P3_upsampled", "networks.PyramidFeatures_v3.P1_1", "networks.PyramidFeatures_v3.P1_upsampled", "networks.PyramidFeatures_v3.rp5", "networks.PyramidFeatures_v3.P1_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "C3", ",", "C4", ",", "C5", "=", "inputs", "\n", "\n", "P5_x", "=", "self", ".", "P5_1", "(", "C5", ")", "\n", "P5_upsampled_x", "=", "self", ".", "P5_upsampled", "(", "P5_x", ")", "\n", "\n", "P4_x", "=", "self", ".", "P4_1", "(", "C4", ")", "\n", "P4_x", "=", "P5_upsampled_x", "+", "P4_x", "\n", "P4_upsampled_x", "=", "self", ".", "P4_upsampled", "(", "P4_x", ")", "\n", "\n", "P3_x", "=", "self", ".", "P3_1", "(", "C3", ")", "\n", "P3_x", "=", "P3_x", "+", "P4_upsampled_x", "\n", "P3_upsampled_x", "=", "self", ".", "P3_upsampled", "(", "P3_x", ")", "\n", "\n", "P1_x", "=", "self", ".", "P1_1", "(", "P3_upsampled_x", ")", "\n", "P1_upsampled_x", "=", "self", ".", "P1_upsampled", "(", "P1_x", ")", "\n", "P2_x", "=", "self", ".", "rp5", "(", "P1_upsampled_x", ")", "\n", "P2_x", "=", "self", ".", "P1_2", "(", "P2_x", ")", "\n", "\n", "return", "P2_x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.PyramidFeatures.__init__": [[565, 592], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C2_size", ",", "C3_size", ",", "C4_size", ",", "C5_size", ",", "fpn_weights", ",", "feature_size", "=", "128", ")", ":", "\n", "        ", "super", "(", "PyramidFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sum_weights", "=", "fpn_weights", "#[1.0, 0.5, 0.5, 0.5]", "\n", "\n", "# upsample C5 to get P5 from the FPN paper", "\n", "self", ".", "P5_1", "=", "nn", ".", "Conv2d", "(", "C5_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P5_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp1 = nn.ReflectionPad2d(1)", "\n", "#self.P5_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "# add P5 elementwise to C4", "\n", "self", ".", "P4_1", "=", "nn", ".", "Conv2d", "(", "C4_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P4_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp2 = nn.ReflectionPad2d(1)", "\n", "#self.P4_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "# add P4 elementwise to C3", "\n", "self", ".", "P3_1", "=", "nn", ".", "Conv2d", "(", "C3_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P3_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp3 = nn.ReflectionPad2d(1)", "\n", "#self.P3_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "self", ".", "P2_1", "=", "nn", ".", "Conv2d", "(", "C2_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P2_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "rp4", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "P2_2", "=", "nn", ".", "Conv2d", "(", "int", "(", "feature_size", ")", ",", "int", "(", "feature_size", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.PyramidFeatures.forward": [[598, 627], ["networks.PyramidFeatures.P5_upsampled", "networks.PyramidFeatures.P4_upsampled", "networks.PyramidFeatures.P3_upsampled", "networks.PyramidFeatures.P2_upsampled", "networks.PyramidFeatures.rp4", "networks.PyramidFeatures.P2_2", "networks.PyramidFeatures.P5_1", "networks.PyramidFeatures.P4_1", "networks.PyramidFeatures.P3_1", "networks.PyramidFeatures.P2_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "C2", ",", "C3", ",", "C4", ",", "C5", "=", "inputs", "\n", "\n", "i", "=", "0", "\n", "P5_x", "=", "self", ".", "P5_1", "(", "C5", ")", "*", "self", ".", "sum_weights", "[", "i", "]", "\n", "P5_upsampled_x", "=", "self", ".", "P5_upsampled", "(", "P5_x", ")", "\n", "#P5_x = self.rp1(P5_x)", "\n", "# #P5_x = self.P5_2(P5_x)", "\n", "i", "+=", "1", "\n", "P4_x", "=", "self", ".", "P4_1", "(", "C4", ")", "*", "self", ".", "sum_weights", "[", "i", "]", "\n", "P4_x", "=", "P5_upsampled_x", "+", "P4_x", "\n", "P4_upsampled_x", "=", "self", ".", "P4_upsampled", "(", "P4_x", ")", "\n", "#P4_x = self.rp2(P4_x)", "\n", "# #P4_x = self.P4_2(P4_x)", "\n", "i", "+=", "1", "\n", "P3_x", "=", "self", ".", "P3_1", "(", "C3", ")", "*", "self", ".", "sum_weights", "[", "i", "]", "\n", "P3_x", "=", "P3_x", "+", "P4_upsampled_x", "\n", "P3_upsampled_x", "=", "self", ".", "P3_upsampled", "(", "P3_x", ")", "\n", "#P3_x = self.rp3(P3_x)", "\n", "#P3_x = self.P3_2(P3_x)", "\n", "i", "+=", "1", "\n", "P2_x", "=", "self", ".", "P2_1", "(", "C2", ")", "*", "self", ".", "sum_weights", "[", "i", "]", "\n", "P2_x", "=", "P2_x", "*", "self", ".", "sum_weights", "[", "2", "]", "+", "P3_upsampled_x", "\n", "P2_upsampled_x", "=", "self", ".", "P2_upsampled", "(", "P2_x", ")", "\n", "P2_x", "=", "self", ".", "rp4", "(", "P2_upsampled_x", ")", "\n", "P2_x", "=", "self", ".", "P2_2", "(", "P2_x", ")", "\n", "\n", "return", "P2_x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResNet.__init__": [[631, 679], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "networks.PyramidFeatures", "networks.ResNet._make_layer", "networks.ResNet._make_layer", "networks.ResNet._make_layer", "networks.ResNet._make_layer", "networks.ResNet._make_layer_ganilla", "networks.ResNet._make_layer_ganilla", "networks.ResNet._make_layer_ganilla", "networks.ResNet._make_layer_ganilla", "print", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "block", ",", "layers", ",", "use_dropout", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "ngf", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# first conv", "\n", "self", ".", "pad1", "=", "nn", ".", "ReflectionPad2d", "(", "input_nc", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pad2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "# Output layer", "\n", "self", ".", "pad3", "=", "nn", ".", "ReflectionPad2d", "(", "output_nc", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_nc", ",", "7", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "if", "block", "==", "BasicBlock_orj", ":", "\n", "# layers = [2,2,2,2]", "\n", "# residuals", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "fpn_sizes", "=", "[", "self", ".", "layer1", "[", "layers", "[", "0", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer2", "[", "layers", "[", "1", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer3", "[", "layers", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "layers", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "", "elif", "block", "==", "BasicBlock_Ganilla", ":", "\n", "# residuals", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "use_dropout", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "128", ",", "layers", "[", "2", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "256", ",", "layers", "[", "3", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "\n", "# for the skip connections", "\n", "fpn_sizes", "=", "[", "self", ".", "layer1", "[", "layers", "[", "0", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer2", "[", "layers", "[", "1", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer3", "[", "layers", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "layers", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Block Type is not Correct\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "self", ".", "fpn", "=", "PyramidFeatures", "(", "fpn_sizes", "[", "0", "]", ",", "fpn_sizes", "[", "1", "]", ",", "fpn_sizes", "[", "2", "]", ",", "fpn_sizes", "[", "3", "]", ",", "fpn_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResNet._make_layer": [[690, 706], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResNet._make_layer_ganilla": [[707, 714], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer_ganilla", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "use_dropout", ",", "stride", "=", "1", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_dropout", ",", "stride", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResNet.freeze_bn": [[715, 720], ["networks.ResNet.modules", "isinstance", "layer.eval"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "'''Freeze BatchNorm layers.'''", "\n", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "layer", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResNet.forward": [[721, 744], ["networks.ResNet.pad1", "networks.ResNet.conv1", "networks.ResNet.in1", "networks.ResNet.relu", "networks.ResNet.pad2", "networks.ResNet.maxpool", "networks.ResNet.layer1", "networks.ResNet.layer2", "networks.ResNet.layer3", "networks.ResNet.layer4", "networks.ResNet.fpn", "networks.ResNet.pad3", "networks.ResNet.conv2", "networks.ResNet.tanh"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img_batch", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "pad1", "(", "img_batch", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "in1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pad2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "out", "=", "self", ".", "fpn", "(", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", ")", "# use all resnet layers", "\n", "\n", "out", "=", "self", ".", "pad3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1.__init__": [[747, 810], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.AblationModel1._make_layer", "networks.AblationModel1._make_layer", "networks.AblationModel1._make_layer", "networks.AblationModel1._make_layer", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "networks.AblationModel1._make_layer_ganilla", "networks.AblationModel1._make_layer_ganilla", "networks.AblationModel1._make_layer_ganilla", "networks.AblationModel1._make_layer_ganilla", "print", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "ngf", "=", "ngf", "\n", "super", "(", "AblationModel1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# first conv", "\n", "self", ".", "pad1", "=", "nn", ".", "ReflectionPad2d", "(", "3", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pad2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "if", "block", "==", "BasicBlock_orj", ":", "\n", "# residuals", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "fpn_sizes", "=", "[", "self", ".", "layer1", "[", "layers", "[", "0", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer2", "[", "layers", "[", "1", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer3", "[", "layers", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "layers", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "", "elif", "block", "==", "BasicBlock_Ganilla", ":", "\n", "# residuals", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "128", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "256", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "fpn_sizes", "=", "[", "self", ".", "layer1", "[", "layers", "[", "0", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer2", "[", "layers", "[", "1", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer3", "[", "layers", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "layers", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Block Type is not Correct\"", ")", "\n", "\n", "# self.fpn = PyramidFeatures(fpn_sizes[0], fpn_sizes[1], fpn_sizes[2], fpn_sizes[3])", "\n", "\n", "", "n_downsampling", "=", "4", "\n", "\n", "model", "=", "[", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "ngf", "*", "2", "**", "(", "n_downsampling", ")", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "mult", ",", "int", "(", "self", ".", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "int", "(", "self", ".", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "self", ".", "ngf", ",", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "deconv_part", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer": [[821, 837], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1._make_layer_ganilla": [[838, 845], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer_ganilla", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1.freeze_bn": [[846, 851], ["networks.AblationModel1.modules", "isinstance", "layer.eval"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "'''Freeze BatchNorm layers.'''", "\n", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "layer", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel1.forward": [[852, 871], ["networks.AblationModel1.pad1", "networks.AblationModel1.conv1", "networks.AblationModel1.in1", "networks.AblationModel1.relu", "networks.AblationModel1.pad2", "networks.AblationModel1.maxpool", "networks.AblationModel1.layer1", "networks.AblationModel1.layer2", "networks.AblationModel1.layer3", "networks.AblationModel1.layer4", "networks.AblationModel1.deconv_part"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img_batch", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "pad1", "(", "img_batch", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "in1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pad2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "out", "=", "self", ".", "deconv_part", "(", "x4", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel2.__init__": [[874, 936], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fpn_sizes.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fpn_sizes.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fpn_sizes.append", "networks.PyramidFeatures_v3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "type", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "networks.ResnetBlock"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "9", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "ngf", "=", "ngf", "\n", "super", "(", "AblationModel2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "input_nc", "=", "3", "\n", "self", ".", "output_nc", "=", "3", "\n", "\n", "fpn_sizes", "=", "[", "]", "\n", "\n", "init_part", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "self", ".", "init_part", "=", "nn", ".", "Sequential", "(", "*", "init_part", ")", "\n", "fpn_sizes", ".", "append", "(", "ngf", ")", "\n", "\n", "n_downsampling", "=", "2", "\n", "# for i in range(n_downsampling):", "\n", "#     mult = 2 ** i", "\n", "mult", "=", "1", "\n", "down1", "=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "*", "down1", ")", "\n", "\n", "fpn_sizes", ".", "append", "(", "ngf", "*", "mult", "*", "2", ")", "\n", "\n", "mult", "=", "2", "\n", "down2", "=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "*", "down2", ")", "\n", "\n", "# fpn_sizes.append(ngf * mult * 2)", "\n", "\n", "flat_part", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "flat_part", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "\n", "use_bias", "=", "use_bias", ")", "]", "\n", "", "self", ".", "flat_part", "=", "nn", ".", "Sequential", "(", "*", "flat_part", ")", "\n", "\n", "fpn_sizes", ".", "append", "(", "ngf", "*", "mult", ")", "\n", "\n", "self", ".", "fpn", "=", "PyramidFeatures_v3", "(", "fpn_sizes", "[", "0", "]", ",", "fpn_sizes", "[", "1", "]", ",", "fpn_sizes", "[", "2", "]", ")", "\n", "\n", "final_part", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "final_part", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "final_part", "+=", "[", "nn", ".", "Conv2d", "(", "self", ".", "ngf", ",", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "\n", "self", ".", "final_part", "=", "nn", ".", "Sequential", "(", "*", "final_part", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.AblationModel2.forward": [[937, 952], ["networks.AblationModel2.init_part", "networks.AblationModel2.down1", "networks.AblationModel2.down2", "networks.AblationModel2.flat_part", "networks.AblationModel2.fpn", "networks.AblationModel2.final_part"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img_batch", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "init_part", "(", "img_batch", ")", "\n", "\n", "x1", "=", "self", ".", "down1", "(", "x", ")", "\n", "x2", "=", "self", ".", "down2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "flat_part", "(", "x2", ")", "\n", "\n", "out", "=", "self", ".", "fpn", "(", "[", "x", ",", "x1", ",", "x3", "]", ")", "\n", "\n", "out", "=", "self", ".", "final_part", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResidualBlock.__init__": [[978, 990], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_block", "=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "in_features", ",", "3", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "in_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "in_features", ",", "3", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "in_features", ")", "]", "\n", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.ResidualBlock.forward": [[991, 993], ["networks.ResidualBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.Generator.__init__": [[995, 1033], ["torch.Module.__init__", "range", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "networks.ResidualBlock", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "n_residual_blocks", "=", "9", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initial convolution block", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "7", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "# Downsampling", "\n", "in_features", "=", "64", "\n", "out_features", "=", "in_features", "*", "2", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "*", "2", "\n", "\n", "# Residual blocks", "\n", "", "for", "_", "in", "range", "(", "n_residual_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResidualBlock", "(", "in_features", ")", "]", "\n", "\n", "# Upsampling", "\n", "", "out_features", "=", "in_features", "//", "2", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "//", "2", "\n", "\n", "# Output layer", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "output_nc", ",", "7", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.Generator.forward": [[1034, 1036], ["networks.Generator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.Discriminator.__init__": [[1038, 1061], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# A bunch of convolutions one after another", "\n", "model", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "4", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "# FCN classification layer", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "4", ",", "padding", "=", "1", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.Discriminator.forward": [[1062, 1066], ["networks.Discriminator.model", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d().view", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "networks.Discriminator.size", "networks.Discriminator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n", "# Average pooling and flatten", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.get_norm_layer": [[18, 28], ["functools.partial", "functools.partial", "NotImplementedError"], "function", ["None"], ["def", "get_norm_layer", "(", "norm_type", "=", "'instance'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'batch'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "BatchNorm2d", ",", "affine", "=", "True", ")", "\n", "", "elif", "norm_type", "==", "'instance'", ":", "\n", "        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.get_scheduler": [[30, 45], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "niter", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.init_weights": [[47, 69], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.init_net": [[71, 78], ["networks.init_weights", "len", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_G": [[80, 109], ["networks.get_norm_layer", "networks.init_net", "networks.ResnetGenerator", "networks.ResnetGenerator", "networks.resnet18", "networks.AblationModel1", "networks.resnet34", "networks.AblationModel2", "networks.UnetGenerator", "networks.UnetGenerator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.init_net", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.resnet18", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.resnet34"], ["", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "\n", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ",", "depth", "=", "18", ",", "fpn_weights", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netG", "==", "'resnet_9blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ")", "\n", "", "elif", "netG", "==", "'resnet_6blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "6", ")", "\n", "", "elif", "netG", "==", "'resnet_fpn'", ":", "# NOA from here you should take the generator", "\n", "# Create the model", "\n", "        ", "if", "depth", "==", "18", ":", "\n", "            ", "net", "=", "resnet18", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "use_dropout", "=", "use_dropout", ",", "pretrained", "=", "False", ")", "\n", "# print \"EVET\"", "\n", "# netG_B2A = resnet18(pretrained=False)", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "net", "=", "resnet34", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "use_dropout", "=", "use_dropout", ",", "pretrained", "=", "False", ")", "\n", "# netG_B2A = resnet34(pretrained=False)", "\n", "", "", "elif", "netG", "==", "\"ablation_model1\"", ":", "\n", "        ", "net", "=", "AblationModel1", "(", "BasicBlock_Ganilla", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "elif", "netG", "==", "\"ablation_model2\"", ":", "\n", "        ", "net", "=", "AblationModel2", "(", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ")", "\n", "", "elif", "netG", "==", "'unet_128'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "7", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "elif", "netG", "==", "'unet_256'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "netG", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_D": [[111, 125], ["networks.get_norm_layer", "networks.init_net", "networks.NLayerDiscriminator", "networks.NLayerDiscriminator", "networks.PixelDiscriminator", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.get_norm_layer", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.init_net"], ["", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD", ",", "\n", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "use_sigmoid", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n", "norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netD", "==", "'basic'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'n_layers'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'pixel'", ":", "\n", "        ", "net", "=", "PixelDiscriminator", "(", "input_nc", ",", "ndf", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "net", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.conv3x3": [[418, 422], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.resnet18": [[954, 963], ["networks.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "use_dropout", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "BasicBlock_Ganilla", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "use_dropout", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ",", "model_dir", "=", "'.'", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.resnet34": [[965, 974], ["networks.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "use_dropout", "=", "False", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "BasicBlock_Ganilla", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_dropout", "=", "use_dropout", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ",", "model_dir", "=", "'.'", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.test_model.TestModel.name": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'TestModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.test_model.TestModel.modify_commandline_options": [[10, 21], ["cycle_gan_model.CycleGANModel.modify_commandline_options", "cycle_gan_model.CycleGANModel.modify_commandline_options.set_defaults", "cycle_gan_model.CycleGANModel.modify_commandline_options.add_argument"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.data.unaligned_dataset.UnalignedDataset.modify_commandline_options"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "assert", "not", "is_train", ",", "'TestModel cannot be used in train mode'", "\n", "parser", "=", "CycleGANModel", ".", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "False", ")", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'single'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model_suffix'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'In checkpoints_dir, [epoch]_net_G[model_suffix].pth will'", "\n", "' be loaded as the generator of TestModel'", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.test_model.TestModel.initialize": [[22, 41], ["base_model.BaseModel.initialize", "networks.define_G", "setattr", "test_model.TestModel.netG.eval"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_G", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "assert", "(", "not", "opt", ".", "isTrain", ")", "\n", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "# specify the images you want to save/display. The program will call base_model.get_current_visuals", "\n", "self", ".", "visual_names", "=", "[", "'real_A'", ",", "'fake_B'", "]", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "self", ".", "model_names", "=", "[", "'G'", "+", "opt", ".", "model_suffix", "]", "\n", "\n", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "\n", "opt", ".", "norm", ",", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ",", "\n", "depth", "=", "18", ",", "fpn_weights", "=", "opt", ".", "fpn_weights", ")", "\n", "\n", "# assigns the model to self.netG_[suffix] so that it can be loaded", "\n", "# please see BaseModel.load_networks", "\n", "setattr", "(", "self", ",", "'netG'", "+", "opt", ".", "model_suffix", ",", "self", ".", "netG", ")", "\n", "self", ".", "netG", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.test_model.TestModel.set_input": [[42, 46], ["input[].to"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "# we need to use single_dataset mode", "\n", "        ", "self", ".", "real_A", "=", "input", "[", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.test_model.TestModel.forward": [[47, 49], ["test_model.TestModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "fake_B", "=", "self", ".", "netG", "(", "self", ".", "real_A", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.name": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'CycleGANModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.modify_commandline_options": [[12, 23], ["parser.set_defaults", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "# default CycleGAN did not use dropout", "\n", "        ", "parser", ".", "set_defaults", "(", "no_dropout", "=", "True", ")", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_A'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "help", "=", "'weight for cycle loss (A -> B -> A)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_B'", ",", "type", "=", "float", ",", "default", "=", "10.0", ",", "\n", "help", "=", "'weight for cycle loss (B -> A -> B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_identity'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'use identity mapping. Setting lambda_identity other than 0 has an effect of scaling the weight of the identity mapping loss. For example, if the weight of the identity loss should be 10 times smaller than the weight of the reconstruction loss, please set lambda_identity = 0.1'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.initialize": [[24, 75], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_G", "visual_names_A.append", "visual_names_B.append", "networks.define_D", "networks.define_D", "util.image_pool.ImagePool", "util.image_pool.ImagePool", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "cycle_gan_model.CycleGANModel.optimizers.append", "cycle_gan_model.CycleGANModel.optimizers.append", "itertools.chain", "itertools.chain", "networks.GANLoss", "cycle_gan_model.CycleGANModel.netG_A.parameters", "cycle_gan_model.CycleGANModel.netG_B.parameters", "cycle_gan_model.CycleGANModel.netD_A.parameters", "cycle_gan_model.CycleGANModel.netD_B.parameters"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_G", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_G", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_D", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_D"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses", "\n", "self", ".", "loss_names", "=", "[", "'D_A'", ",", "'G_A'", ",", "'cycle_A'", ",", "'idt_A'", ",", "'D_B'", ",", "'G_B'", ",", "'cycle_B'", ",", "'idt_B'", "]", "\n", "# specify the images you want to save/display. The program will call base_model.get_current_visuals", "\n", "visual_names_A", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'rec_A'", "]", "\n", "visual_names_B", "=", "[", "'real_B'", ",", "'fake_A'", ",", "'rec_B'", "]", "\n", "if", "self", ".", "isTrain", "and", "self", ".", "opt", ".", "lambda_identity", ">", "0.0", ":", "\n", "            ", "visual_names_A", ".", "append", "(", "'idt_A'", ")", "\n", "visual_names_B", ".", "append", "(", "'idt_B'", ")", "\n", "\n", "", "self", ".", "visual_names", "=", "visual_names_A", "+", "visual_names_B", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", ",", "'D_A'", ",", "'D_B'", "]", "\n", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'G_A'", ",", "'G_B'", "]", "\n", "\n", "# load/define networks", "\n", "# The naming conversion is different from those used in the paper", "\n", "# Code (paper): G_A (G), G_B (F), D_A (D_Y), D_B (D_X)", "\n", "", "self", ".", "netG_A", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ",", "depth", "=", "18", ",", "\n", "fpn_weights", "=", "opt", ".", "fpn_weights", ")", "\n", "self", ".", "netG_B", "=", "networks", ".", "define_G", "(", "opt", ".", "output_nc", ",", "opt", ".", "input_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ",", "depth", "=", "18", ",", "\n", "fpn_weights", "=", "opt", ".", "fpn_weights", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD_A", "=", "networks", ".", "define_D", "(", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "netD_B", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "fake_A_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "self", ".", "fake_B_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionCycle", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "criterionIdt", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "# initialize optimizers", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netG_A", ".", "parameters", "(", ")", ",", "self", ".", "netG_B", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "itertools", ".", "chain", "(", "self", ".", "netD_A", ".", "parameters", "(", ")", ",", "self", ".", "netD_B", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.set_input": [[76, 81], ["input[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "AtoB", "=", "self", ".", "opt", ".", "direction", "==", "'AtoB'", "\n", "self", ".", "real_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.forward": [[82, 88], ["cycle_gan_model.CycleGANModel.netG_A", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netG_A"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "fake_B", "=", "self", ".", "netG_A", "(", "self", ".", "real_A", ")", "\n", "self", ".", "rec_A", "=", "self", ".", "netG_B", "(", "self", ".", "fake_B", ")", "\n", "\n", "self", ".", "fake_A", "=", "self", ".", "netG_B", "(", "self", ".", "real_B", ")", "\n", "self", ".", "rec_B", "=", "self", ".", "netG_A", "(", "self", ".", "fake_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.backward_D_basic": [[89, 101], ["netD", "cycle_gan_model.CycleGANModel.criterionGAN", "netD", "cycle_gan_model.CycleGANModel.criterionGAN", "loss_D.backward", "fake.detach"], "methods", ["None"], ["", "def", "backward_D_basic", "(", "self", ",", "netD", ",", "real", ",", "fake", ")", ":", "\n", "# Real", "\n", "        ", "pred_real", "=", "netD", "(", "real", ")", "\n", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "# Fake", "\n", "pred_fake", "=", "netD", "(", "fake", ".", "detach", "(", ")", ")", "\n", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "# Combined loss", "\n", "loss_D", "=", "(", "loss_D_real", "+", "loss_D_fake", ")", "*", "0.5", "\n", "# backward", "\n", "loss_D", ".", "backward", "(", ")", "\n", "return", "loss_D", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.backward_D_A": [[102, 105], ["cycle_gan_model.CycleGANModel.fake_B_pool.query", "cycle_gan_model.CycleGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D_A", "(", "self", ")", ":", "\n", "        ", "fake_B", "=", "self", ".", "fake_B_pool", ".", "query", "(", "self", ".", "fake_B", ")", "\n", "self", ".", "loss_D_A", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_A", ",", "self", ".", "real_B", ",", "fake_B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.backward_D_B": [[106, 109], ["cycle_gan_model.CycleGANModel.fake_A_pool.query", "cycle_gan_model.CycleGANModel.backward_D_basic"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.image_pool.ImagePool.query", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.backward_D_basic"], ["", "def", "backward_D_B", "(", "self", ")", ":", "\n", "        ", "fake_A", "=", "self", ".", "fake_A_pool", ".", "query", "(", "self", ".", "fake_A", ")", "\n", "self", ".", "loss_D_B", "=", "self", ".", "backward_D_basic", "(", "self", ".", "netD_B", ",", "self", ".", "real_A", ",", "fake_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.backward_G": [[110, 137], ["cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.criterionGAN", "cycle_gan_model.CycleGANModel.loss_G.backward", "cycle_gan_model.CycleGANModel.netG_A", "cycle_gan_model.CycleGANModel.netG_B", "cycle_gan_model.CycleGANModel.netD_A", "cycle_gan_model.CycleGANModel.netD_B", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionCycle", "cycle_gan_model.CycleGANModel.criterionIdt", "cycle_gan_model.CycleGANModel.criterionIdt"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "lambda_idt", "=", "self", ".", "opt", ".", "lambda_identity", "\n", "lambda_A", "=", "self", ".", "opt", ".", "lambda_A", "\n", "lambda_B", "=", "self", ".", "opt", ".", "lambda_B", "\n", "# Identity loss", "\n", "if", "lambda_idt", ">", "0", ":", "\n", "# G_A should be identity if real_B is fed.", "\n", "            ", "self", ".", "idt_A", "=", "self", ".", "netG_A", "(", "self", ".", "real_B", ")", "\n", "self", ".", "loss_idt_A", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_A", ",", "self", ".", "real_B", ")", "*", "lambda_B", "*", "lambda_idt", "\n", "# G_B should be identity if real_A is fed.", "\n", "self", ".", "idt_B", "=", "self", ".", "netG_B", "(", "self", ".", "real_A", ")", "\n", "self", ".", "loss_idt_B", "=", "self", ".", "criterionIdt", "(", "self", ".", "idt_B", ",", "self", ".", "real_A", ")", "*", "lambda_A", "*", "lambda_idt", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss_idt_A", "=", "0", "\n", "self", ".", "loss_idt_B", "=", "0", "\n", "\n", "# GAN loss D_A(G_A(A))", "\n", "", "self", ".", "loss_G_A", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_A", "(", "self", ".", "fake_B", ")", ",", "True", ")", "\n", "# GAN loss D_B(G_B(B))", "\n", "self", ".", "loss_G_B", "=", "self", ".", "criterionGAN", "(", "self", ".", "netD_B", "(", "self", ".", "fake_A", ")", ",", "True", ")", "\n", "# Forward cycle loss", "\n", "self", ".", "loss_cycle_A", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_A", ",", "self", ".", "real_A", ")", "*", "lambda_A", "\n", "# Backward cycle loss", "\n", "self", ".", "loss_cycle_B", "=", "self", ".", "criterionCycle", "(", "self", ".", "rec_B", ",", "self", ".", "real_B", ")", "*", "lambda_B", "\n", "# combined loss", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_A", "+", "self", ".", "loss_G_B", "+", "self", ".", "loss_cycle_A", "+", "self", ".", "loss_cycle_B", "+", "self", ".", "loss_idt_A", "+", "self", ".", "loss_idt_B", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.optimize_parameters": [[138, 152], ["cycle_gan_model.CycleGANModel.forward", "cycle_gan_model.CycleGANModel.set_requires_grad", "cycle_gan_model.CycleGANModel.optimizer_G.zero_grad", "cycle_gan_model.CycleGANModel.backward_G", "cycle_gan_model.CycleGANModel.optimizer_G.step", "cycle_gan_model.CycleGANModel.set_requires_grad", "cycle_gan_model.CycleGANModel.optimizer_D.zero_grad", "cycle_gan_model.CycleGANModel.backward_D_A", "cycle_gan_model.CycleGANModel.backward_D_B", "cycle_gan_model.CycleGANModel.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.backward_G", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.backward_D_A", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.cycle_gan_model.CycleGANModel.backward_D_B"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "# forward", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "# G_A and G_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "False", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "# D_A and D_B", "\n", "self", ".", "set_requires_grad", "(", "[", "self", ".", "netD_A", ",", "self", ".", "netD_B", "]", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D_A", "(", ")", "\n", "self", ".", "backward_D_B", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.__init__.find_model_using_name": [[5, 27], ["importlib.import_module", "importlib.import_module.__dict__.items", "model_name.replace", "print", "exit", "issubclass", "name.lower", "target_model_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.__init__.get_option_setter": [[29, 32], ["__init__.find_model_using_name"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.__init__.find_model_using_name"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.__init__.create_model": [[34, 40], ["__init__.find_model_using_name", "find_model_using_name.", "model.initialize", "print", "model.name"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.__init__.find_model_using_name", "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.unaligned_dataset.UnalignedDataset.name"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.modify_commandline_options": [[11, 14], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.name": [[15, 17], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.initialize": [[18, 30], ["os.path.join", "torch.device", "torch.device"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "gpu_ids", "=", "opt", ".", "gpu_ids", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", ")", "if", "self", ".", "gpu_ids", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "if", "opt", ".", "resize_or_crop", "!=", "'scale_width'", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "self", ".", "loss_names", "=", "[", "]", "\n", "self", ".", "model_names", "=", "[", "]", "\n", "self", ".", "visual_names", "=", "[", "]", "\n", "self", ".", "image_paths", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.set_input": [[31, 33], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "self", ".", "input", "=", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.forward": [[34, 36], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.setup": [[38, 45], ["base_model.BaseModel.print_networks", "base_model.BaseModel.load_networks", "networks.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.print_networks", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.load_networks", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler"], ["", "def", "setup", "(", "self", ",", "opt", ",", "parser", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "schedulers", "=", "[", "networks", ".", "get_scheduler", "(", "optimizer", ",", "opt", ")", "for", "optimizer", "in", "self", ".", "optimizers", "]", "\n", "\n", "", "if", "not", "self", ".", "isTrain", "or", "opt", ".", "continue_train", ":", "\n", "            ", "self", ".", "load_networks", "(", "opt", ".", "epoch", ")", "\n", "", "self", ".", "print_networks", "(", "opt", ".", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval": [[47, 52], ["isinstance", "getattr", "getattr.eval"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "net", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.test": [[55, 58], ["torch.no_grad", "base_model.BaseModel.forward"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward"], ["", "", "", "def", "test", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "forward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.get_image_paths": [[60, 62], ["None"], "methods", ["None"], ["", "", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_paths", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.optimize_parameters": [[63, 65], ["None"], "methods", ["None"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.update_learning_rate": [[67, 72], ["print", "scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "for", "scheduler", "in", "self", ".", "schedulers", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "", "lr", "=", "self", ".", "optimizers", "[", "0", "]", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "print", "(", "'learning rate = %.7f'", "%", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.get_current_visuals": [[74, 80], ["collections.OrderedDict", "isinstance", "getattr"], "methods", ["None"], ["", "def", "get_current_visuals", "(", "self", ")", ":", "\n", "        ", "visual_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "visual_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "visual_ret", "[", "name", "]", "=", "getattr", "(", "self", ",", "name", ")", "\n", "", "", "return", "visual_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.get_current_losses": [[82, 89], ["collections.OrderedDict", "isinstance", "float", "getattr"], "methods", ["None"], ["", "def", "get_current_losses", "(", "self", ")", ":", "\n", "        ", "errors_ret", "=", "OrderedDict", "(", ")", "\n", "for", "name", "in", "self", ".", "loss_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "# float(...) works for both scalar tensor and float number", "\n", "                ", "errors_ret", "[", "name", "]", "=", "float", "(", "getattr", "(", "self", ",", "'loss_'", "+", "name", ")", ")", "\n", "", "", "return", "errors_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.save_networks": [[91, 103], ["isinstance", "os.path.join", "getattr", "torch.cuda.is_available", "torch.save", "getattr.cuda", "torch.save", "len", "getattr.module.cpu().state_dict", "getattr.cpu().state_dict", "getattr.module.cpu", "getattr.cpu"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["", "def", "save_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "save_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "\n", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "0", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "module", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "net", ".", "cuda", "(", "self", ".", "gpu_ids", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "save", "(", "net", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.__patch_instance_norm_state_dict": [[104, 116], ["len", "base_model.BaseModel.__patch_instance_norm_state_dict", "module.__class__.__name__.startswith", "module.__class__.__name__.startswith", "state_dict.pop", "getattr", "getattr", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "", "", "def", "__patch_instance_norm_state_dict", "(", "self", ",", "state_dict", ",", "module", ",", "keys", ",", "i", "=", "0", ")", ":", "\n", "        ", "key", "=", "keys", "[", "i", "]", "\n", "if", "i", "+", "1", "==", "len", "(", "keys", ")", ":", "# at the end, pointing to a parameter/buffer", "\n", "            ", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'running_mean'", "or", "key", "==", "'running_var'", ")", ":", "\n", "                ", "if", "getattr", "(", "module", ",", "key", ")", "is", "None", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "if", "module", ".", "__class__", ".", "__name__", ".", "startswith", "(", "'InstanceNorm'", ")", "and", "(", "key", "==", "'num_batches_tracked'", ")", ":", "\n", "                ", "state_dict", ".", "pop", "(", "'.'", ".", "join", "(", "keys", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "getattr", "(", "module", ",", "key", ")", ",", "keys", ",", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.load_networks": [[118, 137], ["isinstance", "os.path.join", "getattr", "isinstance", "print", "torch.load", "hasattr", "list", "getattr.load_state_dict", "torch.load.keys", "base_model.BaseModel.__patch_instance_norm_state_dict", "str", "key.split"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.__patch_instance_norm_state_dict"], ["", "", "def", "load_networks", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "load_filename", "=", "'%s_net_%s.pth'", "%", "(", "epoch", ",", "name", ")", "\n", "load_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "load_filename", ")", "\n", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "if", "isinstance", "(", "net", ",", "torch", ".", "nn", ".", "DataParallel", ")", ":", "\n", "                    ", "net", "=", "net", ".", "module", "\n", "", "print", "(", "'loading the model from %s'", "%", "load_path", ")", "\n", "# if you are using PyTorch newer than 0.4 (e.g., built from", "\n", "# GitHub source), you can remove str() on self.device", "\n", "state_dict", "=", "torch", ".", "load", "(", "load_path", ",", "map_location", "=", "str", "(", "self", ".", "device", ")", ")", "\n", "if", "hasattr", "(", "state_dict", ",", "'_metadata'", ")", ":", "\n", "                    ", "del", "state_dict", ".", "_metadata", "\n", "\n", "# patch InstanceNorm checkpoints prior to 0.4", "\n", "", "for", "key", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "# need to copy keys here because we mutate in loop", "\n", "                    ", "self", ".", "__patch_instance_norm_state_dict", "(", "state_dict", ",", "net", ",", "key", ".", "split", "(", "'.'", ")", ")", "\n", "", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.print_networks": [[139, 151], ["print", "print", "isinstance", "getattr", "getattr.parameters", "print", "param.numel", "print"], "methods", ["None"], ["", "", "", "def", "print_networks", "(", "self", ",", "verbose", ")", ":", "\n", "        ", "print", "(", "'---------- Networks initialized -------------'", ")", "\n", "for", "name", "in", "self", ".", "model_names", ":", "\n", "            ", "if", "isinstance", "(", "name", ",", "str", ")", ":", "\n", "                ", "net", "=", "getattr", "(", "self", ",", "'net'", "+", "name", ")", "\n", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "net", ")", "\n", "", "print", "(", "'[Network %s] Total number of parameters : %.3f M'", "%", "(", "name", ",", "num_params", "/", "1e6", ")", ")", "\n", "", "", "print", "(", "'-----------------------------------------------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.set_requires_grad": [[153, 160], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.name": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'Pix2PixModel'", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.modify_commandline_options": [[11, 23], ["parser.set_defaults", "parser.set_defaults", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "# changing the default values to match the pix2pix paper", "\n", "# (https://phillipi.github.io/pix2pix/)", "\n", "        ", "parser", ".", "set_defaults", "(", "pool_size", "=", "0", ",", "no_lsgan", "=", "True", ",", "norm", "=", "'batch'", ")", "\n", "parser", ".", "set_defaults", "(", "dataset_mode", "=", "'aligned'", ")", "\n", "# parser.set_defaults(netG='unet_256')", "\n", "if", "is_train", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--lambda_L1'", ",", "type", "=", "float", ",", "default", "=", "100.0", ",", "help", "=", "'weight for L1 loss'", ")", "\n", "\n", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.initialize": [[24, 60], ["base_model.BaseModel.initialize", "networks.define_G", "networks.define_D", "util.image_pool.ImagePool", "networks.GANLoss().to", "torch.nn.L1Loss", "torch.optim.Adam", "torch.optim.Adam", "pix2pix_model.Pix2PixModel.optimizers.append", "pix2pix_model.Pix2PixModel.optimizers.append", "pix2pix_model.Pix2PixModel.netG.parameters", "pix2pix_model.Pix2PixModel.netD.parameters", "networks.GANLoss"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_G", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.define_D"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "BaseModel", ".", "initialize", "(", "self", ",", "opt", ")", "\n", "self", ".", "isTrain", "=", "opt", ".", "isTrain", "\n", "# specify the training losses you want to print out. The program will call base_model.get_current_losses", "\n", "self", ".", "loss_names", "=", "[", "'G_GAN'", ",", "'G_L1'", ",", "'D_real'", ",", "'D_fake'", "]", "\n", "# specify the images you want to save/display. The program will call base_model.get_current_visuals", "\n", "self", ".", "visual_names", "=", "[", "'real_A'", ",", "'fake_B'", ",", "'real_B'", "]", "\n", "# specify the models you want to save to the disk. The program will call base_model.save_networks and base_model.load_networks", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "model_names", "=", "[", "'G'", ",", "'D'", "]", "\n", "", "else", ":", "# during test time, only load Gs", "\n", "            ", "self", ".", "model_names", "=", "[", "'G'", "]", "\n", "# load/define networks", "\n", "", "self", ".", "netG", "=", "networks", ".", "define_G", "(", "opt", ".", "input_nc", ",", "opt", ".", "output_nc", ",", "opt", ".", "ngf", ",", "opt", ".", "netG", ",", "opt", ".", "norm", ",", "\n", "not", "opt", ".", "no_dropout", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ",", "depth", "=", "18", ",", "\n", "fpn_weights", "=", "opt", ".", "fpn_weights", ")", "\n", "\n", "if", "self", ".", "isTrain", ":", "\n", "            ", "use_sigmoid", "=", "opt", ".", "no_lsgan", "\n", "self", ".", "netD", "=", "networks", ".", "define_D", "(", "opt", ".", "input_nc", "+", "opt", ".", "output_nc", ",", "opt", ".", "ndf", ",", "opt", ".", "netD", ",", "\n", "opt", ".", "n_layers_D", ",", "opt", ".", "norm", ",", "use_sigmoid", ",", "opt", ".", "init_type", ",", "opt", ".", "init_gain", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "fake_AB_pool", "=", "ImagePool", "(", "opt", ".", "pool_size", ")", "\n", "# define loss functions", "\n", "self", ".", "criterionGAN", "=", "networks", ".", "GANLoss", "(", "use_lsgan", "=", "not", "opt", ".", "no_lsgan", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "# initialize optimizers", "\n", "self", ".", "optimizers", "=", "[", "]", "\n", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "opt", ".", "lr", ",", "betas", "=", "(", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_G", ")", "\n", "self", ".", "optimizers", ".", "append", "(", "self", ".", "optimizer_D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.set_input": [[61, 66], ["input[].to", "input[].to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "AtoB", "=", "self", ".", "opt", ".", "direction", "==", "'AtoB'", "\n", "self", ".", "real_A", "=", "input", "[", "'A'", "if", "AtoB", "else", "'B'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "real_B", "=", "input", "[", "'B'", "if", "AtoB", "else", "'A'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "image_paths", "=", "input", "[", "'A_paths'", "if", "AtoB", "else", "'B_paths'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.forward": [[67, 69], ["pix2pix_model.Pix2PixModel.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "fake_B", "=", "self", ".", "netG", "(", "self", ".", "real_A", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.backward_D": [[70, 86], ["pix2pix_model.Pix2PixModel.fake_AB_pool.query", "pix2pix_model.Pix2PixModel.netD", "pix2pix_model.Pix2PixModel.criterionGAN", "torch.cat", "pix2pix_model.Pix2PixModel.netD", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.loss_D.backward", "torch.cat", "pix2pix_model.Pix2PixModel.detach"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.image_pool.ImagePool.query"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "# Fake", "\n", "# stop backprop to the generator by detaching fake_B", "\n", "        ", "fake_AB", "=", "self", ".", "fake_AB_pool", ".", "query", "(", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "\n", "# Real", "\n", "real_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "real_B", ")", ",", "1", ")", "\n", "pred_real", "=", "self", ".", "netD", "(", "real_AB", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "\n", "# Combined loss", "\n", "self", ".", "loss_D", "=", "(", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", ")", "*", "0.5", "\n", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.backward_G": [[87, 99], ["torch.cat", "pix2pix_model.Pix2PixModel.netD", "pix2pix_model.Pix2PixModel.criterionGAN", "pix2pix_model.Pix2PixModel.loss_G.backward", "pix2pix_model.Pix2PixModel.criterionL1"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "# First, G(A) should fake the discriminator", "\n", "        ", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "real_A", ",", "self", ".", "fake_B", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "\n", "\n", "# Second, G(A) = B", "\n", "self", ".", "loss_G_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "fake_B", ",", "self", ".", "real_B", ")", "*", "self", ".", "opt", ".", "lambda_L1", "\n", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_G_L1", "\n", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.optimize_parameters": [[100, 113], ["pix2pix_model.Pix2PixModel.forward", "pix2pix_model.Pix2PixModel.set_requires_grad", "pix2pix_model.Pix2PixModel.optimizer_D.zero_grad", "pix2pix_model.Pix2PixModel.backward_D", "pix2pix_model.Pix2PixModel.optimizer_D.step", "pix2pix_model.Pix2PixModel.set_requires_grad", "pix2pix_model.Pix2PixModel.optimizer_G.zero_grad", "pix2pix_model.Pix2PixModel.backward_G", "pix2pix_model.Pix2PixModel.optimizer_G.step"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.backward_D", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.set_requires_grad", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.pix2pix_model.Pix2PixModel.backward_G"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "# update D", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "# update G", "\n", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "False", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.aligned_dataset.AlignedDataset.modify_commandline_options": [[11, 14], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.aligned_dataset.AlignedDataset.initialize": [[15, 21], ["os.path.join", "sorted", "data.image_folder.make_dataset"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.make_dataset"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_AB", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", ")", "\n", "self", ".", "AB_paths", "=", "sorted", "(", "make_dataset", "(", "self", ".", "dir_AB", ")", ")", "\n", "assert", "(", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.aligned_dataset.AlignedDataset.__getitem__": [[22, 64], ["PIL.Image.open().convert", "int", "PIL.Image.open().convert.crop().resize", "PIL.Image.open().convert.crop().resize", "random.randint", "random.randint", "torchvision.ToTensor", "torchvision.ToTensor", "max", "max", "torchvision.Normalize", "torchvision.Normalize", "torch.LongTensor", "tmp.unsqueeze.index_select", "tmp.unsqueeze.index_select", "tmp.unsqueeze", "tmp.unsqueeze", "PIL.Image.open", "PIL.Image.open().convert.crop", "PIL.Image.open().convert.crop", "random.random", "range", "tmp.unsqueeze.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "AB_path", "=", "self", ".", "AB_paths", "[", "index", "]", "\n", "AB", "=", "Image", ".", "open", "(", "AB_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "w", ",", "h", "=", "AB", ".", "size", "\n", "assert", "(", "self", ".", "opt", ".", "loadSize", ">=", "self", ".", "opt", ".", "fineSize", ")", "\n", "w2", "=", "int", "(", "w", "/", "2", ")", "\n", "A", "=", "AB", ".", "crop", "(", "(", "0", ",", "0", ",", "w2", ",", "h", ")", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "loadSize", ",", "self", ".", "opt", ".", "loadSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "B", "=", "AB", ".", "crop", "(", "(", "w2", ",", "0", ",", "w", ",", "h", ")", ")", ".", "resize", "(", "(", "self", ".", "opt", ".", "loadSize", ",", "self", ".", "opt", ".", "loadSize", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "A", "=", "transforms", ".", "ToTensor", "(", ")", "(", "A", ")", "\n", "B", "=", "transforms", ".", "ToTensor", "(", ")", "(", "B", ")", "\n", "w_offset", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "self", ".", "opt", ".", "loadSize", "-", "self", ".", "opt", ".", "fineSize", "-", "1", ")", ")", "\n", "h_offset", "=", "random", ".", "randint", "(", "0", ",", "max", "(", "0", ",", "self", ".", "opt", ".", "loadSize", "-", "self", ".", "opt", ".", "fineSize", "-", "1", ")", ")", "\n", "\n", "A", "=", "A", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "w_offset", ":", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "B", "=", "B", "[", ":", ",", "h_offset", ":", "h_offset", "+", "self", ".", "opt", ".", "fineSize", ",", "w_offset", ":", "w_offset", "+", "self", ".", "opt", ".", "fineSize", "]", "\n", "\n", "A", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "(", "A", ")", "\n", "B", "=", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "(", "B", ")", "\n", "\n", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "\n", "", "if", "(", "not", "self", ".", "opt", ".", "no_flip", ")", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "A", ".", "size", "(", "2", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "idx", ")", "\n", "A", "=", "A", ".", "index_select", "(", "2", ",", "idx", ")", "\n", "B", "=", "B", ".", "index_select", "(", "2", ",", "idx", ")", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "output_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "B", "[", "0", ",", "...", "]", "*", "0.299", "+", "B", "[", "1", ",", "...", "]", "*", "0.587", "+", "B", "[", "2", ",", "...", "]", "*", "0.114", "\n", "B", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "\n", "'A_paths'", ":", "AB_path", ",", "'B_paths'", ":", "AB_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.aligned_dataset.AlignedDataset.__len__": [[65, 67], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "AB_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.aligned_dataset.AlignedDataset.name": [[68, 70], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'AlignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.BaseDataset.__init__": [[7, 9], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.BaseDataset.name": [[10, 12], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'BaseDataset'", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.BaseDataset.modify_commandline_options": [[13, 16], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.BaseDataset.initialize": [[17, 19], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.BaseDataset.__len__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.get_transform": [[24, 52], ["torchvision.Compose", "transform_list.append", "transform_list.append", "transform_list.append", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.RandomCrop", "transform_list.append", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "transform_list.append", "torchvision.Lambda", "transform_list.append", "transform_list.append", "torchvision.Lambda", "torchvision.RandomCrop", "transform_list.append", "ValueError", "base_dataset.__scale_width", "torchvision.Lambda", "base_dataset.__scale_width", "base_dataset.__adjust"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.__scale_width", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.__adjust"], ["", "", "def", "get_transform", "(", "opt", ")", ":", "\n", "    ", "transform_list", "=", "[", "]", "\n", "if", "opt", ".", "resize_or_crop", "==", "'resize_and_crop'", ":", "\n", "        ", "osize", "=", "[", "opt", ".", "loadSize", ",", "opt", ".", "loadSize", "]", "\n", "transform_list", ".", "append", "(", "transforms", ".", "Resize", "(", "osize", ",", "Image", ".", "BICUBIC", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "fineSize", ")", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'scale_width_and_crop'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__scale_width", "(", "img", ",", "opt", ".", "loadSize", ")", ")", ")", "\n", "transform_list", ".", "append", "(", "transforms", ".", "RandomCrop", "(", "opt", ".", "fineSize", ")", ")", "\n", "", "elif", "opt", ".", "resize_or_crop", "==", "'none'", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "Lambda", "(", "\n", "lambda", "img", ":", "__adjust", "(", "img", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'--resize_or_crop %s is not a valid option.'", "%", "opt", ".", "resize_or_crop", ")", "\n", "\n", "", "if", "opt", ".", "isTrain", "and", "not", "opt", ".", "no_flip", ":", "\n", "        ", "transform_list", ".", "append", "(", "transforms", ".", "RandomHorizontalFlip", "(", ")", ")", "\n", "\n", "", "transform_list", "+=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", "\n", "return", "transforms", ".", "Compose", "(", "transform_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.__adjust": [[55, 73], ["img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.__print_size_warning"], ["", "def", "__adjust", "(", "img", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "# the size needs to be a multiple of this number,", "\n", "# because going through generator network may change img size", "\n", "# and eventually cause size mismatch error", "\n", "mult", "=", "4", "\n", "if", "ow", "%", "mult", "==", "0", "and", "oh", "%", "mult", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "(", "ow", "-", "1", ")", "//", "mult", "\n", "w", "=", "(", "w", "+", "1", ")", "*", "mult", "\n", "h", "=", "(", "oh", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "h", "+", "1", ")", "*", "mult", "\n", "\n", "if", "ow", "!=", "w", "or", "oh", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.__scale_width": [[75, 94], ["int", "img.resize", "base_dataset.__print_size_warning"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.__print_size_warning"], ["", "def", "__scale_width", "(", "img", ",", "target_width", ")", ":", "\n", "    ", "ow", ",", "oh", "=", "img", ".", "size", "\n", "\n", "# the size needs to be a multiple of this number,", "\n", "# because going through generator network may change img size", "\n", "# and eventually cause size mismatch error", "\n", "mult", "=", "4", "\n", "assert", "target_width", "%", "mult", "==", "0", ",", "\"the target width needs to be multiple of %d.\"", "%", "mult", "\n", "if", "(", "ow", "==", "target_width", "and", "oh", "%", "mult", "==", "0", ")", ":", "\n", "        ", "return", "img", "\n", "", "w", "=", "target_width", "\n", "target_height", "=", "int", "(", "target_width", "*", "oh", "/", "ow", ")", "\n", "m", "=", "(", "target_height", "-", "1", ")", "//", "mult", "\n", "h", "=", "(", "m", "+", "1", ")", "*", "mult", "\n", "\n", "if", "target_height", "!=", "h", ":", "\n", "        ", "__print_size_warning", "(", "target_width", ",", "target_height", ",", "w", ",", "h", ")", "\n", "\n", "", "return", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.__print_size_warning": [[96, 103], ["hasattr", "print"], "function", ["None"], ["", "def", "__print_size_warning", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "__print_size_warning", ",", "'has_printed'", ")", ":", "\n", "        ", "print", "(", "\"The image size needs to be a multiple of 4. \"", "\n", "\"The loaded image size was (%d, %d), so it was adjusted to \"", "\n", "\"(%d, %d). This adjustment will be done to all images \"", "\n", "\"whose sizes are not multiples of 4\"", "%", "(", "ow", ",", "oh", ",", "w", ",", "h", ")", ")", "\n", "__print_size_warning", ".", "has_printed", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.single_dataset.SingleDataset.modify_commandline_options": [[8, 11], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.single_dataset.SingleDataset.initialize": [[12, 22], ["os.path.join", "data.image_folder.make_dataset", "sorted", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.make_dataset", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.get_transform"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ")", "\n", "\n", "self", ".", "A_paths", "=", "make_dataset", "(", "self", ".", "dir_A", ")", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "self", ".", "A_paths", ")", "\n", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.single_dataset.SingleDataset.__getitem__": [[23, 37], ["PIL.Image.open().convert", "single_dataset.SingleDataset.transform", "tmp.unsqueeze", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "A", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "return", "{", "'A'", ":", "A", ",", "'A_paths'", ":", "A_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.single_dataset.SingleDataset.__len__": [[38, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "A_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.single_dataset.SingleDataset.name": [[41, 43], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'SingleImageDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.image_folder.ImageFolder.__init__": [[43, 56], ["image_folder.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "make_dataset", "(", "root", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.image_folder.ImageFolder.__getitem__": [[57, 66], ["image_folder.ImageFolder.loader", "image_folder.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.image_folder.ImageFolder.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.image_folder.is_image_file": [[20, 22], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.image_folder.make_dataset": [[24, 35], ["os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "image_folder.is_image_file", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.is_image_file"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.image_folder.default_loader": [[37, 39], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.CustomDatasetDataLoader.name": [[53, 55], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.CustomDatasetDataLoader.initialize": [[56, 64], ["data.base_data_loader.BaseDataLoader.initialize", "__init__.create_dataset", "torch.utils.data.DataLoader", "int"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.create_dataset"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.CustomDatasetDataLoader.load_data": [[65, 67], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.CustomDatasetDataLoader.__len__": [[68, 70], ["min", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.CustomDatasetDataLoader.__iter__": [[71, 76], ["enumerate"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.find_dataset_using_name": [[7, 29], ["importlib.import_module", "importlib.import_module.__dict__.items", "dataset_name.replace", "print", "exit", "issubclass", "name.lower", "target_dataset_name.lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.get_option_setter": [[31, 34], ["__init__.find_dataset_using_name"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.find_dataset_using_name"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.create_dataset": [[36, 42], ["__init__.find_dataset_using_name", "find_dataset_using_name.", "dataset.initialize", "print", "dataset.name"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.find_dataset_using_name", "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.unaligned_dataset.UnalignedDataset.name"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.CreateDataLoader": [[44, 48], ["__init__.CustomDatasetDataLoader", "__init__.CustomDatasetDataLoader.initialize"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_data_loader.BaseDataLoader.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_data_loader.BaseDataLoader.initialize": [[5, 8], ["None"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_data_loader.BaseDataLoader.load_data": [[9, 11], ["None"], "methods", ["None"], ["", "def", "load_data", "(", ")", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.unaligned_dataset.UnalignedDataset.modify_commandline_options": [[9, 12], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "modify_commandline_options", "(", "parser", ",", "is_train", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.unaligned_dataset.UnalignedDataset.initialize": [[13, 27], ["os.path.join", "os.path.join", "data.image_folder.make_dataset", "data.image_folder.make_dataset", "sorted", "sorted", "len", "len", "data.base_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.make_dataset", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.make_dataset", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.base_dataset.get_transform"], ["", "def", "initialize", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "root", "=", "opt", ".", "dataroot", "\n", "self", ".", "dir_A", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'A'", ")", "\n", "self", ".", "dir_B", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "dataroot", ",", "opt", ".", "phase", "+", "'B'", ")", "\n", "\n", "self", ".", "A_paths", "=", "make_dataset", "(", "self", ".", "dir_A", ")", "\n", "self", ".", "B_paths", "=", "make_dataset", "(", "self", ".", "dir_B", ")", "\n", "\n", "self", ".", "A_paths", "=", "sorted", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "B_paths", "=", "sorted", "(", "self", ".", "B_paths", ")", "\n", "self", ".", "A_size", "=", "len", "(", "self", ".", "A_paths", ")", "\n", "self", ".", "B_size", "=", "len", "(", "self", ".", "B_paths", ")", "\n", "self", ".", "transform", "=", "get_transform", "(", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.unaligned_dataset.UnalignedDataset.__getitem__": [[28, 56], ["PIL.Image.open().convert", "PIL.Image.open().convert", "unaligned_dataset.UnalignedDataset.transform", "unaligned_dataset.UnalignedDataset.transform", "random.randint", "tmp.unsqueeze", "tmp.unsqueeze", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "A_path", "=", "self", ".", "A_paths", "[", "index", "%", "self", ".", "A_size", "]", "\n", "if", "self", ".", "opt", ".", "serial_batches", ":", "\n", "            ", "index_B", "=", "index", "%", "self", ".", "B_size", "\n", "", "else", ":", "\n", "            ", "index_B", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "B_size", "-", "1", ")", "\n", "", "B_path", "=", "self", ".", "B_paths", "[", "index_B", "]", "\n", "A_img", "=", "Image", ".", "open", "(", "A_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "B_img", "=", "Image", ".", "open", "(", "B_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "A", "=", "self", ".", "transform", "(", "A_img", ")", "\n", "B", "=", "self", ".", "transform", "(", "B_img", ")", "\n", "if", "self", ".", "opt", ".", "direction", "==", "'BtoA'", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "", "else", ":", "\n", "            ", "input_nc", "=", "self", ".", "opt", ".", "input_nc", "\n", "output_nc", "=", "self", ".", "opt", ".", "output_nc", "\n", "\n", "", "if", "input_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "A", "[", "0", ",", "...", "]", "*", "0.299", "+", "A", "[", "1", ",", "...", "]", "*", "0.587", "+", "A", "[", "2", ",", "...", "]", "*", "0.114", "\n", "A", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "output_nc", "==", "1", ":", "# RGB to gray", "\n", "            ", "tmp", "=", "B", "[", "0", ",", "...", "]", "*", "0.299", "+", "B", "[", "1", ",", "...", "]", "*", "0.587", "+", "B", "[", "2", ",", "...", "]", "*", "0.114", "\n", "B", "=", "tmp", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "{", "'A'", ":", "A", ",", "'B'", ":", "B", ",", "\n", "'A_paths'", ":", "A_path", ",", "'B_paths'", ":", "B_path", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.unaligned_dataset.UnalignedDataset.__len__": [[57, 59], ["max"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "A_size", ",", "self", ".", "B_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.data.unaligned_dataset.UnalignedDataset.name": [[60, 62], ["None"], "methods", ["None"], ["", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "'UnalignedDataset'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.options.test_options.TestOptions.initialize": [[5, 22], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.set_defaults", "base_options.BaseOptions.initialize.set_defaults", "float", "base_options.BaseOptions.initialize.get_default"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--ntest'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'# of test examples.'", ")", "\n", "parser", ".", "add_argument", "(", "'--results_dir'", ",", "type", "=", "str", ",", "default", "=", "'./results/'", ",", "help", "=", "'saves results here.'", ")", "\n", "parser", ".", "add_argument", "(", "'--aspect_ratio'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'aspect ratio of result images'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--cityscapes'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'test with cityscapes dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--cityscape_fnames'", ",", "type", "=", "str", ",", "default", "=", "\"./datasets/cityscapes_test_file_names.txt\"", ",", "help", "=", "'correct cityscape file names'", ")", "\n", "#  Dropout and Batchnorm has different behavioir during training and test.", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use eval mode during test time.'", ")", "#", "\n", "parser", ".", "add_argument", "(", "'--num_test'", ",", "type", "=", "int", ",", "default", "=", "751", ",", "help", "=", "'how many test images to run'", ")", "# for style 751, for content 500", "\n", "\n", "parser", ".", "set_defaults", "(", "model", "=", "'test'", ")", "\n", "# To avoid cropping, the loadSize should be the same as fineSize", "\n", "parser", ".", "set_defaults", "(", "loadSize", "=", "parser", ".", "get_default", "(", "'fineSize'", ")", ")", "\n", "self", ".", "isTrain", "=", "False", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.options.train_options.TrainOptions.initialize": [[5, 32], ["base_options.BaseOptions.initialize", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument", "base_options.BaseOptions.initialize.add_argument"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize"], ["    ", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", "=", "BaseOptions", ".", "initialize", "(", "self", ",", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--display_freq'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'frequency of showing training results on screen'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_ncols'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'if positive, display all images in a single visdom web panel with certain number of images per row.'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_id'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'window id of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_server'", ",", "type", "=", "str", ",", "default", "=", "\"http://localhost\"", ",", "help", "=", "'visdom server of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_env'", ",", "type", "=", "str", ",", "default", "=", "'main'", ",", "help", "=", "'visdom display environment name (default is \"main\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_port'", ",", "type", "=", "int", ",", "default", "=", "8097", ",", "help", "=", "'visdom port of the web display'", ")", "\n", "parser", ".", "add_argument", "(", "'--update_html_freq'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'frequency of saving training results to html'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'frequency of showing training results on console'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_latest_freq'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'frequency of saving the latest results'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_epoch_freq'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'frequency of saving checkpoints at the end of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--continue_train'", ",", "action", "=", "'store_true'", ",", "help", "=", "'continue training: load the latest model'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_count'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the starting epoch count, we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>, ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train, val, test, etc'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_lsgan'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do *not* use least square GAN, if false, use vanilla GAN'", ")", "\n", "parser", ".", "add_argument", "(", "'--pool_size'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'the size of image buffer that stores previously generated images'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_html'", ",", "action", "=", "'store_true'", ",", "help", "=", "'do not save intermediate training results to [opt.checkpoints_dir]/[opt.name]/web/'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'lambda'", ",", "help", "=", "'learning rate policy: lambda|step|plateau|cosine'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "\n", "self", ".", "isTrain", "=", "True", "\n", "return", "parser", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize": [[13, 47], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "float"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--dataroot'", ",", "required", "=", "False", ",", "default", "=", "\"./datasets/photo2axel\"", ",", "help", "=", "'path to images (should have subfolders trainA, trainB, valA, valB, etc)'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'photo2axel_ganilla'", ",", "help", "=", "'name of the experiment. It decides where to store samples and models'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints_dir'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints/'", ",", "help", "=", "'models are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--loadSize'", ",", "type", "=", "int", ",", "default", "=", "286", ",", "help", "=", "'scale images to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--fineSize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'then crop to this size'", ")", "\n", "parser", ".", "add_argument", "(", "'--display_winsize'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'display window size for both visdom and HTML'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of input image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_nc'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'# of output image channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--ngf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of gen filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--ndf'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'# of discrim filters in first conv layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--netD'", ",", "type", "=", "str", ",", "default", "=", "'basic'", ",", "help", "=", "'selects model to use for netD'", ")", "\n", "parser", ".", "add_argument", "(", "'--netG'", ",", "type", "=", "str", ",", "default", "=", "'resnet_fpn'", ",", "help", "=", "'selects model to use for netG [resnet_fpn | ablation_model1 | ablation_model2 | resnet_9blocks | resnet_6blocks]'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_layers_D'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'only used if netD==n_layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--fpn_weights'", ",", "type", "=", "list", ",", "default", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ",", "help", "=", "'weights for each fpn layer from C5 to C2'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'gpu ids: e.g. 0  0,1,2, 0,2. use -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_mode'", ",", "type", "=", "str", ",", "default", "=", "'unaligned'", ",", "help", "=", "'chooses how datasets are loaded. [unaligned | aligned | single]'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'cycle_gan'", ",", "help", "=", "'chooses which model to use. cycle_gan, pix2pix, test'", ")", "\n", "parser", ".", "add_argument", "(", "'--direction'", ",", "type", "=", "str", ",", "default", "=", "'AtoB'", ",", "help", "=", "'AtoB or BtoA'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "str", ",", "default", "=", "'100'", ",", "help", "=", "'which epoch to load? set to latest to use latest cached model'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_threads'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'# threads for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'instance'", ",", "help", "=", "'instance normalization or batch normalization'", ")", "\n", "parser", ".", "add_argument", "(", "'--serial_batches'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if true, takes images in order to make batches, otherwise takes them randomly'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_dropout'", ",", "default", "=", "False", ",", "help", "=", "'no dropout for the generator'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_dataset_size'", ",", "type", "=", "int", ",", "default", "=", "float", "(", "\"inf\"", ")", ",", "help", "=", "'Maximum number of samples allowed per dataset. If the dataset directory contains more than max_dataset_size, only a subset is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resize_or_crop'", ",", "type", "=", "str", ",", "default", "=", "'resize_and_crop'", ",", "help", "=", "'scaling and cropping of images at load time [resize_and_crop|crop|scale_width|scale_width_and_crop|none]'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_flip'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, do not flip the images for data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'network initialization [normal|xavier|kaiming|orthogonal]'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_gain'", ",", "type", "=", "float", ",", "default", "=", "0.02", ",", "help", "=", "'scaling factor for normal, xavier and orthogonal.'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "action", "=", "'store_true'", ",", "help", "=", "'if specified, print more debugging information'", ")", "\n", "parser", ".", "add_argument", "(", "'--suffix'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'customized suffix: opt.name = opt.name + suffix: e.g., {model}_{netG}_size{loadSize}'", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.gather_options": [[48, 72], ["base_options.BaseOptions.parse_known_args", "models.get_option_setter", "models.get_option_setter.", "base_options.BaseOptions.parse_known_args", "data.get_option_setter", "data.get_option_setter.", "base_options.BaseOptions.parse_args", "argparse.ArgumentParser", "base_options.BaseOptions.initialize"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.noabrazilay_missgan.data.__init__.get_option_setter", "home.repos.pwc.inspect_result.noabrazilay_missgan.edges.batch_hed.parse_args", "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.initialize"], ["", "def", "gather_options", "(", "self", ")", ":", "\n", "# initialize parser with basic options", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", "=", "self", ".", "initialize", "(", "parser", ")", "\n", "\n", "# get the basic options", "\n", "", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "# modify model-related parser options", "\n", "model_name", "=", "opt", ".", "model", "\n", "model_option_setter", "=", "models", ".", "get_option_setter", "(", "model_name", ")", "\n", "parser", "=", "model_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "opt", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "# parse again with the new defaults", "\n", "\n", "# modify dataset-related parser options", "\n", "dataset_name", "=", "opt", ".", "dataset_mode", "\n", "dataset_option_setter", "=", "data", ".", "get_option_setter", "(", "dataset_name", ")", "\n", "parser", "=", "dataset_option_setter", "(", "parser", ",", "self", ".", "isTrain", ")", "\n", "\n", "self", ".", "parser", "=", "parser", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.print_options": [[73, 92], ["sorted", "print", "os.path.join", "util.util.util.mkdirs", "os.path.join", "vars().items", "base_options.BaseOptions.parser.get_default", "open", "opt_file.write", "opt_file.write", "str", "str", "vars", "str"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.util.util.mkdirs"], ["", "def", "print_options", "(", "self", ",", "opt", ")", ":", "\n", "        ", "message", "=", "''", "\n", "message", "+=", "'----------------- Options ---------------\\n'", "\n", "for", "k", ",", "v", "in", "sorted", "(", "vars", "(", "opt", ")", ".", "items", "(", ")", ")", ":", "\n", "            ", "comment", "=", "''", "\n", "default", "=", "self", ".", "parser", ".", "get_default", "(", "k", ")", "\n", "if", "v", "!=", "default", ":", "\n", "                ", "comment", "=", "'\\t[default: %s]'", "%", "str", "(", "default", ")", "\n", "", "message", "+=", "'{:>25}: {:<30}{}\\n'", ".", "format", "(", "str", "(", "k", ")", ",", "str", "(", "v", ")", ",", "comment", ")", "\n", "", "message", "+=", "'----------------- End -------------------'", "\n", "print", "(", "message", ")", "\n", "\n", "# save to the disk", "\n", "expr_dir", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "checkpoints_dir", ",", "opt", ".", "name", ")", "\n", "util", ".", "mkdirs", "(", "expr_dir", ")", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "expr_dir", ",", "'opt.txt'", ")", "\n", "with", "open", "(", "file_name", ",", "'wt'", ")", "as", "opt_file", ":", "\n", "            ", "opt_file", ".", "write", "(", "message", ")", "\n", "opt_file", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.parse": [[93, 117], ["base_options.BaseOptions.gather_options", "base_options.BaseOptions.print_options", "base_options.BaseOptions.gpu_ids.split", "int", "len", "torch.cuda.set_device", "base_options.BaseOptions.gpu_ids.append", "base_options.BaseOptions.suffix.format", "vars"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.gather_options", "home.repos.pwc.inspect_result.noabrazilay_missgan.options.base_options.BaseOptions.print_options"], ["", "", "def", "parse", "(", "self", ")", ":", "\n", "\n", "        ", "opt", "=", "self", ".", "gather_options", "(", ")", "\n", "opt", ".", "isTrain", "=", "self", ".", "isTrain", "# train or test", "\n", "\n", "# process opt.suffix", "\n", "if", "opt", ".", "suffix", ":", "\n", "            ", "suffix", "=", "(", "'_'", "+", "opt", ".", "suffix", ".", "format", "(", "**", "vars", "(", "opt", ")", ")", ")", "if", "opt", ".", "suffix", "!=", "''", "else", "''", "\n", "opt", ".", "name", "=", "opt", ".", "name", "+", "suffix", "\n", "\n", "", "self", ".", "print_options", "(", "opt", ")", "\n", "\n", "# set gpu ids", "\n", "str_ids", "=", "opt", ".", "gpu_ids", ".", "split", "(", "','", ")", "\n", "opt", ".", "gpu_ids", "=", "[", "]", "\n", "for", "str_id", "in", "str_ids", ":", "\n", "            ", "id", "=", "int", "(", "str_id", ")", "\n", "if", "id", ">=", "0", ":", "\n", "                ", "opt", ".", "gpu_ids", ".", "append", "(", "id", ")", "\n", "", "", "if", "len", "(", "opt", ".", "gpu_ids", ")", ">", "0", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "opt", ".", "gpu_ids", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "opt", "=", "opt", "\n", "return", "self", ".", "opt", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MISSGANvsStarGAN.main.str2bool": [[26, 28], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "return", "v", ".", "lower", "(", ")", "in", "(", "'true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MISSGANvsStarGAN.main.subdirs": [[30, 33], ["os.listdir", "os.path.isdir", "os.path.join"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir"], ["", "def", "subdirs", "(", "dname", ")", ":", "\n", "    ", "return", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dname", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dname", ",", "d", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MISSGANvsStarGAN.main.main": [[35, 84], ["print", "torch.manual_seed", "core.solver.Solver", "munch.Munch", "core.solver.Solver.train", "len", "len", "munch.Munch", "core.solver.Solver.sample", "main.subdirs", "main.subdirs", "core.data_loader.get_train_loader", "core.data_loader.get_train_loader", "core.data_loader.get_test_loader", "core.solver.Solver.evaluate", "core.data_loader.get_test_loader", "core.data_loader.get_test_loader", "align_faces"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.train", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.sample", "home.repos.pwc.inspect_result.noabrazilay_missgan.MISSGANvsStarGAN.main.subdirs", "home.repos.pwc.inspect_result.noabrazilay_missgan.MISSGANvsStarGAN.main.subdirs", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_train_loader", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_train_loader", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_test_loader", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.evaluate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_test_loader", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_test_loader", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.align_faces"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "print", "(", "args", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "solver", "=", "Solver", "(", "args", ")", "\n", "\n", "if", "args", ".", "mode", "==", "'train'", ":", "\n", "        ", "assert", "len", "(", "subdirs", "(", "args", ".", "train_img_dir", ")", ")", "==", "args", ".", "num_domains", "\n", "assert", "len", "(", "subdirs", "(", "args", ".", "val_img_dir", ")", ")", "==", "args", ".", "num_domains", "\n", "loaders", "=", "Munch", "(", "src", "=", "get_train_loader", "(", "root", "=", "args", ".", "train_img_dir", ",", "\n", "which", "=", "'source'", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "prob", "=", "args", ".", "randcrop_prob", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ",", "\n", "ref", "=", "get_train_loader", "(", "root", "=", "args", ".", "train_img_dir", ",", "\n", "which", "=", "'reference'", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "prob", "=", "args", ".", "randcrop_prob", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ",", "\n", "val", "=", "get_test_loader", "(", "root", "=", "args", ".", "val_img_dir", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ")", "\n", "solver", ".", "train", "(", "loaders", ")", "\n", "", "elif", "args", ".", "mode", "==", "'sample'", ":", "\n", "# assert len(subdirs(args.src_dir)) == args.num_domains", "\n", "# assert len(subdirs(args.ref_dir)) == args.num_domains", "\n", "        ", "loaders", "=", "Munch", "(", "src", "=", "get_test_loader", "(", "root", "=", "args", ".", "src_dir", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ",", "\n", "ref", "=", "get_test_loader", "(", "root", "=", "args", ".", "ref_dir", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", ")", "\n", "solver", ".", "sample", "(", "loaders", ")", "\n", "", "elif", "args", ".", "mode", "==", "'eval'", ":", "\n", "        ", "solver", ".", "evaluate", "(", ")", "\n", "", "elif", "args", ".", "mode", "==", "'align'", ":", "\n", "        ", "from", "core", ".", "wing", "import", "align_faces", "\n", "align_faces", "(", "args", ",", "args", ".", "inp_dir", ",", "args", ".", "out_dir", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.eval.calculate_metrics": [[25, 120], ["torch.no_grad", "print", "torch.device", "os.listdir", "os.listdir.sort", "len", "print", "collections.OrderedDict", "enumerate", "collections.OrderedDict.items", "os.path.join", "core.utils.save_json", "eval.calculate_fid_for_all_tasks", "enumerate", "torch.cuda.is_available", "os.path.join", "core.data_loader.get_eval_loader", "os.path.join", "core.data_loader.get_eval_loader", "os.path.join", "shutil.rmtree", "os.makedirs", "print", "enumerate", "numpy.array().mean", "len", "tqdm.tqdm", "x_src.to.size", "x_src.to.to", "torch.tensor().to", "range", "metrics.lpips.calculate_lpips_given_images", "lpips_values.append", "nets.fan.get_heatmap", "nets.generator", "group_of_images.append", "range", "numpy.array", "len", "torch.tensor", "torch.randn().to", "nets.mapping_network", "nets.style_encoder", "os.path.join", "core.utils.save_image", "next().to", "next().to.size", "torch.randn", "iter", "next().to", "next", "next"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_json", "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.eval.calculate_fid_for_all_tasks", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.calculate_lpips_given_images", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "calculate_metrics", "(", "nets", ",", "args", ",", "step", ",", "mode", ")", ":", "\n", "    ", "print", "(", "'Calculating evaluation metrics...'", ")", "\n", "assert", "mode", "in", "[", "'latent'", ",", "'reference'", "]", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "domains", "=", "os", ".", "listdir", "(", "args", ".", "val_img_dir", ")", "\n", "domains", ".", "sort", "(", ")", "\n", "num_domains", "=", "len", "(", "domains", ")", "\n", "print", "(", "'Number of domains: %d'", "%", "num_domains", ")", "\n", "\n", "lpips_dict", "=", "OrderedDict", "(", ")", "\n", "for", "trg_idx", ",", "trg_domain", "in", "enumerate", "(", "domains", ")", ":", "\n", "        ", "src_domains", "=", "[", "x", "for", "x", "in", "domains", "if", "x", "!=", "trg_domain", "]", "\n", "\n", "if", "mode", "==", "'reference'", ":", "\n", "            ", "path_ref", "=", "os", ".", "path", ".", "join", "(", "args", ".", "val_img_dir", ",", "trg_domain", ")", "\n", "loader_ref", "=", "get_eval_loader", "(", "root", "=", "path_ref", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "imagenet_normalize", "=", "False", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "", "for", "src_idx", ",", "src_domain", "in", "enumerate", "(", "src_domains", ")", ":", "\n", "            ", "path_src", "=", "os", ".", "path", ".", "join", "(", "args", ".", "val_img_dir", ",", "src_domain", ")", "\n", "loader_src", "=", "get_eval_loader", "(", "root", "=", "path_src", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ",", "\n", "imagenet_normalize", "=", "False", ")", "\n", "\n", "task", "=", "'%s2%s'", "%", "(", "src_domain", ",", "trg_domain", ")", "\n", "path_fake", "=", "os", ".", "path", ".", "join", "(", "args", ".", "eval_dir", ",", "task", ")", "\n", "shutil", ".", "rmtree", "(", "path_fake", ",", "ignore_errors", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "path_fake", ")", "\n", "\n", "lpips_values", "=", "[", "]", "\n", "print", "(", "'Generating images and calculating LPIPS for %s...'", "%", "task", ")", "\n", "for", "i", ",", "x_src", "in", "enumerate", "(", "tqdm", "(", "loader_src", ",", "total", "=", "len", "(", "loader_src", ")", ")", ")", ":", "\n", "                ", "N", "=", "x_src", ".", "size", "(", "0", ")", "\n", "x_src", "=", "x_src", ".", "to", "(", "device", ")", "\n", "y_trg", "=", "torch", ".", "tensor", "(", "[", "trg_idx", "]", "*", "N", ")", ".", "to", "(", "device", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "\n", "# generate 10 outputs from the same input", "\n", "group_of_images", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "args", ".", "num_outs_per_domain", ")", ":", "\n", "                    ", "if", "mode", "==", "'latent'", ":", "\n", "                        ", "z_trg", "=", "torch", ".", "randn", "(", "N", ",", "args", ".", "latent_dim", ")", ".", "to", "(", "device", ")", "\n", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "", "else", ":", "\n", "                        ", "try", ":", "\n", "                            ", "x_ref", "=", "next", "(", "iter_ref", ")", ".", "to", "(", "device", ")", "\n", "", "except", ":", "\n", "                            ", "iter_ref", "=", "iter", "(", "loader_ref", ")", "\n", "x_ref", "=", "next", "(", "iter_ref", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "x_ref", ".", "size", "(", "0", ")", ">", "N", ":", "\n", "                            ", "x_ref", "=", "x_ref", "[", ":", "N", "]", "\n", "", "s_trg", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_trg", ")", "\n", "\n", "", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "group_of_images", ".", "append", "(", "x_fake", ")", "\n", "\n", "# save generated images to calculate FID later", "\n", "for", "k", "in", "range", "(", "N", ")", ":", "\n", "                        ", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "path_fake", ",", "\n", "'%.4i_%.2i.png'", "%", "(", "i", "*", "args", ".", "val_batch_size", "+", "(", "k", "+", "1", ")", ",", "j", "+", "1", ")", ")", "\n", "utils", ".", "save_image", "(", "x_fake", "[", "k", "]", ",", "ncol", "=", "1", ",", "filename", "=", "filename", ")", "\n", "\n", "", "", "lpips_value", "=", "calculate_lpips_given_images", "(", "group_of_images", ")", "\n", "lpips_values", ".", "append", "(", "lpips_value", ")", "\n", "\n", "# calculate LPIPS for each task (e.g. cat2dog, dog2cat)", "\n", "", "lpips_mean", "=", "np", ".", "array", "(", "lpips_values", ")", ".", "mean", "(", ")", "\n", "lpips_dict", "[", "'LPIPS_%s/%s'", "%", "(", "mode", ",", "task", ")", "]", "=", "lpips_mean", "\n", "\n", "# delete dataloaders", "\n", "", "del", "loader_src", "\n", "if", "mode", "==", "'reference'", ":", "\n", "            ", "del", "loader_ref", "\n", "del", "iter_ref", "\n", "\n", "# calculate the average LPIPS for all tasks", "\n", "", "", "lpips_mean", "=", "0", "\n", "for", "_", ",", "value", "in", "lpips_dict", ".", "items", "(", ")", ":", "\n", "        ", "lpips_mean", "+=", "value", "/", "len", "(", "lpips_dict", ")", "\n", "", "lpips_dict", "[", "'LPIPS_%s/mean'", "%", "mode", "]", "=", "lpips_mean", "\n", "\n", "# report LPIPS values", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "eval_dir", ",", "'LPIPS_%.5i_%s.json'", "%", "(", "step", ",", "mode", ")", ")", "\n", "utils", ".", "save_json", "(", "lpips_dict", ",", "filename", ")", "\n", "\n", "# calculate and report fid values", "\n", "calculate_fid_for_all_tasks", "(", "args", ",", "domains", ",", "step", "=", "step", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.eval.calculate_fid_for_all_tasks": [[122, 148], ["print", "collections.OrderedDict", "collections.OrderedDict.items", "os.path.join", "core.utils.save_json", "os.path.join", "os.path.join", "print", "metrics.fid.calculate_fid_given_paths", "len"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_json", "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.fid.calculate_fid_given_paths"], ["", "def", "calculate_fid_for_all_tasks", "(", "args", ",", "domains", ",", "step", ",", "mode", ")", ":", "\n", "    ", "print", "(", "'Calculating FID for all tasks...'", ")", "\n", "fid_values", "=", "OrderedDict", "(", ")", "\n", "for", "trg_domain", "in", "domains", ":", "\n", "        ", "src_domains", "=", "[", "x", "for", "x", "in", "domains", "if", "x", "!=", "trg_domain", "]", "\n", "\n", "for", "src_domain", "in", "src_domains", ":", "\n", "            ", "task", "=", "'%s2%s'", "%", "(", "src_domain", ",", "trg_domain", ")", "\n", "path_real", "=", "os", ".", "path", ".", "join", "(", "args", ".", "train_img_dir", ",", "trg_domain", ")", "\n", "path_fake", "=", "os", ".", "path", ".", "join", "(", "args", ".", "eval_dir", ",", "task", ")", "\n", "print", "(", "'Calculating FID for %s...'", "%", "task", ")", "\n", "fid_value", "=", "calculate_fid_given_paths", "(", "\n", "paths", "=", "[", "path_real", ",", "path_fake", "]", ",", "\n", "img_size", "=", "args", ".", "img_size", ",", "\n", "batch_size", "=", "args", ".", "val_batch_size", ")", "\n", "fid_values", "[", "'FID_%s/%s'", "%", "(", "mode", ",", "task", ")", "]", "=", "fid_value", "\n", "\n", "# calculate the average FID for all tasks", "\n", "", "", "fid_mean", "=", "0", "\n", "for", "_", ",", "value", "in", "fid_values", ".", "items", "(", ")", ":", "\n", "        ", "fid_mean", "+=", "value", "/", "len", "(", "fid_values", ")", "\n", "", "fid_values", "[", "'FID_%s/mean'", "%", "mode", "]", "=", "fid_mean", "\n", "\n", "# report FID values", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "eval_dir", ",", "'FID_%.5i_%s.json'", "%", "(", "step", ",", "mode", ")", ")", "\n", "utils", ".", "save_json", "(", "fid_values", ",", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.AlexNet.__init__": [[21, 28], ["torch.Module.__init__", "torchvision.models.alexnet", "isinstance", "lpips.AlexNet.channels.append"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "models", ".", "alexnet", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "channels", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "self", ".", "channels", ".", "append", "(", "layer", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.AlexNet.forward": [[29, 36], ["layer", "isinstance", "fmaps.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "fmaps", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ")", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "ReLU", ")", ":", "\n", "                ", "fmaps", ".", "append", "(", "x", ")", "\n", "", "", "return", "fmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.Conv1x1.__init__": [[39, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.Conv1x1.forward": [[45, 47], ["lpips.Conv1x1.main"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MISSGANvsStarGAN.main.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.LPIPS.__init__": [[50, 60], ["torch.Module.__init__", "lpips.AlexNet", "torch.ModuleList", "torch.ModuleList", "lpips.LPIPS._load_lpips_weights", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "torch.tensor().view().cuda", "lpips.LPIPS.lpips_weights.append", "lpips.Conv1x1", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.LPIPS._load_lpips_weights"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alexnet", "=", "AlexNet", "(", ")", "\n", "self", ".", "lpips_weights", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "channels", "in", "self", ".", "alexnet", ".", "channels", ":", "\n", "            ", "self", ".", "lpips_weights", ".", "append", "(", "Conv1x1", "(", "channels", ",", "1", ")", ")", "\n", "", "self", ".", "_load_lpips_weights", "(", ")", "\n", "# imagenet normalization for range [-1, 1]", "\n", "self", ".", "mu", "=", "torch", ".", "tensor", "(", "[", "-", "0.03", ",", "-", "0.088", ",", "-", "0.188", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "sigma", "=", "torch", ".", "tensor", "(", "[", "0.458", ",", "0.448", ",", "0.450", "]", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.LPIPS._load_lpips_weights": [[61, 71], ["lpips.LPIPS.state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.load.items", "torch.load.items", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "own_state_dict[].copy_", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load"], ["", "def", "_load_lpips_weights", "(", "self", ")", ":", "\n", "        ", "own_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "'metrics/lpips_weights.ckpt'", ")", "\n", "", "else", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "'metrics/lpips_weights.ckpt'", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "in", "own_state_dict", ":", "\n", "                ", "own_state_dict", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.LPIPS.forward": [[72, 83], ["lpips.LPIPS.alexnet", "lpips.LPIPS.alexnet", "zip", "lpips.normalize", "lpips.normalize", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "conv1x1"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.normalize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.normalize"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", "=", "(", "x", "-", "self", ".", "mu", ")", "/", "self", ".", "sigma", "\n", "y", "=", "(", "y", "-", "self", ".", "mu", ")", "/", "self", ".", "sigma", "\n", "x_fmaps", "=", "self", ".", "alexnet", "(", "x", ")", "\n", "y_fmaps", "=", "self", ".", "alexnet", "(", "y", ")", "\n", "lpips_value", "=", "0", "\n", "for", "x_fmap", ",", "y_fmap", ",", "conv1x1", "in", "zip", "(", "x_fmaps", ",", "y_fmaps", ",", "self", ".", "lpips_weights", ")", ":", "\n", "            ", "x_fmap", "=", "normalize", "(", "x_fmap", ")", "\n", "y_fmap", "=", "normalize", "(", "y_fmap", ")", "\n", "lpips_value", "+=", "torch", ".", "mean", "(", "conv1x1", "(", "(", "x_fmap", "-", "y_fmap", ")", "**", "2", ")", ")", "\n", "", "return", "lpips_value", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.normalize": [[16, 18], ["torch.rsqrt", "torch.rsqrt", "torch.sum", "torch.sum"], "function", ["None"], ["def", "normalize", "(", "x", ",", "eps", "=", "1e-10", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "rsqrt", "(", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.lpips.calculate_lpips_given_images": [[85, 99], ["torch.no_grad", "torch.no_grad", "torch.device", "torch.device", "LPIPS().eval().to", "len", "range", "torch.mean", "torch.mean", "torch.mean.item", "range", "torch.stack", "torch.stack", "torch.cuda.is_available", "torch.cuda.is_available", "LPIPS().eval", "lpips_values.append", "LPIPS().eval().to.", "lpips.LPIPS"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "calculate_lpips_given_images", "(", "group_of_images", ")", ":", "\n", "# group_of_images = [torch.randn(N, C, H, W) for _ in range(10)]", "\n", "    ", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "lpips", "=", "LPIPS", "(", ")", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "lpips_values", "=", "[", "]", "\n", "num_rand_outputs", "=", "len", "(", "group_of_images", ")", "\n", "\n", "# calculate the average of pairwise distances among all random outputs", "\n", "for", "i", "in", "range", "(", "num_rand_outputs", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "num_rand_outputs", ")", ":", "\n", "            ", "lpips_values", ".", "append", "(", "lpips", "(", "group_of_images", "[", "i", "]", ",", "group_of_images", "[", "j", "]", ")", ")", "\n", "", "", "lpips_value", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "lpips_values", ",", "dim", "=", "0", ")", ")", "\n", "return", "lpips_value", ".", "item", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.fid.InceptionV3.__init__": [[28, 47], ["torch.Module.__init__", "torchvision.models.inception_v3", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "block2", "=", "nn", ".", "Sequential", "(", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "block3", "=", "nn", ".", "Sequential", "(", "\n", "inception", ".", "Mixed_5b", ",", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "inception", ".", "Mixed_6e", ")", "\n", "self", ".", "block4", "=", "nn", ".", "Sequential", "(", "\n", "inception", ".", "Mixed_7a", ",", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.fid.InceptionV3.forward": [[48, 54], ["fid.InceptionV3.block1", "fid.InceptionV3.block2", "fid.InceptionV3.block3", "fid.InceptionV3.block4", "fid.InceptionV3.view", "fid.InceptionV3.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.fid.frechet_distance": [[56, 60], ["scipy.linalg.sqrtm", "numpy.real", "numpy.dot", "numpy.sum", "numpy.trace"], "function", ["None"], ["", "", "def", "frechet_distance", "(", "mu", ",", "cov", ",", "mu2", ",", "cov2", ")", ":", "\n", "    ", "cc", ",", "_", "=", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "cov", ",", "cov2", ")", ",", "disp", "=", "False", ")", "\n", "dist", "=", "np", ".", "sum", "(", "(", "mu", "-", "mu2", ")", "**", "2", ")", "+", "np", ".", "trace", "(", "cov", "+", "cov2", "-", "2", "*", "cc", ")", "\n", "return", "np", ".", "real", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.fid.calculate_fid_given_paths": [[62, 80], ["torch.no_grad", "torch.no_grad", "print", "torch.device", "torch.device", "InceptionV3().eval().to", "fid.frechet_distance", "core.data_loader.get_eval_loader", "tqdm", "torch.cat().cpu().detach().numpy", "torch.cat().cpu().detach().numpy", "mu.append", "cov.append", "torch.cuda.is_available", "torch.cuda.is_available", "InceptionV3().eval", "InceptionV3().eval().to.", "torch.cat().cpu().detach().numpy.append", "numpy.mean", "numpy.cov", "len", "x.to", "torch.cat().cpu().detach", "torch.cat().cpu().detach", "fid.InceptionV3", "torch.cat().cpu", "torch.cat().cpu", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.fid.frechet_distance", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_eval_loader", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "calculate_fid_given_paths", "(", "paths", ",", "img_size", "=", "256", ",", "batch_size", "=", "50", ")", ":", "\n", "    ", "print", "(", "'Calculating FID given paths %s and %s...'", "%", "(", "paths", "[", "0", "]", ",", "paths", "[", "1", "]", ")", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "inception", "=", "InceptionV3", "(", ")", ".", "eval", "(", ")", ".", "to", "(", "device", ")", "\n", "loaders", "=", "[", "get_eval_loader", "(", "path", ",", "img_size", ",", "batch_size", ")", "for", "path", "in", "paths", "]", "\n", "\n", "mu", ",", "cov", "=", "[", "]", ",", "[", "]", "\n", "for", "loader", "in", "loaders", ":", "\n", "        ", "actvs", "=", "[", "]", "\n", "for", "x", "in", "tqdm", "(", "loader", ",", "total", "=", "len", "(", "loader", ")", ")", ":", "\n", "            ", "actv", "=", "inception", "(", "x", ".", "to", "(", "device", ")", ")", "\n", "actvs", ".", "append", "(", "actv", ")", "\n", "", "actvs", "=", "torch", ".", "cat", "(", "actvs", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "mu", ".", "append", "(", "np", ".", "mean", "(", "actvs", ",", "axis", "=", "0", ")", ")", "\n", "cov", ".", "append", "(", "np", ".", "cov", "(", "actvs", ",", "rowvar", "=", "False", ")", ")", "\n", "", "fid_value", "=", "frechet_distance", "(", "mu", "[", "0", "]", ",", "cov", "[", "0", "]", ",", "mu", "[", "1", "]", ",", "cov", "[", "1", "]", ")", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.DefaultDataset.__init__": [[34, 39], ["data_loader.listdir", "data_loader.DefaultDataset.samples.sort"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "samples", "=", "listdir", "(", "root", ")", "\n", "self", ".", "samples", ".", "sort", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "targets", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.DefaultDataset.__getitem__": [[40, 46], ["PIL.Image.open().convert", "data_loader.DefaultDataset.transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "fname", "=", "self", ".", "samples", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "fname", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.DefaultDataset.__len__": [[47, 49], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.ReferenceDataset.__init__": [[52, 55], ["data_loader.ReferenceDataset._make_dataset"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.ReferenceDataset._make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "samples", ",", "self", ".", "targets", "=", "self", ".", "_make_dataset", "(", "root", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.ReferenceDataset._make_dataset": [[56, 66], ["os.listdir", "enumerate", "sorted", "os.path.join", "data_loader.listdir", "random.sample", "list", "len", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.sample"], ["", "def", "_make_dataset", "(", "self", ",", "root", ")", ":", "\n", "        ", "domains", "=", "os", ".", "listdir", "(", "root", ")", "\n", "fnames", ",", "fnames2", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "idx", ",", "domain", "in", "enumerate", "(", "sorted", "(", "domains", ")", ")", ":", "\n", "            ", "class_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "domain", ")", "\n", "cls_fnames", "=", "listdir", "(", "class_dir", ")", "\n", "fnames", "+=", "cls_fnames", "\n", "fnames2", "+=", "random", ".", "sample", "(", "cls_fnames", ",", "len", "(", "cls_fnames", ")", ")", "\n", "labels", "+=", "[", "idx", "]", "*", "len", "(", "cls_fnames", ")", "\n", "", "return", "list", "(", "zip", "(", "fnames", ",", "fnames2", ")", ")", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.ReferenceDataset.__getitem__": [[67, 76], ["PIL.Image.open().convert", "PIL.Image.open().convert", "data_loader.ReferenceDataset.transform", "data_loader.ReferenceDataset.transform", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "fname", ",", "fname2", "=", "self", ".", "samples", "[", "index", "]", "\n", "label", "=", "self", ".", "targets", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "fname", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img2", "=", "Image", ".", "open", "(", "fname2", ")", ".", "convert", "(", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "img2", "=", "self", ".", "transform", "(", "img2", ")", "\n", "", "return", "img", ",", "img2", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.ReferenceDataset.__len__": [[77, 79], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.InputFetcher.__init__": [[171, 177], ["torch.device", "torch.cuda.is_available"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "loader", ",", "loader_ref", "=", "None", ",", "latent_dim", "=", "16", ",", "mode", "=", "''", ")", ":", "\n", "        ", "self", ".", "loader", "=", "loader", "\n", "self", ".", "loader_ref", "=", "loader_ref", "\n", "self", ".", "latent_dim", "=", "latent_dim", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.InputFetcher._fetch_inputs": [[178, 185], ["next", "iter", "next"], "methods", ["None"], ["", "def", "_fetch_inputs", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "x", ",", "y", "=", "next", "(", "self", ".", "iter", ")", "\n", "", "except", "(", "AttributeError", ",", "StopIteration", ")", ":", "\n", "            ", "self", ".", "iter", "=", "iter", "(", "self", ".", "loader", ")", "\n", "x", ",", "y", "=", "next", "(", "self", ".", "iter", ")", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.InputFetcher._fetch_refs": [[186, 193], ["next", "iter", "next"], "methods", ["None"], ["", "def", "_fetch_refs", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "x", ",", "x2", ",", "y", "=", "next", "(", "self", ".", "iter_ref", ")", "\n", "", "except", "(", "AttributeError", ",", "StopIteration", ")", ":", "\n", "            ", "self", ".", "iter_ref", "=", "iter", "(", "self", ".", "loader_ref", ")", "\n", "x", ",", "x2", ",", "y", "=", "next", "(", "self", ".", "iter_ref", ")", "\n", "", "return", "x", ",", "x2", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.InputFetcher.__next__": [[194, 214], ["data_loader.InputFetcher._fetch_inputs", "munch.Munch", "data_loader.InputFetcher._fetch_refs", "torch.randn", "torch.randn", "munch.Munch", "x.size", "x.size", "data_loader.InputFetcher._fetch_inputs", "munch.Munch", "v.to", "munch.Munch", "munch.Munch.items"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.InputFetcher._fetch_inputs", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.InputFetcher._fetch_refs", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.InputFetcher._fetch_inputs"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_fetch_inputs", "(", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "x_ref", ",", "x_ref2", ",", "y_ref", "=", "self", ".", "_fetch_refs", "(", ")", "\n", "z_trg", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "latent_dim", ")", "\n", "z_trg2", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "latent_dim", ")", "\n", "inputs", "=", "Munch", "(", "x_src", "=", "x", ",", "y_src", "=", "y", ",", "y_ref", "=", "y_ref", ",", "\n", "x_ref", "=", "x_ref", ",", "x_ref2", "=", "x_ref2", ",", "\n", "z_trg", "=", "z_trg", ",", "z_trg2", "=", "z_trg2", ")", "\n", "", "elif", "self", ".", "mode", "==", "'val'", ":", "\n", "            ", "x_ref", ",", "y_ref", "=", "self", ".", "_fetch_inputs", "(", ")", "\n", "inputs", "=", "Munch", "(", "x_src", "=", "x", ",", "y_src", "=", "y", ",", "\n", "x_ref", "=", "x_ref", ",", "y_ref", "=", "y_ref", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "inputs", "=", "Munch", "(", "x", "=", "x", ",", "y", "=", "y", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "return", "Munch", "(", "{", "k", ":", "v", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", "}", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir": [[27, 31], ["list", "itertools.chain", "list", "pathlib.Path().rglob", "pathlib.Path"], "function", ["None"], ["def", "listdir", "(", "dname", ")", ":", "\n", "    ", "fnames", "=", "list", "(", "chain", "(", "*", "[", "list", "(", "Path", "(", "dname", ")", ".", "rglob", "(", "'*.'", "+", "ext", ")", ")", "\n", "for", "ext", "in", "[", "'png'", ",", "'jpg'", ",", "'jpeg'", ",", "'JPG'", "]", "]", ")", ")", "\n", "return", "fnames", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader._make_balanced_sampler": [[81, 86], ["numpy.bincount", "torch.utils.data.sampler.WeightedRandomSampler", "len"], "function", ["None"], ["", "", "def", "_make_balanced_sampler", "(", "labels", ")", ":", "\n", "    ", "class_counts", "=", "np", ".", "bincount", "(", "labels", ")", "\n", "class_weights", "=", "1.", "/", "class_counts", "\n", "weights", "=", "class_weights", "[", "labels", "]", "\n", "return", "WeightedRandomSampler", "(", "weights", ",", "len", "(", "weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_train_loader": [[88, 121], ["print", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.Lambda", "torchvision.transforms.Compose", "data_loader._make_balanced_sampler", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "data_loader.ReferenceDataset", "transforms.RandomResizedCrop.", "random.random"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader._make_balanced_sampler"], ["", "def", "get_train_loader", "(", "root", ",", "which", "=", "'source'", ",", "img_size", "=", "256", ",", "\n", "batch_size", "=", "8", ",", "prob", "=", "0.5", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "print", "(", "'Preparing DataLoader to fetch %s images '", "\n", "'during the training phase...'", "%", "which", ")", "\n", "\n", "crop", "=", "transforms", ".", "RandomResizedCrop", "(", "\n", "img_size", ",", "scale", "=", "[", "0.8", ",", "1.0", "]", ",", "ratio", "=", "[", "0.9", ",", "1.1", "]", ")", "\n", "rand_crop", "=", "transforms", ".", "Lambda", "(", "\n", "lambda", "x", ":", "crop", "(", "x", ")", "if", "random", ".", "random", "(", ")", "<", "prob", "else", "x", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "rand_crop", ",", "\n", "transforms", ".", "Resize", "(", "[", "img_size", ",", "img_size", "]", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "\n", "if", "which", "==", "'source'", ":", "\n", "        ", "dataset", "=", "ImageFolder", "(", "root", ",", "transform", ")", "\n", "", "elif", "which", "==", "'reference'", ":", "\n", "        ", "dataset", "=", "ReferenceDataset", "(", "root", ",", "transform", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "sampler", "=", "_make_balanced_sampler", "(", "dataset", ".", "targets", ")", "\n", "return", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_eval_loader": [[123, 150], ["print", "torchvision.transforms.Compose", "data_loader.DefaultDataset", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_eval_loader", "(", "root", ",", "img_size", "=", "256", ",", "batch_size", "=", "32", ",", "\n", "imagenet_normalize", "=", "True", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "4", ",", "drop_last", "=", "False", ")", ":", "\n", "    ", "print", "(", "'Preparing DataLoader for the evaluation phase...'", ")", "\n", "if", "imagenet_normalize", ":", "\n", "        ", "height", ",", "width", "=", "299", ",", "299", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "", "else", ":", "\n", "        ", "height", ",", "width", "=", "img_size", ",", "img_size", "\n", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "img_size", ",", "img_size", "]", ")", ",", "\n", "transforms", ".", "Resize", "(", "[", "height", ",", "width", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "mean", ",", "std", "=", "std", ")", "\n", "]", ")", "\n", "\n", "dataset", "=", "DefaultDataset", "(", "root", ",", "transform", "=", "transform", ")", "\n", "return", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "drop_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.get_test_loader": [[152, 168], ["print", "torchvision.transforms.Compose", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_test_loader", "(", "root", ",", "img_size", "=", "256", ",", "batch_size", "=", "32", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", ":", "\n", "    ", "print", "(", "'Preparing DataLoader for the generation phase...'", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "img_size", ",", "img_size", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "\n", "dataset", "=", "ImageFolder", "(", "root", ",", "transform", ")", "\n", "return", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.__init__": [[29, 67], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "core.model.build_model", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "solver.Solver.nets.items", "solver.Solver.nets_ema.items", "solver.Solver.to", "solver.Solver.named_children", "core.print_network", "setattr", "setattr", "munch.Munch", "solver.Solver.nets.keys", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "core.checkpoint.CheckpointIO", "core.checkpoint.CheckpointIO", "core.checkpoint.CheckpointIO", "core.checkpoint.CheckpointIO", "print", "network.apply", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "solver.Solver.nets[].parameters"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.build_model", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.print_network"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "self", ".", "nets", ",", "self", ".", "nets_ema", ",", "self", ".", "vgg", ",", "self", ".", "VggExtract", "=", "build_model", "(", "args", ")", "\n", "self", ".", "instancenorm", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "L1Loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "# below setattrs are to make networks be children of Solver, e.g., for self.to(self.device)", "\n", "for", "name", ",", "module", "in", "self", ".", "nets", ".", "items", "(", ")", ":", "\n", "            ", "utils", ".", "print_network", "(", "module", ",", "name", ")", "\n", "setattr", "(", "self", ",", "name", ",", "module", ")", "\n", "", "for", "name", ",", "module", "in", "self", ".", "nets_ema", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "name", "+", "'_ema'", ",", "module", ")", "\n", "\n", "", "if", "args", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "optims", "=", "Munch", "(", ")", "\n", "for", "net", "in", "self", ".", "nets", ".", "keys", "(", ")", ":", "\n", "                ", "if", "net", "==", "'fan'", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "optims", "[", "net", "]", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "nets", "[", "net", "]", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "f_lr", "if", "net", "==", "'mapping_network'", "else", "args", ".", "lr", ",", "\n", "betas", "=", "[", "args", ".", "beta1", ",", "args", ".", "beta2", "]", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "", "self", ".", "ckptios", "=", "[", "CheckpointIO", "(", "ospj", "(", "args", ".", "checkpoint_dir", ",", "'100000_nets.ckpt'", ")", ",", "**", "self", ".", "nets", ")", ",", "\n", "CheckpointIO", "(", "ospj", "(", "args", ".", "checkpoint_dir", ",", "'100000_nets_ema.ckpt'", ")", ",", "**", "self", ".", "nets_ema", ")", ",", "\n", "CheckpointIO", "(", "ospj", "(", "args", ".", "checkpoint_dir", ",", "'100000_optims.ckpt'", ")", ",", "**", "self", ".", "optims", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "ckptios", "=", "[", "CheckpointIO", "(", "ospj", "(", "args", ".", "checkpoint_dir", ",", "'100000_nets_ema.ckpt'", ")", ",", "**", "self", ".", "nets_ema", ")", "]", "\n", "\n", "", "self", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "name", ",", "network", "in", "self", ".", "named_children", "(", ")", ":", "\n", "# Do not initialize the FAN parameters", "\n", "            ", "if", "(", "'ema'", "not", "in", "name", ")", "and", "(", "'fan'", "not", "in", "name", ")", ":", "\n", "                ", "print", "(", "'Initializing %s...'", "%", "name", ")", "\n", "network", ".", "apply", "(", "utils", ".", "he_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._save_checkpoint": [[68, 71], ["ckptio.save"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["", "", "", "def", "_save_checkpoint", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "ckptio", "in", "self", ".", "ckptios", ":", "\n", "            ", "ckptio", ".", "save", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._load_checkpoint": [[72, 75], ["ckptio.load"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load"], ["", "", "def", "_load_checkpoint", "(", "self", ",", "step", ")", ":", "\n", "        ", "for", "ckptio", "in", "self", ".", "ckptios", ":", "\n", "            ", "ckptio", ".", "load", "(", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._reset_grad": [[76, 79], ["solver.Solver.optims.values", "optim.zero_grad"], "methods", ["None"], ["", "", "def", "_reset_grad", "(", "self", ")", ":", "\n", "        ", "for", "optim", "in", "self", ".", "optims", ".", "values", "(", ")", ":", "\n", "            ", "optim", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.train": [[80, 173], ["core.data_loader.InputFetcher", "core.data_loader.InputFetcher", "next", "print", "time.time", "range", "solver.Solver._load_checkpoint", "next", "solver.compute_d_loss", "solver.Solver._reset_grad", "d_loss.backward", "optims.discriminator.step", "solver.compute_d_loss", "solver.Solver._reset_grad", "d_loss.backward", "optims.discriminator.step", "solver.compute_g_loss", "solver.Solver._reset_grad", "g_loss.backward", "optims.generator.step", "optims.mapping_network.step", "optims.style_encoder.step", "solver.compute_g_loss", "solver.Solver._reset_grad", "g_loss.backward", "optims.generator.step", "solver.moving_average", "solver.moving_average", "solver.moving_average", "nets.fan.get_heatmap", "dict", "zip", "print", "os.makedirs", "core.debug_image", "solver.Solver._save_checkpoint", "metrics.eval.calculate_metrics", "metrics.eval.calculate_metrics", "time.time", "str", "loss.items", "datetime.timedelta", "dict.items"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._load_checkpoint", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.compute_d_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._reset_grad", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.compute_d_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._reset_grad", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.compute_g_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._reset_grad", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.compute_g_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._reset_grad", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.moving_average", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.moving_average", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.moving_average", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.debug_image", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._save_checkpoint", "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.eval.calculate_metrics", "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.eval.calculate_metrics"], ["", "", "def", "train", "(", "self", ",", "loaders", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "nets", "=", "self", ".", "nets", "\n", "nets_ema", "=", "self", ".", "nets_ema", "\n", "optims", "=", "self", ".", "optims", "\n", "\n", "# fetch random validation images for debugging", "\n", "fetcher", "=", "InputFetcher", "(", "loaders", ".", "src", ",", "loaders", ".", "ref", ",", "args", ".", "latent_dim", ",", "'train'", ")", "\n", "fetcher_val", "=", "InputFetcher", "(", "loaders", ".", "val", ",", "None", ",", "args", ".", "latent_dim", ",", "'val'", ")", "\n", "inputs_val", "=", "next", "(", "fetcher_val", ")", "\n", "\n", "# resume training if necessary", "\n", "if", "args", ".", "resume_iter", ">", "0", ":", "\n", "            ", "self", ".", "_load_checkpoint", "(", "args", ".", "resume_iter", ")", "\n", "\n", "# remember the initial value of ds weight", "\n", "", "initial_lambda_ds", "=", "args", ".", "lambda_ds", "\n", "\n", "print", "(", "'Start training...'", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "resume_iter", ",", "args", ".", "total_iters", ")", ":", "\n", "# fetch images and labels", "\n", "            ", "inputs", "=", "next", "(", "fetcher", ")", "\n", "x_real", ",", "y_org", "=", "inputs", ".", "x_src", ",", "inputs", ".", "y_src", "\n", "x_ref", ",", "x_ref2", ",", "y_trg", "=", "inputs", ".", "x_ref", ",", "inputs", ".", "x_ref2", ",", "inputs", ".", "y_ref", "\n", "z_trg", ",", "z_trg2", "=", "inputs", ".", "z_trg", ",", "inputs", ".", "z_trg2", "\n", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_real", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "\n", "# train the discriminator", "\n", "d_loss", ",", "d_losses_latent", "=", "compute_d_loss", "(", "\n", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "z_trg", "=", "z_trg", ",", "masks", "=", "masks", ")", "\n", "self", ".", "_reset_grad", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "optims", ".", "discriminator", ".", "step", "(", ")", "\n", "\n", "d_loss", ",", "d_losses_ref", "=", "compute_d_loss", "(", "\n", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "x_ref", "=", "x_ref", ",", "masks", "=", "masks", ")", "\n", "self", ".", "_reset_grad", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "optims", ".", "discriminator", ".", "step", "(", ")", "\n", "\n", "# train the generator", "\n", "g_loss", ",", "g_losses_latent", "=", "compute_g_loss", "(", "\n", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "z_trgs", "=", "[", "z_trg", ",", "z_trg2", "]", ",", "masks", "=", "masks", ",", "VggExtract", "=", "self", ".", "VggExtract", ",", "IN", "=", "self", ".", "instancenorm", ",", "L1Loss", "=", "self", ".", "L1Loss", ")", "\n", "self", ".", "_reset_grad", "(", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "optims", ".", "generator", ".", "step", "(", ")", "\n", "optims", ".", "mapping_network", ".", "step", "(", ")", "\n", "optims", ".", "style_encoder", ".", "step", "(", ")", "\n", "\n", "g_loss", ",", "g_losses_ref", "=", "compute_g_loss", "(", "\n", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "x_refs", "=", "[", "x_ref", ",", "x_ref2", "]", ",", "masks", "=", "masks", ",", "VggExtract", "=", "self", ".", "VggExtract", ",", "IN", "=", "self", ".", "instancenorm", ",", "L1Loss", "=", "self", ".", "L1Loss", ")", "\n", "self", ".", "_reset_grad", "(", ")", "\n", "g_loss", ".", "backward", "(", ")", "\n", "optims", ".", "generator", ".", "step", "(", ")", "\n", "\n", "# compute moving average of network parameters", "\n", "moving_average", "(", "nets", ".", "generator", ",", "nets_ema", ".", "generator", ",", "beta", "=", "0.999", ")", "\n", "moving_average", "(", "nets", ".", "mapping_network", ",", "nets_ema", ".", "mapping_network", ",", "beta", "=", "0.999", ")", "\n", "moving_average", "(", "nets", ".", "style_encoder", ",", "nets_ema", ".", "style_encoder", ",", "beta", "=", "0.999", ")", "\n", "\n", "# decay weight for diversity sensitive loss", "\n", "if", "args", ".", "lambda_ds", ">", "0", ":", "\n", "                ", "args", ".", "lambda_ds", "-=", "(", "initial_lambda_ds", "/", "args", ".", "ds_iter", ")", "\n", "\n", "# print out log info", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "print_every", "==", "0", ":", "\n", "                ", "elapsed", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "elapsed", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "elapsed", ")", ")", "[", ":", "-", "7", "]", "\n", "log", "=", "\"Elapsed time [%s], Iteration [%i/%i], \"", "%", "(", "elapsed", ",", "i", "+", "1", ",", "args", ".", "total_iters", ")", "\n", "all_losses", "=", "dict", "(", ")", "\n", "for", "loss", ",", "prefix", "in", "zip", "(", "[", "d_losses_latent", ",", "d_losses_ref", ",", "g_losses_latent", ",", "g_losses_ref", "]", ",", "\n", "[", "'D/latent_'", ",", "'D/ref_'", ",", "'G/latent_'", ",", "'G/ref_'", "]", ")", ":", "\n", "                    ", "for", "key", ",", "value", "in", "loss", ".", "items", "(", ")", ":", "\n", "                        ", "all_losses", "[", "prefix", "+", "key", "]", "=", "value", "\n", "", "", "all_losses", "[", "'G/lambda_ds'", "]", "=", "args", ".", "lambda_ds", "\n", "log", "+=", "' '", ".", "join", "(", "[", "'%s: [%.4f]'", "%", "(", "key", ",", "value", ")", "for", "key", ",", "value", "in", "all_losses", ".", "items", "(", ")", "]", ")", "\n", "print", "(", "log", ")", "\n", "\n", "# generate images for debugging", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "sample_every", "==", "0", ":", "\n", "                ", "os", ".", "makedirs", "(", "args", ".", "sample_dir", ",", "exist_ok", "=", "True", ")", "\n", "utils", ".", "debug_image", "(", "nets_ema", ",", "args", ",", "inputs", "=", "inputs_val", ",", "step", "=", "i", "+", "1", ")", "\n", "\n", "# save model checkpoints", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "save_every", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "step", "=", "i", "+", "1", ")", "\n", "\n", "# compute FID and LPIPS if necessary", "\n", "", "if", "(", "i", "+", "1", ")", "%", "args", ".", "eval_every", "==", "0", ":", "\n", "                ", "calculate_metrics", "(", "nets_ema", ",", "args", ",", "i", "+", "1", ",", "mode", "=", "'latent'", ")", "\n", "calculate_metrics", "(", "nets_ema", ",", "args", ",", "i", "+", "1", ",", "mode", "=", "'reference'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.sample": [[174, 187], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.makedirs", "solver.Solver._load_checkpoint", "next", "next", "os.path.join", "print", "core.translate_using_reference", "core.data_loader.InputFetcher", "core.data_loader.InputFetcher"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._load_checkpoint", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.translate_using_reference"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "loaders", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "nets_ema", "=", "self", ".", "nets_ema", "\n", "os", ".", "makedirs", "(", "args", ".", "result_dir", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "_load_checkpoint", "(", "args", ".", "resume_iter", ")", "\n", "\n", "src", "=", "next", "(", "InputFetcher", "(", "loaders", ".", "src", ",", "None", ",", "args", ".", "latent_dim", ",", "'test'", ")", ")", "\n", "ref", "=", "next", "(", "InputFetcher", "(", "loaders", ".", "ref", ",", "None", ",", "args", ".", "latent_dim", ",", "'test'", ")", ")", "\n", "\n", "fname", "=", "ospj", "(", "args", ".", "result_dir", ",", "'reference.jpg'", ")", "\n", "print", "(", "'Working on {}...'", ".", "format", "(", "fname", ")", ")", "\n", "utils", ".", "translate_using_reference", "(", "nets_ema", ",", "args", ",", "src", ".", "x", ",", "ref", ".", "x", ",", "ref", ".", "y", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.evaluate": [[192, 200], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "solver.Solver._load_checkpoint", "metrics.eval.calculate_metrics", "metrics.eval.calculate_metrics"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver._load_checkpoint", "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.eval.calculate_metrics", "home.repos.pwc.inspect_result.noabrazilay_missgan.metrics.eval.calculate_metrics"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "args", "\n", "nets_ema", "=", "self", ".", "nets_ema", "\n", "resume_iter", "=", "args", ".", "resume_iter", "\n", "self", ".", "_load_checkpoint", "(", "args", ".", "resume_iter", ")", "\n", "calculate_metrics", "(", "nets_ema", ",", "args", ",", "step", "=", "resume_iter", ",", "mode", "=", "'latent'", ")", "\n", "calculate_metrics", "(", "nets_ema", ",", "args", ",", "step", "=", "resume_iter", ",", "mode", "=", "'reference'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.compute_d_loss": [[202, 225], ["x_real.requires_grad_", "nets.discriminator", "solver.adv_loss", "solver.r1_reg", "nets.discriminator", "solver.adv_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nets.generator", "munch.Munch", "nets.mapping_network", "nets.style_encoder", "adv_loss.item", "adv_loss.item", "r1_reg.item"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.adv_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.r1_reg", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.adv_loss"], ["", "", "def", "compute_d_loss", "(", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "z_trg", "=", "None", ",", "x_ref", "=", "None", ",", "masks", "=", "None", ")", ":", "\n", "    ", "assert", "(", "z_trg", "is", "None", ")", "!=", "(", "x_ref", "is", "None", ")", "\n", "# with real images", "\n", "x_real", ".", "requires_grad_", "(", ")", "\n", "out", "=", "nets", ".", "discriminator", "(", "x_real", ",", "y_org", ")", "\n", "loss_real", "=", "adv_loss", "(", "out", ",", "1", ")", "\n", "loss_reg", "=", "r1_reg", "(", "out", ",", "x_real", ")", "\n", "\n", "# with fake images", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "z_trg", "is", "not", "None", ":", "\n", "            ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "", "else", ":", "# x_ref is not None", "\n", "            ", "s_trg", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_trg", ")", "\n", "\n", "", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_real", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "", "out", "=", "nets", ".", "discriminator", "(", "x_fake", ",", "y_trg", ")", "\n", "loss_fake", "=", "adv_loss", "(", "out", ",", "0", ")", "\n", "\n", "loss", "=", "loss_real", "+", "loss_fake", "+", "args", ".", "lambda_reg", "*", "loss_reg", "\n", "return", "loss", ",", "Munch", "(", "real", "=", "loss_real", ".", "item", "(", ")", ",", "\n", "fake", "=", "loss_fake", ".", "item", "(", ")", ",", "\n", "reg", "=", "loss_reg", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.compute_g_loss": [[227, 273], ["nets.generator", "nets.discriminator", "solver.adv_loss", "nets.style_encoder", "torch.mean", "torch.mean", "torch.mean", "nets.generator", "x_fake2.detach.detach", "torch.mean", "torch.mean", "torch.mean", "nets.style_encoder", "nets.generator", "torch.mean", "torch.mean", "torch.mean", "nets.mapping_network", "nets.style_encoder", "torch.abs", "torch.abs", "torch.abs", "nets.mapping_network", "nets.style_encoder", "torch.abs", "torch.abs", "torch.abs", "nets.fan.get_heatmap", "torch.abs", "torch.abs", "torch.abs", "solver.compute_vgg_loss", "core.abs_criterion", "core.abs_criterion", "munch.Munch", "adv_loss.item", "torch.mean.item", "torch.mean.item", "torch.mean.item"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.adv_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.abs_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.abs_criterion"], ["", "def", "compute_g_loss", "(", "nets", ",", "args", ",", "x_real", ",", "y_org", ",", "y_trg", ",", "z_trgs", "=", "None", ",", "x_refs", "=", "None", ",", "masks", "=", "None", ",", "VggExtract", "=", "None", ",", "IN", "=", "None", ",", "L1Loss", "=", "None", ")", ":", "\n", "    ", "assert", "(", "z_trgs", "is", "None", ")", "!=", "(", "x_refs", "is", "None", ")", "\n", "if", "z_trgs", "is", "not", "None", ":", "\n", "        ", "z_trg", ",", "z_trg2", "=", "z_trgs", "\n", "", "if", "x_refs", "is", "not", "None", ":", "\n", "        ", "x_ref", ",", "x_ref2", "=", "x_refs", "\n", "\n", "# adversarial loss", "\n", "", "if", "z_trgs", "is", "not", "None", ":", "\n", "        ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "", "else", ":", "\n", "        ", "s_trg", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_trg", ")", "\n", "\n", "", "x_fake", ",", "content_latent_real", "=", "nets", ".", "generator", "(", "x_real", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "out", "=", "nets", ".", "discriminator", "(", "x_fake", ",", "y_trg", ")", "\n", "loss_adv", "=", "adv_loss", "(", "out", ",", "1", ")", "\n", "\n", "# style reconstruction loss", "\n", "s_pred", "=", "nets", ".", "style_encoder", "(", "x_fake", ",", "y_trg", ")", "\n", "loss_sty", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "s_pred", "-", "s_trg", ")", ")", "\n", "\n", "# diversity sensitive loss", "\n", "if", "z_trgs", "is", "not", "None", ":", "\n", "        ", "s_trg2", "=", "nets", ".", "mapping_network", "(", "z_trg2", ",", "y_trg", ")", "\n", "", "else", ":", "\n", "        ", "s_trg2", "=", "nets", ".", "style_encoder", "(", "x_ref2", ",", "y_trg", ")", "\n", "", "x_fake2", ",", "content_latent_real2", "=", "nets", ".", "generator", "(", "x_real", ",", "s_trg2", ",", "masks", "=", "masks", ")", "\n", "x_fake2", "=", "x_fake2", ".", "detach", "(", ")", "\n", "loss_ds", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x_fake", "-", "x_fake2", ")", ")", "\n", "\n", "# cycle-consistency loss", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_fake", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "s_org", "=", "nets", ".", "style_encoder", "(", "x_real", ",", "y_org", ")", "\n", "x_rec", ",", "content_latent_reco", "=", "nets", ".", "generator", "(", "x_fake", ",", "s_org", ",", "masks", "=", "masks", ")", "\n", "loss_cyc", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "x_rec", "-", "x_real", ")", ")", "\n", "\n", "loss_vgg", "=", "compute_vgg_loss", "(", "x_fake", ",", "x_real", ",", "VggExtract", ",", "IN", ",", "L1Loss", ")", "if", "args", ".", "vgg_w", ">", "0", "else", "0", "\n", "loss_sacl", "=", "utils", ".", "abs_criterion", "(", "content_latent_real", ",", "content_latent_reco", ")", "if", "args", ".", "loss_sacl", ">", "0", "else", "0", "# Loss style aware content loss", "\n", "loss_sacl2", "=", "utils", ".", "abs_criterion", "(", "content_latent_real2", ",", "content_latent_reco", ")", "if", "args", ".", "loss_sacl", ">", "0", "else", "0", "# Loss style aware content loss", "\n", "\n", "loss", "=", "loss_adv", "+", "args", ".", "lambda_sty", "*", "loss_sty", "-", "args", ".", "lambda_ds", "*", "loss_ds", "+", "args", ".", "lambda_cyc", "*", "loss_cyc", "+", "args", ".", "lambda_vgg", "*", "loss_vgg", "+", "args", ".", "lambda_loss_sacl", "*", "loss_sacl", "+", "args", ".", "lambda_loss_sacl", "*", "loss_sacl2", "\n", "return", "loss", ",", "Munch", "(", "adv", "=", "loss_adv", ".", "item", "(", ")", ",", "\n", "sty", "=", "loss_sty", ".", "item", "(", ")", ",", "\n", "ds", "=", "loss_ds", ".", "item", "(", ")", ",", "\n", "cyc", "=", "loss_cyc", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.moving_average": [[275, 278], ["zip", "model.parameters", "model_test.parameters", "torch.lerp", "torch.lerp", "torch.lerp"], "function", ["None"], ["", "def", "moving_average", "(", "model", ",", "model_test", ",", "beta", "=", "0.999", ")", ":", "\n", "    ", "for", "param", ",", "param_test", "in", "zip", "(", "model", ".", "parameters", "(", ")", ",", "model_test", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "param_test", ".", "data", "=", "torch", ".", "lerp", "(", "param", ".", "data", ",", "param_test", ".", "data", ",", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.adv_loss": [[280, 285], ["torch.full_like", "torch.full_like", "torch.full_like", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "", "def", "adv_loss", "(", "logits", ",", "target", ")", ":", "\n", "    ", "assert", "target", "in", "[", "1", ",", "0", "]", "\n", "targets", "=", "torch", ".", "full_like", "(", "logits", ",", "fill_value", "=", "target", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "logits", ",", "targets", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.compute_vgg_loss": [[286, 297], ["VggExtract", "VggExtract", "L1Loss"], "function", ["None"], ["", "def", "compute_vgg_loss", "(", "img", ",", "target", ",", "VggExtract", ",", "IN", ",", "L1Loss", ")", ":", "\n", "# img_vgg = utils.vgg_preprocess(img)", "\n", "# target_vgg =  utils.vgg_preprocess(target)", "\n", "# img_fea = vgg(img_vgg)", "\n", "# target_fea = vgg(target_vgg)", "\n", "    ", "img_fea_dict", "=", "VggExtract", "(", "img", ")", "\n", "target_fea_dict", "=", "VggExtract", "(", "target", ")", "\n", "# loss = torch.mean((img_fea_dict['relu3_3'] - target_fea_dict['relu3_3']) ** 2)", "\n", "# loss = torch.mean(torch.abs(img_fea_dict['relu3_3'] - target_fea_dict['relu3_3']))", "\n", "loss", "=", "L1Loss", "(", "img_fea_dict", "[", "'relu2_2'", "]", ",", "target_fea_dict", "[", "'relu2_2'", "]", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.r1_reg": [[298, 309], ["x_in.size", "grad_dout.pow", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad_dout.pow.size", "x_in.size", "grad_dout.pow.view().sum().mean", "d_out.sum", "grad_dout.pow.view().sum", "grad_dout.pow.view"], "function", ["None"], ["", "def", "r1_reg", "(", "d_out", ",", "x_in", ")", ":", "\n", "# zero-centered gradient penalty for real images", "\n", "    ", "batch_size", "=", "x_in", ".", "size", "(", "0", ")", "\n", "grad_dout", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "d_out", ".", "sum", "(", ")", ",", "inputs", "=", "x_in", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", "\n", ")", "[", "0", "]", "\n", "grad_dout2", "=", "grad_dout", ".", "pow", "(", "2", ")", "\n", "assert", "(", "grad_dout2", ".", "size", "(", ")", "==", "x_in", ".", "size", "(", ")", ")", "\n", "reg", "=", "0.5", "*", "grad_dout2", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", "0", ")", "\n", "return", "reg", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.ResBlk.__init__": [[24, 32], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "model.ResBlk._build_weights"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._build_weights"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "actv", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "normalize", "=", "False", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "actv", "=", "actv", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "learned_sc", "=", "dim_in", "!=", "dim_out", "\n", "self", ".", "_build_weights", "(", "dim_in", ",", "dim_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.ResBlk._build_weights": [[33, 41], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_build_weights", "(", "self", ",", "dim_in", ",", "dim_out", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_in", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "3", ",", "1", ",", "1", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "dim_in", ",", "affine", "=", "True", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "dim_in", ",", "affine", "=", "True", ")", "\n", "", "if", "self", ".", "learned_sc", ":", "\n", "            ", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.ResBlk._shortcut": [[42, 48], ["model.ResBlk.conv1x1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "learned_sc", ":", "\n", "            ", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.ResBlk._residual": [[49, 61], ["model.ResBlk.actv", "model.ResBlk.conv1", "model.ResBlk.actv", "model.ResBlk.conv2", "model.ResBlk.norm1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "model.ResBlk.norm2"], "methods", ["None"], ["", "def", "_residual", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "actv", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "2", ")", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "", "x", "=", "self", ".", "actv", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.ResBlk.forward": [[62, 65], ["model.ResBlk._shortcut", "model.ResBlk._residual", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._shortcut", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._residual"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_shortcut", "(", "x", ")", "+", "self", ".", "_residual", "(", "x", ")", "\n", "return", "x", "/", "math", ".", "sqrt", "(", "2", ")", "# unit variance", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdaIN.__init__": [[68, 72], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "style_dim", ",", "num_features", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "nn", ".", "InstanceNorm2d", "(", "num_features", ",", "affine", "=", "False", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "style_dim", ",", "num_features", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdaIN.forward": [[73, 78], ["model.AdaIN.fc", "h.view.view.view", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "h.view.view.size", "h.view.view.size", "model.AdaIN.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "s", ")", ":", "\n", "        ", "h", "=", "self", ".", "fc", "(", "s", ")", "\n", "h", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "gamma", ",", "beta", "=", "torch", ".", "chunk", "(", "h", ",", "chunks", "=", "2", ",", "dim", "=", "1", ")", "\n", "return", "(", "1", "+", "gamma", ")", "*", "self", ".", "norm", "(", "x", ")", "+", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlk.__init__": [[81, 89], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "model.AdainResBlk._build_weights"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._build_weights"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "style_dim", "=", "64", ",", "w_hpf", "=", "0", ",", "\n", "actv", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "upsample", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_hpf", "=", "w_hpf", "\n", "self", ".", "actv", "=", "actv", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "learned_sc", "=", "dim_in", "!=", "dim_out", "\n", "self", ".", "_build_weights", "(", "dim_in", ",", "dim_out", ",", "style_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlk._build_weights": [[90, 97], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.AdaIN", "model.AdaIN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_build_weights", "(", "self", ",", "dim_in", ",", "dim_out", ",", "style_dim", "=", "64", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "norm1", "=", "AdaIN", "(", "style_dim", ",", "dim_in", ")", "\n", "self", ".", "norm2", "=", "AdaIN", "(", "style_dim", ",", "dim_out", ")", "\n", "if", "self", ".", "learned_sc", ":", "\n", "            ", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlk._shortcut": [[98, 104], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "model.AdainResBlk.conv1x1"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate"], ["", "", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "", "if", "self", ".", "learned_sc", ":", "\n", "            ", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlk._residual": [[105, 115], ["model.AdainResBlk.norm1", "model.AdainResBlk.actv", "model.AdainResBlk.conv1", "model.AdainResBlk.norm2", "model.AdainResBlk.actv", "model.AdainResBlk.conv2", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate"], ["", "def", "_residual", "(", "self", ",", "x", ",", "s", ")", ":", "\n", "        ", "x", "=", "self", ".", "norm1", "(", "x", ",", "s", ")", "\n", "x", "=", "self", ".", "actv", "(", "x", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ",", "s", ")", "\n", "x", "=", "self", ".", "actv", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlk.forward": [[116, 121], ["model.AdainResBlk._residual", "math.sqrt", "model.AdainResBlk._shortcut"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._residual", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._shortcut"], ["", "def", "forward", "(", "self", ",", "x", ",", "s", ")", ":", "\n", "        ", "out", "=", "self", ".", "_residual", "(", "x", ",", "s", ")", "\n", "if", "self", ".", "w_hpf", "==", "0", ":", "\n", "            ", "out", "=", "(", "out", "+", "self", ".", "_shortcut", "(", "x", ")", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla.__init__": [[123, 131], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "model.AdainResBlkGanilla._build_weights"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._build_weights"], ["    ", "def", "__init__", "(", "self", ",", "dim_in", ",", "dim_out", ",", "style_dim", "=", "64", ",", "actv", "=", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "upsample", "=", "True", ",", "do_residual", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "actv", "=", "actv", "\n", "self", ".", "upsample", "=", "upsample", "\n", "self", ".", "learned_sc", "=", "dim_in", "!=", "dim_out", "\n", "self", ".", "_build_weights", "(", "dim_in", ",", "dim_out", ",", "style_dim", ")", "\n", "self", ".", "do_residual", "=", "do_residual", "\n", "", "def", "_build_weights", "(", "self", ",", "dim_in", ",", "dim_out", ",", "style_dim", "=", "64", ")", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._build_weights": [[131, 138], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.AdaIN", "model.AdaIN", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_build_weights", "(", "self", ",", "dim_in", ",", "dim_out", ",", "style_dim", "=", "64", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "norm1", "=", "AdaIN", "(", "style_dim", ",", "dim_out", ")", "\n", "self", ".", "norm2", "=", "AdaIN", "(", "style_dim", ",", "dim_out", ")", "\n", "if", "self", ".", "learned_sc", ":", "\n", "            ", "self", ".", "conv1x1", "=", "nn", ".", "Conv2d", "(", "dim_in", ",", "dim_out", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._shortcut": [[139, 145], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "model.AdainResBlkGanilla.conv1x1"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate"], ["", "", "def", "_shortcut", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "", "if", "self", ".", "learned_sc", ":", "\n", "            ", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._residual": [[146, 156], ["model.AdainResBlkGanilla.conv1", "model.AdainResBlkGanilla.norm1", "model.AdainResBlkGanilla.actv", "model.AdainResBlkGanilla.conv2", "model.AdainResBlkGanilla.norm2", "model.AdainResBlkGanilla.actv", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate"], ["", "def", "_residual", "(", "self", ",", "x", ",", "s", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm1", "(", "x", ",", "s", ")", "\n", "x", "=", "self", ".", "actv", "(", "x", ")", "\n", "if", "self", ".", "upsample", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "norm2", "(", "x", ",", "s", ")", "\n", "x", "=", "self", ".", "actv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla.forward": [[157, 162], ["model.AdainResBlkGanilla._residual", "math.sqrt", "model.AdainResBlkGanilla._shortcut"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._residual", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.AdainResBlkGanilla._shortcut"], ["", "def", "forward", "(", "self", ",", "x", ",", "s", ")", ":", "\n", "        ", "out", "=", "self", ".", "_residual", "(", "x", ",", "s", ")", "\n", "if", "self", ".", "do_residual", ":", "\n", "            ", "out", "=", "(", "out", "+", "self", ".", "_shortcut", "(", "x", ")", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.HighPass.__init__": [[164, 169], ["torch.Module.__init__", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "w_hpf", ",", "device", ")", ":", "\n", "        ", "super", "(", "HighPass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filter", "=", "torch", ".", "tensor", "(", "[", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "8.", ",", "-", "1", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "-", "1", "]", "]", ")", ".", "to", "(", "device", ")", "/", "w_hpf", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.HighPass.forward": [[170, 173], ["model.HighPass.filter.unsqueeze().unsqueeze().repeat", "torch.conv2d", "torch.conv2d", "torch.conv2d", "x.size", "model.HighPass.filter.unsqueeze().unsqueeze", "x.size", "model.HighPass.filter.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "filter", "=", "self", ".", "filter", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "x", ".", "size", "(", "1", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "F", ".", "conv2d", "(", "x", ",", "filter", ",", "padding", "=", "1", ",", "groups", "=", "x", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.Generator.__init__": [[176, 212], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "min", "model.Generator.encode.append", "model.Generator.decode.insert", "model.Generator.encode.append", "model.Generator.decode.insert", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "model.HighPass", "numpy.log2", "model.ResBlk", "model.AdainResBlk", "model.ResBlk", "model.AdainResBlk", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "256", ",", "style_dim", "=", "64", ",", "max_conv_dim", "=", "512", ",", "w_hpf", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "dim_in", "=", "2", "**", "14", "//", "img_size", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "from_rgb", "=", "nn", ".", "Conv2d", "(", "3", ",", "dim_in", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "encode", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "decode", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "to_rgb", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "InstanceNorm2d", "(", "dim_in", ",", "affine", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dim_in", ",", "3", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "\n", "# down/up-sampling blocks", "\n", "repeat_num", "=", "int", "(", "np", ".", "log2", "(", "img_size", ")", ")", "-", "4", "\n", "if", "w_hpf", ">", "0", ":", "\n", "            ", "repeat_num", "+=", "1", "\n", "", "for", "_", "in", "range", "(", "repeat_num", ")", ":", "\n", "            ", "dim_out", "=", "min", "(", "dim_in", "*", "2", ",", "max_conv_dim", ")", "\n", "self", ".", "encode", ".", "append", "(", "\n", "ResBlk", "(", "dim_in", ",", "dim_out", ",", "normalize", "=", "True", ",", "downsample", "=", "True", ")", ")", "\n", "self", ".", "decode", ".", "insert", "(", "\n", "0", ",", "AdainResBlk", "(", "dim_out", ",", "dim_in", ",", "style_dim", ",", "\n", "w_hpf", "=", "w_hpf", ",", "upsample", "=", "True", ")", ")", "# stack-like", "\n", "dim_in", "=", "dim_out", "\n", "\n", "# bottleneck blocks", "\n", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "encode", ".", "append", "(", "\n", "ResBlk", "(", "dim_out", ",", "dim_out", ",", "normalize", "=", "True", ")", ")", "\n", "self", ".", "decode", ".", "insert", "(", "\n", "0", ",", "AdainResBlk", "(", "dim_out", ",", "dim_out", ",", "style_dim", ",", "w_hpf", "=", "w_hpf", ")", ")", "\n", "\n", "", "if", "w_hpf", ">", "0", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\n", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "hpf", "=", "HighPass", "(", "w_hpf", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.Generator.forward": [[213, 227], ["model.Generator.from_rgb", "block", "block", "model.Generator.to_rgb", "model.Generator.to_rgb", "torch.interpolate", "torch.interpolate", "torch.interpolate", "block.size", "block.size", "model.Generator.hpf", "block.size", "block.size", "block.size", "block.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "s", ",", "masks", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "from_rgb", "(", "x", ")", "\n", "cache", "=", "{", "}", "\n", "for", "block", "in", "self", ".", "encode", ":", "\n", "            ", "if", "(", "masks", "is", "not", "None", ")", "and", "(", "x", ".", "size", "(", "2", ")", "in", "[", "32", ",", "64", ",", "128", "]", ")", ":", "\n", "                ", "cache", "[", "x", ".", "size", "(", "2", ")", "]", "=", "x", "\n", "", "x", "=", "block", "(", "x", ")", "\n", "", "for", "block", "in", "self", ".", "decode", ":", "\n", "            ", "x", "=", "block", "(", "x", ",", "s", ")", "\n", "if", "(", "masks", "is", "not", "None", ")", "and", "(", "x", ".", "size", "(", "2", ")", "in", "[", "32", ",", "64", ",", "128", "]", ")", ":", "\n", "                ", "mask", "=", "masks", "[", "0", "]", "if", "x", ".", "size", "(", "2", ")", "in", "[", "32", "]", "else", "masks", "[", "1", "]", "\n", "mask", "=", "F", ".", "interpolate", "(", "mask", ",", "size", "=", "x", ".", "size", "(", "2", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "x", "=", "x", "+", "self", ".", "hpf", "(", "mask", "*", "cache", "[", "x", ".", "size", "(", "2", ")", "]", ")", "\n", "", "", "return", "self", ".", "to_rgb", "(", "x", ")", ",", "self", ".", "to_rgb", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.BasicBlock_Ganilla.__init__": [[232, 263], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "use_dropout", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock_Ganilla", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rp1", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "use_dropout", "=", "use_dropout", "\n", "if", "use_dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "", "self", ".", "rp2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "out_planes", "=", "planes", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "self", ".", "final_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "expansion", "*", "planes", "*", "2", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.BasicBlock_Ganilla.forward": [[265, 275], ["torch.relu", "torch.relu", "torch.relu", "model.BasicBlock_Ganilla.bn2", "model.BasicBlock_Ganilla.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.BasicBlock_Ganilla.final_conv", "torch.relu", "torch.relu", "torch.relu", "model.BasicBlock_Ganilla.bn1", "model.BasicBlock_Ganilla.dropout", "model.BasicBlock_Ganilla.conv2", "model.BasicBlock_Ganilla.conv1", "model.BasicBlock_Ganilla.rp2", "model.BasicBlock_Ganilla.rp1"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BigGDBlock.shortcut"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "self", ".", "rp1", "(", "x", ")", ")", ")", ")", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "self", ".", "rp2", "(", "out", ")", ")", ")", "\n", "inputt", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "catted", "=", "torch", ".", "cat", "(", "(", "out", ",", "inputt", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "final_conv", "(", "catted", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.PyramidFeatures.__init__": [[277, 298], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.AdainResBlkGanilla", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.AdainResBlkGanilla", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "model.AdainResBlkGanilla", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C2_size", ",", "C3_size", ",", "C4_size", ",", "C5_size", ",", "fpn_weights", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ",", "feature_size", "=", "128", ",", "style_dim", "=", "64", ",", "do_residual", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sum_weights", "=", "fpn_weights", "#[1.0, 0.5, 0.5, 0.5]", "\n", "\n", "# upsample C5 to get P5 from the FPN paper", "\n", "self", ".", "P5_1", "=", "nn", ".", "Conv2d", "(", "C5_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P5_2", "=", "AdainResBlkGanilla", "(", "C5_size", ",", "feature_size", ",", "style_dim", ",", "do_residual", "=", "do_residual", ")", "\n", "\n", "# add P5 elementwise to C4", "\n", "self", ".", "P4_1", "=", "nn", ".", "Conv2d", "(", "C4_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P4_2", "=", "AdainResBlkGanilla", "(", "feature_size", ",", "feature_size", ",", "style_dim", ",", "do_residual", "=", "do_residual", ")", "\n", "\n", "# add P4 elementwise to C3", "\n", "self", ".", "P3_1", "=", "nn", ".", "Conv2d", "(", "C3_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P3_2", "=", "AdainResBlkGanilla", "(", "feature_size", ",", "feature_size", ",", "style_dim", ",", "do_residual", "=", "do_residual", ")", "\n", "\n", "self", ".", "P2_1", "=", "nn", ".", "Conv2d", "(", "C2_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P2_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "rp4", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "P2_2", "=", "nn", ".", "Conv2d", "(", "int", "(", "feature_size", ")", ",", "int", "(", "feature_size", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.PyramidFeatures.forward": [[300, 324], ["model.PyramidFeatures.P5_2", "model.PyramidFeatures.P4_1", "model.PyramidFeatures.P4_2", "model.PyramidFeatures.P3_1", "model.PyramidFeatures.P3_2", "model.PyramidFeatures.P2_1", "model.PyramidFeatures.P2_upsampled", "model.PyramidFeatures.rp4", "model.PyramidFeatures.P2_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "s", ")", ":", "\n", "        ", "C2", ",", "C3", ",", "C4", ",", "C5", "=", "inputs", "\n", "\n", "i", "=", "0", "\n", "P5_adain_x", "=", "self", ".", "P5_2", "(", "C5", ",", "s", ")", "\n", "\n", "i", "+=", "1", "\n", "P4_x", "=", "self", ".", "P4_1", "(", "C4", ")", "\n", "P4_x", "=", "P5_adain_x", "+", "P4_x", "\n", "P4_adain_x", "=", "self", ".", "P4_2", "(", "P4_x", ",", "s", ")", "\n", "\n", "i", "+=", "1", "\n", "P3_x", "=", "self", ".", "P3_1", "(", "C3", ")", "\n", "P3_x", "=", "P3_x", "+", "P4_adain_x", "\n", "P3_adain_x", "=", "self", ".", "P3_2", "(", "P3_x", ",", "s", ")", "\n", "\n", "i", "+=", "1", "\n", "P2_x", "=", "self", ".", "P2_1", "(", "C2", ")", "\n", "P2_x", "=", "P2_x", "+", "P3_adain_x", "\n", "P2_upsampled_x", "=", "self", ".", "P2_upsampled", "(", "P2_x", ")", "\n", "P2_x", "=", "self", ".", "rp4", "(", "P2_upsampled_x", ")", "\n", "P2_x", "=", "self", ".", "P2_2", "(", "P2_x", ")", "\n", "\n", "return", "P2_x", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.GeneratorGanilla.__init__": [[327, 359], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "model.GeneratorGanilla._make_layer_ganilla", "model.GeneratorGanilla._make_layer_ganilla", "model.GeneratorGanilla._make_layer_ganilla", "model.GeneratorGanilla._make_layer_ganilla", "model.PyramidFeatures"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "256", ",", "style_dim", "=", "64", ",", "input_nc", "=", "3", ",", "output_nc", "=", "3", ",", "ngf", "=", "64", ",", "ganilla_layer_nb", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "use_dropout", "=", "True", ",", "masks", "=", "None", ",", "do_residual", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "ganilla_block_nf", "=", "[", "64", ",", "128", ",", "128", ",", "img_size", "]", "\n", "self", ".", "inplanes", "=", "ngf", "\n", "\n", "# first conv", "\n", "self", ".", "pad1", "=", "nn", ".", "ReflectionPad2d", "(", "3", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm2d", "(", "ngf", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pad2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "# Output layer", "\n", "self", ".", "pad3", "=", "nn", ".", "ReflectionPad2d", "(", "3", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_nc", ",", "7", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer_ganilla", "(", "BasicBlock_Ganilla", ",", "ganilla_block_nf", "[", "0", "]", ",", "ganilla_layer_nb", "[", "0", "]", ",", "use_dropout", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer_ganilla", "(", "BasicBlock_Ganilla", ",", "ganilla_block_nf", "[", "1", "]", ",", "ganilla_layer_nb", "[", "1", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer_ganilla", "(", "BasicBlock_Ganilla", ",", "ganilla_block_nf", "[", "2", "]", ",", "ganilla_layer_nb", "[", "2", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer_ganilla", "(", "BasicBlock_Ganilla", ",", "ganilla_block_nf", "[", "3", "]", ",", "ganilla_layer_nb", "[", "3", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "\n", "# for the skip connections", "\n", "fpn_sizes", "=", "[", "self", ".", "layer1", "[", "ganilla_layer_nb", "[", "0", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer2", "[", "ganilla_layer_nb", "[", "1", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer3", "[", "ganilla_layer_nb", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "ganilla_layer_nb", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "self", ".", "fpn", "=", "PyramidFeatures", "(", "fpn_sizes", "[", "0", "]", ",", "fpn_sizes", "[", "1", "]", ",", "fpn_sizes", "[", "2", "]", ",", "fpn_sizes", "[", "3", "]", ",", "style_dim", "=", "style_dim", ",", "do_residual", "=", "do_residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.GeneratorGanilla._make_layer_ganilla": [[360, 367], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer_ganilla", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "use_dropout", ",", "stride", "=", "1", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_dropout", ",", "stride", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.GeneratorGanilla.forward": [[368, 391], ["model.GeneratorGanilla.pad1", "model.GeneratorGanilla.conv1", "model.GeneratorGanilla.in1", "model.GeneratorGanilla.relu", "model.GeneratorGanilla.pad2", "model.GeneratorGanilla.maxpool", "model.GeneratorGanilla.layer1", "model.GeneratorGanilla.layer2", "model.GeneratorGanilla.layer3", "model.GeneratorGanilla.layer4", "model.GeneratorGanilla.fpn", "model.GeneratorGanilla.pad3", "model.GeneratorGanilla.conv2", "model.GeneratorGanilla.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "s", ",", "masks", "=", "None", ")", ":", "\n", "\n", "        ", "img_batch", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "pad1", "(", "img_batch", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "in1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pad2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "out", "=", "self", ".", "fpn", "(", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", ",", "s", ")", "\n", "\n", "out", "=", "self", ".", "pad3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "\n", "return", "out", ",", "x4", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.MappingNetwork.__init__": [[393, 412], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_dim", "=", "16", ",", "style_dim", "=", "64", ",", "num_domains", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "layers", "+=", "[", "nn", ".", "Linear", "(", "latent_dim", ",", "512", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "ReLU", "(", ")", "]", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "Linear", "(", "512", ",", "512", ")", "]", "\n", "layers", "+=", "[", "nn", ".", "ReLU", "(", ")", "]", "\n", "", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "self", ".", "unshared", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_domains", ")", ":", "\n", "            ", "self", ".", "unshared", "+=", "[", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "style_dim", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.MappingNetwork.forward": [[413, 422], ["model.MappingNetwork.shared", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "layer", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "y.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "y", ")", ":", "\n", "        ", "h", "=", "self", ".", "shared", "(", "z", ")", "\n", "out", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "unshared", ":", "\n", "            ", "out", "+=", "[", "layer", "(", "h", ")", "]", "\n", "", "out", "=", "torch", ".", "stack", "(", "out", ",", "dim", "=", "1", ")", "# (batch, num_domains, style_dim)", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "y", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "s", "=", "out", "[", "idx", ",", "y", "]", "# (batch, style_dim)", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.StyleEncoder.__init__": [[425, 445], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "min", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.log2", "model.ResBlk", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "256", ",", "style_dim", "=", "64", ",", "num_domains", "=", "2", ",", "max_conv_dim", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "dim_in", "=", "2", "**", "14", "//", "img_size", "\n", "blocks", "=", "[", "]", "\n", "blocks", "+=", "[", "nn", ".", "Conv2d", "(", "3", ",", "dim_in", ",", "3", ",", "1", ",", "1", ")", "]", "\n", "\n", "repeat_num", "=", "int", "(", "np", ".", "log2", "(", "img_size", ")", ")", "-", "2", "\n", "for", "_", "in", "range", "(", "repeat_num", ")", ":", "\n", "            ", "dim_out", "=", "min", "(", "dim_in", "*", "2", ",", "max_conv_dim", ")", "\n", "blocks", "+=", "[", "ResBlk", "(", "dim_in", ",", "dim_out", ",", "downsample", "=", "True", ")", "]", "\n", "dim_in", "=", "dim_out", "\n", "\n", "", "blocks", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "4", ",", "1", ",", "0", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ")", "]", "\n", "self", ".", "shared", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "self", ".", "unshared", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "num_domains", ")", ":", "\n", "            ", "self", ".", "unshared", "+=", "[", "nn", ".", "Linear", "(", "dim_out", ",", "style_dim", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.StyleEncoder.forward": [[446, 456], ["model.StyleEncoder.shared", "h.view.view.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "h.view.view.size", "layer", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "y.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "h", "=", "self", ".", "shared", "(", "x", ")", "\n", "h", "=", "h", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "unshared", ":", "\n", "            ", "out", "+=", "[", "layer", "(", "h", ")", "]", "\n", "", "out", "=", "torch", ".", "stack", "(", "out", ",", "dim", "=", "1", ")", "# (batch, num_domains, style_dim)", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "y", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "s", "=", "out", "[", "idx", ",", "y", "]", "# (batch, style_dim)", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.Discriminator.__init__": [[459, 476], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "min", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "numpy.log2", "model.ResBlk"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "256", ",", "num_domains", "=", "2", ",", "max_conv_dim", "=", "512", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "dim_in", "=", "2", "**", "14", "//", "img_size", "\n", "blocks", "=", "[", "]", "\n", "blocks", "+=", "[", "nn", ".", "Conv2d", "(", "3", ",", "dim_in", ",", "3", ",", "1", ",", "1", ")", "]", "\n", "\n", "repeat_num", "=", "int", "(", "np", ".", "log2", "(", "img_size", ")", ")", "-", "2", "\n", "for", "_", "in", "range", "(", "repeat_num", ")", ":", "\n", "            ", "dim_out", "=", "min", "(", "dim_in", "*", "2", ",", "max_conv_dim", ")", "\n", "blocks", "+=", "[", "ResBlk", "(", "dim_in", ",", "dim_out", ",", "downsample", "=", "True", ")", "]", "\n", "dim_in", "=", "dim_out", "\n", "\n", "", "blocks", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "Conv2d", "(", "dim_out", ",", "dim_out", ",", "4", ",", "1", ",", "0", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "LeakyReLU", "(", "0.2", ")", "]", "\n", "blocks", "+=", "[", "nn", ".", "Conv2d", "(", "dim_out", ",", "num_domains", ",", "1", ",", "1", ",", "0", ")", "]", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.Discriminator.forward": [[477, 483], ["model.Discriminator.main", "out.view.view.view", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "out.view.view.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "y.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MISSGANvsStarGAN.main.main"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "out", "=", "self", ".", "main", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# (batch, num_domains)", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "range", "(", "y", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "y", ".", "device", ")", "\n", "out", "=", "out", "[", "idx", ",", "y", "]", "# (batch)", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.VggExtract.__init__": [[485, 492], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg_model", ")", ":", "\n", "        ", "super", "(", "VggExtract", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_layers", "=", "vgg_model", ".", "features", "\n", "self", ".", "layer_name_mapping", "=", "{", "\n", "'8'", ":", "\"relu2_2\"", ",", "\n", "'15'", ":", "\"relu3_3\"", ",", "\n", "'22'", ":", "\"relu4_3\"", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.VggExtract.forward": [[494, 501], ["model.VggExtract.vgg_layers._modules.items", "module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "self", ".", "vgg_layers", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "x", "=", "module", "(", "x", ")", "\n", "if", "name", "in", "self", ".", "layer_name_mapping", ":", "\n", "                ", "output", "[", "self", ".", "layer_name_mapping", "[", "name", "]", "]", "=", "x", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.model.build_model": [[502, 537], ["model.MappingNetwork", "model.StyleEncoder", "model.Discriminator", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "munch.Munch", "munch.Munch", "core.utils.load_vgg16", "core.utils.load_vgg16.eval", "core.utils.load_vgg16.parameters", "model.Generator", "core.wing.FAN().eval", "model.VggExtract", "model.GeneratorGanilla", "model.GeneratorGanilla", "core.wing.FAN"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.load_vgg16", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["", "", "def", "build_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "use_star_gen", ":", "\n", "        ", "generator", "=", "Generator", "(", "args", ".", "img_size", ",", "args", ".", "style_dim", ",", "w_hpf", "=", "args", ".", "w_hpf", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "use_residual_upsample", ":", "\n", "            ", "generator", "=", "GeneratorGanilla", "(", "img_size", "=", "args", ".", "img_size", ",", "style_dim", "=", "args", ".", "style_dim", ",", "do_residual", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "generator", "=", "GeneratorGanilla", "(", "img_size", "=", "args", ".", "img_size", ",", "style_dim", "=", "args", ".", "style_dim", ",", "do_residual", "=", "False", ")", "\n", "\n", "", "", "mapping_network", "=", "MappingNetwork", "(", "args", ".", "latent_dim", ",", "args", ".", "style_dim", ",", "args", ".", "num_domains", ")", "\n", "style_encoder", "=", "StyleEncoder", "(", "args", ".", "img_size", ",", "args", ".", "style_dim", ",", "args", ".", "num_domains", ")", "\n", "discriminator", "=", "Discriminator", "(", "args", ".", "img_size", ",", "args", ".", "num_domains", ")", "\n", "generator_ema", "=", "copy", ".", "deepcopy", "(", "generator", ")", "\n", "mapping_network_ema", "=", "copy", ".", "deepcopy", "(", "mapping_network", ")", "\n", "style_encoder_ema", "=", "copy", ".", "deepcopy", "(", "style_encoder", ")", "\n", "\n", "nets", "=", "Munch", "(", "generator", "=", "generator", ",", "\n", "mapping_network", "=", "mapping_network", ",", "\n", "style_encoder", "=", "style_encoder", ",", "\n", "discriminator", "=", "discriminator", ")", "\n", "nets_ema", "=", "Munch", "(", "generator", "=", "generator_ema", ",", "\n", "mapping_network", "=", "mapping_network_ema", ",", "\n", "style_encoder", "=", "style_encoder_ema", ")", "\n", "\n", "if", "args", ".", "w_hpf", ">", "0", ":", "\n", "        ", "fan", "=", "FAN", "(", "fname_pretrained", "=", "args", ".", "wing_path", ")", ".", "eval", "(", ")", "\n", "nets", ".", "fan", "=", "fan", "\n", "nets_ema", ".", "fan", "=", "fan", "\n", "\n", "", "vgg", "=", "load_vgg16", "(", ")", "\n", "vgg", ".", "eval", "(", ")", "\n", "for", "param", "in", "vgg", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "return", "nets", ",", "nets_ema", ",", "vgg", ",", "VggExtract", "(", "vgg", ")", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.HourGlass.__init__": [[50, 59], ["torch.Module.__init__", "wing.CoordConvTh", "wing.HourGlass._generate_network"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.HourGlass._generate_network"], ["    ", "def", "__init__", "(", "self", ",", "num_modules", ",", "depth", ",", "num_features", ",", "first_one", "=", "False", ")", ":", "\n", "        ", "super", "(", "HourGlass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "features", "=", "num_features", "\n", "self", ".", "coordconv", "=", "CoordConvTh", "(", "64", ",", "64", ",", "True", ",", "True", ",", "256", ",", "first_one", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "_generate_network", "(", "self", ".", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.HourGlass._generate_network": [[60, 68], ["wing.HourGlass.add_module", "wing.HourGlass.add_module", "wing.HourGlass.add_module", "wing.ConvBlock", "wing.ConvBlock", "wing.HourGlass._generate_network", "wing.HourGlass.add_module", "wing.ConvBlock", "str", "str", "wing.ConvBlock", "str", "str"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.HourGlass._generate_network"], ["", "def", "_generate_network", "(", "self", ",", "level", ")", ":", "\n", "        ", "self", ".", "add_module", "(", "'b1_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'b2_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "if", "level", ">", "1", ":", "\n", "            ", "self", ".", "_generate_network", "(", "level", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "add_module", "(", "'b2_plus_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "", "self", ".", "add_module", "(", "'b3_'", "+", "str", "(", "level", ")", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.HourGlass._forward": [[69, 85], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "wing.HourGlass._forward", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.HourGlass._forward"], ["", "def", "_forward", "(", "self", ",", "level", ",", "inp", ")", ":", "\n", "        ", "up1", "=", "inp", "\n", "up1", "=", "self", ".", "_modules", "[", "'b1_'", "+", "str", "(", "level", ")", "]", "(", "up1", ")", "\n", "low1", "=", "F", ".", "avg_pool2d", "(", "inp", ",", "2", ",", "stride", "=", "2", ")", "\n", "low1", "=", "self", ".", "_modules", "[", "'b2_'", "+", "str", "(", "level", ")", "]", "(", "low1", ")", "\n", "\n", "if", "level", ">", "1", ":", "\n", "            ", "low2", "=", "self", ".", "_forward", "(", "level", "-", "1", ",", "low1", ")", "\n", "", "else", ":", "\n", "            ", "low2", "=", "low1", "\n", "low2", "=", "self", ".", "_modules", "[", "'b2_plus_'", "+", "str", "(", "level", ")", "]", "(", "low2", ")", "\n", "", "low3", "=", "low2", "\n", "low3", "=", "self", ".", "_modules", "[", "'b3_'", "+", "str", "(", "level", ")", "]", "(", "low3", ")", "\n", "up2", "=", "F", ".", "interpolate", "(", "low3", ",", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "return", "up1", "+", "up2", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.HourGlass.forward": [[86, 89], ["wing.HourGlass.coordconv", "wing.HourGlass._forward"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.HourGlass._forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "heatmap", ")", ":", "\n", "        ", "x", ",", "last_channel", "=", "self", ".", "coordconv", "(", "x", ",", "heatmap", ")", "\n", "return", "self", ".", "_forward", "(", "self", ".", "depth", ",", "x", ")", ",", "last_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.AddCoordsTh.__init__": [[92, 113], ["torch.Module.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.arange().unsqueeze().expand().float", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.unsqueeze().to", "torch.cat.unsqueeze().to", "torch.cat.unsqueeze().to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.arange().unsqueeze().expand().float.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.arange().unsqueeze().expand", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "height", "=", "64", ",", "width", "=", "64", ",", "with_r", "=", "False", ",", "with_boundary", "=", "False", ")", ":", "\n", "        ", "super", "(", "AddCoordsTh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_r", "=", "with_r", "\n", "self", ".", "with_boundary", "=", "with_boundary", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_coords", "=", "torch", ".", "arange", "(", "height", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "height", ",", "width", ")", ".", "float", "(", ")", "\n", "y_coords", "=", "torch", ".", "arange", "(", "width", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "height", ",", "width", ")", ".", "float", "(", ")", "\n", "x_coords", "=", "(", "x_coords", "/", "(", "height", "-", "1", ")", ")", "*", "2", "-", "1", "\n", "y_coords", "=", "(", "y_coords", "/", "(", "width", "-", "1", ")", ")", "*", "2", "-", "1", "\n", "coords", "=", "torch", ".", "stack", "(", "[", "x_coords", ",", "y_coords", "]", ",", "dim", "=", "0", ")", "# (2, height, width)", "\n", "\n", "if", "self", ".", "with_r", ":", "\n", "                ", "rr", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x_coords", ",", "2", ")", "+", "torch", ".", "pow", "(", "y_coords", ",", "2", ")", ")", "# (height, width)", "\n", "rr", "=", "(", "rr", "/", "torch", ".", "max", "(", "rr", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "coords", ",", "rr", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "self", ".", "coords", "=", "coords", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "# (1, 2 or 3, height, width)", "\n", "self", ".", "x_coords", "=", "x_coords", ".", "to", "(", "device", ")", "\n", "self", ".", "y_coords", "=", "y_coords", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.AddCoordsTh.forward": [[114, 129], ["wing.AddCoordsTh.coords.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.where().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "heatmap", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        x: (batch, c, x_dim, y_dim)\n        \"\"\"", "\n", "coords", "=", "self", ".", "coords", ".", "repeat", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "with_boundary", "and", "heatmap", "is", "not", "None", ":", "\n", "            ", "boundary_channel", "=", "torch", ".", "clamp", "(", "heatmap", "[", ":", ",", "-", "1", ":", ",", ":", ",", ":", "]", ",", "0.0", ",", "1.0", ")", "\n", "zero_tensor", "=", "torch", ".", "zeros_like", "(", "self", ".", "x_coords", ")", "\n", "xx_boundary_channel", "=", "torch", ".", "where", "(", "boundary_channel", ">", "0.05", ",", "self", ".", "x_coords", ",", "zero_tensor", ")", ".", "to", "(", "zero_tensor", ".", "device", ")", "\n", "yy_boundary_channel", "=", "torch", ".", "where", "(", "boundary_channel", ">", "0.05", ",", "self", ".", "y_coords", ",", "zero_tensor", ")", ".", "to", "(", "zero_tensor", ".", "device", ")", "\n", "coords", "=", "torch", ".", "cat", "(", "[", "coords", ",", "xx_boundary_channel", ",", "yy_boundary_channel", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "x_and_coords", "=", "torch", ".", "cat", "(", "[", "x", ",", "coords", "]", ",", "dim", "=", "1", ")", "\n", "return", "x_and_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.CoordConvTh.__init__": [[133, 143], ["torch.Module.__init__", "wing.AddCoordsTh", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["def", "__init__", "(", "self", ",", "height", ",", "width", ",", "with_r", ",", "with_boundary", ",", "\n", "in_channels", ",", "first_one", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CoordConvTh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "addcoords", "=", "AddCoordsTh", "(", "height", ",", "width", ",", "with_r", ",", "with_boundary", ")", "\n", "in_channels", "+=", "2", "\n", "if", "with_r", ":", "\n", "            ", "in_channels", "+=", "1", "\n", "", "if", "with_boundary", "and", "not", "first_one", ":", "\n", "            ", "in_channels", "+=", "2", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.CoordConvTh.forward": [[144, 149], ["wing.CoordConvTh.addcoords", "wing.CoordConvTh.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "heatmap", "=", "None", ")", ":", "\n", "        ", "ret", "=", "self", ".", "addcoords", "(", "input_tensor", ",", "heatmap", ")", "\n", "last_channel", "=", "ret", "[", ":", ",", "-", "2", ":", ",", ":", ",", ":", "]", "\n", "ret", "=", "self", ".", "conv", "(", "ret", ")", "\n", "return", "ret", ",", "last_channel", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.ConvBlock.__init__": [[152, 167], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "functools.partial", "functools.partial.", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "functools.partial.", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "functools.partial.", "int", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "conv3x3", "=", "partial", "(", "nn", ".", "Conv2d", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "dilation", "=", "1", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "in_planes", ",", "int", "(", "out_planes", "/", "2", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "out_planes", "/", "2", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "int", "(", "out_planes", "/", "2", ")", ",", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "self", ".", "conv3", "=", "conv3x3", "(", "int", "(", "out_planes", "/", "4", ")", ",", "int", "(", "out_planes", "/", "4", ")", ")", "\n", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.ConvBlock.forward": [[168, 188], ["wing.ConvBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "wing.ConvBlock.conv1", "wing.ConvBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "wing.ConvBlock.conv2", "wing.ConvBlock.bn3", "torch.relu", "torch.relu", "torch.relu", "wing.ConvBlock.conv3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "wing.ConvBlock.downsample"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out1", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out1", "=", "F", ".", "relu", "(", "out1", ",", "True", ")", "\n", "out1", "=", "self", ".", "conv1", "(", "out1", ")", "\n", "\n", "out2", "=", "self", ".", "bn2", "(", "out1", ")", "\n", "out2", "=", "F", ".", "relu", "(", "out2", ",", "True", ")", "\n", "out2", "=", "self", ".", "conv2", "(", "out2", ")", "\n", "\n", "out3", "=", "self", ".", "bn3", "(", "out2", ")", "\n", "out3", "=", "F", ".", "relu", "(", "out3", ",", "True", ")", "\n", "out3", "=", "self", ".", "conv3", "(", "out3", ")", "\n", "\n", "out3", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ",", "out3", ")", ",", "1", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "residual", ")", "\n", "", "out3", "+=", "residual", "\n", "return", "out3", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.__init__": [[191, 214], ["torch.Module.__init__", "wing.CoordConvTh", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "wing.ConvBlock", "wing.ConvBlock", "wing.ConvBlock", "wing.FAN.add_module", "wing.FAN.add_module", "wing.FAN.add_module", "wing.FAN.add_module", "wing.FAN.add_module", "wing.HourGlass", "wing.ConvBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wing.FAN.load_pretrained_weights"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.load_pretrained_weights"], ["    ", "def", "__init__", "(", "self", ",", "num_modules", "=", "1", ",", "end_relu", "=", "False", ",", "num_landmarks", "=", "98", ",", "fname_pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "FAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_modules", "=", "num_modules", "\n", "self", ".", "end_relu", "=", "end_relu", "\n", "\n", "# Base part", "\n", "self", ".", "conv1", "=", "CoordConvTh", "(", "256", ",", "256", ",", "True", ",", "False", ",", "\n", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "\n", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "conv2", "=", "ConvBlock", "(", "64", ",", "128", ")", "\n", "self", ".", "conv3", "=", "ConvBlock", "(", "128", ",", "128", ")", "\n", "self", ".", "conv4", "=", "ConvBlock", "(", "128", ",", "256", ")", "\n", "\n", "# Stacking part", "\n", "self", ".", "add_module", "(", "'m0'", ",", "HourGlass", "(", "1", ",", "4", ",", "256", ",", "first_one", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'top_m_0'", ",", "ConvBlock", "(", "256", ",", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'conv_last0'", ",", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "self", ".", "add_module", "(", "'bn_end0'", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ")", "\n", "self", ".", "add_module", "(", "'l0'", ",", "nn", ".", "Conv2d", "(", "256", ",", "num_landmarks", "+", "1", ",", "1", ",", "1", ",", "0", ")", ")", "\n", "\n", "if", "fname_pretrained", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_pretrained_weights", "(", "fname_pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.load_pretrained_weights": [[215, 224], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "wing.FAN.state_dict", "wing.FAN.update", "wing.FAN.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "checkpoint[].items"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load"], ["", "", "def", "load_pretrained_weights", "(", "self", ",", "fname", ")", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "fname", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "model_weights", "=", "self", ".", "state_dict", "(", ")", "\n", "model_weights", ".", "update", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", "\n", "if", "k", "in", "model_weights", "}", ")", "\n", "self", ".", "load_state_dict", "(", "model_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.forward": [[225, 247], ["wing.FAN.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wing.FAN.conv3", "wing.FAN.conv4", "torch.relu", "torch.relu", "torch.relu", "outputs.append", "boundary_channels.append", "wing.FAN.bn1", "wing.FAN.conv2", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "_", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ",", "True", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "self", ".", "conv2", "(", "x", ")", ",", "2", ",", "stride", "=", "2", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "boundary_channels", "=", "[", "]", "\n", "tmp_out", "=", "None", "\n", "ll", ",", "boundary_channel", "=", "self", ".", "_modules", "[", "'m0'", "]", "(", "x", ",", "tmp_out", ")", "\n", "ll", "=", "self", ".", "_modules", "[", "'top_m_0'", "]", "(", "ll", ")", "\n", "ll", "=", "F", ".", "relu", "(", "self", ".", "_modules", "[", "'bn_end0'", "]", "\n", "(", "self", ".", "_modules", "[", "'conv_last0'", "]", "(", "ll", ")", ")", ",", "True", ")", "\n", "\n", "# Predict heatmaps", "\n", "tmp_out", "=", "self", ".", "_modules", "[", "'l0'", "]", "(", "ll", ")", "\n", "if", "self", ".", "end_relu", ":", "\n", "            ", "tmp_out", "=", "F", ".", "relu", "(", "tmp_out", ")", "# HACK: Added relu", "\n", "", "outputs", ".", "append", "(", "tmp_out", ")", "\n", "boundary_channels", ".", "append", "(", "boundary_channel", ")", "\n", "return", "outputs", ",", "boundary_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap": [[248, 261], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate", "torch.interpolate", "torch.interpolate", "wing.FAN.", "torch.interpolate.size", "preprocess.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "wing.preprocess"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.preprocess"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_heatmap", "(", "self", ",", "x", ",", "b_preprocess", "=", "True", ")", ":", "\n", "        ", "''' outputs 0-1 normalized heatmap '''", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "256", ",", "mode", "=", "'bilinear'", ")", "\n", "x_01", "=", "x", "*", "0.5", "+", "0.5", "\n", "outputs", ",", "_", "=", "self", "(", "x_01", ")", "\n", "heatmaps", "=", "outputs", "[", "-", "1", "]", "[", ":", ",", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "scale_factor", "=", "x", ".", "size", "(", "2", ")", "//", "heatmaps", ".", "size", "(", "2", ")", "\n", "if", "b_preprocess", ":", "\n", "            ", "heatmaps", "=", "F", ".", "interpolate", "(", "heatmaps", ",", "scale_factor", "=", "scale_factor", ",", "\n", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "heatmaps", "=", "preprocess", "(", "heatmaps", ")", "\n", "", "return", "heatmaps", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_landmark": [[262, 273], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "wing.FAN.get_heatmap", "range", "x.size", "wing.get_preds_fromhm", "landmarks.append", "x.size", "wing.FAN.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "heatmaps[].cpu().unsqueeze", "heatmaps[].cpu"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.get_preds_fromhm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_landmark", "(", "self", ",", "x", ")", ":", "\n", "        ", "''' outputs landmarks of x.shape '''", "\n", "heatmaps", "=", "self", ".", "get_heatmap", "(", "x", ",", "b_preprocess", "=", "False", ")", "\n", "landmarks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "pred_landmarks", "=", "get_preds_fromhm", "(", "heatmaps", "[", "i", "]", ".", "cpu", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "landmarks", ".", "append", "(", "pred_landmarks", ")", "\n", "", "scale_factor", "=", "x", ".", "size", "(", "2", ")", "//", "heatmaps", ".", "size", "(", "2", ")", "\n", "landmarks", "=", "torch", ".", "cat", "(", "landmarks", ")", "*", "scale_factor", "\n", "return", "landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FaceAligner.__init__": [[291, 298], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "FAN().to().eval", "wing.landmarks2xaxis", "numpy.float32", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "FAN().to", "numpy.load", "wing.FAN"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2xaxis", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load"], ["    ", "def", "__init__", "(", "self", ",", "fname_wing", ",", "fname_celeba_mean", ",", "output_size", ")", ":", "\n", "        ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "fan", "=", "FAN", "(", "fname_pretrained", "=", "fname_wing", ")", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "scale", "=", "output_size", "//", "256", "\n", "self", ".", "CELEB_REF", "=", "np", ".", "float32", "(", "np", ".", "load", "(", "fname_celeba_mean", ")", "[", "'mean'", "]", ")", "*", "scale", "\n", "self", ".", "xaxis_ref", "=", "landmarks2xaxis", "(", "self", ".", "CELEB_REF", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FaceAligner.align": [[299, 313], ["imgs.to.to.to", "wing.FaceAligner.fan.get_landmark().cpu().numpy", "enumerate", "zip", "wing.tensor2numpy255", "wing.pad_mirror", "wing.FaceAligner.landmarks2mat", "max", "max", "cv2.warpPerspective", "wing.np2tensor", "wing.FaceAligner.fan.get_landmark().cpu", "wing.FaceAligner.fan.get_landmark"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.tensor2numpy255", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.pad_mirror", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FaceAligner.landmarks2mat", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.np2tensor", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_landmark"], ["", "def", "align", "(", "self", ",", "imgs", ",", "output_size", "=", "256", ")", ":", "\n", "        ", "''' imgs = torch.CUDATensor of BCHW '''", "\n", "imgs", "=", "imgs", ".", "to", "(", "self", ".", "device", ")", "\n", "landmarkss", "=", "self", ".", "fan", ".", "get_landmark", "(", "imgs", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", ",", "(", "img", ",", "landmarks", ")", "in", "enumerate", "(", "zip", "(", "imgs", ",", "landmarkss", ")", ")", ":", "\n", "            ", "img_np", "=", "tensor2numpy255", "(", "img", ")", "\n", "img_np", ",", "landmarks", "=", "pad_mirror", "(", "img_np", ",", "landmarks", ")", "\n", "transform", "=", "self", ".", "landmarks2mat", "(", "landmarks", ")", "\n", "rows", ",", "cols", ",", "_", "=", "img_np", ".", "shape", "\n", "rows", "=", "max", "(", "rows", ",", "self", ".", "output_size", ")", "\n", "cols", "=", "max", "(", "cols", ",", "self", ".", "output_size", ")", "\n", "aligned", "=", "cv2", ".", "warpPerspective", "(", "img_np", ",", "transform", ",", "(", "cols", ",", "rows", ")", ",", "flags", "=", "cv2", ".", "INTER_LANCZOS4", ")", "\n", "imgs", "[", "i", "]", "=", "np2tensor", "(", "aligned", "[", ":", "self", ".", "output_size", ",", ":", "self", ".", "output_size", ",", ":", "]", ")", "\n", "", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FaceAligner.landmarks2mat": [[314, 322], ["wing.points2T", "wing.landmarks2xaxis", "wing.vecs2R", "wing.landmarks2S", "wing.points2T", "numpy.dot", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.points2T", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2xaxis", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.vecs2R", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2S", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.points2T"], ["", "def", "landmarks2mat", "(", "self", ",", "landmarks", ")", ":", "\n", "        ", "T_origin", "=", "points2T", "(", "landmarks", ",", "'from'", ")", "\n", "xaxis_src", "=", "landmarks2xaxis", "(", "landmarks", ")", "\n", "R", "=", "vecs2R", "(", "xaxis_src", ",", "self", ".", "xaxis_ref", ")", "\n", "S", "=", "landmarks2S", "(", "landmarks", ",", "self", ".", "CELEB_REF", ")", "\n", "T_ref", "=", "points2T", "(", "self", ".", "CELEB_REF", ",", "'to'", ")", "\n", "matrix", "=", "np", ".", "dot", "(", "T_ref", ",", "np", ".", "dot", "(", "S", ",", "np", ".", "dot", "(", "R", ",", "T_origin", ")", ")", ")", "\n", "return", "matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.get_preds_fromhm": [[27, 47], ["torch.max", "torch.max", "torch.max", "idx.view().repeat().float", "preds[].apply_", "preds[].add_().div_().floor_().add_", "range", "idx.view().repeat().float.add_", "hm.view", "idx.view().repeat().float.size", "range", "hm.size", "hm.size", "idx.view().repeat", "preds[].add_().div_().floor_", "idx.view().repeat().float.size", "hm.size", "hm.size", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "preds[].add_", "idx.view", "hm.size", "preds[].add_().div_", "int", "int", "torch.FloatTensor.sign_().mul_", "idx.size", "idx.size", "hm.size", "preds[].add_", "torch.FloatTensor.sign_"], "function", ["None"], ["def", "get_preds_fromhm", "(", "hm", ")", ":", "\n", "    ", "max", ",", "idx", "=", "torch", ".", "max", "(", "\n", "hm", ".", "view", "(", "hm", ".", "size", "(", "0", ")", ",", "hm", ".", "size", "(", "1", ")", ",", "hm", ".", "size", "(", "2", ")", "*", "hm", ".", "size", "(", "3", ")", ")", ",", "2", ")", "\n", "idx", "+=", "1", "\n", "preds", "=", "idx", ".", "view", "(", "idx", ".", "size", "(", "0", ")", ",", "idx", ".", "size", "(", "1", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "2", ")", ".", "float", "(", ")", "\n", "preds", "[", "...", ",", "0", "]", ".", "apply_", "(", "lambda", "x", ":", "(", "x", "-", "1", ")", "%", "hm", ".", "size", "(", "3", ")", "+", "1", ")", "\n", "preds", "[", "...", ",", "1", "]", ".", "add_", "(", "-", "1", ")", ".", "div_", "(", "hm", ".", "size", "(", "2", ")", ")", ".", "floor_", "(", ")", ".", "add_", "(", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "preds", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "preds", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hm_", "=", "hm", "[", "i", ",", "j", ",", ":", "]", "\n", "pX", ",", "pY", "=", "int", "(", "preds", "[", "i", ",", "j", ",", "0", "]", ")", "-", "1", ",", "int", "(", "preds", "[", "i", ",", "j", ",", "1", "]", ")", "-", "1", "\n", "if", "pX", ">", "0", "and", "pX", "<", "63", "and", "pY", ">", "0", "and", "pY", "<", "63", ":", "\n", "                ", "diff", "=", "torch", ".", "FloatTensor", "(", "\n", "[", "hm_", "[", "pY", ",", "pX", "+", "1", "]", "-", "hm_", "[", "pY", ",", "pX", "-", "1", "]", ",", "\n", "hm_", "[", "pY", "+", "1", ",", "pX", "]", "-", "hm_", "[", "pY", "-", "1", ",", "pX", "]", "]", ")", "\n", "preds", "[", "i", ",", "j", "]", ".", "add_", "(", "diff", ".", "sign_", "(", ")", ".", "mul_", "(", ".25", ")", ")", "\n", "\n", "", "", "", "preds", ".", "add_", "(", "-", "0.5", ")", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.tensor2numpy255": [[280, 283], ["tensor.permute().cpu().numpy", "tensor.permute().cpu", "tensor.permute"], "function", ["None"], ["", "", "def", "tensor2numpy255", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Converts torch tensor to numpy array.\"\"\"", "\n", "return", "(", "(", "tensor", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "*", "0.5", "+", "0.5", ")", "*", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.np2tensor": [[285, 288], ["torch.FloatTensor().permute", "torch.FloatTensor().permute", "torch.FloatTensor().permute", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "def", "np2tensor", "(", "image", ")", ":", "\n", "    ", "\"\"\"Converts numpy array to torch tensor.\"\"\"", "\n", "return", "torch", ".", "FloatTensor", "(", "image", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "/", "255", "*", "2", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.points2T": [[324, 330], ["point.mean", "numpy.eye"], "function", ["None"], ["", "", "def", "points2T", "(", "point", ",", "direction", ")", ":", "\n", "    ", "point_mean", "=", "point", ".", "mean", "(", "axis", "=", "0", ")", "\n", "T", "=", "np", ".", "eye", "(", "3", ")", "\n", "coef", "=", "-", "1", "if", "direction", "==", "'from'", "else", "1", "\n", "T", "[", ":", "2", ",", "2", "]", "=", "coef", "*", "point_mean", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2eyes": [[332, 338], ["numpy.array", "numpy.array", "left.mean", "right.mean", "list", "list", "range", "range"], "function", ["None"], ["", "def", "landmarks2eyes", "(", "landmarks", ")", ":", "\n", "    ", "idx_left", "=", "np", ".", "array", "(", "list", "(", "range", "(", "60", ",", "67", "+", "1", ")", ")", "+", "[", "96", "]", ")", "\n", "idx_right", "=", "np", ".", "array", "(", "list", "(", "range", "(", "68", ",", "75", "+", "1", ")", ")", "+", "[", "97", "]", ")", "\n", "left", "=", "landmarks", "[", "idx_left", "]", "\n", "right", "=", "landmarks", "[", "idx_right", "]", "\n", "return", "left", ".", "mean", "(", "axis", "=", "0", ")", ",", "right", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2mouthends": [[340, 344], ["None"], "function", ["None"], ["", "def", "landmarks2mouthends", "(", "landmarks", ")", ":", "\n", "    ", "left", "=", "landmarks", "[", "76", "]", "\n", "right", "=", "landmarks", "[", "82", "]", "\n", "return", "left", ",", "right", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.rotate90": [[346, 349], ["numpy.array"], "function", ["None"], ["", "def", "rotate90", "(", "vec", ")", ":", "\n", "    ", "x", ",", "y", "=", "vec", "\n", "return", "np", ".", "array", "(", "[", "y", ",", "-", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2xaxis": [[351, 360], ["wing.landmarks2eyes", "wing.landmarks2mouthends", "wing.rotate90", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2eyes", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2mouthends", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.rotate90"], ["", "def", "landmarks2xaxis", "(", "landmarks", ")", ":", "\n", "    ", "eye_left", ",", "eye_right", "=", "landmarks2eyes", "(", "landmarks", ")", "\n", "mouth_left", ",", "mouth_right", "=", "landmarks2mouthends", "(", "landmarks", ")", "\n", "xp", "=", "eye_right", "-", "eye_left", "# x' in pggan", "\n", "eye_center", "=", "(", "eye_left", "+", "eye_right", ")", "*", "0.5", "\n", "mouth_center", "=", "(", "mouth_left", "+", "mouth_right", ")", "*", "0.5", "\n", "yp", "=", "eye_center", "-", "mouth_center", "\n", "xaxis", "=", "xp", "-", "rotate90", "(", "yp", ")", "\n", "return", "xaxis", "/", "np", ".", "linalg", ".", "norm", "(", "xaxis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.vecs2R": [[362, 369], ["numpy.dot", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.sqrt", "numpy.sign", "numpy.cross"], "function", ["None"], ["", "def", "vecs2R", "(", "vec_x", ",", "vec_y", ")", ":", "\n", "    ", "vec_x", "=", "vec_x", "/", "np", ".", "linalg", ".", "norm", "(", "vec_x", ")", "\n", "vec_y", "=", "vec_y", "/", "np", ".", "linalg", ".", "norm", "(", "vec_y", ")", "\n", "c", "=", "np", ".", "dot", "(", "vec_x", ",", "vec_y", ")", "\n", "s", "=", "np", ".", "sqrt", "(", "1", "-", "c", "*", "c", ")", "*", "np", ".", "sign", "(", "np", ".", "cross", "(", "vec_x", ",", "vec_y", ")", ")", "\n", "R", "=", "np", ".", "array", "(", "(", "(", "c", ",", "-", "s", ",", "0", ")", ",", "(", "s", ",", "c", ",", "0", ")", ",", "(", "0", ",", "0", ",", "1", ")", ")", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.landmarks2S": [[371, 387], ["x.mean().squeeze", "y.mean().squeeze", "numpy.linalg.norm", "numpy.linalg.norm", "[].mean", "numpy.eye", "x.mean", "y.mean"], "function", ["None"], ["", "def", "landmarks2S", "(", "x", ",", "y", ")", ":", "\n", "    ", "x_mean", "=", "x", ".", "mean", "(", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "y_mean", "=", "y", ".", "mean", "(", "axis", "=", "0", ")", ".", "squeeze", "(", ")", "\n", "# vectors = mean -> each point", "\n", "x_vectors", "=", "x", "-", "x_mean", "\n", "y_vectors", "=", "y", "-", "y_mean", "\n", "\n", "x_norms", "=", "np", ".", "linalg", ".", "norm", "(", "x_vectors", ",", "axis", "=", "1", ")", "\n", "y_norms", "=", "np", ".", "linalg", ".", "norm", "(", "y_vectors", ",", "axis", "=", "1", ")", "\n", "\n", "indices", "=", "[", "96", ",", "97", ",", "76", ",", "82", "]", "# indices for eyes, lips", "\n", "scale", "=", "(", "y_norms", "/", "x_norms", ")", "[", "indices", "]", ".", "mean", "(", ")", "\n", "\n", "S", "=", "np", ".", "eye", "(", "3", ")", "\n", "S", "[", "0", ",", "0", "]", "=", "S", "[", "1", ",", "1", "]", "=", "scale", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.pad_mirror": [[389, 405], ["numpy.pad", "skimage.filters.gaussian", "numpy.meshgrid", "numpy.clip", "numpy.clip", "numpy.minimum", "numpy.minimum", "numpy.array", "cv2.resize", "cv2.resize", "numpy.arange", "numpy.arange", "numpy.flip", "numpy.flip", "numpy.expand_dims", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize"], ["", "def", "pad_mirror", "(", "img", ",", "landmarks", ")", ":", "\n", "    ", "H", ",", "W", ",", "_", "=", "img", ".", "shape", "\n", "img", "=", "np", ".", "pad", "(", "img", ",", "(", "(", "H", "//", "2", ",", "H", "//", "2", ")", ",", "(", "W", "//", "2", ",", "W", "//", "2", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "small_blurred", "=", "gaussian", "(", "cv2", ".", "resize", "(", "img", ",", "(", "W", ",", "H", ")", ")", ",", "H", "//", "100", ",", "multichannel", "=", "True", ")", "\n", "blurred", "=", "cv2", ".", "resize", "(", "small_blurred", ",", "(", "W", "*", "2", ",", "H", "*", "2", ")", ")", "*", "255", "\n", "\n", "H", ",", "W", ",", "_", "=", "img", ".", "shape", "\n", "coords", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "H", ")", ",", "np", ".", "arange", "(", "W", ")", ",", "indexing", "=", "\"ij\"", ")", "\n", "weight_y", "=", "np", ".", "clip", "(", "coords", "[", "0", "]", "/", "(", "H", "//", "4", ")", ",", "0", ",", "1", ")", "\n", "weight_x", "=", "np", ".", "clip", "(", "coords", "[", "1", "]", "/", "(", "H", "//", "4", ")", ",", "0", ",", "1", ")", "\n", "weight_y", "=", "np", ".", "minimum", "(", "weight_y", ",", "np", ".", "flip", "(", "weight_y", ",", "axis", "=", "0", ")", ")", "\n", "weight_x", "=", "np", ".", "minimum", "(", "weight_x", ",", "np", ".", "flip", "(", "weight_x", ",", "axis", "=", "1", ")", ")", "\n", "weight", "=", "np", ".", "expand_dims", "(", "np", ".", "minimum", "(", "weight_y", ",", "weight_x", ")", ",", "2", ")", "**", "4", "\n", "img", "=", "img", "*", "weight", "+", "blurred", "*", "(", "1", "-", "weight", ")", "\n", "landmarks", "+=", "np", ".", "array", "(", "[", "W", "//", "4", ",", "H", "//", "4", "]", ")", "\n", "return", "img", ",", "landmarks", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.align_faces": [[407, 430], ["wing.FaceAligner", "transforms.Compose", "os.listdir", "os.makedirs", "os.listdir.sort", "Image.open().convert", "transforms.Compose.unsqueeze", "wing.FaceAligner.align", "save_image", "print", "transforms.Resize", "transforms.ToTensor", "transforms.Normalize", "Image.open", "transforms.Compose.", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FaceAligner.align", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image"], ["", "def", "align_faces", "(", "args", ",", "input_dir", ",", "output_dir", ")", ":", "\n", "    ", "import", "os", "\n", "from", "torchvision", "import", "transforms", "\n", "from", "PIL", "import", "Image", "\n", "from", "core", ".", "utils", "import", "save_image", "\n", "\n", "aligner", "=", "FaceAligner", "(", "args", ".", "wing_path", ",", "args", ".", "lm_path", ",", "args", ".", "img_size", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "args", ".", "img_size", ",", "args", ".", "img_size", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "]", ")", "\n", "\n", "fnames", "=", "os", ".", "listdir", "(", "input_dir", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "fnames", ".", "sort", "(", ")", "\n", "for", "fname", "in", "fnames", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "fname", ")", ")", ".", "convert", "(", "'RGB'", ")", "\n", "x", "=", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "\n", "x_aligned", "=", "aligner", ".", "align", "(", "x", ")", "\n", "save_image", "(", "x_aligned", ",", "1", ",", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "fname", ")", ")", "\n", "print", "(", "'Saved the aligned image to %s...'", "%", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.normalize": [[437, 447], ["x.contiguous.contiguous", "x.contiguous.size", "x.contiguous.view", "x.view.view", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min"], "function", ["None"], ["", "", "def", "normalize", "(", "x", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Apply min-max normalization.\"\"\"", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x_", "=", "x", ".", "view", "(", "N", "*", "C", ",", "-", "1", ")", "\n", "max_val", "=", "torch", ".", "max", "(", "x_", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "min_val", "=", "torch", ".", "min", "(", "x_", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x_", "=", "(", "x_", "-", "min_val", ")", "/", "(", "max_val", "-", "min_val", "+", "eps", ")", "\n", "out", "=", "x_", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.truncate": [[449, 452], ["torch.where", "torch.where", "torch.where", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "truncate", "(", "x", ",", "thres", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Remove small values in heatmaps.\"\"\"", "\n", "return", "torch", ".", "where", "(", "x", "<", "thres", ",", "torch", ".", "zeros_like", "(", "x", ")", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize": [[454, 457], ["None"], "function", ["None"], ["", "def", "resize", "(", "x", ",", "p", "=", "2", ")", ":", "\n", "    ", "\"\"\"Resize heatmaps.\"\"\"", "\n", "return", "x", "**", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.shift": [[459, 478], ["abs", "x.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "shift", "(", "x", ",", "N", ")", ":", "\n", "    ", "\"\"\"Shift N pixels up or down.\"\"\"", "\n", "up", "=", "N", ">=", "0", "\n", "N", "=", "abs", "(", "N", ")", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "head", "=", "torch", ".", "arange", "(", "N", ")", "\n", "tail", "=", "torch", ".", "arange", "(", "H", "-", "N", ")", "\n", "\n", "if", "up", ":", "\n", "        ", "head", "=", "torch", ".", "arange", "(", "H", "-", "N", ")", "+", "N", "\n", "tail", "=", "torch", ".", "arange", "(", "N", ")", "\n", "", "else", ":", "\n", "        ", "head", "=", "torch", ".", "arange", "(", "N", ")", "+", "(", "H", "-", "N", ")", "\n", "tail", "=", "torch", ".", "arange", "(", "H", "-", "N", ")", "\n", "\n", "# permutation indices", "\n", "", "perm", "=", "torch", ".", "cat", "(", "[", "head", ",", "tail", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "out", "=", "x", "[", ":", ",", ":", ",", "perm", ",", ":", "]", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.preprocess": [[494, 541], ["torch.sum.size", "wing.truncate", "wing.normalize", "munch.Munch", "munch.Munch.items", "torch.cat", "torch.cat", "torch.cat", "wing.shift", "wing.resize", "wing.resize", "copy.deepcopy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "wing.resize", "wing.resize", "wing.shift", "torch.sum.clamp_", "torch.sum.clamp_", "OPPAIR", "OPPAIR", "OPPAIR", "OPPAIR", "OPPAIR", "OPPAIR", "wing.shift", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "wing.shift"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.truncate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.normalize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.shift", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.resize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.shift", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.shift", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.shift"], ["def", "preprocess", "(", "x", ")", ":", "\n", "    ", "\"\"\"Preprocess 98-dimensional heatmaps.\"\"\"", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "truncate", "(", "x", ")", "\n", "x", "=", "normalize", "(", "x", ")", "\n", "\n", "sw", "=", "H", "//", "256", "\n", "operations", "=", "Munch", "(", "chin", "=", "OPPAIR", "(", "0", ",", "3", ")", ",", "\n", "eyebrows", "=", "OPPAIR", "(", "-", "7", "*", "sw", ",", "2", ")", ",", "\n", "nostrils", "=", "OPPAIR", "(", "8", "*", "sw", ",", "4", ")", ",", "\n", "lipupper", "=", "OPPAIR", "(", "-", "8", "*", "sw", ",", "4", ")", ",", "\n", "liplower", "=", "OPPAIR", "(", "8", "*", "sw", ",", "4", ")", ",", "\n", "lipinner", "=", "OPPAIR", "(", "-", "2", "*", "sw", ",", "3", ")", ")", "\n", "\n", "for", "part", ",", "ops", "in", "operations", ".", "items", "(", ")", ":", "\n", "        ", "start", ",", "end", "=", "index_map", "[", "part", "]", "\n", "x", "[", ":", ",", "start", ":", "end", "]", "=", "resize", "(", "shift", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "ops", ".", "shift", ")", ",", "ops", ".", "resize", ")", "\n", "\n", "", "zero_out", "=", "torch", ".", "cat", "(", "[", "torch", ".", "arange", "(", "0", ",", "index_map", ".", "chin", ".", "start", ")", ",", "\n", "torch", ".", "arange", "(", "index_map", ".", "chin", ".", "end", ",", "33", ")", ",", "\n", "torch", ".", "LongTensor", "(", "[", "index_map", ".", "eyebrowsedges", ".", "start", ",", "\n", "index_map", ".", "eyebrowsedges", ".", "end", ",", "\n", "index_map", ".", "lipedges", ".", "start", ",", "\n", "index_map", ".", "lipedges", ".", "end", "]", ")", "]", ")", "\n", "x", "[", ":", ",", "zero_out", "]", "=", "0", "\n", "\n", "start", ",", "end", "=", "index_map", ".", "nose", "\n", "x", "[", ":", ",", "start", "+", "1", ":", "end", "]", "=", "shift", "(", "x", "[", ":", ",", "start", "+", "1", ":", "end", "]", ",", "4", "*", "sw", ")", "\n", "x", "[", ":", ",", "start", ":", "end", "]", "=", "resize", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "1", ")", "\n", "\n", "start", ",", "end", "=", "index_map", ".", "eyes", "\n", "x", "[", ":", ",", "start", ":", "end", "]", "=", "resize", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "1", ")", "\n", "x", "[", ":", ",", "start", ":", "end", "]", "=", "resize", "(", "shift", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "-", "8", ")", ",", "3", ")", "+", "shift", "(", "x", "[", ":", ",", "start", ":", "end", "]", ",", "-", "24", ")", "\n", "\n", "# Second-level mask", "\n", "x2", "=", "deepcopy", "(", "x", ")", "\n", "x2", "[", ":", ",", "index_map", ".", "chin", ".", "start", ":", "index_map", ".", "chin", ".", "end", "]", "=", "0", "# start:end was 0:33", "\n", "x2", "[", ":", ",", "index_map", ".", "lipedges", ".", "start", ":", "index_map", ".", "lipinner", ".", "end", "]", "=", "0", "# start:end was 76:96", "\n", "x2", "[", ":", ",", "index_map", ".", "eyebrows", ".", "start", ":", "index_map", ".", "eyebrows", ".", "end", "]", "=", "0", "# start:end was 33:51", "\n", "\n", "x", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# (N, 1, H, W)", "\n", "x2", "=", "torch", ".", "sum", "(", "x2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# mask without faceline and mouth", "\n", "\n", "x", "[", "x", "!=", "x", "]", "=", "0", "# set nan to zero", "\n", "x2", "[", "x", "!=", "x", "]", "=", "0", "# set nan to zero", "\n", "return", "x", ".", "clamp_", "(", "0", ",", "1", ")", ",", "x2", ".", "clamp_", "(", "0", ",", "1", ")", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_json": [[30, 33], ["open", "json.dump"], "function", ["None"], ["def", "save_json", "(", "json_file", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "json_file", ",", "f", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.print_network": [[35, 41], ["network.parameters", "print", "p.numel"], "function", ["None"], ["", "", "def", "print_network", "(", "network", ",", "name", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "p", "in", "network", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "p", ".", "numel", "(", ")", "\n", "# print(network)", "\n", "", "print", "(", "\"Number of parameters of %s: %i\"", "%", "(", "name", ",", "num_params", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.he_init": [[43, 52], ["isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["", "def", "he_init", "(", "module", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.denormalize": [[54, 57], ["out.clamp_"], "function", ["None"], ["", "", "", "def", "denormalize", "(", "x", ")", ":", "\n", "    ", "out", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "return", "out", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image": [[59, 62], ["utils.denormalize", "torchvision.save_image", "denormalize.cpu"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.denormalize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image"], ["", "def", "save_image", "(", "x", ",", "ncol", ",", "filename", ")", ":", "\n", "    ", "x", "=", "denormalize", "(", "x", ")", "\n", "vutils", ".", "save_image", "(", "x", ".", "cpu", "(", ")", ",", "filename", ",", "nrow", "=", "ncol", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.translate_and_reconstruct": [[64, 77], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "x_src.size", "nets.style_encoder", "nets.generator", "nets.style_encoder", "nets.generator", "torch.cat", "torch.cat", "torch.cat", "utils.save_image", "nets.fan.get_heatmap", "nets.fan.get_heatmap"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "translate_and_reconstruct", "(", "nets", ",", "args", ",", "x_src", ",", "y_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "s_src", "=", "nets", ".", "style_encoder", "(", "x_src", ",", "y_src", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_fake", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "x_rec", ",", "_", "=", "nets", ".", "generator", "(", "x_fake", ",", "s_src", ",", "masks", "=", "masks", ")", "\n", "x_concat", "=", "[", "x_src", ",", "x_ref", ",", "x_fake", ",", "x_rec", "]", "\n", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", ",", "filename", ")", "\n", "del", "x_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.translate_using_latent": [[79, 101], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "x_src.size", "z_trg_list[].size", "enumerate", "torch.cat", "torch.cat", "torch.cat", "utils.save_image", "nets.fan.get_heatmap", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "nets.mapping_network", "torch.mean", "torch.mean", "torch.mean", "s_avg.repeat.repeat", "nets.mapping_network", "torch.lerp", "torch.lerp", "torch.lerp", "nets.generator", "torch.randn", "torch.randn", "torch.randn", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "translate_using_latent", "(", "nets", ",", "args", ",", "x_src", ",", "y_trg_list", ",", "z_trg_list", ",", "psi", ",", "filename", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "latent_dim", "=", "z_trg_list", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "x_concat", "=", "[", "x_src", "]", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "\n", "for", "i", ",", "y_trg", "in", "enumerate", "(", "y_trg_list", ")", ":", "\n", "        ", "z_many", "=", "torch", ".", "randn", "(", "10000", ",", "latent_dim", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "y_many", "=", "torch", ".", "LongTensor", "(", "10000", ")", ".", "to", "(", "x_src", ".", "device", ")", ".", "fill_", "(", "y_trg", "[", "0", "]", ")", "\n", "s_many", "=", "nets", ".", "mapping_network", "(", "z_many", ",", "y_many", ")", "\n", "s_avg", "=", "torch", ".", "mean", "(", "s_many", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "s_avg", "=", "s_avg", ".", "repeat", "(", "N", ",", "1", ")", "\n", "\n", "for", "z_trg", "in", "z_trg_list", ":", "\n", "            ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "s_trg", "=", "torch", ".", "lerp", "(", "s_avg", ",", "s_trg", ",", "psi", ")", "\n", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "x_concat", "+=", "[", "x_fake", "]", "\n", "\n", "", "", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.translate_using_reference": [[103, 121], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "x_src.size", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.cat", "torch.cat", "torch.cat", "nets.style_encoder", "nets.style_encoder.unsqueeze().repeat", "enumerate", "torch.cat", "torch.cat", "torch.cat", "utils.save_image", "nets.fan.get_heatmap", "nets.generator", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "nets.style_encoder.unsqueeze"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "translate_using_reference", "(", "nets", ",", "args", ",", "x_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "wb", "=", "torch", ".", "ones", "(", "1", ",", "C", ",", "H", ",", "W", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "x_src_with_wb", "=", "torch", ".", "cat", "(", "[", "wb", ",", "x_src", "]", ",", "dim", "=", "0", ")", "\n", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "s_ref_list", "=", "s_ref", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "x_concat", "=", "[", "x_src_with_wb", "]", "\n", "for", "i", ",", "s_ref", "in", "enumerate", "(", "s_ref_list", ")", ":", "\n", "        ", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "x_fake_with_ref", "=", "torch", ".", "cat", "(", "[", "x_ref", "[", "i", ":", "i", "+", "1", "]", ",", "x_fake", "]", ",", "dim", "=", "0", ")", "\n", "x_concat", "+=", "[", "x_fake_with_ref", "]", "\n", "\n", "", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", "+", "1", ",", "filename", ")", "\n", "del", "x_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.debug_image": [[123, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "inputs.x_src.size", "os.path.join", "utils.translate_and_reconstruct", "torch.randn().repeat().to", "torch.randn().repeat().to", "torch.randn().repeat().to", "os.path.join", "utils.translate_using_reference", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "torch.tensor().repeat().to", "os.path.join", "utils.translate_using_latent", "range", "torch.randn().repeat", "torch.randn().repeat", "torch.randn().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "torch.tensor().repeat", "min", "torch.randn", "torch.randn", "torch.randn", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.translate_and_reconstruct", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.translate_using_reference", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.translate_using_latent"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "debug_image", "(", "nets", ",", "args", ",", "inputs", ",", "step", ")", ":", "\n", "    ", "x_src", ",", "y_src", "=", "inputs", ".", "x_src", ",", "inputs", ".", "y_src", "\n", "x_ref", ",", "y_ref", "=", "inputs", ".", "x_ref", ",", "inputs", ".", "y_ref", "\n", "\n", "device", "=", "inputs", ".", "x_src", ".", "device", "\n", "N", "=", "inputs", ".", "x_src", ".", "size", "(", "0", ")", "\n", "\n", "# translate and reconstruct (reference-guided)", "\n", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_cycle_consistency.jpg'", "%", "(", "step", ")", ")", "\n", "translate_and_reconstruct", "(", "nets", ",", "args", ",", "x_src", ",", "y_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", "\n", "\n", "# latent-guided image synthesis", "\n", "y_trg_list", "=", "[", "torch", ".", "tensor", "(", "y", ")", ".", "repeat", "(", "N", ")", ".", "to", "(", "device", ")", "\n", "for", "y", "in", "range", "(", "min", "(", "args", ".", "num_domains", ",", "5", ")", ")", "]", "\n", "z_trg_list", "=", "torch", ".", "randn", "(", "args", ".", "num_outs_per_domain", ",", "1", ",", "args", ".", "latent_dim", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "for", "psi", "in", "[", "0.5", ",", "0.7", ",", "1.0", "]", ":", "\n", "        ", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_latent_psi_%.1f.jpg'", "%", "(", "step", ",", "psi", ")", ")", "\n", "translate_using_latent", "(", "nets", ",", "args", ",", "x_src", ",", "y_trg_list", ",", "z_trg_list", ",", "psi", ",", "filename", ")", "\n", "\n", "# reference-guided image synthesis", "\n", "", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_reference.jpg'", "%", "(", "step", ")", ")", "\n", "translate_using_reference", "(", "nets", ",", "args", ",", "x_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid": [[153, 155], ["numpy.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "x", ",", "w", "=", "1", ")", ":", "\n", "    ", "return", "1.", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "w", "*", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.get_alphas": [[157, 159], ["utils.sigmoid", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid"], ["", "def", "get_alphas", "(", "start", "=", "-", "5", ",", "end", "=", "5", ",", "step", "=", "0.5", ",", "len_tail", "=", "10", ")", ":", "\n", "    ", "return", "[", "0", "]", "+", "[", "sigmoid", "(", "alpha", ")", "for", "alpha", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "step", ")", "]", "+", "[", "1", "]", "*", "len_tail", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate": [[161, 176], ["x_src.size", "utils.get_alphas", "torch.cat", "torch.cat", "torch.cat", "nets.fan.get_heatmap", "torch.lerp", "torch.lerp", "torch.lerp", "nets.generator", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.make_grid().unsqueeze", "torchvision.utils.make_grid().unsqueeze", "torchvision.utils.make_grid().unsqueeze", "torch.cat.append", "x_src.cpu", "x_fake.cpu", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.get_alphas", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.FAN.get_heatmap"], ["", "def", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", ":", "\n", "    ", "''' returns T x C x H x W '''", "\n", "B", "=", "x_src", ".", "size", "(", "0", ")", "\n", "frames", "=", "[", "]", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "alphas", "=", "get_alphas", "(", ")", "\n", "\n", "for", "alpha", "in", "alphas", ":", "\n", "        ", "s_ref", "=", "torch", ".", "lerp", "(", "s_prev", ",", "s_next", ",", "alpha", ")", "\n", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "entries", "=", "torch", ".", "cat", "(", "[", "x_src", ".", "cpu", "(", ")", ",", "x_fake", ".", "cpu", "(", ")", "]", ",", "dim", "=", "2", ")", "\n", "frame", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "entries", ",", "nrow", "=", "B", ",", "padding", "=", "0", ",", "pad_value", "=", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "frames", ".", "append", "(", "frame", ")", "\n", "", "frames", "=", "torch", ".", "cat", "(", "frames", ")", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.slide": [[178, 199], ["utils.get_alphas", "len", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.ones", "torch.ones", "torch.ones", "int"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.get_alphas"], ["", "def", "slide", "(", "entries", ",", "margin", "=", "32", ")", ":", "\n", "    ", "\"\"\"Returns a sliding reference window.\n    Args:\n        entries: a list containing two reference images, x_prev and x_next, \n                 both of which has a shape (1, 3, 256, 256)\n    Returns:\n        canvas: output slide of shape (num_frames, 3, 256*2, 256+margin)\n    \"\"\"", "\n", "_", ",", "C", ",", "H", ",", "W", "=", "entries", "[", "0", "]", ".", "shape", "\n", "alphas", "=", "get_alphas", "(", ")", "\n", "T", "=", "len", "(", "alphas", ")", "# number of frames", "\n", "\n", "canvas", "=", "-", "torch", ".", "ones", "(", "(", "T", ",", "C", ",", "H", "*", "2", ",", "W", "+", "margin", ")", ")", "\n", "merged", "=", "torch", ".", "cat", "(", "entries", ",", "dim", "=", "2", ")", "# (1, 3, 512, 256)", "\n", "for", "t", ",", "alpha", "in", "enumerate", "(", "alphas", ")", ":", "\n", "        ", "top", "=", "int", "(", "H", "*", "(", "1", "-", "alpha", ")", ")", "# top, bottom for canvas", "\n", "bottom", "=", "H", "*", "2", "\n", "m_top", "=", "0", "# top, bottom for merged", "\n", "m_bottom", "=", "2", "*", "H", "-", "top", "\n", "canvas", "[", "t", ",", ":", ",", "top", ":", "bottom", ",", ":", "W", "]", "=", "merged", "[", ":", ",", ":", ",", "m_top", ":", "m_bottom", ",", ":", "]", "\n", "", "return", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.video_ref": [[201, 227], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "nets.style_encoder", "tqdm.tqdm", "range", "utils.tensor2ndarray255", "utils.save_video", "zip", "len", "utils.interpolate", "utils.slide", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "tensor2ndarray255.append", "tensor2ndarray255.append", "torch.cat", "torch.cat", "torch.cat", "d.unsqueeze", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.tensor2ndarray255", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_video", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.slide"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "video_ref", "(", "nets", ",", "args", ",", "x_src", ",", "x_ref", ",", "y_ref", ",", "fname", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "s_prev", "=", "None", "\n", "for", "data_next", "in", "tqdm", "(", "zip", "(", "x_ref", ",", "y_ref", ",", "s_ref", ")", ",", "'video_ref'", ",", "len", "(", "x_ref", ")", ")", ":", "\n", "        ", "x_next", ",", "y_next", ",", "s_next", "=", "[", "d", ".", "unsqueeze", "(", "0", ")", "for", "d", "in", "data_next", "]", "\n", "if", "s_prev", "is", "None", ":", "\n", "            ", "x_prev", ",", "y_prev", ",", "s_prev", "=", "x_next", ",", "y_next", ",", "s_next", "\n", "continue", "\n", "", "if", "y_prev", "!=", "y_next", ":", "\n", "            ", "x_prev", ",", "y_prev", ",", "s_prev", "=", "x_next", ",", "y_next", ",", "s_next", "\n", "continue", "\n", "\n", "", "interpolated", "=", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", "\n", "entries", "=", "[", "x_prev", ",", "x_next", "]", "\n", "slided", "=", "slide", "(", "entries", ")", "# (T, C, 256*2, 256)", "\n", "frames", "=", "torch", ".", "cat", "(", "[", "slided", ",", "interpolated", "]", ",", "dim", "=", "3", ")", ".", "cpu", "(", ")", "# (T, C, 256*2, 256*(batch+1))", "\n", "video", ".", "append", "(", "frames", ")", "\n", "x_prev", ",", "y_prev", ",", "s_prev", "=", "x_next", ",", "y_next", ",", "s_next", "\n", "\n", "# append last frame 10 time", "\n", "", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "video", ".", "append", "(", "frames", "[", "-", "1", ":", "]", ")", "\n", "", "video", "=", "tensor2ndarray255", "(", "torch", ".", "cat", "(", "video", ")", ")", "\n", "save_video", "(", "fname", ",", "video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.video_latent": [[229, 262], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "z_list[].size", "enumerate", "enumerate", "range", "utils.tensor2ndarray255", "utils.save_video", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "torch.LongTensor().to().fill_", "nets.mapping_network", "torch.mean", "torch.mean", "torch.mean", "s_avg.repeat.repeat", "tqdm.tqdm", "interpolate().cpu", "tensor2ndarray255.append", "tensor2ndarray255.append", "torch.cat", "torch.cat", "torch.cat", "x_src.size", "nets.mapping_network", "torch.lerp", "torch.lerp", "torch.lerp", "s_list.append", "len", "torch.randn", "torch.randn", "torch.randn", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "len", "utils.interpolate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.tensor2ndarray255", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_video", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.interpolate"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "video_latent", "(", "nets", ",", "args", ",", "x_src", ",", "y_list", ",", "z_list", ",", "psi", ",", "fname", ")", ":", "\n", "    ", "latent_dim", "=", "z_list", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "s_list", "=", "[", "]", "\n", "for", "i", ",", "y_trg", "in", "enumerate", "(", "y_list", ")", ":", "\n", "        ", "z_many", "=", "torch", ".", "randn", "(", "10000", ",", "latent_dim", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "y_many", "=", "torch", ".", "LongTensor", "(", "10000", ")", ".", "to", "(", "x_src", ".", "device", ")", ".", "fill_", "(", "y_trg", "[", "0", "]", ")", "\n", "s_many", "=", "nets", ".", "mapping_network", "(", "z_many", ",", "y_many", ")", "\n", "s_avg", "=", "torch", ".", "mean", "(", "s_many", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "s_avg", "=", "s_avg", ".", "repeat", "(", "x_src", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n", "for", "z_trg", "in", "z_list", ":", "\n", "            ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "s_trg", "=", "torch", ".", "lerp", "(", "s_avg", ",", "s_trg", ",", "psi", ")", "\n", "s_list", ".", "append", "(", "s_trg", ")", "\n", "\n", "", "", "s_prev", "=", "None", "\n", "video", "=", "[", "]", "\n", "# fetch reference images", "\n", "for", "idx_ref", ",", "s_next", "in", "enumerate", "(", "tqdm", "(", "s_list", ",", "'video_latent'", ",", "len", "(", "s_list", ")", ")", ")", ":", "\n", "        ", "if", "s_prev", "is", "None", ":", "\n", "            ", "s_prev", "=", "s_next", "\n", "continue", "\n", "", "if", "idx_ref", "%", "len", "(", "z_list", ")", "==", "0", ":", "\n", "            ", "s_prev", "=", "s_next", "\n", "continue", "\n", "", "frames", "=", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", ".", "cpu", "(", ")", "\n", "video", ".", "append", "(", "frames", ")", "\n", "s_prev", "=", "s_next", "\n", "", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "video", ".", "append", "(", "frames", "[", "-", "1", ":", "]", ")", "\n", "", "video", "=", "tensor2ndarray255", "(", "torch", ".", "cat", "(", "video", ")", ")", "\n", "save_video", "(", "fname", ",", "video", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_video": [[264, 277], ["isinstance", "ffmpeg.input", "ffmpeg.filter", "ffmpeg.output", "ffmpeg.overwrite_output", "ffmpeg.run_async", "tqdm.tqdm", "ffmpeg.run_async.stdin.close", "ffmpeg.run_async.wait", "ffmpeg.run_async.stdin.write", "frame.astype().tobytes", "frame.astype"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close"], ["", "def", "save_video", "(", "fname", ",", "images", ",", "output_fps", "=", "30", ",", "vcodec", "=", "'libx264'", ",", "filters", "=", "''", ")", ":", "\n", "    ", "assert", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ",", "\"images should be np.array: NHWC\"", "\n", "num_frames", ",", "height", ",", "width", ",", "channels", "=", "images", ".", "shape", "\n", "stream", "=", "ffmpeg", ".", "input", "(", "'pipe:'", ",", "format", "=", "'rawvideo'", ",", "\n", "pix_fmt", "=", "'rgb24'", ",", "s", "=", "'{}x{}'", ".", "format", "(", "width", ",", "height", ")", ")", "\n", "stream", "=", "ffmpeg", ".", "filter", "(", "stream", ",", "'setpts'", ",", "'2*PTS'", ")", "# 2*PTS is for slower playback", "\n", "stream", "=", "ffmpeg", ".", "output", "(", "stream", ",", "fname", ",", "pix_fmt", "=", "'yuv420p'", ",", "vcodec", "=", "vcodec", ",", "r", "=", "output_fps", ")", "\n", "stream", "=", "ffmpeg", ".", "overwrite_output", "(", "stream", ")", "\n", "process", "=", "ffmpeg", ".", "run_async", "(", "stream", ",", "pipe_stdin", "=", "True", ")", "\n", "for", "frame", "in", "tqdm", "(", "images", ",", "desc", "=", "'writing video to %s'", "%", "fname", ")", ":", "\n", "        ", "process", ".", "stdin", ".", "write", "(", "frame", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tobytes", "(", ")", ")", "\n", "", "process", ".", "stdin", ".", "close", "(", ")", "\n", "process", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.tensor2ndarray255": [[279, 282], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.cpu().numpy().transpose", "torch.clamp.cpu().numpy", "torch.clamp.cpu"], "function", ["None"], ["", "def", "tensor2ndarray255", "(", "images", ")", ":", "\n", "    ", "images", "=", "torch", ".", "clamp", "(", "images", "*", "0.5", "+", "0.5", ",", "0", ",", "1", ")", "\n", "return", "images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.load_vgg16": [[283, 287], ["torchvision.vgg16", "models.vgg16.cuda"], "function", ["None"], ["", "def", "load_vgg16", "(", ")", ":", "\n", "    ", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "# relu4_3 layer", "\n", "vgg16", ".", "cuda", "(", ")", "\n", "return", "vgg16", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.vgg_preprocess": [[288, 299], ["type", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "type.cuda", "batch.sub.sub", "torch.autograd.Variable", "type.", "batch.sub.data.size"], "function", ["None"], ["", "def", "vgg_preprocess", "(", "batch", ")", ":", "\n", "    ", "tensortype", "=", "type", "(", "batch", ".", "data", ")", "\n", "(", "r", ",", "g", ",", "b", ")", "=", "torch", ".", "chunk", "(", "batch", ",", "3", ",", "dim", "=", "1", ")", "\n", "batch", "=", "torch", ".", "cat", "(", "(", "b", ",", "g", ",", "r", ")", ",", "dim", "=", "1", ")", "# convert RGB to BGR", "\n", "batch", "=", "(", "batch", "+", "1", ")", "*", "255", "*", "0.5", "# [-1, 1] -> [0, 255]", "\n", "mean", "=", "tensortype", "(", "batch", ".", "data", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "mean", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "103.939", "\n", "mean", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "116.779", "\n", "mean", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "123.680", "\n", "batch", "=", "batch", ".", "sub", "(", "Variable", "(", "mean", ")", ")", "# subtract mean", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.abs_criterion": [[301, 303], ["torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "abs_criterion", "(", "in_", ",", "target", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "in_", "-", "target", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.__init__": [[16, 20], ["os.makedirs", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fname_template", ",", "**", "kwargs", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "fname_template", ")", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "fname_template", "=", "fname_template", "\n", "self", ".", "module_dict", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.register": [[21, 23], ["checkpoint.CheckpointIO.module_dict.update"], "methods", ["None"], ["", "def", "register", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "module_dict", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.save": [[24, 31], ["checkpoint.CheckpointIO.fname_template.format", "print", "checkpoint.CheckpointIO.module_dict.items", "torch.save", "module.state_dict"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["", "def", "save", "(", "self", ",", "step", ")", ":", "\n", "        ", "fname", "=", "self", ".", "fname_template", ".", "format", "(", "step", ")", "\n", "print", "(", "'Saving checkpoint into %s...'", "%", "fname", ")", "\n", "outdict", "=", "{", "}", "\n", "for", "name", ",", "module", "in", "self", ".", "module_dict", ".", "items", "(", ")", ":", "\n", "            ", "outdict", "[", "name", "]", "=", "module", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "outdict", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load": [[32, 42], ["checkpoint.CheckpointIO.fname_template.format", "os.path.exists", "print", "torch.cuda.is_available", "checkpoint.CheckpointIO.module_dict.items", "torch.load", "torch.load", "module.load_state_dict", "torch.device"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load"], ["", "def", "load", "(", "self", ",", "step", ")", ":", "\n", "        ", "fname", "=", "self", ".", "fname_template", ".", "format", "(", "step", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "fname", ")", ",", "fname", "+", "' does not exist!'", "\n", "print", "(", "'Loading checkpoint from %s...'", "%", "fname", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "module_dict", "=", "torch", ".", "load", "(", "fname", ")", "\n", "", "else", ":", "\n", "            ", "module_dict", "=", "torch", ".", "load", "(", "fname", ",", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "\n", "", "for", "name", ",", "module", "in", "self", ".", "module_dict", ".", "items", "(", ")", ":", "\n", "            ", "module", ".", "load_state_dict", "(", "module_dict", "[", "name", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.PatchDis.__init__": [[22, 38], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "networks.PatchDis.cnns.append", "networks.PatchDis._make_net"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis._make_net"], ["        ", "norm_layer", "=", "functools", ".", "partial", "(", "nn", ".", "InstanceNorm2d", ",", "affine", "=", "False", ",", "track_running_stats", "=", "False", ")", "\n", "", "elif", "norm_type", "==", "'none'", ":", "\n", "        ", "norm_layer", "=", "None", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'normalization layer [%s] is not found'", "%", "norm_type", ")", "\n", "", "return", "norm_layer", "\n", "\n", "\n", "", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'lambda'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "+", "opt", ".", "epoch_count", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.PatchDis._make_net": [[39, 57], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "networks.Conv2dBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "networks.Conv2dBlock", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["None"], ["        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "niter", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy [%s] is not implemented'", ",", "opt", ".", "lr_policy", ")", "\n", "", "return", "scheduler", "\n", "\n", "\n", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.PatchDis.forward": [[58, 64], ["outputs.append", "model"], "methods", ["None"], ["                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.PatchDis.calc_dis_loss": [[65, 82], ["networks.PatchDis.forward", "networks.PatchDis.forward", "enumerate", "zip", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid"], ["init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n", "\n", "", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "assert", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ",", "gain", "=", "init_gain", ")", "\n", "return", "net", "\n", "\n", "\n", "", "def", "define_G", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "netG", ",", "norm", "=", "'batch'", ",", "use_dropout", "=", "False", ",", "init_type", "=", "'normal'", ",", "\n", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ",", "depth", "=", "18", ",", "fpn_weights", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.PatchDis.calc_gen_loss": [[83, 96], ["networks.PatchDis.forward", "enumerate", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid"], ["norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netG", "==", "'resnet_9blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ")", "\n", "", "elif", "netG", "==", "'resnet_6blocks'", ":", "\n", "        ", "net", "=", "ResnetGenerator", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "6", ")", "\n", "", "elif", "netG", "==", "'resnet_fpn'", ":", "# NOA from here you should take the generator", "\n", "# Create the model", "\n", "        ", "if", "depth", "==", "18", ":", "\n", "            ", "net", "=", "resnet18", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "use_dropout", "=", "use_dropout", ",", "pretrained", "=", "False", ")", "\n", "# print \"EVET\"", "\n", "# netG_B2A = resnet18(pretrained=False)", "\n", "", "elif", "depth", "==", "34", ":", "\n", "            ", "net", "=", "resnet34", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "use_dropout", "=", "use_dropout", ",", "pretrained", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.__init__": [[99, 113], ["torch.nn.Module.__init__", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "networks.MsImageDis.cnns.append", "networks.MsImageDis._make_net"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis._make_net"], ["        ", "net", "=", "AblationModel1", "(", "BasicBlock_Ganilla", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "", "elif", "netG", "==", "\"ablation_model2\"", ":", "\n", "        ", "net", "=", "AblationModel2", "(", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "n_blocks", "=", "9", ")", "\n", "", "elif", "netG", "==", "'unet_128'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "7", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "elif", "netG", "==", "'unet_256'", ":", "\n", "        ", "net", "=", "UnetGenerator", "(", "input_nc", ",", "output_nc", ",", "8", ",", "ngf", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Generator model name [%s] is not recognized'", "%", "netG", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n", "\n", "\n", "", "def", "define_D", "(", "input_nc", ",", "ndf", ",", "netD", ",", "\n", "n_layers_D", "=", "3", ",", "norm", "=", "'batch'", ",", "use_sigmoid", "=", "False", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ",", "gpu_ids", "=", "[", "]", ")", ":", "\n", "    ", "net", "=", "None", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis._make_net": [[114, 124], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "networks.Conv2dBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "networks.Conv2dBlock"], "methods", ["None"], ["norm_layer", "=", "get_norm_layer", "(", "norm_type", "=", "norm", ")", "\n", "\n", "if", "netD", "==", "'basic'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'n_layers'", ":", "\n", "        ", "net", "=", "NLayerDiscriminator", "(", "input_nc", ",", "ndf", ",", "n_layers_D", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "elif", "netD", "==", "'pixel'", ":", "\n", "        ", "net", "=", "PixelDiscriminator", "(", "input_nc", ",", "ndf", ",", "norm_layer", "=", "norm_layer", ",", "use_sigmoid", "=", "use_sigmoid", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Discriminator model name [%s] is not recognized'", "%", "net", ")", "\n", "", "return", "init_net", "(", "net", ",", "init_type", ",", "init_gain", ",", "gpu_ids", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.forward": [[125, 131], ["outputs.append", "networks.MsImageDis.downsample", "model"], "methods", ["None"], ["\n", "\n", "##############################################################################", "\n", "# Classes", "\n", "##############################################################################", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_dis_loss": [[132, 149], ["networks.MsImageDis.forward", "networks.MsImageDis.forward", "enumerate", "zip", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.zeros_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid"], ["# Defines the GAN loss which uses either LSGAN or the regular GAN.", "\n", "# When LSGAN is used, it is basically same as MSELoss,", "\n", "# but it abstracts away the need to create the target label tensor", "\n", "# that has the same size as the input", "\n", "", "class", "GANLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "use_lsgan", "=", "True", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "if", "use_lsgan", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "", "", "def", "get_target_tensor", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_gen_loss": [[150, 163], ["networks.MsImageDis.forward", "enumerate", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.Variable", "torch.autograd.Variable", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.sigmoid", "torch.sigmoid", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.sigmoid"], ["            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "input", ")", "\n", "\n", "", "def", "__call__", "(", "self", ",", "input", ",", "target_is_real", ")", ":", "\n", "        ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "input", ",", "target_is_real", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target_tensor", ")", "\n", "\n", "\n", "# Defines the generator that consists of Resnet blocks between a few", "\n", "# downsampling/upsampling operations.", "\n", "# Code and idea originally from Justin Johnson's architecture.", "\n", "# https://github.com/jcjohnson/fast-neural-style/", "\n", "", "", "class", "ResnetGenerator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "6", ",", "padding_type", "=", "'reflect'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGen.__init__": [[170, 189], ["torch.nn.Module.__init__", "networks.StyleEncoder", "networks.ContentEncoder", "networks.Decoder", "networks.MLP", "networks.AdaINGen.get_num_adain_params"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.get_num_adain_params"], ["            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "n_downsampling", "=", "2", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "i", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGen.forward": [[190, 195], ["networks.AdaINGen.encode", "networks.AdaINGen.decode"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode"], ["            ", "model", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "use_bias", "=", "use_bias", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "ngf", "*", "mult", ",", "int", "(", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGen.encode": [[196, 201], ["networks.AdaINGen.enc_style", "networks.AdaINGen.enc_content"], "methods", ["None"], ["padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "int", "(", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "ngf", ",", "output_nc", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGen.decode": [[202, 208], ["networks.AdaINGen.mlp", "networks.AdaINGen.assign_adain_params", "networks.AdaINGen.dec"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.assign_adain_params"], ["model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGen.assign_adain_params": [[209, 219], ["model.modules", "mean.contiguous().view", "std.contiguous().view", "adain_params.size", "mean.contiguous", "std.contiguous"], "methods", ["None"], ["\n", "# Define a resnet block", "\n", "", "", "class", "ResnetBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "self", ".", "build_conv_block", "(", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", "\n", "\n", "", "def", "build_conv_block", "(", "self", ",", "dim", ",", "padding_type", ",", "norm_layer", ",", "use_dropout", ",", "use_bias", ")", ":", "\n", "        ", "conv_block", "=", "[", "]", "\n", "p", "=", "0", "\n", "if", "padding_type", "==", "'reflect'", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGen.get_num_adain_params": [[220, 227], ["model.modules"], "methods", ["None"], ["            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.__init__": [[235, 270], ["torch.nn.Module.__init__", "networks.GanillaContentEncoder", "networks.GanillaDecoder", "networks.MLP", "networks.StyleEncoder", "networks.GanillaStyleEncoder", "networks.AdaINGanilla.get_num_adain_params"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.get_num_adain_params"], ["if", "padding_type", "==", "'reflect'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'replicate'", ":", "\n", "            ", "conv_block", "+=", "[", "nn", ".", "ReplicationPad2d", "(", "1", ")", "]", "\n", "", "elif", "padding_type", "==", "'zero'", ":", "\n", "            ", "p", "=", "1", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'padding [%s] is not implemented'", "%", "padding_type", ")", "\n", "", "conv_block", "+=", "[", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "p", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "dim", ")", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "return", "out", "\n", "\n", "\n", "# Defines the Unet generator.", "\n", "# |num_downs|: number of downsamplings in UNet. For example,", "\n", "# if |num_downs| == 7, image of size 128x128 will become of size 1x1", "\n", "# at the bottleneck", "\n", "", "", "class", "UnetGenerator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "num_downs", ",", "ngf", "=", "64", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# construct unet structure", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "None", ",", "norm_layer", "=", "norm_layer", ",", "innermost", "=", "True", ")", "\n", "for", "i", "in", "range", "(", "num_downs", "-", "5", ")", ":", "\n", "            ", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ")", "\n", "", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "8", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "4", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "ngf", ",", "ngf", "*", "2", ",", "input_nc", "=", "None", ",", "submodule", "=", "unet_block", ",", "norm_layer", "=", "norm_layer", ")", "\n", "unet_block", "=", "UnetSkipConnectionBlock", "(", "output_nc", ",", "ngf", ",", "input_nc", "=", "input_nc", ",", "submodule", "=", "unet_block", ",", "outermost", "=", "True", ",", "norm_layer", "=", "norm_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.forward": [[272, 277], ["networks.AdaINGanilla.encode", "networks.AdaINGanilla.decode"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode"], ["\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n", "\n", "# Defines the submodule with skip connection.", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.encode": [[278, 283], ["networks.AdaINGanilla.enc_style", "networks.AdaINGanilla.enc_content"], "methods", ["None"], ["# X -------------------identity---------------------- X", "\n", "#   |-- downsampling -- |submodule| -- upsampling --|", "\n", "", "", "class", "UnetSkipConnectionBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "outer_nc", ",", "inner_nc", ",", "input_nc", "=", "None", ",", "\n", "submodule", "=", "None", ",", "outermost", "=", "False", ",", "innermost", "=", "False", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ")", ":", "\n", "        ", "super", "(", "UnetSkipConnectionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.decode": [[284, 290], ["networks.AdaINGanilla.mlp", "networks.AdaINGanilla.assign_adain_params", "networks.AdaINGanilla.dec"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.assign_adain_params"], ["self", ".", "outermost", "=", "outermost", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "", "if", "input_nc", "is", "None", ":", "\n", "            ", "input_nc", "=", "outer_nc", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.assign_adain_params": [[291, 301], ["model.modules", "mean.contiguous().view", "std.contiguous().view", "adain_params.size", "mean.contiguous", "std.contiguous"], "methods", ["None"], ["", "downconv", "=", "nn", ".", "Conv2d", "(", "input_nc", ",", "inner_nc", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "downrelu", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "downnorm", "=", "norm_layer", "(", "inner_nc", ")", "\n", "uprelu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "upnorm", "=", "norm_layer", "(", "outer_nc", ")", "\n", "\n", "if", "outermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaINGanilla.get_num_adain_params": [[302, 309], ["model.modules"], "methods", ["None"], ["down", "=", "[", "downconv", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "nn", ".", "Tanh", "(", ")", "]", "\n", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "", "elif", "innermost", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", "]", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.__init__": [[312, 323], ["torch.nn.Module.__init__", "networks.ContentEncoder", "networks.Decoder"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["", "else", ":", "\n", "            ", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "inner_nc", "*", "2", ",", "outer_nc", ",", "\n", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "down", "=", "[", "downrelu", ",", "downconv", ",", "downnorm", "]", "\n", "up", "=", "[", "uprelu", ",", "upconv", ",", "upnorm", "]", "\n", "\n", "if", "use_dropout", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "+", "[", "nn", ".", "Dropout", "(", "0.5", ")", "]", "\n", "", "else", ":", "\n", "                ", "model", "=", "down", "+", "[", "submodule", "]", "+", "up", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.forward": [[324, 333], ["networks.VAEGen.encode", "torch.autograd.Variable", "torch.autograd.Variable", "networks.VAEGen.decode", "networks.VAEGen.decode", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "networks.VAEGen.data.get_device", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "networks.VAEGen.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode"], ["", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "outermost", ":", "\n", "            ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "model", "(", "x", ")", "]", ",", "1", ")", "\n", "\n", "\n", "# Defines the PatchGAN discriminator with the specified arguments.", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode": [[334, 338], ["networks.VAEGen.enc", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "networks.VAEGen.data.get_device", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "networks.VAEGen.size"], "methods", ["None"], ["", "", "", "class", "NLayerDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode": [[339, 342], ["networks.VAEGen.dec"], "methods", ["None"], ["", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "kw", "=", "4", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.StyleEncoder.__init__": [[349, 362], ["torch.nn.Module.__init__", "range", "range", "torch.nn.Sequential", "torch.nn.Sequential", "networks.Conv2dBlock", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "networks.Conv2dBlock", "networks.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.StyleEncoder.forward": [[363, 365], ["networks.StyleEncoder.model"], "methods", ["None"], ["sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "\n", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaStyleEncoder.__init__": [[367, 383], ["torch.nn.Module.__init__", "networks.FirstBlock_Ganilla", "networks.GanillaStyleEncoder._make_layer_ganilla", "networks.GanillaStyleEncoder._make_layer_ganilla", "networks.GanillaStyleEncoder._make_layer_ganilla", "networks.GanillaStyleEncoder._make_layer_ganilla", "torch.nn.AdaptiveAvgPool2d", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla"], ["nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "sequence", "+=", "[", "nn", ".", "Sigmoid", "(", ")", "]", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n", "\n", "", "", "class", "PixelDiscriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "ndf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_sigmoid", "=", "False", ")", ":", "\n", "        ", "super", "(", "PixelDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaStyleEncoder._make_layer_ganilla": [[385, 392], ["torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "block"], "methods", ["None"], ["            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "net", "=", "[", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", ",", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaStyleEncoder.forward": [[393, 406], ["networks.GanillaStyleEncoder.layer0", "networks.GanillaStyleEncoder.layer1", "networks.GanillaStyleEncoder.layer2", "networks.GanillaStyleEncoder.layer3", "networks.GanillaStyleEncoder.layer4", "networks.GanillaStyleEncoder.pool_layer", "networks.GanillaStyleEncoder.fc_style"], "methods", ["None"], ["norm_layer", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", ")", "]", "\n", "\n", "if", "use_sigmoid", ":", "\n", "            ", "self", ".", "net", ".", "append", "(", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "net", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "input", ")", "\n", "\n", "\n", "######## GANILLA #########", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder.__init__": [[408, 421], ["torch.nn.Module.__init__", "networks.FirstBlock_Ganilla", "networks.GanillaContentEncoder._make_layer_ganilla", "networks.GanillaContentEncoder._make_layer_ganilla", "networks.GanillaContentEncoder._make_layer_ganilla", "networks.GanillaContentEncoder._make_layer_ganilla"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla"], ["\n", "", "", "model_urls", "=", "{", "\n", "'resnet18'", ":", "'https://download.pytorch.org/models/resnet18-5c106cde.pth'", ",", "\n", "'resnet34'", ":", "'https://download.pytorch.org/models/resnet34-333f7ec4.pth'", ",", "\n", "'resnet50'", ":", "'https://download.pytorch.org/models/resnet50-19c8e357.pth'", ",", "\n", "'resnet101'", ":", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ",", "\n", "'resnet152'", ":", "'https://download.pytorch.org/models/resnet152-b121ed2d.pth'", ",", "\n", "}", "\n", "\n", "\n", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder._make_layer_ganilla": [[422, 429], ["torch.nn.Sequential", "torch.nn.Sequential", "layers.append", "block"], "methods", ["None"], ["\n", "\n", "", "class", "BasicBlock_orj", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock_orj", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rp1", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaContentEncoder.forward": [[430, 440], ["networks.GanillaContentEncoder.layer0", "networks.GanillaContentEncoder.layer1", "networks.GanillaContentEncoder.layer2", "networks.GanillaContentEncoder.layer3", "networks.GanillaContentEncoder.layer4"], "methods", ["None"], ["self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "rp2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "in2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.ContentEncoder.__init__": [[442, 455], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "networks.Conv2dBlock", "networks.ResBlocks", "networks.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["\n", "out", "=", "self", ".", "rp1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "in1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "rp2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "in2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.ContentEncoder.forward": [[456, 458], ["networks.ContentEncoder.model"], "methods", ["None"], ["out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaDecoder.__init__": [[460, 489], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Upsample", "torch.nn.Upsample", "networks.Conv2dBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Upsample", "torch.nn.Upsample", "networks.Conv2dBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Upsample", "torch.nn.Upsample", "networks.Conv2dBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "networks.Conv2dBlock", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["\n", "", "", "class", "BasicBlock_Ganilla", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "expansion", "=", "1", "\n", "\n", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "use_dropout", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock_Ganilla", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rp1", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "use_dropout", "=", "use_dropout", "\n", "if", "use_dropout", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "", "self", ".", "rp2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", "self", ".", "out_planes", "=", "planes", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n", "\n", "self", ".", "final_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "expansion", "*", "planes", "*", "2", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaDecoder.forward": [[489, 519], ["networks.GanillaDecoder.P5_1", "networks.GanillaDecoder.P5_upsampled", "networks.GanillaDecoder.P5_2", "networks.GanillaDecoder.P4_1", "networks.GanillaDecoder.P4_upsampled", "networks.GanillaDecoder.P4_2", "networks.GanillaDecoder.P3_1", "networks.GanillaDecoder.P3_upsampled", "networks.GanillaDecoder.P3_2", "networks.GanillaDecoder.P2_1", "networks.GanillaDecoder.P2_upsampled", "networks.GanillaDecoder.rp4", "networks.GanillaDecoder.P2_2", "networks.GanillaDecoder.final"], "methods", ["None"], [")", "\n", "", "else", ":", "\n", "            ", "self", ".", "final_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "planes", "*", "2", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "self", ".", "rp1", "(", "x", ")", ")", ")", ")", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "self", ".", "rp2", "(", "out", ")", ")", ")", "\n", "inputt", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "catted", "=", "torch", ".", "cat", "(", "(", "out", ",", "inputt", ")", ",", "1", ")", "\n", "out", "=", "self", ".", "final_conv", "(", "catted", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "PyramidFeatures_v3", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C3_size", ",", "C4_size", ",", "C5_size", ",", "feature_size", "=", "128", ")", ":", "\n", "        ", "super", "(", "PyramidFeatures_v3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# upsample C5 to get P5 from the FPN paper", "\n", "self", ".", "P5_1", "=", "nn", ".", "Conv2d", "(", "C5_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P5_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp1 = nn.ReflectionPad2d(1)", "\n", "#self.P5_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "# add P5 elementwise to C4", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaDecoder2.__init__": [[521, 556], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Upsample", "torch.nn.Upsample", "networks.Conv2dBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Upsample", "torch.nn.Upsample", "networks.Conv2dBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Upsample", "torch.nn.Upsample", "networks.Conv2dBlock", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "networks.Conv2dBlock", "networks.ResBlocks", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["self", ".", "P4_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp2 = nn.ReflectionPad2d(1)", "\n", "#self.P4_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "# add P4 elementwise to C3", "\n", "self", ".", "P3_1", "=", "nn", ".", "Conv2d", "(", "C3_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P3_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "# self.rp3 = nn.ReflectionPad2d(1)", "\n", "# self.P3_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "#self.P2_1 = nn.Conv2d(C2_size, feature_size, kernel_size=1, stride=1, padding=0)", "\n", "# self.P2_upsampled = nn.Upsample(scale_factor=2, mode='nearest')", "\n", "# self.rp4 = nn.ReflectionPad2d(1)", "\n", "# self.P2_2 = nn.Conv2d(feature_size, feature_size/2, kernel_size=3, stride=1, padding=0)", "\n", "\n", "self", ".", "P1_1", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P1_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "self", ".", "rp5", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "P1_2", "=", "nn", ".", "Conv2d", "(", "feature_size", ",", "feature_size", "/", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "C3", ",", "C4", ",", "C5", "=", "inputs", "\n", "\n", "P5_x", "=", "self", ".", "P5_1", "(", "C5", ")", "\n", "P5_upsampled_x", "=", "self", ".", "P5_upsampled", "(", "P5_x", ")", "\n", "\n", "P4_x", "=", "self", ".", "P4_1", "(", "C4", ")", "\n", "P4_x", "=", "P5_upsampled_x", "+", "P4_x", "\n", "P4_upsampled_x", "=", "self", ".", "P4_upsampled", "(", "P4_x", ")", "\n", "\n", "P3_x", "=", "self", ".", "P3_1", "(", "C3", ")", "\n", "P3_x", "=", "P3_x", "+", "P4_upsampled_x", "\n", "P3_upsampled_x", "=", "self", ".", "P3_upsampled", "(", "P3_x", ")", "\n", "\n", "P1_x", "=", "self", ".", "P1_1", "(", "P3_upsampled_x", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.GanillaDecoder2.forward": [[556, 588], ["networks.GanillaDecoder2.res_block_model", "networks.GanillaDecoder2.P5_1", "networks.GanillaDecoder2.P5_upsampled", "networks.GanillaDecoder2.P4_1", "networks.GanillaDecoder2.P4_upsampled", "networks.GanillaDecoder2.P3_1", "networks.GanillaDecoder2.P3_upsampled", "networks.GanillaDecoder2.P2_1", "networks.GanillaDecoder2.P2_upsampled", "networks.GanillaDecoder2.rp4", "networks.GanillaDecoder2.P2_2", "networks.GanillaDecoder2.final"], "methods", ["None"], ["P1_x", "=", "self", ".", "P1_1", "(", "P3_upsampled_x", ")", "\n", "P1_upsampled_x", "=", "self", ".", "P1_upsampled", "(", "P1_x", ")", "\n", "P2_x", "=", "self", ".", "rp5", "(", "P1_upsampled_x", ")", "\n", "P2_x", "=", "self", ".", "P1_2", "(", "P2_x", ")", "\n", "\n", "return", "P2_x", "\n", "\n", "\n", "", "", "class", "PyramidFeatures", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "C2_size", ",", "C3_size", ",", "C4_size", ",", "C5_size", ",", "fpn_weights", ",", "feature_size", "=", "128", ")", ":", "\n", "        ", "super", "(", "PyramidFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sum_weights", "=", "fpn_weights", "#[1.0, 0.5, 0.5, 0.5]", "\n", "\n", "# upsample C5 to get P5 from the FPN paper", "\n", "self", ".", "P5_1", "=", "nn", ".", "Conv2d", "(", "C5_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P5_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp1 = nn.ReflectionPad2d(1)", "\n", "#self.P5_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "# add P5 elementwise to C4", "\n", "self", ".", "P4_1", "=", "nn", ".", "Conv2d", "(", "C4_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P4_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp2 = nn.ReflectionPad2d(1)", "\n", "#self.P4_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "# add P4 elementwise to C3", "\n", "self", ".", "P3_1", "=", "nn", ".", "Conv2d", "(", "C3_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "P3_upsampled", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", "\n", "#self.rp3 = nn.ReflectionPad2d(1)", "\n", "#self.P3_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "self", ".", "P2_1", "=", "nn", ".", "Conv2d", "(", "C2_size", ",", "feature_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.Decoder.__init__": [[591, 605], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "networks.ResBlocks", "networks.Conv2dBlock", "torch.nn.Upsample", "torch.nn.Upsample", "networks.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["self", ".", "P2_2", "=", "nn", ".", "Conv2d", "(", "int", "(", "feature_size", ")", ",", "int", "(", "feature_size", "/", "2", ")", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "#self.P1_1 = nn.Conv2d(feature_size, feature_size, kernel_size=1, stride=1, padding=0)", "\n", "#self.P1_upsampled = nn.Upsample(scale_factor=2, mode='nearest')", "\n", "#self.rp5 = nn.ReflectionPad2d(1)", "\n", "#self.P1_2 = nn.Conv2d(feature_size, feature_size, kernel_size=3, stride=1, padding=0)", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "C2", ",", "C3", ",", "C4", ",", "C5", "=", "inputs", "\n", "\n", "i", "=", "0", "\n", "P5_x", "=", "self", ".", "P5_1", "(", "C5", ")", "*", "self", ".", "sum_weights", "[", "i", "]", "\n", "P5_upsampled_x", "=", "self", ".", "P5_upsampled", "(", "P5_x", ")", "\n", "#P5_x = self.rp1(P5_x)", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.Decoder.forward": [[606, 608], ["networks.Decoder.model"], "methods", ["None"], ["# #P5_x = self.P5_2(P5_x)", "\n", "i", "+=", "1", "\n", "P4_x", "=", "self", ".", "P4_1", "(", "C4", ")", "*", "self", ".", "sum_weights", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.ResBlocks.__init__": [[613, 619], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "networks.ResBlock"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["i", "+=", "1", "\n", "P3_x", "=", "self", ".", "P3_1", "(", "C3", ")", "*", "self", ".", "sum_weights", "[", "i", "]", "\n", "P3_x", "=", "P3_x", "+", "P4_upsampled_x", "\n", "P3_upsampled_x", "=", "self", ".", "P3_upsampled", "(", "P3_x", ")", "\n", "#P3_x = self.rp3(P3_x)", "\n", "#P3_x = self.P3_2(P3_x)", "\n", "i", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.ResBlocks.forward": [[620, 622], ["networks.ResBlocks.model"], "methods", ["None"], ["P2_x", "=", "self", ".", "P2_1", "(", "C2", ")", "*", "self", ".", "sum_weights", "[", "i", "]", "\n", "P2_x", "=", "P2_x", "*", "self", ".", "sum_weights", "[", "2", "]", "+", "P3_upsampled_x", "\n", "P2_upsampled_x", "=", "self", ".", "P2_upsampled", "(", "P2_x", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MLP.__init__": [[624, 633], ["torch.nn.Module.__init__", "range", "torch.nn.Sequential", "torch.nn.Sequential", "networks.LinearBlock", "networks.LinearBlock", "networks.LinearBlock"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["P2_x", "=", "self", ".", "P2_2", "(", "P2_x", ")", "\n", "\n", "return", "P2_x", "\n", "\n", "\n", "", "", "class", "ResNet", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "block", ",", "layers", ",", "use_dropout", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "ngf", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MLP.forward": [[634, 636], ["networks.MLP.model", "x.view", "x.size"], "methods", ["None"], ["\n", "# first conv", "\n", "self", ".", "pad1", "=", "nn", ".", "ReflectionPad2d", "(", "input_nc", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.ResBlock.__init__": [[641, 648], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "networks.Conv2dBlock", "networks.Conv2dBlock"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "# Output layer", "\n", "self", ".", "pad3", "=", "nn", ".", "ReflectionPad2d", "(", "output_nc", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_nc", ",", "7", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "if", "block", "==", "BasicBlock_orj", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.ResBlock.forward": [[649, 654], ["networks.ResBlock.model"], "methods", ["None"], ["# layers = [2,2,2,2]", "\n", "# residuals", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BasicBlock_Ganilla.__init__": [[658, 733], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.ReplicationPad2d", "torch.nn.ReplicationPad2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "networks.LayerNorm", "networks.AdaptiveInstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["self", ".", "layer3", "[", "layers", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "layers", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "", "elif", "block", "==", "BasicBlock_Ganilla", ":", "\n", "# residuals", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "use_dropout", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "128", ",", "layers", "[", "2", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "256", ",", "layers", "[", "3", "]", ",", "use_dropout", ",", "stride", "=", "2", ")", "\n", "\n", "# for the skip connections", "\n", "fpn_sizes", "=", "[", "self", ".", "layer1", "[", "layers", "[", "0", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer2", "[", "layers", "[", "1", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer3", "[", "layers", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "layers", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Block Type is not Correct\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "self", ".", "fpn", "=", "PyramidFeatures", "(", "fpn_sizes", "[", "0", "]", ",", "fpn_sizes", "[", "1", "]", ",", "fpn_sizes", "[", "2", "]", ",", "fpn_sizes", "[", "3", "]", ",", "fpn_weights", ")", "\n", "\n", "#for m in self.modules():", "\n", "#    if isinstance(m, nn.Conv2d):", "\n", "#        n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "#        m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "#    elif isinstance(m, nn.BatchNorm2d):", "\n", "#        m.weight.data.fill_(1)", "\n", "#        m.bias.data.zero_()", "\n", "\n", "# self.freeze_bn()", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_make_layer_ganilla", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "use_dropout", ",", "stride", "=", "1", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_dropout", ",", "stride", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "'''Freeze BatchNorm layers.'''", "\n", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "layer", ".", "eval", "(", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img_batch", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "pad1", "(", "img_batch", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "in1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pad2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BasicBlock_Ganilla.forward": [[734, 749], ["networks.BasicBlock_Ganilla.conv1", "torch.relu", "torch.relu", "networks.BasicBlock_Ganilla.conv2", "networks.BasicBlock_Ganilla.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "networks.BasicBlock_Ganilla.final_conv", "torch.relu", "torch.relu", "networks.BasicBlock_Ganilla.rp1", "networks.BasicBlock_Ganilla.norm", "networks.BasicBlock_Ganilla.dropout", "networks.BasicBlock_Ganilla.rp2", "networks.BasicBlock_Ganilla.norm"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BigGDBlock.shortcut"], ["x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "out", "=", "self", ".", "fpn", "(", "[", "x1", ",", "x2", ",", "x3", ",", "x4", "]", ")", "# use all resnet layers", "\n", "\n", "out", "=", "self", ".", "pad3", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "AblationModel1", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "ngf", "=", "ngf", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.FirstBlock_Ganilla.__init__": [[754, 791], ["torch.nn.Module.__init__", "networks.FirstBlock_Ganilla.pad", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "networks.FirstBlock_Ganilla.pad", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "networks.LayerNorm", "networks.AdaptiveInstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "in1", "=", "nn", ".", "InstanceNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pad2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n", "if", "block", "==", "BasicBlock_orj", ":", "\n", "# residuals", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "fpn_sizes", "=", "[", "self", ".", "layer1", "[", "layers", "[", "0", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer2", "[", "layers", "[", "1", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer3", "[", "layers", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "layers", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "", "elif", "block", "==", "BasicBlock_Ganilla", ":", "\n", "# residuals", "\n", "            ", "self", ".", "layer1", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "128", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer_ganilla", "(", "block", ",", "256", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "fpn_sizes", "=", "[", "self", ".", "layer1", "[", "layers", "[", "0", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer2", "[", "layers", "[", "1", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer3", "[", "layers", "[", "2", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", ",", "\n", "self", ".", "layer4", "[", "layers", "[", "3", "]", "-", "1", "]", ".", "conv2", ".", "out_channels", "]", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Block Type is not Correct\"", ")", "\n", "\n", "# self.fpn = PyramidFeatures(fpn_sizes[0], fpn_sizes[1], fpn_sizes[2], fpn_sizes[3])", "\n", "\n", "", "n_downsampling", "=", "4", "\n", "\n", "model", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.FirstBlock_Ganilla.forward": [[792, 801], ["networks.FirstBlock_Ganilla.pad1", "networks.FirstBlock_Ganilla.conv1", "networks.FirstBlock_Ganilla.relu", "networks.FirstBlock_Ganilla.pad2", "networks.FirstBlock_Ganilla.maxpool", "networks.FirstBlock_Ganilla.norm"], "methods", ["None"], ["\n", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "ngf", "*", "2", "**", "(", "n_downsampling", ")", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "n_downsampling", ")", ":", "\n", "            ", "mult", "=", "2", "**", "(", "n_downsampling", "-", "i", ")", "\n", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "self", ".", "ngf", "*", "mult", ",", "int", "(", "self", ".", "ngf", "*", "mult", "/", "2", ")", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "output_padding", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.Conv2dBlock.__init__": [[803, 854], ["torch.nn.Module.__init__", "torch.nn.ReflectionPad2d", "torch.nn.ReflectionPad2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "networks.SpectralNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReplicationPad2d", "torch.nn.ReplicationPad2d", "torch.nn.InstanceNorm2d", "torch.nn.InstanceNorm2d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ZeroPad2d", "torch.nn.ZeroPad2d", "networks.LayerNorm", "torch.nn.PReLU", "torch.nn.PReLU", "networks.AdaptiveInstanceNorm2d", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["nn", ".", "InstanceNorm2d", "(", "int", "(", "self", ".", "ngf", "*", "mult", "/", "2", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "self", ".", "ngf", ",", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "model", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "deconv_part", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n", "#for m in self.modules():", "\n", "#    if isinstance(m, nn.Conv2d):", "\n", "#        n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "#        m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "#    elif isinstance(m, nn.BatchNorm2d):", "\n", "#        m.weight.data.fill_(1)", "\n", "#        m.bias.data.zero_()", "\n", "\n", "# self.freeze_bn()", "\n", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_make_layer_ganilla", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "'''Freeze BatchNorm layers.'''", "\n", "for", "layer", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "layer", ".", "eval", "(", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img_batch", "=", "inputs", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.Conv2dBlock.forward": [[855, 862], ["networks.Conv2dBlock.conv", "networks.Conv2dBlock.pad", "networks.Conv2dBlock.norm", "networks.Conv2dBlock.activation"], "methods", ["None"], ["\n", "x", "=", "self", ".", "pad1", "(", "img_batch", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "in1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pad2", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.LinearBlock.__init__": [[864, 901], ["torch.nn.Module.__init__", "networks.SpectralNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.InstanceNorm1d", "torch.nn.InstanceNorm1d", "torch.nn.LeakyReLU", "torch.nn.LeakyReLU", "networks.LayerNorm", "torch.nn.PReLU", "torch.nn.PReLU", "torch.nn.SELU", "torch.nn.SELU", "torch.nn.Tanh", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["x2", "=", "self", ".", "layer2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "layer3", "(", "x2", ")", "\n", "x4", "=", "self", ".", "layer4", "(", "x3", ")", "\n", "\n", "out", "=", "self", ".", "deconv_part", "(", "x4", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "class", "AblationModel2", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "ngf", "=", "64", ",", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "use_dropout", "=", "False", ",", "n_blocks", "=", "9", ",", "padding_type", "=", "'reflect'", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "ngf", "=", "ngf", "\n", "super", "(", "AblationModel2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "type", "(", "norm_layer", ")", "==", "functools", ".", "partial", ":", "\n", "            ", "use_bias", "=", "norm_layer", ".", "func", "==", "nn", ".", "InstanceNorm2d", "\n", "", "else", ":", "\n", "            ", "use_bias", "=", "norm_layer", "==", "nn", ".", "InstanceNorm2d", "\n", "\n", "", "self", ".", "input_nc", "=", "3", "\n", "self", ".", "output_nc", "=", "3", "\n", "\n", "fpn_sizes", "=", "[", "]", "\n", "\n", "init_part", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "input_nc", ",", "ngf", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "ngf", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "self", ".", "init_part", "=", "nn", ".", "Sequential", "(", "*", "init_part", ")", "\n", "fpn_sizes", ".", "append", "(", "ngf", ")", "\n", "\n", "n_downsampling", "=", "2", "\n", "# for i in range(n_downsampling):", "\n", "#     mult = 2 ** i", "\n", "mult", "=", "1", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.LinearBlock.forward": [[902, 909], ["networks.LinearBlock.fc", "networks.LinearBlock.norm", "networks.LinearBlock.activation"], "methods", ["None"], ["down1", "=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "*", "down1", ")", "\n", "\n", "fpn_sizes", ".", "append", "(", "ngf", "*", "mult", "*", "2", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BigGUnetDecoder.__init__": [[911, 990], ["torch.nn.ReLU", "torch.nn.ReLU", "functools.partial", "functools.partial", "functools.partial", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "networks.BigGUnetDecoder.which_linear", "networks.BigGUnetDecoder.init_weights", "len", "networks.BigGUnetDecoder.modules", "print", "enumerate", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "networks.BigGUnetDecoder.linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "networks.BigGUnetDecoder.activation", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "networks.BigGDBlock", "isinstance", "isinstance", "isinstance", "sum", "block", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "networks.BigGUnetDecoder.embed", "torch.nn.init.normal_", "torch.nn.init.normal_", "p.data.nelement", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "print", "module.parameters"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.networks.init_weights"], ["mult", "=", "2", "\n", "down2", "=", "[", "nn", ".", "Conv2d", "(", "ngf", "*", "mult", ",", "ngf", "*", "mult", "*", "2", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "ngf", "*", "mult", "*", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "]", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "*", "down2", ")", "\n", "\n", "# fpn_sizes.append(ngf * mult * 2)", "\n", "\n", "flat_part", "=", "[", "]", "\n", "mult", "=", "2", "**", "n_downsampling", "\n", "for", "i", "in", "range", "(", "n_blocks", ")", ":", "\n", "            ", "flat_part", "+=", "[", "ResnetBlock", "(", "ngf", "*", "mult", ",", "padding_type", "=", "padding_type", ",", "norm_layer", "=", "norm_layer", ",", "use_dropout", "=", "use_dropout", ",", "\n", "use_bias", "=", "use_bias", ")", "]", "\n", "", "self", ".", "flat_part", "=", "nn", ".", "Sequential", "(", "*", "flat_part", ")", "\n", "\n", "fpn_sizes", ".", "append", "(", "ngf", "*", "mult", ")", "\n", "\n", "self", ".", "fpn", "=", "PyramidFeatures_v3", "(", "fpn_sizes", "[", "0", "]", ",", "fpn_sizes", "[", "1", "]", ",", "fpn_sizes", "[", "2", "]", ")", "\n", "\n", "final_part", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", "]", "\n", "final_part", "+=", "[", "nn", ".", "Tanh", "(", ")", "]", "\n", "final_part", "+=", "[", "nn", ".", "Conv2d", "(", "self", ".", "ngf", ",", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", "]", "\n", "\n", "self", ".", "final_part", "=", "nn", ".", "Sequential", "(", "*", "final_part", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "img_batch", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "init_part", "(", "img_batch", ")", "\n", "\n", "x1", "=", "self", ".", "down1", "(", "x", ")", "\n", "x2", "=", "self", ".", "down2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "flat_part", "(", "x2", ")", "\n", "\n", "out", "=", "self", ".", "fpn", "(", "[", "x", ",", "x1", ",", "x3", "]", ")", "\n", "\n", "out", "=", "self", ".", "final_part", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n", "\n", "", "", "def", "resnet18", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "use_dropout", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "BasicBlock_Ganilla", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "use_dropout", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ",", "model_dir", "=", "'.'", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n", "\n", "", "def", "resnet34", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "use_dropout", "=", "False", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "input_nc", ",", "output_nc", ",", "ngf", ",", "fpn_weights", ",", "BasicBlock_Ganilla", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_dropout", "=", "use_dropout", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ",", "model_dir", "=", "'.'", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n", "\n", "#### ORJ MODELS ######", "\n", "", "class", "ResidualBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ")", ":", "\n", "        ", "super", "(", "ResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_block", "=", "[", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "in_features", ",", "3", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "in_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_features", ",", "in_features", ",", "3", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "in_features", ")", "]", "\n", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "*", "conv_block", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BigGDBlock.__init__": [[993, 1011], ["torch.nn.Module.__init__", "networks.BigGDBlock.which_conv", "networks.BigGDBlock.which_conv", "networks.BigGDBlock.which_conv"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["\n", "", "", "class", "Generator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ",", "output_nc", ",", "n_residual_blocks", "=", "9", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Initial convolution block", "\n", "model", "=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_nc", ",", "64", ",", "7", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "# Downsampling", "\n", "in_features", "=", "64", "\n", "out_features", "=", "in_features", "*", "2", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "Conv2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BigGDBlock.shortcut": [[1012, 1024], ["networks.BigGDBlock.conv_sc", "networks.BigGDBlock.downsample", "networks.BigGDBlock.downsample", "networks.BigGDBlock.conv_sc"], "methods", ["None"], ["out_features", "=", "in_features", "*", "2", "\n", "\n", "# Residual blocks", "\n", "", "for", "_", "in", "range", "(", "n_residual_blocks", ")", ":", "\n", "            ", "model", "+=", "[", "ResidualBlock", "(", "in_features", ")", "]", "\n", "\n", "# Upsampling", "\n", "", "out_features", "=", "in_features", "//", "2", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "            ", "model", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_features", ",", "out_features", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "output_padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "out_features", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_features", "=", "out_features", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BigGDBlock.forward": [[1025, 1039], ["networks.BigGDBlock.conv1", "networks.BigGDBlock.conv2", "torch.relu", "torch.relu", "networks.BigGDBlock.activation", "networks.BigGDBlock.downsample", "networks.BigGDBlock.shortcut"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.BigGDBlock.shortcut"], ["out_features", "=", "in_features", "//", "2", "\n", "\n", "# Output layer", "\n", "", "model", "+=", "[", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "output_nc", ",", "7", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n", "", "", "class", "Discriminator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_nc", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.Vgg16.__init__": [[1044, 1063], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "4", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "]", "\n", "\n", "# FCN classification layer", "\n", "model", "+=", "[", "nn", ".", "Conv2d", "(", "512", ",", "1", ",", "4", ",", "padding", "=", "1", ")", "]", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.Vgg16.forward": [[1064, 1092], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "networks.Vgg16.conv1_1", "networks.Vgg16.conv1_2", "networks.Vgg16.conv2_1", "networks.Vgg16.conv2_2", "networks.Vgg16.conv3_1", "networks.Vgg16.conv3_2", "networks.Vgg16.conv3_3", "networks.Vgg16.conv4_1", "networks.Vgg16.conv4_2", "networks.Vgg16.conv4_3", "networks.Vgg16.conv5_1", "networks.Vgg16.conv5_2", "networks.Vgg16.conv5_3"], "methods", ["None"], ["# Average pooling and flatten", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", ".", "view", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaptiveInstanceNorm2d.__init__": [[1098, 1109], ["torch.nn.Module.__init__", "networks.AdaptiveInstanceNorm2d.register_buffer", "networks.AdaptiveInstanceNorm2d.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaptiveInstanceNorm2d.forward": [[1110, 1124], ["networks.AdaptiveInstanceNorm2d.running_mean.repeat", "networks.AdaptiveInstanceNorm2d.running_var.repeat", "x.contiguous().view", "torch.batch_norm", "torch.batch_norm", "torch.batch_norm.view", "x.size", "x.size", "x.contiguous", "x.size", "x.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.AdaptiveInstanceNorm2d.__repr__": [[1125, 1127], ["str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.LayerNorm.__init__": [[1129, 1138], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.LayerNorm.forward": [[1139, 1156], ["x.size", "x.view().mean().view", "x.view().std().view", "x.view().mean().view", "x.view().std().view", "networks.LayerNorm.beta.view", "x.dim", "x.view().mean", "x.view().std", "x.view().mean", "x.view().std", "networks.LayerNorm.gamma.view", "x.dim", "x.view", "x.view", "x.view", "x.view", "x.size", "x.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SpectralNorm.__init__": [[1165, 1172], ["torch.nn.Module.__init__", "networks.SpectralNorm._made_params", "networks.SpectralNorm._make_params"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SpectralNorm._made_params", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SpectralNorm._make_params"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SpectralNorm._update_u_v": [[1173, 1186], ["getattr", "getattr", "getattr", "range", "getattr.dot", "setattr", "networks.l2normalize", "networks.l2normalize", "getattr.view().mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "torch.mv", "getattr.dot.expand_as", "torch.t", "torch.t", "torch.t", "torch.t", "getattr.view", "getattr.view", "getattr.view"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.l2normalize", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.l2normalize"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SpectralNorm._made_params": [[1187, 1195], ["getattr", "getattr", "getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SpectralNorm._make_params": [[1197, 1214], ["getattr", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "networks.l2normalize", "networks.l2normalize", "torch.nn.Parameter", "torch.nn.Parameter", "networks.SpectralNorm.module.register_parameter", "networks.SpectralNorm.module.register_parameter", "networks.SpectralNorm.module.register_parameter", "getattr.data.new().normal_", "getattr.data.new().normal_", "getattr.view", "getattr.data.new", "getattr.data.new"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.l2normalize", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.l2normalize"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SpectralNorm.forward": [[1216, 1219], ["networks.SpectralNorm._update_u_v", "networks.SpectralNorm.module.forward"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SpectralNorm._update_u_v", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SN.__init__": [[1222, 1235], ["range", "networks.SN.register_buffer", "networks.SN.register_buffer", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SN.u": [[1237, 1240], ["getattr", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SN.sv": [[1243, 1246], ["getattr", "range"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SN.W_": [[1248, 1261], ["networks.SN.weight.view", "range", "networks.SN.weight.size", "W_mat.t.t.t", "utils.power_iteration", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.power_iteration"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SNConv2d.__init__": [[1268, 1274], ["torch.nn.Conv2d.__init__", "torch.nn.Conv2d.__init__", "networks.SN.__init__"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SNConv2d.forward": [[1274, 1277], ["torch.conv2d", "torch.conv2d", "networks.SNConv2d.W_"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.SN.W_"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.l2normalize": [[1157, 1159], ["v.norm"], "function", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.__init__": [[13, 70], ["torch.Module.__init__", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "int", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils.get_scheduler", "utils.get_scheduler", "trainer.MUNIT_Trainer.apply", "trainer.MUNIT_Trainer.dis_a.apply", "trainer.MUNIT_Trainer.dis_b.apply", "networks.AdaINGen", "networks.AdaINGen", "networks.AdaINGanilla", "networks.AdaINGanilla", "print", "print", "networks.MsImageDis", "networks.MsImageDis", "list", "list", "list", "list", "utils.weights_init", "utils.weights_init", "utils.weights_init", "utils.load_vgg16", "trainer.MUNIT_Trainer.vgg.eval", "utils.VggExtract", "trainer.MUNIT_Trainer.vgg.parameters", "networks.PatchDis", "networks.PatchDis", "networks.MsImageDis", "networks.MsImageDis", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "trainer.MUNIT_Trainer.dis_a.parameters", "trainer.MUNIT_Trainer.dis_b.parameters", "trainer.MUNIT_Trainer.gen_a.parameters", "trainer.MUNIT_Trainer.gen_b.parameters", "hyperparameters.keys"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.weights_init", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.weights_init", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.weights_init", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.load_vgg16", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["    ", "def", "__init__", "(", "self", ",", "hyperparameters", ")", ":", "\n", "        ", "super", "(", "MUNIT_Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "lr", "=", "hyperparameters", "[", "'lr'", "]", "\n", "# Initiate the networks", "\n", "self", ".", "is_ganilla_gen", "=", "hyperparameters", "[", "'gen'", "]", "[", "'ganilla_gen'", "]", "\n", "if", "self", ".", "is_ganilla_gen", "==", "False", ":", "\n", "            ", "self", ".", "gen_a", "=", "AdaINGen", "(", "hyperparameters", "[", "'input_dim_a'", "]", ",", "hyperparameters", "[", "'gen'", "]", ")", "# auto-encoder for domain a", "\n", "self", ".", "gen_b", "=", "AdaINGen", "(", "hyperparameters", "[", "'input_dim_b'", "]", ",", "hyperparameters", "[", "'gen'", "]", ")", "# auto-encoder for domain b", "\n", "", "else", ":", "\n", "            ", "self", ".", "gen_a", "=", "AdaINGanilla", "(", "hyperparameters", "[", "'input_dim_a'", "]", ",", "hyperparameters", "[", "'gen'", "]", ")", "# auto-encoder for domain a with ganilla architecture", "\n", "self", ".", "gen_b", "=", "AdaINGanilla", "(", "hyperparameters", "[", "'input_dim_b'", "]", ",", "hyperparameters", "[", "'gen'", "]", ")", "# auto-encoder for domain b with ganilla architecture", "\n", "print", "(", "self", ".", "gen_a", ")", "\n", "", "if", "hyperparameters", "[", "'dis'", "]", "[", "'dis_type'", "]", "==", "'patch'", ":", "\n", "            ", "if", "hyperparameters", "[", "'dis'", "]", "[", "'use_patch_gan'", "]", ":", "\n", "                ", "self", ".", "dis_a", "=", "PatchDis", "(", "hyperparameters", "[", "'input_dim_a'", "]", ",", "hyperparameters", "[", "'dis'", "]", ")", "\n", "self", ".", "dis_b", "=", "PatchDis", "(", "hyperparameters", "[", "'input_dim_b'", "]", ",", "hyperparameters", "[", "'dis'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "dis_a", "=", "MsImageDis", "(", "hyperparameters", "[", "'input_dim_a'", "]", ",", "\n", "hyperparameters", "[", "'dis'", "]", ")", "# discriminator for domain a", "\n", "self", ".", "dis_b", "=", "MsImageDis", "(", "hyperparameters", "[", "'input_dim_b'", "]", ",", "\n", "hyperparameters", "[", "'dis'", "]", ")", "# discriminator for domain b", "\n", "", "print", "(", "self", ".", "dis_a", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dis_a", "=", "MsImageDis", "(", "hyperparameters", "[", "'input_dim_a'", "]", ",", "hyperparameters", "[", "'dis'", "]", ")", "# discriminator for domain a", "\n", "self", ".", "dis_b", "=", "MsImageDis", "(", "hyperparameters", "[", "'input_dim_b'", "]", ",", "hyperparameters", "[", "'dis'", "]", ")", "# discriminator for domain b", "\n", "", "self", ".", "instancenorm", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "self", ".", "style_dim", "=", "hyperparameters", "[", "'gen'", "]", "[", "'style_dim'", "]", "\n", "\n", "# fix the noise used in sampling", "\n", "display_size", "=", "int", "(", "hyperparameters", "[", "'display_size'", "]", ")", "\n", "self", ".", "s_a", "=", "torch", ".", "randn", "(", "display_size", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "s_b", "=", "torch", ".", "randn", "(", "display_size", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "# Setup the optimizers", "\n", "beta1", "=", "hyperparameters", "[", "'beta1'", "]", "\n", "beta2", "=", "hyperparameters", "[", "'beta2'", "]", "\n", "dis_params", "=", "list", "(", "self", ".", "dis_a", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "dis_b", ".", "parameters", "(", ")", ")", "\n", "gen_params", "=", "list", "(", "self", ".", "gen_a", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "gen_b", ".", "parameters", "(", ")", ")", "\n", "self", ".", "dis_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "p", "for", "p", "in", "dis_params", "if", "p", ".", "requires_grad", "]", ",", "\n", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ",", "weight_decay", "=", "hyperparameters", "[", "'weight_decay'", "]", ")", "\n", "self", ".", "gen_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "p", "for", "p", "in", "gen_params", "if", "p", ".", "requires_grad", "]", ",", "\n", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ",", "weight_decay", "=", "hyperparameters", "[", "'weight_decay'", "]", ")", "\n", "self", ".", "dis_scheduler", "=", "get_scheduler", "(", "self", ".", "dis_opt", ",", "hyperparameters", ")", "\n", "self", ".", "gen_scheduler", "=", "get_scheduler", "(", "self", ".", "gen_opt", ",", "hyperparameters", ")", "\n", "\n", "# Network weight initialization", "\n", "self", ".", "apply", "(", "weights_init", "(", "hyperparameters", "[", "'init'", "]", ")", ")", "\n", "self", ".", "dis_a", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "self", ".", "dis_b", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "\n", "# Load VGG model if needed", "\n", "if", "'vgg_w'", "in", "hyperparameters", ".", "keys", "(", ")", "and", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", ":", "\n", "            ", "self", ".", "vgg", "=", "load_vgg16", "(", "hyperparameters", "[", "'vgg_model_path'", "]", "+", "'/models'", ")", "\n", "self", ".", "vgg", ".", "eval", "(", ")", "\n", "self", ".", "VggExtract", "=", "VggExtract", "(", "self", ".", "vgg", ")", "\n", "for", "param", "in", "self", ".", "vgg", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.recon_criterion": [[71, 73], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "", "", "def", "recon_criterion", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "input", "-", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.forward": [[74, 87], ["trainer.MUNIT_Trainer.eval", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.MUNIT_Trainer.gen_a.encode", "trainer.MUNIT_Trainer.gen_b.encode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.train"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.train"], ["", "def", "forward", "(", "self", ",", "x_a", ",", "x_b", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "s_a", "=", "Variable", "(", "self", ".", "s_a", ")", "\n", "s_b", "=", "Variable", "(", "self", ".", "s_b", ")", "\n", "c_a", ",", "s_a_fake", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", ")", "\n", "c_b", ",", "s_b_fake", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", ")", "\n", "if", "self", ".", "is_ganilla_gen", ":", "\n", "            ", "c_a", "=", "c_a", "[", "-", "1", "]", "\n", "c_b", "=", "c_b", "[", "-", "1", "]", "\n", "", "x_ba", "=", "self", ".", "gen_a", ".", "decode", "(", "c_b", ",", "s_a", ")", "\n", "x_ab", "=", "self", ".", "gen_b", ".", "decode", "(", "c_a", ",", "s_b", ")", "\n", "self", ".", "train", "(", ")", "\n", "return", "x_ab", ",", "x_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.gen_updateN": [[88, 151], ["trainer.MUNIT_Trainer.gen_opt.zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.MUNIT_Trainer.gen_a.encode", "trainer.MUNIT_Trainer.gen_b.encode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.gen_a.encode", "trainer.MUNIT_Trainer.gen_b.encode", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.dis_a.calc_gen_loss", "trainer.MUNIT_Trainer.dis_b.calc_gen_loss", "trainer.MUNIT_Trainer.loss_gen_total.backward", "trainer.MUNIT_Trainer.gen_opt.step", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.compute_vgg_loss", "trainer.MUNIT_Trainer.compute_vgg_loss", "trainer.MUNIT_Trainer.compute_vgg_loss", "trainer.MUNIT_Trainer.compute_vgg_loss", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x_a.size", "x_b.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss"], ["", "def", "gen_updateN", "(", "self", ",", "x_a", ",", "x_b", ",", "hyperparameters", ")", ":", "\n", "        ", "self", ".", "gen_opt", ".", "zero_grad", "(", ")", "\n", "s_a", "=", "Variable", "(", "torch", ".", "randn", "(", "x_a", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "s_b", "=", "Variable", "(", "torch", ".", "randn", "(", "x_b", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "# encode", "\n", "_", ",", "s_a_prime", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", ")", "\n", "c", ",", "s_b_prime", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", ")", "\n", "\n", "# decode (within domain)", "\n", "x_a_recon", "=", "self", ".", "gen_a", ".", "decode", "(", "c", ",", "s_a_prime", ")", "\n", "x_b_recon", "=", "self", ".", "gen_b", ".", "decode", "(", "c", ",", "s_b_prime", ")", "\n", "# decode (cross domain)", "\n", "x_ba", "=", "self", ".", "gen_a", ".", "decode", "(", "c", ",", "s_a", ")", "\n", "x_ab", "=", "self", ".", "gen_b", ".", "decode", "(", "c", ",", "s_b", ")", "\n", "# encode again", "\n", "c_b_recon", ",", "s_a_recon", "=", "self", ".", "gen_a", ".", "encode", "(", "x_ba", ")", "\n", "c_a_recon", ",", "s_b_recon", "=", "self", ".", "gen_b", ".", "encode", "(", "x_ab", ")", "\n", "\n", "# decode again (if needed)", "\n", "x_aba", "=", "self", ".", "gen_a", ".", "decode", "(", "c_a_recon", ",", "s_a_prime", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "None", "\n", "x_bab", "=", "self", ".", "gen_b", ".", "decode", "(", "c_b_recon", ",", "s_b_prime", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "None", "\n", "\n", "if", "self", ".", "is_ganilla_gen", ":", "\n", "            ", "c", "=", "c", "[", "-", "1", "]", "\n", "c_b_recon", "=", "c_b_recon", "[", "-", "1", "]", "\n", "c_a_recon", "=", "c_a_recon", "[", "-", "1", "]", "\n", "# reconstruction loss", "\n", "", "self", ".", "loss_gen_recon_x_a", "=", "self", ".", "recon_criterion", "(", "x_a_recon", ",", "x_a", ")", "\n", "self", ".", "loss_gen_recon_x_b", "=", "self", ".", "recon_criterion", "(", "x_b_recon", ",", "x_b", ")", "\n", "self", ".", "loss_gen_recon_s_a", "=", "self", ".", "recon_criterion", "(", "s_a_recon", ",", "s_a", ")", "\n", "self", ".", "loss_gen_recon_s_b", "=", "self", ".", "recon_criterion", "(", "s_b_recon", ",", "s_b", ")", "\n", "self", ".", "loss_gen_recon_c_a", "=", "self", ".", "recon_criterion", "(", "c_a_recon", ",", "c", ")", "\n", "self", ".", "loss_gen_recon_c_b", "=", "self", ".", "recon_criterion", "(", "c_b_recon", ",", "c", ")", "\n", "self", ".", "loss_gen_cycrecon_x_a", "=", "self", ".", "recon_criterion", "(", "x_aba", ",", "x_a", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_cycrecon_x_b", "=", "self", ".", "recon_criterion", "(", "x_bab", ",", "x_b", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "0", "\n", "# GAN loss", "\n", "self", ".", "loss_gen_adv_a", "=", "self", ".", "dis_a", ".", "calc_gen_loss", "(", "x_ba", ")", "\n", "self", ".", "loss_gen_adv_b", "=", "self", ".", "dis_b", ".", "calc_gen_loss", "(", "x_ab", ")", "\n", "# domain-invariant perceptual loss", "\n", "self", ".", "loss_gen_vgg_c_a", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ba", ",", "x_b", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_vgg_c_b", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ab", ",", "x_a", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_vgg_s_a", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ba", ",", "x_a", ",", "all", "=", "1", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_vgg_s_b", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ab", ",", "x_b", ",", "all", "=", "1", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "\n", "# total loss", "\n", "self", ".", "loss_gen_total", "=", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_gen_adv_a", "+", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_gen_adv_b", "+", "hyperparameters", "[", "'recon_x_w'", "]", "*", "self", ".", "loss_gen_recon_x_a", "+", "hyperparameters", "[", "'recon_s_w'", "]", "*", "self", ".", "loss_gen_recon_s_a", "+", "hyperparameters", "[", "'recon_c_w'", "]", "*", "self", ".", "loss_gen_recon_c_a", "+", "hyperparameters", "[", "'recon_x_w'", "]", "*", "self", ".", "loss_gen_recon_x_b", "+", "hyperparameters", "[", "'recon_s_w'", "]", "*", "self", ".", "loss_gen_recon_s_b", "+", "hyperparameters", "[", "'recon_c_w'", "]", "*", "self", ".", "loss_gen_recon_c_b", "+", "hyperparameters", "[", "'recon_x_cyc_w'", "]", "*", "self", ".", "loss_gen_cycrecon_x_a", "+", "hyperparameters", "[", "'recon_x_cyc_w'", "]", "*", "self", ".", "loss_gen_cycrecon_x_b", "+", "hyperparameters", "[", "'vgg_w'", "]", "*", "self", ".", "loss_gen_vgg_c_a", "+", "hyperparameters", "[", "'vgg_w'", "]", "*", "self", ".", "loss_gen_vgg_c_b", "\n", "# hyperparameters['vgg_w'] * self.loss_gen_vgg_s_a + \\", "\n", "# hyperparameters['vgg_w'] * self.loss_gen_vgg_s_b", "\n", "\n", "\n", "self", ".", "loss_gen_total", ".", "backward", "(", ")", "\n", "self", ".", "gen_opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.gen_update": [[152, 216], ["trainer.MUNIT_Trainer.gen_opt.zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.MUNIT_Trainer.gen_a.encode", "trainer.MUNIT_Trainer.gen_b.encode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.gen_a.encode", "trainer.MUNIT_Trainer.gen_b.encode", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.dis_a.calc_gen_loss", "trainer.MUNIT_Trainer.dis_b.calc_gen_loss", "trainer.MUNIT_Trainer.loss_gen_total.backward", "trainer.MUNIT_Trainer.gen_opt.step", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.recon_criterion", "trainer.MUNIT_Trainer.compute_vgg_loss", "trainer.MUNIT_Trainer.compute_vgg_loss", "trainer.MUNIT_Trainer.compute_vgg_loss", "trainer.MUNIT_Trainer.compute_vgg_loss", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x_a.size", "x_b.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss"], ["", "def", "gen_update", "(", "self", ",", "x_a", ",", "x_b", ",", "hyperparameters", ")", ":", "\n", "        ", "self", ".", "gen_opt", ".", "zero_grad", "(", ")", "\n", "s_a", "=", "Variable", "(", "torch", ".", "randn", "(", "x_a", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "s_b", "=", "Variable", "(", "torch", ".", "randn", "(", "x_b", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "# encode", "\n", "c_a", ",", "s_a_prime", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", ")", "\n", "c_b", ",", "s_b_prime", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", ")", "\n", "\n", "# decode (within domain)", "\n", "x_a_recon", "=", "self", ".", "gen_a", ".", "decode", "(", "c_a", ",", "s_a_prime", ")", "\n", "x_b_recon", "=", "self", ".", "gen_b", ".", "decode", "(", "c_b", ",", "s_b_prime", ")", "\n", "# decode (cross domain)", "\n", "x_ba", "=", "self", ".", "gen_a", ".", "decode", "(", "c_b", ",", "s_a", ")", "\n", "x_ab", "=", "self", ".", "gen_b", ".", "decode", "(", "c_a", ",", "s_b", ")", "\n", "# encode again", "\n", "c_b_recon", ",", "s_a_recon", "=", "self", ".", "gen_a", ".", "encode", "(", "x_ba", ")", "\n", "c_a_recon", ",", "s_b_recon", "=", "self", ".", "gen_b", ".", "encode", "(", "x_ab", ")", "\n", "\n", "# decode again (if needed)", "\n", "x_aba", "=", "self", ".", "gen_a", ".", "decode", "(", "c_a_recon", ",", "s_a_prime", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "None", "\n", "x_bab", "=", "self", ".", "gen_b", ".", "decode", "(", "c_b_recon", ",", "s_b_prime", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "None", "\n", "\n", "if", "self", ".", "is_ganilla_gen", ":", "\n", "            ", "c_a", "=", "c_a", "[", "-", "1", "]", "\n", "c_b", "=", "c_b", "[", "-", "1", "]", "\n", "c_b_recon", "=", "c_b_recon", "[", "-", "1", "]", "\n", "c_a_recon", "=", "c_a_recon", "[", "-", "1", "]", "\n", "# reconstruction loss", "\n", "", "self", ".", "loss_gen_recon_x_a", "=", "self", ".", "recon_criterion", "(", "x_a_recon", ",", "x_a", ")", "\n", "self", ".", "loss_gen_recon_x_b", "=", "self", ".", "recon_criterion", "(", "x_b_recon", ",", "x_b", ")", "\n", "self", ".", "loss_gen_recon_s_a", "=", "self", ".", "recon_criterion", "(", "s_a_recon", ",", "s_a", ")", "\n", "self", ".", "loss_gen_recon_s_b", "=", "self", ".", "recon_criterion", "(", "s_b_recon", ",", "s_b", ")", "\n", "self", ".", "loss_gen_recon_c_a", "=", "self", ".", "recon_criterion", "(", "c_a_recon", ",", "c_a", ")", "\n", "self", ".", "loss_gen_recon_c_b", "=", "self", ".", "recon_criterion", "(", "c_b_recon", ",", "c_b", ")", "\n", "self", ".", "loss_gen_cycrecon_x_a", "=", "self", ".", "recon_criterion", "(", "x_aba", ",", "x_a", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_cycrecon_x_b", "=", "self", ".", "recon_criterion", "(", "x_bab", ",", "x_b", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "0", "\n", "# GAN loss", "\n", "self", ".", "loss_gen_adv_a", "=", "self", ".", "dis_a", ".", "calc_gen_loss", "(", "x_ba", ")", "\n", "self", ".", "loss_gen_adv_b", "=", "self", ".", "dis_b", ".", "calc_gen_loss", "(", "x_ab", ")", "\n", "# domain-invariant perceptual loss", "\n", "self", ".", "loss_gen_vgg_c_a", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ba", ",", "x_b", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_vgg_c_b", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ab", ",", "x_a", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_vgg_s_a", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ba", ",", "x_a", ",", "all", "=", "1", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_vgg_s_b", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ab", ",", "x_b", ",", "all", "=", "1", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "\n", "# total loss", "\n", "self", ".", "loss_gen_total", "=", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_gen_adv_a", "+", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_gen_adv_b", "+", "hyperparameters", "[", "'recon_x_w'", "]", "*", "self", ".", "loss_gen_recon_x_a", "+", "hyperparameters", "[", "'recon_s_w'", "]", "*", "self", ".", "loss_gen_recon_s_a", "+", "hyperparameters", "[", "'recon_c_w'", "]", "*", "self", ".", "loss_gen_recon_c_a", "+", "hyperparameters", "[", "'recon_x_w'", "]", "*", "self", ".", "loss_gen_recon_x_b", "+", "hyperparameters", "[", "'recon_s_w'", "]", "*", "self", ".", "loss_gen_recon_s_b", "+", "hyperparameters", "[", "'recon_c_w'", "]", "*", "self", ".", "loss_gen_recon_c_b", "+", "hyperparameters", "[", "'recon_x_cyc_w'", "]", "*", "self", ".", "loss_gen_cycrecon_x_a", "+", "hyperparameters", "[", "'recon_x_cyc_w'", "]", "*", "self", ".", "loss_gen_cycrecon_x_b", "+", "hyperparameters", "[", "'vgg_w'", "]", "*", "self", ".", "loss_gen_vgg_c_a", "+", "hyperparameters", "[", "'vgg_w'", "]", "*", "self", ".", "loss_gen_vgg_c_b", "\n", "# hyperparameters['vgg_w'] * self.loss_gen_vgg_s_a + \\", "\n", "# hyperparameters['vgg_w'] * self.loss_gen_vgg_s_b", "\n", "\n", "\n", "self", ".", "loss_gen_total", ".", "backward", "(", ")", "\n", "self", ".", "gen_opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.compute_vgg_loss": [[217, 234], ["utils.vgg_preprocess", "utils.vgg_preprocess", "trainer.MUNIT_Trainer.VggExtract", "trainer.MUNIT_Trainer.VggExtract", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "trainer.MUNIT_Trainer.instancenorm", "trainer.MUNIT_Trainer.instancenorm"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.vgg_preprocess", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.vgg_preprocess"], ["", "def", "compute_vgg_loss", "(", "self", ",", "vgg", ",", "img", ",", "target", ",", "all", "=", "0", ")", ":", "\n", "        ", "img_vgg", "=", "vgg_preprocess", "(", "img", ")", "\n", "target_vgg", "=", "vgg_preprocess", "(", "target", ")", "\n", "# img_fea = vgg(img_vgg)", "\n", "# target_fea = vgg(target_vgg)", "\n", "img_fea_dict", "=", "self", ".", "VggExtract", "(", "img_vgg", ")", "\n", "target_fea_dict", "=", "self", ".", "VggExtract", "(", "target_vgg", ")", "\n", "loss", "=", "0", "\n", "if", "all", ":", "\n", "# for feature in img_fea_dict:", "\n", "#     loss+= torch.mean((img_fea_dict[feature] - (target_fea_dict[feature])) ** 2)", "\n", "            ", "loss", "+=", "torch", ".", "mean", "(", "(", "img_fea_dict", "[", "'relu4_3'", "]", "-", "(", "target_fea_dict", "[", "'relu4_3'", "]", ")", ")", "**", "2", ")", "\n", "", "else", ":", "\n", "            ", "loss", "+=", "torch", ".", "mean", "(", "\n", "(", "self", ".", "instancenorm", "(", "img_fea_dict", "[", "'relu4_3'", "]", ")", "-", "self", ".", "instancenorm", "(", "target_fea_dict", "[", "'relu4_3'", "]", ")", ")", "**", "2", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.sample": [[235, 256], ["trainer.MUNIT_Trainer.eval", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "range", "trainer.MUNIT_Trainer.train", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "x_a.size", "trainer.MUNIT_Trainer.gen_a.encode", "trainer.MUNIT_Trainer.gen_b.encode", "x_a_recon.append", "x_b_recon.append", "x_ba1.append", "x_ba2.append", "x_ab1.append", "x_ab2.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_a[].unsqueeze", "x_b[].unsqueeze", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.gen_b.decode", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "s_a1[].unsqueeze", "s_a2[].unsqueeze", "s_b1[].unsqueeze", "s_b2[].unsqueeze", "x_a.size", "x_b.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.train", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode"], ["", "def", "sample", "(", "self", ",", "x_a", ",", "x_b", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "s_a1", "=", "Variable", "(", "self", ".", "s_a", ")", "\n", "s_b1", "=", "Variable", "(", "self", ".", "s_b", ")", "\n", "s_a2", "=", "Variable", "(", "torch", ".", "randn", "(", "x_a", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "s_b2", "=", "Variable", "(", "torch", ".", "randn", "(", "x_b", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "x_a_recon", ",", "x_b_recon", ",", "x_ba1", ",", "x_ba2", ",", "x_ab1", ",", "x_ab2", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "x_a", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "c_a", ",", "s_a_fake", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "c_b", ",", "s_b_fake", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x_a_recon", ".", "append", "(", "self", ".", "gen_a", ".", "decode", "(", "c_a", ",", "s_a_fake", ")", ")", "\n", "x_b_recon", ".", "append", "(", "self", ".", "gen_b", ".", "decode", "(", "c_b", ",", "s_b_fake", ")", ")", "\n", "x_ba1", ".", "append", "(", "self", ".", "gen_a", ".", "decode", "(", "c_b", ",", "s_a1", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "x_ba2", ".", "append", "(", "self", ".", "gen_a", ".", "decode", "(", "c_b", ",", "s_a2", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "x_ab1", ".", "append", "(", "self", ".", "gen_b", ".", "decode", "(", "c_a", ",", "s_b1", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "x_ab2", ".", "append", "(", "self", ".", "gen_b", ".", "decode", "(", "c_a", ",", "s_b2", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", "\n", "", "x_a_recon", ",", "x_b_recon", "=", "torch", ".", "cat", "(", "x_a_recon", ")", ",", "torch", ".", "cat", "(", "x_b_recon", ")", "\n", "x_ba1", ",", "x_ba2", "=", "torch", ".", "cat", "(", "x_ba1", ")", ",", "torch", ".", "cat", "(", "x_ba2", ")", "\n", "x_ab1", ",", "x_ab2", "=", "torch", ".", "cat", "(", "x_ab1", ")", ",", "torch", ".", "cat", "(", "x_ab2", ")", "\n", "self", ".", "train", "(", ")", "\n", "return", "x_a", ",", "x_a_recon", ",", "x_ab1", ",", "x_ab2", ",", "x_b", ",", "x_b_recon", ",", "x_ba1", ",", "x_ba2", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.dis_updateN": [[257, 273], ["trainer.MUNIT_Trainer.dis_opt.zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.MUNIT_Trainer.gen_b.encode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.dis_a.calc_dis_loss", "trainer.MUNIT_Trainer.dis_b.calc_dis_loss", "trainer.MUNIT_Trainer.loss_dis_total.backward", "trainer.MUNIT_Trainer.dis_opt.step", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "trainer.MUNIT_Trainer.detach", "trainer.MUNIT_Trainer.detach", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x_a.size", "x_b.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_dis_loss"], ["", "def", "dis_updateN", "(", "self", ",", "x_a", ",", "x_b", ",", "hyperparameters", ")", ":", "\n", "        ", "self", ".", "dis_opt", ".", "zero_grad", "(", ")", "\n", "s_a", "=", "Variable", "(", "torch", ".", "randn", "(", "x_a", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "s_b", "=", "Variable", "(", "torch", ".", "randn", "(", "x_b", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "# encode", "\n", "# c, _ = self.gen_a.encode(x_a)", "\n", "c", ",", "_", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", ")", "\n", "# decode (cross domain)", "\n", "x_ba", "=", "self", ".", "gen_a", ".", "decode", "(", "c", ",", "s_a", ")", "\n", "x_ab", "=", "self", ".", "gen_b", ".", "decode", "(", "c", ",", "s_b", ")", "\n", "# D loss", "\n", "self", ".", "loss_dis_a", "=", "self", ".", "dis_a", ".", "calc_dis_loss", "(", "x_ba", ".", "detach", "(", ")", ",", "x_a", ")", "\n", "self", ".", "loss_dis_b", "=", "self", ".", "dis_b", ".", "calc_dis_loss", "(", "x_ab", ".", "detach", "(", ")", ",", "x_b", ")", "\n", "self", ".", "loss_dis_total", "=", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_dis_a", "+", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_dis_b", "\n", "self", ".", "loss_dis_total", ".", "backward", "(", ")", "\n", "self", ".", "dis_opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.dis_update": [[274, 290], ["trainer.MUNIT_Trainer.dis_opt.zero_grad", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.MUNIT_Trainer.gen_a.encode", "trainer.MUNIT_Trainer.gen_b.encode", "trainer.MUNIT_Trainer.gen_a.decode", "trainer.MUNIT_Trainer.gen_b.decode", "trainer.MUNIT_Trainer.dis_a.calc_dis_loss", "trainer.MUNIT_Trainer.dis_b.calc_dis_loss", "trainer.MUNIT_Trainer.loss_dis_total.backward", "trainer.MUNIT_Trainer.dis_opt.step", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "trainer.MUNIT_Trainer.detach", "trainer.MUNIT_Trainer.detach", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "x_a.size", "x_b.size"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_dis_loss"], ["", "def", "dis_update", "(", "self", ",", "x_a", ",", "x_b", ",", "hyperparameters", ")", ":", "\n", "        ", "self", ".", "dis_opt", ".", "zero_grad", "(", ")", "\n", "s_a", "=", "Variable", "(", "torch", ".", "randn", "(", "x_a", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "s_b", "=", "Variable", "(", "torch", ".", "randn", "(", "x_b", ".", "size", "(", "0", ")", ",", "self", ".", "style_dim", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "# encode", "\n", "c_a", ",", "_", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", ")", "\n", "c_b", ",", "_", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", ")", "\n", "# decode (cross domain)", "\n", "x_ba", "=", "self", ".", "gen_a", ".", "decode", "(", "c_b", ",", "s_a", ")", "\n", "x_ab", "=", "self", ".", "gen_b", ".", "decode", "(", "c_a", ",", "s_b", ")", "\n", "# D loss", "\n", "self", ".", "loss_dis_a", "=", "self", ".", "dis_a", ".", "calc_dis_loss", "(", "x_ba", ".", "detach", "(", ")", ",", "x_a", ")", "\n", "self", ".", "loss_dis_b", "=", "self", ".", "dis_b", ".", "calc_dis_loss", "(", "x_ab", ".", "detach", "(", ")", ",", "x_b", ")", "\n", "self", ".", "loss_dis_total", "=", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_dis_a", "+", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_dis_b", "\n", "self", ".", "loss_dis_total", ".", "backward", "(", ")", "\n", "self", ".", "dis_opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.update_learning_rate": [[291, 296], ["trainer.MUNIT_Trainer.dis_scheduler.step", "trainer.MUNIT_Trainer.gen_scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dis_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "dis_scheduler", ".", "step", "(", ")", "\n", "", "if", "self", ".", "gen_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "gen_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.resume": [[297, 318], ["utils.get_model_list", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.MUNIT_Trainer.gen_a.load_state_dict", "trainer.MUNIT_Trainer.gen_b.load_state_dict", "int", "utils.get_model_list", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.MUNIT_Trainer.dis_a.load_state_dict", "trainer.MUNIT_Trainer.dis_b.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.MUNIT_Trainer.dis_opt.load_state_dict", "trainer.MUNIT_Trainer.gen_opt.load_state_dict", "utils.get_scheduler", "utils.get_scheduler", "print", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_model_list", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_model_list", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler"], ["", "", "def", "resume", "(", "self", ",", "checkpoint_dir", ",", "hyperparameters", ")", ":", "\n", "# Load generators", "\n", "        ", "last_model_name", "=", "get_model_list", "(", "checkpoint_dir", ",", "\"gen\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "last_model_name", ")", "\n", "self", ".", "gen_a", ".", "load_state_dict", "(", "state_dict", "[", "'a'", "]", ")", "\n", "self", ".", "gen_b", ".", "load_state_dict", "(", "state_dict", "[", "'b'", "]", ")", "\n", "iterations", "=", "int", "(", "last_model_name", "[", "-", "11", ":", "-", "3", "]", ")", "\n", "# Load discriminators", "\n", "last_model_name", "=", "get_model_list", "(", "checkpoint_dir", ",", "\"dis\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "last_model_name", ")", "\n", "self", ".", "dis_a", ".", "load_state_dict", "(", "state_dict", "[", "'a'", "]", ")", "\n", "self", ".", "dis_b", ".", "load_state_dict", "(", "state_dict", "[", "'b'", "]", ")", "\n", "# Load optimizers", "\n", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'optimizer.pt'", ")", ")", "\n", "self", ".", "dis_opt", ".", "load_state_dict", "(", "state_dict", "[", "'dis'", "]", ")", "\n", "self", ".", "gen_opt", ".", "load_state_dict", "(", "state_dict", "[", "'gen'", "]", ")", "\n", "# Reinitilize schedulers", "\n", "self", ".", "dis_scheduler", "=", "get_scheduler", "(", "self", ".", "dis_opt", ",", "hyperparameters", ",", "iterations", ")", "\n", "self", ".", "gen_scheduler", "=", "get_scheduler", "(", "self", ".", "gen_opt", ",", "hyperparameters", ",", "iterations", ")", "\n", "print", "(", "'Resume from iteration %d'", "%", "iterations", ")", "\n", "return", "iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.MUNIT_Trainer.save": [[319, 327], ["os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "trainer.MUNIT_Trainer.gen_a.state_dict", "trainer.MUNIT_Trainer.gen_b.state_dict", "trainer.MUNIT_Trainer.dis_a.state_dict", "trainer.MUNIT_Trainer.dis_b.state_dict", "trainer.MUNIT_Trainer.gen_opt.state_dict", "trainer.MUNIT_Trainer.dis_opt.state_dict"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["", "def", "save", "(", "self", ",", "snapshot_dir", ",", "iterations", ")", ":", "\n", "# Save generators, discriminators, and optimizers", "\n", "        ", "gen_name", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "'gen_%08d.pt'", "%", "(", "iterations", "+", "1", ")", ")", "\n", "dis_name", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "'dis_%08d.pt'", "%", "(", "iterations", "+", "1", ")", ")", "\n", "opt_name", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "'optimizer.pt'", ")", "\n", "torch", ".", "save", "(", "{", "'a'", ":", "self", ".", "gen_a", ".", "state_dict", "(", ")", ",", "'b'", ":", "self", ".", "gen_b", ".", "state_dict", "(", ")", "}", ",", "gen_name", ")", "\n", "torch", ".", "save", "(", "{", "'a'", ":", "self", ".", "dis_a", ".", "state_dict", "(", ")", ",", "'b'", ":", "self", ".", "dis_b", ".", "state_dict", "(", ")", "}", ",", "dis_name", ")", "\n", "torch", ".", "save", "(", "{", "'gen'", ":", "self", ".", "gen_opt", ".", "state_dict", "(", ")", ",", "'dis'", ":", "self", ".", "dis_opt", ".", "state_dict", "(", ")", "}", ",", "opt_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.__init__": [[330, 363], ["torch.Module.__init__", "networks.VAEGen", "networks.VAEGen", "networks.MsImageDis", "networks.MsImageDis", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils.get_scheduler", "utils.get_scheduler", "trainer.UNIT_Trainer.apply", "trainer.UNIT_Trainer.dis_a.apply", "trainer.UNIT_Trainer.dis_b.apply", "list", "list", "list", "list", "utils.weights_init", "utils.weights_init", "utils.weights_init", "utils.load_vgg16", "trainer.UNIT_Trainer.vgg.eval", "trainer.UNIT_Trainer.vgg.parameters", "trainer.UNIT_Trainer.dis_a.parameters", "trainer.UNIT_Trainer.dis_b.parameters", "trainer.UNIT_Trainer.gen_a.parameters", "trainer.UNIT_Trainer.gen_b.parameters", "hyperparameters.keys"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.weights_init", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.weights_init", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.weights_init", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.load_vgg16", "home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval"], ["    ", "def", "__init__", "(", "self", ",", "hyperparameters", ")", ":", "\n", "        ", "super", "(", "UNIT_Trainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "lr", "=", "hyperparameters", "[", "'lr'", "]", "\n", "# Initiate the networks", "\n", "self", ".", "gen_a", "=", "VAEGen", "(", "hyperparameters", "[", "'input_dim_a'", "]", ",", "hyperparameters", "[", "'gen'", "]", ")", "# auto-encoder for domain a", "\n", "self", ".", "gen_b", "=", "VAEGen", "(", "hyperparameters", "[", "'input_dim_b'", "]", ",", "hyperparameters", "[", "'gen'", "]", ")", "# auto-encoder for domain b", "\n", "self", ".", "dis_a", "=", "MsImageDis", "(", "hyperparameters", "[", "'input_dim_a'", "]", ",", "hyperparameters", "[", "'dis'", "]", ")", "# discriminator for domain a", "\n", "self", ".", "dis_b", "=", "MsImageDis", "(", "hyperparameters", "[", "'input_dim_b'", "]", ",", "hyperparameters", "[", "'dis'", "]", ")", "# discriminator for domain b", "\n", "self", ".", "instancenorm", "=", "nn", ".", "InstanceNorm2d", "(", "512", ",", "affine", "=", "False", ")", "\n", "\n", "# Setup the optimizers", "\n", "beta1", "=", "hyperparameters", "[", "'beta1'", "]", "\n", "beta2", "=", "hyperparameters", "[", "'beta2'", "]", "\n", "dis_params", "=", "list", "(", "self", ".", "dis_a", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "dis_b", ".", "parameters", "(", ")", ")", "\n", "gen_params", "=", "list", "(", "self", ".", "gen_a", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "gen_b", ".", "parameters", "(", ")", ")", "\n", "self", ".", "dis_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "p", "for", "p", "in", "dis_params", "if", "p", ".", "requires_grad", "]", ",", "\n", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ",", "weight_decay", "=", "hyperparameters", "[", "'weight_decay'", "]", ")", "\n", "self", ".", "gen_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "p", "for", "p", "in", "gen_params", "if", "p", ".", "requires_grad", "]", ",", "\n", "lr", "=", "lr", ",", "betas", "=", "(", "beta1", ",", "beta2", ")", ",", "weight_decay", "=", "hyperparameters", "[", "'weight_decay'", "]", ")", "\n", "self", ".", "dis_scheduler", "=", "get_scheduler", "(", "self", ".", "dis_opt", ",", "hyperparameters", ")", "\n", "self", ".", "gen_scheduler", "=", "get_scheduler", "(", "self", ".", "gen_opt", ",", "hyperparameters", ")", "\n", "\n", "# Network weight initialization", "\n", "self", ".", "apply", "(", "weights_init", "(", "hyperparameters", "[", "'init'", "]", ")", ")", "\n", "self", ".", "dis_a", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "self", ".", "dis_b", ".", "apply", "(", "weights_init", "(", "'gaussian'", ")", ")", "\n", "\n", "# Load VGG model if needed", "\n", "if", "'vgg_w'", "in", "hyperparameters", ".", "keys", "(", ")", "and", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", ":", "\n", "            ", "self", ".", "vgg", "=", "load_vgg16", "(", "hyperparameters", "[", "'vgg_model_path'", "]", "+", "'/models'", ")", "\n", "self", ".", "vgg", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "vgg", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion": [[364, 366], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "", "", "def", "recon_criterion", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "input", "-", "target", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.forward": [[367, 375], ["trainer.UNIT_Trainer.eval", "trainer.UNIT_Trainer.gen_a.encode", "trainer.UNIT_Trainer.gen_b.encode", "trainer.UNIT_Trainer.gen_a.decode", "trainer.UNIT_Trainer.gen_b.decode", "trainer.UNIT_Trainer.train"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.train"], ["", "def", "forward", "(", "self", ",", "x_a", ",", "x_b", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "h_a", ",", "_", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", ")", "\n", "h_b", ",", "_", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", ")", "\n", "x_ba", "=", "self", ".", "gen_a", ".", "decode", "(", "h_b", ")", "\n", "x_ab", "=", "self", ".", "gen_b", ".", "decode", "(", "h_a", ")", "\n", "self", ".", "train", "(", ")", "\n", "return", "x_ab", ",", "x_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.__compute_kl": [[376, 385], ["torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "__compute_kl", "(", "self", ",", "mu", ")", ":", "\n", "# def _compute_kl(self, mu, sd):", "\n", "# mu_2 = torch.pow(mu, 2)", "\n", "# sd_2 = torch.pow(sd, 2)", "\n", "# encoding_loss = (mu_2 + sd_2 - torch.log(sd_2)).sum() / mu_2.size(0)", "\n", "# return encoding_loss", "\n", "        ", "mu_2", "=", "torch", ".", "pow", "(", "mu", ",", "2", ")", "\n", "encoding_loss", "=", "torch", ".", "mean", "(", "mu_2", ")", "\n", "return", "encoding_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.gen_update": [[386, 434], ["trainer.UNIT_Trainer.gen_opt.zero_grad", "trainer.UNIT_Trainer.gen_a.encode", "trainer.UNIT_Trainer.gen_b.encode", "trainer.UNIT_Trainer.gen_a.decode", "trainer.UNIT_Trainer.gen_b.decode", "trainer.UNIT_Trainer.gen_a.decode", "trainer.UNIT_Trainer.gen_b.decode", "trainer.UNIT_Trainer.gen_a.encode", "trainer.UNIT_Trainer.gen_b.encode", "trainer.UNIT_Trainer.recon_criterion", "trainer.UNIT_Trainer.recon_criterion", "trainer.UNIT_Trainer.__compute_kl", "trainer.UNIT_Trainer.__compute_kl", "trainer.UNIT_Trainer.recon_criterion", "trainer.UNIT_Trainer.recon_criterion", "trainer.UNIT_Trainer.__compute_kl", "trainer.UNIT_Trainer.__compute_kl", "trainer.UNIT_Trainer.dis_a.calc_gen_loss", "trainer.UNIT_Trainer.dis_b.calc_gen_loss", "trainer.UNIT_Trainer.loss_gen_total.backward", "trainer.UNIT_Trainer.gen_opt.step", "trainer.UNIT_Trainer.gen_a.decode", "trainer.UNIT_Trainer.gen_b.decode", "trainer.UNIT_Trainer.compute_vgg_loss", "trainer.UNIT_Trainer.compute_vgg_loss"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.__compute_kl", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.__compute_kl", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.recon_criterion", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.__compute_kl", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.__compute_kl", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_gen_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss"], ["", "def", "gen_update", "(", "self", ",", "x_a", ",", "x_b", ",", "hyperparameters", ")", ":", "\n", "        ", "self", ".", "gen_opt", ".", "zero_grad", "(", ")", "\n", "# encode", "\n", "h_a", ",", "n_a", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", ")", "\n", "h_b", ",", "n_b", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", ")", "\n", "# decode (within domain)", "\n", "x_a_recon", "=", "self", ".", "gen_a", ".", "decode", "(", "h_a", "+", "n_a", ")", "\n", "x_b_recon", "=", "self", ".", "gen_b", ".", "decode", "(", "h_b", "+", "n_b", ")", "\n", "# decode (cross domain)", "\n", "x_ba", "=", "self", ".", "gen_a", ".", "decode", "(", "h_b", "+", "n_b", ")", "\n", "x_ab", "=", "self", ".", "gen_b", ".", "decode", "(", "h_a", "+", "n_a", ")", "\n", "# encode again", "\n", "h_b_recon", ",", "n_b_recon", "=", "self", ".", "gen_a", ".", "encode", "(", "x_ba", ")", "\n", "h_a_recon", ",", "n_a_recon", "=", "self", ".", "gen_b", ".", "encode", "(", "x_ab", ")", "\n", "# decode again (if needed)", "\n", "x_aba", "=", "self", ".", "gen_a", ".", "decode", "(", "h_a_recon", "+", "n_a_recon", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "None", "\n", "x_bab", "=", "self", ".", "gen_b", ".", "decode", "(", "h_b_recon", "+", "n_b_recon", ")", "if", "hyperparameters", "[", "'recon_x_cyc_w'", "]", ">", "0", "else", "None", "\n", "\n", "# reconstruction loss", "\n", "self", ".", "loss_gen_recon_x_a", "=", "self", ".", "recon_criterion", "(", "x_a_recon", ",", "x_a", ")", "\n", "self", ".", "loss_gen_recon_x_b", "=", "self", ".", "recon_criterion", "(", "x_b_recon", ",", "x_b", ")", "\n", "self", ".", "loss_gen_recon_kl_a", "=", "self", ".", "__compute_kl", "(", "h_a", ")", "\n", "self", ".", "loss_gen_recon_kl_b", "=", "self", ".", "__compute_kl", "(", "h_b", ")", "\n", "self", ".", "loss_gen_cyc_x_a", "=", "self", ".", "recon_criterion", "(", "x_aba", ",", "x_a", ")", "\n", "self", ".", "loss_gen_cyc_x_b", "=", "self", ".", "recon_criterion", "(", "x_bab", ",", "x_b", ")", "\n", "self", ".", "loss_gen_recon_kl_cyc_aba", "=", "self", ".", "__compute_kl", "(", "h_a_recon", ")", "\n", "self", ".", "loss_gen_recon_kl_cyc_bab", "=", "self", ".", "__compute_kl", "(", "h_b_recon", ")", "\n", "# GAN loss", "\n", "self", ".", "loss_gen_adv_a", "=", "self", ".", "dis_a", ".", "calc_gen_loss", "(", "x_ba", ")", "\n", "self", ".", "loss_gen_adv_b", "=", "self", ".", "dis_b", ".", "calc_gen_loss", "(", "x_ab", ")", "\n", "# domain-invariant perceptual loss", "\n", "self", ".", "loss_gen_vgg_a", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ba", ",", "x_b", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "self", ".", "loss_gen_vgg_b", "=", "self", ".", "compute_vgg_loss", "(", "self", ".", "vgg", ",", "x_ab", ",", "x_a", ")", "if", "hyperparameters", "[", "'vgg_w'", "]", ">", "0", "else", "0", "\n", "# total loss", "\n", "self", ".", "loss_gen_total", "=", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_gen_adv_a", "+", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_gen_adv_b", "+", "hyperparameters", "[", "'recon_x_w'", "]", "*", "self", ".", "loss_gen_recon_x_a", "+", "hyperparameters", "[", "'recon_kl_w'", "]", "*", "self", ".", "loss_gen_recon_kl_a", "+", "hyperparameters", "[", "'recon_x_w'", "]", "*", "self", ".", "loss_gen_recon_x_b", "+", "hyperparameters", "[", "'recon_kl_w'", "]", "*", "self", ".", "loss_gen_recon_kl_b", "+", "hyperparameters", "[", "'recon_x_cyc_w'", "]", "*", "self", ".", "loss_gen_cyc_x_a", "+", "hyperparameters", "[", "'recon_kl_cyc_w'", "]", "*", "self", ".", "loss_gen_recon_kl_cyc_aba", "+", "hyperparameters", "[", "'recon_x_cyc_w'", "]", "*", "self", ".", "loss_gen_cyc_x_b", "+", "hyperparameters", "[", "'recon_kl_cyc_w'", "]", "*", "self", ".", "loss_gen_recon_kl_cyc_bab", "+", "hyperparameters", "[", "'vgg_w'", "]", "*", "self", ".", "loss_gen_vgg_a", "+", "hyperparameters", "[", "'vgg_w'", "]", "*", "self", ".", "loss_gen_vgg_b", "\n", "self", ".", "loss_gen_total", ".", "backward", "(", ")", "\n", "self", ".", "gen_opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.compute_vgg_loss": [[435, 441], ["utils.vgg_preprocess", "utils.vgg_preprocess", "vgg", "vgg", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "trainer.UNIT_Trainer.instancenorm", "trainer.UNIT_Trainer.instancenorm"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.vgg_preprocess", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.vgg_preprocess"], ["", "def", "compute_vgg_loss", "(", "self", ",", "vgg", ",", "img", ",", "target", ")", ":", "\n", "        ", "img_vgg", "=", "vgg_preprocess", "(", "img", ")", "\n", "target_vgg", "=", "vgg_preprocess", "(", "target", ")", "\n", "img_fea", "=", "vgg", "(", "img_vgg", ")", "\n", "target_fea", "=", "vgg", "(", "target_vgg", ")", "\n", "return", "torch", ".", "mean", "(", "(", "self", ".", "instancenorm", "(", "img_fea", ")", "-", "self", ".", "instancenorm", "(", "target_fea", ")", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.sample": [[442, 457], ["trainer.UNIT_Trainer.eval", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "trainer.UNIT_Trainer.train", "x_a.size", "trainer.UNIT_Trainer.gen_a.encode", "trainer.UNIT_Trainer.gen_b.encode", "x_a_recon.append", "x_b_recon.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_a[].unsqueeze", "x_b[].unsqueeze", "trainer.UNIT_Trainer.gen_a.decode", "trainer.UNIT_Trainer.gen_b.decode", "trainer.UNIT_Trainer.gen_a.decode", "trainer.UNIT_Trainer.gen_b.decode"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.models.base_model.BaseModel.eval", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.solver.Solver.train", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode"], ["", "def", "sample", "(", "self", ",", "x_a", ",", "x_b", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "x_a_recon", ",", "x_b_recon", ",", "x_ba", ",", "x_ab", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "x_a", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "h_a", ",", "_", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "h_b", ",", "_", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "x_a_recon", ".", "append", "(", "self", ".", "gen_a", ".", "decode", "(", "h_a", ")", ")", "\n", "x_b_recon", ".", "append", "(", "self", ".", "gen_b", ".", "decode", "(", "h_b", ")", ")", "\n", "x_ba", ".", "append", "(", "self", ".", "gen_a", ".", "decode", "(", "h_b", ")", ")", "\n", "x_ab", ".", "append", "(", "self", ".", "gen_b", ".", "decode", "(", "h_a", ")", ")", "\n", "", "x_a_recon", ",", "x_b_recon", "=", "torch", ".", "cat", "(", "x_a_recon", ")", ",", "torch", ".", "cat", "(", "x_b_recon", ")", "\n", "x_ba", "=", "torch", ".", "cat", "(", "x_ba", ")", "\n", "x_ab", "=", "torch", ".", "cat", "(", "x_ab", ")", "\n", "self", ".", "train", "(", ")", "\n", "return", "x_a", ",", "x_a_recon", ",", "x_ab", ",", "x_b", ",", "x_b_recon", ",", "x_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.dis_update": [[458, 472], ["trainer.UNIT_Trainer.dis_opt.zero_grad", "trainer.UNIT_Trainer.gen_a.encode", "trainer.UNIT_Trainer.gen_b.encode", "trainer.UNIT_Trainer.gen_a.decode", "trainer.UNIT_Trainer.gen_b.decode", "trainer.UNIT_Trainer.dis_a.calc_dis_loss", "trainer.UNIT_Trainer.dis_b.calc_dis_loss", "trainer.UNIT_Trainer.loss_dis_total.backward", "trainer.UNIT_Trainer.dis_opt.step", "trainer.UNIT_Trainer.detach", "trainer.UNIT_Trainer.detach"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.encode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.VAEGen.decode", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_dis_loss", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.networks.MsImageDis.calc_dis_loss"], ["", "def", "dis_update", "(", "self", ",", "x_a", ",", "x_b", ",", "hyperparameters", ")", ":", "\n", "        ", "self", ".", "dis_opt", ".", "zero_grad", "(", ")", "\n", "# encode", "\n", "h_a", ",", "n_a", "=", "self", ".", "gen_a", ".", "encode", "(", "x_a", ")", "\n", "h_b", ",", "n_b", "=", "self", ".", "gen_b", ".", "encode", "(", "x_b", ")", "\n", "# decode (cross domain)", "\n", "x_ba", "=", "self", ".", "gen_a", ".", "decode", "(", "h_b", "+", "n_b", ")", "\n", "x_ab", "=", "self", ".", "gen_b", ".", "decode", "(", "h_a", "+", "n_a", ")", "\n", "# D loss", "\n", "self", ".", "loss_dis_a", "=", "self", ".", "dis_a", ".", "calc_dis_loss", "(", "x_ba", ".", "detach", "(", ")", ",", "x_a", ")", "\n", "self", ".", "loss_dis_b", "=", "self", ".", "dis_b", ".", "calc_dis_loss", "(", "x_ab", ".", "detach", "(", ")", ",", "x_b", ")", "\n", "self", ".", "loss_dis_total", "=", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_dis_a", "+", "hyperparameters", "[", "'gan_w'", "]", "*", "self", ".", "loss_dis_b", "\n", "self", ".", "loss_dis_total", ".", "backward", "(", ")", "\n", "self", ".", "dis_opt", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.update_learning_rate": [[473, 478], ["trainer.UNIT_Trainer.dis_scheduler.step", "trainer.UNIT_Trainer.gen_scheduler.step"], "methods", ["None"], ["", "def", "update_learning_rate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dis_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "dis_scheduler", ".", "step", "(", ")", "\n", "", "if", "self", ".", "gen_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "gen_scheduler", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.resume": [[479, 500], ["utils.get_model_list", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.UNIT_Trainer.gen_a.load_state_dict", "trainer.UNIT_Trainer.gen_b.load_state_dict", "int", "utils.get_model_list", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.UNIT_Trainer.dis_a.load_state_dict", "trainer.UNIT_Trainer.dis_b.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.UNIT_Trainer.dis_opt.load_state_dict", "trainer.UNIT_Trainer.gen_opt.load_state_dict", "utils.get_scheduler", "utils.get_scheduler", "print", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_model_list", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_model_list", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler"], ["", "", "def", "resume", "(", "self", ",", "checkpoint_dir", ",", "hyperparameters", ")", ":", "\n", "# Load generators", "\n", "        ", "last_model_name", "=", "get_model_list", "(", "checkpoint_dir", ",", "\"gen\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "last_model_name", ")", "\n", "self", ".", "gen_a", ".", "load_state_dict", "(", "state_dict", "[", "'a'", "]", ")", "\n", "self", ".", "gen_b", ".", "load_state_dict", "(", "state_dict", "[", "'b'", "]", ")", "\n", "iterations", "=", "int", "(", "last_model_name", "[", "-", "11", ":", "-", "3", "]", ")", "\n", "# Load discriminators", "\n", "last_model_name", "=", "get_model_list", "(", "checkpoint_dir", ",", "\"dis\"", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "last_model_name", ")", "\n", "self", ".", "dis_a", ".", "load_state_dict", "(", "state_dict", "[", "'a'", "]", ")", "\n", "self", ".", "dis_b", ".", "load_state_dict", "(", "state_dict", "[", "'b'", "]", ")", "\n", "# Load optimizers", "\n", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'optimizer.pt'", ")", ")", "\n", "self", ".", "dis_opt", ".", "load_state_dict", "(", "state_dict", "[", "'dis'", "]", ")", "\n", "self", ".", "gen_opt", ".", "load_state_dict", "(", "state_dict", "[", "'gen'", "]", ")", "\n", "# Reinitilize schedulers", "\n", "self", ".", "dis_scheduler", "=", "get_scheduler", "(", "self", ".", "dis_opt", ",", "hyperparameters", ",", "iterations", ")", "\n", "self", ".", "gen_scheduler", "=", "get_scheduler", "(", "self", ".", "gen_opt", ",", "hyperparameters", ",", "iterations", ")", "\n", "print", "(", "'Resume from iteration %d'", "%", "iterations", ")", "\n", "return", "iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save": [[501, 509], ["os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "trainer.UNIT_Trainer.gen_a.state_dict", "trainer.UNIT_Trainer.gen_b.state_dict", "trainer.UNIT_Trainer.dis_a.state_dict", "trainer.UNIT_Trainer.dis_b.state_dict", "trainer.UNIT_Trainer.gen_opt.state_dict", "trainer.UNIT_Trainer.dis_opt.state_dict"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.trainer.UNIT_Trainer.save"], ["", "def", "save", "(", "self", ",", "snapshot_dir", ",", "iterations", ")", ":", "\n", "# Save generators, discriminators, and optimizers", "\n", "        ", "gen_name", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "'gen_%08d.pt'", "%", "(", "iterations", "+", "1", ")", ")", "\n", "dis_name", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "'dis_%08d.pt'", "%", "(", "iterations", "+", "1", ")", ")", "\n", "opt_name", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "'optimizer.pt'", ")", "\n", "torch", ".", "save", "(", "{", "'a'", ":", "self", ".", "gen_a", ".", "state_dict", "(", ")", ",", "'b'", ":", "self", ".", "gen_b", ".", "state_dict", "(", ")", "}", ",", "gen_name", ")", "\n", "torch", ".", "save", "(", "{", "'a'", ":", "self", ".", "dis_a", ".", "state_dict", "(", ")", ",", "'b'", ":", "self", ".", "dis_b", ".", "state_dict", "(", ")", "}", ",", "dis_name", ")", "\n", "torch", ".", "save", "(", "{", "'gen'", ":", "self", ".", "gen_opt", ".", "state_dict", "(", ")", ",", "'dis'", ":", "self", ".", "dis_opt", ".", "state_dict", "(", ")", "}", ",", "opt_name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageFilelist.__init__": [[26, 32], ["flist_reader"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "flist", ",", "transform", "=", "None", ",", "\n", "flist_reader", "=", "default_flist_reader", ",", "loader", "=", "default_loader", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "imlist", "=", "flist_reader", "(", "flist", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageFilelist.__getitem__": [[33, 40], ["torch.ImageFilelist.loader", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.ImageFilelist.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "impath", "=", "self", ".", "imlist", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "impath", ")", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageFilelist.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imlist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageLabelFilelist.__init__": [[46, 55], ["flist_reader", "sorted", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "list", "set", "range", "len", "path.split", "impath.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "flist", ",", "transform", "=", "None", ",", "\n", "flist_reader", "=", "default_flist_reader", ",", "loader", "=", "default_loader", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "imlist", "=", "flist_reader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "flist", ")", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "classes", "=", "sorted", "(", "list", "(", "set", "(", "[", "path", ".", "split", "(", "'/'", ")", "[", "0", "]", "for", "path", "in", "self", ".", "imlist", "]", ")", ")", ")", "\n", "self", ".", "class_to_idx", "=", "{", "self", ".", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "self", ".", "classes", ")", ")", "}", "\n", "self", ".", "imgs", "=", "[", "(", "impath", ",", "self", ".", "class_to_idx", "[", "impath", ".", "split", "(", "'/'", ")", "[", "0", "]", "]", ")", "for", "impath", "in", "self", ".", "imlist", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageLabelFilelist.__getitem__": [[56, 62], ["torch.ImageLabelFilelist.loader", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.ImageLabelFilelist.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "impath", ",", "label", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "impath", ")", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageLabelFilelist.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageFolder.__init__": [[104, 117], ["sorted", "data.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.make_dataset"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "return_paths", "=", "False", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "imgs", "=", "sorted", "(", "make_dataset", "(", "root", ")", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\n", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "return_paths", "=", "return_paths", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageFolder.__getitem__": [[118, 127], ["torch.ImageFolder.loader", "torch.ImageFolder.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "return_paths", ":", "\n", "            ", "return", "img", ",", "path", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.ImageFolder.__len__": [[128, 130], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.default_loader": [[8, 10], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "default_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.default_flist_reader": [[12, 23], ["open", "rf.readlines", "line.strip", "imlist.append"], "function", ["None"], ["", "def", "default_flist_reader", "(", "flist", ")", ":", "\n", "    ", "\"\"\"\n    flist format: impath label\\nimpath label\\n ...(same to caffe's filelist)\n    \"\"\"", "\n", "imlist", "=", "[", "]", "\n", "with", "open", "(", "flist", ",", "'r'", ")", "as", "rf", ":", "\n", "        ", "for", "line", "in", "rf", ".", "readlines", "(", ")", ":", "\n", "            ", "impath", "=", "line", ".", "strip", "(", ")", "\n", "imlist", ".", "append", "(", "impath", ")", "\n", "\n", "", "", "return", "imlist", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.is_image_file": [[85, 87], ["any", "filename.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "return", "any", "(", "filename", ".", "endswith", "(", "extension", ")", "for", "extension", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.make_dataset": [[89, 100], ["os.path.isdir", "os.path.isdir", "os.path.isdir", "sorted", "os.walk", "os.walk", "os.walk", "data.is_image_file", "os.path.join", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.data.is_image_file"], ["", "def", "make_dataset", "(", "dir", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir", ")", ",", "'%s is not a valid directory'", "%", "dir", "\n", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "dir", ")", ")", ":", "\n", "        ", "for", "fname", "in", "fnames", ":", "\n", "            ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "images", ".", "append", "(", "path", ")", "\n", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.__init__": [[269, 276], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__"], ["stream", "=", "ffmpeg", ".", "filter", "(", "stream", ",", "'setpts'", ",", "'2*PTS'", ")", "# 2*PTS is for slower playback", "\n", "stream", "=", "ffmpeg", ".", "output", "(", "stream", ",", "fname", ",", "pix_fmt", "=", "'yuv420p'", ",", "vcodec", "=", "vcodec", ",", "r", "=", "output_fps", ")", "\n", "stream", "=", "ffmpeg", ".", "overwrite_output", "(", "stream", ")", "\n", "process", "=", "ffmpeg", ".", "run_async", "(", "stream", ",", "pipe_stdin", "=", "True", ")", "\n", "for", "frame", "in", "tqdm", "(", "images", ",", "desc", "=", "'writing video to %s'", "%", "fname", ")", ":", "\n", "        ", "process", ".", "stdin", ".", "write", "(", "frame", ".", "astype", "(", "np", ".", "uint8", ")", ".", "tobytes", "(", ")", ")", "\n", "", "process", ".", "stdin", ".", "close", "(", ")", "\n", "process", ".", "wait", "(", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.VggExtract.forward": [[278, 285], ["utils.VggExtract.vgg_layers._modules.items", "module"], "methods", ["None"], ["\n", "", "def", "tensor2ndarray255", "(", "images", ")", ":", "\n", "    ", "images", "=", "torch", ".", "clamp", "(", "images", "*", "0.5", "+", "0.5", ",", "0", ",", "1", ")", "\n", "return", "images", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "*", "255", "\n", "\n", "", "def", "load_vgg16", "(", ")", ":", "\n", "    ", "vgg16", "=", "models", ".", "vgg16", "(", "pretrained", "=", "True", ")", "# relu4_3 layer", "\n", "vgg16", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__init__": [[321, 324], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__enter__": [[325, 327], ["time.time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.Timer.__exit__": [[328, 330], ["print", "time.time"], "methods", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_all_data_loaders": [[46, 76], ["utils.get_data_loader_folder", "utils.get_data_loader_folder", "utils.get_data_loader_folder", "utils.get_data_loader_folder", "utils.get_data_loader_list", "utils.get_data_loader_list", "utils.get_data_loader_list", "utils.get_data_loader_list", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_folder", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_folder", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_folder", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_folder", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_list", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_list", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_list", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_list"], ["if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "\n", "\n", "", "", "", "def", "denormalize", "(", "x", ")", ":", "\n", "    ", "out", "=", "(", "x", "+", "1", ")", "/", "2", "\n", "return", "out", ".", "clamp_", "(", "0", ",", "1", ")", "\n", "\n", "\n", "", "def", "save_image", "(", "x", ",", "ncol", ",", "filename", ")", ":", "\n", "    ", "x", "=", "denormalize", "(", "x", ")", "\n", "vutils", ".", "save_image", "(", "x", ".", "cpu", "(", ")", ",", "filename", ",", "nrow", "=", "ncol", ",", "padding", "=", "0", ")", "\n", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "translate_and_reconstruct", "(", "nets", ",", "args", ",", "x_src", ",", "y_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "s_src", "=", "nets", ".", "style_encoder", "(", "x_src", ",", "y_src", ")", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_fake", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "x_rec", ",", "_", "=", "nets", ".", "generator", "(", "x_fake", ",", "s_src", ",", "masks", "=", "masks", ")", "\n", "x_concat", "=", "[", "x_src", ",", "x_ref", ",", "x_fake", ",", "x_rec", "]", "\n", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", ",", "filename", ")", "\n", "del", "x_concat", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_list": [[78, 90], ["torchvision.transforms.Compose", "data.ImageFilelist", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomCrop", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip"], "function", ["None"], ["\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "translate_using_latent", "(", "nets", ",", "args", ",", "x_src", ",", "y_trg_list", ",", "z_trg_list", ",", "psi", ",", "filename", ")", ":", "\n", "    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "latent_dim", "=", "z_trg_list", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "x_concat", "=", "[", "x_src", "]", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "\n", "for", "i", ",", "y_trg", "in", "enumerate", "(", "y_trg_list", ")", ":", "\n", "        ", "z_many", "=", "torch", ".", "randn", "(", "10000", ",", "latent_dim", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "y_many", "=", "torch", ".", "LongTensor", "(", "10000", ")", ".", "to", "(", "x_src", ".", "device", ")", ".", "fill_", "(", "y_trg", "[", "0", "]", ")", "\n", "s_many", "=", "nets", ".", "mapping_network", "(", "z_many", ",", "y_many", ")", "\n", "s_avg", "=", "torch", ".", "mean", "(", "s_many", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_data_loader_folder": [[91, 103], ["torchvision.transforms.Compose", "data.ImageFolder", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomCrop", "torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip"], "function", ["None"], ["s_avg", "=", "s_avg", ".", "repeat", "(", "N", ",", "1", ")", "\n", "\n", "for", "z_trg", "in", "z_trg_list", ":", "\n", "            ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "s_trg", "=", "torch", ".", "lerp", "(", "s_avg", ",", "s_trg", ",", "psi", ")", "\n", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_trg", ",", "masks", "=", "masks", ")", "\n", "x_concat", "+=", "[", "x_fake", "]", "\n", "\n", "", "", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", ",", "filename", ")", "\n", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_config": [[105, 108], ["open", "yaml.safe_load"], "function", ["None"], ["    ", "N", ",", "C", ",", "H", ",", "W", "=", "x_src", ".", "size", "(", ")", "\n", "wb", "=", "torch", ".", "ones", "(", "1", ",", "C", ",", "H", ",", "W", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "x_src_with_wb", "=", "torch", ".", "cat", "(", "[", "wb", ",", "x_src", "]", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.eformat": [[110, 115], ["s.split", "int"], "function", ["None"], ["s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "s_ref_list", "=", "s_ref", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", "\n", "x_concat", "=", "[", "x_src_with_wb", "]", "\n", "for", "i", ",", "s_ref", "in", "enumerate", "(", "s_ref_list", ")", ":", "\n", "        ", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "x_fake_with_ref", "=", "torch", ".", "cat", "(", "[", "x_ref", "[", "i", ":", "i", "+", "1", "]", ",", "x_fake", "]", ",", "dim", "=", "0", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.__write_images": [[117, 122], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.make_grid", "torchvision.save_image", "images.expand"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.utils.save_image"], ["\n", "", "x_concat", "=", "torch", ".", "cat", "(", "x_concat", ",", "dim", "=", "0", ")", "\n", "save_image", "(", "x_concat", ",", "N", "+", "1", ",", "filename", ")", "\n", "del", "x_concat", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_2images": [[124, 128], ["len", "utils.__write_images", "utils.__write_images"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.__write_images", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.__write_images"], ["def", "debug_image", "(", "nets", ",", "args", ",", "inputs", ",", "step", ")", ":", "\n", "    ", "x_src", ",", "y_src", "=", "inputs", ".", "x_src", ",", "inputs", ".", "y_src", "\n", "x_ref", ",", "y_ref", "=", "inputs", ".", "x_ref", ",", "inputs", ".", "y_ref", "\n", "\n", "device", "=", "inputs", ".", "x_src", ".", "device", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.prepare_sub_folder": [[130, 140], ["os.path.join", "os.path.join", "os.path.exists", "print", "os.makedirs", "os.path.exists", "print", "os.makedirs"], "function", ["None"], ["\n", "# translate and reconstruct (reference-guided)", "\n", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_cycle_consistency.jpg'", "%", "(", "step", ")", ")", "\n", "translate_and_reconstruct", "(", "nets", ",", "args", ",", "x_src", ",", "y_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", "\n", "\n", "# latent-guided image synthesis", "\n", "y_trg_list", "=", "[", "torch", ".", "tensor", "(", "y", ")", ".", "repeat", "(", "N", ")", ".", "to", "(", "device", ")", "\n", "for", "y", "in", "range", "(", "min", "(", "args", ".", "num_domains", ",", "5", ")", ")", "]", "\n", "z_trg_list", "=", "torch", ".", "randn", "(", "args", ".", "num_outs_per_domain", ",", "1", ",", "args", ".", "latent_dim", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "for", "psi", "in", "[", "0.5", ",", "0.7", ",", "1.0", "]", ":", "\n", "        ", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_latent_psi_%.1f.jpg'", "%", "(", "step", ",", "psi", ")", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_one_row_html": [[142, 151], ["html_file.write", "html_file.write", "img_filename.split"], "function", ["None"], ["\n", "# reference-guided image synthesis", "\n", "", "filename", "=", "ospj", "(", "args", ".", "sample_dir", ",", "'%06d_reference.jpg'", "%", "(", "step", ")", ")", "\n", "translate_using_reference", "(", "nets", ",", "args", ",", "x_src", ",", "x_ref", ",", "y_ref", ",", "filename", ")", "\n", "\n", "\n", "# ======================= #", "\n", "# Video-related functions #", "\n", "# ======================= #", "\n", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_html": [[153, 175], ["open", "open.write", "open.write", "utils.write_one_row_html", "utils.write_one_row_html", "range", "open.write", "open.close", "os.path.basename", "utils.write_one_row_html", "utils.write_one_row_html", "utils.write_one_row_html", "utils.write_one_row_html"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_one_row_html", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_one_row_html", "home.repos.pwc.inspect_result.noabrazilay_missgan.datasets.scraper_openlibrary.OpenLibHelper.close", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_one_row_html", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_one_row_html", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_one_row_html", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_one_row_html"], ["", "def", "sigmoid", "(", "x", ",", "w", "=", "1", ")", ":", "\n", "    ", "return", "1.", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "w", "*", "x", ")", ")", "\n", "\n", "\n", "", "def", "get_alphas", "(", "start", "=", "-", "5", ",", "end", "=", "5", ",", "step", "=", "0.5", ",", "len_tail", "=", "10", ")", ":", "\n", "    ", "return", "[", "0", "]", "+", "[", "sigmoid", "(", "alpha", ")", "for", "alpha", "in", "np", ".", "arange", "(", "start", ",", "end", ",", "step", ")", "]", "+", "[", "1", "]", "*", "len_tail", "\n", "\n", "\n", "", "def", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", ":", "\n", "    ", "''' returns T x C x H x W '''", "\n", "B", "=", "x_src", ".", "size", "(", "0", ")", "\n", "frames", "=", "[", "]", "\n", "masks", "=", "nets", ".", "fan", ".", "get_heatmap", "(", "x_src", ")", "if", "args", ".", "w_hpf", ">", "0", "else", "None", "\n", "alphas", "=", "get_alphas", "(", ")", "\n", "\n", "for", "alpha", "in", "alphas", ":", "\n", "        ", "s_ref", "=", "torch", ".", "lerp", "(", "s_prev", ",", "s_next", ",", "alpha", ")", "\n", "x_fake", ",", "_", "=", "nets", ".", "generator", "(", "x_src", ",", "s_ref", ",", "masks", "=", "masks", ")", "\n", "entries", "=", "torch", ".", "cat", "(", "[", "x_src", ".", "cpu", "(", ")", ",", "x_fake", ".", "cpu", "(", ")", "]", ",", "dim", "=", "2", ")", "\n", "frame", "=", "torchvision", ".", "utils", ".", "make_grid", "(", "entries", ",", "nrow", "=", "B", ",", "padding", "=", "0", ",", "pad_value", "=", "-", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "frames", ".", "append", "(", "frame", ")", "\n", "", "frames", "=", "torch", ".", "cat", "(", "frames", ")", "\n", "return", "frames", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.write_loss": [[177, 182], ["train_writer.add_scalar", "dir", "getattr", "callable", "attr.startswith", "getattr"], "function", ["None"], ["\n", "", "def", "slide", "(", "entries", ",", "margin", "=", "32", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.slerp": [[184, 193], ["numpy.arccos", "numpy.sin", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.sin", "numpy.sin"], "function", ["None"], ["\n", "_", ",", "C", ",", "H", ",", "W", "=", "entries", "[", "0", "]", ".", "shape", "\n", "alphas", "=", "get_alphas", "(", ")", "\n", "T", "=", "len", "(", "alphas", ")", "# number of frames", "\n", "\n", "canvas", "=", "-", "torch", ".", "ones", "(", "(", "T", ",", "C", ",", "H", "*", "2", ",", "W", "+", "margin", ")", ")", "\n", "merged", "=", "torch", ".", "cat", "(", "entries", ",", "dim", "=", "2", ")", "# (1, 3, 512, 256)", "\n", "for", "t", ",", "alpha", "in", "enumerate", "(", "alphas", ")", ":", "\n", "        ", "top", "=", "int", "(", "H", "*", "(", "1", "-", "alpha", ")", ")", "# top, bottom for canvas", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_slerp_interp": [[195, 211], ["numpy.empty", "range", "numpy.random.randn", "numpy.random.randn", "numpy.linspace", "numpy.array", "numpy.vstack", "utils.slerp"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.slerp"], ["m_top", "=", "0", "# top, bottom for merged", "\n", "m_bottom", "=", "2", "*", "H", "-", "top", "\n", "canvas", "[", "t", ",", ":", ",", "top", ":", "bottom", ",", ":", "W", "]", "=", "merged", "[", ":", ",", ":", ",", "m_top", ":", "m_bottom", ",", ":", "]", "\n", "", "return", "canvas", "\n", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "video_ref", "(", "nets", ",", "args", ",", "x_src", ",", "x_ref", ",", "y_ref", ",", "fname", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "s_ref", "=", "nets", ".", "style_encoder", "(", "x_ref", ",", "y_ref", ")", "\n", "s_prev", "=", "None", "\n", "for", "data_next", "in", "tqdm", "(", "zip", "(", "x_ref", ",", "y_ref", ",", "s_ref", ")", ",", "'video_ref'", ",", "len", "(", "x_ref", ")", ")", ":", "\n", "        ", "x_next", ",", "y_next", ",", "s_next", "=", "[", "d", ".", "unsqueeze", "(", "0", ")", "for", "d", "in", "data_next", "]", "\n", "if", "s_prev", "is", "None", ":", "\n", "            ", "x_prev", ",", "y_prev", ",", "s_prev", "=", "x_next", ",", "y_next", ",", "s_next", "\n", "continue", "\n", "", "if", "y_prev", "!=", "y_next", ":", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_model_list": [[214, 224], ["gen_models.sort", "os.path.exists", "os.path.join", "os.listdir", "os.path.isfile", "os.path.join"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.data_loader.listdir"], ["\n", "", "interpolated", "=", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", "\n", "entries", "=", "[", "x_prev", ",", "x_next", "]", "\n", "slided", "=", "slide", "(", "entries", ")", "# (T, C, 256*2, 256)", "\n", "frames", "=", "torch", ".", "cat", "(", "[", "slided", ",", "interpolated", "]", ",", "dim", "=", "3", ")", ".", "cpu", "(", ")", "# (T, C, 256*2, 256*(batch+1))", "\n", "video", ".", "append", "(", "frames", ")", "\n", "x_prev", ",", "y_prev", ",", "s_prev", "=", "x_next", ",", "y_next", ",", "s_next", "\n", "\n", "# append last frame 10 time", "\n", "", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "video", ".", "append", "(", "frames", "[", "-", "1", ":", "]", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.load_vgg16": [[226, 243], ["torchvision.vgg16", "models.vgg16.cuda"], "function", ["None"], ["save_video", "(", "fname", ",", "video", ")", "\n", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "video_latent", "(", "nets", ",", "args", ",", "x_src", ",", "y_list", ",", "z_list", ",", "psi", ",", "fname", ")", ":", "\n", "    ", "latent_dim", "=", "z_list", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "s_list", "=", "[", "]", "\n", "for", "i", ",", "y_trg", "in", "enumerate", "(", "y_list", ")", ":", "\n", "        ", "z_many", "=", "torch", ".", "randn", "(", "10000", ",", "latent_dim", ")", ".", "to", "(", "x_src", ".", "device", ")", "\n", "y_many", "=", "torch", ".", "LongTensor", "(", "10000", ")", ".", "to", "(", "x_src", ".", "device", ")", ".", "fill_", "(", "y_trg", "[", "0", "]", ")", "\n", "s_many", "=", "nets", ".", "mapping_network", "(", "z_many", ",", "y_many", ")", "\n", "s_avg", "=", "torch", ".", "mean", "(", "s_many", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "s_avg", "=", "s_avg", ".", "repeat", "(", "x_src", ".", "size", "(", "0", ")", ",", "1", ")", "\n", "\n", "for", "z_trg", "in", "z_list", ":", "\n", "            ", "s_trg", "=", "nets", ".", "mapping_network", "(", "z_trg", ",", "y_trg", ")", "\n", "s_trg", "=", "torch", ".", "lerp", "(", "s_avg", ",", "s_trg", ",", "psi", ")", "\n", "s_list", ".", "append", "(", "s_trg", ")", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.load_inception": [[244, 254], ["torch.load", "torch.load", "torch.load", "torch.load", "inception_v3", "torch.Linear", "inception_v3.load_state_dict", "inception_v3.parameters", "state_dict[].size"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.checkpoint.CheckpointIO.load"], ["\n", "", "", "s_prev", "=", "None", "\n", "video", "=", "[", "]", "\n", "# fetch reference images", "\n", "for", "idx_ref", ",", "s_next", "in", "enumerate", "(", "tqdm", "(", "s_list", ",", "'video_latent'", ",", "len", "(", "s_list", ")", ")", ")", ":", "\n", "        ", "if", "s_prev", "is", "None", ":", "\n", "            ", "s_prev", "=", "s_next", "\n", "continue", "\n", "", "if", "idx_ref", "%", "len", "(", "z_list", ")", "==", "0", ":", "\n", "            ", "s_prev", "=", "s_next", "\n", "continue", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.vgg_preprocess": [[255, 266], ["type", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "type.cuda", "batch.sub.sub", "torch.autograd.Variable", "type.", "batch.sub.data.size"], "function", ["None"], ["", "frames", "=", "interpolate", "(", "nets", ",", "args", ",", "x_src", ",", "s_prev", ",", "s_next", ")", ".", "cpu", "(", ")", "\n", "video", ".", "append", "(", "frames", ")", "\n", "s_prev", "=", "s_next", "\n", "", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "        ", "video", ".", "append", "(", "frames", "[", "-", "1", ":", "]", ")", "\n", "", "video", "=", "tensor2ndarray255", "(", "torch", ".", "cat", "(", "video", ")", ")", "\n", "save_video", "(", "fname", ",", "video", ")", "\n", "\n", "\n", "", "def", "save_video", "(", "fname", ",", "images", ",", "output_fps", "=", "30", ",", "vcodec", "=", "'libx264'", ",", "filters", "=", "''", ")", ":", "\n", "    ", "assert", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ",", "\"images should be np.array: NHWC\"", "\n", "num_frames", ",", "height", ",", "width", ",", "channels", "=", "images", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.get_scheduler": [[286, 295], ["torch.optim.lr_scheduler.StepLR", "NotImplementedError"], "function", ["None"], ["return", "vgg16", "\n", "\n", "", "def", "vgg_preprocess", "(", "batch", ")", ":", "\n", "    ", "tensortype", "=", "type", "(", "batch", ".", "data", ")", "\n", "(", "r", ",", "g", ",", "b", ")", "=", "torch", ".", "chunk", "(", "batch", ",", "3", ",", "dim", "=", "1", ")", "\n", "batch", "=", "torch", ".", "cat", "(", "(", "b", ",", "g", ",", "r", ")", ",", "dim", "=", "1", ")", "# convert RGB to BGR", "\n", "batch", "=", "(", "batch", "+", "1", ")", "*", "255", "*", "0.5", "# [-1, 1] -> [0, 255]", "\n", "mean", "=", "tensortype", "(", "batch", ".", "data", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "mean", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "103.939", "\n", "mean", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "116.779", "\n"]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.weights_init": [[297, 318], ["hasattr", "torch.normal_", "hasattr", "torch.constant_", "classname.find", "classname.find", "torch.xavier_normal_", "torch.kaiming_normal_", "math.sqrt", "torch.orthogonal_", "math.sqrt"], "function", ["None"], ["batch", "=", "batch", ".", "sub", "(", "Variable", "(", "mean", ")", ")", "# subtract mean", "\n", "return", "batch", "\n", "\n", "\n", "", "def", "abs_criterion", "(", "in_", ",", "target", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "in_", "-", "target", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.pytorch03_to_pytorch04": [[332, 412], ["dict", "utils.pytorch03_to_pytorch04.__conversion_core"], "function", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.proj": [[414, 416], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "y.t", "x.t"], "function", ["None"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.gram_schmidt": [[418, 422], ["utils.proj"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.proj"], []], "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.power_iteration": [[424, 447], ["enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.normalize", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "utils.gram_schmidt", "W.t", "utils.gram_schmidt", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "F.normalize.t", "W.t"], "function", ["home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.normalize", "home.repos.pwc.inspect_result.noabrazilay_missgan.core.wing.normalize", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.gram_schmidt", "home.repos.pwc.inspect_result.noabrazilay_missgan.MUNIT.utils.gram_schmidt"], []]}