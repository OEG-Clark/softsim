{"home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.denoise_task.denoise_data": [[37, 54], ["numpy.random.randint", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "numpy.concatenate().astype", "numpy.concatenate().astype", "numpy.random.choice", "np.random.choice.sort", "numpy.ones", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["def", "denoise_data", "(", "T", ",", "n_data", ",", "n_sequence", ")", ":", "\n", "    ", "seq", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "high", "=", "10", ",", "size", "=", "(", "n_data", ",", "n_sequence", ")", ")", "\n", "zeros1", "=", "np", ".", "zeros", "(", "(", "n_data", ",", "T", "+", "n_sequence", "-", "1", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_data", ")", ":", "\n", "        ", "ind", "=", "np", ".", "random", ".", "choice", "(", "T", "+", "n_sequence", "-", "1", ",", "n_sequence", ")", "\n", "ind", ".", "sort", "(", ")", "\n", "zeros1", "[", "i", "]", "[", "ind", "]", "=", "seq", "[", "i", "]", "\n", "\n", "", "zeros2", "=", "np", ".", "zeros", "(", "(", "n_data", ",", "T", "+", "n_sequence", ")", ")", "\n", "marker", "=", "10", "*", "np", ".", "ones", "(", "(", "n_data", ",", "1", ")", ")", "\n", "zeros3", "=", "np", ".", "zeros", "(", "(", "n_data", ",", "n_sequence", ")", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "zeros1", ",", "marker", ",", "zeros3", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "'int32'", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "zeros2", ",", "seq", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "'int64'", ")", "\n", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.denoise_task.main": [[56, 154], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.unstack", "tensorflow.stack", "tensorflow.nn.bias_add", "tensorflow.reduce_mean", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.global_variables_initializer", "print", "tensorflow.ConfigProto", "tensorflow.nn.rnn_cell.BasicLSTMCell", "tensorflow.nn.dynamic_rnn", "numpy.sqrt", "numpy.sqrt", "tensorflow.transpose", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.argmax", "tensorflow.cast", "tensorflow.Session", "denoise_task.denoise_data", "denoise_task.denoise_data", "sess.run", "print", "sess.run", "sess.run", "print", "goru.GORUCell", "tensorflow.nn.dynamic_rnn", "tensorflow.random_uniform_initializer", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.train.RMSPropOptimizer", "numpy.log", "str", "sess.run", "sess.run", "print", "str"], "function", ["home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.denoise_task.denoise_data", "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.denoise_task.denoise_data"], ["", "def", "main", "(", "_", ")", ":", "\n", "\n", "# --- Set data params ----------------", "\n", "    ", "n_input", "=", "11", "\n", "n_output", "=", "10", "\n", "n_sequence", "=", "10", "\n", "n_train", "=", "FLAGS", ".", "iter", "*", "FLAGS", ".", "batch_size", "\n", "n_test", "=", "FLAGS", ".", "batch_size", "\n", "\n", "n_input", "=", "10", "\n", "n_steps", "=", "FLAGS", ".", "T", "+", "20", "\n", "n_classes", "=", "10", "\n", "\n", "# --- Create graph and compute gradients ----------------------", "\n", "x", "=", "tf", ".", "placeholder", "(", "\"int32\"", ",", "[", "None", ",", "n_steps", "]", ")", "\n", "y", "=", "tf", ".", "placeholder", "(", "\"int64\"", ",", "[", "None", ",", "n_steps", "]", ")", "\n", "\n", "input_data", "=", "tf", ".", "one_hot", "(", "x", ",", "n_input", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# --- Input to hidden layer ----------------------", "\n", "if", "FLAGS", ".", "model", "==", "\"lstm\"", ":", "\n", "        ", "cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "\n", "FLAGS", ".", "hidden_size", ",", "state_is_tuple", "=", "True", ",", "forget_bias", "=", "1", ")", "\n", "hidden_out", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", ",", "input_data", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "elif", "FLAGS", ".", "model", "==", "\"goru\"", ":", "\n", "        ", "cell", "=", "GORUCell", "(", "FLAGS", ".", "hidden_size", ",", "FLAGS", ".", "capacity", ",", "\n", "FLAGS", ".", "fft", ")", "\n", "hidden_out", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", ",", "input_data", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# --- Hidden Layer to Output ----------------------", "\n", "", "V_init_val", "=", "np", ".", "sqrt", "(", "6.", ")", "/", "np", ".", "sqrt", "(", "n_output", "+", "n_input", ")", "\n", "\n", "V_weights", "=", "tf", ".", "get_variable", "(", "\"V_weights\"", ",", "shape", "=", "[", "FLAGS", ".", "hidden_size", ",", "n_classes", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "V_init_val", ",", "V_init_val", ")", ")", "\n", "V_bias", "=", "tf", ".", "get_variable", "(", "\"V_bias\"", ",", "shape", "=", "[", "n_classes", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.01", ")", ")", "\n", "\n", "hidden_out_list", "=", "tf", ".", "unstack", "(", "hidden_out", ",", "axis", "=", "1", ")", "\n", "temp_out", "=", "tf", ".", "stack", "(", "[", "tf", ".", "matmul", "(", "i", ",", "V_weights", ")", "for", "i", "in", "hidden_out_list", "]", ")", "\n", "output_data", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "transpose", "(", "temp_out", ",", "[", "1", ",", "0", ",", "2", "]", ")", ",", "V_bias", ")", "\n", "\n", "# --- evaluate process ----------------------", "\n", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "output_data", ",", "labels", "=", "y", ")", ")", "\n", "correct_pred", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "output_data", ",", "2", ")", ",", "y", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_pred", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "# --- Initialization ----------------------", "\n", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "\n", "learning_rate", "=", "0.001", ",", "decay", "=", "0.9", ")", ".", "minimize", "(", "cost", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "\n", "# --- baseline ----------------------", "\n", "baseline", "=", "np", ".", "log", "(", "9", ")", "*", "10", "/", "(", "FLAGS", ".", "T", "+", "20", ")", "\n", "print", "(", "\"Baseline is \"", "+", "str", "(", "baseline", ")", ")", "\n", "\n", "# --- Training Loop ----------------------", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "#config.gpu_options.per_process_gpu_memory_fraction = 0.2", "\n", "config", ".", "log_device_placement", "=", "False", "\n", "config", ".", "allow_soft_placement", "=", "False", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "\n", "# --- Create data --------------------", "\n", "\n", "        ", "train_x", ",", "train_y", "=", "denoise_data", "(", "FLAGS", ".", "T", ",", "n_train", ",", "n_sequence", ")", "\n", "test_x", ",", "test_y", "=", "denoise_data", "(", "FLAGS", ".", "T", ",", "n_test", ",", "n_sequence", ")", "\n", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "step", "=", "0", "\n", "\n", "while", "step", "<", "FLAGS", ".", "iter", ":", "\n", "            ", "batch_x", "=", "train_x", "[", "\n", "step", "*", "FLAGS", ".", "batch_size", ":", "(", "step", "+", "1", ")", "*", "FLAGS", ".", "batch_size", "]", "\n", "batch_y", "=", "train_y", "[", "\n", "step", "*", "FLAGS", ".", "batch_size", ":", "(", "step", "+", "1", ")", "*", "FLAGS", ".", "batch_size", "]", "\n", "\n", "sess", ".", "run", "(", "optimizer", ",", "feed_dict", "=", "{", "x", ":", "batch_x", ",", "y", ":", "batch_y", "}", ")", "\n", "\n", "acc", ",", "loss", "=", "sess", ".", "run", "(", "[", "accuracy", ",", "cost", "]", ",", "feed_dict", "=", "{", "\n", "x", ":", "batch_x", ",", "y", ":", "batch_y", "}", ")", "\n", "\n", "print", "(", "\" Iter \"", "+", "str", "(", "step", ")", "+", "\", Minibatch Loss= \"", "+", "\n", "\"{:.6f}\"", ".", "format", "(", "loss", ")", "+", "\", Training Accuracy= \"", "+", "\"{:.5f}\"", ".", "format", "(", "acc", ")", ")", "\n", "\n", "step", "+=", "1", "\n", "\n", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "\n", "# --- test ----------------------", "\n", "\n", "test_acc", "=", "sess", ".", "run", "(", "accuracy", ",", "feed_dict", "=", "{", "x", ":", "test_x", ",", "y", ":", "test_y", "}", ")", "\n", "test_loss", "=", "sess", ".", "run", "(", "cost", ",", "feed_dict", "=", "{", "x", ":", "test_x", ",", "y", ":", "test_y", "}", ")", "\n", "print", "(", "\"Test result: Loss= \"", "+", "\n", "\"{:.6f}\"", ".", "format", "(", "test_loss", ")", "+", "\", Accuracy= \"", "+", "\"{:.5f}\"", ".", "format", "(", "test_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.GORUCell.__init__": [[173, 217], ["tensorflow.python.ops.rnn_cell_impl.RNNCell.__init__", "ValueError", "int", "goru.fft_param", "goru.tunable_param", "ValueError", "ValueError", "ValueError", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.GORUCell.__init__", "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.fft_param", "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.tunable_param"], ["def", "__init__", "(", "self", ",", "\n", "num_units", ",", "\n", "capacity", "=", "2", ",", "\n", "fft", "=", "True", ",", "\n", "activation", "=", "modrelu", ",", "\n", "reuse", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initializes the GORU cell.\n        Args:\n          num_units: int, The number of units in the GORU cell.\n          capacity: int, The capacity of the orthogonal matrix for tunable\n            case.\n          fft: bool, default false, whether to use fft style \n          architecture or tunable style.\n        \"\"\"", "\n", "\n", "super", "(", "GORUCell", ",", "self", ")", ".", "__init__", "(", "_reuse", "=", "reuse", ")", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_fft", "=", "fft", "\n", "\n", "if", "self", ".", "_capacity", ">", "self", ".", "_num_units", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Do not set capacity larger than hidden size, it is redundant\"", ")", "\n", "\n", "", "if", "self", ".", "_fft", ":", "\n", "            ", "if", "math", ".", "log", "(", "self", ".", "_num_units", ",", "2", ")", "%", "1", "!=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"FFT style only supports power of 2 of hidden size\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "_num_units", "%", "2", "!=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Tunable style only supports even number of hidden size\"", ")", "\n", "\n", "", "if", "self", ".", "_capacity", "%", "2", "!=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Tunable style only supports even number of capacity\"", ")", "\n", "\n", "", "", "if", "self", ".", "_fft", ":", "\n", "            ", "self", ".", "_capacity", "=", "int", "(", "math", ".", "log", "(", "self", ".", "_num_units", ",", "2", ")", ")", "\n", "self", ".", "_v1", ",", "self", ".", "_v2", ",", "self", ".", "_ind", "=", "fft_param", "(", "self", ".", "_num_units", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_v1", ",", "self", ".", "_v2", ",", "self", ".", "_ind", "=", "tunable_param", "(", "\n", "self", ".", "_num_units", ",", "self", ".", "_capacity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.GORUCell.state_size": [[218, 221], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.GORUCell.output_size": [[222, 225], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_units", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.GORUCell.loop": [[226, 233], ["range", "tensorflow.gather"], "methods", ["None"], ["", "def", "loop", "(", "self", ",", "h", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "_capacity", ")", ":", "\n", "            ", "diag", "=", "h", "*", "self", ".", "_v1", "[", "i", ",", ":", "]", "\n", "off", "=", "h", "*", "self", ".", "_v2", "[", "i", ",", ":", "]", "\n", "h", "=", "diag", "+", "tf", ".", "gather", "(", "off", ",", "self", ".", "_ind", "[", "i", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.GORUCell.__call__": [[234, 272], ["tensorflow.variable_scope", "tensorflow.random_uniform_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.split", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.sigmoid", "tensorflow.sigmoid", "goru.GORUCell.loop", "goru.GORUCell._activation", "inputs.get_shape", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.GORUCell.loop"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"goru_cell\"", ")", ":", "\n", "\n", "            ", "inputs_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", "\n", "\n", "input_matrix_init", "=", "tf", ".", "random_uniform_initializer", "(", "-", "0.01", ",", "0.01", ")", "\n", "bias_init", "=", "tf", ".", "constant_initializer", "(", "2.", ")", "\n", "mod_bias_init", "=", "tf", ".", "constant_initializer", "(", "0.01", ")", "\n", "\n", "U", "=", "tf", ".", "get_variable", "(", "\"U\"", ",", "[", "inputs_size", ",", "self", ".", "_num_units", "*", "3", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "input_matrix_init", ")", "\n", "Ux", "=", "tf", ".", "matmul", "(", "inputs", ",", "U", ")", "\n", "U_cx", ",", "U_rx", ",", "U_gx", "=", "tf", ".", "split", "(", "Ux", ",", "3", ",", "axis", "=", "1", ")", "\n", "\n", "W_r", "=", "tf", ".", "get_variable", "(", "\"W_r\"", ",", "[", "\n", "self", ".", "_num_units", ",", "self", ".", "_num_units", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "input_matrix_init", ")", "\n", "W_g", "=", "tf", ".", "get_variable", "(", "\"W_g\"", ",", "[", "\n", "self", ".", "_num_units", ",", "self", ".", "_num_units", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "input_matrix_init", ")", "\n", "W_rh", "=", "tf", ".", "matmul", "(", "state", ",", "W_r", ")", "\n", "W_gh", "=", "tf", ".", "matmul", "(", "state", ",", "W_g", ")", "\n", "\n", "bias_r", "=", "tf", ".", "get_variable", "(", "\n", "\"bias_r\"", ",", "[", "self", ".", "_num_units", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "bias_init", ")", "\n", "bias_g", "=", "tf", ".", "get_variable", "(", "\n", "\"bias_g\"", ",", "[", "self", ".", "_num_units", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "bias_c", "=", "tf", ".", "get_variable", "(", "\n", "\"bias_c\"", ",", "[", "self", ".", "_num_units", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "mod_bias_init", ")", "\n", "\n", "r_tmp", "=", "U_rx", "+", "W_rh", "+", "bias_r", "\n", "g_tmp", "=", "U_gx", "+", "W_gh", "+", "bias_g", "\n", "r", "=", "tf", ".", "sigmoid", "(", "r_tmp", ")", "\n", "g", "=", "tf", ".", "sigmoid", "(", "g_tmp", ")", "\n", "\n", "Unitaryh", "=", "self", ".", "loop", "(", "state", ")", "\n", "c", "=", "self", ".", "_activation", "(", "r", "*", "Unitaryh", "+", "U_cx", ",", "bias_c", ")", "\n", "new_state", "=", "tf", ".", "multiply", "(", "g", ",", "state", ")", "+", "tf", ".", "multiply", "(", "1", "-", "g", ",", "c", ")", "\n", "\n", "", "return", "new_state", ",", "new_state", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.modrelu": [[11, 22], ["tensorflow.nn.relu", "tensorflow.sign", "tensorflow.abs"], "function", ["None"], ["def", "modrelu", "(", "inputs", ",", "bias", ")", ":", "\n", "    ", "\"\"\"\n    modReLU activation function\n    \"\"\"", "\n", "\n", "norm", "=", "tf", ".", "abs", "(", "inputs", ")", "+", "0.001", "\n", "biased_norm", "=", "norm", "+", "bias", "\n", "magnitude", "=", "tf", ".", "nn", ".", "relu", "(", "biased_norm", ")", "\n", "phase", "=", "tf", ".", "sign", "(", "inputs", ")", "\n", "\n", "return", "phase", "*", "magnitude", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.generate_index_tunable": [[24, 65], ["list", "list", "range", "range", "ind4.append", "range", "ind4.append", "range", "range", "int", "int", "ind3.append", "ind3.append", "ind4.append", "ind4.append", "int", "int", "int"], "function", ["None"], ["", "def", "generate_index_tunable", "(", "s", ",", "L", ")", ":", "\n", "    ", "\"\"\"\n    generate the index lists for goru to prepare orthogonal matrices \n    and perform efficient rotations\n    This function works for tunable case\n    \"\"\"", "\n", "ind1", "=", "list", "(", "range", "(", "s", ")", ")", "\n", "ind2", "=", "list", "(", "range", "(", "s", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "s", ")", ":", "\n", "        ", "if", "i", "%", "2", "==", "1", ":", "\n", "            ", "ind1", "[", "i", "]", "=", "ind1", "[", "i", "]", "-", "1", "\n", "if", "i", "==", "s", "-", "1", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "ind2", "[", "i", "]", "=", "ind2", "[", "i", "]", "+", "1", "\n", "", "", "else", ":", "\n", "            ", "ind1", "[", "i", "]", "=", "ind1", "[", "i", "]", "+", "1", "\n", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "ind2", "[", "i", "]", "=", "ind2", "[", "i", "]", "-", "1", "\n", "\n", "", "", "", "ind_exe", "=", "[", "ind1", ",", "ind2", "]", "*", "int", "(", "L", "/", "2", ")", "\n", "\n", "ind3", "=", "[", "]", "\n", "ind4", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "int", "(", "s", "/", "2", ")", ")", ":", "\n", "        ", "ind3", ".", "append", "(", "i", ")", "\n", "ind3", ".", "append", "(", "i", "+", "int", "(", "s", "/", "2", ")", ")", "\n", "\n", "", "ind4", ".", "append", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "s", "/", "2", ")", "-", "1", ")", ":", "\n", "        ", "ind4", ".", "append", "(", "i", "+", "1", ")", "\n", "ind4", ".", "append", "(", "i", "+", "int", "(", "s", "/", "2", ")", ")", "\n", "", "ind4", ".", "append", "(", "s", "-", "1", ")", "\n", "\n", "ind_param", "=", "[", "ind3", ",", "ind4", "]", "\n", "\n", "return", "ind_exe", ",", "ind_param", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.generate_index_fft": [[67, 100], ["goru.generate_index_fft.ind_s"], "function", ["None"], ["", "def", "generate_index_fft", "(", "s", ")", ":", "\n", "    ", "\"\"\"\n    generate the index lists for goru to prepare orthogonal matrices \n    and perform efficient rotations\n    This function works for fft case\n    \"\"\"", "\n", "def", "ind_s", "(", "k", ")", ":", "\n", "        ", "if", "k", "==", "0", ":", "\n", "            ", "return", "np", ".", "array", "(", "[", "[", "1", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "temp", "=", "np", ".", "array", "(", "range", "(", "2", "**", "k", ")", ")", "\n", "list0", "=", "[", "np", ".", "append", "(", "temp", "+", "2", "**", "k", ",", "temp", ")", "]", "\n", "list1", "=", "ind_s", "(", "k", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "                ", "list0", ".", "append", "(", "np", ".", "append", "(", "list1", "[", "i", "]", ",", "list1", "[", "i", "]", "+", "2", "**", "k", ")", ")", "\n", "", "return", "list0", "\n", "\n", "", "", "t", "=", "ind_s", "(", "int", "(", "math", ".", "log", "(", "s", "/", "2", ",", "2", ")", ")", ")", "\n", "\n", "ind_exe", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "math", ".", "log", "(", "s", ",", "2", ")", ")", ")", ":", "\n", "        ", "ind_exe", ".", "append", "(", "tf", ".", "constant", "(", "t", "[", "i", "]", ")", ")", "\n", "\n", "", "ind_param", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "math", ".", "log", "(", "s", ",", "2", ")", ")", ")", ":", "\n", "        ", "ind", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "for", "j", "in", "range", "(", "2", "**", "i", ")", ":", "\n", "            ", "ind", "=", "np", ".", "append", "(", "ind", ",", "np", ".", "array", "(", "\n", "range", "(", "0", ",", "s", ",", "2", "**", "i", ")", ")", "+", "j", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "ind_param", ".", "append", "(", "tf", ".", "constant", "(", "ind", ")", ")", "\n", "\n", "", "return", "ind_exe", ",", "ind_param", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.fft_param": [[102, 123], ["tensorflow.random_uniform_initializer", "int", "tensorflow.get_variable", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "goru.generate_index_fft", "tensorflow.stack", "tensorflow.stack", "math.log", "tensorflow.gather", "tensorflow.gather", "range", "range"], "function", ["home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.generate_index_fft"], ["", "def", "fft_param", "(", "num_units", ")", ":", "\n", "\n", "    ", "phase_init", "=", "tf", ".", "random_uniform_initializer", "(", "-", "3.14", ",", "3.14", ")", "\n", "capacity", "=", "int", "(", "math", ".", "log", "(", "num_units", ",", "2", ")", ")", "\n", "\n", "theta", "=", "tf", ".", "get_variable", "(", "\"theta\"", ",", "[", "capacity", ",", "num_units", "//", "2", "]", ",", "\n", "initializer", "=", "phase_init", ")", "\n", "cos_theta", "=", "tf", ".", "cos", "(", "theta", ")", "\n", "sin_theta", "=", "tf", ".", "sin", "(", "theta", ")", "\n", "\n", "cos_list", "=", "tf", ".", "concat", "(", "[", "cos_theta", ",", "cos_theta", "]", ",", "axis", "=", "1", ")", "\n", "sin_list", "=", "tf", ".", "concat", "(", "[", "sin_theta", ",", "-", "sin_theta", "]", ",", "axis", "=", "1", ")", "\n", "\n", "ind_exe", ",", "index_fft", "=", "generate_index_fft", "(", "num_units", ")", "\n", "\n", "v1", "=", "tf", ".", "stack", "(", "[", "tf", ".", "gather", "(", "cos_list", "[", "i", ",", ":", "]", ",", "index_fft", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "capacity", ")", "]", ")", "\n", "v2", "=", "tf", ".", "stack", "(", "[", "tf", ".", "gather", "(", "sin_list", "[", "i", ",", ":", "]", ",", "index_fft", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "capacity", ")", "]", ")", "\n", "\n", "return", "v1", ",", "v2", ",", "ind_exe", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.tunable_param": [[125, 162], ["int", "tensorflow.random_uniform_initializer", "tensorflow.get_variable", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "tensorflow.get_variable", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "goru.generate_index_tunable", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.concat", "tensorflow.ones", "tensorflow.ones", "tensorflow.zeros", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.goru.generate_index_tunable"], ["", "def", "tunable_param", "(", "num_units", ",", "capacity", ")", ":", "\n", "\n", "    ", "capacity_A", "=", "int", "(", "capacity", "//", "2", ")", "\n", "capacity_B", "=", "capacity", "-", "capacity_A", "\n", "phase_init", "=", "tf", ".", "random_uniform_initializer", "(", "-", "3.14", ",", "3.14", ")", "\n", "\n", "theta_A", "=", "tf", ".", "get_variable", "(", "\"theta_A\"", ",", "[", "capacity_A", ",", "num_units", "//", "2", "]", ",", "\n", "initializer", "=", "phase_init", ")", "\n", "cos_theta_A", "=", "tf", ".", "cos", "(", "theta_A", ")", "\n", "sin_theta_A", "=", "tf", ".", "sin", "(", "theta_A", ")", "\n", "\n", "cos_list_A", "=", "tf", ".", "concat", "(", "[", "cos_theta_A", ",", "cos_theta_A", "]", ",", "axis", "=", "1", ")", "\n", "sin_list_A", "=", "tf", ".", "concat", "(", "[", "sin_theta_A", ",", "-", "sin_theta_A", "]", ",", "axis", "=", "1", ")", "\n", "\n", "theta_B", "=", "tf", ".", "get_variable", "(", "\"theta_B\"", ",", "[", "capacity_B", ",", "num_units", "//", "2", "-", "1", "]", ",", "\n", "initializer", "=", "phase_init", ")", "\n", "cos_theta_B", "=", "tf", ".", "cos", "(", "theta_B", ")", "\n", "sin_theta_B", "=", "tf", ".", "sin", "(", "theta_B", ")", "\n", "\n", "cos_list_B", "=", "tf", ".", "concat", "(", "[", "tf", ".", "ones", "(", "[", "capacity_B", ",", "1", "]", ")", ",", "cos_theta_B", ",", "\n", "cos_theta_B", ",", "tf", ".", "ones", "(", "[", "capacity_B", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "sin_list_B", "=", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "[", "capacity_B", ",", "1", "]", ")", ",", "sin_theta_B", ",", "\n", "-", "sin_theta_B", ",", "tf", ".", "zeros", "(", "[", "capacity_B", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "ind_exe", ",", "[", "index_A", ",", "index_B", "]", "=", "generate_index_tunable", "(", "num_units", ",", "capacity", ")", "\n", "\n", "diag_list_A", "=", "tf", ".", "gather", "(", "cos_list_A", ",", "index_A", ",", "axis", "=", "1", ")", "\n", "off_list_A", "=", "tf", ".", "gather", "(", "sin_list_A", ",", "index_A", ",", "axis", "=", "1", ")", "\n", "diag_list_B", "=", "tf", ".", "gather", "(", "cos_list_B", ",", "index_B", ",", "axis", "=", "1", ")", "\n", "off_list_B", "=", "tf", ".", "gather", "(", "sin_list_B", ",", "index_B", ",", "axis", "=", "1", ")", "\n", "\n", "v1", "=", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "[", "diag_list_A", ",", "diag_list_B", "]", ",", "axis", "=", "1", ")", ",", "[", "\n", "capacity", ",", "num_units", "]", ")", "\n", "v2", "=", "tf", ".", "reshape", "(", "tf", ".", "concat", "(", "[", "off_list_A", ",", "off_list_B", "]", ",", "axis", "=", "1", ")", ",", "[", "\n", "capacity", ",", "num_units", "]", ")", "\n", "\n", "return", "v1", ",", "v2", ",", "ind_exe", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.copying_task.copying_data": [[37, 48], ["numpy.random.randint", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.concatenate().astype", "numpy.concatenate().astype", "numpy.ones", "numpy.concatenate", "numpy.concatenate"], "function", ["None"], ["def", "copying_data", "(", "T", ",", "n_data", ",", "n_sequence", ")", ":", "\n", "    ", "seq", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "high", "=", "9", ",", "size", "=", "(", "n_data", ",", "n_sequence", ")", ")", "\n", "zeros1", "=", "np", ".", "zeros", "(", "(", "n_data", ",", "T", "-", "1", ")", ")", "\n", "zeros2", "=", "np", ".", "zeros", "(", "(", "n_data", ",", "T", ")", ")", "\n", "marker", "=", "9", "*", "np", ".", "ones", "(", "(", "n_data", ",", "1", ")", ")", "\n", "zeros3", "=", "np", ".", "zeros", "(", "(", "n_data", ",", "n_sequence", ")", ")", "\n", "\n", "x", "=", "np", ".", "concatenate", "(", "(", "seq", ",", "zeros1", ",", "marker", ",", "zeros3", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "'int32'", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "zeros3", ",", "zeros2", ",", "seq", ")", ",", "axis", "=", "1", ")", ".", "astype", "(", "'int64'", ")", "\n", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.copying_task.main": [[50, 148], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.unstack", "tensorflow.stack", "tensorflow.nn.bias_add", "tensorflow.reduce_mean", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.global_variables_initializer", "print", "tensorflow.ConfigProto", "tensorflow.nn.rnn_cell.BasicLSTMCell", "tensorflow.nn.dynamic_rnn", "numpy.sqrt", "numpy.sqrt", "tensorflow.transpose", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.argmax", "tensorflow.cast", "tensorflow.Session", "copying_task.copying_data", "copying_task.copying_data", "sess.run", "print", "sess.run", "sess.run", "print", "goru.GORUCell", "tensorflow.nn.dynamic_rnn", "tensorflow.random_uniform_initializer", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.train.RMSPropOptimizer", "numpy.log", "str", "sess.run", "sess.run", "print", "str"], "function", ["home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.copying_task.copying_data", "home.repos.pwc.inspect_result.jingli9111_GORU-tensorflow.None.copying_task.copying_data"], ["", "def", "main", "(", "_", ")", ":", "\n", "\n", "# --- Set data params ----------------", "\n", "    ", "n_input", "=", "10", "\n", "n_output", "=", "9", "\n", "n_sequence", "=", "10", "\n", "n_train", "=", "FLAGS", ".", "iter", "*", "FLAGS", ".", "batch_size", "\n", "n_test", "=", "FLAGS", ".", "batch_size", "\n", "\n", "n_input", "=", "10", "\n", "n_steps", "=", "FLAGS", ".", "T", "+", "20", "\n", "n_classes", "=", "9", "\n", "\n", "# --- Create graph and compute gradients ----------------------", "\n", "x", "=", "tf", ".", "placeholder", "(", "\"int32\"", ",", "[", "None", ",", "n_steps", "]", ")", "\n", "y", "=", "tf", ".", "placeholder", "(", "\"int64\"", ",", "[", "None", ",", "n_steps", "]", ")", "\n", "\n", "input_data", "=", "tf", ".", "one_hot", "(", "x", ",", "n_input", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# --- Input to hidden layer ----------------------", "\n", "if", "FLAGS", ".", "model", "==", "\"lstm\"", ":", "\n", "        ", "cell", "=", "tf", ".", "nn", ".", "rnn_cell", ".", "BasicLSTMCell", "(", "\n", "FLAGS", ".", "hidden_size", ",", "state_is_tuple", "=", "True", ",", "forget_bias", "=", "1", ")", "\n", "hidden_out", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "cell", ",", "input_data", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "elif", "FLAGS", ".", "model", "==", "\"goru\"", ":", "\n", "        ", "cell", "=", "GORUCell", "(", "FLAGS", ".", "hidden_size", ",", "FLAGS", ".", "capacity", ",", "\n", "FLAGS", ".", "fft", ")", "\n", "hidden_out", ",", "_", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", ",", "input_data", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# --- Hidden Layer to Output ----------------------", "\n", "", "V_init_val", "=", "np", ".", "sqrt", "(", "6.", ")", "/", "np", ".", "sqrt", "(", "n_output", "+", "n_input", ")", "\n", "\n", "V_weights", "=", "tf", ".", "get_variable", "(", "\"V_weights\"", ",", "shape", "=", "[", "FLAGS", ".", "hidden_size", ",", "n_classes", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "-", "V_init_val", ",", "V_init_val", ")", ")", "\n", "V_bias", "=", "tf", ".", "get_variable", "(", "\"V_bias\"", ",", "shape", "=", "[", "n_classes", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.01", ")", ")", "\n", "\n", "hidden_out_list", "=", "tf", ".", "unstack", "(", "hidden_out", ",", "axis", "=", "1", ")", "\n", "temp_out", "=", "tf", ".", "stack", "(", "[", "tf", ".", "matmul", "(", "i", ",", "V_weights", ")", "for", "i", "in", "hidden_out_list", "]", ")", "\n", "output_data", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "transpose", "(", "temp_out", ",", "[", "1", ",", "0", ",", "2", "]", ")", ",", "V_bias", ")", "\n", "\n", "# --- evaluate process ----------------------", "\n", "cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "output_data", ",", "labels", "=", "y", ")", ")", "\n", "correct_pred", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "output_data", ",", "2", ")", ",", "y", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_pred", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "# --- Initialization ----------------------", "\n", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "\n", "learning_rate", "=", "0.001", ",", "decay", "=", "0.9", ")", ".", "minimize", "(", "cost", ")", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "\n", "# --- baseline ----------------------", "\n", "baseline", "=", "np", ".", "log", "(", "8", ")", "*", "10", "/", "(", "FLAGS", ".", "T", "+", "20", ")", "\n", "print", "(", "\"Baseline is \"", "+", "str", "(", "baseline", ")", ")", "\n", "\n", "# --- Training Loop ----------------------", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "#config.gpu_options.per_process_gpu_memory_fraction = 0.2", "\n", "config", ".", "log_device_placement", "=", "False", "\n", "config", ".", "allow_soft_placement", "=", "False", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "\n", "# --- Create data --------------------", "\n", "\n", "        ", "train_x", ",", "train_y", "=", "copying_data", "(", "FLAGS", ".", "T", ",", "n_train", ",", "n_sequence", ")", "\n", "test_x", ",", "test_y", "=", "copying_data", "(", "FLAGS", ".", "T", ",", "n_test", ",", "n_sequence", ")", "\n", "\n", "sess", ".", "run", "(", "init", ")", "\n", "\n", "step", "=", "0", "\n", "\n", "while", "step", "<", "FLAGS", ".", "iter", ":", "\n", "            ", "batch_x", "=", "train_x", "[", "\n", "step", "*", "FLAGS", ".", "batch_size", ":", "(", "step", "+", "1", ")", "*", "FLAGS", ".", "batch_size", "]", "\n", "batch_y", "=", "train_y", "[", "\n", "step", "*", "FLAGS", ".", "batch_size", ":", "(", "step", "+", "1", ")", "*", "FLAGS", ".", "batch_size", "]", "\n", "\n", "sess", ".", "run", "(", "optimizer", ",", "feed_dict", "=", "{", "x", ":", "batch_x", ",", "y", ":", "batch_y", "}", ")", "\n", "\n", "acc", ",", "loss", "=", "sess", ".", "run", "(", "[", "accuracy", ",", "cost", "]", ",", "feed_dict", "=", "{", "\n", "x", ":", "batch_x", ",", "y", ":", "batch_y", "}", ")", "\n", "\n", "print", "(", "\" Iter \"", "+", "str", "(", "step", ")", "+", "\", Minibatch Loss= \"", "+", "\n", "\"{:.6f}\"", ".", "format", "(", "loss", ")", "+", "\", Training Accuracy= \"", "+", "\"{:.5f}\"", ".", "format", "(", "acc", ")", ")", "\n", "\n", "step", "+=", "1", "\n", "\n", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "\n", "# --- test ----------------------", "\n", "\n", "test_acc", "=", "sess", ".", "run", "(", "accuracy", ",", "feed_dict", "=", "{", "x", ":", "test_x", ",", "y", ":", "test_y", "}", ")", "\n", "test_loss", "=", "sess", ".", "run", "(", "cost", ",", "feed_dict", "=", "{", "x", ":", "test_x", ",", "y", ":", "test_y", "}", ")", "\n", "print", "(", "\"Test result: Loss= \"", "+", "\n", "\"{:.6f}\"", ".", "format", "(", "test_loss", ")", "+", "\", Accuracy= \"", "+", "\"{:.5f}\"", ".", "format", "(", "test_acc", ")", ")", "\n", "\n"]]}