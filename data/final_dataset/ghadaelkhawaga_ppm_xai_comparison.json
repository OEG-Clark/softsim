{"home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.DatasetStatisticsGeneration.defineSepsis": [[24, 50], ["os.path.join", "range"], "function", ["None"], ["def", "defineSepsis", "(", ")", ":", "\n", "  ", "Sepsis_datasets", "=", "[", "'sepsis%s'", "%", "n", "for", "n", "in", "range", "(", "1", ",", "4", ")", "]", "\n", "for", "d", "in", "Sepsis_datasets", ":", "\n", "    ", "filename", "[", "d", "]", "=", "os", ".", "path", ".", "join", "(", "logs_dir", ",", "'%s.csv'", "%", "(", "d", ")", ")", "\n", "case_id_col", "[", "d", "]", "=", "'case'", "\n", "activity_col", "[", "d", "]", "=", "'concept:name'", "\n", "timestamp_col", "[", "d", "]", "=", "'time:timestamp'", "\n", "resource_col", "[", "d", "]", "=", "\"org:group\"", "\n", "label_col", "[", "d", "]", "=", "'label'", "\n", "pos_label", "[", "d", "]", "=", "'deviant'", "\n", "neg_label", "[", "d", "]", "=", "'regular'", "\n", "dynamic_cat_cols", "[", "d", "]", "=", "[", "activity_col", "[", "d", "]", ",", "resource_col", "[", "d", "]", "]", "\n", "static_cat_cols", "[", "d", "]", "=", "[", "'Diagnose'", ",", "'DiagnosticArtAstrup'", ",", "'DiagnosticBlood'", ",", "'DiagnosticECG'", ",", "\n", "'DiagnosticIC'", ",", "'DiagnosticLacticAcid'", ",", "'DiagnosticLiquor'", ",", "\n", "'DiagnosticOther'", ",", "'DiagnosticSputum'", ",", "'DiagnosticUrinaryCulture'", ",", "\n", "'DiagnosticUrinarySediment'", ",", "'DiagnosticXthorax'", ",", "'DisfuncOrg'", ",", "\n", "'Hypotensie'", ",", "'Hypoxie'", ",", "'InfectionSuspected'", ",", "'Infusion'", ",", "'Oligurie'", ",", "\n", "'SIRSCritHeartRate'", ",", "'SIRSCritLeucos'", ",", "'SIRSCritTachypnea'", ",", "\n", "'SIRSCritTemperature'", ",", "'SIRSCriteria2OrMore'", "]", "\n", "dynamic_num_cols", "[", "d", "]", "=", "[", "'CRP'", ",", "'LacticAcid'", ",", "'Leucocytes'", ",", "\"hour\"", ",", "\"weekday\"", ",", "\"month\"", ",", "\"timesincemidnight\"", ",", "\"timesincelast\"", ",", "\"timesincestart\"", ",", "\"OrderOfEvent\"", ",", "\"openCases\"", "]", "\n", "static_num_cols", "[", "d", "]", "=", "[", "'Age'", "]", "\n", "#print(filename[d])", "\n", "if", "d", "==", "'sepsis3'", ":", "\n", "      ", "pos_label", "[", "\"sepsis3\"", "]", "=", "\"regular\"", "\n", "neg_label", "[", "\"sepsis3\"", "]", "=", "\"deviant\"", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.DatasetStatisticsGeneration.defineTraffic": [[52, 69], ["os.path.join"], "function", ["None"], ["", "def", "defineTraffic", "(", ")", ":", "\n", "  ", "traff_datasets", "=", "[", "\"traffic_fines\"", "]", "\n", "for", "d", "in", "traff_datasets", ":", "\n", "    ", "filename", "[", "d", "]", "=", "os", ".", "path", ".", "join", "(", "logs_dir", ",", "\"traffic_fines.csv\"", ")", "\n", "case_id_col", "[", "d", "]", "=", "\"case:concept:name\"", "\n", "activity_col", "[", "d", "]", "=", "\"concept:name\"", "\n", "resource_col", "[", "d", "]", "=", "\"org:resource\"", "\n", "timestamp_col", "[", "d", "]", "=", "\"time:timestamp\"", "\n", "label_col", "[", "d", "]", "=", "\"label\"", "\n", "pos_label", "[", "d", "]", "=", "\"deviant\"", "\n", "neg_label", "[", "d", "]", "=", "\"regular\"", "\n", "dynamic_cat_cols", "[", "d", "]", "=", "[", "activity_col", "[", "d", "]", ",", "resource_col", "[", "d", "]", ",", "\"lastSent\"", ",", "\"notificationType\"", ",", "\"dismissal\"", "]", "\n", "static_cat_cols", "[", "d", "]", "=", "[", "\"article\"", ",", "\"vehicleClass\"", "]", "\n", "dynamic_num_cols", "[", "d", "]", "=", "[", "\"expense\"", ",", "\"timesincelastevent\"", ",", "\"timesincecasestart\"", ",", "\"timesincemidnight\"", ",", "\"event_nr\"", ",", "\n", "\"month\"", ",", "\"weekday\"", ",", "\"hour\"", ",", "\"open_cases\"", "]", "\n", "static_num_cols", "[", "d", "]", "=", "[", "\"amount\"", ",", "\"points\"", "]", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.DatasetStatisticsGeneration.defineBPIC2017": [[70, 90], ["os.path.join"], "function", ["None"], ["", "def", "defineBPIC2017", "(", ")", ":", "\n", "  ", "BPIC2017_datasets", "=", "[", "'BPIC2017_O_Accepted'", ",", "'BPIC2017_O_Cancelled'", ",", "'BPIC2017_O_Refused'", "]", "\n", "for", "d", "in", "BPIC2017_datasets", ":", "\n", "    ", "filename", "[", "d", "]", "=", "os", ".", "path", ".", "join", "(", "logs_dir", ",", "'%s.csv'", "%", "(", "d", ")", ")", "\n", "case_id_col", "[", "d", "]", "=", "\"case:concept:name\"", "\n", "activity_col", "[", "d", "]", "=", "\"concept:name\"", "\n", "resource_col", "[", "d", "]", "=", "'org:resource'", "\n", "timestamp_col", "[", "d", "]", "=", "'time:timestamp'", "\n", "label_col", "[", "d", "]", "=", "\"label\"", "\n", "neg_label", "[", "d", "]", "=", "\"regular\"", "\n", "pos_label", "[", "d", "]", "=", "\"deviant\"", "\n", "# features for classifier", "\n", "dynamic_cat_cols", "[", "d", "]", "=", "[", "activity_col", "[", "d", "]", ",", "resource_col", "[", "d", "]", ",", "'Action'", ",", "'CreditScore'", ",", "'EventOrigin'", ",", "'lifecycle:transition'", ",", "\n", "\"Accepted\"", ",", "\"Selected\"", "]", "\n", "static_cat_cols", "[", "d", "]", "=", "[", "'case:ApplicationType'", ",", "'case:LoanGoal'", "]", "\n", "dynamic_num_cols", "[", "d", "]", "=", "[", "'FirstWithdrawalAmount'", ",", "'MonthlyCost'", ",", "'NumberOfTerms'", ",", "'OfferedAmount'", ",", "\n", "\"timesincelastevent\"", ",", "\"timesincecasestart\"", ",", "\"timesincemidnight\"", ",", "\"event_nr\"", ",", "\"month\"", ",", "\"weekday\"", ",", "\"hour\"", ",", "\n", "\"open_cases\"", "]", "\n", "static_num_cols", "[", "d", "]", "=", "[", "'case:RequestedAmount'", "]", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.DatasetStatisticsGeneration.defineHospital": [[92, 113], ["os.path.join", "range"], "function", ["None"], ["", "def", "defineHospital", "(", ")", ":", "\n", "  ", "hos_datasets", "=", "[", "'hospital_billing_%s'", "%", "n", "for", "n", "in", "range", "(", "1", ",", "3", ")", "]", "\n", "for", "d", "in", "hos_datasets", ":", "\n", "    ", "filename", "[", "d", "]", "=", "os", ".", "path", ".", "join", "(", "logs_dir", ",", "'%s.csv'", "%", "(", "d", ")", ")", "\n", "case_id_col", "[", "d", "]", "=", "'cID'", "\n", "activity_col", "[", "d", "]", "=", "'Activity'", "\n", "timestamp_col", "[", "d", "]", "=", "'time:timestamp'", "\n", "resource_col", "[", "d", "]", "=", "\"org:resource\"", "\n", "label_col", "[", "d", "]", "=", "'label'", "\n", "neg_label", "[", "d", "]", "=", "\"regular\"", "\n", "pos_label", "[", "d", "]", "=", "\" deviant\"", "\n", "dynamic_cat_cols", "[", "d", "]", "=", "[", "activity_col", "[", "d", "]", ",", "resource_col", "[", "d", "]", ",", "'actOrange'", ",", "'actRed'", ",", "'blocked'", ",", "'Type'", ",", "'diagnosis'", ",", "\n", "'flagC'", ",", "'flagD'", ",", "'msgCode'", ",", "'msgType'", ",", "'state'", ",", "'version'", ",", "'isCancelled'", ",", "'isClosed'", ",", "\n", "'closeCode'", "]", "\n", "static_cat_cols", "[", "d", "]", "=", "[", "'speciality'", "]", "\n", "dynamic_num_cols", "[", "d", "]", "=", "[", "'msgCount'", ",", "\"timesincelastevent\"", ",", "\"timesincecasestart\"", ",", "\"event_nr\"", ",", "\"weekday\"", ",", "\"hour\"", ",", "\n", "\"open_cases\"", "]", "\n", "static_num_cols", "[", "d", "]", "=", "[", "]", "\n", "if", "d", "==", "'hospital_billing_1'", ":", "\n", "      ", "dynamic_cat_cols", "[", "d", "]", "=", "[", "col", "for", "col", "in", "dynamic_cat_cols", "[", "d", "]", "if", "col", "!=", "\"isClosed\"", "]", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.GeneratingExplanations.create_and_evaluate_model": [[83, 184], ["time.time", "range", "fout_all.flush", "pandas.DataFrame", "range", "helpers.Bucketers.get_bucketer", "helpers.Bucketers.get_bucketer.fit_predict", "helpers.Bucketers.get_bucketer.predict", "set", "args.items", "fout_all.write", "args.items", "fout_all.write", "collections.defaultdict", "dataset_manager.get_relevant_data_by_indexes", "dataset_manager.get_label_numeric", "preds_all.extend", "test_y_all.extend", "sklearn.metrics.roc_auc_score", "collections.defaultdict.items", "fout_all.write", "pandas.concat", "dataset_manager.get_indexes", "dataset_manager.get_indexes", "len", "dataset_manager.get_relevant_data_by_indexes", "dataset_manager.get_label_numeric", "fout_all.write", "len", "len", "sklearn.pipeline.FeatureUnion", "sklearn.pipeline.Pipeline.fit", "len", "sklearn.metrics.roc_auc_score", "set", "len", "xgboost.XGBClassifier", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline", "sklearn.pipeline.Pipeline.predict_proba", "set", "time.time", "time.time", "sklearn.linear_model.LogisticRegression", "numpy.where", "helpers.Encoders.get_encoder", "int", "int", "sklearn.preprocessing.StandardScaler"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.get_bucketer", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit_predict", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.predict", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_relevant_data_by_indexes", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_label_numeric", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_indexes", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_indexes", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_relevant_data_by_indexes", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_label_numeric", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.ClassifierWrapper.ClassifierWrapper.predict_proba", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.get_encoder"], ["", "def", "create_and_evaluate_model", "(", "args", ")", ":", "\n", "    ", "global", "trial_nr", "\n", "trial_nr", "+=", "1", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "score", "=", "0", "\n", "for", "cv_iter", "in", "range", "(", "n_splits", ")", ":", "\n", "\n", "        ", "df_test_prefixes", "=", "df_prefixes", "[", "cv_iter", "]", "\n", "df_train_prefixes", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "cv_train_iter", "in", "range", "(", "n_splits", ")", ":", "\n", "            ", "if", "cv_train_iter", "!=", "cv_iter", ":", "\n", "                ", "df_train_prefixes", "=", "pd", ".", "concat", "(", "[", "df_train_prefixes", ",", "df_prefixes", "[", "cv_train_iter", "]", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# Bucketing prefixes based on control flow", "\n", "", "", "bucketer_args", "=", "{", "'encoding_method'", ":", "bucket_encoding", ",", "\n", "'case_id_col'", ":", "dataset_manager", ".", "case_id_col", ",", "\n", "'cat_cols'", ":", "[", "dataset_manager", ".", "activity_col", "]", ",", "\n", "'num_cols'", ":", "[", "]", ",", "\n", "'random_state'", ":", "random_state", "}", "\n", "\n", "bucketer", "=", "get_bucketer", "(", "bucket_method", ",", "**", "bucketer_args", ")", "\n", "bucket_assignments_train", "=", "bucketer", ".", "fit_predict", "(", "df_train_prefixes", ")", "\n", "bucket_assignments_test", "=", "bucketer", ".", "predict", "(", "df_test_prefixes", ")", "\n", "\n", "preds_all", "=", "[", "]", "\n", "test_y_all", "=", "[", "]", "\n", "if", "\"prefix\"", "in", "method_name", ":", "\n", "            ", "scores", "=", "defaultdict", "(", "int", ")", "\n", "", "for", "bucket", "in", "set", "(", "bucket_assignments_test", ")", ":", "\n", "            ", "relevant_train_cases_bucket", "=", "dataset_manager", ".", "get_indexes", "(", "df_train_prefixes", ")", "[", "\n", "bucket_assignments_train", "==", "bucket", "]", "\n", "relevant_test_cases_bucket", "=", "dataset_manager", ".", "get_indexes", "(", "df_test_prefixes", ")", "[", "\n", "bucket_assignments_test", "==", "bucket", "]", "\n", "df_test_bucket", "=", "dataset_manager", ".", "get_relevant_data_by_indexes", "(", "df_test_prefixes", ",", "relevant_test_cases_bucket", ")", "\n", "test_y", "=", "dataset_manager", ".", "get_label_numeric", "(", "df_test_bucket", ")", "\n", "if", "len", "(", "relevant_train_cases_bucket", ")", "==", "0", ":", "\n", "                ", "preds", "=", "[", "class_ratios", "[", "cv_iter", "]", "]", "*", "len", "(", "relevant_test_cases_bucket", ")", "\n", "", "else", ":", "\n", "                ", "df_train_bucket", "=", "dataset_manager", ".", "get_relevant_data_by_indexes", "(", "df_train_prefixes", ",", "\n", "relevant_train_cases_bucket", ")", "# one row per event", "\n", "train_y", "=", "dataset_manager", ".", "get_label_numeric", "(", "df_train_bucket", ")", "\n", "\n", "if", "len", "(", "set", "(", "train_y", ")", ")", "<", "2", ":", "\n", "                    ", "preds", "=", "[", "train_y", "[", "0", "]", "]", "*", "len", "(", "relevant_test_cases_bucket", ")", "\n", "", "else", ":", "\n", "                    ", "feature_combiner", "=", "FeatureUnion", "(", "\n", "[", "(", "method", ",", "get_encoder", "(", "method", ",", "**", "cls_encoder_args", ")", ")", "for", "method", "in", "methods", "]", ")", "\n", "\n", "if", "cls_method", "==", "\"xgboost\"", ":", "\n", "                        ", "cls", "=", "xgb", ".", "XGBClassifier", "(", "objective", "=", "'binary:logistic'", ",", "\n", "n_estimators", "=", "500", ",", "\n", "learning_rate", "=", "args", "[", "'learning_rate'", "]", ",", "\n", "subsample", "=", "args", "[", "'subsample'", "]", ",", "\n", "max_depth", "=", "int", "(", "args", "[", "'max_depth'", "]", ")", ",", "\n", "colsample_bytree", "=", "args", "[", "'colsample_bytree'", "]", ",", "\n", "min_child_weight", "=", "int", "(", "args", "[", "'min_child_weight'", "]", ")", ",", "\n", "seed", "=", "random_state", ")", "\n", "\n", "", "elif", "cls_method", "==", "\"logit\"", ":", "\n", "                        ", "cls", "=", "LogisticRegression", "(", "C", "=", "2", "**", "args", "[", "'C'", "]", ",", "\n", "random_state", "=", "random_state", ")", "\n", "\n", "", "if", "cls_method", "==", "\"logit\"", ":", "\n", "                        ", "pipeline", "=", "Pipeline", "(", "[", "(", "'encoder'", ",", "feature_combiner", ")", ",", "(", "'scaler'", ",", "StandardScaler", "(", ")", ")", ",", "(", "'cls'", ",", "cls", ")", "]", ")", "\n", "", "else", ":", "\n", "                        ", "pipeline", "=", "Pipeline", "(", "[", "(", "'encoder'", ",", "feature_combiner", ")", ",", "(", "'cls'", ",", "cls", ")", "]", ")", "\n", "", "pipeline", ".", "fit", "(", "df_train_bucket", ",", "train_y", ")", "\n", "\n", "preds_pos_label_idx", "=", "np", ".", "where", "(", "cls", ".", "classes_", "==", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "preds", "=", "pipeline", ".", "predict_proba", "(", "df_test_bucket", ")", "[", ":", ",", "preds_pos_label_idx", "]", "\n", "\n", "", "", "if", "\"prefix\"", "in", "method_name", ":", "\n", "                ", "auc", "=", "0.5", "\n", "if", "len", "(", "set", "(", "test_y", ")", ")", "==", "2", ":", "\n", "                    ", "auc", "=", "roc_auc_score", "(", "test_y", ",", "preds", ")", "\n", "", "scores", "[", "bucket", "]", "+=", "auc", "\n", "", "preds_all", ".", "extend", "(", "preds", ")", "\n", "test_y_all", ".", "extend", "(", "test_y", ")", "\n", "\n", "# score += roc_auc_score(test_y_all, preds_all)", "\n", "", "try", ":", "\n", "            ", "score", "+=", "roc_auc_score", "(", "test_y_all", ",", "preds_all", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "if", "\"prefix\"", "in", "method_name", ":", "\n", "        ", "for", "k", ",", "v", "in", "args", ".", "items", "(", ")", ":", "\n", "            ", "for", "bucket", ",", "bucket_score", "in", "scores", ".", "items", "(", ")", ":", "\n", "                ", "fout_all", ".", "write", "(", "\"%s;%s;%s;%s;%s;%s;%s;%s\\n\"", "%", "(", "\n", "trial_nr", ",", "dataset_name", ",", "cls_method", ",", "method_name", ",", "bucket", ",", "k", ",", "v", ",", "bucket_score", "/", "n_splits", ")", ")", "\n", "", "", "fout_all", ".", "write", "(", "\"%s;%s;%s;%s;%s;%s;%s;%s\\n\"", "%", "(", "\n", "trial_nr", ",", "dataset_name", ",", "cls_method", ",", "method_name", ",", "0", ",", "\"processing_time\"", ",", "time", ".", "time", "(", ")", "-", "start", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "for", "k", ",", "v", "in", "args", ".", "items", "(", ")", ":", "\n", "            ", "fout_all", ".", "write", "(", "\n", "\"%s;%s;%s;%s;%s;%s;%s\\n\"", "%", "(", "trial_nr", ",", "dataset_name", ",", "cls_method", ",", "method_name", ",", "k", ",", "v", ",", "score", "/", "n_splits", ")", ")", "\n", "", "fout_all", ".", "write", "(", "\"%s;%s;%s;%s;%s;%s;%s\\n\"", "%", "(", "\n", "trial_nr", ",", "dataset_name", ",", "cls_method", ",", "method_name", ",", "\"processing_time\"", ",", "time", ".", "time", "(", ")", "-", "start", ",", "0", ")", ")", "\n", "", "fout_all", ".", "flush", "(", ")", "\n", "return", "{", "'loss'", ":", "-", "score", "/", "n_splits", ",", "'status'", ":", "STATUS_OK", ",", "'model'", ":", "cls", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.mutual_info_encoded.mutual_info_comp": [[32, 43], ["sklearn.feature_selection.mutual_info_classif", "numpy.column_stack", "pandas.DataFrame", "pandas.to_numeric", "concat_df.reset_index.sort_values", "concat_df.reset_index.reset_index", "concat_df.reset_index.iloc[].plot", "concat_df.iloc[].plot.set_xticklabels", "matplotlib.savefig", "matplotlib.clf", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.plots_annot.plot"], ["def", "mutual_info_comp", "(", "out_dir", ",", "df", ",", "target", ",", "disc_indices", ",", "feats", ",", "d_name", ",", "method", "=", "'original'", ",", "prfx_len", "=", "0", ")", ":", "\n", "    ", "mi", "=", "mutual_info_classif", "(", "df", ",", "target", ",", "discrete_features", "=", "disc_indices", ",", "random_state", "=", "42", ")", "\n", "concat_res", "=", "np", ".", "column_stack", "(", "(", "feats", ",", "mi", ")", ")", "\n", "concat_df", "=", "pd", ".", "DataFrame", "(", "concat_res", ",", "columns", "=", "[", "'features'", ",", "'mi'", "]", ")", "\n", "concat_df", "[", "'mi'", "]", "=", "pd", ".", "to_numeric", "(", "concat_df", "[", "'mi'", "]", ")", "\n", "concat_df", ".", "sort_values", "(", "by", "=", "[", "'mi'", "]", ",", "ascending", "=", "False", ",", "inplace", "=", "True", ")", "\n", "concat_df", "=", "concat_df", ".", "reset_index", "(", ")", "\n", "ax", "=", "concat_df", ".", "iloc", "[", ":", "21", "]", ".", "plot", "(", "y", "=", "'mi'", ",", "kind", "=", "'bar'", ",", "color", "=", "'DarkBlue'", ",", "legend", "=", "False", ")", "\n", "ax", ".", "set_xticklabels", "(", "concat_df", ".", "features", "[", ":", "21", "]", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'Mutual_imp_%s_%s_%s_%s_%s.png'", "%", "(", "d_name", ",", "method", ",", "df", ".", "shape", "[", "0", "]", ",", "prfx_len", ",", "len", "(", "feats", ")", ")", ")", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "'tight'", ")", ";", "\n", "plt", ".", "clf", "(", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.defineSepsis": [[31, 58], ["os.path.join", "range"], "function", ["None"], ["def", "defineSepsis", "(", ")", ":", "\n", "  ", "Sepsis_datasets", "=", "[", "'sepsis%s'", "%", "n", "for", "n", "in", "range", "(", "1", ",", "4", ")", "]", "\n", "for", "d", "in", "Sepsis_datasets", ":", "\n", "    ", "filename", "[", "d", "]", "=", "os", ".", "path", ".", "join", "(", "Logs", ",", "'%s.csv'", "%", "(", "d", ")", ")", "\n", "case_id_col", "[", "d", "]", "=", "'case'", "\n", "activity_col", "[", "d", "]", "=", "'concept:name'", "\n", "timestamp_col", "[", "d", "]", "=", "'time:timestamp'", "\n", "resource_col", "[", "d", "]", "=", "\"org:group\"", "\n", "label_col", "[", "d", "]", "=", "'label'", "\n", "pos_label", "[", "d", "]", "=", "'deviant'", "\n", "neg_label", "[", "d", "]", "=", "'regular'", "\n", "\n", "dynamic_cat_cols", "[", "d", "]", "=", "[", "activity_col", "[", "d", "]", ",", "resource_col", "[", "d", "]", "]", "\n", "static_cat_cols", "[", "d", "]", "=", "[", "'Diagnose'", ",", "'DiagnosticArtAstrup'", ",", "'DiagnosticBlood'", ",", "'DiagnosticECG'", ",", "\n", "'DiagnosticIC'", ",", "'DiagnosticLacticAcid'", ",", "'DiagnosticLiquor'", ",", "\n", "'DiagnosticOther'", ",", "'DiagnosticSputum'", ",", "'DiagnosticUrinaryCulture'", ",", "\n", "'DiagnosticUrinarySediment'", ",", "'DiagnosticXthorax'", ",", "'DisfuncOrg'", ",", "\n", "'Hypotensie'", ",", "'Hypoxie'", ",", "'InfectionSuspected'", ",", "'Infusion'", ",", "'Oligurie'", ",", "\n", "'SIRSCritHeartRate'", ",", "'SIRSCritLeucos'", ",", "'SIRSCritTachypnea'", ",", "\n", "'SIRSCritTemperature'", ",", "'SIRSCriteria2OrMore'", "]", "\n", "dynamic_num_cols", "[", "d", "]", "=", "[", "'CRP'", ",", "'LacticAcid'", ",", "'Leucocytes'", ",", "\"hour\"", ",", "\"day\"", ",", "\"month\"", ",", "\"timesincemidnight\"", ",", "\"timesincelast\"", ",", "\"timesincestart\"", ",", "\"OrderOfEvent\"", ",", "\"openCases\"", ",", "'remainingtime'", "]", "\n", "static_num_cols", "[", "d", "]", "=", "[", "'Age'", "]", "\n", "#print(filename[d])", "\n", "if", "d", "==", "'sepsis3'", ":", "\n", "      ", "pos_label", "[", "\"sepsis3\"", "]", "=", "\"regular\"", "\n", "neg_label", "[", "\"sepsis3\"", "]", "=", "\"deviant\"", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.defineTraffic": [[60, 78], ["os.path.join"], "function", ["None"], ["", "def", "defineTraffic", "(", ")", ":", "\n", "    ", "traff_datasets", "=", "[", "\"traffic_final\"", "]", "\n", "for", "d", "in", "traff_datasets", ":", "\n", "        ", "filename", "[", "d", "]", "=", "os", ".", "path", ".", "join", "(", "Logs", ",", "\"traffic_final.csv\"", ")", "\n", "case_id_col", "[", "d", "]", "=", "\"case:concept:name\"", "\n", "activity_col", "[", "d", "]", "=", "\"concept:name\"", "\n", "resource_col", "[", "d", "]", "=", "\"org:resource\"", "\n", "timestamp_col", "[", "d", "]", "=", "\"time:timestamp\"", "\n", "label_col", "[", "d", "]", "=", "\"label\"", "\n", "pos_label", "[", "d", "]", "=", "\"deviant\"", "\n", "neg_label", "[", "d", "]", "=", "\"regular\"", "\n", "\n", "dynamic_cat_cols", "[", "d", "]", "=", "[", "activity_col", "[", "d", "]", ",", "resource_col", "[", "d", "]", ",", "\"lastSent\"", ",", "\"notificationType\"", ",", "\"dismissal\"", "]", "\n", "static_cat_cols", "[", "d", "]", "=", "[", "\"article\"", ",", "\"vehicleClass\"", "]", "\n", "dynamic_num_cols", "[", "d", "]", "=", "[", "\"expense\"", ",", "\"timesincelastevent\"", ",", "\"timesincecasestart\"", ",", "\"timesincemidnight\"", ",", "\"event_nr\"", ",", "\n", "\"month\"", ",", "\"weekday\"", ",", "\"hour\"", ",", "\"open_cases\"", "]", "\n", "static_num_cols", "[", "d", "]", "=", "[", "\"amount\"", ",", "\"points\"", "]", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.defineBPIC2017": [[80, 102], ["os.path.join"], "function", ["None"], ["", "def", "defineBPIC2017", "(", ")", ":", "\n", "  ", "BPIC2017_datasets", "=", "[", "'BPIC2017_O_Accepted'", ",", "'BPIC2017_O_Cancelled'", ",", "'BPIC2017_O_Refused'", "]", "\n", "for", "d", "in", "BPIC2017_datasets", ":", "\n", "    ", "filename", "[", "d", "]", "=", "os", ".", "path", ".", "join", "(", "Logs", ",", "'%s.csv'", "%", "(", "d", ")", ")", "\n", "\n", "case_id_col", "[", "d", "]", "=", "\"case:concept:name\"", "\n", "activity_col", "[", "d", "]", "=", "\"concept:name\"", "\n", "resource_col", "[", "d", "]", "=", "'org:resource'", "\n", "timestamp_col", "[", "d", "]", "=", "'time:timestamp'", "\n", "label_col", "[", "d", "]", "=", "\"label\"", "\n", "neg_label", "[", "d", "]", "=", "\"regular\"", "\n", "pos_label", "[", "d", "]", "=", "\"deviant\"", "\n", "\n", "# features for classifier", "\n", "dynamic_cat_cols", "[", "d", "]", "=", "[", "activity_col", "[", "d", "]", ",", "resource_col", "[", "d", "]", ",", "'Action'", ",", "'CreditScore'", ",", "'EventOrigin'", ",", "'lifecycle:transition'", ",", "\n", "\"Accepted\"", ",", "\"Selected\"", "]", "\n", "static_cat_cols", "[", "d", "]", "=", "[", "'case:ApplicationType'", ",", "'case:LoanGoal'", "]", "\n", "dynamic_num_cols", "[", "d", "]", "=", "[", "'FirstWithdrawalAmount'", ",", "'MonthlyCost'", ",", "'NumberOfTerms'", ",", "'OfferedAmount'", ",", "\n", "\"timesincelastevent\"", ",", "\"timesincecasestart\"", ",", "\"timesincemidnight\"", ",", "\"event_nr\"", ",", "\"month\"", ",", "\"weekday\"", ",", "\"hour\"", ",", "\n", "\"open_cases\"", "]", "\n", "static_num_cols", "[", "d", "]", "=", "[", "'case:RequestedAmount'", "]", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.defineHospital": [[104, 126], ["os.path.join", "range"], "function", ["None"], ["", "def", "defineHospital", "(", ")", ":", "\n", "    ", "hos_datasets", "=", "[", "'hospital_billing_%s'", "%", "n", "for", "n", "in", "range", "(", "1", ",", "3", ")", "]", "\n", "for", "d", "in", "hos_datasets", ":", "\n", "        ", "filename", "[", "d", "]", "=", "os", ".", "path", ".", "join", "(", "Logs", ",", "'%s.csv'", "%", "(", "d", ")", ")", "\n", "case_id_col", "[", "d", "]", "=", "'cID'", "\n", "activity_col", "[", "d", "]", "=", "'Activity'", "\n", "timestamp_col", "[", "d", "]", "=", "'time:timestamp'", "\n", "resource_col", "[", "d", "]", "=", "\"org:resource\"", "\n", "label_col", "[", "d", "]", "=", "'label'", "\n", "neg_label", "[", "d", "]", "=", "\"regular\"", "\n", "pos_label", "[", "d", "]", "=", "\" deviant\"", "\n", "\n", "dynamic_cat_cols", "[", "d", "]", "=", "[", "activity_col", "[", "d", "]", ",", "resource_col", "[", "d", "]", ",", "'actOrange'", ",", "'actRed'", ",", "'blocked'", ",", "'Type'", ",", "'diagnosis'", ",", "\n", "'flagC'", ",", "'flagD'", ",", "'msgCode'", ",", "'msgType'", ",", "'state'", ",", "'version'", ",", "'isCancelled'", ",", "'isClosed'", ",", "\n", "'closeCode'", "]", "\n", "static_cat_cols", "[", "d", "]", "=", "[", "'speciality'", "]", "\n", "dynamic_num_cols", "[", "d", "]", "=", "[", "'msgCount'", ",", "\"timesincelast\"", ",", "\"timesincestart\"", ",", "\"event_nr\"", ",", "\"weekday\"", ",", "\"hour\"", ",", "\n", "\"open_cases\"", "]", "\n", "static_num_cols", "[", "d", "]", "=", "[", "]", "\n", "if", "d", "==", "'hospital_billing_1'", ":", "\n", "            ", "dynamic_cat_cols", "[", "d", "]", "=", "[", "col", "for", "col", "in", "dynamic_cat_cols", "[", "d", "]", "if", "col", "!=", "\"isClosed\"", "]", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.cramers_V": [[129, 138], ["confusion_matrix.sum", "max", "numpy.sqrt", "scipy.stats.chi2_contingency", "min"], "function", ["None"], ["", "def", "cramers_V", "(", "confusion_matrix", ")", ":", "\n", "    ", "chi2", "=", "chi2_contingency", "(", "confusion_matrix", ")", "[", "0", "]", "\n", "n", "=", "confusion_matrix", ".", "sum", "(", ")", "\n", "phi2", "=", "chi2", "/", "n", "\n", "r", ",", "k", "=", "confusion_matrix", ".", "shape", "\n", "phi2corr", "=", "max", "(", "0", ",", "phi2", "-", "(", "(", "k", "-", "1", ")", "*", "(", "r", "-", "1", ")", ")", "/", "(", "n", "-", "1", ")", ")", "\n", "rcorr", "=", "r", "-", "(", "(", "r", "-", "1", ")", "**", "2", ")", "/", "(", "n", "-", "1", ")", "\n", "kcorr", "=", "k", "-", "(", "(", "k", "-", "1", ")", "**", "2", ")", "/", "(", "n", "-", "1", ")", "\n", "return", "np", ".", "sqrt", "(", "phi2corr", "/", "min", "(", "(", "kcorr", "-", "1", ")", ",", "(", "rcorr", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.check_plot_correlations": [[141, 170], ["corr_df.index[].to_list", "pandas.DataFrame", "count_df.drop.drop_duplicates().sort_values", "matplotlib.figure", "seaborn.barplot", "matplotlib.title", "matplotlib.legend", "matplotlib.savefig", "matplotlib.show", "matplotlib.close", "count_df.drop.reset_index", "count_df.drop.drop", "sum", "os.path.join", "df.groupby().first", "df.groupby().first", "range", "count_df.drop.drop_duplicates", "len", "df.groupby", "df.groupby"], "function", ["None"], ["", "def", "check_plot_correlations", "(", "dataset", ",", "corr_df", ",", "num", ")", ":", "\n", "    ", "for", "x", "in", "corr_df", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", ":", "\n", "        ", "if", "(", "(", "x", ">=", "0.5", ")", "and", "(", "num", "==", "False", ")", ")", "or", "(", "(", "(", "-", "0.5", ">=", "x", ")", "or", "(", "0.5", "<=", "x", ")", ")", "and", "(", "num", "==", "True", ")", ")", ":", "\n", "            ", "y_cols", "=", "corr_df", ".", "index", "[", "corr_df", "[", "0", "]", "==", "x", "]", ".", "to_list", "(", ")", "\n", "count_df", "=", "pd", ".", "DataFrame", "(", ")", "\n", "for", "y_col", "in", "y_cols", ":", "\n", "                ", "if", "(", "(", "y_col", "in", "static_num_cols", "[", "dataset", "]", ")", "or", "(", "y_col", "in", "static_cat_cols", "[", "dataset", "]", ")", ")", "and", "(", "\n", "y_col", "!=", "corr_df", "[", "case_id_col", "[", "dataset", "]", "]", ")", ":", "\n", "                    ", "count_df", "[", "y_col", "]", "=", "df", ".", "groupby", "(", "case_id_col", "[", "dataset", "]", ")", ".", "first", "(", ")", "[", "y_col", "]", "\n", "count_df", "[", "label_col", "[", "dataset", "]", "]", "=", "df", ".", "groupby", "(", "case_id_col", "[", "dataset", "]", ")", ".", "first", "(", ")", "[", "label_col", "[", "dataset", "]", "]", "\n", "count_df", "=", "count_df", ".", "reset_index", "(", ")", "\n", "count_df", "=", "count_df", ".", "drop", "(", "case_id_col", "[", "dataset", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "count_df", "[", "y_col", "]", "=", "df", "[", "y_col", "]", "\n", "count_df", "[", "label_col", "[", "dataset", "]", "]", "=", "df", "[", "label_col", "[", "dataset", "]", "]", "\n", "", "count_df", "[", "'Counts'", "]", "=", "[", "sum", "(", "(", "count_df", "[", "y_col", "]", "==", "count_df", "[", "y_col", "]", "[", "i", "]", ")", "&", "(", "\n", "count_df", "[", "label_col", "[", "dataset", "]", "]", "==", "count_df", "[", "label_col", "[", "dataset", "]", "]", "[", "i", "]", ")", ")", "for", "i", "in", "\n", "range", "(", "len", "(", "count_df", ")", ")", "]", "\n", "count_df", "=", "count_df", ".", "drop_duplicates", "(", ")", ".", "sort_values", "(", "by", "=", "y_col", ",", "ascending", "=", "False", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "8", ")", ")", "\n", "sns", ".", "barplot", "(", "x", "=", "y_col", ",", "y", "=", "'Counts'", ",", "hue", "=", "label_col", "[", "dataset", "]", ",", "data", "=", "count_df", ")", ";", "\n", "plt", ".", "title", "(", "'Value Counts of %s categorized by label values'", "%", "(", "y_col", ")", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper left'", ",", "title", "=", "'label'", ",", "fontsize", "=", "'large'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ",", "\n", "'plot_valueCounts_highlyCorrelated_%s_withTarget_in_%s.png'", "%", "(", "\n", "y_col", ",", "dataset", ")", ")", ")", ";", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.define_datasets": [[172, 186], ["EDA_and_profiling.defineSepsis", "EDA_and_profiling.defineTraffic", "range", "EDA_and_profiling.defineBPIC2017", "EDA_and_profiling.defineHospital", "range"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.defineSepsis", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.defineTraffic", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.defineBPIC2017", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.defineHospital"], ["", "def", "define_datasets", "(", "i", ")", ":", "\n", "  ", "if", "i", "==", "'sepsis'", ":", "\n", "    ", "defineSepsis", "(", ")", "\n", "dss", "=", "[", "'sepsis%s'", "%", "n", "for", "n", "in", "range", "(", "1", ",", "4", ")", "]", "\n", "", "elif", "i", "==", "'traffic'", ":", "\n", "    ", "defineTraffic", "(", ")", "\n", "dss", "=", "[", "'traffic_final'", "]", "\n", "", "elif", "i", "==", "'BPIC2017'", ":", "\n", "    ", "defineBPIC2017", "(", ")", "\n", "dss", "=", "[", "'BPIC2017_O_Accepted'", ",", "'BPIC2017_O_Cancelled'", ",", "'BPIC2017_O_Refused'", "]", "\n", "", "else", ":", "\n", "    ", "defineHospital", "(", ")", "\n", "dss", "=", "[", "'hospital_billing_%s'", "%", "n", "for", "n", "in", "range", "(", "1", ",", "3", ")", "]", "\n", "", "return", "dss", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.None.EDA_and_profiling.prepare_dataset": [[188, 198], ["pandas.read_csv", "pandas.to_datetime"], "function", ["None"], ["", "def", "prepare_dataset", "(", "dataset", ")", ":", "\n", "    ", "dtypes", "=", "{", "col", ":", "'object'", "for", "col", "in", "(", "dynamic_cat_cols", "[", "dataset", "]", "+", "static_cat_cols", "[", "dataset", "]", "+", "[", "\n", "case_id_col", "[", "dataset", "]", "+", "label_col", "[", "dataset", "]", "+", "timestamp_col", "[", "dataset", "]", "]", ")", "}", "\n", "for", "col", "in", "dynamic_num_cols", "[", "dataset", "]", "+", "static_num_cols", "[", "dataset", "]", ":", "\n", "        ", "dtypes", "[", "col", "]", "=", "'float'", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "filename", "[", "dataset", "]", ",", "sep", "=", "';'", ",", "dtype", "=", "dtypes", ",", "engine", "=", "'c'", ",", "encoding", "=", "'ISO-8859-1'", ",", "error_bad_lines", "=", "False", ")", "\n", "time_col", "=", "timestamp_col", "[", "dataset", "]", "\n", "df", "[", "time_col", "]", "=", "pd", ".", "to_datetime", "(", "df", "[", "time_col", "]", ")", "\n", "df", "[", "'encoded_label'", "]", "=", "[", "1", "if", "label", "==", "pos_label", "[", "dataset", "]", "else", "0", "for", "label", "in", "df", "[", "label_col", "[", "dataset", "]", "]", "]", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.plots_annot.plot": [[4, 7], ["matplotlib.plot"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.plots_annot.plot"], ["def", "plot", "(", "x", ",", "y", ",", "title_str", ",", "cls", ",", "marker", ")", ":", "\n", "  ", "plt", ".", "plot", "(", "x", ",", "y", ",", "label", "=", "\"%s_%s\"", "%", "(", "title_str", ",", "cls", ")", ",", "marker", "=", "marker", ",", "markersize", "=", "5", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.plots_annot.autolabel": [[9, 16], ["rect.get_height", "ax.annotate", "rect.get_x", "rect.get_width"], "function", ["None"], ["", "def", "autolabel", "(", "ax", ",", "rects", ")", ":", "\n", "    ", "\"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"", "\n", "for", "rect", "in", "rects", ":", "\n", "        ", "height", "=", "rect", ".", "get_height", "(", ")", "\n", "ax", ".", "annotate", "(", "'{:.2f}'", ".", "format", "(", "height", ")", ",", "xy", "=", "(", "rect", ".", "get_x", "(", ")", "+", "rect", ".", "get_width", "(", ")", "/", "2", ",", "height", ")", ",", "xytext", "=", "(", "0", ",", "5", ")", ",", "# 3 points vertical offset", "\n", "textcoords", "=", "\"offset points\"", ",", "ha", "=", "'center'", ",", "va", "=", "'bottom'", ",", "size", "=", "6", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.CorrelationsEncoded.compute_plot_correlations": [[8, 89], ["df.corr", "pandas.DataFrame", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "len", "range", "matplotlib.figure", "seaborn.heatmap", "sns.heatmap.set_xticklabels", "sns.heatmap.set_yticklabels", "cbar.ax.tick_params", "matplotlib.show", "matplotlib.close", "round", "pd.DataFrame.drop", "pd.DataFrame.drop", "os.path.join", "os.path.join", "len", "matplotlib.show", "matplotlib.close", "sns.heatmap.get_xmajorticklabels", "sns.heatmap.get_ymajorticklabels", "matplotlib.savefig", "matplotlib.savefig", "len", "len", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat().reset_index", "pandas.concat().reset_index", "matplotlib.figure", "seaborn.heatmap", "sns.heatmap.set_xticklabels", "sns.heatmap.set_yticklabels", "cbar.ax.tick_params", "matplotlib.savefig", "matplotlib.savefig", "os.path.join", "os.path.join", "correlation_df[].value_counts", "pd.DataFrame.iloc[].values.reshape", "pd.DataFrame.iloc[].values.reshape", "sns.heatmap.get_xmajorticklabels", "sns.heatmap.get_ymajorticklabels", "len", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat().reset_index", "pandas.concat().reset_index", "matplotlib.figure", "seaborn.heatmap", "sns.heatmap.set_xticklabels", "sns.heatmap.set_yticklabels", "cbar.ax.tick_params", "os.path.join", "os.path.join", "pandas.concat", "pandas.concat", "pd.DataFrame.iloc[].values.reshape", "pd.DataFrame.iloc[].values.reshape", "sns.heatmap.get_xmajorticklabels", "sns.heatmap.get_ymajorticklabels", "pandas.concat", "pandas.concat"], "function", ["None"], ["def", "compute_plot_correlations", "(", "EDA_output", ",", "out", ",", "df", ",", "dataset_name", ",", "method_name", ",", "f", ",", "feat_num", ")", ":", "\n", "    ", "correlation_df", "=", "df", ".", "corr", "(", ")", "\n", "correlation_df", "=", "pd", ".", "DataFrame", "(", "[", "round", "(", "correlation_df", "[", "x", "]", ",", "3", ")", "for", "x", "in", "correlation_df", "]", ")", "\n", "for", "x", "in", "correlation_df", ":", "\n", "        ", "if", "(", "len", "(", "correlation_df", "[", "x", "]", ".", "value_counts", "(", ")", ")", "==", "0", ")", "and", "(", "x", "!=", "'encoded_label'", ")", ":", "\n", "            ", "correlation_df", ".", "drop", "(", "[", "x", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "correlation_df", ".", "drop", "(", "[", "x", "]", ",", "axis", "=", "0", ",", "inplace", "=", "True", ")", "\n", "", "", "if", "f", ":", "\n", "        ", "correlation_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ",", "'Numerical_correlations_%s_%s_%s.csv'", "%", "(", "\n", "dataset_name", ",", "method_name", ",", "feat_num", ")", ")", ",", "sep", "=", "';'", ")", "\n", "", "else", ":", "\n", "        ", "correlation_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ",", "'Categorical_correlations_%s_%s_%s.csv'", "%", "(", "\n", "dataset_name", ",", "method_name", ",", "feat_num", ")", ")", ",", "sep", "=", "';'", ")", "\n", "# to split columns so as not to be plot in one figure:", "\n", "", "if", "len", "(", "correlation_df", ".", "columns", ")", ">=", "10", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "correlation_df", ".", "columns", ")", ",", "15", ")", ":", "\n", "            ", "end", "=", "i", "+", "15", "\n", "if", "end", "<", "len", "(", "correlation_df", ".", "columns", ")", ":", "\n", "                ", "df1", "=", "pd", ".", "DataFrame", "(", "correlation_df", ".", "iloc", "[", "i", ":", "end", ",", "i", ":", "end", "]", ".", "values", ",", "columns", "=", "correlation_df", ".", "columns", "[", "i", ":", "end", "]", ")", "\n", "df2", "=", "pd", ".", "DataFrame", "(", "correlation_df", ".", "iloc", "[", "-", "1", ",", "i", ":", "end", "]", ".", "values", ".", "reshape", "(", "1", ",", "end", "-", "i", ")", ",", "\n", "columns", "=", "correlation_df", ".", "columns", "[", "i", ":", "end", "]", ")", "\n", "df3", "=", "pd", ".", "DataFrame", "(", "correlation_df", ".", "iloc", "[", "i", ":", "end", ",", "-", "1", "]", ".", "values", ".", "reshape", "(", "end", "-", "i", ",", "1", ")", ",", "\n", "columns", "=", "[", "correlation_df", ".", "columns", "[", "-", "1", "]", "]", ")", "\n", "plot_df", "=", "pd", ".", "concat", "(", "[", "df1", ",", "df2", "]", ",", "axis", "=", "0", ",", "sort", "=", "False", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "plot_df_final", "=", "pd", ".", "concat", "(", "[", "plot_df", ",", "df3", "]", ",", "axis", "=", "1", ",", "sort", "=", "False", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "8", ")", ")", "\n", "res", "=", "sns", ".", "heatmap", "(", "plot_df_final", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "12", "}", ",", "fmt", "=", "'.3f'", ",", "\n", "xticklabels", "=", "plot_df_final", ".", "columns", ",", "yticklabels", "=", "plot_df_final", ".", "columns", ",", "cmap", "=", "'coolwarm'", ")", "\n", "res", ".", "set_xticklabels", "(", "res", ".", "get_xmajorticklabels", "(", ")", ",", "fontsize", "=", "12", ")", "\n", "res", ".", "set_yticklabels", "(", "res", ".", "get_ymajorticklabels", "(", ")", ",", "fontsize", "=", "12", ")", "\n", "# use matplotlib.colorbar.Colorbar object", "\n", "cbar", "=", "res", ".", "collections", "[", "0", "]", ".", "colorbar", "\n", "# here set the labelsize by 20", "\n", "cbar", ".", "ax", ".", "tick_params", "(", "labelsize", "=", "12", ")", "\n", "", "else", ":", "\n", "                ", "end", "=", "len", "(", "correlation_df", ".", "columns", ")", "-", "1", "\n", "if", "i", "!=", "end", ":", "\n", "                    ", "df1", "=", "pd", ".", "DataFrame", "(", "correlation_df", ".", "iloc", "[", "i", ":", "end", ",", "i", ":", "end", "]", ".", "values", ",", "columns", "=", "correlation_df", ".", "columns", "[", "i", ":", "end", "]", ")", "\n", "df2", "=", "pd", ".", "DataFrame", "(", "correlation_df", ".", "iloc", "[", "-", "1", ",", "i", ":", "end", "]", ".", "values", ".", "reshape", "(", "1", ",", "end", "-", "i", ")", ",", "\n", "columns", "=", "correlation_df", ".", "columns", "[", "i", ":", "end", "]", ")", "\n", "df3", "=", "pd", ".", "DataFrame", "(", "correlation_df", ".", "iloc", "[", "i", ":", "end", ",", "-", "1", "]", ".", "values", ".", "reshape", "(", "end", "-", "i", ",", "1", ")", ",", "\n", "columns", "=", "[", "correlation_df", ".", "columns", "[", "-", "1", "]", "]", ")", "\n", "\n", "plot_df", "=", "pd", ".", "concat", "(", "[", "df1", ",", "df2", "]", ",", "axis", "=", "0", ",", "sort", "=", "False", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "plot_df_final", "=", "pd", ".", "concat", "(", "[", "plot_df", ",", "df3", "]", ",", "axis", "=", "1", ",", "sort", "=", "False", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "8", ")", ")", "\n", "res", "=", "sns", ".", "heatmap", "(", "plot_df_final", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "12", "}", ",", "fmt", "=", "'.3f'", ",", "\n", "xticklabels", "=", "plot_df_final", ".", "columns", ",", "yticklabels", "=", "plot_df_final", ".", "columns", ",", "\n", "cmap", "=", "'coolwarm'", ")", "\n", "res", ".", "set_xticklabels", "(", "res", ".", "get_xmajorticklabels", "(", ")", ",", "fontsize", "=", "12", ")", "\n", "res", ".", "set_yticklabels", "(", "res", ".", "get_ymajorticklabels", "(", ")", ",", "fontsize", "=", "12", ")", "\n", "# use matplotlib.colorbar.Colorbar object", "\n", "cbar", "=", "res", ".", "collections", "[", "0", "]", ".", "colorbar", "\n", "# here set the labelsize by 20", "\n", "cbar", ".", "ax", ".", "tick_params", "(", "labelsize", "=", "12", ")", "\n", "", "", "if", "f", ":", "\n", "                ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ",", "'correlation matrix_%s_numerical_%s_%s_part_%s.png'", "%", "(", "\n", "dataset_name", ",", "method_name", ",", "feat_num", ",", "i", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ",", "'correlation matrix_%s_categorical_%s_%s_part_%s.png'", "%", "(", "\n", "dataset_name", ",", "method_name", ",", "feat_num", ",", "i", ")", ")", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "10", ")", ")", "\n", "res", "=", "sns", ".", "heatmap", "(", "correlation_df", ",", "annot", "=", "True", ",", "annot_kws", "=", "{", "\"size\"", ":", "12", "}", ",", "fmt", "=", "'.3f'", ",", "\n", "xticklabels", "=", "correlation_df", ".", "columns", ",", "yticklabels", "=", "correlation_df", ".", "columns", ",", "cmap", "=", "'coolwarm'", ")", "\n", "res", ".", "set_xticklabels", "(", "res", ".", "get_xmajorticklabels", "(", ")", ",", "fontsize", "=", "12", ")", "\n", "res", ".", "set_yticklabels", "(", "res", ".", "get_ymajorticklabels", "(", ")", ",", "fontsize", "=", "12", ")", "\n", "# use matplotlib.colorbar.Colorbar object", "\n", "cbar", "=", "res", ".", "collections", "[", "0", "]", ".", "colorbar", "\n", "# here set the labelsize by 20", "\n", "cbar", ".", "ax", ".", "tick_params", "(", "labelsize", "=", "12", ")", "\n", "if", "(", "f", "==", "True", ")", ":", "\n", "            ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ",", "'correlation matrix_%s_numerical_%s_%s.png'", "%", "(", "\n", "dataset_name", ",", "method_name", ",", "feat_num", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ",", "'correlation matrix_%s_categorical_%s_%s.png'", "%", "(", "\n", "dataset_name", ",", "method_name", ",", "feat_num", ")", ")", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.CorrelationsEncoded.compute_correlations": [[91, 128], ["pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.DataFrame", "pandas.concat", "pandas.concat", "pandas.concat", "xx.extend", "num_corr_cols.append", "cat_df_cols.append", "pandas.concat", "pandas.concat", "CorrelationsEncoded.compute_plot_correlations", "CorrelationsEncoded.compute_plot_correlations", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "cat_df_cols.append", "num_corr_cols.append"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.CorrelationsEncoded.compute_plot_correlations", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.CorrelationsEncoded.compute_plot_correlations"], ["", "", "def", "compute_correlations", "(", "cls_method", ",", "method_name", ",", "ffeatures", ",", "encoded_training", ",", "train_y_experiment", ",", "encoded_testing_bucket", ",", "test_y_all", ",", "dataset_name", ",", "cls_encoder_args_final", ",", "feat_num", ")", ":", "\n", "    ", "EDA_output", "=", "'EDA_output_%s'", "%", "(", "method_name", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "EDA_output", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "EDA_output", ")", "\n", "\n", "", "out", "=", "'correlations_%s_%s_%s_%s'", "%", "(", "dataset_name", ",", "method_name", ",", "cls_method", ",", "feat_num", ")", "\n", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ")", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ")", ")", "\n", "", "train_y_experiment", "=", "pd", ".", "DataFrame", "(", "train_y_experiment", ",", "columns", "=", "[", "'encoded_label'", "]", ")", "\n", "test_y_all", "=", "pd", ".", "DataFrame", "(", "test_y_all", ",", "columns", "=", "[", "'encoded_label'", "]", ")", "\n", "encoded_training", "=", "pd", ".", "DataFrame", "(", "encoded_training", ",", "columns", "=", "ffeatures", ")", "\n", "encoded_testing_bucket", "=", "pd", ".", "DataFrame", "(", "encoded_testing_bucket", ",", "columns", "=", "ffeatures", ")", "\n", "df_train", "=", "pd", ".", "concat", "(", "[", "encoded_training", ",", "train_y_experiment", "]", ",", "axis", "=", "1", ",", "sort", "=", "False", ")", "\n", "df_test", "=", "pd", ".", "concat", "(", "[", "encoded_testing_bucket", ",", "test_y_all", "]", ",", "axis", "=", "1", ",", "sort", "=", "False", ")", "\n", "total_df", "=", "pd", ".", "concat", "(", "[", "df_train", ",", "df_test", "]", ",", "axis", "=", "0", ",", "sort", "=", "False", ")", "\n", "xx", "=", "[", "cls_encoder_args_final", "[", "'case_id_col'", "]", "]", "\n", "xx", ".", "extend", "(", "cls_encoder_args_final", "[", "'static_cat_cols'", "]", "+", "cls_encoder_args_final", "[", "'dynamic_cat_cols'", "]", ")", "\n", "flag", "=", "True", "\n", "num_corr_cols", "=", "[", "]", "\n", "cat_df_cols", "=", "[", "]", "\n", "for", "i", "in", "ffeatures", ":", "\n", "        ", "for", "j", "in", "xx", ":", "\n", "            ", "if", "j", "in", "i", ":", "\n", "                ", "flag", "=", "False", "\n", "break", "\n", "", "", "if", "not", "flag", ":", "\n", "            ", "cat_df_cols", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "num_corr_cols", ".", "append", "(", "i", ")", "\n", "", "flag", "=", "True", "\n", "", "num_corr_cols", ".", "append", "(", "'encoded_label'", ")", "\n", "cat_df_cols", ".", "append", "(", "'encoded_label'", ")", "\n", "num_df", "=", "pd", ".", "concat", "(", "[", "total_df", "[", "x", "]", "for", "x", "in", "num_corr_cols", "]", ",", "axis", "=", "1", ",", "sort", "=", "False", ")", "\n", "cat_df", "=", "pd", ".", "concat", "(", "[", "total_df", "[", "x", "]", "for", "x", "in", "cat_df_cols", "]", ",", "axis", "=", "1", ",", "sort", "=", "False", ")", "\n", "compute_plot_correlations", "(", "EDA_output", ",", "out", ",", "num_df", ",", "dataset_name", ",", "method_name", ",", "True", ",", "feat_num", ")", "\n", "compute_plot_correlations", "(", "EDA_output", ",", "out", ",", "cat_df", ",", "dataset_name", ",", "method_name", ",", "False", ",", "feat_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.plotting_comparisons.plot_shap_dependence": [[11, 41], ["matplotlib.pyplot.figure", "matplotlib.pyplot.savefig", "matplotlib.pyplot.clf", "os.path.join", "comparison.all", "plt.figure.add_subplot", "fig.add_subplot.set_title", "fig.add_subplot.tick_params", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "str", "shap.plots.scatter", "shap.dependence_plot"], "function", ["None"], ["def", "plot_shap_dependence", "(", "SHAP_comparisons", ",", "frmt_str", ",", "specs", ",", "shap_values_xgboost", ",", "shap_values_logit", ",", "feature", ",", "plot_type", ",", "X", ",", "ffeatures", ")", ":", "\n", "  ", "if", "plot_type", "==", "'Importance'", ":", "\n", "      ", "fig_str", "=", "'ShapDependence_impClassifiers_%s_%s'", "%", "(", "frmt_str", ",", "feature", ")", "\n", "", "else", ":", "\n", "      ", "fig_str", "=", "'ShapDependence_%s_withOthers_%s_%s'", "%", "(", "plot_type", ",", "frmt_str", ",", "feature", ")", "\n", "", "c", "=", "0", "\n", "nrows", ",", "ncols", ",", "figure_size", ",", "font_s", "=", "specs", "[", "0", "]", ",", "specs", "[", "1", "]", ",", "specs", "[", "2", "]", ",", "specs", "[", "3", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figure_size", ")", "\n", "for", "shap_vals", "in", "[", "shap_values_xgboost", ",", "shap_values_logit", "]", ":", "\n", "            ", "try", ":", "\n", "                  ", "comparison", "=", "shap_vals", "==", "shap_values_xgboost", "\n", "if", "comparison", ".", "all", "(", ")", ":", "\n", "                      ", "classifier", "=", "'xgboost'", "\n", "", "else", ":", "\n", "                      ", "classifier", "=", "'logit'", "\n", "", "c", "+=", "1", "\n", "#compare shap values for the same feature in both classifiers", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "nrows", ",", "ncols", ",", "c", ")", "\n", "if", "shap", ".", "__version__", ">=", "str", "(", "0.37", ")", ":", "\n", "                      ", "shap", ".", "plots", ".", "scatter", "(", "shap_vals", "[", ":", ",", "feature", "]", ",", "color", "=", "shap_vals", ",", "show", "=", "False", ",", "ax", "=", "ax", ")", "\n", "", "else", ":", "\n", "                      ", "shap", ".", "dependence_plot", "(", "feature", ",", "shap_vals", ",", "X", ",", "feature_names", "=", "ffeatures", ",", "show", "=", "False", ",", "ax", "=", "ax", ")", "\n", "", "ax", ".", "set_title", "(", "'Dependence_plot of (%s) in (%s)'", "%", "(", "feature", ",", "classifier", ")", ",", "size", "=", "font_s", ")", "\n", "ax", ".", "tick_params", "(", "labelsize", "=", "font_s", "-", "3", ",", "labeltop", "=", "False", ",", "labelright", "=", "False", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", "=", "feature", ",", "fontsize", "=", "font_s", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", "=", "'shap values for %s'", "%", "(", "feature", ")", ",", "fontsize", "=", "font_s", ")", "\n", "", "except", ":", "\n", "                    ", "pass", "\n", "", "", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "SHAP_comparisons", ",", "'%s.png'", "%", "(", "fig_str", ")", ")", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "'tight'", ")", ";", "\n", "plt", ".", "clf", "(", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.plotting_comparisons.plot_perm": [[44, 81], ["matplotlib.pyplot.figure", "plt.figure.subplots_adjust", "plt.figure.text", "plt.figure.text", "plt.figure.legend", "matplotlib.pyplot.savefig", "matplotlib.pyplot.clf", "range", "os.path.join", "[].split", "[].split", "numpy.arange", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.grid", "fig.add_subplot.set_title", "fig.add_subplot.tick_params", "fig.add_subplot.get_legend_handles_labels", "len", "len", "plt.figure.delaxes", "float", "float"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.plots_annot.plot", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.plotting.plots_annot.plot"], ["", "def", "plot_perm", "(", "perm_comparisons", ",", "frmt_str", ",", "specs", ",", "perm_logit_df", ",", "perm_xgboost_df", ",", "feats_tobe_plotted", ",", "plot_type", ")", ":", "\n", "  ", "if", "plot_type", "==", "'Importance'", ":", "\n", "      ", "fig_str", "=", "'Perm_comparison_importantToClassifiers_%s'", "%", "(", "frmt_str", ")", "\n", "", "else", ":", "\n", "      ", "fig_str", "=", "'Perm_comparison_%s_withOthers_%s'", "%", "(", "plot_type", ",", "frmt_str", ")", "\n", "", "c", "=", "0", "\n", "nrows", ",", "ncols", ",", "figure_size", ",", "font_s", "=", "specs", "[", "0", "]", ",", "specs", "[", "1", "]", ",", "specs", "[", "2", "]", ",", "specs", "[", "3", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figure_size", ")", ";", "\n", "fig", ".", "subplots_adjust", "(", "hspace", "=", ".5", ",", "wspace", "=", ".5", ")", "\n", "fig", ".", "text", "(", "0.5", ",", "0.04", ",", "'Repetitions'", ",", "ha", "=", "'center'", ",", "fontsize", "=", "font_s", ")", "\n", "fig", ".", "text", "(", "0.04", ",", "0.5", ",", "'Importance Values'", ",", "va", "=", "'center'", ",", "rotation", "=", "'vertical'", ",", "fontsize", "=", "font_s", ")", "\n", "for", "f", "in", "feats_tobe_plotted", ":", "\n", "        ", "try", ":", "\n", "              ", "feature_importance_logit", "=", "perm_logit_df", ".", "loc", "[", "perm_logit_df", "[", "'Feature'", "]", "==", "f", ",", "'importances'", "]", ".", "iloc", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "\n", "feature_importance_logit", "=", "[", "float", "(", "i", ")", "for", "i", "in", "feature_importance_logit", "if", "i", "]", "\n", "feature_importance_xgboost", "=", "perm_xgboost_df", ".", "loc", "[", "perm_xgboost_df", "[", "'Feature'", "]", "==", "f", ",", "'importances'", "]", ".", "iloc", "[", "0", "]", "[", "1", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "\n", "feature_importance_xgboost", "=", "[", "float", "(", "i", ")", "for", "i", "in", "feature_importance_xgboost", "if", "i", "]", "\n", "c", "+=", "1", "\n", "x", "=", "np", ".", "arange", "(", "1", ",", "11", ")", "\n", "#compare models", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "nrows", ",", "ncols", ",", "c", ")", "\n", "ax", ".", "plot", "(", "x", ",", "feature_importance_xgboost", ",", "linestyle", "=", "'solid'", ",", "label", "=", "'XGB'", ",", "color", "=", "'b'", ")", ";", "\n", "ax", ".", "plot", "(", "x", ",", "feature_importance_logit", ",", "linestyle", "=", "'solid'", ",", "label", "=", "'LR'", ",", "color", "=", "'r'", ")", ";", "\n", "ax", ".", "grid", "(", "ls", "=", "':'", ",", "which", "=", "'both'", ",", "axis", "=", "'both'", ")", "\n", "ax", ".", "set_title", "(", "'(%s)'", "%", "(", "f", ")", ",", "size", "=", "font_s", "-", "2", ")", "\n", "ax", ".", "tick_params", "(", "labelsize", "=", "font_s", "-", "3", ",", "labeltop", "=", "False", ",", "labelright", "=", "False", ")", "\n", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "#together with the last line before this comment, these two lines define a single legend for the subplots", "\n", "", "", "fig", ".", "legend", "(", "handles", ",", "labels", ",", "loc", "=", "'lower center'", ",", "bbox_to_anchor", "=", "[", "0.35", ",", "0", "]", ",", "fontsize", "=", "font_s", "-", "2", ")", "\n", "if", "len", "(", "feats_tobe_plotted", ")", "<", "(", "nrows", "*", "ncols", ")", "and", "plot_type", "!=", "'Importance'", ":", "\n", "      ", "diff", "=", "(", "nrows", "*", "ncols", ")", "-", "len", "(", "feats_tobe_plotted", ")", "\n", "for", "i", "in", "range", "(", "diff", ")", ":", "\n", "        ", "fig", ".", "delaxes", "(", "axes", "[", "nrows", "-", "1", "]", "[", "ncols", "-", "(", "i", "+", "1", ")", "]", ")", "\n", "", "", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "perm_comparisons", ",", "'%s.png'", "%", "(", "fig_str", ")", ")", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "'tight'", ")", ";", "\n", "plt", ".", "clf", "(", ")", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.clustering_params.compute_best_params": [[8, 28], ["pandas.DataFrame", "subject_datasets_df.itertuples", "best_params_df.append.to_csv", "helpers.Data_retrieval.retrieve_artefact", "helpers.Data_retrieval.retrieve_artefact.isnull().values.any", "helpers.Data_retrieval.retrieve_artefact.fillna", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit_predict", "sklearn.metrics.silhouette_score", "best_params_df.append.append", "pandas.DataFrame", "helpers.Data_retrieval.retrieve_artefact.isnull"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_artefact", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit_predict"], ["def", "compute_best_params", "(", "clusters_scores", ",", "encoded_datasets_dir", ",", "datasets", ",", "method_name", ",", "subject_datasets_df", ")", ":", "\n", "    ", "\"\"\"\n    a function to compute the average Silhouette score with different cluster numbers\n    inputs: dataset names, method name, directory of encoded datasets, scores file, a dataframe with information about subject datasets\n    outputs: a csv file\n    \"\"\"", "\n", "best_params_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "[", "'dataset'", ",", "'method'", ",", "'bkt_size'", ",", "'prfx_len'", ",", "'feat_num'", ",", "'n_clusters'", ",", "'Silhouette_scores'", "]", ")", "\n", "for", "row", "in", "subject_datasets_df", ".", "itertuples", "(", ")", ":", "\n", "            ", "if", "row", "[", "2", "]", "==", "method_name", "and", "row", "[", "1", "]", "in", "datasets", ":", "\n", "              ", "dataset_df", "=", "retrieve_artefact", "(", "encoded_datasets_dir", ",", "'.csv'", ",", "'encoded_training'", ",", "row", "[", "1", "]", ",", "row", "[", "2", "]", ",", "row", "[", "3", "]", ",", "row", "[", "4", "]", ",", "row", "[", "5", "]", ")", "\n", "if", "dataset_df", ".", "isnull", "(", ")", ".", "values", ".", "any", "(", ")", ":", "\n", "                  ", "dataset_df", ".", "fillna", "(", "0", ")", "\n", "", "range_n_clusters", "=", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", "\n", "for", "cluster_n", "in", "range_n_clusters", ":", "\n", "                ", "clusterer", "=", "KMeans", "(", "n_clusters", "=", "cluster_n", ",", "random_state", "=", "42", ")", "\n", "cluster_labels", "=", "clusterer", ".", "fit_predict", "(", "dataset_df", ")", "\n", "silhouette_avg", "=", "silhouette_score", "(", "dataset_df", ",", "cluster_labels", ")", "\n", "best_params_df", "=", "best_params_df", ".", "append", "(", "pd", ".", "DataFrame", "(", "[", "[", "row", "[", "1", "]", ",", "row", "[", "2", "]", ",", "row", "[", "3", "]", ",", "row", "[", "4", "]", ",", "row", "[", "5", "]", ",", "cluster_n", ",", "silhouette_avg", "]", "]", ",", "columns", "=", "best_params_df", ".", "columns", ")", ")", "\n", "", "", "", "best_params_df", ".", "to_csv", "(", "clusters_scores", ",", "mode", "=", "'a'", ",", "header", "=", "False", ",", "sep", "=", "';'", ",", "index", "=", "False", ")", "\n", "return", "", "", ""]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.features_retrieval.get_correlated_features": [[10, 45], ["corr_df.index[].tolist.copy", "corr_artefact.copy.items", "corr_artefact.copy.copy", "corr_artefact.copy.keys", "corr_df.index[].tolist", "corr_df.index[].tolist", "v.remove", "v.remove", "corr_df.index[].tolist.pop", "corr_df.index[].tolist.remove", "abs", "abs"], "function", ["None"], ["def", "get_correlated_features", "(", "corr_df", ",", "threshold", ",", "corr_type", ",", "output_file", ")", ":", "\n", "    ", "if", "corr_type", "==", "'others'", ":", "\n", "#this dictionary represents features with correlation >= threshold with the other features:", "\n", "          ", "corr_artefact", "=", "{", "}", "\n", "try", ":", "\n", "            ", "for", "cor", "in", "corr_df", ".", "columns", "[", "1", ":", "]", ":", "\n", "                ", "l", "=", "corr_df", ".", "index", "[", "(", "abs", "(", "corr_df", "[", "cor", "]", ")", ">=", "threshold", ")", "]", ".", "tolist", "(", ")", "#to get features highly correlated with others", "\n", "corr_artefact", "[", "cor", "]", "=", "l", "\n", "\n", "#to remove the feature itself and the target from highly correlated list of features", "\n", "", "tmp", "=", "corr_artefact", ".", "copy", "(", ")", "\n", "for", "k", ",", "v", "in", "tmp", ".", "items", "(", ")", ":", "\n", "                ", "if", "(", "k", "in", "v", ")", ":", "\n", "                  ", "v", ".", "remove", "(", "k", ")", "\n", "", "if", "(", "'encoded_label'", "in", "v", ")", ":", "\n", "                  ", "v", ".", "remove", "(", "'encoded_label'", ")", "\n", "\n", "", "", "corr_artefact", "=", "tmp", ".", "copy", "(", ")", "\n", "for", "k", "in", "tmp", ".", "keys", "(", ")", ":", "\n", "                ", "if", "not", "tmp", "[", "k", "]", ":", "\n", "                  ", "corr_artefact", ".", "pop", "(", "k", ",", "None", ")", "\n", "", "", "", "except", "ValueError", ":", "\n", "             ", "pass", "\n", "\n", "", "", "else", ":", "\n", "#this list represents features with correlation >= threshold with the target:", "\n", "        ", "corr_artefact", "=", "[", "]", "\n", "try", ":", "\n", "            ", "corr_artefact", "=", "corr_df", ".", "index", "[", "abs", "(", "corr_df", "[", "corr_df", ".", "columns", "[", "-", "1", "]", "]", ")", ">=", "threshold", "]", ".", "tolist", "(", ")", "#to get features highly correlated with the target", "\n", "for", "col", "in", "corr_artefact", ":", "\n", "              ", "if", "'label'", "in", "col", ":", "\n", "                ", "corr_artefact", ".", "remove", "(", "col", ")", "\n", "", "", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "return", "corr_artefact", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.features_retrieval.get_important_features": [[48, 73], ["helpers.Data_retrieval.retrieve_artefact", "helpers.Data_retrieval.retrieve_artefact", "helpers.Data_retrieval.retrieve_artefact.get_booster().get_score", "pandas.DataFrame", "mapped_df.reset_index.sort_values", "mapped_df.reset_index.reset_index", "helpers.Data_retrieval.retrieve_artefact", "helpers.Data_retrieval.retrieve_artefact.coef_.reshape", "pandas.DataFrame().astype", "coefs_df.reset_index.sort_values", "coefs_df.reset_index.reset_index", "list", "range", "helpers.Data_retrieval.retrieve_artefact.get_booster", "pandas.DataFrame", "list", "mapped_df.reset_index.iloc[].append", "len", "set", "xgb_model.get_booster().get_score.items"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_artefact", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_artefact", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_artefact"], ["", "def", "get_important_features", "(", "folder", ",", "compared_feat", ",", "dataset_name", ",", "method_name", ",", "bkt_size", ",", "prfx_len", ",", "feat_num", ",", "gap", ")", ":", "\n", "    ", "frmt_str", "=", "'%s_%s_%s_%s'", "%", "(", "dataset_name", ",", "method_name", ",", "bkt_size", ",", "prfx_len", ")", "\n", "ffeatures", "=", "retrieve_artefact", "(", "folder", ",", "'.pickle'", ",", "'ffeatures'", ",", "'xgboost'", ",", "frmt_str", ")", "\n", "mapper", "=", "{", "'f{0}'", ".", "format", "(", "i", ")", ":", "ffeatures", "[", "i", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "ffeatures", ")", ")", "}", "\n", "#get the feature with the highest importance in the xgboost model:", "\n", "xgb_model", "=", "retrieve_artefact", "(", "folder", ",", "'.pickle'", ",", "'model'", ",", "'xgboost'", ",", "frmt_str", ",", "feat_num", ")", "\n", "xgb_scores", "=", "xgb_model", ".", "get_booster", "(", ")", ".", "get_score", "(", "importance_type", "=", "'gain'", ")", "\n", "mapped_df", "=", "pd", ".", "DataFrame", "(", "list", "(", "{", "mapper", "[", "k", "]", ":", "v", "for", "k", ",", "v", "in", "xgb_scores", ".", "items", "(", ")", "}", ".", "items", "(", ")", ")", ",", "columns", "=", "[", "'Feature'", ",", "'Importance'", "]", ")", "\n", "mapped_df", ".", "sort_values", "(", "by", "=", "[", "'Importance'", "]", ",", "ascending", "=", "False", ",", "inplace", "=", "True", ")", "\n", "mapped_df", "=", "mapped_df", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "#get the feature with the highest coefficient in the logit model:", "\n", "logit_model", "=", "retrieve_artefact", "(", "folder", ",", "'.pickle'", ",", "'model'", ",", "'logit'", ",", "frmt_str", ",", "feat_num", ")", "\n", "coefs", "=", "logit_model", ".", "coef_", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "coefs_df", "=", "pd", ".", "DataFrame", "(", "coefs", ",", "columns", "=", "[", "'coef'", "]", ")", ".", "astype", "(", "float", ")", "\n", "coefs_df", "[", "'Variable'", "]", "=", "ffeatures", "\n", "coefs_df", ".", "sort_values", "(", "by", "=", "[", "'coef'", "]", ",", "ascending", "=", "False", ",", "inplace", "=", "True", ")", "\n", "coefs_df", "=", "coefs_df", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "try", ":", "\n", "        ", "if", "compared_feat", "==", "1", ":", "\n", "          ", "return", "list", "(", "set", "(", "[", "mapped_df", ".", "iloc", "[", "0", ",", "0", "]", ",", "coefs_df", ".", "iloc", "[", "0", ",", "1", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "          ", "return", "mapped_df", ".", "iloc", "[", "0", ":", "compared_feat", ",", "0", "]", ".", "append", "(", "coefs_df", ".", "iloc", "[", "0", ":", "compared_feat", ",", "1", "]", ",", "ignore_index", "=", "True", ")", "\n", "", "", "except", ":", "\n", "        ", "if", "mapped_df", ".", "empty", "or", "coefs_df", ".", "empty", ":", "\n", "            ", "return", "'quit'", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.StaticTransformer.__init__": [[24, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "case_id_col", ",", "cat_cols", ",", "num_cols", ",", "fillna", "=", "True", ")", ":", "\n", "        ", "self", ".", "case_id_col", "=", "case_id_col", "\n", "self", ".", "cat_cols", "=", "cat_cols", "\n", "self", ".", "num_cols", "=", "num_cols", "\n", "self", ".", "fillna", "=", "fillna", "\n", "\n", "self", ".", "columns", "=", "None", "\n", "\n", "self", ".", "fit_time", "=", "0", "\n", "self", ".", "transform_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.StaticTransformer.fit": [[36, 38], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.StaticTransformer.transform": [[40, 68], ["time.time", "X.groupby().first", "len", "pandas.get_dummies", "pandas.concat", "dt_transformed.fillna.fillna.fillna", "time.time", "X.groupby"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "dt_first", "=", "X", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "first", "(", ")", "\n", "\n", "# transform numeric cols", "\n", "dt_transformed", "=", "dt_first", "[", "self", ".", "num_cols", "]", "\n", "\n", "# transform cat cols", "\n", "if", "len", "(", "self", ".", "cat_cols", ")", ">", "0", ":", "\n", "            ", "dt_cat", "=", "pd", ".", "get_dummies", "(", "dt_first", "[", "self", ".", "cat_cols", "]", ")", "\n", "dt_transformed", "=", "pd", ".", "concat", "(", "[", "dt_transformed", ",", "dt_cat", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# fill NA with 0 if requested", "\n", "", "if", "self", ".", "fillna", ":", "\n", "            ", "dt_transformed", "=", "dt_transformed", ".", "fillna", "(", "0", ")", "\n", "\n", "# add missing columns if necessary", "\n", "", "if", "self", ".", "columns", "is", "not", "None", ":", "\n", "            ", "missing_cols", "=", "[", "col", "for", "col", "in", "self", ".", "columns", "if", "col", "not", "in", "dt_transformed", ".", "columns", "]", "\n", "for", "col", "in", "missing_cols", ":", "\n", "                ", "dt_transformed", "[", "col", "]", "=", "0", "\n", "", "dt_transformed", "=", "dt_transformed", "[", "self", ".", "columns", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "columns", "=", "dt_transformed", ".", "columns", "\n", "\n", "", "self", ".", "transform_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "return", "dt_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.StaticTransformer.get_feature_names": [[69, 71], ["None"], "methods", ["None"], ["", "def", "get_feature_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.AggregateTransformer.__init__": [[76, 88], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "case_id_col", ",", "cat_cols", ",", "num_cols", ",", "boolean", "=", "False", ",", "fillna", "=", "True", ")", ":", "\n", "        ", "self", ".", "case_id_col", "=", "case_id_col", "\n", "self", ".", "cat_cols", "=", "cat_cols", "\n", "self", ".", "num_cols", "=", "num_cols", "\n", "\n", "self", ".", "boolean", "=", "boolean", "\n", "self", ".", "fillna", "=", "fillna", "\n", "\n", "self", ".", "columns", "=", "None", "\n", "\n", "self", ".", "fit_time", "=", "0", "\n", "self", ".", "transform_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.AggregateTransformer.fit": [[90, 92], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.AggregateTransformer.transform": [[93, 130], ["time.time", "pandas.get_dummies", "len", "[].agg", "dt_transformed.fillna.fillna.groupby().max", "dt_transformed.fillna.fillna.groupby().sum", "len", "pandas.concat", "dt_transformed.fillna.fillna.fillna", "time.time", "dt_transformed.fillna.fillna.groupby", "dt_transformed.fillna.fillna.groupby", "X.groupby"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# transform numeric cols", "\n", "if", "len", "(", "self", ".", "num_cols", ")", ">", "0", ":", "\n", "            ", "dt_numeric", "=", "X", ".", "groupby", "(", "self", ".", "case_id_col", ")", "[", "self", ".", "num_cols", "]", ".", "agg", "(", "{", "'mean'", ":", "np", ".", "mean", ",", "'max'", ":", "np", ".", "max", ",", "'min'", ":", "np", ".", "min", ",", "'sum'", ":", "np", ".", "sum", ",", "'std'", ":", "np", ".", "std", "}", ")", "\n", "dt_numeric", ".", "columns", "=", "[", "'_'", ".", "join", "(", "col", ")", ".", "strip", "(", ")", "for", "col", "in", "dt_numeric", ".", "columns", ".", "values", "]", "\n", "\n", "# transform cat cols", "\n", "", "dt_transformed", "=", "pd", ".", "get_dummies", "(", "X", "[", "self", ".", "cat_cols", "]", ")", "\n", "dt_transformed", "[", "self", ".", "case_id_col", "]", "=", "X", "[", "self", ".", "case_id_col", "]", "\n", "del", "X", "\n", "if", "self", ".", "boolean", ":", "\n", "            ", "dt_transformed", "=", "dt_transformed", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "            ", "dt_transformed", "=", "dt_transformed", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "sum", "(", ")", "\n", "\n", "# concatenate", "\n", "", "if", "len", "(", "self", ".", "num_cols", ")", ">", "0", ":", "\n", "            ", "dt_transformed", "=", "pd", ".", "concat", "(", "[", "dt_transformed", ",", "dt_numeric", "]", ",", "axis", "=", "1", ")", "\n", "del", "dt_numeric", "\n", "\n", "# fill missing values with 0-s", "\n", "", "if", "self", ".", "fillna", ":", "\n", "            ", "dt_transformed", "=", "dt_transformed", ".", "fillna", "(", "0", ")", "\n", "\n", "# add missing columns if necessary", "\n", "", "if", "self", ".", "columns", "is", "None", ":", "\n", "            ", "self", ".", "columns", "=", "dt_transformed", ".", "columns", "\n", "", "else", ":", "\n", "            ", "missing_cols", "=", "[", "col", "for", "col", "in", "self", ".", "columns", "if", "col", "not", "in", "dt_transformed", ".", "columns", "]", "\n", "for", "col", "in", "missing_cols", ":", "\n", "                ", "dt_transformed", "[", "col", "]", "=", "0", "\n", "", "dt_transformed", "=", "dt_transformed", "[", "self", ".", "columns", "]", "\n", "\n", "", "self", ".", "transform_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "return", "dt_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.AggregateTransformer.get_feature_names": [[131, 133], ["None"], "methods", ["None"], ["", "def", "get_feature_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.IndexBasedTransformer.__init__": [[137, 149], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "case_id_col", ",", "cat_cols", ",", "num_cols", ",", "max_events", "=", "None", ",", "fillna", "=", "True", ",", "create_dummies", "=", "True", ")", ":", "\n", "        ", "self", ".", "case_id_col", "=", "case_id_col", "\n", "self", ".", "cat_cols", "=", "cat_cols", "\n", "self", ".", "num_cols", "=", "num_cols", "\n", "self", ".", "max_events", "=", "max_events", "\n", "self", ".", "fillna", "=", "fillna", "\n", "self", ".", "create_dummies", "=", "create_dummies", "\n", "\n", "self", ".", "columns", "=", "None", "\n", "\n", "self", ".", "fit_time", "=", "0", "\n", "self", ".", "transform_time", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.IndexBasedTransformer.fit": [[151, 153], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.IndexBasedTransformer.transform": [[154, 190], ["time.time", "X.groupby", "pandas.DataFrame", "range", "X.groupby.size().max", "X.groupby.apply", "pandas.merge", "pandas.get_dummies().drop", "dt_transformed.fillna.fillna.fillna", "time.time", "X.groupby.nth", "X.groupby.size", "range", "pandas.get_dummies"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "grouped", "=", "X", ".", "groupby", "(", "self", ".", "case_id_col", ",", "as_index", "=", "False", ")", "\n", "\n", "if", "self", ".", "max_events", "is", "None", ":", "\n", "            ", "self", ".", "max_events", "=", "grouped", ".", "size", "(", ")", ".", "max", "(", ")", "\n", "\n", "\n", "", "dt_transformed", "=", "pd", ".", "DataFrame", "(", "grouped", ".", "apply", "(", "lambda", "x", ":", "x", ".", "name", ")", ",", "columns", "=", "[", "self", ".", "case_id_col", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "max_events", ")", ":", "\n", "            ", "dt_index", "=", "grouped", ".", "nth", "(", "i", ")", "[", "[", "self", ".", "case_id_col", "]", "+", "self", ".", "cat_cols", "+", "self", ".", "num_cols", "]", "\n", "dt_index", ".", "columns", "=", "[", "self", ".", "case_id_col", "]", "+", "[", "\"%s_%s\"", "%", "(", "col", ",", "i", ")", "for", "col", "in", "self", ".", "cat_cols", "]", "+", "[", "\"%s_%s\"", "%", "(", "col", ",", "i", ")", "for", "col", "in", "self", ".", "num_cols", "]", "\n", "dt_transformed", "=", "pd", ".", "merge", "(", "dt_transformed", ",", "dt_index", ",", "on", "=", "self", ".", "case_id_col", ",", "how", "=", "\"left\"", ")", "\n", "", "dt_transformed", ".", "index", "=", "dt_transformed", "[", "self", ".", "case_id_col", "]", "\n", "\n", "# one-hot-encode cat cols", "\n", "if", "self", ".", "create_dummies", ":", "\n", "            ", "all_cat_cols", "=", "[", "\"%s_%s\"", "%", "(", "col", ",", "i", ")", "for", "col", "in", "self", ".", "cat_cols", "for", "i", "in", "range", "(", "self", ".", "max_events", ")", "]", "\n", "dt_transformed", "=", "pd", ".", "get_dummies", "(", "dt_transformed", ",", "columns", "=", "all_cat_cols", ")", ".", "drop", "(", "self", ".", "case_id_col", ",", "axis", "=", "1", ")", "\n", "\n", "# fill missing values with 0-s", "\n", "", "if", "self", ".", "fillna", ":", "\n", "            ", "dt_transformed", "=", "dt_transformed", ".", "fillna", "(", "0", ")", "\n", "\n", "# add missing columns if necessary", "\n", "", "if", "self", ".", "columns", "is", "None", ":", "\n", "            ", "self", ".", "columns", "=", "dt_transformed", ".", "columns", "\n", "", "else", ":", "\n", "            ", "missing_cols", "=", "[", "col", "for", "col", "in", "self", ".", "columns", "if", "col", "not", "in", "dt_transformed", ".", "columns", "]", "\n", "for", "col", "in", "missing_cols", ":", "\n", "                ", "dt_transformed", "[", "col", "]", "=", "0", "\n", "", "dt_transformed", "=", "dt_transformed", "[", "self", ".", "columns", "]", "\n", "\n", "", "self", ".", "transform_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "return", "dt_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.IndexBasedTransformer.get_feature_names": [[191, 193], ["None"], "methods", ["None"], ["", "def", "get_feature_names", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "columns", "", "", "", ""]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.get_encoder": [[7, 21], ["Encoders.StaticTransformer", "Encoders.AggregateTransformer", "Encoders.AggregateTransformer", "Encoders.IndexBasedTransformer", "print"], "function", ["None"], ["def", "get_encoder", "(", "method", ",", "case_id_col", "=", "None", ",", "static_cat_cols", "=", "None", ",", "static_num_cols", "=", "None", ",", "dynamic_cat_cols", "=", "None", ",", "\n", "dynamic_num_cols", "=", "None", ",", "fillna", "=", "True", ",", "max_events", "=", "None", ",", "activity_col", "=", "None", ",", "resource_col", "=", "None", ",", "timestamp_col", "=", "None", ",", "\n", "scale_model", "=", "None", ")", ":", "\n", "    ", "if", "method", "==", "\"static\"", ":", "\n", "        ", "return", "StaticTransformer", "(", "case_id_col", "=", "case_id_col", ",", "cat_cols", "=", "static_cat_cols", ",", "num_cols", "=", "static_num_cols", ",", "fillna", "=", "fillna", ")", "\n", "", "elif", "method", "==", "\"agg\"", ":", "\n", "        ", "return", "AggregateTransformer", "(", "case_id_col", "=", "case_id_col", ",", "cat_cols", "=", "dynamic_cat_cols", ",", "num_cols", "=", "dynamic_num_cols", ",", "boolean", "=", "False", ",", "fillna", "=", "fillna", ")", "\n", "", "elif", "method", "==", "\"bool\"", ":", "\n", "        ", "return", "AggregateTransformer", "(", "case_id_col", "=", "case_id_col", ",", "cat_cols", "=", "dynamic_cat_cols", ",", "num_cols", "=", "dynamic_num_cols", ",", "boolean", "=", "True", ",", "fillna", "=", "fillna", ")", "\n", "", "elif", "method", "==", "\"index\"", ":", "\n", "        ", "return", "IndexBasedTransformer", "(", "case_id_col", "=", "case_id_col", ",", "cat_cols", "=", "dynamic_cat_cols", ",", "num_cols", "=", "dynamic_num_cols", ",", "max_events", "=", "max_events", ",", "fillna", "=", "fillna", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Invalid encoder type\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_gen.generate_instances_df": [[7, 20], ["df_bucket.groupby", "pandas.DataFrame", "encoder.fit_transform", "numpy.transpose"], "function", ["None"], ["def", "generate_instances_df", "(", "df_bucket", ",", "dm", ",", "ffeatures", ",", "encoder", ",", "inst_count", ")", ":", "\n", "  ", "buckets_grouped", "=", "df_bucket", ".", "groupby", "(", "dm", ".", "case_id_col", ")", "\n", "cases_count", "=", "0", "\n", "gen_df", "=", "pd", ".", "DataFrame", "(", "columns", "=", "ffeatures", ")", "\n", "for", "idx", ",", "grp", "in", "buckets_grouped", ":", "\n", "      ", "cases_count", "+=", "1", "\n", "if", "cases_count", "<=", "inst_count", ":", "\n", "          ", "encoded_group", "=", "encoder", ".", "fit_transform", "(", "grp", ")", "\n", "case", "=", "np", ".", "transpose", "(", "encoded_group", "[", "0", "]", ")", "\n", "gen_df", ".", "loc", "[", "idx", "]", "=", "case", "\n", "", "else", ":", "\n", "          ", "break", "\n", "", "", "return", "gen_df", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_gen.get_percentage": [[23, 25], ["X.count", "len"], "function", ["None"], ["", "def", "get_percentage", "(", "label", ",", "X", ")", ":", "\n", "  ", "return", "X", ".", "count", "(", "label", ")", "/", "len", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.get_list": [[8, 16], ["vals_list.append", "grps[].apply"], "function", ["None"], ["def", "get_list", "(", "grps", ",", "cols", ",", "i", ")", ":", "\n", "  ", "\"\"\"\n  a function to retrieve all time values of a certain XAI method, in a set of rows grouped by dataset_name and cls_method\n  \"\"\"", "\n", "vals_list", "=", "[", "]", "\n", "for", "col", "in", "cols", ":", "\n", "       ", "vals_list", ".", "append", "(", "grps", "[", "col", "]", ".", "apply", "(", "list", ")", "[", "i", "]", ")", "\n", "", "return", "vals_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_dataFrame": [[18, 35], ["pandas.DataFrame.from_dict", "range", "group.iterrows", "subject_datasets_dict[].append", "subject_datasets_dict[].append", "subject_datasets_dict[].append", "subject_datasets_dict[].append", "subject_datasets_dict[].append"], "function", ["None"], ["", "def", "retrieve_dataFrame", "(", "grouped_info", ",", "method_name", ",", "datasets", ")", ":", "\n", "  ", "subject_datasets_dict", "=", "{", "\"dataset_name\"", ":", "[", "]", ",", "\"method\"", ":", "[", "]", ",", "\"bkt_size\"", ":", "[", "]", ",", "\"prfx_len\"", ":", "[", "]", ",", "\"feat_num\"", ":", "[", "]", "}", ";", "\n", "for", "idx", ",", "group", "in", "grouped_info", ":", "\n", "        ", "if", "idx", "[", "1", "]", "==", "method_name", "and", "idx", "[", "0", "]", "in", "datasets", ":", "\n", "          ", "if", "(", "method_name", "==", "'single_agg'", ")", "or", "(", "idx", "[", "0", "]", "==", "'traffic_fines'", ")", ":", "\n", "                ", "gap", "=", "1", "\n", "", "else", ":", "\n", "                ", "gap", "=", "5", "\n", "", "for", "i", "in", "range", "(", "1", ",", "group", ".", "shape", "[", "0", "]", "+", "1", ",", "gap", ")", ":", "\n", "              ", "for", "row_idx", ",", "row", "in", "group", ".", "iterrows", "(", ")", ":", "\n", "                ", "if", "i", "==", "row", "[", "'prefix_length'", "]", "and", "row", "[", "'bucket_size'", "]", ">", "500", ":", "\n", "                  ", "subject_datasets_dict", "[", "'dataset_name'", "]", ".", "append", "(", "idx", "[", "0", "]", ")", "\n", "subject_datasets_dict", "[", "'method'", "]", ".", "append", "(", "idx", "[", "1", "]", ")", "\n", "subject_datasets_dict", "[", "'bkt_size'", "]", ".", "append", "(", "row", "[", "'bucket_size'", "]", ")", "\n", "subject_datasets_dict", "[", "'prfx_len'", "]", ".", "append", "(", "row", "[", "'prefix_length'", "]", ")", "\n", "subject_datasets_dict", "[", "'feat_num'", "]", ".", "append", "(", "row", "[", "'feature_num'", "]", ")", "\n", "", "", "", "", "", "return", "pd", ".", "DataFrame", ".", "from_dict", "(", "subject_datasets_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_datasets_info": [[37, 51], ["pandas.read_csv", "pd.read_csv.drop", "pd.read_csv.groupby", "training_info_df.groupby", "Data_retrieval.retrieve_dataFrame", "Data_retrieval.retrieve_dataFrame", "os.path.join", "pd.read_csv.dataset_type.str.contains", "pd.read_csv.dataset_type.str.contains"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_dataFrame", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_dataFrame"], ["", "def", "retrieve_datasets_info", "(", "dir", ",", "datasets_info", ",", "datasets", ",", "method_name", ")", ":", "\n", "  ", "\"\"\"\n  a function to retrieve information about datasets from the all_datasets_info file containing relevant information\n  \"\"\"", "\n", "info_df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "datasets_info", ")", ",", "sep", "=", "';'", ")", "\n", "#to drop rows containing info about training datasets:", "\n", "training_info_df", "=", "info_df", "[", "info_df", ".", "dataset_type", ".", "str", ".", "contains", "(", "\"training\"", ")", "]", "\n", "info_df", "=", "info_df", "[", "~", "info_df", ".", "dataset_type", ".", "str", ".", "contains", "(", "\"training\"", ")", "]", "\n", "info_df", ".", "drop", "(", "[", "'dataset_type'", "]", ",", "inplace", "=", "True", ",", "axis", "=", "1", ")", "\n", "testing_grouped_info", "=", "info_df", ".", "groupby", "(", "[", "'dataset'", ",", "'method'", "]", ")", "\n", "training_grouped_info", "=", "training_info_df", ".", "groupby", "(", "[", "'dataset'", ",", "'method'", "]", ")", "\n", "training_info", "=", "retrieve_dataFrame", "(", "training_grouped_info", ",", "method_name", ",", "datasets", ")", "\n", "testing_info", "=", "retrieve_dataFrame", "(", "testing_grouped_info", ",", "method_name", ",", "datasets", ")", "\n", "return", "training_info", ",", "testing_info", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_artefact": [[54, 62], ["Data_retrieval.retrieve_file", "pandas.read_csv", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_file"], ["", "def", "retrieve_artefact", "(", "folder", ",", "file_end", ",", "*", "argv", ")", ":", "\n", "  ", "retrieved_file", "=", "retrieve_file", "(", "folder", ",", "file_end", ",", "argv", ")", "\n", "if", "'.pickle'", "in", "file_end", ":", "\n", "    ", "with", "open", "(", "retrieved_file", ",", "'rb'", ")", "as", "fin", ":", "\n", "        ", "retrieved_artefact", "=", "pickle", ".", "load", "(", "fin", ")", "\n", "", "", "else", ":", "\n", "    ", "retrieved_artefact", "=", "pd", ".", "read_csv", "(", "retrieved_file", ",", "sep", "=", "';'", ",", "encoding", "=", "'ISO-8859-1'", ")", "\n", "", "return", "retrieved_artefact", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.retrieve_file": [[65, 70], ["sep.join", "os.path.join", "str"], "function", ["None"], ["", "def", "retrieve_file", "(", "folder", ",", "file_end", ",", "argv", ")", ":", "\n", "    ", "sep", "=", "'_'", "\n", "file_name", "=", "sep", ".", "join", "(", "[", "str", "(", "a", ")", "for", "a", "in", "argv", "]", ")", "\n", "file_name", "+=", "file_end", "\n", "return", "os", ".", "path", ".", "join", "(", "folder", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Data_retrieval.get_corr_files": [[72, 79], ["os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "get_corr_files", "(", "EDA_output", ",", "dataset_name", ",", "method_name", ",", "cls_method", ",", "feat_num", ")", ":", "\n", "    ", "out", "=", "'correlations_%s_%s_%s_%s'", "%", "(", "dataset_name", ",", "method_name", ",", "cls_method", ",", "feat_num", ")", "\n", "corr_dir", "=", "os", ".", "path", ".", "join", "(", "EDA_output", ",", "out", ")", "\n", "cat_csv", "=", "os", ".", "path", ".", "join", "(", "corr_dir", ",", "'Categorical_correlations_%s_%s_%s.csv'", "%", "(", "dataset_name", ",", "method_name", ",", "feat_num", ")", ")", "\n", "num_csv", "=", "os", ".", "path", ".", "join", "(", "corr_dir", ",", "'Numerical_correlations_%s_%s_%s.csv'", "%", "(", "dataset_name", ",", "method_name", ",", "feat_num", ")", ")", "\n", "files", "=", "[", "cat_csv", ",", "num_csv", "]", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.__init__": [[11, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "d_name", ")", ":", "\n", "        ", "self", ".", "d_name", "=", "d_name", "\n", "self", ".", "case_id_col", "=", "Definitions", ".", "case_id_col", "[", "self", ".", "d_name", "]", "\n", "self", ".", "activity_col", "=", "Definitions", ".", "activity_col", "[", "self", ".", "d_name", "]", "\n", "self", ".", "timestamp_col", "=", "Definitions", ".", "timestamp_col", "[", "self", ".", "d_name", "]", "\n", "self", ".", "label_col", "=", "Definitions", ".", "label_col", "[", "self", ".", "d_name", "]", "\n", "self", ".", "pos_label", "=", "Definitions", ".", "pos_label", "[", "self", ".", "d_name", "]", "\n", "self", ".", "neg_label", "=", "Definitions", ".", "neg_label", "[", "self", ".", "d_name", "]", "\n", "self", ".", "dynamic_cat_cols", "=", "Definitions", ".", "dynamic_cat_cols", "[", "self", ".", "d_name", "]", "\n", "self", ".", "static_cat_cols", "=", "Definitions", ".", "static_cat_cols", "[", "self", ".", "d_name", "]", "\n", "self", ".", "dynamic_num_cols", "=", "Definitions", ".", "dynamic_num_cols", "[", "self", ".", "d_name", "]", "\n", "self", ".", "static_num_cols", "=", "Definitions", ".", "static_num_cols", "[", "self", ".", "d_name", "]", "\n", "self", ".", "sorting_cols", "=", "[", "self", ".", "timestamp_col", ",", "self", ".", "activity_col", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.read_dataset": [[25, 34], ["pandas.read_csv"], "methods", ["None"], ["", "def", "read_dataset", "(", "self", ")", ":", "\n", "        ", "dtypes", "=", "{", "col", ":", "'object'", "for", "col", "in", "(", "self", ".", "dynamic_cat_cols", "+", "self", ".", "static_cat_cols", "+", "[", "\n", "self", ".", "case_id_col", "+", "self", ".", "label_col", "+", "self", ".", "timestamp_col", "]", ")", "}", "\n", "for", "col", "in", "(", "self", ".", "dynamic_num_cols", "+", "self", ".", "static_num_cols", ")", ":", "\n", "            ", "dtypes", "[", "col", "]", "=", "'float'", "\n", "# read encoded data", "\n", "", "df", "=", "pd", ".", "read_csv", "(", "Definitions", ".", "filename", "[", "self", ".", "d_name", "]", ",", "sep", "=", "';'", ",", "dtype", "=", "dtypes", ",", "engine", "=", "'c'", ",", "encoding", "=", "'ISO-8859-1'", ",", "\n", "error_bad_lines", "=", "False", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_relevant_data_by_indexes": [[36, 38], ["data[].isin"], "methods", ["None"], ["", "def", "get_relevant_data_by_indexes", "(", "self", ",", "data", ",", "indexes", ")", ":", "\n", "        ", "return", "data", "[", "data", "[", "self", ".", "case_id_col", "]", ".", "isin", "(", "indexes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_pos_case_length_quantile": [[41, 44], ["int", "numpy.ceil", "data[].groupby().size().quantile", "data[].groupby().size", "data[].groupby"], "methods", ["None"], ["", "def", "get_pos_case_length_quantile", "(", "self", ",", "data", ",", "percentage", "=", "0.90", ")", ":", "\n", "        ", "return", "int", "(", "\n", "np", ".", "ceil", "(", "data", "[", "data", "[", "self", ".", "label_col", "]", "==", "self", ".", "pos_label", "]", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "size", "(", ")", ".", "quantile", "(", "percentage", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.split_data_strict": [[45, 58], ["data.sort_values().groupby", "grouped[].min().reset_index().sort_values", "data[].sort_values", "data[].sort_values", "test[].min", "list", "data.sort_values", "grouped[].min().reset_index", "int", "grouped[].min", "len", "data[].isin", "data[].isin"], "methods", ["None"], ["", "def", "split_data_strict", "(", "self", ",", "data", ",", "train_ratio", ",", "split", "=", "'temporal'", ")", ":", "\n", "# split into train and test using temporal split and discard events that overlap the periods", "\n", "        ", "grouped", "=", "data", ".", "sort_values", "(", "self", ".", "sorting_cols", ",", "ascending", "=", "True", ",", "kind", "=", "'mergesort'", ")", ".", "groupby", "(", "self", ".", "case_id_col", ")", "\n", "start_timestamps", "=", "grouped", "[", "self", ".", "timestamp_col", "]", ".", "min", "(", ")", ".", "reset_index", "(", ")", ".", "sort_values", "(", "self", ".", "timestamp_col", ",", "\n", "ascending", "=", "True", ",", "kind", "=", "'mergesort'", ")", "\n", "train_ids", "=", "list", "(", "start_timestamps", "[", "self", ".", "case_id_col", "]", ")", "[", ":", "int", "(", "train_ratio", "*", "len", "(", "start_timestamps", ")", ")", "]", "\n", "train", "=", "data", "[", "data", "[", "self", ".", "case_id_col", "]", ".", "isin", "(", "train_ids", ")", "]", ".", "sort_values", "(", "self", ".", "sorting_cols", ",", "ascending", "=", "True", ",", "\n", "kind", "=", "'mergesort'", ")", "\n", "test", "=", "data", "[", "~", "data", "[", "self", ".", "case_id_col", "]", ".", "isin", "(", "train_ids", ")", "]", ".", "sort_values", "(", "self", ".", "sorting_cols", ",", "ascending", "=", "True", ",", "\n", "kind", "=", "'mergesort'", ")", "\n", "split_ts", "=", "test", "[", "self", ".", "timestamp_col", "]", ".", "min", "(", ")", "\n", "train", "=", "train", "[", "train", "[", "self", ".", "timestamp_col", "]", "<", "split_ts", "]", "\n", "return", "(", "train", ",", "test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.split_val": [[60, 73], ["[].min().reset_index", "data[].sort_values", "data[].sort_values", "start_timestamps.reindex.reindex.sort_values", "list", "[].min", "numpy.random.seed", "start_timestamps.reindex.reindex.reindex", "numpy.random.permutation", "int", "data[].isin", "data.groupby", "len", "data[].isin"], "methods", ["None"], ["", "def", "split_val", "(", "self", ",", "data", ",", "val_ratio", ",", "split", "=", "'random'", ",", "seed", "=", "22", ")", ":", "\n", "        ", "start_timestamps", "=", "data", ".", "groupby", "(", "self", ".", "case_id_col", ")", "[", "self", ".", "timestamp_col", "]", ".", "min", "(", ")", ".", "reset_index", "(", ")", "\n", "if", "split", "==", "'temporal'", ":", "\n", "            ", "start_timestamps", "=", "start_timestamps", ".", "sort_values", "(", "self", ".", "timestamp_col", ",", "ascending", "=", "True", ",", "kind", "=", "'mergesort'", ")", "\n", "", "elif", "split", "==", "'random'", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "start_timestamps", "=", "start_timestamps", ".", "reindex", "(", "np", ".", "random", ".", "permutation", "(", "start_timestamps", ".", "index", ")", ")", "\n", "", "val_ids", "=", "list", "(", "start_timestamps", "[", "self", ".", "case_id_col", "]", ")", "[", "-", "int", "(", "val_ratio", "*", "len", "(", "start_timestamps", ")", ")", ":", "]", "\n", "val", "=", "data", "[", "data", "[", "self", ".", "case_id_col", "]", ".", "isin", "(", "val_ids", ")", "]", ".", "sort_values", "(", "self", ".", "sorting_cols", ",", "ascending", "=", "True", ",", "\n", "kind", "=", "'mergesort'", ")", "\n", "train", "=", "data", "[", "~", "data", "[", "self", ".", "case_id_col", "]", ".", "isin", "(", "val_ids", ")", "]", ".", "sort_values", "(", "self", ".", "sorting_cols", ",", "ascending", "=", "True", ",", "\n", "kind", "=", "'mergesort'", ")", "\n", "return", "(", "train", ",", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_class_ratio": [[75, 78], ["data[].value_counts", "data[].value_counts.sum"], "methods", ["None"], ["", "def", "get_class_ratio", "(", "self", ",", "data", ")", ":", "\n", "        ", "frequencies", "=", "data", "[", "self", ".", "label_col", "]", ".", "value_counts", "(", ")", "\n", "return", "frequencies", "[", "self", ".", "pos_label", "]", "/", "frequencies", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.generate_prefix_data": [[79, 98], ["[].transform", "data[].groupby().head", "range", "dt_prefixes[].apply", "data[].groupby().head", "tmp[].apply", "pandas.concat", "data[].groupby", "min", "data.groupby", "data[].groupby"], "methods", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Encoders.IndexBasedTransformer.transform"], ["", "def", "generate_prefix_data", "(", "self", ",", "data", ",", "min_length", ",", "max_length", ",", "gap", "=", "1", ")", ":", "\n", "# getting the length of each process instance", "\n", "        ", "data", "[", "'case_length'", "]", "=", "data", ".", "groupby", "(", "self", ".", "case_id_col", ")", "[", "self", ".", "activity_col", "]", ".", "transform", "(", "len", ")", "\n", "# getting instances which are longer than the minimum length and getting amount of data equivalent to the min length", "\n", "dt_prefixes", "=", "data", "[", "data", "[", "'case_length'", "]", ">=", "min_length", "]", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "head", "(", "min_length", ")", "\n", "# this is the first prefixed chunk", "\n", "dt_prefixes", "[", "'prefix_nr'", "]", "=", "1", "\n", "# keeping the original case id with each case", "\n", "dt_prefixes", "[", "'original_case_id'", "]", "=", "dt_prefixes", "[", "self", ".", "case_id_col", "]", "\n", "# prefix-based bucketing requires certain nr_events", "\n", "# repeat the previous process while increasing the prefixed data bz the gap everytime", "\n", "for", "nr_events", "in", "range", "(", "min_length", "+", "gap", ",", "max_length", "+", "1", ",", "gap", ")", ":", "\n", "            ", "tmp", "=", "data", "[", "data", "[", "'case_length'", "]", ">=", "nr_events", "]", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "head", "(", "nr_events", ")", "\n", "tmp", "[", "'original_case_id'", "]", "=", "tmp", "[", "self", ".", "case_id_col", "]", "\n", "tmp", "[", "self", ".", "case_id_col", "]", "=", "tmp", "[", "self", ".", "case_id_col", "]", ".", "apply", "(", "lambda", "x", ":", "'%s_%s'", "%", "(", "x", ",", "nr_events", ")", ")", "\n", "tmp", "[", "'prefix_nr'", "]", "=", "nr_events", "\n", "dt_prefixes", "=", "pd", ".", "concat", "(", "[", "dt_prefixes", ",", "tmp", "]", ",", "axis", "=", "0", ")", "\n", "", "dt_prefixes", "[", "'case_length'", "]", "=", "dt_prefixes", "[", "'case_length'", "]", ".", "apply", "(", "lambda", "x", ":", "min", "(", "max_length", ",", "x", ")", ")", "\n", "return", "dt_prefixes", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_label_numeric": [[99, 103], ["data.groupby().first", "data.groupby"], "methods", ["None"], ["", "def", "get_label_numeric", "(", "self", ",", "data", ")", ":", "\n", "# get the label of the first row in a process instance, as they are grouped", "\n", "        ", "y", "=", "data", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "first", "(", ")", "[", "self", ".", "label_col", "]", "\n", "return", "[", "1", "if", "label", "==", "self", ".", "pos_label", "else", "0", "for", "label", "in", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_stratified_split_generator": [[104, 115], ["data.groupby().first", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "data[].sort_values", "data[].sort_values", "data.groupby", "data[].isin", "data[].isin"], "methods", ["None"], ["", "def", "get_stratified_split_generator", "(", "self", ",", "data", ",", "n_splits", "=", "5", ",", "shuffle", "=", "True", ",", "random_state", "=", "22", ")", ":", "\n", "        ", "firsts", "=", "data", ".", "groupby", "(", "self", ".", "case_id_col", ",", "as_index", "=", "False", ")", ".", "first", "(", ")", "\n", "stratifiedKF", "=", "StratifiedKFold", "(", "n_splits", "=", "n_splits", ",", "shuffle", "=", "shuffle", ",", "random_state", "=", "random_state", ")", "\n", "# using an instance of the StratifiedKFold to generate chunks of stratified train and test data, and send it at once to the calling line", "\n", "for", "trainIdx", ",", "testIdx", "in", "stratifiedKF", ".", "split", "(", "firsts", ",", "firsts", "[", "self", ".", "label_col", "]", ")", ":", "\n", "            ", "current_train", "=", "firsts", "[", "self", ".", "case_id_col", "]", "[", "trainIdx", "]", "\n", "train_chunk", "=", "data", "[", "data", "[", "self", ".", "case_id_col", "]", ".", "isin", "(", "current_train", ")", "]", ".", "sort_values", "(", "self", ".", "timestamp_col", ",", "\n", "ascending", "=", "True", ",", "kind", "=", "'mergesort'", ")", "\n", "test_chunk", "=", "data", "[", "~", "data", "[", "self", ".", "case_id_col", "]", ".", "isin", "(", "current_train", ")", "]", ".", "sort_values", "(", "self", ".", "timestamp_col", ",", "\n", "ascending", "=", "True", ",", "kind", "=", "'mergesort'", ")", "\n", "yield", "(", "train_chunk", ",", "test_chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_indexes": [[116, 118], ["data.groupby().first", "data.groupby"], "methods", ["None"], ["", "", "def", "get_indexes", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "first", "(", ")", ".", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_data_by_indexes": [[119, 121], ["data[].isin"], "methods", ["None"], ["", "def", "get_data_by_indexes", "(", "self", ",", "data", ",", "indexes", ")", ":", "\n", "        ", "return", "data", "[", "data", "[", "self", ".", "case_id_col", "]", ".", "isin", "(", "indexes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_prefix_lengths": [[122, 124], ["data.groupby().last", "data.groupby"], "methods", ["None"], ["", "def", "get_prefix_lengths", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "data", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "last", "(", ")", "[", "'prefix_nr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.DatasetManager.DatasetManager.get_case_ids": [[125, 130], ["pandas.Series", "case_ids.apply.apply.apply", "data.groupby().first", "data.groupby", "x.split"], "methods", ["None"], ["", "def", "get_case_ids", "(", "self", ",", "data", ",", "nr_events", "=", "1", ")", ":", "\n", "        ", "case_ids", "=", "pd", ".", "Series", "(", "data", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "first", "(", ")", ".", "index", ")", "\n", "if", "nr_events", ">", "1", ":", "\n", "            ", "case_ids", "=", "case_ids", ".", "apply", "(", "lambda", "x", ":", "'_'", ".", "join", "(", "x", ".", "split", "(", "'_'", ")", "[", ":", "-", "1", "]", ")", ")", "\n", "", "return", "case_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.plotting_utils.get_fig_specs": [[9, 27], ["None"], "function", ["None"], ["def", "get_fig_specs", "(", "no_figs", ",", "perm_flag", "=", "None", ")", ":", "\n", "    ", "if", "no_figs", ">=", "7", "and", "perm_flag", "==", "False", ":", "\n", "        ", "nrows", ",", "ncols", ",", "figure_size", ",", "font_s", "=", "3", ",", "3", ",", "(", "6", ",", "4", ")", ",", "8", "\n", "", "elif", "no_figs", ">=", "7", "and", "perm_flag", "==", "True", ":", "\n", "        ", "nrows", ",", "ncols", ",", "figure_size", ",", "font_s", "=", "4", ",", "2", ",", "(", "6", ",", "6", ")", ",", "8", "\n", "", "elif", "no_figs", ">", "2", "and", "no_figs", "<=", "6", ":", "\n", "        ", "ncols", ",", "figure_size", ",", "font_s", "=", "2", ",", "(", "8", ",", "6", ")", ",", "8", "\n", "if", "no_figs", "%", "2", "==", "0", ":", "\n", "            ", "nrows", "=", "no_figs", "//", "2", "\n", "", "else", ":", "\n", "            ", "nrows", "=", "no_figs", "//", "2", "+", "1", "\n", "", "", "else", ":", "\n", "        ", "nrows", ",", "figure_size", ",", "font_s", "=", "1", ",", "(", "14", ",", "6", ")", ",", "12", "\n", "if", "no_figs", "==", "2", ":", "\n", "            ", "ncols", "=", "2", "\n", "", "else", ":", "\n", "            ", "ncols", "=", "1", "\n", "", "", "return", "[", "nrows", ",", "ncols", ",", "figure_size", ",", "font_s", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.plotting_utils.compute_histogram_bins": [[30, 36], ["numpy.linspace", "int"], "function", ["None"], ["", "def", "compute_histogram_bins", "(", "lower", ",", "upper", ",", "desired_bin_size", ")", ":", "\n", "    ", "min_boundary", "=", "-", "1.0", "*", "(", "lower", "%", "desired_bin_size", "-", "lower", ")", "\n", "max_boundary", "=", "upper", "-", "upper", "%", "desired_bin_size", "+", "desired_bin_size", "\n", "n_bins", "=", "int", "(", "(", "max_boundary", "-", "min_boundary", ")", "/", "desired_bin_size", ")", "+", "1", "\n", "bins", "=", "np", ".", "linspace", "(", "min_boundary", ",", "max_boundary", ",", "n_bins", ")", "\n", "return", "bins", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.plotting_utils.define_range": [[39, 61], ["numpy.percentile", "numpy.percentile", "len", "numpy.where", "len", "len", "len", "len"], "function", ["None"], ["", "def", "define_range", "(", "X_feat", ",", "X", ",", "feat_idx", ")", ":", "\n", "    ", "q25", ",", "q75", "=", "percentile", "(", "X_feat", ",", "25", ")", ",", "percentile", "(", "X_feat", ",", "75", ")", "\n", "iqr", "=", "q75", "-", "q25", "\n", "# calculate the outlier cutoff", "\n", "cut_off", "=", "iqr", "*", "1.5", "\n", "lower", ",", "upper", "=", "q25", "-", "cut_off", ",", "q75", "+", "cut_off", "\n", "# identify outliers ", "\n", "outliers", "=", "[", "i", "for", "i", "in", "X_feat", "if", "i", "<", "lower", "or", "i", ">", "upper", "]", "\n", "outliers_indices", "=", "[", "np", ".", "where", "(", "X_feat", "==", "i", ")", "[", "0", "]", "for", "i", "in", "X_feat", "if", "i", "<", "lower", "or", "i", ">", "upper", "]", "\n", "#remove outliers from the feature column", "\n", "X_feat_outliers_removed", "=", "[", "x", "for", "x", "in", "X_feat", "if", "x", ">=", "lower", "and", "x", "<=", "upper", "]", "\n", "#remove outliers from the data array", "\n", "X_outliers_removed", "=", "X", "[", "(", "X", "[", ":", ",", "feat_idx", "]", ">=", "lower", ")", "&", "(", "X", "[", ":", ",", "feat_idx", "]", "<=", "upper", ")", "]", "\n", "range", "=", "upper", "-", "lower", "\n", "if", "len", "(", "outliers", ")", ">", "len", "(", "X_feat", ")", "*", "0.05", ":", "\n", "        ", "results", "=", "[", "False", ",", "'skip'", ",", "lower", ",", "upper", ",", "len", "(", "outliers", ")", ",", "X_feat_outliers_removed", ",", "X_outliers_removed", "]", "\n", "", "elif", "range", "<", "0.5", ":", "#adopt broader scale to demonstrate the tight range", "\n", "        ", "results", "=", "[", "True", ",", "'tight'", ",", "lower", ",", "upper", ",", "len", "(", "outliers", ")", ",", "X_feat_outliers_removed", ",", "X_outliers_removed", "]", "\n", "", "else", ":", "#adopt moderate scale to demonstrate the wider range", "\n", "        ", "results", "=", "[", "True", ",", "'wide'", ",", "lower", ",", "upper", ",", "len", "(", "outliers", ")", ",", "X_feat_outliers_removed", ",", "X_outliers_removed", "]", "\n", "", "del", "outliers_indices", ",", "outliers", ",", "X_feat_outliers_removed", ",", "X_outliers_removed", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.ClassifierWrapper.ClassifierWrapper.__init__": [[8, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cls", ",", "method", ",", "min_cases_for_training", "=", "30", ",", "hardcoded_prediction", "=", "0.5", ",", "binary", "=", "True", ")", ":", "\n", "        ", "self", ".", "cls", "=", "cls", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "min_cases_for_training", "=", "min_cases_for_training", "\n", "# used when we want to work around and not to use the classifier", "\n", "self", ".", "hardcoded_prediction", "=", "hardcoded_prediction", "\n", "self", ".", "use_hardcoded_prediction", "=", "True", "\n", "self", ".", "binary", "=", "binary", "\n", "if", "self", ".", "binary", ":", "\n", "            ", "self", ".", "classes_", "=", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "classes_", "=", "[", "0", ",", "1", "]", "\n", "", "self", ".", "fit_time", "=", "None", "\n", "self", ".", "predict_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.ClassifierWrapper.ClassifierWrapper.fit": [[23, 36], ["time.time", "numpy.mean", "time.time", "len", "int", "ClassifierWrapper.ClassifierWrapper.cls.fit", "set"], "methods", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "# if there are too few training instances, use the mean", "\n", "if", "X", ".", "shape", "[", "0", "]", "<", "self", ".", "min_cases_for_training", "and", "X", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "self", ".", "hardcoded_prediction", "=", "np", ".", "mean", "(", "y", ")", "\n", "# if all the training instances are of the same class, use this class as prediction", "\n", "", "elif", "len", "(", "set", "(", "y", ")", ")", "<", "2", ":", "\n", "            ", "self", ".", "hardcoded_prediction", "=", "int", "(", "y", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls", ".", "fit", "(", "X", ",", "y", ")", "\n", "self", ".", "use_hardcoded_prediction", "=", "False", "\n", "", "self", ".", "fit_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.ClassifierWrapper.ClassifierWrapper.predict_proba": [[38, 53], ["time.time", "numpy.array", "numpy.concatenate.reshape", "numpy.concatenate", "time.time", "ClassifierWrapper.ClassifierWrapper.cls.predict_proba", "time.time", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.ClassifierWrapper.ClassifierWrapper.predict_proba"], ["", "def", "predict_proba", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "use_hardcoded_prediction", ":", "\n", "            ", "self", ".", "predict_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "preds", "=", "[", "self", ".", "hardcoded_prediction", "]", "*", "x", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "# to return the probability of a positive label", "\n", "            ", "preds_pos_label_idx", "=", "np", ".", "where", "(", "self", ".", "cls", ".", "classes_", "==", "1", ")", "[", "0", "]", "[", "0", "]", "\n", "preds", "=", "self", ".", "cls", ".", "predict_proba", "(", "x", ")", "[", ":", ",", "preds_pos_label_idx", "]", "\n", "self", ".", "predict_time", "=", "time", ".", "time", "(", ")", "-", "start", "\n", "", "if", "not", "self", ".", "binary", ":", "\n", "            ", "preds", "=", "np", ".", "array", "(", "preds", ")", "\n", "preds", "=", "preds", ".", "reshape", "(", "preds", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "preds", "=", "np", ".", "concatenate", "(", "[", "1", "-", "preds", ",", "preds", "]", ",", "axis", "=", "1", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.ClassifierWrapper.ClassifierWrapper.fit_predict": [[55, 58], ["ClassifierWrapper.ClassifierWrapper.fit", "ClassifierWrapper.ClassifierWrapper.predict_proba"], "methods", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.ClassifierWrapper.ClassifierWrapper.predict_proba"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "self", ".", "fit", "(", "X", ",", "y", ")", "\n", "return", "self", ".", "predict_proba", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.NoBucketer.__init__": [[16, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "case_id_col", ")", ":", "\n", "        ", "self", ".", "n_states", "=", "1", "\n", "self", ".", "case_id_col", "=", "case_id_col", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.NoBucketer.fit": [[20, 22], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.NoBucketer.predict": [[23, 25], ["numpy.ones", "len", "X[].unique"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "return", "np", ".", "ones", "(", "len", "(", "X", "[", "self", ".", "case_id_col", "]", ".", "unique", "(", ")", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.NoBucketer.fit_predict": [[26, 29], ["Bucketers.NoBucketer.fit", "Bucketers.NoBucketer.predict"], "methods", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.predict"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "self", ".", "fit", "(", "X", ")", "\n", "return", "self", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.__init__": [[32, 35], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "case_id_col", ")", ":", "\n", "        ", "self", ".", "n_states", "=", "0", "\n", "self", ".", "case_id_col", "=", "case_id_col", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit": [[37, 43], ["X.groupby().size", "X.groupby().size.unique", "X.groupby"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "\n", "        ", "sizes", "=", "X", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "size", "(", ")", "\n", "self", ".", "n_states", "=", "sizes", ".", "unique", "(", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.predict": [[45, 51], ["X.groupby().size", "X.groupby().size.as_matrix", "sum", "X.groupby", "X.groupby().size.isin", "X.groupby().size.isin"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "\n", "        ", "bucket_assignments", "=", "X", ".", "groupby", "(", "self", ".", "case_id_col", ")", ".", "size", "(", ")", "\n", "while", "sum", "(", "~", "bucket_assignments", ".", "isin", "(", "self", ".", "n_states", ")", ")", ">", "0", ":", "\n", "            ", "bucket_assignments", "[", "~", "bucket_assignments", ".", "isin", "(", "self", ".", "n_states", ")", "]", "-=", "1", "\n", "", "return", "bucket_assignments", ".", "as_matrix", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit_predict": [[53, 56], ["Bucketers.PrefixLengthBucketer.fit", "Bucketers.PrefixLengthBucketer.predict"], "methods", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.fit", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.PrefixLengthBucketer.predict"], ["", "def", "fit_predict", "(", "self", ",", "X", ",", "y", "=", "None", ")", ":", "\n", "        ", "self", ".", "fit", "(", "X", ")", "\n", "return", "self", ".", "predict", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.helpers.Bucketers.get_bucketer": [[5, 13], ["Bucketers.NoBucketer", "Bucketers.PrefixLengthBucketer", "print"], "function", ["None"], ["def", "get_bucketer", "(", "method", ",", "encoding_method", "=", "None", ",", "case_id_col", "=", "None", ",", "cat_cols", "=", "None", ",", "num_cols", "=", "None", ",", "n_clusters", "=", "None", ",", "random_state", "=", "None", ",", "n_neighbors", "=", "None", ")", ":", "\n", "    ", "if", "method", "==", "\"single\"", ":", "\n", "        ", "return", "NoBucketer", "(", "case_id_col", "=", "case_id_col", ")", "\n", "", "elif", "method", "==", "\"prefix\"", ":", "\n", "        ", "return", "PrefixLengthBucketer", "(", "case_id_col", "=", "case_id_col", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Invalid bucketer type\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.explainers.explain_utils.explain_and_save": [[9, 20], ["explainer.explain_instance", "explainer.explain_instance.save_to_file", "os.path.join"], "function", ["None"], ["def", "explain_and_save", "(", "dir_name", ",", "frmt_str", ",", "i", ",", "explainer", ",", "sample", ",", "feats", ",", "model", ",", "flag", ",", "mod", ")", ":", "\n", "  ", "expparams", "=", "{", "\"data_row\"", ":", "sample", ",", "\"predict_fn\"", ":", "model", ".", "predict_proba", ",", "\n", "\"num_features\"", ":", "feats", ",", "\"distance_metric\"", ":", "\"euclidean\"", "}", "\n", "explanation", "=", "explainer", ".", "explain_instance", "(", "**", "expparams", ")", "\n", "if", "mod", "==", "'logit'", ":", "\n", "    ", "m", "=", "'logit'", "\n", "", "else", ":", "\n", "    ", "m", "=", "'xgboost'", "\n", "", "title", "=", "\"explanation_%s_%s_cluster{%s}_%s.html\"", "%", "(", "m", ",", "flag", ",", "i", ",", "frmt_str", ")", "\n", "explanation", ".", "save_to_file", "(", "os", ".", "path", ".", "join", "(", "dir_name", ",", "title", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.explainers.explain_utils.shap_plots": [[23, 35], ["shap.force_plot", "explain_utils.save_plot", "shap.decision_plot", "explain_utils.save_plot"], "function", ["home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.explainers.explain_utils.save_plot", "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.explainers.explain_utils.save_plot"], ["", "def", "shap_plots", "(", "exp_val", ",", "shap_vals_sample", ",", "sample", ",", "feats", ",", "dir_name", ",", "model_name", ",", "frmt_str", ",", "i", ",", "flag", ")", ":", "\n", "  ", "\"\"\"\n  a function to plot force and decision plots for distant and nearest samples in a cluster\n  '\"\"\"", "\n", "shap", ".", "force_plot", "(", "exp_val", ",", "shap_vals_sample", ",", "show", "=", "False", ",", "matplotlib", "=", "True", ")", "\n", "fig_name", "=", "'force_plot'", "\n", "save_plot", "(", "dir_name", ",", "model_name", ",", "fig_name", ",", "frmt_str", ",", "i", ",", "flag", ")", "\n", "\n", "shap", ".", "decision_plot", "(", "exp_val", ",", "shap_vals_sample", ",", "sample", ",", "feature_names", "=", "feats", ",", "show", "=", "False", ")", "\n", "fig_name", "=", "'decision_plot'", "\n", "save_plot", "(", "dir_name", ",", "model_name", ",", "fig_name", ",", "frmt_str", ",", "i", ",", "flag", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ghadaelkhawaga_ppm_xai_comparison.explainers.explain_utils.save_plot": [[37, 46], ["matplotlib.savefig", "matplotlib.clf", "matplotlib.close", "os.path.join"], "function", ["None"], ["", "def", "save_plot", "(", "dir_name", ",", "model_name", ",", "fig_name", ",", "frmt_str", ",", "i", ",", "flag", ")", ":", "\n", "    ", "\"\"\"\n    a function to save generated plots\n    \"\"\"", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir_name", ",", "'%s_%s_%s_cluster(%s)_%s.png'", "%", "(", "fig_name", ",", "model_name", ",", "flag", ",", "i", ",", "frmt_str", ")", ")", ",", "dpi", "=", "300", ",", "bbox_inches", "=", "'tight'", ")", ";", "\n", "plt", ".", "clf", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "return", "\n", "\n"]]}