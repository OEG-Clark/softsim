{"home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset.add_cmdline_args": [[22, 34], ["parser.add_argument_group", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_cmdline_args", "(", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument_group", "(", "'Dataloader specific arguments'", ")", "\n", "parser", ".", "add_argument", "(", "'-input_img'", ",", "default", "=", "'data/{}_feature/{}_btmup_f.hdf5'", ",", "\n", "help", "=", "'HDF5 file with image features'", ")", "\n", "parser", ".", "add_argument", "(", "'-input_img2idx'", ",", "default", "=", "'data/{}_feature/{}_imgid2idx.pkl'", ",", "\n", "help", "=", "'HDF5 file with image features'", ")", "\n", "parser", ".", "add_argument", "(", "'-input_ques'", ",", "default", "=", "'data/visdial_1.0_data.h5'", ",", "\n", "help", "=", "'HDF5 file with preprocessed questions'", ")", "\n", "parser", ".", "add_argument", "(", "'-input_json'", ",", "default", "=", "'data/visdial_1.0_params.json'", ",", "\n", "help", "=", "'JSON file with image paths and vocab'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset.__init__": [[35, 140], ["torch.utils.data.Dataset.__init__", "tuple", "print", "len", "print", "print", "h5py.File", "args.input_img.format", "print", "h5py.File", "args.input_img2idx.format", "_pickle.load", "dataloader.VisDialDataset.data[].size", "print", "print", "print", "print", "open", "json.load", "six.iteritems", "int", "open", "print", "six.iteritems", "print", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "print", "getattr", "dataloader.VisDialDataset.data[].size", "dataloader.VisDialDataset.data[].size", "dataloader.VisDialDataset.data[].size", "dataloader.VisDialDataset._process_history", "setattr", "six.iteritems", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.array", "dataloader.VisDialDataset.img_feats.size", "load_label.format", "numpy.array", "h5py.File.get", "h5py.File.get", "h5py.File.get", "save_label.format", "load_label.format"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset._process_history"], ["", "def", "__init__", "(", "self", ",", "args", ",", "subsets", ")", ":", "\n", "        ", "\"\"\"Initialize the dataset with splits given by 'subsets', where\n        subsets is taken from ['train', 'val', 'test']\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "subsets", "=", "tuple", "(", "subsets", ")", "\n", "\n", "print", "(", "\"Dataloader loading json file: {}\"", ".", "format", "(", "args", ".", "input_json", ")", ")", "\n", "with", "open", "(", "args", ".", "input_json", ",", "'r'", ")", "as", "info_file", ":", "\n", "            ", "info", "=", "json", ".", "load", "(", "info_file", ")", "\n", "# possible keys: {'ind2word', 'word2ind', 'unique_img_(split)'}", "\n", "for", "key", ",", "value", "in", "iteritems", "(", "info", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n", "", "", "word_count", "=", "len", "(", "self", ".", "word2ind", ")", "\n", "self", ".", "vocab_size", "=", "word_count", "\n", "print", "(", "\"Vocab size : {}\"", ".", "format", "(", "self", ".", "vocab_size", ")", ")", "\n", "\n", "# construct reverse of word2ind after adding tokens", "\n", "self", ".", "ind2word", "=", "{", "\n", "int", "(", "ind", ")", ":", "word", "\n", "for", "word", ",", "ind", "in", "iteritems", "(", "self", ".", "word2ind", ")", "\n", "}", "\n", "\n", "print", "(", "\"Dataloader loading h5 file: {}\"", ".", "format", "(", "args", ".", "input_ques", ")", ")", "\n", "ques_file", "=", "h5py", ".", "File", "(", "args", ".", "input_ques", ",", "'r'", ")", "\n", "\n", "args", ".", "input_img", "=", "args", ".", "input_img", ".", "format", "(", "self", ".", "subsets", "[", "0", "]", ",", "self", ".", "subsets", "[", "0", "]", ")", "\n", "print", "(", "\"Dataloader loading h5 file: {}\"", ".", "format", "(", "args", ".", "input_img", ")", ")", "\n", "img_file", "=", "h5py", ".", "File", "(", "args", ".", "input_img", ",", "'r'", ")", "\n", "\n", "args", ".", "input_img2idx", "=", "args", ".", "input_img2idx", ".", "format", "(", "self", ".", "subsets", "[", "0", "]", ",", "self", ".", "subsets", "[", "0", "]", ")", "\n", "self", ".", "img_id2idx", "=", "cPickle", ".", "load", "(", "open", "(", "args", ".", "input_img2idx", ",", "'rb'", ")", ")", "\n", "# load all data mats from ques_file into this", "\n", "self", ".", "data", "=", "{", "}", "\n", "\n", "# map from load to save labels", "\n", "io_map", "=", "{", "\n", "'ques_{}'", ":", "'{}_ques'", ",", "\n", "'ques_length_{}'", ":", "'{}_ques_len'", ",", "\n", "'ans_{}'", ":", "'{}_ans'", ",", "\n", "'ans_length_{}'", ":", "'{}_ans_len'", ",", "\n", "'img_pos_{}'", ":", "'{}_img_pos'", ",", "\n", "'cap_{}'", ":", "'{}_cap'", ",", "\n", "'cap_length_{}'", ":", "'{}_cap_len'", ",", "\n", "'opt_{}'", ":", "'{}_opt'", ",", "\n", "'opt_length_{}'", ":", "'{}_opt_len'", ",", "\n", "'opt_list_{}'", ":", "'{}_opt_list'", ",", "\n", "'num_rounds_{}'", ":", "'{}_num_rounds'", ",", "\n", "'ans_index_{}'", ":", "'{}_ans_ind'", "\n", "}", "\n", "\n", "# processing every split in subsets", "\n", "for", "dtype", "in", "subsets", ":", "# dtype is in ['train', 'val', 'test']", "\n", "            ", "print", "(", "\"\\nProcessing split [{}]...\"", ".", "format", "(", "dtype", ")", ")", "\n", "# read the question, answer, option related information", "\n", "for", "load_label", ",", "save_label", "in", "iteritems", "(", "io_map", ")", ":", "\n", "                ", "if", "load_label", ".", "format", "(", "dtype", ")", "not", "in", "ques_file", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "data", "[", "save_label", ".", "format", "(", "dtype", ")", "]", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "array", "(", "ques_file", "[", "load_label", ".", "format", "(", "dtype", ")", "]", ",", "dtype", "=", "'int64'", ")", ")", "\n", "\n", "# load the object detection (Faster-RCNN) feature", "\n", "", "print", "(", "\"Reading image features...\"", ")", "\n", "self", ".", "img_feats", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img_file", ".", "get", "(", "'image_features'", ")", ")", ")", "\n", "self", ".", "spatials", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img_file", ".", "get", "(", "'spatial_features'", ")", ")", ")", "\n", "self", ".", "pos_boxes", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img_file", ".", "get", "(", "'pos_boxes'", ")", ")", ")", "\n", "\n", "print", "(", "'img feat size: '", ",", "self", ".", "img_feats", ".", "size", "(", ")", ")", "\n", "# save image features", "\n", "self", ".", "data", "[", "dtype", "+", "'_img_fv'", "]", "=", "self", ".", "img_feats", "\n", "img_fnames", "=", "getattr", "(", "self", ",", "'unique_img_'", "+", "dtype", ")", "\n", "self", ".", "data", "[", "dtype", "+", "'_img_fnames'", "]", "=", "img_fnames", "\n", "\n", "# record some stats, will be transferred to encoder/decoder later", "\n", "# assume similar stats across multiple data subsets", "\n", "# maximum number of questions per image, ideally 10", "\n", "self", ".", "max_ques_count", "=", "self", ".", "data", "[", "dtype", "+", "'_ques'", "]", ".", "size", "(", "1", ")", "\n", "# maximum length of question", "\n", "self", ".", "max_ques_len", "=", "self", ".", "data", "[", "dtype", "+", "'_ques'", "]", ".", "size", "(", "2", ")", "\n", "# maximum length of answer", "\n", "self", ".", "max_ans_len", "=", "self", ".", "data", "[", "dtype", "+", "'_ans'", "]", ".", "size", "(", "2", ")", "\n", "\n", "", "self", ".", "num_data_points", "=", "{", "}", "\n", "self", ".", "num_data_points", "[", "dtype", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_cap_len'", "]", ".", "size", "(", "0", ")", "\n", "print", "(", "\"[{0}] no. of threads: {1}\"", ".", "format", "(", "dtype", ",", "self", ".", "num_data_points", "[", "dtype", "]", ")", ")", "\n", "\n", "print", "(", "\"\\tMax no. of rounds: {}\"", ".", "format", "(", "self", ".", "max_ques_count", ")", ")", "\n", "print", "(", "\"\\tMax ques len: {}\"", ".", "format", "(", "self", ".", "max_ques_len", ")", ")", "\n", "print", "(", "\"\\tMax ans len: {}\"", ".", "format", "(", "self", ".", "max_ans_len", ")", ")", "\n", "\n", "# prepare history", "\n", "for", "dtype", "in", "subsets", ":", "\n", "            ", "self", ".", "_process_history", "(", "dtype", ")", "\n", "# 1 indexed to 0 indexed", "\n", "self", ".", "data", "[", "dtype", "+", "'_opt'", "]", "-=", "1", "\n", "if", "dtype", "+", "'_ans_ind'", "in", "self", ".", "data", ":", "\n", "                ", "self", ".", "data", "[", "dtype", "+", "'_ans_ind'", "]", "-=", "1", "\n", "\n", "# default pytorch loader dtype is set to train", "\n", "", "", "if", "'train'", "in", "subsets", ":", "\n", "            ", "self", ".", "_split", "=", "'train'", "\n", "", "else", ":", "\n", "            ", "self", ".", "_split", "=", "subsets", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset.split": [[145, 149], ["None"], "methods", ["None"], ["", "@", "split", ".", "setter", "\n", "def", "split", "(", "self", ",", "split", ")", ":", "\n", "        ", "assert", "split", "in", "self", ".", "subsets", "# ['train', 'val', 'test']", "\n", "self", ".", "_split", "=", "split", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset.__len__": [[153, 155], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_data_points", "[", "self", ".", "_split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset.__getitem__": [[156, 205], ["list", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "opt_inds.view", "dataloader.VisDialDataset.data[].index_select", "option_in.view.view.view", "dataloader.VisDialDataset.data[].index_select", "opt_len.view.view.view", "opt_inds.size", "ans_ind.view"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dtype", "=", "self", ".", "_split", "\n", "item", "=", "{", "'index'", ":", "idx", "}", "\n", "item", "[", "'num_rounds'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_num_rounds'", "]", "[", "idx", "]", "\n", "\n", "# get image features", "\n", "item", "[", "'img_fnames'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_img_fnames'", "]", "[", "idx", "]", "\n", "feature_idx", "=", "self", ".", "img_id2idx", "[", "self", ".", "data", "[", "dtype", "+", "'_img_fnames'", "]", "[", "idx", "]", "]", "\n", "item", "[", "'img_feat'", "]", "=", "self", ".", "img_feats", "[", "self", ".", "pos_boxes", "[", "feature_idx", "]", "[", "0", "]", ":", "self", ".", "pos_boxes", "[", "feature_idx", "]", "[", "1", "]", ",", ":", "]", "\n", "\n", "# get question tokens", "\n", "item", "[", "'ques'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_ques'", "]", "[", "idx", "]", "\n", "item", "[", "'ques_len'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_ques_len'", "]", "[", "idx", "]", "\n", "\n", "item", "[", "'cap'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_cap'", "]", "[", "idx", "]", "\n", "item", "[", "'cap_len'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_cap_len'", "]", "[", "idx", "]", "\n", "\n", "item", "[", "'ans'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_ans'", "]", "[", "idx", "]", "\n", "item", "[", "'ans_len'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_ans_len'", "]", "[", "idx", "]", "\n", "\n", "# get history tokens", "\n", "item", "[", "'hist_len'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_hist_len'", "]", "[", "idx", "]", "\n", "item", "[", "'hist'", "]", "=", "self", ".", "data", "[", "dtype", "+", "'_hist'", "]", "[", "idx", "]", "\n", "\n", "# get options tokens", "\n", "opt_inds", "=", "self", ".", "data", "[", "dtype", "+", "'_opt'", "]", "[", "idx", "]", "\n", "opt_size", "=", "list", "(", "opt_inds", ".", "size", "(", ")", ")", "\n", "new_size", "=", "torch", ".", "Size", "(", "opt_size", "+", "[", "-", "1", "]", ")", "\n", "ind_vector", "=", "opt_inds", ".", "view", "(", "-", "1", ")", "\n", "\n", "option_in", "=", "self", ".", "data", "[", "dtype", "+", "'_opt_list'", "]", ".", "index_select", "(", "0", ",", "ind_vector", ")", "\n", "option_in", "=", "option_in", ".", "view", "(", "new_size", ")", "\n", "\n", "opt_len", "=", "self", ".", "data", "[", "dtype", "+", "'_opt_len'", "]", ".", "index_select", "(", "0", ",", "ind_vector", ")", "\n", "opt_len", "=", "opt_len", ".", "view", "(", "opt_size", ")", "\n", "\n", "item", "[", "'opt'", "]", "=", "option_in", "\n", "item", "[", "'opt_len'", "]", "=", "opt_len", "\n", "if", "dtype", "!=", "'test'", ":", "\n", "            ", "ans_ind", "=", "self", ".", "data", "[", "dtype", "+", "'_ans_ind'", "]", "[", "idx", "]", "\n", "item", "[", "'ans_ind'", "]", "=", "ans_ind", ".", "view", "(", "-", "1", ")", "\n", "\n", "# convert zero length sequences to one length", "\n", "# this is for handling empty rounds of v1.0 test, they will be dropped anyway", "\n", "", "if", "dtype", "==", "'test'", ":", "\n", "            ", "item", "[", "'ques_len'", "]", "[", "item", "[", "'ques_len'", "]", "==", "0", "]", "+=", "1", "\n", "item", "[", "'opt_len'", "]", "[", "item", "[", "'opt_len'", "]", "==", "0", "]", "+=", "1", "\n", "item", "[", "'hist_len'", "]", "[", "item", "[", "'hist_len'", "]", "==", "0", "]", "+=", "1", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset.collate_fn": [[209, 235], ["[].contiguous", "[].contiguous", "[].contiguous", "[].contiguous", "batch_keys.append", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "torch.Tensor().long", "max", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "x.size", "torch.pad", "torch.pad", "x.size"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append"], ["", "def", "collate_fn", "(", "self", ",", "batch", ")", ":", "\n", "        ", "dtype", "=", "self", ".", "_split", "\n", "merged_batch", "=", "{", "key", ":", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", "for", "key", "in", "batch", "[", "0", "]", "}", "\n", "out", "=", "{", "}", "\n", "for", "key", "in", "merged_batch", ":", "\n", "            ", "if", "key", "in", "{", "'index'", ",", "'num_rounds'", ",", "'img_fnames'", "}", ":", "\n", "                ", "out", "[", "key", "]", "=", "merged_batch", "[", "key", "]", "\n", "", "elif", "key", "in", "{", "'cap_len'", "}", ":", "\n", "                ", "out", "[", "key", "]", "=", "torch", ".", "Tensor", "(", "merged_batch", "[", "key", "]", ")", ".", "long", "(", ")", "\n", "", "elif", "key", "in", "{", "'img_feat'", "}", ":", "\n", "                ", "num_max_boxes", "=", "max", "(", "[", "x", ".", "size", "(", "0", ")", "for", "x", "in", "merged_batch", "[", "'img_feat'", "]", "]", ")", "\n", "out", "[", "key", "]", "=", "torch", ".", "stack", "(", "[", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "num_max_boxes", "-", "x", ".", "size", "(", "0", ")", ")", ")", ".", "data", "for", "x", "in", "merged_batch", "[", "'img_feat'", "]", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "out", "[", "key", "]", "=", "torch", ".", "stack", "(", "merged_batch", "[", "key", "]", ",", "0", ")", "\n", "\n", "# Dynamic shaping of padded batch", "\n", "", "", "out", "[", "'hist'", "]", "=", "out", "[", "'hist'", "]", "[", ":", ",", ":", ",", ":", "torch", ".", "max", "(", "out", "[", "'hist_len'", "]", ")", "]", ".", "contiguous", "(", ")", "\n", "out", "[", "'ques'", "]", "=", "out", "[", "'ques'", "]", "[", ":", ",", ":", ",", ":", "torch", ".", "max", "(", "out", "[", "'ques_len'", "]", ")", "]", ".", "contiguous", "(", ")", "\n", "out", "[", "'opt'", "]", "=", "out", "[", "'opt'", "]", "[", ":", ",", ":", ",", ":", ",", ":", "torch", ".", "max", "(", "out", "[", "'opt_len'", "]", ")", "]", ".", "contiguous", "(", ")", "\n", "out", "[", "'cap'", "]", "=", "out", "[", "'cap'", "]", "[", ":", ",", ":", "torch", ".", "max", "(", "out", "[", "'cap_len'", "]", ")", "]", ".", "contiguous", "(", ")", "\n", "\n", "batch_keys", "=", "[", "'img_fnames'", ",", "'num_rounds'", ",", "'img_feat'", ",", "'ques'", ",", "'ques_len'", ",", "'opt'", ",", "'opt_len'", ",", "\n", "'cap'", ",", "'cap_len'", ",", "'hist'", ",", "'hist_len'", "]", "\n", "if", "dtype", "!=", "'test'", ":", "\n", "            ", "batch_keys", ".", "append", "(", "'ans_ind'", ")", "\n", "", "return", "{", "key", ":", "out", "[", "key", "]", "for", "key", "in", "batch_keys", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset._process_history": [[239, 279], ["questions.size", "answers.size", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "range", "min", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "_process_history", "(", "self", ",", "dtype", ")", ":", "\n", "        ", "\"\"\"Process caption as well as history. Optionally, concatenate history \n        for lf-encoder.\"\"\"", "\n", "captions", "=", "self", ".", "data", "[", "dtype", "+", "'_cap'", "]", "\n", "questions", "=", "self", ".", "data", "[", "dtype", "+", "'_ques'", "]", "\n", "ques_len", "=", "self", ".", "data", "[", "dtype", "+", "'_ques_len'", "]", "\n", "cap_len", "=", "self", ".", "data", "[", "dtype", "+", "'_cap_len'", "]", "\n", "max_ques_len", "=", "questions", ".", "size", "(", "2", ")", "\n", "\n", "answers", "=", "self", ".", "data", "[", "dtype", "+", "'_ans'", "]", "\n", "ans_len", "=", "self", ".", "data", "[", "dtype", "+", "'_ans_len'", "]", "\n", "num_convs", ",", "num_rounds", ",", "max_ans_len", "=", "answers", ".", "size", "(", ")", "\n", "\n", "history", "=", "torch", ".", "zeros", "(", "num_convs", ",", "num_rounds", ",", "max_ques_len", "+", "max_ans_len", ")", ".", "long", "(", ")", "\n", "hist_len", "=", "torch", ".", "zeros", "(", "num_convs", ",", "num_rounds", ")", ".", "long", "(", ")", "\n", "\n", "# go over each question and append it with answer", "\n", "for", "th_id", "in", "range", "(", "num_convs", ")", ":", "\n", "            ", "clen", "=", "cap_len", "[", "th_id", "]", "\n", "hlen", "=", "min", "(", "clen", ",", "max_ques_len", "+", "max_ans_len", ")", "\n", "for", "round_id", "in", "range", "(", "num_rounds", ")", ":", "\n", "                ", "if", "round_id", "==", "0", ":", "\n", "# first round has caption as history", "\n", "                    ", "history", "[", "th_id", "]", "[", "round_id", "]", "[", ":", "max_ques_len", "+", "max_ans_len", "]", "=", "captions", "[", "th_id", "]", "[", ":", "max_ques_len", "+", "max_ans_len", "]", "\n", "", "else", ":", "\n", "                    ", "qlen", "=", "ques_len", "[", "th_id", "]", "[", "round_id", "-", "1", "]", "\n", "alen", "=", "ans_len", "[", "th_id", "]", "[", "round_id", "-", "1", "]", "\n", "# else, history is just previous round question-answer pair", "\n", "if", "qlen", ">", "0", ":", "\n", "                        ", "history", "[", "th_id", "]", "[", "round_id", "]", "[", ":", "qlen", "]", "=", "questions", "[", "th_id", "]", "[", "round_id", "-", "1", "]", "[", ":", "qlen", "]", "\n", "", "if", "alen", ">", "0", ":", "\n", "                        ", "history", "[", "th_id", "]", "[", "round_id", "]", "[", "qlen", ":", "qlen", "+", "alen", "]", "=", "answers", "[", "th_id", "]", "[", "round_id", "-", "1", "]", "[", ":", "alen", "]", "\n", "", "hlen", "=", "alen", "+", "qlen", "\n", "# save the history length", "\n", "", "hist_len", "[", "th_id", "]", "[", "round_id", "]", "=", "hlen", "\n", "\n", "", "", "self", ".", "data", "[", "dtype", "+", "'_hist'", "]", "=", "history", "\n", "self", ".", "data", "[", "dtype", "+", "'_hist_len'", "]", "=", "hist_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.language_model.DynamicRNN.__init__": [[13, 16], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "rnn_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rnn_model", "=", "rnn_model", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.language_model.DynamicRNN.forward": [[17, 51], ["language_model.DynamicRNN._get_sorted_order", "seq_input.index_select", "torch.nn.utils.rnn.pack_padded_sequence", "language_model.DynamicRNN.rnn_model.flatten_parameters", "language_model.DynamicRNN.rnn_model", "h_n[].index_select", "x.index_select", "hx[].size"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.language_model.DynamicRNN._get_sorted_order"], ["", "def", "forward", "(", "self", ",", "seq_input", ",", "seq_lens", ",", "initial_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"A wrapper over pytorch's rnn to handle sequences of variable length.\n\n        Arguments\n        ---------\n        seq_input : torch.autograd.Variable\n            Input sequence tensor (padded) for RNN model. (b, max_seq_len, embed_size)\n        seq_lens : torch.LongTensor\n            Length of sequences (b, )\n        initial_state : torch.autograd.Variable\n            Initial (hidden, cell) states of RNN model.\n\n        Returns\n        -------\n            A single tensor of shape (batch_size, rnn_hidden_size) corresponding\n            to the outputs of the RNN model at the last time step of each input\n            sequence.\n        \"\"\"", "\n", "sorted_len", ",", "fwd_order", ",", "bwd_order", "=", "self", ".", "_get_sorted_order", "(", "seq_lens", ")", "\n", "sorted_seq_input", "=", "seq_input", ".", "index_select", "(", "0", ",", "fwd_order", ")", "\n", "packed_seq_input", "=", "pack_padded_sequence", "(", "\n", "sorted_seq_input", ",", "lengths", "=", "sorted_len", ",", "batch_first", "=", "True", ")", "\n", "\n", "if", "initial_state", "is", "not", "None", ":", "\n", "            ", "hx", "=", "initialState", "\n", "sorted_hx", "=", "[", "x", ".", "index_select", "(", "1", ",", "fwd_order", ")", "for", "x", "in", "hx", "]", "\n", "assert", "hx", "[", "0", "]", ".", "size", "(", "0", ")", "==", "self", ".", "rnn_model", ".", "num_layers", "\n", "", "else", ":", "\n", "            ", "hx", "=", "None", "\n", "", "self", ".", "rnn_model", ".", "flatten_parameters", "(", ")", "\n", "_", ",", "(", "h_n", ",", "c_n", ")", "=", "self", ".", "rnn_model", "(", "packed_seq_input", ",", "hx", ")", "\n", "\n", "rnn_output", "=", "h_n", "[", "-", "1", "]", ".", "index_select", "(", "dim", "=", "0", ",", "index", "=", "bwd_order", ")", "\n", "return", "rnn_output", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.language_model.DynamicRNN._get_sorted_order": [[52, 60], ["torch.sort", "torch.sort", "isinstance", "list", "lens.contiguous().view", "lens.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_get_sorted_order", "(", "lens", ")", ":", "\n", "        ", "sorted_len", ",", "fwd_order", "=", "torch", ".", "sort", "(", "lens", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ",", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "bwd_order", "=", "torch", ".", "sort", "(", "fwd_order", ")", "\n", "if", "isinstance", "(", "sorted_len", ",", "Variable", ")", ":", "\n", "            ", "sorted_len", "=", "sorted_len", ".", "data", "\n", "", "sorted_len", "=", "list", "(", "sorted_len", ")", "\n", "return", "sorted_len", ",", "fwd_order", ",", "bwd_order", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.language_model.WordEmbedding.__init__": [[67, 73], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "ntoken", ",", "emb_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "WordEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb", "=", "nn", ".", "Embedding", "(", "ntoken", "+", "1", ",", "emb_dim", ",", "padding_idx", "=", "ntoken", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "ntoken", "=", "ntoken", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.language_model.WordEmbedding.init_embedding": [[74, 78], ["torch.from_numpy", "numpy.load"], "methods", ["None"], ["", "def", "init_embedding", "(", "self", ",", "np_file", ",", "tfidf", "=", "None", ",", "tfidf_weights", "=", "None", ")", ":", "\n", "        ", "weight_init", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "np_file", ")", ")", "\n", "assert", "weight_init", ".", "shape", "==", "(", "self", ".", "ntoken", ",", "self", ".", "emb_dim", ")", "\n", "self", ".", "emb", ".", "weight", ".", "data", "[", ":", "self", ".", "ntoken", "]", "=", "weight_init", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.language_model.WordEmbedding.forward": [[79, 83], ["language_model.WordEmbedding.emb", "language_model.WordEmbedding.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "emb", "=", "self", ".", "emb", "(", "x", ")", "\n", "emb", "=", "self", ".", "dropout", "(", "emb", ")", "\n", "return", "emb", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.eval_utils.get_gt_ranks": [[7, 13], ["ans_ind.view.view", "torch.LongTensor", "range", "ans_ind.view.size", "ans_ind.view.size", "int"], "function", ["None"], ["def", "get_gt_ranks", "(", "ranks", ",", "ans_ind", ")", ":", "\n", "    ", "ans_ind", "=", "ans_ind", ".", "view", "(", "-", "1", ")", "\n", "gt_ranks", "=", "torch", ".", "LongTensor", "(", "ans_ind", ".", "size", "(", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "ans_ind", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "gt_ranks", "[", "i", "]", "=", "int", "(", "ranks", "[", "i", ",", "ans_ind", "[", "i", "]", "]", ")", "\n", "", "return", "gt_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.eval_utils.process_ranks": [[15, 39], ["ranks.float.size", "ranks.float.float", "float", "float", "float", "print", "print", "print", "print", "print", "print", "torch.sum", "torch.sum", "print", "torch.sum", "torch.sum", "print", "torch.sum", "torch.sum", "torch.sum", "ranks.float.le", "ranks.float.le", "ranks.float.ge", "ranks.float.ge", "torch.le", "torch.le", "torch.le", "torch.mean", "torch.mean", "ranks.float.gt", "ranks.float.le", "ranks.float.reciprocal"], "function", ["None"], ["", "def", "process_ranks", "(", "ranks", ")", ":", "\n", "    ", "num_ques", "=", "ranks", ".", "size", "(", "0", ")", "\n", "num_opts", "=", "100", "\n", "if", "torch", ".", "sum", "(", "ranks", ".", "le", "(", "0", ")", ")", ">", "0", ":", "\n", "        ", "num_zero", "=", "torch", ".", "sum", "(", "ranks", ".", "le", "(", "0", ")", ")", "\n", "print", "(", "\"Warning: some of ranks are zero: {}\"", ".", "format", "(", "num_zero", ")", ")", "\n", "ranks", "=", "ranks", "[", "ranks", ".", "gt", "(", "0", ")", "]", "\n", "\n", "# rank should not exceed the number of options", "\n", "", "if", "torch", ".", "sum", "(", "ranks", ".", "ge", "(", "num_opts", "+", "1", ")", ")", ">", "0", ":", "\n", "        ", "num_ge", "=", "torch", ".", "sum", "(", "ranks", ".", "ge", "(", "num_opts", "+", "1", ")", ")", "\n", "print", "(", "\"Warning: some of ranks > 100: {}\"", ".", "format", "(", "num_ge", ")", ")", "\n", "ranks", "=", "ranks", "[", "ranks", ".", "le", "(", "num_opts", "+", "1", ")", "]", "\n", "\n", "", "ranks", "=", "ranks", ".", "float", "(", ")", "\n", "num_r1", "=", "float", "(", "torch", ".", "sum", "(", "torch", ".", "le", "(", "ranks", ",", "1", ")", ")", ")", "\n", "num_r5", "=", "float", "(", "torch", ".", "sum", "(", "torch", ".", "le", "(", "ranks", ",", "5", ")", ")", ")", "\n", "num_r10", "=", "float", "(", "torch", ".", "sum", "(", "torch", ".", "le", "(", "ranks", ",", "10", ")", ")", ")", "\n", "print", "(", "\"\\tNo. questions: {}\"", ".", "format", "(", "num_ques", ")", ")", "\n", "print", "(", "\"\\tr@1: {}\"", ".", "format", "(", "num_r1", "/", "num_ques", ")", ")", "\n", "print", "(", "\"\\tr@5: {}\"", ".", "format", "(", "num_r5", "/", "num_ques", ")", ")", "\n", "print", "(", "\"\\tr@10: {}\"", ".", "format", "(", "num_r10", "/", "num_ques", ")", ")", "\n", "print", "(", "\"\\tmeanR: {}\"", ".", "format", "(", "torch", ".", "mean", "(", "ranks", ")", ")", ")", "\n", "print", "(", "\"\\tmeanRR: {}\"", ".", "format", "(", "torch", ".", "mean", "(", "ranks", ".", "reciprocal", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.eval_utils.scores_to_ranks": [[41, 52], ["scores.sort", "ranked_idx.clone().fill_", "range", "ranked_idx.size", "range", "ranked_idx.clone"], "function", ["None"], ["", "def", "scores_to_ranks", "(", "scores", ")", ":", "\n", "# sort in descending order - largest score gets highest rank", "\n", "    ", "sorted_ranks", ",", "ranked_idx", "=", "scores", ".", "sort", "(", "1", ",", "descending", "=", "True", ")", "\n", "\n", "# convert from ranked_idx to ranks", "\n", "ranks", "=", "ranked_idx", ".", "clone", "(", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "ranked_idx", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "100", ")", ":", "\n", "            ", "ranks", "[", "i", "]", "[", "ranked_idx", "[", "i", "]", "[", "j", "]", "]", "=", "j", "\n", "", "", "ranks", "+=", "1", "\n", "return", "ranks", "\n", "", ""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.__init__": [[44, 51], ["os.path.dirname", "open", "os.path.exists", "os.mkdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "output_name", ")", ":", "\n", "        ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "output_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "dirname", ")", "\n", "\n", "", "self", ".", "log_file", "=", "open", "(", "output_name", ",", "'w'", ")", "\n", "self", ".", "infos", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append": [[52, 55], ["utils.Logger.infos.setdefault", "utils.Logger.append"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append"], ["", "def", "append", "(", "self", ",", "key", ",", "val", ")", ":", "\n", "        ", "vals", "=", "self", ".", "infos", ".", "setdefault", "(", "key", ",", "[", "]", ")", "\n", "vals", ".", "append", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.log": [[56, 65], ["utils.Logger.infos.iteritems", "utils.Logger.log_file.write", "utils.Logger.log_file.flush", "msgs.append", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.write", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append"], ["", "def", "log", "(", "self", ",", "extra_msg", "=", "''", ")", ":", "\n", "        ", "msgs", "=", "[", "extra_msg", "]", "\n", "for", "key", ",", "vals", "in", "self", ".", "infos", ".", "iteritems", "(", ")", ":", "\n", "            ", "msgs", ".", "append", "(", "'%s %.6f'", "%", "(", "key", ",", "np", ".", "mean", "(", "vals", ")", ")", ")", "\n", "", "msg", "=", "'\\n'", ".", "join", "(", "msgs", ")", "\n", "self", ".", "log_file", ".", "write", "(", "msg", "+", "'\\n'", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "self", ".", "infos", "=", "{", "}", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.write": [[66, 70], ["utils.Logger.log_file.write", "utils.Logger.log_file.flush", "print"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "write", "(", "msg", "+", "'\\n'", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.cyclic_lr.__init__": [[75, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "iter_per_epoch", ",", "base_lr", ",", "max_lr", ",", "epochs_per_cycle", "=", "2", ")", ":", "\n", "        ", "self", ".", "base_lr", "=", "base_lr", "\n", "self", ".", "max_lr", "=", "max_lr", "\n", "self", ".", "epochs_per_cycle", "=", "epochs_per_cycle", "\n", "self", ".", "iterations_per_epoch", "=", "iter_per_epoch", "\n", "self", ".", "step_size", "=", "(", "self", ".", "epochs_per_cycle", "*", "self", ".", "iterations_per_epoch", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.cyclic_lr.iteration": [[82, 84], ["None"], "methods", ["None"], ["", "def", "iteration", "(", "self", ",", "epoch", ",", "batch_idx", ")", ":", "\n", "        ", "return", "epoch", "*", "self", ".", "iterations_per_epoch", "+", "batch_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.cyclic_lr.lr": [[85, 90], ["numpy.floor", "numpy.abs", "numpy.maximum", "utils.cyclic_lr.iteration", "utils.cyclic_lr.iteration"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.cyclic_lr.iteration", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.cyclic_lr.iteration"], ["", "def", "lr", "(", "self", ",", "epoch", ",", "batch_idx", ")", ":", "\n", "        ", "cycle", "=", "np", ".", "floor", "(", "1", "+", "self", ".", "iteration", "(", "epoch", ",", "batch_idx", ")", "/", "(", "2", "*", "self", ".", "step_size", ")", ")", "\n", "x", "=", "np", ".", "abs", "(", "self", ".", "iteration", "(", "epoch", ",", "batch_idx", ")", "/", "self", ".", "step_size", "-", "2", "*", "cycle", "+", "1", ")", "\n", "lr", "=", "self", ".", "base_lr", "+", "(", "self", ".", "max_lr", "-", "self", ".", "base_lr", ")", "*", "np", ".", "maximum", "(", "0", ",", "(", "1", "-", "x", ")", ")", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.create_glove_embedding_init": [[12, 37], ["print", "numpy.zeros", "range", "open", "f.readlines", "len", "entry.split", "list", "numpy.array", "len", "ind2word.get", "entries[].split", "len", "map", "str"], "function", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset.split", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.None.dataloader.VisDialDataset.split"], ["def", "create_glove_embedding_init", "(", "idx2word", ",", "glove_file", ")", ":", "\n", "    ", "\"\"\"\n    Bilinear Attention Networks\n    Jin-Hwa Kim, Jaehyun Jun, Byoung-Tak Zhang\n    https://github.com/jnhwkim/ban-vqa\n    \"\"\"", "\n", "word2emb", "=", "{", "}", "\n", "with", "open", "(", "glove_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "entries", "=", "f", ".", "readlines", "(", ")", "\n", "", "emb_dim", "=", "len", "(", "entries", "[", "0", "]", ".", "split", "(", "' '", ")", ")", "-", "1", "\n", "print", "(", "'embedding dim is %d'", "%", "emb_dim", ")", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "len", "(", "idx2word", ")", ",", "emb_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "entry", "in", "entries", ":", "\n", "        ", "vals", "=", "entry", ".", "split", "(", "' '", ")", "\n", "word", "=", "vals", "[", "0", "]", "\n", "vals", "=", "list", "(", "map", "(", "float", ",", "vals", "[", "1", ":", "]", ")", ")", "\n", "word2emb", "[", "word", "]", "=", "np", ".", "array", "(", "vals", ")", "\n", "\n", "", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "idx2word", ")", ")", ":", "\n", "        ", "word", "=", "ind2word", ".", "get", "(", "str", "(", "idx", ")", ")", "\n", "if", "word", "not", "in", "word2emb", ":", "\n", "            ", "continue", "\n", "", "weights", "[", "idx", "-", "1", "]", "=", "word2emb", "[", "word", "]", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.load_imageid": [[91, 99], ["set", "glob.iglob", "print", "os.path.join", "set.add", "len", "len", "int"], "function", ["None"], ["", "", "def", "load_imageid", "(", "img_root", ")", ":", "\n", "    ", "img_ids", "=", "set", "(", ")", "\n", "for", "image_path", "in", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "img_root", ",", "'*.jpg'", ")", ")", ":", "\n", "        ", "img_ids", ".", "add", "(", "int", "(", "image_path", "[", "-", "12", ":", "-", "4", "]", ")", ")", "\n", "\n", "", "print", "(", "'number of images: '", ",", "len", "(", "img_ids", ")", ")", "\n", "assert", "len", "(", "img_ids", ")", "!=", "0", "\n", "return", "img_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.decoders.disc.DiscriminativeDecoder.__init__": [[10, 18], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "utils.DynamicRNN", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "encoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "# share word embedding", "\n", "self", ".", "word_embed", "=", "encoder", ".", "word_embed", "\n", "self", ".", "opt_embed", "=", "nn", ".", "LSTM", "(", "args", ".", "embed_size", ",", "512", ",", "batch_first", "=", "True", ",", "dropout", "=", "args", ".", "dropout", ")", "\n", "self", ".", "opt_embed", "=", "DynamicRNN", "(", "self", ".", "opt_embed", ")", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.decoders.disc.DiscriminativeDecoder.forward": [[19, 49], ["options.view.view.view", "options_len.view.view.view", "options.view.view.size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "disc.DiscriminativeDecoder.log_softmax", "options.view.view.size", "disc.DiscriminativeDecoder.word_embed", "disc.DiscriminativeDecoder.opt_embed", "torch.stack.append", "torch.stack.append", "options.view.view.size", "options.view.view.size", "options_len.view.view.size", "options_len.view.view.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append"], ["", "def", "forward", "(", "self", ",", "enc_out", ",", "batch", ")", ":", "\n", "        ", "\"\"\"Given encoder output `enc_out` and candidate output option sequences,\n        predict a score for each output sequence.\n\n        Arguments\n        ---------\n        enc_out : torch.autograd.Variable\n            Output from the encoder through its forward pass. (b, rnn_hidden_size)\n        options : torch.LongTensor\n            Candidate answer option sequences. (b, num_options, max_len + 1) \n        \"\"\"", "\n", "options", "=", "batch", "[", "'opt'", "]", "#[b, num_dial, 100, 20]", "\n", "options_len", "=", "batch", "[", "'opt_len'", "]", "#[b, num_dial, 100]", "\n", "# word embed options", "\n", "options", "=", "options", ".", "view", "(", "options", ".", "size", "(", "0", ")", "*", "options", ".", "size", "(", "1", ")", ",", "options", ".", "size", "(", "2", ")", ",", "-", "1", ")", "#[bx10, 100, 20]", "\n", "options_len", "=", "options_len", ".", "view", "(", "options_len", ".", "size", "(", "0", ")", "*", "options_len", ".", "size", "(", "1", ")", ",", "-", "1", ")", "#[bx10, 100]", "\n", "batch_size", ",", "num_options", ",", "max_opt_len", "=", "options", ".", "size", "(", ")", "\n", "# score each option", "\n", "scores", "=", "[", "]", "\n", "for", "opt_id", "in", "range", "(", "num_options", ")", ":", "\n", "            ", "opt", "=", "options", "[", ":", ",", "opt_id", ",", ":", "]", "\n", "optl", "=", "options_len", "[", ":", ",", "opt_id", "]", "\n", "opt", "=", "self", ".", "word_embed", "(", "opt", ")", "\n", "o_emb", "=", "self", ".", "opt_embed", "(", "opt", ",", "optl", ")", "\n", "scores", ".", "append", "(", "torch", ".", "sum", "(", "o_emb", "*", "enc_out", ",", "1", ")", ")", "\n", "\n", "# return scores", "\n", "", "scores", "=", "torch", ".", "stack", "(", "scores", ",", "1", ")", "\n", "log_probs", "=", "self", ".", "log_softmax", "(", "scores", ")", "\n", "return", "log_probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.decoders.__init__.Decoder": [[4, 9], ["None"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.add_cmdline_args": [[15, 24], ["parser.add_argument_group", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_cmdline_args", "(", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument_group", "(", "'Encoder specific arguments'", ")", "\n", "parser", ".", "add_argument", "(", "'-embed_size'", ",", "default", "=", "300", ",", "\n", "help", "=", "'Size of the input word embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'-hidden_size'", ",", "default", "=", "512", ",", "\n", "help", "=", "'Size of the multimodal embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'-dropout'", ",", "default", "=", "0.5", ",", "help", "=", "'Dropout'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.__init__": [[25, 43], ["torch.nn.Module.__init__", "torch.nn.BatchNorm1d", "utils.WordEmbedding", "torch.nn.LSTM", "utils.DynamicRNN", "torch.nn.LSTM", "utils.DynamicRNN", "modules.FIND", "fc.FCNet", "fc.FCNet", "torch.nn.Linear", "torch.nn.ModuleList", "modules.REFER", "range"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "args", ".", "hidden_size", ")", "\n", "self", ".", "word_embed", "=", "WordEmbedding", "(", "args", ".", "vocab_size", ",", "300", ",", ".0", ")", "\n", "self", ".", "sent_embed", "=", "nn", ".", "LSTM", "(", "args", ".", "embed_size", ",", "args", ".", "hidden_size", ",", "2", ",", "dropout", "=", "args", ".", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "sent_embed", "=", "DynamicRNN", "(", "self", ".", "sent_embed", ")", "\n", "self", ".", "hist_embed", "=", "nn", ".", "LSTM", "(", "args", ".", "embed_size", ",", "args", ".", "hidden_size", ",", "2", ",", "dropout", "=", "args", ".", "dropout", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "hist_embed", "=", "DynamicRNN", "(", "self", ".", "hist_embed", ")", "\n", "self", ".", "bup_att", "=", "FIND", "(", "2048", ",", "1024", ",", "1024", ")", "\n", "\n", "self", ".", "q_net", "=", "FCNet", "(", "[", "1024", ",", "1024", "]", ")", "\n", "self", ".", "v_net", "=", "FCNet", "(", "[", "2048", ",", "1024", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "args", ".", "hidden_size", "*", "2", ",", "args", ".", "hidden_size", ")", "\n", "\n", "self", ".", "layer_stack", "=", "nn", ".", "ModuleList", "(", "[", "\n", "REFER", "(", "d_model", "=", "512", ",", "d_inner", "=", "1024", ",", "n_head", "=", "4", ",", "d_k", "=", "256", ",", "d_v", "=", "256", ",", "dropout", "=", "0.2", ")", "\n", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.add_entry": [[44, 51], ["encoder.DAN.word_embed", "encoder.DAN.hist_embed().unsqueeze", "torch.cat", "encoder.DAN.hist_embed"], "methods", ["None"], ["", "def", "add_entry", "(", "self", ",", "mem", ",", "hist", ",", "hist_len", ")", ":", "\n", "        ", "h_emb", "=", "self", ".", "word_embed", "(", "hist", ")", "\n", "h_emb", "=", "self", ".", "hist_embed", "(", "h_emb", ",", "hist_len", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "mem", "is", "None", ":", "mem", "=", "h_emb", "\n", "else", ":", "mem", "=", "torch", ".", "cat", "(", "(", "mem", ",", "h_emb", ")", ",", "1", ")", "\n", "return", "mem", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.refer_module": [[52, 61], ["q.unsqueeze", "q.unsqueeze.squeeze", "enc_layer"], "methods", ["None"], ["", "def", "refer_module", "(", "self", ",", "mem", ",", "q", ")", ":", "\n", "        ", "'''\n        q : [b, 512]\n        mem : [b, number of entry, 512]\n        '''", "\n", "context", "=", "q", ".", "unsqueeze", "(", "1", ")", "\n", "for", "enc_layer", "in", "self", ".", "layer_stack", ":", "\n", "            ", "context", ",", "_", "=", "enc_layer", "(", "context", ",", "mem", ")", "\n", "", "return", "context", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.find_module": [[62, 68], ["encoder.DAN.bup_att", "encoder.DAN.q_net", "encoder.DAN.v_net"], "methods", ["None"], ["", "def", "find_module", "(", "self", ",", "v", ",", "l", ")", ":", "\n", "        ", "att", "=", "self", ".", "bup_att", "(", "v", ",", "l", ")", "\n", "v_emb", "=", "(", "att", "*", "v", ")", ".", "sum", "(", "1", ")", "\n", "q_repr", "=", "self", ".", "q_net", "(", "l", ")", "\n", "v_repr", "=", "self", ".", "v_net", "(", "v_emb", ")", "\n", "return", "q_repr", "*", "v_repr", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.forward": [[69, 100], ["q.size", "encoder.DAN.add_entry", "range", "torch.stack", "encoder.DAN.linear", "encoder.DAN.bn", "torch.nn.functional.dropout", "encoder.DAN.word_embed", "encoder.DAN.sent_embed", "encoder.DAN.refer_module", "torch.cat", "encoder.DAN.find_module", "enc_outs.append", "torch.nn.functional.dropout.view", "encoder.DAN.add_entry"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.add_entry", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.refer_module", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.find_module", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.encoder.DAN.add_entry"], ["", "def", "forward", "(", "self", ",", "batch", ")", ":", "\n", "        ", "v", "=", "batch", "[", "'img_feat'", "]", "\n", "q", "=", "batch", "[", "'ques'", "]", "\n", "ql", "=", "batch", "[", "'ques_len'", "]", "\n", "c", "=", "batch", "[", "'cap'", "]", "\n", "cl", "=", "batch", "[", "'cap_len'", "]", "\n", "h", "=", "batch", "[", "'hist'", "]", "\n", "hl", "=", "batch", "[", "'hist_len'", "]", "\n", "\n", "batch", ",", "num_dial", ",", "maxseq", "=", "q", ".", "size", "(", ")", "\n", "mem", "=", "self", ".", "add_entry", "(", "None", ",", "c", ",", "cl", ")", "\n", "enc_outs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_dial", ")", ":", "\n", "            ", "q_emb", "=", "self", ".", "word_embed", "(", "q", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "q_emb", "=", "self", ".", "sent_embed", "(", "q_emb", ",", "ql", "[", ":", ",", "i", "]", ")", "\n", "\n", "hist", "=", "self", ".", "refer_module", "(", "mem", ",", "q_emb", ")", "\n", "ref_aware", "=", "torch", ".", "cat", "(", "(", "q_emb", ",", "hist", ")", ",", "1", ")", "\n", "joint", "=", "self", ".", "find_module", "(", "v", ",", "ref_aware", ")", "\n", "enc_outs", ".", "append", "(", "joint", ")", "\n", "\n", "# write history embedding to memory", "\n", "if", "i", "!=", "num_dial", "-", "1", ":", "\n", "                ", "mem", "=", "self", ".", "add_entry", "(", "mem", ",", "h", "[", ":", ",", "i", "+", "1", ",", ":", "]", ",", "hl", "[", ":", ",", "i", "+", "1", "]", ")", "\n", "\n", "", "", "enc_out", "=", "torch", ".", "stack", "(", "enc_outs", ",", "1", ")", "\n", "enc_out", "=", "self", ".", "linear", "(", "enc_out", ")", "\n", "enc_out", "=", "self", ".", "bn", "(", "enc_out", ".", "view", "(", "-", "1", ",", "self", ".", "args", ".", "hidden_size", ")", ")", "\n", "enc_out", "=", "F", ".", "dropout", "(", "enc_out", ",", "0.5", ")", "\n", "return", "enc_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.fc.FCNet.__init__": [[12, 25], ["torch.Module.__init__", "range", "layers.append", "layers.append", "torch.Sequential", "layers.append", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "torch.ReLU", "len", "torch.nn.utils.weight_norm.weight_norm", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append"], ["def", "__init__", "(", "self", ",", "dims", ")", ":", "\n", "        ", "super", "(", "FCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", "-", "2", ")", ":", "\n", "            ", "in_dim", "=", "dims", "[", "i", "]", "\n", "out_dim", "=", "dims", "[", "i", "+", "1", "]", "\n", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "dim", "=", "None", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "dims", "[", "-", "2", "]", ",", "dims", "[", "-", "1", "]", ")", ",", "dim", "=", "None", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.fc.FCNet.forward": [[26, 28], ["fc.FCNet.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.modules.REFER.__init__": [[18, 22], ["torch.Module.__init__", "submodules.MultiHeadAttention", "submodules.PositionwiseFeedForward"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "n_head", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "REFER", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "slf_attn", "=", "MultiHeadAttention", "(", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "pos_ffn", "=", "PositionwiseFeedForward", "(", "d_model", ",", "d_inner", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.modules.REFER.forward": [[23, 27], ["modules.REFER.slf_attn", "modules.REFER.pos_ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "m", ")", ":", "\n", "        ", "enc_output", ",", "enc_slf_attn", "=", "self", ".", "slf_attn", "(", "q", ",", "m", ",", "m", ")", "\n", "enc_output", "=", "self", ".", "pos_ffn", "(", "enc_output", ")", "\n", "return", "enc_output", ",", "enc_slf_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.modules.FIND.__init__": [[32, 39], ["torch.Module.__init__", "fc.FCNet", "fc.FCNet", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "v_dim", ",", "q_dim", ",", "num_hid", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "FIND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "v_proj", "=", "FCNet", "(", "[", "v_dim", ",", "num_hid", "]", ")", "\n", "self", ".", "q_proj", "=", "FCNet", "(", "[", "q_dim", ",", "num_hid", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "num_hid", ",", "1", ")", ",", "dim", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.modules.FIND.forward": [[40, 52], ["modules.FIND.logits", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "modules.FIND.data.masked_fill_", "float", "v.abs().sum", "v.abs"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.modules.FIND.logits"], ["", "def", "forward", "(", "self", ",", "v", ",", "q", ",", "v_mask", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        v: [batch, v, 2048]\n        q: [10, batch, 1024]\n        \"\"\"", "\n", "logits", "=", "self", ".", "logits", "(", "v", ",", "q", ")", "\n", "if", "v_mask", ":", "\n", "            ", "mask", "=", "(", "0", "==", "v", ".", "abs", "(", ")", ".", "sum", "(", "2", ")", ")", ".", "unsqueeze", "(", "2", ")", "\n", "logits", ".", "data", ".", "masked_fill_", "(", "mask", ".", "data", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "", "w", "=", "nn", ".", "functional", ".", "softmax", "(", "logits", ",", "1", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.modules.FIND.logits": [[53, 61], ["v.size", "modules.FIND.v_proj", "modules.FIND.q_proj().unsqueeze().repeat", "modules.FIND.dropout", "modules.FIND.linear", "modules.FIND.q_proj().unsqueeze", "modules.FIND.q_proj"], "methods", ["None"], ["", "def", "logits", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "        ", "batch", ",", "k", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "v_proj", "=", "self", ".", "v_proj", "(", "v", ")", "\n", "q_proj", "=", "self", ".", "q_proj", "(", "q", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "k", ",", "1", ")", "\n", "joint_repr", "=", "v_proj", "*", "q_proj", "\n", "joint_repr", "=", "self", ".", "dropout", "(", "joint_repr", ")", "\n", "logits", "=", "self", ".", "linear", "(", "joint_repr", ")", "\n", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.__init__.Encoder": [[3, 8], ["None"], "function", ["None"], ["from", ".", "utils", "import", "create_glove_embedding_init", "\n", ""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.MultiHeadAttention.__init__": [[12, 32], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.normal", "torch.init.normal", "torch.init.normal", "torch.init.normal", "torch.init.normal", "torch.init.normal", "torch.init.normal", "torch.init.normal", "torch.init.normal", "submodules.ScaledDotProductAttention", "submodules.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.init.xavier_normal", "torch.Dropout", "torch.Dropout", "torch.Dropout", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_k", ",", "d_v", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_k", "=", "d_k", "\n", "self", ".", "d_v", "=", "d_v", "\n", "\n", "self", ".", "w_qs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_ks", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_k", ")", "\n", "self", ".", "w_vs", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_v", ")", "\n", "nn", ".", "init", ".", "normal", "(", "self", ".", "w_qs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal", "(", "self", ".", "w_ks", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_k", ")", ")", ")", "\n", "nn", ".", "init", ".", "normal", "(", "self", ".", "w_vs", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2.0", "/", "(", "d_model", "+", "d_v", ")", ")", ")", "\n", "\n", "self", ".", "attention", "=", "ScaledDotProductAttention", "(", "temperature", "=", "np", ".", "power", "(", "d_k", ",", "0.5", ")", ")", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_v", ",", "d_model", ")", "\n", "nn", ".", "init", ".", "xavier_normal", "(", "self", ".", "fc", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.MultiHeadAttention.forward": [[33, 65], ["q.permute().contiguous().view.permute().contiguous().view.size", "k.permute().contiguous().view.permute().contiguous().view.size", "v.permute().contiguous().view.permute().contiguous().view.size", "submodules.MultiHeadAttention.w_qs().view", "submodules.MultiHeadAttention.w_ks().view", "submodules.MultiHeadAttention.w_vs().view", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous().view", "submodules.MultiHeadAttention.attention", "submodules.MultiHeadAttention.view", "submodules.MultiHeadAttention.permute().contiguous().view", "submodules.MultiHeadAttention.dropout", "submodules.MultiHeadAttention.layer_norm", "mask.repeat.repeat.repeat", "submodules.MultiHeadAttention.fc", "submodules.MultiHeadAttention.w_qs", "submodules.MultiHeadAttention.w_ks", "submodules.MultiHeadAttention.w_vs", "q.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "k.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "v.permute().contiguous().view.permute().contiguous().view.permute().contiguous", "submodules.MultiHeadAttention.permute().contiguous", "q.permute().contiguous().view.permute().contiguous().view.permute", "k.permute().contiguous().view.permute().contiguous().view.permute", "v.permute().contiguous().view.permute().contiguous().view.permute", "submodules.MultiHeadAttention.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "        ", "'''\n        q: [batch, 1, 512]\n        k, v: [batch, num_entry, 512]\n        '''", "\n", "d_k", ",", "d_v", ",", "n_head", "=", "self", ".", "d_k", ",", "self", ".", "d_v", ",", "self", ".", "n_head", "\n", "\n", "sz_b", ",", "len_q", ",", "_", "=", "q", ".", "size", "(", ")", "\n", "sz_b", ",", "len_k", ",", "_", "=", "k", ".", "size", "(", ")", "\n", "sz_b", ",", "len_v", ",", "_", "=", "v", ".", "size", "(", ")", "\n", "\n", "residual", "=", "q", "\n", "\n", "q", "=", "self", ".", "w_qs", "(", "q", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "n_head", ",", "d_k", ")", "\n", "k", "=", "self", ".", "w_ks", "(", "k", ")", ".", "view", "(", "sz_b", ",", "len_k", ",", "n_head", ",", "d_k", ")", "\n", "v", "=", "self", ".", "w_vs", "(", "v", ")", ".", "view", "(", "sz_b", ",", "len_v", ",", "n_head", ",", "d_v", ")", "\n", "\n", "q", "=", "q", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_q", ",", "d_k", ")", "# (n*b) x lq x dk", "\n", "k", "=", "k", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_k", ",", "d_k", ")", "# (n*b) x lk x dk", "\n", "v", "=", "v", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "len_v", ",", "d_v", ")", "# (n*b) x lv x dv", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask", "=", "mask", ".", "repeat", "(", "n_head", ",", "1", ",", "1", ")", "# (n*b) x .. x ..", "\n", "", "output", ",", "attn", "=", "self", ".", "attention", "(", "q", ",", "k", ",", "v", ",", "mask", "=", "mask", ")", "\n", "\n", "output", "=", "output", ".", "view", "(", "n_head", ",", "sz_b", ",", "len_q", ",", "d_v", ")", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ",", "3", ")", ".", "contiguous", "(", ")", ".", "view", "(", "sz_b", ",", "len_q", ",", "-", "1", ")", "# b x lq x (n*dv)", "\n", "\n", "output", "=", "self", ".", "dropout", "(", "self", ".", "fc", "(", "output", ")", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.ScaledDotProductAttention.__init__": [[69, 74], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "temperature", ",", "attn_dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "attn_dropout", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.ScaledDotProductAttention.forward": [[75, 88], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "submodules.ScaledDotProductAttention.softmax", "submodules.ScaledDotProductAttention.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "k.transpose", "attn.masked_fill.masked_fill.masked_fill"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ",", "v", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn", "=", "attn", "/", "self", ".", "temperature", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "attn", "=", "attn", ".", "masked_fill", "(", "mask", ",", "-", "np", ".", "inf", ")", "\n", "\n", "", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "attn", "=", "self", ".", "dropout", "(", "attn", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "attn", ",", "v", ")", "\n", "\n", "return", "output", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.PositionwiseFeedForward.__init__": [[92, 98], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "submodules.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "d_in", ",", "d_hid", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Conv1d", "(", "d_in", ",", "d_hid", ",", "1", ")", "# position-wise", "\n", "self", ".", "w_2", "=", "nn", ".", "Conv1d", "(", "d_hid", ",", "d_in", ",", "1", ")", "# position-wise", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "d_in", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.PositionwiseFeedForward.forward": [[99, 107], ["x.transpose", "submodules.PositionwiseFeedForward.w_2", "submodules.PositionwiseFeedForward.transpose", "submodules.PositionwiseFeedForward.dropout", "submodules.PositionwiseFeedForward.layer_norm", "torch.relu", "torch.relu", "torch.relu", "submodules.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "output", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "w_2", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "output", ")", ")", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "residual", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__": [[112, 117], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.encoders.submodules.LayerNorm.forward": [[118, 122], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "gamma", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "beta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.data.prepro.tokenize_data": [[35, 81], ["print", "enumerate", "print", "tqdm.tqdm", "tqdm.tqdm", "print", "enumerate", "print", "tqdm.tqdm", "nltk.tokenize.word_tokenize", "q_tokens.append", "a_tokens.append", "tqdm.tqdm", "len", "print", "enumerate", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize", "len", "dialog[].append", "tqdm.tqdm", "range", "word_counts.get"], "function", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append"], ["def", "tokenize_data", "(", "data", ",", "word_count", "=", "False", ")", ":", "\n", "    ", "\"\"\"Tokenize captions, questions and answers, maintain word count\n    if required.\n    \"\"\"", "\n", "word_counts", "=", "{", "}", "\n", "dialogs", "=", "data", "[", "'data'", "]", "[", "'dialogs'", "]", "\n", "# dialogs is a nested dict so won't be copied, just a reference", "\n", "\n", "print", "(", "\"[%s] Tokenizing captions...\"", "%", "data", "[", "'split'", "]", ")", "\n", "for", "i", ",", "dialog", "in", "enumerate", "(", "tqdm", "(", "dialogs", ")", ")", ":", "\n", "        ", "caption", "=", "word_tokenize", "(", "dialog", "[", "'caption'", "]", ")", "\n", "dialogs", "[", "i", "]", "[", "'caption_tokens'", "]", "=", "caption", "\n", "\n", "", "print", "(", "\"[%s] Tokenizing questions and answers...\"", "%", "data", "[", "'split'", "]", ")", "\n", "q_tokens", ",", "a_tokens", "=", "[", "]", ",", "[", "]", "\n", "for", "q", "in", "tqdm", "(", "data", "[", "'data'", "]", "[", "'questions'", "]", ")", ":", "\n", "        ", "q_tokens", ".", "append", "(", "word_tokenize", "(", "q", "+", "'?'", ")", ")", "\n", "\n", "", "for", "a", "in", "tqdm", "(", "data", "[", "'data'", "]", "[", "'answers'", "]", ")", ":", "\n", "        ", "a_tokens", ".", "append", "(", "word_tokenize", "(", "a", ")", ")", "\n", "", "data", "[", "'data'", "]", "[", "'question_tokens'", "]", "=", "q_tokens", "\n", "data", "[", "'data'", "]", "[", "'answer_tokens'", "]", "=", "a_tokens", "\n", "\n", "print", "(", "\"[%s] Filling missing values in dialog, if any...\"", "%", "data", "[", "'split'", "]", ")", "\n", "for", "i", ",", "dialog", "in", "enumerate", "(", "tqdm", "(", "dialogs", ")", ")", ":", "\n", "# last round of dialog will not have answer for test split", "\n", "        ", "if", "'answer'", "not", "in", "dialog", "[", "'dialog'", "]", "[", "-", "1", "]", ":", "\n", "            ", "dialog", "[", "'dialog'", "]", "[", "-", "1", "]", "[", "'answer'", "]", "=", "-", "1", "\n", "# right-pad dialog with empty question-answer pairs at the end", "\n", "", "dialog", "[", "'num_rounds'", "]", "=", "len", "(", "dialog", "[", "'dialog'", "]", ")", "\n", "while", "len", "(", "dialog", "[", "'dialog'", "]", ")", "<", "10", ":", "\n", "            ", "dialog", "[", "'dialog'", "]", ".", "append", "(", "{", "'question'", ":", "-", "1", ",", "'answer'", ":", "-", "1", "}", ")", "\n", "", "dialogs", "[", "i", "]", "=", "dialog", "\n", "\n", "", "if", "word_count", ":", "\n", "        ", "print", "(", "\"[%s] Building word counts from tokens...\"", "%", "data", "[", "'split'", "]", ")", "\n", "for", "i", ",", "dialog", "in", "enumerate", "(", "tqdm", "(", "dialogs", ")", ")", ":", "\n", "            ", "caption", "=", "dialogs", "[", "i", "]", "[", "'caption_tokens'", "]", "\n", "all_qa", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "10", ")", ":", "\n", "                ", "all_qa", "+=", "q_tokens", "[", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'question'", "]", "]", "\n", "all_qa", "+=", "a_tokens", "[", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'answer'", "]", "]", "\n", "", "for", "word", "in", "caption", "+", "all_qa", ":", "\n", "                ", "word_counts", "[", "word", "]", "=", "word_counts", ".", "get", "(", "word", ",", "0", ")", "+", "1", "\n", "", "", "", "print", "(", "'\\n'", ")", "\n", "return", "data", ",", "word_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.data.prepro.encode_vocab": [[83, 104], ["print", "enumerate", "print", "enumerate", "enumerate", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "word2ind.get", "word2ind.get", "word2ind.get"], "function", ["None"], ["", "def", "encode_vocab", "(", "data", ",", "word2ind", ")", ":", "\n", "    ", "\"\"\"Converts string tokens to indices based on given dictionary.\"\"\"", "\n", "dialogs", "=", "data", "[", "'data'", "]", "[", "'dialogs'", "]", "\n", "print", "(", "\"[%s] Encoding caption tokens...\"", "%", "data", "[", "'split'", "]", ")", "\n", "for", "i", ",", "dialog", "in", "enumerate", "(", "tqdm", "(", "dialogs", ")", ")", ":", "\n", "        ", "dialogs", "[", "i", "]", "[", "'caption_tokens'", "]", "=", "[", "word2ind", ".", "get", "(", "word", ",", "word2ind", "[", "'UNK'", "]", ")", "for", "word", "in", "dialog", "[", "'caption_tokens'", "]", "]", "\n", "\n", "", "print", "(", "\"[%s] Encoding question and answer tokens...\"", "%", "data", "[", "'split'", "]", ")", "\n", "q_tokens", "=", "data", "[", "'data'", "]", "[", "'question_tokens'", "]", "\n", "a_tokens", "=", "data", "[", "'data'", "]", "[", "'answer_tokens'", "]", "\n", "\n", "for", "i", ",", "q", "in", "enumerate", "(", "tqdm", "(", "q_tokens", ")", ")", ":", "\n", "        ", "q_tokens", "[", "i", "]", "=", "[", "word2ind", ".", "get", "(", "word", ",", "word2ind", "[", "'UNK'", "]", ")", "for", "word", "in", "q", "]", "\n", "\n", "", "for", "i", ",", "a", "in", "enumerate", "(", "tqdm", "(", "a_tokens", ")", ")", ":", "\n", "        ", "a_tokens", "[", "i", "]", "=", "[", "word2ind", ".", "get", "(", "word", ",", "word2ind", "[", "'UNK'", "]", ")", "for", "word", "in", "a", "]", "\n", "\n", "", "data", "[", "'data'", "]", "[", "'question_tokens'", "]", "=", "q_tokens", "\n", "data", "[", "'data'", "]", "[", "'answer_tokens'", "]", "=", "a_tokens", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.data.prepro.create_data_mats": [[106, 183], ["len", "numpy.arange", "print", "numpy.zeros", "numpy.zeros", "enumerate", "print", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "print", "numpy.ones", "numpy.full", "enumerate", "numpy.zeros", "numpy.zeros", "enumerate", "tqdm.tqdm", "len", "tqdm.tqdm", "range", "tqdm.tqdm", "range", "print", "numpy.zeros", "enumerate", "len", "tqdm.tqdm", "len", "tqdm.tqdm", "range", "len", "len", "len", "numpy.array"], "function", ["None"], ["", "def", "create_data_mats", "(", "data", ",", "params", ",", "dtype", ")", ":", "\n", "    ", "num_threads", "=", "len", "(", "data", "[", "'data'", "]", "[", "'dialogs'", "]", ")", "\n", "data_mats", "=", "{", "}", "\n", "data_mats", "[", "'img_pos'", "]", "=", "np", ".", "arange", "(", "num_threads", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "print", "(", "\"[%s] Creating caption data matrices...\"", "%", "data", "[", "'split'", "]", ")", "\n", "max_cap_len", "=", "params", ".", "max_cap_len", "\n", "captions", "=", "np", ".", "zeros", "(", "[", "num_threads", ",", "max_cap_len", "]", ")", "\n", "caption_len", "=", "np", ".", "zeros", "(", "num_threads", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "for", "i", ",", "dialog", "in", "enumerate", "(", "tqdm", "(", "data", "[", "'data'", "]", "[", "'dialogs'", "]", ")", ")", ":", "\n", "        ", "caption_len", "[", "i", "]", "=", "len", "(", "dialog", "[", "'caption_tokens'", "]", "[", "0", ":", "max_cap_len", "]", ")", "\n", "captions", "[", "i", "]", "[", "0", ":", "caption_len", "[", "i", "]", "]", "=", "dialog", "[", "'caption_tokens'", "]", "[", "0", ":", "max_cap_len", "]", "\n", "", "data_mats", "[", "'cap_length'", "]", "=", "caption_len", "\n", "data_mats", "[", "'cap'", "]", "=", "captions", "\n", "\n", "print", "(", "\"[%s] Creating question and answer data matrices...\"", "%", "data", "[", "'split'", "]", ")", "\n", "num_rounds", "=", "10", "\n", "max_ques_len", "=", "params", ".", "max_ques_len", "\n", "max_ans_len", "=", "params", ".", "max_ans_len", "\n", "\n", "ques", "=", "np", ".", "zeros", "(", "[", "num_threads", ",", "num_rounds", ",", "max_ques_len", "]", ")", "\n", "ans", "=", "np", ".", "zeros", "(", "[", "num_threads", ",", "num_rounds", ",", "max_ans_len", "]", ")", "\n", "ques_length", "=", "np", ".", "zeros", "(", "[", "num_threads", ",", "num_rounds", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "ans_length", "=", "np", ".", "zeros", "(", "[", "num_threads", ",", "num_rounds", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "for", "i", ",", "dialog", "in", "enumerate", "(", "tqdm", "(", "data", "[", "'data'", "]", "[", "'dialogs'", "]", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_rounds", ")", ":", "\n", "            ", "if", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'question'", "]", "!=", "-", "1", ":", "\n", "                ", "ques_length", "[", "i", "]", "[", "j", "]", "=", "len", "(", "data", "[", "'data'", "]", "[", "'question_tokens'", "]", "[", "\n", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'question'", "]", "]", "[", "0", ":", "max_ques_len", "]", ")", "\n", "ques", "[", "i", "]", "[", "j", "]", "[", "0", ":", "ques_length", "[", "i", "]", "[", "j", "]", "]", "=", "data", "[", "'data'", "]", "[", "'question_tokens'", "]", "[", "\n", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'question'", "]", "]", "[", "0", ":", "max_ques_len", "]", "\n", "", "if", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'answer'", "]", "!=", "-", "1", ":", "\n", "                ", "ans_length", "[", "i", "]", "[", "j", "]", "=", "len", "(", "data", "[", "'data'", "]", "[", "'answer_tokens'", "]", "[", "\n", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'answer'", "]", "]", "[", "0", ":", "max_ans_len", "]", ")", "\n", "ans", "[", "i", "]", "[", "j", "]", "[", "0", ":", "ans_length", "[", "i", "]", "[", "j", "]", "]", "=", "data", "[", "'data'", "]", "[", "'answer_tokens'", "]", "[", "\n", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'answer'", "]", "]", "[", "0", ":", "max_ans_len", "]", "\n", "\n", "", "", "", "data_mats", "[", "'ques'", "]", "=", "ques", "\n", "data_mats", "[", "'ans'", "]", "=", "ans", "\n", "data_mats", "[", "'ques_length'", "]", "=", "ques_length", "\n", "data_mats", "[", "'ans_length'", "]", "=", "ans_length", "\n", "\n", "print", "(", "\"[%s] Creating options data matrices...\"", "%", "data", "[", "'split'", "]", ")", "\n", "# options and answer_index are 1-indexed specifically for lua", "\n", "options", "=", "np", ".", "ones", "(", "[", "num_threads", ",", "num_rounds", ",", "100", "]", ")", "\n", "num_rounds_list", "=", "np", ".", "full", "(", "num_threads", ",", "10", ")", "\n", "\n", "for", "i", ",", "dialog", "in", "enumerate", "(", "tqdm", "(", "data", "[", "'data'", "]", "[", "'dialogs'", "]", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_rounds", ")", ":", "\n", "            ", "num_rounds_list", "[", "i", "]", "=", "dialog", "[", "'num_rounds'", "]", "\n", "# v1.0 test does not have options for all dialog rounds", "\n", "if", "'answer_options'", "in", "dialog", "[", "'dialog'", "]", "[", "j", "]", ":", "\n", "                ", "options", "[", "i", "]", "[", "j", "]", "+=", "np", ".", "array", "(", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'answer_options'", "]", ")", "\n", "\n", "", "", "", "data_mats", "[", "'num_rounds'", "]", "=", "num_rounds_list", "\n", "data_mats", "[", "'opt'", "]", "=", "options", "\n", "\n", "if", "dtype", "!=", "'test'", ":", "\n", "        ", "print", "(", "\"[%s] Creating ground truth answer data matrices...\"", "%", "data", "[", "'split'", "]", ")", "\n", "answer_index", "=", "np", ".", "zeros", "(", "[", "num_threads", ",", "num_rounds", "]", ")", "\n", "for", "i", ",", "dialog", "in", "enumerate", "(", "tqdm", "(", "data", "[", "'data'", "]", "[", "'dialogs'", "]", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_rounds", ")", ":", "\n", "                ", "answer_index", "[", "i", "]", "[", "j", "]", "=", "dialog", "[", "'dialog'", "]", "[", "j", "]", "[", "'gt_index'", "]", "+", "1", "\n", "", "", "data_mats", "[", "'ans_index'", "]", "=", "answer_index", "\n", "\n", "", "options_len", "=", "np", ".", "zeros", "(", "len", "(", "data", "[", "'data'", "]", "[", "'answer_tokens'", "]", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "options_list", "=", "np", ".", "zeros", "(", "[", "len", "(", "data", "[", "'data'", "]", "[", "'answer_tokens'", "]", ")", ",", "max_ans_len", "]", ")", "\n", "\n", "for", "i", ",", "ans_token", "in", "enumerate", "(", "tqdm", "(", "data", "[", "'data'", "]", "[", "'answer_tokens'", "]", ")", ")", ":", "\n", "        ", "options_len", "[", "i", "]", "=", "len", "(", "ans_token", "[", "0", ":", "max_ans_len", "]", ")", "\n", "options_list", "[", "i", "]", "[", "0", ":", "options_len", "[", "i", "]", "]", "=", "ans_token", "[", "0", ":", "max_ans_len", "]", "\n", "\n", "", "data_mats", "[", "'opt_length'", "]", "=", "options_len", "\n", "data_mats", "[", "'opt_list'", "]", "=", "options_list", "\n", "return", "data_mats", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.data.prepro.get_image_ids": [[185, 188], ["None"], "function", ["None"], ["", "def", "get_image_ids", "(", "data", ")", ":", "\n", "    ", "image_ids", "=", "[", "dialog", "[", "'image_id'", "]", "for", "dialog", "in", "data", "[", "'data'", "]", "[", "'dialogs'", "]", "]", "\n", "return", "image_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.data.adaptive_detection_features_converter.extract": [[32, 161], ["os.path.exists", "h5py.File", "print", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "pickle.dump", "h5py.File.close", "print", "pickle.load", "utils.utils.load_imageid", "pickle.dump", "print", "print", "print", "len", "print", "open", "open", "open", "print", "len", "open", "csv.DictReader", "open", "csv.DictReader", "int", "bytes().encode", "bytes().encode", "int", "float", "float", "numpy.frombuffer().reshape", "numpy.concatenate", "len", "len", "int", "int", "utils.load_imageid.remove", "numpy.array", "numpy.frombuffer().reshape", "unknown_ids.append", "bytes", "bytes", "numpy.frombuffer", "base64.decodestring", "numpy.frombuffer", "base64.decodestring"], "function", ["home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.load_imageid", "home.repos.pwc.inspect_result.gicheonkang_DAN-VisDial.utils.utils.Logger.append"], ["def", "extract", "(", "split", ",", "infiles", ")", ":", "\n", "    ", "FIELDNAMES", "=", "[", "'image_id'", ",", "'image_w'", ",", "'image_h'", ",", "'num_boxes'", ",", "'boxes'", ",", "'features'", "]", "\n", "# feature data name to write", "\n", "data_file", "=", "{", "\n", "'train'", ":", "'/data/data/visdial/train_feature/train_0.9_btmup_f.hdf5'", ",", "\n", "'val'", ":", "'/data/data/visdial/val_feature/val_0.9_btmup_f.hdf5'", ",", "\n", "'test'", ":", "'/data/data/visdial/test_feature/test_btmup_f.hdf5'", "}", "\n", "indices_file", "=", "{", "\n", "'train'", ":", "'/data/data/visdial/train_feature/train_0.9_imgid2idx.pkl'", ",", "\n", "'val'", ":", "'/data/data/visdial/val_feature/val_0.9_imgid2idx.pkl'", ",", "\n", "'test'", ":", "'/data/data/visdial/test_feature/test_imgid2idx.pkl'", "}", "\n", "ids_file", "=", "{", "\n", "'train'", ":", "'/data/data/visdial/train_feature/train_0.9_ids.pkl'", ",", "\n", "'val'", ":", "'/data/data/visdial/val_feature/val_0.9_ids.pkl'", ",", "\n", "'test'", ":", "'/data/data/visdial/test_feature/test_ids.pkl'", "\n", "}", "\n", "path_imgs", "=", "{", "\n", "'train'", ":", "'/data/data/visdial/images/train2014'", ",", "\n", "'val'", ":", "'/data/data/visdial/images/val2014'", ",", "\n", "'test'", ":", "'/data/data/visdial/images/VisualDialog_test2018'", "\n", "}", "\n", "known_num_boxes", "=", "{", "\n", "'train'", ":", "None", ",", "\n", "'val'", ":", "None", ",", "\n", "'test'", ":", "None", ",", "\n", "}", "\n", "feature_length", "=", "2048", "\n", "min_fixed_boxes", "=", "10", "\n", "max_fixed_boxes", "=", "100", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "ids_file", "[", "split", "]", ")", ":", "\n", "        ", "imgids", "=", "cPickle", ".", "load", "(", "open", "(", "ids_file", "[", "split", "]", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "        ", "imgids", "=", "utils", ".", "load_imageid", "(", "path_imgs", "[", "split", "]", ")", "\n", "cPickle", ".", "dump", "(", "imgids", ",", "open", "(", "ids_file", "[", "split", "]", ",", "'wb'", ")", ")", "\n", "\n", "", "h", "=", "h5py", ".", "File", "(", "data_file", "[", "split", "]", ",", "'w'", ")", "\n", "\n", "if", "known_num_boxes", "[", "split", "]", "is", "None", ":", "\n", "        ", "num_boxes", "=", "0", "\n", "for", "infile", "in", "infiles", ":", "\n", "            ", "print", "(", "\"reading tsv...%s\"", "%", "infile", ")", "\n", "with", "open", "(", "infile", ",", "\"r+\"", ")", "as", "tsv_in_file", ":", "\n", "                ", "reader", "=", "csv", ".", "DictReader", "(", "tsv_in_file", ",", "delimiter", "=", "'\\t'", ",", "fieldnames", "=", "FIELDNAMES", ")", "\n", "for", "item", "in", "reader", ":", "\n", "                    ", "item", "[", "'num_boxes'", "]", "=", "int", "(", "item", "[", "'num_boxes'", "]", ")", "\n", "image_id", "=", "int", "(", "item", "[", "'image_id'", "]", ")", "\n", "if", "image_id", "in", "imgids", ":", "\n", "                        ", "num_boxes", "+=", "item", "[", "'num_boxes'", "]", "\n", "", "", "", "", "", "else", ":", "\n", "        ", "num_boxes", "=", "known_num_boxes", "[", "split", "]", "\n", "\n", "", "print", "(", "'num_boxes=%d'", "%", "num_boxes", ")", "\n", "\n", "img_features", "=", "h", ".", "create_dataset", "(", "\n", "'image_features'", ",", "(", "num_boxes", ",", "feature_length", ")", ",", "'f'", ")", "\n", "img_bb", "=", "h", ".", "create_dataset", "(", "\n", "'image_bb'", ",", "(", "num_boxes", ",", "4", ")", ",", "'f'", ")", "\n", "spatial_img_features", "=", "h", ".", "create_dataset", "(", "\n", "'spatial_features'", ",", "(", "num_boxes", ",", "6", ")", ",", "'f'", ")", "\n", "pos_boxes", "=", "h", ".", "create_dataset", "(", "\n", "'pos_boxes'", ",", "(", "len", "(", "imgids", ")", ",", "2", ")", ",", "dtype", "=", "'int32'", ")", "\n", "\n", "counter", "=", "0", "\n", "num_boxes", "=", "0", "\n", "indices", "=", "{", "}", "\n", "\n", "for", "infile", "in", "infiles", ":", "\n", "        ", "unknown_ids", "=", "[", "]", "\n", "print", "(", "\"reading tsv...%s\"", "%", "infile", ")", "\n", "with", "open", "(", "infile", ",", "\"r+\"", ")", "as", "tsv_in_file", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "tsv_in_file", ",", "delimiter", "=", "'\\t'", ",", "fieldnames", "=", "FIELDNAMES", ")", "\n", "for", "item", "in", "reader", ":", "\n", "                ", "item", "[", "'num_boxes'", "]", "=", "int", "(", "item", "[", "'num_boxes'", "]", ")", "\n", "item", "[", "'boxes'", "]", "=", "bytes", "(", "item", "[", "'boxes'", "]", ")", ".", "encode", "(", "'utf'", ")", "\n", "item", "[", "'features'", "]", "=", "bytes", "(", "item", "[", "'features'", "]", ")", ".", "encode", "(", "'utf'", ")", "\n", "image_id", "=", "int", "(", "item", "[", "'image_id'", "]", ")", "\n", "image_w", "=", "float", "(", "item", "[", "'image_w'", "]", ")", "\n", "image_h", "=", "float", "(", "item", "[", "'image_h'", "]", ")", "\n", "bboxes", "=", "np", ".", "frombuffer", "(", "\n", "base64", ".", "decodestring", "(", "item", "[", "'boxes'", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "item", "[", "'num_boxes'", "]", ",", "-", "1", ")", ")", "\n", "\n", "box_width", "=", "bboxes", "[", ":", ",", "2", "]", "-", "bboxes", "[", ":", ",", "0", "]", "\n", "box_height", "=", "bboxes", "[", ":", ",", "3", "]", "-", "bboxes", "[", ":", ",", "1", "]", "\n", "scaled_width", "=", "box_width", "/", "image_w", "\n", "scaled_height", "=", "box_height", "/", "image_h", "\n", "scaled_x", "=", "bboxes", "[", ":", ",", "0", "]", "/", "image_w", "\n", "scaled_y", "=", "bboxes", "[", ":", ",", "1", "]", "/", "image_h", "\n", "\n", "box_width", "=", "box_width", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "box_height", "=", "box_height", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "scaled_width", "=", "scaled_width", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "scaled_height", "=", "scaled_height", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "scaled_x", "=", "scaled_x", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "scaled_y", "=", "scaled_y", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "spatial_features", "=", "np", ".", "concatenate", "(", "\n", "(", "scaled_x", ",", "\n", "scaled_y", ",", "\n", "scaled_x", "+", "scaled_width", ",", "\n", "scaled_y", "+", "scaled_height", ",", "\n", "scaled_width", ",", "\n", "scaled_height", ")", ",", "\n", "axis", "=", "1", ")", "\n", "\n", "if", "image_id", "in", "imgids", ":", "\n", "                    ", "imgids", ".", "remove", "(", "image_id", ")", "\n", "indices", "[", "image_id", "]", "=", "counter", "\n", "pos_boxes", "[", "counter", ",", ":", "]", "=", "np", ".", "array", "(", "[", "num_boxes", ",", "num_boxes", "+", "item", "[", "'num_boxes'", "]", "]", ")", "\n", "img_bb", "[", "num_boxes", ":", "num_boxes", "+", "item", "[", "'num_boxes'", "]", ",", ":", "]", "=", "bboxes", "\n", "img_features", "[", "num_boxes", ":", "num_boxes", "+", "item", "[", "'num_boxes'", "]", ",", ":", "]", "=", "np", ".", "frombuffer", "(", "\n", "base64", ".", "decodestring", "(", "item", "[", "'features'", "]", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "item", "[", "'num_boxes'", "]", ",", "-", "1", ")", ")", "\n", "spatial_img_features", "[", "num_boxes", ":", "num_boxes", "+", "item", "[", "'num_boxes'", "]", ",", ":", "]", "=", "spatial_features", "\n", "counter", "+=", "1", "\n", "num_boxes", "+=", "item", "[", "'num_boxes'", "]", "\n", "", "else", ":", "\n", "                    ", "unknown_ids", ".", "append", "(", "image_id", ")", "\n", "\n", "", "", "", "print", "(", "'%d unknown_ids...'", "%", "len", "(", "unknown_ids", ")", ")", "\n", "print", "(", "'%d image_ids left...'", "%", "len", "(", "imgids", ")", ")", "\n", "\n", "", "if", "len", "(", "imgids", ")", "!=", "0", ":", "\n", "        ", "print", "(", "'Warning: %s_image_ids is not empty'", "%", "split", ")", "\n", "\n", "", "cPickle", ".", "dump", "(", "indices", ",", "open", "(", "indices_file", "[", "split", "]", ",", "'wb'", ")", ")", "\n", "h", ".", "close", "(", ")", "\n", "print", "(", "\"done!\"", ")", "\n", "\n"]]}