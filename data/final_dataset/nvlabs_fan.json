{"home.repos.pwc.inspect_result.nvlabs_fan.None.main._parse_args": [[301, 315], ["config_parser.parse_known_args", "parser.parse_args", "yaml.safe_dump", "open", "yaml.safe_load", "parser.set_defaults"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args"], ["def", "_parse_args", "(", ")", ":", "\n", "    ", "args_config", ",", "remaining", "=", "config_parser", ".", "parse_known_args", "(", ")", "\n", "if", "args_config", ".", "config", ":", "\n", "        ", "with", "open", "(", "args_config", ".", "config", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "cfg", "=", "yaml", ".", "safe_load", "(", "f", ")", "\n", "parser", ".", "set_defaults", "(", "**", "cfg", ")", "\n", "\n", "# The main arg parser parses the rest of the args, the usual", "\n", "# defaults will have been overridden if config file specified.", "\n", "", "", "args", "=", "parser", ".", "parse_args", "(", "remaining", ")", "\n", "\n", "# Cache the args as a text string to save them in the output dir later", "\n", "args_text", "=", "yaml", ".", "safe_dump", "(", "args", ".", "__dict__", ",", "default_flow_style", "=", "False", ")", "\n", "return", "args", ",", "args_text", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.None.main.backup": [[316, 336], ["os.path.join", "tf.io.gfile.exists", "_logger.info", "output_dir.split", "_logger.info", "range", "tf.io.gfile.makedirs", "os.path.join", "os.path.join", "tf.io.gfile.copy", "os.path.join", "os.path.join", "len", "tf.io.gfile.exists", "output_dir.split", "tf.io.gfile.copy"], "function", ["None"], ["", "def", "backup", "(", "output_dir", ",", "backup_dir", ")", ":", "\n", "    ", "if", "not", "output_dir", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "==", "'train'", ":", "\n", "        ", "_logger", ".", "info", "(", "\"unable to save due to file mismatch\"", ")", "\n", "return", "\n", "", "f", "=", "output_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "backup_exp_dir", "=", "os", ".", "path", ".", "join", "(", "backup_dir", ",", "f", ")", "\n", "if", "tf", ".", "io", ".", "gfile", ".", "exists", "(", "backup_exp_dir", ")", ":", "\n", "        ", "save_items", "=", "[", "'summary.csv'", ",", "'model_best.pth.tar'", "]", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "output_dir", ",", "item", ")", "for", "item", "in", "save_items", "]", "\n", "targets", "=", "[", "os", ".", "path", ".", "join", "(", "backup_exp_dir", ",", "item", ")", "for", "item", "in", "save_items", "]", "\n", "_logger", ".", "info", "(", "\"backup summary and best models\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "sources", ")", ")", ":", "\n", "            ", "if", "tf", ".", "io", ".", "gfile", ".", "exists", "(", "sources", "[", "i", "]", ")", ":", "\n", "                ", "tf", ".", "io", ".", "gfile", ".", "copy", "(", "sources", "[", "i", "]", ",", "targets", "[", "i", "]", ",", "overwrite", "=", "True", ")", "\n", "", "", "", "else", ":", "\n", "        ", "tf", ".", "io", ".", "gfile", ".", "makedirs", "(", "backup_exp_dir", ")", "\n", "src", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'args.yaml'", ")", "\n", "tgt", "=", "os", ".", "path", ".", "join", "(", "backup_exp_dir", ",", "'args.yaml'", ")", "\n", "tf", ".", "io", ".", "gfile", ".", "copy", "(", "src", ",", "tgt", ",", "overwrite", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.None.main.main": [[337, 661], ["setup_default_logging", "main._parse_args", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "timm.models.create_model", "timm.data.resolve_data_config", "torch.nn.parallel.DistributedDataParallel.cuda", "timm.optim.create_optimizer", "timm.scheduler.create_scheduler", "timm.data.create_dataset", "timm.data.create_dataset", "timm.data.create_loader", "timm.data.create_loader", "torch.CrossEntropyLoss().cuda", "torch.cuda.set_device", "torch.cuda.set_device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_rank", "torch.distributed.get_rank", "_logger.info", "_logger.info", "hasattr", "utils.load_for_probing", "torch.nn.parallel.DistributedDataParallel.cuda", "_logger.info", "vars", "timm.models.convert_splitbn_model", "torch.nn.parallel.DistributedDataParallel.to", "torch.jit.script", "torch.jit.script", "amp.initialize", "timm.utils.ApexScaler", "timm.models.resume_checkpoint", "ModelEmaV2", "lr_scheduler.step", "_logger.info", "dict", "timm.data.AugMixDataset", "timm.loss.JsdCrossEntropy().cuda", "get_outdir", "get_outdir", "distutils.dir_util.copy_tree", "range", "_logger.info", "int", "max", "convert_syncbn_model", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "torch.nn.SyncBatchNorm.convert_sync_batchnorm", "_logger.info", "_logger.info", "timm.utils.NativeScaler", "timm.models.load_checkpoint", "ApexDDP", "torch.nn.parallel.DistributedDataParallel", "timm.data.FastCollateMixup", "timm.data.Mixup", "timm.loss.SoftTargetCrossEntropy().cuda", "torch.CrossEntropyLoss", "os.getcwd", "CheckpointSaver", "main.validate", "main.train_one_epoch", "main.validate", "update_summary", "_logger.warning", "_logger.info", "_logger.info", "_logger.info", "_logger.info", "timm.loss.JsdCrossEntropy", "timm.loss.LabelSmoothingCrossEntropy().cuda", "torch.CrossEntropyLoss().cuda", "datetime.datetime.now().strftime", "str", "open", "f.write", "hasattr", "timm.data.create_loader.sampler.set_epoch", "distribute_bn", "main.validate", "lr_scheduler.step", "os.path.join", "CheckpointSaver.save_checkpoint", "main.backup", "sum", "timm.loss.SoftTargetCrossEntropy", "os.path.join", "_logger.info", "distribute_bn", "timm.loss.LabelSmoothingCrossEntropy", "torch.CrossEntropyLoss", "datetime.datetime.now", "m.numel", "torch.nn.parallel.DistributedDataParallel.parameters"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.None.main._parse_args", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_world_size", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_world_size", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_rank", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_rank", "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_for_probing", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.validate", "home.repos.pwc.inspect_result.nvlabs_fan.None.main.train_one_epoch", "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.validate", "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.validate", "home.repos.pwc.inspect_result.nvlabs_fan.runner.checkpoint.save_checkpoint", "home.repos.pwc.inspect_result.nvlabs_fan.None.main.backup"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "setup_default_logging", "(", ")", "\n", "args", ",", "args_text", "=", "_parse_args", "(", ")", "\n", "\n", "args", ".", "prefetcher", "=", "not", "args", ".", "no_prefetcher", "\n", "args", ".", "distributed", "=", "False", "\n", "if", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "distributed", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", ">", "1", "\n", "", "args", ".", "device", "=", "'cuda:0'", "\n", "args", ".", "world_size", "=", "1", "\n", "args", ".", "rank", "=", "0", "# global rank", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "args", ".", "device", "=", "'cuda:%d'", "%", "args", ".", "local_rank", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "args", ".", "world_size", "=", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "args", ".", "rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "_logger", ".", "info", "(", "'Training in distributed mode with multiple processes, 1 GPU per process. Process %d, total %d.'", "\n", "%", "(", "args", ".", "rank", ",", "args", ".", "world_size", ")", ")", "\n", "", "else", ":", "\n", "        ", "_logger", ".", "info", "(", "'Training with a single process on 1 GPUs.'", ")", "\n", "", "assert", "args", ".", "rank", ">=", "0", "\n", "\n", "# resolve AMP arguments based on PyTorch / Apex availability", "\n", "use_amp", "=", "None", "\n", "if", "args", ".", "amp", ":", "\n", "# `--amp` chooses native amp before apex (APEX ver not actively maintained)", "\n", "        ", "if", "has_native_amp", ":", "\n", "            ", "args", ".", "native_amp", "=", "True", "\n", "", "elif", "has_apex", ":", "\n", "            ", "args", ".", "apex_amp", "=", "True", "\n", "", "", "if", "args", ".", "apex_amp", "and", "has_apex", ":", "\n", "        ", "use_amp", "=", "'apex'", "\n", "", "elif", "args", ".", "native_amp", "and", "has_native_amp", ":", "\n", "        ", "use_amp", "=", "'native'", "\n", "", "elif", "args", ".", "apex_amp", "or", "args", ".", "native_amp", ":", "\n", "        ", "_logger", ".", "warning", "(", "\"Neither APEX or native Torch AMP is available, using float32. \"", "\n", "\"Install NVIDA apex or upgrade to PyTorch 1.6\"", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", "+", "args", ".", "rank", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", "+", "args", ".", "rank", ")", "\n", "model", "=", "create_model", "(", "\n", "args", ".", "model", ",", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "drop_rate", "=", "args", ".", "drop", ",", "\n", "drop_connect_rate", "=", "args", ".", "drop_connect", ",", "# DEPRECATED, use drop_path", "\n", "drop_path_rate", "=", "args", ".", "drop_path", ",", "\n", "drop_block_rate", "=", "args", ".", "drop_block", ",", "\n", "global_pool", "=", "args", ".", "gp", ",", "\n", "# bn_tf=args.bn_tf,", "\n", "bn_momentum", "=", "args", ".", "bn_momentum", ",", "\n", "bn_eps", "=", "args", ".", "bn_eps", ",", "\n", "scriptable", "=", "args", ".", "torchscript", ",", "\n", "checkpoint_path", "=", "args", ".", "initial_checkpoint", ",", "\n", "img_size", "=", "args", ".", "img_size", ")", "\n", "if", "args", ".", "num_classes", "is", "None", ":", "\n", "        ", "assert", "hasattr", "(", "model", ",", "'num_classes'", ")", ",", "'Model must have `num_classes` attr if not set on cmd line/config.'", "\n", "args", ".", "num_classes", "=", "model", ".", "num_classes", "\n", "\n", "", "if", "args", ".", "finetune_in22k", ":", "\n", "        ", "load_for_probing", "(", "model", "=", "model", ",", "checkpoint_path", "=", "args", ".", "finetune_in22k", ",", "use_ema", "=", "args", ".", "model_ema", ",", "strict", "=", "False", ",", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "_logger", ".", "info", "(", "'Model %s created, param count: %d'", "%", "\n", "(", "args", ".", "model", ",", "sum", "(", "[", "m", ".", "numel", "(", ")", "for", "m", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "\n", "", "data_config", "=", "resolve_data_config", "(", "vars", "(", "args", ")", ",", "model", "=", "model", ",", "verbose", "=", "args", ".", "local_rank", "==", "0", ")", "\n", "\n", "# setup augmentation batch splits for contrastive loss or split bn", "\n", "num_aug_splits", "=", "0", "\n", "if", "args", ".", "aug_splits", ">", "0", ":", "\n", "        ", "assert", "args", ".", "aug_splits", ">", "1", ",", "'A split of 1 makes no sense'", "\n", "num_aug_splits", "=", "args", ".", "aug_splits", "\n", "\n", "# enable split bn (separate bn stats per batch-portion)", "\n", "", "if", "args", ".", "split_bn", ":", "\n", "        ", "assert", "num_aug_splits", ">", "1", "or", "args", ".", "resplit", "\n", "model", "=", "convert_splitbn_model", "(", "model", ",", "max", "(", "num_aug_splits", ",", "2", ")", ")", "\n", "\n", "# move model to GPU, enable channels last layout if set", "\n", "", "model", ".", "cuda", "(", ")", "\n", "if", "args", ".", "channels_last", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "# setup synchronized BatchNorm for distributed training", "\n", "", "if", "args", ".", "distributed", "and", "args", ".", "sync_bn", ":", "\n", "        ", "assert", "not", "args", ".", "split_bn", "\n", "if", "has_apex", "and", "use_amp", "!=", "'native'", ":", "\n", "# Apex SyncBN preferred unless native amp is activated", "\n", "            ", "model", "=", "convert_syncbn_model", "(", "model", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "model", ")", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "_logger", ".", "info", "(", "\n", "'Converted model to use Synchronized BatchNorm. WARNING: You may have issues if using '", "\n", "'zero initialized BN layers (enabled by default for ResNets) while sync-bn enabled.'", ")", "\n", "\n", "", "", "if", "args", ".", "torchscript", ":", "\n", "        ", "assert", "not", "use_amp", "==", "'apex'", ",", "'Cannot use APEX AMP with torchscripted model'", "\n", "assert", "not", "args", ".", "sync_bn", ",", "'Cannot use SyncBatchNorm with torchscripted model'", "\n", "model", "=", "torch", ".", "jit", ".", "script", "(", "model", ")", "\n", "\n", "", "optimizer", "=", "create_optimizer", "(", "args", ",", "model", ")", "\n", "\n", "# setup automatic mixed-precision (AMP) loss scaling and op casting", "\n", "amp_autocast", "=", "suppress", "# do nothing", "\n", "loss_scaler", "=", "None", "\n", "optimizers", "=", "None", "\n", "if", "use_amp", "==", "'apex'", ":", "\n", "        ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "loss_scaler", "=", "ApexScaler", "(", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "_logger", ".", "info", "(", "'Using NVIDIA APEX AMP. Training in mixed precision.'", ")", "\n", "", "", "elif", "use_amp", "==", "'native'", ":", "\n", "        ", "amp_autocast", "=", "torch", ".", "cuda", ".", "amp", ".", "autocast", "\n", "loss_scaler", "=", "NativeScaler", "(", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "_logger", ".", "info", "(", "'Using native Torch AMP. Training in mixed precision.'", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "            ", "_logger", ".", "info", "(", "'AMP not enabled. Training in float32.'", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "", "resume_epoch", "=", "None", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "resume_epoch", "=", "resume_checkpoint", "(", "\n", "model", ",", "args", ".", "resume", ",", "\n", "optimizer", "=", "None", "if", "args", ".", "no_resume_opt", "else", "optimizer", ",", "\n", "loss_scaler", "=", "None", "if", "args", ".", "no_resume_opt", "else", "loss_scaler", ",", "\n", "log_info", "=", "args", ".", "local_rank", "==", "0", ")", "\n", "# setup exponential moving average of model weights, SWA could be used here too", "\n", "", "model_ema", "=", "None", "\n", "if", "args", ".", "model_ema", ":", "\n", "# Important to create EMA model after cuda(), DP wrapper, and AMP but before SyncBN and DDP wrapper", "\n", "        ", "model_ema", "=", "ModelEmaV2", "(", "\n", "model", ",", "decay", "=", "args", ".", "model_ema_decay", ",", "device", "=", "'cpu'", "if", "args", ".", "model_ema_force_cpu", "else", "None", ")", "\n", "if", "args", ".", "resume", ":", "\n", "            ", "load_checkpoint", "(", "model_ema", ".", "module", ",", "args", ".", "resume", ",", "use_ema", "=", "True", ")", "\n", "\n", "# setup distributed training", "\n", "", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "has_apex", "and", "use_amp", "!=", "'native'", ":", "\n", "# Apex DDP preferred unless native amp is activated", "\n", "            ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "_logger", ".", "info", "(", "\"Using NVIDIA APEX DistributedDataParallel.\"", ")", "\n", "", "model", "=", "ApexDDP", "(", "model", ",", "delay_allreduce", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "_logger", ".", "info", "(", "\"Using native Torch DistributedDataParallel.\"", ")", "\n", "", "model", "=", "NativeDDP", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ")", "# can use device str in Torch >= 1.1", "\n", "# NOTE: EMA model does not need to be wrapped by DDP", "\n", "\n", "# setup learning rate schedule and starting epoch", "\n", "", "", "lr_scheduler", ",", "num_epochs", "=", "create_scheduler", "(", "args", ",", "optimizer", ")", "\n", "start_epoch", "=", "0", "\n", "if", "args", ".", "start_epoch", "is", "not", "None", ":", "\n", "# a specified start_epoch will always override the resume epoch", "\n", "        ", "start_epoch", "=", "args", ".", "start_epoch", "\n", "", "elif", "resume_epoch", "is", "not", "None", ":", "\n", "        ", "start_epoch", "=", "resume_epoch", "\n", "", "if", "lr_scheduler", "is", "not", "None", "and", "start_epoch", ">", "0", ":", "\n", "        ", "lr_scheduler", ".", "step", "(", "start_epoch", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "_logger", ".", "info", "(", "'Scheduled epochs: {}'", ".", "format", "(", "num_epochs", ")", ")", "\n", "\n", "# create the train and eval datasets", "\n", "", "dataset_train", "=", "create_dataset", "(", "\n", "args", ".", "dataset", ",", "root", "=", "args", ".", "data_dir", ",", "split", "=", "args", ".", "train_split", ",", "is_training", "=", "True", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "dataset_eval", "=", "create_dataset", "(", "\n", "args", ".", "dataset", ",", "root", "=", "args", ".", "data_dir", ",", "split", "=", "args", ".", "val_split", ",", "is_training", "=", "False", ",", "batch_size", "=", "args", ".", "batch_size", ")", "\n", "\n", "# setup mixup / cutmix", "\n", "collate_fn", "=", "None", "\n", "mixup_fn", "=", "None", "\n", "mixup_active", "=", "args", ".", "mixup", ">", "0", "or", "args", ".", "cutmix", ">", "0.", "or", "args", ".", "cutmix_minmax", "is", "not", "None", "\n", "if", "mixup_active", ":", "\n", "        ", "mixup_args", "=", "dict", "(", "\n", "mixup_alpha", "=", "args", ".", "mixup", ",", "cutmix_alpha", "=", "args", ".", "cutmix", ",", "cutmix_minmax", "=", "args", ".", "cutmix_minmax", ",", "\n", "prob", "=", "args", ".", "mixup_prob", ",", "switch_prob", "=", "args", ".", "mixup_switch_prob", ",", "mode", "=", "args", ".", "mixup_mode", ",", "\n", "label_smoothing", "=", "args", ".", "smoothing", ",", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "\n", "if", "args", ".", "prefetcher", ":", "\n", "            ", "assert", "not", "num_aug_splits", "# collate conflict (need to support deinterleaving in collate mixup)", "\n", "collate_fn", "=", "FastCollateMixup", "(", "**", "mixup_args", ")", "\n", "", "else", ":", "\n", "            ", "mixup_fn", "=", "Mixup", "(", "**", "mixup_args", ")", "\n", "\n", "# wrap dataset in AugMix helper", "\n", "", "", "if", "num_aug_splits", ">", "1", ":", "\n", "        ", "dataset_train", "=", "AugMixDataset", "(", "dataset_train", ",", "num_splits", "=", "num_aug_splits", ")", "\n", "\n", "# create data loaders w/ augmentation pipeiine", "\n", "", "train_interpolation", "=", "args", ".", "train_interpolation", "\n", "if", "args", ".", "no_aug", "or", "not", "train_interpolation", ":", "\n", "        ", "train_interpolation", "=", "data_config", "[", "'interpolation'", "]", "\n", "", "loader_train", "=", "create_loader", "(", "\n", "dataset_train", ",", "\n", "input_size", "=", "data_config", "[", "'input_size'", "]", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "is_training", "=", "True", ",", "\n", "use_prefetcher", "=", "args", ".", "prefetcher", ",", "\n", "no_aug", "=", "args", ".", "no_aug", ",", "\n", "re_prob", "=", "args", ".", "reprob", ",", "\n", "re_mode", "=", "args", ".", "remode", ",", "\n", "re_count", "=", "args", ".", "recount", ",", "\n", "re_split", "=", "args", ".", "resplit", ",", "\n", "scale", "=", "args", ".", "scale", ",", "\n", "ratio", "=", "args", ".", "ratio", ",", "\n", "hflip", "=", "args", ".", "hflip", ",", "\n", "vflip", "=", "args", ".", "vflip", ",", "\n", "color_jitter", "=", "args", ".", "color_jitter", ",", "\n", "auto_augment", "=", "args", ".", "aa", ",", "\n", "num_aug_splits", "=", "num_aug_splits", ",", "\n", "interpolation", "=", "train_interpolation", ",", "\n", "mean", "=", "data_config", "[", "'mean'", "]", ",", "\n", "std", "=", "data_config", "[", "'std'", "]", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "distributed", "=", "args", ".", "distributed", ",", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "use_multi_epochs_loader", "=", "args", ".", "use_multi_epochs_loader", ",", "\n", ")", "\n", "\n", "loader_eval", "=", "create_loader", "(", "\n", "dataset_eval", ",", "\n", "input_size", "=", "data_config", "[", "'input_size'", "]", ",", "\n", "batch_size", "=", "args", ".", "validation_batch_size_multiplier", "*", "args", ".", "batch_size", ",", "\n", "is_training", "=", "False", ",", "\n", "use_prefetcher", "=", "args", ".", "prefetcher", ",", "\n", "interpolation", "=", "data_config", "[", "'interpolation'", "]", ",", "\n", "mean", "=", "data_config", "[", "'mean'", "]", ",", "\n", "std", "=", "data_config", "[", "'std'", "]", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "distributed", "=", "args", ".", "distributed", ",", "\n", "crop_pct", "=", "data_config", "[", "'crop_pct'", "]", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", ")", "\n", "\n", "# setup loss function", "\n", "if", "args", ".", "jsd", ":", "\n", "        ", "assert", "num_aug_splits", ">", "1", "# JSD only valid with aug splits set", "\n", "train_loss_fn", "=", "JsdCrossEntropy", "(", "num_splits", "=", "num_aug_splits", ",", "smoothing", "=", "args", ".", "smoothing", ")", ".", "cuda", "(", ")", "\n", "\n", "", "elif", "mixup_active", ":", "\n", "# smoothing is handled with mixup target transform", "\n", "        ", "train_loss_fn", "=", "SoftTargetCrossEntropy", "(", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "smoothing", ":", "\n", "        ", "train_loss_fn", "=", "LabelSmoothingCrossEntropy", "(", "smoothing", "=", "args", ".", "smoothing", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "train_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "", "validate_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "# setup checkpoint saver and eval metric tracking", "\n", "eval_metric", "=", "args", ".", "eval_metric", "\n", "best_metric", "=", "None", "\n", "best_epoch", "=", "None", "\n", "saver", "=", "None", "\n", "output_dir", "=", "''", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "        ", "output_base", "=", "args", ".", "output", "if", "args", ".", "output", "else", "'./output'", "\n", "exp_name", "=", "'-'", ".", "join", "(", "[", "\n", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", ",", "\n", "args", ".", "model", ",", "\n", "str", "(", "data_config", "[", "'input_size'", "]", "[", "-", "1", "]", ")", "\n", "]", ")", "\n", "output_dir", "=", "get_outdir", "(", "output_base", ",", "'train'", ",", "exp_name", ")", "\n", "code_dir", "=", "get_outdir", "(", "output_dir", ",", "'code'", ")", "\n", "copy_tree", "(", "os", ".", "getcwd", "(", ")", ",", "code_dir", ")", "\n", "decreasing", "=", "True", "if", "eval_metric", "==", "'loss'", "else", "False", "\n", "if", "args", ".", "rank", "==", "0", ":", "\n", "            ", "saver", "=", "CheckpointSaver", "(", "\n", "model", "=", "model", ",", "optimizer", "=", "optimizer", ",", "args", "=", "args", ",", "model_ema", "=", "model_ema", ",", "amp_scaler", "=", "loss_scaler", ",", "\n", "checkpoint_dir", "=", "output_dir", ",", "recovery_dir", "=", "output_dir", ",", "decreasing", "=", "decreasing", ",", "max_history", "=", "args", ".", "checkpoint_hist", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'args.yaml'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "args_text", ")", "\n", "\n", "", "", "", "try", ":", "\n", "        ", "if", "args", ".", "finetune", "or", "args", ".", "eval_first", ":", "\n", "            ", "validate", "(", "model", ",", "loader_eval", ",", "validate_loss_fn", ",", "args", ",", "amp_autocast", "=", "amp_autocast", ")", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epochs", ")", ":", "\n", "            ", "if", "args", ".", "distributed", "and", "hasattr", "(", "loader_train", ".", "sampler", ",", "'set_epoch'", ")", ":", "\n", "                ", "loader_train", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "train_metrics", "=", "train_one_epoch", "(", "\n", "epoch", ",", "model", ",", "loader_train", ",", "optimizer", ",", "train_loss_fn", ",", "args", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "saver", "=", "saver", ",", "output_dir", "=", "output_dir", ",", "\n", "amp_autocast", "=", "amp_autocast", ",", "loss_scaler", "=", "loss_scaler", ",", "model_ema", "=", "model_ema", ",", "mixup_fn", "=", "mixup_fn", ",", "optimizers", "=", "optimizers", ")", "\n", "\n", "if", "args", ".", "distributed", "and", "args", ".", "dist_bn", "in", "(", "'broadcast'", ",", "'reduce'", ")", ":", "\n", "                ", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                    ", "_logger", ".", "info", "(", "\"Distributing BatchNorm running means and vars\"", ")", "\n", "", "distribute_bn", "(", "model", ",", "args", ".", "world_size", ",", "args", ".", "dist_bn", "==", "'reduce'", ")", "\n", "\n", "", "eval_metrics", "=", "validate", "(", "model", ",", "loader_eval", ",", "validate_loss_fn", ",", "args", ",", "amp_autocast", "=", "amp_autocast", ")", "\n", "\n", "if", "model_ema", "is", "not", "None", "and", "not", "args", ".", "model_ema_force_cpu", ":", "\n", "                ", "if", "args", ".", "distributed", "and", "args", ".", "dist_bn", "in", "(", "'broadcast'", ",", "'reduce'", ")", ":", "\n", "                    ", "distribute_bn", "(", "model_ema", ",", "args", ".", "world_size", ",", "args", ".", "dist_bn", "==", "'reduce'", ")", "\n", "", "ema_eval_metrics", "=", "validate", "(", "\n", "model_ema", ".", "module", ",", "loader_eval", ",", "validate_loss_fn", ",", "args", ",", "amp_autocast", "=", "amp_autocast", ",", "log_suffix", "=", "' (EMA)'", ")", "\n", "eval_metrics", "=", "ema_eval_metrics", "\n", "\n", "", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "# step LR for next epoch", "\n", "                ", "lr_scheduler", ".", "step", "(", "epoch", "+", "1", ",", "eval_metrics", "[", "eval_metric", "]", ")", "\n", "\n", "", "update_summary", "(", "\n", "epoch", ",", "train_metrics", ",", "eval_metrics", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'summary.csv'", ")", ",", "\n", "write_header", "=", "best_metric", "is", "None", ")", "\n", "\n", "if", "saver", "is", "not", "None", ":", "\n", "# save proper checkpoint with eval metric", "\n", "                ", "save_metric", "=", "eval_metrics", "[", "eval_metric", "]", "\n", "best_metric", ",", "best_epoch", "=", "saver", ".", "save_checkpoint", "(", "epoch", ",", "metric", "=", "save_metric", ")", "\n", "", "if", "args", ".", "backup", "and", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "backup", "(", "output_dir", ",", "args", ".", "backup", ")", "\n", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "pass", "\n", "", "if", "best_metric", "is", "not", "None", ":", "\n", "        ", "_logger", ".", "info", "(", "'*** Best metric: {0} (epoch {1})'", ".", "format", "(", "best_metric", ",", "best_epoch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.None.main.train_one_epoch": [[663, 763], ["AverageMeter", "AverageMeter", "AverageMeter", "model.train", "time.time", "enumerate", "hasattr", "collections.OrderedDict", "hasattr", "len", "len", "AverageMeter.update", "optimizer.zero_grad", "torch.cuda.synchronize", "torch.cuda.synchronize", "AverageMeter.update", "time.time", "optimizer.sync_lookahead", "input.contiguous.cuda", "target.cuda", "mixup_fn", "input.contiguous.contiguous", "amp_autocast", "model", "loss_fn", "AverageMeter.update", "loss_scaler", "loss_fn.backward", "optimizer.step", "model_ema.update", "saver.save_recovery", "lr_scheduler.step_update", "time.time", "loss_fn.item", "input.contiguous.size", "time.time", "sum", "len", "reduce_tensor", "AverageMeter.update", "_logger.info", "timm.models.model_parameters", "reduce_tensor.item", "input.contiguous.size", "torchvision.utils.save_image", "len", "os.path.join", "input.contiguous.size", "input.contiguous.size"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer.train", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["", "", "def", "train_one_epoch", "(", "\n", "epoch", ",", "model", ",", "loader", ",", "optimizer", ",", "loss_fn", ",", "args", ",", "\n", "lr_scheduler", "=", "None", ",", "saver", "=", "None", ",", "output_dir", "=", "''", ",", "amp_autocast", "=", "suppress", ",", "\n", "loss_scaler", "=", "None", ",", "model_ema", "=", "None", ",", "mixup_fn", "=", "None", ",", "optimizers", "=", "None", ")", ":", "\n", "\n", "    ", "if", "args", ".", "mixup_off_epoch", "and", "epoch", ">=", "args", ".", "mixup_off_epoch", ":", "\n", "        ", "if", "args", ".", "prefetcher", "and", "loader", ".", "mixup_enabled", ":", "\n", "            ", "loader", ".", "mixup_enabled", "=", "False", "\n", "", "elif", "mixup_fn", "is", "not", "None", ":", "\n", "            ", "mixup_fn", ".", "mixup_enabled", "=", "False", "\n", "\n", "", "", "second_order", "=", "hasattr", "(", "optimizer", ",", "'is_second_order'", ")", "and", "optimizer", ".", "is_second_order", "\n", "batch_time_m", "=", "AverageMeter", "(", ")", "\n", "data_time_m", "=", "AverageMeter", "(", ")", "\n", "losses_m", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "last_idx", "=", "len", "(", "loader", ")", "-", "1", "\n", "num_updates", "=", "epoch", "*", "len", "(", "loader", ")", "\n", "for", "batch_idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "last_batch", "=", "batch_idx", "==", "last_idx", "\n", "data_time_m", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "input", ",", "target", "=", "input", ".", "cuda", "(", ")", ",", "target", ".", "cuda", "(", ")", "\n", "if", "mixup_fn", "is", "not", "None", ":", "\n", "            ", "input", ",", "target", "=", "mixup_fn", "(", "input", ",", "target", ")", "\n", "", "if", "args", ".", "channels_last", ":", "\n", "            ", "input", "=", "input", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "", "with", "amp_autocast", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "target", ")", "\n", "\n", "", "if", "not", "args", ".", "distributed", ":", "\n", "            ", "losses_m", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "loss_scaler", "is", "not", "None", ":", "\n", "            ", "loss_scaler", "(", "\n", "loss", ",", "optimizer", ",", "\n", "clip_grad", "=", "args", ".", "clip_grad", ",", "clip_mode", "=", "args", ".", "clip_mode", ",", "\n", "parameters", "=", "model_parameters", "(", "model", ",", "exclude_head", "=", "'agc'", "in", "args", ".", "clip_mode", ")", ",", "\n", "create_graph", "=", "second_order", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", "create_graph", "=", "second_order", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "model_ema", "is", "not", "None", ":", "\n", "            ", "model_ema", ".", "update", "(", "model", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "num_updates", "+=", "1", "\n", "batch_time_m", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "last_batch", "or", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "lrl", "=", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "optimizer", ".", "param_groups", "]", "\n", "lr", "=", "sum", "(", "lrl", ")", "/", "len", "(", "lrl", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "reduced_loss", "=", "reduce_tensor", "(", "loss", ".", "data", ",", "args", ".", "world_size", ")", "\n", "losses_m", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "                ", "_logger", ".", "info", "(", "\n", "'Train: {} [{:>4d}/{} ({:>3.0f}%)]  '", "\n", "'Loss: {loss.val:>9.6f} ({loss.avg:>6.4f})  '", "\n", "'Time: {batch_time.val:.3f}s, {rate:>7.2f}/s  '", "\n", "'({batch_time.avg:.3f}s, {rate_avg:>7.2f}/s)  '", "\n", "'LR: {lr:.3e}  '", "\n", "'Data: {data_time.val:.3f} ({data_time.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "\n", "batch_idx", ",", "len", "(", "loader", ")", ",", "\n", "100.", "*", "batch_idx", "/", "last_idx", ",", "\n", "loss", "=", "losses_m", ",", "\n", "batch_time", "=", "batch_time_m", ",", "\n", "rate", "=", "input", ".", "size", "(", "0", ")", "*", "args", ".", "world_size", "/", "batch_time_m", ".", "val", ",", "\n", "rate_avg", "=", "input", ".", "size", "(", "0", ")", "*", "args", ".", "world_size", "/", "batch_time_m", ".", "avg", ",", "\n", "lr", "=", "lr", ",", "\n", "data_time", "=", "data_time_m", ")", ")", "\n", "\n", "if", "args", ".", "save_images", "and", "output_dir", ":", "\n", "                    ", "torchvision", ".", "utils", ".", "save_image", "(", "\n", "input", ",", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'train-batch-%d.jpg'", "%", "batch_idx", ")", ",", "\n", "padding", "=", "0", ",", "\n", "normalize", "=", "True", ")", "\n", "\n", "", "", "", "if", "saver", "is", "not", "None", "and", "args", ".", "recovery_interval", "and", "(", "\n", "last_batch", "or", "(", "batch_idx", "+", "1", ")", "%", "args", ".", "recovery_interval", "==", "0", ")", ":", "\n", "            ", "saver", ".", "save_recovery", "(", "epoch", ",", "batch_idx", "=", "batch_idx", ")", "\n", "\n", "", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "lr_scheduler", ".", "step_update", "(", "num_updates", "=", "num_updates", ",", "metric", "=", "losses_m", ".", "avg", ")", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "# end for", "\n", "\n", "", "if", "hasattr", "(", "optimizer", ",", "'sync_lookahead'", ")", ":", "\n", "        ", "optimizer", ".", "sync_lookahead", "(", ")", "\n", "\n", "", "return", "OrderedDict", "(", "[", "(", "'loss'", ",", "losses_m", ".", "avg", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.None.main.validate": [[765, 829], ["AverageMeter", "AverageMeter", "AverageMeter", "AverageMeter", "model.eval", "time.time", "collections.OrderedDict", "len", "torch.no_grad", "torch.no_grad", "enumerate", "isinstance", "loss_fn", "accuracy", "torch.cuda.synchronize", "torch.cuda.synchronize", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "AverageMeter.update", "time.time", "input.contiguous.cuda", "target.cuda.cuda", "input.contiguous.contiguous", "amp_autocast", "model", "output[].mean.unfold().mean", "reduce_tensor", "reduce_tensor", "reduce_tensor", "reduce_tensor.item", "input.contiguous.size", "reduce_tensor.item", "output[].mean.size", "reduce_tensor.item", "output[].mean.size", "_logger.info", "output[].mean", "time.time", "output[].mean.unfold", "target.cuda.size"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.accuracy.accuracy", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["", "def", "validate", "(", "model", ",", "loader", ",", "loss_fn", ",", "args", ",", "amp_autocast", "=", "suppress", ",", "log_suffix", "=", "''", ")", ":", "\n", "    ", "batch_time_m", "=", "AverageMeter", "(", ")", "\n", "losses_m", "=", "AverageMeter", "(", ")", "\n", "top1_m", "=", "AverageMeter", "(", ")", "\n", "top5_m", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "last_idx", "=", "len", "(", "loader", ")", "-", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "last_batch", "=", "batch_idx", "==", "last_idx", "\n", "if", "not", "args", ".", "prefetcher", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "", "if", "args", ".", "channels_last", ":", "\n", "                ", "input", "=", "input", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "", "with", "amp_autocast", "(", ")", ":", "\n", "                ", "output", "=", "model", "(", "input", ")", "\n", "", "if", "isinstance", "(", "output", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "output", "=", "output", "[", "0", "]", "\n", "if", "args", ".", "cls_weight", "==", "0", ":", "\n", "                    ", "output", "=", "output", "[", "1", "]", ".", "mean", "(", "1", ")", "\n", "\n", "# augmentation reduction", "\n", "", "", "reduce_factor", "=", "args", ".", "tta", "\n", "if", "reduce_factor", ">", "1", ":", "\n", "                ", "output", "=", "output", ".", "unfold", "(", "0", ",", "reduce_factor", ",", "reduce_factor", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "target", "=", "target", "[", "0", ":", "target", ".", "size", "(", "0", ")", ":", "reduce_factor", "]", "\n", "\n", "", "loss", "=", "loss_fn", "(", "output", ",", "target", ")", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "                ", "reduced_loss", "=", "reduce_tensor", "(", "loss", ".", "data", ",", "args", ".", "world_size", ")", "\n", "acc1", "=", "reduce_tensor", "(", "acc1", ",", "args", ".", "world_size", ")", "\n", "acc5", "=", "reduce_tensor", "(", "acc5", ",", "args", ".", "world_size", ")", "\n", "", "else", ":", "\n", "                ", "reduced_loss", "=", "loss", ".", "data", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "losses_m", ".", "update", "(", "reduced_loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1_m", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "top5_m", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "output", ".", "size", "(", "0", ")", ")", "\n", "\n", "batch_time_m", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "local_rank", "==", "0", "and", "(", "last_batch", "or", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ")", ":", "\n", "                ", "log_name", "=", "'Test'", "+", "log_suffix", "\n", "_logger", ".", "info", "(", "\n", "'{0}: [{1:>4d}/{2}]  '", "\n", "'Time: {batch_time.val:.3f} ({batch_time.avg:.3f})  '", "\n", "'Loss: {loss.val:>7.4f} ({loss.avg:>6.4f})  '", "\n", "'Acc@1: {top1.val:>7.4f} ({top1.avg:>7.4f})  '", "\n", "'Acc@5: {top5.val:>7.4f} ({top5.avg:>7.4f})'", ".", "format", "(", "\n", "log_name", ",", "batch_idx", ",", "last_idx", ",", "batch_time", "=", "batch_time_m", ",", "\n", "loss", "=", "losses_m", ",", "top1", "=", "top1_m", ",", "top5", "=", "top5_m", ")", ")", "\n", "\n", "", "", "", "metrics", "=", "OrderedDict", "(", "[", "(", "'loss'", ",", "losses_m", ".", "avg", ")", ",", "(", "'top1'", ",", "top1_m", ".", "avg", ")", ",", "(", "'top5'", ",", "top5_m", ".", "avg", ")", "]", ")", "\n", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.validate": [[133, 298], ["timm.models.create_model", "sum", "_logger.info", "timm.data.resolve_data_config", "torch.nn.DataParallel.cuda", "torch.CrossEntropyLoss().cuda", "timm.data.create_dataset", "timm.data.create_loader", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "timm.utils.AverageMeter", "torch.nn.DataParallel.eval", "collections.OrderedDict", "_logger.info", "_logger.info", "timm.utils.set_jit_legacy", "hasattr", "timm.models.load_checkpoint", "vars", "timm.models.apply_test_time_pool", "torch.jit.optimized_execution", "torch.jit.optimized_execution", "torch.jit.optimized_execution", "torch.jit.script", "torch.jit.script", "torch.jit.script", "amp.initialize", "torch.nn.DataParallel.to", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "timm.data.RealLabelsImagenet", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "time.time", "enumerate", "_logger.info", "_logger.info", "m.numel", "torch.CrossEntropyLoss", "open", "timm.data.create_dataset.filenames", "input.contiguous.contiguous", "isinstance", "nn.CrossEntropyLoss().cuda.", "timm.utils.accuracy", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "timm.utils.AverageMeter.update", "time.time", "timm.data.RealLabelsImagenet.get_accuracy", "timm.data.RealLabelsImagenet.get_accuracy", "round", "round", "round", "round", "round", "_logger.warning", "torch.nn.DataParallel.parameters", "list", "int", "torch.randn", "torch.randn", "torch.randn", "target.cuda.cuda", "input.contiguous.cuda", "input.contiguous.contiguous", "amp_autocast", "torch.nn.DataParallel.", "timm.data.RealLabelsImagenet.add_result", "model.detach", "criterion.item", "input.contiguous.size", "acc1.item", "input.contiguous.size", "acc5.item", "input.contiguous.size", "_logger.info", "range", "line.rstrip", "range", "time.time", "len", "input.contiguous.size"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.accuracy.accuracy", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["def", "validate", "(", "args", ")", ":", "\n", "    ", "args", ".", "pretrained", "=", "args", ".", "pretrained", "or", "not", "args", ".", "checkpoint", "\n", "args", ".", "prefetcher", "=", "not", "args", ".", "no_prefetcher", "\n", "amp_autocast", "=", "suppress", "# do nothing", "\n", "if", "args", ".", "amp", ":", "\n", "        ", "if", "has_native_amp", ":", "\n", "            ", "args", ".", "native_amp", "=", "True", "\n", "", "elif", "has_apex", ":", "\n", "            ", "args", ".", "apex_amp", "=", "True", "\n", "", "else", ":", "\n", "            ", "_logger", ".", "warning", "(", "\"Neither APEX or Native Torch AMP is available.\"", ")", "\n", "", "", "assert", "not", "args", ".", "apex_amp", "or", "not", "args", ".", "native_amp", ",", "\"Only one AMP mode should be set.\"", "\n", "if", "args", ".", "native_amp", ":", "\n", "        ", "amp_autocast", "=", "torch", ".", "cuda", ".", "amp", ".", "autocast", "\n", "_logger", ".", "info", "(", "'Validating in mixed precision with native PyTorch AMP.'", ")", "\n", "", "elif", "args", ".", "apex_amp", ":", "\n", "        ", "_logger", ".", "info", "(", "'Validating in mixed precision with NVIDIA APEX AMP.'", ")", "\n", "", "else", ":", "\n", "        ", "_logger", ".", "info", "(", "'Validating in float32. AMP not enabled.'", ")", "\n", "\n", "", "if", "args", ".", "legacy_jit", ":", "\n", "        ", "set_jit_legacy", "(", ")", "\n", "\n", "# create model", "\n", "", "model", "=", "create_model", "(", "\n", "args", ".", "model", ",", "\n", "pretrained", "=", "args", ".", "pretrained", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "\n", "in_chans", "=", "3", ",", "\n", "global_pool", "=", "args", ".", "gp", ",", "\n", "scriptable", "=", "args", ".", "torchscript", ",", "\n", "img_size", "=", "args", ".", "img_size", ")", "\n", "if", "args", ".", "num_classes", "is", "None", ":", "\n", "        ", "assert", "hasattr", "(", "model", ",", "'num_classes'", ")", ",", "'Model must have `num_classes` attr if not set on cmd line/config.'", "\n", "args", ".", "num_classes", "=", "model", ".", "num_classes", "\n", "\n", "", "if", "args", ".", "checkpoint", ":", "\n", "        ", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "args", ".", "use_ema", ")", "\n", "\n", "", "param_count", "=", "sum", "(", "[", "m", ".", "numel", "(", ")", "for", "m", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "_logger", ".", "info", "(", "'Model %s created, param count: %d'", "%", "(", "args", ".", "model", ",", "param_count", ")", ")", "\n", "\n", "data_config", "=", "resolve_data_config", "(", "vars", "(", "args", ")", ",", "model", "=", "model", ",", "use_test_size", "=", "True", ")", "\n", "test_time_pool", "=", "False", "\n", "if", "not", "args", ".", "no_test_pool", ":", "\n", "        ", "model", ",", "test_time_pool", "=", "apply_test_time_pool", "(", "model", ",", "data_config", ",", "use_test_size", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "torchscript", ":", "\n", "        ", "torch", ".", "jit", ".", "optimized_execution", "(", "True", ")", "\n", "model", "=", "torch", ".", "jit", ".", "script", "(", "model", ")", "\n", "\n", "", "model", "=", "model", ".", "cuda", "(", ")", "\n", "if", "args", ".", "apex_amp", ":", "\n", "        ", "model", "=", "amp", ".", "initialize", "(", "model", ",", "opt_level", "=", "'O1'", ")", "\n", "\n", "", "if", "args", ".", "channels_last", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "", "if", "args", ".", "num_gpu", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "list", "(", "range", "(", "args", ".", "num_gpu", ")", ")", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "dataset", "=", "create_dataset", "(", "\n", "root", "=", "args", ".", "data", ",", "name", "=", "args", ".", "dataset", ",", "split", "=", "args", ".", "split", ",", "\n", "load_bytes", "=", "args", ".", "tf_preprocessing", ",", "class_map", "=", "args", ".", "class_map", ")", "\n", "\n", "if", "args", ".", "valid_labels", ":", "\n", "        ", "with", "open", "(", "args", ".", "valid_labels", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "valid_labels", "=", "{", "int", "(", "line", ".", "rstrip", "(", ")", ")", "for", "line", "in", "f", "}", "\n", "valid_labels", "=", "[", "i", "in", "valid_labels", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", "]", "\n", "", "", "else", ":", "\n", "        ", "valid_labels", "=", "None", "\n", "\n", "", "if", "args", ".", "real_labels", ":", "\n", "        ", "real_labels", "=", "RealLabelsImagenet", "(", "dataset", ".", "filenames", "(", "basename", "=", "True", ")", ",", "real_json", "=", "args", ".", "real_labels", ")", "\n", "", "else", ":", "\n", "        ", "real_labels", "=", "None", "\n", "\n", "", "crop_pct", "=", "1.0", "if", "test_time_pool", "else", "data_config", "[", "'crop_pct'", "]", "\n", "loader", "=", "create_loader", "(", "\n", "dataset", ",", "\n", "input_size", "=", "data_config", "[", "'input_size'", "]", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "use_prefetcher", "=", "args", ".", "prefetcher", ",", "\n", "interpolation", "=", "data_config", "[", "'interpolation'", "]", ",", "\n", "mean", "=", "data_config", "[", "'mean'", "]", ",", "\n", "std", "=", "data_config", "[", "'std'", "]", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "crop_pct", "=", "crop_pct", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "tf_preprocessing", "=", "args", ".", "tf_preprocessing", ")", "\n", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "input", "=", "torch", ".", "randn", "(", "(", "args", ".", "batch_size", ",", ")", "+", "data_config", "[", "'input_size'", "]", ")", ".", "cuda", "(", ")", "\n", "if", "args", ".", "channels_last", ":", "\n", "            ", "input", "=", "input", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "if", "args", ".", "no_prefetcher", ":", "\n", "                ", "target", "=", "target", ".", "cuda", "(", ")", "\n", "input", "=", "input", ".", "cuda", "(", ")", "\n", "", "if", "args", ".", "channels_last", ":", "\n", "                ", "input", "=", "input", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "# compute output", "\n", "", "with", "amp_autocast", "(", ")", ":", "\n", "                ", "output", "=", "model", "(", "input", ")", "\n", "if", "args", ".", "imagenet_a", ":", "\n", "                    ", "output", "=", "output", "[", ":", ",", "indices_in_1k", "]", "\n", "", "if", "args", ".", "imagenet_r", ":", "\n", "                    ", "output", "=", "output", "[", ":", ",", "imagenet_r_mask", "]", "\n", "", "", "if", "isinstance", "(", "output", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                ", "output", "=", "output", "[", "0", "]", "\n", "", "if", "valid_labels", "is", "not", "None", ":", "\n", "                ", "output", "=", "output", "[", ":", ",", "valid_labels", "]", "\n", "", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "if", "real_labels", "is", "not", "None", ":", "\n", "                ", "real_labels", ".", "add_result", "(", "output", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ".", "detach", "(", ")", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "batch_idx", "%", "args", ".", "log_freq", "==", "0", ":", "\n", "                ", "_logger", ".", "info", "(", "\n", "'Test: [{0:>4d}/{1}]  '", "\n", "'Time: {batch_time.val:.3f}s ({batch_time.avg:.3f}s, {rate_avg:>7.2f}/s)  '", "\n", "'Loss: {loss.val:>7.4f} ({loss.avg:>6.4f})  '", "\n", "'Acc@1: {top1.val:>7.3f} ({top1.avg:>7.3f})  '", "\n", "'Acc@5: {top5.val:>7.3f} ({top5.avg:>7.3f})'", ".", "format", "(", "\n", "batch_idx", ",", "len", "(", "loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "rate_avg", "=", "input", ".", "size", "(", "0", ")", "/", "batch_time", ".", "avg", ",", "\n", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "", "", "if", "real_labels", "is", "not", "None", ":", "\n", "# real labels mode replaces topk values at the end", "\n", "        ", "top1a", ",", "top5a", "=", "real_labels", ".", "get_accuracy", "(", "k", "=", "1", ")", ",", "real_labels", ".", "get_accuracy", "(", "k", "=", "5", ")", "\n", "", "else", ":", "\n", "        ", "top1a", ",", "top5a", "=", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "", "results", "=", "OrderedDict", "(", "\n", "top1", "=", "round", "(", "top1a", ",", "4", ")", ",", "top1_err", "=", "round", "(", "100", "-", "top1a", ",", "4", ")", ",", "\n", "top5", "=", "round", "(", "top5a", ",", "4", ")", ",", "top5_err", "=", "round", "(", "100", "-", "top5a", ",", "4", ")", ",", "\n", "param_count", "=", "round", "(", "param_count", "/", "1e6", ",", "2", ")", ",", "\n", "img_size", "=", "data_config", "[", "'input_size'", "]", "[", "-", "1", "]", ",", "\n", "cropt_pct", "=", "crop_pct", ",", "\n", "interpolation", "=", "data_config", "[", "'interpolation'", "]", ")", "\n", "\n", "_logger", ".", "info", "(", "' * Acc@1 {:.3f} ({:.3f}) Acc@5 {:.3f} ({:.3f})'", ".", "format", "(", "\n", "results", "[", "'top1'", "]", ",", "results", "[", "'top1_err'", "]", ",", "results", "[", "'top5'", "]", ",", "results", "[", "'top5_err'", "]", ")", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.main": [[300, 348], ["timm.utils.setup_default_logging", "parser.parse_args", "os.makedirs", "utils.mce_utils.get_ce_alexnet", "validate_ood.validate", "print", "numpy.savetxt", "print", "print", "validate_ood.validate", "print", "range", "results.append", "numpy.savetxt", "print", "print", "print", "validate_ood.validate", "results.append", "str", "utils.mce_utils.get_ce_alexnet.keys", "utils.mce_utils.get_mce_from_accuracy"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_ce_alexnet", "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.validate", "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.validate", "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.validate", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_mce_from_accuracy"], ["", "def", "main", "(", ")", ":", "\n", "    ", "setup_default_logging", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "args", ".", "imagenet_c", ":", "\n", "        ", "if", "args", ".", "imagenet_a", "or", "args", ".", "imagenet_r", ":", "\n", "            ", "validate", "(", "args", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Please specify an OOD dataset.'", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "        ", "results_file", "=", "args", ".", "results_file", "or", "'./results-all.csv'", "\n", "os", ".", "makedirs", "(", "results_file", ",", "exist_ok", "=", "True", ")", "\n", "blur_list", "=", "[", "'gaussian_blur'", ",", "'motion_blur'", ",", "'glass_blur'", ",", "'defocus_blur'", "]", "\n", "noise_list", "=", "[", "'gaussian_noise'", ",", "'shot_noise'", ",", "'speckle_noise'", ",", "'impulse_noise'", "]", "\n", "digital_list", "=", "[", "'contrast'", ",", "'jpeg_compression'", ",", "'saturate'", ",", "'pixelate'", "]", "\n", "weather_list", "=", "[", "'snow'", ",", "'fog'", ",", "'frost'", ",", "'spatter'", ",", "'brightness'", "]", "\n", "extra", "=", "[", "'zoom_blur'", ",", "'elastic_transform'", "]", "\n", "name_list", "=", "noise_list", "+", "extra", "+", "blur_list", "+", "digital_list", "+", "weather_list", "\n", "ce_alexnet", "=", "get_ce_alexnet", "(", ")", "\n", "mCE", "=", "0", "\n", "counter", "=", "0", "\n", "average_acc", "=", "{", "}", "\n", "base_dir", "=", "args", ".", "data", "\n", "args", ".", "data", "=", "'../imagenet_raw'", "\n", "res", "=", "validate", "(", "args", ")", "\n", "print", "(", "'clean image accuracy is: '", ",", "res", ")", "\n", "for", "noise_name", "in", "name_list", ":", "\n", "            ", "res_sum", "=", "0", "\n", "root", "=", "base_dir", "+", "noise_name", "+", "'/'", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "5", ")", ":", "\n", "                ", "args", ".", "data", "=", "root", "+", "str", "(", "i", "+", "1", ")", "\n", "print", "(", "'validating dir:'", ",", "args", ".", "data", ")", "\n", "res", "=", "validate", "(", "args", ")", "\n", "results", ".", "append", "(", "res", "[", "'top1'", "]", ")", "\n", "res_sum", "+=", "res", "[", "'top1'", "]", "\n", "if", "noise_name", "in", "ce_alexnet", ".", "keys", "(", ")", ":", "\n", "                    ", "CE", "=", "get_mce_from_accuracy", "(", "res", "[", "'top1'", "]", ",", "ce_alexnet", "[", "noise_name", "]", ")", "\n", "mCE", "+=", "CE", "\n", "counter", "+=", "1", "\n", "", "", "results", ".", "append", "(", "res_sum", "/", "(", "i", "+", "1", ")", ")", "\n", "average_acc", "[", "noise_name", "]", "=", "res_sum", "/", "(", "i", "+", "1", ")", "\n", "np", ".", "savetxt", "(", "results_file", "+", "noise_name", "+", "'_'", "+", "'%.2f'", "%", "(", "res_sum", "/", "(", "i", "+", "1", ")", ")", "+", "'.csv'", ",", "results", ")", "\n", "print", "(", "'average score is:'", ",", "res_sum", "/", "(", "i", "+", "1", ")", ")", "\n", "print", "(", "'current mCE is: '", ",", "mCE", "/", "counter", ")", "\n", "", "np", ".", "savetxt", "(", "results_file", "+", "'mCE'", "+", "'_'", "+", "'%.2f'", "%", "(", "mCE", "/", "counter", ")", "+", "'.csv'", ",", "results", ")", "\n", "print", "(", "'all average score is:'", ",", "average_acc", ")", "\n", "print", "(", "'mCE is: '", ",", "mCE", "/", "counter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.None.validate_ood.write_results": [[350, 357], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "cf.flush", "csv.DictWriter.writerow", "results[].keys"], "function", ["None"], ["", "", "def", "write_results", "(", "results_file", ",", "results", ")", ":", "\n", "    ", "with", "open", "(", "results_file", ",", "mode", "=", "'w'", ")", "as", "cf", ":", "\n", "        ", "dw", "=", "csv", ".", "DictWriter", "(", "cf", ",", "fieldnames", "=", "results", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "dw", ".", "writeheader", "(", ")", "\n", "for", "r", "in", "results", ":", "\n", "            ", "dw", ".", "writerow", "(", "r", ")", "\n", "", "cf", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentation.setup.readme": [[4, 8], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentation.setup.get_version": [[13, 17], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentation.setup.parse_requirements": [[19, 93], ["list", "line.strip.startswith", "exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], ["", "def", "parse_requirements", "(", "fname", "=", "'requirements.txt'", ",", "with_version", "=", "True", ")", ":", "\n", "    ", "\"\"\"Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"", "\n", "import", "sys", "\n", "from", "os", ".", "path", "import", "exists", "\n", "import", "re", "\n", "require_fpath", "=", "fname", "\n", "\n", "def", "parse_line", "(", "line", ")", ":", "\n", "        ", "\"\"\"Parse information from a line in a requirements text file.\"\"\"", "\n", "if", "line", ".", "startswith", "(", "'-r '", ")", ":", "\n", "# Allow specifying requirements in other files", "\n", "            ", "target", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "for", "info", "in", "parse_require_file", "(", "target", ")", ":", "\n", "                ", "yield", "info", "\n", "", "", "else", ":", "\n", "            ", "info", "=", "{", "'line'", ":", "line", "}", "\n", "if", "line", ".", "startswith", "(", "'-e '", ")", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", ".", "split", "(", "'#egg='", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "# Remove versioning from the package", "\n", "                ", "pat", "=", "'('", "+", "'|'", ".", "join", "(", "[", "'>='", ",", "'=='", ",", "'>'", "]", ")", "+", "')'", "\n", "parts", "=", "re", ".", "split", "(", "pat", ",", "line", ",", "maxsplit", "=", "1", ")", "\n", "parts", "=", "[", "p", ".", "strip", "(", ")", "for", "p", "in", "parts", "]", "\n", "\n", "info", "[", "'package'", "]", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "                    ", "op", ",", "rest", "=", "parts", "[", "1", ":", "]", "\n", "if", "';'", "in", "rest", ":", "\n", "# Handle platform specific dependencies", "\n", "# http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies", "\n", "                        ", "version", ",", "platform_deps", "=", "map", "(", "str", ".", "strip", ",", "\n", "rest", ".", "split", "(", "';'", ")", ")", "\n", "info", "[", "'platform_deps'", "]", "=", "platform_deps", "\n", "", "else", ":", "\n", "                        ", "version", "=", "rest", "# NOQA", "\n", "", "info", "[", "'version'", "]", "=", "(", "op", ",", "version", ")", "\n", "", "", "yield", "info", "\n", "\n", "", "", "def", "parse_require_file", "(", "fpath", ")", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "not", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                    ", "for", "info", "in", "parse_line", "(", "line", ")", ":", "\n", "                        ", "yield", "info", "\n", "\n", "", "", "", "", "", "def", "gen_packages_items", "(", ")", ":", "\n", "        ", "if", "exists", "(", "require_fpath", ")", ":", "\n", "            ", "for", "info", "in", "parse_require_file", "(", "require_fpath", ")", ":", "\n", "                ", "parts", "=", "[", "info", "[", "'package'", "]", "]", "\n", "if", "with_version", "and", "'version'", "in", "info", ":", "\n", "                    ", "parts", ".", "extend", "(", "info", "[", "'version'", "]", ")", "\n", "", "if", "not", "sys", ".", "version", ".", "startswith", "(", "'3.4'", ")", ":", "\n", "# apparently package_deps are broken in 3.4", "\n", "                    ", "platform_deps", "=", "info", ".", "get", "(", "'platform_deps'", ")", "\n", "if", "platform_deps", "is", "not", "None", ":", "\n", "                        ", "parts", ".", "append", "(", "';'", "+", "platform_deps", ")", "\n", "", "", "item", "=", "''", ".", "join", "(", "parts", ")", "\n", "yield", "item", "\n", "\n", "", "", "", "packages", "=", "list", "(", "gen_packages_items", "(", ")", ")", "\n", "return", "packages", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.mmseg.__init__.digit_version": [[9, 19], ["version_str.split", "x.isdigit", "digit_version.append", "int", "x.find", "x.split", "digit_version.append", "digit_version.append", "int", "int", "mmcv.__version__"], "function", ["None"], ["def", "digit_version", "(", "version_str", ")", ":", "\n", "    ", "digit_version", "=", "[", "]", "\n", "for", "x", "in", "version_str", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "if", "x", ".", "isdigit", "(", ")", ":", "\n", "            ", "digit_version", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "x", ".", "find", "(", "'rc'", ")", "!=", "-", "1", ":", "\n", "            ", "patch_version", "=", "x", ".", "split", "(", "'rc'", ")", "\n", "digit_version", ".", "append", "(", "int", "(", "patch_version", "[", "0", "]", ")", "-", "1", ")", "\n", "digit_version", ".", "append", "(", "int", "(", "patch_version", "[", "1", "]", ")", ")", "\n", "", "", "return", "digit_version", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.mmseg.version.parse_version_info": [[6, 16], ["version_str.split", "tuple", "x.isdigit", "version_info.append", "int", "x.find", "x.split", "version_info.append", "version_info.append", "int"], "function", ["None"], ["def", "parse_version_info", "(", "version_str", ")", ":", "\n", "    ", "version_info", "=", "[", "]", "\n", "for", "x", "in", "version_str", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "if", "x", ".", "isdigit", "(", ")", ":", "\n", "            ", "version_info", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "x", ".", "find", "(", "'rc'", ")", "!=", "-", "1", ":", "\n", "            ", "patch_version", "=", "x", ".", "split", "(", "'rc'", ")", "\n", "version_info", ".", "append", "(", "int", "(", "patch_version", "[", "0", "]", ")", ")", "\n", "version_info", ".", "append", "(", "f'rc{patch_version[1]}'", ")", "\n", "", "", "return", "tuple", "(", "version_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger": [[6, 28], ["mmcv.utils.get_logger"], "function", ["None"], ["def", "get_root_logger", "(", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Get the root logger.\n\n    The logger will be initialized if it has not been initialized. By default a\n    StreamHandler will be added. If `log_file` is specified, a FileHandler will\n    also be added. The name of the root logger is the top-level package name,\n    e.g., \"mmseg\".\n\n    Args:\n        log_file (str | None): The log filename. If specified, a FileHandler\n            will be added to the root logger.\n        log_level (int): The root logger level. Note that only the process of\n            rank 0 is affected, while other processes will set the level to\n            \"Error\" and be silent most of the time.\n\n    Returns:\n        logging.Logger: The root logger.\n    \"\"\"", "\n", "\n", "logger", "=", "get_logger", "(", "name", "=", "'mmseg'", ",", "log_file", "=", "log_file", ",", "log_level", "=", "log_level", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.print_log": [[29, 52], ["print", "logger.get_root_logger", "get_root_logger.log", "isinstance", "logger.log", "TypeError"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger"], ["", "def", "print_log", "(", "msg", ",", "logger", "=", "None", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Print a log message.\n    Args:\n        msg (str): The message to be logged.\n        logger (logging.Logger | str | None): The logger to be used. Some\n            special loggers are:\n            - \"root\": the root logger obtained with `get_root_logger()`.\n            - \"silent\": no message will be printed.\n            - None: The `print()` method will be used to print log messages.\n        level (int): Logging level. Only available when `logger` is a Logger\n            object or \"root\".\n    \"\"\"", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "print", "(", "msg", ")", "\n", "", "elif", "logger", "==", "'root'", ":", "\n", "        ", "_logger", "=", "get_root_logger", "(", ")", "\n", "_logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "elif", "isinstance", "(", "logger", ",", "logging", ".", "Logger", ")", ":", "\n", "        ", "logger", ".", "log", "(", "level", ",", "msg", ")", "\n", "", "elif", "logger", "!=", "'silent'", ":", "\n", "        ", "raise", "TypeError", "(", "\n", "'logger should be either a logging.Logger object, \"root\", '", "\n", "'\"silent\" or None, but got {}'", ".", "format", "(", "logger", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.collect_env.collect_env": [[7, 13], ["mmcv.utils.collect_env", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.collect_env.collect_env"], ["def", "collect_env", "(", ")", ":", "\n", "    ", "\"\"\"Collect the information of the running environments.\"\"\"", "\n", "env_info", "=", "collect_base_env", "(", ")", "\n", "env_info", "[", "'MMSegmentation'", "]", "=", "f'{mmseg.__version__}+{get_git_hash()[:7]}'", "\n", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.inverted_residual.InvertedResidual.__init__": [[31, 80], ["dict", "dict", "torch.nn.Module.__init__", "int", "layers.extend", "torch.nn.Sequential", "round", "layers.append", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "stride", ",", "\n", "expand_ratio", ",", "\n", "dilation", "=", "1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU6'", ")", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", ",", "f'stride must in [1, 2]. '", "f'But received {stride}.'", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "in_channels", "==", "out_channels", "\n", "hidden_dim", "=", "int", "(", "round", "(", "in_channels", "*", "expand_ratio", ")", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "expand_ratio", "!=", "1", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "hidden_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "ConvModule", "(", "\n", "in_channels", "=", "hidden_dim", ",", "\n", "out_channels", "=", "hidden_dim", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "hidden_dim", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ",", "\n", "ConvModule", "(", "\n", "in_channels", "=", "hidden_dim", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "]", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.inverted_residual.InvertedResidual.forward": [[81, 95], ["torch.utils.checkpoint.checkpoint", "inverted_residual.InvertedResidual.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "if", "self", ".", "use_res_connect", ":", "\n", "                ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n", "", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.inverted_residual.InvertedResidualV3.__init__": [[124, 182], ["dict", "dict", "torch.nn.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "isinstance", "mmcv.cnn.ConvModule", "se_layer.SELayer", "dict"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "se_cfg", "=", "None", ",", "\n", "with_expand_conv", "=", "True", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "with_cp", "=", "False", ")", ":", "\n", "        ", "super", "(", "InvertedResidualV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "with_res_shortcut", "=", "(", "stride", "==", "1", "and", "in_channels", "==", "out_channels", ")", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "with_cp", "=", "with_cp", "\n", "self", ".", "with_se", "=", "se_cfg", "is", "not", "None", "\n", "self", ".", "with_expand_conv", "=", "with_expand_conv", "\n", "\n", "if", "self", ".", "with_se", ":", "\n", "            ", "assert", "isinstance", "(", "se_cfg", ",", "dict", ")", "\n", "", "if", "not", "self", ".", "with_expand_conv", ":", "\n", "            ", "assert", "mid_channels", "==", "in_channels", "\n", "\n", "", "if", "self", ".", "with_expand_conv", ":", "\n", "            ", "self", ".", "expand_conv", "=", "ConvModule", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "", "self", ".", "depthwise_conv", "=", "ConvModule", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "mid_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "groups", "=", "mid_channels", ",", "\n", "conv_cfg", "=", "dict", "(", "\n", "type", "=", "'Conv2dAdaptivePadding'", ")", "if", "stride", "==", "2", "else", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n", "if", "self", ".", "with_se", ":", "\n", "            ", "self", ".", "se", "=", "SELayer", "(", "**", "se_cfg", ")", "\n", "\n", "", "self", ".", "linear_conv", "=", "ConvModule", "(", "\n", "in_channels", "=", "mid_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.inverted_residual.InvertedResidualV3.forward": [[183, 209], ["inverted_residual.InvertedResidualV3.depthwise_conv", "inverted_residual.InvertedResidualV3.linear_conv", "torch.utils.checkpoint.checkpoint", "inverted_residual.InvertedResidualV3.forward._inner_forward"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "def", "_inner_forward", "(", "x", ")", ":", "\n", "            ", "out", "=", "x", "\n", "\n", "if", "self", ".", "with_expand_conv", ":", "\n", "                ", "out", "=", "self", ".", "expand_conv", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "depthwise_conv", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_se", ":", "\n", "                ", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "linear_conv", "(", "out", ")", "\n", "\n", "if", "self", ".", "with_res_shortcut", ":", "\n", "                ", "return", "x", "+", "out", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "\n", "", "", "if", "self", ".", "with_cp", "and", "x", ".", "requires_grad", ":", "\n", "            ", "out", "=", "cp", ".", "checkpoint", "(", "_inner_forward", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "_inner_forward", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm._no_grad_trunc_normal_": [[6, 40], ["warnings.warn", "torch.no_grad", "norm._no_grad_trunc_normal_.norm_cdf"], "function", ["None"], ["def", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", ":", "\n", "# Cut & paste from PyTorch official master until it's in a few official releases - RW", "\n", "# Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf", "\n", "    ", "def", "norm_cdf", "(", "x", ")", ":", "\n", "# Computes standard normal cumulative distribution function", "\n", "        ", "return", "(", "1.", "+", "math", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.", ")", ")", ")", "/", "2.", "\n", "\n", "", "if", "(", "mean", "<", "a", "-", "2", "*", "std", ")", "or", "(", "mean", ">", "b", "+", "2", "*", "std", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"mean is more than 2 std from [a, b] in nn.init.trunc_normal_. \"", "\n", "\"The distribution of values may be incorrect.\"", ",", "\n", "stacklevel", "=", "2", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Values are generated by using a truncated uniform distribution and", "\n", "# then using the inverse CDF for the normal distribution.", "\n", "# Get upper and lower cdf values", "\n", "        ", "l", "=", "norm_cdf", "(", "(", "a", "-", "mean", ")", "/", "std", ")", "\n", "u", "=", "norm_cdf", "(", "(", "b", "-", "mean", ")", "/", "std", ")", "\n", "\n", "# Uniformly fill tensor with values from [l, u], then translate to", "\n", "# [2l-1, 2u-1].", "\n", "tensor", ".", "uniform_", "(", "2", "*", "l", "-", "1", ",", "2", "*", "u", "-", "1", ")", "\n", "\n", "# Use inverse cdf transform for normal distribution to get truncated", "\n", "# standard normal", "\n", "tensor", ".", "erfinv_", "(", ")", "\n", "\n", "# Transform to proper mean, std", "\n", "tensor", ".", "mul_", "(", "std", "*", "math", ".", "sqrt", "(", "2.", ")", ")", "\n", "tensor", ".", "add_", "(", "mean", ")", "\n", "\n", "# Clamp to ensure it's in the proper range", "\n", "tensor", ".", "clamp_", "(", "min", "=", "a", ",", "max", "=", "b", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_": [[42, 61], ["norm._no_grad_trunc_normal_"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm._no_grad_trunc_normal_"], ["", "", "def", "trunc_normal_", "(", "tensor", ",", "mean", "=", "0.", ",", "std", "=", "1.", ",", "a", "=", "-", "2.", ",", "b", "=", "2.", ")", ":", "\n", "# type: (Tensor, float, float, float, float) -> Tensor", "\n", "    ", "r\"\"\"Fills the input Tensor with values drawn from a truncated\n    normal distribution. The values are effectively drawn from the\n    normal distribution :math:`\\mathcal{N}(\\text{mean}, \\text{std}^2)`\n    with values outside :math:`[a, b]` redrawn until they are within\n    the bounds. The method used for generating the random values works\n    best when :math:`a \\leq \\text{mean} \\leq b`.\n    Args:\n        tensor: an n-dimensional `torch.Tensor`\n        mean: the mean of the normal distribution\n        std: the standard deviation of the normal distribution\n        a: the minimum cutoff value\n        b: the maximum cutoff value\n    Examples:\n        >>> w = torch.empty(3, 5)\n        >>> nn.init.trunc_normal_(w)\n    \"\"\"", "\n", "return", "_no_grad_trunc_normal_", "(", "tensor", ",", "mean", ",", "std", ",", "a", ",", "b", ")", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.DropBlock2d.__init__": [[105, 121], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "drop_prob", "=", "0.1", ",", "\n", "block_size", "=", "7", ",", "\n", "gamma_scale", "=", "1.0", ",", "\n", "with_noise", "=", "False", ",", "\n", "inplace", "=", "False", ",", "\n", "batchwise", "=", "False", ",", "\n", "fast", "=", "True", ")", ":", "\n", "        ", "super", "(", "DropBlock2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "self", ".", "gamma_scale", "=", "gamma_scale", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "with_noise", "=", "with_noise", "\n", "self", ".", "inplace", "=", "inplace", "\n", "self", ".", "batchwise", "=", "batchwise", "\n", "self", ".", "fast", "=", "fast", "# FIXME finish comparisons of fast vs not", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.DropBlock2d.forward": [[122, 131], ["drop.drop_block_fast_2d", "drop.drop_block_2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_block_fast_2d", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_block_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "not", "self", ".", "drop_prob", ":", "\n", "            ", "return", "x", "\n", "", "if", "self", ".", "fast", ":", "\n", "            ", "return", "drop_block_fast_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "", "else", ":", "\n", "            ", "return", "drop_block_2d", "(", "\n", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "block_size", ",", "self", ".", "gamma_scale", ",", "self", ".", "with_noise", ",", "self", ".", "inplace", ",", "self", ".", "batchwise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.DropPath.__init__": [[154, 157], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "drop_prob", "=", "None", ")", ":", "\n", "        ", "super", "(", "DropPath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop_prob", "=", "drop_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.DropPath.forward": [[158, 160], ["drop.drop_path"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "drop_path", "(", "x", ",", "self", ".", "drop_prob", ",", "self", ".", "training", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_block_2d": [[17, 62], ["min", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.reshape().to", "torch.reshape().to", "torch.reshape().to", "min", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.max_pool2d", "torch.reshape", "torch.reshape", "torch.reshape", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "x.mul_", "block_mask.numel", "block_mask.to().sum().add", "block_mask.to().sum", "block_mask.to"], "function", ["None"], ["def", "drop_block_2d", "(", "\n", "x", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "gamma_scale", ":", "float", "=", "1.0", ",", "\n", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n    DropBlock with an experimental gaussian noise option. This layer has been tested on a few training\n    runs with success, but needs further validation and possibly optimization for lower runtime impact.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "# seed_drop_rate, the gamma parameter", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "# Forces the block to be inside the feature map.", "\n", "w_i", ",", "h_i", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "W", ")", ".", "to", "(", "x", ".", "device", ")", ",", "torch", ".", "arange", "(", "H", ")", ".", "to", "(", "x", ".", "device", ")", ")", "\n", "valid_block", "=", "(", "(", "w_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "w_i", "<", "W", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "&", "(", "(", "h_i", ">=", "clipped_block_size", "//", "2", ")", "&", "(", "h_i", "<", "H", "-", "(", "clipped_block_size", "-", "1", ")", "//", "2", ")", ")", "\n", "valid_block", "=", "torch", ".", "reshape", "(", "valid_block", ",", "(", "1", ",", "1", ",", "H", ",", "W", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "uniform_noise", "=", "torch", ".", "rand_like", "(", "x", ")", "\n", "", "block_mask", "=", "(", "(", "2", "-", "gamma", "-", "valid_block", "+", "uniform_noise", ")", ">=", "1", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "block_mask", "=", "-", "F", ".", "max_pool2d", "(", "\n", "-", "block_mask", ",", "\n", "kernel_size", "=", "clipped_block_size", ",", "# block_size,", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "(", "1", "-", "block_mask", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "+", "normal_noise", "*", "(", "1", "-", "block_mask", ")", "\n", "", "", "else", ":", "\n", "        ", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_block_fast_2d": [[64, 100], ["min", "torch.max_pool2d", "min", "F.max_pool2d.to", "torch.rand", "torch.rand", "torch.rand", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.randn", "torch.randn", "torch.randn", "torch.randn_like", "torch.randn_like", "torch.randn_like", "x.mul_().add_", "x.mul_", "x.mul_", "F.max_pool2d.numel", "F.max_pool2d.to().sum().add", "F.max_pool2d.to().sum", "F.max_pool2d.to"], "function", ["None"], ["", "def", "drop_block_fast_2d", "(", "\n", "x", ":", "torch", ".", "Tensor", ",", "drop_prob", ":", "float", "=", "0.1", ",", "block_size", ":", "int", "=", "7", ",", "\n", "gamma_scale", ":", "float", "=", "1.0", ",", "with_noise", ":", "bool", "=", "False", ",", "inplace", ":", "bool", "=", "False", ",", "batchwise", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\" DropBlock. See https://arxiv.org/pdf/1810.12890.pdf\n    DropBlock with an experimental gaussian noise option. Simplied from above without concern for valid\n    block mask at edges.\n    \"\"\"", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "total_size", "=", "W", "*", "H", "\n", "clipped_block_size", "=", "min", "(", "block_size", ",", "min", "(", "W", ",", "H", ")", ")", "\n", "gamma", "=", "gamma_scale", "*", "drop_prob", "*", "total_size", "/", "clipped_block_size", "**", "2", "/", "(", "\n", "(", "W", "-", "block_size", "+", "1", ")", "*", "(", "H", "-", "block_size", "+", "1", ")", ")", "\n", "\n", "if", "batchwise", ":", "\n", "# one mask for whole batch, quite a bit faster", "\n", "        ", "block_mask", "=", "torch", ".", "rand", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "<", "gamma", "\n", "", "else", ":", "\n", "# mask per batch element", "\n", "        ", "block_mask", "=", "torch", ".", "rand_like", "(", "x", ")", "<", "gamma", "\n", "", "block_mask", "=", "F", ".", "max_pool2d", "(", "\n", "block_mask", ".", "to", "(", "x", ".", "dtype", ")", ",", "kernel_size", "=", "clipped_block_size", ",", "stride", "=", "1", ",", "padding", "=", "clipped_block_size", "//", "2", ")", "\n", "\n", "if", "with_noise", ":", "\n", "        ", "normal_noise", "=", "torch", ".", "randn", "(", "(", "1", ",", "C", ",", "H", ",", "W", ")", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "batchwise", "else", "torch", ".", "randn_like", "(", "x", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "1.", "-", "block_mask", ")", ".", "add_", "(", "normal_noise", "*", "block_mask", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "(", "1.", "-", "block_mask", ")", "+", "normal_noise", "*", "block_mask", "\n", "", "", "else", ":", "\n", "        ", "block_mask", "=", "1", "-", "block_mask", "\n", "normalize_scale", "=", "(", "block_mask", ".", "numel", "(", ")", "/", "block_mask", ".", "to", "(", "dtype", "=", "torch", ".", "float32", ")", ".", "sum", "(", ")", ".", "add", "(", "1e-7", ")", ")", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ")", "\n", "if", "inplace", ":", "\n", "            ", "x", ".", "mul_", "(", "block_mask", "*", "normalize_scale", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "*", "block_mask", "*", "normalize_scale", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path": [[133, 149], ["random_tensor.floor_", "torch.rand", "torch.rand", "torch.rand", "x.div"], "function", ["None"], ["", "", "", "def", "drop_path", "(", "x", ",", "drop_prob", ":", "float", "=", "0.", ",", "training", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\n    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,\n    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\n    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for\n    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use\n    'survival rate' as the argument.\n    \"\"\"", "\n", "if", "drop_prob", "==", "0.", "or", "not", "training", ":", "\n", "        ", "return", "x", "\n", "", "keep_prob", "=", "1", "-", "drop_prob", "\n", "shape", "=", "(", "x", ".", "shape", "[", "0", "]", ",", ")", "+", "(", "1", ",", ")", "*", "(", "x", ".", "ndim", "-", "1", ")", "# work with diff dim tensors, not just 2D ConvNets", "\n", "random_tensor", "=", "keep_prob", "+", "torch", ".", "rand", "(", "shape", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "random_tensor", ".", "floor_", "(", ")", "# binarize", "\n", "output", "=", "x", ".", "div", "(", "keep_prob", ")", "*", "random_tensor", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.make_divisible.make_divisible": [[1, 28], ["max", "int"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["def", "make_divisible", "(", "value", ",", "divisor", ",", "min_value", "=", "None", ",", "min_ratio", "=", "0.9", ")", ":", "\n", "    ", "\"\"\"Make divisible function.\n\n    This function rounds the channel number to the nearest value that can be\n    divisible by the divisor. It is taken from the original tf repo. It ensures\n    that all layers have a channel number that is divisible by divisor. It can\n    be seen here: https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py  # noqa\n\n    Args:\n        value (int): The original channel number.\n        divisor (int): The divisor to fully divide the channel number.\n        min_value (int): The minimum value of the output channel.\n            Default: None, means that the minimum value equal to the divisor.\n        min_ratio (float): The minimum ratio of the rounded channel number to\n            the original channel number. Default: 0.9.\n\n    Returns:\n        int: The modified output channel number.\n    \"\"\"", "\n", "\n", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_value", "=", "max", "(", "min_value", ",", "int", "(", "value", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than (1-min_ratio).", "\n", "if", "new_value", "<", "min_ratio", "*", "value", ":", "\n", "        ", "new_value", "+=", "divisor", "\n", "", "return", "new_value", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.se_layer.SELayer.__init__": [[26, 52], ["torch.Module.__init__", "isinstance", "mmcv.is_tuple_of", "torch.AdaptiveAvgPool2d", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "dict", "dict", "len", "make_divisible.make_divisible.make_divisible", "make_divisible.make_divisible.make_divisible"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.make_divisible", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.make_divisible"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "ratio", "=", "16", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "act_cfg", "=", "(", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "dict", "(", "type", "=", "'HSigmoid'", ",", "bias", "=", "3.0", ",", "divisor", "=", "6.0", ")", ")", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "act_cfg", ",", "dict", ")", ":", "\n", "            ", "act_cfg", "=", "(", "act_cfg", ",", "act_cfg", ")", "\n", "", "assert", "len", "(", "act_cfg", ")", "==", "2", "\n", "assert", "mmcv", ".", "is_tuple_of", "(", "act_cfg", ",", "dict", ")", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "conv1", "=", "ConvModule", "(", "\n", "in_channels", "=", "channels", ",", "\n", "out_channels", "=", "make_divisible", "(", "channels", "//", "ratio", ",", "8", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "act_cfg", "=", "act_cfg", "[", "0", "]", ")", "\n", "self", ".", "conv2", "=", "ConvModule", "(", "\n", "in_channels", "=", "make_divisible", "(", "channels", "//", "ratio", ",", "8", ")", ",", "\n", "out_channels", "=", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "act_cfg", "=", "act_cfg", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.se_layer.SELayer.forward": [[53, 58], ["se_layer.SELayer.global_avgpool", "se_layer.SELayer.conv1", "se_layer.SELayer.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "global_avgpool", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "x", "*", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.up_conv_block.UpConvBlock.__init__": [[44, 93], ["dict", "dict", "dict", "torch.Module.__init__", "conv_block", "mmcv.cnn.build_upsample_layer", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "conv_block", ",", "\n", "in_channels", ",", "\n", "skip_channels", ",", "\n", "out_channels", ",", "\n", "num_convs", "=", "2", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "with_cp", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "upsample_cfg", "=", "dict", "(", "type", "=", "'InterpConv'", ")", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", ":", "\n", "        ", "super", "(", "UpConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "dcn", "is", "None", ",", "'Not implemented yet.'", "\n", "assert", "plugins", "is", "None", ",", "'Not implemented yet.'", "\n", "\n", "self", ".", "conv_block", "=", "conv_block", "(", "\n", "in_channels", "=", "2", "*", "skip_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_convs", "=", "num_convs", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "dcn", "=", "None", ",", "\n", "plugins", "=", "None", ")", "\n", "if", "upsample_cfg", "is", "not", "None", ":", "\n", "            ", "self", ".", "upsample", "=", "build_upsample_layer", "(", "\n", "cfg", "=", "upsample_cfg", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "skip_channels", ",", "\n", "with_cp", "=", "with_cp", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "upsample", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "skip_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.up_conv_block.UpConvBlock.forward": [[94, 102], ["up_conv_block.UpConvBlock.upsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "up_conv_block.UpConvBlock.conv_block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "skip", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "skip", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "conv_block", "(", "out", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.res_layer.ResLayer.__init__": [[26, 95], ["dict", "layers.append", "range", "torch.nn.Sequential.__init__", "torch.nn.Sequential.extend", "torch.nn.Sequential", "block", "layers.append", "torch.nn.Sequential.append", "block", "torch.nn.AvgPool2d", "mmcv.cnn.build_conv_layer", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "num_blocks", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "avg_down", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ")", ",", "\n", "multi_grid", "=", "None", ",", "\n", "contract_dilation", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "block", "=", "block", "\n", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "[", "]", "\n", "conv_stride", "=", "stride", "\n", "if", "avg_down", ":", "\n", "                ", "conv_stride", "=", "1", "\n", "downsample", ".", "append", "(", "\n", "nn", ".", "AvgPool2d", "(", "\n", "kernel_size", "=", "stride", ",", "\n", "stride", "=", "stride", ",", "\n", "ceil_mode", "=", "True", ",", "\n", "count_include_pad", "=", "False", ")", ")", "\n", "", "downsample", ".", "extend", "(", "[", "\n", "build_conv_layer", "(", "\n", "conv_cfg", ",", "\n", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "conv_stride", ",", "\n", "bias", "=", "False", ")", ",", "\n", "build_norm_layer", "(", "norm_cfg", ",", "planes", "*", "block", ".", "expansion", ")", "[", "1", "]", "\n", "]", ")", "\n", "downsample", "=", "nn", ".", "Sequential", "(", "*", "downsample", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "if", "multi_grid", "is", "None", ":", "\n", "            ", "if", "dilation", ">", "1", "and", "contract_dilation", ":", "\n", "                ", "first_dilation", "=", "dilation", "//", "2", "\n", "", "else", ":", "\n", "                ", "first_dilation", "=", "dilation", "\n", "", "", "else", ":", "\n", "            ", "first_dilation", "=", "multi_grid", "[", "0", "]", "\n", "", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "dilation", "=", "first_dilation", ",", "\n", "downsample", "=", "downsample", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "**", "kwargs", ")", ")", "\n", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "inplanes", "=", "inplanes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "dilation", "=", "dilation", "if", "multi_grid", "is", "None", "else", "multi_grid", "[", "i", "]", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "**", "kwargs", ")", ")", "\n", "", "super", "(", "ResLayer", ",", "self", ")", ".", "__init__", "(", "*", "layers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.self_attention_block.SelfAttentionBlock.__init__": [[32, 92], ["torch.nn.Module.__init__", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.build_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.build_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.init_weights", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.build_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.build_project"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.utils.self_attention_block.SelfAttentionBlock.build_project", "home.repos.pwc.inspect_result.nvlabs_fan.utils.self_attention_block.SelfAttentionBlock.build_project", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.utils.self_attention_block.SelfAttentionBlock.build_project", "home.repos.pwc.inspect_result.nvlabs_fan.utils.self_attention_block.SelfAttentionBlock.build_project"], ["def", "__init__", "(", "self", ",", "key_in_channels", ",", "query_in_channels", ",", "channels", ",", "\n", "out_channels", ",", "share_key_query", ",", "query_downsample", ",", "\n", "key_downsample", ",", "key_query_num_convs", ",", "value_out_num_convs", ",", "\n", "key_query_norm", ",", "value_out_norm", ",", "matmul_norm", ",", "with_out", ",", "\n", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "SelfAttentionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "share_key_query", ":", "\n", "            ", "assert", "key_in_channels", "==", "query_in_channels", "\n", "", "self", ".", "key_in_channels", "=", "key_in_channels", "\n", "self", ".", "query_in_channels", "=", "query_in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "share_key_query", "=", "share_key_query", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "key_project", "=", "self", ".", "build_project", "(", "\n", "key_in_channels", ",", "\n", "channels", ",", "\n", "num_convs", "=", "key_query_num_convs", ",", "\n", "use_conv_module", "=", "key_query_norm", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "if", "share_key_query", ":", "\n", "            ", "self", ".", "query_project", "=", "self", ".", "key_project", "\n", "", "else", ":", "\n", "            ", "self", ".", "query_project", "=", "self", ".", "build_project", "(", "\n", "query_in_channels", ",", "\n", "channels", ",", "\n", "num_convs", "=", "key_query_num_convs", ",", "\n", "use_conv_module", "=", "key_query_norm", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "", "self", ".", "value_project", "=", "self", ".", "build_project", "(", "\n", "key_in_channels", ",", "\n", "channels", "if", "with_out", "else", "out_channels", ",", "\n", "num_convs", "=", "value_out_num_convs", ",", "\n", "use_conv_module", "=", "value_out_norm", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "if", "with_out", ":", "\n", "            ", "self", ".", "out_project", "=", "self", ".", "build_project", "(", "\n", "channels", ",", "\n", "out_channels", ",", "\n", "num_convs", "=", "value_out_num_convs", ",", "\n", "use_conv_module", "=", "value_out_norm", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "out_project", "=", "None", "\n", "\n", "", "self", ".", "query_downsample", "=", "query_downsample", "\n", "self", ".", "key_downsample", "=", "key_downsample", "\n", "self", ".", "matmul_norm", "=", "matmul_norm", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.self_attention_block.SelfAttentionBlock.init_weights": [[93, 98], ["isinstance", "mmcv.cnn.constant_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weight of later layer.\"\"\"", "\n", "if", "self", ".", "out_project", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "out_project", ",", "ConvModule", ")", ":", "\n", "                ", "constant_init", "(", "self", ".", "out_project", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.self_attention_block.SelfAttentionBlock.build_project": [[99, 130], ["range", "range", "len", "torch.nn.Sequential", "mmcv.cnn.ConvModule", "torch.nn.Sequential.append", "torch.nn.Conv2d", "torch.nn.Sequential.append", "mmcv.cnn.ConvModule", "torch.nn.Conv2d"], "methods", ["None"], ["", "", "", "def", "build_project", "(", "self", ",", "in_channels", ",", "channels", ",", "num_convs", ",", "use_conv_module", ",", "\n", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "\"\"\"Build projection layer for key/query/value/out.\"\"\"", "\n", "if", "use_conv_module", ":", "\n", "            ", "convs", "=", "[", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "]", "\n", "for", "_", "in", "range", "(", "num_convs", "-", "1", ")", ":", "\n", "                ", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "channels", ",", "\n", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "convs", "=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "channels", ",", "1", ")", "]", "\n", "for", "_", "in", "range", "(", "num_convs", "-", "1", ")", ":", "\n", "                ", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "1", ")", ")", "\n", "", "", "if", "len", "(", "convs", ")", ">", "1", ":", "\n", "            ", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "", "else", ":", "\n", "            ", "convs", "=", "convs", "[", "0", "]", "\n", "", "return", "convs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.self_attention_block.SelfAttentionBlock.forward": [[131, 160], ["query_feats.size", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.query_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.reshape", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute().contiguous", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.key_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.value_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.reshape", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.reshape", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute().contiguous", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute().contiguous", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.reshape", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.query_downsample", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.key_downsample", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.key_downsample", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.out_project", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute", "self_attention_block.SelfAttentionBlock.SelfAttentionBlock.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query_feats", ",", "key_feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "batch_size", "=", "query_feats", ".", "size", "(", "0", ")", "\n", "query", "=", "self", ".", "query_project", "(", "query_feats", ")", "\n", "if", "self", ".", "query_downsample", "is", "not", "None", ":", "\n", "            ", "query", "=", "self", ".", "query_downsample", "(", "query", ")", "\n", "", "query", "=", "query", ".", "reshape", "(", "*", "query", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "\n", "query", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "key", "=", "self", ".", "key_project", "(", "key_feats", ")", "\n", "value", "=", "self", ".", "value_project", "(", "key_feats", ")", "\n", "if", "self", ".", "key_downsample", "is", "not", "None", ":", "\n", "            ", "key", "=", "self", ".", "key_downsample", "(", "key", ")", "\n", "value", "=", "self", ".", "key_downsample", "(", "value", ")", "\n", "", "key", "=", "key", ".", "reshape", "(", "*", "key", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "\n", "value", "=", "value", ".", "reshape", "(", "*", "value", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", "\n", "value", "=", "value", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "sim_map", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "if", "self", ".", "matmul_norm", ":", "\n", "            ", "sim_map", "=", "(", "self", ".", "channels", "**", "-", ".5", ")", "*", "sim_map", "\n", "", "sim_map", "=", "F", ".", "softmax", "(", "sim_map", ",", "dim", "=", "-", "1", ")", "\n", "\n", "context", "=", "torch", ".", "matmul", "(", "sim_map", ",", "value", ")", "\n", "context", "=", "context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "context", "=", "context", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "*", "query_feats", ".", "shape", "[", "2", ":", "]", ")", "\n", "if", "self", ".", "out_project", "is", "not", "None", ":", "\n", "            ", "context", "=", "self", ".", "out_project", "(", "context", ")", "\n", "", "return", "context", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix": [[1, 18], ["dict", "inputs.items"], "function", ["None"], ["def", "add_prefix", "(", "inputs", ",", "prefix", ")", ":", "\n", "    ", "\"\"\"Add prefix for dict.\n\n    Args:\n        inputs (dict): The input dict with str keys.\n        prefix (str): The prefix to add.\n\n    Returns:\n\n        dict: The dict with keys updated with ``prefix``.\n    \"\"\"", "\n", "\n", "outputs", "=", "dict", "(", ")", "\n", "for", "name", ",", "value", "in", "inputs", ".", "items", "(", ")", ":", "\n", "        ", "outputs", "[", "f'{prefix}.{name}'", "]", "=", "value", "\n", "\n", "", "return", "outputs", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.__init__": [[77, 84], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.update": [[85, 89], ["mce_utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.synchronize_between_processes": [[90, 102], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "mce_utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.median": [[103, 107], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.median", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.avg": [[108, 112], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.global_avg": [[113, 116], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max": [[117, 120], ["mce_utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.value": [[121, 124], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.__str__": [[125, 132], ["mce_utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.__init__": [[135, 138], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update": [[139, 145], ["kwargs.items", "isinstance", "isinstance", "mce_utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.__getattr__": [[146, 153], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.__str__": [[154, 161], ["mce_utils.MetricLogger.meters.items", "mce_utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.synchronize_between_processes": [[162, 165], ["mce_utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.add_meter": [[166, 168], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.log_every": [[169, 214], ["time.time", "time.time", "mce_utils.SmoothedValue", "mce_utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "mce_utils.MetricLogger.delimiter.join", "str", "print", "mce_utils.MetricLogger.append", "mce_utils.SmoothedValue.update", "mce_utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "mce_utils.MetricLogger.format", "mce_utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "log_msg", "=", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", ".", "append", "(", "'max mem: {memory:.0f}'", ")", "\n", "", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "log_msg", ")", "\n", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_ce_alexnet": [[43, 64], ["dict"], "function", ["None"], ["def", "get_ce_alexnet", "(", ")", ":", "\n", "    ", "\"\"\"Returns Corruption Error values for AlexNet\"\"\"", "\n", "\n", "ce_alexnet", "=", "dict", "(", ")", "\n", "ce_alexnet", "[", "'gaussian_noise'", "]", "=", "0.886428", "\n", "ce_alexnet", "[", "'shot_noise'", "]", "=", "0.894468", "\n", "ce_alexnet", "[", "'impulse_noise'", "]", "=", "0.922640", "\n", "ce_alexnet", "[", "'defocus_blur'", "]", "=", "0.819880", "\n", "ce_alexnet", "[", "'glass_blur'", "]", "=", "0.826268", "\n", "ce_alexnet", "[", "'motion_blur'", "]", "=", "0.785948", "\n", "ce_alexnet", "[", "'zoom_blur'", "]", "=", "0.798360", "\n", "ce_alexnet", "[", "'snow'", "]", "=", "0.866816", "\n", "ce_alexnet", "[", "'frost'", "]", "=", "0.826572", "\n", "ce_alexnet", "[", "'fog'", "]", "=", "0.819324", "\n", "ce_alexnet", "[", "'brightness'", "]", "=", "0.564592", "\n", "ce_alexnet", "[", "'contrast'", "]", "=", "0.853204", "\n", "ce_alexnet", "[", "'elastic_transform'", "]", "=", "0.646056", "\n", "ce_alexnet", "[", "'pixelate'", "]", "=", "0.717840", "\n", "ce_alexnet", "[", "'jpeg_compression'", "]", "=", "0.606500", "\n", "\n", "return", "ce_alexnet", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_mce_from_accuracy": [[65, 71], ["None"], "function", ["None"], ["", "def", "get_mce_from_accuracy", "(", "accuracy", ",", "error_alexnet", ")", ":", "\n", "    ", "\"\"\"Computes mean Corruption Error from accuracy\"\"\"", "\n", "error", "=", "100.", "-", "accuracy", "\n", "ce", "=", "error", "/", "(", "error_alexnet", "*", "100.", ")", "\n", "\n", "return", "ce", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils._load_checkpoint_for_ema": [[216, 224], ["io.BytesIO", "torch.save", "torch.save", "io.BytesIO.seek", "model_ema._load_checkpoint"], "function", ["None"], ["", "", "def", "_load_checkpoint_for_ema", "(", "model_ema", ",", "checkpoint", ")", ":", "\n", "    ", "\"\"\"\n    Workaround for ModelEma._load_checkpoint to accept an already-loaded object\n    \"\"\"", "\n", "mem_file", "=", "io", ".", "BytesIO", "(", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "mem_file", ")", "\n", "mem_file", ".", "seek", "(", "0", ")", "\n", "model_ema", ".", "_load_checkpoint", "(", "mem_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.setup_for_distributed": [[226, 239], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.is_dist_avail_and_initialized": [[241, 247], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_world_size": [[249, 253], ["torch.get_world_size", "mce_utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_world_size", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_rank": [[255, 259], ["torch.get_rank", "mce_utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_rank", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.is_main_process": [[261, 263], ["mce_utils.get_rank"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.save_on_master": [[265, 268], ["mce_utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.scaler.ApexScaler_SAM.__call__": [[12, 22], ["amp.scale_loss", "scaled_loss.backward", "optimizer.step", "dispatch_clip_grad", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "amp.master_params", "amp.master_params"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "loss", ",", "optimizer", ",", "clip_grad", "=", "None", ",", "clip_mode", "=", "'norm'", ",", "parameters", "=", "None", ",", "create_graph", "=", "False", ",", "step", "=", "0", ",", "rho", "=", "0.05", ")", ":", "\n", "        ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", "create_graph", "=", "create_graph", ")", "\n", "", "if", "step", "==", "0", "or", "step", "==", "2", ":", "\n", "            ", "if", "clip_grad", "is", "not", "None", ":", "\n", "                ", "dispatch_clip_grad", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "clip_grad", ",", "mode", "=", "clip_mode", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "", "elif", "step", "==", "1", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "rho", ",", "norm_type", "=", "2.0", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.resize_pos_embed": [[38, 55], ["int", "int", "_logger.info", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "math.sqrt", "len", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute"], "function", ["None"], ["# if weight is specified, apply element-wise weight", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "assert", "weight", ".", "dim", "(", ")", "==", "loss", ".", "dim", "(", ")", "\n", "if", "weight", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "assert", "weight", ".", "size", "(", "1", ")", "==", "1", "or", "weight", ".", "size", "(", "1", ")", "==", "loss", ".", "size", "(", "1", ")", "\n", "", "loss", "=", "loss", "*", "weight", "\n", "\n", "# if avg_factor is not specified, just reduce the loss", "\n", "", "if", "avg_factor", "is", "None", ":", "\n", "        ", "loss", "=", "reduce_loss", "(", "loss", ",", "reduction", ")", "\n", "", "else", ":", "\n", "# if reduction is mean, then average the loss by avg_factor", "\n", "        ", "if", "reduction", "==", "'mean'", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "/", "avg_factor", "\n", "# if reduction is 'none', then do nothing, otherwise raise an error", "\n", "", "elif", "reduction", "!=", "'none'", ":", "\n", "            ", "raise", "ValueError", "(", "'avg_factor can not be used with reduction=\"sum\"'", ")", "\n", "", "", "return", "loss", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.resize_pos_embed_cait": [[56, 68], ["int", "int", "_logger.info", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "math.sqrt", "math.sqrt", "len", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute"], "function", ["None"], ["\n", "\n", "", "def", "weighted_loss", "(", "loss_func", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.resize_pos_embed_nocls": [[70, 81], ["_logger.info", "posemb_grid.permute.permute", "torch.interpolate", "posemb_grid.permute.permute"], "function", ["None"], []], "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_state_dict": [[83, 122], ["os.path.isfile", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "isinstance", "_logger.info", "_logger.error", "FileNotFoundError", "collections.OrderedDict", "checkpoint[].items", "state_dict.pop", "state_dict.pop", "k.startswith", "len", "utils.resize_pos_embed_cait", "utils.resize_pos_embed", "len", "utils.resize_pos_embed_nocls", "int", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.resize_pos_embed_cait", "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.resize_pos_embed", "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.resize_pos_embed_nocls"], ["\n", "\n", "@", "functools", ".", "wraps", "(", "loss_func", ")", "\n", "def", "wrapper", "(", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "# get element-wise loss", "\n", "        ", "loss", "=", "loss_func", "(", "pred", ",", "target", ",", "**", "kwargs", ")", "\n", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "weight", ",", "reduction", ",", "avg_factor", ")", "\n", "return", "loss", "\n", "\n", "", "return", "wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_for_transfer_learning": [[124, 127], ["utils.load_state_dict", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_state_dict", "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_state_dict"], []], "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_for_probing": [[128, 132], ["utils.load_state_dict", "model.load_state_dict", "print"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_state_dict", "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_state_dict"], []], "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.get_mean_and_std": [[133, 146], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], []], "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.init_params": [[147, 161], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], []], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.chase_db1.ChaseDB1Dataset.__init__": [[21, 28], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ChaseDB1Dataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'_1stHO.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.__init__": [[74, 114], ["pipelines.Compose", "custom.CustomDataset.get_classes_and_palette", "custom.CustomDataset.load_annotations", "os.isabs", "os.isabs", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.isabs", "os.isabs", "os.isabs", "os.isabs"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.get_classes_and_palette", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.load_annotations"], ["def", "__init__", "(", "self", ",", "\n", "pipeline", ",", "\n", "img_dir", ",", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "ann_dir", "=", "None", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "split", "=", "None", ",", "\n", "data_root", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "ignore_index", "=", "255", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "classes", "=", "None", ",", "\n", "palette", "=", "None", ")", ":", "\n", "        ", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "self", ".", "img_dir", "=", "img_dir", "\n", "self", ".", "img_suffix", "=", "img_suffix", "\n", "self", ".", "ann_dir", "=", "ann_dir", "\n", "self", ".", "seg_map_suffix", "=", "seg_map_suffix", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "reduce_zero_label", "=", "reduce_zero_label", "\n", "self", ".", "label_map", "=", "None", "\n", "self", ".", "CLASSES", ",", "self", ".", "PALETTE", "=", "self", ".", "get_classes_and_palette", "(", "\n", "classes", ",", "palette", ")", "\n", "\n", "# join paths if data_root is specified", "\n", "if", "self", ".", "data_root", "is", "not", "None", ":", "\n", "            ", "if", "not", "osp", ".", "isabs", "(", "self", ".", "img_dir", ")", ":", "\n", "                ", "self", ".", "img_dir", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "img_dir", ")", "\n", "", "if", "not", "(", "self", ".", "ann_dir", "is", "None", "or", "osp", ".", "isabs", "(", "self", ".", "ann_dir", ")", ")", ":", "\n", "                ", "self", ".", "ann_dir", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "ann_dir", ")", "\n", "", "if", "not", "(", "self", ".", "split", "is", "None", "or", "osp", ".", "isabs", "(", "self", ".", "split", ")", ")", ":", "\n", "                ", "self", ".", "split", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "split", ")", "\n", "\n", "# load annotations", "\n", "", "", "self", ".", "img_infos", "=", "self", ".", "load_annotations", "(", "self", ".", "img_dir", ",", "self", ".", "img_suffix", ",", "\n", "self", ".", "ann_dir", ",", "\n", "self", ".", "seg_map_suffix", ",", "self", ".", "split", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.__len__": [[115, 118], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Total number of samples of data.\"\"\"", "\n", "return", "len", "(", "self", ".", "img_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.load_annotations": [[119, 156], ["mmcv.utils.print_log", "mmcv.scandir", "open", "dict", "img_infos.append", "mmseg.utils.get_root_logger", "line.strip", "dict", "img_infos.append", "img.replace", "dict", "len", "dict"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.print_log", "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger"], ["", "def", "load_annotations", "(", "self", ",", "img_dir", ",", "img_suffix", ",", "ann_dir", ",", "seg_map_suffix", ",", "\n", "split", ")", ":", "\n", "        ", "\"\"\"Load annotation from directory.\n\n        Args:\n            img_dir (str): Path to image directory\n            img_suffix (str): Suffix of images.\n            ann_dir (str|None): Path to annotation directory.\n            seg_map_suffix (str|None): Suffix of segmentation maps.\n            split (str|None): Split txt file. If split is specified, only file\n                with suffix in the splits will be loaded. Otherwise, all images\n                in img_dir/ann_dir will be loaded. Default: None\n\n        Returns:\n            list[dict]: All image info of dataset.\n        \"\"\"", "\n", "\n", "img_infos", "=", "[", "]", "\n", "if", "split", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "split", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "img_name", "=", "line", ".", "strip", "(", ")", "\n", "img_info", "=", "dict", "(", "filename", "=", "img_name", "+", "img_suffix", ")", "\n", "if", "ann_dir", "is", "not", "None", ":", "\n", "                        ", "seg_map", "=", "img_name", "+", "seg_map_suffix", "\n", "img_info", "[", "'ann'", "]", "=", "dict", "(", "seg_map", "=", "seg_map", ")", "\n", "", "img_infos", ".", "append", "(", "img_info", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "img", "in", "mmcv", ".", "scandir", "(", "img_dir", ",", "img_suffix", ",", "recursive", "=", "True", ")", ":", "\n", "                ", "img_info", "=", "dict", "(", "filename", "=", "img", ")", "\n", "if", "ann_dir", "is", "not", "None", ":", "\n", "                    ", "seg_map", "=", "img", ".", "replace", "(", "img_suffix", ",", "seg_map_suffix", ")", "\n", "img_info", "[", "'ann'", "]", "=", "dict", "(", "seg_map", "=", "seg_map", ")", "\n", "", "img_infos", ".", "append", "(", "img_info", ")", "\n", "\n", "", "", "print_log", "(", "f'Loaded {len(img_infos)} images'", ",", "logger", "=", "get_root_logger", "(", ")", ")", "\n", "return", "img_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.get_ann_info": [[157, 168], ["None"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get annotation by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Annotation info of specified index.\n        \"\"\"", "\n", "\n", "return", "self", ".", "img_infos", "[", "idx", "]", "[", "'ann'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.pre_pipeline": [[169, 176], ["None"], "methods", ["None"], ["", "def", "pre_pipeline", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Prepare results dict for pipeline.\"\"\"", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "]", "\n", "results", "[", "'img_prefix'", "]", "=", "self", ".", "img_dir", "\n", "results", "[", "'seg_prefix'", "]", "=", "self", ".", "ann_dir", "\n", "if", "self", ".", "custom_classes", ":", "\n", "            ", "results", "[", "'label_map'", "]", "=", "self", ".", "label_map", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.__getitem__": [[177, 192], ["custom.CustomDataset.prepare_test_img", "custom.CustomDataset.prepare_train_img"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.prepare_test_img", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.prepare_train_img"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get training/test data after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Training/test data (with annotation if `test_mode` is set\n                False).\n        \"\"\"", "\n", "\n", "if", "self", ".", "test_mode", ":", "\n", "            ", "return", "self", ".", "prepare_test_img", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "prepare_train_img", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.prepare_train_img": [[193, 209], ["custom.CustomDataset.get_ann_info", "dict", "custom.CustomDataset.pre_pipeline", "custom.CustomDataset.pipeline"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.get_ann_info", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.pre_pipeline"], ["", "", "def", "prepare_train_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get training data and annotations after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Training data and annotation after pipeline with new keys\n                introduced by pipeline.\n        \"\"\"", "\n", "\n", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "ann_info", "=", "self", ".", "get_ann_info", "(", "idx", ")", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ",", "ann_info", "=", "ann_info", ")", "\n", "self", ".", "pre_pipeline", "(", "results", ")", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.prepare_test_img": [[210, 225], ["dict", "custom.CustomDataset.pre_pipeline", "custom.CustomDataset.pipeline"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.pre_pipeline"], ["", "def", "prepare_test_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get testing data after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Testing data after pipeline with new keys intorduced by\n                piepline.\n        \"\"\"", "\n", "\n", "img_info", "=", "self", ".", "img_infos", "[", "idx", "]", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ")", "\n", "self", ".", "pre_pipeline", "(", "results", ")", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.format_results": [[226, 229], ["None"], "methods", ["None"], ["", "def", "format_results", "(", "self", ",", "results", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Place holder to format result to dataset specific output.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.get_gt_seg_maps": [[230, 242], ["os.join", "os.join", "gt_seg_maps.append", "mmcv.imread"], "methods", ["None"], ["", "def", "get_gt_seg_maps", "(", "self", ",", "efficient_test", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get ground truth segmentation maps for evaluation.\"\"\"", "\n", "gt_seg_maps", "=", "[", "]", "\n", "for", "img_info", "in", "self", ".", "img_infos", ":", "\n", "            ", "seg_map", "=", "osp", ".", "join", "(", "self", ".", "ann_dir", ",", "img_info", "[", "'ann'", "]", "[", "'seg_map'", "]", ")", "\n", "if", "efficient_test", ":", "\n", "                ", "gt_seg_map", "=", "seg_map", "\n", "", "else", ":", "\n", "                ", "gt_seg_map", "=", "mmcv", ".", "imread", "(", "\n", "seg_map", ",", "flag", "=", "'unchanged'", ",", "backend", "=", "'pillow'", ")", "\n", "", "gt_seg_maps", ".", "append", "(", "gt_seg_map", ")", "\n", "", "return", "gt_seg_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.get_classes_and_palette": [[243, 286], ["isinstance", "custom.CustomDataset.get_palette_for_custom_classes", "mmcv.list_from_file", "isinstance", "enumerate", "ValueError", "set().issubset", "ValueError", "classes.index", "set", "type"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.get_palette_for_custom_classes"], ["", "def", "get_classes_and_palette", "(", "self", ",", "classes", "=", "None", ",", "palette", "=", "None", ")", ":", "\n", "        ", "\"\"\"Get class names of current dataset.\n\n        Args:\n            classes (Sequence[str] | str | None): If classes is None, use\n                default CLASSES defined by builtin dataset. If classes is a\n                string, take it as a file name. The file contains the name of\n                classes where each line contains one class name. If classes is\n                a tuple or list, override the CLASSES defined by the dataset.\n            palette (Sequence[Sequence[int]]] | np.ndarray | None):\n                The palette of segmentation map. If None is given, random\n                palette will be generated. Default: None\n        \"\"\"", "\n", "if", "classes", "is", "None", ":", "\n", "            ", "self", ".", "custom_classes", "=", "False", "\n", "return", "self", ".", "CLASSES", ",", "self", ".", "PALETTE", "\n", "\n", "", "self", ".", "custom_classes", "=", "True", "\n", "if", "isinstance", "(", "classes", ",", "str", ")", ":", "\n", "# take it as a file path", "\n", "            ", "class_names", "=", "mmcv", ".", "list_from_file", "(", "classes", ")", "\n", "", "elif", "isinstance", "(", "classes", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "class_names", "=", "classes", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unsupported type {type(classes)} of classes.'", ")", "\n", "\n", "", "if", "self", ".", "CLASSES", ":", "\n", "            ", "if", "not", "set", "(", "classes", ")", ".", "issubset", "(", "self", ".", "CLASSES", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'classes is not a subset of CLASSES.'", ")", "\n", "\n", "# dictionary, its keys are the old label ids and its values", "\n", "# are the new label ids.", "\n", "# used for changing pixel labels in load_annotations.", "\n", "", "self", ".", "label_map", "=", "{", "}", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "CLASSES", ")", ":", "\n", "                ", "if", "c", "not", "in", "class_names", ":", "\n", "                    ", "self", ".", "label_map", "[", "i", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "                    ", "self", ".", "label_map", "[", "i", "]", "=", "classes", ".", "index", "(", "c", ")", "\n", "\n", "", "", "", "palette", "=", "self", ".", "get_palette_for_custom_classes", "(", "class_names", ",", "palette", ")", "\n", "\n", "return", "class_names", ",", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.get_palette_for_custom_classes": [[287, 305], ["sorted", "custom.CustomDataset.label_map.items", "type", "numpy.random.randint.append", "numpy.random.randint", "len"], "methods", ["None"], ["", "def", "get_palette_for_custom_classes", "(", "self", ",", "class_names", ",", "palette", "=", "None", ")", ":", "\n", "\n", "        ", "if", "self", ".", "label_map", "is", "not", "None", ":", "\n", "# return subset of palette", "\n", "            ", "palette", "=", "[", "]", "\n", "for", "old_id", ",", "new_id", "in", "sorted", "(", "\n", "self", ".", "label_map", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ":", "\n", "                ", "if", "new_id", "!=", "-", "1", ":", "\n", "                    ", "palette", ".", "append", "(", "self", ".", "PALETTE", "[", "old_id", "]", ")", "\n", "", "", "palette", "=", "type", "(", "self", ".", "PALETTE", ")", "(", "palette", ")", "\n", "\n", "", "elif", "palette", "is", "None", ":", "\n", "            ", "if", "self", ".", "PALETTE", "is", "None", ":", "\n", "                ", "palette", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "len", "(", "class_names", ")", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "palette", "=", "self", ".", "PALETTE", "\n", "\n", "", "", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.evaluate": [[306, 381], ["isinstance", "custom.CustomDataset.get_gt_seg_maps", "mmseg.core.eval_metrics", "range", "summary_table_data.append", "mmcv.utils.print_log", "terminaltables.AsciiTable", "mmcv.utils.print_log", "mmcv.utils.print_log", "terminaltables.AsciiTable", "mmcv.utils.print_log", "range", "mmcv.is_list_of", "set().issubset", "KeyError", "len", "len", "tuple", "numpy.round", "class_table_data.append", "numpy.round", "len", "set", "functools.reduce", "range", "os.remove", "os.remove", "os.remove", "os.remove", "set", "numpy.nanmean", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.datasets.custom.CustomDataset.get_gt_seg_maps", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.eval_metrics", "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.print_log", "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.print_log", "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.print_log", "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.print_log"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'mIoU'", ",", "\n", "logger", "=", "None", ",", "\n", "efficient_test", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Evaluate the dataset.\n\n        Args:\n            results (list): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated. 'mIoU' and\n                'mDice' are supported.\n            logger (logging.Logger | None | str): Logger used for printing\n                related information during evaluation. Default: None.\n\n        Returns:\n            dict[str, float]: Default metrics.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "            ", "metric", "=", "[", "metric", "]", "\n", "", "allowed_metrics", "=", "[", "'mIoU'", ",", "'mDice'", "]", "\n", "if", "not", "set", "(", "metric", ")", ".", "issubset", "(", "set", "(", "allowed_metrics", ")", ")", ":", "\n", "            ", "raise", "KeyError", "(", "'metric {} is not supported'", ".", "format", "(", "metric", ")", ")", "\n", "", "eval_results", "=", "{", "}", "\n", "gt_seg_maps", "=", "self", ".", "get_gt_seg_maps", "(", "efficient_test", ")", "\n", "if", "self", ".", "CLASSES", "is", "None", ":", "\n", "            ", "num_classes", "=", "len", "(", "\n", "reduce", "(", "np", ".", "union1d", ",", "[", "np", ".", "unique", "(", "_", ")", "for", "_", "in", "gt_seg_maps", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "num_classes", "=", "len", "(", "self", ".", "CLASSES", ")", "\n", "", "ret_metrics", "=", "eval_metrics", "(", "\n", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "self", ".", "ignore_index", ",", "\n", "metric", ",", "\n", "label_map", "=", "self", ".", "label_map", ",", "\n", "reduce_zero_label", "=", "self", ".", "reduce_zero_label", ")", "\n", "class_table_data", "=", "[", "[", "'Class'", "]", "+", "[", "m", "[", "1", ":", "]", "for", "m", "in", "metric", "]", "+", "[", "'Acc'", "]", "]", "\n", "if", "self", ".", "CLASSES", "is", "None", ":", "\n", "            ", "class_names", "=", "tuple", "(", "range", "(", "num_classes", ")", ")", "\n", "", "else", ":", "\n", "            ", "class_names", "=", "self", ".", "CLASSES", "\n", "", "ret_metrics_round", "=", "[", "\n", "np", ".", "round", "(", "ret_metric", "*", "100", ",", "2", ")", "for", "ret_metric", "in", "ret_metrics", "\n", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "class_table_data", ".", "append", "(", "[", "class_names", "[", "i", "]", "]", "+", "\n", "[", "m", "[", "i", "]", "for", "m", "in", "ret_metrics_round", "[", "2", ":", "]", "]", "+", "\n", "[", "ret_metrics_round", "[", "1", "]", "[", "i", "]", "]", ")", "\n", "", "summary_table_data", "=", "[", "[", "'Scope'", "]", "+", "\n", "[", "'m'", "+", "head", "\n", "for", "head", "in", "class_table_data", "[", "0", "]", "[", "1", ":", "]", "]", "+", "[", "'aAcc'", "]", "]", "\n", "ret_metrics_mean", "=", "[", "\n", "np", ".", "round", "(", "np", ".", "nanmean", "(", "ret_metric", ")", "*", "100", ",", "2", ")", "\n", "for", "ret_metric", "in", "ret_metrics", "\n", "]", "\n", "summary_table_data", ".", "append", "(", "[", "'global'", "]", "+", "ret_metrics_mean", "[", "2", ":", "]", "+", "\n", "[", "ret_metrics_mean", "[", "1", "]", "]", "+", "\n", "[", "ret_metrics_mean", "[", "0", "]", "]", ")", "\n", "print_log", "(", "'per class results:'", ",", "logger", ")", "\n", "table", "=", "AsciiTable", "(", "class_table_data", ")", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "print_log", "(", "'Summary:'", ",", "logger", ")", "\n", "table", "=", "AsciiTable", "(", "summary_table_data", ")", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "summary_table_data", "[", "0", "]", ")", ")", ":", "\n", "            ", "eval_results", "[", "summary_table_data", "[", "0", "]", "\n", "[", "i", "]", "]", "=", "summary_table_data", "[", "1", "]", "[", "i", "]", "/", "100.0", "\n", "", "if", "mmcv", ".", "is_list_of", "(", "results", ",", "str", ")", ":", "\n", "            ", "for", "file_name", "in", "results", ":", "\n", "                ", "os", ".", "remove", "(", "file_name", ")", "\n", "", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.ade.ADE20KDataset.__init__": [[79, 85], ["custom.CustomDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ADE20KDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "reduce_zero_label", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cocostuff.CocoStuff.__init__": [[200, 205], ["custom.CustomDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CocoStuff", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.drive.DRIVEDataset.__init__": [[21, 28], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DRIVEDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'_manual1.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.__init__": [[32, 37], ["custom.CustomDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CityscapesDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'_leftImg8bit.png'", ",", "\n", "seg_map_suffix", "=", "'_gtFine_labelTrainIds.png'", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset._convert_to_label_id": [[38, 49], ["isinstance", "numpy.load.copy", "CSLabels.trainId2label.items", "numpy.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_convert_to_label_id", "(", "result", ")", ":", "\n", "        ", "\"\"\"Convert trainId to id for cityscapes.\"\"\"", "\n", "if", "isinstance", "(", "result", ",", "str", ")", ":", "\n", "            ", "result", "=", "np", ".", "load", "(", "result", ")", "\n", "", "import", "cityscapesscripts", ".", "helpers", ".", "labels", "as", "CSLabels", "\n", "result_copy", "=", "result", ".", "copy", "(", ")", "\n", "for", "trainId", ",", "label", "in", "CSLabels", ".", "trainId2label", ".", "items", "(", ")", ":", "\n", "            ", "result_copy", "[", "result", "==", "trainId", "]", "=", "label", ".", "id", "\n", "\n", "", "return", "result_copy", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.results2img": [[50, 90], ["mmcv.mkdir_or_exist", "mmcv.ProgressBar", "range", "len", "len", "os.join", "PIL.Image.fromarray().convert", "numpy.zeros", "CSLabels.id2label.items", "PIL.Image.fromarray().convert.putpalette", "PIL.Image.fromarray().convert.save", "result_files.append", "mmcv.ProgressBar.update", "cityscapes.CityscapesDataset._convert_to_label_id", "os.splitext", "os.basename", "PIL.Image.fromarray", "len", "cityscapes.CityscapesDataset.astype"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.convert", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset._convert_to_label_id"], ["", "def", "results2img", "(", "self", ",", "results", ",", "imgfile_prefix", ",", "to_label_id", ")", ":", "\n", "        ", "\"\"\"Write the segmentation results to images.\n\n        Args:\n            results (list[list | tuple | ndarray]): Testing results of the\n                dataset.\n            imgfile_prefix (str): The filename prefix of the png files.\n                If the prefix is \"somepath/xxx\",\n                the png files will be named \"somepath/xxx.png\".\n            to_label_id (bool): whether convert output to label_id for\n                submission\n\n        Returns:\n            list[str: str]: result txt files which contains corresponding\n            semantic segmentation images.\n        \"\"\"", "\n", "mmcv", ".", "mkdir_or_exist", "(", "imgfile_prefix", ")", "\n", "result_files", "=", "[", "]", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "self", ")", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "result", "=", "results", "[", "idx", "]", "\n", "if", "to_label_id", ":", "\n", "                ", "result", "=", "self", ".", "_convert_to_label_id", "(", "result", ")", "\n", "", "filename", "=", "self", ".", "img_infos", "[", "idx", "]", "[", "'filename'", "]", "\n", "basename", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "filename", ")", ")", "[", "0", "]", "\n", "\n", "png_filename", "=", "osp", ".", "join", "(", "imgfile_prefix", ",", "f'{basename}.png'", ")", "\n", "\n", "output", "=", "Image", ".", "fromarray", "(", "result", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "import", "cityscapesscripts", ".", "helpers", ".", "labels", "as", "CSLabels", "\n", "palette", "=", "np", ".", "zeros", "(", "(", "len", "(", "CSLabels", ".", "id2label", ")", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "label_id", ",", "label", "in", "CSLabels", ".", "id2label", ".", "items", "(", ")", ":", "\n", "                ", "palette", "[", "label_id", "]", "=", "label", ".", "color", "\n", "\n", "", "output", ".", "putpalette", "(", "palette", ")", "\n", "output", ".", "save", "(", "png_filename", ")", "\n", "result_files", ".", "append", "(", "png_filename", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "\n", "", "return", "result_files", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.format_results": [[91, 123], ["isinstance", "cityscapes.CityscapesDataset.results2img", "len", "len", "tempfile.TemporaryDirectory", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.results2img"], ["", "def", "format_results", "(", "self", ",", "results", ",", "imgfile_prefix", "=", "None", ",", "to_label_id", "=", "True", ")", ":", "\n", "        ", "\"\"\"Format the results into dir (standard format for Cityscapes\n        evaluation).\n\n        Args:\n            results (list): Testing results of the dataset.\n            imgfile_prefix (str | None): The prefix of images files. It\n                includes the file path and the prefix of filename, e.g.,\n                \"a/b/prefix\". If not specified, a temp file will be created.\n                Default: None.\n            to_label_id (bool): whether convert output to label_id for\n                submission. Default: False\n\n        Returns:\n            tuple: (result_files, tmp_dir), result_files is a list containing\n                the image paths, tmp_dir is the temporal directory created\n                for saving json/png files when img_prefix is not specified.\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "results", ",", "list", ")", ",", "'results must be a list'", "\n", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "'The length of results is not equal to the dataset len: '", "\n", "f'{len(results)} != {len(self)}'", ")", "\n", "\n", "if", "imgfile_prefix", "is", "None", ":", "\n", "            ", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "imgfile_prefix", "=", "tmp_dir", ".", "name", "\n", "", "else", ":", "\n", "            ", "tmp_dir", "=", "None", "\n", "", "result_files", "=", "self", ".", "results2img", "(", "results", ",", "imgfile_prefix", ",", "to_label_id", ")", "\n", "\n", "return", "result_files", ",", "tmp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.evaluate": [[124, 163], ["dict", "isinstance", "metric.copy", "dict.update", "metrics.remove", "len", "dict.update", "cityscapes.CityscapesDataset._evaluate_cityscapes", "super().evaluate"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset._evaluate_cityscapes", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'mIoU'", ",", "\n", "logger", "=", "None", ",", "\n", "imgfile_prefix", "=", "None", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "        ", "\"\"\"Evaluation in Cityscapes/default protocol.\n\n        Args:\n            results (list): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated.\n            logger (logging.Logger | None | str): Logger used for printing\n                related information during evaluation. Default: None.\n            imgfile_prefix (str | None): The prefix of output image file,\n                for cityscapes evaluation only. It includes the file path and\n                the prefix of filename, e.g., \"a/b/prefix\".\n                If results are evaluated with cityscapes protocol, it would be\n                the prefix of output png files. The output files would be\n                png images under folder \"a/b/prefix/xxx.png\", where \"xxx\" is\n                the image name of cityscapes. If not specified, a temp file\n                will be created for evaluation.\n                Default: None.\n\n        Returns:\n            dict[str, float]: Cityscapes/default metrics.\n        \"\"\"", "\n", "\n", "eval_results", "=", "dict", "(", ")", "\n", "metrics", "=", "metric", ".", "copy", "(", ")", "if", "isinstance", "(", "metric", ",", "list", ")", "else", "[", "metric", "]", "\n", "if", "'cityscapes'", "in", "metrics", ":", "\n", "            ", "eval_results", ".", "update", "(", "\n", "self", ".", "_evaluate_cityscapes", "(", "results", ",", "logger", ",", "imgfile_prefix", ")", ")", "\n", "metrics", ".", "remove", "(", "'cityscapes'", ")", "\n", "", "if", "len", "(", "metrics", ")", ">", "0", ":", "\n", "            ", "eval_results", ".", "update", "(", "\n", "super", "(", "CityscapesDataset", ",", "\n", "self", ")", ".", "evaluate", "(", "results", ",", "metrics", ",", "logger", ",", "efficient_test", ")", ")", "\n", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset._evaluate_cityscapes": [[164, 218], ["mmcv.utils.print_log", "cityscapes.CityscapesDataset.format_results", "dict", "mmcv.utils.print_log", "os.abspath", "mmcv.scandir", "dict.update", "seg_map_list.append", "pred_list.append", "CSEval.evaluateImgLists", "tmp_dir.cleanup", "ImportError", "os.join", "CSEval.getPrediction"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.print_log", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.print_log", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["", "def", "_evaluate_cityscapes", "(", "self", ",", "results", ",", "logger", ",", "imgfile_prefix", ")", ":", "\n", "        ", "\"\"\"Evaluation in Cityscapes protocol.\n\n        Args:\n            results (list): Testing results of the dataset.\n            logger (logging.Logger | str | None): Logger used for printing\n                related information during evaluation. Default: None.\n            imgfile_prefix (str | None): The prefix of output image file\n\n        Returns:\n            dict[str: float]: Cityscapes evaluation results.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "import", "cityscapesscripts", ".", "evaluation", ".", "evalPixelLevelSemanticLabeling", "as", "CSEval", "# noqa", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please run \"pip install cityscapesscripts\" to '", "\n", "'install cityscapesscripts first.'", ")", "\n", "", "msg", "=", "'Evaluating in Cityscapes style'", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "msg", "=", "'\\n'", "+", "msg", "\n", "", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "\n", "result_files", ",", "tmp_dir", "=", "self", ".", "format_results", "(", "results", ",", "imgfile_prefix", ")", "\n", "\n", "if", "tmp_dir", "is", "None", ":", "\n", "            ", "result_dir", "=", "imgfile_prefix", "\n", "", "else", ":", "\n", "            ", "result_dir", "=", "tmp_dir", ".", "name", "\n", "\n", "", "eval_results", "=", "dict", "(", ")", "\n", "print_log", "(", "f'Evaluating results under {result_dir} ...'", ",", "logger", "=", "logger", ")", "\n", "\n", "CSEval", ".", "args", ".", "evalInstLevelScore", "=", "True", "\n", "CSEval", ".", "args", ".", "predictionPath", "=", "osp", ".", "abspath", "(", "result_dir", ")", "\n", "CSEval", ".", "args", ".", "evalPixelAccuracy", "=", "True", "\n", "CSEval", ".", "args", ".", "JSONOutput", "=", "False", "\n", "\n", "seg_map_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "\n", "# when evaluating with official cityscapesscripts,", "\n", "# **_gtFine_labelIds.png is used", "\n", "for", "seg_map", "in", "mmcv", ".", "scandir", "(", "\n", "self", ".", "ann_dir", ",", "'gtFine_labelIds.png'", ",", "recursive", "=", "True", ")", ":", "\n", "            ", "seg_map_list", ".", "append", "(", "osp", ".", "join", "(", "self", ".", "ann_dir", ",", "seg_map", ")", ")", "\n", "pred_list", ".", "append", "(", "CSEval", ".", "getPrediction", "(", "CSEval", ".", "args", ",", "seg_map", ")", ")", "\n", "\n", "", "eval_results", ".", "update", "(", "\n", "CSEval", ".", "evaluateImgLists", "(", "pred_list", ",", "seg_map_list", ",", "CSEval", ".", "args", ")", ")", "\n", "\n", "if", "tmp_dir", "is", "not", "None", ":", "\n", "            ", "tmp_dir", ".", "cleanup", "(", ")", "\n", "\n", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.mapillary.MapillaryDataset.__init__": [[41, 47], ["custom.CustomDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MapillaryDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder._concat_dataset": [[25, 59], ["cfg.get", "cfg.get", "max", "range", "ConcatDataset", "isinstance", "len", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "datasets.append", "isinstance", "len", "isinstance", "len", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset"], ["def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build :obj:`ConcatDataset by.\"\"\"", "\n", "from", ".", "dataset_wrappers", "import", "ConcatDataset", "\n", "img_dir", "=", "cfg", "[", "'img_dir'", "]", "\n", "ann_dir", "=", "cfg", ".", "get", "(", "'ann_dir'", ",", "None", ")", "\n", "split", "=", "cfg", ".", "get", "(", "'split'", ",", "None", ")", "\n", "num_img_dir", "=", "len", "(", "img_dir", ")", "if", "isinstance", "(", "img_dir", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "if", "ann_dir", "is", "not", "None", ":", "\n", "        ", "num_ann_dir", "=", "len", "(", "ann_dir", ")", "if", "isinstance", "(", "ann_dir", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "", "else", ":", "\n", "        ", "num_ann_dir", "=", "0", "\n", "", "if", "split", "is", "not", "None", ":", "\n", "        ", "num_split", "=", "len", "(", "split", ")", "if", "isinstance", "(", "split", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "", "else", ":", "\n", "        ", "num_split", "=", "0", "\n", "", "if", "num_img_dir", ">", "1", ":", "\n", "        ", "assert", "num_img_dir", "==", "num_ann_dir", "or", "num_ann_dir", "==", "0", "\n", "assert", "num_img_dir", "==", "num_split", "or", "num_split", "==", "0", "\n", "", "else", ":", "\n", "        ", "assert", "num_split", "==", "num_ann_dir", "or", "num_ann_dir", "<=", "1", "\n", "", "num_dset", "=", "max", "(", "num_split", ",", "num_img_dir", ")", "\n", "\n", "datasets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "if", "isinstance", "(", "img_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'img_dir'", "]", "=", "img_dir", "[", "i", "]", "\n", "", "if", "isinstance", "(", "ann_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'ann_dir'", "]", "=", "ann_dir", "[", "i", "]", "\n", "", "if", "isinstance", "(", "split", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'split'", "]", "=", "split", "[", "i", "]", "\n", "", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset": [[61, 76], ["isinstance", "ConcatDataset", "RepeatDataset", "builder.build_dataset", "builder.build_dataset", "isinstance", "isinstance", "builder._concat_dataset", "mmcv.utils.build_from_cfg", "cfg.get", "cfg.get"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder._concat_dataset"], ["", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build datasets.\"\"\"", "\n", "from", ".", "dataset_wrappers", "import", "ConcatDataset", ",", "RepeatDataset", "\n", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n", "", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n", "build_dataset", "(", "cfg", "[", "'dataset'", "]", ",", "default_args", ")", ",", "cfg", "[", "'times'", "]", ")", "\n", "", "elif", "isinstance", "(", "cfg", ".", "get", "(", "'img_dir'", ")", ",", "(", "list", ",", "tuple", ")", ")", "or", "isinstance", "(", "\n", "cfg", ".", "get", "(", "'split'", ",", "None", ")", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "_concat_dataset", "(", "cfg", ",", "default_args", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "build_from_cfg", "(", "cfg", ",", "DATASETS", ",", "default_args", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataloader": [[78, 153], ["mmcv.runner.get_dist_info", "dataloader", "torch.utils.data.DistributedSampler", "functools.partial", "functools.partial"], "function", ["None"], ["", "def", "build_dataloader", "(", "dataset", ",", "\n", "samples_per_gpu", ",", "\n", "workers_per_gpu", ",", "\n", "num_gpus", "=", "1", ",", "\n", "dist", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "None", ",", "\n", "drop_last", "=", "False", ",", "\n", "pin_memory", "=", "True", ",", "\n", "dataloader_type", "=", "'PoolDataLoader'", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Build PyTorch DataLoader.\n\n    In distributed training, each GPU/process has a dataloader.\n    In non-distributed training, there is only one dataloader for all GPUs.\n\n    Args:\n        dataset (Dataset): A PyTorch dataset.\n        samples_per_gpu (int): Number of training samples on each GPU, i.e.,\n            batch size of each GPU.\n        workers_per_gpu (int): How many subprocesses to use for data loading\n            for each GPU.\n        num_gpus (int): Number of GPUs. Only used in non-distributed training.\n        dist (bool): Distributed training/test or not. Default: True.\n        shuffle (bool): Whether to shuffle the data at every epoch.\n            Default: True.\n        seed (int | None): Seed to be used. Default: None.\n        drop_last (bool): Whether to drop the last incomplete batch in epoch.\n            Default: False\n        pin_memory (bool): Whether to use pin_memory in DataLoader.\n            Default: True\n        dataloader_type (str): Type of dataloader. Default: 'PoolDataLoader'\n        kwargs: any keyword argument to be used to initialize DataLoader\n\n    Returns:\n        DataLoader: A PyTorch dataloader.\n    \"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "dist", ":", "\n", "        ", "sampler", "=", "DistributedSampler", "(", "\n", "dataset", ",", "world_size", ",", "rank", ",", "shuffle", "=", "shuffle", ")", "\n", "shuffle", "=", "False", "\n", "batch_size", "=", "samples_per_gpu", "\n", "num_workers", "=", "workers_per_gpu", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "None", "\n", "batch_size", "=", "num_gpus", "*", "samples_per_gpu", "\n", "num_workers", "=", "num_gpus", "*", "workers_per_gpu", "\n", "\n", "", "init_fn", "=", "partial", "(", "\n", "worker_init_fn", ",", "num_workers", "=", "num_workers", ",", "rank", "=", "rank", ",", "\n", "seed", "=", "seed", ")", "if", "seed", "is", "not", "None", "else", "None", "\n", "\n", "assert", "dataloader_type", "in", "(", "\n", "'DataLoader'", ",", "\n", "'PoolDataLoader'", ")", ",", "f'unsupported dataloader {dataloader_type}'", "\n", "\n", "if", "dataloader_type", "==", "'PoolDataLoader'", ":", "\n", "        ", "dataloader", "=", "PoolDataLoader", "\n", "", "elif", "dataloader_type", "==", "'DataLoader'", ":", "\n", "        ", "dataloader", "=", "DataLoader", "\n", "\n", "", "data_loader", "=", "dataloader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "partial", "(", "collate", ",", "samples_per_gpu", "=", "samples_per_gpu", ")", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "worker_init_fn", "=", "init_fn", ",", "\n", "drop_last", "=", "drop_last", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.worker_init_fn": [[155, 170], ["numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "worker_init_fn", "(", "worker_id", ",", "num_workers", ",", "rank", ",", "seed", ")", ":", "\n", "    ", "\"\"\"Worker init func for dataloader.\n\n    The seed of each worker equals to num_worker * rank + worker_id + user_seed\n\n    Args:\n        worker_id (int): Worker id.\n        num_workers (int): Number of workers.\n        rank (int): The rank of current process.\n        seed (int): The random seed to use.\n    \"\"\"", "\n", "\n", "worker_seed", "=", "num_workers", "*", "rank", "+", "worker_id", "+", "seed", "\n", "np", ".", "random", ".", "seed", "(", "worker_seed", ")", "\n", "random", ".", "seed", "(", "worker_seed", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.dataset_wrappers.ConcatDataset.__init__": [[17, 21], ["torch.utils.data.dataset.ConcatDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "self", ".", "PALETTE", "=", "datasets", "[", "0", "]", ".", "PALETTE", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.dataset_wrappers.RepeatDataset.__init__": [[37, 43], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "self", ".", "PALETTE", "=", "dataset", ".", "PALETTE", "\n", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[44, 47], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get item from original dataset.\"\"\"", "\n", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.dataset_wrappers.RepeatDataset.__len__": [[48, 51], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"The length is multiplied by ``times``\"\"\"", "\n", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.pascal_context.PascalContextDataset.__init__": [[47, 55], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PascalContextDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "split", "=", "split", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "and", "self", ".", "split", "is", "not", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.hrf.HRFDataset.__init__": [[21, 28], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "HRFDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.stare.STAREDataset.__init__": [[21, 28], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "STAREDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.png'", ",", "\n", "seg_map_suffix", "=", "'.ah.png'", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.datasets.voc.PascalVOCDataset.__init__": [[26, 30], ["custom.CustomDataset.__init__", "os.exists"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PascalVOCDataset", ",", "self", ")", ".", "__init__", "(", "\n", "img_suffix", "=", "'.jpg'", ",", "seg_map_suffix", "=", "'.png'", ",", "split", "=", "split", ",", "**", "kwargs", ")", "\n", "assert", "osp", ".", "exists", "(", "self", ".", "img_dir", ")", "and", "self", ".", "split", "is", "not", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize.__init__": [[14, 41], ["isinstance", "mmcv.is_list_of", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "img_scale", "=", "None", ",", "\n", "multiscale_mode", "=", "'range'", ",", "\n", "ratio_range", "=", "None", ",", "\n", "keep_ratio", "=", "True", ",", "\n", "size_divisor", "=", "32", ")", ":", "\n", "        ", "if", "img_scale", "is", "None", ":", "\n", "            ", "self", ".", "img_scale", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img_scale", ",", "list", ")", ":", "\n", "                ", "self", ".", "img_scale", "=", "img_scale", "\n", "", "else", ":", "\n", "                ", "self", ".", "img_scale", "=", "[", "img_scale", "]", "\n", "", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "\n", "\n", "", "if", "ratio_range", "is", "not", "None", ":", "\n", "# mode 1: given img_scale=None and a range of image ratio", "\n", "# mode 2: given a scale and a range of image ratio", "\n", "            ", "assert", "self", ".", "img_scale", "is", "None", "or", "len", "(", "self", ".", "img_scale", ")", "==", "1", "\n", "", "else", ":", "\n", "# mode 3 and 4: given multiple scales or a range of scales", "\n", "            ", "assert", "multiscale_mode", "in", "[", "'value'", ",", "'range'", "]", "\n", "\n", "", "self", ".", "multiscale_mode", "=", "multiscale_mode", "\n", "self", ".", "ratio_range", "=", "ratio_range", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize.random_select": [[42, 59], ["mmcv.is_list_of", "numpy.random.randint", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_select", "(", "img_scales", ")", ":", "\n", "        ", "\"\"\"Randomly select an img_scale from given candidates.\n\n        Args:\n            img_scales (list[tuple]): Images scales for selection.\n\n        Returns:\n            (tuple, int): Returns a tuple ``(img_scale, scale_dix)``,\n                where ``img_scale`` is the selected image scale and\n                ``scale_idx`` is the selected index in the given candidates.\n        \"\"\"", "\n", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "\n", "scale_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "img_scales", ")", ")", "\n", "img_scale", "=", "img_scales", "[", "scale_idx", "]", "\n", "return", "img_scale", ",", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize.random_sample": [[60, 86], ["numpy.random.randint", "numpy.random.randint", "mmcv.is_list_of", "max", "min", "min", "min", "len", "max", "max"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "@", "staticmethod", "\n", "def", "random_sample", "(", "img_scales", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale when ``multiscale_mode=='range'``.\n\n        Args:\n            img_scales (list[tuple]): Images scale range for sampling.\n                There must be two tuples in img_scales, which specify the lower\n                and uper bound of image scales.\n\n        Returns:\n            (tuple, None): Returns a tuple ``(img_scale, None)``, where\n                ``img_scale`` is sampled scale and None is just a placeholder\n                to be consistent with :func:`random_select`.\n        \"\"\"", "\n", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "and", "len", "(", "img_scales", ")", "==", "2", "\n", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "return", "img_scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize.random_sample_ratio": [[87, 113], ["isinstance", "int", "int", "len", "numpy.random.random_sample"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample"], ["", "@", "staticmethod", "\n", "def", "random_sample_ratio", "(", "img_scale", ",", "ratio_range", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale when ``ratio_range`` is specified.\n\n        A ratio will be randomly sampled from the range specified by\n        ``ratio_range``. Then it would be multiplied with ``img_scale`` to\n        generate sampled scale.\n\n        Args:\n            img_scale (tuple): Images scale base to multiply with ratio.\n            ratio_range (tuple[float]): The minimum and maximum ratio to scale\n                the ``img_scale``.\n\n        Returns:\n            (tuple, None): Returns a tuple ``(scale, None)``, where\n                ``scale`` is sampled ratio multiplied with ``img_scale`` and\n                None is just a placeholder to be consistent with\n                :func:`random_select`.\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "img_scale", ",", "tuple", ")", "and", "len", "(", "img_scale", ")", "==", "2", "\n", "min_ratio", ",", "max_ratio", "=", "ratio_range", "\n", "assert", "min_ratio", "<=", "max_ratio", "\n", "ratio", "=", "np", ".", "random", ".", "random_sample", "(", ")", "*", "(", "max_ratio", "-", "min_ratio", ")", "+", "min_ratio", "\n", "scale", "=", "int", "(", "img_scale", "[", "0", "]", "*", "ratio", ")", ",", "int", "(", "img_scale", "[", "1", "]", "*", "ratio", ")", "\n", "return", "scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize._random_scale": [[114, 151], ["transforms.AlignedResize.random_sample_ratio", "transforms.AlignedResize.random_sample_ratio", "len", "transforms.AlignedResize.random_sample", "transforms.AlignedResize.random_select"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample_ratio", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample_ratio", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_select"], ["", "def", "_random_scale", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale according to ``ratio_range`` and\n        ``multiscale_mode``.\n\n        If ``ratio_range`` is specified, a ratio will be sampled and be\n        multiplied with ``img_scale``.\n        If multiple scales are specified by ``img_scale``, a scale will be\n        sampled according to ``multiscale_mode``.\n        Otherwise, single scale will be used.\n\n        Args:\n            results (dict): Result dict from :obj:`dataset`.\n\n        Returns:\n            dict: Two new keys 'scale` and 'scale_idx` are added into\n                ``results``, which would be used by subsequent pipelines.\n        \"\"\"", "\n", "\n", "if", "self", ".", "ratio_range", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "img_scale", "is", "None", ":", "\n", "                ", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "(", "w", ",", "h", ")", ",", "\n", "self", ".", "ratio_range", ")", "\n", "", "else", ":", "\n", "                ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "\n", "self", ".", "img_scale", "[", "0", "]", ",", "self", ".", "ratio_range", ")", "\n", "", "", "elif", "len", "(", "self", ".", "img_scale", ")", "==", "1", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "img_scale", "[", "0", "]", ",", "0", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'range'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample", "(", "self", ".", "img_scale", ")", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'value'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_select", "(", "self", ".", "img_scale", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "results", "[", "'scale'", "]", "=", "scale", "\n", "results", "[", "'scale_idx'", "]", "=", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize._align": [[152, 160], ["int", "int", "mmcv.imresize", "mmcv.imresize", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["", "def", "_align", "(", "self", ",", "img", ",", "size_divisor", ",", "interpolation", "=", "None", ")", ":", "\n", "        ", "align_h", "=", "int", "(", "np", ".", "ceil", "(", "img", ".", "shape", "[", "0", "]", "/", "size_divisor", ")", ")", "*", "size_divisor", "\n", "align_w", "=", "int", "(", "np", ".", "ceil", "(", "img", ".", "shape", "[", "1", "]", "/", "size_divisor", ")", ")", "*", "size_divisor", "\n", "if", "interpolation", "==", "None", ":", "\n", "            ", "img", "=", "mmcv", ".", "imresize", "(", "img", ",", "(", "align_w", ",", "align_h", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "mmcv", ".", "imresize", "(", "img", ",", "(", "align_w", ",", "align_h", ")", ",", "interpolation", "=", "interpolation", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize._resize_img": [[161, 189], ["numpy.array", "mmcv.imrescale", "transforms.AlignedResize._align", "mmcv.imresize", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize._align"], ["", "def", "_resize_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Resize images with ``results['scale']``.\"\"\"", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "#### align ####", "\n", "img", "=", "self", ".", "_align", "(", "img", ",", "self", ".", "size_divisor", ")", "\n", "# the w_scale and h_scale has minor difference", "\n", "# a real fix should be done in the mmcv.imrescale in the future", "\n", "new_h", ",", "new_w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "w_scale", "=", "new_w", "/", "w", "\n", "h_scale", "=", "new_h", "/", "h", "\n", "", "else", ":", "\n", "            ", "img", ",", "w_scale", ",", "h_scale", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "\n", "h", ",", "w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "assert", "int", "(", "np", ".", "ceil", "(", "h", "/", "self", ".", "size_divisor", ")", ")", "*", "self", ".", "size_divisor", "==", "h", "and", "int", "(", "np", ".", "ceil", "(", "w", "/", "self", ".", "size_divisor", ")", ")", "*", "self", ".", "size_divisor", "==", "w", ",", "\"img size not align. h:{} w:{}\"", ".", "format", "(", "h", ",", "w", ")", "\n", "", "scale_factor", "=", "np", ".", "array", "(", "[", "w_scale", ",", "h_scale", ",", "w_scale", ",", "h_scale", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "# in case that there is no padding", "\n", "results", "[", "'scale_factor'", "]", "=", "scale_factor", "\n", "results", "[", "'keep_ratio'", "]", "=", "self", ".", "keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize._resize_seg": [[190, 205], ["results.get", "mmcv.imrescale", "transforms.AlignedResize._align", "mmcv.imresize", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize._align"], ["", "def", "_resize_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Resize semantic segmentation map with ``results['scale']``.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "keep_ratio", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "gt_seg", "=", "self", ".", "_align", "(", "gt_seg", ",", "self", ".", "size_divisor", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "h", ",", "w", "=", "gt_seg", ".", "shape", "[", ":", "2", "]", "\n", "assert", "int", "(", "np", ".", "ceil", "(", "h", "/", "self", ".", "size_divisor", ")", ")", "*", "self", ".", "size_divisor", "==", "h", "and", "int", "(", "np", ".", "ceil", "(", "w", "/", "self", ".", "size_divisor", ")", ")", "*", "self", ".", "size_divisor", "==", "w", ",", "\"gt_seg size not align. h:{} w:{}\"", ".", "format", "(", "h", ",", "w", ")", "\n", "", "results", "[", "key", "]", "=", "gt_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize.__call__": [[206, 223], ["transforms.AlignedResize._resize_img", "transforms.AlignedResize._resize_seg", "transforms.AlignedResize._random_scale"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._resize_img", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._resize_seg", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._random_scale"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to resize images, bounding boxes, masks, semantic\n        segmentation map.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Resized results, 'img_shape', 'pad_shape', 'scale_factor',\n                'keep_ratio' keys are added into result dict.\n        \"\"\"", "\n", "\n", "if", "'scale'", "not", "in", "results", ":", "\n", "            ", "self", ".", "_random_scale", "(", "results", ")", "\n", "", "self", ".", "_resize_img", "(", "results", ")", "\n", "self", ".", "_resize_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AlignedResize.__repr__": [[224, 231], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "f'(img_scale={self.img_scale}, '", "\n", "f'multiscale_mode={self.multiscale_mode}, '", "\n", "f'ratio_range={self.ratio_range}, '", "\n", "f'keep_ratio={self.keep_ratio})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.__init__": [[265, 290], ["isinstance", "mmcv.is_list_of", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "img_scale", "=", "None", ",", "\n", "multiscale_mode", "=", "'range'", ",", "\n", "ratio_range", "=", "None", ",", "\n", "keep_ratio", "=", "True", ")", ":", "\n", "        ", "if", "img_scale", "is", "None", ":", "\n", "            ", "self", ".", "img_scale", "=", "None", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img_scale", ",", "list", ")", ":", "\n", "                ", "self", ".", "img_scale", "=", "img_scale", "\n", "", "else", ":", "\n", "                ", "self", ".", "img_scale", "=", "[", "img_scale", "]", "\n", "", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "\n", "\n", "", "if", "ratio_range", "is", "not", "None", ":", "\n", "# mode 1: given img_scale=None and a range of image ratio", "\n", "# mode 2: given a scale and a range of image ratio", "\n", "            ", "assert", "self", ".", "img_scale", "is", "None", "or", "len", "(", "self", ".", "img_scale", ")", "==", "1", "\n", "", "else", ":", "\n", "# mode 3 and 4: given multiple scales or a range of scales", "\n", "            ", "assert", "multiscale_mode", "in", "[", "'value'", ",", "'range'", "]", "\n", "\n", "", "self", ".", "multiscale_mode", "=", "multiscale_mode", "\n", "self", ".", "ratio_range", "=", "ratio_range", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_select": [[291, 308], ["mmcv.is_list_of", "numpy.random.randint", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "random_select", "(", "img_scales", ")", ":", "\n", "        ", "\"\"\"Randomly select an img_scale from given candidates.\n\n        Args:\n            img_scales (list[tuple]): Images scales for selection.\n\n        Returns:\n            (tuple, int): Returns a tuple ``(img_scale, scale_dix)``,\n                where ``img_scale`` is the selected image scale and\n                ``scale_idx`` is the selected index in the given candidates.\n        \"\"\"", "\n", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "\n", "scale_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "img_scales", ")", ")", "\n", "img_scale", "=", "img_scales", "[", "scale_idx", "]", "\n", "return", "img_scale", ",", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample": [[309, 335], ["numpy.random.randint", "numpy.random.randint", "mmcv.is_list_of", "max", "min", "min", "min", "len", "max", "max"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "@", "staticmethod", "\n", "def", "random_sample", "(", "img_scales", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale when ``multiscale_mode=='range'``.\n\n        Args:\n            img_scales (list[tuple]): Images scale range for sampling.\n                There must be two tuples in img_scales, which specify the lower\n                and uper bound of image scales.\n\n        Returns:\n            (tuple, None): Returns a tuple ``(img_scale, None)``, where\n                ``img_scale`` is sampled scale and None is just a placeholder\n                to be consistent with :func:`random_select`.\n        \"\"\"", "\n", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_scales", ",", "tuple", ")", "and", "len", "(", "img_scales", ")", "==", "2", "\n", "img_scale_long", "=", "[", "max", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "img_scale_short", "=", "[", "min", "(", "s", ")", "for", "s", "in", "img_scales", "]", "\n", "long_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_long", ")", ",", "\n", "max", "(", "img_scale_long", ")", "+", "1", ")", "\n", "short_edge", "=", "np", ".", "random", ".", "randint", "(", "\n", "min", "(", "img_scale_short", ")", ",", "\n", "max", "(", "img_scale_short", ")", "+", "1", ")", "\n", "img_scale", "=", "(", "long_edge", ",", "short_edge", ")", "\n", "return", "img_scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample_ratio": [[336, 362], ["isinstance", "int", "int", "len", "numpy.random.random_sample"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample"], ["", "@", "staticmethod", "\n", "def", "random_sample_ratio", "(", "img_scale", ",", "ratio_range", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale when ``ratio_range`` is specified.\n\n        A ratio will be randomly sampled from the range specified by\n        ``ratio_range``. Then it would be multiplied with ``img_scale`` to\n        generate sampled scale.\n\n        Args:\n            img_scale (tuple): Images scale base to multiply with ratio.\n            ratio_range (tuple[float]): The minimum and maximum ratio to scale\n                the ``img_scale``.\n\n        Returns:\n            (tuple, None): Returns a tuple ``(scale, None)``, where\n                ``scale`` is sampled ratio multiplied with ``img_scale`` and\n                None is just a placeholder to be consistent with\n                :func:`random_select`.\n        \"\"\"", "\n", "\n", "assert", "isinstance", "(", "img_scale", ",", "tuple", ")", "and", "len", "(", "img_scale", ")", "==", "2", "\n", "min_ratio", ",", "max_ratio", "=", "ratio_range", "\n", "assert", "min_ratio", "<=", "max_ratio", "\n", "ratio", "=", "np", ".", "random", ".", "random_sample", "(", ")", "*", "(", "max_ratio", "-", "min_ratio", ")", "+", "min_ratio", "\n", "scale", "=", "int", "(", "img_scale", "[", "0", "]", "*", "ratio", ")", ",", "int", "(", "img_scale", "[", "1", "]", "*", "ratio", ")", "\n", "return", "scale", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._random_scale": [[363, 400], ["transforms.Resize.random_sample_ratio", "transforms.Resize.random_sample_ratio", "len", "transforms.Resize.random_sample", "transforms.Resize.random_select"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample_ratio", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample_ratio", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_sample", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.random_select"], ["", "def", "_random_scale", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Randomly sample an img_scale according to ``ratio_range`` and\n        ``multiscale_mode``.\n\n        If ``ratio_range`` is specified, a ratio will be sampled and be\n        multiplied with ``img_scale``.\n        If multiple scales are specified by ``img_scale``, a scale will be\n        sampled according to ``multiscale_mode``.\n        Otherwise, single scale will be used.\n\n        Args:\n            results (dict): Result dict from :obj:`dataset`.\n\n        Returns:\n            dict: Two new keys 'scale` and 'scale_idx` are added into\n                ``results``, which would be used by subsequent pipelines.\n        \"\"\"", "\n", "\n", "if", "self", ".", "ratio_range", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "img_scale", "is", "None", ":", "\n", "                ", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "(", "w", ",", "h", ")", ",", "\n", "self", ".", "ratio_range", ")", "\n", "", "else", ":", "\n", "                ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample_ratio", "(", "\n", "self", ".", "img_scale", "[", "0", "]", ",", "self", ".", "ratio_range", ")", "\n", "", "", "elif", "len", "(", "self", ".", "img_scale", ")", "==", "1", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "img_scale", "[", "0", "]", ",", "0", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'range'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_sample", "(", "self", ".", "img_scale", ")", "\n", "", "elif", "self", ".", "multiscale_mode", "==", "'value'", ":", "\n", "            ", "scale", ",", "scale_idx", "=", "self", ".", "random_select", "(", "self", ".", "img_scale", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "results", "[", "'scale'", "]", "=", "scale", "\n", "results", "[", "'scale_idx'", "]", "=", "scale_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._resize_img": [[401, 422], ["numpy.array", "mmcv.imrescale", "mmcv.imresize"], "methods", ["None"], ["", "def", "_resize_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Resize images with ``results['scale']``.\"\"\"", "\n", "if", "self", ".", "keep_ratio", ":", "\n", "            ", "img", ",", "scale_factor", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "# the w_scale and h_scale has minor difference", "\n", "# a real fix should be done in the mmcv.imrescale in the future", "\n", "new_h", ",", "new_w", "=", "img", ".", "shape", "[", ":", "2", "]", "\n", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "w_scale", "=", "new_w", "/", "w", "\n", "h_scale", "=", "new_h", "/", "h", "\n", "", "else", ":", "\n", "            ", "img", ",", "w_scale", ",", "h_scale", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "'img'", "]", ",", "results", "[", "'scale'", "]", ",", "return_scale", "=", "True", ")", "\n", "", "scale_factor", "=", "np", ".", "array", "(", "[", "w_scale", ",", "h_scale", ",", "w_scale", ",", "h_scale", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "# in case that there is no padding", "\n", "results", "[", "'scale_factor'", "]", "=", "scale_factor", "\n", "results", "[", "'keep_ratio'", "]", "=", "self", ".", "keep_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._resize_seg": [[423, 433], ["results.get", "mmcv.imrescale", "mmcv.imresize"], "methods", ["None"], ["", "def", "_resize_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Resize semantic segmentation map with ``results['scale']``.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "keep_ratio", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "gt_seg", "=", "mmcv", ".", "imresize", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "'scale'", "]", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "results", "[", "key", "]", "=", "gt_seg", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.__call__": [[434, 451], ["transforms.Resize._resize_img", "transforms.Resize._resize_seg", "transforms.Resize._random_scale"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._resize_img", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._resize_seg", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize._random_scale"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to resize images, bounding boxes, masks, semantic\n        segmentation map.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Resized results, 'img_shape', 'pad_shape', 'scale_factor',\n                'keep_ratio' keys are added into result dict.\n        \"\"\"", "\n", "\n", "if", "'scale'", "not", "in", "results", ":", "\n", "            ", "self", ".", "_random_scale", "(", "results", ")", "\n", "", "self", ".", "_resize_img", "(", "results", ")", "\n", "self", ".", "_resize_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Resize.__repr__": [[452, 459], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "f'(img_scale={self.img_scale}, '", "\n", "f'multiscale_mode={self.multiscale_mode}, '", "\n", "f'ratio_range={self.ratio_range}, '", "\n", "f'keep_ratio={self.keep_ratio})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomFlip.__init__": [[475, 482], ["mmcv.utils.deprecated_api_warning"], "methods", ["None"], ["@", "deprecated_api_warning", "(", "{", "'flip_ratio'", ":", "'prob'", "}", ",", "cls_name", "=", "'RandomFlip'", ")", "\n", "def", "__init__", "(", "self", ",", "prob", "=", "None", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "direction", "=", "direction", "\n", "if", "prob", "is", "not", "None", ":", "\n", "            ", "assert", "prob", ">=", "0", "and", "prob", "<=", "1", "\n", "", "assert", "direction", "in", "[", "'horizontal'", ",", "'vertical'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomFlip.__call__": [[483, 511], ["mmcv.imflip", "results.get", "mmcv.imflip().copy", "numpy.random.rand", "mmcv.imflip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to flip bounding boxes, masks, semantic segmentation\n        maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Flipped results, 'flip', 'flip_direction' keys are added into\n                result dict.\n        \"\"\"", "\n", "\n", "if", "'flip'", "not", "in", "results", ":", "\n", "            ", "flip", "=", "True", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "prob", "else", "False", "\n", "results", "[", "'flip'", "]", "=", "flip", "\n", "", "if", "'flip_direction'", "not", "in", "results", ":", "\n", "            ", "results", "[", "'flip_direction'", "]", "=", "self", ".", "direction", "\n", "", "if", "results", "[", "'flip'", "]", ":", "\n", "# flip image", "\n", "            ", "results", "[", "'img'", "]", "=", "mmcv", ".", "imflip", "(", "\n", "results", "[", "'img'", "]", ",", "direction", "=", "results", "[", "'flip_direction'", "]", ")", "\n", "\n", "# flip segs", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "# use copy() to make numpy stride positive", "\n", "                ", "results", "[", "key", "]", "=", "mmcv", ".", "imflip", "(", "\n", "results", "[", "key", "]", ",", "direction", "=", "results", "[", "'flip_direction'", "]", ")", ".", "copy", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomFlip.__repr__": [[512, 514], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(prob={self.prob})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Pad.__init__": [[532, 544], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "size", "=", "None", ",", "\n", "size_divisor", "=", "None", ",", "\n", "pad_val", "=", "0", ",", "\n", "seg_pad_val", "=", "255", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "size_divisor", "=", "size_divisor", "\n", "self", ".", "pad_val", "=", "pad_val", "\n", "self", ".", "seg_pad_val", "=", "seg_pad_val", "\n", "# only one of size and size_divisor should be valid", "\n", "assert", "size", "is", "not", "None", "or", "size_divisor", "is", "not", "None", "\n", "assert", "size", "is", "None", "or", "size_divisor", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Pad._pad_img": [[545, 557], ["mmcv.impad", "mmcv.impad_to_multiple"], "methods", ["None"], ["", "def", "_pad_img", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Pad images according to ``self.size``.\"\"\"", "\n", "if", "self", ".", "size", "is", "not", "None", ":", "\n", "            ", "padded_img", "=", "mmcv", ".", "impad", "(", "\n", "results", "[", "'img'", "]", ",", "shape", "=", "self", ".", "size", ",", "pad_val", "=", "self", ".", "pad_val", ")", "\n", "", "elif", "self", ".", "size_divisor", "is", "not", "None", ":", "\n", "            ", "padded_img", "=", "mmcv", ".", "impad_to_multiple", "(", "\n", "results", "[", "'img'", "]", ",", "self", ".", "size_divisor", ",", "pad_val", "=", "self", ".", "pad_val", ")", "\n", "", "results", "[", "'img'", "]", "=", "padded_img", "\n", "results", "[", "'pad_shape'", "]", "=", "padded_img", ".", "shape", "\n", "results", "[", "'pad_fixed_size'", "]", "=", "self", ".", "size", "\n", "results", "[", "'pad_size_divisor'", "]", "=", "self", ".", "size_divisor", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Pad._pad_seg": [[558, 565], ["results.get", "mmcv.impad"], "methods", ["None"], ["", "def", "_pad_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Pad masks according to ``results['pad_shape']``.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "mmcv", ".", "impad", "(", "\n", "results", "[", "key", "]", ",", "\n", "shape", "=", "results", "[", "'pad_shape'", "]", "[", ":", "2", "]", ",", "\n", "pad_val", "=", "self", ".", "seg_pad_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Pad.__call__": [[566, 579], ["transforms.Pad._pad_img", "transforms.Pad._pad_seg"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Pad._pad_img", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Pad._pad_seg"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to pad images, masks, semantic segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Updated result dict.\n        \"\"\"", "\n", "\n", "self", ".", "_pad_img", "(", "results", ")", "\n", "self", ".", "_pad_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Pad.__repr__": [[580, 585], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(size={self.size}, size_divisor={self.size_divisor}, '", "f'pad_val={self.pad_val})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Normalize.__init__": [[600, 604], ["numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "to_rgb", "=", "True", ")", ":", "\n", "        ", "self", ".", "mean", "=", "np", ".", "array", "(", "mean", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "std", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "to_rgb", "=", "to_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Normalize.__call__": [[605, 621], ["mmcv.imnormalize", "dict"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to normalize images.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Normalized results, 'img_norm_cfg' key is added into\n                result dict.\n        \"\"\"", "\n", "\n", "results", "[", "'img'", "]", "=", "mmcv", ".", "imnormalize", "(", "results", "[", "'img'", "]", ",", "self", ".", "mean", ",", "self", ".", "std", ",", "\n", "self", ".", "to_rgb", ")", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ",", "to_rgb", "=", "self", ".", "to_rgb", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Normalize.__repr__": [[622, 627], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(mean={self.mean}, std={self.std}, to_rgb='", "f'{self.to_rgb})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Rerange.__init__": [[640, 646], ["isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "min_value", "=", "0", ",", "max_value", "=", "255", ")", ":", "\n", "        ", "assert", "isinstance", "(", "min_value", ",", "float", ")", "or", "isinstance", "(", "min_value", ",", "int", ")", "\n", "assert", "isinstance", "(", "max_value", ",", "float", ")", "or", "isinstance", "(", "max_value", ",", "int", ")", "\n", "assert", "min_value", "<", "max_value", "\n", "self", ".", "min_value", "=", "min_value", "\n", "self", ".", "max_value", "=", "max_value", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Rerange.__call__": [[647, 668], ["numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to rerange images.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n        Returns:\n            dict: Reranged results.\n        \"\"\"", "\n", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "img_min_value", "=", "np", ".", "min", "(", "img", ")", "\n", "img_max_value", "=", "np", ".", "max", "(", "img", ")", "\n", "\n", "assert", "img_min_value", "<", "img_max_value", "\n", "# rerange to [0, 1]", "\n", "img", "=", "(", "img", "-", "img_min_value", ")", "/", "(", "img_max_value", "-", "img_min_value", ")", "\n", "# rerange to [min_value, max_value]", "\n", "img", "=", "img", "*", "(", "self", ".", "max_value", "-", "self", ".", "min_value", ")", "+", "self", ".", "min_value", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.Rerange.__repr__": [[669, 673], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(min_value={self.min_value}, max_value={self.max_value})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CLAHE.__init__": [[689, 695], ["isinstance", "mmcv.utils.is_tuple_of", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "clip_limit", "=", "40.0", ",", "tile_grid_size", "=", "(", "8", ",", "8", ")", ")", ":", "\n", "        ", "assert", "isinstance", "(", "clip_limit", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "clip_limit", "=", "clip_limit", "\n", "assert", "is_tuple_of", "(", "tile_grid_size", ",", "int", ")", "\n", "assert", "len", "(", "tile_grid_size", ")", "==", "2", "\n", "self", ".", "tile_grid_size", "=", "tile_grid_size", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CLAHE.__call__": [[696, 712], ["range", "mmcv.clahe", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to Use CLAHE method process images.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Processed results.\n        \"\"\"", "\n", "\n", "for", "i", "in", "range", "(", "results", "[", "'img'", "]", ".", "shape", "[", "2", "]", ")", ":", "\n", "            ", "results", "[", "'img'", "]", "[", ":", ",", ":", ",", "i", "]", "=", "mmcv", ".", "clahe", "(", "\n", "np", ".", "array", "(", "results", "[", "'img'", "]", "[", ":", ",", ":", ",", "i", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "\n", "self", ".", "clip_limit", ",", "self", ".", "tile_grid_size", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CLAHE.__repr__": [[713, 718], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(clip_limit={self.clip_limit}, '", "f'tile_grid_size={self.tile_grid_size})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomCrop.__init__": [[730, 735], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ",", "cat_max_ratio", "=", "1.", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "assert", "crop_size", "[", "0", "]", ">", "0", "and", "crop_size", "[", "1", "]", ">", "0", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "cat_max_ratio", "=", "cat_max_ratio", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomCrop.get_crop_bbox": [[736, 746], ["max", "max", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "def", "get_crop_bbox", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Randomly get a crop bounding box.\"\"\"", "\n", "margin_h", "=", "max", "(", "img", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ",", "0", ")", "\n", "margin_w", "=", "max", "(", "img", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ",", "0", ")", "\n", "offset_h", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "margin_h", "+", "1", ")", "\n", "offset_w", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "margin_w", "+", "1", ")", "\n", "crop_y1", ",", "crop_y2", "=", "offset_h", ",", "offset_h", "+", "self", ".", "crop_size", "[", "0", "]", "\n", "crop_x1", ",", "crop_x2", "=", "offset_w", ",", "offset_w", "+", "self", ".", "crop_size", "[", "1", "]", "\n", "\n", "return", "crop_y1", ",", "crop_y2", ",", "crop_x1", ",", "crop_x2", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomCrop.crop": [[747, 752], ["None"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "img", ",", "crop_bbox", ")", ":", "\n", "        ", "\"\"\"Crop from ``img``\"\"\"", "\n", "crop_y1", ",", "crop_y2", ",", "crop_x1", ",", "crop_x2", "=", "crop_bbox", "\n", "img", "=", "img", "[", "crop_y1", ":", "crop_y2", ",", "crop_x1", ":", "crop_x2", ",", "...", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomCrop.__call__": [[753, 788], ["transforms.RandomCrop.get_crop_bbox", "transforms.RandomCrop.crop", "results.get", "range", "transforms.RandomCrop.crop", "transforms.RandomCrop.crop", "numpy.unique", "transforms.RandomCrop.get_crop_bbox", "len", "numpy.max", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.get_crop_bbox", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.crop", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.crop", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.crop", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.get_crop_bbox", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to randomly crop images, semantic segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Randomly cropped results, 'img_shape' key in result dict is\n                updated according to crop size.\n        \"\"\"", "\n", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "crop_bbox", "=", "self", ".", "get_crop_bbox", "(", "img", ")", "\n", "if", "self", ".", "cat_max_ratio", "<", "1.", ":", "\n", "# Repeat 10 times", "\n", "            ", "for", "_", "in", "range", "(", "10", ")", ":", "\n", "                ", "seg_temp", "=", "self", ".", "crop", "(", "results", "[", "'gt_semantic_seg'", "]", ",", "crop_bbox", ")", "\n", "labels", ",", "cnt", "=", "np", ".", "unique", "(", "seg_temp", ",", "return_counts", "=", "True", ")", "\n", "cnt", "=", "cnt", "[", "labels", "!=", "self", ".", "ignore_index", "]", "\n", "if", "len", "(", "cnt", ")", ">", "1", "and", "np", ".", "max", "(", "cnt", ")", "/", "np", ".", "sum", "(", "\n", "cnt", ")", "<", "self", ".", "cat_max_ratio", ":", "\n", "                    ", "break", "\n", "", "crop_bbox", "=", "self", ".", "get_crop_bbox", "(", "img", ")", "\n", "\n", "# crop the image", "\n", "", "", "img", "=", "self", ".", "crop", "(", "img", ",", "crop_bbox", ")", "\n", "img_shape", "=", "img", ".", "shape", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img_shape", "\n", "\n", "# crop semantic seg", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "self", ".", "crop", "(", "results", "[", "key", "]", ",", "crop_bbox", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomCrop.__repr__": [[789, 791], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(crop_size={self.crop_size})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.__init__": [[799, 803], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "crop_size", ",", "ignore_index", "=", "255", ")", ":", "\n", "        ", "assert", "crop_size", "[", "0", "]", ">", "0", "and", "crop_size", "[", "1", "]", ">", "0", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.get_crop_bbox": [[804, 814], ["max", "max"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "def", "get_crop_bbox", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Randomly get a crop bounding box.\"\"\"", "\n", "margin_h", "=", "max", "(", "img", ".", "shape", "[", "0", "]", "-", "self", ".", "crop_size", "[", "0", "]", ",", "0", ")", "\n", "margin_w", "=", "max", "(", "img", ".", "shape", "[", "1", "]", "-", "self", ".", "crop_size", "[", "1", "]", ",", "0", ")", "\n", "offset_h", "=", "margin_h", "//", "2", "#np.random.randint(0, margin_h + 1)", "\n", "offset_w", "=", "margin_w", "//", "2", "#np.random.randint(0, margin_w + 1)", "\n", "crop_y1", ",", "crop_y2", "=", "offset_h", ",", "offset_h", "+", "self", ".", "crop_size", "[", "0", "]", "\n", "crop_x1", ",", "crop_x2", "=", "offset_w", ",", "offset_w", "+", "self", ".", "crop_size", "[", "1", "]", "\n", "\n", "return", "crop_y1", ",", "crop_y2", ",", "crop_x1", ",", "crop_x2", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.crop": [[815, 820], ["None"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "img", ",", "crop_bbox", ")", ":", "\n", "        ", "\"\"\"Crop from ``img``\"\"\"", "\n", "crop_y1", ",", "crop_y2", ",", "crop_x1", ",", "crop_x2", "=", "crop_bbox", "\n", "img", "=", "img", "[", "crop_y1", ":", "crop_y2", ",", "crop_x1", ":", "crop_x2", ",", "...", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.__call__": [[821, 846], ["transforms.CenterCrop.get_crop_bbox", "transforms.CenterCrop.crop", "results.get", "transforms.CenterCrop.crop"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.get_crop_bbox", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.crop", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.crop"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to randomly crop images, semantic segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Randomly cropped results, 'img_shape' key in result dict is\n                updated according to crop size.\n        \"\"\"", "\n", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "crop_bbox", "=", "self", ".", "get_crop_bbox", "(", "img", ")", "\n", "\n", "# crop the image", "\n", "img", "=", "self", ".", "crop", "(", "img", ",", "crop_bbox", ")", "\n", "img_shape", "=", "img", ".", "shape", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img_shape", "\n", "\n", "# crop semantic seg", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "self", ".", "crop", "(", "results", "[", "key", "]", ",", "crop_bbox", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.CenterCrop.__repr__": [[847, 849], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(crop_size={self.crop_size})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomRotate.__init__": [[870, 890], ["isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "prob", ",", "\n", "degree", ",", "\n", "pad_val", "=", "0", ",", "\n", "seg_pad_val", "=", "255", ",", "\n", "center", "=", "None", ",", "\n", "auto_bound", "=", "False", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "assert", "prob", ">=", "0", "and", "prob", "<=", "1", "\n", "if", "isinstance", "(", "degree", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "assert", "degree", ">", "0", ",", "f'degree {degree} should be positive'", "\n", "self", ".", "degree", "=", "(", "-", "degree", ",", "degree", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "degree", "=", "degree", "\n", "", "assert", "len", "(", "self", ".", "degree", ")", "==", "2", ",", "f'degree {self.degree} should be a '", "f'tuple of (min, max)'", "\n", "self", ".", "pal_val", "=", "pad_val", "\n", "self", ".", "seg_pad_val", "=", "seg_pad_val", "\n", "self", ".", "center", "=", "center", "\n", "self", ".", "auto_bound", "=", "auto_bound", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomRotate.__call__": [[891, 922], ["numpy.random.uniform", "min", "max", "mmcv.imrotate", "results.get", "numpy.random.rand", "mmcv.imrotate"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to rotate image, semantic segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Rotated results.\n        \"\"\"", "\n", "\n", "rotate", "=", "True", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "prob", "else", "False", "\n", "degree", "=", "np", ".", "random", ".", "uniform", "(", "min", "(", "*", "self", ".", "degree", ")", ",", "max", "(", "*", "self", ".", "degree", ")", ")", "\n", "if", "rotate", ":", "\n", "# rotate image", "\n", "            ", "results", "[", "'img'", "]", "=", "mmcv", ".", "imrotate", "(", "\n", "results", "[", "'img'", "]", ",", "\n", "angle", "=", "degree", ",", "\n", "border_value", "=", "self", ".", "pal_val", ",", "\n", "center", "=", "self", ".", "center", ",", "\n", "auto_bound", "=", "self", ".", "auto_bound", ")", "\n", "\n", "# rotate segs", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "                ", "results", "[", "key", "]", "=", "mmcv", ".", "imrotate", "(", "\n", "results", "[", "key", "]", ",", "\n", "angle", "=", "degree", ",", "\n", "border_value", "=", "self", ".", "seg_pad_val", ",", "\n", "center", "=", "self", ".", "center", ",", "\n", "auto_bound", "=", "self", ".", "auto_bound", ",", "\n", "interpolation", "=", "'nearest'", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RandomRotate.__repr__": [[923, 932], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(prob={self.prob}, '", "f'degree={self.degree}, '", "f'pad_val={self.pal_val}, '", "f'seg_pad_val={self.seg_pad_val}, '", "f'center={self.center}, '", "f'auto_bound={self.auto_bound})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RGB2Gray.__init__": [[950, 957], ["isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "out_channels", "=", "None", ",", "weights", "=", "(", "0.299", ",", "0.587", ",", "0.114", ")", ")", ":", "\n", "        ", "assert", "out_channels", "is", "None", "or", "out_channels", ">", "0", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "assert", "isinstance", "(", "weights", ",", "tuple", ")", "\n", "for", "item", "in", "weights", ":", "\n", "            ", "assert", "isinstance", "(", "item", ",", "(", "float", ",", "int", ")", ")", "\n", "", "self", ".", "weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RGB2Gray.__call__": [[958, 981], ["numpy.array().reshape", "len", "len", "img.repeat.repeat.repeat", "img.repeat.repeat.repeat", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert RGB image to grayscale image.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Result dict with grayscale image.\n        \"\"\"", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "assert", "len", "(", "img", ".", "shape", ")", "==", "3", "\n", "assert", "img", ".", "shape", "[", "2", "]", "==", "len", "(", "self", ".", "weights", ")", "\n", "weights", "=", "np", ".", "array", "(", "self", ".", "weights", ")", ".", "reshape", "(", "(", "1", ",", "1", ",", "-", "1", ")", ")", "\n", "img", "=", "(", "img", "*", "weights", ")", ".", "sum", "(", "2", ",", "keepdims", "=", "True", ")", "\n", "if", "self", ".", "out_channels", "is", "None", ":", "\n", "            ", "img", "=", "img", ".", "repeat", "(", "weights", ".", "shape", "[", "2", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "img", ".", "repeat", "(", "self", ".", "out_channels", ",", "axis", "=", "2", ")", "\n", "\n", "", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.RGB2Gray.__repr__": [[982, 987], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(out_channels={self.out_channels}, '", "f'weights={self.weights})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AdjustGamma.__init__": [[998, 1005], ["numpy.array().astype", "isinstance", "isinstance", "numpy.array", "numpy.arange"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "gamma", "=", "1.0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "gamma", ",", "float", ")", "or", "isinstance", "(", "gamma", ",", "int", ")", "\n", "assert", "gamma", ">", "0", "\n", "self", ".", "gamma", "=", "gamma", "\n", "inv_gamma", "=", "1.0", "/", "gamma", "\n", "self", ".", "table", "=", "np", ".", "array", "(", "[", "(", "i", "/", "255.0", ")", "**", "inv_gamma", "*", "255", "\n", "for", "i", "in", "np", ".", "arange", "(", "256", ")", "]", ")", ".", "astype", "(", "'uint8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AdjustGamma.__call__": [[1006, 1020], ["mmcv.lut_transform", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to process the image with gamma correction.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Processed results.\n        \"\"\"", "\n", "\n", "results", "[", "'img'", "]", "=", "mmcv", ".", "lut_transform", "(", "\n", "np", ".", "array", "(", "results", "[", "'img'", "]", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "self", ".", "table", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.AdjustGamma.__repr__": [[1021, 1023], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(gamma={self.gamma})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.MaillaryHack.__init__": [[1028, 1037], ["range", "transforms.MaillaryHack.others.remove"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "map", "=", "[", "[", "13", ",", "24", ",", "41", "]", ",", "[", "2", ",", "15", "]", ",", "[", "17", "]", ",", "[", "6", "]", ",", "[", "3", "]", ",", "[", "45", ",", "47", "]", ",", "[", "48", "]", ",", "[", "50", "]", ",", "[", "30", "]", ",", "[", "29", "]", ",", "\n", "[", "27", "]", ",", "[", "19", "]", ",", "[", "20", ",", "21", ",", "22", "]", ",", "[", "55", "]", ",", "[", "61", "]", ",", "[", "54", "]", ",", "[", "58", "]", ",", "[", "57", "]", ",", "[", "52", "]", "]", "\n", "\n", "self", ".", "others", "=", "[", "i", "for", "i", "in", "range", "(", "66", ")", "]", "\n", "for", "i", "in", "self", ".", "map", ":", "\n", "            ", "for", "j", "in", "i", ":", "\n", "                ", "if", "j", "in", "self", ".", "others", ":", "\n", "                    ", "self", ".", "others", ".", "remove", "(", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.MaillaryHack.__call__": [[1039, 1060], ["enumerate"], "methods", ["None"], ["", "", "", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to process the image with gamma correction.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Processed results.\n        \"\"\"", "\n", "gt_map", "=", "results", "[", "'gt_semantic_seg'", "]", "\n", "# others -> 255", "\n", "for", "value", "in", "self", ".", "others", ":", "\n", "            ", "gt_map", "[", "gt_map", "==", "value", "]", "=", "255", "\n", "\n", "", "for", "index", ",", "map", "in", "enumerate", "(", "self", ".", "map", ")", ":", "\n", "            ", "for", "value", "in", "map", ":", "\n", "                ", "gt_map", "[", "gt_map", "==", "value", "]", "=", "index", "\n", "\n", "", "", "results", "[", "'gt_semantic_seg'", "]", "=", "gt_map", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.MaillaryHack.__repr__": [[1061, 1063], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'MaillaryHack'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.SegRescale.__init__": [[1073, 1075], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.SegRescale.__call__": [[1076, 1090], ["results.get", "mmcv.imrescale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to scale the semantic segmentation map.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Result dict with semantic segmentation map scaled.\n        \"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "if", "self", ".", "scale_factor", "!=", "1", ":", "\n", "                ", "results", "[", "key", "]", "=", "mmcv", ".", "imrescale", "(", "\n", "results", "[", "key", "]", ",", "self", ".", "scale_factor", ",", "interpolation", "=", "'nearest'", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.SegRescale.__repr__": [[1091, 1093], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(scale_factor={self.scale_factor})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.__init__": [[1117, 1126], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "brightness_delta", "=", "32", ",", "\n", "contrast_range", "=", "(", "0.5", ",", "1.5", ")", ",", "\n", "saturation_range", "=", "(", "0.5", ",", "1.5", ")", ",", "\n", "hue_delta", "=", "18", ")", ":", "\n", "        ", "self", ".", "brightness_delta", "=", "brightness_delta", "\n", "self", ".", "contrast_lower", ",", "self", ".", "contrast_upper", "=", "contrast_range", "\n", "self", ".", "saturation_lower", ",", "self", ".", "saturation_upper", "=", "saturation_range", "\n", "self", ".", "hue_delta", "=", "hue_delta", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.convert": [[1127, 1132], ["numpy.clip", "numpy.clip.astype", "numpy.clip.astype"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "img", ",", "alpha", "=", "1", ",", "beta", "=", "0", ")", ":", "\n", "        ", "\"\"\"Multiple with alpha and add beat with clip.\"\"\"", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "*", "alpha", "+", "beta", "\n", "img", "=", "np", ".", "clip", "(", "img", ",", "0", ",", "255", ")", "\n", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.brightness": [[1133, 1141], ["numpy.random.randint", "transforms.PhotoMetricDistortion.convert", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.convert"], ["", "def", "brightness", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Brightness distortion.\"\"\"", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "return", "self", ".", "convert", "(", "\n", "img", ",", "\n", "beta", "=", "random", ".", "uniform", "(", "-", "self", ".", "brightness_delta", ",", "\n", "self", ".", "brightness_delta", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.contrast": [[1142, 1149], ["numpy.random.randint", "transforms.PhotoMetricDistortion.convert", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.convert"], ["", "def", "contrast", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Contrast distortion.\"\"\"", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "return", "self", ".", "convert", "(", "\n", "img", ",", "\n", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "contrast_lower", ",", "self", ".", "contrast_upper", ")", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.saturation": [[1150, 1160], ["numpy.random.randint", "mmcv.bgr2hsv", "transforms.PhotoMetricDistortion.convert", "mmcv.hsv2bgr", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.convert"], ["", "def", "saturation", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Saturation distortion.\"\"\"", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "=", "mmcv", ".", "bgr2hsv", "(", "img", ")", "\n", "img", "[", ":", ",", ":", ",", "1", "]", "=", "self", ".", "convert", "(", "\n", "img", "[", ":", ",", ":", ",", "1", "]", ",", "\n", "alpha", "=", "random", ".", "uniform", "(", "self", ".", "saturation_lower", ",", "\n", "self", ".", "saturation_upper", ")", ")", "\n", "img", "=", "mmcv", ".", "hsv2bgr", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.hue": [[1161, 1170], ["numpy.random.randint", "mmcv.bgr2hsv", "mmcv.hsv2bgr", "img[].astype", "numpy.random.randint"], "methods", ["None"], ["", "def", "hue", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Hue distortion.\"\"\"", "\n", "if", "random", ".", "randint", "(", "2", ")", ":", "\n", "            ", "img", "=", "mmcv", ".", "bgr2hsv", "(", "img", ")", "\n", "img", "[", ":", ",", ":", ",", "\n", "0", "]", "=", "(", "img", "[", ":", ",", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "+", "\n", "random", ".", "randint", "(", "-", "self", ".", "hue_delta", ",", "self", ".", "hue_delta", ")", ")", "%", "180", "\n", "img", "=", "mmcv", ".", "hsv2bgr", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.__call__": [[1171, 1203], ["transforms.PhotoMetricDistortion.brightness", "numpy.random.randint", "transforms.PhotoMetricDistortion.saturation", "transforms.PhotoMetricDistortion.hue", "transforms.PhotoMetricDistortion.contrast", "transforms.PhotoMetricDistortion.contrast"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.brightness", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.saturation", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.hue", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.contrast", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.contrast"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to perform photometric distortion on images.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Result dict with images distorted.\n        \"\"\"", "\n", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "# random brightness", "\n", "img", "=", "self", ".", "brightness", "(", "img", ")", "\n", "\n", "# mode == 0 --> do random contrast first", "\n", "# mode == 1 --> do random contrast last", "\n", "mode", "=", "random", ".", "randint", "(", "2", ")", "\n", "if", "mode", "==", "1", ":", "\n", "            ", "img", "=", "self", ".", "contrast", "(", "img", ")", "\n", "\n", "# random saturation", "\n", "", "img", "=", "self", ".", "saturation", "(", "img", ")", "\n", "\n", "# random hue", "\n", "img", "=", "self", ".", "hue", "(", "img", ")", "\n", "\n", "# random contrast", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "img", "=", "self", ".", "contrast", "(", "img", ")", "\n", "\n", "", "results", "[", "'img'", "]", "=", "img", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.transforms.PhotoMetricDistortion.__repr__": [[1204, 1213], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "(", "f'(brightness_delta={self.brightness_delta}, '", "\n", "f'contrast_range=({self.contrast_lower}, '", "\n", "f'{self.contrast_upper}), '", "\n", "f'saturation_range=({self.saturation_lower}, '", "\n", "f'{self.saturation_upper}), '", "\n", "f'hue_delta={self.hue_delta})'", ")", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.test_time_aug.MultiScaleFlipAug.__init__": [[53, 92], ["compose.Compose", "mmcv.is_list_of", "mmcv.is_list_of", "mmcv.is_list_of", "mmcv.is_list_of", "isinstance", "warnings.warn", "warnings.warn", "isinstance", "isinstance", "mmcv.is_list_of", "any", "len", "isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "transforms", ",", "\n", "img_scale", ",", "\n", "img_ratios", "=", "None", ",", "\n", "flip", "=", "False", ",", "\n", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "Compose", "(", "transforms", ")", "\n", "if", "img_ratios", "is", "not", "None", ":", "\n", "            ", "img_ratios", "=", "img_ratios", "if", "isinstance", "(", "img_ratios", ",", "\n", "list", ")", "else", "[", "img_ratios", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_ratios", ",", "float", ")", "\n", "", "if", "img_scale", "is", "None", ":", "\n", "# mode 1: given img_scale=None and a range of image ratio", "\n", "            ", "self", ".", "img_scale", "=", "None", "\n", "assert", "mmcv", ".", "is_list_of", "(", "img_ratios", ",", "float", ")", "\n", "", "elif", "isinstance", "(", "img_scale", ",", "tuple", ")", "and", "mmcv", ".", "is_list_of", "(", "\n", "img_ratios", ",", "float", ")", ":", "\n", "            ", "assert", "len", "(", "img_scale", ")", "==", "2", "\n", "# mode 2: given a scale and a range of image ratio", "\n", "self", ".", "img_scale", "=", "[", "(", "int", "(", "img_scale", "[", "0", "]", "*", "ratio", ")", ",", "\n", "int", "(", "img_scale", "[", "1", "]", "*", "ratio", ")", ")", "\n", "for", "ratio", "in", "img_ratios", "]", "\n", "", "else", ":", "\n", "# mode 3: given multiple scales", "\n", "            ", "self", ".", "img_scale", "=", "img_scale", "if", "isinstance", "(", "img_scale", ",", "\n", "list", ")", "else", "[", "img_scale", "]", "\n", "", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "or", "self", ".", "img_scale", "is", "None", "\n", "self", ".", "flip", "=", "flip", "\n", "self", ".", "img_ratios", "=", "img_ratios", "\n", "self", ".", "flip_direction", "=", "flip_direction", "if", "isinstance", "(", "\n", "flip_direction", ",", "list", ")", "else", "[", "flip_direction", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "flip_direction", ",", "str", ")", "\n", "if", "not", "self", ".", "flip", "and", "self", ".", "flip_direction", "!=", "[", "'horizontal'", "]", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'flip_direction has no effect when flip is set to False'", ")", "\n", "", "if", "(", "self", ".", "flip", "\n", "and", "not", "any", "(", "[", "t", "[", "'type'", "]", "==", "'RandomFlip'", "for", "t", "in", "transforms", "]", ")", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'flip has no effect when RandomFlip is not in transforms'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.test_time_aug.MultiScaleFlipAug.__call__": [[93, 127], ["mmcv.is_list_of", "test_time_aug.MultiScaleFlipAug.items", "aug_data_dict[].append", "int", "int", "results.copy", "test_time_aug.MultiScaleFlipAug.transforms", "aug_data.append"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to apply test time augment transforms on results.\n\n        Args:\n            results (dict): Result dict contains the data to transform.\n\n        Returns:\n           dict[str: list]: The augmented data, where each value is wrapped\n               into a list.\n        \"\"\"", "\n", "\n", "aug_data", "=", "[", "]", "\n", "if", "self", ".", "img_scale", "is", "None", "and", "mmcv", ".", "is_list_of", "(", "self", ".", "img_ratios", ",", "float", ")", ":", "\n", "            ", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "img_scale", "=", "[", "(", "int", "(", "w", "*", "ratio", ")", ",", "int", "(", "h", "*", "ratio", ")", ")", "\n", "for", "ratio", "in", "self", ".", "img_ratios", "]", "\n", "", "else", ":", "\n", "            ", "img_scale", "=", "self", ".", "img_scale", "\n", "", "flip_aug", "=", "[", "False", ",", "True", "]", "if", "self", ".", "flip", "else", "[", "False", "]", "\n", "for", "scale", "in", "img_scale", ":", "\n", "            ", "for", "flip", "in", "flip_aug", ":", "\n", "                ", "for", "direction", "in", "self", ".", "flip_direction", ":", "\n", "                    ", "_results", "=", "results", ".", "copy", "(", ")", "\n", "_results", "[", "'scale'", "]", "=", "scale", "\n", "_results", "[", "'flip'", "]", "=", "flip", "\n", "_results", "[", "'flip_direction'", "]", "=", "direction", "\n", "data", "=", "self", ".", "transforms", "(", "_results", ")", "\n", "aug_data", ".", "append", "(", "data", ")", "\n", "# list of dict to dict of list", "\n", "", "", "", "aug_data_dict", "=", "{", "key", ":", "[", "]", "for", "key", "in", "aug_data", "[", "0", "]", "}", "\n", "for", "data", "in", "aug_data", ":", "\n", "            ", "for", "key", ",", "val", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "aug_data_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "return", "aug_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.test_time_aug.MultiScaleFlipAug.__repr__": [[128, 134], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(transforms={self.transforms}, '", "\n", "repr_str", "+=", "f'img_scale={self.img_scale}, flip={self.flip})'", "\n", "repr_str", "+=", "f'flip_direction={self.flip_direction}'", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.loading.LoadImageFromFile.__init__": [[31, 41], ["dict", "file_client_args.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "to_float32", "=", "False", ",", "\n", "color_type", "=", "'color'", ",", "\n", "file_client_args", "=", "dict", "(", "backend", "=", "'disk'", ")", ",", "\n", "imdecode_backend", "=", "'cv2'", ")", ":", "\n", "        ", "self", ".", "to_float32", "=", "to_float32", "\n", "self", ".", "color_type", "=", "color_type", "\n", "self", ".", "file_client_args", "=", "file_client_args", ".", "copy", "(", ")", "\n", "self", ".", "file_client", "=", "None", "\n", "self", ".", "imdecode_backend", "=", "imdecode_backend", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.loading.LoadImageFromFile.__call__": [[42, 80], ["loading.LoadImageFromFile.file_client.get", "mmcv.imfrombytes", "dict", "mmcv.FileClient", "results.get", "os.join", "img.astype.astype.astype", "len", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call functions to load image and get image meta information.\n\n        Args:\n            results (dict): Result dict from :obj:`mmseg.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded image and meta information.\n        \"\"\"", "\n", "\n", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "mmcv", ".", "FileClient", "(", "**", "self", ".", "file_client_args", ")", "\n", "\n", "", "if", "results", ".", "get", "(", "'img_prefix'", ")", "is", "not", "None", ":", "\n", "            ", "filename", "=", "osp", ".", "join", "(", "results", "[", "'img_prefix'", "]", ",", "\n", "results", "[", "'img_info'", "]", "[", "'filename'", "]", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "filename", ")", "\n", "img", "=", "mmcv", ".", "imfrombytes", "(", "\n", "img_bytes", ",", "flag", "=", "self", ".", "color_type", ",", "backend", "=", "self", ".", "imdecode_backend", ")", "\n", "if", "self", ".", "to_float32", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "results", "[", "'filename'", "]", "=", "filename", "\n", "results", "[", "'ori_filename'", "]", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "num_channels", "=", "1", "if", "len", "(", "img", ".", "shape", ")", "<", "3", "else", "img", ".", "shape", "[", "2", "]", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "std", "=", "np", ".", "ones", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "to_rgb", "=", "False", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.loading.LoadImageFromFile.__repr__": [[81, 87], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(to_float32={self.to_float32},'", "\n", "repr_str", "+=", "f\"color_type='{self.color_type}',\"", "\n", "repr_str", "+=", "f\"imdecode_backend='{self.imdecode_backend}')\"", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.loading.LoadAnnotations.__init__": [[104, 112], ["dict", "file_client_args.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "reduce_zero_label", "=", "False", ",", "\n", "file_client_args", "=", "dict", "(", "backend", "=", "'disk'", ")", ",", "\n", "imdecode_backend", "=", "'pillow'", ")", ":", "\n", "        ", "self", ".", "reduce_zero_label", "=", "reduce_zero_label", "\n", "self", ".", "file_client_args", "=", "file_client_args", ".", "copy", "(", ")", "\n", "self", ".", "file_client", "=", "None", "\n", "self", ".", "imdecode_backend", "=", "imdecode_backend", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.loading.LoadAnnotations.__call__": [[113, 148], ["loading.LoadAnnotations.file_client.get", "mmcv.imfrombytes().squeeze().astype", "results[].append", "mmcv.FileClient", "results.get", "os.join", "results.get", "results[].items", "mmcv.imfrombytes().squeeze", "mmcv.imfrombytes"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to load multiple types annotations.\n\n        Args:\n            results (dict): Result dict from :obj:`mmseg.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded semantic segmentation annotations.\n        \"\"\"", "\n", "\n", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "mmcv", ".", "FileClient", "(", "**", "self", ".", "file_client_args", ")", "\n", "\n", "", "if", "results", ".", "get", "(", "'seg_prefix'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "filename", "=", "osp", ".", "join", "(", "results", "[", "'seg_prefix'", "]", ",", "\n", "results", "[", "'ann_info'", "]", "[", "'seg_map'", "]", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "results", "[", "'ann_info'", "]", "[", "'seg_map'", "]", "\n", "", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "filename", ")", "\n", "gt_semantic_seg", "=", "mmcv", ".", "imfrombytes", "(", "\n", "img_bytes", ",", "flag", "=", "'unchanged'", ",", "\n", "backend", "=", "self", ".", "imdecode_backend", ")", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# modify if custom classes", "\n", "if", "results", ".", "get", "(", "'label_map'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "for", "old_id", ",", "new_id", "in", "results", "[", "'label_map'", "]", ".", "items", "(", ")", ":", "\n", "                ", "gt_semantic_seg", "[", "gt_semantic_seg", "==", "old_id", "]", "=", "new_id", "\n", "# reduce zero_label", "\n", "", "", "if", "self", ".", "reduce_zero_label", ":", "\n", "# avoid using underflow conversion", "\n", "            ", "gt_semantic_seg", "[", "gt_semantic_seg", "==", "0", "]", "=", "255", "\n", "gt_semantic_seg", "=", "gt_semantic_seg", "-", "1", "\n", "gt_semantic_seg", "[", "gt_semantic_seg", "==", "254", "]", "=", "255", "\n", "", "results", "[", "'gt_semantic_seg'", "]", "=", "gt_semantic_seg", "\n", "results", "[", "'seg_fields'", "]", ".", "append", "(", "'gt_semantic_seg'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.loading.LoadAnnotations.__repr__": [[149, 154], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(reduce_zero_label={self.reduce_zero_label},'", "\n", "repr_str", "+=", "f\"imdecode_backend='{self.imdecode_backend}')\"", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ToTensor.__init__": [[44, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ToTensor.__call__": [[47, 61], ["formating.to_tensor"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert data in results to :obj:`torch.Tensor`.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data converted\n                to :obj:`torch.Tensor`.\n        \"\"\"", "\n", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "to_tensor", "(", "results", "[", "key", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ToTensor.__repr__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ImageToTensor.__init__": [[78, 80], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ImageToTensor.__call__": [[81, 99], ["formating.to_tensor", "len", "numpy.expand_dims", "numpy.expand_dims.transpose"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert image in results to :obj:`torch.Tensor` and\n        transpose the channel order.\n\n        Args:\n            results (dict): Result dict contains the image data to convert.\n\n        Returns:\n            dict: The result dict contains the image converted\n                to :obj:`torch.Tensor` and transposed to (C, H, W) order.\n        \"\"\"", "\n", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", "\n", "", "results", "[", "key", "]", "=", "to_tensor", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ImageToTensor.__repr__": [[100, 102], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.Transpose.__init__": [[113, 116], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ",", "order", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.Transpose.__call__": [[117, 132], ["results[].transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert image in results to :obj:`torch.Tensor` and\n        transpose the channel order.\n\n        Args:\n            results (dict): Result dict contains the image data to convert.\n\n        Returns:\n            dict: The result dict contains the image converted\n                to :obj:`torch.Tensor` and transposed to (C, H, W) order.\n        \"\"\"", "\n", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "results", "[", "key", "]", ".", "transpose", "(", "self", ".", "order", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.Transpose.__repr__": [[133, 136], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys}, order={self.order})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ToDataContainer.__init__": [[150, 154], ["dict", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "fields", "=", "(", "dict", "(", "key", "=", "'img'", ",", "\n", "stack", "=", "True", ")", ",", "dict", "(", "key", "=", "'gt_semantic_seg'", ")", ")", ")", ":", "\n", "        ", "self", ".", "fields", "=", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ToDataContainer.__call__": [[155, 172], ["field.copy.copy.copy", "field.copy.copy.pop", "mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert data in results to\n        :obj:`mmcv.DataContainer`.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data converted to\n                :obj:`mmcv.DataContainer`.\n        \"\"\"", "\n", "\n", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "field", "=", "field", ".", "copy", "(", ")", "\n", "key", "=", "field", ".", "pop", "(", "'key'", ")", "\n", "results", "[", "key", "]", "=", "DC", "(", "results", "[", "key", "]", ",", "**", "field", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.ToDataContainer.__repr__": [[173, 175], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(fields={self.fields})'", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.DefaultFormatBundle.__call__": [[189, 213], ["numpy.ascontiguousarray", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "len", "numpy.expand_dims", "numpy.expand_dims.transpose", "formating.to_tensor", "formating.to_tensor", "[].astype"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.to_tensor"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to transform and format common fields in results.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data that is formatted with\n                default bundle.\n        \"\"\"", "\n", "\n", "if", "'img'", "in", "results", ":", "\n", "            ", "img", "=", "results", "[", "'img'", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", "\n", "", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "results", "[", "'img'", "]", "=", "DC", "(", "to_tensor", "(", "img", ")", ",", "stack", "=", "True", ")", "\n", "", "if", "'gt_semantic_seg'", "in", "results", ":", "\n", "# convert to long", "\n", "            ", "results", "[", "'gt_semantic_seg'", "]", "=", "DC", "(", "\n", "to_tensor", "(", "results", "[", "'gt_semantic_seg'", "]", "[", "None", ",", "\n", "...", "]", ".", "astype", "(", "np", ".", "int64", ")", ")", ",", "\n", "stack", "=", "True", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.DefaultFormatBundle.__repr__": [[214, 216], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.Collect.__init__": [[256, 263], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "keys", ",", "\n", "meta_keys", "=", "(", "'filename'", ",", "'ori_filename'", ",", "'ori_shape'", ",", "\n", "'img_shape'", ",", "'pad_shape'", ",", "'scale_factor'", ",", "'flip'", ",", "\n", "'flip_direction'", ",", "'img_norm_cfg'", ")", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "meta_keys", "=", "meta_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.Collect.__call__": [[264, 285], ["mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to collect keys in results. The keys in ``meta_keys``\n        will be converted to :obj:mmcv.DataContainer.\n\n        Args:\n            results (dict): Result dict contains the data to collect.\n\n        Returns:\n            dict: The result dict contains the following keys\n                - keys in``self.keys``\n                - ``img_metas``\n        \"\"\"", "\n", "\n", "data", "=", "{", "}", "\n", "img_meta", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "meta_keys", ":", "\n", "            ", "img_meta", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "data", "[", "'img_metas'", "]", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "data", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.Collect.__repr__": [[286, 289], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys}, meta_keys={self.meta_keys})'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.formating.to_tensor": [[11, 34], ["isinstance", "isinstance", "torch.from_numpy", "isinstance", "torch.tensor", "isinstance", "mmcv.is_str", "torch.LongTensor", "isinstance", "torch.FloatTensor", "TypeError", "type"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n\n    Args:\n        data (torch.Tensor | numpy.ndarray | Sequence | int | float): Data to\n            be converted.\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'type {type(data)} cannot be converted to tensor.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.compose.Compose.__init__": [[17, 28], ["isinstance", "isinstance", "mmcv.utils.build_from_cfg", "compose.Compose.transforms.append", "callable", "compose.Compose.transforms.append", "TypeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transforms", ",", "collections", ".", "abc", ".", "Sequence", ")", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "transform", ",", "dict", ")", ":", "\n", "                ", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "elif", "callable", "(", "transform", ")", ":", "\n", "                ", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'transform must be callable or a dict'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.compose.Compose.__call__": [[29, 44], ["t"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Call function to apply transforms sequentially.\n\n        Args:\n            data (dict): A result dict contains the data to transform.\n\n        Returns:\n           dict: Transformed data.\n        \"\"\"", "\n", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "data", "=", "t", "(", "data", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.pipelines.compose.Compose.__repr__": [[45, 52], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "f'    {t}'", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.inference.LoadImage.__call__": [[45, 67], ["isinstance", "mmcv.imread"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to load images into results.\n\n        Args:\n            results (dict): A result dict contains the file name\n                of the image to be read.\n\n        Returns:\n            dict: ``results`` will be returned containing loaded image.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "results", "[", "'img'", "]", ",", "str", ")", ":", "\n", "            ", "results", "[", "'filename'", "]", "=", "results", "[", "'img'", "]", "\n", "results", "[", "'ori_filename'", "]", "=", "results", "[", "'img'", "]", "\n", "", "else", ":", "\n", "            ", "results", "[", "'filename'", "]", "=", "None", "\n", "results", "[", "'ori_filename'", "]", "=", "None", "\n", "", "img", "=", "mmcv", ".", "imread", "(", "results", "[", "'img'", "]", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.inference.init_segmentor": [[11, 40], ["isinstance", "mmseg.models.build_segmentor", "mmseg.models.build_segmentor.to", "mmseg.models.build_segmentor.eval", "mmcv.Config.fromfile", "mmcv.runner.load_checkpoint", "isinstance", "TypeError", "mmcv.Config.fromfile.get", "type"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_segmentor"], ["def", "init_segmentor", "(", "config", ",", "checkpoint", "=", "None", ",", "device", "=", "'cuda:0'", ")", ":", "\n", "    ", "\"\"\"Initialize a segmentor from config file.\n\n    Args:\n        config (str or :obj:`mmcv.Config`): Config file path or the config\n            object.\n        checkpoint (str, optional): Checkpoint path. If left as None, the model\n            will not load any weights.\n        device (str, optional) CPU/CUDA device option. Default 'cuda:0'.\n            Use 'cpu' for loading model on CPU.\n    Returns:\n        nn.Module: The constructed segmentor.\n    \"\"\"", "\n", "if", "isinstance", "(", "config", ",", "str", ")", ":", "\n", "        ", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config", ")", "\n", "", "elif", "not", "isinstance", "(", "config", ",", "mmcv", ".", "Config", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'config must be a filename or Config object, '", "\n", "'but got {}'", ".", "format", "(", "type", "(", "config", ")", ")", ")", "\n", "", "config", ".", "model", ".", "pretrained", "=", "None", "\n", "config", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_segmentor", "(", "config", ".", "model", ",", "test_cfg", "=", "config", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "        ", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "model", ".", "PALETTE", "=", "checkpoint", "[", "'meta'", "]", "[", "'PALETTE'", "]", "\n", "", "model", ".", "cfg", "=", "config", "# save the config in the model for convenience", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.inference.inference_segmentor": [[69, 99], ["mmseg.datasets.pipelines.Compose", "dict", "mmseg.datasets.pipelines.Compose.", "mmcv.parallel.collate", "next", "next", "torch.no_grad", "model", "model.parameters", "inference.LoadImage", "model.parameters", "mmcv.parallel.scatter"], "function", ["None"], ["", "", "def", "inference_segmentor", "(", "model", ",", "img", ")", ":", "\n", "    ", "\"\"\"Inference image(s) with the segmentor.\n\n    Args:\n        model (nn.Module): The loaded segmentor.\n        imgs (str/ndarray or list[str/ndarray]): Either image files or loaded\n            images.\n\n    Returns:\n        (list[Tensor]): The segmentation result.\n    \"\"\"", "\n", "cfg", "=", "model", ".", "cfg", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# model device", "\n", "# build the data pipeline", "\n", "test_pipeline", "=", "[", "LoadImage", "(", ")", "]", "+", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "1", ":", "]", "\n", "test_pipeline", "=", "Compose", "(", "test_pipeline", ")", "\n", "# prepare data", "\n", "data", "=", "dict", "(", "img", "=", "img", ")", "\n", "data", "=", "test_pipeline", "(", "data", ")", "\n", "data", "=", "collate", "(", "[", "data", "]", ",", "samples_per_gpu", "=", "1", ")", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "# scatter to specified GPU", "\n", "        ", "data", "=", "scatter", "(", "data", ",", "[", "device", "]", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "data", "[", "'img_metas'", "]", "=", "[", "i", ".", "data", "[", "0", "]", "for", "i", "in", "data", "[", "'img_metas'", "]", "]", "\n", "\n", "# forward the model", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.inference.show_result_pyplot": [[101, 119], ["hasattr", "model.show_result", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "mmcv.bgr2rgb"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.show_result"], ["", "def", "show_result_pyplot", "(", "model", ",", "img", ",", "result", ",", "palette", "=", "None", ",", "fig_size", "=", "(", "15", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\"Visualize the segmentation results on the image.\n\n    Args:\n        model (nn.Module): The loaded segmentor.\n        img (str or np.ndarray): Image filename or loaded image.\n        result (list): The segmentation result.\n        palette (list[list[int]]] | None): The palette of segmentation\n            map. If None is given, random palette will be generated.\n            Default: None\n        fig_size (tuple): Figure size of the pyplot figure.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "img", "=", "model", ".", "show_result", "(", "img", ",", "result", ",", "palette", "=", "palette", ",", "show", "=", "False", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "fig_size", ")", "\n", "plt", ".", "imshow", "(", "mmcv", ".", "bgr2rgb", "(", "img", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.train.set_random_seed": [[37, 54], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Launch segmentor training.\"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.train.train_segmentor": [[32, 116], ["mmseg.utils.get_root_logger", "mmcv.runner.build_optimizer", "mmcv.runner.build_runner", "mmcv.runner.build_runner.register_training_hooks", "mmcv.runner.build_runner.run", "isinstance", "mmseg.datasets.build_dataloader", "cfg.get", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDataParallel", "cfg.get", "warnings.warn", "cfg.get", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "cfg.get", "mmcv.runner.build_runner.register_hook", "mmcv.runner.build_runner.resume", "len", "mmcv.parallel.MMDataParallel.cuda", "mmcv.parallel.MMDataParallel.cuda", "dict", "dict", "eval_hook", "mmcv.runner.build_runner.load_checkpoint", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.nvlabs_fan.runner.epoch_based_runner.EpochBasedRunnerAmp.resume"], ["", "", "def", "train_segmentor", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Launch segmentor training.\"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build runner", "\n", "", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a `runner` section, '", "\n", "'please set `runner` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "runner", ".", "register_hook", "(", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.np2tmp": [[15, 33], ["numpy.save", "tempfile.NamedTemporaryFile"], "function", ["None"], ["def", "np2tmp", "(", "array", ",", "temp_file_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Save ndarray to local numpy file.\n\n    Args:\n        array (ndarray): Ndarray to save.\n        temp_file_name (str): Numpy file name. If 'temp_file_name=None', this\n            function will generate a file name with tempfile.NamedTemporaryFile\n            to save ndarray. Default: None.\n\n    Returns:\n        str: The numpy file name.\n    \"\"\"", "\n", "\n", "if", "temp_file_name", "is", "None", ":", "\n", "        ", "temp_file_name", "=", "tempfile", ".", "NamedTemporaryFile", "(", "\n", "suffix", "=", "'.npy'", ",", "delete", "=", "False", ")", ".", "name", "\n", "", "np", ".", "save", "(", "temp_file_name", ",", "array", ")", "\n", "return", "temp_file_name", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.single_gpu_test": [[35, 101], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "isinstance", "[].size", "range", "torch.no_grad", "torch.no_grad", "model", "mmcv.image.tensor2imgs", "zip", "results.extend", "results.append", "mmcv.ProgressBar.update", "len", "len", "mmcv.imresize", "model.module.show_result", "test.np2tmp", "os.join", "test.np2tmp"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.show_result", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.np2tmp", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.np2tmp"], ["", "def", "single_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "show", "=", "False", ",", "\n", "out_dir", "=", "None", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test with single GPU.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        show (bool): Whether show results during infernece. Default: False.\n        out_dir (str, optional): If specified, the results will be dumped into\n            the directory to save output results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "\n", "", "if", "show", "or", "out_dir", ":", "\n", "            ", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_metas", "[", "0", "]", "[", "'img_norm_cfg'", "]", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "                ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "\n", "ori_h", ",", "ori_w", "=", "img_meta", "[", "'ori_shape'", "]", "[", ":", "-", "1", "]", "\n", "img_show", "=", "mmcv", ".", "imresize", "(", "img_show", ",", "(", "ori_w", ",", "ori_h", ")", ")", "\n", "\n", "if", "out_dir", ":", "\n", "                    ", "out_file", "=", "osp", ".", "join", "(", "out_dir", ",", "img_meta", "[", "'ori_filename'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out_file", "=", "None", "\n", "\n", "", "model", ".", "module", ".", "show_result", "(", "\n", "img_show", ",", "\n", "result", ",", "\n", "palette", "=", "dataset", ".", "PALETTE", ",", "\n", "show", "=", "show", ",", "\n", "out_file", "=", "out_file", ")", "\n", "\n", "", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.multi_gpu_test": [[103, 159], ["model.eval", "mmcv.runner.get_dist_info", "enumerate", "mmcv.ProgressBar", "isinstance", "test.collect_results_gpu", "test.collect_results_cpu", "len", "torch.no_grad", "torch.no_grad", "model", "collect_results_cpu.extend", "collect_results_cpu.append", "[].size", "range", "len", "len", "test.np2tmp", "mmcv.ProgressBar.update", "test.np2tmp"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.apis.test.collect_results_gpu", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.collect_results_cpu", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.np2tmp", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.np2tmp"], ["", "def", "multi_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "tmpdir", "=", "None", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test model with multiple gpus.\n\n    This method tests model with multiple gpus and collects the results\n    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'\n    it encodes results to gpu tensors and use gpu communication for results\n    collection. On cpu mode it saves the results on different gpus to 'tmpdir'\n    and collects them by the rank 0 worker.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode.\n        gpu_collect (bool): Option to use either gpu or cpu to collect results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "if", "gpu_collect", ":", "\n", "        ", "results", "=", "collect_results_gpu", "(", "results", ",", "len", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "collect_results_cpu", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.collect_results_cpu": [[161, 202], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["None"], ["", "def", "collect_results_cpu", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Collect results with CPU.\"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.collect_results_gpu": [[204, 236], ["mmcv.runner.get_dist_info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.all_gather", "torch.tensor().max", "torch.tensor().max", "torch.zeros", "torch.zeros", "torch.all_gather", "bytearray", "torch.tensor.clone", "torch.tensor.new_zeros", "zip", "zip", "pickle.dumps", "range", "torch.tensor", "torch.tensor", "range", "part_list.append", "ordered_results.extend", "pickle.loads", "list", "recv[].cpu().numpy().tobytes", "recv[].cpu().numpy", "recv[].cpu"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "", "def", "collect_results_gpu", "(", "result_part", ",", "size", ")", ":", "\n", "    ", "\"\"\"Collect results with GPU.\"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# dump result part to tensor with pickle", "\n", "part_tensor", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "pickle", ".", "dumps", "(", "result_part", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "# gather all result part tensor shape", "\n", "shape_tensor", "=", "torch", ".", "tensor", "(", "part_tensor", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "shape_list", "=", "[", "shape_tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "shape_list", ",", "shape_tensor", ")", "\n", "# padding result part tensor to max length", "\n", "shape_max", "=", "torch", ".", "tensor", "(", "shape_list", ")", ".", "max", "(", ")", "\n", "part_send", "=", "torch", ".", "zeros", "(", "shape_max", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "part_send", "[", ":", "shape_tensor", "[", "0", "]", "]", "=", "part_tensor", "\n", "part_recv_list", "=", "[", "\n", "part_tensor", ".", "new_zeros", "(", "shape_max", ")", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "# gather all result part", "\n", "dist", ".", "all_gather", "(", "part_recv_list", ",", "part_send", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "recv", ",", "shape", "in", "zip", "(", "part_recv_list", ",", "shape_list", ")", ":", "\n", "            ", "part_list", ".", "append", "(", "\n", "pickle", ".", "loads", "(", "recv", "[", ":", "shape", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "return", "ordered_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.apis.train.train_detector": [[56, 200], ["mmdet.utils.get_root_logger", "mmcv.runner.build_optimizer", "mmcv.runner.build_runner", "cfg.get", "mmcv.runner.build_runner.register_training_hooks", "cfg.get", "mmcv.runner.build_runner.run", "isinstance", "mmdet.utils.get_root_logger.warning", "mmdet.datasets.build_dataloader", "cfg.optimizer_config.get", "cfg.optimizer_config.get", "cfg.get", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDataParallel", "warnings.warn", "mmcv.runner.Fp16OptimizerHook", "cfg.get", "isinstance", "cfg.data.val.pop", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "cfg.get", "mmcv.runner.build_runner.register_hook", "isinstance", "mmcv.runner.build_runner.resume", "mmdet.utils.get_root_logger.warning", "mmdet.utils.get_root_logger.warning", "len", "apex.amp.initialize", "mmcv.parallel.MMDataParallel.modules", "mmcv.parallel.MMDataParallel.cuda", "mmcv.parallel.MMDataParallel.cuda", "dict", "mmcv.runner.OptimizerHook", "mmcv.runner.build_runner.register_hook", "mmdet.datasets.replace_ImageToTensor", "dict", "eval_hook", "isinstance", "hook_cfg.copy.copy", "hook_cfg.copy.pop", "mmcv.utils.build_from_cfg", "mmcv.runner.build_runner.register_hook", "mmcv.runner.build_runner.load_checkpoint", "mmcv.parallel.MMDataParallel.cuda", "hasattr", "mmcv.runner.DistSamplerSeedHook", "type", "torch.cuda.current_device", "type"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.nvlabs_fan.runner.epoch_based_runner.EpochBasedRunnerAmp.resume"], ["# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build runner", "\n", "", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a `runner` section, '", "\n", "'please set `runner` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "runner", ".", "register_hook", "(", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.Upsample.__init__": [[34, 47], ["torch.Module.__init__", "isinstance", "tuple", "float", "float"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "size", "=", "None", ",", "\n", "scale_factor", "=", "None", ",", "\n", "mode", "=", "'nearest'", ",", "\n", "align_corners", "=", "None", ")", ":", "\n", "        ", "super", "(", "Upsample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "if", "isinstance", "(", "scale_factor", ",", "tuple", ")", ":", "\n", "            ", "self", ".", "scale_factor", "=", "tuple", "(", "float", "(", "factor", ")", "for", "factor", "in", "scale_factor", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scale_factor", "=", "float", "(", "scale_factor", ")", "if", "scale_factor", "else", "None", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.Upsample.forward": [[48, 54], ["wrappers.resize", "int"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "size", ":", "\n", "            ", "size", "=", "[", "int", "(", "t", "*", "self", ".", "scale_factor", ")", "for", "t", "in", "x", ".", "shape", "[", "-", "2", ":", "]", "]", "\n", "", "else", ":", "\n", "            ", "size", "=", "self", ".", "size", "\n", "", "return", "resize", "(", "x", ",", "size", ",", "None", ",", "self", ".", "mode", ",", "self", ".", "align_corners", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize": [[8, 30], ["isinstance", "torch.interpolate", "tuple", "tuple", "tuple", "int", "int", "int", "warnings.warn"], "function", ["None"], ["def", "resize", "(", "input", ",", "\n", "size", "=", "None", ",", "\n", "scale_factor", "=", "None", ",", "\n", "mode", "=", "'nearest'", ",", "\n", "align_corners", "=", "None", ",", "\n", "warning", "=", "True", ")", ":", "\n", "    ", "if", "warning", ":", "\n", "        ", "if", "size", "is", "not", "None", "and", "align_corners", ":", "\n", "            ", "input_h", ",", "input_w", "=", "tuple", "(", "int", "(", "x", ")", "for", "x", "in", "input", ".", "shape", "[", "2", ":", "]", ")", "\n", "output_h", ",", "output_w", "=", "tuple", "(", "int", "(", "x", ")", "for", "x", "in", "size", ")", "\n", "if", "output_h", ">", "input_h", "or", "output_w", ">", "output_h", ":", "\n", "                ", "if", "(", "(", "output_h", ">", "1", "and", "output_w", ">", "1", "and", "input_h", ">", "1", "\n", "and", "input_w", ">", "1", ")", "and", "(", "output_h", "-", "1", ")", "%", "(", "input_h", "-", "1", ")", "\n", "and", "(", "output_w", "-", "1", ")", "%", "(", "input_w", "-", "1", ")", ")", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\n", "f'When align_corners={align_corners}, '", "\n", "'the output would more aligned if '", "\n", "f'input size {(input_h, input_w)} is `x+1` and '", "\n", "f'out size {(output_h, output_w)} is `nx+1`'", ")", "\n", "", "", "", "", "if", "isinstance", "(", "size", ",", "torch", ".", "Size", ")", ":", "\n", "        ", "size", "=", "tuple", "(", "int", "(", "x", ")", "for", "x", "in", "size", ")", "\n", "", "return", "F", ".", "interpolate", "(", "input", ",", "size", ",", "scale_factor", ",", "mode", ",", "align_corners", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.ops.encoding.Encoding.__init__": [[17, 31], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "num_codes", ")", ":", "\n", "        ", "super", "(", "Encoding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# init codewords and smoothing factor", "\n", "self", ".", "channels", ",", "self", ".", "num_codes", "=", "channels", ",", "num_codes", "\n", "std", "=", "1.", "/", "(", "(", "num_codes", "*", "channels", ")", "**", "0.5", ")", "\n", "# [num_codes, channels]", "\n", "self", ".", "codewords", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "empty", "(", "num_codes", ",", "channels", ",", "\n", "dtype", "=", "torch", ".", "float", ")", ".", "uniform_", "(", "-", "std", ",", "std", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "# [num_codes]", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "empty", "(", "num_codes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "uniform_", "(", "-", "1", ",", "0", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.ops.encoding.Encoding.scaled_l2": [[32, 44], ["codewords.size", "x.size", "scale.view", "x.unsqueeze().expand", "codewords.view", "x.unsqueeze", "x.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "scaled_l2", "(", "x", ",", "codewords", ",", "scale", ")", ":", "\n", "        ", "num_codes", ",", "channels", "=", "codewords", ".", "size", "(", ")", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "reshaped_scale", "=", "scale", ".", "view", "(", "(", "1", ",", "1", ",", "num_codes", ")", ")", "\n", "expanded_x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "(", "batch_size", ",", "x", ".", "size", "(", "1", ")", ",", "num_codes", ",", "channels", ")", ")", "\n", "reshaped_codewords", "=", "codewords", ".", "view", "(", "(", "1", ",", "1", ",", "num_codes", ",", "channels", ")", ")", "\n", "\n", "scaled_l2_norm", "=", "reshaped_scale", "*", "(", "\n", "expanded_x", "-", "reshaped_codewords", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "3", ")", "\n", "return", "scaled_l2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.ops.encoding.Encoding.aggregate": [[45, 56], ["codewords.size", "codewords.view", "x.size", "x.unsqueeze().expand", "x.unsqueeze", "x.size", "assigment_weights.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "aggregate", "(", "assigment_weights", ",", "x", ",", "codewords", ")", ":", "\n", "        ", "num_codes", ",", "channels", "=", "codewords", ".", "size", "(", ")", "\n", "reshaped_codewords", "=", "codewords", ".", "view", "(", "(", "1", ",", "1", ",", "num_codes", ",", "channels", ")", ")", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "expanded_x", "=", "x", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "\n", "(", "batch_size", ",", "x", ".", "size", "(", "1", ")", ",", "num_codes", ",", "channels", ")", ")", "\n", "encoded_feat", "=", "(", "assigment_weights", ".", "unsqueeze", "(", "3", ")", "*", "\n", "(", "expanded_x", "-", "reshaped_codewords", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "encoded_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.ops.encoding.Encoding.forward": [[57, 69], ["x.view().transpose().contiguous.view().transpose().contiguous.size", "x.view().transpose().contiguous.view().transpose().contiguous.view().transpose().contiguous", "torch.nn.functional.softmax", "encoding.Encoding.aggregate", "encoding.Encoding.scaled_l2", "x.view().transpose().contiguous.view().transpose().contiguous.dim", "x.view().transpose().contiguous.view().transpose().contiguous.size", "x.view().transpose().contiguous.view().transpose().contiguous.view().transpose", "x.view().transpose().contiguous.view().transpose().contiguous.view"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.ops.encoding.Encoding.aggregate", "home.repos.pwc.inspect_result.nvlabs_fan.ops.encoding.Encoding.scaled_l2"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "x", ".", "dim", "(", ")", "==", "4", "and", "x", ".", "size", "(", "1", ")", "==", "self", ".", "channels", "\n", "# [batch_size, channels, height, width]", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# [batch_size, height x width, channels]", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "self", ".", "channels", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# assignment_weights: [batch_size, channels, num_codes]", "\n", "assigment_weights", "=", "F", ".", "softmax", "(", "\n", "self", ".", "scaled_l2", "(", "x", ",", "self", ".", "codewords", ",", "self", ".", "scale", ")", ",", "dim", "=", "2", ")", "\n", "# aggregate", "\n", "encoded_feat", "=", "self", ".", "aggregate", "(", "assigment_weights", ",", "x", ",", "self", ".", "codewords", ")", "\n", "return", "encoded_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.ops.encoding.Encoding.__repr__": [[70, 75], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(Nx{self.channels}xHxW =>Nx{self.num_codes}'", "f'x{self.channels})'", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build": [[13, 34], ["isinstance", "torch.nn.Sequential", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg"], "function", ["None"], ["if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n", "# https://github.com/pytorch/pytorch/issues/973", "\n", "    ", "import", "resource", "\n", "rlimit", "=", "resource", ".", "getrlimit", "(", "resource", ".", "RLIMIT_NOFILE", ")", "\n", "hard_limit", "=", "rlimit", "[", "1", "]", "\n", "soft_limit", "=", "min", "(", "4096", ",", "hard_limit", ")", "\n", "resource", ".", "setrlimit", "(", "resource", ".", "RLIMIT_NOFILE", ",", "(", "soft_limit", ",", "hard_limit", ")", ")", "\n", "\n", "", "DATASETS", "=", "Registry", "(", "'dataset'", ")", "\n", "PIPELINES", "=", "Registry", "(", "'pipeline'", ")", "\n", "\n", "\n", "def", "_concat_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build :obj:`ConcatDataset by.\"\"\"", "\n", "from", ".", "dataset_wrappers", "import", "ConcatDataset", "\n", "img_dir", "=", "cfg", "[", "'img_dir'", "]", "\n", "ann_dir", "=", "cfg", ".", "get", "(", "'ann_dir'", ",", "None", ")", "\n", "split", "=", "cfg", ".", "get", "(", "'split'", ",", "None", ")", "\n", "num_img_dir", "=", "len", "(", "img_dir", ")", "if", "isinstance", "(", "img_dir", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "if", "ann_dir", "is", "not", "None", ":", "\n", "        ", "num_ann_dir", "=", "len", "(", "ann_dir", ")", "if", "isinstance", "(", "ann_dir", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_backbone": [[36, 39], ["builder.build"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build"], ["", "if", "split", "is", "not", "None", ":", "\n", "        ", "num_split", "=", "len", "(", "split", ")", "if", "isinstance", "(", "split", ",", "(", "list", ",", "tuple", ")", ")", "else", "1", "\n", "", "else", ":", "\n", "        ", "num_split", "=", "0", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_neck": [[41, 44], ["builder.build"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build"], ["        ", "assert", "num_img_dir", "==", "num_ann_dir", "or", "num_ann_dir", "==", "0", "\n", "assert", "num_img_dir", "==", "num_split", "or", "num_split", "==", "0", "\n", "", "else", ":", "\n", "        ", "assert", "num_split", "==", "num_ann_dir", "or", "num_ann_dir", "<=", "1", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_head": [[46, 49], ["builder.build"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build"], ["\n", "datasets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_dset", ")", ":", "\n", "        ", "data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_loss": [[51, 54], ["builder.build"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build"], ["            ", "data_cfg", "[", "'img_dir'", "]", "=", "img_dir", "[", "i", "]", "\n", "", "if", "isinstance", "(", "ann_dir", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "data_cfg", "[", "'ann_dir'", "]", "=", "ann_dir", "[", "i", "]", "\n", "", "if", "isinstance", "(", "split", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_segmentor": [[56, 67], ["builder.build", "warnings.warn", "dict", "cfg.get", "cfg.get"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build"], ["", "datasets", ".", "append", "(", "build_dataset", "(", "data_cfg", ",", "default_args", ")", ")", "\n", "\n", "", "return", "ConcatDataset", "(", "datasets", ")", "\n", "\n", "\n", "", "def", "build_dataset", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "\"\"\"Build datasets.\"\"\"", "\n", "from", ".", "dataset_wrappers", "import", "ConcatDataset", ",", "RepeatDataset", "\n", "if", "isinstance", "(", "cfg", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "dataset", "=", "ConcatDataset", "(", "[", "build_dataset", "(", "c", ",", "default_args", ")", "for", "c", "in", "cfg", "]", ")", "\n", "", "elif", "cfg", "[", "'type'", "]", "==", "'RepeatDataset'", ":", "\n", "        ", "dataset", "=", "RepeatDataset", "(", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.PositionalEncodingFourier.__init__": [[54, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "hidden_dim", "=", "32", ",", "dim", "=", "768", ",", "temperature", "=", "10000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "token_projection", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "*", "2", ",", "dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "scale", "=", "2", "*", "math", ".", "pi", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.PositionalEncodingFourier.forward": [[63, 78], ["torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "fan.PositionalEncodingFourier.token_projection", "fan.PositionalEncodingFourier.repeat", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "B", ":", "int", ",", "H", ":", "int", ",", "W", ":", "int", ",", "fp32", "=", "True", ")", ":", "\n", "        ", "device", "=", "self", ".", "token_projection", ".", "weight", ".", "device", "\n", "y_embed", "=", "torch", ".", "arange", "(", "1", ",", "H", "+", "1", ",", "dtype", "=", "torch", ".", "float32", "if", "fp32", "else", "torch", ".", "float16", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "W", ")", "\n", "x_embed", "=", "torch", ".", "arange", "(", "1", ",", "W", "+", "1", ",", "dtype", "=", "torch", ".", "float32", "if", "fp32", "else", "torch", ".", "float16", ",", "device", "=", "device", ")", ".", "repeat", "(", "1", ",", "H", ",", "1", ")", "\n", "y_embed", "=", "y_embed", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "self", ".", "eps", ")", "*", "self", ".", "scale", "\n", "x_embed", "=", "x_embed", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "self", ".", "eps", ")", "*", "self", ".", "scale", "\n", "dim_t", "=", "torch", ".", "arange", "(", "self", ".", "hidden_dim", ",", "dtype", "=", "torch", ".", "float32", "if", "fp32", "else", "torch", ".", "float16", ",", "device", "=", "device", ")", "\n", "dim_t", "=", "self", ".", "temperature", "**", "(", "2", "*", "torch", ".", "div", "(", "dim_t", ",", "2", ")", "/", "self", ".", "hidden_dim", ")", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_x", "=", "torch", ".", "stack", "(", "[", "pos_x", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", "]", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos_y", "=", "torch", ".", "stack", "(", "[", "pos_y", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_y", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", "]", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "pos", "=", "self", ".", "token_projection", "(", "pos", ")", "\n", "return", "pos", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "# (B, C, H, W)", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ClassAttn.__init__": [[81, 93], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "\"\"\"3x3 convolution + batch norm\"\"\"", "\n", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "SyncBatchNorm", "(", "out_planes", ")", "\n", ")", "\n", "\n", "\n", "", "class", "Mlp", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ClassAttn.forward": [[94, 112], ["fan.ClassAttn.q().unsqueeze().reshape().permute", "fan.ClassAttn.k().reshape().permute", "fan.ClassAttn.v().reshape().permute", "fan.ClassAttn.softmax", "fan.ClassAttn.attn_drop", "fan.ClassAttn.proj", "fan.ClassAttn.proj_drop", "fan.ClassAttn.transpose", "fan.ClassAttn.q().unsqueeze().reshape", "fan.ClassAttn.k().reshape", "fan.ClassAttn.v().reshape", "fan.ClassAttn.q().unsqueeze", "fan.ClassAttn.k", "fan.ClassAttn.v", "fan.ClassAttn.q"], "methods", ["None"], ["self", ".", "dwconv", "=", "DWConv", "(", "hidden_features", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.Mlp.__init__": [[163, 177], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "fan.DWConv", "torch.Parameter", "torch.Parameter", "torch.Parameter", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "fan.Mlp.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "num_patches", "=", "(", "img_size", "[", "1", "]", "//", "patch_size", ")", "*", "(", "img_size", "[", "0", "]", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "if", "patch_size", "==", "16", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_chans", ",", "embed_dim", "//", "8", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "8", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "2", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.Mlp._init_weights": [[178, 192], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["conv3x3", "(", "embed_dim", "//", "2", ",", "embed_dim", ",", "2", ")", ",", "\n", ")", "\n", "", "elif", "patch_size", "==", "8", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_chans", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "2", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "2", ",", "embed_dim", ",", "2", ")", ",", "\n", ")", "\n", "", "elif", "patch_size", "==", "4", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_chans", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "1", ",", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.Mlp.forward": [[193, 201], ["fan.Mlp.fc1", "fan.Mlp.fc2", "fan.Mlp.drop", "fan.Mlp.relu", "fan.Mlp.drop", "fan.Mlp.dwconv"], "methods", ["None"], [")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "'For convolutional projection, patch size has to be in [8, 16]'", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "Hp", ",", "Wp", "=", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, N, C)", "\n", "return", "x", ",", "(", "Hp", ",", "Wp", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.Class_Attention.__init__": [[159, 171], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["", "", "class", "ConvPatchEmbed", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Image to Patch Embedding using multiple convolutional layers\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "act_layer", "=", "nn", ".", "GELU", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "num_patches", "=", "(", "img_size", "[", "1", "]", "//", "patch_size", ")", "*", "(", "img_size", "[", "0", "]", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "if", "patch_size", "==", "16", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.Class_Attention.forward": [[172, 190], ["fan.Class_Attention.q().unsqueeze().reshape().permute", "fan.Class_Attention.k().reshape().permute", "fan.Class_Attention.v().reshape().permute", "fan.Class_Attention.softmax", "fan.Class_Attention.attn_drop", "fan.Class_Attention.proj", "fan.Class_Attention.proj_drop", "fan.Class_Attention.transpose", "fan.Class_Attention.q().unsqueeze().reshape", "fan.Class_Attention.k().reshape", "fan.Class_Attention.v().reshape", "fan.Class_Attention.q().unsqueeze", "fan.Class_Attention.k", "fan.Class_Attention.v", "fan.Class_Attention.q"], "methods", ["None"], ["conv3x3", "(", "in_chans", ",", "embed_dim", "//", "8", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "8", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "2", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "2", ",", "embed_dim", ",", "2", ")", ",", "\n", ")", "\n", "", "elif", "patch_size", "==", "8", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_chans", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "2", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "2", ",", "embed_dim", ",", "2", ")", ",", "\n", ")", "\n", "", "elif", "patch_size", "==", "4", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_chans", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ConvPatchEmbed.__init__": [[205, 242], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "fan.conv3x3", "act_layer", "fan.conv3x3", "act_layer", "fan.conv3x3", "act_layer", "fan.conv3x3", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "fan.conv3x3", "act_layer", "fan.conv3x3", "act_layer", "fan.conv3x3", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "fan.conv3x3", "act_layer", "fan.conv3x3"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3"], ["\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_features", ",", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "in_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "SyncBatchNorm", "(", "in_features", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_features", ",", "out_features", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "out_features", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "H", ":", "int", ",", "W", ":", "int", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "N", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "ClassAttentionBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Class Attention Layer as in CaiT https://arxiv.org/abs/2103.17239\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "self", ".", "attn", "=", "ClassAttn", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ConvPatchEmbed.forward": [[243, 248], ["fan.ConvPatchEmbed.proj", "x.flatten().transpose.flatten().transpose.flatten().transpose", "x.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["self", ".", "mlp", "=", "MlpOri", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "int", "(", "dim", "*", "mlp_ratio", ")", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "if", "eta", "is", "not", "None", ":", "# LayerScale Initialization (no layerscale when None)", "\n", "            ", "self", ".", "gamma1", "=", "nn", ".", "Parameter", "(", "eta", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma2", "=", "nn", ".", "Parameter", "(", "eta", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.DWConv.__init__": [[251, 263], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "act_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["# See https://github.com/rwightman/pytorch-image-models/pull/747#issuecomment-877795721", "\n", "", "self", ".", "tokens_norm", "=", "tokens_norm", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "return_attention", "=", "False", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "x_norm1", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x1", "=", "self", ".", "attn", "(", "x_norm1", ")", "\n", "x_attn", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x_norm1", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma1", "*", "x_attn", ")", "\n", "if", "self", ".", "tokens_norm", ":", "\n", "            ", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "norm2", "(", "x", "[", ":", ",", "0", ":", "1", "]", ")", ",", "x", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.DWConv.forward": [[264, 275], ["x.reshape().permute.reshape().permute.permute().reshape", "fan.DWConv.conv1", "fan.DWConv.act", "fan.DWConv.bn", "fan.DWConv.conv2", "x.reshape().permute.reshape().permute.reshape().permute", "x.reshape().permute.reshape().permute.permute", "x.reshape().permute.reshape().permute.reshape"], "methods", ["None"], ["", "x_res", "=", "x", "\n", "cls_token", "=", "x", "[", ":", ",", "0", ":", "1", "]", "\n", "cls_token", "=", "self", ".", "gamma2", "*", "self", ".", "mlp", "(", "cls_token", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "cls_token", ",", "x", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "x_res", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "TokenMixing", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ClassAttentionBlock.__init__": [[280, 298], ["torch.Module.__init__", "norm_layer", "timm.models.cait.ClassAttn", "norm_layer", "timm.models.vision_transformer.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "\n", "# config of mlp for v processing", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ClassAttentionBlock.forward": [[299, 319], ["fan.ClassAttentionBlock.norm1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fan.ClassAttentionBlock.attn", "fan.ClassAttentionBlock.attn", "fan.ClassAttentionBlock.drop_path", "fan.ClassAttentionBlock.norm2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fan.ClassAttentionBlock.mlp", "fan.ClassAttentionBlock.drop_path", "fan.ClassAttentionBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "\n", "\n", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "attn", "=", "(", "q", "*", "self", ".", "scale", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "#* self.scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "Bv", ",", "Hd", ",", "Nv", ",", "Cv", "=", "v", ".", "shape", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.TokenMixing.__init__": [[322, 346], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "fan.TokenMixing.apply"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", ",", "attn", "\n", "", "", "class", "HybridEmbed", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" CNN Feature Map Embedding\n    Extract feature map from CNN, flatten, project to embedding dim.\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "backbone", ",", "img_size", "=", "224", ",", "patch_size", "=", "2", ",", "feature_size", "=", "None", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "384", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "backbone", ",", "nn", ".", "Module", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "backbone", "=", "backbone", "\n", "if", "feature_size", "is", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# NOTE Most reliable way of determining output dims is to run forward pass", "\n", "                ", "training", "=", "backbone", ".", "training", "\n", "if", "training", ":", "\n", "                    ", "backbone", ".", "eval", "(", ")", "\n", "", "o", "=", "self", ".", "backbone", ".", "forward_features", "(", "torch", ".", "zeros", "(", "1", ",", "in_chans", ",", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ")", "\n", "if", "isinstance", "(", "o", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.TokenMixing._init_weights": [[347, 361], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["                    ", "o", "=", "o", "[", "-", "1", "]", "# last feature if backbone outputs list/tuple of features", "\n", "", "feature_size", "=", "o", ".", "shape", "[", "-", "2", ":", "]", "\n", "feature_dim", "=", "o", ".", "shape", "[", "1", "]", "\n", "backbone", ".", "train", "(", "training", ")", "\n", "", "", "else", ":", "\n", "            ", "feature_size", "=", "to_2tuple", "(", "feature_size", ")", "\n", "if", "hasattr", "(", "self", ".", "backbone", ",", "'feature_info'", ")", ":", "\n", "                ", "feature_dim", "=", "self", ".", "backbone", ".", "feature_info", ".", "channels", "(", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "feature_dim", "=", "self", ".", "backbone", ".", "num_features", "\n", "", "", "assert", "feature_size", "[", "0", "]", "%", "patch_size", "[", "0", "]", "==", "0", "and", "feature_size", "[", "1", "]", "%", "patch_size", "[", "1", "]", "==", "0", "\n", "self", ".", "grid_size", "=", "(", "feature_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "feature_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "feature_dim", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.TokenMixing.forward": [[362, 377], ["fan.TokenMixing.q().reshape().permute", "fan.TokenMixing.kv().reshape().permute", "fan.TokenMixing.softmax", "fan.TokenMixing.attn_drop", "fan.TokenMixing.proj", "fan.TokenMixing.proj_drop", "k.transpose", "fan.TokenMixing.q().reshape", "fan.TokenMixing.kv().reshape", "fan.TokenMixing.q", "fan.TokenMixing.kv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_feat", "=", "False", ")", ":", "\n", "        ", "x", ",", "out_list", "=", "self", ".", "backbone", ".", "forward_features", "(", "x", ",", "return_feat", "=", "return_feat", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "x", "=", "x", "[", "-", "1", "]", "# last feature if backbone outputs list/tuple of features", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "if", "return_feat", ":", "\n", "            ", "return", "x", ",", "(", "H", "//", "self", ".", "patch_size", "[", "0", "]", ",", "W", "//", "self", ".", "patch_size", "[", "1", "]", ")", ",", "out_list", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "(", "H", "//", "self", ".", "patch_size", "[", "0", "]", ",", "W", "//", "self", ".", "patch_size", "[", "1", "]", ")", "\n", "\n", "\n", "", "", "", "class", "ChannelProcessing", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "mlp_hidden_dim", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.HybridEmbed.__init__": [[382, 412], ["torch.Module.__init__", "isinstance", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "timm.models.layers.to_2tuple", "hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fan.HybridEmbed.backbone.forward_features", "isinstance", "backbone.train", "backbone.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fan.HybridEmbed.backbone.feature_info.channels"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer.train"], ["self", ".", "temperature", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_heads", ",", "1", ",", "1", ")", ")", "\n", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "mlp_v", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "norm_v", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n", "        ", "q", "=", "q", ".", "softmax", "(", "-", "2", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "_", ",", "_", ",", "N", ",", "_", "=", "k", ".", "shape", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "k", ".", "softmax", "(", "-", "2", ")", ",", "(", "N", ",", "1", ")", ")", "\n", "\n", "attn", "=", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "q", "@", "k", ")", "\n", "return", "attn", "*", "self", ".", "temperature", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.HybridEmbed.forward": [[413, 420], ["fan.HybridEmbed.backbone.forward_features", "isinstance", "fan.HybridEmbed.proj().flatten().transpose", "fan.HybridEmbed.proj().flatten", "fan.HybridEmbed.proj"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "atten", "=", "None", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "\n", "v", "=", "x", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "x", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "attn", "=", "self", ".", "_gen_attn", "(", "q", ",", "k", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ChannelProcessing.__init__": [[422, 444], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "fan.Mlp", "norm_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "fan.ChannelProcessing.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["\n", "Bv", ",", "Hd", ",", "Nv", ",", "Cv", "=", "v", ".", "shape", "\n", "v", "=", "self", ".", "norm_v", "(", "self", ".", "mlp_v", "(", "v", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", "*", "Cv", ")", ",", "H", ",", "W", ")", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", ",", "Cv", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "repeat_time", "=", "N", "//", "attn", ".", "shape", "[", "-", "1", "]", "\n", "attn", "=", "attn", ".", "repeat_interleave", "(", "repeat_time", ",", "dim", "=", "-", "1", ")", "if", "attn", ".", "shape", "[", "-", "1", "]", ">", "1", "else", "attn", "\n", "x", "=", "(", "attn", "*", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "return", "x", ",", "attn", "*", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'temperature'", "}", "\n", "\n", "", "", "class", "FANBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "eta", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "TokenMixing", "(", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "mlp_block", "=", "ChannelProcessing", "\n", "self", ".", "mlp", "=", "mlp_block", "(", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "drop", "=", "drop", ",", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ChannelProcessing._init_weights": [[445, 459], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["self", ".", "gamma1", "=", "nn", ".", "Parameter", "(", "eta", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma2", "=", "nn", ".", "Parameter", "(", "eta", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "H", "=", "None", "\n", "self", ".", "W", "=", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "attn", "=", "None", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "H", ",", "self", ".", "W", "\n", "x_new", ",", "attn", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma1", "*", "x_new", ")", "\n", "x_new", ",", "attn", "=", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ",", "H", ",", "W", ",", "atten", "=", "attn", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma2", "*", "x_new", ")", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "H", ",", "W", "\n", "if", "return_attention", ":", "\n", "            ", "return", "attn", "\n", "", "return", "x", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ChannelProcessing._gen_attn": [[459, 466], ["q.softmax().transpose.softmax().transpose.softmax().transpose", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "q.softmax().transpose.softmax().transpose.softmax"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid"], ["", "return", "x", "\n", "\n", "\n", "", "", "class", "FAN", "(", "nn", ".", "Module", ")", ":", "\n", "# Based on timm https://github.com/rwightman/pytorch-image-models/tree/master/timm", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "backbone", "=", "None", ",", "out_idx", "=", "-", "1", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ChannelProcessing.forward": [[466, 483], ["x.reshape().permute", "fan.ChannelProcessing.q().reshape().permute", "x.reshape().permute", "fan.ChannelProcessing._gen_attn", "fan.ChannelProcessing.attn_drop", "fan.ChannelProcessing.norm_v().reshape().transpose", "fan.ChannelProcessing.repeat_interleave", "x.reshape", "fan.ChannelProcessing.q().reshape", "x.reshape", "fan.ChannelProcessing.norm_v().reshape", "fan.ChannelProcessing.q", "fan.ChannelProcessing.norm_v", "fan.ChannelProcessing.transpose", "fan.ChannelProcessing.mlp_v", "fan.ChannelProcessing.transpose", "fan.ChannelProcessing.transpose().reshape", "fan.ChannelProcessing.transpose"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA._gen_attn"], ["num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "backbone", "=", "None", ",", "out_idx", "=", "-", "1", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "False", ",", "feat_downsample", "=", "False", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "self", ".", "feat_downsample", "=", "feat_downsample", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "out_idx", "=", "out_idx", "\n", "norm_layer", "=", "norm_layer", "or", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "act_layer", "=", "act_layer", "or", "nn", ".", "GELU", "\n", "if", "backbone", "==", "None", ":", "\n", "            ", "self", ".", "patch_embed", "=", "ConvPatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "act_layer", "=", "act_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "HybridEmbed", "(", "backbone", "=", "backbone", ",", "patch_size", "=", "2", ",", "embed_dim", "=", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.ChannelProcessing.no_weight_decay": [[483, 486], ["None"], "methods", ["None"], ["\n", "\n", "", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "use_pos_embed", "=", "use_pos_embed", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FANBlock.__init__": [[511, 531], ["torch.Module.__init__", "norm_layer", "fan.TokenMixing", "norm_layer", "fan.ChannelProcessing", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "int", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["groups", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# Init weights", "\n", "", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n", "", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "@", "torch", ".", "jit", ".", "ignore", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FANBlock.forward": [[532, 547], ["fan.FANBlock.attn", "fan.FANBlock.mlp", "fan.FANBlock.norm1", "fan.FANBlock.drop_path", "fan.FANBlock.norm2", "fan.FANBlock.drop_path", "fan.FANBlock.downsample"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n", "\n", "", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n", "", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "out_index", "=", "[", "4", ",", "7", ",", "11", "]", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "# x is (B, N, C). (Hp, Hw) is (height in units of patches, width in units of patches)", "\n", "if", "isinstance", "(", "self", ".", "patch_embed", ",", "HybridEmbed", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN.__init__": [[599, 663], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "norm_layer", "timm.models.layers.trunc_normal_", "fan.FAN.apply", "fan.FAN.head.weight.data.mul_", "fan.FAN.head.bias.data.mul_", "functools.partial", "fan.ConvPatchEmbed", "fan.HybridEmbed", "fan.PositionalEncodingFourier", "fan.FAN.blocks.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "isinstance", "fan.OverlapPatchEmbed", "build_block", "fan.ClassAttentionBlock", "range"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "Hp", ",", "Wp", ")", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "cls_attn_blocks", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "self", ".", "blocks", ")", "-", "1", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "return", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "\n", "", "", "", "", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "if", "'model'", "in", "state_dict", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "# For consistency with timm's transformer models while being compatible with official weights source we rename", "\n", "# pos_embeder to pos_embed. Also account for use_pos_embed == False", "\n", "", "use_pos_embed", "=", "getattr", "(", "model", ",", "'pos_embed'", ",", "None", ")", "is", "not", "None", "\n", "pos_embed_keys", "=", "[", "k", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "'pos_embed'", ")", "]", "\n", "for", "k", "in", "pos_embed_keys", ":", "\n", "        ", "if", "use_pos_embed", ":", "\n", "            ", "state_dict", "[", "k", ".", "replace", "(", "'pos_embeder.'", ",", "'pos_embed.'", ")", "]", "=", "state_dict", ".", "pop", "(", "k", ")", "\n", "", "else", ":", "\n", "            ", "del", "state_dict", "[", "k", "]", "\n", "# timm's implementation of class attention in CaiT is slightly more efficient as it does not compute query vectors", "\n", "# for all tokens, just the class token. To use official weights source we must split qkv into q, k, v", "\n", "", "", "if", "'cls_attn_blocks.0.attn.qkv.weight'", "in", "state_dict", "and", "'cls_attn_blocks.0.attn.q.weight'", "in", "model", ".", "state_dict", "(", ")", ":", "\n", "        ", "num_ca_blocks", "=", "len", "(", "model", ".", "cls_attn_blocks", ")", "\n", "for", "i", "in", "range", "(", "num_ca_blocks", ")", ":", "\n", "            ", "qkv_weight", "=", "state_dict", ".", "pop", "(", "f'cls_attn_blocks.{i}.attn.qkv.weight'", ")", "\n", "qkv_weight", "=", "qkv_weight", ".", "reshape", "(", "3", ",", "-", "1", ",", "qkv_weight", ".", "shape", "[", "-", "1", "]", ")", "\n", "for", "j", ",", "subscript", "in", "enumerate", "(", "'qkv'", ")", ":", "\n", "                ", "state_dict", "[", "f'cls_attn_blocks.{i}.attn.{subscript}.weight'", "]", "=", "qkv_weight", "[", "j", "]", "\n", "", "qkv_bias", "=", "state_dict", ".", "pop", "(", "f'cls_attn_blocks.{i}.attn.qkv.bias'", ",", "None", ")", "\n", "if", "qkv_bias", "is", "not", "None", ":", "\n", "                ", "qkv_bias", "=", "qkv_bias", ".", "reshape", "(", "3", ",", "-", "1", ")", "\n", "for", "j", ",", "subscript", "in", "enumerate", "(", "'qkv'", ")", ":", "\n", "                    ", "state_dict", "[", "f'cls_attn_blocks.{i}.attn.{subscript}.bias'", "]", "=", "qkv_bias", "[", "j", "]", "\n", "", "", "", "", "return", "state_dict", "\n", "\n", "# FAN-Hybrid models", "\n", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n", "class", "fan_tiny_8_p4_hybrid", "(", "FAN", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "8", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "3", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n", "backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_tiny_8_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "192", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "7", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n", "class", "fan_small_12_p4_hybrid", "(", "FAN", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "10", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "3", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n", "backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_small_12_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "384", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "9", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ",", "feat_downsample", "=", "False", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n", "class", "fan_base_16_p4_hybrid", "(", "FAN", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN.init_weights": [[555, 559], ["isinstance", "mmdet.utils.get_root_logger", "mmcv.runner.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger"], ["# `pos_embed` (B, C, Hp, Wp), reshape -> (B, C, N), permute -> (B, N, C)", "\n", "            ", "pos_encoding", "=", "self", ".", "pos_embed", "(", "B", ",", "Hp", ",", "Wp", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "x", ".", "shape", "[", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", "+", "pos_encoding", "\n", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN._init_weights": [[664, 672], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "16", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "3", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n", "backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_base_16_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "448", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "15", ",", "feat_downsample", "=", "False", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN.no_weight_decay": [[673, 676], ["None"], "methods", ["None"], ["class", "fan_large_16_p4_hybrid", "(", "FAN", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "22", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "5", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN.get_classifier": [[677, 679], ["None"], "methods", ["None"], ["backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_large_16_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "480", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "18", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN.reset_classifier": [[680, 683], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["num_heads", "=", "10", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ",", "use_checkpoint", "=", "False", ")", "\n", "\n", "# FAN-ViT Models", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN.forward_features": [[684, 711], ["fan.FAN.patch_embed", "fan.FAN.pos_drop", "fan.FAN.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fan.FAN.pos_embed().reshape().permute", "blk", "fan.FAN.norm", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk", "fan.FAN.pos_embed().reshape", "fan.FAN.pos_embed"], "methods", ["None"], ["", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n", "class", "fan_small_12_p16_224", "(", "FAN", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "12", "\n", "super", "(", "fan_small_12_p16_224", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "384", ",", "depth", "=", "depth", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n", "class", "fan_base_18_p16_224", "(", "FAN", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "18", "\n", "super", "(", "fan_base_18_p16_224", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "448", ",", "depth", "=", "depth", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "se_style", "=", "True", ",", "out_idx", "=", "16", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ",", "use_checkpoint", "=", "False", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN.forward": [[712, 716], ["fan.FAN.forward_features", "fan.FAN.head"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FAN.get_last_selfattention": [[717, 747], ["fan.FAN.patch_embed", "fan.FAN.pos_drop", "enumerate", "fan.FAN.pos_embed().reshape().permute", "fan.FAN.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "len", "blk", "blk", "fan.FAN.pos_embed().reshape", "blk", "blk", "len", "fan.FAN.pos_embed"], "methods", ["None"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_tiny_8_p4_hybrid.__init__": [[675, 683], ["dict", "convnext_utils._create_hybrid_backbone", "fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["        ", "depth", "=", "22", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "5", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n", "backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_large_16_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "480", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "18", ",", "\n", "num_heads", "=", "10", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ",", "use_checkpoint", "=", "False", ")", "\n", "\n", "# FAN-ViT Models", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_small_12_p4_hybrid.__init__": [[686, 694], ["dict", "convnext_utils._create_hybrid_backbone", "fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "12", "\n", "super", "(", "fan_small_12_p16_224", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "384", ",", "depth", "=", "depth", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n", "class", "fan_base_18_p16_224", "(", "FAN", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_base_12_p4_hybrid.__init__": [[698, 706], ["dict", "convnext_utils._create_hybrid_backbone", "fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "se_style", "=", "True", ",", "out_idx", "=", "16", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ",", "use_checkpoint", "=", "False", ")", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_large_12_p4_hybrid.__init__": [[709, 717], ["dict", "convnext_utils._create_hybrid_backbone", "fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan._cfg": [[27, 35], ["None"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "\n", "def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", "1.0", ",", "'interpolation'", ":", "'bicubic'", ",", "'fixed_input_size'", ":", "True", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "'first_conv'", ":", "'patch_embed.proj.0.0'", ",", "'classifier'", ":", "'head'", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.conv3x3": [[80, 85], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Conv2d", "torch.BatchNorm2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution + batch norm\"\"\"", "\n", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "SyncBatchNorm", "(", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.checkpoint_filter_fn": [[748, 774], ["getattr", "len", "range", "k.startswith", "state_dict.pop", "model.state_dict", "state_dict.pop", "qkv_weight.reshape.reshape", "enumerate", "state_dict.pop", "qkv_bias.reshape.reshape", "enumerate", "k.replace"], "function", ["None"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.Mlp.__init__": [[92, 105], ["torch.Module.__init__", "act_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "GroupLinear", "GroupLinear"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "if", "group", "==", "1", ":", "\n", "            ", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc1", "=", "GroupLinear", "(", "in_features", ",", "hidden_features", ",", "group", ")", "\n", "self", ".", "fc2", "=", "GroupLinear", "(", "hidden_features", ",", "out_features", ",", "group", ")", "\n", "", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.Mlp.forward": [[106, 113], ["convnext_utils.Mlp.fc1", "convnext_utils.Mlp.act", "convnext_utils.Mlp.drop", "convnext_utils.Mlp.fc2", "convnext_utils.Mlp.drop"], "methods", ["None"], ["        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "", "", "class", "ConvMlp", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvMlp.__init__": [[82, 92], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "act_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "norm_layer", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["# if torch.jit.is_tracing():", "\n", "#     return True", "\n", "    ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "is_contiguous", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "is_contiguous", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "\n", "\n", "", "", "class", "Mlp", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvMlp.forward": [[93, 100], ["convnext_utils.ConvMlp.fc1", "convnext_utils.ConvMlp.norm", "convnext_utils.ConvMlp.act", "convnext_utils.ConvMlp.drop", "convnext_utils.ConvMlp.fc2"], "methods", ["None"], ["out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "if", "group", "==", "1", ":", "\n", "            ", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc1", "=", "GroupLinear", "(", "in_features", ",", "hidden_features", ",", "group", ")", "\n", "self", ".", "fc2", "=", "GroupLinear", "(", "hidden_features", ",", "out_features", ",", "group", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.LayerNorm2d.__init__": [[106, 108], ["torch.LayerNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.LayerNorm2d.forward": [[109, 118], ["convnext_utils._is_contiguous", "torch.layer_norm().permute", "torch.layer_norm().permute", "torch.layer_norm().permute", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "x.permute"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._is_contiguous"], ["x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "", "", "class", "ConvMlp", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" MLP using 1x1 convs that keeps spatial dims\n    \"\"\"", "\n", "def", "__init__", "(", "\n", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_layer", "=", "None", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXtBlock.__init__": [[136, 147], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "mlp_layer", "int", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "functools.partial", "functools.partial", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "r\"\"\" LayerNorm for channels_first tensors with 2d spatial dimensions (ie N, C, H, W).\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "normalized_shape", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "normalized_shape", ",", "eps", "=", "eps", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "_is_contiguous", "(", "x", ")", ":", "\n", "            ", "return", "F", ".", "layer_norm", "(", "\n", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "self", ".", "normalized_shape", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "eps", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "s", ",", "u", "=", "torch", ".", "var_mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXtBlock.forward": [[148, 163], ["convnext_utils.ConvNeXtBlock.conv_dw", "convnext_utils.ConvNeXtBlock.norm", "convnext_utils.ConvNeXtBlock.mlp", "x.mul.mul.permute", "convnext_utils.ConvNeXtBlock.norm", "convnext_utils.ConvNeXtBlock.mlp", "x.mul.mul.permute", "x.mul.mul.mul", "convnext_utils.ConvNeXtBlock.drop_path", "convnext_utils.ConvNeXtBlock.gamma.reshape"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["x", "=", "(", "x", "-", "u", ")", "*", "torch", ".", "rsqrt", "(", "s", "+", "self", ".", "eps", ")", "\n", "x", "=", "x", "*", "self", ".", "weight", "[", ":", ",", "None", ",", "None", "]", "+", "self", ".", "bias", "[", ":", ",", "None", ",", "None", "]", "\n", "return", "x", "\n", "\n", "\n", "", "", "", "class", "ConvNeXtBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXtStage.__init__": [[167, 185], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convnext_utils.ConvNeXtBlock", "range"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "dim", ",", "drop_path", "=", "0.", ",", "ls_init_value", "=", "1e-6", ",", "conv_mlp", "=", "True", ",", "mlp_ratio", "=", "4", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "norm_layer", ":", "\n", "            ", "norm_layer", "=", "partial", "(", "LayerNorm2d", ",", "eps", "=", "1e-6", ")", "if", "conv_mlp", "else", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "", "mlp_layer", "=", "ConvMlp", "if", "conv_mlp", "else", "Mlp", "\n", "self", ".", "use_conv_mlp", "=", "conv_mlp", "\n", "self", ".", "conv_dw", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "groups", "=", "dim", ")", "# depthwise conv", "\n", "self", ".", "norm", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "mlp", "=", "mlp_layer", "(", "dim", ",", "int", "(", "mlp_ratio", "*", "dim", ")", ",", "act_layer", "=", "nn", ".", "GELU", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "ls_init_value", "*", "torch", ".", "ones", "(", "dim", ")", ")", "if", "ls_init_value", ">", "0", "else", "None", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "conv_dw", "(", "x", ")", "\n", "if", "self", ".", "use_conv_mlp", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXtStage.forward": [[187, 191], ["convnext_utils.ConvNeXtStage.downsample", "convnext_utils.ConvNeXtStage.blocks"], "methods", ["None"], ["", "else", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXt.__init__": [[208, 275], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "timm.models.helpers.named_apply", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "x.tolist", "len", "stages.append", "functools.partial.", "torch.Identity", "torch.Identity", "torch.Identity", "functools.partial", "functools.partial", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "convnext_utils.ConvNeXtStage", "dict", "timm.models.layers.ClassifierHead", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "len", "sum", "timm.models.layers.SelectAdaptivePool2d", "functools.partial.", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["nn", ".", "Conv2d", "(", "in_chs", ",", "out_chs", ",", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "dp_rates", "=", "dp_rates", "or", "[", "0.", "]", "*", "depth", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "ConvNeXtBlock", "(", "\n", "dim", "=", "out_chs", ",", "drop_path", "=", "dp_rates", "[", "j", "]", ",", "ls_init_value", "=", "ls_init_value", ",", "conv_mlp", "=", "conv_mlp", ",", "\n", "norm_layer", "=", "norm_layer", "if", "conv_mlp", "else", "cl_norm_layer", ")", "\n", "for", "j", "in", "range", "(", "depth", ")", "]", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "ConvNeXt", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "r\"\"\" ConvNeXt\n        A PyTorch impl of : `A ConvNet for the 2020s`  - https://arxiv.org/pdf/2201.03545.pdf\n\n    Args:\n        in_chans (int): Number of input image channels. Default: 3\n        num_classes (int): Number of classes for classification head. Default: 1000\n        depths (tuple(int)): Number of blocks at each stage. Default: [3, 3, 9, 3]\n        dims (tuple(int)): Feature dimension at each stage. Default: [96, 192, 384, 768]\n        drop_rate (float): Head dropout rate\n        drop_path_rate (float): Stochastic depth rate. Default: 0.\n        ls_init_value (float): Init value for Layer Scale. Default: 1e-6.\n        head_init_scale (float): Init scaling value for classifier weights and biases. Default: 1.\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "global_pool", "=", "'avg'", ",", "output_stride", "=", "32", ",", "patch_size", "=", "4", ",", "\n", "depths", "=", "(", "3", ",", "3", ",", "9", ",", "3", ")", ",", "dims", "=", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "ls_init_value", "=", "1e-6", ",", "conv_mlp", "=", "True", ",", "use_head", "=", "True", ",", "\n", "head_init_scale", "=", "1.", ",", "head_norm_first", "=", "False", ",", "norm_layer", "=", "None", ",", "drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "output_stride", "==", "32", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "partial", "(", "LayerNorm2d", ",", "eps", "=", "1e-6", ")", "\n", "cl_norm_layer", "=", "norm_layer", "if", "conv_mlp", "else", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "            ", "assert", "conv_mlp", ",", "'If a norm_layer is specified, conv MLP must be used so all norm expect rank-4, channels-first input'", "\n", "cl_norm_layer", "=", "norm_layer", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "feature_info", "=", "[", "]", "\n", "\n", "# NOTE: this stem is a minimal form of ViT PatchEmbed, as used in SwinTransformer w/ patch_size = 4", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "dims", "[", "0", "]", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", ",", "\n", "norm_layer", "(", "dims", "[", "0", "]", ")", "\n", ")", "\n", "\n", "self", ".", "stages", "=", "nn", ".", "Sequential", "(", ")", "\n", "dp_rates", "=", "[", "x", ".", "tolist", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", ".", "split", "(", "depths", ")", "]", "\n", "curr_stride", "=", "patch_size", "\n", "prev_chs", "=", "dims", "[", "0", "]", "\n", "stages", "=", "[", "]", "\n", "# 4 feature resolution stages, each consisting of multiple residual blocks", "\n", "for", "i", "in", "range", "(", "len", "(", "depths", ")", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", ">", "0", "else", "1", "\n", "# FIXME support dilation / output_stride", "\n", "curr_stride", "*=", "stride", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXt.get_classifier": [[276, 278], ["None"], "methods", ["None"], ["out_chs", "=", "dims", "[", "i", "]", "\n", "stages", ".", "append", "(", "ConvNeXtStage", "(", "\n", "prev_chs", ",", "out_chs", ",", "stride", "=", "stride", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXt.reset_classifier": [[279, 292], ["isinstance", "timm.models.layers.ClassifierHead", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "timm.models.layers.SelectAdaptivePool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["depth", "=", "depths", "[", "i", "]", ",", "dp_rates", "=", "dp_rates", "[", "i", "]", ",", "ls_init_value", "=", "ls_init_value", ",", "conv_mlp", "=", "conv_mlp", ",", "\n", "norm_layer", "=", "norm_layer", ",", "cl_norm_layer", "=", "cl_norm_layer", ")", "\n", ")", "\n", "prev_chs", "=", "out_chs", "\n", "# NOTE feature_info use currently assumes stage 0 == stride 1, rest are stride 2", "\n", "self", ".", "feature_info", "+=", "[", "dict", "(", "num_chs", "=", "prev_chs", ",", "reduction", "=", "curr_stride", ",", "module", "=", "f'stages.{i}'", ")", "]", "\n", "", "self", ".", "stages", "=", "nn", ".", "Sequential", "(", "*", "stages", ")", "\n", "\n", "self", ".", "num_features", "=", "prev_chs", "\n", "\n", "if", "head_norm_first", ":", "\n", "# norm -> global pool -> fc ordering, like most other nets (not compat with FB weights)", "\n", "            ", "self", ".", "norm_pre", "=", "norm_layer", "(", "self", ".", "num_features", ")", "# final norm layer, before pooling", "\n", "if", "use_head", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXt.forward_features": [[294, 300], ["convnext_utils.ConvNeXt.stem", "convnext_utils.ConvNeXt.stages", "convnext_utils.ConvNeXt.norm_pre"], "methods", ["None"], ["", "", "else", ":", "\n", "# pool -> norm -> fc, the default ConvNeXt ordering (pretrained FB weights)", "\n", "            ", "self", ".", "norm_pre", "=", "nn", ".", "Identity", "(", ")", "\n", "if", "use_head", ":", "\n", "                ", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'global_pool'", ",", "SelectAdaptivePool2d", "(", "pool_type", "=", "global_pool", ")", ")", ",", "\n", "(", "'norm'", ",", "norm_layer", "(", "self", ".", "num_features", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.ConvNeXt.forward": [[301, 305], ["convnext_utils.ConvNeXt.forward_features", "convnext_utils.ConvNeXt.head"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features"], ["(", "'flatten'", ",", "nn", ".", "Flatten", "(", "1", ")", "if", "global_pool", "else", "nn", ".", "Identity", "(", ")", ")", ",", "\n", "(", "'drop'", ",", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", ")", ",", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", ")", "\n", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils._cfg": [[41, 49], ["None"], "function", ["None"], ["from", "timm", ".", "models", ".", "helpers", "import", "named_apply", ",", "build_model_with_cfg", "\n", "from", "timm", ".", "models", ".", "layers", "import", "trunc_normal_", ",", "ClassifierHead", ",", "SelectAdaptivePool2d", ",", "DropPath", "\n", "from", "timm", ".", "models", ".", "registry", "import", "register_model", "\n", "\n", "\n", "\n", "\n", "__all__", "=", "[", "'ConvNeXt'", "]", "# model_registry will add each entrypoint fn to this", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils._is_contiguous": [[69, 77], ["torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "tensor.is_contiguous", "tensor.is_contiguous"], "function", ["None"], ["\n", "convnext_base_in22k", "=", "_cfg", "(", "\n", "# url=\"https://dl.fbaipublicfiles.com/convnext/convnext_base_22k_224.pth\", num_classes=21841),", "\n", "url", "=", "\"pretrained/convnext_base_22k_224.pth\"", ",", "num_classes", "=", "21841", ")", ",", "\n", "convnext_large_in22k", "=", "_cfg", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/convnext/convnext_large_22k_224.pth\"", ",", "num_classes", "=", "21841", ")", ",", "\n", "convnext_xlarge_in22k", "=", "_cfg", "(", "\n", "url", "=", "\"https://dl.fbaipublicfiles.com/convnext/convnext_xlarge_22k_224.pth\"", ",", "num_classes", "=", "21841", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils._init_weights": [[307, 317], ["isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "module.weight.data.mul_", "module.bias.data.mul_"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_", "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["\n", "", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", ".", "fc", "\n", "\n", "", "def", "reset_classifier", "(", "self", ",", "num_classes", "=", "0", ",", "global_pool", "=", "'avg'", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "head", ",", "ClassifierHead", ")", ":", "\n", "# norm -> global pool -> fc", "\n", "            ", "self", ".", "head", "=", "ClassifierHead", "(", "\n", "self", ".", "num_features", ",", "num_classes", ",", "pool_type", "=", "global_pool", ",", "drop_rate", "=", "self", ".", "drop_rate", ")", "\n", "", "else", ":", "\n", "# pool -> norm -> fc", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils.checkpoint_filter_fn": [[319, 340], ["state_dict.items", "k.replace.replace", "re.sub", "re.sub", "k.replace.replace", "k.replace.replace", "k.replace.replace", "model.state_dict().keys", "k.replace.startswith", "k.replace.replace", "v.reshape.reshape", "model.state_dict", "model.state_dict"], "function", ["None"], ["(", "'global_pool'", ",", "SelectAdaptivePool2d", "(", "pool_type", "=", "global_pool", ")", ")", ",", "\n", "(", "'norm'", ",", "self", ".", "head", ".", "norm", ")", ",", "\n", "(", "'flatten'", ",", "nn", ".", "Flatten", "(", "1", ")", "if", "global_pool", "else", "nn", ".", "Identity", "(", ")", ")", ",", "\n", "(", "'drop'", ",", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", ")", ",", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", ")", "\n", "]", ")", ")", "\n", "\n", "", "", "def", "forward_features", "(", "self", ",", "x", ",", "return_feat", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "out_list", "=", "[", "]", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "stages", ")", ")", ":", "\n", "         ", "x", "=", "self", ".", "stages", "[", "i", "]", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "norm_pre", "(", "x", ")", "\n", "\n", "return", "x", ",", "out_list", "if", "return_feat", "else", "x", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.convnext_utils._create_hybrid_backbone": [[342, 350], ["timm.models.helpers.build_model_with_cfg", "dict"], "function", ["None"], ["\n", "", "", "def", "_init_weights", "(", "module", ",", "name", "=", "None", ",", "head_init_scale", "=", "1.0", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "trunc_normal_", "(", "module", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "trunc_normal_", "(", "module", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "if", "name", "and", "'head.'", "in", "name", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.SqueezeExcite.__init__": [[99, 108], ["torch.Module.__init__", "fan.make_divisible", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "act_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.make_divisible"], ["self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.SqueezeExcite.forward": [[109, 116], ["fan.SqueezeExcite.avg_pool", "fan.SqueezeExcite.conv_reduce", "fan.SqueezeExcite.act1", "fan.SqueezeExcite.conv_expand", "fan.SqueezeExcite.gate_fn"], "methods", ["None"], ["", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.SEMlp.__init__": [[119, 135], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "fan.DWConv", "torch.Parameter", "torch.Parameter", "torch.Parameter", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "fan.SEMlp.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ReLU", "torch.ReLU", "torch.ReLU", "fan.SqueezeExcite", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "class", "ClassAttn", "(", "nn", ".", "Module", ")", ":", "\n", "# taken from https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/vision_transformer.py", "\n", "# with slight modifications to do CA", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.SEMlp._init_weights": [[136, 150], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", "=", "self", ".", "q", "(", "x", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "reshape", "(", "B", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "v", "=", "self", ".", "v", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.SEMlp.forward": [[151, 162], ["fan.SEMlp.fc1", "fan.SEMlp.fc2", "fan.SEMlp.drop", "fan.SEMlp.se().reshape().permute", "fan.SEMlp.relu", "fan.SEMlp.drop", "fan.SEMlp.se().reshape", "fan.SEMlp.dwconv", "fan.SEMlp.se", "fan.SEMlp.permute().reshape", "fan.SEMlp.permute"], "methods", ["None"], ["\n", "x_cls", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "1", ",", "C", ")", "\n", "x_cls", "=", "self", ".", "proj", "(", "x_cls", ")", "\n", "x_cls", "=", "self", ".", "proj_drop", "(", "x_cls", ")", "\n", "\n", "return", "x_cls", "\n", "\n", "\n", "", "", "class", "ConvPatchEmbed", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Image to Patch Embedding using multiple convolutional layers\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "act_layer", "=", "nn", ".", "GELU", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FANBlock_SE.__init__": [[490, 503], ["torch.Module.__init__", "norm_layer", "fan.TokenMixing", "norm_layer", "fan.SEMlp", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "int", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["\n", "build_block", "=", "FANBlock", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "build_block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "drop_path_rate", ",", "norm_layer", "=", "norm_layer", ",", "eta", "=", "eta", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "cls_attn_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "ClassAttentionBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "eta", "=", "eta", ",", "tokens_norm", "=", "tokens_norm", ")", "\n", "for", "_", "in", "range", "(", "cls_attn_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.FANBlock_SE.forward": [[504, 510], ["fan.FANBlock_SE.attn", "fan.FANBlock_SE.mlp", "fan.FANBlock_SE.norm1", "fan.FANBlock_SE.drop_path", "fan.FANBlock_SE.norm2", "fan.FANBlock_SE.drop_path"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["if", "isinstance", "(", "self", ".", "patch_embed", ",", "HybridEmbed", ")", "and", "feat_downsample", ":", "\n", "            ", "self", ".", "learnable_downsample", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "embed_dim", ",", "\n", "out_channels", "=", "768", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.OverlapPatchEmbed.__init__": [[551, 565], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "fan.OverlapPatchEmbed.apply"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["", "else", ":", "\n", "            ", "x", ",", "(", "Hp", ",", "Wp", ")", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "use_pos_embed", ":", "\n", "# `pos_embed` (B, C, Hp, Wp), reshape -> (B, C, N), permute -> (B, N, C)", "\n", "            ", "pos_encoding", "=", "self", ".", "pos_embed", "(", "B", ",", "Hp", ",", "Wp", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "x", ".", "shape", "[", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", "+", "pos_encoding", "\n", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "idx", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "blk", ".", "H", ",", "blk", ".", "W", "=", "Hp", ",", "Wp", "\n", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.OverlapPatchEmbed._init_weights": [[566, 580], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["                ", "x", "=", "blk", "(", "x", ")", "\n", "", "Hp", ",", "Wp", "=", "blk", ".", "H", ",", "blk", ".", "W", "\n", "if", "idx", "in", "out_index", ":", "\n", "                ", "outs", ".", "append", "(", "x", ".", "reshape", "(", "B", ",", "Hp", ",", "Wp", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "for", "blk", "in", "self", ".", "cls_attn_blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "tmp", "=", "x", "[", ":", ",", "1", ":", ",", ":", "]", ".", "reshape", "(", "B", ",", "Hp", ",", "Wp", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "patch_embed", ",", "HybridEmbed", ")", "and", "self", ".", "feat_downsample", ":", "\n", "            ", "tmp", "=", "self", ".", "learnable_downsample", "(", "tmp", ")", "\n", "outs", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.OverlapPatchEmbed.forward": [[581, 592], ["fan.OverlapPatchEmbed.transpose().reshape", "fan.OverlapPatchEmbed.proj", "fan.OverlapPatchEmbed.flatten().transpose", "fan.OverlapPatchEmbed.norm", "fan.OverlapPatchEmbed.transpose", "fan.OverlapPatchEmbed.flatten"], "methods", ["None"], ["            ", "outs", ".", "append", "(", "x", "[", ":", ",", "1", ":", ",", ":", "]", ".", "reshape", "(", "B", ",", "Hp", ",", "Wp", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "", "return", "outs", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "def", "get_last_selfattention", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "# x is (B, N, C). (Hp, Hw) is (height in units of patches, width in units of patches)", "\n", "x", ",", "(", "Hp", ",", "Wp", ")", "=", "self", ".", "patch_embed", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid": [[87, 89], ["x.sigmoid_", "x.sigmoid"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid"], ["\n", "", "class", "Mlp", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.make_divisible": [[90, 97], ["max", "int"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "dwconv", "=", "DWConv", "(", "hidden_features", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan": [[776, 781], ["timm.models.helpers.build_model_with_cfg"], "function", ["None"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_tiny_12_p16_224": [[784, 792], ["dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_small_12_p16_224_se_attn": [[793, 801], ["dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_small_12_p16_224": [[802, 810], ["dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_base_18_p16_224": [[811, 819], ["dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_large_24_p16_224": [[820, 828], ["dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_tiny_8_p4_hybrid": [[833, 843], ["dict", "convnext_utils._create_hybrid_backbone", "dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_small_12_p4_hybrid": [[844, 856], ["dict", "convnext_utils._create_hybrid_backbone", "dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_base_16_p4_hybrid": [[857, 867], ["dict", "convnext_utils._create_hybrid_backbone", "dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_large_16_p4_hybrid": [[870, 880], ["dict", "convnext_utils._create_hybrid_backbone", "dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_Xlarge_16_p4_hybrid": [[882, 899], ["dict", "convnext_utils._create_hybrid_backbone", "dict", "fan._create_fan"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan._create_fan"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_swin_tiny_patch4_window7_224": [[901, 909], ["dict", "swin_utils._create_fan_swin_transformer"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils._create_fan_swin_transformer"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_swin_small_patch4_window7_224": [[911, 919], ["dict", "swin_utils._create_fan_swin_transformer"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils._create_fan_swin_transformer"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_swin_base_patch4_window7_224": [[920, 928], ["dict", "swin_utils._create_fan_swin_transformer"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils._create_fan_swin_transformer"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.fan_swin_large_patch4_window7_224": [[928, 936], ["dict", "swin_utils._create_fan_swin_transformer"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils._create_fan_swin_transformer"], []], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.WindowAttention.__init__": [[143, 176], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "swin_utils.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "self", ".", "linear", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "# add in conv in the block forward", "\n", "", "x", "=", "self", ".", "drop", "(", "self", ".", "gamma", "*", "self", ".", "dwconv", "(", "x", ",", "H", ",", "W", ")", ")", "+", "x", "\n", "# x = self.dwconv(x, H, W)", "\n", "# x = self.act(x)", "\n", "# x = self.drop(x)", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "", "", "class", "LPI", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Local Patch Interaction module that allows explicit communication between tokens in 3x3 windows to augment the\n    implicit communication performed by the block diagonal scatter attention. Implemented using 2 layers of separable\n    3x3 convolutions with GeLU and BatchNorm2d\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_features", ",", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "in_features", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.WindowAttention.forward": [[177, 209], ["swin_utils.WindowAttention.qkv().reshape().permute", "swin_utils.WindowAttention.unbind", "swin_utils.WindowAttention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "swin_utils.WindowAttention.attn_drop", "swin_utils.WindowAttention.proj", "swin_utils.WindowAttention.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "swin_utils.WindowAttention.view", "swin_utils.WindowAttention.softmax", "swin_utils.WindowAttention.softmax", "swin_utils.WindowAttention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "swin_utils.WindowAttention.view", "mask.unsqueeze().unsqueeze", "swin_utils.WindowAttention.qkv", "swin_utils.WindowAttention.relative_position_index.view", "mask.unsqueeze"], "methods", ["None"], ["self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_features", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_features", ",", "out_features", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "out_features", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "H", ":", "int", ",", "W", ":", "int", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "N", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "", "class", "ChannelSA_tmp3", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "\n", "sr_ratio", "=", "1", ",", "linear", "=", "False", ",", "share_atten", "=", "False", ",", "drop_path", "=", "0.", ",", "emlp", "=", "True", ",", "spatial_attn", "=", "False", ",", "\n", "mlp_hidden_dim", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "sampling_ratio", "=", "1", ",", "cha_sr_ratio", "=", "1", ",", "c_head_num", "=", "8", ")", ":", "\n", "        ", "\"\"\"\n            Three main modifications:\n                1. use random sampling to reduce spatial resolution.\n                2. add in channel dimension reduction.\n                3. move conv block into V matrix processing\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "num_heads", "=", "c_head_num", "or", "num_heads", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# self.scale = qk_scale or head_dim ** -0.5", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.PositionalEncodingFourier.__init__": [[216, 224], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["\n", "self", ".", "idx_q", "=", "self", ".", "idx_k", "=", "None", "\n", "self", ".", "offset", "=", "None", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n", "self", ".", "spatial_attn", "=", "spatial_attn", "\n", "\n", "\n", "# self.gamma = nn.Parameter(1. * torch.ones(dim), requires_grad=True)", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.PositionalEncodingFourier.forward": [[225, 240], ["torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "swin_utils.PositionalEncodingFourier.token_projection", "swin_utils.PositionalEncodingFourier.repeat", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos"], "methods", ["None"], ["\n", "# config of mlp for v processing", "\n", "# self.norm_attn = norm_layer(dim)", "\n", "if", "emlp", ":", "\n", "            ", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "mlp_v", "=", "FANMlp", "(", "in_features", "=", "dim", "//", "self", ".", "cha_sr_ratio", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ",", "linear", "=", "linear", ")", "\n", "self", ".", "norm_v", "=", "norm_layer", "(", "dim", "//", "self", ".", "cha_sr_ratio", ")", "\n", "\n", "", "if", "share_atten", ":", "\n", "            ", "self", ".", "adapt_conv", "=", "InvertedResidual", "(", "self", ".", "num_heads", ",", "self", ".", "num_heads", ",", "expand_ratio", "=", "3", ",", "kernel_size", "=", "3", ")", "\n", "# self.adapt_conv = Conv2dSamePadding(self.num_heads,self.num_heads, 3, 1)", "\n", "self", ".", "adapt_bn", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_heads", ")", "\n", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "1", ",", "bias", "=", "qkv_bias", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.FANMlp.__init__": [[241, 255], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "swin_utils.DWConv", "torch.Parameter", "torch.Parameter", "torch.Parameter", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "swin_utils.FANMlp.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "emlp", "=", "emlp", "\n", "if", "not", "emlp", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "", "self", ".", "linear", "=", "linear", "\n", "self", ".", "sr_ratio", "=", "sr_ratio", "\n", "if", "sr_ratio", ">", "1", ":", "\n", "            ", "self", ".", "sr", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "sr_ratio", ",", "stride", "=", "sr_ratio", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.FANMlp._init_weights": [[256, 270], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n", "# q = torch.nn.functional.normalize(q.transpose(-1, -2), dim=-1)", "\n", "# k = torch.nn.functional.normalize(k.transpose(-1, -2), dim=-1)", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.FANMlp.forward": [[271, 279], ["swin_utils.FANMlp.fc1", "swin_utils.FANMlp.drop", "swin_utils.FANMlp.fc2", "swin_utils.FANMlp.drop", "swin_utils.FANMlp.relu", "swin_utils.FANMlp.dwconv"], "methods", ["None"], ["        ", "q", "=", "q", ".", "softmax", "(", "-", "2", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "B", ",", "H", ",", "N", ",", "C", "=", "k", ".", "shape", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "k", ".", "softmax", "(", "-", "2", ")", ",", "(", "N", ",", "1", ")", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "# k = k.softmax(-2).mean(-1).unsqueeze(-1)", "\n", "\n", "if", "'sampling'", "in", "mode", "and", "sampling_step", ">", "1", ":", "\n", "            ", "shift_range", "=", "sampling_step", "\n", "if", "self", ".", "idx_q", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.DWConv.__init__": [[280, 292], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "act_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["                ", "shape", "=", "q", ".", "shape", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "[", "[", "[", "[", "i", "for", "i", "in", "range", "(", "0", ",", "shape", "[", "-", "1", "]", ",", "sampling_step", ")", "]", "]", "*", "shape", "[", "2", "]", "]", "*", "shape", "[", "1", "]", "]", "*", "shape", "[", "0", "]", ")", "\n", "if", "mode", "==", "'uniform_sampling'", ":", "\n", "                    ", "self", ".", "offset", "=", "nn", ".", "Parameter", "(", "F", ".", "normalize", "(", "torch", ".", "randn", "(", "idx", ".", "shape", ")", ",", "dim", "=", "-", "1", ")", "*", "shift_range", ",", "requires_grad", "=", "False", ")", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", "+", "self", ".", "offset", ",", "min", "=", "0", ",", "max", "=", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx", "=", "idx", "if", "q", ".", "get_device", "(", ")", "==", "-", "1", "else", "idx", ".", "cuda", "(", ")", "\n", "self", ".", "idx_q", "=", "nn", ".", "Parameter", "(", "idx", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx_k", "=", "nn", ".", "Parameter", "(", "idx", "[", ":", ",", ":", ",", ":", "shape", "[", "2", "]", "//", "self", ".", "cha_sr_ratio", ",", ":", "]", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "offset", "=", "F", ".", "normalize", "(", "torch", ".", "randn", "(", "idx", ".", "shape", ")", ",", "dim", "=", "-", "1", ")", "*", "shift_range", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", "+", "self", ".", "offset", ",", "min", "=", "0", ",", "max", "=", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx", "=", "idx", "if", "q", ".", "get_device", "(", ")", "==", "-", "1", "else", "idx", ".", "cuda", "(", ")", "\n", "self", ".", "idx_q", "=", "idx", ".", "clone", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.DWConv.forward": [[293, 302], ["x.reshape().permute.reshape().permute.permute().reshape", "swin_utils.DWConv.conv1", "swin_utils.DWConv.act", "swin_utils.DWConv.bn", "swin_utils.DWConv.conv2", "x.reshape().permute.reshape().permute.reshape().permute", "x.reshape().permute.reshape().permute.permute", "x.reshape().permute.reshape().permute.reshape"], "methods", ["None"], ["self", ".", "idx_k", "=", "idx", "[", ":", ",", ":", ",", ":", "shape", "[", "2", "]", "//", "self", ".", "cha_sr_ratio", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "self", ".", "idx_q", ".", "shape", "==", "q", ".", "shape", ":", "\n", "                ", "attn", "=", "q", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_q", ")", "@", "k", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_k", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "shape", "=", "q", ".", "shape", "\n", "attn", "=", "q", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_q", "[", ":", "shape", "[", "0", "]", ",", ":", ",", ":", ",", ":", "]", ")", "@", "k", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_k", "[", ":", "shape", "[", "0", "]", "]", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "attn", "=", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "q", "@", "k", ")", "\n", "", "return", "attn", "*", "self", ".", "temperature", "# ).softmax(-1)", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.ChannelProcessing.__init__": [[304, 329], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "swin_utils.FANMlp", "norm_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "swin_utils.ChannelProcessing.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "atten", "=", "None", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "if", "not", "self", ".", "share_atten", ":", "\n", "            ", "if", "self", ".", "spatial_attn", ":", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "else", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "# v = self.v(x).reshape(B, N, self.num_heads, C // self.num_heads // self.cha_sr_ratio).permute(0, 2, 1, 3)", "\n", "                ", "v", "=", "x", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "# import pdb;pdb.set_trace()", "\n", "", "", "if", "self", ".", "sr_ratio", ">", "1", ":", "\n", "            ", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x_", "=", "self", ".", "sr", "(", "x_", ")", ".", "reshape", "(", "B", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_", "=", "self", ".", "norm", "(", "x_", ")", "\n", "if", "self", ".", "share_atten", ":", "\n", "                ", "kv", "=", "self", ".", "kv", "(", "x_", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "share_atten", ":", "\n", "                ", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.ChannelProcessing._init_weights": [[330, 344], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["# k = self.k(x).reshape(B, N, self.num_heads,  self.num_heads // self.num_heads // self.cha_sr_ratio).permute(0, 2, 1, 3)", "\n", "# q = x.reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)", "\n", "k", "=", "x", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "", "", "if", "self", ".", "share_atten", ":", "\n", "            ", "v", "=", "kv", "[", "0", "]", "\n", "attn", "=", "self", ".", "adapt_bn", "(", "self", ".", "adapt_conv", "(", "atten", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "spatial_attn", ":", "\n", "                ", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "q", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "q", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.ChannelProcessing._gen_attn": [[344, 351], ["q.softmax().transpose.softmax().transpose.softmax().transpose", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "q.softmax().transpose.softmax().transpose.softmax"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid"], ["", "else", ":", "\n", "                ", "attn", "=", "self", ".", "_gen_attn", "(", "q", ",", "k", ",", "sampling_step", "=", "self", ".", "sampling_ratio", ")", "\n", "", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "# move mlp here to process v", "\n", "if", "self", ".", "emlp", ":", "\n", "            ", "Bv", ",", "Hd", ",", "Nv", ",", "Cv", "=", "v", ".", "shape", "\n", "# import pdb;pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.ChannelProcessing.forward": [[351, 368], ["x.reshape().permute", "swin_utils.ChannelProcessing.q().reshape().permute", "x.reshape().permute", "swin_utils.ChannelProcessing._gen_attn", "swin_utils.ChannelProcessing.attn_drop", "swin_utils.ChannelProcessing.norm_v().reshape().transpose", "swin_utils.ChannelProcessing.repeat_interleave", "x.reshape", "swin_utils.ChannelProcessing.q().reshape", "x.reshape", "swin_utils.ChannelProcessing.norm_v().reshape", "swin_utils.ChannelProcessing.q", "swin_utils.ChannelProcessing.norm_v", "swin_utils.ChannelProcessing.mlp_v", "swin_utils.ChannelProcessing.transpose", "swin_utils.ChannelProcessing.transpose().reshape", "swin_utils.ChannelProcessing.transpose"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA._gen_attn"], ["# import pdb;pdb.set_trace()", "\n", "v", "=", "self", ".", "norm_v", "(", "self", ".", "mlp_v", "(", "v", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", "*", "Cv", ")", ",", "H", "//", "self", ".", "sr_ratio", ",", "W", "//", "self", ".", "sr_ratio", ")", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", ",", "Cv", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# v = v + self.drop_path(self.mlp_v(self.norm_v(v.transpose(1, 2).reshape(Bv, Nv, Hd*Cv)), H//self.sr_ratio, W//self.sr_ratio)).reshape(Bv, Nv, Hd, Cv).transpose(1, 2)", "\n", "", "if", "self", ".", "spatial_attn", ":", "\n", "            ", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "", "else", ":", "\n", "# x = (attn @ v).transpose(1, 2).reshape(B, N, C)", "\n", "# import pdb; pdb.set_trace()", "\n", "            ", "repeat_time", "=", "N", "//", "attn", ".", "shape", "[", "-", "1", "]", "\n", "attn", "=", "attn", ".", "repeat_interleave", "(", "repeat_time", ",", "dim", "=", "-", "1", ")", "if", "attn", ".", "shape", "[", "-", "1", "]", ">", "1", "else", "attn", "\n", "x", "=", "(", "attn", "*", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "", "if", "not", "self", ".", "emlp", ":", "\n", "            ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "#         import pdb;pdb.set_trace()", "\n", "", "return", "x", "#,  attn * v.transpose(-1, -2) #attn", "\n", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.ChannelProcessing.no_weight_decay": [[368, 371], ["None"], "methods", ["None"], ["def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'temperature'", "}", "\n", "", "", "class", "ChannelSA", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformerBlock.__init__": [[388, 443], ["torch.Module.__init__", "norm_layer", "swin_utils.WindowAttention", "norm_layer", "int", "swin_utils.SwinTransformerBlock.register_buffer", "min", "min", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "timm.models.layers.Mlp", "swin_utils.ChannelProcessing", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "swin_utils.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "timm.models.layers.to_2tuple", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "float"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.window_partition"], ["\n", "self", ".", "cha_sr_ratio", "=", "cha_sr_ratio", "if", "num_heads", ">", "1", "else", "1", "\n", "\n", "self", ".", "share_atten", "=", "share_atten", "\n", "self", ".", "emlp", "=", "emlp", "\n", "\n", "self", ".", "idx_q", "=", "self", ".", "idx_k", "=", "None", "\n", "self", ".", "offset", "=", "None", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n", "self", ".", "spatial_attn", "=", "spatial_attn", "\n", "\n", "\n", "# self.gamma = nn.Parameter(1. * torch.ones(dim), requires_grad=True)", "\n", "\n", "# config of mlp for v processing", "\n", "if", "emlp", ":", "\n", "            ", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "mlp_v", "=", "FANMlp", "(", "in_features", "=", "dim", "//", "self", ".", "cha_sr_ratio", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ",", "linear", "=", "linear", ")", "\n", "self", ".", "norm_v", "=", "norm_layer", "(", "dim", "//", "self", ".", "cha_sr_ratio", ")", "\n", "\n", "", "if", "share_atten", ":", "\n", "            ", "self", ".", "adapt_conv", "=", "InvertedResidual", "(", "self", ".", "num_heads", ",", "self", ".", "num_heads", ",", "expand_ratio", "=", "3", ",", "kernel_size", "=", "3", ")", "\n", "# self.adapt_conv = Conv2dSamePadding(self.num_heads,self.num_heads, 3, 1)", "\n", "self", ".", "adapt_bn", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_heads", ")", "\n", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "1", ",", "bias", "=", "qkv_bias", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "//", "self", ".", "cha_sr_ratio", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "//", "self", ".", "cha_sr_ratio", ",", "bias", "=", "qkv_bias", ")", "\n", "", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "emlp", "=", "emlp", "\n", "if", "not", "emlp", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "", "self", ".", "linear", "=", "linear", "\n", "self", ".", "sr_ratio", "=", "sr_ratio", "\n", "if", "sr_ratio", ">", "1", ":", "\n", "            ", "self", ".", "sr", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "sr_ratio", ",", "stride", "=", "sr_ratio", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformerBlock.forward": [[444, 485], ["timm.models.layers._assert", "swin_utils.SwinTransformerBlock.norm1", "torch.roll.view", "torch.roll.view", "torch.roll.view", "swin_utils.window_partition", "x_windows.view.view.view", "swin_utils.SwinTransformerBlock.attn", "attn_windows.view.view.view", "swin_utils.window_reverse", "torch.roll.view", "torch.roll.view", "torch.roll.view", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "swin_utils.SwinTransformerBlock.drop_path", "swin_utils.SwinTransformerBlock.drop_path", "swin_utils.SwinTransformerBlock.drop_path", "swin_utils.SwinTransformerBlock.mlp", "swin_utils.SwinTransformerBlock.mlp", "swin_utils.SwinTransformerBlock.norm2", "swin_utils.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.window_partition", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.window_reverse", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n", "        ", "q", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "q", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "'sampling'", "in", "mode", "and", "sampling_step", ">", "1", ":", "\n", "            ", "shift_range", "=", "sampling_step", "\n", "if", "self", ".", "idx_q", "is", "None", ":", "\n", "                ", "shape", "=", "q", ".", "shape", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "[", "[", "[", "[", "i", "for", "i", "in", "range", "(", "0", ",", "shape", "[", "-", "1", "]", ",", "sampling_step", ")", "]", "]", "*", "shape", "[", "2", "]", "]", "*", "shape", "[", "1", "]", "]", "*", "shape", "[", "0", "]", ")", "\n", "if", "mode", "==", "'uniform_sampling'", ":", "\n", "                    ", "self", ".", "offset", "=", "nn", ".", "Parameter", "(", "F", ".", "normalize", "(", "torch", ".", "randn", "(", "idx", ".", "shape", ")", ",", "dim", "=", "-", "1", ")", "*", "shift_range", ",", "requires_grad", "=", "False", ")", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", "+", "self", ".", "offset", ",", "min", "=", "0", ",", "max", "=", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx", "=", "idx", "if", "q", ".", "get_device", "(", ")", "==", "-", "1", "else", "idx", ".", "cuda", "(", ")", "\n", "self", ".", "idx_q", "=", "nn", ".", "Parameter", "(", "idx", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx_k", "=", "nn", ".", "Parameter", "(", "idx", "[", ":", ",", ":", ",", ":", "shape", "[", "2", "]", "//", "self", ".", "cha_sr_ratio", ",", ":", "]", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "offset", "=", "F", ".", "normalize", "(", "torch", ".", "randn", "(", "idx", ".", "shape", ")", ",", "dim", "=", "-", "1", ")", "*", "shift_range", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", "+", "self", ".", "offset", ",", "min", "=", "0", ",", "max", "=", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx", "=", "idx", "if", "q", ".", "get_device", "(", ")", "==", "-", "1", "else", "idx", ".", "cuda", "(", ")", "\n", "self", ".", "idx_q", "=", "idx", ".", "clone", "(", ")", "\n", "self", ".", "idx_k", "=", "idx", "[", ":", ",", ":", ",", ":", "shape", "[", "2", "]", "//", "self", ".", "cha_sr_ratio", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "self", ".", "idx_q", ".", "shape", "==", "q", ".", "shape", ":", "\n", "                ", "attn", "=", "q", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_q", ")", "@", "k", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_k", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "shape", "=", "q", ".", "shape", "\n", "attn", "=", "q", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_q", "[", ":", "shape", "[", "0", "]", ",", ":", ",", ":", ",", ":", "]", ")", "@", "k", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_k", "[", ":", "shape", "[", "0", "]", "]", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "            ", "attn", "=", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "return", "(", "attn", "*", "self", ".", "temperature", ")", ".", "softmax", "(", "-", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "atten", "=", "None", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "if", "not", "self", ".", "share_atten", ":", "\n", "            ", "if", "self", ".", "spatial_attn", ":", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "else", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "                ", "v", "=", "self", ".", "v", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.PatchMerging.__init__": [[495, 501], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "share_atten", ":", "\n", "                ", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.PatchMerging.forward": [[502, 524], ["timm.models.layers._assert", "timm.models.layers._assert", "swin_utils.PatchMerging.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "swin_utils.PatchMerging.view", "swin_utils.PatchMerging.norm", "swin_utils.PatchMerging.reduction"], "methods", ["None"], ["k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "", "", "if", "self", ".", "share_atten", ":", "\n", "            ", "v", "=", "kv", "[", "0", "]", "\n", "attn", "=", "self", ".", "adapt_bn", "(", "self", ".", "adapt_conv", "(", "atten", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "spatial_attn", ":", "\n", "                ", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "q", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "q", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "attn", "=", "self", ".", "_gen_attn", "(", "q", ",", "k", ",", "sampling_step", "=", "self", ".", "sampling_ratio", ")", "\n", "", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "# move mlp here to process v", "\n", "if", "self", ".", "emlp", ":", "\n", "            ", "Bv", ",", "Hd", ",", "Nv", ",", "Cv", "=", "v", ".", "shape", "\n", "# import pdb;pdb.set_trace()", "\n", "v", "=", "self", ".", "norm_v", "(", "self", ".", "mlp_v", "(", "v", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", "*", "Cv", ")", ",", "H", "//", "self", ".", "sr_ratio", ",", "W", "//", "self", ".", "sr_ratio", ")", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", ",", "Cv", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# v = v + self.drop_path(self.mlp_v(self.norm_v(v.transpose(1, 2).reshape(Bv, Nv, Hd*Cv)), H//self.sr_ratio, W//self.sr_ratio)).reshape(Bv, Nv, Hd, Cv).transpose(1, 2)", "\n", "# ", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.PatchMerging.extra_repr": [[525, 527], ["None"], "methods", ["None"], ["", "if", "self", ".", "spatial_attn", ":", "\n", "            ", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.PatchMerging.flops": [[528, 533], ["None"], "methods", ["None"], ["# x = (attn @ v).transpose(1, 2).reshape(B, N, C)", "\n", "            ", "x", "=", "(", "attn", "@", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "", "if", "not", "self", ".", "emlp", ":", "\n", "            ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "#         import pdb;pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.BasicLayer.__init__": [[553, 577], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "downsample", "swin_utils.SwinTransformerBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.BasicLayer.forward": [[578, 587], ["swin_utils.BasicLayer.downsample", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting"], "methods", ["None"], ["self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.BasicLayer.extra_repr": [[588, 590], ["None"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformer.__init__": [[616, 685], ["torch.Module.__init__", "len", "int", "timm.models.layers.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_layer", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "weight_init.startswith", "swin_utils.PositionalEncodingFourier", "x.item", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "swin_utils.SwinTransformer.named_modules", "swin_utils.SwinTransformer.apply", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "swin_utils.BasicLayer", "math.log", "timm.models.vision_transformer._init_vit_weights", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["return", "x", "\n", "\n", "\n", "", "", "class", "SwinTransformerBlock", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" Swin Transformer Block.\n    Args:\n        dim (int): Number of input channels.\n        num_heads (int): Number of attention heads.\n        window_size (int): Window size.\n        shift_size (int): Shift size for SW-MSA.\n        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.\n        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True\n        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.\n        drop (float, optional): Dropout rate. Default: 0.0\n        attn_drop (float, optional): Attention dropout rate. Default: 0.0\n        drop_path (float, optional): Stochastic depth rate. Default: 0.0\n        act_layer (nn.Module, optional): Activation layer. Default: nn.GELU\n        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "mlp_type", "=", "None", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp_type", "=", "mlp_type", "\n", "if", "mlp_type", "==", "'Mlp'", ":", "\n", "            ", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlp", "=", "ChannelSA_tmp3", "(", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "\n", "drop_path", "=", "drop_path", ",", "mlp_hidden_dim", "=", "mlp_hidden_dim", ",", "emlp", "=", "True", ")", "\n", "", "self", ".", "H", "=", "None", "\n", "self", ".", "W", "=", "None", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "mask_matrix", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: Input feature, tensor size (B, H*W, C).\n            H, W: Spatial resolution of the input feature.\n            mask_matrix: Attention mask for cyclic shift.\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "H", ",", "W", "=", "self", ".", "H", ",", "self", ".", "W", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# pad feature maps to multiples of window size", "\n", "pad_l", "=", "pad_t", "=", "0", "\n", "pad_r", "=", "(", "self", ".", "window_size", "-", "W", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "pad_b", "=", "(", "self", ".", "window_size", "-", "H", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "pad_l", ",", "pad_r", ",", "pad_t", ",", "pad_b", ")", ")", "\n", "_", ",", "Hp", ",", "Wp", ",", "_", "=", "x", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformer.no_weight_decay": [[686, 689], ["None"], "methods", ["None"], ["# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "attn_mask", "=", "mask_matrix", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformer.no_weight_decay_keywords": [[690, 693], ["None"], "methods", ["None"], ["", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "attn_mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformer.get_classifier": [[694, 696], ["None"], "methods", ["None"], ["# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformer.reset_classifier": [[697, 700], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "attn_mask", ")", "# nW*B, window_size*window_size, C", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformer.forward_features": [[701, 714], ["swin_utils.SwinTransformer.patch_embed", "math.sqrt", "swin_utils.SwinTransformer.pos_drop", "swin_utils.SwinTransformer.layers", "swin_utils.SwinTransformer.norm", "swin_utils.SwinTransformer.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten.transpose", "torch.flatten.transpose", "torch.flatten.transpose", "swin_utils.SwinTransformer.absolute_pos_embed().reshape().permute", "swin_utils.SwinTransformer.absolute_pos_embed().reshape", "swin_utils.SwinTransformer.absolute_pos_embed"], "methods", ["None"], ["# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "Hp", ",", "Wp", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "\n", "", "if", "pad_r", ">", "0", "or", "pad_b", ">", "0", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.SwinTransformer.forward": [[715, 719], ["swin_utils.SwinTransformer.forward_features", "swin_utils.SwinTransformer.head"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features"], ["\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "if", "self", ".", "mlp_type", "==", "'Mlp'", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils._cfg": [[44, 52], ["None"], "function", ["None"], ["self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.window_partition": [[100, 112], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["self", ".", "eps", "=", "1e-6", "\n", "\n", "", "def", "forward", "(", "self", ",", "B", ":", "int", ",", "H", ":", "int", ",", "W", ":", "int", ")", ":", "\n", "        ", "device", "=", "self", ".", "token_projection", ".", "weight", ".", "device", "\n", "y_embed", "=", "torch", ".", "arange", "(", "1", ",", "H", "+", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "W", ")", "\n", "x_embed", "=", "torch", ".", "arange", "(", "1", ",", "W", "+", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "repeat", "(", "1", ",", "H", ",", "1", ")", "\n", "y_embed", "=", "y_embed", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "self", ".", "eps", ")", "*", "self", ".", "scale", "\n", "x_embed", "=", "x_embed", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "self", ".", "eps", ")", "*", "self", ".", "scale", "\n", "dim_t", "=", "torch", ".", "arange", "(", "self", ".", "hidden_dim", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "dim_t", "=", "self", ".", "temperature", "**", "(", "2", "*", "torch", ".", "floor", "(", "torch", ".", "div", "(", "dim_t", ",", "2", ")", ")", "/", "self", ".", "hidden_dim", ")", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_x", "=", "torch", ".", "stack", "(", "[", "pos_x", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", "]", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils.window_reverse": [[114, 129], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "pos", "=", "self", ".", "token_projection", "(", "pos", ")", "\n", "return", "pos", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "# (B, C, H, W)", "\n", "", "", "class", "FANMlp", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "linear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "# self.dwconv = DWConv(hidden_features)", "\n", "self", ".", "dwconv", "=", "LPI", "(", "hidden_features", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "linear", "=", "linear", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.models.swin_utils._create_fan_swin_transformer": [[721, 742], ["timm.models.helpers.overlay_external_default_cfg", "kwargs.pop", "kwargs.pop", "kwargs.get", "timm.models.helpers.build_model_with_cfg", "copy.deepcopy", "RuntimeError"], "function", ["None"], ["            ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n", "\n", "", "", "class", "PatchMerging", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\" Patch Merging Layer\n    Args:\n        dim (int): Number of input channels.\n        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm\n    \"\"\"", "\n", "def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.nvlabs_fan.necks.fpn.FPN.__init__": [[63, 155], ["dict", "torch.Module.__init__", "isinstance", "len", "upsample_cfg.copy", "isinstance", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "fpn.FPN.lateral_convs.append", "fpn.FPN.fpn_convs.append", "range", "len", "mmcv.cnn.ConvModule", "fpn.FPN.fpn_convs.append"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "num_outs", ",", "\n", "start_level", "=", "0", ",", "\n", "end_level", "=", "-", "1", ",", "\n", "add_extra_convs", "=", "False", ",", "\n", "extra_convs_on_inputs", "=", "False", ",", "\n", "relu_before_extra_convs", "=", "False", ",", "\n", "no_norm_on_lateral", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ",", "\n", "upsample_cfg", "=", "dict", "(", "mode", "=", "'nearest'", ")", ")", ":", "\n", "        ", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "in_channels", ",", "list", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_ins", "=", "len", "(", "in_channels", ")", "\n", "self", ".", "num_outs", "=", "num_outs", "\n", "self", ".", "relu_before_extra_convs", "=", "relu_before_extra_convs", "\n", "self", ".", "no_norm_on_lateral", "=", "no_norm_on_lateral", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "self", ".", "upsample_cfg", "=", "upsample_cfg", ".", "copy", "(", ")", "\n", "\n", "if", "end_level", "==", "-", "1", ":", "\n", "            ", "self", ".", "backbone_end_level", "=", "self", ".", "num_ins", "\n", "assert", "num_outs", ">=", "self", ".", "num_ins", "-", "start_level", "\n", "", "else", ":", "\n", "# if end_level < inputs, no extra level is allowed", "\n", "            ", "self", ".", "backbone_end_level", "=", "end_level", "\n", "assert", "end_level", "<=", "len", "(", "in_channels", ")", "\n", "assert", "num_outs", "==", "end_level", "-", "start_level", "\n", "", "self", ".", "start_level", "=", "start_level", "\n", "self", ".", "end_level", "=", "end_level", "\n", "self", ".", "add_extra_convs", "=", "add_extra_convs", "\n", "assert", "isinstance", "(", "add_extra_convs", ",", "(", "str", ",", "bool", ")", ")", "\n", "if", "isinstance", "(", "add_extra_convs", ",", "str", ")", ":", "\n", "# Extra_convs_source choices: 'on_input', 'on_lateral', 'on_output'", "\n", "            ", "assert", "add_extra_convs", "in", "(", "'on_input'", ",", "'on_lateral'", ",", "'on_output'", ")", "\n", "", "elif", "add_extra_convs", ":", "# True", "\n", "            ", "if", "extra_convs_on_inputs", ":", "\n", "# For compatibility with previous release", "\n", "# TODO: deprecate `extra_convs_on_inputs`", "\n", "                ", "self", ".", "add_extra_convs", "=", "'on_input'", "\n", "", "else", ":", "\n", "                ", "self", ".", "add_extra_convs", "=", "'on_output'", "\n", "\n", "", "", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "start_level", ",", "self", ".", "backbone_end_level", ")", ":", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", "[", "i", "]", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", "if", "not", "self", ".", "no_norm_on_lateral", "else", "None", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "fpn_conv", "=", "ConvModule", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "# add extra conv layers (e.g., RetinaNet)", "\n", "", "extra_levels", "=", "num_outs", "-", "self", ".", "backbone_end_level", "+", "self", ".", "start_level", "\n", "if", "self", ".", "add_extra_convs", "and", "extra_levels", ">=", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "extra_levels", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "self", ".", "add_extra_convs", "==", "'on_input'", ":", "\n", "                    ", "in_channels", "=", "self", ".", "in_channels", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "in_channels", "=", "out_channels", "\n", "", "extra_fpn_conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "extra_fpn_conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.necks.fpn.FPN.init_weights": [[157, 161], ["fpn.FPN.modules", "isinstance", "mmcv.cnn.xavier_init"], "methods", ["None"], ["", "", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "xavier_init", "(", "m", ",", "distribution", "=", "'uniform'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.necks.fpn.FPN.forward": [[162, 213], ["len", "range", "tuple", "len", "len", "lateral_conv", "len", "enumerate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate", "range", "range", "outs.append", "range", "outs.append", "torch.max_pool2d", "torch.max_pool2d", "outs.append", "outs.append", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "assert", "len", "(", "inputs", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "+", "self", ".", "start_level", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "# In some cases, fixing `scale factor` (e.g. 2) is preferred, but", "\n", "#  it cannot co-exist with `size` in `F.interpolate`.", "\n", "            ", "if", "'scale_factor'", "in", "self", ".", "upsample_cfg", ":", "\n", "                ", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "laterals", "[", "i", "]", ",", "\n", "**", "self", ".", "upsample_cfg", ")", "\n", "", "else", ":", "\n", "                ", "prev_shape", "=", "laterals", "[", "i", "-", "1", "]", ".", "shape", "[", "2", ":", "]", "\n", "laterals", "[", "i", "-", "1", "]", "+=", "F", ".", "interpolate", "(", "\n", "laterals", "[", "i", "]", ",", "size", "=", "prev_shape", ",", "**", "self", ".", "upsample_cfg", ")", "\n", "\n", "# build outputs", "\n", "# part 1: from original levels", "\n", "", "", "outs", "=", "[", "\n", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "for", "i", "in", "range", "(", "used_backbone_levels", ")", "\n", "]", "\n", "# part 2: add extra levels", "\n", "if", "self", ".", "num_outs", ">", "len", "(", "outs", ")", ":", "\n", "# use max pool to get more levels on top of outputs", "\n", "# (e.g., Faster R-CNN, Mask R-CNN)", "\n", "            ", "if", "not", "self", ".", "add_extra_convs", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "num_outs", "-", "used_backbone_levels", ")", ":", "\n", "                    ", "outs", ".", "append", "(", "F", ".", "max_pool2d", "(", "outs", "[", "-", "1", "]", ",", "1", ",", "stride", "=", "2", ")", ")", "\n", "# add conv layers on top of original feature maps (RetinaNet)", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "add_extra_convs", "==", "'on_input'", ":", "\n", "                    ", "extra_source", "=", "inputs", "[", "self", ".", "backbone_end_level", "-", "1", "]", "\n", "", "elif", "self", ".", "add_extra_convs", "==", "'on_lateral'", ":", "\n", "                    ", "extra_source", "=", "laterals", "[", "-", "1", "]", "\n", "", "elif", "self", ".", "add_extra_convs", "==", "'on_output'", ":", "\n", "                    ", "extra_source", "=", "outs", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "used_backbone_levels", "]", "(", "extra_source", ")", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "+", "1", ",", "self", ".", "num_outs", ")", ":", "\n", "                    ", "if", "self", ".", "relu_before_extra_convs", ":", "\n", "                        ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "F", ".", "relu", "(", "outs", "[", "-", "1", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                        ", "outs", ".", "append", "(", "self", ".", "fpn_convs", "[", "i", "]", "(", "outs", "[", "-", "1", "]", ")", ")", "\n", "", "", "", "", "return", "tuple", "(", "outs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.PositionalEncodingFourier.__init__": [[54, 62], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "hidden_dim", "=", "32", ",", "dim", "=", "768", ",", "temperature", "=", "10000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "token_projection", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "*", "2", ",", "dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "scale", "=", "2", "*", "math", ".", "pi", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.PositionalEncodingFourier.forward": [[63, 78], ["torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "fan.PositionalEncodingFourier.token_projection", "fan.PositionalEncodingFourier.repeat", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "B", ":", "int", ",", "H", ":", "int", ",", "W", ":", "int", ",", "fp32", "=", "True", ")", ":", "\n", "        ", "device", "=", "self", ".", "token_projection", ".", "weight", ".", "device", "\n", "y_embed", "=", "torch", ".", "arange", "(", "1", ",", "H", "+", "1", ",", "dtype", "=", "torch", ".", "float32", "if", "fp32", "else", "torch", ".", "float16", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "W", ")", "\n", "x_embed", "=", "torch", ".", "arange", "(", "1", ",", "W", "+", "1", ",", "dtype", "=", "torch", ".", "float32", "if", "fp32", "else", "torch", ".", "float16", ",", "device", "=", "device", ")", ".", "repeat", "(", "1", ",", "H", ",", "1", ")", "\n", "y_embed", "=", "y_embed", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "self", ".", "eps", ")", "*", "self", ".", "scale", "\n", "x_embed", "=", "x_embed", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "self", ".", "eps", ")", "*", "self", ".", "scale", "\n", "dim_t", "=", "torch", ".", "arange", "(", "self", ".", "hidden_dim", ",", "dtype", "=", "torch", ".", "float32", "if", "fp32", "else", "torch", ".", "float16", ",", "device", "=", "device", ")", "\n", "dim_t", "=", "self", ".", "temperature", "**", "(", "2", "*", "torch", ".", "div", "(", "dim_t", ",", "2", ")", "/", "self", ".", "hidden_dim", ")", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_x", "=", "torch", ".", "stack", "(", "[", "pos_x", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", "]", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos_y", "=", "torch", ".", "stack", "(", "[", "pos_y", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_y", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", "]", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "pos", "=", "self", ".", "token_projection", "(", "pos", ")", "\n", "return", "pos", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "# (B, C, H, W)", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.Mlp.__init__": [[89, 100], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "fan.DWConv", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "fan.Mlp.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "dwconv", "=", "DWConv", "(", "hidden_features", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.Mlp._init_weights": [[101, 115], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.Mlp.forward": [[116, 122], ["fan.Mlp.fc1", "fan.Mlp.fc2", "fan.Mlp.drop", "fan.Mlp.drop", "fan.Mlp.dwconv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "self", ".", "gamma", "*", "self", ".", "dwconv", "(", "x", ",", "H", ",", "W", ")", ")", "+", "x", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ClassAttn.__init__": [[127, 139], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ClassAttn.forward": [[140, 157], ["fan.ClassAttn.q().unsqueeze().reshape().permute", "fan.ClassAttn.k().reshape().permute", "fan.ClassAttn.v().reshape().permute", "fan.ClassAttn.softmax", "fan.ClassAttn.attn_drop", "fan.ClassAttn.proj", "fan.ClassAttn.proj_drop", "fan.ClassAttn.transpose", "fan.ClassAttn.q().unsqueeze().reshape", "fan.ClassAttn.k().reshape", "fan.ClassAttn.v().reshape", "fan.ClassAttn.q().unsqueeze", "fan.ClassAttn.k", "fan.ClassAttn.v", "fan.ClassAttn.q"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", "=", "self", ".", "q", "(", "x", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", ".", "reshape", "(", "B", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "v", "=", "self", ".", "v", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x_cls", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "1", ",", "C", ")", "\n", "x_cls", "=", "self", ".", "proj", "(", "x_cls", ")", "\n", "x_cls", "=", "self", ".", "proj_drop", "(", "x_cls", ")", "\n", "\n", "return", "x_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ConvPatchEmbed.__init__": [[162, 196], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "fan.conv3x3", "act_layer", "fan.conv3x3", "act_layer", "fan.conv3x3", "act_layer", "fan.conv3x3", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "fan.conv3x3", "act_layer", "fan.conv3x3", "act_layer", "fan.conv3x3", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "fan.conv3x3", "act_layer", "fan.conv3x3"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3"], ["def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "768", ",", "act_layer", "=", "nn", ".", "GELU", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "num_patches", "=", "(", "img_size", "[", "1", "]", "//", "patch_size", ")", "*", "(", "img_size", "[", "0", "]", "//", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "num_patches", "=", "num_patches", "\n", "\n", "if", "patch_size", "==", "16", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_chans", ",", "embed_dim", "//", "8", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "8", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "2", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "2", ",", "embed_dim", ",", "2", ")", ",", "\n", ")", "\n", "", "elif", "patch_size", "==", "8", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_chans", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "2", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "2", ",", "embed_dim", ",", "2", ")", ",", "\n", ")", "\n", "", "elif", "patch_size", "==", "4", ":", "\n", "            ", "self", ".", "proj", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_chans", ",", "embed_dim", "//", "4", ",", "2", ")", ",", "\n", "act_layer", "(", ")", ",", "\n", "conv3x3", "(", "embed_dim", "//", "4", ",", "embed_dim", "//", "1", ",", "2", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "(", "'For convolutional projection, patch size has to be in [8, 16]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ConvPatchEmbed.forward": [[197, 202], ["fan.ConvPatchEmbed.proj", "x.flatten().transpose.flatten().transpose.flatten().transpose", "x.flatten().transpose.flatten().transpose.flatten"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "Hp", ",", "Wp", "=", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "# (B, N, C)", "\n", "return", "x", ",", "(", "Hp", ",", "Wp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.DWConv.__init__": [[206, 218], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "act_layer", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.SyncBatchNorm", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_features", ",", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "in_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "SyncBatchNorm", "(", "in_features", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_features", ",", "out_features", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.DWConv.forward": [[219, 228], ["x.reshape().permute.reshape().permute.permute().reshape", "fan.DWConv.conv1", "fan.DWConv.act", "fan.DWConv.bn", "fan.DWConv.conv2", "x.reshape().permute.reshape().permute.reshape().permute", "x.reshape().permute.reshape().permute.permute", "x.reshape().permute.reshape().permute.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ":", "int", ",", "W", ":", "int", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "N", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ClassAttentionBlock.__init__": [[233, 253], ["torch.Module.__init__", "norm_layer", "fan.ClassAttn", "norm_layer", "timm.models.vision_transformer.Mlp", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "self", ".", "attn", "=", "ClassAttn", "(", "\n", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "mlp", "=", "MlpOri", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "int", "(", "dim", "*", "mlp_ratio", ")", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "\n", "if", "eta", "is", "not", "None", ":", "# LayerScale Initialization (no layerscale when None)", "\n", "            ", "self", ".", "gamma1", "=", "nn", ".", "Parameter", "(", "eta", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma2", "=", "nn", ".", "Parameter", "(", "eta", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gamma1", ",", "self", ".", "gamma2", "=", "1.0", ",", "1.0", "\n", "\n", "# See https://github.com/rwightman/pytorch-image-models/pull/747#issuecomment-877795721", "\n", "", "self", ".", "tokens_norm", "=", "tokens_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ClassAttentionBlock.forward": [[254, 270], ["fan.ClassAttentionBlock.norm1", "fan.ClassAttentionBlock.attn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fan.ClassAttentionBlock.drop_path", "fan.ClassAttentionBlock.norm2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fan.ClassAttentionBlock.mlp", "fan.ClassAttentionBlock.drop_path", "fan.ClassAttentionBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_attention", "=", "False", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "        ", "x_norm1", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x1", "=", "self", ".", "attn", "(", "x_norm1", ")", "\n", "x_attn", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x_norm1", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma1", "*", "x_attn", ")", "\n", "if", "self", ".", "tokens_norm", ":", "\n", "            ", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "norm2", "(", "x", "[", ":", ",", "0", ":", "1", "]", ")", ",", "x", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "", "x_res", "=", "x", "\n", "cls_token", "=", "x", "[", ":", ",", "0", ":", "1", "]", "\n", "cls_token", "=", "self", ".", "gamma2", "*", "self", ".", "mlp", "(", "cls_token", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "cls_token", ",", "x", "[", ":", ",", "1", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "x_res", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.TokenMixing.__init__": [[273, 291], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "fan.TokenMixing.apply"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "\n", "# config of mlp for v processing", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "2", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.TokenMixing._init_weights": [[292, 306], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.TokenMixing.forward": [[307, 327], ["fan.TokenMixing.q().reshape().permute", "fan.TokenMixing.kv().reshape().permute", "fan.TokenMixing.softmax", "fan.TokenMixing.attn_drop", "fan.TokenMixing.proj", "fan.TokenMixing.proj_drop", "k.transpose", "fan.TokenMixing.q().reshape", "fan.TokenMixing.kv().reshape", "fan.TokenMixing.q", "fan.TokenMixing.kv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "2", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "\n", "\n", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "attn", "=", "(", "q", "*", "self", ".", "scale", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "#* self.scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "Bv", ",", "Hd", ",", "Nv", ",", "Cv", "=", "v", ".", "shape", "\n", "# v = self.norm_v(self.mlp_v(v.transpose(1, 2).reshape(Bv, Nv, Hd*Cv), H//self.sr_ratio, W//self.sr_ratio)).reshape(Bv, Nv, Hd, Cv).transpose(1, 2)", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "\n", "return", "x", ",", "attn", "\n", "", "", "class", "HybridEmbed", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.HybridEmbed.__init__": [[331, 361], ["torch.Module.__init__", "isinstance", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "timm.models.layers.to_2tuple", "hasattr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fan.HybridEmbed.backbone.forward_features", "isinstance", "backbone.train", "backbone.eval", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fan.HybridEmbed.backbone.feature_info.channels"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer.train"], ["def", "__init__", "(", "self", ",", "backbone", ",", "img_size", "=", "224", ",", "patch_size", "=", "2", ",", "feature_size", "=", "None", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "384", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "backbone", ",", "nn", ".", "Module", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "self", ".", "backbone", "=", "backbone", "\n", "if", "feature_size", "is", "None", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# NOTE Most reliable way of determining output dims is to run forward pass", "\n", "                ", "training", "=", "backbone", ".", "training", "\n", "if", "training", ":", "\n", "                    ", "backbone", ".", "eval", "(", ")", "\n", "", "o", "=", "self", ".", "backbone", ".", "forward_features", "(", "torch", ".", "zeros", "(", "1", ",", "in_chans", ",", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", ")", "\n", "if", "isinstance", "(", "o", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                    ", "o", "=", "o", "[", "-", "1", "]", "# last feature if backbone outputs list/tuple of features", "\n", "", "feature_size", "=", "o", ".", "shape", "[", "-", "2", ":", "]", "\n", "feature_dim", "=", "o", ".", "shape", "[", "1", "]", "\n", "backbone", ".", "train", "(", "training", ")", "\n", "", "", "else", ":", "\n", "            ", "feature_size", "=", "to_2tuple", "(", "feature_size", ")", "\n", "if", "hasattr", "(", "self", ".", "backbone", ",", "'feature_info'", ")", ":", "\n", "                ", "feature_dim", "=", "self", ".", "backbone", ".", "feature_info", ".", "channels", "(", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "feature_dim", "=", "self", ".", "backbone", ".", "num_features", "\n", "", "", "assert", "feature_size", "[", "0", "]", "%", "patch_size", "[", "0", "]", "==", "0", "and", "feature_size", "[", "1", "]", "%", "patch_size", "[", "1", "]", "==", "0", "\n", "self", ".", "grid_size", "=", "(", "feature_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "feature_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "\n", "self", ".", "num_patches", "=", "self", ".", "grid_size", "[", "0", "]", "*", "self", ".", "grid_size", "[", "1", "]", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "feature_dim", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.HybridEmbed.forward": [[362, 372], ["fan.HybridEmbed.backbone.forward_features", "isinstance", "fan.HybridEmbed.proj().flatten().transpose", "fan.HybridEmbed.proj().flatten", "fan.HybridEmbed.proj"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_feat", "=", "False", ")", ":", "\n", "        ", "x", ",", "out_list", "=", "self", ".", "backbone", ".", "forward_features", "(", "x", ",", "return_feat", "=", "return_feat", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "x", "=", "x", "[", "-", "1", "]", "# last feature if backbone outputs list/tuple of features", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "if", "return_feat", ":", "\n", "            ", "return", "x", ",", "(", "H", "//", "self", ".", "patch_size", "[", "0", "]", ",", "W", "//", "self", ".", "patch_size", "[", "1", "]", ")", ",", "out_list", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "(", "H", "//", "self", ".", "patch_size", "[", "0", "]", ",", "W", "//", "self", ".", "patch_size", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ChannelProcessing.__init__": [[375, 392], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "fan.Mlp", "norm_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "fan.ChannelProcessing.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "mlp_hidden_dim", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "None", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "temperature", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_heads", ",", "1", ",", "1", ")", ")", "\n", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "mlp_v", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "self", ".", "norm_v", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ChannelProcessing._init_weights": [[392, 406], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ChannelProcessing._gen_attn": [[406, 413], ["q.softmax().transpose.softmax().transpose.softmax().transpose", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "q.softmax().transpose.softmax().transpose.softmax"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid"], ["", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n", "        ", "q", "=", "q", ".", "softmax", "(", "-", "2", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "_", ",", "_", ",", "N", ",", "_", "=", "k", ".", "shape", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "k", ".", "softmax", "(", "-", "2", ")", ",", "(", "N", ",", "1", ")", ")", "\n", "\n", "attn", "=", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "q", "@", "k", ")", "\n", "return", "attn", "*", "self", ".", "temperature", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "atten", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ChannelProcessing.forward": [[413, 429], ["x.reshape().permute", "fan.ChannelProcessing.q().reshape().permute", "x.reshape().permute", "fan.ChannelProcessing._gen_attn", "fan.ChannelProcessing.attn_drop", "fan.ChannelProcessing.norm_v().reshape().transpose", "fan.ChannelProcessing.repeat_interleave", "x.reshape", "fan.ChannelProcessing.q().reshape", "x.reshape", "fan.ChannelProcessing.norm_v().reshape", "fan.ChannelProcessing.transpose", "fan.ChannelProcessing.q", "fan.ChannelProcessing.norm_v", "fan.ChannelProcessing.mlp_v", "fan.ChannelProcessing.transpose", "fan.ChannelProcessing.transpose().reshape", "fan.ChannelProcessing.transpose"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA._gen_attn"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "atten", "=", "None", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "\n", "v", "=", "x", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "x", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "attn", "=", "self", ".", "_gen_attn", "(", "q", ",", "k", ")", "\n", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "Bv", ",", "Hd", ",", "Nv", ",", "Cv", "=", "v", ".", "shape", "\n", "v", "=", "self", ".", "norm_v", "(", "self", ".", "mlp_v", "(", "v", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", "*", "Cv", ")", ",", "H", ",", "W", ")", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", ",", "Cv", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "repeat_time", "=", "N", "//", "attn", ".", "shape", "[", "-", "1", "]", "\n", "attn", "=", "attn", ".", "repeat_interleave", "(", "repeat_time", ",", "dim", "=", "-", "1", ")", "if", "attn", ".", "shape", "[", "-", "1", "]", ">", "1", "else", "attn", "\n", "x", "=", "(", "attn", "*", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "return", "x", ",", "attn", "*", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "", "@", "torch", ".", "jit", ".", "ignore", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.ChannelProcessing.no_weight_decay": [[429, 432], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'temperature'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FANBlock.__init__": [[434, 450], ["torch.Module.__init__", "norm_layer", "fan.TokenMixing", "norm_layer", "mlp_block", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "int", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "False", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "eta", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "TokenMixing", "(", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "\n", "mlp_block", "=", "ChannelProcessing", "\n", "self", ".", "mlp", "=", "mlp_block", "(", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", ",", "drop", "=", "drop", ",", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", ")", "\n", "\n", "self", ".", "gamma1", "=", "nn", ".", "Parameter", "(", "eta", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "gamma2", "=", "nn", ".", "Parameter", "(", "eta", "*", "torch", ".", "ones", "(", "dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "H", "=", "None", "\n", "self", ".", "W", "=", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "attn", "=", "None", ",", "return_attention", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FANBlock.forward": [[450, 460], ["fan.FANBlock.attn", "fan.FANBlock.mlp", "fan.FANBlock.norm1", "fan.FANBlock.drop_path", "fan.FANBlock.norm2", "fan.FANBlock.drop_path"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn", "=", "None", ",", "return_attention", "=", "False", ")", ":", "\n", "        ", "H", ",", "W", "=", "self", ".", "H", ",", "self", ".", "W", "\n", "x_new", ",", "attn", "=", "self", ".", "attn", "(", "self", ".", "norm1", "(", "x", ")", ",", "H", ",", "W", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma1", "*", "x_new", ")", "\n", "x_new", ",", "attn", "=", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ",", "H", ",", "W", ",", "atten", "=", "attn", ")", "\n", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "gamma2", "*", "x_new", ")", "\n", "self", ".", "H", ",", "self", ".", "W", "=", "H", ",", "W", "\n", "if", "return_attention", ":", "\n", "            ", "return", "attn", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN.__init__": [[465, 516], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "timm.models.layers.trunc_normal_", "fan.FAN.apply", "functools.partial", "fan.ConvPatchEmbed", "fan.HybridEmbed", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fan.PositionalEncodingFourier", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "build_block", "fan.ClassAttentionBlock", "range", "range"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["    ", "def", "__init__", "(", "self", ",", "img_size", "=", "224", ",", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "768", ",", "depth", "=", "12", ",", "\n", "num_heads", "=", "12", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "backbone", "=", "None", ",", "out_idx", "=", "-", "1", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "False", ",", "feat_downsample", "=", "False", ",", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "img_size", "=", "to_2tuple", "(", "img_size", ")", "\n", "self", ".", "feat_downsample", "=", "feat_downsample", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_features", "=", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "out_idx", "=", "out_idx", "\n", "norm_layer", "=", "norm_layer", "or", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "act_layer", "=", "act_layer", "or", "nn", ".", "GELU", "\n", "if", "backbone", "==", "None", ":", "\n", "            ", "self", ".", "patch_embed", "=", "ConvPatchEmbed", "(", "\n", "img_size", "=", "img_size", ",", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "act_layer", "=", "act_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "patch_embed", "=", "HybridEmbed", "(", "backbone", "=", "backbone", ",", "patch_size", "=", "2", ",", "embed_dim", "=", "embed_dim", ")", "\n", "\n", "\n", "", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "use_pos_embed", "=", "use_pos_embed", "\n", "if", "use_pos_embed", ":", "\n", "            ", "self", ".", "pos_embed", "=", "PositionalEncodingFourier", "(", "dim", "=", "embed_dim", ")", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "build_block", "=", "FANBlock", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "build_block", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "drop_path", "=", "drop_path_rate", ",", "norm_layer", "=", "norm_layer", ",", "eta", "=", "eta", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "cls_attn_blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "ClassAttentionBlock", "(", "\n", "dim", "=", "embed_dim", ",", "num_heads", "=", "num_heads", ",", "mlp_ratio", "=", "mlp_ratio", ",", "qkv_bias", "=", "qkv_bias", ",", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "act_layer", "=", "act_layer", ",", "norm_layer", "=", "norm_layer", ",", "eta", "=", "eta", ",", "tokens_norm", "=", "tokens_norm", ")", "\n", "for", "_", "in", "range", "(", "cls_attn_layers", ")", "]", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "patch_embed", ",", "HybridEmbed", ")", "and", "feat_downsample", ":", "\n", "            ", "self", ".", "learnable_downsample", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "embed_dim", ",", "\n", "out_channels", "=", "768", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "# Init weights", "\n", "", "trunc_normal_", "(", "self", ".", "cls_token", ",", "std", "=", ".02", ")", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN.init_weights": [[517, 521], ["isinstance", "mmseg.utils.get_root_logger", "mmcv.runner.load_checkpoint"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN._init_weights": [[522, 530], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN.no_weight_decay": [[531, 534], ["None"], "methods", ["None"], ["", "", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'pos_embed'", ",", "'cls_token'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN.get_classifier": [[535, 537], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN.reset_classifier": [[538, 541], ["torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", ",", "global_pool", "=", "''", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN.forward_features": [[542, 584], ["isinstance", "fan.FAN.pos_drop", "enumerate", "fan.FAN.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x[].reshape().permute().contiguous", "fan.FAN.patch_embed", "fan.FAN.patch_embed", "fan.FAN.pos_embed().reshape().permute", "blk", "isinstance", "fan.FAN.learnable_downsample", "outs.append", "outs.append", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk", "outs.append", "x[].reshape().permute", "x[].reshape().permute().contiguous", "fan.FAN.pos_embed().reshape", "blk.reshape().permute().contiguous", "x[].reshape", "x[].reshape().permute", "fan.FAN.pos_embed", "blk.reshape().permute", "x[].reshape", "blk.reshape"], "methods", ["None"], ["", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "out_index", "=", "[", "4", ",", "7", ",", "11", "]", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "# x is (B, N, C). (Hp, Hw) is (height in units of patches, width in units of patches)", "\n", "if", "isinstance", "(", "self", ".", "patch_embed", ",", "HybridEmbed", ")", ":", "\n", "            ", "x", ",", "(", "Hp", ",", "Wp", ")", ",", "out_list", "=", "self", ".", "patch_embed", "(", "x", ",", "return_feat", "=", "True", ")", "\n", "outs", "=", "outs", "+", "out_list", "\n", "out_index", "=", "[", "self", ".", "out_idx", "]", "\n", "", "else", ":", "\n", "            ", "x", ",", "(", "Hp", ",", "Wp", ")", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "use_pos_embed", ":", "\n", "# `pos_embed` (B, C, Hp, Wp), reshape -> (B, C, N), permute -> (B, N, C)", "\n", "            ", "pos_encoding", "=", "self", ".", "pos_embed", "(", "B", ",", "Hp", ",", "Wp", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "x", ".", "shape", "[", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", "+", "pos_encoding", "\n", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "idx", ",", "blk", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "blk", ".", "H", ",", "blk", ".", "W", "=", "Hp", ",", "Wp", "\n", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "Hp", ",", "Wp", "=", "blk", ".", "H", ",", "blk", ".", "W", "\n", "if", "idx", "in", "out_index", ":", "\n", "                ", "outs", ".", "append", "(", "x", ".", "reshape", "(", "B", ",", "Hp", ",", "Wp", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "for", "blk", "in", "self", ".", "cls_attn_blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ")", "\n", "", "tmp", "=", "x", "[", ":", ",", "1", ":", ",", ":", "]", ".", "reshape", "(", "B", ",", "Hp", ",", "Wp", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "patch_embed", ",", "HybridEmbed", ")", "and", "self", ".", "feat_downsample", ":", "\n", "            ", "tmp", "=", "self", ".", "learnable_downsample", "(", "tmp", ")", "\n", "outs", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "            ", "outs", ".", "append", "(", "x", "[", ":", ",", "1", ":", ",", ":", "]", ".", "reshape", "(", "B", ",", "Hp", ",", "Wp", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN.forward": [[585, 588], ["fan.FAN.forward_features"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.FAN.get_last_selfattention": [[589, 612], ["fan.FAN.patch_embed", "fan.FAN.pos_drop", "fan.FAN.cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "fan.FAN.pos_embed().reshape().permute", "blk", "blk", "blk", "fan.FAN.pos_embed().reshape", "len", "fan.FAN.pos_embed"], "methods", ["None"], ["", "def", "get_last_selfattention", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "# x is (B, N, C). (Hp, Hw) is (height in units of patches, width in units of patches)", "\n", "x", ",", "(", "Hp", ",", "Wp", ")", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "if", "self", ".", "use_pos_embed", ":", "\n", "# `pos_embed` (B, C, Hp, Wp), reshape -> (B, C, N), permute -> (B, N, C)", "\n", "            ", "pos_encoding", "=", "self", ".", "pos_embed", "(", "B", ",", "Hp", ",", "Wp", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "x", ".", "shape", "[", "1", "]", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", "+", "pos_encoding", "\n", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "x", "=", "blk", "(", "x", ",", "Hp", ",", "Wp", ")", "\n", "\n", "", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "for", "i", ",", "blk", "in", "enumerate", "(", "self", ".", "cls_attn_blocks", ")", ":", "\n", "            ", "if", "i", "<", "len", "(", "self", ".", "blocks", ")", "-", "1", ":", "\n", "                ", "x", "=", "blk", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "return", "blk", "(", "x", ",", "return_attention", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.fan_tiny_8_p4_hybrid.__init__": [[644, 652], ["dict", "convnext_utils._create_hybrid_backbone", "fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "8", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "3", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n", "backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_tiny_8_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "192", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "7", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.fan_small_12_p4_hybrid.__init__": [[654, 662], ["dict", "convnext_utils._create_hybrid_backbone", "fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "10", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "3", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n", "backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_small_12_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "384", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "9", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ",", "feat_downsample", "=", "False", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.fan_base_16_p4_hybrid.__init__": [[664, 672], ["dict", "convnext_utils._create_hybrid_backbone", "fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "16", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "3", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n", "backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_base_16_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "448", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "15", ",", "feat_downsample", "=", "False", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.fan_large_16_p4_hybrid.__init__": [[674, 682], ["dict", "convnext_utils._create_hybrid_backbone", "fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "22", "\n", "model_args", "=", "dict", "(", "depths", "=", "[", "3", ",", "5", "]", ",", "dims", "=", "[", "128", ",", "256", ",", "512", ",", "1024", "]", ",", "use_head", "=", "False", ")", "\n", "backbone", "=", "_create_hybrid_backbone", "(", "pretrained", "=", "False", ",", "pretrained_strict", "=", "False", ",", "**", "model_args", ")", "\n", "super", "(", "fan_large_16_p4_hybrid", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "480", ",", "depth", "=", "depth", ",", "backbone", "=", "backbone", ",", "out_idx", "=", "18", ",", "\n", "num_heads", "=", "10", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ",", "use_checkpoint", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.fan_small_12_p16_224.__init__": [[686, 692], ["fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "12", "\n", "super", "(", "fan_small_12_p16_224", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "384", ",", "depth", "=", "depth", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ")", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.fan_base_18_p16_224.__init__": [[694, 700], ["fan.FAN.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "depth", "=", "18", "\n", "super", "(", "fan_base_18_p16_224", ",", "self", ")", ".", "__init__", "(", "\n", "patch_size", "=", "16", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "embed_dim", "=", "448", ",", "depth", "=", "depth", ",", "\n", "num_heads", "=", "8", ",", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "drop_rate", "=", "0.", ",", "attn_drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "se_style", "=", "True", ",", "out_idx", "=", "16", ",", "\n", "act_layer", "=", "None", ",", "norm_layer", "=", "None", ",", "cls_attn_layers", "=", "2", ",", "use_pos_embed", "=", "True", ",", "eta", "=", "1.", ",", "tokens_norm", "=", "True", ",", "use_checkpoint", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan._cfg": [[29, 37], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "None", ",", "\n", "'crop_pct'", ":", "1.0", ",", "'interpolation'", ":", "'bicubic'", ",", "'fixed_input_size'", ":", "True", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "'first_conv'", ":", "'patch_embed.proj.0.0'", ",", "'classifier'", ":", "'head'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.conv3x3": [[80, 85], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Conv2d", "torch.SyncBatchNorm"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution + batch norm\"\"\"", "\n", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "SyncBatchNorm", "(", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.fan.checkpoint_filter_fn": [[613, 640], ["getattr", "len", "range", "k.startswith", "state_dict.pop", "model.state_dict", "state_dict.pop", "qkv_weight.reshape.reshape", "enumerate", "state_dict.pop", "qkv_bias.reshape.reshape", "enumerate", "k.replace"], "function", ["None"], ["", "", "", "", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "if", "'model'", "in", "state_dict", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "# For consistency with timm's transformer models while being compatible with official weights source we rename", "\n", "# pos_embeder to pos_embed. Also account for use_pos_embed == False", "\n", "", "use_pos_embed", "=", "getattr", "(", "model", ",", "'pos_embed'", ",", "None", ")", "is", "not", "None", "\n", "pos_embed_keys", "=", "[", "k", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "'pos_embed'", ")", "]", "\n", "for", "k", "in", "pos_embed_keys", ":", "\n", "        ", "if", "use_pos_embed", ":", "\n", "            ", "state_dict", "[", "k", ".", "replace", "(", "'pos_embeder.'", ",", "'pos_embed.'", ")", "]", "=", "state_dict", ".", "pop", "(", "k", ")", "\n", "", "else", ":", "\n", "            ", "del", "state_dict", "[", "k", "]", "\n", "# timm's implementation of class attention in CaiT is slightly more efficient as it does not compute query vectors", "\n", "# for all tokens, just the class token. To use official weights source we must split qkv into q, k, v", "\n", "", "", "if", "'cls_attn_blocks.0.attn.qkv.weight'", "in", "state_dict", "and", "'cls_attn_blocks.0.attn.q.weight'", "in", "model", ".", "state_dict", "(", ")", ":", "\n", "        ", "num_ca_blocks", "=", "len", "(", "model", ".", "cls_attn_blocks", ")", "\n", "for", "i", "in", "range", "(", "num_ca_blocks", ")", ":", "\n", "            ", "qkv_weight", "=", "state_dict", ".", "pop", "(", "f'cls_attn_blocks.{i}.attn.qkv.weight'", ")", "\n", "qkv_weight", "=", "qkv_weight", ".", "reshape", "(", "3", ",", "-", "1", ",", "qkv_weight", ".", "shape", "[", "-", "1", "]", ")", "\n", "for", "j", ",", "subscript", "in", "enumerate", "(", "'qkv'", ")", ":", "\n", "                ", "state_dict", "[", "f'cls_attn_blocks.{i}.attn.{subscript}.weight'", "]", "=", "qkv_weight", "[", "j", "]", "\n", "", "qkv_bias", "=", "state_dict", ".", "pop", "(", "f'cls_attn_blocks.{i}.attn.qkv.bias'", ",", "None", ")", "\n", "if", "qkv_bias", "is", "not", "None", ":", "\n", "                ", "qkv_bias", "=", "qkv_bias", ".", "reshape", "(", "3", ",", "-", "1", ")", "\n", "for", "j", ",", "subscript", "in", "enumerate", "(", "'qkv'", ")", ":", "\n", "                    ", "state_dict", "[", "f'cls_attn_blocks.{i}.attn.{subscript}.bias'", "]", "=", "qkv_bias", "[", "j", "]", "\n", "", "", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.Mlp.__init__": [[40, 48], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.Mlp.forward": [[49, 56], ["swin_utils.Mlp.fc1", "swin_utils.Mlp.act", "swin_utils.Mlp.drop", "swin_utils.Mlp.fc2", "swin_utils.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.PositionalEncodingFourier.__init__": [[93, 101], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "hidden_dim", "=", "32", ",", "dim", "=", "768", ",", "temperature", "=", "10000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "token_projection", "=", "nn", ".", "Conv2d", "(", "hidden_dim", "*", "2", ",", "dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "scale", "=", "2", "*", "math", ".", "pi", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.PositionalEncodingFourier.forward": [[102, 117], ["torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange().repeat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.stack().flatten", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "torch.cat().permute", "swin_utils.PositionalEncodingFourier.token_projection", "swin_utils.PositionalEncodingFourier.repeat", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "pos_x[].sin", "pos_x[].cos", "pos_y[].sin", "pos_y[].cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "B", ":", "int", ",", "H", ":", "int", ",", "W", ":", "int", ")", ":", "\n", "        ", "device", "=", "self", ".", "token_projection", ".", "weight", ".", "device", "\n", "y_embed", "=", "torch", ".", "arange", "(", "1", ",", "H", "+", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "W", ")", "\n", "x_embed", "=", "torch", ".", "arange", "(", "1", ",", "W", "+", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "repeat", "(", "1", ",", "H", ",", "1", ")", "\n", "y_embed", "=", "y_embed", "/", "(", "y_embed", "[", ":", ",", "-", "1", ":", ",", ":", "]", "+", "self", ".", "eps", ")", "*", "self", ".", "scale", "\n", "x_embed", "=", "x_embed", "/", "(", "x_embed", "[", ":", ",", ":", ",", "-", "1", ":", "]", "+", "self", ".", "eps", ")", "*", "self", ".", "scale", "\n", "dim_t", "=", "torch", ".", "arange", "(", "self", ".", "hidden_dim", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "dim_t", "=", "self", ".", "temperature", "**", "(", "2", "*", "torch", ".", "floor", "(", "torch", ".", "div", "(", "dim_t", ",", "2", ")", ")", "/", "self", ".", "hidden_dim", ")", "\n", "pos_x", "=", "x_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_y", "=", "y_embed", "[", ":", ",", ":", ",", ":", ",", "None", "]", "/", "dim_t", "\n", "pos_x", "=", "torch", ".", "stack", "(", "[", "pos_x", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_x", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", "]", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos_y", "=", "torch", ".", "stack", "(", "[", "pos_y", "[", ":", ",", ":", ",", ":", ",", "0", ":", ":", "2", "]", ".", "sin", "(", ")", ",", "pos_y", "[", ":", ",", ":", ",", ":", ",", "1", ":", ":", "2", "]", ".", "cos", "(", ")", "]", ",", "dim", "=", "4", ")", ".", "flatten", "(", "3", ")", "\n", "pos", "=", "torch", ".", "cat", "(", "(", "pos_y", ",", "pos_x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "pos", "=", "self", ".", "token_projection", "(", "pos", ")", "\n", "return", "pos", ".", "repeat", "(", "B", ",", "1", ",", "1", ",", "1", ")", "# (B, C, H, W)", "\n", "", "", "class", "FANMlp", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANMlp.__init__": [[118, 133], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "swin_utils.LPI", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "act_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "swin_utils.FANMlp.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "linear", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "# self.dwconv = DWConv(hidden_features)", "\n", "self", ".", "dwconv", "=", "LPI", "(", "hidden_features", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_features", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "self", ".", "linear", "=", "linear", "\n", "if", "self", ".", "linear", ":", "\n", "            ", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANMlp._init_weights": [[134, 148], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANMlp.forward": [[149, 162], ["swin_utils.FANMlp.fc1", "swin_utils.FANMlp.fc2", "swin_utils.FANMlp.drop", "swin_utils.FANMlp.relu", "swin_utils.FANMlp.drop", "swin_utils.FANMlp.dwconv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "self", ".", "linear", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "# add in conv in the block forward", "\n", "", "x", "=", "self", ".", "drop", "(", "self", ".", "gamma", "*", "self", ".", "dwconv", "(", "x", ",", "H", ",", "W", ")", ")", "+", "x", "\n", "# x = self.dwconv(x, H, W)", "\n", "# x = self.act(x)", "\n", "# x = self.drop(x)", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "", "", "class", "LPI", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.LPI.__init__": [[169, 181], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "act_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "kernel_size", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_features", ",", "in_features", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "in_features", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_features", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "in_features", ",", "out_features", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "groups", "=", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.LPI.forward": [[182, 191], ["x.reshape().permute.reshape().permute.permute().reshape", "swin_utils.LPI.conv1", "swin_utils.LPI.act", "swin_utils.LPI.bn", "swin_utils.LPI.conv2", "x.reshape().permute.reshape().permute.reshape().permute", "x.reshape().permute.reshape().permute.permute", "x.reshape().permute.reshape().permute.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ":", "int", ",", "W", ":", "int", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "x", ".", "reshape", "(", "B", ",", "C", ",", "N", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "x", "\n", "", "", "class", "ChannelSA_tmp3", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA_tmp3.__init__": [[192, 253], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "swin_utils.ChannelSA_tmp3.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "swin_utils.FANMlp", "norm_layer", "InvertedResidual", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "\n", "sr_ratio", "=", "1", ",", "linear", "=", "False", ",", "share_atten", "=", "False", ",", "drop_path", "=", "0.", ",", "emlp", "=", "True", ",", "spatial_attn", "=", "False", ",", "\n", "mlp_hidden_dim", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "sampling_ratio", "=", "1", ",", "cha_sr_ratio", "=", "1", ",", "c_head_num", "=", "8", ")", ":", "\n", "        ", "\"\"\"\n            Three main modifications:\n                1. use random sampling to reduce spatial resolution.\n                2. add in channel dimension reduction.\n                3. move conv block into V matrix processing\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "num_heads", "=", "c_head_num", "or", "num_heads", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# self.scale = qk_scale or head_dim ** -0.5", "\n", "self", ".", "temperature", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_heads", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "cha_sr_ratio", "=", "cha_sr_ratio", "if", "num_heads", ">", "1", "else", "1", "\n", "\n", "self", ".", "share_atten", "=", "share_atten", "\n", "self", ".", "emlp", "=", "emlp", "\n", "\n", "self", ".", "idx_q", "=", "self", ".", "idx_k", "=", "None", "\n", "self", ".", "offset", "=", "None", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n", "self", ".", "spatial_attn", "=", "spatial_attn", "\n", "\n", "\n", "# self.gamma = nn.Parameter(1. * torch.ones(dim), requires_grad=True)", "\n", "\n", "# config of mlp for v processing", "\n", "# self.norm_attn = norm_layer(dim)", "\n", "if", "emlp", ":", "\n", "            ", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "mlp_v", "=", "FANMlp", "(", "in_features", "=", "dim", "//", "self", ".", "cha_sr_ratio", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ",", "linear", "=", "linear", ")", "\n", "self", ".", "norm_v", "=", "norm_layer", "(", "dim", "//", "self", ".", "cha_sr_ratio", ")", "\n", "\n", "", "if", "share_atten", ":", "\n", "            ", "self", ".", "adapt_conv", "=", "InvertedResidual", "(", "self", ".", "num_heads", ",", "self", ".", "num_heads", ",", "expand_ratio", "=", "3", ",", "kernel_size", "=", "3", ")", "\n", "# self.adapt_conv = Conv2dSamePadding(self.num_heads,self.num_heads, 3, 1)", "\n", "self", ".", "adapt_bn", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_heads", ")", "\n", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "1", ",", "bias", "=", "qkv_bias", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "emlp", "=", "emlp", "\n", "if", "not", "emlp", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "", "self", ".", "linear", "=", "linear", "\n", "self", ".", "sr_ratio", "=", "sr_ratio", "\n", "if", "sr_ratio", ">", "1", ":", "\n", "            ", "self", ".", "sr", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "sr_ratio", ",", "stride", "=", "sr_ratio", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA_tmp3._init_weights": [[254, 268], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA_tmp3._gen_attn": [[268, 303], ["q.softmax().transpose.softmax().transpose.softmax().transpose", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.adaptive_avg_pool2d.softmax", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "q.softmax().transpose.softmax().transpose.softmax", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "idx[].clone", "q.softmax().transpose.softmax().transpose.gather", "torch.nn.functional.adaptive_avg_pool2d.gather().transpose", "torch.nn.functional.adaptive_avg_pool2d.gather().transpose", "torch.nn.functional.adaptive_avg_pool2d.gather().transpose", "torch.nn.functional.adaptive_avg_pool2d.gather().transpose", "q.softmax().transpose.softmax().transpose.gather", "torch.nn.functional.adaptive_avg_pool2d.gather().transpose", "torch.nn.functional.adaptive_avg_pool2d.gather().transpose", "torch.nn.functional.adaptive_avg_pool2d.gather().transpose", "torch.nn.functional.adaptive_avg_pool2d.gather().transpose", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "q.softmax().transpose.softmax().transpose.get_device", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "q.softmax().transpose.softmax().transpose.get_device", "torch.nn.functional.adaptive_avg_pool2d.gather", "torch.nn.functional.adaptive_avg_pool2d.gather", "torch.nn.functional.adaptive_avg_pool2d.gather", "torch.nn.functional.adaptive_avg_pool2d.gather", "torch.nn.functional.adaptive_avg_pool2d.gather", "torch.nn.functional.adaptive_avg_pool2d.gather", "torch.nn.functional.adaptive_avg_pool2d.gather", "torch.nn.functional.adaptive_avg_pool2d.gather", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "idx[].clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "range"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid"], ["", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n", "# q = torch.nn.functional.normalize(q.transpose(-1, -2), dim=-1)", "\n", "# k = torch.nn.functional.normalize(k.transpose(-1, -2), dim=-1)", "\n", "        ", "q", "=", "q", ".", "softmax", "(", "-", "2", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "B", ",", "H", ",", "N", ",", "C", "=", "k", ".", "shape", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "k", ".", "softmax", "(", "-", "2", ")", ",", "(", "N", ",", "1", ")", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "# k = k.softmax(-2).mean(-1).unsqueeze(-1)", "\n", "\n", "if", "'sampling'", "in", "mode", "and", "sampling_step", ">", "1", ":", "\n", "            ", "shift_range", "=", "sampling_step", "\n", "if", "self", ".", "idx_q", "is", "None", ":", "\n", "                ", "shape", "=", "q", ".", "shape", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "[", "[", "[", "[", "i", "for", "i", "in", "range", "(", "0", ",", "shape", "[", "-", "1", "]", ",", "sampling_step", ")", "]", "]", "*", "shape", "[", "2", "]", "]", "*", "shape", "[", "1", "]", "]", "*", "shape", "[", "0", "]", ")", "\n", "if", "mode", "==", "'uniform_sampling'", ":", "\n", "                    ", "self", ".", "offset", "=", "nn", ".", "Parameter", "(", "F", ".", "normalize", "(", "torch", ".", "randn", "(", "idx", ".", "shape", ")", ",", "dim", "=", "-", "1", ")", "*", "shift_range", ",", "requires_grad", "=", "False", ")", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", "+", "self", ".", "offset", ",", "min", "=", "0", ",", "max", "=", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx", "=", "idx", "if", "q", ".", "get_device", "(", ")", "==", "-", "1", "else", "idx", ".", "cuda", "(", ")", "\n", "self", ".", "idx_q", "=", "nn", ".", "Parameter", "(", "idx", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx_k", "=", "nn", ".", "Parameter", "(", "idx", "[", ":", ",", ":", ",", ":", "shape", "[", "2", "]", "//", "self", ".", "cha_sr_ratio", ",", ":", "]", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "offset", "=", "F", ".", "normalize", "(", "torch", ".", "randn", "(", "idx", ".", "shape", ")", ",", "dim", "=", "-", "1", ")", "*", "shift_range", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", "+", "self", ".", "offset", ",", "min", "=", "0", ",", "max", "=", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx", "=", "idx", "if", "q", ".", "get_device", "(", ")", "==", "-", "1", "else", "idx", ".", "cuda", "(", ")", "\n", "self", ".", "idx_q", "=", "idx", ".", "clone", "(", ")", "\n", "self", ".", "idx_k", "=", "idx", "[", ":", ",", ":", ",", ":", "shape", "[", "2", "]", "//", "self", ".", "cha_sr_ratio", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "self", ".", "idx_q", ".", "shape", "==", "q", ".", "shape", ":", "\n", "                ", "attn", "=", "q", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_q", ")", "@", "k", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_k", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "shape", "=", "q", ".", "shape", "\n", "attn", "=", "q", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_q", "[", ":", "shape", "[", "0", "]", ",", ":", ",", ":", ",", ":", "]", ")", "@", "k", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_k", "[", ":", "shape", "[", "0", "]", "]", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "attn", "=", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "q", "@", "k", ")", "\n", "", "return", "attn", "*", "self", ".", "temperature", "# ).softmax(-1)", "\n", "# return (attn * self.temperature).softmax(-1)", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA_tmp3.forward": [[304, 367], ["swin_utils.ChannelSA_tmp3.attn_drop", "swin_utils.ChannelSA_tmp3.permute().reshape", "swin_utils.ChannelSA_tmp3.sr().reshape().permute", "swin_utils.ChannelSA_tmp3.norm", "swin_utils.ChannelSA_tmp3.adapt_bn", "swin_utils.ChannelSA_tmp3.norm_v().reshape().transpose().contiguous", "swin_utils.ChannelSA_tmp3.proj", "swin_utils.ChannelSA_tmp3.proj_drop", "swin_utils.ChannelSA_tmp3.q().reshape().permute", "swin_utils.ChannelSA_tmp3.reshape().permute", "swin_utils.ChannelSA_tmp3.kv().reshape().permute", "swin_utils.ChannelSA_tmp3.q().reshape().permute", "swin_utils.ChannelSA_tmp3.k().reshape().permute", "swin_utils.ChannelSA_tmp3.kv().reshape().permute", "swin_utils.ChannelSA_tmp3.q().reshape().permute", "swin_utils.ChannelSA_tmp3.reshape().permute", "swin_utils.ChannelSA_tmp3.adapt_conv", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "swin_utils.ChannelSA_tmp3.softmax", "swin_utils.ChannelSA_tmp3._gen_attn", "swin_utils.ChannelSA_tmp3.repeat_interleave", "swin_utils.ChannelSA_tmp3.permute", "swin_utils.ChannelSA_tmp3.sr().reshape", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "swin_utils.ChannelSA_tmp3.norm_v().reshape().transpose", "swin_utils.ChannelSA_tmp3.q().reshape", "swin_utils.ChannelSA_tmp3.reshape", "swin_utils.ChannelSA_tmp3.kv().reshape", "swin_utils.ChannelSA_tmp3.q().reshape", "swin_utils.ChannelSA_tmp3.k().reshape", "swin_utils.ChannelSA_tmp3.kv().reshape", "swin_utils.ChannelSA_tmp3.q().reshape", "swin_utils.ChannelSA_tmp3.reshape", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "swin_utils.ChannelSA_tmp3.sr", "swin_utils.ChannelSA_tmp3.norm_v().reshape", "swin_utils.ChannelSA_tmp3.q", "swin_utils.ChannelSA_tmp3.kv", "swin_utils.ChannelSA_tmp3.q", "swin_utils.ChannelSA_tmp3.k", "swin_utils.ChannelSA_tmp3.kv", "swin_utils.ChannelSA_tmp3.q", "swin_utils.ChannelSA_tmp3.reshape().permute.transpose", "swin_utils.ChannelSA_tmp3.norm_v", "swin_utils.ChannelSA_tmp3.mlp_v", "swin_utils.ChannelSA_tmp3.reshape().permute.transpose().reshape", "swin_utils.ChannelSA_tmp3.reshape().permute.transpose"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA._gen_attn"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "atten", "=", "None", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "if", "not", "self", ".", "share_atten", ":", "\n", "            ", "if", "self", ".", "spatial_attn", ":", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "else", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "# v = self.v(x).reshape(B, N, self.num_heads, C // self.num_heads // self.cha_sr_ratio).permute(0, 2, 1, 3)", "\n", "                ", "v", "=", "x", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "# import pdb;pdb.set_trace()", "\n", "", "", "if", "self", ".", "sr_ratio", ">", "1", ":", "\n", "            ", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x_", "=", "self", ".", "sr", "(", "x_", ")", ".", "reshape", "(", "B", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_", "=", "self", ".", "norm", "(", "x_", ")", "\n", "if", "self", ".", "share_atten", ":", "\n", "                ", "kv", "=", "self", ".", "kv", "(", "x_", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "share_atten", ":", "\n", "                ", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "# k = self.k(x).reshape(B, N, self.num_heads,  self.num_heads // self.num_heads // self.cha_sr_ratio).permute(0, 2, 1, 3)", "\n", "# q = x.reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)", "\n", "k", "=", "x", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "", "", "if", "self", ".", "share_atten", ":", "\n", "            ", "v", "=", "kv", "[", "0", "]", "\n", "attn", "=", "self", ".", "adapt_bn", "(", "self", ".", "adapt_conv", "(", "atten", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "spatial_attn", ":", "\n", "                ", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "q", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "q", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "attn", "=", "self", ".", "_gen_attn", "(", "q", ",", "k", ",", "sampling_step", "=", "self", ".", "sampling_ratio", ")", "\n", "", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "# move mlp here to process v", "\n", "if", "self", ".", "emlp", ":", "\n", "            ", "Bv", ",", "Hd", ",", "Nv", ",", "Cv", "=", "v", ".", "shape", "\n", "# import pdb;pdb.set_trace()", "\n", "v", "=", "self", ".", "norm_v", "(", "self", ".", "mlp_v", "(", "v", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", "*", "Cv", ")", ",", "H", "//", "self", ".", "sr_ratio", ",", "W", "//", "self", ".", "sr_ratio", ")", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", ",", "Cv", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# v = v + self.drop_path(self.mlp_v(self.norm_v(v.transpose(1, 2).reshape(Bv, Nv, Hd*Cv)), H//self.sr_ratio, W//self.sr_ratio)).reshape(Bv, Nv, Hd, Cv).transpose(1, 2)", "\n", "", "if", "self", ".", "spatial_attn", ":", "\n", "            ", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "", "else", ":", "\n", "# x = (attn @ v).transpose(1, 2).reshape(B, N, C)", "\n", "# import pdb; pdb.set_trace()", "\n", "            ", "repeat_time", "=", "N", "//", "attn", ".", "shape", "[", "-", "1", "]", "\n", "attn", "=", "attn", ".", "repeat_interleave", "(", "repeat_time", ",", "dim", "=", "-", "1", ")", "if", "attn", ".", "shape", "[", "-", "1", "]", ">", "1", "else", "attn", "\n", "x", "=", "(", "attn", "*", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "", "if", "not", "self", ".", "emlp", ":", "\n", "            ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "#         import pdb;pdb.set_trace()", "\n", "", "return", "x", "#,  attn * v.transpose(-1, -2) #attn", "\n", "", "@", "torch", ".", "jit", ".", "ignore", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA_tmp3.no_weight_decay": [[367, 370], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'temperature'", "}", "\n", "", "", "class", "ChannelSA", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA.__init__": [[371, 431], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "swin_utils.ChannelSA.apply", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "swin_utils.FANMlp", "norm_layer", "InvertedResidual", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "num_heads", "=", "8", ",", "qkv_bias", "=", "False", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ",", "\n", "sr_ratio", "=", "1", ",", "linear", "=", "False", ",", "share_atten", "=", "False", ",", "drop_path", "=", "0.", ",", "emlp", "=", "True", ",", "spatial_attn", "=", "False", ",", "\n", "mlp_hidden_dim", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "sampling_ratio", "=", "1", ",", "cha_sr_ratio", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n            Three main modifications:\n                1. use random sampling to reduce spatial resolution.\n                2. add in channel dimension reduction.\n                3. move conv block into V matrix processing\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "dim", "%", "num_heads", "==", "0", ",", "f\"dim {dim} should be divided by num_heads {num_heads}.\"", "\n", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "# self.scale = qk_scale or head_dim ** -0.5", "\n", "self", ".", "temperature", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "num_heads", ",", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "cha_sr_ratio", "=", "cha_sr_ratio", "if", "num_heads", ">", "1", "else", "1", "\n", "\n", "self", ".", "share_atten", "=", "share_atten", "\n", "self", ".", "emlp", "=", "emlp", "\n", "\n", "self", ".", "idx_q", "=", "self", ".", "idx_k", "=", "None", "\n", "self", ".", "offset", "=", "None", "\n", "self", ".", "sampling_ratio", "=", "sampling_ratio", "\n", "\n", "self", ".", "spatial_attn", "=", "spatial_attn", "\n", "\n", "\n", "# self.gamma = nn.Parameter(1. * torch.ones(dim), requires_grad=True)", "\n", "\n", "# config of mlp for v processing", "\n", "if", "emlp", ":", "\n", "            ", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "mlp_v", "=", "FANMlp", "(", "in_features", "=", "dim", "//", "self", ".", "cha_sr_ratio", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ",", "linear", "=", "linear", ")", "\n", "self", ".", "norm_v", "=", "norm_layer", "(", "dim", "//", "self", ".", "cha_sr_ratio", ")", "\n", "\n", "", "if", "share_atten", ":", "\n", "            ", "self", ".", "adapt_conv", "=", "InvertedResidual", "(", "self", ".", "num_heads", ",", "self", ".", "num_heads", ",", "expand_ratio", "=", "3", ",", "kernel_size", "=", "3", ")", "\n", "# self.adapt_conv = Conv2dSamePadding(self.num_heads,self.num_heads, 3, 1)", "\n", "self", ".", "adapt_bn", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "num_heads", ")", "\n", "\n", "self", ".", "kv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "1", ",", "bias", "=", "qkv_bias", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "q", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "//", "self", ".", "cha_sr_ratio", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "//", "self", ".", "cha_sr_ratio", ",", "bias", "=", "qkv_bias", ")", "\n", "", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "emlp", "=", "emlp", "\n", "if", "not", "emlp", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "", "self", ".", "linear", "=", "linear", "\n", "self", ".", "sr_ratio", "=", "sr_ratio", "\n", "if", "sr_ratio", ">", "1", ":", "\n", "            ", "self", ".", "sr", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "sr_ratio", ",", "stride", "=", "sr_ratio", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "dim", ")", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA._init_weights": [[432, 446], ["isinstance", "timm.models.layers.trunc_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "m.weight.data.normal_", "math.sqrt", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "fan_out", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "fan_out", "//=", "m", ".", "groups", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "fan_out", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA._gen_attn": [[446, 477], ["torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.Parameter().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "idx[].clone", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather().transpose", "torch.nn.functional.normalize.gather().transpose", "torch.nn.functional.normalize.gather().transpose", "torch.nn.functional.normalize.gather().transpose", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather().transpose", "torch.nn.functional.normalize.gather().transpose", "torch.nn.functional.normalize.gather().transpose", "torch.nn.functional.normalize.gather().transpose", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.clamp().long().cuda.cuda", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.nn.functional.normalize.get_device", "torch.nn.functional.normalize.get_device", "torch.nn.functional.normalize.get_device", "torch.nn.functional.normalize.get_device", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.nn.functional.normalize.get_device", "torch.nn.functional.normalize.get_device", "torch.nn.functional.normalize.get_device", "torch.nn.functional.normalize.get_device", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.nn.functional.normalize.gather", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "torch.clamp().long().cuda.clone", "idx[].clone", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "range"], "methods", ["None"], ["", "", "", "def", "_gen_attn", "(", "self", ",", "q", ",", "k", ",", "mode", "=", "'none'", ",", "shift_range", "=", "4", ",", "sampling_step", "=", "4", ")", ":", "\n", "        ", "q", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "q", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "'sampling'", "in", "mode", "and", "sampling_step", ">", "1", ":", "\n", "            ", "shift_range", "=", "sampling_step", "\n", "if", "self", ".", "idx_q", "is", "None", ":", "\n", "                ", "shape", "=", "q", ".", "shape", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "[", "[", "[", "[", "i", "for", "i", "in", "range", "(", "0", ",", "shape", "[", "-", "1", "]", ",", "sampling_step", ")", "]", "]", "*", "shape", "[", "2", "]", "]", "*", "shape", "[", "1", "]", "]", "*", "shape", "[", "0", "]", ")", "\n", "if", "mode", "==", "'uniform_sampling'", ":", "\n", "                    ", "self", ".", "offset", "=", "nn", ".", "Parameter", "(", "F", ".", "normalize", "(", "torch", ".", "randn", "(", "idx", ".", "shape", ")", ",", "dim", "=", "-", "1", ")", "*", "shift_range", ",", "requires_grad", "=", "False", ")", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", "+", "self", ".", "offset", ",", "min", "=", "0", ",", "max", "=", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx", "=", "idx", "if", "q", ".", "get_device", "(", ")", "==", "-", "1", "else", "idx", ".", "cuda", "(", ")", "\n", "self", ".", "idx_q", "=", "nn", ".", "Parameter", "(", "idx", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx_k", "=", "nn", ".", "Parameter", "(", "idx", "[", ":", ",", ":", ",", ":", "shape", "[", "2", "]", "//", "self", ".", "cha_sr_ratio", ",", ":", "]", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "offset", "=", "F", ".", "normalize", "(", "torch", ".", "randn", "(", "idx", ".", "shape", ")", ",", "dim", "=", "-", "1", ")", "*", "shift_range", "\n", "idx", "=", "torch", ".", "clamp", "(", "idx", "+", "self", ".", "offset", ",", "min", "=", "0", ",", "max", "=", "shape", "[", "-", "1", "]", "-", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "idx", "=", "idx", "if", "q", ".", "get_device", "(", ")", "==", "-", "1", "else", "idx", ".", "cuda", "(", ")", "\n", "self", ".", "idx_q", "=", "idx", ".", "clone", "(", ")", "\n", "self", ".", "idx_k", "=", "idx", "[", ":", ",", ":", ",", ":", "shape", "[", "2", "]", "//", "self", ".", "cha_sr_ratio", ",", ":", "]", ".", "clone", "(", ")", "\n", "\n", "", "", "if", "self", ".", "idx_q", ".", "shape", "==", "q", ".", "shape", ":", "\n", "                ", "attn", "=", "q", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_q", ")", "@", "k", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_k", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "shape", "=", "q", ".", "shape", "\n", "attn", "=", "q", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_q", "[", ":", "shape", "[", "0", "]", ",", ":", ",", ":", ",", ":", "]", ")", "@", "k", ".", "gather", "(", "-", "1", ",", "self", ".", "idx_k", "[", ":", "shape", "[", "0", "]", "]", ")", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "", "else", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "            ", "attn", "=", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", "\n", "", "return", "(", "attn", "*", "self", ".", "temperature", ")", ".", "softmax", "(", "-", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "atten", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA.forward": [[477, 535], ["swin_utils.ChannelSA.attn_drop", "swin_utils.ChannelSA.permute().reshape", "swin_utils.ChannelSA.sr().reshape().permute", "swin_utils.ChannelSA.norm", "swin_utils.ChannelSA.adapt_bn", "swin_utils.ChannelSA.norm_v().reshape().transpose", "swin_utils.ChannelSA.proj", "swin_utils.ChannelSA.proj_drop", "swin_utils.ChannelSA.q().reshape().permute", "swin_utils.ChannelSA.v().reshape().permute", "swin_utils.ChannelSA.kv().reshape().permute", "swin_utils.ChannelSA.q().reshape().permute", "swin_utils.ChannelSA.k().reshape().permute", "swin_utils.ChannelSA.kv().reshape().permute", "swin_utils.ChannelSA.q().reshape().permute", "swin_utils.ChannelSA.k().reshape().permute", "swin_utils.ChannelSA.adapt_conv", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "swin_utils.ChannelSA.softmax", "swin_utils.ChannelSA._gen_attn", "swin_utils.ChannelSA.permute", "swin_utils.ChannelSA.sr().reshape", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "swin_utils.ChannelSA.norm_v().reshape", "swin_utils.ChannelSA.q().reshape", "swin_utils.ChannelSA.v().reshape", "swin_utils.ChannelSA.kv().reshape", "swin_utils.ChannelSA.q().reshape", "swin_utils.ChannelSA.k().reshape", "swin_utils.ChannelSA.kv().reshape", "swin_utils.ChannelSA.q().reshape", "swin_utils.ChannelSA.k().reshape", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "torch.nn.functional.normalize.transpose", "swin_utils.ChannelSA.sr", "swin_utils.ChannelSA.norm_v", "swin_utils.ChannelSA.q", "swin_utils.ChannelSA.v", "swin_utils.ChannelSA.kv", "swin_utils.ChannelSA.q", "swin_utils.ChannelSA.k", "swin_utils.ChannelSA.kv", "swin_utils.ChannelSA.q", "swin_utils.ChannelSA.k", "swin_utils.ChannelSA.mlp_v", "swin_utils.ChannelSA.transpose", "swin_utils.ChannelSA.transpose().reshape", "swin_utils.ChannelSA.transpose"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA._gen_attn"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ",", "atten", "=", "None", ")", ":", "\n", "        ", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "if", "not", "self", ".", "share_atten", ":", "\n", "            ", "if", "self", ".", "spatial_attn", ":", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "else", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "                ", "v", "=", "self", ".", "v", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "# import pdb;pdb.set_trace()", "\n", "", "", "if", "self", ".", "sr_ratio", ">", "1", ":", "\n", "            ", "x_", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "x_", "=", "self", ".", "sr", "(", "x_", ")", ".", "reshape", "(", "B", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_", "=", "self", ".", "norm", "(", "x_", ")", "\n", "if", "self", ".", "share_atten", ":", "\n", "                ", "kv", "=", "self", ".", "kv", "(", "x_", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "share_atten", ":", "\n", "                ", "kv", "=", "self", ".", "kv", "(", "x", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "1", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "\n", "                ", "q", "=", "self", ".", "q", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "k", "=", "self", ".", "k", "(", "x", ")", ".", "reshape", "(", "B", ",", "N", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", "//", "self", ".", "cha_sr_ratio", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n", "", "", "if", "self", ".", "share_atten", ":", "\n", "            ", "v", "=", "kv", "[", "0", "]", "\n", "attn", "=", "self", ".", "adapt_bn", "(", "self", ".", "adapt_conv", "(", "atten", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "spatial_attn", ":", "\n", "                ", "k", ",", "v", "=", "kv", "[", "0", "]", ",", "kv", "[", "1", "]", "\n", "q", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "q", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "k", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "k", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "self", ".", "scale", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "attn", "=", "self", ".", "_gen_attn", "(", "q", ",", "k", ",", "sampling_step", "=", "self", ".", "sampling_ratio", ")", "\n", "", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "# move mlp here to process v", "\n", "if", "self", ".", "emlp", ":", "\n", "            ", "Bv", ",", "Hd", ",", "Nv", ",", "Cv", "=", "v", ".", "shape", "\n", "# import pdb;pdb.set_trace()", "\n", "v", "=", "self", ".", "norm_v", "(", "self", ".", "mlp_v", "(", "v", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", "*", "Cv", ")", ",", "H", "//", "self", ".", "sr_ratio", ",", "W", "//", "self", ".", "sr_ratio", ")", ")", ".", "reshape", "(", "Bv", ",", "Nv", ",", "Hd", ",", "Cv", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# v = v + self.drop_path(self.mlp_v(self.norm_v(v.transpose(1, 2).reshape(Bv, Nv, Hd*Cv)), H//self.sr_ratio, W//self.sr_ratio)).reshape(Bv, Nv, Hd, Cv).transpose(1, 2)", "\n", "# ", "\n", "", "if", "self", ".", "spatial_attn", ":", "\n", "            ", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "", "else", ":", "\n", "# x = (attn @ v).transpose(1, 2).reshape(B, N, C)", "\n", "            ", "x", "=", "(", "attn", "@", "v", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "reshape", "(", "B", ",", "N", ",", "C", ")", "\n", "", "if", "not", "self", ".", "emlp", ":", "\n", "            ", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "#         import pdb;pdb.set_trace()", "\n", "", "return", "x", "#,  attn @ v.transpose(-1, -2) #attn", "\n", "", "@", "torch", ".", "jit", ".", "ignore", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.ChannelSA.no_weight_decay": [[535, 538], ["None"], "methods", ["None"], ["", "@", "torch", ".", "jit", ".", "ignore", "\n", "def", "no_weight_decay", "(", "self", ")", ":", "\n", "        ", "return", "{", "'temperature'", "}", "\n", "", "", "class", "WindowAttention", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.WindowAttention.__init__": [[551, 584], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "relative_coords.permute().contiguous.permute().contiguous.permute().contiguous", "relative_coords.permute().contiguous.permute().contiguous.sum", "swin_utils.WindowAttention.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "timm.models.layers.trunc_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "relative_coords.permute().contiguous.permute().contiguous.permute"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["def", "__init__", "(", "self", ",", "dim", ",", "window_size", ",", "num_heads", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "attn_drop", "=", "0.", ",", "proj_drop", "=", "0.", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "window_size", "=", "window_size", "# Wh, Ww", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "head_dim", "=", "dim", "//", "num_heads", "\n", "self", ".", "scale", "=", "qk_scale", "or", "head_dim", "**", "-", "0.5", "\n", "\n", "# define a parameter table of relative position bias", "\n", "self", ".", "relative_position_bias_table", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "zeros", "(", "(", "2", "*", "window_size", "[", "0", "]", "-", "1", ")", "*", "(", "2", "*", "window_size", "[", "1", "]", "-", "1", ")", ",", "num_heads", ")", ")", "# 2*Wh-1 * 2*Ww-1, nH", "\n", "\n", "# get pair-wise relative position index for each token inside the window", "\n", "coords_h", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "0", "]", ")", "\n", "coords_w", "=", "torch", ".", "arange", "(", "self", ".", "window_size", "[", "1", "]", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "[", "coords_h", ",", "coords_w", "]", ")", ")", "# 2, Wh, Ww", "\n", "coords_flatten", "=", "torch", ".", "flatten", "(", "coords", ",", "1", ")", "# 2, Wh*Ww", "\n", "relative_coords", "=", "coords_flatten", "[", ":", ",", ":", ",", "None", "]", "-", "coords_flatten", "[", ":", ",", "None", ",", ":", "]", "# 2, Wh*Ww, Wh*Ww", "\n", "relative_coords", "=", "relative_coords", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "# Wh*Ww, Wh*Ww, 2", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "+=", "self", ".", "window_size", "[", "0", "]", "-", "1", "# shift to start from 0", "\n", "relative_coords", "[", ":", ",", ":", ",", "1", "]", "+=", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_coords", "[", ":", ",", ":", ",", "0", "]", "*=", "2", "*", "self", ".", "window_size", "[", "1", "]", "-", "1", "\n", "relative_position_index", "=", "relative_coords", ".", "sum", "(", "-", "1", ")", "# Wh*Ww, Wh*Ww", "\n", "self", ".", "register_buffer", "(", "\"relative_position_index\"", ",", "relative_position_index", ")", "\n", "\n", "self", ".", "qkv", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", "*", "3", ",", "bias", "=", "qkv_bias", ")", "\n", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "proj_drop", "=", "nn", ".", "Dropout", "(", "proj_drop", ")", "\n", "\n", "trunc_normal_", "(", "self", ".", "relative_position_bias_table", ",", "std", "=", ".02", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.WindowAttention.forward": [[585, 617], ["swin_utils.WindowAttention.qkv().reshape().permute", "swin_utils.WindowAttention.relative_position_bias_table[].view", "relative_position_bias.permute().contiguous.permute().contiguous.permute().contiguous", "swin_utils.WindowAttention.attn_drop", "swin_utils.WindowAttention.proj", "swin_utils.WindowAttention.proj_drop", "k.transpose", "relative_position_bias.permute().contiguous.permute().contiguous.unsqueeze", "swin_utils.WindowAttention.view", "swin_utils.WindowAttention.softmax", "swin_utils.WindowAttention.softmax", "swin_utils.WindowAttention.qkv().reshape", "relative_position_bias.permute().contiguous.permute().contiguous.permute", "swin_utils.WindowAttention.view", "mask.unsqueeze().unsqueeze", "swin_utils.WindowAttention.qkv", "swin_utils.WindowAttention.relative_position_index.view", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: input features with shape of (num_windows*B, N, C)\n            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None\n        \"\"\"", "\n", "B_", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "self", ".", "qkv", "(", "x", ")", ".", "reshape", "(", "B_", ",", "N", ",", "3", ",", "self", ".", "num_heads", ",", "C", "//", "self", ".", "num_heads", ")", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", "q", ",", "k", ",", "v", "=", "qkv", "[", "0", "]", ",", "qkv", "[", "1", "]", ",", "qkv", "[", "2", "]", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "q", "=", "q", "*", "self", ".", "scale", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "\n", "relative_position_bias", "=", "self", ".", "relative_position_bias_table", "[", "self", ".", "relative_position_index", ".", "view", "(", "-", "1", ")", "]", ".", "view", "(", "\n", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "self", ".", "window_size", "[", "0", "]", "*", "self", ".", "window_size", "[", "1", "]", ",", "-", "1", ")", "# Wh*Ww,Wh*Ww,nH", "\n", "relative_position_bias", "=", "relative_position_bias", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# nH, Wh*Ww, Wh*Ww", "\n", "attn", "=", "attn", "+", "relative_position_bias", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "nW", "=", "mask", ".", "shape", "[", "0", "]", "\n", "attn", "=", "attn", ".", "view", "(", "B_", "//", "nW", ",", "nW", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "+", "mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "attn", "=", "attn", ".", "view", "(", "-", "1", ",", "self", ".", "num_heads", ",", "N", ",", "N", ")", "\n", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "self", ".", "softmax", "(", "attn", ")", "\n", "\n", "", "attn", "=", "self", ".", "attn_drop", "(", "attn", ")", "\n", "\n", "x", "=", "(", "attn", "@", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "B_", ",", "N", ",", "C", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "x", "=", "self", ".", "proj_drop", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.SwinTransformerBlock.__init__": [[636, 663], ["torch.Module.__init__", "norm_layer", "swin_utils.WindowAttention", "norm_layer", "int", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "swin_utils.Mlp", "swin_utils.ChannelSA_tmp3", "timm.models.layers.to_2tuple"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "num_heads", ",", "window_size", "=", "7", ",", "shift_size", "=", "0", ",", "mlp_type", "=", "None", ",", "\n", "mlp_ratio", "=", "4.", ",", "qkv_bias", "=", "True", ",", "qk_scale", "=", "None", ",", "drop", "=", "0.", ",", "attn_drop", "=", "0.", ",", "drop_path", "=", "0.", ",", "\n", "act_layer", "=", "nn", ".", "GELU", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "shift_size", "\n", "self", ".", "mlp_ratio", "=", "mlp_ratio", "\n", "assert", "0", "<=", "self", ".", "shift_size", "<", "self", ".", "window_size", ",", "\"shift_size must in 0-window_size\"", "\n", "\n", "self", ".", "norm1", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "attn", "=", "WindowAttention", "(", "\n", "dim", ",", "window_size", "=", "to_2tuple", "(", "self", ".", "window_size", ")", ",", "num_heads", "=", "num_heads", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "qk_scale", "=", "qk_scale", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ")", "\n", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "norm2", "=", "norm_layer", "(", "dim", ")", "\n", "mlp_hidden_dim", "=", "int", "(", "dim", "*", "mlp_ratio", ")", "\n", "self", ".", "mlp_type", "=", "mlp_type", "\n", "if", "mlp_type", "==", "'Mlp'", ":", "\n", "            ", "self", ".", "mlp", "=", "Mlp", "(", "in_features", "=", "dim", ",", "hidden_features", "=", "mlp_hidden_dim", ",", "act_layer", "=", "act_layer", ",", "drop", "=", "drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "mlp", "=", "ChannelSA_tmp3", "(", "dim", ",", "num_heads", "=", "num_heads", ",", "qkv_bias", "=", "qkv_bias", ",", "attn_drop", "=", "attn_drop", ",", "proj_drop", "=", "drop", ",", "\n", "drop_path", "=", "drop_path", ",", "mlp_hidden_dim", "=", "mlp_hidden_dim", ",", "emlp", "=", "True", ")", "\n", "", "self", ".", "H", "=", "None", "\n", "self", ".", "W", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.SwinTransformerBlock.forward": [[664, 724], ["swin_utils.SwinTransformerBlock.norm1", "x[].contiguous.view", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "swin_utils.window_partition", "x_windows.view.view.view", "swin_utils.SwinTransformerBlock.attn", "attn_windows.view.view.view", "swin_utils.window_reverse", "x[].contiguous.view", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "torch.roll", "x[].contiguous", "swin_utils.SwinTransformerBlock.drop_path", "swin_utils.SwinTransformerBlock.drop_path", "swin_utils.SwinTransformerBlock.drop_path", "swin_utils.SwinTransformerBlock.mlp", "swin_utils.SwinTransformerBlock.mlp", "swin_utils.SwinTransformerBlock.norm2", "swin_utils.SwinTransformerBlock.norm2"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.window_partition", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.window_reverse", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path", "home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask_matrix", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: Input feature, tensor size (B, H*W, C).\n            H, W: Spatial resolution of the input feature.\n            mask_matrix: Attention mask for cyclic shift.\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "H", ",", "W", "=", "self", ".", "H", ",", "self", ".", "W", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# pad feature maps to multiples of window size", "\n", "pad_l", "=", "pad_t", "=", "0", "\n", "pad_r", "=", "(", "self", ".", "window_size", "-", "W", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "pad_b", "=", "(", "self", ".", "window_size", "-", "H", "%", "self", ".", "window_size", ")", "%", "self", ".", "window_size", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "pad_l", ",", "pad_r", ",", "pad_t", ",", "pad_b", ")", ")", "\n", "_", ",", "Hp", ",", "Wp", ",", "_", "=", "x", ".", "shape", "\n", "\n", "# cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "shifted_x", "=", "torch", ".", "roll", "(", "x", ",", "shifts", "=", "(", "-", "self", ".", "shift_size", ",", "-", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "attn_mask", "=", "mask_matrix", "\n", "", "else", ":", "\n", "            ", "shifted_x", "=", "x", "\n", "attn_mask", "=", "None", "\n", "\n", "# partition windows", "\n", "", "x_windows", "=", "window_partition", "(", "shifted_x", ",", "self", ".", "window_size", ")", "# nW*B, window_size, window_size, C", "\n", "x_windows", "=", "x_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ",", "C", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# W-MSA/SW-MSA", "\n", "attn_windows", "=", "self", ".", "attn", "(", "x_windows", ",", "mask", "=", "attn_mask", ")", "# nW*B, window_size*window_size, C", "\n", "\n", "# merge windows", "\n", "attn_windows", "=", "attn_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", ",", "self", ".", "window_size", ",", "C", ")", "\n", "shifted_x", "=", "window_reverse", "(", "attn_windows", ",", "self", ".", "window_size", ",", "Hp", ",", "Wp", ")", "# B H' W' C", "\n", "\n", "# reverse cyclic shift", "\n", "if", "self", ".", "shift_size", ">", "0", ":", "\n", "            ", "x", "=", "torch", ".", "roll", "(", "shifted_x", ",", "shifts", "=", "(", "self", ".", "shift_size", ",", "self", ".", "shift_size", ")", ",", "dims", "=", "(", "1", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "shifted_x", "\n", "\n", "", "if", "pad_r", ">", "0", "or", "pad_b", ">", "0", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "H", ",", ":", "W", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "x", "=", "x", ".", "view", "(", "B", ",", "H", "*", "W", ",", "C", ")", "\n", "\n", "# FFN", "\n", "x", "=", "shortcut", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "if", "self", ".", "mlp_type", "==", "'Mlp'", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "drop_path", "(", "self", ".", "mlp", "(", "self", ".", "norm2", "(", "x", ")", ",", "H", ",", "W", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.PatchMerging.__init__": [[732, 737], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "norm_layer", "=", "nn", ".", "LayerNorm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "reduction", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "2", "*", "dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "4", "*", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.PatchMerging.forward": [[738, 765], ["torch.pad.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pad.view", "swin_utils.PatchMerging.norm", "swin_utils.PatchMerging.reduction", "torch.pad", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: Input feature, tensor size (B, H*W, C).\n            H, W: Spatial resolution of the input feature.\n        \"\"\"", "\n", "B", ",", "L", ",", "C", "=", "x", ".", "shape", "\n", "assert", "L", "==", "H", "*", "W", ",", "\"input feature has wrong size\"", "\n", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", ",", "W", ",", "C", ")", "\n", "\n", "# padding", "\n", "pad_input", "=", "(", "H", "%", "2", "==", "1", ")", "or", "(", "W", "%", "2", "==", "1", ")", "\n", "if", "pad_input", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "W", "%", "2", ",", "0", ",", "H", "%", "2", ")", ")", "\n", "\n", "", "x0", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x1", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x2", "=", "x", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x3", "=", "x", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "# B H/2 W/2 C", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x0", ",", "x1", ",", "x2", ",", "x3", "]", ",", "-", "1", ")", "# B H/2 W/2 4*C", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "-", "1", ",", "4", "*", "C", ")", "# B H/2*W/2 4*C", "\n", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "reduction", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.BasicLayer.__init__": [[785, 828], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "downsample", "swin_utils.SwinTransformerBlock", "range", "isinstance"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "dim", ",", "\n", "depth", ",", "\n", "num_heads", ",", "\n", "window_size", "=", "7", ",", "\n", "mlp_ratio", "=", "4.", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop", "=", "0.", ",", "\n", "attn_drop", "=", "0.", ",", "\n", "drop_path", "=", "0.", ",", "\n", "mlp_type", "=", "'Mlp'", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "downsample", "=", "None", ",", "\n", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "shift_size", "=", "window_size", "//", "2", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "use_checkpoint", "=", "use_checkpoint", "\n", "\n", "# build blocks", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", "[", "\n", "SwinTransformerBlock", "(", "\n", "dim", "=", "dim", ",", "\n", "num_heads", "=", "num_heads", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_type", "=", "mlp_type", ",", "\n", "shift_size", "=", "0", "if", "(", "i", "%", "2", "==", "0", ")", "else", "window_size", "//", "2", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "drop_path", "=", "drop_path", "[", "i", "]", "if", "isinstance", "(", "drop_path", ",", "list", ")", "else", "drop_path", ",", "\n", "norm_layer", "=", "norm_layer", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "# patch merging layer", "\n", "if", "downsample", "is", "not", "None", ":", "\n", "            ", "self", ".", "downsample", "=", "downsample", "(", "dim", "=", "dim", ",", "norm_layer", "=", "norm_layer", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.BasicLayer.forward": [[829, 869], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "swin_utils.window_partition", "mask_windows.view.view.view", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill().masked_fill", "int", "int", "slice", "slice", "slice", "slice", "slice", "slice", "mask_windows.view.view.unsqueeze", "mask_windows.view.view.unsqueeze", "float", "swin_utils.BasicLayer.downsample", "numpy.ceil", "numpy.ceil", "attn_mask.masked_fill().masked_fill.masked_fill().masked_fill.masked_fill", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "torch.checkpoint", "blk", "float"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.window_partition"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "H", ",", "W", ")", ":", "\n", "        ", "\"\"\" Forward function.\n        Args:\n            x: Input feature, tensor size (B, H*W, C).\n            H, W: Spatial resolution of the input feature.\n        \"\"\"", "\n", "\n", "# calculate attention mask for SW-MSA", "\n", "Hp", "=", "int", "(", "np", ".", "ceil", "(", "H", "/", "self", ".", "window_size", ")", ")", "*", "self", ".", "window_size", "\n", "Wp", "=", "int", "(", "np", ".", "ceil", "(", "W", "/", "self", ".", "window_size", ")", ")", "*", "self", ".", "window_size", "\n", "img_mask", "=", "torch", ".", "zeros", "(", "(", "1", ",", "Hp", ",", "Wp", ",", "1", ")", ",", "device", "=", "x", ".", "device", ")", "# 1 Hp Wp 1", "\n", "h_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "w_slices", "=", "(", "slice", "(", "0", ",", "-", "self", ".", "window_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "window_size", ",", "-", "self", ".", "shift_size", ")", ",", "\n", "slice", "(", "-", "self", ".", "shift_size", ",", "None", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "h", "in", "h_slices", ":", "\n", "            ", "for", "w", "in", "w_slices", ":", "\n", "                ", "img_mask", "[", ":", ",", "h", ",", "w", ",", ":", "]", "=", "cnt", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "mask_windows", "=", "window_partition", "(", "img_mask", ",", "self", ".", "window_size", ")", "# nW, window_size, window_size, 1", "\n", "mask_windows", "=", "mask_windows", ".", "view", "(", "-", "1", ",", "self", ".", "window_size", "*", "self", ".", "window_size", ")", "\n", "attn_mask", "=", "mask_windows", ".", "unsqueeze", "(", "1", ")", "-", "mask_windows", ".", "unsqueeze", "(", "2", ")", "\n", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", "!=", "0", ",", "float", "(", "-", "100.0", ")", ")", ".", "masked_fill", "(", "attn_mask", "==", "0", ",", "float", "(", "0.0", ")", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "            ", "blk", ".", "H", ",", "blk", ".", "W", "=", "H", ",", "W", "\n", "if", "self", ".", "use_checkpoint", ":", "\n", "                ", "x", "=", "checkpoint", ".", "checkpoint", "(", "blk", ",", "x", ",", "attn_mask", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "blk", "(", "x", ",", "attn_mask", ")", "\n", "", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "x_down", "=", "self", ".", "downsample", "(", "x", ",", "H", ",", "W", ")", "\n", "Wh", ",", "Ww", "=", "(", "H", "+", "1", ")", "//", "2", ",", "(", "W", "+", "1", ")", "//", "2", "\n", "return", "x", ",", "H", ",", "W", ",", "x_down", ",", "Wh", ",", "Ww", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "H", ",", "W", ",", "x", ",", "H", ",", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.PatchEmbed.__init__": [[880, 893], ["torch.Module.__init__", "timm.models.layers.to_2tuple", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "patch_size", "=", "4", ",", "in_chans", "=", "3", ",", "embed_dim", "=", "96", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n", "self", ".", "in_chans", "=", "in_chans", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "proj", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "embed_dim", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", "\n", "if", "norm_layer", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "norm_layer", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.PatchEmbed.forward": [[894, 912], ["x.transpose().view.transpose().view.size", "swin_utils.PatchEmbed.proj", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "x.transpose().view.transpose().view.flatten().transpose", "swin_utils.PatchEmbed.norm", "x.transpose().view.transpose().view.transpose().view", "x.transpose().view.transpose().view.size", "x.transpose().view.transpose().view.size", "x.transpose().view.transpose().view.flatten", "x.transpose().view.transpose().view.transpose"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "# padding", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "if", "W", "%", "self", ".", "patch_size", "[", "1", "]", "!=", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "self", ".", "patch_size", "[", "1", "]", "-", "W", "%", "self", ".", "patch_size", "[", "1", "]", ")", ")", "\n", "", "if", "H", "%", "self", ".", "patch_size", "[", "0", "]", "!=", "0", ":", "\n", "            ", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "self", ".", "patch_size", "[", "0", "]", "-", "H", "%", "self", ".", "patch_size", "[", "0", "]", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "proj", "(", "x", ")", "# B C Wh Ww", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "Wh", ",", "Ww", "=", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "-", "1", ",", "self", ".", "embed_dim", ",", "Wh", ",", "Ww", ")", "\n", "\n", "", "return", "x", ",", "(", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer.__init__": [[943, 1026], ["torch.Module.__init__", "len", "swin_utils.PatchEmbed", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "swin_utils.FANSwinTransformer._freeze_stages", "timm.models.layers.to_2tuple", "timm.models.layers.to_2tuple", "swin_utils.PositionalEncodingFourier", "x.item", "swin_utils.BasicLayer", "swin_utils.FANSwinTransformer.layers.append", "int", "norm_layer", "swin_utils.FANSwinTransformer.add_module", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "range", "sum", "int", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer._freeze_stages"], ["def", "__init__", "(", "self", ",", "\n", "pretrain_img_size", "=", "224", ",", "\n", "patch_size", "=", "4", ",", "\n", "in_chans", "=", "3", ",", "\n", "embed_dim", "=", "96", ",", "\n", "style", "=", "None", ",", "\n", "depths", "=", "[", "2", ",", "2", ",", "18", ",", "2", "]", ",", "\n", "num_heads", "=", "[", "3", ",", "6", ",", "12", ",", "24", "]", ",", "\n", "window_size", "=", "7", ",", "\n", "mlp_ratio", "=", "4.", ",", "\n", "mlp_type", "=", "[", "'FAN'", ",", "'FAN'", ",", "'FAN'", ",", "'Mlp'", "]", ",", "\n", "qkv_bias", "=", "True", ",", "\n", "qk_scale", "=", "None", ",", "\n", "drop_rate", "=", "0.", ",", "\n", "attn_drop_rate", "=", "0.", ",", "\n", "drop_path_rate", "=", "0.2", ",", "\n", "norm_layer", "=", "nn", ".", "LayerNorm", ",", "\n", "ape", "=", "False", ",", "\n", "patch_norm", "=", "True", ",", "\n", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "\n", "frozen_stages", "=", "-", "1", ",", "\n", "use_checkpoint", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pretrain_img_size", "=", "pretrain_img_size", "\n", "# import pdb; pdb.set_trace()", "\n", "self", ".", "num_layers", "=", "len", "(", "depths", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "ape", "=", "ape", "\n", "self", ".", "patch_norm", "=", "patch_norm", "\n", "self", ".", "out_indices", "=", "out_indices", "\n", "self", ".", "frozen_stages", "=", "frozen_stages", "\n", "\n", "# split image into non-overlapping patches", "\n", "self", ".", "patch_embed", "=", "PatchEmbed", "(", "\n", "patch_size", "=", "patch_size", ",", "in_chans", "=", "in_chans", ",", "embed_dim", "=", "embed_dim", ",", "\n", "norm_layer", "=", "norm_layer", "if", "self", ".", "patch_norm", "else", "None", ")", "\n", "\n", "# absolute position embedding", "\n", "if", "self", ".", "ape", ":", "\n", "            ", "pretrain_img_size", "=", "to_2tuple", "(", "pretrain_img_size", ")", "\n", "patch_size", "=", "to_2tuple", "(", "patch_size", ")", "\n", "patches_resolution", "=", "[", "pretrain_img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ",", "pretrain_img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", "]", "\n", "\n", "# self.absolute_pos_embed = nn.Parameter(torch.zeros(1, embed_dim, patches_resolution[0], patches_resolution[1]))", "\n", "self", ".", "absolute_pos_embed", "=", "PositionalEncodingFourier", "(", "dim", "=", "embed_dim", ")", "\n", "# trunc_normal_(self.absolute_pos_embed, std=.02)", "\n", "\n", "", "self", ".", "pos_drop", "=", "nn", ".", "Dropout", "(", "p", "=", "drop_rate", ")", "\n", "\n", "# stochastic depth", "\n", "dpr", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "# stochastic depth decay rule", "\n", "\n", "# build layers", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i_layer", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "BasicLayer", "(", "\n", "dim", "=", "int", "(", "embed_dim", "*", "2", "**", "i_layer", ")", ",", "\n", "depth", "=", "depths", "[", "i_layer", "]", ",", "\n", "mlp_type", "=", "mlp_type", "[", "i_layer", "]", ",", "\n", "num_heads", "=", "num_heads", "[", "i_layer", "]", ",", "\n", "window_size", "=", "window_size", ",", "\n", "mlp_ratio", "=", "mlp_ratio", ",", "\n", "qkv_bias", "=", "qkv_bias", ",", "\n", "qk_scale", "=", "qk_scale", ",", "\n", "drop", "=", "drop_rate", ",", "\n", "attn_drop", "=", "attn_drop_rate", ",", "\n", "drop_path", "=", "dpr", "[", "sum", "(", "depths", "[", ":", "i_layer", "]", ")", ":", "sum", "(", "depths", "[", ":", "i_layer", "+", "1", "]", ")", "]", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "downsample", "=", "PatchMerging", "if", "(", "i_layer", "<", "self", ".", "num_layers", "-", "1", ")", "else", "None", ",", "\n", "use_checkpoint", "=", "use_checkpoint", ")", "\n", "self", ".", "layers", ".", "append", "(", "layer", ")", "\n", "\n", "", "num_features", "=", "[", "int", "(", "embed_dim", "*", "2", "**", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", "]", "\n", "self", ".", "num_features", "=", "num_features", "\n", "\n", "# add a norm layer for each output", "\n", "for", "i_layer", "in", "out_indices", ":", "\n", "            ", "layer", "=", "norm_layer", "(", "num_features", "[", "i_layer", "]", ")", "\n", "layer_name", "=", "f'norm{i_layer}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n", "", "self", ".", "_freeze_stages", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer._freeze_stages": [[1027, 1043], ["swin_utils.FANSwinTransformer.patch_embed.eval", "swin_utils.FANSwinTransformer.patch_embed.parameters", "swin_utils.FANSwinTransformer.pos_drop.eval", "range", "m.eval", "m.parameters"], "methods", ["None"], ["", "def", "_freeze_stages", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "frozen_stages", ">=", "0", ":", "\n", "            ", "self", ".", "patch_embed", ".", "eval", "(", ")", "\n", "for", "param", "in", "self", ".", "patch_embed", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "if", "self", ".", "frozen_stages", ">=", "1", "and", "self", ".", "ape", ":", "\n", "            ", "self", ".", "absolute_pos_embed", ".", "requires_grad", "=", "False", "\n", "\n", "", "if", "self", ".", "frozen_stages", ">=", "2", ":", "\n", "            ", "self", ".", "pos_drop", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "frozen_stages", "-", "1", ")", ":", "\n", "                ", "m", "=", "self", ".", "layers", "[", "i", "]", "\n", "m", ".", "eval", "(", ")", "\n", "for", "param", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer.init_weights": [[1044, 1068], ["isinstance", "isinstance", "swin_utils.FANSwinTransformer.apply", "mmseg.utils.get_root_logger", "mmcv.runner.load_checkpoint", "timm.models.layers.trunc_normal_", "isinstance", "swin_utils.FANSwinTransformer.apply", "TypeError", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone.\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "\n", "def", "_init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "map_location", "=", "'cpu'", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer.forward": [[1069, 1097], ["swin_utils.FANSwinTransformer.patch_embed", "swin_utils.FANSwinTransformer.pos_drop", "range", "tuple", "x.flatten().transpose.flatten().transpose.size", "x.flatten().transpose.flatten().transpose.size", "x.flatten().transpose.flatten().transpose.size", "x.flatten().transpose.flatten().transpose.flatten().transpose", "layer", "getattr", "getattr.", "getattr.view().permute().contiguous", "outs.append", "x.flatten().transpose.flatten().transpose.flatten", "swin_utils.FANSwinTransformer.absolute_pos_embed", "getattr.view().permute", "getattr.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", ",", "(", "H", ",", "W", ")", "=", "self", ".", "patch_embed", "(", "x", ")", "\n", "\n", "B", ",", "Wh", ",", "Ww", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", "\n", "if", "self", ".", "ape", ":", "\n", "# interpolate the position embedding to the corresponding size", "\n", "# absolute_pos_embed = F.interpolate(self.absolute_pos_embed, size=(Wh, Ww), mode='bicubic')", "\n", "# x = (x + absolute_pos_embed).flatten(2).transpose(1, 2)  # B Wh*Ww C", "\n", "            ", "x", "=", "(", "x", "+", "self", ".", "absolute_pos_embed", "(", "B", ",", "H", ",", "W", ")", ")", ".", "reshape", "(", "B", ",", "-", "1", ",", "x", ".", "shape", "[", "1", "]", ")", "# .permute(0, 2, 1)", "\n", "# import pdb; pdb.set_trace()", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "layer", "=", "self", ".", "layers", "[", "i", "]", "\n", "x_out", ",", "H", ",", "W", ",", "x", ",", "Wh", ",", "Ww", "=", "layer", "(", "x", ",", "Wh", ",", "Ww", ")", "\n", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "norm_layer", "=", "getattr", "(", "self", ",", "f'norm{i}'", ")", "\n", "x_out", "=", "norm_layer", "(", "x_out", ")", "\n", "\n", "out", "=", "x_out", ".", "view", "(", "-", "1", ",", "H", ",", "W", ",", "self", ".", "num_features", "[", "i", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "outs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer.train": [[1098, 1102], ["super().train", "swin_utils.FANSwinTransformer._freeze_stages"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer.train", "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.FANSwinTransformer._freeze_stages"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Convert the model into training mode while keep layers freezed.\"\"\"", "\n", "super", "(", "FANSwinTransformer", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "_freeze_stages", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.window_partition": [[58, 70], ["x.view.view", "x.view.permute().contiguous().view", "x.view.permute().contiguous", "x.view.permute"], "function", ["None"], ["", "", "def", "window_partition", "(", "x", ",", "window_size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        x: (B, H, W, C)\n        window_size (int): window size\n    Returns:\n        windows: (num_windows*B, window_size, window_size, C)\n    \"\"\"", "\n", "B", ",", "H", ",", "W", ",", "C", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "C", ")", "\n", "windows", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "window_size", ",", "window_size", ",", "C", ")", "\n", "return", "windows", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.swin_utils.window_reverse": [[72, 86], ["int", "windows.view", "x.permute().contiguous().view.permute().contiguous().view", "x.permute().contiguous().view.permute().contiguous", "x.permute().contiguous().view.permute"], "function", ["None"], ["", "def", "window_reverse", "(", "windows", ",", "window_size", ",", "H", ",", "W", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        windows: (num_windows*B, window_size, window_size, C)\n        window_size (int): Window size\n        H (int): Height of image\n        W (int): Width of image\n    Returns:\n        x: (B, H, W, C)\n    \"\"\"", "\n", "B", "=", "int", "(", "windows", ".", "shape", "[", "0", "]", "/", "(", "H", "*", "W", "/", "window_size", "/", "window_size", ")", ")", "\n", "x", "=", "windows", ".", "view", "(", "B", ",", "H", "//", "window_size", ",", "W", "//", "window_size", ",", "window_size", ",", "window_size", ",", "-", "1", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "H", ",", "W", ",", "-", "1", ")", "\n", "return", "x", "\n", "", "class", "PositionalEncodingFourier", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.Mlp.__init__": [[91, 104], ["torch.Module.__init__", "act_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "GroupLinear", "GroupLinear"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "GELU", ",", "drop", "=", "0.", ",", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "if", "group", "==", "1", ":", "\n", "            ", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_features", ",", "hidden_features", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden_features", ",", "out_features", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc1", "=", "GroupLinear", "(", "in_features", ",", "hidden_features", ",", "group", ")", "\n", "self", ".", "fc2", "=", "GroupLinear", "(", "hidden_features", ",", "out_features", ",", "group", ")", "\n", "", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.Mlp.forward": [[105, 112], ["convnext_utils.Mlp.fc1", "convnext_utils.Mlp.act", "convnext_utils.Mlp.drop", "convnext_utils.Mlp.fc2", "convnext_utils.Mlp.drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "return", "x", "\n", "", "", "class", "ConvMlp", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvMlp.__init__": [[115, 125], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "act_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "norm_layer", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_features", ",", "hidden_features", "=", "None", ",", "out_features", "=", "None", ",", "act_layer", "=", "nn", ".", "ReLU", ",", "norm_layer", "=", "None", ",", "drop", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_features", "=", "out_features", "or", "in_features", "\n", "hidden_features", "=", "hidden_features", "or", "in_features", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_features", ",", "hidden_features", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "norm", "=", "norm_layer", "(", "hidden_features", ")", "if", "norm_layer", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "act", "=", "act_layer", "(", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "hidden_features", ",", "out_features", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvMlp.forward": [[126, 133], ["convnext_utils.ConvMlp.fc1", "convnext_utils.ConvMlp.norm", "convnext_utils.ConvMlp.act", "convnext_utils.ConvMlp.drop", "convnext_utils.ConvMlp.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "drop", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.LayerNorm2d.__init__": [[139, 141], ["torch.LayerNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "normalized_shape", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "normalized_shape", ",", "eps", "=", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.LayerNorm2d.forward": [[142, 151], ["convnext_utils._is_contiguous", "torch.layer_norm().permute", "torch.layer_norm().permute", "torch.layer_norm().permute", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.var_mean", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "x.permute"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._is_contiguous"], ["", "def", "forward", "(", "self", ",", "x", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "_is_contiguous", "(", "x", ")", ":", "\n", "            ", "return", "F", ".", "layer_norm", "(", "\n", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "self", ".", "normalized_shape", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "eps", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "s", ",", "u", "=", "torch", ".", "var_mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "*", "torch", ".", "rsqrt", "(", "s", "+", "self", ".", "eps", ")", "\n", "x", "=", "x", "*", "self", ".", "weight", "[", ":", ",", "None", ",", "None", "]", "+", "self", ".", "bias", "[", ":", ",", "None", ",", "None", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXtBlock.__init__": [[169, 180], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "mlp_layer", "int", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "functools.partial", "functools.partial", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "drop_path", "=", "0.", ",", "ls_init_value", "=", "1e-6", ",", "conv_mlp", "=", "True", ",", "mlp_ratio", "=", "4", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "norm_layer", ":", "\n", "            ", "norm_layer", "=", "partial", "(", "LayerNorm2d", ",", "eps", "=", "1e-6", ")", "if", "conv_mlp", "else", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "", "mlp_layer", "=", "ConvMlp", "if", "conv_mlp", "else", "Mlp", "\n", "self", ".", "use_conv_mlp", "=", "conv_mlp", "\n", "self", ".", "conv_dw", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "groups", "=", "dim", ")", "# depthwise conv", "\n", "self", ".", "norm", "=", "norm_layer", "(", "dim", ")", "\n", "self", ".", "mlp", "=", "mlp_layer", "(", "dim", ",", "int", "(", "mlp_ratio", "*", "dim", ")", ",", "act_layer", "=", "nn", ".", "GELU", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "ls_init_value", "*", "torch", ".", "ones", "(", "dim", ")", ")", "if", "ls_init_value", ">", "0", "else", "None", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXtBlock.forward": [[181, 196], ["convnext_utils.ConvNeXtBlock.conv_dw", "convnext_utils.ConvNeXtBlock.norm", "convnext_utils.ConvNeXtBlock.mlp", "x.mul.mul.permute", "convnext_utils.ConvNeXtBlock.norm", "convnext_utils.ConvNeXtBlock.mlp", "x.mul.mul.permute", "x.mul.mul.mul", "convnext_utils.ConvNeXtBlock.drop_path", "convnext_utils.ConvNeXtBlock.gamma.reshape"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.drop.drop_path"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "shortcut", "=", "x", "\n", "x", "=", "self", ".", "conv_dw", "(", "x", ")", "\n", "if", "self", ".", "use_conv_mlp", ":", "\n", "            ", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "mlp", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "if", "self", ".", "gamma", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "mul", "(", "self", ".", "gamma", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "", "x", "=", "self", ".", "drop_path", "(", "x", ")", "+", "shortcut", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXtStage.__init__": [[200, 218], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Identity", "torch.Identity", "torch.Identity", "norm_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convnext_utils.ConvNeXtBlock", "range"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_chs", ",", "out_chs", ",", "stride", "=", "2", ",", "depth", "=", "2", ",", "dp_rates", "=", "None", ",", "ls_init_value", "=", "1.0", ",", "conv_mlp", "=", "True", ",", "\n", "norm_layer", "=", "None", ",", "cl_norm_layer", "=", "None", ",", "cross_stage", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "in_chs", "!=", "out_chs", "or", "stride", ">", "1", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "norm_layer", "(", "in_chs", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_chs", ",", "out_chs", ",", "kernel_size", "=", "stride", ",", "stride", "=", "stride", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "dp_rates", "=", "dp_rates", "or", "[", "0.", "]", "*", "depth", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "ConvNeXtBlock", "(", "\n", "dim", "=", "out_chs", ",", "drop_path", "=", "dp_rates", "[", "j", "]", ",", "ls_init_value", "=", "ls_init_value", ",", "conv_mlp", "=", "conv_mlp", ",", "\n", "norm_layer", "=", "norm_layer", "if", "conv_mlp", "else", "cl_norm_layer", ")", "\n", "for", "j", "in", "range", "(", "depth", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXtStage.forward": [[220, 224], ["convnext_utils.ConvNeXtStage.downsample", "convnext_utils.ConvNeXtStage.blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.__init__": [[241, 307], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "timm.models.helpers.named_apply", "functools.partial", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "functools.partial.", "x.tolist", "len", "stages.append", "functools.partial.", "torch.Identity", "torch.Identity", "torch.Identity", "functools.partial", "functools.partial", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "torch.linspace().split", "convnext_utils.ConvNeXtStage", "dict", "timm.models.layers.ClassifierHead", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "timm.models.layers.SelectAdaptivePool2d", "functools.partial.", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "global_pool", "=", "'avg'", ",", "output_stride", "=", "32", ",", "patch_size", "=", "4", ",", "\n", "depths", "=", "(", "3", ",", "3", ",", "9", ",", "3", ")", ",", "dims", "=", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "ls_init_value", "=", "1e-6", ",", "conv_mlp", "=", "True", ",", "use_head", "=", "True", ",", "\n", "head_init_scale", "=", "1.", ",", "head_norm_first", "=", "False", ",", "norm_layer", "=", "None", ",", "drop_rate", "=", "0.", ",", "drop_path_rate", "=", "0.", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "output_stride", "==", "32", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "partial", "(", "LayerNorm2d", ",", "eps", "=", "1e-6", ")", "\n", "cl_norm_layer", "=", "norm_layer", "if", "conv_mlp", "else", "partial", "(", "nn", ".", "LayerNorm", ",", "eps", "=", "1e-6", ")", "\n", "", "else", ":", "\n", "            ", "assert", "conv_mlp", ",", "'If a norm_layer is specified, conv MLP must be used so all norm expect rank-4, channels-first input'", "\n", "cl_norm_layer", "=", "norm_layer", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "feature_info", "=", "[", "]", "\n", "\n", "# NOTE: this stem is a minimal form of ViT PatchEmbed, as used in SwinTransformer w/ patch_size = 4", "\n", "self", ".", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "dims", "[", "0", "]", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ")", ",", "\n", "norm_layer", "(", "dims", "[", "0", "]", ")", "\n", ")", "\n", "\n", "self", ".", "stages", "=", "nn", ".", "Sequential", "(", ")", "\n", "dp_rates", "=", "[", "x", ".", "tolist", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", ".", "split", "(", "depths", ")", "]", "\n", "curr_stride", "=", "patch_size", "\n", "prev_chs", "=", "dims", "[", "0", "]", "\n", "stages", "=", "[", "]", "\n", "# 4 feature resolution stages, each consisting of multiple residual blocks", "\n", "for", "i", "in", "range", "(", "len", "(", "depths", ")", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", ">", "0", "else", "1", "\n", "# FIXME support dilation / output_stride", "\n", "curr_stride", "*=", "stride", "\n", "out_chs", "=", "dims", "[", "i", "]", "\n", "stages", ".", "append", "(", "ConvNeXtStage", "(", "\n", "prev_chs", ",", "out_chs", ",", "stride", "=", "stride", ",", "\n", "depth", "=", "depths", "[", "i", "]", ",", "dp_rates", "=", "dp_rates", "[", "i", "]", ",", "ls_init_value", "=", "ls_init_value", ",", "conv_mlp", "=", "conv_mlp", ",", "\n", "norm_layer", "=", "norm_layer", ",", "cl_norm_layer", "=", "cl_norm_layer", ")", "\n", ")", "\n", "prev_chs", "=", "out_chs", "\n", "# NOTE feature_info use currently assumes stage 0 == stride 1, rest are stride 2", "\n", "self", ".", "feature_info", "+=", "[", "dict", "(", "num_chs", "=", "prev_chs", ",", "reduction", "=", "curr_stride", ",", "module", "=", "f'stages.{i}'", ")", "]", "\n", "", "self", ".", "stages", "=", "nn", ".", "Sequential", "(", "*", "stages", ")", "\n", "\n", "self", ".", "num_features", "=", "prev_chs", "\n", "\n", "if", "head_norm_first", ":", "\n", "# norm -> global pool -> fc ordering, like most other nets (not compat with FB weights)", "\n", "            ", "self", ".", "norm_pre", "=", "norm_layer", "(", "self", ".", "num_features", ")", "# final norm layer, before pooling", "\n", "if", "use_head", ":", "\n", "                ", "self", ".", "head", "=", "ClassifierHead", "(", "self", ".", "num_features", ",", "num_classes", ",", "pool_type", "=", "global_pool", ",", "drop_rate", "=", "drop_rate", ")", "\n", "", "", "else", ":", "\n", "# pool -> norm -> fc, the default ConvNeXt ordering (pretrained FB weights)", "\n", "            ", "self", ".", "norm_pre", "=", "nn", ".", "Identity", "(", ")", "\n", "if", "use_head", ":", "\n", "                ", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'global_pool'", ",", "SelectAdaptivePool2d", "(", "pool_type", "=", "global_pool", ")", ")", ",", "\n", "(", "'norm'", ",", "norm_layer", "(", "self", ".", "num_features", ")", ")", ",", "\n", "(", "'flatten'", ",", "nn", ".", "Flatten", "(", "1", ")", "if", "global_pool", "else", "nn", ".", "Identity", "(", ")", ")", ",", "\n", "(", "'drop'", ",", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", ")", ",", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", ")", "\n", "]", ")", ")", "\n", "\n", "", "", "named_apply", "(", "partial", "(", "_init_weights", ",", "head_init_scale", "=", "head_init_scale", ")", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.get_classifier": [[308, 310], ["None"], "methods", ["None"], ["", "def", "get_classifier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "head", ".", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.reset_classifier": [[311, 324], ["isinstance", "timm.models.layers.ClassifierHead", "torch.Sequential", "torch.Sequential", "torch.Sequential", "collections.OrderedDict", "timm.models.layers.SelectAdaptivePool2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Flatten", "torch.Flatten", "torch.Flatten", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["None"], ["", "def", "reset_classifier", "(", "self", ",", "num_classes", "=", "0", ",", "global_pool", "=", "'avg'", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "head", ",", "ClassifierHead", ")", ":", "\n", "# norm -> global pool -> fc", "\n", "            ", "self", ".", "head", "=", "ClassifierHead", "(", "\n", "self", ".", "num_features", ",", "num_classes", ",", "pool_type", "=", "global_pool", ",", "drop_rate", "=", "self", ".", "drop_rate", ")", "\n", "", "else", ":", "\n", "# pool -> norm -> fc", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'global_pool'", ",", "SelectAdaptivePool2d", "(", "pool_type", "=", "global_pool", ")", ")", ",", "\n", "(", "'norm'", ",", "self", ".", "head", ".", "norm", ")", ",", "\n", "(", "'flatten'", ",", "nn", ".", "Flatten", "(", "1", ")", "if", "global_pool", "else", "nn", ".", "Identity", "(", ")", ")", ",", "\n", "(", "'drop'", ",", "nn", ".", "Dropout", "(", "self", ".", "drop_rate", ")", ")", ",", "\n", "(", "'fc'", ",", "nn", ".", "Linear", "(", "self", ".", "num_features", ",", "num_classes", ")", "if", "num_classes", ">", "0", "else", "nn", ".", "Identity", "(", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features": [[326, 336], ["convnext_utils.ConvNeXt.stem", "range", "convnext_utils.ConvNeXt.norm_pre", "len", "out_list.append"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x", ",", "return_feat", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "out_list", "=", "[", "]", "\n", "# import pdb; pdb.set_trace()", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "stages", ")", ")", ":", "\n", "         ", "x", "=", "self", ".", "stages", "[", "i", "]", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "", "x", "=", "self", ".", "norm_pre", "(", "x", ")", "\n", "\n", "return", "x", ",", "out_list", "if", "return_feat", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward": [[337, 341], ["convnext_utils.ConvNeXt.forward_features", "convnext_utils.ConvNeXt.head"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.ConvNeXt.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._cfg": [[51, 59], ["None"], "function", ["None"], ["def", "_cfg", "(", "url", "=", "''", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "{", "\n", "'url'", ":", "url", ",", "\n", "'num_classes'", ":", "1000", ",", "'input_size'", ":", "(", "3", ",", "224", ",", "224", ")", ",", "'pool_size'", ":", "(", "7", ",", "7", ")", ",", "\n", "'crop_pct'", ":", "0.875", ",", "'interpolation'", ":", "'bicubic'", ",", "\n", "'mean'", ":", "IMAGENET_DEFAULT_MEAN", ",", "'std'", ":", "IMAGENET_DEFAULT_STD", ",", "\n", "'first_conv'", ":", "'stem.0'", ",", "'classifier'", ":", "'head.fc'", ",", "\n", "**", "kwargs", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._is_contiguous": [[80, 88], ["torch.jit.is_scripting", "torch.jit.is_scripting", "torch.jit.is_scripting", "tensor.is_contiguous", "tensor.is_contiguous"], "function", ["None"], ["def", "_is_contiguous", "(", "tensor", ":", "torch", ".", "Tensor", ")", "->", "bool", ":", "\n", "# jit is oh so lovely :/", "\n", "# if torch.jit.is_tracing():", "\n", "#     return True", "\n", "    ", "if", "torch", ".", "jit", ".", "is_scripting", "(", ")", ":", "\n", "        ", "return", "tensor", ".", "is_contiguous", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "tensor", ".", "is_contiguous", "(", "memory_format", "=", "torch", ".", "contiguous_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._init_weights": [[343, 353], ["isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "module.weight.data.mul_", "module.bias.data.mul_"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_", "home.repos.pwc.inspect_result.nvlabs_fan.utils.norm.trunc_normal_"], ["", "", "def", "_init_weights", "(", "module", ",", "name", "=", "None", ",", "head_init_scale", "=", "1.0", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "trunc_normal_", "(", "module", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "trunc_normal_", "(", "module", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0", ")", "\n", "if", "name", "and", "'head.'", "in", "name", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "mul_", "(", "head_init_scale", ")", "\n", "module", ".", "bias", ".", "data", ".", "mul_", "(", "head_init_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils.checkpoint_filter_fn": [[355, 376], ["state_dict.items", "k.replace.replace", "re.sub", "re.sub", "k.replace.replace", "k.replace.replace", "k.replace.replace", "model.state_dict().keys", "k.replace.startswith", "k.replace.replace", "v.reshape.reshape", "model.state_dict", "model.state_dict"], "function", ["None"], ["", "", "", "def", "checkpoint_filter_fn", "(", "state_dict", ",", "model", ")", ":", "\n", "    ", "\"\"\" Remap FB checkpoints -> timm \"\"\"", "\n", "if", "'model'", "in", "state_dict", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'model'", "]", "\n", "", "out_dict", "=", "{", "}", "\n", "import", "re", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "k", "=", "k", ".", "replace", "(", "'downsample_layers.0.'", ",", "'stem.'", ")", "\n", "k", "=", "re", ".", "sub", "(", "r'stages.([0-9]+).([0-9]+)'", ",", "r'stages.\\1.blocks.\\2'", ",", "k", ")", "\n", "k", "=", "re", ".", "sub", "(", "r'downsample_layers.([0-9]+).([0-9]+)'", ",", "r'stages.\\1.downsample.\\2'", ",", "k", ")", "\n", "k", "=", "k", ".", "replace", "(", "'dwconv'", ",", "'conv_dw'", ")", "\n", "k", "=", "k", ".", "replace", "(", "'pwconv'", ",", "'mlp.fc'", ")", "\n", "k", "=", "k", ".", "replace", "(", "'head.'", ",", "'head.fc.'", ")", "\n", "if", "k", "in", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'norm.'", ")", ":", "\n", "                ", "k", "=", "k", ".", "replace", "(", "'norm'", ",", "'head.norm'", ")", "\n", "", "if", "v", ".", "ndim", "==", "2", "and", "'head'", "not", "in", "k", ":", "\n", "                ", "model_shape", "=", "model", ".", "state_dict", "(", ")", "[", "k", "]", ".", "shape", "\n", "v", "=", "v", ".", "reshape", "(", "model_shape", ")", "\n", "", "out_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.backbones.convnext_utils._create_hybrid_backbone": [[378, 386], ["timm.models.helpers.build_model_with_cfg", "dict"], "function", ["None"], ["", "def", "_create_hybrid_backbone", "(", "variant", "=", "'convnext_base_in22k'", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "build_model_with_cfg", "(", "\n", "ConvNeXt", ",", "variant", ",", "pretrained", ",", "\n", "default_cfg", "=", "default_cfgs", "[", "variant", "]", ",", "\n", "pretrained_filter_fn", "=", "checkpoint_filter_fn", ",", "\n", "feature_cfg", "=", "dict", "(", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "flatten_sequential", "=", "True", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.__init__": [[19, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseSegmentor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fp16_enabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.with_neck": [[23, 27], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_neck", "(", "self", ")", ":", "\n", "        ", "\"\"\"bool: whether the segmentor has neck\"\"\"", "\n", "return", "hasattr", "(", "self", ",", "'neck'", ")", "and", "self", ".", "neck", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.with_auxiliary_head": [[28, 33], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_auxiliary_head", "(", "self", ")", ":", "\n", "        ", "\"\"\"bool: whether the segmentor has auxiliary head\"\"\"", "\n", "return", "hasattr", "(", "self", ",", "\n", "'auxiliary_head'", ")", "and", "self", ".", "auxiliary_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.with_decode_head": [[34, 38], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "with_decode_head", "(", "self", ")", ":", "\n", "        ", "\"\"\"bool: whether the segmentor has decode head\"\"\"", "\n", "return", "hasattr", "(", "self", ",", "'decode_head'", ")", "and", "self", ".", "decode_head", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.extract_feat": [[39, 43], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "extract_feat", "(", "self", ",", "imgs", ")", ":", "\n", "        ", "\"\"\"Placeholder for extract features from images.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.encode_decode": [[44, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "encode_decode", "(", "self", ",", "img", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Placeholder for encode images with backbone and decode into a\n        semantic segmentation map of the same size as input.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.forward_train": [[50, 54], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward_train", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Placeholder for Forward function for training.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.simple_test": [[55, 59], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Placeholder for single image test.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.aug_test": [[60, 64], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Placeholder for augmentation test.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.init_weights": [[65, 75], ["logging.getLogger", "logging.getLogger.info"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in segmentor.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "if", "pretrained", "is", "not", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "info", "(", "f'load model from: {pretrained}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.forward_test": [[76, 109], ["len", "len", "ValueError", "all", "all", "all", "base.BaseSegmentor.simple_test", "base.BaseSegmentor.aug_test", "isinstance", "TypeError", "len", "len", "type"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.simple_test", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.aug_test"], ["", "", "def", "forward_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            imgs (List[Tensor]): the outer list indicates test-time\n                augmentations and inner Tensor should have a shape NxCxHxW,\n                which contains all images in the batch.\n            img_metas (List[List[dict]]): the outer list indicates test-time\n                augs (multiscale, flip, etc.) and the inner list indicates\n                images in a batch.\n        \"\"\"", "\n", "for", "var", ",", "name", "in", "[", "(", "imgs", ",", "'imgs'", ")", ",", "(", "img_metas", ",", "'img_metas'", ")", "]", ":", "\n", "            ", "if", "not", "isinstance", "(", "var", ",", "list", ")", ":", "\n", "                ", "raise", "TypeError", "(", "f'{name} must be a list, but got '", "\n", "f'{type(var)}'", ")", "\n", "\n", "", "", "num_augs", "=", "len", "(", "imgs", ")", "\n", "if", "num_augs", "!=", "len", "(", "img_metas", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'num of augmentations ({len(imgs)}) != '", "\n", "f'num of image meta ({len(img_metas)})'", ")", "\n", "# all images in the same aug batch all of the same ori_shape and pad", "\n", "# shape", "\n", "", "for", "img_meta", "in", "img_metas", ":", "\n", "            ", "ori_shapes", "=", "[", "_", "[", "'ori_shape'", "]", "for", "_", "in", "img_meta", "]", "\n", "assert", "all", "(", "shape", "==", "ori_shapes", "[", "0", "]", "for", "shape", "in", "ori_shapes", ")", "\n", "img_shapes", "=", "[", "_", "[", "'img_shape'", "]", "for", "_", "in", "img_meta", "]", "\n", "assert", "all", "(", "shape", "==", "img_shapes", "[", "0", "]", "for", "shape", "in", "img_shapes", ")", "\n", "pad_shapes", "=", "[", "_", "[", "'pad_shape'", "]", "for", "_", "in", "img_meta", "]", "\n", "assert", "all", "(", "shape", "==", "pad_shapes", "[", "0", "]", "for", "shape", "in", "pad_shapes", ")", "\n", "\n", "", "if", "num_augs", "==", "1", ":", "\n", "            ", "return", "self", ".", "simple_test", "(", "imgs", "[", "0", "]", ",", "img_metas", "[", "0", "]", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "aug_test", "(", "imgs", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.forward": [[110, 125], ["mmcv.runner.auto_fp16", "base.BaseSegmentor.forward_train", "base.BaseSegmentor.forward_test"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_test"], ["", "", "@", "auto_fp16", "(", "apply_to", "=", "(", "'img'", ",", ")", ")", "\n", "def", "forward", "(", "self", ",", "img", ",", "img_metas", ",", "return_loss", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calls either :func:`forward_train` or :func:`forward_test` depending\n        on whether ``return_loss`` is ``True``.\n\n        Note this setting will change the expected inputs. When\n        ``return_loss=True``, img and img_meta are single-nested (i.e. Tensor\n        and List[dict]), and when ``resturn_loss=False``, img and img_meta\n        should be double nested (i.e.  List[Tensor], List[List[dict]]), with\n        the outer list indicating test time augmentations.\n        \"\"\"", "\n", "if", "return_loss", ":", "\n", "            ", "return", "self", ".", "forward_train", "(", "img", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward_test", "(", "img", ",", "img_metas", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.train_step": [[126, 161], ["base.BaseSegmentor.", "base.BaseSegmentor._parse_losses", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor._parse_losses"], ["", "", "def", "train_step", "(", "self", ",", "data_batch", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"The iteration step during training.\n\n        This method defines an iteration step during training, except for the\n        back propagation and optimizer updating, which are done in an optimizer\n        hook. Note that in some complicated cases or models, the whole process\n        including back propagation and optimizer updating is also defined in\n        this method, such as GAN.\n\n        Args:\n            data (dict): The output of dataloader.\n            optimizer (:obj:`torch.optim.Optimizer` | dict): The optimizer of\n                runner is passed to ``train_step()``. This argument is unused\n                and reserved.\n\n        Returns:\n            dict: It should contain at least 3 keys: ``loss``, ``log_vars``,\n                ``num_samples``.\n                ``loss`` is a tensor for back propagation, which can be a\n                weighted sum of multiple losses.\n                ``log_vars`` contains all the variables to be sent to the\n                logger.\n                ``num_samples`` indicates the batch size (when the model is\n                DDP, it means the batch size on each GPU), which is used for\n                averaging the logs.\n        \"\"\"", "\n", "losses", "=", "self", "(", "**", "data_batch", ")", "\n", "loss", ",", "log_vars", "=", "self", ".", "_parse_losses", "(", "losses", ")", "\n", "\n", "outputs", "=", "dict", "(", "\n", "loss", "=", "loss", ",", "\n", "log_vars", "=", "log_vars", ",", "\n", "num_samples", "=", "len", "(", "data_batch", "[", "'img'", "]", ".", "data", ")", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.val_step": [[162, 171], ["base.BaseSegmentor."], "methods", ["None"], ["", "def", "val_step", "(", "self", ",", "data_batch", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"The iteration step during validation.\n\n        This method shares the same signature as :func:`train_step`, but used\n        during val epochs. Note that the evaluation after training epochs is\n        not implemented with this method, but an evaluation hook.\n        \"\"\"", "\n", "output", "=", "self", "(", "**", "data_batch", ",", "**", "kwargs", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor._parse_losses": [[172, 207], ["collections.OrderedDict", "losses.items", "sum", "collections.OrderedDict.items", "isinstance", "loss_value.data.clone.data.clone.item", "loss_value.data.clone.data.clone.mean", "isinstance", "torch.is_available", "torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized", "torch.is_initialized", "loss_value.data.clone.data.clone.data.clone", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "sum", "TypeError", "collections.OrderedDict.items", "loss_value.data.clone.data.clone.div_", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "_loss.mean"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_world_size", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_world_size", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_world_size"], ["", "@", "staticmethod", "\n", "def", "_parse_losses", "(", "losses", ")", ":", "\n", "        ", "\"\"\"Parse the raw outputs (losses) of the network.\n\n        Args:\n            losses (dict): Raw output of the network, which usually contain\n                losses and other necessary information.\n\n        Returns:\n            tuple[Tensor, dict]: (loss, log_vars), loss is the loss tensor\n                which may be a weighted sum of all losses, log_vars contains\n                all the variables to be sent to the logger.\n        \"\"\"", "\n", "log_vars", "=", "OrderedDict", "(", ")", "\n", "for", "loss_name", ",", "loss_value", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "loss_value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "mean", "(", ")", "\n", "", "elif", "isinstance", "(", "loss_value", ",", "list", ")", ":", "\n", "                ", "log_vars", "[", "loss_name", "]", "=", "sum", "(", "_loss", ".", "mean", "(", ")", "for", "_loss", "in", "loss_value", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "f'{loss_name} is not a tensor or list of tensors'", ")", "\n", "\n", "", "", "loss", "=", "sum", "(", "_value", "for", "_key", ",", "_value", "in", "log_vars", ".", "items", "(", ")", "\n", "if", "'loss'", "in", "_key", ")", "\n", "\n", "log_vars", "[", "'loss'", "]", "=", "loss", "\n", "for", "loss_name", ",", "loss_value", "in", "log_vars", ".", "items", "(", ")", ":", "\n", "# reduce loss when distributed training", "\n", "            ", "if", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ":", "\n", "                ", "loss_value", "=", "loss_value", ".", "data", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "loss_value", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ")", "\n", "", "log_vars", "[", "loss_name", "]", "=", "loss_value", ".", "item", "(", ")", "\n", "\n", "", "return", "loss", ",", "log_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.base.BaseSegmentor.show_result": [[208, 271], ["mmcv.imread", "img.astype.astype.copy", "numpy.array", "numpy.zeros", "enumerate", "img.astype.astype.astype", "len", "len", "mmcv.imshow", "mmcv.imwrite", "warnings.warn", "numpy.random.randint", "len"], "methods", ["None"], ["", "def", "show_result", "(", "self", ",", "\n", "img", ",", "\n", "result", ",", "\n", "palette", "=", "None", ",", "\n", "win_name", "=", "''", ",", "\n", "show", "=", "False", ",", "\n", "wait_time", "=", "0", ",", "\n", "out_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"Draw `result` over `img`.\n\n        Args:\n            img (str or Tensor): The image to be displayed.\n            result (Tensor): The semantic segmentation results to draw over\n                `img`.\n            palette (list[list[int]]] | np.ndarray | None): The palette of\n                segmentation map. If None is given, random palette will be\n                generated. Default: None\n            win_name (str): The window name.\n            wait_time (int): Value of waitKey param.\n                Default: 0.\n            show (bool): Whether to show the image.\n                Default: False.\n            out_file (str or None): The filename to write the image.\n                Default: None.\n\n        Returns:\n            img (Tensor): Only if not `show` or `out_file`\n        \"\"\"", "\n", "img", "=", "mmcv", ".", "imread", "(", "img", ")", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "seg", "=", "result", "[", "0", "]", "\n", "if", "palette", "is", "None", ":", "\n", "            ", "if", "self", ".", "PALETTE", "is", "None", ":", "\n", "                ", "palette", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "255", ",", "size", "=", "(", "len", "(", "self", ".", "CLASSES", ")", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "palette", "=", "self", ".", "PALETTE", "\n", "", "", "palette", "=", "np", ".", "array", "(", "palette", ")", "\n", "assert", "palette", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "CLASSES", ")", "\n", "assert", "palette", ".", "shape", "[", "1", "]", "==", "3", "\n", "assert", "len", "(", "palette", ".", "shape", ")", "==", "2", "\n", "color_seg", "=", "np", ".", "zeros", "(", "(", "seg", ".", "shape", "[", "0", "]", ",", "seg", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "label", ",", "color", "in", "enumerate", "(", "palette", ")", ":", "\n", "            ", "color_seg", "[", "seg", "==", "label", ",", ":", "]", "=", "color", "\n", "# convert to BGR", "\n", "", "color_seg", "=", "color_seg", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "# from IPython import embed; embed(header='debug vis')", "\n", "img", "=", "img", "*", "0.5", "+", "color_seg", "*", "0.5", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# if out_file specified, do not show image in window", "\n", "if", "out_file", "is", "not", "None", ":", "\n", "            ", "show", "=", "False", "\n", "\n", "", "if", "show", ":", "\n", "            ", "mmcv", ".", "imshow", "(", "img", ",", "win_name", ",", "wait_time", ")", "\n", "", "if", "out_file", "is", "not", "None", ":", "\n", "            ", "mmcv", ".", "imwrite", "(", "img", ",", "out_file", ")", "\n", "\n", "", "if", "not", "(", "show", "or", "out_file", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "'show==False and out_file is not specified, only '", "\n", "'result image will be returned'", ")", "\n", "return", "img", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder.__init__": [[19, 37], ["encoder_decoder.EncoderDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_stages", ",", "\n", "backbone", ",", "\n", "decode_head", ",", "\n", "neck", "=", "None", ",", "\n", "auxiliary_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_stages", "=", "num_stages", "\n", "super", "(", "CascadeEncoderDecoder", ",", "self", ")", ".", "__init__", "(", "\n", "backbone", "=", "backbone", ",", "\n", "decode_head", "=", "decode_head", ",", "\n", "neck", "=", "neck", ",", "\n", "auxiliary_head", "=", "auxiliary_head", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder._init_decode_head": [[38, 47], ["isinstance", "torch.nn.ModuleList", "range", "len", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head.append", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_head"], ["", "def", "_init_decode_head", "(", "self", ",", "decode_head", ")", ":", "\n", "        ", "\"\"\"Initialize ``decode_head``\"\"\"", "\n", "assert", "isinstance", "(", "decode_head", ",", "list", ")", "\n", "assert", "len", "(", "decode_head", ")", "==", "self", ".", "num_stages", "\n", "self", ".", "decode_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "decode_head", ".", "append", "(", "builder", ".", "build_head", "(", "decode_head", "[", "i", "]", ")", ")", "\n", "", "self", ".", "align_corners", "=", "self", ".", "decode_head", "[", "-", "1", "]", ".", "align_corners", "\n", "self", ".", "num_classes", "=", "self", ".", "decode_head", "[", "-", "1", "]", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder.init_weights": [[48, 64], ["cascade_encoder_decoder.CascadeEncoderDecoder.backbone.init_weights", "range", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].init_weights", "isinstance", "cascade_encoder_decoder.CascadeEncoderDecoder.auxiliary_head.init_weights", "aux_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights"], ["", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone and heads.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "            ", "self", ".", "decode_head", "[", "i", "]", ".", "init_weights", "(", ")", "\n", "", "if", "self", ".", "with_auxiliary_head", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "auxiliary_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "for", "aux_head", "in", "self", ".", "auxiliary_head", ":", "\n", "                    ", "aux_head", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "auxiliary_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder.encode_decode": [[65, 79], ["cascade_encoder_decoder.CascadeEncoderDecoder.extract_feat", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_test", "range", "mmseg.ops.resize", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_test"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.extract_feat", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_test", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_test"], ["", "", "", "def", "encode_decode", "(", "self", ",", "img", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Encode images with backbone and decode into a semantic segmentation\n        map of the same size as input.\"\"\"", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "out", "=", "self", ".", "decode_head", "[", "0", "]", ".", "forward_test", "(", "x", ",", "img_metas", ",", "self", ".", "test_cfg", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_stages", ")", ":", "\n", "            ", "out", "=", "self", ".", "decode_head", "[", "i", "]", ".", "forward_test", "(", "x", ",", "out", ",", "img_metas", ",", "\n", "self", ".", "test_cfg", ")", "\n", "", "out", "=", "resize", "(", "\n", "input", "=", "out", ",", "\n", "size", "=", "img", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.cascade_encoder_decoder.CascadeEncoderDecoder._decode_head_forward_train": [[80, 99], ["dict", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_train", "dict.update", "range", "mmseg.core.add_prefix", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_test", "cascade_encoder_decoder.CascadeEncoderDecoder.decode_head[].forward_train", "dict.update", "mmseg.core.add_prefix"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_test", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix"], ["", "def", "_decode_head_forward_train", "(", "self", ",", "x", ",", "img_metas", ",", "gt_semantic_seg", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for decode head in\n        training.\"\"\"", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "loss_decode", "=", "self", ".", "decode_head", "[", "0", "]", ".", "forward_train", "(", "\n", "x", ",", "img_metas", ",", "gt_semantic_seg", ",", "self", ".", "train_cfg", ")", "\n", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_decode", ",", "'decode_0'", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_stages", ")", ":", "\n", "# forward test again, maybe unnecessary for most methods.", "\n", "            ", "prev_outputs", "=", "self", ".", "decode_head", "[", "i", "-", "1", "]", ".", "forward_test", "(", "\n", "x", ",", "img_metas", ",", "self", ".", "test_cfg", ")", "\n", "loss_decode", "=", "self", ".", "decode_head", "[", "i", "]", ".", "forward_train", "(", "\n", "x", ",", "prev_outputs", ",", "img_metas", ",", "gt_semantic_seg", ",", "self", ".", "train_cfg", ")", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_decode", ",", "f'decode_{i}'", ")", ")", "\n", "\n", "", "return", "losses", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.__init__": [[21, 42], ["base.BaseSegmentor.__init__", "builder.build_backbone", "encoder_decoder.EncoderDecoder._init_decode_head", "encoder_decoder.EncoderDecoder._init_auxiliary_head", "encoder_decoder.EncoderDecoder.init_weights", "builder.build_neck"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_backbone", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._init_decode_head", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._init_auxiliary_head", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_neck"], ["def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "decode_head", ",", "\n", "neck", "=", "None", ",", "\n", "auxiliary_head", "=", "None", ",", "\n", "train_cfg", "=", "None", ",", "\n", "test_cfg", "=", "None", ",", "\n", "pretrained", "=", "None", ")", ":", "\n", "        ", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "backbone", "=", "builder", ".", "build_backbone", "(", "backbone", ")", "\n", "if", "neck", "is", "not", "None", ":", "\n", "            ", "self", ".", "neck", "=", "builder", ".", "build_neck", "(", "neck", ")", "\n", "", "self", ".", "_init_decode_head", "(", "decode_head", ")", "\n", "self", ".", "_init_auxiliary_head", "(", "auxiliary_head", ")", "\n", "\n", "self", ".", "train_cfg", "=", "train_cfg", "\n", "self", ".", "test_cfg", "=", "test_cfg", "\n", "\n", "self", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "\n", "assert", "self", ".", "with_decode_head", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._init_decode_head": [[43, 48], ["builder.build_head"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_head"], ["", "def", "_init_decode_head", "(", "self", ",", "decode_head", ")", ":", "\n", "        ", "\"\"\"Initialize ``decode_head``\"\"\"", "\n", "self", ".", "decode_head", "=", "builder", ".", "build_head", "(", "decode_head", ")", "\n", "self", ".", "align_corners", "=", "self", ".", "decode_head", ".", "align_corners", "\n", "self", ".", "num_classes", "=", "self", ".", "decode_head", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._init_auxiliary_head": [[49, 58], ["isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "builder.build_head", "encoder_decoder.EncoderDecoder.auxiliary_head.append", "builder.build_head"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_head", "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_head"], ["", "def", "_init_auxiliary_head", "(", "self", ",", "auxiliary_head", ")", ":", "\n", "        ", "\"\"\"Initialize ``auxiliary_head``\"\"\"", "\n", "if", "auxiliary_head", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "auxiliary_head", ",", "list", ")", ":", "\n", "                ", "self", ".", "auxiliary_head", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "head_cfg", "in", "auxiliary_head", ":", "\n", "                    ", "self", ".", "auxiliary_head", ".", "append", "(", "builder", ".", "build_head", "(", "head_cfg", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "auxiliary_head", "=", "builder", ".", "build_head", "(", "auxiliary_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.init_weights": [[59, 76], ["super().init_weights", "encoder_decoder.EncoderDecoder.backbone.init_weights", "encoder_decoder.EncoderDecoder.decode_head.init_weights", "isinstance", "encoder_decoder.EncoderDecoder.auxiliary_head.init_weights", "aux_head.init_weights"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights"], ["", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone and heads.\n\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "\n", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "init_weights", "(", "pretrained", ")", "\n", "self", ".", "backbone", ".", "init_weights", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "decode_head", ".", "init_weights", "(", ")", "\n", "if", "self", ".", "with_auxiliary_head", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "auxiliary_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "                ", "for", "aux_head", "in", "self", ".", "auxiliary_head", ":", "\n", "                    ", "aux_head", ".", "init_weights", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "auxiliary_head", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.extract_feat": [[77, 83], ["encoder_decoder.EncoderDecoder.backbone", "encoder_decoder.EncoderDecoder.neck"], "methods", ["None"], ["", "", "", "def", "extract_feat", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Extract features from images.\"\"\"", "\n", "x", "=", "self", ".", "backbone", "(", "img", ")", "\n", "if", "self", ".", "with_neck", ":", "\n", "            ", "x", "=", "self", ".", "neck", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.encode_decode": [[84, 95], ["encoder_decoder.EncoderDecoder.extract_feat", "encoder_decoder.EncoderDecoder._decode_head_forward_test", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.extract_feat", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._decode_head_forward_test", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "encode_decode", "(", "self", ",", "img", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Encode images with backbone and decode into a semantic segmentation\n        map of the same size as input.\"\"\"", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "out", "=", "self", ".", "_decode_head_forward_test", "(", "x", ",", "img_metas", ")", "\n", "out", "=", "resize", "(", "\n", "input", "=", "out", ",", "\n", "size", "=", "img", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._decode_head_forward_train": [[96, 106], ["dict", "encoder_decoder.EncoderDecoder.decode_head.forward_train", "dict.update", "mmseg.core.add_prefix"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix"], ["", "def", "_decode_head_forward_train", "(", "self", ",", "x", ",", "img_metas", ",", "gt_semantic_seg", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for decode head in\n        training.\"\"\"", "\n", "losses", "=", "dict", "(", ")", "\n", "loss_decode", "=", "self", ".", "decode_head", ".", "forward_train", "(", "x", ",", "img_metas", ",", "\n", "gt_semantic_seg", ",", "\n", "self", ".", "train_cfg", ")", "\n", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_decode", ",", "'decode'", ")", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._decode_head_forward_test": [[107, 112], ["encoder_decoder.EncoderDecoder.decode_head.forward_test"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_test"], ["", "def", "_decode_head_forward_test", "(", "self", ",", "x", ",", "img_metas", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for decode head in\n        inference.\"\"\"", "\n", "seg_logits", "=", "self", ".", "decode_head", ".", "forward_test", "(", "x", ",", "img_metas", ",", "self", ".", "test_cfg", ")", "\n", "return", "seg_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._auxiliary_head_forward_train": [[113, 129], ["dict", "isinstance", "enumerate", "encoder_decoder.EncoderDecoder.auxiliary_head.forward_train", "dict.update", "aux_head.forward_train", "dict.update", "mmseg.core.add_prefix", "mmseg.core.add_prefix"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_train", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix", "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix"], ["", "def", "_auxiliary_head_forward_train", "(", "self", ",", "x", ",", "img_metas", ",", "gt_semantic_seg", ")", ":", "\n", "        ", "\"\"\"Run forward function and calculate loss for auxiliary head in\n        training.\"\"\"", "\n", "losses", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "self", ".", "auxiliary_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "            ", "for", "idx", ",", "aux_head", "in", "enumerate", "(", "self", ".", "auxiliary_head", ")", ":", "\n", "                ", "loss_aux", "=", "aux_head", ".", "forward_train", "(", "x", ",", "img_metas", ",", "\n", "gt_semantic_seg", ",", "\n", "self", ".", "train_cfg", ")", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_aux", ",", "f'aux_{idx}'", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "loss_aux", "=", "self", ".", "auxiliary_head", ".", "forward_train", "(", "\n", "x", ",", "img_metas", ",", "gt_semantic_seg", ",", "self", ".", "train_cfg", ")", "\n", "losses", ".", "update", "(", "add_prefix", "(", "loss_aux", ",", "'aux'", ")", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.forward_dummy": [[130, 135], ["encoder_decoder.EncoderDecoder.encode_decode"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.encode_decode"], ["", "def", "forward_dummy", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Dummy forward function.\"\"\"", "\n", "seg_logit", "=", "self", ".", "encode_decode", "(", "img", ",", "None", ")", "\n", "\n", "return", "seg_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.forward_train": [[136, 167], ["encoder_decoder.EncoderDecoder.extract_feat", "dict", "encoder_decoder.EncoderDecoder._decode_head_forward_train", "dict.update", "encoder_decoder.EncoderDecoder._auxiliary_head_forward_train", "dict.update"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.extract_feat", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._decode_head_forward_train", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder._auxiliary_head_forward_train", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["", "def", "forward_train", "(", "self", ",", "img", ",", "img_metas", ",", "gt_semantic_seg", ")", ":", "\n", "        ", "\"\"\"Forward function for training.\n\n        Args:\n            img (Tensor): Input images.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            gt_semantic_seg (Tensor): Semantic segmentation masks\n                used if the architecture supports semantic segmentation task.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "\n", "x", "=", "self", ".", "extract_feat", "(", "img", ")", "\n", "\n", "losses", "=", "dict", "(", ")", "\n", "\n", "loss_decode", "=", "self", ".", "_decode_head_forward_train", "(", "x", ",", "img_metas", ",", "\n", "gt_semantic_seg", ")", "\n", "losses", ".", "update", "(", "loss_decode", ")", "\n", "\n", "if", "self", ".", "with_auxiliary_head", ":", "\n", "            ", "loss_aux", "=", "self", ".", "_auxiliary_head_forward_train", "(", "\n", "x", ",", "img_metas", ",", "gt_semantic_seg", ")", "\n", "losses", ".", "update", "(", "loss_aux", ")", "\n", "\n", "", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.slide_inference": [[169, 213], ["img.size", "img.new_zeros", "img.new_zeros", "range", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "range", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "mmseg.ops.resize", "max", "max", "min", "min", "max", "max", "encoder_decoder.EncoderDecoder.encode_decode", "torch.pad", "torch.pad", "torch.pad", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "int", "int", "int", "torch.from_numpy().to.cpu().detach().numpy", "torch.from_numpy().to.cpu().detach().numpy", "torch.from_numpy().to.cpu().detach().numpy", "torch.from_numpy().to.cpu().detach", "torch.from_numpy().to.cpu().detach", "torch.from_numpy().to.cpu().detach", "torch.from_numpy().to.cpu", "torch.from_numpy().to.cpu", "torch.from_numpy().to.cpu"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.encode_decode"], ["", "def", "slide_inference", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Inference by sliding-window with overlap.\n\n        If h_crop > h_img or w_crop > w_img, the small patch will be used to\n        decode without padding.\n        \"\"\"", "\n", "\n", "h_stride", ",", "w_stride", "=", "self", ".", "test_cfg", ".", "stride", "\n", "h_crop", ",", "w_crop", "=", "self", ".", "test_cfg", ".", "crop_size", "\n", "batch_size", ",", "_", ",", "h_img", ",", "w_img", "=", "img", ".", "size", "(", ")", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "h_grids", "=", "max", "(", "h_img", "-", "h_crop", "+", "h_stride", "-", "1", ",", "0", ")", "//", "h_stride", "+", "1", "\n", "w_grids", "=", "max", "(", "w_img", "-", "w_crop", "+", "w_stride", "-", "1", ",", "0", ")", "//", "w_stride", "+", "1", "\n", "preds", "=", "img", ".", "new_zeros", "(", "(", "batch_size", ",", "num_classes", ",", "h_img", ",", "w_img", ")", ")", "\n", "count_mat", "=", "img", ".", "new_zeros", "(", "(", "batch_size", ",", "1", ",", "h_img", ",", "w_img", ")", ")", "\n", "for", "h_idx", "in", "range", "(", "h_grids", ")", ":", "\n", "            ", "for", "w_idx", "in", "range", "(", "w_grids", ")", ":", "\n", "                ", "y1", "=", "h_idx", "*", "h_stride", "\n", "x1", "=", "w_idx", "*", "w_stride", "\n", "y2", "=", "min", "(", "y1", "+", "h_crop", ",", "h_img", ")", "\n", "x2", "=", "min", "(", "x1", "+", "w_crop", ",", "w_img", ")", "\n", "y1", "=", "max", "(", "y2", "-", "h_crop", ",", "0", ")", "\n", "x1", "=", "max", "(", "x2", "-", "w_crop", ",", "0", ")", "\n", "crop_img", "=", "img", "[", ":", ",", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "\n", "crop_seg_logit", "=", "self", ".", "encode_decode", "(", "crop_img", ",", "img_meta", ")", "\n", "preds", "+=", "F", ".", "pad", "(", "crop_seg_logit", ",", "\n", "(", "int", "(", "x1", ")", ",", "int", "(", "preds", ".", "shape", "[", "3", "]", "-", "x2", ")", ",", "int", "(", "y1", ")", ",", "\n", "int", "(", "preds", ".", "shape", "[", "2", "]", "-", "y2", ")", ")", ")", "\n", "\n", "count_mat", "[", ":", ",", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "1", "\n", "", "", "assert", "(", "count_mat", "==", "0", ")", ".", "sum", "(", ")", "==", "0", "\n", "if", "torch", ".", "onnx", ".", "is_in_onnx_export", "(", ")", ":", "\n", "# cast count_mat to constant while exporting to ONNX", "\n", "            ", "count_mat", "=", "torch", ".", "from_numpy", "(", "\n", "count_mat", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", ".", "to", "(", "device", "=", "img", ".", "device", ")", "\n", "", "preds", "=", "preds", "/", "count_mat", "\n", "if", "rescale", ":", "\n", "            ", "preds", "=", "resize", "(", "\n", "preds", ",", "\n", "size", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "[", ":", "2", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ",", "\n", "warning", "=", "False", ")", "\n", "", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.whole_inference": [[214, 227], ["encoder_decoder.EncoderDecoder.encode_decode", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.encode_decode", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "whole_inference", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Inference with full image.\"\"\"", "\n", "\n", "seg_logit", "=", "self", ".", "encode_decode", "(", "img", ",", "img_meta", ")", "\n", "if", "rescale", ":", "\n", "            ", "seg_logit", "=", "resize", "(", "\n", "seg_logit", ",", "\n", "size", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "[", ":", "2", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ",", "\n", "warning", "=", "False", ")", "\n", "\n", "", "return", "seg_logit", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.inference": [[228, 262], ["all", "torch.softmax", "torch.softmax", "torch.softmax", "encoder_decoder.EncoderDecoder.slide_inference", "encoder_decoder.EncoderDecoder.whole_inference", "output.flip.flip.flip", "output.flip.flip.flip"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.slide_inference", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.whole_inference"], ["", "def", "inference", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", ")", ":", "\n", "        ", "\"\"\"Inference with slide/whole style.\n\n        Args:\n            img (Tensor): The input image of shape (N, 3, H, W).\n            img_meta (dict): Image info dict where each dict has: 'img_shape',\n                'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            rescale (bool): Whether rescale back to original shape.\n\n        Returns:\n            Tensor: The output segmentation map.\n        \"\"\"", "\n", "\n", "assert", "self", ".", "test_cfg", ".", "mode", "in", "[", "'slide'", ",", "'whole'", "]", "\n", "ori_shape", "=", "img_meta", "[", "0", "]", "[", "'ori_shape'", "]", "\n", "assert", "all", "(", "_", "[", "'ori_shape'", "]", "==", "ori_shape", "for", "_", "in", "img_meta", ")", "\n", "if", "self", ".", "test_cfg", ".", "mode", "==", "'slide'", ":", "\n", "            ", "seg_logit", "=", "self", ".", "slide_inference", "(", "img", ",", "img_meta", ",", "rescale", ")", "\n", "", "else", ":", "\n", "            ", "seg_logit", "=", "self", ".", "whole_inference", "(", "img", ",", "img_meta", ",", "rescale", ")", "\n", "", "output", "=", "F", ".", "softmax", "(", "seg_logit", ",", "dim", "=", "1", ")", "\n", "flip", "=", "img_meta", "[", "0", "]", "[", "'flip'", "]", "\n", "if", "flip", ":", "\n", "            ", "flip_direction", "=", "img_meta", "[", "0", "]", "[", "'flip_direction'", "]", "\n", "assert", "flip_direction", "in", "[", "'horizontal'", ",", "'vertical'", "]", "\n", "if", "flip_direction", "==", "'horizontal'", ":", "\n", "                ", "output", "=", "output", ".", "flip", "(", "dims", "=", "(", "3", ",", ")", ")", "\n", "", "elif", "flip_direction", "==", "'vertical'", ":", "\n", "                ", "output", "=", "output", ".", "flip", "(", "dims", "=", "(", "2", ",", ")", ")", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.simple_test": [[263, 275], ["encoder_decoder.EncoderDecoder.inference", "encoder_decoder.EncoderDecoder.argmax", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "torch.onnx.is_in_onnx_export", "seg_pred.unsqueeze.unsqueeze.cpu().numpy", "list", "seg_pred.unsqueeze.unsqueeze.unsqueeze", "seg_pred.unsqueeze.unsqueeze.cpu"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.inference"], ["", "def", "simple_test", "(", "self", ",", "img", ",", "img_meta", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "\"\"\"Simple test with single image.\"\"\"", "\n", "seg_logit", "=", "self", ".", "inference", "(", "img", ",", "img_meta", ",", "rescale", ")", "\n", "seg_pred", "=", "seg_logit", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "if", "torch", ".", "onnx", ".", "is_in_onnx_export", "(", ")", ":", "\n", "# our inference backend only support 4D output", "\n", "            ", "seg_pred", "=", "seg_pred", ".", "unsqueeze", "(", "0", ")", "\n", "return", "seg_pred", "\n", "", "seg_pred", "=", "seg_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# unravel batch dim", "\n", "seg_pred", "=", "list", "(", "seg_pred", ")", "\n", "return", "seg_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.aug_test": [[276, 294], ["encoder_decoder.EncoderDecoder.inference", "range", "len", "encoder_decoder.EncoderDecoder.argmax", "list.cpu().numpy", "list", "len", "encoder_decoder.EncoderDecoder.inference", "list.cpu"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.inference", "home.repos.pwc.inspect_result.nvlabs_fan.segmentors.encoder_decoder.EncoderDecoder.inference"], ["", "def", "aug_test", "(", "self", ",", "imgs", ",", "img_metas", ",", "rescale", "=", "True", ")", ":", "\n", "        ", "\"\"\"Test with augmentations.\n\n        Only rescale=True is supported.\n        \"\"\"", "\n", "# aug_test rescale all imgs back to ori_shape for now", "\n", "assert", "rescale", "\n", "# to save memory, we get augmented seg logit inplace", "\n", "seg_logit", "=", "self", ".", "inference", "(", "imgs", "[", "0", "]", ",", "img_metas", "[", "0", "]", ",", "rescale", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "imgs", ")", ")", ":", "\n", "            ", "cur_seg_logit", "=", "self", ".", "inference", "(", "imgs", "[", "i", "]", ",", "img_metas", "[", "i", "]", ",", "rescale", ")", "\n", "seg_logit", "+=", "cur_seg_logit", "\n", "", "seg_logit", "/=", "len", "(", "imgs", ")", "\n", "seg_pred", "=", "seg_logit", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "seg_pred", "=", "seg_pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# unravel batch dim", "\n", "seg_pred", "=", "list", "(", "seg_pred", ")", "\n", "return", "seg_pred", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.fpn_head.FPNHead.__init__": [[23, 53], ["decode_head.BaseDecodeHead.__init__", "torch.ModuleList", "range", "len", "len", "min", "len", "max", "range", "fpn_head.FPNHead.scale_heads.append", "int", "scale_head.append", "torch.Sequential", "mmcv.cnn.ConvModule", "scale_head.append", "numpy.log2", "numpy.log2", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["def", "__init__", "(", "self", ",", "feature_strides", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "FPNHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "assert", "len", "(", "feature_strides", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "assert", "min", "(", "feature_strides", ")", "==", "feature_strides", "[", "0", "]", "\n", "self", ".", "feature_strides", "=", "feature_strides", "\n", "\n", "self", ".", "scale_heads", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feature_strides", ")", ")", ":", "\n", "            ", "head_length", "=", "max", "(", "\n", "1", ",", "\n", "int", "(", "np", ".", "log2", "(", "feature_strides", "[", "i", "]", ")", "-", "np", ".", "log2", "(", "feature_strides", "[", "0", "]", ")", ")", ")", "\n", "scale_head", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "head_length", ")", ":", "\n", "                ", "scale_head", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "i", "]", "if", "k", "==", "0", "else", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "if", "feature_strides", "[", "i", "]", "!=", "feature_strides", "[", "0", "]", ":", "\n", "                    ", "scale_head", ".", "append", "(", "\n", "nn", ".", "Upsample", "(", "\n", "scale_factor", "=", "2", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", ")", "\n", "", "", "self", ".", "scale_heads", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "scale_head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.fpn_head.FPNHead.forward": [[54, 70], ["fpn_head.FPNHead._transform_inputs", "range", "fpn_head.FPNHead.cls_seg", "len", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "\n", "output", "=", "self", ".", "scale_heads", "[", "0", "]", "(", "x", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "self", ".", "feature_strides", ")", ")", ":", "\n", "# non inplace", "\n", "            ", "output", "=", "output", "+", "resize", "(", "\n", "self", ".", "scale_heads", "[", "i", "]", "(", "x", "[", "i", "]", ")", ",", "\n", "size", "=", "output", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "# embed(header='123123')", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ema_head.EMAModule.__init__": [[31, 43], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.normalize.normal_", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "ema_head.EMAModule.register_buffer", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "num_bases", ",", "num_stages", ",", "momentum", ")", ":", "\n", "        ", "super", "(", "EMAModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "num_stages", ">=", "1", ",", "'num_stages must be at least 1!'", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "momentum", "=", "momentum", "\n", "\n", "bases", "=", "torch", ".", "zeros", "(", "1", ",", "channels", ",", "self", ".", "num_bases", ")", "\n", "bases", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "self", ".", "num_bases", ")", ")", "\n", "# [1, channels, num_bases]", "\n", "bases", "=", "F", ".", "normalize", "(", "bases", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "self", ".", "register_buffer", "(", "'bases'", ",", "bases", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ema_head.EMAModule.forward": [[44, 76], ["feats.view.view.size", "feats.view.view.view", "ema_head.EMAModule.bases.repeat", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "feats_recon.view.view.view", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.normalize.mean", "ema_head.reduce_mean", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ema_head.reduce_mean"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "feats", ".", "size", "(", ")", "\n", "# [batch_size, channels, height*width]", "\n", "feats", "=", "feats", ".", "view", "(", "batch_size", ",", "channels", ",", "height", "*", "width", ")", "\n", "# [batch_size, channels, num_bases]", "\n", "bases", "=", "self", ".", "bases", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_stages", ")", ":", "\n", "# [batch_size, height*width, num_bases]", "\n", "                ", "attention", "=", "torch", ".", "einsum", "(", "'bcn,bck->bnk'", ",", "feats", ",", "bases", ")", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "2", ")", "\n", "# l1 norm", "\n", "attention_normed", "=", "F", ".", "normalize", "(", "attention", ",", "dim", "=", "1", ",", "p", "=", "1", ")", "\n", "# [batch_size, channels, num_bases]", "\n", "bases", "=", "torch", ".", "einsum", "(", "'bcn,bnk->bck'", ",", "feats", ",", "attention_normed", ")", "\n", "# l2 norm", "\n", "bases", "=", "F", ".", "normalize", "(", "bases", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "", "feats_recon", "=", "torch", ".", "einsum", "(", "'bck,bnk->bcn'", ",", "bases", ",", "attention", ")", "\n", "feats_recon", "=", "feats_recon", ".", "view", "(", "batch_size", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "bases", "=", "bases", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "bases", "=", "reduce_mean", "(", "bases", ")", "\n", "# l2 norm", "\n", "bases", "=", "F", ".", "normalize", "(", "bases", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "self", ".", "bases", "=", "(", "1", "-", "\n", "self", ".", "momentum", ")", "*", "self", ".", "bases", "+", "self", ".", "momentum", "*", "bases", "\n", "\n", "", "return", "feats_recon", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ema_head.EMAHead.__init__": [[94, 153], ["decode_head.BaseDecodeHead.__init__", "ema_head.EMAModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "ema_head.EMAHead.ema_mid_conv.parameters", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "ema_channels", ",", "\n", "num_bases", ",", "\n", "num_stages", ",", "\n", "concat_input", "=", "True", ",", "\n", "momentum", "=", "0.1", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EMAHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "ema_channels", "=", "ema_channels", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "num_stages", "=", "num_stages", "\n", "self", ".", "concat_input", "=", "concat_input", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "ema_module", "=", "EMAModule", "(", "self", ".", "ema_channels", ",", "self", ".", "num_bases", ",", "\n", "self", ".", "num_stages", ",", "self", ".", "momentum", ")", "\n", "\n", "self", ".", "ema_in_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "ema_channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "# project (0, inf) -> (-inf, inf)", "\n", "self", ".", "ema_mid_conv", "=", "ConvModule", "(", "\n", "self", ".", "ema_channels", ",", "\n", "self", ".", "ema_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", "\n", "for", "param", "in", "self", ".", "ema_mid_conv", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "self", ".", "ema_out_conv", "=", "ConvModule", "(", "\n", "self", ".", "ema_channels", ",", "\n", "self", ".", "ema_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "ema_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "self", ".", "conv_cat", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ema_head.EMAHead.forward": [[154, 169], ["ema_head.EMAHead._transform_inputs", "ema_head.EMAHead.ema_in_conv", "ema_head.EMAHead.ema_mid_conv", "ema_head.EMAHead.ema_module", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ema_head.EMAHead.ema_out_conv", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ema_head.EMAHead.bottleneck", "ema_head.EMAHead.cls_seg", "ema_head.EMAHead.conv_cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "feats", "=", "self", ".", "ema_in_conv", "(", "x", ")", "\n", "identity", "=", "feats", "\n", "feats", "=", "self", ".", "ema_mid_conv", "(", "feats", ")", "\n", "recon", "=", "self", ".", "ema_module", "(", "feats", ")", "\n", "recon", "=", "F", ".", "relu", "(", "recon", ",", "inplace", "=", "True", ")", "\n", "recon", "=", "self", ".", "ema_out_conv", "(", "recon", ")", "\n", "output", "=", "F", ".", "relu", "(", "identity", "+", "recon", ",", "inplace", "=", "True", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ema_head.reduce_mean": [[13, 20], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_", "torch.is_available", "torch.is_initialized", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.get_world_size"], ["def", "reduce_mean", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"Reduce mean when distributed training.\"\"\"", "\n", "if", "not", "(", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.aspp_head.ASPPModule.__init__": [[22, 42], ["torch.ModuleList.__init__", "aspp_head.ASPPModule.append", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "dilations", ",", "in_channels", ",", "channels", ",", "conv_cfg", ",", "norm_cfg", ",", "\n", "act_cfg", ")", ":", "\n", "        ", "super", "(", "ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dilations", "=", "dilations", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "for", "dilation", "in", "dilations", ":", "\n", "            ", "self", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", "if", "dilation", "==", "1", "else", "3", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "0", "if", "dilation", "==", "1", "else", "dilation", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.aspp_head.ASPPModule.forward": [[43, 50], ["aspp_outs.append", "aspp_module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "aspp_outs", "=", "[", "]", "\n", "for", "aspp_module", "in", "self", ":", "\n", "            ", "aspp_outs", ".", "append", "(", "aspp_module", "(", "x", ")", ")", "\n", "\n", "", "return", "aspp_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.aspp_head.ASPPHead.__init__": [[64, 92], ["decode_head.BaseDecodeHead.__init__", "isinstance", "torch.Sequential", "torch.Sequential", "aspp_head.ASPPModule", "mmcv.cnn.ConvModule", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "mmcv.cnn.ConvModule", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "dilations", "=", "(", "1", ",", "6", ",", "12", ",", "18", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ASPPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "dilations", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "dilations", "=", "dilations", "\n", "self", ".", "image_pool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "self", ".", "aspp_modules", "=", "ASPPModule", "(", "\n", "dilations", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "(", "len", "(", "dilations", ")", "+", "1", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.aspp_head.ASPPHead.forward": [[93, 108], ["aspp_head.ASPPHead._transform_inputs", "torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aspp_head.ASPPHead.bottleneck", "aspp_head.ASPPHead.cls_seg", "mmseg.ops.resize", "aspp_head.ASPPHead.aspp_modules", "aspp_head.ASPPHead.image_pool", "aspp_head.ASPPHead.size"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "aspp_outs", "=", "[", "\n", "resize", "(", "\n", "self", ".", "image_pool", "(", "x", ")", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "]", "\n", "aspp_outs", ".", "extend", "(", "self", ".", "aspp_modules", "(", "x", ")", ")", "\n", "aspp_outs", "=", "torch", ".", "cat", "(", "aspp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "aspp_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dm_head.DCM.__init__": [[24, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "mmcv.cnn.build_activation_layer", "mmcv.cnn.ConvModule", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "filter_size", ",", "fusion", ",", "in_channels", ",", "channels", ",", "conv_cfg", ",", "\n", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "DCM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filter_size", "=", "filter_size", "\n", "self", ".", "fusion", "=", "fusion", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "filter_gen_conv", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "self", ".", "channels", ",", "1", ",", "1", ",", "\n", "0", ")", "\n", "\n", "self", ".", "input_redu_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "if", "self", ".", "norm_cfg", "is", "not", "None", ":", "\n", "            ", "self", ".", "norm", "=", "build_norm_layer", "(", "self", ".", "norm_cfg", ",", "self", ".", "channels", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "norm", "=", "None", "\n", "", "self", ".", "activate", "=", "build_activation_layer", "(", "self", ".", "act_cfg", ")", "\n", "\n", "if", "self", ".", "fusion", ":", "\n", "            ", "self", ".", "fusion_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dm_head.DCM.forward": [[60, 89], ["dm_head.DCM.filter_gen_conv", "dm_head.DCM.input_redu_conv", "torch.pad.view", "generted_filter.view.view.view", "torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "dm_head.DCM.view", "dm_head.DCM.activate", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "dm_head.DCM.norm", "dm_head.DCM.fusion_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "generted_filter", "=", "self", ".", "filter_gen_conv", "(", "\n", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "self", ".", "filter_size", ")", ")", "\n", "x", "=", "self", ".", "input_redu_conv", "(", "x", ")", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "# [1, b * c, h, w], c = self.channels", "\n", "x", "=", "x", ".", "view", "(", "1", ",", "b", "*", "c", ",", "h", ",", "w", ")", "\n", "# [b * c, 1, filter_size, filter_size]", "\n", "generted_filter", "=", "generted_filter", ".", "view", "(", "b", "*", "c", ",", "1", ",", "self", ".", "filter_size", ",", "\n", "self", ".", "filter_size", ")", "\n", "pad", "=", "(", "self", ".", "filter_size", "-", "1", ")", "//", "2", "\n", "if", "(", "self", ".", "filter_size", "-", "1", ")", "%", "2", "==", "0", ":", "\n", "            ", "p2d", "=", "(", "pad", ",", "pad", ",", "pad", ",", "pad", ")", "\n", "", "else", ":", "\n", "            ", "p2d", "=", "(", "pad", "+", "1", ",", "pad", ",", "pad", "+", "1", ",", "pad", ")", "\n", "", "x", "=", "F", ".", "pad", "(", "input", "=", "x", ",", "pad", "=", "p2d", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "# [1, b * c, h, w]", "\n", "output", "=", "F", ".", "conv2d", "(", "input", "=", "x", ",", "weight", "=", "generted_filter", ",", "groups", "=", "b", "*", "c", ")", "\n", "# [b, c, h, w]", "\n", "output", "=", "output", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "", "output", "=", "self", ".", "activate", "(", "output", ")", "\n", "\n", "if", "self", ".", "fusion", ":", "\n", "            ", "output", "=", "self", ".", "fusion_conv", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dm_head.DMHead.__init__": [[106, 130], ["decode_head.BaseDecodeHead.__init__", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "dcm_modules.append", "dm_head.DCM", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "filter_sizes", "=", "(", "1", ",", "3", ",", "5", ",", "7", ")", ",", "fusion", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "filter_sizes", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "filter_sizes", "=", "filter_sizes", "\n", "self", ".", "fusion", "=", "fusion", "\n", "dcm_modules", "=", "[", "]", "\n", "for", "filter_size", "in", "self", ".", "filter_sizes", ":", "\n", "            ", "dcm_modules", ".", "append", "(", "\n", "DCM", "(", "filter_size", ",", "\n", "self", ".", "fusion", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "", "self", ".", "dcm_modules", "=", "nn", ".", "ModuleList", "(", "dcm_modules", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "len", "(", "filter_sizes", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dm_head.DMHead.forward": [[131, 141], ["dm_head.DMHead._transform_inputs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dm_head.DMHead.bottleneck", "dm_head.DMHead.cls_seg", "torch.cat.append", "torch.cat.append", "torch.cat.append", "dcm_module"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "dcm_outs", "=", "[", "x", "]", "\n", "for", "dcm_module", "in", "self", ".", "dcm_modules", ":", "\n", "            ", "dcm_outs", ".", "append", "(", "dcm_module", "(", "x", ")", ")", "\n", "", "dcm_outs", "=", "torch", ".", "cat", "(", "dcm_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "dcm_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.psa_head.PSAHead.__init__": [[35, 112], ["decode_head.BaseDecodeHead.__init__", "mmcv.cnn.ConvModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "RuntimeError", "mmcv.cnn.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "PSAMask", "PSAMask", "PSAMask", "mmcv.cnn.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "mask_size", ",", "\n", "psa_type", "=", "'bi-direction'", ",", "\n", "compact", "=", "False", ",", "\n", "shrink_factor", "=", "2", ",", "\n", "normalization_factor", "=", "1.0", ",", "\n", "psa_softmax", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "PSAMask", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Please install mmcv-full for PSAMask ops'", ")", "\n", "", "super", "(", "PSAHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "psa_type", "in", "[", "'collect'", ",", "'distribute'", ",", "'bi-direction'", "]", "\n", "self", ".", "psa_type", "=", "psa_type", "\n", "self", ".", "compact", "=", "compact", "\n", "self", ".", "shrink_factor", "=", "shrink_factor", "\n", "self", ".", "mask_size", "=", "mask_size", "\n", "mask_h", ",", "mask_w", "=", "mask_size", "\n", "self", ".", "psa_softmax", "=", "psa_softmax", "\n", "if", "normalization_factor", "is", "None", ":", "\n", "            ", "normalization_factor", "=", "mask_h", "*", "mask_w", "\n", "", "self", ".", "normalization_factor", "=", "normalization_factor", "\n", "\n", "self", ".", "reduce", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "attention", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", ",", "mask_h", "*", "mask_w", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "if", "psa_type", "==", "'bi-direction'", ":", "\n", "            ", "self", ".", "reduce_p", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "attention_p", "=", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", ",", "mask_h", "*", "mask_w", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "psamask_collect", "=", "PSAMask", "(", "'collect'", ",", "mask_size", ")", "\n", "self", ".", "psamask_distribute", "=", "PSAMask", "(", "'distribute'", ",", "mask_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "psamask", "=", "PSAMask", "(", "psa_type", ",", "mask_size", ")", "\n", "", "self", ".", "proj", "=", "ConvModule", "(", "\n", "self", ".", "channels", "*", "(", "2", "if", "psa_type", "==", "'bi-direction'", "else", "1", ")", ",", "\n", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "*", "2", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.psa_head.PSAHead.forward": [[113, 197], ["psa_head.PSAHead._transform_inputs", "psa_head.PSAHead.proj", "mmseg.ops.resize", "psa_head.PSAHead.bottleneck", "psa_head.PSAHead.cls_seg", "psa_head.PSAHead.reduce", "mmseg.ops.resize.size", "psa_head.PSAHead.attention", "psa_head.PSAHead.reduce", "psa_head.PSAHead.reduce_p", "mmseg.ops.resize.size", "psa_head.PSAHead.attention", "psa_head.PSAHead.attention_p", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmseg.ops.resize", "psa_head.PSAHead.psamask", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "mmseg.ops.resize", "mmseg.ops.resize", "torch.softmax.view().transpose().view", "psa_head.PSAHead.psamask_collect", "psa_head.PSAHead.psamask_distribute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "y.view().transpose().view.view().transpose().view.view().transpose().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax.view().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "y.view().transpose().view.view().transpose().view.view().transpose", "mmseg.ops.resize.view", "y.view().transpose().view.view().transpose().view.view", "mmseg.ops.resize.view", "torch.softmax.view", "mmseg.ops.resize.view", "torch.softmax.view", "torch.softmax.view", "y.view().transpose().view.view().transpose().view.view"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "identity", "=", "x", "\n", "align_corners", "=", "self", ".", "align_corners", "\n", "if", "self", ".", "psa_type", "in", "[", "'collect'", ",", "'distribute'", "]", ":", "\n", "            ", "out", "=", "self", ".", "reduce", "(", "x", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "out", ".", "size", "(", ")", "\n", "if", "self", ".", "shrink_factor", "!=", "1", ":", "\n", "                ", "if", "h", "%", "self", ".", "shrink_factor", "and", "w", "%", "self", ".", "shrink_factor", ":", "\n", "                    ", "h", "=", "(", "h", "-", "1", ")", "//", "self", ".", "shrink_factor", "+", "1", "\n", "w", "=", "(", "w", "-", "1", ")", "//", "self", ".", "shrink_factor", "+", "1", "\n", "align_corners", "=", "True", "\n", "", "else", ":", "\n", "                    ", "h", "=", "h", "//", "self", ".", "shrink_factor", "\n", "w", "=", "w", "//", "self", ".", "shrink_factor", "\n", "align_corners", "=", "False", "\n", "", "out", "=", "resize", "(", "\n", "out", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "", "y", "=", "self", ".", "attention", "(", "out", ")", "\n", "if", "self", ".", "compact", ":", "\n", "                ", "if", "self", ".", "psa_type", "==", "'collect'", ":", "\n", "                    ", "y", "=", "y", ".", "view", "(", "n", ",", "h", "*", "w", ",", "\n", "h", "*", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", ",", "w", ")", "\n", "", "", "else", ":", "\n", "                ", "y", "=", "self", ".", "psamask", "(", "y", ")", "\n", "", "if", "self", ".", "psa_softmax", ":", "\n", "                ", "y", "=", "F", ".", "softmax", "(", "y", ",", "dim", "=", "1", ")", "\n", "", "out", "=", "torch", ".", "bmm", "(", "\n", "out", ".", "view", "(", "n", ",", "c", ",", "h", "*", "w", ")", ",", "y", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", "*", "w", ")", ")", ".", "view", "(", "\n", "n", ",", "c", ",", "h", ",", "w", ")", "*", "(", "1.0", "/", "self", ".", "normalization_factor", ")", "\n", "", "else", ":", "\n", "            ", "x_col", "=", "self", ".", "reduce", "(", "x", ")", "\n", "x_dis", "=", "self", ".", "reduce_p", "(", "x", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x_col", ".", "size", "(", ")", "\n", "if", "self", ".", "shrink_factor", "!=", "1", ":", "\n", "                ", "if", "h", "%", "self", ".", "shrink_factor", "and", "w", "%", "self", ".", "shrink_factor", ":", "\n", "                    ", "h", "=", "(", "h", "-", "1", ")", "//", "self", ".", "shrink_factor", "+", "1", "\n", "w", "=", "(", "w", "-", "1", ")", "//", "self", ".", "shrink_factor", "+", "1", "\n", "align_corners", "=", "True", "\n", "", "else", ":", "\n", "                    ", "h", "=", "h", "//", "self", ".", "shrink_factor", "\n", "w", "=", "w", "//", "self", ".", "shrink_factor", "\n", "align_corners", "=", "False", "\n", "", "x_col", "=", "resize", "(", "\n", "x_col", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "x_dis", "=", "resize", "(", "\n", "x_dis", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "", "y_col", "=", "self", ".", "attention", "(", "x_col", ")", "\n", "y_dis", "=", "self", ".", "attention_p", "(", "x_dis", ")", "\n", "if", "self", ".", "compact", ":", "\n", "                ", "y_dis", "=", "y_dis", ".", "view", "(", "n", ",", "h", "*", "w", ",", "\n", "h", "*", "w", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "                ", "y_col", "=", "self", ".", "psamask_collect", "(", "y_col", ")", "\n", "y_dis", "=", "self", ".", "psamask_distribute", "(", "y_dis", ")", "\n", "", "if", "self", ".", "psa_softmax", ":", "\n", "                ", "y_col", "=", "F", ".", "softmax", "(", "y_col", ",", "dim", "=", "1", ")", "\n", "y_dis", "=", "F", ".", "softmax", "(", "y_dis", ",", "dim", "=", "1", ")", "\n", "", "x_col", "=", "torch", ".", "bmm", "(", "\n", "x_col", ".", "view", "(", "n", ",", "c", ",", "h", "*", "w", ")", ",", "y_col", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", "*", "w", ")", ")", ".", "view", "(", "\n", "n", ",", "c", ",", "h", ",", "w", ")", "*", "(", "1.0", "/", "self", ".", "normalization_factor", ")", "\n", "x_dis", "=", "torch", ".", "bmm", "(", "\n", "x_dis", ".", "view", "(", "n", ",", "c", ",", "h", "*", "w", ")", ",", "y_dis", ".", "view", "(", "n", ",", "h", "*", "w", ",", "h", "*", "w", ")", ")", ".", "view", "(", "\n", "n", ",", "c", ",", "h", ",", "w", ")", "*", "(", "1.0", "/", "self", ".", "normalization_factor", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x_col", ",", "x_dis", "]", ",", "1", ")", "\n", "", "out", "=", "self", ".", "proj", "(", "out", ")", "\n", "out", "=", "resize", "(", "\n", "out", ",", "\n", "size", "=", "identity", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "align_corners", ")", "\n", "out", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "(", "identity", ",", "out", ")", ",", "dim", "=", "1", ")", ")", "\n", "out", "=", "self", ".", "cls_seg", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.enc_head.EncModule.__init__": [[22, 49], ["torch.Module.__init__", "mmcv.cnn.ConvModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "norm_cfg.copy", "dict", "mmseg.ops.Encoding", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "encoding_norm_cfg[].replace", "mmcv.cnn.build_norm_layer"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "num_codes", ",", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "EncModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoding_project", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "# TODO: resolve this hack", "\n", "# change to 1d", "\n", "if", "norm_cfg", "is", "not", "None", ":", "\n", "            ", "encoding_norm_cfg", "=", "norm_cfg", ".", "copy", "(", ")", "\n", "if", "encoding_norm_cfg", "[", "'type'", "]", "in", "[", "'BN'", ",", "'IN'", "]", ":", "\n", "                ", "encoding_norm_cfg", "[", "'type'", "]", "+=", "'1d'", "\n", "", "else", ":", "\n", "                ", "encoding_norm_cfg", "[", "'type'", "]", "=", "encoding_norm_cfg", "[", "'type'", "]", ".", "replace", "(", "\n", "'2d'", ",", "'1d'", ")", "\n", "", "", "else", ":", "\n", "# fallback to BN1d", "\n", "            ", "encoding_norm_cfg", "=", "dict", "(", "type", "=", "'BN1d'", ")", "\n", "", "self", ".", "encoding", "=", "nn", ".", "Sequential", "(", "\n", "Encoding", "(", "channels", "=", "in_channels", ",", "num_codes", "=", "num_codes", ")", ",", "\n", "build_norm_layer", "(", "encoding_norm_cfg", ",", "num_codes", ")", "[", "1", "]", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_channels", ",", "in_channels", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.enc_head.EncModule.forward": [[50, 59], ["enc_head.EncModule.encoding_project", "enc_head.EncModule.encoding().mean", "x.size", "enc_head.EncModule.fc", "enc_head.EncModule.view", "torch.relu_", "torch.relu_", "torch.relu_", "enc_head.EncModule.encoding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "encoding_projection", "=", "self", ".", "encoding_project", "(", "x", ")", "\n", "encoding_feat", "=", "self", ".", "encoding", "(", "encoding_projection", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "batch_size", ",", "channels", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "gamma", "=", "self", ".", "fc", "(", "encoding_feat", ")", "\n", "y", "=", "gamma", ".", "view", "(", "batch_size", ",", "channels", ",", "1", ",", "1", ")", "\n", "output", "=", "F", ".", "relu_", "(", "x", "+", "x", "*", "y", ")", "\n", "return", "encoding_feat", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.enc_head.EncHead.__init__": [[78, 128], ["dict", "decode_head.BaseDecodeHead.__init__", "mmcv.cnn.ConvModule", "enc_head.EncModule", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "builder.build_loss", "torch.Linear", "torch.Linear", "torch.Linear", "enc_head.EncHead.lateral_convs.append", "mmcv.cnn.ConvModule", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_loss"], ["def", "__init__", "(", "self", ",", "\n", "num_codes", "=", "32", ",", "\n", "use_se_loss", "=", "True", ",", "\n", "add_lateral", "=", "False", ",", "\n", "loss_se_decode", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "0.2", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "EncHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "self", ".", "use_se_loss", "=", "use_se_loss", "\n", "self", ".", "add_lateral", "=", "add_lateral", "\n", "self", ".", "num_codes", "=", "num_codes", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "-", "1", "]", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "if", "add_lateral", ":", "\n", "            ", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channels", "in", "self", ".", "in_channels", "[", ":", "-", "1", "]", ":", "# skip the last one", "\n", "                ", "self", ".", "lateral_convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "", "self", ".", "fusion", "=", "ConvModule", "(", "\n", "len", "(", "self", ".", "in_channels", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "", "self", ".", "enc_module", "=", "EncModule", "(", "\n", "self", ".", "channels", ",", "\n", "num_codes", "=", "num_codes", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "if", "self", ".", "use_se_loss", ":", "\n", "            ", "self", ".", "loss_se_decode", "=", "build_loss", "(", "loss_se_decode", ")", "\n", "self", ".", "se_layer", "=", "nn", ".", "Linear", "(", "self", ".", "channels", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.enc_head.EncHead.forward": [[129, 150], ["enc_head.EncHead._transform_inputs", "enc_head.EncHead.bottleneck", "enc_head.EncHead.enc_module", "enc_head.EncHead.cls_seg", "enc_head.EncHead.fusion", "enc_head.EncHead.se_layer", "mmseg.ops.resize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lateral_conv", "enumerate"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "inputs", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "feat", "=", "self", ".", "bottleneck", "(", "inputs", "[", "-", "1", "]", ")", "\n", "if", "self", ".", "add_lateral", ":", "\n", "            ", "laterals", "=", "[", "\n", "resize", "(", "\n", "lateral_conv", "(", "inputs", "[", "i", "]", ")", ",", "\n", "size", "=", "feat", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "feat", "=", "self", ".", "fusion", "(", "torch", ".", "cat", "(", "[", "feat", ",", "*", "laterals", "]", ",", "1", ")", ")", "\n", "", "encode_feat", ",", "output", "=", "self", ".", "enc_module", "(", "feat", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "if", "self", ".", "use_se_loss", ":", "\n", "            ", "se_output", "=", "self", ".", "se_layer", "(", "encode_feat", ")", "\n", "return", "output", ",", "se_output", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.enc_head.EncHead.forward_test": [[151, 157], ["enc_head.EncHead.forward", "enc_head.EncHead.forward"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward", "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward"], ["", "", "def", "forward_test", "(", "self", ",", "inputs", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing, ignore se_loss.\"\"\"", "\n", "if", "self", ".", "use_se_loss", ":", "\n", "            ", "return", "self", ".", "forward", "(", "inputs", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.enc_head.EncHead._convert_to_onehot_labels": [[158, 177], ["seg_label.size", "seg_label.new_zeros", "range", "seg_label[].float().histc", "seg_label[].float"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_convert_to_onehot_labels", "(", "seg_label", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\"Convert segmentation label to onehot.\n\n        Args:\n            seg_label (Tensor): Segmentation label of shape (N, H, W).\n            num_classes (int): Number of classes.\n\n        Returns:\n            Tensor: Onehot labels of shape (N, num_classes).\n        \"\"\"", "\n", "\n", "batch_size", "=", "seg_label", ".", "size", "(", "0", ")", "\n", "onehot_labels", "=", "seg_label", ".", "new_zeros", "(", "(", "batch_size", ",", "num_classes", ")", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "hist", "=", "seg_label", "[", "i", "]", ".", "float", "(", ")", ".", "histc", "(", "\n", "bins", "=", "num_classes", ",", "min", "=", "0", ",", "max", "=", "num_classes", "-", "1", ")", "\n", "onehot_labels", "[", "i", "]", "=", "hist", ">", "0", "\n", "", "return", "onehot_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.enc_head.EncHead.losses": [[178, 188], ["dict", "dict.update", "enc_head.EncHead.loss_se_decode", "super().losses", "enc_head.EncHead._convert_to_onehot_labels"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.losses", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.enc_head.EncHead._convert_to_onehot_labels"], ["", "def", "losses", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Compute segmentation and semantic encoding loss.\"\"\"", "\n", "seg_logit", ",", "se_seg_logit", "=", "seg_logit", "\n", "loss", "=", "dict", "(", ")", "\n", "loss", ".", "update", "(", "super", "(", "EncHead", ",", "self", ")", ".", "losses", "(", "seg_logit", ",", "seg_label", ")", ")", "\n", "se_loss", "=", "self", ".", "loss_se_decode", "(", "\n", "se_seg_logit", ",", "\n", "self", ".", "_convert_to_onehot_labels", "(", "seg_label", ",", "self", ".", "num_classes", ")", ")", "\n", "loss", "[", "'loss_se'", "]", "=", "se_loss", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.apc_head.ACM.__init__": [[25, 77], ["torch.Module.__init__", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "pool_scale", ",", "fusion", ",", "in_channels", ",", "channels", ",", "conv_cfg", ",", "\n", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "ACM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool_scale", "=", "pool_scale", "\n", "self", ".", "fusion", "=", "fusion", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "pooled_redu_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "input_redu_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "global_info", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "self", ".", "gla", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "pool_scale", "**", "2", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "self", ".", "residual_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n", "if", "self", ".", "fusion", ":", "\n", "            ", "self", ".", "fusion_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.apc_head.ACM.forward": [[78, 107], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "apc_head.ACM.input_redu_conv", "apc_head.ACM.pooled_redu_conv", "apc_head.ACM.size", "pooled_x.view().permute().contiguous.view().permute().contiguous.view().permute().contiguous", "apc_head.ACM.gla().permute().reshape", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "apc_head.ACM.permute().contiguous", "apc_head.ACM.view", "apc_head.ACM.residual_conv", "torch.relu", "torch.relu", "torch.relu", "apc_head.ACM.size", "apc_head.ACM.size", "apc_head.ACM.fusion_conv", "pooled_x.view().permute().contiguous.view().permute().contiguous.view().permute", "apc_head.ACM.gla().permute", "apc_head.ACM.permute", "pooled_x.view().permute().contiguous.view().permute().contiguous.view", "apc_head.ACM.gla", "mmseg.ops.resize", "apc_head.ACM.global_info", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.models.fan.sigmoid", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "pooled_x", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "self", ".", "pool_scale", ")", "\n", "# [batch_size, channels, h, w]", "\n", "x", "=", "self", ".", "input_redu_conv", "(", "x", ")", "\n", "# [batch_size, channels, pool_scale, pool_scale]", "\n", "pooled_x", "=", "self", ".", "pooled_redu_conv", "(", "pooled_x", ")", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "# [batch_size, pool_scale * pool_scale, channels]", "\n", "pooled_x", "=", "pooled_x", ".", "view", "(", "batch_size", ",", "self", ".", "channels", ",", "\n", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# [batch_size, h * w, pool_scale * pool_scale]", "\n", "affinity_matrix", "=", "self", ".", "gla", "(", "x", "+", "resize", "(", "\n", "self", ".", "global_info", "(", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "1", ")", ")", ",", "size", "=", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "\n", "batch_size", ",", "-", "1", ",", "self", ".", "pool_scale", "**", "2", ")", "\n", "affinity_matrix", "=", "F", ".", "sigmoid", "(", "affinity_matrix", ")", "\n", "# [batch_size, h * w, channels]", "\n", "z_out", "=", "torch", ".", "matmul", "(", "affinity_matrix", ",", "pooled_x", ")", "\n", "# [batch_size, channels, h * w]", "\n", "z_out", "=", "z_out", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# [batch_size, channels, h, w]", "\n", "z_out", "=", "z_out", ".", "view", "(", "batch_size", ",", "self", ".", "channels", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "z_out", "=", "self", ".", "residual_conv", "(", "z_out", ")", "\n", "z_out", "=", "F", ".", "relu", "(", "z_out", "+", "x", ")", "\n", "if", "self", ".", "fusion", ":", "\n", "            ", "z_out", "=", "self", ".", "fusion_conv", "(", "z_out", ")", "\n", "\n", "", "return", "z_out", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.apc_head.APCHead.__init__": [[124, 148], ["decode_head.BaseDecodeHead.__init__", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "acm_modules.append", "apc_head.ACM", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "fusion", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "APCHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "pool_scales", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "pool_scales", "=", "pool_scales", "\n", "self", ".", "fusion", "=", "fusion", "\n", "acm_modules", "=", "[", "]", "\n", "for", "pool_scale", "in", "self", ".", "pool_scales", ":", "\n", "            ", "acm_modules", ".", "append", "(", "\n", "ACM", "(", "pool_scale", ",", "\n", "self", ".", "fusion", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "", "self", ".", "acm_modules", "=", "nn", ".", "ModuleList", "(", "acm_modules", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "len", "(", "pool_scales", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.apc_head.APCHead.forward": [[149, 159], ["apc_head.APCHead._transform_inputs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "apc_head.APCHead.bottleneck", "apc_head.APCHead.cls_seg", "torch.cat.append", "torch.cat.append", "torch.cat.append", "acm_module"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "acm_outs", "=", "[", "x", "]", "\n", "for", "acm_module", "in", "self", ".", "acm_modules", ":", "\n", "            ", "acm_outs", ".", "append", "(", "acm_module", "(", "x", ")", ")", "\n", "", "acm_outs", "=", "torch", ".", "cat", "(", "acm_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "acm_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.gc_head.GCHead.__init__": [[23, 37], ["fcn_head.FCNHead.__init__", "mmcv.cnn.ContextBlock"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "ratio", "=", "1", "/", "4.", ",", "\n", "pooling_type", "=", "'att'", ",", "\n", "fusion_types", "=", "(", "'channel_add'", ",", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GCHead", ",", "self", ")", ".", "__init__", "(", "num_convs", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "self", ".", "pooling_type", "=", "pooling_type", "\n", "self", ".", "fusion_types", "=", "fusion_types", "\n", "self", ".", "gc_block", "=", "ContextBlock", "(", "\n", "in_channels", "=", "self", ".", "channels", ",", "\n", "ratio", "=", "self", ".", "ratio", ",", "\n", "pooling_type", "=", "self", ".", "pooling_type", ",", "\n", "fusion_types", "=", "self", ".", "fusion_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.gc_head.GCHead.forward": [[38, 48], ["gc_head.GCHead._transform_inputs", "gc_head.GCHead.gc_block", "gc_head.GCHead.cls_seg", "gc_head.GCHead.conv_cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "[", "0", "]", "(", "x", ")", "\n", "output", "=", "self", ".", "gc_block", "(", "output", ")", "\n", "output", "=", "self", ".", "convs", "[", "1", "]", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ocr_head.SpatialGatherModule.__init__": [[19, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "scale", ")", ":", "\n", "        ", "super", "(", "SpatialGatherModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ocr_head.SpatialGatherModule.forward": [[23, 37], ["torch.softmax.size", "feats.permute.permute.size", "torch.softmax.view", "feats.permute.permute.view", "feats.permute.permute.permute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "ocr_context.permute().contiguous().unsqueeze.permute().contiguous().unsqueeze.permute().contiguous().unsqueeze", "ocr_context.permute().contiguous().unsqueeze.permute().contiguous().unsqueeze.permute().contiguous", "ocr_context.permute().contiguous().unsqueeze.permute().contiguous().unsqueeze.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "probs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "batch_size", ",", "num_classes", ",", "height", ",", "width", "=", "probs", ".", "size", "(", ")", "\n", "channels", "=", "feats", ".", "size", "(", "1", ")", "\n", "probs", "=", "probs", ".", "view", "(", "batch_size", ",", "num_classes", ",", "-", "1", ")", "\n", "feats", "=", "feats", ".", "view", "(", "batch_size", ",", "channels", ",", "-", "1", ")", "\n", "# [batch_size, height*width, num_classes]", "\n", "feats", "=", "feats", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# [batch_size, channels, height*width]", "\n", "probs", "=", "F", ".", "softmax", "(", "self", ".", "scale", "*", "probs", ",", "dim", "=", "2", ")", "\n", "# [batch_size, channels, num_classes]", "\n", "ocr_context", "=", "torch", ".", "matmul", "(", "probs", ",", "feats", ")", "\n", "ocr_context", "=", "ocr_context", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "unsqueeze", "(", "3", ")", "\n", "return", "ocr_context", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ocr_head.ObjectAttentionBlock.__init__": [[42, 72], ["utils.SelfAttentionBlock.__init__", "mmcv.cnn.ConvModule", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "scale", ",", "conv_cfg", ",", "norm_cfg", ",", "\n", "act_cfg", ")", ":", "\n", "        ", "if", "scale", ">", "1", ":", "\n", "            ", "query_downsample", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "scale", ")", "\n", "", "else", ":", "\n", "            ", "query_downsample", "=", "None", "\n", "", "super", "(", "ObjectAttentionBlock", ",", "self", ")", ".", "__init__", "(", "\n", "key_in_channels", "=", "in_channels", ",", "\n", "query_in_channels", "=", "in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "share_key_query", "=", "False", ",", "\n", "query_downsample", "=", "query_downsample", ",", "\n", "key_downsample", "=", "None", ",", "\n", "key_query_num_convs", "=", "2", ",", "\n", "key_query_norm", "=", "True", ",", "\n", "value_out_num_convs", "=", "1", ",", "\n", "value_out_norm", "=", "True", ",", "\n", "matmul_norm", "=", "True", ",", "\n", "with_out", "=", "True", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "in_channels", "*", "2", ",", "\n", "in_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ocr_head.ObjectAttentionBlock.forward": [[73, 82], ["super().forward", "ocr_head.ObjectAttentionBlock.bottleneck", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "query_feats", ",", "key_feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "context", "=", "super", "(", "ObjectAttentionBlock", ",", "\n", "self", ")", ".", "forward", "(", "query_feats", ",", "key_feats", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "[", "context", ",", "query_feats", "]", ",", "dim", "=", "1", ")", ")", "\n", "if", "self", ".", "query_downsample", "is", "not", "None", ":", "\n", "            ", "output", "=", "resize", "(", "query_feats", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ocr_head.OCRHead.__init__": [[97, 118], ["cascade_decode_head.BaseCascadeDecodeHead.__init__", "ocr_head.ObjectAttentionBlock", "ocr_head.SpatialGatherModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "ocr_channels", ",", "scale", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OCRHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "ocr_channels", "=", "ocr_channels", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "object_context_block", "=", "ObjectAttentionBlock", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "ocr_channels", ",", "\n", "self", ".", "scale", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "spatial_gather_module", "=", "SpatialGatherModule", "(", "self", ".", "scale", ")", "\n", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ocr_head.OCRHead.forward": [[119, 128], ["ocr_head.OCRHead._transform_inputs", "ocr_head.OCRHead.bottleneck", "ocr_head.OCRHead.spatial_gather_module", "ocr_head.OCRHead.object_context_block", "ocr_head.OCRHead.cls_seg"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "prev_output", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "feats", "=", "self", ".", "bottleneck", "(", "x", ")", "\n", "context", "=", "self", ".", "spatial_gather_module", "(", "feats", ",", "prev_output", ")", "\n", "object_context", "=", "self", ".", "object_context_block", "(", "feats", ",", "context", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "object_context", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.__init__": [[10, 12], ["decode_head.BaseDecodeHead.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseCascadeDecodeHead", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.forward": [[13, 17], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "inputs", ",", "prev_output", ")", ":", "\n", "        ", "\"\"\"Placeholder of forward function.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.forward_train": [[18, 40], ["cascade_decode_head.BaseCascadeDecodeHead.forward", "cascade_decode_head.BaseCascadeDecodeHead.losses"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.losses"], ["", "def", "forward_train", "(", "self", ",", "inputs", ",", "prev_output", ",", "img_metas", ",", "gt_semantic_seg", ",", "\n", "train_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for training.\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            prev_output (Tensor): The output of previous decode head.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            gt_semantic_seg (Tensor): Semantic segmentation masks\n                used if the architecture supports semantic segmentation task.\n            train_cfg (dict): The training config.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "seg_logits", "=", "self", ".", "forward", "(", "inputs", ",", "prev_output", ")", "\n", "losses", "=", "self", ".", "losses", "(", "seg_logits", ",", "gt_semantic_seg", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.cascade_decode_head.BaseCascadeDecodeHead.forward_test": [[41, 58], ["cascade_decode_head.BaseCascadeDecodeHead.forward"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward"], ["", "def", "forward_test", "(", "self", ",", "inputs", ",", "prev_output", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing.\n\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            prev_output (Tensor): The output of previous decode head.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            test_cfg (dict): The testing config.\n\n        Returns:\n            Tensor: Output segmentation map.\n        \"\"\"", "\n", "return", "self", ".", "forward", "(", "inputs", ",", "prev_output", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dnl_head.DisentangledNonLocal2d.__init__": [[16, 20], ["mmcv.cnn.NonLocal2d.__init__", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "*", "arg", ",", "temperature", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "arg", ",", "**", "kwargs", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "conv_mask", "=", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "1", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dnl_head.DisentangledNonLocal2d.embedded_gaussian": [[21, 32], ["torch.matmul", "pairwise_weight.softmax.softmax.softmax"], "methods", ["None"], ["", "def", "embedded_gaussian", "(", "self", ",", "theta_x", ",", "phi_x", ")", ":", "\n", "        ", "\"\"\"Embedded gaussian with temperature.\"\"\"", "\n", "\n", "# NonLocal2d pairwise_weight: [N, HxW, HxW]", "\n", "pairwise_weight", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "if", "self", ".", "use_scale", ":", "\n", "# theta_x.shape[-1] is `self.inter_channels`", "\n", "            ", "pairwise_weight", "/=", "theta_x", ".", "shape", "[", "-", "1", "]", "**", "0.5", "\n", "", "pairwise_weight", "/=", "self", ".", "temperature", "\n", "pairwise_weight", "=", "pairwise_weight", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "return", "pairwise_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dnl_head.DisentangledNonLocal2d.forward": [[33, 84], ["x.size", "dnl_head.DisentangledNonLocal2d.g().view", "g_x.permute.permute.permute", "theta_x.permute.permute.mean", "dnl_head.DisentangledNonLocal2d.mean", "getattr", "getattr.", "torch.matmul", "y.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous().reshape", "dnl_head.DisentangledNonLocal2d.conv_mask", "unary_mask.softmax.softmax.view", "unary_mask.softmax.softmax.softmax", "torch.matmul", "unary_x.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous().reshape", "x.view", "theta_x.permute.permute.permute", "dnl_head.DisentangledNonLocal2d.conv_out", "dnl_head.DisentangledNonLocal2d.g", "dnl_head.DisentangledNonLocal2d.phi().view", "x.view", "dnl_head.DisentangledNonLocal2d.theta().view", "dnl_head.DisentangledNonLocal2d.phi().view", "dnl_head.DisentangledNonLocal2d.theta().view", "theta_x.permute.permute.permute", "dnl_head.DisentangledNonLocal2d.phi().view", "y.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous", "unary_x.permute().contiguous().reshape.permute().contiguous().reshape.permute().contiguous", "x.size", "dnl_head.DisentangledNonLocal2d.phi", "dnl_head.DisentangledNonLocal2d.theta", "dnl_head.DisentangledNonLocal2d.phi", "dnl_head.DisentangledNonLocal2d.theta", "dnl_head.DisentangledNonLocal2d.phi", "y.permute().contiguous().reshape.permute().contiguous().reshape.permute", "unary_x.permute().contiguous().reshape.permute().contiguous().reshape.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# x: [N, C, H, W]", "\n", "        ", "n", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "# g_x: [N, HxW, C]", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# theta_x: [N, HxW, C], phi_x: [N, C, HxW]", "\n", "if", "self", ".", "mode", "==", "'gaussian'", ":", "\n", "            ", "theta_x", "=", "x", ".", "view", "(", "n", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "if", "self", ".", "sub_sample", ":", "\n", "                ", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "phi_x", "=", "x", ".", "view", "(", "n", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "", "", "elif", "self", ".", "mode", "==", "'concatenation'", ":", "\n", "            ", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "n", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "\n", "# subtract mean", "\n", "", "theta_x", "-=", "theta_x", ".", "mean", "(", "dim", "=", "-", "2", ",", "keepdim", "=", "True", ")", "\n", "phi_x", "-=", "phi_x", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pairwise_func", "=", "getattr", "(", "self", ",", "self", ".", "mode", ")", "\n", "# pairwise_weight: [N, HxW, HxW]", "\n", "pairwise_weight", "=", "pairwise_func", "(", "theta_x", ",", "phi_x", ")", "\n", "\n", "# y: [N, HxW, C]", "\n", "y", "=", "torch", ".", "matmul", "(", "pairwise_weight", ",", "g_x", ")", "\n", "# y: [N, C, H, W]", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "n", ",", "self", ".", "inter_channels", ",", "\n", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "# unary_mask: [N, 1, HxW]", "\n", "unary_mask", "=", "self", ".", "conv_mask", "(", "x", ")", "\n", "unary_mask", "=", "unary_mask", ".", "view", "(", "n", ",", "1", ",", "-", "1", ")", "\n", "unary_mask", "=", "unary_mask", ".", "softmax", "(", "dim", "=", "-", "1", ")", "\n", "# unary_x: [N, 1, C]", "\n", "unary_x", "=", "torch", ".", "matmul", "(", "unary_mask", ",", "g_x", ")", "\n", "# unary_x: [N, C, 1, 1]", "\n", "unary_x", "=", "unary_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "reshape", "(", "\n", "n", ",", "self", ".", "inter_channels", ",", "1", ",", "1", ")", "\n", "\n", "output", "=", "x", "+", "self", ".", "conv_out", "(", "y", "+", "unary_x", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dnl_head.DNLHead.__init__": [[102, 121], ["fcn_head.FCNHead.__init__", "dnl_head.DisentangledNonLocal2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "reduction", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "mode", "=", "'embedded_gaussian'", ",", "\n", "temperature", "=", "0.05", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DNLHead", ",", "self", ")", ".", "__init__", "(", "num_convs", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "dnl_block", "=", "DisentangledNonLocal2d", "(", "\n", "in_channels", "=", "self", ".", "channels", ",", "\n", "reduction", "=", "self", ".", "reduction", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "temperature", "=", "self", ".", "temperature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.dnl_head.DNLHead.forward": [[122, 132], ["dnl_head.DNLHead._transform_inputs", "dnl_head.DNLHead.dnl_block", "dnl_head.DNLHead.cls_seg", "dnl_head.DNLHead.conv_cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "[", "0", "]", "(", "x", ")", "\n", "output", "=", "self", ".", "dnl_block", "(", "output", ")", "\n", "output", "=", "self", ".", "convs", "[", "1", "]", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.segformer_head.HybridEmbed.__init__": [[20, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "2048", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.segformer_head.HybridEmbed.forward": [[24, 28], ["segformer_head.HybridEmbed.flatten().transpose", "segformer_head.HybridEmbed.proj", "segformer_head.HybridEmbed.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.segformer_head.SegFormerHead.__init__": [[35, 59], ["decode_head.BaseDecodeHead.__init__", "segformer_head.MLP", "segformer_head.MLP", "segformer_head.MLP", "segformer_head.MLP", "mmcv.cnn.ConvModule", "torch.Conv2d", "torch.Conv2d", "len", "len", "min", "dict"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "feature_strides", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SegFormerHead", ",", "self", ")", ".", "__init__", "(", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "assert", "len", "(", "feature_strides", ")", "==", "len", "(", "self", ".", "in_channels", ")", "\n", "assert", "min", "(", "feature_strides", ")", "==", "feature_strides", "[", "0", "]", "\n", "self", ".", "feature_strides", "=", "feature_strides", "\n", "\n", "c1_in_channels", ",", "c2_in_channels", ",", "c3_in_channels", ",", "c4_in_channels", "=", "self", ".", "in_channels", "\n", "\n", "decoder_params", "=", "kwargs", "[", "'decoder_params'", "]", "\n", "embedding_dim", "=", "decoder_params", "[", "'embed_dim'", "]", "\n", "\n", "self", ".", "linear_c4", "=", "MLP", "(", "input_dim", "=", "c4_in_channels", ",", "embed_dim", "=", "embedding_dim", ")", "\n", "self", ".", "linear_c3", "=", "MLP", "(", "input_dim", "=", "c3_in_channels", ",", "embed_dim", "=", "embedding_dim", ")", "\n", "self", ".", "linear_c2", "=", "MLP", "(", "input_dim", "=", "c2_in_channels", ",", "embed_dim", "=", "embedding_dim", ")", "\n", "self", ".", "linear_c1", "=", "MLP", "(", "input_dim", "=", "c1_in_channels", ",", "embed_dim", "=", "embedding_dim", ")", "\n", "\n", "self", ".", "linear_fuse", "=", "ConvModule", "(", "\n", "in_channels", "=", "embedding_dim", "*", "4", ",", "\n", "out_channels", "=", "embedding_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'SyncBN'", ",", "requires_grad", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "linear_pred", "=", "nn", ".", "Conv2d", "(", "embedding_dim", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.segformer_head.SegFormerHead.forward": [[60, 83], ["segformer_head.SegFormerHead._transform_inputs", "segformer_head.SegFormerHead.linear_c4().permute().reshape", "mmseg.ops.resize", "segformer_head.SegFormerHead.linear_c3().permute().reshape", "mmseg.ops.resize", "segformer_head.SegFormerHead.linear_c2().permute().reshape", "mmseg.ops.resize", "segformer_head.SegFormerHead.linear_c1().permute().reshape", "segformer_head.SegFormerHead.linear_fuse", "segformer_head.SegFormerHead.dropout", "segformer_head.SegFormerHead.linear_pred", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "segformer_head.SegFormerHead.linear_c4().permute", "segformer_head.SegFormerHead.linear_c3().permute", "segformer_head.SegFormerHead.linear_c2().permute", "segformer_head.SegFormerHead.linear_c1().permute", "c1.size", "c1.size", "c1.size", "segformer_head.SegFormerHead.linear_c4", "segformer_head.SegFormerHead.linear_c3", "segformer_head.SegFormerHead.linear_c2", "segformer_head.SegFormerHead.linear_c1"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "# len=4, 1/4,1/8,1/16,1/32", "\n", "c1", ",", "c2", ",", "c3", ",", "c4", "=", "x", "\n", "\n", "############## MLP decoder on C1-C4 ###########", "\n", "n", ",", "_", ",", "h", ",", "w", "=", "c4", ".", "shape", "\n", "\n", "_c4", "=", "self", ".", "linear_c4", "(", "c4", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "-", "1", ",", "c4", ".", "shape", "[", "2", "]", ",", "c4", ".", "shape", "[", "3", "]", ")", "\n", "_c4", "=", "resize", "(", "_c4", ",", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "_c3", "=", "self", ".", "linear_c3", "(", "c3", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "-", "1", ",", "c3", ".", "shape", "[", "2", "]", ",", "c3", ".", "shape", "[", "3", "]", ")", "\n", "_c3", "=", "resize", "(", "_c3", ",", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "_c2", "=", "self", ".", "linear_c2", "(", "c2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "-", "1", ",", "c2", ".", "shape", "[", "2", "]", ",", "c2", ".", "shape", "[", "3", "]", ")", "\n", "_c2", "=", "resize", "(", "_c2", ",", "size", "=", "c1", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n", "_c1", "=", "self", ".", "linear_c1", "(", "c1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "reshape", "(", "n", ",", "-", "1", ",", "c1", ".", "shape", "[", "2", "]", ",", "c1", ".", "shape", "[", "3", "]", ")", "\n", "\n", "_c", "=", "self", ".", "linear_fuse", "(", "torch", ".", "cat", "(", "[", "_c4", ",", "_c3", ",", "_c2", ",", "_c1", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "dropout", "(", "_c", ")", "\n", "x", "=", "self", ".", "linear_pred", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.PAM.__init__": [[20, 40], ["utils.SelfAttentionBlock.__init__", "mmcv.cnn.Scale"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ")", ":", "\n", "        ", "super", "(", "PAM", ",", "self", ")", ".", "__init__", "(", "\n", "key_in_channels", "=", "in_channels", ",", "\n", "query_in_channels", "=", "in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "share_key_query", "=", "False", ",", "\n", "query_downsample", "=", "None", ",", "\n", "key_downsample", "=", "None", ",", "\n", "key_query_num_convs", "=", "1", ",", "\n", "key_query_norm", "=", "False", ",", "\n", "value_out_num_convs", "=", "1", ",", "\n", "value_out_norm", "=", "False", ",", "\n", "matmul_norm", "=", "False", ",", "\n", "with_out", "=", "False", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n", "self", ".", "gamma", "=", "Scale", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.PAM.forward": [[41, 47], ["super().forward", "da_head.PAM.gamma"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "out", "=", "super", "(", "PAM", ",", "self", ")", ".", "forward", "(", "x", ",", "x", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "(", "out", ")", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.CAM.__init__": [[52, 55], ["torch.nn.Module.__init__", "mmcv.cnn.Scale"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "Scale", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.CAM.forward": [[56, 72], ["x.size", "x.view", "x.view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "[].expand_as", "da_head.CAM.gamma", "x.view", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "batch_size", ",", "channels", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "batch_size", ",", "channels", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "\n", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "F", ".", "softmax", "(", "energy_new", ",", "dim", "=", "-", "1", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "batch_size", ",", "channels", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "batch_size", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "(", "out", ")", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.DAHead.__init__": [[85, 127], ["decode_head.BaseDecodeHead.__init__", "mmcv.cnn.ConvModule", "da_head.PAM", "mmcv.cnn.ConvModule", "torch.nn.Conv2d", "torch.nn.Conv2d", "mmcv.cnn.ConvModule", "da_head.CAM", "mmcv.cnn.ConvModule", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "pam_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DAHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "pam_channels", "=", "pam_channels", "\n", "self", ".", "pam_in_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "pam", "=", "PAM", "(", "self", ".", "channels", ",", "pam_channels", ")", "\n", "self", ".", "pam_out_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "pam_conv_seg", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "cam_in_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "cam", "=", "CAM", "(", ")", "\n", "self", ".", "cam_out_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "cam_conv_seg", "=", "nn", ".", "Conv2d", "(", "\n", "self", ".", "channels", ",", "self", ".", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.DAHead.pam_cls_seg": [[128, 134], ["da_head.DAHead.pam_conv_seg", "da_head.DAHead.dropout"], "methods", ["None"], ["", "def", "pam_cls_seg", "(", "self", ",", "feat", ")", ":", "\n", "        ", "\"\"\"PAM feature classification.\"\"\"", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "", "output", "=", "self", ".", "pam_conv_seg", "(", "feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.DAHead.cam_cls_seg": [[135, 141], ["da_head.DAHead.cam_conv_seg", "da_head.DAHead.dropout"], "methods", ["None"], ["", "def", "cam_cls_seg", "(", "self", ",", "feat", ")", ":", "\n", "        ", "\"\"\"CAM feature classification.\"\"\"", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "", "output", "=", "self", ".", "cam_conv_seg", "(", "feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.DAHead.forward": [[142, 159], ["da_head.DAHead._transform_inputs", "da_head.DAHead.pam_in_conv", "da_head.DAHead.pam", "da_head.DAHead.pam_out_conv", "da_head.DAHead.pam_cls_seg", "da_head.DAHead.cam_in_conv", "da_head.DAHead.cam", "da_head.DAHead.cam_out_conv", "da_head.DAHead.cam_cls_seg", "da_head.DAHead.cls_seg"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.DAHead.pam_cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.DAHead.cam_cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "pam_feat", "=", "self", ".", "pam_in_conv", "(", "x", ")", "\n", "pam_feat", "=", "self", ".", "pam", "(", "pam_feat", ")", "\n", "pam_feat", "=", "self", ".", "pam_out_conv", "(", "pam_feat", ")", "\n", "pam_out", "=", "self", ".", "pam_cls_seg", "(", "pam_feat", ")", "\n", "\n", "cam_feat", "=", "self", ".", "cam_in_conv", "(", "x", ")", "\n", "cam_feat", "=", "self", ".", "cam", "(", "cam_feat", ")", "\n", "cam_feat", "=", "self", ".", "cam_out_conv", "(", "cam_feat", ")", "\n", "cam_out", "=", "self", ".", "cam_cls_seg", "(", "cam_feat", ")", "\n", "\n", "feat_sum", "=", "pam_feat", "+", "cam_feat", "\n", "pam_cam_out", "=", "self", ".", "cls_seg", "(", "feat_sum", ")", "\n", "\n", "return", "pam_cam_out", ",", "pam_out", ",", "cam_out", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.DAHead.forward_test": [[160, 163], ["da_head.DAHead.forward"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward"], ["", "def", "forward_test", "(", "self", ",", "inputs", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing, only ``pam_cam`` is used.\"\"\"", "\n", "return", "self", ".", "forward", "(", "inputs", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.da_head.DAHead.losses": [[164, 179], ["dict", "dict.update", "dict.update", "dict.update", "mmseg.core.add_prefix", "mmseg.core.add_prefix", "mmseg.core.add_prefix", "super().losses", "super().losses", "super().losses"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix", "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix", "home.repos.pwc.inspect_result.nvlabs_fan.utils.misc.add_prefix", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.losses", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.losses", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.losses"], ["", "def", "losses", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Compute ``pam_cam``, ``pam``, ``cam`` loss.\"\"\"", "\n", "pam_cam_seg_logit", ",", "pam_seg_logit", ",", "cam_seg_logit", "=", "seg_logit", "\n", "loss", "=", "dict", "(", ")", "\n", "loss", ".", "update", "(", "\n", "add_prefix", "(", "\n", "super", "(", "DAHead", ",", "self", ")", ".", "losses", "(", "pam_cam_seg_logit", ",", "seg_label", ")", ",", "\n", "'pam_cam'", ")", ")", "\n", "loss", ".", "update", "(", "\n", "add_prefix", "(", "\n", "super", "(", "DAHead", ",", "self", ")", ".", "losses", "(", "pam_seg_logit", ",", "seg_label", ")", ",", "'pam'", ")", ")", "\n", "loss", ".", "update", "(", "\n", "add_prefix", "(", "\n", "super", "(", "DAHead", ",", "self", ")", ".", "losses", "(", "cam_seg_logit", ",", "seg_label", ")", ",", "'cam'", ")", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.setr_up_head.SETRUPHead.__init__": [[26, 60], ["dict", "decode_head.BaseDecodeHead.__init__", "isinstance", "mmcv.cnn.build_norm_layer", "torch.ModuleList", "range", "setr_up_head.SETRUPHead.up_convs.append", "torch.Sequential", "mmcv.cnn.ConvModule", "mmseg.ops.Upsample", "int"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "norm_layer", "=", "dict", "(", "type", "=", "'LN'", ",", "eps", "=", "1e-6", ",", "requires_grad", "=", "True", ")", ",", "\n", "num_convs", "=", "1", ",", "\n", "up_scale", "=", "4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "assert", "kernel_size", "in", "[", "1", ",", "3", "]", ",", "'kernel_size must be 1 or 3.'", "\n", "\n", "super", "(", "SETRUPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "assert", "isinstance", "(", "self", ".", "in_channels", ",", "int", ")", "\n", "\n", "_", ",", "self", ".", "norm", "=", "build_norm_layer", "(", "norm_layer", ",", "self", ".", "in_channels", ")", "\n", "\n", "self", ".", "up_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "in_channels", "=", "self", ".", "in_channels", "\n", "out_channels", "=", "self", ".", "channels", "\n", "for", "_", "in", "range", "(", "num_convs", ")", ":", "\n", "            ", "self", ".", "up_convs", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "ConvModule", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "int", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", "Upsample", "(", "\n", "scale_factor", "=", "up_scale", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.setr_up_head.SETRUPHead.forward": [[61, 72], ["setr_up_head.SETRUPHead._transform_inputs", "up_conv.reshape().transpose().contiguous", "setr_up_head.SETRUPHead.norm", "up_conv.transpose().reshape().contiguous", "setr_up_head.SETRUPHead.cls_seg", "up_conv", "up_conv.reshape().transpose", "up_conv.transpose().reshape", "up_conv.reshape", "up_conv.transpose"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "_transform_inputs", "(", "x", ")", "\n", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "reshape", "(", "n", ",", "c", ",", "h", "*", "w", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "n", ",", "c", ",", "h", ",", "w", ")", ".", "contiguous", "(", ")", "\n", "for", "up_conv", "in", "self", ".", "up_convs", ":", "\n", "            ", "x", "=", "up_conv", "(", "x", ")", "\n", "", "out", "=", "self", ".", "cls_seg", "(", "x", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.lraspp_head.LRASPPHead.__init__": [[23, 67], ["decode_head.BaseDecodeHead.__init__", "mmcv.is_tuple_of", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "torch.Sequential", "torch.Sequential", "ValueError", "len", "len", "lraspp_head.LRASPPHead.convs.add_module", "lraspp_head.LRASPPHead.conv_ups.add_module", "torch.AvgPool2d", "torch.AvgPool2d", "mmcv.cnn.ConvModule", "len", "torch.Conv2d", "torch.Conv2d", "mmcv.cnn.ConvModule", "dict"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "branch_channels", "=", "(", "32", ",", "64", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LRASPPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "self", ".", "input_transform", "!=", "'multiple_select'", ":", "\n", "            ", "raise", "ValueError", "(", "'in Lite R-ASPP (LRASPP) head, input_transform '", "\n", "f'must be \\'multiple_select\\'. But received '", "\n", "f'\\'{self.input_transform}\\''", ")", "\n", "", "assert", "is_tuple_of", "(", "branch_channels", ",", "int", ")", "\n", "assert", "len", "(", "branch_channels", ")", "==", "len", "(", "self", ".", "in_channels", ")", "-", "1", "\n", "self", ".", "branch_channels", "=", "branch_channels", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "conv_ups", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "branch_channels", ")", ")", ":", "\n", "            ", "self", ".", "convs", ".", "add_module", "(", "\n", "f'conv{i}'", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "self", ".", "in_channels", "[", "i", "]", ",", "branch_channels", "[", "i", "]", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "conv_ups", ".", "add_module", "(", "\n", "f'conv_up{i}'", ",", "\n", "ConvModule", "(", "\n", "self", ".", "channels", "+", "branch_channels", "[", "i", "]", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n", "", "self", ".", "conv_up_input", "=", "nn", ".", "Conv2d", "(", "self", ".", "channels", ",", "self", ".", "channels", ",", "1", ")", "\n", "\n", "self", ".", "aspp_conv", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "-", "1", "]", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "image_pool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "49", ",", "stride", "=", "(", "16", ",", "20", ")", ")", ",", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "2", "]", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'Sigmoid'", ")", ",", "\n", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.lraspp_head.LRASPPHead.forward": [[68, 91], ["lraspp_head.LRASPPHead._transform_inputs", "lraspp_head.LRASPPHead.conv_up_input", "range", "lraspp_head.LRASPPHead.cls_seg", "lraspp_head.LRASPPHead.aspp_conv", "mmseg.ops.resize", "mmseg.ops.resize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lraspp_head.LRASPPHead.image_pool", "len", "torch.cat.size", "torch.cat.size", "inputs[].size"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "inputs", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "\n", "x", "=", "inputs", "[", "-", "1", "]", "\n", "\n", "x", "=", "self", ".", "aspp_conv", "(", "x", ")", "*", "resize", "(", "\n", "self", ".", "image_pool", "(", "x", ")", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "self", ".", "conv_up_input", "(", "x", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "branch_channels", ")", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "x", "=", "resize", "(", "\n", "x", ",", "\n", "size", "=", "inputs", "[", "i", "]", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "convs", "[", "i", "]", "(", "inputs", "[", "i", "]", ")", "]", ",", "1", ")", "\n", "x", "=", "self", ".", "conv_ups", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "return", "self", ".", "cls_seg", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.psp_head.PPM.__init__": [[24, 45], ["torch.ModuleList.__init__", "psp_head.PPM.append", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", ",", "in_channels", ",", "channels", ",", "conv_cfg", ",", "norm_cfg", ",", "\n", "act_cfg", ",", "align_corners", ")", ":", "\n", "        ", "super", "(", "PPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool_scales", "=", "pool_scales", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "for", "pool_scale", "in", "pool_scales", ":", "\n", "            ", "self", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "pool_scale", ")", ",", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.psp_head.PPM.forward": [[46, 58], ["ppm", "mmseg.ops.resize", "ppm_outs.append", "x.size"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "ppm_outs", "=", "[", "]", "\n", "for", "ppm", "in", "self", ":", "\n", "            ", "ppm_out", "=", "ppm", "(", "x", ")", "\n", "upsampled_ppm_out", "=", "resize", "(", "\n", "ppm_out", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "ppm_outs", ".", "append", "(", "upsampled_ppm_out", ")", "\n", "", "return", "ppm_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.psp_head.PSPHead.__init__": [[72, 92], ["decode_head.BaseDecodeHead.__init__", "isinstance", "psp_head.PPM", "mmcv.cnn.ConvModule", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PSPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "isinstance", "(", "pool_scales", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "pool_scales", "=", "pool_scales", "\n", "self", ".", "psp_modules", "=", "PPM", "(", "\n", "self", ".", "pool_scales", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "len", "(", "pool_scales", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.psp_head.PSPHead.forward": [[93, 102], ["psp_head.PSPHead._transform_inputs", "torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "psp_head.PSPHead.bottleneck", "psp_head.PSPHead.cls_seg", "psp_head.PSPHead.psp_modules"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "psp_outs", "=", "[", "x", "]", "\n", "psp_outs", ".", "extend", "(", "self", ".", "psp_modules", "(", "x", ")", ")", "\n", "psp_outs", "=", "torch", ".", "cat", "(", "psp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "psp_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.nl_head.NLHead.__init__": [[23, 39], ["fcn_head.FCNHead.__init__", "mmcv.cnn.NonLocal2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "reduction", "=", "2", ",", "\n", "use_scale", "=", "True", ",", "\n", "mode", "=", "'embedded_gaussian'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NLHead", ",", "self", ")", ".", "__init__", "(", "num_convs", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "nl_block", "=", "NonLocal2d", "(", "\n", "in_channels", "=", "self", ".", "channels", ",", "\n", "reduction", "=", "self", ".", "reduction", ",", "\n", "use_scale", "=", "self", ".", "use_scale", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.nl_head.NLHead.forward": [[40, 50], ["nl_head.NLHead._transform_inputs", "nl_head.NLHead.nl_block", "nl_head.NLHead.cls_seg", "nl_head.NLHead.conv_cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "[", "0", "]", "(", "x", ")", "\n", "output", "=", "self", ".", "nl_block", "(", "output", ")", "\n", "output", "=", "self", ".", "convs", "[", "1", "]", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.cc_head.CCHead.__init__": [[24, 31], ["fcn_head.FCNHead.__init__", "CrissCrossAttention", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "recurrence", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "CrissCrossAttention", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Please install mmcv-full for '", "\n", "'CrissCrossAttention ops'", ")", "\n", "", "super", "(", "CCHead", ",", "self", ")", ".", "__init__", "(", "num_convs", "=", "2", ",", "**", "kwargs", ")", "\n", "self", ".", "recurrence", "=", "recurrence", "\n", "self", ".", "cca", "=", "CrissCrossAttention", "(", "self", ".", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.cc_head.CCHead.forward": [[32, 43], ["cc_head.CCHead._transform_inputs", "range", "cc_head.CCHead.cls_seg", "cc_head.CCHead.cca", "cc_head.CCHead.conv_cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "[", "0", "]", "(", "x", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "recurrence", ")", ":", "\n", "            ", "output", "=", "self", ".", "cca", "(", "output", ")", "\n", "", "output", "=", "self", ".", "convs", "[", "1", "]", "(", "output", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.sep_aspp_head.DepthwiseSeparableASPPModule.__init__": [[14, 26], ["aspp_head.ASPPModule.__init__", "enumerate", "mmcv.cnn.DepthwiseSeparableConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DepthwiseSeparableASPPModule", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "for", "i", ",", "dilation", "in", "enumerate", "(", "self", ".", "dilations", ")", ":", "\n", "            ", "if", "dilation", ">", "1", ":", "\n", "                ", "self", "[", "i", "]", "=", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "dilation", "=", "dilation", ",", "\n", "padding", "=", "dilation", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.sep_aspp_head.DepthwiseSeparableASPPHead.__init__": [[42, 77], ["aspp_head.ASPPHead.__init__", "sep_aspp_head.DepthwiseSeparableASPPModule", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.DepthwiseSeparableConvModule", "mmcv.cnn.DepthwiseSeparableConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "c1_in_channels", ",", "c1_channels", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DepthwiseSeparableASPPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "assert", "c1_in_channels", ">=", "0", "\n", "self", ".", "aspp_modules", "=", "DepthwiseSeparableASPPModule", "(", "\n", "dilations", "=", "self", ".", "dilations", ",", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "channels", "=", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "if", "c1_in_channels", ">", "0", ":", "\n", "            ", "self", ".", "c1_bottleneck", "=", "ConvModule", "(", "\n", "c1_in_channels", ",", "\n", "c1_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "c1_bottleneck", "=", "None", "\n", "", "self", ".", "sep_bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "channels", "+", "c1_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ",", "\n", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.sep_aspp_head.DepthwiseSeparableASPPHead.forward": [[78, 102], ["sep_aspp_head.DepthwiseSeparableASPPHead._transform_inputs", "torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sep_aspp_head.DepthwiseSeparableASPPHead.bottleneck", "sep_aspp_head.DepthwiseSeparableASPPHead.sep_bottleneck", "sep_aspp_head.DepthwiseSeparableASPPHead.cls_seg", "mmseg.ops.resize", "sep_aspp_head.DepthwiseSeparableASPPHead.aspp_modules", "sep_aspp_head.DepthwiseSeparableASPPHead.c1_bottleneck", "mmseg.ops.resize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sep_aspp_head.DepthwiseSeparableASPPHead.image_pool", "sep_aspp_head.DepthwiseSeparableASPPHead.size"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "aspp_outs", "=", "[", "\n", "resize", "(", "\n", "self", ".", "image_pool", "(", "x", ")", ",", "\n", "size", "=", "x", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "]", "\n", "aspp_outs", ".", "extend", "(", "self", ".", "aspp_modules", "(", "x", ")", ")", "\n", "aspp_outs", "=", "torch", ".", "cat", "(", "aspp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "aspp_outs", ")", "\n", "if", "self", ".", "c1_bottleneck", "is", "not", "None", ":", "\n", "            ", "c1_output", "=", "self", ".", "c1_bottleneck", "(", "inputs", "[", "0", "]", ")", "\n", "output", "=", "resize", "(", "\n", "input", "=", "output", ",", "\n", "size", "=", "c1_output", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "c1_output", "]", ",", "dim", "=", "1", ")", "\n", "", "output", "=", "self", ".", "sep_bottleneck", "(", "output", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.segformer_head.MLP.__init__": [[20, 23], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", "=", "2048", ",", "embed_dim", "=", "768", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.segformer_head.MLP.forward": [[24, 28], ["segformer_head.MLP.flatten().transpose", "segformer_head.MLP.proj", "segformer_head.MLP.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.sep_fcn_head.DepthwiseSeparableFCNHead.__init__": [[29, 52], ["fcn_head.FCNHead.__init__", "mmcv.cnn.DepthwiseSeparableConvModule", "range", "mmcv.cnn.DepthwiseSeparableConvModule", "mmcv.cnn.DepthwiseSeparableConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DepthwiseSeparableFCNHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "convs", "[", "0", "]", "=", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_convs", ")", ":", "\n", "            ", "self", ".", "convs", "[", "i", "]", "=", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "\n", "", "if", "self", ".", "concat_input", ":", "\n", "            ", "self", ".", "conv_cat", "=", "DepthwiseSeparableConvModule", "(", "\n", "self", ".", "in_channels", "+", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "kernel_size", "//", "2", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.PPMConcat.__init__": [[18, 21], ["torch.ModuleList.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", "=", "(", "1", ",", "3", ",", "6", ",", "8", ")", ")", ":", "\n", "        ", "super", "(", "PPMConcat", ",", "self", ")", ".", "__init__", "(", "\n", "[", "nn", ".", "AdaptiveAvgPool2d", "(", "pool_scale", ")", "for", "pool_scale", "in", "pool_scales", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.PPMConcat.forward": [[22, 30], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "ppm", "ppm_outs.append", "ppm.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "ppm_outs", "=", "[", "]", "\n", "for", "ppm", "in", "self", ":", "\n", "            ", "ppm_out", "=", "ppm", "(", "feats", ")", "\n", "ppm_outs", ".", "append", "(", "ppm_out", ".", "view", "(", "*", "feats", ".", "shape", "[", ":", "2", "]", ",", "-", "1", ")", ")", "\n", "", "concat_outs", "=", "torch", ".", "cat", "(", "ppm_outs", ",", "dim", "=", "2", ")", "\n", "return", "concat_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.SelfAttentionBlock.__init__": [[52, 77], ["ann_head.PPMConcat", "utils.SelfAttentionBlock.__init__", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "low_in_channels", ",", "high_in_channels", ",", "channels", ",", "\n", "out_channels", ",", "share_key_query", ",", "query_scale", ",", "key_pool_scales", ",", "\n", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "key_psp", "=", "PPMConcat", "(", "key_pool_scales", ")", "\n", "if", "query_scale", ">", "1", ":", "\n", "            ", "query_downsample", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "query_scale", ")", "\n", "", "else", ":", "\n", "            ", "query_downsample", "=", "None", "\n", "", "super", "(", "SelfAttentionBlock", ",", "self", ")", ".", "__init__", "(", "\n", "key_in_channels", "=", "low_in_channels", ",", "\n", "query_in_channels", "=", "high_in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "share_key_query", "=", "share_key_query", ",", "\n", "query_downsample", "=", "query_downsample", ",", "\n", "key_downsample", "=", "key_psp", ",", "\n", "key_query_num_convs", "=", "1", ",", "\n", "key_query_norm", "=", "True", ",", "\n", "value_out_num_convs", "=", "1", ",", "\n", "value_out_norm", "=", "False", ",", "\n", "matmul_norm", "=", "True", ",", "\n", "with_out", "=", "True", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.AFNB.__init__": [[99, 124], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "ann_head.AFNB.stages.append", "ann_head.SelfAttentionBlock"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "low_in_channels", ",", "high_in_channels", ",", "channels", ",", "\n", "out_channels", ",", "query_scales", ",", "key_pool_scales", ",", "conv_cfg", ",", "\n", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "AFNB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "query_scale", "in", "query_scales", ":", "\n", "            ", "self", ".", "stages", ".", "append", "(", "\n", "SelfAttentionBlock", "(", "\n", "low_in_channels", "=", "low_in_channels", ",", "\n", "high_in_channels", "=", "high_in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "share_key_query", "=", "False", ",", "\n", "query_scale", "=", "query_scale", ",", "\n", "key_pool_scales", "=", "key_pool_scales", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "out_channels", "+", "high_in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.AFNB.forward": [[125, 131], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "ann_head.AFNB.bottleneck", "stage", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "low_feats", ",", "high_feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "priors", "=", "[", "stage", "(", "high_feats", ",", "low_feats", ")", "for", "stage", "in", "self", ".", "stages", "]", "\n", "context", "=", "torch", ".", "stack", "(", "priors", ",", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "[", "context", ",", "high_feats", "]", ",", "1", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.APNB.__init__": [[150, 174], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "ann_head.APNB.stages.append", "ann_head.SelfAttentionBlock"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "out_channels", ",", "query_scales", ",", "\n", "key_pool_scales", ",", "conv_cfg", ",", "norm_cfg", ",", "act_cfg", ")", ":", "\n", "        ", "super", "(", "APNB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "query_scale", "in", "query_scales", ":", "\n", "            ", "self", ".", "stages", ".", "append", "(", "\n", "SelfAttentionBlock", "(", "\n", "low_in_channels", "=", "in_channels", ",", "\n", "high_in_channels", "=", "in_channels", ",", "\n", "channels", "=", "channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "share_key_query", "=", "True", ",", "\n", "query_scale", "=", "query_scale", ",", "\n", "key_pool_scales", "=", "key_pool_scales", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", ")", "\n", "", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "2", "*", "in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.APNB.forward": [[175, 181], ["torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "ann_head.APNB.bottleneck", "stage", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "priors", "=", "[", "stage", "(", "feats", ",", "feats", ")", "for", "stage", "in", "self", ".", "stages", "]", "\n", "context", "=", "torch", ".", "stack", "(", "priors", ",", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "torch", ".", "cat", "(", "[", "context", ",", "feats", "]", ",", "1", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.ANNHead.__init__": [[198, 235], ["decode_head.BaseDecodeHead.__init__", "ann_head.AFNB", "mmcv.cnn.ConvModule", "ann_head.APNB", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "project_channels", ",", "\n", "query_scales", "=", "(", "1", ",", ")", ",", "\n", "key_pool_scales", "=", "(", "1", ",", "3", ",", "6", ",", "8", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ANNHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "assert", "len", "(", "self", ".", "in_channels", ")", "==", "2", "\n", "low_in_channels", ",", "high_in_channels", "=", "self", ".", "in_channels", "\n", "self", ".", "project_channels", "=", "project_channels", "\n", "self", ".", "fusion", "=", "AFNB", "(", "\n", "low_in_channels", "=", "low_in_channels", ",", "\n", "high_in_channels", "=", "high_in_channels", ",", "\n", "out_channels", "=", "high_in_channels", ",", "\n", "channels", "=", "project_channels", ",", "\n", "query_scales", "=", "query_scales", ",", "\n", "key_pool_scales", "=", "key_pool_scales", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "high_in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "self", ".", "context", "=", "APNB", "(", "\n", "in_channels", "=", "self", ".", "channels", ",", "\n", "out_channels", "=", "self", ".", "channels", ",", "\n", "channels", "=", "project_channels", ",", "\n", "query_scales", "=", "query_scales", ",", "\n", "key_pool_scales", "=", "key_pool_scales", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.ann_head.ANNHead.forward": [[236, 246], ["ann_head.ANNHead._transform_inputs", "ann_head.ANNHead.fusion", "ann_head.ANNHead.dropout", "ann_head.ANNHead.bottleneck", "ann_head.ANNHead.context", "ann_head.ANNHead.cls_seg"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "low_feats", ",", "high_feats", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "fusion", "(", "low_feats", ",", "high_feats", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "output", ")", "\n", "output", "=", "self", ".", "context", "(", "output", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.__init__": [[60, 103], ["dict", "dict", "cascade_decode_head.BaseCascadeDecodeHead.__init__", "torch.ModuleList", "torch.ModuleList", "range", "torch.Conv1d", "torch.Conv1d", "delattr", "sum", "mmcv.cnn.ConvModule", "point_head.PointHead.fcs.append", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_fcs", "=", "3", ",", "\n", "coarse_pred_each_layer", "=", "True", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv1d'", ")", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "False", ")", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PointHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "num_fcs", "=", "num_fcs", "\n", "self", ".", "coarse_pred_each_layer", "=", "coarse_pred_each_layer", "\n", "\n", "fc_in_channels", "=", "sum", "(", "self", ".", "in_channels", ")", "+", "self", ".", "num_classes", "\n", "fc_channels", "=", "self", ".", "channels", "\n", "self", ".", "fcs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "k", "in", "range", "(", "num_fcs", ")", ":", "\n", "            ", "fc", "=", "ConvModule", "(", "\n", "fc_in_channels", ",", "\n", "fc_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "conv_cfg", "=", "conv_cfg", ",", "\n", "norm_cfg", "=", "norm_cfg", ",", "\n", "act_cfg", "=", "act_cfg", ")", "\n", "self", ".", "fcs", ".", "append", "(", "fc", ")", "\n", "fc_in_channels", "=", "fc_channels", "\n", "fc_in_channels", "+=", "self", ".", "num_classes", "if", "self", ".", "coarse_pred_each_layer", "else", "0", "\n", "", "self", ".", "fc_seg", "=", "nn", ".", "Conv1d", "(", "\n", "fc_in_channels", ",", "\n", "self", ".", "num_classes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ")", "\n", "if", "self", ".", "dropout_ratio", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout_ratio", ")", "\n", "", "delattr", "(", "self", ",", "'conv_seg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.init_weights": [[104, 107], ["mmcv.cnn.normal_init"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weights of classification layer.\"\"\"", "\n", "normal_init", "(", "self", ".", "fc_seg", ",", "std", "=", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.cls_seg": [[108, 114], ["point_head.PointHead.fc_seg", "point_head.PointHead.dropout"], "methods", ["None"], ["", "def", "cls_seg", "(", "self", ",", "feat", ")", ":", "\n", "        ", "\"\"\"Classify each pixel with fc.\"\"\"", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "", "output", "=", "self", ".", "fc_seg", "(", "feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.forward": [[115, 122], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "point_head.PointHead.cls_seg", "fc", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "def", "forward", "(", "self", ",", "fine_grained_point_feats", ",", "coarse_point_feats", ")", ":", "\n", "        ", "x", "=", "torch", ".", "cat", "(", "[", "fine_grained_point_feats", ",", "coarse_point_feats", "]", ",", "dim", "=", "1", ")", "\n", "for", "fc", "in", "self", ".", "fcs", ":", "\n", "            ", "x", "=", "fc", "(", "x", ")", "\n", "if", "self", ".", "coarse_pred_each_layer", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "coarse_point_feats", ")", ",", "dim", "=", "1", ")", "\n", "", "", "return", "self", ".", "cls_seg", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead._get_fine_grained_point_feats": [[123, 146], ["mmcv.ops.point_sample", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_get_fine_grained_point_feats", "(", "self", ",", "x", ",", "points", ")", ":", "\n", "        ", "\"\"\"Sample from fine grained features.\n\n        Args:\n            x (list[Tensor]): Feature pyramid from by neck or backbone.\n            points (Tensor): Point coordinates, shape (batch_size,\n                num_points, 2).\n\n        Returns:\n            fine_grained_feats (Tensor): Sampled fine grained feature,\n                shape (batch_size, sum(channels of x), num_points).\n        \"\"\"", "\n", "\n", "fine_grained_feats_list", "=", "[", "\n", "point_sample", "(", "_", ",", "points", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "for", "_", "in", "x", "\n", "]", "\n", "if", "len", "(", "fine_grained_feats_list", ")", ">", "1", ":", "\n", "            ", "fine_grained_feats", "=", "torch", ".", "cat", "(", "fine_grained_feats_list", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "fine_grained_feats", "=", "fine_grained_feats_list", "[", "0", "]", "\n", "\n", "", "return", "fine_grained_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead._get_coarse_point_feats": [[147, 164], ["mmcv.ops.point_sample"], "methods", ["None"], ["", "def", "_get_coarse_point_feats", "(", "self", ",", "prev_output", ",", "points", ")", ":", "\n", "        ", "\"\"\"Sample from fine grained features.\n\n        Args:\n            prev_output (list[Tensor]): Prediction of previous decode head.\n            points (Tensor): Point coordinates, shape (batch_size,\n                num_points, 2).\n\n        Returns:\n            coarse_feats (Tensor): Sampled coarse feature, shape (batch_size,\n                num_classes, num_points).\n        \"\"\"", "\n", "\n", "coarse_feats", "=", "point_sample", "(", "\n", "prev_output", ",", "points", ",", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "return", "coarse_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.forward_train": [[165, 202], ["point_head.PointHead._transform_inputs", "point_head.PointHead._get_fine_grained_point_feats", "point_head.PointHead._get_coarse_point_feats", "point_head.PointHead.forward", "mmcv.ops.point_sample", "point_label.squeeze().long.squeeze().long.squeeze().long", "point_head.PointHead.losses", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "point_head.PointHead.get_points_train", "gt_semantic_seg.float", "point_label.squeeze().long.squeeze().long.squeeze"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead._get_fine_grained_point_feats", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead._get_coarse_point_feats", "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.losses", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.get_points_train"], ["", "def", "forward_train", "(", "self", ",", "inputs", ",", "prev_output", ",", "img_metas", ",", "gt_semantic_seg", ",", "\n", "train_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for training.\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            prev_output (Tensor): The output of previous decode head.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            gt_semantic_seg (Tensor): Semantic segmentation masks\n                used if the architecture supports semantic segmentation task.\n            train_cfg (dict): The training config.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "points", "=", "self", ".", "get_points_train", "(", "\n", "prev_output", ",", "calculate_uncertainty", ",", "cfg", "=", "train_cfg", ")", "\n", "", "fine_grained_point_feats", "=", "self", ".", "_get_fine_grained_point_feats", "(", "\n", "x", ",", "points", ")", "\n", "coarse_point_feats", "=", "self", ".", "_get_coarse_point_feats", "(", "prev_output", ",", "points", ")", "\n", "point_logits", "=", "self", ".", "forward", "(", "fine_grained_point_feats", ",", "\n", "coarse_point_feats", ")", "\n", "point_label", "=", "point_sample", "(", "\n", "gt_semantic_seg", ".", "float", "(", ")", ",", "\n", "points", ",", "\n", "mode", "=", "'nearest'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "point_label", "=", "point_label", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "\n", "losses", "=", "self", ".", "losses", "(", "point_logits", ",", "point_label", ")", "\n", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.forward_test": [[203, 247], ["point_head.PointHead._transform_inputs", "prev_output.clone", "range", "mmseg.ops.resize", "point_head.PointHead.get_points_test", "point_head.PointHead._get_fine_grained_point_feats", "point_head.PointHead._get_coarse_point_feats", "point_head.PointHead.forward", "point_indices.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "refined_seg_logits.view.view.reshape", "refined_seg_logits.view.view.scatter_", "refined_seg_logits.view.view.view", "point_indices.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.get_points_test", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead._get_fine_grained_point_feats", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead._get_coarse_point_feats", "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward"], ["", "def", "forward_test", "(", "self", ",", "inputs", ",", "prev_output", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing.\n\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            prev_output (Tensor): The output of previous decode head.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            test_cfg (dict): The testing config.\n\n        Returns:\n            Tensor: Output segmentation map.\n        \"\"\"", "\n", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "refined_seg_logits", "=", "prev_output", ".", "clone", "(", ")", "\n", "for", "_", "in", "range", "(", "test_cfg", ".", "subdivision_steps", ")", ":", "\n", "            ", "refined_seg_logits", "=", "resize", "(", "\n", "refined_seg_logits", ",", "\n", "scale_factor", "=", "test_cfg", ".", "scale_factor", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", "=", "refined_seg_logits", ".", "shape", "\n", "point_indices", ",", "points", "=", "self", ".", "get_points_test", "(", "\n", "refined_seg_logits", ",", "calculate_uncertainty", ",", "cfg", "=", "test_cfg", ")", "\n", "fine_grained_point_feats", "=", "self", ".", "_get_fine_grained_point_feats", "(", "\n", "x", ",", "points", ")", "\n", "coarse_point_feats", "=", "self", ".", "_get_coarse_point_feats", "(", "\n", "prev_output", ",", "points", ")", "\n", "point_logits", "=", "self", ".", "forward", "(", "fine_grained_point_feats", ",", "\n", "coarse_point_feats", ")", "\n", "\n", "point_indices", "=", "point_indices", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "channels", ",", "-", "1", ")", "\n", "refined_seg_logits", "=", "refined_seg_logits", ".", "reshape", "(", "\n", "batch_size", ",", "channels", ",", "height", "*", "width", ")", "\n", "refined_seg_logits", "=", "refined_seg_logits", ".", "scatter_", "(", "\n", "2", ",", "point_indices", ",", "point_logits", ")", "\n", "refined_seg_logits", "=", "refined_seg_logits", ".", "view", "(", "\n", "batch_size", ",", "channels", ",", "height", ",", "width", ")", "\n", "\n", "", "return", "refined_seg_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.losses": [[248, 255], ["dict", "point_head.PointHead.loss_decode", "losses.accuracy"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.accuracy.accuracy"], ["", "def", "losses", "(", "self", ",", "point_logits", ",", "point_label", ")", ":", "\n", "        ", "\"\"\"Compute segmentation loss.\"\"\"", "\n", "loss", "=", "dict", "(", ")", "\n", "loss", "[", "'loss_point'", "]", "=", "self", ".", "loss_decode", "(", "\n", "point_logits", ",", "point_label", ",", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "loss", "[", "'acc_point'", "]", "=", "accuracy", "(", "point_logits", ",", "point_label", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.get_points_train": [[256, 309], ["int", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "mmcv.ops.point_sample", "uncertainty_func", "int", "[].view", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "idx.view"], "methods", ["None"], ["", "def", "get_points_train", "(", "self", ",", "seg_logits", ",", "uncertainty_func", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Sample points for training.\n\n        Sample points in [0, 1] x [0, 1] coordinate space based on their\n        uncertainty. The uncertainties are calculated for each point using\n        'uncertainty_func' function that takes point's logit prediction as\n        input.\n\n        Args:\n            seg_logits (Tensor): Semantic segmentation logits, shape (\n                batch_size, num_classes, height, width).\n            uncertainty_func (func): uncertainty calculation function.\n            cfg (dict): Training config of point head.\n\n        Returns:\n            point_coords (Tensor): A tensor of shape (batch_size, num_points,\n                2) that contains the coordinates of ``num_points`` sampled\n                points.\n        \"\"\"", "\n", "num_points", "=", "cfg", ".", "num_points", "\n", "oversample_ratio", "=", "cfg", ".", "oversample_ratio", "\n", "importance_sample_ratio", "=", "cfg", ".", "importance_sample_ratio", "\n", "assert", "oversample_ratio", ">=", "1", "\n", "assert", "0", "<=", "importance_sample_ratio", "<=", "1", "\n", "batch_size", "=", "seg_logits", ".", "shape", "[", "0", "]", "\n", "num_sampled", "=", "int", "(", "num_points", "*", "oversample_ratio", ")", "\n", "point_coords", "=", "torch", ".", "rand", "(", "\n", "batch_size", ",", "num_sampled", ",", "2", ",", "device", "=", "seg_logits", ".", "device", ")", "\n", "point_logits", "=", "point_sample", "(", "seg_logits", ",", "point_coords", ")", "\n", "# It is crucial to calculate uncertainty based on the sampled", "\n", "# prediction value for the points. Calculating uncertainties of the", "\n", "# coarse predictions first and sampling them for points leads to", "\n", "# incorrect results.  To illustrate this: assume uncertainty func(", "\n", "# logits)=-abs(logits), a sampled point between two coarse", "\n", "# predictions with -1 and 1 logits has 0 logits, and therefore 0", "\n", "# uncertainty value. However, if we calculate uncertainties for the", "\n", "# coarse predictions first, both will have -1 uncertainty,", "\n", "# and sampled point will get -1 uncertainty.", "\n", "point_uncertainties", "=", "uncertainty_func", "(", "point_logits", ")", "\n", "num_uncertain_points", "=", "int", "(", "importance_sample_ratio", "*", "num_points", ")", "\n", "num_random_points", "=", "num_points", "-", "num_uncertain_points", "\n", "idx", "=", "torch", ".", "topk", "(", "\n", "point_uncertainties", "[", ":", ",", "0", ",", ":", "]", ",", "k", "=", "num_uncertain_points", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "shift", "=", "num_sampled", "*", "torch", ".", "arange", "(", "\n", "batch_size", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "seg_logits", ".", "device", ")", "\n", "idx", "+=", "shift", "[", ":", ",", "None", "]", "\n", "point_coords", "=", "point_coords", ".", "view", "(", "-", "1", ",", "2", ")", "[", "idx", ".", "view", "(", "-", "1", ")", ",", ":", "]", ".", "view", "(", "\n", "batch_size", ",", "num_uncertain_points", ",", "2", ")", "\n", "if", "num_random_points", ">", "0", ":", "\n", "            ", "rand_point_coords", "=", "torch", ".", "rand", "(", "\n", "batch_size", ",", "num_random_points", ",", "2", ",", "device", "=", "seg_logits", ".", "device", ")", "\n", "point_coords", "=", "torch", ".", "cat", "(", "(", "point_coords", ",", "rand_point_coords", ")", ",", "dim", "=", "1", ")", "\n", "", "return", "point_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.PointHead.get_points_test": [[310, 350], ["uncertainty_func", "uncertainty_map.view.view.view", "min", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "uncertainty_map.view.view.topk"], "methods", ["None"], ["", "def", "get_points_test", "(", "self", ",", "seg_logits", ",", "uncertainty_func", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"Sample points for testing.\n\n        Find ``num_points`` most uncertain points from ``uncertainty_map``.\n\n        Args:\n            seg_logits (Tensor): A tensor of shape (batch_size, num_classes,\n                height, width) for class-specific or class-agnostic prediction.\n            uncertainty_func (func): uncertainty calculation function.\n            cfg (dict): Testing config of point head.\n\n        Returns:\n            point_indices (Tensor): A tensor of shape (batch_size, num_points)\n                that contains indices from [0, height x width) of the most\n                uncertain points.\n            point_coords (Tensor): A tensor of shape (batch_size, num_points,\n                2) that contains [0, 1] x [0, 1] normalized coordinates of the\n                most uncertain points from the ``height x width`` grid .\n        \"\"\"", "\n", "\n", "num_points", "=", "cfg", ".", "subdivision_num_points", "\n", "uncertainty_map", "=", "uncertainty_func", "(", "seg_logits", ")", "\n", "batch_size", ",", "_", ",", "height", ",", "width", "=", "uncertainty_map", ".", "shape", "\n", "h_step", "=", "1.0", "/", "height", "\n", "w_step", "=", "1.0", "/", "width", "\n", "\n", "uncertainty_map", "=", "uncertainty_map", ".", "view", "(", "batch_size", ",", "height", "*", "width", ")", "\n", "num_points", "=", "min", "(", "height", "*", "width", ",", "num_points", ")", "\n", "point_indices", "=", "uncertainty_map", ".", "topk", "(", "num_points", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "point_coords", "=", "torch", ".", "zeros", "(", "\n", "batch_size", ",", "\n", "num_points", ",", "\n", "2", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", "device", "=", "seg_logits", ".", "device", ")", "\n", "point_coords", "[", ":", ",", ":", ",", "0", "]", "=", "w_step", "/", "2.0", "+", "(", "point_indices", "%", "\n", "width", ")", ".", "float", "(", ")", "*", "w_step", "\n", "point_coords", "[", ":", ",", ":", ",", "1", "]", "=", "h_step", "/", "2.0", "+", "(", "point_indices", "//", "\n", "width", ")", ".", "float", "(", ")", "*", "h_step", "\n", "return", "point_indices", ",", "point_coords", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.point_head.calculate_uncertainty": [[14, 32], ["torch.topk", "torch.topk"], "function", ["None"], ["def", "calculate_uncertainty", "(", "seg_logits", ")", ":", "\n", "    ", "\"\"\"Estimate uncertainty based on seg logits.\n\n    For each location of the prediction ``seg_logits`` we estimate\n    uncertainty as the difference between top first and top second\n    predicted logits.\n\n    Args:\n        seg_logits (Tensor): Semantic segmentation logits,\n            shape (batch_size, num_classes, height, width).\n\n    Returns:\n        scores (Tensor): T uncertainty scores with the most uncertain\n            locations having the highest uncertainty score, shape (\n            batch_size, 1, height, width)\n    \"\"\"", "\n", "top2_scores", "=", "torch", ".", "topk", "(", "seg_logits", ",", "k", "=", "2", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "return", "(", "top2_scores", "[", ":", ",", "1", "]", "-", "top2_scores", "[", ":", ",", "0", "]", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.__init__": [[46, 89], ["dict", "dict", "torch.Module.__init__", "decode_head.BaseDecodeHead._init_inputs", "builder.build_loss", "torch.Conv2d", "torch.Conv2d", "mmseg.core.build_pixel_sampler", "torch.Dropout2d", "torch.Dropout2d"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._init_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_loss", "home.repos.pwc.inspect_result.nvlabs_fan.seg.builder.build_pixel_sampler"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "channels", ",", "\n", "*", ",", "\n", "num_classes", ",", "\n", "dropout_ratio", "=", "0.1", ",", "\n", "conv_cfg", "=", "None", ",", "\n", "norm_cfg", "=", "None", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ")", ",", "\n", "in_index", "=", "-", "1", ",", "\n", "input_transform", "=", "None", ",", "\n", "loss_decode", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "decoder_params", "=", "None", ",", "\n", "ignore_index", "=", "255", ",", "\n", "sampler", "=", "None", ",", "\n", "align_corners", "=", "False", ")", ":", "\n", "        ", "super", "(", "BaseDecodeHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_init_inputs", "(", "in_channels", ",", "in_index", ",", "input_transform", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "dropout_ratio", "=", "dropout_ratio", "\n", "self", ".", "conv_cfg", "=", "conv_cfg", "\n", "self", ".", "norm_cfg", "=", "norm_cfg", "\n", "self", ".", "act_cfg", "=", "act_cfg", "\n", "self", ".", "in_index", "=", "in_index", "\n", "self", ".", "loss_decode", "=", "build_loss", "(", "loss_decode", ")", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n", "if", "sampler", "is", "not", "None", ":", "\n", "            ", "self", ".", "sampler", "=", "build_pixel_sampler", "(", "sampler", ",", "context", "=", "self", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sampler", "=", "None", "\n", "\n", "", "self", ".", "conv_seg", "=", "nn", ".", "Conv2d", "(", "channels", ",", "num_classes", ",", "kernel_size", "=", "1", ")", "\n", "if", "dropout_ratio", ">", "0", ":", "\n", "            ", "self", ".", "dropout", "=", "nn", ".", "Dropout2d", "(", "dropout_ratio", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "dropout", "=", "None", "\n", "", "self", ".", "fp16_enabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.extra_repr": [[90, 96], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Extra repr.\"\"\"", "\n", "s", "=", "f'input_transform={self.input_transform}, '", "f'ignore_index={self.ignore_index}, '", "f'align_corners={self.align_corners}'", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._init_inputs": [[97, 134], ["isinstance", "isinstance", "isinstance", "isinstance", "len", "len", "sum"], "methods", ["None"], ["", "def", "_init_inputs", "(", "self", ",", "in_channels", ",", "in_index", ",", "input_transform", ")", ":", "\n", "        ", "\"\"\"Check and initialize input transforms.\n\n        The in_channels, in_index and input_transform must match.\n        Specifically, when input_transform is None, only single feature map\n        will be selected. So in_channels and in_index must be of type int.\n        When input_transform\n\n        Args:\n            in_channels (int|Sequence[int]): Input channels.\n            in_index (int|Sequence[int]): Input feature index.\n            input_transform (str|None): Transformation type of input features.\n                Options: 'resize_concat', 'multiple_select', None.\n                'resize_concat': Multiple feature maps will be resize to the\n                    same size as first one and than concat together.\n                    Usually used in FCN head of HRNet.\n                'multiple_select': Multiple feature maps will be bundle into\n                    a list and passed into decode head.\n                None: Only one select feature map is allowed.\n        \"\"\"", "\n", "\n", "if", "input_transform", "is", "not", "None", ":", "\n", "            ", "assert", "input_transform", "in", "[", "'resize_concat'", ",", "'multiple_select'", "]", "\n", "", "self", ".", "input_transform", "=", "input_transform", "\n", "self", ".", "in_index", "=", "in_index", "\n", "if", "input_transform", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "in_channels", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "in_index", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "in_channels", ")", "==", "len", "(", "in_index", ")", "\n", "if", "input_transform", "==", "'resize_concat'", ":", "\n", "                ", "self", ".", "in_channels", "=", "sum", "(", "in_channels", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "in_channels", "=", "in_channels", "\n", "", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "in_channels", ",", "int", ")", "\n", "assert", "isinstance", "(", "in_index", ",", "int", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights": [[135, 138], ["mmcv.cnn.normal_init"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize weights of classification layer.\"\"\"", "\n", "normal_init", "(", "self", ".", "conv_seg", ",", "mean", "=", "0", ",", "std", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs": [[139, 165], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "mmseg.ops.resize"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "_transform_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Transform inputs for decoder.\n\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n\n        Returns:\n            Tensor: The transformed inputs\n        \"\"\"", "\n", "\n", "if", "self", ".", "input_transform", "==", "'resize_concat'", ":", "\n", "            ", "inputs", "=", "[", "inputs", "[", "i", "]", "for", "i", "in", "self", ".", "in_index", "]", "\n", "upsampled_inputs", "=", "[", "\n", "resize", "(", "\n", "input", "=", "x", ",", "\n", "size", "=", "inputs", "[", "0", "]", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "for", "x", "in", "inputs", "\n", "]", "\n", "inputs", "=", "torch", ".", "cat", "(", "upsampled_inputs", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "input_transform", "==", "'multiple_select'", ":", "\n", "            ", "inputs", "=", "[", "inputs", "[", "i", "]", "for", "i", "in", "self", ".", "in_index", "]", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "inputs", "[", "self", ".", "in_index", "]", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward": [[166, 171], ["mmcv.runner.auto_fp16"], "methods", ["None"], ["", "@", "auto_fp16", "(", ")", "\n", "@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Placeholder of forward function.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_train": [[172, 191], ["decode_head.BaseDecodeHead.forward", "decode_head.BaseDecodeHead.losses"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.losses"], ["", "def", "forward_train", "(", "self", ",", "inputs", ",", "img_metas", ",", "gt_semantic_seg", ",", "train_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for training.\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            gt_semantic_seg (Tensor): Semantic segmentation masks\n                used if the architecture supports semantic segmentation task.\n            train_cfg (dict): The training config.\n\n        Returns:\n            dict[str, Tensor]: a dictionary of loss components\n        \"\"\"", "\n", "seg_logits", "=", "self", ".", "forward", "(", "inputs", ")", "\n", "losses", "=", "self", ".", "losses", "(", "seg_logits", ",", "gt_semantic_seg", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.forward_test": [[192, 208], ["decode_head.BaseDecodeHead.forward"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward"], ["", "def", "forward_test", "(", "self", ",", "inputs", ",", "img_metas", ",", "test_cfg", ")", ":", "\n", "        ", "\"\"\"Forward function for testing.\n\n        Args:\n            inputs (list[Tensor]): List of multi-level img features.\n            img_metas (list[dict]): List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                `mmseg/datasets/pipelines/formatting.py:Collect`.\n            test_cfg (dict): The testing config.\n\n        Returns:\n            Tensor: Output segmentation map.\n        \"\"\"", "\n", "return", "self", ".", "forward", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg": [[209, 215], ["decode_head.BaseDecodeHead.conv_seg", "decode_head.BaseDecodeHead.dropout"], "methods", ["None"], ["", "def", "cls_seg", "(", "self", ",", "feat", ")", ":", "\n", "        ", "\"\"\"Classify each pixel.\"\"\"", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "feat", "=", "self", ".", "dropout", "(", "feat", ")", "\n", "", "output", "=", "self", ".", "conv_seg", "(", "feat", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.losses": [[216, 237], ["mmcv.runner.force_fp32", "dict", "mmseg.ops.resize", "seg_label.squeeze.squeeze.squeeze", "decode_head.BaseDecodeHead.loss_decode", "losses.accuracy", "decode_head.BaseDecodeHead.sampler.sample"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.losses.accuracy.accuracy", "home.repos.pwc.inspect_result.nvlabs_fan.sampler.base_pixel_sampler.BasePixelSampler.sample"], ["", "@", "force_fp32", "(", "apply_to", "=", "(", "'seg_logit'", ",", ")", ")", "\n", "def", "losses", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Compute segmentation loss.\"\"\"", "\n", "loss", "=", "dict", "(", ")", "\n", "seg_logit", "=", "resize", "(", "\n", "input", "=", "seg_logit", ",", "\n", "size", "=", "seg_label", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "if", "self", ".", "sampler", "is", "not", "None", ":", "\n", "            ", "seg_weight", "=", "self", ".", "sampler", ".", "sample", "(", "seg_logit", ",", "seg_label", ")", "\n", "", "else", ":", "\n", "            ", "seg_weight", "=", "None", "\n", "", "seg_label", "=", "seg_label", ".", "squeeze", "(", "1", ")", "\n", "loss", "[", "'loss_seg'", "]", "=", "self", ".", "loss_decode", "(", "\n", "seg_logit", ",", "\n", "seg_label", ",", "\n", "weight", "=", "seg_weight", ",", "\n", "ignore_index", "=", "self", ".", "ignore_index", ")", "\n", "loss", "[", "'acc_seg'", "]", "=", "accuracy", "(", "seg_logit", ",", "seg_label", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.uper_head.UPerHead.__init__": [[23, 75], ["decode_head.BaseDecodeHead.__init__", "psp_head.PPM", "mmcv.cnn.ConvModule", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule", "uper_head.UPerHead.lateral_convs.append", "uper_head.UPerHead.fpn_convs.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "pool_scales", "=", "(", "1", ",", "2", ",", "3", ",", "6", ")", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "UPerHead", ",", "self", ")", ".", "__init__", "(", "\n", "input_transform", "=", "'multiple_select'", ",", "**", "kwargs", ")", "\n", "# PSP Module", "\n", "self", ".", "psp_modules", "=", "PPM", "(", "\n", "pool_scales", ",", "\n", "self", ".", "in_channels", "[", "-", "1", "]", ",", "\n", "self", ".", "channels", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "self", ".", "bottleneck", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "[", "-", "1", "]", "+", "len", "(", "pool_scales", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "# FPN Module", "\n", "self", ".", "lateral_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "fpn_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "in_channels", "in", "self", ".", "in_channels", "[", ":", "-", "1", "]", ":", "# skip the top layer", "\n", "            ", "l_conv", "=", "ConvModule", "(", "\n", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "fpn_conv", "=", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ",", "\n", "inplace", "=", "False", ")", "\n", "self", ".", "lateral_convs", ".", "append", "(", "l_conv", ")", "\n", "self", ".", "fpn_convs", ".", "append", "(", "fpn_conv", ")", "\n", "\n", "", "self", ".", "fpn_bottleneck", "=", "ConvModule", "(", "\n", "len", "(", "self", ".", "in_channels", ")", "*", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "3", ",", "\n", "padding", "=", "1", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.uper_head.UPerHead.psp_forward": [[76, 85], ["torch.cat.extend", "torch.cat.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "uper_head.UPerHead.bottleneck", "uper_head.UPerHead.psp_modules"], "methods", ["None"], ["", "def", "psp_forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function of PSP module.\"\"\"", "\n", "x", "=", "inputs", "[", "-", "1", "]", "\n", "psp_outs", "=", "[", "x", "]", "\n", "psp_outs", ".", "extend", "(", "self", ".", "psp_modules", "(", "x", ")", ")", "\n", "psp_outs", "=", "torch", ".", "cat", "(", "psp_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "bottleneck", "(", "psp_outs", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.uper_head.UPerHead.forward": [[86, 127], ["uper_head.UPerHead._transform_inputs", "laterals.append", "len", "range", "torch.cat.append", "torch.cat.append", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "uper_head.UPerHead.fpn_bottleneck", "uper_head.UPerHead.cls_seg", "lateral_conv", "uper_head.UPerHead.psp_forward", "mmseg.ops.resize", "mmseg.ops.resize", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.uper_head.UPerHead.psp_forward", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize", "home.repos.pwc.inspect_result.nvlabs_fan.ops.wrappers.resize"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "\n", "inputs", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "\n", "# build laterals", "\n", "laterals", "=", "[", "\n", "lateral_conv", "(", "inputs", "[", "i", "]", ")", "\n", "for", "i", ",", "lateral_conv", "in", "enumerate", "(", "self", ".", "lateral_convs", ")", "\n", "]", "\n", "\n", "laterals", ".", "append", "(", "self", ".", "psp_forward", "(", "inputs", ")", ")", "\n", "\n", "# build top-down path", "\n", "used_backbone_levels", "=", "len", "(", "laterals", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "prev_shape", "=", "laterals", "[", "i", "-", "1", "]", ".", "shape", "[", "2", ":", "]", "\n", "laterals", "[", "i", "-", "1", "]", "+=", "resize", "(", "\n", "laterals", "[", "i", "]", ",", "\n", "size", "=", "prev_shape", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "\n", "# build outputs", "\n", "", "fpn_outs", "=", "[", "\n", "self", ".", "fpn_convs", "[", "i", "]", "(", "laterals", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ")", "\n", "]", "\n", "# append psp feature", "\n", "fpn_outs", ".", "append", "(", "laterals", "[", "-", "1", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "used_backbone_levels", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "fpn_outs", "[", "i", "]", "=", "resize", "(", "\n", "fpn_outs", "[", "i", "]", ",", "\n", "size", "=", "fpn_outs", "[", "0", "]", ".", "shape", "[", "2", ":", "]", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ")", "\n", "", "fpn_outs", "=", "torch", ".", "cat", "(", "fpn_outs", ",", "dim", "=", "1", ")", "\n", "output", "=", "self", ".", "fpn_bottleneck", "(", "fpn_outs", ")", "\n", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.fcn_head.FCNHead.__init__": [[22, 68], ["decode_head.BaseDecodeHead.__init__", "convs.append", "range", "mmcv.cnn.ConvModule", "convs.append", "torch.Identity", "torch.Identity", "torch.Sequential", "torch.Sequential", "mmcv.cnn.ConvModule", "mmcv.cnn.ConvModule"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_convs", "=", "2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "concat_input", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "assert", "num_convs", ">=", "0", "\n", "self", ".", "num_convs", "=", "num_convs", "\n", "self", ".", "concat_input", "=", "concat_input", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "super", "(", "FCNHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "num_convs", "==", "0", ":", "\n", "            ", "assert", "self", ".", "in_channels", "==", "self", ".", "channels", "\n", "\n", "", "convs", "=", "[", "]", "\n", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "for", "i", "in", "range", "(", "num_convs", "-", "1", ")", ":", "\n", "            ", "convs", ".", "append", "(", "\n", "ConvModule", "(", "\n", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", ")", "\n", "", "if", "num_convs", "==", "0", ":", "\n", "            ", "self", ".", "convs", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "", "if", "self", ".", "concat_input", ":", "\n", "            ", "self", ".", "conv_cat", "=", "ConvModule", "(", "\n", "self", ".", "in_channels", "+", "self", ".", "channels", ",", "\n", "self", ".", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", "conv_cfg", "=", "self", ".", "conv_cfg", ",", "\n", "norm_cfg", "=", "self", ".", "norm_cfg", ",", "\n", "act_cfg", "=", "self", ".", "act_cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.fcn_head.FCNHead.forward": [[69, 77], ["fcn_head.FCNHead._transform_inputs", "fcn_head.FCNHead.convs", "fcn_head.FCNHead.cls_seg", "fcn_head.FCNHead.conv_cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead._transform_inputs", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.cls_seg"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "x", "=", "self", ".", "_transform_inputs", "(", "inputs", ")", "\n", "output", "=", "self", ".", "convs", "(", "x", ")", "\n", "if", "self", ".", "concat_input", ":", "\n", "            ", "output", "=", "self", ".", "conv_cat", "(", "torch", ".", "cat", "(", "[", "x", ",", "output", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "output", "=", "self", ".", "cls_seg", "(", "output", ")", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.LovaszLoss.__init__": [[248, 273], ["torch.Module.__init__", "mmcv.is_list_of"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "loss_type", "=", "'multi_class'", ",", "\n", "classes", "=", "'present'", ",", "\n", "per_image", "=", "False", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "class_weight", "=", "None", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "LovaszLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "loss_type", "in", "(", "'binary'", ",", "'multi_class'", ")", ",", "\"loss_type should be \\\n                                                    'binary' or 'multi_class'.\"", "\n", "\n", "if", "loss_type", "==", "'binary'", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "lovasz_hinge", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "lovasz_softmax", "\n", "", "assert", "classes", "in", "(", "'all'", ",", "'present'", ")", "or", "mmcv", ".", "is_list_of", "(", "classes", ",", "int", ")", "\n", "if", "not", "per_image", ":", "\n", "            ", "assert", "reduction", "==", "'none'", ",", "\"reduction should be 'none' when \\\n                                                        per_image is False.\"", "\n", "\n", "", "self", ".", "classes", "=", "classes", "\n", "self", ".", "per_image", "=", "per_image", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.LovaszLoss.forward": [[274, 304], ["torch.softmax.new_tensor", "torch.softmax", "torch.softmax", "torch.softmax", "lovasz_loss.LovaszLoss.cls_criterion"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "            ", "class_weight", "=", "cls_score", ".", "new_tensor", "(", "self", ".", "class_weight", ")", "\n", "", "else", ":", "\n", "            ", "class_weight", "=", "None", "\n", "\n", "# if multi-class loss, transform logits to probs", "\n", "", "if", "self", ".", "cls_criterion", "==", "lovasz_softmax", ":", "\n", "            ", "cls_score", "=", "F", ".", "softmax", "(", "cls_score", ",", "dim", "=", "1", ")", "\n", "\n", "", "loss_cls", "=", "self", ".", "loss_weight", "*", "self", ".", "cls_criterion", "(", "\n", "cls_score", ",", "\n", "label", ",", "\n", "self", ".", "classes", ",", "\n", "self", ".", "per_image", ",", "\n", "class_weight", "=", "class_weight", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_grad": [[14, 27], ["len", "gt_sorted.sum", "gt_sorted.float().cumsum", "gt_sorted.float"], "function", ["None"], ["def", "lovasz_grad", "(", "gt_sorted", ")", ":", "\n", "    ", "\"\"\"Computes gradient of the Lovasz extension w.r.t sorted errors.\n\n    See Alg. 1 in paper.\n    \"\"\"", "\n", "p", "=", "len", "(", "gt_sorted", ")", "\n", "gts", "=", "gt_sorted", ".", "sum", "(", ")", "\n", "intersection", "=", "gts", "-", "gt_sorted", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "union", "=", "gts", "+", "(", "1", "-", "gt_sorted", ")", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "jaccard", "=", "1.", "-", "intersection", "/", "union", "\n", "if", "p", ">", "1", ":", "# cover 1-pixel case", "\n", "        ", "jaccard", "[", "1", ":", "p", "]", "=", "jaccard", "[", "1", ":", "p", "]", "-", "jaccard", "[", "0", ":", "-", "1", "]", "\n", "", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.flatten_binary_logits": [[29, 40], ["logits.view.view", "labels.view.view"], "function", ["None"], ["", "def", "flatten_binary_logits", "(", "logits", ",", "labels", ",", "ignore_index", "=", "None", ")", ":", "\n", "    ", "\"\"\"Flattens predictions in the batch (binary case) Remove labels equal to\n    'ignore_index'.\"\"\"", "\n", "logits", "=", "logits", ".", "view", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore_index", "is", "None", ":", "\n", "        ", "return", "logits", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore_index", ")", "\n", "vlogits", "=", "logits", "[", "valid", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vlogits", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.flatten_probs": [[42, 57], ["probs.view.size", "probs.view.permute().contiguous().view", "labels.view.view", "probs.view.dim", "probs.view.size", "probs.view.view", "probs.view.permute().contiguous", "valid.nonzero().squeeze", "probs.view.permute", "valid.nonzero"], "function", ["None"], ["", "def", "flatten_probs", "(", "probs", ",", "labels", ",", "ignore_index", "=", "None", ")", ":", "\n", "    ", "\"\"\"Flattens predictions in the batch.\"\"\"", "\n", "if", "probs", ".", "dim", "(", ")", "==", "3", ":", "\n", "# assumes output of a sigmoid layer", "\n", "        ", "B", ",", "H", ",", "W", "=", "probs", ".", "size", "(", ")", "\n", "probs", "=", "probs", ".", "view", "(", "B", ",", "1", ",", "H", ",", "W", ")", "\n", "", "B", ",", "C", ",", "H", ",", "W", "=", "probs", ".", "size", "(", ")", "\n", "probs", "=", "probs", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "C", ")", "# B*H*W, C=P,C", "\n", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "ignore_index", "is", "None", ":", "\n", "        ", "return", "probs", ",", "labels", "\n", "", "valid", "=", "(", "labels", "!=", "ignore_index", ")", "\n", "vprobs", "=", "probs", "[", "valid", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "]", "\n", "vlabels", "=", "labels", "[", "valid", "]", "\n", "return", "vprobs", ",", "vlabels", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_hinge_flat": [[59, 81], ["torch.sort", "torch.sort", "torch.sort", "lovasz_loss.lovasz_grad", "torch.dot", "torch.dot", "torch.dot", "len", "torch.relu", "logits.sum", "labels.float"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_grad"], ["", "def", "lovasz_hinge_flat", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Binary Lovasz hinge loss.\n\n    Args:\n        logits (torch.Tensor): [P], logits at each prediction\n            (between -infty and +infty).\n        labels (torch.Tensor): [P], binary ground truth labels (0 or 1).\n\n    Returns:\n        torch.Tensor: The calculated loss.\n    \"\"\"", "\n", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "logits", ".", "sum", "(", ")", "*", "0.", "\n", "", "signs", "=", "2.", "*", "labels", ".", "float", "(", ")", "-", "1.", "\n", "errors", "=", "(", "1.", "-", "logits", "*", "signs", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "gt_sorted", "=", "labels", "[", "perm", "]", "\n", "grad", "=", "lovasz_grad", "(", "gt_sorted", ")", "\n", "loss", "=", "torch", ".", "dot", "(", "F", ".", "relu", "(", "errors_sorted", ")", ",", "grad", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_hinge": [[83, 126], ["utils.weight_reduce_loss", "lovasz_loss.lovasz_hinge_flat", "lovasz_loss.lovasz_hinge_flat", "torch.stack", "torch.stack", "torch.stack", "zip", "lovasz_loss.flatten_binary_logits", "lovasz_loss.flatten_binary_logits", "logit.unsqueeze", "label.unsqueeze"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_hinge_flat", "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_hinge_flat", "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.flatten_binary_logits", "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.flatten_binary_logits"], ["", "def", "lovasz_hinge", "(", "logits", ",", "\n", "labels", ",", "\n", "classes", "=", "'present'", ",", "\n", "per_image", "=", "False", ",", "\n", "class_weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "ignore_index", "=", "255", ")", ":", "\n", "    ", "\"\"\"Binary Lovasz hinge loss.\n\n    Args:\n        logits (torch.Tensor): [B, H, W], logits at each pixel\n            (between -infty and +infty).\n        labels (torch.Tensor): [B, H, W], binary ground truth masks (0 or 1).\n        classes (str | list[int], optional): Placeholder, to be consistent with\n            other loss. Default: None.\n        per_image (bool, optional): If per_image is True, compute the loss per\n            image instead of per batch. Default: False.\n        class_weight (list[float], optional): Placeholder, to be consistent\n            with other loss. Default: None.\n        reduction (str, optional): The method used to reduce the loss. Options\n            are \"none\", \"mean\" and \"sum\". This parameter only works when\n            per_image is True. Default: 'mean'.\n        avg_factor (int, optional): Average factor that is used to average\n            the loss. This parameter only works when per_image is True.\n            Default: None.\n        ignore_index (int | None): The label index to be ignored. Default: 255.\n\n    Returns:\n        torch.Tensor: The calculated loss.\n    \"\"\"", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "[", "\n", "lovasz_hinge_flat", "(", "*", "flatten_binary_logits", "(", "\n", "logit", ".", "unsqueeze", "(", "0", ")", ",", "label", ".", "unsqueeze", "(", "0", ")", ",", "ignore_index", ")", ")", "\n", "for", "logit", ",", "label", "in", "zip", "(", "logits", ",", "labels", ")", "\n", "]", "\n", "loss", "=", "weight_reduce_loss", "(", "\n", "torch", ".", "stack", "(", "loss", ")", ",", "None", ",", "reduction", ",", "avg_factor", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_hinge_flat", "(", "\n", "*", "flatten_binary_logits", "(", "logits", ",", "labels", ",", "ignore_index", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_softmax_flat": [[128, 169], ["probs.size", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "probs.numel", "list", "torch.sort", "torch.sort", "torch.sort", "torch.dot", "torch.dot", "torch.dot", "losses.append", "range", "lovasz_loss.lovasz_grad", "torch.stack", "torch.stack", "torch.stack", "fg.sum", "len", "ValueError"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_grad"], ["", "def", "lovasz_softmax_flat", "(", "probs", ",", "labels", ",", "classes", "=", "'present'", ",", "class_weight", "=", "None", ")", ":", "\n", "    ", "\"\"\"Multi-class Lovasz-Softmax loss.\n\n    Args:\n        probs (torch.Tensor): [P, C], class probabilities at each prediction\n            (between 0 and 1).\n        labels (torch.Tensor): [P], ground truth labels (between 0 and C - 1).\n        classes (str | list[int], optional): Classes choosed to calculate loss.\n            'all' for all classes, 'present' for classes present in labels, or\n            a list of classes to average. Default: 'present'.\n        class_weight (list[float], optional): The weight for each class.\n            Default: None.\n\n    Returns:\n        torch.Tensor: The calculated loss.\n    \"\"\"", "\n", "if", "probs", ".", "numel", "(", ")", "==", "0", ":", "\n", "# only void pixels, the gradients should be 0", "\n", "        ", "return", "probs", "*", "0.", "\n", "", "C", "=", "probs", ".", "size", "(", "1", ")", "\n", "losses", "=", "[", "]", "\n", "class_to_sum", "=", "list", "(", "range", "(", "C", ")", ")", "if", "classes", "in", "[", "'all'", ",", "'present'", "]", "else", "classes", "\n", "for", "c", "in", "class_to_sum", ":", "\n", "        ", "fg", "=", "(", "labels", "==", "c", ")", ".", "float", "(", ")", "# foreground for class c", "\n", "if", "(", "classes", "==", "'present'", "and", "fg", ".", "sum", "(", ")", "==", "0", ")", ":", "\n", "            ", "continue", "\n", "", "if", "C", "==", "1", ":", "\n", "            ", "if", "len", "(", "classes", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "'Sigmoid output possible only with 1 class'", ")", "\n", "", "class_pred", "=", "probs", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "class_pred", "=", "probs", "[", ":", ",", "c", "]", "\n", "", "errors", "=", "(", "fg", "-", "class_pred", ")", ".", "abs", "(", ")", "\n", "errors_sorted", ",", "perm", "=", "torch", ".", "sort", "(", "errors", ",", "0", ",", "descending", "=", "True", ")", "\n", "perm", "=", "perm", ".", "data", "\n", "fg_sorted", "=", "fg", "[", "perm", "]", "\n", "loss", "=", "torch", ".", "dot", "(", "errors_sorted", ",", "lovasz_grad", "(", "fg_sorted", ")", ")", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "            ", "loss", "*=", "class_weight", "[", "c", "]", "\n", "", "losses", ".", "append", "(", "loss", ")", "\n", "", "return", "torch", ".", "stack", "(", "losses", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_softmax": [[171, 222], ["utils.weight_reduce_loss", "lovasz_loss.lovasz_softmax_flat", "lovasz_loss.lovasz_softmax_flat", "torch.stack", "torch.stack", "torch.stack", "zip", "lovasz_loss.flatten_probs", "lovasz_loss.flatten_probs", "prob.unsqueeze", "label.unsqueeze"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_softmax_flat", "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.lovasz_softmax_flat", "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.flatten_probs", "home.repos.pwc.inspect_result.nvlabs_fan.losses.lovasz_loss.flatten_probs"], ["", "def", "lovasz_softmax", "(", "probs", ",", "\n", "labels", ",", "\n", "classes", "=", "'present'", ",", "\n", "per_image", "=", "False", ",", "\n", "class_weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "ignore_index", "=", "255", ")", ":", "\n", "    ", "\"\"\"Multi-class Lovasz-Softmax loss.\n\n    Args:\n        probs (torch.Tensor): [B, C, H, W], class probabilities at each\n            prediction (between 0 and 1).\n        labels (torch.Tensor): [B, H, W], ground truth labels (between 0 and\n            C - 1).\n        classes (str | list[int], optional): Classes choosed to calculate loss.\n            'all' for all classes, 'present' for classes present in labels, or\n            a list of classes to average. Default: 'present'.\n        per_image (bool, optional): If per_image is True, compute the loss per\n            image instead of per batch. Default: False.\n        class_weight (list[float], optional): The weight for each class.\n            Default: None.\n        reduction (str, optional): The method used to reduce the loss. Options\n            are \"none\", \"mean\" and \"sum\". This parameter only works when\n            per_image is True. Default: 'mean'.\n        avg_factor (int, optional): Average factor that is used to average\n            the loss. This parameter only works when per_image is True.\n            Default: None.\n        ignore_index (int | None): The label index to be ignored. Default: 255.\n\n    Returns:\n        torch.Tensor: The calculated loss.\n    \"\"\"", "\n", "\n", "if", "per_image", ":", "\n", "        ", "loss", "=", "[", "\n", "lovasz_softmax_flat", "(", "\n", "*", "flatten_probs", "(", "\n", "prob", ".", "unsqueeze", "(", "0", ")", ",", "label", ".", "unsqueeze", "(", "0", ")", ",", "ignore_index", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "class_weight", "=", "class_weight", ")", "\n", "for", "prob", ",", "label", "in", "zip", "(", "probs", ",", "labels", ")", "\n", "]", "\n", "loss", "=", "weight_reduce_loss", "(", "\n", "torch", ".", "stack", "(", "loss", ")", ",", "None", ",", "reduction", ",", "avg_factor", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "lovasz_softmax_flat", "(", "\n", "*", "flatten_probs", "(", "probs", ",", "labels", ",", "ignore_index", ")", ",", "\n", "classes", "=", "classes", ",", "\n", "class_weight", "=", "class_weight", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.accuracy.Accuracy.__init__": [[55, 67], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "topk", "=", "(", "1", ",", ")", ",", "thresh", "=", "None", ")", ":", "\n", "        ", "\"\"\"Module to calculate the accuracy.\n\n        Args:\n            topk (tuple, optional): The criterion used to calculate the\n                accuracy. Defaults to (1,).\n            thresh (float, optional): If not None, predictions with scores\n                under this threshold are considered incorrect. Default to None.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "topk", "=", "topk", "\n", "self", ".", "thresh", "=", "thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.accuracy.Accuracy.forward": [[68, 79], ["accuracy.accuracy"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.accuracy.accuracy"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "\"\"\"Forward function to calculate accuracy.\n\n        Args:\n            pred (torch.Tensor): Prediction of models.\n            target (torch.Tensor): Target for each prediction.\n\n        Returns:\n            tuple[float]: The accuracies under different topk criterions.\n        \"\"\"", "\n", "return", "accuracy", "(", "pred", ",", "target", ",", "self", ".", "topk", ",", "self", ".", "thresh", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.accuracy.accuracy": [[4, 50], ["isinstance", "isinstance", "max", "pred.topk", "pred_label.transpose.transpose", "pred_label.transpose.eq", "pred.size", "pred.size", "target.size", "pred.size", "target.unsqueeze().expand_as", "correct[].view().float().sum", "res.append", "pred.new_tensor", "pred.size", "correct[].view().float().sum.mul_", "range", "target.unsqueeze", "correct[].view().float", "len", "target.numel", "correct[].view"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["def", "accuracy", "(", "pred", ",", "target", ",", "topk", "=", "1", ",", "thresh", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate accuracy according to the prediction and target.\n\n    Args:\n        pred (torch.Tensor): The model prediction, shape (N, num_class, ...)\n        target (torch.Tensor): The target of each prediction, shape (N, , ...)\n        topk (int | tuple[int], optional): If the predictions in ``topk``\n            matches the target, the predictions will be regarded as\n            correct ones. Defaults to 1.\n        thresh (float, optional): If not None, predictions with scores under\n            this threshold are considered incorrect. Default to None.\n\n    Returns:\n        float | tuple[float]: If the input ``topk`` is a single integer,\n            the function will return a single float as accuracy. If\n            ``topk`` is a tuple containing multiple integers, the\n            function will return a tuple containing accuracies of\n            each ``topk`` number.\n    \"\"\"", "\n", "assert", "isinstance", "(", "topk", ",", "(", "int", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "topk", ",", "int", ")", ":", "\n", "        ", "topk", "=", "(", "topk", ",", ")", "\n", "return_single", "=", "True", "\n", "", "else", ":", "\n", "        ", "return_single", "=", "False", "\n", "\n", "", "maxk", "=", "max", "(", "topk", ")", "\n", "if", "pred", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "accu", "=", "[", "pred", ".", "new_tensor", "(", "0.", ")", "for", "i", "in", "range", "(", "len", "(", "topk", ")", ")", "]", "\n", "return", "accu", "[", "0", "]", "if", "return_single", "else", "accu", "\n", "", "assert", "pred", ".", "ndim", "==", "target", ".", "ndim", "+", "1", "\n", "assert", "pred", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", "\n", "assert", "maxk", "<=", "pred", ".", "size", "(", "1", ")", ",", "f'maxk {maxk} exceeds pred dimension {pred.size(1)}'", "\n", "pred_value", ",", "pred_label", "=", "pred", ".", "topk", "(", "maxk", ",", "dim", "=", "1", ")", "\n", "# transpose to shape (maxk, N, ...)", "\n", "pred_label", "=", "pred_label", ".", "transpose", "(", "0", ",", "1", ")", "\n", "correct", "=", "pred_label", ".", "eq", "(", "target", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "pred_label", ")", ")", "\n", "if", "thresh", "is", "not", "None", ":", "\n", "# Only prediction values larger than thresh are counted as correct", "\n", "        ", "correct", "=", "correct", "&", "(", "pred_value", ">", "thresh", ")", ".", "t", "(", ")", "\n", "", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "target", ".", "numel", "(", ")", ")", ")", "\n", "", "return", "res", "[", "0", "]", "if", "return_single", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.reduce_loss": [[6, 24], ["torch._Reduction.get_enum", "loss.mean", "loss.sum"], "function", ["None"], ["def", "reduce_loss", "(", "loss", ",", "reduction", ")", ":", "\n", "    ", "\"\"\"Reduce loss as specified.\n\n    Args:\n        loss (Tensor): Elementwise loss tensor.\n        reduction (str): Options are \"none\", \"mean\" and \"sum\".\n\n    Return:\n        Tensor: Reduced loss tensor.\n    \"\"\"", "\n", "reduction_enum", "=", "F", ".", "_Reduction", ".", "get_enum", "(", "reduction", ")", "\n", "# none: 0, elementwise_mean:1, sum: 2", "\n", "if", "reduction_enum", "==", "0", ":", "\n", "        ", "return", "loss", "\n", "", "elif", "reduction_enum", "==", "1", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction_enum", "==", "2", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.weight_reduce_loss": [[26, 56], ["utils.reduce_loss", "weight.dim", "reduce_loss.dim", "weight.dim", "reduce_loss.sum", "ValueError", "weight.size", "weight.size", "reduce_loss.size"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.reduce_loss"], ["", "", "def", "weight_reduce_loss", "(", "loss", ",", "weight", "=", "None", ",", "reduction", "=", "'mean'", ",", "avg_factor", "=", "None", ")", ":", "\n", "    ", "\"\"\"Apply element-wise weight and reduce loss.\n\n    Args:\n        loss (Tensor): Element-wise loss.\n        weight (Tensor): Element-wise weights.\n        reduction (str): Same as built-in losses of PyTorch.\n        avg_factor (float): Avarage factor when computing the mean of losses.\n\n    Returns:\n        Tensor: Processed loss values.\n    \"\"\"", "\n", "# if weight is specified, apply element-wise weight", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "assert", "weight", ".", "dim", "(", ")", "==", "loss", ".", "dim", "(", ")", "\n", "if", "weight", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "assert", "weight", ".", "size", "(", "1", ")", "==", "1", "or", "weight", ".", "size", "(", "1", ")", "==", "loss", ".", "size", "(", "1", ")", "\n", "", "loss", "=", "loss", "*", "weight", "\n", "\n", "# if avg_factor is not specified, just reduce the loss", "\n", "", "if", "avg_factor", "is", "None", ":", "\n", "        ", "loss", "=", "reduce_loss", "(", "loss", ",", "reduction", ")", "\n", "", "else", ":", "\n", "# if reduction is mean, then average the loss by avg_factor", "\n", "        ", "if", "reduction", "==", "'mean'", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "/", "avg_factor", "\n", "# if reduction is 'none', then do nothing, otherwise raise an error", "\n", "", "elif", "reduction", "!=", "'none'", ":", "\n", "            ", "raise", "ValueError", "(", "'avg_factor can not be used with reduction=\"sum\"'", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.weighted_loss": [[58, 102], ["functools.wraps", "loss_func", "utils.weight_reduce_loss"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.weight_reduce_loss"], ["", "def", "weighted_loss", "(", "loss_func", ")", ":", "\n", "    ", "\"\"\"Create a weighted version of a given loss function.\n\n    To use this decorator, the loss function must have the signature like\n    `loss_func(pred, target, **kwargs)`. The function only needs to compute\n    element-wise loss without any reduction. This decorator will add weight\n    and reduction arguments to the function. The decorated function will have\n    the signature like `loss_func(pred, target, weight=None, reduction='mean',\n    avg_factor=None, **kwargs)`.\n\n    :Example:\n\n    >>> import torch\n    >>> @weighted_loss\n    >>> def l1_loss(pred, target):\n    >>>     return (pred - target).abs()\n\n    >>> pred = torch.Tensor([0, 2, 3])\n    >>> target = torch.Tensor([1, 1, 1])\n    >>> weight = torch.Tensor([1, 0, 1])\n\n    >>> l1_loss(pred, target)\n    tensor(1.3333)\n    >>> l1_loss(pred, target, weight)\n    tensor(1.)\n    >>> l1_loss(pred, target, reduction='none')\n    tensor([1., 1., 2.])\n    >>> l1_loss(pred, target, weight, avg_factor=2)\n    tensor(1.5000)\n    \"\"\"", "\n", "\n", "@", "functools", ".", "wraps", "(", "loss_func", ")", "\n", "def", "wrapper", "(", "pred", ",", "\n", "target", ",", "\n", "weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "# get element-wise loss", "\n", "        ", "loss", "=", "loss_func", "(", "pred", ",", "target", ",", "**", "kwargs", ")", "\n", "loss", "=", "weight_reduce_loss", "(", "loss", ",", "weight", ",", "reduction", ",", "avg_factor", ")", "\n", "return", "loss", "\n", "\n", "", "return", "wrapper", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.__init__": [[154, 174], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "use_mask", "=", "False", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "class_weight", "=", "None", ",", "\n", "loss_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "use_sigmoid", "is", "False", ")", "or", "(", "use_mask", "is", "False", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "self", ".", "use_mask", "=", "use_mask", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "binary_cross_entropy", "\n", "", "elif", "self", ".", "use_mask", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "mask_cross_entropy", "\n", "", "else", ":", "\n", "            ", "self", ".", "cls_criterion", "=", "cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.CrossEntropyLoss.forward": [[175, 199], ["cls_score.new_tensor", "cross_entropy_loss.CrossEntropyLoss.cls_criterion"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "avg_factor", "=", "None", ",", "\n", "reduction_override", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Forward function.\"\"\"", "\n", "assert", "reduction_override", "in", "(", "None", ",", "'none'", ",", "'mean'", ",", "'sum'", ")", "\n", "reduction", "=", "(", "\n", "reduction_override", "if", "reduction_override", "else", "self", ".", "reduction", ")", "\n", "if", "self", ".", "class_weight", "is", "not", "None", ":", "\n", "            ", "class_weight", "=", "cls_score", ".", "new_tensor", "(", "self", ".", "class_weight", ")", "\n", "", "else", ":", "\n", "            ", "class_weight", "=", "None", "\n", "", "loss_cls", "=", "self", ".", "loss_weight", "*", "self", ".", "cls_criterion", "(", "\n", "cls_score", ",", "\n", "label", ",", "\n", "weight", ",", "\n", "class_weight", "=", "class_weight", ",", "\n", "reduction", "=", "reduction", ",", "\n", "avg_factor", "=", "avg_factor", ",", "\n", "**", "kwargs", ")", "\n", "return", "loss_cls", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.cross_entropy": [[9, 33], ["torch.cross_entropy", "utils.weight_reduce_loss", "weight.float.float"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.cross_entropy", "home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.weight_reduce_loss"], ["def", "cross_entropy", "(", "pred", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "class_weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "ignore_index", "=", "-", "100", ")", ":", "\n", "    ", "\"\"\"The wrapper function for :func:`F.cross_entropy`\"\"\"", "\n", "# class_weight is a manual rescaling weight given to each class.", "\n", "# If given, has to be a Tensor of size C element-wise losses", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "\n", "pred", ",", "\n", "label", ",", "\n", "weight", "=", "class_weight", ",", "\n", "reduction", "=", "'none'", ",", "\n", "ignore_index", "=", "ignore_index", ")", "\n", "\n", "# apply weights and do the reduction", "\n", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "float", "(", ")", "\n", "", "loss", "=", "weight_reduce_loss", "(", "\n", "loss", ",", "weight", "=", "weight", ",", "reduction", "=", "reduction", ",", "avg_factor", "=", "avg_factor", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss._expand_onehot_labels": [[35, 55], ["labels.new_zeros", "torch.nonzero", "torch.nonzero", "torch.nonzero", "valid_mask.unsqueeze().expand().float.unsqueeze().expand().float", "inds[].numel", "label_weights.unsqueeze().expand", "labels.dim", "valid_mask.unsqueeze().expand().float.unsqueeze().expand", "label_weights.unsqueeze", "valid_mask.unsqueeze().expand().float.unsqueeze"], "function", ["None"], ["", "def", "_expand_onehot_labels", "(", "labels", ",", "label_weights", ",", "target_shape", ",", "ignore_index", ")", ":", "\n", "    ", "\"\"\"Expand onehot labels to match the size of prediction.\"\"\"", "\n", "bin_labels", "=", "labels", ".", "new_zeros", "(", "target_shape", ")", "\n", "valid_mask", "=", "(", "labels", ">=", "0", ")", "&", "(", "labels", "!=", "ignore_index", ")", "\n", "inds", "=", "torch", ".", "nonzero", "(", "valid_mask", ",", "as_tuple", "=", "True", ")", "\n", "\n", "if", "inds", "[", "0", "]", ".", "numel", "(", ")", ">", "0", ":", "\n", "        ", "if", "labels", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "bin_labels", "[", "inds", "[", "0", "]", ",", "labels", "[", "valid_mask", "]", ",", "inds", "[", "1", "]", ",", "inds", "[", "2", "]", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "bin_labels", "[", "inds", "[", "0", "]", ",", "labels", "[", "valid_mask", "]", "]", "=", "1", "\n", "\n", "", "", "valid_mask", "=", "valid_mask", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "target_shape", ")", ".", "float", "(", ")", "\n", "if", "label_weights", "is", "None", ":", "\n", "        ", "bin_label_weights", "=", "valid_mask", "\n", "", "else", ":", "\n", "        ", "bin_label_weights", "=", "label_weights", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "target_shape", ")", "\n", "bin_label_weights", "*=", "valid_mask", "\n", "\n", "", "return", "bin_labels", ",", "bin_label_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.binary_cross_entropy": [[57, 98], ["torch.binary_cross_entropy_with_logits", "utils.weight_reduce_loss", "pred.dim", "label.dim", "cross_entropy_loss._expand_onehot_labels", "weight.float.float", "label.float", "pred.dim", "label.dim", "pred.dim", "label.dim"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.losses.utils.weight_reduce_loss", "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss._expand_onehot_labels"], ["", "def", "binary_cross_entropy", "(", "pred", ",", "\n", "label", ",", "\n", "weight", "=", "None", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "class_weight", "=", "None", ",", "\n", "ignore_index", "=", "255", ")", ":", "\n", "    ", "\"\"\"Calculate the binary CrossEntropy loss.\n\n    Args:\n        pred (torch.Tensor): The prediction with shape (N, 1).\n        label (torch.Tensor): The learning label of the prediction.\n        weight (torch.Tensor, optional): Sample-wise loss weight.\n        reduction (str, optional): The method used to reduce the loss.\n            Options are \"none\", \"mean\" and \"sum\".\n        avg_factor (int, optional): Average factor that is used to average\n            the loss. Defaults to None.\n        class_weight (list[float], optional): The weight for each class.\n        ignore_index (int | None): The label index to be ignored. Default: 255\n\n    Returns:\n        torch.Tensor: The calculated loss\n    \"\"\"", "\n", "if", "pred", ".", "dim", "(", ")", "!=", "label", ".", "dim", "(", ")", ":", "\n", "        ", "assert", "(", "pred", ".", "dim", "(", ")", "==", "2", "and", "label", ".", "dim", "(", ")", "==", "1", ")", "or", "(", "\n", "pred", ".", "dim", "(", ")", "==", "4", "and", "label", ".", "dim", "(", ")", "==", "3", ")", ",", "'Only pred shape [N, C], label shape [N] or pred shape [N, C, '", "'H, W], label shape [N, H, W] are supported'", "\n", "label", ",", "weight", "=", "_expand_onehot_labels", "(", "label", ",", "weight", ",", "pred", ".", "shape", ",", "\n", "ignore_index", ")", "\n", "\n", "# weighted element-wise losses", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "        ", "weight", "=", "weight", ".", "float", "(", ")", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "label", ".", "float", "(", ")", ",", "pos_weight", "=", "class_weight", ",", "reduction", "=", "'none'", ")", "\n", "# do the reduction for the weighted loss", "\n", "loss", "=", "weight_reduce_loss", "(", "\n", "loss", ",", "weight", ",", "reduction", "=", "reduction", ",", "avg_factor", "=", "avg_factor", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.losses.cross_entropy_loss.mask_cross_entropy": [[100, 136], ["torch.arange", "torch.arange", "torch.arange", "pred[].squeeze", "pred.size", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "mask_cross_entropy", "(", "pred", ",", "\n", "target", ",", "\n", "label", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "avg_factor", "=", "None", ",", "\n", "class_weight", "=", "None", ",", "\n", "ignore_index", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate the CrossEntropy loss for masks.\n\n    Args:\n        pred (torch.Tensor): The prediction with shape (N, C), C is the number\n            of classes.\n        target (torch.Tensor): The learning label of the prediction.\n        label (torch.Tensor): ``label`` indicates the class label of the mask'\n            corresponding object. This will be used to select the mask in the\n            of the class which the object belongs to when the mask prediction\n            if not class-agnostic.\n        reduction (str, optional): The method used to reduce the loss.\n            Options are \"none\", \"mean\" and \"sum\".\n        avg_factor (int, optional): Average factor that is used to average\n            the loss. Defaults to None.\n        class_weight (list[float], optional): The weight for each class.\n        ignore_index (None): Placeholder, to be consistent with other loss.\n            Default: None.\n\n    Returns:\n        torch.Tensor: The calculated loss\n    \"\"\"", "\n", "assert", "ignore_index", "is", "None", ",", "'BCE loss does not support ignore_index'", "\n", "# TODO: handle these two reserved arguments", "\n", "assert", "reduction", "==", "'mean'", "and", "avg_factor", "is", "None", "\n", "num_rois", "=", "pred", ".", "size", "(", ")", "[", "0", "]", "\n", "inds", "=", "torch", ".", "arange", "(", "0", ",", "num_rois", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "pred", ".", "device", ")", "\n", "pred_slice", "=", "pred", "[", "inds", ",", "label", "]", ".", "squeeze", "(", "1", ")", "\n", "return", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred_slice", ",", "target", ",", "weight", "=", "class_weight", ",", "reduction", "=", "'mean'", ")", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.seg.builder.build_pixel_sampler": [[6, 9], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "from", "mmcv", ".", "parallel", "import", "collate", "\n", "from", "mmcv", ".", "runner", "import", "get_dist_info", "\n", "from", "mmcv", ".", "utils", "import", "Registry", ",", "build_from_cfg", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.sampler.ohem_pixel_sampler.OHEMPixelSampler.__init__": [[23, 29], ["base_pixel_sampler.BasePixelSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__"], ["def", "__init__", "(", "self", ",", "context", ",", "thresh", "=", "None", ",", "min_kept", "=", "100000", ")", ":", "\n", "        ", "super", "(", "OHEMPixelSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "context", "=", "context", "\n", "assert", "min_kept", ">", "1", "\n", "self", ".", "thresh", "=", "thresh", "\n", "self", ".", "min_kept", "=", "min_kept", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.sampler.ohem_pixel_sampler.OHEMPixelSampler.sample": [[30, 77], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "seg_label.squeeze().long.squeeze().long.squeeze().long", "seg_logit.new_zeros", "seg_label.squeeze().long.squeeze().long.size", "torch.softmax", "torch.softmax", "seg_label.squeeze().long.squeeze().long.clone().unsqueeze", "seg_prob.gather().squeeze.gather().squeeze.gather().squeeze", "seg_prob[].sort", "max", "ohem_pixel_sampler.OHEMPixelSampler.context.loss_decode", "losses[].sort", "seg_label.squeeze().long.squeeze().long.squeeze", "seg_label.squeeze().long.squeeze().long.size", "sort_prob.numel", "seg_label.squeeze().long.squeeze().long.clone", "seg_prob.gather().squeeze.gather().squeeze.gather", "min", "sort_prob.numel"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max"], ["", "def", "sample", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Sample pixels that have high loss or with low prediction confidence.\n\n        Args:\n            seg_logit (torch.Tensor): segmentation logits, shape (N, C, H, W)\n            seg_label (torch.Tensor): segmentation label, shape (N, 1, H, W)\n\n        Returns:\n            torch.Tensor: segmentation weight, shape (N, H, W)\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "assert", "seg_logit", ".", "shape", "[", "2", ":", "]", "==", "seg_label", ".", "shape", "[", "2", ":", "]", "\n", "assert", "seg_label", ".", "shape", "[", "1", "]", "==", "1", "\n", "seg_label", "=", "seg_label", ".", "squeeze", "(", "1", ")", ".", "long", "(", ")", "\n", "batch_kept", "=", "self", ".", "min_kept", "*", "seg_label", ".", "size", "(", "0", ")", "\n", "valid_mask", "=", "seg_label", "!=", "self", ".", "context", ".", "ignore_index", "\n", "seg_weight", "=", "seg_logit", ".", "new_zeros", "(", "size", "=", "seg_label", ".", "size", "(", ")", ")", "\n", "valid_seg_weight", "=", "seg_weight", "[", "valid_mask", "]", "\n", "if", "self", ".", "thresh", "is", "not", "None", ":", "\n", "                ", "seg_prob", "=", "F", ".", "softmax", "(", "seg_logit", ",", "dim", "=", "1", ")", "\n", "\n", "tmp_seg_label", "=", "seg_label", ".", "clone", "(", ")", ".", "unsqueeze", "(", "1", ")", "\n", "tmp_seg_label", "[", "tmp_seg_label", "==", "self", ".", "context", ".", "ignore_index", "]", "=", "0", "\n", "seg_prob", "=", "seg_prob", ".", "gather", "(", "1", ",", "tmp_seg_label", ")", ".", "squeeze", "(", "1", ")", "\n", "sort_prob", ",", "sort_indices", "=", "seg_prob", "[", "valid_mask", "]", ".", "sort", "(", ")", "\n", "\n", "if", "sort_prob", ".", "numel", "(", ")", ">", "0", ":", "\n", "                    ", "min_threshold", "=", "sort_prob", "[", "min", "(", "batch_kept", ",", "\n", "sort_prob", ".", "numel", "(", ")", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "                    ", "min_threshold", "=", "0.0", "\n", "", "threshold", "=", "max", "(", "min_threshold", ",", "self", ".", "thresh", ")", "\n", "valid_seg_weight", "[", "seg_prob", "[", "valid_mask", "]", "<", "threshold", "]", "=", "1.", "\n", "", "else", ":", "\n", "                ", "losses", "=", "self", ".", "context", ".", "loss_decode", "(", "\n", "seg_logit", ",", "\n", "seg_label", ",", "\n", "weight", "=", "None", ",", "\n", "ignore_index", "=", "self", ".", "context", ".", "ignore_index", ",", "\n", "reduction_override", "=", "'none'", ")", "\n", "# faster than topk according to https://github.com/pytorch/pytorch/issues/22812  # noqa", "\n", "_", ",", "sort_indices", "=", "losses", "[", "valid_mask", "]", ".", "sort", "(", "descending", "=", "True", ")", "\n", "valid_seg_weight", "[", "sort_indices", "[", ":", "batch_kept", "]", "]", "=", "1.", "\n", "\n", "", "seg_weight", "[", "valid_mask", "]", "=", "valid_seg_weight", "\n", "\n", "return", "seg_weight", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.sampler.base_pixel_sampler.BasePixelSampler.__init__": [[7, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.sampler.base_pixel_sampler.BasePixelSampler.sample": [[10, 14], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "sample", "(", "self", ",", "seg_logit", ",", "seg_label", ")", ":", "\n", "        ", "\"\"\"Placeholder for sample function.\"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.intersect_and_union": [[5, 60], ["dict", "isinstance", "isinstance", "numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.load", "mmcv.imread", "label_map.items", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "intersect_and_union", "(", "pred_label", ",", "\n", "label", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate intersection and Union.\n\n    Args:\n        pred_label (ndarray): Prediction segmentation map.\n        label (ndarray): Ground truth segmentation map.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        label_map (dict): Mapping old labels to new labels. The parameter will\n            work only when label is str. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. The parameter will\n            work only when label is str. Default: False.\n\n     Returns:\n         ndarray: The intersection of prediction and ground truth histogram\n             on all classes.\n         ndarray: The union of prediction and ground truth histogram on all\n             classes.\n         ndarray: The prediction histogram on all classes.\n         ndarray: The ground truth histogram on all classes.\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "pred_label", ",", "str", ")", ":", "\n", "        ", "pred_label", "=", "np", ".", "load", "(", "pred_label", ")", "\n", "\n", "", "if", "isinstance", "(", "label", ",", "str", ")", ":", "\n", "        ", "label", "=", "mmcv", ".", "imread", "(", "label", ",", "flag", "=", "'unchanged'", ",", "backend", "=", "'pillow'", ")", "\n", "# modify if custom classes", "\n", "", "if", "label_map", "is", "not", "None", ":", "\n", "        ", "for", "old_id", ",", "new_id", "in", "label_map", ".", "items", "(", ")", ":", "\n", "            ", "label", "[", "label", "==", "old_id", "]", "=", "new_id", "\n", "", "", "if", "reduce_zero_label", ":", "\n", "# avoid using underflow conversion", "\n", "        ", "label", "[", "label", "==", "0", "]", "=", "255", "\n", "label", "=", "label", "-", "1", "\n", "label", "[", "label", "==", "254", "]", "=", "255", "\n", "\n", "", "mask", "=", "(", "label", "!=", "ignore_index", ")", "\n", "pred_label", "=", "pred_label", "[", "mask", "]", "\n", "label", "=", "label", "[", "mask", "]", "\n", "\n", "intersect", "=", "pred_label", "[", "pred_label", "==", "label", "]", "\n", "area_intersect", ",", "_", "=", "np", ".", "histogram", "(", "\n", "intersect", ",", "bins", "=", "np", ".", "arange", "(", "num_classes", "+", "1", ")", ")", "\n", "area_pred_label", ",", "_", "=", "np", ".", "histogram", "(", "\n", "pred_label", ",", "bins", "=", "np", ".", "arange", "(", "num_classes", "+", "1", ")", ")", "\n", "area_label", ",", "_", "=", "np", ".", "histogram", "(", "label", ",", "bins", "=", "np", ".", "arange", "(", "num_classes", "+", "1", ")", ")", "\n", "area_union", "=", "area_pred_label", "+", "area_label", "-", "area_intersect", "\n", "\n", "return", "area_intersect", ",", "area_union", ",", "area_pred_label", ",", "area_label", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.total_intersect_and_union": [[62, 103], ["dict", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "len", "metrics.intersect_and_union"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.intersect_and_union"], ["", "def", "total_intersect_and_union", "(", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate Total Intersection and Union.\n\n    Args:\n        results (list[ndarray]): List of prediction segmentation maps.\n        gt_seg_maps (list[ndarray]): list of ground truth segmentation maps.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        label_map (dict): Mapping old labels to new labels. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. Default: False.\n\n     Returns:\n         ndarray: The intersection of prediction and ground truth histogram\n             on all classes.\n         ndarray: The union of prediction and ground truth histogram on all\n             classes.\n         ndarray: The prediction histogram on all classes.\n         ndarray: The ground truth histogram on all classes.\n    \"\"\"", "\n", "\n", "num_imgs", "=", "len", "(", "results", ")", "\n", "assert", "len", "(", "gt_seg_maps", ")", "==", "num_imgs", "\n", "total_area_intersect", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "total_area_union", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "total_area_pred_label", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "total_area_label", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", "in", "range", "(", "num_imgs", ")", ":", "\n", "        ", "area_intersect", ",", "area_union", ",", "area_pred_label", ",", "area_label", "=", "intersect_and_union", "(", "results", "[", "i", "]", ",", "gt_seg_maps", "[", "i", "]", ",", "num_classes", ",", "\n", "ignore_index", ",", "label_map", ",", "reduce_zero_label", ")", "\n", "total_area_intersect", "+=", "area_intersect", "\n", "total_area_union", "+=", "area_union", "\n", "total_area_pred_label", "+=", "area_pred_label", "\n", "total_area_label", "+=", "area_label", "\n", "", "return", "total_area_intersect", ",", "total_area_union", ",", "total_area_pred_label", ",", "total_area_label", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.mean_iou": [[105, 140], ["dict", "metrics.eval_metrics"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.eval_metrics"], ["", "def", "mean_iou", "(", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "nan_to_num", "=", "None", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate Mean Intersection and Union (mIoU)\n\n    Args:\n        results (list[ndarray]): List of prediction segmentation maps.\n        gt_seg_maps (list[ndarray]): list of ground truth segmentation maps.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        nan_to_num (int, optional): If specified, NaN values will be replaced\n            by the numbers defined by the user. Default: None.\n        label_map (dict): Mapping old labels to new labels. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. Default: False.\n\n     Returns:\n         float: Overall accuracy on all images.\n         ndarray: Per category accuracy, shape (num_classes, ).\n         ndarray: Per category IoU, shape (num_classes, ).\n    \"\"\"", "\n", "\n", "all_acc", ",", "acc", ",", "iou", "=", "eval_metrics", "(", "\n", "results", "=", "results", ",", "\n", "gt_seg_maps", "=", "gt_seg_maps", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", "metrics", "=", "[", "'mIoU'", "]", ",", "\n", "nan_to_num", "=", "nan_to_num", ",", "\n", "label_map", "=", "label_map", ",", "\n", "reduce_zero_label", "=", "reduce_zero_label", ")", "\n", "return", "all_acc", ",", "acc", ",", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.mean_dice": [[142, 177], ["dict", "metrics.eval_metrics"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.eval_metrics"], ["", "def", "mean_dice", "(", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "nan_to_num", "=", "None", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate Mean Dice (mDice)\n\n    Args:\n        results (list[ndarray]): List of prediction segmentation maps.\n        gt_seg_maps (list[ndarray]): list of ground truth segmentation maps.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        nan_to_num (int, optional): If specified, NaN values will be replaced\n            by the numbers defined by the user. Default: None.\n        label_map (dict): Mapping old labels to new labels. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. Default: False.\n\n     Returns:\n         float: Overall accuracy on all images.\n         ndarray: Per category accuracy, shape (num_classes, ).\n         ndarray: Per category dice, shape (num_classes, ).\n    \"\"\"", "\n", "\n", "all_acc", ",", "acc", ",", "dice", "=", "eval_metrics", "(", "\n", "results", "=", "results", ",", "\n", "gt_seg_maps", "=", "gt_seg_maps", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "ignore_index", "=", "ignore_index", ",", "\n", "metrics", "=", "[", "'mDice'", "]", ",", "\n", "nan_to_num", "=", "nan_to_num", ",", "\n", "label_map", "=", "label_map", ",", "\n", "reduce_zero_label", "=", "reduce_zero_label", ")", "\n", "return", "all_acc", ",", "acc", ",", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.eval_metrics": [[179, 230], ["dict", "isinstance", "metrics.total_intersect_and_union", "set().issubset", "KeyError", "total_area_intersect.sum", "total_area_label.sum", "set", "ret_metrics.append", "numpy.nan_to_num", "set", "ret_metrics.append"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.evaluation.metrics.total_intersect_and_union"], ["", "def", "eval_metrics", "(", "results", ",", "\n", "gt_seg_maps", ",", "\n", "num_classes", ",", "\n", "ignore_index", ",", "\n", "metrics", "=", "[", "'mIoU'", "]", ",", "\n", "nan_to_num", "=", "None", ",", "\n", "label_map", "=", "dict", "(", ")", ",", "\n", "reduce_zero_label", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate evaluation metrics\n    Args:\n        results (list[ndarray]): List of prediction segmentation maps.\n        gt_seg_maps (list[ndarray]): list of ground truth segmentation maps.\n        num_classes (int): Number of categories.\n        ignore_index (int): Index that will be ignored in evaluation.\n        metrics (list[str] | str): Metrics to be evaluated, 'mIoU' and 'mDice'.\n        nan_to_num (int, optional): If specified, NaN values will be replaced\n            by the numbers defined by the user. Default: None.\n        label_map (dict): Mapping old labels to new labels. Default: dict().\n        reduce_zero_label (bool): Wether ignore zero label. Default: False.\n     Returns:\n         float: Overall accuracy on all images.\n         ndarray: Per category accuracy, shape (num_classes, ).\n         ndarray: Per category evalution metrics, shape (num_classes, ).\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "metrics", ",", "str", ")", ":", "\n", "        ", "metrics", "=", "[", "metrics", "]", "\n", "", "allowed_metrics", "=", "[", "'mIoU'", ",", "'mDice'", "]", "\n", "if", "not", "set", "(", "metrics", ")", ".", "issubset", "(", "set", "(", "allowed_metrics", ")", ")", ":", "\n", "        ", "raise", "KeyError", "(", "'metrics {} is not supported'", ".", "format", "(", "metrics", ")", ")", "\n", "", "total_area_intersect", ",", "total_area_union", ",", "total_area_pred_label", ",", "total_area_label", "=", "total_intersect_and_union", "(", "results", ",", "gt_seg_maps", ",", "\n", "num_classes", ",", "ignore_index", ",", "\n", "label_map", ",", "\n", "reduce_zero_label", ")", "\n", "all_acc", "=", "total_area_intersect", ".", "sum", "(", ")", "/", "total_area_label", ".", "sum", "(", ")", "\n", "acc", "=", "total_area_intersect", "/", "total_area_label", "\n", "ret_metrics", "=", "[", "all_acc", ",", "acc", "]", "\n", "for", "metric", "in", "metrics", ":", "\n", "        ", "if", "metric", "==", "'mIoU'", ":", "\n", "            ", "iou", "=", "total_area_intersect", "/", "total_area_union", "\n", "ret_metrics", ".", "append", "(", "iou", ")", "\n", "", "elif", "metric", "==", "'mDice'", ":", "\n", "            ", "dice", "=", "2", "*", "total_area_intersect", "/", "(", "\n", "total_area_pred_label", "+", "total_area_label", ")", "\n", "ret_metrics", ".", "append", "(", "dice", ")", "\n", "", "", "if", "nan_to_num", "is", "not", "None", ":", "\n", "        ", "ret_metrics", "=", "[", "\n", "np", ".", "nan_to_num", "(", "metric", ",", "nan", "=", "nan_to_num", ")", "for", "metric", "in", "ret_metrics", "\n", "]", "\n", "", "return", "ret_metrics", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.class_names.cityscapes_classes": [[4, 11], ["None"], "function", ["None"], ["def", "cityscapes_classes", "(", ")", ":", "\n", "    ", "\"\"\"Cityscapes class names for external use.\"\"\"", "\n", "return", "[", "\n", "'road'", ",", "'sidewalk'", ",", "'building'", ",", "'wall'", ",", "'fence'", ",", "'pole'", ",", "\n", "'traffic light'", ",", "'traffic sign'", ",", "'vegetation'", ",", "'terrain'", ",", "'sky'", ",", "\n", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "\n", "'bicycle'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.class_names.ade_classes": [[14, 41], ["None"], "function", ["None"], ["", "def", "ade_classes", "(", ")", ":", "\n", "    ", "\"\"\"ADE20K class names for external use.\"\"\"", "\n", "return", "[", "\n", "'wall'", ",", "'building'", ",", "'sky'", ",", "'floor'", ",", "'tree'", ",", "'ceiling'", ",", "'road'", ",", "'bed '", ",", "\n", "'windowpane'", ",", "'grass'", ",", "'cabinet'", ",", "'sidewalk'", ",", "'person'", ",", "'earth'", ",", "\n", "'door'", ",", "'table'", ",", "'mountain'", ",", "'plant'", ",", "'curtain'", ",", "'chair'", ",", "'car'", ",", "\n", "'water'", ",", "'painting'", ",", "'sofa'", ",", "'shelf'", ",", "'house'", ",", "'sea'", ",", "'mirror'", ",", "'rug'", ",", "\n", "'field'", ",", "'armchair'", ",", "'seat'", ",", "'fence'", ",", "'desk'", ",", "'rock'", ",", "'wardrobe'", ",", "\n", "'lamp'", ",", "'bathtub'", ",", "'railing'", ",", "'cushion'", ",", "'base'", ",", "'box'", ",", "'column'", ",", "\n", "'signboard'", ",", "'chest of drawers'", ",", "'counter'", ",", "'sand'", ",", "'sink'", ",", "\n", "'skyscraper'", ",", "'fireplace'", ",", "'refrigerator'", ",", "'grandstand'", ",", "'path'", ",", "\n", "'stairs'", ",", "'runway'", ",", "'case'", ",", "'pool table'", ",", "'pillow'", ",", "'screen door'", ",", "\n", "'stairway'", ",", "'river'", ",", "'bridge'", ",", "'bookcase'", ",", "'blind'", ",", "'coffee table'", ",", "\n", "'toilet'", ",", "'flower'", ",", "'book'", ",", "'hill'", ",", "'bench'", ",", "'countertop'", ",", "'stove'", ",", "\n", "'palm'", ",", "'kitchen island'", ",", "'computer'", ",", "'swivel chair'", ",", "'boat'", ",", "'bar'", ",", "\n", "'arcade machine'", ",", "'hovel'", ",", "'bus'", ",", "'towel'", ",", "'light'", ",", "'truck'", ",", "'tower'", ",", "\n", "'chandelier'", ",", "'awning'", ",", "'streetlight'", ",", "'booth'", ",", "'television receiver'", ",", "\n", "'airplane'", ",", "'dirt track'", ",", "'apparel'", ",", "'pole'", ",", "'land'", ",", "'bannister'", ",", "\n", "'escalator'", ",", "'ottoman'", ",", "'bottle'", ",", "'buffet'", ",", "'poster'", ",", "'stage'", ",", "'van'", ",", "\n", "'ship'", ",", "'fountain'", ",", "'conveyer belt'", ",", "'canopy'", ",", "'washer'", ",", "'plaything'", ",", "\n", "'swimming pool'", ",", "'stool'", ",", "'barrel'", ",", "'basket'", ",", "'waterfall'", ",", "'tent'", ",", "\n", "'bag'", ",", "'minibike'", ",", "'cradle'", ",", "'oven'", ",", "'ball'", ",", "'food'", ",", "'step'", ",", "'tank'", ",", "\n", "'trade name'", ",", "'microwave'", ",", "'pot'", ",", "'animal'", ",", "'bicycle'", ",", "'lake'", ",", "\n", "'dishwasher'", ",", "'screen'", ",", "'blanket'", ",", "'sculpture'", ",", "'hood'", ",", "'sconce'", ",", "\n", "'vase'", ",", "'traffic light'", ",", "'tray'", ",", "'ashcan'", ",", "'fan'", ",", "'pier'", ",", "'crt screen'", ",", "\n", "'plate'", ",", "'monitor'", ",", "'bulletin board'", ",", "'shower'", ",", "'radiator'", ",", "'glass'", ",", "\n", "'clock'", ",", "'flag'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.class_names.voc_classes": [[44, 51], ["None"], "function", ["None"], ["", "def", "voc_classes", "(", ")", ":", "\n", "    ", "\"\"\"Pascal VOC class names for external use.\"\"\"", "\n", "return", "[", "\n", "'background'", ",", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "\n", "'car'", ",", "'cat'", ",", "'chair'", ",", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "\n", "'motorbike'", ",", "'person'", ",", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "\n", "'tvmonitor'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.class_names.cityscapes_palette": [[54, 61], ["None"], "function", ["None"], ["", "def", "cityscapes_palette", "(", ")", ":", "\n", "    ", "\"\"\"Cityscapes palette for external use.\"\"\"", "\n", "return", "[", "[", "128", ",", "64", ",", "128", "]", ",", "[", "244", ",", "35", ",", "232", "]", ",", "[", "70", ",", "70", ",", "70", "]", ",", "[", "102", ",", "102", ",", "156", "]", ",", "\n", "[", "190", ",", "153", ",", "153", "]", ",", "[", "153", ",", "153", ",", "153", "]", ",", "[", "250", ",", "170", ",", "30", "]", ",", "[", "220", ",", "220", ",", "0", "]", ",", "\n", "[", "107", ",", "142", ",", "35", "]", ",", "[", "152", ",", "251", ",", "152", "]", ",", "[", "70", ",", "130", ",", "180", "]", ",", "[", "220", ",", "20", ",", "60", "]", ",", "\n", "[", "255", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "142", "]", ",", "[", "0", ",", "0", ",", "70", "]", ",", "[", "0", ",", "60", ",", "100", "]", ",", "[", "0", ",", "80", ",", "100", "]", ",", "\n", "[", "0", ",", "0", ",", "230", "]", ",", "[", "119", ",", "11", ",", "32", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.class_names.ade_palette": [[63, 103], ["None"], "function", ["None"], ["", "def", "ade_palette", "(", ")", ":", "\n", "    ", "\"\"\"ADE20K palette for external use.\"\"\"", "\n", "return", "[", "[", "120", ",", "120", ",", "120", "]", ",", "[", "180", ",", "120", ",", "120", "]", ",", "[", "6", ",", "230", ",", "230", "]", ",", "[", "80", ",", "50", ",", "50", "]", ",", "\n", "[", "4", ",", "200", ",", "3", "]", ",", "[", "120", ",", "120", ",", "80", "]", ",", "[", "140", ",", "140", ",", "140", "]", ",", "[", "204", ",", "5", ",", "255", "]", ",", "\n", "[", "230", ",", "230", ",", "230", "]", ",", "[", "4", ",", "250", ",", "7", "]", ",", "[", "224", ",", "5", ",", "255", "]", ",", "[", "235", ",", "255", ",", "7", "]", ",", "\n", "[", "150", ",", "5", ",", "61", "]", ",", "[", "120", ",", "120", ",", "70", "]", ",", "[", "8", ",", "255", ",", "51", "]", ",", "[", "255", ",", "6", ",", "82", "]", ",", "\n", "[", "143", ",", "255", ",", "140", "]", ",", "[", "204", ",", "255", ",", "4", "]", ",", "[", "255", ",", "51", ",", "7", "]", ",", "[", "204", ",", "70", ",", "3", "]", ",", "\n", "[", "0", ",", "102", ",", "200", "]", ",", "[", "61", ",", "230", ",", "250", "]", ",", "[", "255", ",", "6", ",", "51", "]", ",", "[", "11", ",", "102", ",", "255", "]", ",", "\n", "[", "255", ",", "7", ",", "71", "]", ",", "[", "255", ",", "9", ",", "224", "]", ",", "[", "9", ",", "7", ",", "230", "]", ",", "[", "220", ",", "220", ",", "220", "]", ",", "\n", "[", "255", ",", "9", ",", "92", "]", ",", "[", "112", ",", "9", ",", "255", "]", ",", "[", "8", ",", "255", ",", "214", "]", ",", "[", "7", ",", "255", ",", "224", "]", ",", "\n", "[", "255", ",", "184", ",", "6", "]", ",", "[", "10", ",", "255", ",", "71", "]", ",", "[", "255", ",", "41", ",", "10", "]", ",", "[", "7", ",", "255", ",", "255", "]", ",", "\n", "[", "224", ",", "255", ",", "8", "]", ",", "[", "102", ",", "8", ",", "255", "]", ",", "[", "255", ",", "61", ",", "6", "]", ",", "[", "255", ",", "194", ",", "7", "]", ",", "\n", "[", "255", ",", "122", ",", "8", "]", ",", "[", "0", ",", "255", ",", "20", "]", ",", "[", "255", ",", "8", ",", "41", "]", ",", "[", "255", ",", "5", ",", "153", "]", ",", "\n", "[", "6", ",", "51", ",", "255", "]", ",", "[", "235", ",", "12", ",", "255", "]", ",", "[", "160", ",", "150", ",", "20", "]", ",", "[", "0", ",", "163", ",", "255", "]", ",", "\n", "[", "140", ",", "140", ",", "140", "]", ",", "[", "250", ",", "10", ",", "15", "]", ",", "[", "20", ",", "255", ",", "0", "]", ",", "[", "31", ",", "255", ",", "0", "]", ",", "\n", "[", "255", ",", "31", ",", "0", "]", ",", "[", "255", ",", "224", ",", "0", "]", ",", "[", "153", ",", "255", ",", "0", "]", ",", "[", "0", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "71", ",", "0", "]", ",", "[", "0", ",", "235", ",", "255", "]", ",", "[", "0", ",", "173", ",", "255", "]", ",", "[", "31", ",", "0", ",", "255", "]", ",", "\n", "[", "11", ",", "200", ",", "200", "]", ",", "[", "255", ",", "82", ",", "0", "]", ",", "[", "0", ",", "255", ",", "245", "]", ",", "[", "0", ",", "61", ",", "255", "]", ",", "\n", "[", "0", ",", "255", ",", "112", "]", ",", "[", "0", ",", "255", ",", "133", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "[", "255", ",", "163", ",", "0", "]", ",", "\n", "[", "255", ",", "102", ",", "0", "]", ",", "[", "194", ",", "255", ",", "0", "]", ",", "[", "0", ",", "143", ",", "255", "]", ",", "[", "51", ",", "255", ",", "0", "]", ",", "\n", "[", "0", ",", "82", ",", "255", "]", ",", "[", "0", ",", "255", ",", "41", "]", ",", "[", "0", ",", "255", ",", "173", "]", ",", "[", "10", ",", "0", ",", "255", "]", ",", "\n", "[", "173", ",", "255", ",", "0", "]", ",", "[", "0", ",", "255", ",", "153", "]", ",", "[", "255", ",", "92", ",", "0", "]", ",", "[", "255", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "0", ",", "245", "]", ",", "[", "255", ",", "0", ",", "102", "]", ",", "[", "255", ",", "173", ",", "0", "]", ",", "[", "255", ",", "0", ",", "20", "]", ",", "\n", "[", "255", ",", "184", ",", "184", "]", ",", "[", "0", ",", "31", ",", "255", "]", ",", "[", "0", ",", "255", ",", "61", "]", ",", "[", "0", ",", "71", ",", "255", "]", ",", "\n", "[", "255", ",", "0", ",", "204", "]", ",", "[", "0", ",", "255", ",", "194", "]", ",", "[", "0", ",", "255", ",", "82", "]", ",", "[", "0", ",", "10", ",", "255", "]", ",", "\n", "[", "0", ",", "112", ",", "255", "]", ",", "[", "51", ",", "0", ",", "255", "]", ",", "[", "0", ",", "194", ",", "255", "]", ",", "[", "0", ",", "122", ",", "255", "]", ",", "\n", "[", "0", ",", "255", ",", "163", "]", ",", "[", "255", ",", "153", ",", "0", "]", ",", "[", "0", ",", "255", ",", "10", "]", ",", "[", "255", ",", "112", ",", "0", "]", ",", "\n", "[", "143", ",", "255", ",", "0", "]", ",", "[", "82", ",", "0", ",", "255", "]", ",", "[", "163", ",", "255", ",", "0", "]", ",", "[", "255", ",", "235", ",", "0", "]", ",", "\n", "[", "8", ",", "184", ",", "170", "]", ",", "[", "133", ",", "0", ",", "255", "]", ",", "[", "0", ",", "255", ",", "92", "]", ",", "[", "184", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "0", ",", "31", "]", ",", "[", "0", ",", "184", ",", "255", "]", ",", "[", "0", ",", "214", ",", "255", "]", ",", "[", "255", ",", "0", ",", "112", "]", ",", "\n", "[", "92", ",", "255", ",", "0", "]", ",", "[", "0", ",", "224", ",", "255", "]", ",", "[", "112", ",", "224", ",", "255", "]", ",", "[", "70", ",", "184", ",", "160", "]", ",", "\n", "[", "163", ",", "0", ",", "255", "]", ",", "[", "153", ",", "0", ",", "255", "]", ",", "[", "71", ",", "255", ",", "0", "]", ",", "[", "255", ",", "0", ",", "163", "]", ",", "\n", "[", "255", ",", "204", ",", "0", "]", ",", "[", "255", ",", "0", ",", "143", "]", ",", "[", "0", ",", "255", ",", "235", "]", ",", "[", "133", ",", "255", ",", "0", "]", ",", "\n", "[", "255", ",", "0", ",", "235", "]", ",", "[", "245", ",", "0", ",", "255", "]", ",", "[", "255", ",", "0", ",", "122", "]", ",", "[", "255", ",", "245", ",", "0", "]", ",", "\n", "[", "10", ",", "190", ",", "212", "]", ",", "[", "214", ",", "255", ",", "0", "]", ",", "[", "0", ",", "204", ",", "255", "]", ",", "[", "20", ",", "0", ",", "255", "]", ",", "\n", "[", "255", ",", "255", ",", "0", "]", ",", "[", "0", ",", "153", ",", "255", "]", ",", "[", "0", ",", "41", ",", "255", "]", ",", "[", "0", ",", "255", ",", "204", "]", ",", "\n", "[", "41", ",", "0", ",", "255", "]", ",", "[", "41", ",", "255", ",", "0", "]", ",", "[", "173", ",", "0", ",", "255", "]", ",", "[", "0", ",", "245", ",", "255", "]", ",", "\n", "[", "71", ",", "0", ",", "255", "]", ",", "[", "122", ",", "0", ",", "255", "]", ",", "[", "0", ",", "255", ",", "184", "]", ",", "[", "0", ",", "92", ",", "255", "]", ",", "\n", "[", "184", ",", "255", ",", "0", "]", ",", "[", "0", ",", "133", ",", "255", "]", ",", "[", "255", ",", "214", ",", "0", "]", ",", "[", "25", ",", "194", ",", "194", "]", ",", "\n", "[", "102", ",", "255", ",", "0", "]", ",", "[", "92", ",", "0", ",", "255", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.class_names.voc_palette": [[105, 112], ["None"], "function", ["None"], ["", "def", "voc_palette", "(", ")", ":", "\n", "    ", "\"\"\"Pascal VOC palette for external use.\"\"\"", "\n", "return", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "128", ",", "0", ",", "0", "]", ",", "[", "0", ",", "128", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "[", "0", ",", "0", ",", "128", "]", ",", "\n", "[", "128", ",", "0", ",", "128", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "128", ",", "128", ",", "128", "]", ",", "[", "64", ",", "0", ",", "0", "]", ",", "\n", "[", "192", ",", "0", ",", "0", "]", ",", "[", "64", ",", "128", ",", "0", "]", ",", "[", "192", ",", "128", ",", "0", "]", ",", "[", "64", ",", "0", ",", "128", "]", ",", "\n", "[", "192", ",", "0", ",", "128", "]", ",", "[", "64", ",", "128", ",", "128", "]", ",", "[", "192", ",", "128", ",", "128", "]", ",", "[", "0", ",", "64", ",", "0", "]", ",", "\n", "[", "128", ",", "64", ",", "0", "]", ",", "[", "0", ",", "192", ",", "0", "]", ",", "[", "128", ",", "192", ",", "0", "]", ",", "[", "0", ",", "64", ",", "128", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.class_names.get_classes": [[121, 136], ["dataset_aliases.items", "mmcv.is_str", "TypeError", "eval", "ValueError", "type"], "function", ["None"], ["def", "get_classes", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Get class names of a dataset.\"\"\"", "\n", "alias2name", "=", "{", "}", "\n", "for", "name", ",", "aliases", "in", "dataset_aliases", ".", "items", "(", ")", ":", "\n", "        ", "for", "alias", "in", "aliases", ":", "\n", "            ", "alias2name", "[", "alias", "]", "=", "name", "\n", "\n", "", "", "if", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "in", "alias2name", ":", "\n", "            ", "labels", "=", "eval", "(", "alias2name", "[", "dataset", "]", "+", "'_classes()'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized dataset: {dataset}'", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'dataset must a str, but got {type(dataset)}'", ")", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.class_names.get_palette": [[138, 153], ["dataset_aliases.items", "mmcv.is_str", "TypeError", "eval", "ValueError", "type"], "function", ["None"], ["", "def", "get_palette", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Get class palette (RGB) of a dataset.\"\"\"", "\n", "alias2name", "=", "{", "}", "\n", "for", "name", ",", "aliases", "in", "dataset_aliases", ".", "items", "(", ")", ":", "\n", "        ", "for", "alias", "in", "aliases", ":", "\n", "            ", "alias2name", "[", "alias", "]", "=", "name", "\n", "\n", "", "", "if", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "in", "alias2name", ":", "\n", "            ", "labels", "=", "eval", "(", "alias2name", "[", "dataset", "]", "+", "'_palette()'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized dataset: {dataset}'", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'dataset must a str, but got {type(dataset)}'", ")", "\n", "", "return", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.__init__": [[15, 23], ["isinstance", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataloader", ",", "interval", "=", "1", ",", "by_epoch", "=", "False", ",", "**", "eval_kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataloader", ",", "DataLoader", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'dataloader must be a pytorch DataLoader, but got '", "\n", "f'{type(dataloader)}'", ")", "\n", "", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "by_epoch", "=", "by_epoch", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.after_train_iter": [[24, 32], ["runner.log_buffer.clear", "single_gpu_test", "eval_hooks.EvalHook.evaluate", "eval_hooks.EvalHook.every_n_iters"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"After train epoch hook.\"\"\"", "\n", "if", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmseg", ".", "apis", "import", "single_gpu_test", "\n", "runner", ".", "log_buffer", ".", "clear", "(", ")", "\n", "results", "=", "single_gpu_test", "(", "runner", ".", "model", ",", "self", ".", "dataloader", ",", "show", "=", "False", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.after_train_epoch": [[33, 41], ["runner.log_buffer.clear", "single_gpu_test", "eval_hooks.EvalHook.evaluate", "eval_hooks.EvalHook.every_n_epochs"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"After train epoch hook.\"\"\"", "\n", "if", "not", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmseg", ".", "apis", "import", "single_gpu_test", "\n", "runner", ".", "log_buffer", ".", "clear", "(", ")", "\n", "results", "=", "single_gpu_test", "(", "runner", ".", "model", ",", "self", ".", "dataloader", ",", "show", "=", "False", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate": [[42, 49], ["eval_hooks.EvalHook.dataloader.dataset.evaluate", "eval_hooks.EvalHook.items"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call evaluate function of dataset.\"\"\"", "\n", "eval_res", "=", "self", ".", "dataloader", ".", "dataset", ".", "evaluate", "(", "\n", "results", ",", "logger", "=", "runner", ".", "logger", ",", "**", "self", ".", "eval_kwargs", ")", "\n", "for", "name", ",", "val", "in", "eval_res", ".", "items", "(", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "name", "]", "=", "val", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.DistEvalHook.__init__": [[63, 78], ["isinstance", "TypeError", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataloader", ",", "\n", "interval", "=", "1", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "by_epoch", "=", "False", ",", "\n", "**", "eval_kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataloader", ",", "DataLoader", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "'dataloader must be a pytorch DataLoader, but got {}'", ".", "format", "(", "\n", "type", "(", "dataloader", ")", ")", ")", "\n", "", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "gpu_collect", "=", "gpu_collect", "\n", "self", ".", "by_epoch", "=", "by_epoch", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.DistEvalHook.after_train_iter": [[79, 93], ["runner.log_buffer.clear", "multi_gpu_test", "print", "eval_hooks.DistEvalHook.evaluate", "eval_hooks.DistEvalHook.every_n_iters", "os.join"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"After train epoch hook.\"\"\"", "\n", "if", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmseg", ".", "apis", "import", "multi_gpu_test", "\n", "runner", ".", "log_buffer", ".", "clear", "(", ")", "\n", "results", "=", "multi_gpu_test", "(", "\n", "runner", ".", "model", ",", "\n", "self", ".", "dataloader", ",", "\n", "tmpdir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.eval_hook'", ")", ",", "\n", "gpu_collect", "=", "self", ".", "gpu_collect", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.DistEvalHook.after_train_epoch": [[94, 108], ["runner.log_buffer.clear", "multi_gpu_test", "print", "eval_hooks.DistEvalHook.evaluate", "eval_hooks.DistEvalHook.every_n_epochs", "os.join"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"After train epoch hook.\"\"\"", "\n", "if", "not", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmseg", ".", "apis", "import", "multi_gpu_test", "\n", "runner", ".", "log_buffer", ".", "clear", "(", ")", "\n", "results", "=", "multi_gpu_test", "(", "\n", "runner", ".", "model", ",", "\n", "self", ".", "dataloader", ",", "\n", "tmpdir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.eval_hook'", ")", ",", "\n", "gpu_collect", "=", "self", ".", "gpu_collect", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_city_c.perturb": [[25, 28], ["imagecorruptions.corrupt"], "function", ["None"], ["def", "perturb", "(", "i", ",", "p", ",", "s", ")", ":", "\n", "    ", "img", "=", "corrupt", "(", "i", ",", "corruption_name", "=", "p", ",", "severity", "=", "s", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_city_c.convert_img_path": [[30, 34], ["ori_path.replace"], "function", ["None"], ["", "def", "convert_img_path", "(", "ori_path", ",", "suffix", ")", ":", "\n", "    ", "new_path", "=", "ori_path", ".", "replace", "(", "'clean'", ",", "suffix", ")", "\n", "assert", "new_path", "!=", "ori_path", "\n", "return", "new_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_city_c.main": [[35, 51], ["print", "mmcv.ProgressBar", "mmcv.scandir", "os.path.join", "mmcv.imread", "mmcv.ProgressBar.update", "gen_city_c.perturb", "gen_city_c.convert_img_path", "mmcv.imwrite", "str"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_coco_c.perturb", "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_coco_c.convert_img_path"], ["", "def", "main", "(", ")", ":", "\n", "    ", "img_dir", "=", "'../ade20k_c/clean/'", "\n", "severity", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "num_imgs", "=", "5000", "\n", "for", "p", "in", "corruptions", ":", "\n", "        ", "print", "(", "\"\\n ### gen corruption:{} ###\"", ".", "format", "(", "p", ")", ")", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "num_imgs", ")", "\n", "for", "img_path", "in", "mmcv", ".", "scandir", "(", "img_dir", ",", "suffix", "=", "'jpg'", ",", "recursive", "=", "True", ")", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "img_path", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "img_path", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "for", "s", "in", "severity", ":", "\n", "                ", "perturbed_img", "=", "perturb", "(", "img", ",", "p", ",", "s", ")", "\n", "img_suffix", "=", "p", "+", "\"/\"", "+", "str", "(", "s", ")", "\n", "perturbed_img_path", "=", "convert_img_path", "(", "img_path", ",", "img_suffix", ")", "\n", "mmcv", ".", "imwrite", "(", "perturbed_img", ",", "perturbed_img_path", ",", "auto_mkdir", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.train.parse_args": [[29, 71], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args"], ["torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "\n", "", "", "def", "train_segmentor", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Launch segmentor training.\"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build runner", "\n", "", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.train.main": [[73, 173], ["train.parse_args", "mmcv.utils.Config.fromfile", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmseg.utils.get_root_logger", "dict", "mmseg.utils.collect_env", "mmseg.utils.get_root_logger.info", "mmseg.utils.get_root_logger.info", "mmseg.utils.get_root_logger.info", "os.basename", "mmseg.models.build_segmentor", "mmseg.utils.get_root_logger.info", "mmseg.apis.train_segmentor", "Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "os.abspath", "os.join", "time.localtime", "mmseg.utils.get_root_logger.info", "mmseg.apis.set_random_seed", "mmseg.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmseg.datasets.build_dataset", "mmseg.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args", "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.nvlabs_fan.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_segmentor", "home.repos.pwc.inspect_result.nvlabs_fan.apis.train.train_segmentor", "home.repos.pwc.inspect_result.nvlabs_fan.apis.train.set_random_seed", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset"], ["if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a `runner` section, '", "\n", "'please set `runner` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n", "\n", "# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "runner", ".", "register_hook", "(", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.test.parse_args": [[25, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args"], ["\n", "\n", "if", "temp_file_name", "is", "None", ":", "\n", "        ", "temp_file_name", "=", "tempfile", ".", "NamedTemporaryFile", "(", "\n", "suffix", "=", "'.npy'", ",", "delete", "=", "False", ")", ".", "name", "\n", "", "np", ".", "save", "(", "temp_file_name", ",", "array", ")", "\n", "return", "temp_file_name", "\n", "\n", "\n", "", "def", "single_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "show", "=", "False", ",", "\n", "out_dir", "=", "None", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test with single GPU.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        show (bool): Whether show results during infernece. Default: False.\n        out_dir (str, optional): If specified, the results will be dumped into\n            the directory to save output results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "\n", "", "if", "show", "or", "out_dir", ":", "\n", "            ", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_metas", "[", "0", "]", "[", "'img_norm_cfg'", "]", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "                ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "\n", "ori_h", ",", "ori_w", "=", "img_meta", "[", "'ori_shape'", "]", "[", ":", "-", "1", "]", "\n", "img_show", "=", "mmcv", ".", "imresize", "(", "img_show", ",", "(", "ori_w", ",", "ori_h", ")", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.test.main": [[76, 175], ["test.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "mmseg.models.build_segmentor", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "mmcv.Config.fromfile.merge_from_dict", "mmcv.runner.init_dist", "parse_args.eval_options.get", "mmcv.parallel.MMDataParallel", "mmseg.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmseg.apis.multi_gpu_test", "parse_args.out.endswith", "mmcv.Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmseg.datasets.build_dataset.format_results", "mmseg.datasets.build_dataset.evaluate", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_segmentor", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["if", "out_dir", ":", "\n", "                    ", "out_file", "=", "osp", ".", "join", "(", "out_dir", ",", "img_meta", "[", "'ori_filename'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out_file", "=", "None", "\n", "\n", "", "model", ".", "module", ".", "show_result", "(", "\n", "img_show", ",", "\n", "result", ",", "\n", "palette", "=", "dataset", ".", "PALETTE", ",", "\n", "show", "=", "show", ",", "\n", "out_file", "=", "out_file", ")", "\n", "\n", "", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n", "\n", "", "def", "multi_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "tmpdir", "=", "None", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test model with multiple gpus.\n\n    This method tests model with multiple gpus and collects the results\n    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'\n    it encodes results to gpu tensors and use gpu communication for results\n    collection. On cpu mode it saves the results on different gpus to 'tmpdir'\n    and collects them by the rank 0 worker.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode.\n        gpu_collect (bool): Option to use either gpu or cpu to collect results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "if", "gpu_collect", ":", "\n", "        ", "results", "=", "collect_results_gpu", "(", "results", ",", "len", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "collect_results_cpu", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "", "return", "results", "\n", "\n", "\n", "", "def", "collect_results_cpu", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Collect results with CPU.\"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.test_city_c.parse_args": [[26, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'mmseg test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--corrupt'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'clean'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--severity'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aug-test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use Flip and Multi scale aug'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "default", "=", "'work_dirs/res.pkl'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "'mIoU'", ",", "\n", "# default=None,", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"mIoU\"'", "\n", "' for generic datasets, and \"cityscapes\" for Cityscapes'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu_collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "nargs", "=", "'+'", ",", "action", "=", "DictAction", ",", "help", "=", "'custom options'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--results-file'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'FILENAME'", ",", "\n", "help", "=", "'Output csv file for validation results (summary)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.test_city_c.main": [[88, 198], ["test_city_c.parse_args", "os.makedirs", "print", "range", "results.append", "numpy.savetxt", "print", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "print", "mmseg.datasets.build_dataset", "mmseg.datasets.build_dataloader", "mmseg.models.build_segmentor", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "mmcv.Config.fromfile.merge_from_dict", "test_dir.replace.replace", "parse_args.eval_options.get", "mmcv.parallel.MMDataParallel", "mmseg.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmseg.apis.multi_gpu_test", "results.append", "parse_args.out.endswith", "mmcv.runner.init_dist", "mmcv.Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmseg.datasets.build_dataset.format_results", "mmseg.datasets.build_dataset.evaluate", "str", "print", "torch.cuda.current_device"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.nvlabs_fan.models.builder.build_segmentor", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "results_file", "=", "args", ".", "results_file", "or", "'./results-all.csv'", "\n", "os", ".", "makedirs", "(", "results_file", ",", "exist_ok", "=", "True", ")", "\n", "blur_list", "=", "[", "'gaussian_blur'", ",", "'motion_blur'", ",", "'glass_blur'", ",", "'defocus_blur'", "]", "\n", "noise_list", "=", "[", "'gaussian_noise'", ",", "'shot_noise'", ",", "'speckle_noise'", ",", "'impulse_noise'", "]", "\n", "digital_list", "=", "[", "'contrast'", ",", "'jpeg_compression'", ",", "'saturate'", ",", "'pixelate'", "]", "\n", "weather_list", "=", "[", "'snow'", ",", "'fog'", ",", "'frost'", ",", "'spatter'", ",", "'brightness'", "]", "\n", "extra", "=", "[", "'zoom_blur'", ",", "'elastic_transform'", "]", "\n", "name_list", "=", "[", "'clean'", "]", "+", "noise_list", "+", "extra", "+", "blur_list", "+", "digital_list", "+", "weather_list", "\n", "average_acc", "=", "{", "}", "\n", "for", "noise_name", "in", "name_list", ":", "\n", "        ", "res_sum", "=", "0", "\n", "results", "=", "[", "]", "\n", "severity_range", "=", "1", "if", "noise_name", "==", "'clean'", "else", "3", "\n", "for", "i", "in", "range", "(", "severity_range", ")", ":", "\n", "            ", "corrupt", ",", "severity", "=", "noise_name", ",", "i", "+", "1", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "if", "'None'", "in", "args", ".", "eval", ":", "\n", "                ", "args", ".", "eval", "=", "None", "\n", "", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "\n", "                ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "options", "is", "not", "None", ":", "\n", "                ", "cfg", ".", "merge_from_dict", "(", "args", ".", "options", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "                ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "", "corrupt_type", "=", "corrupt", "or", "args", ".", "corrupt", "\n", "if", "corrupt_type", "==", "'clean'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "severity", "=", "severity", "or", "args", ".", "severity", "\n", "test_dir", "=", "cfg", ".", "data", ".", "test", ".", "img_dir", "\n", "test_dir", "=", "test_dir", ".", "replace", "(", "'clean'", ",", "corrupt_type", "+", "'/'", "+", "str", "(", "severity", ")", ")", "\n", "cfg", ".", "data", ".", "test", ".", "img_dir", "=", "test_dir", "\n", "", "print", "(", "'validating dir: '", ",", "cfg", ".", "data", ".", "test", ".", "img_dir", ")", "\n", "\n", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "                ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "                ", "distributed", "=", "True", "\n", "if", "corrupt_type", "==", "'clean'", ":", "\n", "                    ", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_segmentor", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "model", ".", "PALETTE", "=", "checkpoint", "[", "'meta'", "]", "[", "'PALETTE'", "]", "\n", "\n", "efficient_test", "=", "False", "#False", "\n", "if", "args", ".", "eval_options", "is", "not", "None", ":", "\n", "                ", "efficient_test", "=", "args", ".", "eval_options", ".", "get", "(", "'efficient_test'", ",", "False", ")", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "                ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "efficient_test", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ",", "efficient_test", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "                ", "if", "args", ".", "out", ":", "\n", "                    ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "                    ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "                    ", "res", "=", "dataset", ".", "evaluate", "(", "outputs", ",", "args", ".", "eval", ",", "**", "kwargs", ")", "\n", "if", "noise_name", "==", "'clean'", ":", "\n", "                        ", "print", "(", "'clean image accuracy is: '", ",", "res", "[", "'mIoU'", "]", ")", "\n", "", "", "results", ".", "append", "(", "res", "[", "'mIoU'", "]", ")", "\n", "res_sum", "+=", "res", "[", "'mIoU'", "]", "\n", "", "", "results", ".", "append", "(", "res_sum", "/", "(", "i", "+", "1", ")", ")", "\n", "average_acc", "[", "noise_name", "]", "=", "res_sum", "/", "(", "i", "+", "1", ")", "\n", "np", ".", "savetxt", "(", "results_file", "+", "'_'", "+", "noise_name", "+", "'_'", "+", "'%.2f'", "%", "(", "res_sum", "/", "(", "i", "+", "1", ")", ")", "+", "'.csv'", ",", "results", ")", "\n", "print", "(", "'average score is:'", ",", "res_sum", "/", "(", "i", "+", "1", ")", ")", "\n", "", "print", "(", "'all average score is:'", ",", "average_acc", ")", "\n", "return", "res", "[", "'mIoU'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_coco_c.perturb": [[30, 33], ["imagecorruptions.corrupt"], "function", ["None"], ["def", "perturb", "(", "i", ",", "p", ",", "s", ")", ":", "\n", "    ", "img", "=", "corrupt", "(", "i", ",", "corruption_name", "=", "p", ",", "severity", "=", "s", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_coco_c.convert_img_path": [[35, 38], ["ori_path.replace"], "function", ["None"], ["", "def", "convert_img_path", "(", "ori_path", ",", "suffix", ")", ":", "\n", "    ", "new_path", "=", "ori_path", ".", "replace", "(", "'clean'", ",", "suffix", ")", "\n", "return", "new_path", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_coco_c.main": [[39, 55], ["print", "mmcv.ProgressBar", "mmcv.scandir", "os.path.join", "mmcv.imread", "mmcv.ProgressBar.update", "gen_coco_c.perturb", "gen_coco_c.convert_img_path", "mmcv.imwrite", "str"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_coco_c.perturb", "home.repos.pwc.inspect_result.nvlabs_fan.tools.gen_coco_c.convert_img_path"], ["", "def", "main", "(", ")", ":", "\n", "    ", "img_dir", "=", "'./data/coco-c/clean'", "\n", "severity", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", "\n", "num_imgs", "=", "5000", "\n", "for", "p", "in", "corruptions", ":", "\n", "        ", "print", "(", "\"\\n ### gen corruption:{} ###\"", ".", "format", "(", "p", ")", ")", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "num_imgs", ")", "\n", "for", "img_path", "in", "mmcv", ".", "scandir", "(", "img_dir", ",", "suffix", "=", "'jpg'", ",", "recursive", "=", "True", ")", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "img_path", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "img_path", ")", "\n", "prog_bar", ".", "update", "(", ")", "\n", "for", "s", "in", "severity", ":", "\n", "                ", "perturbed_img", "=", "perturb", "(", "img", ",", "p", ",", "s", ")", "\n", "img_suffix", "=", "p", "+", "\"_\"", "+", "str", "(", "s", ")", "\n", "perturbed_img_path", "=", "convert_img_path", "(", "img_path", ",", "img_suffix", ")", "\n", "mmcv", ".", "imwrite", "(", "perturbed_img", ",", "perturbed_img_path", ",", "auto_mkdir", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.detection.train.parse_args": [[32, 95], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args"], ["", "", "def", "train_segmentor", "(", "model", ",", "\n", "dataset", ",", "\n", "cfg", ",", "\n", "distributed", "=", "False", ",", "\n", "validate", "=", "False", ",", "\n", "timestamp", "=", "None", ",", "\n", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Launch segmentor training.\"\"\"", "\n", "logger", "=", "get_root_logger", "(", "cfg", ".", "log_level", ")", "\n", "\n", "# prepare data loaders", "\n", "dataset", "=", "dataset", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "dataset", "]", "\n", "data_loaders", "=", "[", "\n", "build_dataloader", "(", "\n", "ds", ",", "\n", "cfg", ".", "data", ".", "samples_per_gpu", ",", "\n", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "# cfg.gpus will be ignored if distributed", "\n", "len", "(", "cfg", ".", "gpu_ids", ")", ",", "\n", "dist", "=", "distributed", ",", "\n", "seed", "=", "cfg", ".", "seed", ",", "\n", "drop_last", "=", "True", ")", "for", "ds", "in", "dataset", "\n", "]", "\n", "\n", "# put model on gpus", "\n", "if", "distributed", ":", "\n", "        ", "find_unused_parameters", "=", "cfg", ".", "get", "(", "'find_unused_parameters'", ",", "False", ")", "\n", "# Sets the `find_unused_parameters` parameter in", "\n", "# torch.nn.parallel.DistributedDataParallel", "\n", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ",", "\n", "find_unused_parameters", "=", "find_unused_parameters", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu_ids", "[", "0", "]", ")", ",", "device_ids", "=", "cfg", ".", "gpu_ids", ")", "\n", "\n", "# build runner", "\n", "", "optimizer", "=", "build_optimizer", "(", "model", ",", "cfg", ".", "optimizer", ")", "\n", "\n", "if", "cfg", ".", "get", "(", "'runner'", ")", "is", "None", ":", "\n", "        ", "cfg", ".", "runner", "=", "{", "'type'", ":", "'IterBasedRunner'", ",", "'max_iters'", ":", "cfg", ".", "total_iters", "}", "\n", "warnings", ".", "warn", "(", "\n", "'config is now expected to have a `runner` section, '", "\n", "'please set `runner` in your config.'", ",", "UserWarning", ")", "\n", "\n", "", "runner", "=", "build_runner", "(", "\n", "cfg", ".", "runner", ",", "\n", "default_args", "=", "dict", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "cfg", ".", "work_dir", ",", "\n", "logger", "=", "logger", ",", "\n", "meta", "=", "meta", ")", ")", "\n", "\n", "# register hooks", "\n", "runner", ".", "register_training_hooks", "(", "cfg", ".", "lr_config", ",", "cfg", ".", "optimizer_config", ",", "\n", "cfg", ".", "checkpoint_config", ",", "cfg", ".", "log_config", ",", "\n", "cfg", ".", "get", "(", "'momentum_config'", ",", "None", ")", ")", "\n", "\n", "# an ugly walkaround to make the .log and .log.json filenames the same", "\n", "runner", ".", "timestamp", "=", "timestamp", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.detection.train.main": [[97, 196], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "os.basename", "mmdet.models.build_detector", "mmdet.models.build_detector.init_weights", "mmdet_custom.apis.train.train_detector", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmdet.utils.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args", "home.repos.pwc.inspect_result.nvlabs_fan.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.nvlabs_fan.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.nvlabs_fan.decode_heads.decode_head.BaseDecodeHead.init_weights", "home.repos.pwc.inspect_result.nvlabs_fan.apis.train.train_detector", "home.repos.pwc.inspect_result.nvlabs_fan.apis.train.set_random_seed", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset"], ["# register eval hooks", "\n", "if", "validate", ":", "\n", "        ", "val_dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "val", ",", "dict", "(", "test_mode", "=", "True", ")", ")", "\n", "val_dataloader", "=", "build_dataloader", "(", "\n", "val_dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "eval_cfg", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", "\n", "eval_cfg", "[", "'by_epoch'", "]", "=", "cfg", ".", "runner", "[", "'type'", "]", "!=", "'IterBasedRunner'", "\n", "eval_hook", "=", "DistEvalHook", "if", "distributed", "else", "EvalHook", "\n", "runner", ".", "register_hook", "(", "eval_hook", "(", "val_dataloader", ",", "**", "eval_cfg", ")", ")", "\n", "\n", "", "if", "cfg", ".", "resume_from", ":", "\n", "        ", "runner", ".", "resume", "(", "cfg", ".", "resume_from", ")", "\n", "", "elif", "cfg", ".", "load_from", ":", "\n", "        ", "runner", ".", "load_checkpoint", "(", "cfg", ".", "load_from", ")", "\n", "", "runner", ".", "run", "(", "data_loaders", ",", "cfg", ".", "workflow", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args": [[57, 140], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args"], ["dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "**", "data", ")", "\n", "\n", "", "if", "show", "or", "out_dir", ":", "\n", "            ", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "img_metas", "=", "data", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_metas", "[", "0", "]", "[", "'img_norm_cfg'", "]", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "for", "img", ",", "img_meta", "in", "zip", "(", "imgs", ",", "img_metas", ")", ":", "\n", "                ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "\n", "ori_h", ",", "ori_w", "=", "img_meta", "[", "'ori_shape'", "]", "[", ":", "-", "1", "]", "\n", "img_show", "=", "mmcv", ".", "imresize", "(", "img_show", ",", "(", "ori_w", ",", "ori_h", ")", ")", "\n", "\n", "if", "out_dir", ":", "\n", "                    ", "out_file", "=", "osp", ".", "join", "(", "out_dir", ",", "img_meta", "[", "'ori_filename'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out_file", "=", "None", "\n", "\n", "", "model", ".", "module", ".", "show_result", "(", "\n", "img_show", ",", "\n", "result", ",", "\n", "palette", "=", "dataset", ".", "PALETTE", ",", "\n", "show", "=", "show", ",", "\n", "out_file", "=", "out_file", ")", "\n", "\n", "", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "[", "np2tmp", "(", "_", ")", "for", "_", "in", "result", "]", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n", "\n", "", "def", "multi_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "tmpdir", "=", "None", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "efficient_test", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test model with multiple gpus.\n\n    This method tests model with multiple gpus and collects the results\n    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'\n    it encodes results to gpu tensors and use gpu communication for results\n    collection. On cpu mode it saves the results on different gpus to 'tmpdir'\n    and collects them by the rank 0 worker.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (utils.data.Dataloader): Pytorch data loader.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode.\n        gpu_collect (bool): Option to use either gpu or cpu to collect results.\n        efficient_test (bool): Whether save the results as local numpy files to\n            save CPU memory during evaluation. Default: False.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "if", "isinstance", "(", "result", ",", "list", ")", ":", "\n", "            ", "if", "efficient_test", ":", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.detection.test.main": [[142, 270], ["test.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "Config.fromfile.model.get", "isinstance", "mmcv.runner.get_dist_info", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "isinstance", "Config.fromfile.data.test.pop", "isinstance", "mmcv.runner.init_dist", "mmcv.mkdir_or_exist", "time.strftime", "os.join", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "Config.fromfile.model.neck.get", "mmdet.datasets.replace_ImageToTensor", "max", "os.abspath", "time.localtime", "Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "mmdet.datasets.build_dataset.evaluate", "print", "dict", "neck_cfg.get", "Config.fromfile.model.neck.rfp_backbone.get", "cfg.get().copy.pop", "dict", "mmcv.dump", "neck_cfg.rfp_backbone.get", "ds_cfg.pop", "mmdet.datasets.replace_ImageToTensor", "torch.cuda.current_device", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.detection.test.parse_args", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.SmoothedValue.max", "home.repos.pwc.inspect_result.nvlabs_fan.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.evaluation.eval_hooks.EvalHook.evaluate"], ["", "results", ".", "extend", "(", "result", ")", "\n", "", "else", ":", "\n", "            ", "if", "efficient_test", ":", "\n", "                ", "result", "=", "np2tmp", "(", "result", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "\n", "", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "if", "gpu_collect", ":", "\n", "        ", "results", "=", "collect_results_gpu", "(", "results", ",", "len", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "collect_results_cpu", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "", "return", "results", "\n", "\n", "\n", "", "def", "collect_results_cpu", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "\"\"\"Collect results with CPU.\"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "rank", ")", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "'part_{}.pkl'", ".", "format", "(", "i", ")", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n", "\n", "", "", "def", "collect_results_gpu", "(", "result_part", ",", "size", ")", ":", "\n", "    ", "\"\"\"Collect results with GPU.\"\"\"", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# dump result part to tensor with pickle", "\n", "part_tensor", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "pickle", ".", "dumps", "(", "result_part", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "# gather all result part tensor shape", "\n", "shape_tensor", "=", "torch", ".", "tensor", "(", "part_tensor", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "shape_list", "=", "[", "shape_tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "shape_list", ",", "shape_tensor", ")", "\n", "# padding result part tensor to max length", "\n", "shape_max", "=", "torch", ".", "tensor", "(", "shape_list", ")", ".", "max", "(", ")", "\n", "part_send", "=", "torch", ".", "zeros", "(", "shape_max", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "part_send", "[", ":", "shape_tensor", "[", "0", "]", "]", "=", "part_tensor", "\n", "part_recv_list", "=", "[", "\n", "part_tensor", ".", "new_zeros", "(", "shape_max", ")", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "# gather all result part", "\n", "dist", ".", "all_gather", "(", "part_recv_list", ",", "part_send", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "recv", ",", "shape", "in", "zip", "(", "part_recv_list", ",", "shape_list", ")", ":", "\n", "            ", "part_list", ".", "append", "(", "\n", "pickle", ".", "loads", "(", "recv", "[", ":", "shape", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "return", "ordered_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.runner.epoch_based_runner.EpochBasedRunnerAmp.save_checkpoint": [[26, 69], ["filename_tmpl.format", "os.join", "checkpoint.save_checkpoint", "dict", "isinstance", "dict.update", "os.join", "dict.update", "TypeError", "platform.system", "mmcv.symlink", "shutil.copy", "type"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.runner.checkpoint.save_checkpoint", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["def", "save_checkpoint", "(", "self", ",", "\n", "out_dir", ",", "\n", "filename_tmpl", "=", "'epoch_{}.pth'", ",", "\n", "save_optimizer", "=", "True", ",", "\n", "meta", "=", "None", ",", "\n", "create_symlink", "=", "True", ")", ":", "\n", "        ", "\"\"\"Save the checkpoint.\n\n        Args:\n            out_dir (str): The directory that checkpoints are saved.\n            filename_tmpl (str, optional): The checkpoint filename template,\n                which contains a placeholder for the epoch number.\n                Defaults to 'epoch_{}.pth'.\n            save_optimizer (bool, optional): Whether to save the optimizer to\n                the checkpoint. Defaults to True.\n            meta (dict, optional): The meta information to be saved in the\n                checkpoint. Defaults to None.\n            create_symlink (bool, optional): Whether to create a symlink\n                \"latest.pth\" to point to the latest checkpoint.\n                Defaults to True.\n        \"\"\"", "\n", "if", "meta", "is", "None", ":", "\n", "            ", "meta", "=", "dict", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "iter", "=", "self", ".", "iter", ")", "\n", "", "elif", "isinstance", "(", "meta", ",", "dict", ")", ":", "\n", "            ", "meta", ".", "update", "(", "epoch", "=", "self", ".", "epoch", "+", "1", ",", "iter", "=", "self", ".", "iter", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "f'meta should be a dict or None, but got {type(meta)}'", ")", "\n", "", "if", "self", ".", "meta", "is", "not", "None", ":", "\n", "            ", "meta", ".", "update", "(", "self", ".", "meta", ")", "\n", "\n", "", "filename", "=", "filename_tmpl", ".", "format", "(", "self", ".", "epoch", "+", "1", ")", "\n", "filepath", "=", "osp", ".", "join", "(", "out_dir", ",", "filename", ")", "\n", "optimizer", "=", "self", ".", "optimizer", "if", "save_optimizer", "else", "None", "\n", "save_checkpoint", "(", "self", ".", "model", ",", "filepath", ",", "optimizer", "=", "optimizer", ",", "meta", "=", "meta", ")", "\n", "# in some environments, `os.symlink` is not supported, you may need to", "\n", "# set `create_symlink` to False", "\n", "if", "create_symlink", ":", "\n", "            ", "dst_file", "=", "osp", ".", "join", "(", "out_dir", ",", "'latest.pth'", ")", "\n", "if", "platform", ".", "system", "(", ")", "!=", "'Windows'", ":", "\n", "                ", "mmcv", ".", "symlink", "(", "filename", ",", "dst_file", ")", "\n", "", "else", ":", "\n", "                ", "shutil", ".", "copy", "(", "filepath", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.runner.epoch_based_runner.EpochBasedRunnerAmp.resume": [[70, 105], ["epoch_based_runner.EpochBasedRunnerAmp.logger.info", "torch.cuda.is_available", "epoch_based_runner.EpochBasedRunnerAmp.load_checkpoint", "isinstance", "apex.amp.load_state_dict", "epoch_based_runner.EpochBasedRunnerAmp.logger.info", "torch.cuda.current_device", "epoch_based_runner.EpochBasedRunnerAmp.load_checkpoint", "epoch_based_runner.EpochBasedRunnerAmp.load_checkpoint", "epoch_based_runner.EpochBasedRunnerAmp.optimizer.load_state_dict", "isinstance", "epoch_based_runner.EpochBasedRunnerAmp.optimizer.keys", "TypeError", "epoch_based_runner.EpochBasedRunnerAmp.optimizer[].load_state_dict", "storage.cuda", "type"], "methods", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_state_dict", "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_state_dict", "home.repos.pwc.inspect_result.nvlabs_fan.utils.utils.load_state_dict"], ["", "", "", "def", "resume", "(", "self", ",", "\n", "checkpoint", ",", "\n", "resume_optimizer", "=", "True", ",", "\n", "map_location", "=", "'default'", ")", ":", "\n", "        ", "if", "map_location", "==", "'default'", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "device_id", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "checkpoint", "=", "self", ".", "load_checkpoint", "(", "\n", "checkpoint", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ".", "cuda", "(", "device_id", ")", ")", "\n", "", "else", ":", "\n", "                ", "checkpoint", "=", "self", ".", "load_checkpoint", "(", "checkpoint", ")", "\n", "", "", "else", ":", "\n", "            ", "checkpoint", "=", "self", ".", "load_checkpoint", "(", "\n", "checkpoint", ",", "map_location", "=", "map_location", ")", "\n", "\n", "", "self", ".", "_epoch", "=", "checkpoint", "[", "'meta'", "]", "[", "'epoch'", "]", "\n", "self", ".", "_iter", "=", "checkpoint", "[", "'meta'", "]", "[", "'iter'", "]", "\n", "if", "'optimizer'", "in", "checkpoint", "and", "resume_optimizer", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "optimizer", ",", "Optimizer", ")", ":", "\n", "                ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "optimizer", ",", "dict", ")", ":", "\n", "                ", "for", "k", "in", "self", ".", "optimizer", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "optimizer", "[", "k", "]", ".", "load_state_dict", "(", "\n", "checkpoint", "[", "'optimizer'", "]", "[", "k", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "'Optimizer should be dict or torch.optim.Optimizer '", "\n", "f'but got {type(self.optimizer)}'", ")", "\n", "\n", "", "", "if", "'amp'", "in", "checkpoint", ":", "\n", "            ", "apex", ".", "amp", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "'load amp state dict'", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'resumed epoch %d, iter %d'", ",", "self", ".", "epoch", ",", "self", ".", "iter", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.__init__": [[13, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "update_interval", "=", "1", ",", "grad_clip", "=", "None", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ",", "use_fp16", "=", "False", ")", ":", "\n", "        ", "self", ".", "grad_clip", "=", "grad_clip", "\n", "self", ".", "coalesce", "=", "coalesce", "\n", "self", ".", "bucket_size_mb", "=", "bucket_size_mb", "\n", "self", ".", "update_interval", "=", "update_interval", "\n", "self", ".", "use_fp16", "=", "use_fp16", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.before_run": [[20, 22], ["runner.optimizer.zero_grad"], "methods", ["None"], ["", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nvlabs_fan.runner.optimizer.DistOptimizerHook.after_train_iter": [[23, 35], ["optimizer.DistOptimizerHook.every_n_iters", "runner.outputs[].backward", "runner.optimizer.step", "runner.optimizer.zero_grad", "apex.amp.scale_loss", "scaled_loss.backward", "optimizer.DistOptimizerHook.clip_grads", "runner.model.parameters"], "methods", ["None"], ["", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "runner", ".", "outputs", "[", "'loss'", "]", "/=", "self", ".", "update_interval", "\n", "if", "self", ".", "use_fp16", ":", "\n", "            ", "with", "apex", ".", "amp", ".", "scale_loss", "(", "runner", ".", "outputs", "[", "'loss'", "]", ",", "runner", ".", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "runner", ".", "outputs", "[", "'loss'", "]", ".", "backward", "(", ")", "\n", "", "if", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "update_interval", ")", ":", "\n", "            ", "if", "self", ".", "grad_clip", "is", "not", "None", ":", "\n", "                ", "self", ".", "clip_grads", "(", "runner", ".", "model", ".", "parameters", "(", ")", ")", "\n", "", "runner", ".", "optimizer", ".", "step", "(", ")", "\n", "runner", ".", "optimizer", ".", "zero_grad", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nvlabs_fan.runner.checkpoint.save_checkpoint": [[19, 86], ["meta.update", "mmcv.parallel.is_module_wrapper", "isinstance", "apex.amp.state_dict", "filename.startswith", "hasattr", "meta.update", "mmcv.runner.checkpoint.weights_to_cpu", "optimizer.state_dict", "isinstance", "modelcloud.Folder", "os.split", "mmcv.mkdir_or_exist", "isinstance", "TypeError", "time.asctime", "mmcv.runner.checkpoint.get_state_dict", "optimizer.items", "modelcloud.get", "tempfile.TemporaryDirectory", "os.join", "root.create_training_model.create_file", "os.dirname", "open", "torch.save", "f.flush", "optim.state_dict", "ImportError", "modelcloud.Folder.create_training_model", "open", "torch.save", "f.flush", "type"], "function", ["home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update", "home.repos.pwc.inspect_result.nvlabs_fan.utils.mce_utils.MetricLogger.update"], ["", "def", "save_checkpoint", "(", "model", ",", "filename", ",", "optimizer", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Save checkpoint to file.\n\n    The checkpoint will have 4 fields: ``meta``, ``state_dict`` and\n    ``optimizer``, ``amp``. By default ``meta`` will contain version\n    and time info.\n\n    Args:\n        model (Module): Module whose params are to be saved.\n        filename (str): Checkpoint filename.\n        optimizer (:obj:`Optimizer`, optional): Optimizer to be saved.\n        meta (dict, optional): Metadata to be saved in checkpoint.\n    \"\"\"", "\n", "if", "meta", "is", "None", ":", "\n", "        ", "meta", "=", "{", "}", "\n", "", "elif", "not", "isinstance", "(", "meta", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "f'meta must be a dict or None, but got {type(meta)}'", ")", "\n", "", "meta", ".", "update", "(", "mmcv_version", "=", "mmcv", ".", "__version__", ",", "time", "=", "time", ".", "asctime", "(", ")", ")", "\n", "\n", "if", "is_module_wrapper", "(", "model", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'CLASSES'", ")", "and", "model", ".", "CLASSES", "is", "not", "None", ":", "\n", "# save class name to the meta", "\n", "        ", "meta", ".", "update", "(", "CLASSES", "=", "model", ".", "CLASSES", ")", "\n", "\n", "", "checkpoint", "=", "{", "\n", "'meta'", ":", "meta", ",", "\n", "'state_dict'", ":", "weights_to_cpu", "(", "get_state_dict", "(", "model", ")", ")", "\n", "}", "\n", "# save optimizer state dict in the checkpoint", "\n", "if", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "        ", "checkpoint", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "optimizer", ",", "dict", ")", ":", "\n", "        ", "checkpoint", "[", "'optimizer'", "]", "=", "{", "}", "\n", "for", "name", ",", "optim", "in", "optimizer", ".", "items", "(", ")", ":", "\n", "            ", "checkpoint", "[", "'optimizer'", "]", "[", "name", "]", "=", "optim", ".", "state_dict", "(", ")", "\n", "\n", "# save amp state dict in the checkpoint", "\n", "", "", "checkpoint", "[", "'amp'", "]", "=", "apex", ".", "amp", ".", "state_dict", "(", ")", "\n", "\n", "if", "filename", ".", "startswith", "(", "'pavi://'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "pavi", "import", "modelcloud", "\n", "from", "pavi", ".", "exception", "import", "NodeNotFoundError", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please install pavi to load checkpoint from modelcloud.'", ")", "\n", "", "model_path", "=", "filename", "[", "7", ":", "]", "\n", "root", "=", "modelcloud", ".", "Folder", "(", ")", "\n", "model_dir", ",", "model_name", "=", "osp", ".", "split", "(", "model_path", ")", "\n", "try", ":", "\n", "            ", "model", "=", "modelcloud", ".", "get", "(", "model_dir", ")", "\n", "", "except", "NodeNotFoundError", ":", "\n", "            ", "model", "=", "root", ".", "create_training_model", "(", "model_dir", ")", "\n", "", "with", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "            ", "checkpoint_file", "=", "osp", ".", "join", "(", "tmp_dir", ",", "model_name", ")", "\n", "with", "open", "(", "checkpoint_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "torch", ".", "save", "(", "checkpoint", ",", "f", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "model", ".", "create_file", "(", "checkpoint_file", ",", "name", "=", "model_name", ")", "\n", "", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "dirname", "(", "filename", ")", ")", "\n", "# immediately flush buffer", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "checkpoint", ",", "f", ")", "\n", "f", ".", "flush", "(", ")", "", "", "", "", ""]]}