{"home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.create_folder": [[16, 37], ["os.path.exists", "print", "os.makedirs", "print"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.makedirs"], ["", "def", "create_folder", "(", "path", ")", ":", "\n", "    ", "\"\"\"\n    Checks if the path exists, if not creates it.\n    :param path: A valid path that might not exist\n    :return: An indication if the folder was created\n    \"\"\"", "\n", "folder_missing", "=", "not", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n", "if", "folder_missing", ":", "\n", "# Using makedirs since the path hierarchy might not fully exist.", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "(", "e", ".", "errno", ",", "e", ".", "strerror", ")", "==", "FILE_EXISTS_ERROR", ":", "\n", "                ", "print", "(", "e", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "print", "(", "'Created folder {0}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "", "return", "folder_missing", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir": [[39, 44], ["platform.system", "os.path.join", "os.getenv", "platform.system", "os.path.abspath", "os.getenv"], "function", ["None"], ["", "def", "root_dir", "(", ")", ":", "\n", "    ", "if", "platform", ".", "system", "(", ")", "==", "'Linux'", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "'HOME'", ")", ",", "'Documents'", ",", "'SKU110K'", ")", "\n", "", "elif", "platform", ".", "system", "(", ")", "==", "'Windows'", ":", "\n", "        ", "return", "os", ".", "path", ".", "abspath", "(", "'C:/Users/{}/Documents/SKU110K/'", ".", "format", "(", "os", ".", "getenv", "(", "'username'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.image_path": [[46, 48], ["os.path.join", "utils.root_dir"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir"], ["", "", "def", "image_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "IMG_FOLDER", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.annotation_path": [[50, 52], ["os.path.join", "utils.root_dir"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir"], ["", "def", "annotation_path", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "ANNOTATION_FOLDER", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.initializers.PriorProbability.__init__": [[27, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.initializers.PriorProbability.get_config": [[30, 33], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'probability'", ":", "self", ".", "probability", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.initializers.PriorProbability.__call__": [[35, 40], ["numpy.ones", "math.log"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "shape", ",", "dtype", "=", "None", ")", ":", "\n", "# set bias to -log((1 - p)/p) for foreground", "\n", "        ", "result", "=", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", "*", "-", "math", ".", "log", "(", "(", "1", "-", "self", ".", "probability", ")", "/", "self", ".", "probability", ")", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.focal": [[21, 69], ["keras.backend.max", "backend.where", "backend.gather_nd", "backend.gather_nd", "backend.where", "backend.where", "backend.where", "keras.backend.cast", "keras.backend.maximum", "keras.backend.not_equal", "keras.backend.ones_like", "keras.backend.equal", "keras.backend.equal", "keras.backend.binary_crossentropy", "keras.backend.equal", "keras.backend.floatx", "keras.backend.sum", "keras.backend.shape"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where"], ["def", "focal", "(", "alpha", "=", "0.25", ",", "gamma", "=", "2.0", ")", ":", "\n", "    ", "\"\"\" Create a functor for computing the focal loss.\n\n    Args\n        alpha: Scale the focal weight with alpha.\n        gamma: Take the power of the focal weight with gamma.\n\n    Returns\n        A functor that computes the focal loss using the alpha and gamma.\n    \"\"\"", "\n", "\n", "def", "_focal", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\" Compute the focal loss given the target tensor and the predicted tensor.\n\n        As defined in https://arxiv.org/abs/1708.02002\n\n        Args\n            y_true: Tensor of target data from the generator with shape (B, N, num_classes).\n            y_pred: Tensor of predicted data from the network with shape (B, N, num_classes).\n\n        Returns\n            The focal loss of y_pred w.r.t. y_true.\n        \"\"\"", "\n", "labels", "=", "y_true", "\n", "classification", "=", "y_pred", "\n", "\n", "# filter out \"ignore\" anchors", "\n", "anchor_state", "=", "keras", ".", "backend", ".", "max", "(", "labels", ",", "axis", "=", "2", ")", "# -1 for ignore, 0 for background, 1 for object", "\n", "indices", "=", "backend", ".", "where", "(", "keras", ".", "backend", ".", "not_equal", "(", "anchor_state", ",", "-", "1", ")", ")", "\n", "labels", "=", "backend", ".", "gather_nd", "(", "labels", ",", "indices", ")", "\n", "classification", "=", "backend", ".", "gather_nd", "(", "classification", ",", "indices", ")", "\n", "\n", "# compute the focal loss", "\n", "alpha_factor", "=", "keras", ".", "backend", ".", "ones_like", "(", "labels", ")", "*", "alpha", "\n", "alpha_factor", "=", "backend", ".", "where", "(", "keras", ".", "backend", ".", "equal", "(", "labels", ",", "1", ")", ",", "alpha_factor", ",", "1", "-", "alpha_factor", ")", "\n", "focal_weight", "=", "backend", ".", "where", "(", "keras", ".", "backend", ".", "equal", "(", "labels", ",", "1", ")", ",", "1", "-", "classification", ",", "classification", ")", "\n", "focal_weight", "=", "alpha_factor", "*", "focal_weight", "**", "gamma", "\n", "\n", "cls_loss", "=", "focal_weight", "*", "keras", ".", "backend", ".", "binary_crossentropy", "(", "labels", ",", "classification", ")", "\n", "\n", "# compute the normalizer: the number of positive anchors", "\n", "normalizer", "=", "backend", ".", "where", "(", "keras", ".", "backend", ".", "equal", "(", "anchor_state", ",", "1", ")", ")", "\n", "normalizer", "=", "keras", ".", "backend", ".", "cast", "(", "keras", ".", "backend", ".", "shape", "(", "normalizer", ")", "[", "0", "]", ",", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "normalizer", "=", "keras", ".", "backend", ".", "maximum", "(", "1.0", ",", "normalizer", ")", "\n", "\n", "return", "keras", ".", "backend", ".", "sum", "(", "cls_loss", ")", "/", "normalizer", "\n", "\n", "", "return", "_focal", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.smooth_l1": [[71, 119], ["backend.where", "backend.gather_nd", "backend.gather_nd", "keras.backend.abs", "backend.where", "keras.backend.maximum", "keras.backend.cast", "keras.backend.equal", "keras.backend.less", "keras.backend.sum", "keras.backend.pow", "keras.backend.shape", "keras.backend.floatx"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where"], ["", "def", "smooth_l1", "(", "sigma", "=", "3.0", ")", ":", "\n", "    ", "\"\"\" Create a smooth L1 loss functor.\n\n    Args\n        sigma: This argument defines the point where the loss changes from L2 to L1.\n\n    Returns\n        A functor for computing the smooth L1 loss given target data and predicted data.\n    \"\"\"", "\n", "sigma_squared", "=", "sigma", "**", "2", "\n", "\n", "def", "_smooth_l1", "(", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "\"\"\" Compute the smooth L1 loss of y_pred w.r.t. y_true.\n\n        Args\n            y_true: Tensor from the generator of shape (B, N, 5). The last value for each box is the state of the anchor (ignore, negative, positive).\n            y_pred: Tensor from the network of shape (B, N, 4).\n\n        Returns\n            The smooth L1 loss of y_pred w.r.t. y_true.\n        \"\"\"", "\n", "# separate target and state", "\n", "regression", "=", "y_pred", "\n", "regression_target", "=", "y_true", "[", ":", ",", ":", ",", ":", "4", "]", "\n", "anchor_state", "=", "y_true", "[", ":", ",", ":", ",", "4", "]", "\n", "\n", "# filter out \"ignore\" anchors", "\n", "indices", "=", "backend", ".", "where", "(", "keras", ".", "backend", ".", "equal", "(", "anchor_state", ",", "1", ")", ")", "\n", "regression", "=", "backend", ".", "gather_nd", "(", "regression", ",", "indices", ")", "\n", "regression_target", "=", "backend", ".", "gather_nd", "(", "regression_target", ",", "indices", ")", "\n", "\n", "# compute smooth L1 loss", "\n", "# f(x) = 0.5 * (sigma * x)^2          if |x| < 1 / sigma / sigma", "\n", "#        |x| - 0.5 / sigma / sigma    otherwise", "\n", "regression_diff", "=", "regression", "-", "regression_target", "\n", "regression_diff", "=", "keras", ".", "backend", ".", "abs", "(", "regression_diff", ")", "\n", "regression_loss", "=", "backend", ".", "where", "(", "\n", "keras", ".", "backend", ".", "less", "(", "regression_diff", ",", "1.0", "/", "sigma_squared", ")", ",", "\n", "0.5", "*", "sigma_squared", "*", "keras", ".", "backend", ".", "pow", "(", "regression_diff", ",", "2", ")", ",", "\n", "regression_diff", "-", "0.5", "/", "sigma_squared", "\n", ")", "\n", "\n", "# compute the normalizer: the number of positive anchors", "\n", "normalizer", "=", "keras", ".", "backend", ".", "maximum", "(", "1", ",", "keras", ".", "backend", ".", "shape", "(", "indices", ")", "[", "0", "]", ")", "\n", "normalizer", "=", "keras", ".", "backend", ".", "cast", "(", "normalizer", ",", "dtype", "=", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "return", "keras", ".", "backend", ".", "sum", "(", "regression_loss", ")", "/", "normalizer", "\n", "\n", "", "return", "_smooth_l1", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.iou_score": [[121, 147], ["backend.where", "backend.gather_nd", "backend.gather_nd", "keras.backend.expand_dims", "backend.gather_nd", "losses.intersection_over_union", "keras.backend.binary_crossentropy", "keras.backend.maximum", "keras.backend.cast", "keras.backend.sum", "keras.backend.equal", "keras.backend.greater", "keras.backend.shape", "keras.backend.floatx"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.intersection_over_union"], ["", "def", "iou_score", "(", ")", ":", "\n", "    ", "def", "iou_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "# separate target and state", "\n", "        ", "regression", "=", "y_pred", "[", ":", ",", ":", ",", ":", "4", "]", "\n", "y_pred_iou", "=", "y_pred", "[", ":", ",", ":", ",", "4", "]", "\n", "y_pred_hard_scores", "=", "y_pred", "[", ":", ",", ":", ",", "5", "]", "\n", "regression_target", "=", "y_true", "[", ":", ",", ":", ",", ":", "4", "]", "\n", "anchor_state", "=", "y_true", "[", ":", ",", ":", ",", "4", "]", "\n", "\n", "# filter out \"ignore\" anchors", "\n", "indices", "=", "backend", ".", "where", "(", "(", "keras", ".", "backend", ".", "equal", "(", "anchor_state", ",", "1", ")", "&", "(", "keras", ".", "backend", ".", "greater", "(", "y_pred_hard_scores", ",", "0.1", ")", ")", ")", ")", "\n", "regression", "=", "backend", ".", "gather_nd", "(", "regression", ",", "indices", ")", "\n", "y_pred_iou", "=", "backend", ".", "gather_nd", "(", "y_pred_iou", ",", "indices", ")", "\n", "y_pred_iou", "=", "keras", ".", "backend", ".", "expand_dims", "(", "y_pred_iou", ")", "\n", "\n", "regression_target", "=", "backend", ".", "gather_nd", "(", "regression_target", ",", "indices", ")", "\n", "\n", "y_true_iou", "=", "intersection_over_union", "(", "regression_target", ",", "regression", ")", "\n", "iou_loss", "=", "keras", ".", "backend", ".", "binary_crossentropy", "(", "output", "=", "y_pred_iou", ",", "target", "=", "y_true_iou", ")", "\n", "\n", "# compute the normalizer: the number of positive anchors", "\n", "normalizer", "=", "keras", ".", "backend", ".", "maximum", "(", "1", ",", "keras", ".", "backend", ".", "shape", "(", "indices", ")", "[", "0", "]", ")", "\n", "normalizer", "=", "keras", ".", "backend", ".", "cast", "(", "normalizer", ",", "dtype", "=", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "return", "keras", ".", "backend", ".", "sum", "(", "iou_loss", ")", "/", "normalizer", "\n", "\n", "", "return", "iou_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.intersection_over_union": [[149, 167], ["keras.backend.maximum", "keras.backend.maximum", "keras.backend.epsilon", "keras.backend.minimum", "keras.backend.maximum", "keras.backend.minimum", "keras.backend.maximum"], "function", ["None"], ["", "def", "intersection_over_union", "(", "y_true_masks", ",", "y_pred_masks", ")", ":", "\n", "    ", "w_true", "=", "y_true_masks", "[", ":", ",", "2", ":", ":", "4", "]", "-", "y_true_masks", "[", ":", ",", "0", ":", ":", "4", "]", "\n", "h_true", "=", "y_true_masks", "[", ":", ",", "3", ":", ":", "4", "]", "-", "y_true_masks", "[", ":", ",", "1", ":", ":", "4", "]", "\n", "gt_area", "=", "w_true", "*", "h_true", "\n", "\n", "w_pred", "=", "y_pred_masks", "[", ":", ",", "2", ":", ":", "4", "]", "-", "y_pred_masks", "[", ":", ",", "0", ":", ":", "4", "]", "\n", "h_pred", "=", "y_pred_masks", "[", ":", ",", "3", ":", ":", "4", "]", "-", "y_pred_masks", "[", ":", ",", "1", ":", ":", "4", "]", "\n", "pred_area", "=", "w_pred", "*", "h_pred", "\n", "w_intersection", "=", "keras", ".", "backend", ".", "maximum", "(", "0.", ",", "keras", ".", "backend", ".", "minimum", "(", "y_true_masks", "[", ":", ",", "2", ":", ":", "4", "]", ",", "\n", "y_pred_masks", "[", ":", ",", "2", ":", ":", "4", "]", ")", "-", "keras", ".", "backend", ".", "maximum", "(", "\n", "y_true_masks", "[", ":", ",", "0", ":", ":", "4", "]", ",", "y_pred_masks", "[", ":", ",", "0", ":", ":", "4", "]", ")", ")", "\n", "h_intersection", "=", "keras", ".", "backend", ".", "maximum", "(", "0.", ",", "keras", ".", "backend", ".", "minimum", "(", "y_true_masks", "[", ":", ",", "3", ":", ":", "4", "]", ",", "\n", "y_pred_masks", "[", ":", ",", "3", ":", ":", "4", "]", ")", "-", "keras", ".", "backend", ".", "maximum", "(", "\n", "y_true_masks", "[", ":", ",", "1", ":", ":", "4", "]", ",", "y_pred_masks", "[", ":", ",", "1", ":", ":", "4", "]", ")", ")", "\n", "intersection_area", "=", "w_intersection", "*", "h_intersection", "\n", "\n", "union", "=", "pred_area", "+", "gt_area", "-", "intersection_area", "+", "keras", ".", "backend", ".", "epsilon", "(", ")", "\n", "return", "intersection_area", "/", "union", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Image.to_str_row": [[45, 52], ["get_image_size.Image.path.replace"], "methods", ["None"], ["    ", "def", "to_str_row", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"%d\\t%d\\t%d\\t%s\\t%s\"", "%", "(", "\n", "self", ".", "width", ",", "\n", "self", ".", "height", ",", "\n", "self", ".", "file_size", ",", "\n", "self", ".", "type", ",", "\n", "self", ".", "path", ".", "replace", "(", "'\\t'", ",", "'\\\\t'", ")", ",", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Image.to_str_row_verbose": [[54, 62], ["get_image_size.Image.path.replace"], "methods", ["None"], ["", "def", "to_str_row_verbose", "(", "self", ")", ":", "\n", "        ", "return", "(", "\"%d\\t%d\\t%d\\t%s\\t%s\\t##%s\"", "%", "(", "\n", "self", ".", "width", ",", "\n", "self", ".", "height", ",", "\n", "self", ".", "file_size", ",", "\n", "self", ".", "type", ",", "\n", "self", ".", "path", ".", "replace", "(", "'\\t'", ",", "'\\\\t'", ")", ",", "\n", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Image.to_str_json": [[63, 65], ["json.dumps", "get_image_size.Image._asdict"], "methods", ["None"], ["", "def", "to_str_json", "(", "self", ",", "indent", "=", "None", ")", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "self", ".", "_asdict", "(", ")", ",", "indent", "=", "indent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Test_get_image_size.setUp": [[288, 290], ["None"], "methods", ["None"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Test_get_image_size.test_get_image_size_from_bytesio": [[291, 303], ["io.BytesIO", "len", "get_image_size.get_image_size_from_bytesio", "get_image_size.Test_get_image_size.assertTrue", "get_image_size.Test_get_image_size.assertEqual", "io.open", "io.BytesIO.read"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_size_from_bytesio"], ["", "def", "test_get_image_size_from_bytesio", "(", "self", ")", ":", "\n", "        ", "img", "=", "self", ".", "data", "[", "0", "]", "\n", "p", "=", "img", "[", "'path'", "]", "\n", "with", "io", ".", "open", "(", "p", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "b", "=", "fp", ".", "read", "(", ")", "\n", "", "fp", "=", "io", ".", "BytesIO", "(", "b", ")", "\n", "sz", "=", "len", "(", "b", ")", "\n", "output", "=", "get_image_size_from_bytesio", "(", "fp", ",", "sz", ")", "\n", "self", ".", "assertTrue", "(", "output", ")", "\n", "self", ".", "assertEqual", "(", "output", ",", "\n", "(", "img", "[", "'width'", "]", ",", "\n", "img", "[", "'height'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Test_get_image_size.test_get_image_metadata_from_bytesio": [[304, 315], ["io.BytesIO", "len", "get_image_size.get_image_metadata_from_bytesio", "get_image_size.Test_get_image_size.assertTrue", "io.open", "io.BytesIO.read", "get_image_size.Test_get_image_size.assertEqual", "getattr"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata_from_bytesio"], ["", "def", "test_get_image_metadata_from_bytesio", "(", "self", ")", ":", "\n", "        ", "img", "=", "self", ".", "data", "[", "0", "]", "\n", "p", "=", "img", "[", "'path'", "]", "\n", "with", "io", ".", "open", "(", "p", ",", "'rb'", ")", "as", "fp", ":", "\n", "            ", "b", "=", "fp", ".", "read", "(", ")", "\n", "", "fp", "=", "io", ".", "BytesIO", "(", "b", ")", "\n", "sz", "=", "len", "(", "b", ")", "\n", "output", "=", "get_image_metadata_from_bytesio", "(", "fp", ",", "sz", ")", "\n", "self", ".", "assertTrue", "(", "output", ")", "\n", "for", "field", "in", "image_fields", ":", "\n", "            ", "self", ".", "assertEqual", "(", "getattr", "(", "output", ",", "field", ")", ",", "None", "if", "field", "==", "'path'", "else", "img", "[", "field", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Test_get_image_size.test_get_image_metadata": [[316, 322], ["get_image_size.get_image_metadata", "get_image_size.Test_get_image_size.assertTrue", "get_image_size.Test_get_image_size.assertEqual", "getattr"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata"], ["", "", "def", "test_get_image_metadata", "(", "self", ")", ":", "\n", "        ", "img", "=", "self", ".", "data", "[", "0", "]", "\n", "output", "=", "get_image_metadata", "(", "img", "[", "'path'", "]", ")", "\n", "self", ".", "assertTrue", "(", "output", ")", "\n", "for", "field", "in", "image_fields", ":", "\n", "            ", "self", ".", "assertEqual", "(", "getattr", "(", "output", ",", "field", ")", ",", "img", "[", "field", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Test_get_image_size.test_get_image_metadata__ENOENT_OSError": [[323, 326], ["get_image_size.Test_get_image_size.assertRaises", "get_image_size.get_image_metadata"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata"], ["", "", "def", "test_get_image_metadata__ENOENT_OSError", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "OSError", ")", ":", "\n", "            ", "get_image_metadata", "(", "'THIS_DOES_NOT_EXIST'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Test_get_image_size.test_get_image_metadata__not_an_image_UnknownImageFormat": [[327, 330], ["get_image_size.Test_get_image_size.assertRaises", "get_image_size.get_image_metadata"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata"], ["", "", "def", "test_get_image_metadata__not_an_image_UnknownImageFormat", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "UnknownImageFormat", ")", ":", "\n", "            ", "get_image_metadata", "(", "'README.rst'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Test_get_image_size.test_get_image_size": [[331, 338], ["get_image_size.get_image_size", "get_image_size.Test_get_image_size.assertTrue", "get_image_size.Test_get_image_size.assertEqual"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_size"], ["", "", "def", "test_get_image_size", "(", "self", ")", ":", "\n", "        ", "img", "=", "self", ".", "data", "[", "0", "]", "\n", "output", "=", "get_image_size", "(", "img", "[", "'path'", "]", ")", "\n", "self", ".", "assertTrue", "(", "output", ")", "\n", "self", ".", "assertEqual", "(", "output", ",", "\n", "(", "img", "[", "'width'", "]", ",", "\n", "img", "[", "'height'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.Test_get_image_size.tearDown": [[339, 341], ["None"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_size": [[67, 74], ["get_image_size.get_image_metadata"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata"], ["", "", "def", "get_image_size", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    Return (width, height) for a given img file content - no external\n    dependencies except the os and struct builtin modules\n    \"\"\"", "\n", "img", "=", "get_image_metadata", "(", "file_path", ")", "\n", "return", "(", "img", ".", "width", ",", "img", ".", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_size_from_bytesio": [[76, 87], ["get_image_size.get_image_metadata_from_bytesio"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata_from_bytesio"], ["", "def", "get_image_size_from_bytesio", "(", "input", ",", "size", ")", ":", "\n", "    ", "\"\"\"\n    Return (width, height) for a given img file content - no external\n    dependencies except the os and struct builtin modules\n\n    Args:\n        input (io.IOBase): io object support read & seek\n        size (int): size of buffer in byte\n    \"\"\"", "\n", "img", "=", "get_image_metadata_from_bytesio", "(", "input", ",", "size", ")", "\n", "return", "(", "img", ".", "width", ",", "img", ".", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata": [[89, 105], ["os.path.getsize", "io.open", "get_image_size.get_image_metadata_from_bytesio"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata_from_bytesio"], ["", "def", "get_image_metadata", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"\n    Return an `Image` object for a given img file content - no external\n    dependencies except the os and struct builtin modules\n\n    Args:\n        file_path (str): path to an image file\n\n    Returns:\n        Image: (path, type, file_size, width, height)\n    \"\"\"", "\n", "size", "=", "os", ".", "path", ".", "getsize", "(", "file_path", ")", "\n", "\n", "# be explicit with open arguments - we need binary mode", "\n", "with", "io", ".", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "input", ":", "\n", "        ", "return", "get_image_metadata_from_bytesio", "(", "input", ",", "size", ",", "file_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata_from_bytesio": [[107, 275], ["input.read", "get_image_size.Image", "struct.unpack", "int", "int", "input.read.startswith", "struct.unpack", "int", "int", "input.read.startswith", "struct.unpack", "int", "int", "input.read.startswith", "input.seek", "input.read", "input.read", "int", "int", "input.read.startswith", "input.read", "get_image_size.UnknownImageFormat", "get_image_size.UnknownImageFormat", "get_image_size.UnknownImageFormat", "struct.unpack", "struct.unpack", "int", "int", "ord", "ord", "input.read", "ord", "input.read", "input.read", "struct.unpack", "input.read", "struct.unpack", "int", "abs", "get_image_size.UnknownImageFormat", "struct.unpack", "input.seek", "input.read", "range", "input.seek", "input.read", "input.read", "input.read", "input.read", "input.read", "ord", "ord", "get_image_size.UnknownImageFormat", "ord", "ord", "input.read", "int", "struct.unpack", "input.seek", "input.read", "get_image_size.UnknownImageFormat", "get_image_size.UnknownImageFormat", "struct.unpack", "warnings.warn", "int", "str", "struct.unpack", "input.read", "input.seek", "input.read", "int", "str", "struct.unpack", "struct.unpack", "struct.unpack", "get_image_size.UnknownImageFormat", "struct.unpack", "struct.unpack", "input.read", "str"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "", "def", "get_image_metadata_from_bytesio", "(", "input", ",", "size", ",", "file_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return an `Image` object for a given img file content - no external\n    dependencies except the os and struct builtin modules\n\n    Args:\n        input (io.IOBase): io object support read & seek\n        size (int): size of buffer in byte\n        file_path (str): path to an image file\n\n    Returns:\n        Image: (path, type, file_size, width, height)\n    \"\"\"", "\n", "height", "=", "-", "1", "\n", "width", "=", "-", "1", "\n", "data", "=", "input", ".", "read", "(", "26", ")", "\n", "msg", "=", "\" raised while trying to decode as JPEG.\"", "\n", "\n", "if", "(", "size", ">=", "10", ")", "and", "data", "[", ":", "6", "]", "in", "(", "b'GIF87a'", ",", "b'GIF89a'", ")", ":", "\n", "# GIFs", "\n", "        ", "imgtype", "=", "GIF", "\n", "w", ",", "h", "=", "struct", ".", "unpack", "(", "\"<HH\"", ",", "data", "[", "6", ":", "10", "]", ")", "\n", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "elif", "(", "(", "size", ">=", "24", ")", "and", "data", ".", "startswith", "(", "b'\\211PNG\\r\\n\\032\\n'", ")", "\n", "and", "(", "data", "[", "12", ":", "16", "]", "==", "b'IHDR'", ")", ")", ":", "\n", "# PNGs", "\n", "        ", "imgtype", "=", "PNG", "\n", "w", ",", "h", "=", "struct", ".", "unpack", "(", "\">LL\"", ",", "data", "[", "16", ":", "24", "]", ")", "\n", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "elif", "(", "size", ">=", "16", ")", "and", "data", ".", "startswith", "(", "b'\\211PNG\\r\\n\\032\\n'", ")", ":", "\n", "# older PNGs", "\n", "        ", "imgtype", "=", "PNG", "\n", "w", ",", "h", "=", "struct", ".", "unpack", "(", "\">LL\"", ",", "data", "[", "8", ":", "16", "]", ")", "\n", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "elif", "(", "size", ">=", "2", ")", "and", "data", ".", "startswith", "(", "b'\\377\\330'", ")", ":", "\n", "# JPEG", "\n", "        ", "imgtype", "=", "JPEG", "\n", "input", ".", "seek", "(", "0", ")", "\n", "input", ".", "read", "(", "2", ")", "\n", "b", "=", "input", ".", "read", "(", "1", ")", "\n", "try", ":", "\n", "            ", "while", "(", "b", "and", "ord", "(", "b", ")", "!=", "0xDA", ")", ":", "\n", "                ", "while", "(", "ord", "(", "b", ")", "!=", "0xFF", ")", ":", "\n", "                    ", "b", "=", "input", ".", "read", "(", "1", ")", "\n", "", "while", "(", "ord", "(", "b", ")", "==", "0xFF", ")", ":", "\n", "                    ", "b", "=", "input", ".", "read", "(", "1", ")", "\n", "", "if", "(", "ord", "(", "b", ")", ">=", "0xC0", "and", "ord", "(", "b", ")", "<=", "0xC3", ")", ":", "\n", "                    ", "input", ".", "read", "(", "3", ")", "\n", "h", ",", "w", "=", "struct", ".", "unpack", "(", "\">HH\"", ",", "input", ".", "read", "(", "4", ")", ")", "\n", "break", "\n", "", "else", ":", "\n", "                    ", "input", ".", "read", "(", "\n", "int", "(", "struct", ".", "unpack", "(", "\">H\"", ",", "input", ".", "read", "(", "2", ")", ")", "[", "0", "]", ")", "-", "2", ")", "\n", "", "b", "=", "input", ".", "read", "(", "1", ")", "\n", "", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "except", "struct", ".", "error", ":", "\n", "            ", "raise", "UnknownImageFormat", "(", "\"StructError\"", "+", "msg", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "UnknownImageFormat", "(", "\"ValueError\"", "+", "msg", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "UnknownImageFormat", "(", "e", ".", "__class__", ".", "__name__", "+", "msg", ")", "\n", "", "", "elif", "(", "size", ">=", "26", ")", "and", "data", ".", "startswith", "(", "b'BM'", ")", ":", "\n", "# BMP", "\n", "        ", "imgtype", "=", "'BMP'", "\n", "headersize", "=", "struct", ".", "unpack", "(", "\"<I\"", ",", "data", "[", "14", ":", "18", "]", ")", "[", "0", "]", "\n", "if", "headersize", "==", "12", ":", "\n", "            ", "w", ",", "h", "=", "struct", ".", "unpack", "(", "\"<HH\"", ",", "data", "[", "18", ":", "22", "]", ")", "\n", "width", "=", "int", "(", "w", ")", "\n", "height", "=", "int", "(", "h", ")", "\n", "", "elif", "headersize", ">=", "40", ":", "\n", "            ", "w", ",", "h", "=", "struct", ".", "unpack", "(", "\"<ii\"", ",", "data", "[", "18", ":", "26", "]", ")", "\n", "width", "=", "int", "(", "w", ")", "\n", "# as h is negative when stored upside down", "\n", "height", "=", "abs", "(", "int", "(", "h", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "UnknownImageFormat", "(", "\n", "\"Unkown DIB header size:\"", "+", "\n", "str", "(", "headersize", ")", ")", "\n", "", "", "elif", "(", "size", ">=", "8", ")", "and", "data", "[", ":", "4", "]", "in", "(", "b\"II\\052\\000\"", ",", "b\"MM\\000\\052\"", ")", ":", "\n", "# Standard TIFF, big- or little-endian", "\n", "# BigTIFF and other different but TIFF-like formats are not", "\n", "# supported currently", "\n", "        ", "imgtype", "=", "TIFF", "\n", "byteOrder", "=", "data", "[", ":", "2", "]", "\n", "boChar", "=", "\">\"", "if", "byteOrder", "==", "\"MM\"", "else", "\"<\"", "\n", "# maps TIFF type id to size (in bytes)", "\n", "# and python format char for struct", "\n", "tiffTypes", "=", "{", "\n", "1", ":", "(", "1", ",", "boChar", "+", "\"B\"", ")", ",", "# BYTE", "\n", "2", ":", "(", "1", ",", "boChar", "+", "\"c\"", ")", ",", "# ASCII", "\n", "3", ":", "(", "2", ",", "boChar", "+", "\"H\"", ")", ",", "# SHORT", "\n", "4", ":", "(", "4", ",", "boChar", "+", "\"L\"", ")", ",", "# LONG", "\n", "5", ":", "(", "8", ",", "boChar", "+", "\"LL\"", ")", ",", "# RATIONAL", "\n", "6", ":", "(", "1", ",", "boChar", "+", "\"b\"", ")", ",", "# SBYTE", "\n", "7", ":", "(", "1", ",", "boChar", "+", "\"c\"", ")", ",", "# UNDEFINED", "\n", "8", ":", "(", "2", ",", "boChar", "+", "\"h\"", ")", ",", "# SSHORT", "\n", "9", ":", "(", "4", ",", "boChar", "+", "\"l\"", ")", ",", "# SLONG", "\n", "10", ":", "(", "8", ",", "boChar", "+", "\"ll\"", ")", ",", "# SRATIONAL", "\n", "11", ":", "(", "4", ",", "boChar", "+", "\"f\"", ")", ",", "# FLOAT", "\n", "12", ":", "(", "8", ",", "boChar", "+", "\"d\"", ")", "# DOUBLE", "\n", "}", "\n", "ifdOffset", "=", "struct", ".", "unpack", "(", "boChar", "+", "\"L\"", ",", "data", "[", "4", ":", "8", "]", ")", "[", "0", "]", "\n", "try", ":", "\n", "            ", "countSize", "=", "2", "\n", "input", ".", "seek", "(", "ifdOffset", ")", "\n", "ec", "=", "input", ".", "read", "(", "countSize", ")", "\n", "ifdEntryCount", "=", "struct", ".", "unpack", "(", "boChar", "+", "\"H\"", ",", "ec", ")", "[", "0", "]", "\n", "# 2 bytes: TagId + 2 bytes: type + 4 bytes: count of values + 4", "\n", "# bytes: value offset", "\n", "ifdEntrySize", "=", "12", "\n", "for", "i", "in", "range", "(", "ifdEntryCount", ")", ":", "\n", "                ", "entryOffset", "=", "ifdOffset", "+", "countSize", "+", "i", "*", "ifdEntrySize", "\n", "input", ".", "seek", "(", "entryOffset", ")", "\n", "tag", "=", "input", ".", "read", "(", "2", ")", "\n", "tag", "=", "struct", ".", "unpack", "(", "boChar", "+", "\"H\"", ",", "tag", ")", "[", "0", "]", "\n", "if", "(", "tag", "==", "256", "or", "tag", "==", "257", ")", ":", "\n", "# if type indicates that value fits into 4 bytes, value", "\n", "# offset is not an offset but value itself", "\n", "                    ", "type", "=", "input", ".", "read", "(", "2", ")", "\n", "type", "=", "struct", ".", "unpack", "(", "boChar", "+", "\"H\"", ",", "type", ")", "[", "0", "]", "\n", "if", "type", "not", "in", "tiffTypes", ":", "\n", "                        ", "raise", "UnknownImageFormat", "(", "\n", "\"Unkown TIFF field type:\"", "+", "\n", "str", "(", "type", ")", ")", "\n", "", "typeSize", "=", "tiffTypes", "[", "type", "]", "[", "0", "]", "\n", "typeChar", "=", "tiffTypes", "[", "type", "]", "[", "1", "]", "\n", "input", ".", "seek", "(", "entryOffset", "+", "8", ")", "\n", "value", "=", "input", ".", "read", "(", "typeSize", ")", "\n", "value", "=", "int", "(", "struct", ".", "unpack", "(", "typeChar", ",", "value", ")", "[", "0", "]", ")", "\n", "if", "tag", "==", "256", ":", "\n", "                        ", "width", "=", "value", "\n", "", "else", ":", "\n", "                        ", "height", "=", "value", "\n", "", "", "if", "width", ">", "-", "1", "and", "height", ">", "-", "1", ":", "\n", "                    ", "break", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "UnknownImageFormat", "(", "str", "(", "e", ")", ")", "\n", "", "", "elif", "size", ">=", "2", ":", "\n", "# see http://en.wikipedia.org/wiki/ICO_(file_format)", "\n", "        ", "imgtype", "=", "'ICO'", "\n", "input", ".", "seek", "(", "0", ")", "\n", "reserved", "=", "input", ".", "read", "(", "2", ")", "\n", "if", "0", "!=", "struct", ".", "unpack", "(", "\"<H\"", ",", "reserved", ")", "[", "0", "]", ":", "\n", "            ", "raise", "UnknownImageFormat", "(", "FILE_UNKNOWN", ")", "\n", "", "format", "=", "input", ".", "read", "(", "2", ")", "\n", "assert", "1", "==", "struct", ".", "unpack", "(", "\"<H\"", ",", "format", ")", "[", "0", "]", "\n", "num", "=", "input", ".", "read", "(", "2", ")", "\n", "num", "=", "struct", ".", "unpack", "(", "\"<H\"", ",", "num", ")", "[", "0", "]", "\n", "if", "num", ">", "1", ":", "\n", "            ", "import", "warnings", "\n", "warnings", ".", "warn", "(", "\"ICO File contains more than one image\"", ")", "\n", "# http://msdn.microsoft.com/en-us/library/ms997538.aspx", "\n", "", "w", "=", "input", ".", "read", "(", "1", ")", "\n", "h", "=", "input", ".", "read", "(", "1", ")", "\n", "width", "=", "ord", "(", "w", ")", "\n", "height", "=", "ord", "(", "h", ")", "\n", "", "else", ":", "\n", "        ", "raise", "UnknownImageFormat", "(", "FILE_UNKNOWN", ")", "\n", "\n", "", "return", "Image", "(", "path", "=", "file_path", ",", "\n", "type", "=", "imgtype", ",", "\n", "file_size", "=", "size", ",", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.main": [[343, 435], ["optparse.OptionParser", "optparse.OptionParser.add_option", "optparse.OptionParser.add_option", "optparse.OptionParser.add_option", "optparse.OptionParser.add_option", "optparse.OptionParser.add_option", "optparse.OptionParser.parse_args", "logging.basicConfig", "logging.getLogger", "logging.getLogger.debug", "logging.getLogger.debug", "logging.getLogger.debug", "len", "list", "unittest.main", "functools.partial", "len", "optparse.OptionParser.print_help", "print", "optparse.OptionParser.error", "print", "print", "print", "get_image_size.get_image_metadata", "print", "pprint.pformat", "functools.partial.", "logging.getLogger.error", "errors.append", "logging.getLogger.exception", "errors.append"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.main", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_metadata"], ["", "", "def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Print image metadata fields for the given file path.\n\n    Keyword Arguments:\n        argv (list): commandline arguments (e.g. sys.argv[1:])\n    Returns:\n        int: zero for OK\n    \"\"\"", "\n", "import", "logging", "\n", "import", "optparse", "\n", "import", "sys", "\n", "\n", "prs", "=", "optparse", ".", "OptionParser", "(", "\n", "usage", "=", "\"%prog [-v|--verbose] [--json|--json-indent] <path0> [<pathN>]\"", ",", "\n", "description", "=", "\"Print metadata for the given image paths \"", "\n", "\"(without image library bindings).\"", ")", "\n", "\n", "prs", ".", "add_option", "(", "'--json'", ",", "\n", "dest", "=", "'json'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "prs", ".", "add_option", "(", "'--json-indent'", ",", "\n", "dest", "=", "'json_indent'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "\n", "prs", ".", "add_option", "(", "'-v'", ",", "'--verbose'", ",", "\n", "dest", "=", "'verbose'", ",", "\n", "action", "=", "'store_true'", ",", ")", "\n", "prs", ".", "add_option", "(", "'-q'", ",", "'--quiet'", ",", "\n", "dest", "=", "'quiet'", ",", "\n", "action", "=", "'store_true'", ",", ")", "\n", "prs", ".", "add_option", "(", "'-t'", ",", "'--test'", ",", "\n", "dest", "=", "'run_tests'", ",", "\n", "action", "=", "'store_true'", ",", ")", "\n", "\n", "argv", "=", "list", "(", "argv", ")", "if", "argv", "is", "not", "None", "else", "sys", ".", "argv", "[", "1", ":", "]", "\n", "(", "opts", ",", "args", ")", "=", "prs", ".", "parse_args", "(", "args", "=", "argv", ")", "\n", "loglevel", "=", "logging", ".", "INFO", "\n", "if", "opts", ".", "verbose", ":", "\n", "        ", "loglevel", "=", "logging", ".", "DEBUG", "\n", "", "elif", "opts", ".", "quiet", ":", "\n", "        ", "loglevel", "=", "logging", ".", "ERROR", "\n", "", "logging", ".", "basicConfig", "(", "level", "=", "loglevel", ")", "\n", "log", "=", "logging", ".", "getLogger", "(", ")", "\n", "log", ".", "debug", "(", "'argv: %r'", ",", "argv", ")", "\n", "log", ".", "debug", "(", "'opts: %r'", ",", "opts", ")", "\n", "log", ".", "debug", "(", "'args: %r'", ",", "args", ")", "\n", "\n", "if", "opts", ".", "run_tests", ":", "\n", "        ", "import", "sys", "\n", "sys", ".", "argv", "=", "[", "sys", ".", "argv", "[", "0", "]", "]", "+", "args", "\n", "import", "unittest", "\n", "return", "unittest", ".", "main", "(", ")", "\n", "\n", "", "output_func", "=", "Image", ".", "to_str_row", "\n", "if", "opts", ".", "json_indent", ":", "\n", "        ", "import", "functools", "\n", "output_func", "=", "functools", ".", "partial", "(", "Image", ".", "to_str_json", ",", "indent", "=", "2", ")", "\n", "", "elif", "opts", ".", "json", ":", "\n", "        ", "output_func", "=", "Image", ".", "to_str_json", "\n", "", "elif", "opts", ".", "verbose", ":", "\n", "        ", "output_func", "=", "Image", ".", "to_str_row_verbose", "\n", "\n", "", "EX_OK", "=", "0", "\n", "EX_NOT_OK", "=", "2", "\n", "\n", "if", "len", "(", "args", ")", "<", "1", ":", "\n", "        ", "prs", ".", "print_help", "(", ")", "\n", "print", "(", "''", ")", "\n", "prs", ".", "error", "(", "\"You must specify one or more paths to image files\"", ")", "\n", "\n", "", "errors", "=", "[", "]", "\n", "for", "path_arg", "in", "args", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "get_image_metadata", "(", "path_arg", ")", "\n", "print", "(", "output_func", "(", "img", ")", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "raise", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "log", ".", "error", "(", "(", "path_arg", ",", "e", ")", ")", "\n", "errors", ".", "append", "(", "(", "path_arg", ",", "e", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "log", ".", "exception", "(", "e", ")", "\n", "errors", ".", "append", "(", "(", "path_arg", ",", "e", ")", ")", "\n", "pass", "\n", "", "", "if", "len", "(", "errors", ")", ":", "\n", "        ", "import", "pprint", "\n", "print", "(", "\"ERRORS\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "\"======\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "pprint", ".", "pformat", "(", "errors", ",", "indent", "=", "2", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "EX_NOT_OK", "\n", "", "return", "EX_OK", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.__init__": [[183, 229], ["csv_generator_iou.CSVIouGenerator.classes.items", "csv_generator_iou._read_images", "list", "object_detector_retinanet.keras_retinanet.preprocessing.generatorIou.GeneratorIou.__init__", "os.path.dirname", "csv_generator_iou.CSVIouGenerator.image_data.keys", "csv_generator_iou._open_for_csv", "csv_generator_iou._read_classes", "six.raise_from", "csv_generator_iou._open_for_csv", "csv_generator_iou._read_annotations", "six.raise_from", "csv.reader", "ValueError", "csv.reader", "ValueError"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_images", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._open_for_csv", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_classes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._open_for_csv", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_annotations"], ["def", "__init__", "(", "\n", "self", ",", "\n", "csv_data_file", ",", "\n", "csv_class_file", ",", "\n", "base_dir", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\" Initialize a CSV data generator.\n\n        Args\n            csv_data_file: Path to the CSV annotations file.\n            csv_class_file: Path to the CSV classes file.\n            base_dir: Directory w.r.t. where the files are to be searched (defaults to the directory containing the csv_data_file).\n        \"\"\"", "\n", "self", ".", "image_names", "=", "[", "]", "\n", "self", ".", "image_data", "=", "{", "}", "\n", "self", ".", "base_dir", "=", "base_dir", "\n", "\n", "# Take base_dir from annotations file if not explicitly specified.", "\n", "if", "self", ".", "base_dir", "is", "None", ":", "\n", "            ", "self", ".", "base_dir", "=", "os", ".", "path", ".", "dirname", "(", "csv_data_file", ")", "\n", "\n", "# parse the provided class file", "\n", "", "try", ":", "\n", "            ", "with", "_open_for_csv", "(", "csv_class_file", ")", "as", "file", ":", "\n", "                ", "self", ".", "classes", "=", "_read_classes", "(", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "','", ")", ")", "\n", "", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "raise_from", "(", "ValueError", "(", "'invalid CSV class file: {}: {}'", ".", "format", "(", "csv_class_file", ",", "e", ")", ")", ",", "None", ")", "\n", "\n", "", "self", ".", "labels", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "self", ".", "classes", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "labels", "[", "value", "]", "=", "key", "\n", "\n", "# build mappings for existence", "\n", "", "self", ".", "image_existence", "=", "_read_images", "(", "self", ".", "base_dir", ")", "\n", "\n", "# csv with img_path, x1, y1, x2, y2, class_name", "\n", "try", ":", "\n", "            ", "with", "_open_for_csv", "(", "csv_data_file", ")", "as", "file", ":", "\n", "                ", "self", ".", "image_data", "=", "_read_annotations", "(", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "','", ")", ",", "self", ".", "classes", ",", "self", ".", "base_dir", ",", "\n", "self", ".", "image_existence", ")", "\n", "", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "raise_from", "(", "ValueError", "(", "'invalid CSV annotations file: {}: {}'", ".", "format", "(", "csv_data_file", ",", "e", ")", ")", ",", "None", ")", "\n", "", "self", ".", "image_names", "=", "list", "(", "self", ".", "image_data", ".", "keys", "(", ")", ")", "\n", "\n", "super", "(", "CSVIouGenerator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.size": [[230, 234], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the dataset.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "image_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.num_classes": [[235, 239], ["max", "csv_generator_iou.CSVIouGenerator.classes.values"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of classes in the dataset.\n        \"\"\"", "\n", "return", "max", "(", "self", ".", "classes", ".", "values", "(", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.name_to_label": [[240, 244], ["None"], "methods", ["None"], ["", "def", "name_to_label", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\" Map name to label.\n        \"\"\"", "\n", "return", "self", ".", "classes", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.label_to_name": [[245, 249], ["None"], "methods", ["None"], ["", "def", "label_to_name", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\" Map label to name.\n        \"\"\"", "\n", "return", "self", ".", "labels", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.image_path": [[250, 254], ["os.path.join"], "methods", ["None"], ["", "def", "image_path", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Returns the image path for image_index.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "self", ".", "image_names", "[", "image_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.image_aspect_ratio": [[255, 265], ["csv_generator_iou.CSVIouGenerator.image_existence.get", "csv_generator_iou.CSVIouGenerator.image_path", "print", "float", "float", "csv_generator_iou.CSVIouGenerator.image_path"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path"], ["", "def", "image_aspect_ratio", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Compute the aspect ratio for an image with image_index.\n        \"\"\"", "\n", "\n", "image", "=", "self", ".", "image_existence", ".", "get", "(", "self", ".", "image_path", "(", "image_index", ")", ",", "None", ")", "\n", "if", "image", "is", "None", ":", "\n", "            ", "print", "(", "\"Error: Image path {} is not existed\"", ".", "format", "(", "self", ".", "image_path", "(", "image_index", ")", ")", ")", "\n", "\n", "# return float(2448) / float(3264)", "\n", "", "return", "float", "(", "image", "[", "'width'", "]", ")", "/", "float", "(", "image", "[", "'height'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.load_image": [[266, 270], ["utils.image.read_image_bgr", "csv_generator_iou.CSVIouGenerator.image_path"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.read_image_bgr", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path"], ["", "def", "load_image", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Load an image at the image_index.\n        \"\"\"", "\n", "return", "read_image_bgr", "(", "self", ".", "image_path", "(", "image_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou.CSVIouGenerator.load_annotations": [[271, 287], ["numpy.zeros", "enumerate", "float", "float", "float", "float", "csv_generator_iou.CSVIouGenerator.name_to_label", "len"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.name_to_label"], ["", "def", "load_annotations", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Load annotations for an image_index.\n        \"\"\"", "\n", "path", "=", "self", ".", "image_names", "[", "image_index", "]", "\n", "annots", "=", "self", ".", "image_data", "[", "path", "]", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "len", "(", "annots", ")", ",", "5", ")", ")", "\n", "\n", "for", "idx", ",", "annot", "in", "enumerate", "(", "annots", ")", ":", "\n", "            ", "class_name", "=", "annot", "[", "'class'", "]", "\n", "boxes", "[", "idx", ",", "0", "]", "=", "float", "(", "annot", "[", "'x1'", "]", ")", "\n", "boxes", "[", "idx", ",", "1", "]", "=", "float", "(", "annot", "[", "'y1'", "]", ")", "\n", "boxes", "[", "idx", ",", "2", "]", "=", "float", "(", "annot", "[", "'x2'", "]", ")", "\n", "boxes", "[", "idx", ",", "3", "]", "=", "float", "(", "annot", "[", "'y2'", "]", ")", "\n", "boxes", "[", "idx", ",", "4", "]", "=", "self", ".", "name_to_label", "(", "class_name", ")", "\n", "\n", "", "return", "boxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou._parse": [[31, 43], ["function", "six.raise_from", "ValueError", "fmt.format"], "function", ["None"], ["def", "_parse", "(", "value", ",", "function", ",", "fmt", ")", ":", "\n", "    ", "\"\"\"\n    Parse a string into a value, and format a nice ValueError if it fails.\n\n    Returns `function(value)`.\n    Any `ValueError` raised is catched and a new `ValueError` is raised\n    with message `fmt.format(e)`, where `e` is the caught `ValueError`.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "return", "function", "(", "value", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "        ", "raise_from", "(", "ValueError", "(", "fmt", ".", "format", "(", "e", ")", ")", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou._read_classes": [[45, 62], ["enumerate", "csv_generator_iou._parse", "ValueError", "six.raise_from", "ValueError"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse"], ["", "", "def", "_read_classes", "(", "csv_reader", ")", ":", "\n", "    ", "\"\"\" Parse the classes file given by csv_reader.\n    \"\"\"", "\n", "result", "=", "{", "}", "\n", "for", "line", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "        ", "line", "+=", "1", "\n", "\n", "try", ":", "\n", "            ", "class_name", ",", "class_id", "=", "row", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise_from", "(", "ValueError", "(", "'line {}: format should be \\'class_name,class_id\\''", ".", "format", "(", "line", ")", ")", ",", "None", ")", "\n", "", "class_id", "=", "_parse", "(", "class_id", ",", "int", ",", "'line {}: malformed class ID: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "\n", "if", "class_name", "in", "result", ":", "\n", "            ", "raise", "ValueError", "(", "'line {}: duplicate class name: \\'{}\\''", ".", "format", "(", "line", ",", "class_name", ")", ")", "\n", "", "result", "[", "class_name", "]", "=", "class_id", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou._read_images": [[64, 94], ["os.path.join", "len", "os.listdir", "os.listdir", "os.path.isdir", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "object_detector_retinanet.keras_retinanet.preprocessing.get_image_size.get_image_size", "print", "print", "str"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_size"], ["", "def", "_read_images", "(", "base_dir", ")", ":", "\n", "\n", "    ", "result", "=", "{", "}", "\n", "dirs", "=", "[", "os", ".", "path", ".", "join", "(", "base_dir", ",", "o", ")", "for", "o", "in", "os", ".", "listdir", "(", "base_dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "o", ")", ")", "]", "\n", "if", "len", "(", "dirs", ")", "==", "0", ":", "\n", "        ", "dirs", "=", "[", "''", "]", "\n", "", "for", "project", "in", "dirs", ":", "\n", "        ", "project_imgs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "project", ")", ")", "\n", "i", "=", "0", "\n", "for", "image", "in", "project_imgs", ":", "\n", "            ", "try", ":", "\n", "                ", "img_file", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "project", ",", "image", ")", "\n", "# Check images exists", "\n", "exists", "=", "os", ".", "path", ".", "isfile", "(", "img_file", ")", "\n", "\n", "if", "not", "exists", ":", "\n", "                    ", "print", "(", "\"Warning: Image file {} is not existing\"", ".", "format", "(", "img_file", ")", ")", "\n", "continue", "\n", "\n", "# Image shape", "\n", "", "height", ",", "width", "=", "get_image_size", "(", "img_file", ")", "\n", "result", "[", "img_file", "]", "=", "{", "\"width\"", ":", "width", ",", "\"height\"", ":", "height", "}", "\n", "i", "+=", "1", "\n", "# if i == 10:", "\n", "#     break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Error: {} in image: {}\"", ".", "format", "(", "str", "(", "e", ")", ",", "img_file", ")", ")", "\n", "continue", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou._read_annotations": [[96, 163], ["enumerate", "csv_generator_iou._parse", "csv_generator_iou._parse", "csv_generator_iou._parse", "csv_generator_iou._parse", "result[].append", "int", "int", "int", "int", "int", "int", "os.path.join", "ValueError", "ValueError", "ValueError", "print", "print", "six.raise_from", "ValueError"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse"], ["", "def", "_read_annotations", "(", "csv_reader", ",", "classes", ",", "base_dir", ",", "image_existence", ")", ":", "\n", "    ", "\"\"\" Read annotations from the csv_reader.\n    \"\"\"", "\n", "result", "=", "{", "}", "\n", "for", "line", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "        ", "line", "+=", "1", "\n", "\n", "try", ":", "\n", "            ", "img_file", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "class_name", ",", "width", ",", "height", "=", "row", "[", ":", "]", "\n", "x1", "=", "int", "(", "x1", ")", "\n", "x2", "=", "int", "(", "x2", ")", "\n", "y1", "=", "int", "(", "y1", ")", "\n", "y2", "=", "int", "(", "y2", ")", "\n", "width", "=", "int", "(", "width", ")", "\n", "height", "=", "int", "(", "height", ")", "\n", "\n", "if", "x1", ">=", "width", ":", "\n", "                ", "x1", "=", "width", "-", "1", "\n", "", "if", "x2", ">=", "width", ":", "\n", "                ", "x2", "=", "width", "-", "1", "\n", "\n", "", "if", "y1", ">", "height", ":", "\n", "                ", "y1", "=", "height", "-", "1", "\n", "", "if", "y2", ">=", "height", ":", "\n", "                ", "y2", "=", "height", "-", "1", "\n", "\n", "# x1 < 0 | y1 < 0 | x2 <= 0 | y2 <= 0", "\n", "", "if", "x1", "<", "0", "or", "y1", "<", "0", "or", "x2", "<=", "0", "or", "y2", "<=", "0", ":", "\n", "                ", "print", "(", "\"Warning: Image file {} has some bad boxes annotations\"", ".", "format", "(", "img_file", ")", ")", "\n", "continue", "\n", "\n", "# Append root path", "\n", "", "img_file", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "img_file", ")", "\n", "# Check images exists", "\n", "if", "img_file", "not", "in", "image_existence", ":", "\n", "                ", "print", "(", "\"Warning: Image file {} is not existing\"", ".", "format", "(", "img_file", ")", ")", "\n", "continue", "\n", "\n", "", "", "except", "ValueError", ":", "\n", "            ", "raise_from", "(", "ValueError", "(", "\n", "'line {}: format should be \\'img_file,x1,y1,x2,y2,class_name\\' or \\'img_file,,,,,\\''", ".", "format", "(", "line", ")", ")", ",", "\n", "None", ")", "\n", "\n", "", "if", "img_file", "not", "in", "result", ":", "\n", "            ", "result", "[", "img_file", "]", "=", "[", "]", "\n", "\n", "# If a row contains only an image path, it's an image without annotations.", "\n", "", "if", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "class_name", ")", "==", "(", "''", ",", "''", ",", "''", ",", "''", ",", "''", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "x1", "=", "_parse", "(", "x1", ",", "int", ",", "'line {}: malformed x1: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "y1", "=", "_parse", "(", "y1", ",", "int", ",", "'line {}: malformed y1: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "x2", "=", "_parse", "(", "x2", ",", "int", ",", "'line {}: malformed x2: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "y2", "=", "_parse", "(", "y2", ",", "int", ",", "'line {}: malformed y2: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "\n", "# Check that the bounding box is valid.", "\n", "if", "x2", "<=", "x1", ":", "\n", "            ", "raise", "ValueError", "(", "'line {}: x2 ({}) must be higher than x1 ({})'", ".", "format", "(", "line", ",", "x2", ",", "x1", ")", ")", "\n", "", "if", "y2", "<=", "y1", ":", "\n", "            ", "raise", "ValueError", "(", "'line {}: y2 ({}) must be higher than y1 ({})'", ".", "format", "(", "line", ",", "y2", ",", "y1", ")", ")", "\n", "\n", "# check if the current class name is correctly present", "\n", "", "if", "class_name", "not", "in", "classes", ":", "\n", "            ", "raise", "ValueError", "(", "'line {}: unknown class name: \\'{}\\' (classes: {})'", ".", "format", "(", "line", ",", "class_name", ",", "classes", ")", ")", "\n", "\n", "", "result", "[", "img_file", "]", ".", "append", "(", "{", "'x1'", ":", "x1", ",", "'x2'", ":", "x2", ",", "'y1'", ":", "y1", ",", "'y2'", ":", "y2", ",", "'class'", ":", "class_name", "}", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator_iou._open_for_csv": [[165, 175], ["open", "open"], "function", ["None"], ["", "def", "_open_for_csv", "(", "path", ")", ":", "\n", "    ", "\"\"\" Open a file with flags suitable for csv.reader.\n\n    This is different for python2 it means with mode 'rb',\n    for python3 this means 'r' with \"universal newlines\".\n    \"\"\"", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "        ", "return", "open", "(", "path", ",", "'rb'", ")", "\n", "", "else", ":", "\n", "        ", "return", "open", "(", "path", ",", "'r'", ",", "newline", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.__init__": [[39, 75], ["int", "threading.Lock", "generator.Generator.group_images", "utils.image.TransformParameters"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.group_images"], ["def", "__init__", "(", "\n", "self", ",", "\n", "transform_generator", "=", "None", ",", "\n", "batch_size", "=", "1", ",", "\n", "group_method", "=", "'ratio'", ",", "# one of 'none', 'random', 'ratio'", "\n", "shuffle_groups", "=", "True", ",", "\n", "image_min_side", "=", "800", ",", "\n", "image_max_side", "=", "1333", ",", "\n", "transform_parameters", "=", "None", ",", "\n", "compute_anchor_targets", "=", "anchor_targets_bbox", ",", "\n", ")", ":", "\n", "        ", "\"\"\" Initialize Generator object.\n\n        Args\n            transform_generator    : A generator used to randomly transform images and annotations.\n            batch_size             : The size of the batches to generate.\n            group_method           : Determines how images are grouped together (defaults to 'ratio', one of ('none', 'random', 'ratio')).\n            shuffle_groups         : If True, shuffles the groups each epoch.\n            image_min_side         : After resizing the minimum side of an image is equal to image_min_side.\n            image_max_side         : If after resizing the maximum side is larger than image_max_side, scales down further so that the max side is equal to image_max_side.\n            transform_parameters   : The transform parameters used for data augmentation.\n            compute_anchor_targets : Function handler for computing the targets of anchors for an image and its annotations.\n        \"\"\"", "\n", "self", ".", "transform_generator", "=", "transform_generator", "\n", "self", ".", "batch_size", "=", "int", "(", "batch_size", ")", "\n", "self", ".", "group_method", "=", "group_method", "\n", "self", ".", "shuffle_groups", "=", "shuffle_groups", "\n", "self", ".", "image_min_side", "=", "image_min_side", "\n", "self", ".", "image_max_side", "=", "image_max_side", "\n", "self", ".", "transform_parameters", "=", "transform_parameters", "or", "TransformParameters", "(", ")", "\n", "self", ".", "compute_anchor_targets", "=", "compute_anchor_targets", "\n", "\n", "self", ".", "group_index", "=", "0", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "self", ".", "group_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.size": [[76, 80], ["NotImplementedError"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the dataset.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'size method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.num_classes": [[81, 85], ["NotImplementedError"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of classes in the dataset.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'num_classes method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.name_to_label": [[86, 90], ["NotImplementedError"], "methods", ["None"], ["", "def", "name_to_label", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\" Map name to label.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'name_to_label method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.label_to_name": [[91, 95], ["NotImplementedError"], "methods", ["None"], ["", "def", "label_to_name", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\" Map label to name.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'label_to_name method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.image_aspect_ratio": [[96, 100], ["NotImplementedError"], "methods", ["None"], ["", "def", "image_aspect_ratio", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Compute the aspect ratio for an image with image_index.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'image_aspect_ratio method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.load_image": [[101, 105], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Load an image at the image_index.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'load_image method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.load_annotations": [[106, 110], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Load annotations for an image_index.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'load_annotations method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.load_annotations_group": [[111, 115], ["generator.Generator.load_annotations"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_annotations"], ["", "def", "load_annotations_group", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\" Load annotations for all images in group.\n        \"\"\"", "\n", "return", "[", "self", ".", "load_annotations", "(", "image_index", ")", "for", "image_index", "in", "group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.filter_annotations": [[116, 143], ["enumerate", "zip", "isinstance", "len", "type", "numpy.where", "warnings.warn", "numpy.delete"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where"], ["", "def", "filter_annotations", "(", "self", ",", "image_group", ",", "annotations_group", ",", "group", ")", ":", "\n", "        ", "\"\"\" Filter annotations by removing those that are outside of the image bounds or whose width/height < 0.\n        \"\"\"", "\n", "# test all annotations", "\n", "for", "index", ",", "(", "image", ",", "annotations", ")", "in", "enumerate", "(", "zip", "(", "image_group", ",", "annotations_group", ")", ")", ":", "\n", "            ", "assert", "(", "isinstance", "(", "annotations", ",", "np", ".", "ndarray", ")", ")", ",", "'\\'load_annotations\\' should return a list of numpy arrays, received: {}'", ".", "format", "(", "type", "(", "annotations", ")", ")", "\n", "\n", "# test x2 < x1 | y2 < y1 | x1 < 0 | y1 < 0 | x2 <= 0 | y2 <= 0 | x2 >= image.shape[1] | y2 >= image.shape[0]", "\n", "invalid_indices", "=", "np", ".", "where", "(", "\n", "(", "annotations", "[", ":", ",", "2", "]", "<=", "annotations", "[", ":", ",", "0", "]", ")", "|", "\n", "(", "annotations", "[", ":", ",", "3", "]", "<=", "annotations", "[", ":", ",", "1", "]", ")", "|", "\n", "(", "annotations", "[", ":", ",", "0", "]", "<", "0", ")", "|", "\n", "(", "annotations", "[", ":", ",", "1", "]", "<", "0", ")", "|", "\n", "(", "annotations", "[", ":", ",", "2", "]", ">", "image", ".", "shape", "[", "1", "]", ")", "|", "\n", "(", "annotations", "[", ":", ",", "3", "]", ">", "image", ".", "shape", "[", "0", "]", ")", "\n", ")", "[", "0", "]", "\n", "\n", "# delete invalid indices", "\n", "if", "len", "(", "invalid_indices", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "'Image with id {} (shape {}) contains the following invalid boxes: {}.'", ".", "format", "(", "\n", "group", "[", "index", "]", ",", "\n", "image", ".", "shape", ",", "\n", "[", "annotations", "[", "invalid_index", ",", ":", "]", "for", "invalid_index", "in", "invalid_indices", "]", "\n", ")", ")", "\n", "annotations_group", "[", "index", "]", "=", "np", ".", "delete", "(", "annotations", ",", "invalid_indices", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "image_group", ",", "annotations_group", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.load_image_group": [[144, 148], ["generator.Generator.load_image"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_image"], ["", "def", "load_image_group", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\" Load images for all images in a group.\n        \"\"\"", "\n", "return", "[", "self", ".", "load_image", "(", "image_index", ")", "for", "image_index", "in", "group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.random_transform_group_entry": [[149, 163], ["utils.image.adjust_transform_for_image", "utils.image.apply_transform", "annotations.copy.copy.copy", "range", "generator.Generator.next"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.adjust_transform_for_image", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.apply_transform", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.next"], ["", "def", "random_transform_group_entry", "(", "self", ",", "image", ",", "annotations", ")", ":", "\n", "        ", "\"\"\" Randomly transforms image and annotation.\n        \"\"\"", "\n", "# randomly transform both image and annotations", "\n", "if", "self", ".", "transform_generator", ":", "\n", "            ", "transform", "=", "adjust_transform_for_image", "(", "next", "(", "self", ".", "transform_generator", ")", ",", "image", ",", "self", ".", "transform_parameters", ".", "relative_translation", ")", "\n", "image", "=", "apply_transform", "(", "transform", ",", "image", ",", "self", ".", "transform_parameters", ")", "\n", "\n", "# Transform the bounding boxes in the annotations.", "\n", "annotations", "=", "annotations", ".", "copy", "(", ")", "\n", "for", "index", "in", "range", "(", "annotations", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "annotations", "[", "index", ",", ":", "4", "]", "=", "transform_aabb", "(", "transform", ",", "annotations", "[", "index", ",", ":", "4", "]", ")", "\n", "\n", "", "", "return", "image", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.resize_image": [[164, 168], ["utils.image.resize_image"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.resize_image"], ["", "def", "resize_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\" Resize an image using image_min_side and image_max_side.\n        \"\"\"", "\n", "return", "resize_image", "(", "image", ",", "min_side", "=", "self", ".", "image_min_side", ",", "max_side", "=", "self", ".", "image_max_side", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.preprocess_image": [[169, 173], ["utils.image.preprocess_image"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.preprocess_image"], ["", "def", "preprocess_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\" Preprocess an image (e.g. subtracts ImageNet mean).\n        \"\"\"", "\n", "return", "preprocess_image", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.preprocess_group_entry": [[174, 190], ["generator.Generator.preprocess_image", "generator.Generator.random_transform_group_entry", "generator.Generator.resize_image"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.preprocess_image", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.random_transform_group_entry", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.resize_image"], ["", "def", "preprocess_group_entry", "(", "self", ",", "image", ",", "annotations", ")", ":", "\n", "        ", "\"\"\" Preprocess image and its annotations.\n        \"\"\"", "\n", "# preprocess the image", "\n", "image", "=", "self", ".", "preprocess_image", "(", "image", ")", "\n", "\n", "# randomly transform image and annotations", "\n", "image", ",", "annotations", "=", "self", ".", "random_transform_group_entry", "(", "image", ",", "annotations", ")", "\n", "\n", "# resize image", "\n", "image", ",", "image_scale", "=", "self", ".", "resize_image", "(", "image", ")", "\n", "\n", "# apply resizing to annotations too", "\n", "annotations", "[", ":", ",", ":", "4", "]", "*=", "image_scale", "\n", "\n", "return", "image", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.preprocess_group": [[191, 203], ["enumerate", "zip", "generator.Generator.preprocess_group_entry"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.preprocess_group_entry"], ["", "def", "preprocess_group", "(", "self", ",", "image_group", ",", "annotations_group", ")", ":", "\n", "        ", "\"\"\" Preprocess each image and its annotations in its group.\n        \"\"\"", "\n", "for", "index", ",", "(", "image", ",", "annotations", ")", "in", "enumerate", "(", "zip", "(", "image_group", ",", "annotations_group", ")", ")", ":", "\n", "# preprocess a single group entry", "\n", "            ", "image", ",", "annotations", "=", "self", ".", "preprocess_group_entry", "(", "image", ",", "annotations", ")", "\n", "\n", "# copy processed data back to group", "\n", "image_group", "[", "index", "]", "=", "image", "\n", "annotations_group", "[", "index", "]", "=", "annotations", "\n", "\n", "", "return", "image_group", ",", "annotations_group", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.group_images": [[204, 216], ["list", "range", "random.shuffle", "generator.Generator.size", "list.sort", "range", "range", "len", "generator.Generator.image_aspect_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.image_aspect_ratio"], ["", "def", "group_images", "(", "self", ")", ":", "\n", "        ", "\"\"\" Order the images according to self.order and makes groups of self.batch_size.\n        \"\"\"", "\n", "# determine the order of the images", "\n", "order", "=", "list", "(", "range", "(", "self", ".", "size", "(", ")", ")", ")", "\n", "if", "self", ".", "group_method", "==", "'random'", ":", "\n", "            ", "random", ".", "shuffle", "(", "order", ")", "\n", "", "elif", "self", ".", "group_method", "==", "'ratio'", ":", "\n", "            ", "order", ".", "sort", "(", "key", "=", "lambda", "x", ":", "self", ".", "image_aspect_ratio", "(", "x", ")", ")", "\n", "\n", "# divide into groups, one group = one batch", "\n", "", "self", ".", "groups", "=", "[", "[", "order", "[", "x", "%", "len", "(", "order", ")", "]", "for", "x", "in", "range", "(", "i", ",", "i", "+", "self", ".", "batch_size", ")", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "order", ")", ",", "self", ".", "batch_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.compute_inputs": [[217, 231], ["tuple", "numpy.zeros", "enumerate", "max", "keras.backend.floatx", "range"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "compute_inputs", "(", "self", ",", "image_group", ")", ":", "\n", "        ", "\"\"\" Compute inputs for the network using an image_group.\n        \"\"\"", "\n", "# get the max image shape", "\n", "max_shape", "=", "tuple", "(", "max", "(", "image", ".", "shape", "[", "x", "]", "for", "image", "in", "image_group", ")", "for", "x", "in", "range", "(", "3", ")", ")", "\n", "\n", "# construct an image batch object", "\n", "image_batch", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", "+", "max_shape", ",", "dtype", "=", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "\n", "# copy all images to the upper left part of the image batch object", "\n", "for", "image_index", ",", "image", "in", "enumerate", "(", "image_group", ")", ":", "\n", "            ", "image_batch", "[", "image_index", ",", ":", "image", ".", "shape", "[", "0", "]", ",", ":", "image", ".", "shape", "[", "1", "]", ",", ":", "image", ".", "shape", "[", "2", "]", "]", "=", "image", "\n", "\n", "", "return", "image_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.compute_targets": [[232, 264], ["tuple", "enumerate", "numpy.zeros", "numpy.zeros", "enumerate", "zip", "generator.Generator.compute_anchor_targets", "utils.anchors.bbox_transform", "numpy.max", "numpy.append", "zip", "max", "generator.Generator.num_classes", "keras.backend.floatx", "keras.backend.floatx", "range"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.bbox_transform", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.num_classes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "compute_targets", "(", "self", ",", "image_group", ",", "annotations_group", ")", ":", "\n", "        ", "\"\"\" Compute target outputs for the network using images and their annotations.\n        \"\"\"", "\n", "# get the max image shape", "\n", "max_shape", "=", "tuple", "(", "max", "(", "image", ".", "shape", "[", "x", "]", "for", "image", "in", "image_group", ")", "for", "x", "in", "range", "(", "3", ")", ")", "\n", "\n", "# compute labels and regression targets", "\n", "labels_group", "=", "[", "None", "]", "*", "self", ".", "batch_size", "\n", "regression_group", "=", "[", "None", "]", "*", "self", ".", "batch_size", "\n", "for", "index", ",", "(", "image", ",", "annotations", ")", "in", "enumerate", "(", "zip", "(", "image_group", ",", "annotations_group", ")", ")", ":", "\n", "# compute regression targets", "\n", "            ", "labels_group", "[", "index", "]", ",", "annotations", ",", "anchors", "=", "self", ".", "compute_anchor_targets", "(", "\n", "max_shape", ",", "\n", "annotations", ",", "\n", "self", ".", "num_classes", "(", ")", ",", "\n", "mask_shape", "=", "image", ".", "shape", ",", "\n", ")", "\n", "regression_group", "[", "index", "]", "=", "bbox_transform", "(", "anchors", ",", "annotations", ")", "\n", "\n", "# append anchor states to regression targets (necessary for filtering 'ignore', 'positive' and 'negative' anchors)", "\n", "anchor_states", "=", "np", ".", "max", "(", "labels_group", "[", "index", "]", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "regression_group", "[", "index", "]", "=", "np", ".", "append", "(", "regression_group", "[", "index", "]", ",", "anchor_states", ",", "axis", "=", "1", ")", "\n", "\n", "", "labels_batch", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", "+", "labels_group", "[", "0", "]", ".", "shape", ",", "dtype", "=", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "regression_batch", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", "+", "regression_group", "[", "0", "]", ".", "shape", ",", "dtype", "=", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "\n", "# copy all labels and regression values to the batch blob", "\n", "for", "index", ",", "(", "labels", ",", "regression", ")", "in", "enumerate", "(", "zip", "(", "labels_group", ",", "regression_group", ")", ")", ":", "\n", "            ", "labels_batch", "[", "index", ",", "...", "]", "=", "labels", "\n", "regression_batch", "[", "index", ",", "...", "]", "=", "regression", "\n", "\n", "", "return", "[", "regression_batch", ",", "labels_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.compute_input_output": [[265, 285], ["generator.Generator.load_image_group", "generator.Generator.load_annotations_group", "generator.Generator.filter_annotations", "generator.Generator.preprocess_group", "generator.Generator.compute_inputs", "generator.Generator.compute_targets"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_image_group", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_annotations_group", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.filter_annotations", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.preprocess_group", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_inputs", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_targets"], ["", "def", "compute_input_output", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\" Compute inputs and target outputs for the network.\n        \"\"\"", "\n", "# load images and annotations", "\n", "image_group", "=", "self", ".", "load_image_group", "(", "group", ")", "\n", "annotations_group", "=", "self", ".", "load_annotations_group", "(", "group", ")", "\n", "\n", "# check validity of annotations", "\n", "image_group", ",", "annotations_group", "=", "self", ".", "filter_annotations", "(", "image_group", ",", "annotations_group", ",", "group", ")", "\n", "\n", "# perform preprocessing steps", "\n", "image_group", ",", "annotations_group", "=", "self", ".", "preprocess_group", "(", "image_group", ",", "annotations_group", ")", "\n", "\n", "# compute network inputs", "\n", "inputs", "=", "self", ".", "compute_inputs", "(", "image_group", ")", "\n", "\n", "# compute network targets", "\n", "targets", "=", "self", ".", "compute_targets", "(", "image_group", ",", "annotations_group", ")", "\n", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.__next__": [[286, 288], ["generator.Generator.next"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generator.Generator.next": [[289, 299], ["generator.Generator.compute_input_output", "random.shuffle", "len"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_input_output"], ["", "def", "next", "(", "self", ")", ":", "\n", "# advance the group index", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "if", "self", ".", "group_index", "==", "0", "and", "self", ".", "shuffle_groups", ":", "\n", "# shuffle groups at start of epoch", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "groups", ")", "\n", "", "group", "=", "self", ".", "groups", "[", "self", ".", "group_index", "]", "\n", "self", ".", "group_index", "=", "(", "self", ".", "group_index", "+", "1", ")", "%", "len", "(", "self", ".", "groups", ")", "\n", "\n", "", "return", "self", ".", "compute_input_output", "(", "group", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.__init__": [[184, 230], ["csv_generator.CSVGenerator.classes.items", "csv_generator._read_images", "list", "generator.Generator.__init__", "os.path.dirname", "csv_generator.CSVGenerator.image_data.keys", "csv_generator._open_for_csv", "csv_generator._read_classes", "six.raise_from", "csv_generator._open_for_csv", "csv_generator._read_annotations", "six.raise_from", "csv.reader", "ValueError", "csv.reader", "ValueError"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_images", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._open_for_csv", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_classes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._open_for_csv", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_annotations"], ["def", "__init__", "(", "\n", "self", ",", "\n", "csv_data_file", ",", "\n", "csv_class_file", ",", "\n", "base_dir", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\" Initialize a CSV data generator.\n\n        Args\n            csv_data_file: Path to the CSV annotations file.\n            csv_class_file: Path to the CSV classes file.\n            base_dir: Directory w.r.t. where the files are to be searched (defaults to the directory containing the csv_data_file).\n        \"\"\"", "\n", "self", ".", "image_names", "=", "[", "]", "\n", "self", ".", "image_data", "=", "{", "}", "\n", "self", ".", "base_dir", "=", "base_dir", "\n", "\n", "# Take base_dir from annotations file if not explicitly specified.", "\n", "if", "self", ".", "base_dir", "is", "None", ":", "\n", "            ", "self", ".", "base_dir", "=", "os", ".", "path", ".", "dirname", "(", "csv_data_file", ")", "\n", "\n", "# parse the provided class file", "\n", "", "try", ":", "\n", "            ", "with", "_open_for_csv", "(", "csv_class_file", ")", "as", "file", ":", "\n", "                ", "self", ".", "classes", "=", "_read_classes", "(", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "','", ")", ")", "\n", "", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "raise_from", "(", "ValueError", "(", "'invalid CSV class file: {}: {}'", ".", "format", "(", "csv_class_file", ",", "e", ")", ")", ",", "None", ")", "\n", "\n", "", "self", ".", "labels", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "self", ".", "classes", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "labels", "[", "value", "]", "=", "key", "\n", "\n", "# build mappings for existence", "\n", "", "self", ".", "image_existence", "=", "_read_images", "(", "self", ".", "base_dir", ")", "\n", "\n", "# csv with img_path, x1, y1, x2, y2, class_name", "\n", "try", ":", "\n", "            ", "with", "_open_for_csv", "(", "csv_data_file", ")", "as", "file", ":", "\n", "                ", "self", ".", "image_data", "=", "_read_annotations", "(", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "','", ")", ",", "self", ".", "classes", ",", "self", ".", "base_dir", ",", "\n", "self", ".", "image_existence", ")", "\n", "", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "raise_from", "(", "ValueError", "(", "'invalid CSV annotations file: {}: {}'", ".", "format", "(", "csv_data_file", ",", "e", ")", ")", ",", "None", ")", "\n", "", "self", ".", "image_names", "=", "list", "(", "self", ".", "image_data", ".", "keys", "(", ")", ")", "\n", "\n", "super", "(", "CSVGenerator", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.size": [[231, 235], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the dataset.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "image_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.num_classes": [[236, 240], ["max", "csv_generator.CSVGenerator.classes.values"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of classes in the dataset.\n        \"\"\"", "\n", "return", "max", "(", "self", ".", "classes", ".", "values", "(", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.name_to_label": [[241, 245], ["None"], "methods", ["None"], ["", "def", "name_to_label", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\" Map name to label.\n        \"\"\"", "\n", "return", "self", ".", "classes", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.label_to_name": [[246, 250], ["None"], "methods", ["None"], ["", "def", "label_to_name", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\" Map label to name.\n        \"\"\"", "\n", "return", "self", ".", "labels", "[", "label", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path": [[251, 255], ["os.path.join"], "methods", ["None"], ["", "def", "image_path", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Returns the image path for image_index.\n        \"\"\"", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "base_dir", ",", "self", ".", "image_names", "[", "image_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_aspect_ratio": [[256, 266], ["csv_generator.CSVGenerator.image_existence.get", "csv_generator.CSVGenerator.image_path", "print", "float", "float", "csv_generator.CSVGenerator.image_path"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path"], ["", "def", "image_aspect_ratio", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Compute the aspect ratio for an image with image_index.\n        \"\"\"", "\n", "\n", "image", "=", "self", ".", "image_existence", ".", "get", "(", "self", ".", "image_path", "(", "image_index", ")", ",", "None", ")", "\n", "if", "image", "is", "None", ":", "\n", "            ", "print", "(", "\"Error: Image path {} is not existed\"", ".", "format", "(", "self", ".", "image_path", "(", "image_index", ")", ")", ")", "\n", "\n", "# return float(2448) / float(3264)", "\n", "", "return", "float", "(", "image", "[", "'width'", "]", ")", "/", "float", "(", "image", "[", "'height'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.load_image": [[267, 271], ["utils.image.read_image_bgr", "csv_generator.CSVGenerator.image_path"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.read_image_bgr", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path"], ["", "def", "load_image", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Load an image at the image_index.\n        \"\"\"", "\n", "return", "read_image_bgr", "(", "self", ".", "image_path", "(", "image_index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.load_annotations": [[272, 288], ["numpy.zeros", "enumerate", "float", "float", "float", "float", "csv_generator.CSVGenerator.name_to_label", "len"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.name_to_label"], ["", "def", "load_annotations", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Load annotations for an image_index.\n        \"\"\"", "\n", "path", "=", "self", ".", "image_names", "[", "image_index", "]", "\n", "annots", "=", "self", ".", "image_data", "[", "path", "]", "\n", "boxes", "=", "np", ".", "zeros", "(", "(", "len", "(", "annots", ")", ",", "5", ")", ")", "\n", "\n", "for", "idx", ",", "annot", "in", "enumerate", "(", "annots", ")", ":", "\n", "            ", "class_name", "=", "annot", "[", "'class'", "]", "\n", "boxes", "[", "idx", ",", "0", "]", "=", "float", "(", "annot", "[", "'x1'", "]", ")", "\n", "boxes", "[", "idx", ",", "1", "]", "=", "float", "(", "annot", "[", "'y1'", "]", ")", "\n", "boxes", "[", "idx", ",", "2", "]", "=", "float", "(", "annot", "[", "'x2'", "]", ")", "\n", "boxes", "[", "idx", ",", "3", "]", "=", "float", "(", "annot", "[", "'y2'", "]", ")", "\n", "boxes", "[", "idx", ",", "4", "]", "=", "self", ".", "name_to_label", "(", "class_name", ")", "\n", "\n", "", "return", "boxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse": [[32, 44], ["function", "six.raise_from", "ValueError", "fmt.format"], "function", ["None"], ["def", "_parse", "(", "value", ",", "function", ",", "fmt", ")", ":", "\n", "    ", "\"\"\"\n    Parse a string into a value, and format a nice ValueError if it fails.\n\n    Returns `function(value)`.\n    Any `ValueError` raised is catched and a new `ValueError` is raised\n    with message `fmt.format(e)`, where `e` is the caught `ValueError`.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "return", "function", "(", "value", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "        ", "raise_from", "(", "ValueError", "(", "fmt", ".", "format", "(", "e", ")", ")", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_classes": [[46, 63], ["enumerate", "csv_generator._parse", "ValueError", "six.raise_from", "ValueError"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse"], ["", "", "def", "_read_classes", "(", "csv_reader", ")", ":", "\n", "    ", "\"\"\" Parse the classes file given by csv_reader.\n    \"\"\"", "\n", "result", "=", "{", "}", "\n", "for", "line", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "        ", "line", "+=", "1", "\n", "\n", "try", ":", "\n", "            ", "class_name", ",", "class_id", "=", "row", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise_from", "(", "ValueError", "(", "'line {}: format should be \\'class_name,class_id\\''", ".", "format", "(", "line", ")", ")", ",", "None", ")", "\n", "", "class_id", "=", "_parse", "(", "class_id", ",", "int", ",", "'line {}: malformed class ID: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "\n", "if", "class_name", "in", "result", ":", "\n", "            ", "raise", "ValueError", "(", "'line {}: duplicate class name: \\'{}\\''", ".", "format", "(", "line", ",", "class_name", ")", ")", "\n", "", "result", "[", "class_name", "]", "=", "class_id", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_images": [[65, 96], ["os.path.join", "len", "os.listdir", "print", "tqdm.tqdm", "os.listdir", "os.path.isdir", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "object_detector_retinanet.keras_retinanet.preprocessing.get_image_size.get_image_size", "print", "print", "str"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.get_image_size.get_image_size"], ["", "def", "_read_images", "(", "base_dir", ")", ":", "\n", "\n", "    ", "result", "=", "{", "}", "\n", "dirs", "=", "[", "os", ".", "path", ".", "join", "(", "base_dir", ",", "o", ")", "for", "o", "in", "os", ".", "listdir", "(", "base_dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "o", ")", ")", "]", "\n", "if", "len", "(", "dirs", ")", "==", "0", ":", "\n", "        ", "dirs", "=", "[", "''", "]", "\n", "", "for", "project", "in", "dirs", ":", "\n", "        ", "project_imgs", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "project", ")", ")", "\n", "i", "=", "0", "\n", "print", "(", "\"Loading images...\"", ")", "\n", "for", "image", "in", "tqdm", "(", "project_imgs", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "img_file", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "project", ",", "image", ")", "\n", "# Check images exists", "\n", "exists", "=", "os", ".", "path", ".", "isfile", "(", "img_file", ")", "\n", "\n", "if", "not", "exists", ":", "\n", "                    ", "print", "(", "\"Warning: Image file {} is not existing\"", ".", "format", "(", "img_file", ")", ")", "\n", "continue", "\n", "\n", "# Image shape", "\n", "", "height", ",", "width", "=", "get_image_size", "(", "img_file", ")", "\n", "result", "[", "img_file", "]", "=", "{", "\"width\"", ":", "width", ",", "\"height\"", ":", "height", "}", "\n", "i", "+=", "1", "\n", "# if i == 10:", "\n", "#     break", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "print", "(", "\"Error: {} in image: {}\"", ".", "format", "(", "str", "(", "e", ")", ",", "img_file", ")", ")", "\n", "continue", "\n", "\n", "", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._read_annotations": [[98, 164], ["enumerate", "csv_generator._parse", "csv_generator._parse", "csv_generator._parse", "csv_generator._parse", "result[].append", "int", "int", "int", "int", "int", "int", "os.path.join", "ValueError", "ValueError", "ValueError", "print", "print", "six.raise_from", "ValueError"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._parse"], ["", "def", "_read_annotations", "(", "csv_reader", ",", "classes", ",", "base_dir", ",", "image_existence", ")", ":", "\n", "    ", "\"\"\" Read annotations from the csv_reader.\n    \"\"\"", "\n", "result", "=", "{", "}", "\n", "for", "line", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "        ", "line", "+=", "1", "\n", "\n", "try", ":", "\n", "            ", "img_file", ",", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "class_name", ",", "width", ",", "height", "=", "row", "[", ":", "]", "\n", "x1", "=", "int", "(", "x1", ")", "\n", "x2", "=", "int", "(", "x2", ")", "\n", "y1", "=", "int", "(", "y1", ")", "\n", "y2", "=", "int", "(", "y2", ")", "\n", "width", "=", "int", "(", "width", ")", "\n", "height", "=", "int", "(", "height", ")", "\n", "\n", "if", "x1", ">=", "width", ":", "\n", "                ", "x1", "=", "width", "-", "1", "\n", "", "if", "x2", ">=", "width", ":", "\n", "                ", "x2", "=", "width", "-", "1", "\n", "\n", "", "if", "y1", ">", "height", ":", "\n", "                ", "y1", "=", "height", "-", "1", "\n", "", "if", "y2", ">=", "height", ":", "\n", "                ", "y2", "=", "height", "-", "1", "\n", "# x1 < 0 | y1 < 0 | x2 <= 0 | y2 <= 0", "\n", "", "if", "x1", "<", "0", "or", "y1", "<", "0", "or", "x2", "<=", "0", "or", "y2", "<=", "0", ":", "\n", "                ", "print", "(", "\"Warning: Image file {} has some bad boxes annotations\"", ".", "format", "(", "img_file", ")", ")", "\n", "continue", "\n", "\n", "# Append root path", "\n", "", "img_file", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "img_file", ")", "\n", "# Check images exists", "\n", "if", "img_file", "not", "in", "image_existence", ":", "\n", "                ", "print", "(", "\"Warning: Image file {} is not existing\"", ".", "format", "(", "img_file", ")", ")", "\n", "continue", "\n", "\n", "", "", "except", "ValueError", ":", "\n", "            ", "raise_from", "(", "ValueError", "(", "\n", "'line {}: format should be \\'img_file,x1,y1,x2,y2,class_name\\' or \\'img_file,,,,,\\''", ".", "format", "(", "line", ")", ")", ",", "\n", "None", ")", "\n", "\n", "", "if", "img_file", "not", "in", "result", ":", "\n", "            ", "result", "[", "img_file", "]", "=", "[", "]", "\n", "\n", "# If a row contains only an image path, it's an image without annotations.", "\n", "", "if", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "class_name", ")", "==", "(", "''", ",", "''", ",", "''", ",", "''", ",", "''", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "x1", "=", "_parse", "(", "x1", ",", "int", ",", "'line {}: malformed x1: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "y1", "=", "_parse", "(", "y1", ",", "int", ",", "'line {}: malformed y1: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "x2", "=", "_parse", "(", "x2", ",", "int", ",", "'line {}: malformed x2: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "y2", "=", "_parse", "(", "y2", ",", "int", ",", "'line {}: malformed y2: {{}}'", ".", "format", "(", "line", ")", ")", "\n", "\n", "# Check that the bounding box is valid.", "\n", "if", "x2", "<=", "x1", ":", "\n", "            ", "raise", "ValueError", "(", "'line {}: x2 ({}) must be higher than x1 ({})'", ".", "format", "(", "line", ",", "x2", ",", "x1", ")", ")", "\n", "", "if", "y2", "<=", "y1", ":", "\n", "            ", "raise", "ValueError", "(", "'line {}: y2 ({}) must be higher than y1 ({})'", ".", "format", "(", "line", ",", "y2", ",", "y1", ")", ")", "\n", "\n", "# check if the current class name is correctly present", "\n", "", "if", "class_name", "not", "in", "classes", ":", "\n", "            ", "raise", "ValueError", "(", "'line {}: unknown class name: \\'{}\\' (classes: {})'", ".", "format", "(", "line", ",", "class_name", ",", "classes", ")", ")", "\n", "\n", "", "result", "[", "img_file", "]", ".", "append", "(", "{", "'x1'", ":", "x1", ",", "'x2'", ":", "x2", ",", "'y1'", ":", "y1", ",", "'y2'", ":", "y2", ",", "'class'", ":", "class_name", "}", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator._open_for_csv": [[166, 176], ["open", "open"], "function", ["None"], ["", "def", "_open_for_csv", "(", "path", ")", ":", "\n", "    ", "\"\"\" Open a file with flags suitable for csv.reader.\n\n    This is different for python2 it means with mode 'rb',\n    for python3 this means 'r' with \"universal newlines\".\n    \"\"\"", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "<", "3", ":", "\n", "        ", "return", "open", "(", "path", ",", "'rb'", ")", "\n", "", "else", ":", "\n", "        ", "return", "open", "(", "path", ",", "'r'", ",", "newline", "=", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.__init__": [[39, 75], ["int", "threading.Lock", "generatorIou.GeneratorIou.group_images", "utils.image.TransformParameters"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.group_images"], ["def", "__init__", "(", "\n", "self", ",", "\n", "transform_generator", "=", "None", ",", "\n", "batch_size", "=", "1", ",", "\n", "group_method", "=", "'ratio'", ",", "# one of 'none', 'random', 'ratio'", "\n", "shuffle_groups", "=", "True", ",", "\n", "image_min_side", "=", "800", ",", "\n", "image_max_side", "=", "1333", ",", "\n", "transform_parameters", "=", "None", ",", "\n", "compute_anchor_targets", "=", "anchor_targets_bbox", ",", "\n", ")", ":", "\n", "        ", "\"\"\" Initialize Generator object.\n\n        Args\n            transform_generator    : A generator used to randomly transform images and annotations.\n            batch_size             : The size of the batches to generate.\n            group_method           : Determines how images are grouped together (defaults to 'ratio', one of ('none', 'random', 'ratio')).\n            shuffle_groups         : If True, shuffles the groups each epoch.\n            image_min_side         : After resizing the minimum side of an image is equal to image_min_side.\n            image_max_side         : If after resizing the maximum side is larger than image_max_side, scales down further so that the max side is equal to image_max_side.\n            transform_parameters   : The transform parameters used for data augmentation.\n            compute_anchor_targets : Function handler for computing the targets of anchors for an image and its annotations.\n        \"\"\"", "\n", "self", ".", "transform_generator", "=", "transform_generator", "\n", "self", ".", "batch_size", "=", "int", "(", "batch_size", ")", "\n", "self", ".", "group_method", "=", "group_method", "\n", "self", ".", "shuffle_groups", "=", "shuffle_groups", "\n", "self", ".", "image_min_side", "=", "image_min_side", "\n", "self", ".", "image_max_side", "=", "image_max_side", "\n", "self", ".", "transform_parameters", "=", "transform_parameters", "or", "TransformParameters", "(", ")", "\n", "self", ".", "compute_anchor_targets", "=", "compute_anchor_targets", "\n", "\n", "self", ".", "group_index", "=", "0", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "\n", "self", ".", "group_images", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size": [[76, 80], ["NotImplementedError"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the dataset.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'size method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.num_classes": [[81, 85], ["NotImplementedError"], "methods", ["None"], ["", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "\"\"\" Number of classes in the dataset.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'num_classes method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.name_to_label": [[86, 90], ["NotImplementedError"], "methods", ["None"], ["", "def", "name_to_label", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\" Map name to label.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'name_to_label method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.label_to_name": [[91, 95], ["NotImplementedError"], "methods", ["None"], ["", "def", "label_to_name", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\" Map label to name.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'label_to_name method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.image_aspect_ratio": [[96, 100], ["NotImplementedError"], "methods", ["None"], ["", "def", "image_aspect_ratio", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Compute the aspect ratio for an image with image_index.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'image_aspect_ratio method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_image": [[101, 105], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_image", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Load an image at the image_index.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'load_image method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_annotations": [[106, 110], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "image_index", ")", ":", "\n", "        ", "\"\"\" Load annotations for an image_index.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "'load_annotations method not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_annotations_group": [[111, 115], ["generatorIou.GeneratorIou.load_annotations"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_annotations"], ["", "def", "load_annotations_group", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\" Load annotations for all images in group.\n        \"\"\"", "\n", "return", "[", "self", ".", "load_annotations", "(", "image_index", ")", "for", "image_index", "in", "group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.filter_annotations": [[116, 145], ["enumerate", "zip", "isinstance", "len", "type", "numpy.where", "warnings.warn", "numpy.delete"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where"], ["", "def", "filter_annotations", "(", "self", ",", "image_group", ",", "annotations_group", ",", "group", ")", ":", "\n", "        ", "\"\"\" Filter annotations by removing those that are outside of the image bounds or whose width/height < 0.\n        \"\"\"", "\n", "# test all annotations", "\n", "for", "index", ",", "(", "image", ",", "annotations", ")", "in", "enumerate", "(", "zip", "(", "image_group", ",", "annotations_group", ")", ")", ":", "\n", "            ", "assert", "(", "isinstance", "(", "annotations", ",", "\n", "np", ".", "ndarray", ")", ")", ",", "'\\'load_annotations\\' should return a list of numpy arrays, received: {}'", ".", "format", "(", "\n", "type", "(", "annotations", ")", ")", "\n", "\n", "# test x2 < x1 | y2 < y1 | x1 < 0 | y1 < 0 | x2 <= 0 | y2 <= 0 | x2 >= image.shape[1] | y2 >= image.shape[0]", "\n", "invalid_indices", "=", "np", ".", "where", "(", "\n", "(", "annotations", "[", ":", ",", "2", "]", "<=", "annotations", "[", ":", ",", "0", "]", ")", "|", "\n", "(", "annotations", "[", ":", ",", "3", "]", "<=", "annotations", "[", ":", ",", "1", "]", ")", "|", "\n", "(", "annotations", "[", ":", ",", "0", "]", "<", "0", ")", "|", "\n", "(", "annotations", "[", ":", ",", "1", "]", "<", "0", ")", "|", "\n", "(", "annotations", "[", ":", ",", "2", "]", ">", "image", ".", "shape", "[", "1", "]", ")", "|", "\n", "(", "annotations", "[", ":", ",", "3", "]", ">", "image", ".", "shape", "[", "0", "]", ")", "\n", ")", "[", "0", "]", "\n", "\n", "# delete invalid indices", "\n", "if", "len", "(", "invalid_indices", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "'Image with id {} (shape {}) contains the following invalid boxes: {}.'", ".", "format", "(", "\n", "group", "[", "index", "]", ",", "\n", "image", ".", "shape", ",", "\n", "[", "annotations", "[", "invalid_index", ",", ":", "]", "for", "invalid_index", "in", "invalid_indices", "]", "\n", ")", ")", "\n", "annotations_group", "[", "index", "]", "=", "np", ".", "delete", "(", "annotations", ",", "invalid_indices", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "image_group", ",", "annotations_group", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_image_group": [[146, 150], ["generatorIou.GeneratorIou.load_image"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_image"], ["", "def", "load_image_group", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\" Load images for all images in a group.\n        \"\"\"", "\n", "return", "[", "self", ".", "load_image", "(", "image_index", ")", "for", "image_index", "in", "group", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.random_transform_group_entry": [[151, 166], ["utils.image.adjust_transform_for_image", "utils.image.apply_transform", "annotations.copy.copy.copy", "range", "generatorIou.GeneratorIou.next"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.adjust_transform_for_image", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.apply_transform", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.next"], ["", "def", "random_transform_group_entry", "(", "self", ",", "image", ",", "annotations", ")", ":", "\n", "        ", "\"\"\" Randomly transforms image and annotation.\n        \"\"\"", "\n", "# randomly transform both image and annotations", "\n", "if", "self", ".", "transform_generator", ":", "\n", "            ", "transform", "=", "adjust_transform_for_image", "(", "next", "(", "self", ".", "transform_generator", ")", ",", "image", ",", "\n", "self", ".", "transform_parameters", ".", "relative_translation", ")", "\n", "image", "=", "apply_transform", "(", "transform", ",", "image", ",", "self", ".", "transform_parameters", ")", "\n", "\n", "# Transform the bounding boxes in the annotations.", "\n", "annotations", "=", "annotations", ".", "copy", "(", ")", "\n", "for", "index", "in", "range", "(", "annotations", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "annotations", "[", "index", ",", ":", "4", "]", "=", "transform_aabb", "(", "transform", ",", "annotations", "[", "index", ",", ":", "4", "]", ")", "\n", "\n", "", "", "return", "image", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.resize_image": [[167, 171], ["utils.image.resize_image"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.resize_image"], ["", "def", "resize_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\" Resize an image using image_min_side and image_max_side.\n        \"\"\"", "\n", "return", "resize_image", "(", "image", ",", "min_side", "=", "self", ".", "image_min_side", ",", "max_side", "=", "self", ".", "image_max_side", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.preprocess_image": [[172, 176], ["utils.image.preprocess_image"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.preprocess_image"], ["", "def", "preprocess_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\" Preprocess an image (e.g. subtracts ImageNet mean).\n        \"\"\"", "\n", "return", "preprocess_image", "(", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.preprocess_group_entry": [[177, 193], ["generatorIou.GeneratorIou.preprocess_image", "generatorIou.GeneratorIou.random_transform_group_entry", "generatorIou.GeneratorIou.resize_image"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.preprocess_image", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.random_transform_group_entry", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.resize_image"], ["", "def", "preprocess_group_entry", "(", "self", ",", "image", ",", "annotations", ")", ":", "\n", "        ", "\"\"\" Preprocess image and its annotations.\n        \"\"\"", "\n", "# preprocess the image", "\n", "image", "=", "self", ".", "preprocess_image", "(", "image", ")", "\n", "\n", "# randomly transform image and annotations", "\n", "image", ",", "annotations", "=", "self", ".", "random_transform_group_entry", "(", "image", ",", "annotations", ")", "\n", "\n", "# resize image", "\n", "image", ",", "image_scale", "=", "self", ".", "resize_image", "(", "image", ")", "\n", "\n", "# apply resizing to annotations too", "\n", "annotations", "[", ":", ",", ":", "4", "]", "*=", "image_scale", "\n", "\n", "return", "image", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.preprocess_group": [[194, 206], ["enumerate", "zip", "generatorIou.GeneratorIou.preprocess_group_entry"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.preprocess_group_entry"], ["", "def", "preprocess_group", "(", "self", ",", "image_group", ",", "annotations_group", ")", ":", "\n", "        ", "\"\"\" Preprocess each image and its annotations in its group.\n        \"\"\"", "\n", "for", "index", ",", "(", "image", ",", "annotations", ")", "in", "enumerate", "(", "zip", "(", "image_group", ",", "annotations_group", ")", ")", ":", "\n", "# preprocess a single group entry", "\n", "            ", "image", ",", "annotations", "=", "self", ".", "preprocess_group_entry", "(", "image", ",", "annotations", ")", "\n", "\n", "# copy processed data back to group", "\n", "image_group", "[", "index", "]", "=", "image", "\n", "annotations_group", "[", "index", "]", "=", "annotations", "\n", "\n", "", "return", "image_group", ",", "annotations_group", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.group_images": [[207, 220], ["list", "range", "random.shuffle", "generatorIou.GeneratorIou.size", "list.sort", "range", "range", "len", "generatorIou.GeneratorIou.image_aspect_ratio", "len"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.image_aspect_ratio"], ["", "def", "group_images", "(", "self", ")", ":", "\n", "        ", "\"\"\" Order the images according to self.order and makes groups of self.batch_size.\n        \"\"\"", "\n", "# determine the order of the images", "\n", "order", "=", "list", "(", "range", "(", "self", ".", "size", "(", ")", ")", ")", "\n", "if", "self", ".", "group_method", "==", "'random'", ":", "\n", "            ", "random", ".", "shuffle", "(", "order", ")", "\n", "", "elif", "self", ".", "group_method", "==", "'ratio'", ":", "\n", "            ", "order", ".", "sort", "(", "key", "=", "lambda", "x", ":", "self", ".", "image_aspect_ratio", "(", "x", ")", ")", "\n", "\n", "# divide into groups, one group = one batch", "\n", "", "self", ".", "groups", "=", "[", "[", "order", "[", "x", "%", "len", "(", "order", ")", "]", "for", "x", "in", "range", "(", "i", ",", "i", "+", "self", ".", "batch_size", ")", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "order", ")", ",", "self", ".", "batch_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_inputs": [[221, 235], ["tuple", "numpy.zeros", "enumerate", "max", "keras.backend.floatx", "range"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "compute_inputs", "(", "self", ",", "image_group", ")", ":", "\n", "        ", "\"\"\" Compute inputs for the network using an image_group.\n        \"\"\"", "\n", "# get the max image shape", "\n", "max_shape", "=", "tuple", "(", "max", "(", "image", ".", "shape", "[", "x", "]", "for", "image", "in", "image_group", ")", "for", "x", "in", "range", "(", "3", ")", ")", "\n", "\n", "# construct an image batch object", "\n", "image_batch", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", "+", "max_shape", ",", "dtype", "=", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "\n", "# copy all images to the upper left part of the image batch object", "\n", "for", "image_index", ",", "image", "in", "enumerate", "(", "image_group", ")", ":", "\n", "            ", "image_batch", "[", "image_index", ",", ":", "image", ".", "shape", "[", "0", "]", ",", ":", "image", ".", "shape", "[", "1", "]", ",", ":", "image", ".", "shape", "[", "2", "]", "]", "=", "image", "\n", "\n", "", "return", "image_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_targets": [[236, 268], ["tuple", "enumerate", "numpy.zeros", "numpy.zeros", "enumerate", "zip", "generatorIou.GeneratorIou.compute_anchor_targets", "generatorIou.GeneratorIou.bbox_transform_iou", "numpy.max", "numpy.append", "zip", "max", "generatorIou.GeneratorIou.num_classes", "keras.backend.floatx", "keras.backend.floatx", "range"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.bbox_transform_iou", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.num_classes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "compute_targets", "(", "self", ",", "image_group", ",", "annotations_group", ")", ":", "\n", "        ", "\"\"\" Compute target outputs for the network using images and their annotations.\n        \"\"\"", "\n", "# get the max image shape", "\n", "max_shape", "=", "tuple", "(", "max", "(", "image", ".", "shape", "[", "x", "]", "for", "image", "in", "image_group", ")", "for", "x", "in", "range", "(", "3", ")", ")", "\n", "\n", "# compute labels and regression targets", "\n", "labels_group", "=", "[", "None", "]", "*", "self", ".", "batch_size", "\n", "regression_group", "=", "[", "None", "]", "*", "self", ".", "batch_size", "\n", "for", "index", ",", "(", "image", ",", "annotations", ")", "in", "enumerate", "(", "zip", "(", "image_group", ",", "annotations_group", ")", ")", ":", "\n", "# compute regression targets", "\n", "            ", "labels_group", "[", "index", "]", ",", "annotations", ",", "anchors", "=", "self", ".", "compute_anchor_targets", "(", "\n", "max_shape", ",", "\n", "annotations", ",", "\n", "self", ".", "num_classes", "(", ")", ",", "\n", "mask_shape", "=", "image", ".", "shape", ",", "\n", ")", "\n", "regression_group", "[", "index", "]", "=", "self", ".", "bbox_transform_iou", "(", "anchors", ",", "annotations", ")", "\n", "\n", "# append anchor states to regression targets (necessary for filtering 'ignore', 'positive' and 'negative' anchors)", "\n", "anchor_states", "=", "np", ".", "max", "(", "labels_group", "[", "index", "]", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "regression_group", "[", "index", "]", "=", "np", ".", "append", "(", "regression_group", "[", "index", "]", ",", "anchor_states", ",", "axis", "=", "1", ")", "\n", "\n", "", "labels_batch", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", "+", "labels_group", "[", "0", "]", ".", "shape", ",", "dtype", "=", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "regression_batch", "=", "np", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", ")", "+", "regression_group", "[", "0", "]", ".", "shape", ",", "dtype", "=", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "\n", "# copy all labels and regression values to the batch blob", "\n", "for", "index", ",", "(", "labels", ",", "regression", ")", "in", "enumerate", "(", "zip", "(", "labels_group", ",", "regression_group", ")", ")", ":", "\n", "            ", "labels_batch", "[", "index", ",", "...", "]", "=", "labels", "\n", "regression_batch", "[", "index", ",", "...", "]", "=", "regression", "\n", "\n", "", "return", "[", "regression_batch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.bbox_transform_iou": [[269, 300], ["isinstance", "isinstance", "numpy.stack", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "isinstance", "ValueError", "isinstance", "ValueError", "type", "type"], "methods", ["None"], ["", "def", "bbox_transform_iou", "(", "self", ",", "anchors", ",", "gt_boxes", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "\n", "        ", "if", "mean", "is", "None", ":", "\n", "            ", "mean", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "", "if", "std", "is", "None", ":", "\n", "            ", "std", "=", "np", ".", "array", "(", "[", "0.2", ",", "0.2", ",", "0.2", ",", "0.2", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "mean", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "mean", "=", "np", ".", "array", "(", "mean", ")", "\n", "", "elif", "not", "isinstance", "(", "mean", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected mean to be a np.ndarray, list or tuple. Received: {}'", ".", "format", "(", "type", "(", "mean", ")", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "std", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "std", "=", "np", ".", "array", "(", "std", ")", "\n", "", "elif", "not", "isinstance", "(", "std", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected std to be a np.ndarray, list or tuple. Received: {}'", ".", "format", "(", "type", "(", "std", ")", ")", ")", "\n", "\n", "", "anchor_widths", "=", "anchors", "[", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", "0", "]", "\n", "anchor_heights", "=", "anchors", "[", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", "1", "]", "\n", "\n", "targets_dx1", "=", "(", "gt_boxes", "[", ":", ",", "0", "]", "-", "0", ")", "/", "1", "\n", "targets_dy1", "=", "(", "gt_boxes", "[", ":", ",", "1", "]", "-", "0", ")", "/", "1", "\n", "targets_dx2", "=", "(", "gt_boxes", "[", ":", ",", "2", "]", "-", "0", ")", "/", "1", "\n", "targets_dy2", "=", "(", "gt_boxes", "[", ":", ",", "3", "]", "-", "0", ")", "/", "1", "\n", "\n", "targets", "=", "np", ".", "stack", "(", "(", "targets_dx1", ",", "targets_dy1", ",", "targets_dx2", ",", "targets_dy2", ")", ")", "\n", "targets", "=", "targets", ".", "T", "\n", "\n", "targets", "=", "(", "targets", "-", "0", ")", "/", "1", "\n", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_input_output": [[301, 321], ["generatorIou.GeneratorIou.load_image_group", "generatorIou.GeneratorIou.load_annotations_group", "generatorIou.GeneratorIou.filter_annotations", "generatorIou.GeneratorIou.preprocess_group", "generatorIou.GeneratorIou.compute_inputs", "generatorIou.GeneratorIou.compute_targets"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_image_group", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_annotations_group", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.filter_annotations", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.preprocess_group", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_inputs", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_targets"], ["", "def", "compute_input_output", "(", "self", ",", "group", ")", ":", "\n", "        ", "\"\"\" Compute inputs and target outputs for the network.\n        \"\"\"", "\n", "# load images and annotations", "\n", "image_group", "=", "self", ".", "load_image_group", "(", "group", ")", "\n", "annotations_group", "=", "self", ".", "load_annotations_group", "(", "group", ")", "\n", "\n", "# check validity of annotations", "\n", "image_group", ",", "annotations_group", "=", "self", ".", "filter_annotations", "(", "image_group", ",", "annotations_group", ",", "group", ")", "\n", "\n", "# perform preprocessing steps", "\n", "image_group", ",", "annotations_group", "=", "self", ".", "preprocess_group", "(", "image_group", ",", "annotations_group", ")", "\n", "\n", "# compute network inputs", "\n", "inputs", "=", "self", ".", "compute_inputs", "(", "image_group", ")", "\n", "\n", "# compute network targets", "\n", "targets", "=", "self", ".", "compute_targets", "(", "image_group", ",", "annotations_group", ")", "\n", "\n", "return", "inputs", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.__next__": [[322, 324], ["generatorIou.GeneratorIou.next"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.next"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.next": [[325, 335], ["generatorIou.GeneratorIou.compute_input_output", "random.shuffle", "len"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.compute_input_output"], ["", "def", "next", "(", "self", ")", ":", "\n", "# advance the group index", "\n", "        ", "with", "self", ".", "lock", ":", "\n", "            ", "if", "self", ".", "group_index", "==", "0", "and", "self", ".", "shuffle_groups", ":", "\n", "# shuffle groups at start of epoch", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "groups", ")", "\n", "", "group", "=", "self", ".", "groups", "[", "self", ".", "group_index", "]", "\n", "self", ".", "group_index", "=", "(", "self", ".", "group_index", "+", "1", ")", "%", "len", "(", "self", ".", "groups", ")", "\n", "\n", "", "return", "self", ".", "compute_input_output", "(", "group", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.keras_version": [[25, 32], ["tuple", "map", "keras.__version__.split"], "function", ["None"], ["def", "keras_version", "(", ")", ":", "\n", "    ", "\"\"\" Get the Keras version.\n\n    Returns\n        tuple of (major, minor, patch).\n    \"\"\"", "\n", "return", "tuple", "(", "map", "(", "int", ",", "keras", ".", "__version__", ".", "split", "(", "'.'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.keras_version_ok": [[34, 38], ["keras_version.keras_version"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.keras_version"], ["", "def", "keras_version_ok", "(", ")", ":", "\n", "    ", "\"\"\" Check if the current Keras version is higher than the minimum version.\n    \"\"\"", "\n", "return", "keras_version", "(", ")", ">=", "minimum_keras_version", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.assert_keras_version": [[40, 46], ["map", "keras_version.keras_version"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.keras_version"], ["", "def", "assert_keras_version", "(", ")", ":", "\n", "    ", "\"\"\" Assert that the Keras version is up to date.\n    \"\"\"", "\n", "detected", "=", "keras", ".", "__version__", "\n", "required", "=", "'.'", ".", "join", "(", "map", "(", "str", ",", "minimum_keras_version", ")", ")", "\n", "assert", "(", "keras_version", "(", ")", ">=", "minimum_keras_version", ")", ",", "'You are using keras version {}. The minimum required version is {}.'", ".", "format", "(", "detected", ",", "required", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.check_keras_version": [[48, 56], ["keras_version.assert_keras_version", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.assert_keras_version"], ["", "def", "check_keras_version", "(", ")", ":", "\n", "    ", "\"\"\" Check that the Keras version is up to date. If it isn't, print an error message and exit the script.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "assert_keras_version", "(", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "        ", "print", "(", "e", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.colors.label_color": [[4, 20], ["len", "warnings.warn"], "function", ["None"], ["def", "label_color", "(", "label", ")", ":", "\n", "    ", "\"\"\" Return a color from a set of predefined colors. Contains 80 colors in total.\n\n    Args\n        label: The label to get the color for.\n\n    Returns\n        A list of three values representing a RGB color.\n\n        If no color is defined for a certain label, the color green is returned and a warning is printed.\n    \"\"\"", "\n", "if", "label", "<", "len", "(", "colors", ")", ":", "\n", "        ", "return", "colors", "[", "label", "]", "\n", "", "else", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Label {} has no color, returning default.'", ".", "format", "(", "label", ")", ")", "\n", "return", "(", "0", ",", "255", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.anchor_targets_bbox": [[20, 77], ["anchors.anchors_for_shape", "numpy.logical_or", "numpy.ones", "anchors.compute_overlap", "numpy.argmax", "numpy.zeros", "numpy.vstack", "numpy.arange", "annotations[].astype"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.anchors_for_shape", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.compute_overlap"], ["def", "anchor_targets_bbox", "(", "\n", "image_shape", ",", "\n", "annotations", ",", "\n", "num_classes", ",", "\n", "mask_shape", "=", "None", ",", "\n", "negative_overlap", "=", "0.4", ",", "\n", "positive_overlap", "=", "0.5", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Generate anchor targets for bbox detection.\n\n    Args\n        image_shape: Shape of the image.\n        annotations: np.array of shape (N, 5) for (x1, y1, x2, y2, label).\n        num_classes: Number of classes to predict.\n        mask_shape: If the image is padded with zeros, mask_shape can be used to mark the relevant part of the image.\n        negative_overlap: IoU overlap for negative anchors (all anchors with overlap < negative_overlap are negative).\n        positive_overlap: IoU overlap or positive anchors (all anchors with overlap > positive_overlap are positive).\n\n    Returns\n        labels: np.array of shape (A, num_classes) where a cols consists of -1 for ignore, 0 for negative and 1 for positive for a certain class.\n        annotations: np.array of shape (A, 5) for (x1, y1, x2, y2, label) containing the annotations corresponding to each anchor or 0 if there is no corresponding anchor.\n        anchors: np.array of shape (A, 4) for (x1, y1, x2, y2) containing the anchor boxes.\n    \"\"\"", "\n", "anchors", "=", "anchors_for_shape", "(", "image_shape", ",", "**", "kwargs", ")", "\n", "\n", "# label: 1 is positive, 0 is negative, -1 is dont care", "\n", "labels", "=", "np", ".", "ones", "(", "(", "anchors", ".", "shape", "[", "0", "]", ",", "num_classes", ")", ")", "*", "-", "1", "\n", "\n", "if", "annotations", ".", "shape", "[", "0", "]", ":", "\n", "# obtain indices of gt annotations with the greatest overlap", "\n", "        ", "overlaps", "=", "compute_overlap", "(", "anchors", ",", "annotations", ")", "\n", "argmax_overlaps_inds", "=", "np", ".", "argmax", "(", "overlaps", ",", "axis", "=", "1", ")", "\n", "max_overlaps", "=", "overlaps", "[", "np", ".", "arange", "(", "overlaps", ".", "shape", "[", "0", "]", ")", ",", "argmax_overlaps_inds", "]", "\n", "\n", "# assign bg labels first so that positive labels can clobber them", "\n", "labels", "[", "max_overlaps", "<", "negative_overlap", ",", ":", "]", "=", "0", "\n", "\n", "# compute box regression targets", "\n", "annotations", "=", "annotations", "[", "argmax_overlaps_inds", "]", "\n", "\n", "# fg label: above threshold IOU", "\n", "positive_indices", "=", "max_overlaps", ">=", "positive_overlap", "\n", "labels", "[", "positive_indices", ",", ":", "]", "=", "0", "\n", "labels", "[", "positive_indices", ",", "annotations", "[", "positive_indices", ",", "4", "]", ".", "astype", "(", "int", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "# no annotations? then everything is background", "\n", "        ", "labels", "[", ":", "]", "=", "0", "\n", "annotations", "=", "np", ".", "zeros", "(", "(", "anchors", ".", "shape", "[", "0", "]", ",", "annotations", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "# ignore annotations outside of image", "\n", "", "mask_shape", "=", "image_shape", "if", "mask_shape", "is", "None", "else", "mask_shape", "\n", "anchors_centers", "=", "np", ".", "vstack", "(", "[", "(", "anchors", "[", ":", ",", "0", "]", "+", "anchors", "[", ":", ",", "2", "]", ")", "/", "2", ",", "(", "anchors", "[", ":", ",", "1", "]", "+", "anchors", "[", ":", ",", "3", "]", ")", "/", "2", "]", ")", ".", "T", "\n", "indices", "=", "np", ".", "logical_or", "(", "anchors_centers", "[", ":", ",", "0", "]", ">=", "mask_shape", "[", "1", "]", ",", "anchors_centers", "[", ":", ",", "1", "]", ">=", "mask_shape", "[", "0", "]", ")", "\n", "labels", "[", "indices", ",", ":", "]", "=", "-", "1", "\n", "\n", "return", "labels", ",", "annotations", ",", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.layer_shapes": [[79, 102], ["layer.compute_output_shape", "len"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.compute_output_shape"], ["", "def", "layer_shapes", "(", "image_shape", ",", "model", ")", ":", "\n", "    ", "\"\"\"Compute layer shapes given input image shape and the model.\n\n    Args\n        image_shape: The shape of the image.\n        model: The model to use for computing how the image shape is transformed in the pyramid.\n\n    Returns\n        A dictionary mapping layer names to image shapes.\n    \"\"\"", "\n", "shape", "=", "{", "\n", "model", ".", "layers", "[", "0", "]", ".", "name", ":", "(", "None", ",", ")", "+", "image_shape", ",", "\n", "}", "\n", "\n", "for", "layer", "in", "model", ".", "layers", "[", "1", ":", "]", ":", "\n", "        ", "nodes", "=", "layer", ".", "_inbound_nodes", "\n", "for", "node", "in", "nodes", ":", "\n", "            ", "inputs", "=", "[", "shape", "[", "lr", ".", "name", "]", "for", "lr", "in", "node", ".", "inbound_layers", "]", "\n", "if", "not", "inputs", ":", "\n", "                ", "continue", "\n", "", "shape", "[", "layer", ".", "name", "]", "=", "layer", ".", "compute_output_shape", "(", "inputs", "[", "0", "]", "if", "len", "(", "inputs", ")", "==", "1", "else", "inputs", ")", "\n", "\n", "", "", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.make_shapes_callback": [[104, 113], ["anchors.layer_shapes"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.layer_shapes"], ["", "def", "make_shapes_callback", "(", "model", ")", ":", "\n", "    ", "\"\"\" Make a function for getting the shape of the pyramid levels.\n    \"\"\"", "\n", "def", "get_shapes", "(", "image_shape", ",", "pyramid_levels", ")", ":", "\n", "        ", "shape", "=", "layer_shapes", "(", "image_shape", ",", "model", ")", "\n", "image_shapes", "=", "[", "shape", "[", "\"P{}\"", ".", "format", "(", "level", ")", "]", "[", "1", ":", "3", "]", "for", "level", "in", "pyramid_levels", "]", "\n", "return", "image_shapes", "\n", "\n", "", "return", "get_shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.guess_shapes": [[115, 128], ["numpy.array"], "function", ["None"], ["", "def", "guess_shapes", "(", "image_shape", ",", "pyramid_levels", ")", ":", "\n", "    ", "\"\"\"Guess shapes based on pyramid levels.\n\n    Args\n         image_shape: The shape of the image.\n         pyramid_levels: A list of what pyramid levels are used.\n\n    Returns\n        A list of image shapes at each pyramid level.\n    \"\"\"", "\n", "image_shape", "=", "np", ".", "array", "(", "image_shape", "[", ":", "2", "]", ")", "\n", "image_shapes", "=", "[", "(", "image_shape", "+", "2", "**", "x", "-", "1", ")", "//", "(", "2", "**", "x", ")", "for", "x", "in", "pyramid_levels", "]", "\n", "return", "image_shapes", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.anchors_for_shape": [[130, 176], ["shapes_callback", "numpy.zeros", "enumerate", "numpy.array", "numpy.array", "anchors.generate_anchors", "anchors.shift", "numpy.append"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.generate_anchors", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.common.shift"], ["", "def", "anchors_for_shape", "(", "\n", "image_shape", ",", "\n", "pyramid_levels", "=", "None", ",", "\n", "ratios", "=", "None", ",", "\n", "scales", "=", "None", ",", "\n", "strides", "=", "None", ",", "\n", "sizes", "=", "None", ",", "\n", "shapes_callback", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\" Generators anchors for a given shape.\n\n    Args\n        image_shape: The shape of the image.\n        pyramid_levels: List of ints representing which pyramids to use (defaults to [3, 4, 5, 6, 7]).\n        ratios: List of ratios with which anchors are generated (defaults to [0.5, 1, 2]).\n        scales: List of scales with which anchors are generated (defaults to [2^0, 2^(1/3), 2^(2/3)]).\n        strides: Stride per pyramid level, defines how the pyramids are constructed.\n        sizes: Sizes of the anchors per pyramid level.\n        shapes_callback: Function to call for getting the shape of the image at different pyramid levels.\n\n    Returns\n        np.array of shape (N, 4) containing the (x1, y1, x2, y2) coordinates for the anchors.\n    \"\"\"", "\n", "if", "pyramid_levels", "is", "None", ":", "\n", "        ", "pyramid_levels", "=", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", "\n", "", "if", "strides", "is", "None", ":", "\n", "        ", "strides", "=", "[", "2", "**", "x", "for", "x", "in", "pyramid_levels", "]", "\n", "", "if", "sizes", "is", "None", ":", "\n", "        ", "sizes", "=", "[", "2", "**", "(", "x", "+", "2", ")", "for", "x", "in", "pyramid_levels", "]", "\n", "", "if", "ratios", "is", "None", ":", "\n", "        ", "ratios", "=", "np", ".", "array", "(", "[", "0.5", ",", "1", ",", "2", "]", ")", "\n", "", "if", "scales", "is", "None", ":", "\n", "        ", "scales", "=", "np", ".", "array", "(", "[", "2", "**", "0", ",", "2", "**", "(", "1.0", "/", "3.0", ")", ",", "2", "**", "(", "2.0", "/", "3.0", ")", "]", ")", "\n", "\n", "", "if", "shapes_callback", "is", "None", ":", "\n", "        ", "shapes_callback", "=", "guess_shapes", "\n", "", "image_shapes", "=", "shapes_callback", "(", "image_shape", ",", "pyramid_levels", ")", "\n", "\n", "# compute anchors over all pyramid levels", "\n", "all_anchors", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "for", "idx", ",", "p", "in", "enumerate", "(", "pyramid_levels", ")", ":", "\n", "        ", "anchors", "=", "generate_anchors", "(", "base_size", "=", "sizes", "[", "idx", "]", ",", "ratios", "=", "ratios", ",", "scales", "=", "scales", ")", "\n", "shifted_anchors", "=", "shift", "(", "image_shapes", "[", "idx", "]", ",", "strides", "[", "idx", "]", ",", "anchors", ")", "\n", "all_anchors", "=", "np", ".", "append", "(", "all_anchors", ",", "shifted_anchors", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "all_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.shift": [[178, 206], ["numpy.meshgrid", "numpy.vstack().transpose", "all_anchors.reshape.reshape", "anchors.reshape", "np.vstack().transpose.reshape().transpose", "numpy.arange", "numpy.arange", "numpy.vstack", "np.vstack().transpose.reshape", "shift_x.ravel", "shift_y.ravel", "shift_x.ravel", "shift_y.ravel"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.meshgrid"], ["", "def", "shift", "(", "shape", ",", "stride", ",", "anchors", ")", ":", "\n", "    ", "\"\"\" Produce shifted anchors based on shape of the map and stride size.\n\n    Args\n        shape  : Shape to shift the anchors over.\n        stride : Stride to shift the anchors with over the shape.\n        anchors: The anchors to apply at each location.\n    \"\"\"", "\n", "shift_x", "=", "(", "np", ".", "arange", "(", "0", ",", "shape", "[", "1", "]", ")", "+", "0.5", ")", "*", "stride", "\n", "shift_y", "=", "(", "np", ".", "arange", "(", "0", ",", "shape", "[", "0", "]", ")", "+", "0.5", ")", "*", "stride", "\n", "\n", "shift_x", ",", "shift_y", "=", "np", ".", "meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "\n", "shifts", "=", "np", ".", "vstack", "(", "(", "\n", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", ",", "\n", "shift_x", ".", "ravel", "(", ")", ",", "shift_y", ".", "ravel", "(", ")", "\n", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# add A anchors (1, A, 4) to", "\n", "# cell K shifts (K, 1, 4) to get", "\n", "# shift anchors (K, A, 4)", "\n", "# reshape to (K*A, 4) shifted anchors", "\n", "A", "=", "anchors", ".", "shape", "[", "0", "]", "\n", "K", "=", "shifts", ".", "shape", "[", "0", "]", "\n", "all_anchors", "=", "(", "anchors", ".", "reshape", "(", "(", "1", ",", "A", ",", "4", ")", ")", "+", "shifts", ".", "reshape", "(", "(", "1", ",", "K", ",", "4", ")", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", ")", "\n", "all_anchors", "=", "all_anchors", ".", "reshape", "(", "(", "K", "*", "A", ",", "4", ")", ")", "\n", "\n", "return", "all_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.generate_anchors": [[208, 240], ["numpy.zeros", "numpy.sqrt", "numpy.array", "numpy.array", "len", "len", "numpy.repeat", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.repeat", "len", "len", "len"], "function", ["None"], ["", "def", "generate_anchors", "(", "base_size", "=", "16", ",", "ratios", "=", "None", ",", "scales", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate anchor (reference) windows by enumerating aspect ratios X\n    scales w.r.t. a reference window.\n    \"\"\"", "\n", "\n", "if", "ratios", "is", "None", ":", "\n", "        ", "ratios", "=", "np", ".", "array", "(", "[", "0.5", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "if", "scales", "is", "None", ":", "\n", "        ", "scales", "=", "np", ".", "array", "(", "[", "2", "**", "0", ",", "2", "**", "(", "1.0", "/", "3.0", ")", ",", "2", "**", "(", "2.0", "/", "3.0", ")", "]", ")", "\n", "\n", "", "num_anchors", "=", "len", "(", "ratios", ")", "*", "len", "(", "scales", ")", "\n", "\n", "# initialize output anchors", "\n", "anchors", "=", "np", ".", "zeros", "(", "(", "num_anchors", ",", "4", ")", ")", "\n", "\n", "# scale base_size", "\n", "anchors", "[", ":", ",", "2", ":", "]", "=", "base_size", "*", "np", ".", "tile", "(", "scales", ",", "(", "2", ",", "len", "(", "ratios", ")", ")", ")", ".", "T", "\n", "\n", "# compute areas of anchors", "\n", "areas", "=", "anchors", "[", ":", ",", "2", "]", "*", "anchors", "[", ":", ",", "3", "]", "\n", "\n", "# correct for ratios", "\n", "anchors", "[", ":", ",", "2", "]", "=", "np", ".", "sqrt", "(", "areas", "/", "np", ".", "repeat", "(", "ratios", ",", "len", "(", "scales", ")", ")", ")", "\n", "anchors", "[", ":", ",", "3", "]", "=", "anchors", "[", ":", ",", "2", "]", "*", "np", ".", "repeat", "(", "ratios", ",", "len", "(", "scales", ")", ")", "\n", "\n", "# transform from (x_ctr, y_ctr, w, h) -> (x1, y1, x2, y2)", "\n", "anchors", "[", ":", ",", "0", ":", ":", "2", "]", "-=", "np", ".", "tile", "(", "anchors", "[", ":", ",", "2", "]", "*", "0.5", ",", "(", "2", ",", "1", ")", ")", ".", "T", "\n", "anchors", "[", ":", ",", "1", ":", ":", "2", "]", "-=", "np", ".", "tile", "(", "anchors", "[", ":", ",", "3", "]", "*", "0.5", ",", "(", "2", ",", "1", ")", ")", ".", "T", "\n", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.bbox_transform": [[242, 274], ["isinstance", "isinstance", "numpy.stack", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "isinstance", "ValueError", "isinstance", "ValueError", "type", "type"], "function", ["None"], ["", "def", "bbox_transform", "(", "anchors", ",", "gt_boxes", ",", "mean", "=", "None", ",", "std", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute bounding-box regression targets for an image.\"\"\"", "\n", "\n", "if", "mean", "is", "None", ":", "\n", "        ", "mean", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "", "if", "std", "is", "None", ":", "\n", "        ", "std", "=", "np", ".", "array", "(", "[", "0.2", ",", "0.2", ",", "0.2", ",", "0.2", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "mean", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "mean", "=", "np", ".", "array", "(", "mean", ")", "\n", "", "elif", "not", "isinstance", "(", "mean", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Expected mean to be a np.ndarray, list or tuple. Received: {}'", ".", "format", "(", "type", "(", "mean", ")", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "std", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "std", "=", "np", ".", "array", "(", "std", ")", "\n", "", "elif", "not", "isinstance", "(", "std", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Expected std to be a np.ndarray, list or tuple. Received: {}'", ".", "format", "(", "type", "(", "std", ")", ")", ")", "\n", "\n", "", "anchor_widths", "=", "anchors", "[", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", "0", "]", "\n", "anchor_heights", "=", "anchors", "[", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", "1", "]", "\n", "\n", "targets_dx1", "=", "(", "gt_boxes", "[", ":", ",", "0", "]", "-", "anchors", "[", ":", ",", "0", "]", ")", "/", "anchor_widths", "\n", "targets_dy1", "=", "(", "gt_boxes", "[", ":", ",", "1", "]", "-", "anchors", "[", ":", ",", "1", "]", ")", "/", "anchor_heights", "\n", "targets_dx2", "=", "(", "gt_boxes", "[", ":", ",", "2", "]", "-", "anchors", "[", ":", ",", "2", "]", ")", "/", "anchor_widths", "\n", "targets_dy2", "=", "(", "gt_boxes", "[", ":", ",", "3", "]", "-", "anchors", "[", ":", ",", "3", "]", ")", "/", "anchor_heights", "\n", "\n", "targets", "=", "np", ".", "stack", "(", "(", "targets_dx1", ",", "targets_dy1", ",", "targets_dx2", ",", "targets_dy2", ")", ")", "\n", "targets", "=", "targets", ".", "T", "\n", "\n", "targets", "=", "(", "targets", "-", "mean", ")", "/", "std", "\n", "\n", "return", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.compute_overlap": [[276, 301], ["numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.finfo"], "function", ["None"], ["", "def", "compute_overlap", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"\n    Args\n\n        a: (N, 4) ndarray of float\n        b: (K, 4) ndarray of float\n\n    Returns\n        overlaps: (N, K) ndarray of overlap between boxes and query_boxes\n    \"\"\"", "\n", "area", "=", "(", "b", "[", ":", ",", "2", "]", "-", "b", "[", ":", ",", "0", "]", ")", "*", "(", "b", "[", ":", ",", "3", "]", "-", "b", "[", ":", ",", "1", "]", ")", "\n", "\n", "iw", "=", "np", ".", "minimum", "(", "np", ".", "expand_dims", "(", "a", "[", ":", ",", "2", "]", ",", "axis", "=", "1", ")", ",", "b", "[", ":", ",", "2", "]", ")", "-", "np", ".", "maximum", "(", "np", ".", "expand_dims", "(", "a", "[", ":", ",", "0", "]", ",", "1", ")", ",", "b", "[", ":", ",", "0", "]", ")", "\n", "ih", "=", "np", ".", "minimum", "(", "np", ".", "expand_dims", "(", "a", "[", ":", ",", "3", "]", ",", "axis", "=", "1", ")", ",", "b", "[", ":", ",", "3", "]", ")", "-", "np", ".", "maximum", "(", "np", ".", "expand_dims", "(", "a", "[", ":", ",", "1", "]", ",", "1", ")", ",", "b", "[", ":", ",", "1", "]", ")", "\n", "\n", "iw", "=", "np", ".", "maximum", "(", "iw", ",", "0", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "ih", ",", "0", ")", "\n", "\n", "ua", "=", "np", ".", "expand_dims", "(", "(", "a", "[", ":", ",", "2", "]", "-", "a", "[", ":", ",", "0", "]", ")", "*", "(", "a", "[", ":", ",", "3", "]", "-", "a", "[", ":", ",", "1", "]", ")", ",", "axis", "=", "1", ")", "+", "area", "-", "iw", "*", "ih", "\n", "\n", "ua", "=", "np", ".", "maximum", "(", "ua", ",", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "\n", "intersection", "=", "iw", "*", "ih", "\n", "\n", "return", "intersection", "/", "ua", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.Timeout.__init__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "sec", ")", ":", "\n", "        ", "self", ".", "sec", "=", "sec", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.Timeout.__enter__": [[17, 20], ["signal.signal", "signal.setitimer"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGALRM", ",", "self", ".", "raise_timeout", ")", "\n", "signal", ".", "setitimer", "(", "signal", ".", "ITIMER_REAL", ",", "self", ".", "sec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.Timeout.__exit__": [[21, 23], ["signal.alarm"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "signal", ".", "alarm", "(", "0", ")", "# disable alarm", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.Timeout.raise_timeout": [[24, 26], ["Timeout.Timeout"], "methods", ["None"], ["", "def", "raise_timeout", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "raise", "Timeout", ".", "Timeout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.agglomerative_init": [[28, 73], ["numpy.zeros", "numpy.zeros.fill", "numpy.vstack", "numpy.vstack", "numpy.hstack", "scipy.spatial.distance.cdist", "numpy.triu", "numpy.nan_to_num", "range", "numpy.array", "numpy.ones", "numpy.unravel_index", "numpy.expand_dims", "deleted.append", "deleted.append", "mu.copy", "numpy.zeros", "numpy.zeros", "numpy.argmin", "scipy.spatial.distance.cdist", "numpy.expand_dims", "numpy.dot", "numpy.expand_dims.transpose"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "", "def", "agglomerative_init", "(", "alpha", ",", "mu", ",", "covariance", ",", "n", ",", "k", ")", ":", "\n", "\n", "    ", "mu_stack", "=", "numpy", ".", "zeros", "(", "shape", "=", "[", "n", "-", "k", ",", "mu", ".", "shape", "[", "1", "]", "]", ",", "dtype", "=", "mu", ".", "dtype", ")", "\n", "mu_stack", ".", "fill", "(", "numpy", ".", "inf", ")", "\n", "mu_temp", "=", "numpy", ".", "vstack", "(", "[", "mu", ".", "copy", "(", ")", ",", "mu_stack", "]", ")", "\n", "covariance_temp", "=", "numpy", ".", "vstack", "(", "\n", "[", "covariance", ",", "numpy", ".", "zeros", "(", "shape", "=", "[", "n", "-", "k", ",", "covariance", ".", "shape", "[", "1", "]", ",", "covariance", ".", "shape", "[", "2", "]", "]", ",", "dtype", "=", "covariance", ".", "dtype", ")", "]", ")", "\n", "alpha_temp", "=", "numpy", ".", "hstack", "(", "[", "alpha", ",", "numpy", ".", "zeros", "(", "shape", "=", "(", "n", "-", "k", ")", ",", "dtype", "=", "alpha", ".", "dtype", ")", "]", ")", "\n", "distances", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "mu_temp", ",", "mu_temp", ")", "\n", "distances", "=", "numpy", ".", "triu", "(", "distances", ")", "\n", "distances", "=", "numpy", ".", "nan_to_num", "(", "distances", ")", "\n", "distances", "[", "distances", "==", "0", "]", "=", "numpy", ".", "inf", "\n", "deleted", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "n", ",", "2", "*", "n", "-", "k", ")", ":", "\n", "        ", "i", ",", "j", "=", "numpy", ".", "unravel_index", "(", "numpy", ".", "argmin", "(", "distances", ")", ",", "distances", ".", "shape", ")", "\n", "\n", "alpha_ij", "=", "alpha_temp", "[", "i", "]", "+", "alpha_temp", "[", "j", "]", "\n", "mu_ij", "=", "(", "alpha_temp", "[", "i", "]", "*", "mu_temp", "[", "i", "]", "+", "alpha_temp", "[", "j", "]", "*", "mu_temp", "[", "j", "]", ")", "/", "alpha_ij", "\n", "harmonic_mean", "=", "(", "alpha_temp", "[", "i", "]", "*", "alpha_temp", "[", "j", "]", ")", "/", "alpha_ij", "\n", "delta_mu", "=", "(", "mu_temp", "[", "i", "]", "-", "mu_temp", "[", "j", "]", ")", "\n", "delta_mu", "=", "numpy", ".", "expand_dims", "(", "delta_mu", ",", "axis", "=", "1", ")", "\n", "covariance_ij", "=", "(", "alpha_temp", "[", "i", "]", "*", "covariance_temp", "[", "i", "]", "+", "alpha_temp", "[", "j", "]", "*", "covariance_temp", "[", "\n", "j", "]", "+", "harmonic_mean", "*", "numpy", ".", "dot", "(", "delta_mu", ",", "delta_mu", ".", "transpose", "(", ")", ")", ")", "/", "alpha_ij", "\n", "\n", "mu_temp", "[", "l", "]", "=", "mu_ij", "\n", "covariance_temp", "[", "l", "]", "=", "covariance_ij", "\n", "alpha_temp", "[", "l", "]", "=", "alpha_ij", "\n", "\n", "distances", "[", ":", ",", "i", "]", "=", "numpy", ".", "inf", "\n", "distances", "[", ":", ",", "j", "]", "=", "numpy", ".", "inf", "\n", "distances", "[", "i", ",", ":", "]", "=", "numpy", ".", "inf", "\n", "distances", "[", "j", ",", ":", "]", "=", "numpy", ".", "inf", "\n", "mu_temp", "[", "i", "]", "=", "numpy", ".", "inf", "\n", "mu_temp", "[", "j", "]", "=", "numpy", ".", "inf", "\n", "deleted", ".", "append", "(", "i", ")", "\n", "deleted", ".", "append", "(", "j", ")", "\n", "\n", "d", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "mu_temp", ",", "numpy", ".", "expand_dims", "(", "mu_ij", ",", "axis", "=", "0", ")", ")", "[", ":", ",", "0", "]", "\n", "d", "[", "d", "==", "0", "]", "=", "numpy", ".", "inf", "\n", "distances", "[", ":", ",", "l", "]", "=", "d", "\n", "", "deleted_indexes", "=", "numpy", ".", "array", "(", "deleted", ")", "\n", "mask", "=", "numpy", ".", "ones", "(", "alpha_temp", ".", "shape", "[", "0", "]", ",", "dtype", "=", "bool", ")", "\n", "if", "deleted_indexes", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "mask", "[", "deleted_indexes", "]", "=", "False", "\n", "", "return", "alpha_temp", "[", "mask", "]", ",", "mu_temp", "[", "mask", "]", ",", "covariance_temp", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.gaussian_kl": [[75, 83], ["numpy.linalg.inv", "numpy.log", "numpy.expand_dims", "numpy.linalg.det", "numpy.linalg.det", "numpy.dot", "numpy.trace", "numpy.dot", "numpy.dot", "numpy.expand_dims.transpose"], "function", ["None"], ["", "def", "gaussian_kl", "(", "mu1", ",", "cov1", ",", "mu2", ",", "cov2", ")", ":", "\n", "    ", "cov2inv", "=", "numpy", ".", "linalg", ".", "inv", "(", "cov2", ")", "\n", "log_det_ratio", "=", "numpy", ".", "log", "(", "numpy", ".", "linalg", ".", "det", "(", "cov2", ")", "/", "numpy", ".", "linalg", ".", "det", "(", "cov1", ")", ")", "\n", "delta_mu", "=", "(", "mu1", "-", "mu2", ")", "\n", "delta_mu", "=", "numpy", ".", "expand_dims", "(", "delta_mu", ",", "axis", "=", "1", ")", "\n", "return", "0.5", "*", "(", "log_det_ratio", "\n", "+", "numpy", ".", "trace", "(", "numpy", ".", "dot", "(", "cov2inv", ",", "cov1", ")", ")", "\n", "+", "numpy", ".", "dot", "(", "numpy", ".", "dot", "(", "delta_mu", ".", "transpose", "(", ")", ",", "cov2inv", ")", ",", "delta_mu", ")", ")", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.gaussian_kl_diag": [[85, 93], ["numpy.sqrt", "numpy.sqrt", "math.log", "math.log"], "function", ["None"], ["", "def", "gaussian_kl_diag", "(", "mu1", ",", "cov1", ",", "mu2", ",", "cov2", ")", ":", "\n", "    ", "cov2sqrt", "=", "numpy", ".", "sqrt", "(", "cov2", ")", "\n", "cov1sqrt", "=", "numpy", ".", "sqrt", "(", "cov1", ")", "\n", "log_ratio", "=", "math", ".", "log", "(", "cov2sqrt", "[", "0", ",", "0", "]", "/", "cov1sqrt", "[", "0", ",", "0", "]", ")", "+", "math", ".", "log", "(", "cov2sqrt", "[", "1", ",", "1", "]", "/", "cov1sqrt", "[", "1", ",", "1", "]", ")", "\n", "delta_mu", "=", "(", "mu1", "-", "mu2", ")", "\n", "div", "=", "(", "cov1", "[", "0", ",", "0", "]", "+", "delta_mu", "[", "0", "]", "*", "delta_mu", "[", "0", "]", ")", "/", "(", "2", "*", "cov2", "[", "0", ",", "0", "]", ")", "+", "(", "cov1", "[", "1", ",", "1", "]", "+", "delta_mu", "[", "1", "]", "*", "delta_mu", "[", "1", "]", ")", "/", "(", "\n", "2", "*", "cov2", "[", "1", ",", "1", "]", ")", "\n", "return", "div", "+", "log_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.collapse": [[95, 146], ["CollapsingMoG.Timeout", "numpy.array", "numpy.array().transpose", "numpy.array().transpose", "CollapsingMoG.agglomerative_init", "print", "CollapsingMoG.Timeout", "beta.copy", "mu_prime.copy", "covariance_prime.copy", "float", "float", "print", "numpy.array.copy", "numpy.array().transpose.copy", "numpy.array().transpose.copy", "CollapsingMoG.e_step", "CollapsingMoG.m_step", "enumerate", "print", "original_detection_centers.confidence.sum", "numpy.array", "numpy.array", "zip", "CollapsingMoG.min_kl", "print"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.agglomerative_init", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.e_step", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.m_step", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.min_kl"], ["", "def", "collapse", "(", "original_detection_centers", ",", "k", ",", "offset", ",", "max_iter", "=", "100", ",", "epsilon", "=", "1e-100", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "Timeout", "(", "3", ")", ":", "\n", "            ", "n", "=", "original_detection_centers", ".", "shape", "[", "0", "]", "\n", "mu_x", "=", "original_detection_centers", ".", "x", "-", "offset", "[", "0", "]", "\n", "mu_y", "=", "original_detection_centers", ".", "y", "-", "offset", "[", "1", "]", "\n", "sigma_xx", "=", "original_detection_centers", ".", "sigma_x", "*", "original_detection_centers", ".", "sigma_x", "\n", "sigma_yy", "=", "original_detection_centers", ".", "sigma_y", "*", "original_detection_centers", ".", "sigma_y", "\n", "\n", "alpha", "=", "numpy", ".", "array", "(", "original_detection_centers", ".", "confidence", "/", "original_detection_centers", ".", "confidence", ".", "sum", "(", ")", ")", "\n", "mu", "=", "numpy", ".", "array", "(", "[", "mu_x", ".", "values", ",", "mu_y", ".", "values", "]", ")", ".", "transpose", "(", ")", "\n", "covariance", "=", "numpy", ".", "array", "(", "[", "[", "sigma_xx", ".", "values", ",", "sigma_xx", ".", "values", "*", "0", "]", ",", "[", "0", "*", "sigma_yy", ".", "values", ",", "sigma_yy", ".", "values", "]", "]", ")", ".", "transpose", "(", ")", "\n", "\n", "beta", ",", "mu_prime", ",", "covariance_prime", "=", "agglomerative_init", "(", "alpha", ".", "copy", "(", ")", ",", "mu", ".", "copy", "(", ")", ",", "covariance", ".", "copy", "(", ")", ",", "n", ",", "k", ")", "\n", "", "", "except", "Timeout", ".", "Timeout", ":", "\n", "        ", "print", "(", "\"agglomerative_init Timeout - using fallback\"", ")", "\n", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "try", ":", "\n", "        ", "with", "Timeout", "(", "10", ")", ":", "\n", "\n", "            ", "beta_init", "=", "beta", ".", "copy", "(", ")", "\n", "mu_prime_init", "=", "mu_prime", ".", "copy", "(", ")", "\n", "covariance_prime_init", "=", "covariance_prime", ".", "copy", "(", ")", "\n", "iteration", "=", "0", "\n", "d_val", "=", "float", "(", "'inf'", ")", "\n", "delta", "=", "float", "(", "'inf'", ")", "\n", "min_kl_cache", "=", "{", "}", "\n", "while", "delta", ">", "epsilon", "and", "iteration", "<", "max_iter", ":", "\n", "                ", "iteration", "+=", "1", "\n", "clusters", ",", "clusters_inv", "=", "e_step", "(", "alpha", ",", "beta", ",", "covariance", ",", "covariance_prime", ",", "mu", ",", "mu_prime", ",", "min_kl_cache", ")", "\n", "m_step", "(", "alpha", ",", "beta", ",", "clusters", ",", "covariance", ",", "covariance_prime", ",", "mu", ",", "mu_prime", ")", "\n", "\n", "prev_d_val", "=", "d_val", "\n", "d_val", "=", "0", "\n", "for", "t", ",", "(", "alpha_", ",", "mu_", ",", "cov_", ")", "in", "enumerate", "(", "zip", "(", "alpha", ",", "mu", ",", "covariance", ")", ")", ":", "\n", "                    ", "min_dist", ",", "selected_cluster", "=", "min_kl", "(", "beta", ",", "cov_", ",", "covariance_prime", ",", "mu_", ",", "mu_prime", ")", "\n", "min_kl_cache", "[", "t", "]", "=", "(", "min_dist", ",", "selected_cluster", ")", "\n", "d_val", "+=", "alpha_", "*", "min_dist", "\n", "", "delta", "=", "prev_d_val", "-", "d_val", "\n", "if", "delta", "<", "0", ":", "\n", "                    ", "print", "(", "'EM bug - not monotonic- using fallback'", ")", "\n", "return", "beta_init", ",", "mu_prime_init", ",", "covariance_prime_init", "\n", "#Log.debug('Iteration {}, d_val={}, delta={}, k={}, n={}'.format(iteration, d_val, delta, k, n))", "\n", "\n", "", "", "if", "delta", ">", "epsilon", ":", "\n", "                ", "print", "(", "'EM did not converge- using fallback'", ")", "\n", "return", "beta_init", ",", "mu_prime_init", ",", "covariance_prime_init", "\n", "", "", "", "except", "Timeout", ".", "Timeout", ":", "\n", "        ", "print", "(", "\"EM Timeout - using fallback\"", ")", "\n", "", "return", "beta", ",", "mu_prime", ",", "covariance_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.e_step": [[148, 162], ["enumerate", "zip", "clusters[].append", "CollapsingMoG.min_kl"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.min_kl"], ["", "def", "e_step", "(", "alpha", ",", "beta", ",", "covariance", ",", "covariance_prime", ",", "mu", ",", "mu_prime", ",", "min_kl_cache", ")", ":", "\n", "    ", "clusters", "=", "{", "}", "\n", "clusters_inv", "=", "{", "}", "\n", "for", "t", ",", "(", "alpha_", ",", "mu_", ",", "cov_", ")", "in", "enumerate", "(", "zip", "(", "alpha", ",", "mu", ",", "covariance", ")", ")", ":", "\n", "        ", "if", "t", "in", "min_kl_cache", ":", "\n", "            ", "min_dist", ",", "selected_cluster", "=", "min_kl_cache", "[", "t", "]", "\n", "", "else", ":", "\n", "            ", "min_dist", ",", "selected_cluster", "=", "min_kl", "(", "beta", ",", "cov_", ",", "covariance_prime", ",", "mu_", ",", "mu_prime", ")", "\n", "\n", "", "if", "selected_cluster", "not", "in", "clusters", ":", "\n", "            ", "clusters", "[", "selected_cluster", "]", "=", "[", "]", "\n", "", "clusters", "[", "selected_cluster", "]", ".", "append", "(", "t", ")", "\n", "clusters_inv", "[", "t", "]", "=", "selected_cluster", "\n", "", "return", "clusters", ",", "clusters_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.min_kl": [[164, 187], ["numpy.zeros_like", "numpy.zeros_like", "numpy.zeros_like", "numpy.sqrt", "numpy.sqrt", "numpy.log", "numpy.log", "kl.min", "kl.argmin"], "function", ["None"], ["", "def", "min_kl", "(", "beta", ",", "cov_", ",", "covariance_prime", ",", "mu_", ",", "mu_prime", ")", ":", "\n", "    ", "cov_g", "=", "numpy", ".", "zeros_like", "(", "mu_prime", ")", "\n", "cov_g", "[", ":", ",", "0", "]", "=", "covariance_prime", "[", ":", ",", "0", ",", "0", "]", "\n", "cov_g", "[", ":", ",", "1", "]", "=", "covariance_prime", "[", ":", ",", "1", ",", "1", "]", "\n", "\n", "cov_f", "=", "numpy", ".", "zeros_like", "(", "mu_prime", ")", "\n", "cov_f", "[", ":", ",", "0", "]", "=", "cov_", "[", "0", ",", "0", "]", "\n", "cov_f", "[", ":", ",", "1", "]", "=", "cov_", "[", "1", ",", "1", "]", "\n", "\n", "mu_f", "=", "numpy", ".", "zeros_like", "(", "mu_prime", ")", "\n", "mu_f", "[", ":", ",", "0", "]", "=", "mu_", "[", "0", "]", "\n", "mu_f", "[", ":", ",", "1", "]", "=", "mu_", "[", "1", "]", "\n", "mu_g", "=", "mu_prime", "\n", "\n", "cov_g_sqrt", "=", "numpy", ".", "sqrt", "(", "cov_g", ")", "\n", "cov_f_sqrt", "=", "numpy", ".", "sqrt", "(", "cov_f", ")", "\n", "log_ratio", "=", "numpy", ".", "log", "(", "cov_g_sqrt", "[", ":", ",", "0", "]", "/", "cov_f_sqrt", "[", ":", ",", "0", "]", ")", "+", "numpy", ".", "log", "(", "cov_g_sqrt", "[", ":", ",", "1", "]", "/", "cov_f_sqrt", "[", ":", ",", "1", "]", ")", "\n", "delta_mu", "=", "mu_f", "-", "mu_g", "\n", "delta_mu_square", "=", "delta_mu", "*", "delta_mu", "\n", "div", "=", "(", "cov_f", "[", ":", ",", "0", "]", "+", "delta_mu_square", "[", ":", ",", "0", "]", ")", "/", "(", "2", "*", "cov_g", "[", ":", ",", "0", "]", ")", "+", "(", "cov_f", "[", ":", ",", "1", "]", "+", "delta_mu_square", "[", ":", ",", "1", "]", ")", "/", "(", "\n", "2", "*", "cov_g", "[", ":", ",", "1", "]", ")", "\n", "kl", "=", "div", "+", "log_ratio", "\n", "return", "kl", ".", "min", "(", ")", ",", "kl", ".", "argmin", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.m_step": [[189, 209], ["clusters.items", "numpy.array", "numpy.array", "numpy.add", "numpy.expand_dims", "numpy.add", "numpy.dot", "numpy.expand_dims.transpose"], "function", ["None"], ["", "def", "m_step", "(", "alpha", ",", "beta", ",", "clusters", ",", "covariance", ",", "covariance_prime", ",", "mu", ",", "mu_prime", ")", ":", "\n", "    ", "for", "j", ",", "t_vals", "in", "clusters", ".", "items", "(", ")", ":", "\n", "        ", "beta_update", "=", "0", "\n", "for", "t", "in", "t_vals", ":", "\n", "            ", "beta_update", "+=", "alpha", "[", "t", "]", "\n", "", "beta", "[", "j", "]", "=", "beta_update", "\n", "\n", "mu_update", "=", "numpy", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "for", "t", "in", "t_vals", ":", "\n", "            ", "mu_update", "=", "numpy", ".", "add", "(", "mu_update", ",", "alpha", "[", "t", "]", "*", "mu", "[", "t", "]", ")", "\n", "", "mu_update", "/=", "beta", "[", "j", "]", "\n", "mu_prime", "[", "j", "]", "=", "mu_update", "\n", "\n", "cov_update", "=", "numpy", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "for", "t", "in", "t_vals", ":", "\n", "            ", "delta_mu", "=", "(", "mu", "[", "t", "]", "-", "mu_prime", "[", "j", "]", ")", "\n", "delta_mu", "=", "numpy", ".", "expand_dims", "(", "delta_mu", ",", "axis", "=", "1", ")", "\n", "cov_update", "=", "numpy", ".", "add", "(", "cov_update", ",", "alpha", "[", "t", "]", "*", "(", "covariance", "[", "t", "]", "+", "numpy", ".", "dot", "(", "delta_mu", ",", "delta_mu", ".", "transpose", "(", ")", ")", ")", ")", "\n", "", "cov_update", "/=", "beta", "[", "j", "]", "\n", "covariance_prime", "[", "j", "]", "=", "cov_update", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_box": [[23, 34], ["numpy.array().astype", "cv2.rectangle", "numpy.array"], "function", ["None"], ["def", "draw_box", "(", "image", ",", "box", ",", "color", ",", "thickness", "=", "2", ")", ":", "\n", "    ", "\"\"\" Draws a box on an image with a given color.\n\n    # Arguments\n        image     : The image to draw on.\n        box       : A list of 4 elements (x1, y1, x2, y2).\n        color     : The color of the box.\n        thickness : The thickness of the lines to draw a box with.\n    \"\"\"", "\n", "b", "=", "np", ".", "array", "(", "box", ")", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "rectangle", "(", "image", ",", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", ")", ",", "(", "b", "[", "2", "]", ",", "b", "[", "3", "]", ")", ",", "color", ",", "thickness", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_caption": [[36, 47], ["numpy.array().astype", "cv2.putText", "cv2.putText", "numpy.array"], "function", ["None"], ["", "def", "draw_caption", "(", "image", ",", "box", ",", "caption", ")", ":", "\n", "    ", "\"\"\" Draws a caption above the box in an image.\n\n    # Arguments\n        image   : The image to draw on.\n        box     : A list of 4 elements (x1, y1, x2, y2).\n        caption : String containing the text to draw.\n    \"\"\"", "\n", "b", "=", "np", ".", "array", "(", "box", ")", ".", "astype", "(", "int", ")", "\n", "cv2", ".", "putText", "(", "image", ",", "caption", ",", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", "-", "10", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "(", "0", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "cv2", ".", "putText", "(", "image", ",", "caption", ",", "(", "b", "[", "0", "]", ",", "b", "[", "1", "]", "-", "10", ")", ",", "cv2", ".", "FONT_HERSHEY_PLAIN", ",", "1", ",", "(", "255", ",", "255", ",", "255", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_boxes": [[49, 60], ["visualization.draw_box"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_box"], ["", "def", "draw_boxes", "(", "image", ",", "boxes", ",", "color", ",", "thickness", "=", "2", ")", ":", "\n", "    ", "\"\"\" Draws boxes on an image with a given color.\n\n    # Arguments\n        image     : The image to draw on.\n        boxes     : A [N, 4] matrix (x1, y1, x2, y2).\n        color     : The color of the boxes.\n        thickness : The thickness of the lines to draw boxes with.\n    \"\"\"", "\n", "for", "b", "in", "boxes", ":", "\n", "        ", "draw_box", "(", "image", ",", "b", ",", "color", ",", "thickness", "=", "thickness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_detections": [[62, 83], ["numpy.where", "visualization.draw_box", "visualization.draw_caption", "colors.label_color", "label_to_name"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_box", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_caption", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.colors.label_color", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.label_to_name"], ["", "", "def", "draw_detections", "(", "image", ",", "boxes", ",", "scores", ",", "labels", ",", "color", "=", "None", ",", "label_to_name", "=", "None", ",", "score_threshold", "=", "0.5", ")", ":", "\n", "    ", "\"\"\" Draws detections in an image.\n\n    # Arguments\n        image           : The image to draw on.\n        boxes           : A [N, 4] matrix (x1, y1, x2, y2).\n        scores          : A list of N classification scores.\n        labels          : A list of N labels.\n        color           : The color of the boxes. By default the color from keras_retinanet.utils.colors.label_color will be used.\n        label_to_name   : (optional) Functor for mapping a label to a name.\n        score_threshold : Threshold used for determining what detections to draw.\n    \"\"\"", "\n", "selection", "=", "np", ".", "where", "(", "scores", ">", "score_threshold", ")", "[", "0", "]", "\n", "\n", "for", "i", "in", "selection", ":", "\n", "        ", "c", "=", "color", "if", "color", "is", "not", "None", "else", "label_color", "(", "labels", "[", "i", "]", ")", "\n", "draw_box", "(", "image", ",", "boxes", "[", "i", ",", ":", "]", ",", "color", "=", "c", ")", "\n", "\n", "# draw labels", "\n", "caption", "=", "(", "label_to_name", "(", "labels", "[", "i", "]", ")", "if", "label_to_name", "else", "labels", "[", "i", "]", ")", "+", "': {0:.2f}'", ".", "format", "(", "scores", "[", "i", "]", ")", "\n", "draw_caption", "(", "image", ",", "boxes", "[", "i", ",", ":", "]", ",", "caption", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_annotations": [[85, 101], ["visualization.draw_caption", "visualization.draw_box", "colors.label_color", "label_to_name"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_caption", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_box", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.colors.label_color", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.label_to_name"], ["", "", "def", "draw_annotations", "(", "image", ",", "annotations", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ",", "label_to_name", "=", "None", ")", ":", "\n", "    ", "\"\"\" Draws annotations in an image.\n\n    # Arguments\n        image         : The image to draw on.\n        annotations   : A [N, 5] matrix (x1, y1, x2, y2, label).\n        color         : The color of the boxes. By default the color from keras_retinanet.utils.colors.label_color will be used.\n        label_to_name : (optional) Functor for mapping a label to a name.\n    \"\"\"", "\n", "for", "a", "in", "annotations", ":", "\n", "        ", "label", "=", "a", "[", "4", "]", "\n", "c", "=", "color", "if", "color", "is", "not", "None", "else", "label_color", "(", "label", ")", "\n", "caption", "=", "'{}'", ".", "format", "(", "label_to_name", "(", "label", ")", "if", "label_to_name", "else", "label", ")", "\n", "draw_caption", "(", "image", ",", "a", ",", "caption", ")", "\n", "\n", "draw_box", "(", "image", ",", "a", ",", "color", "=", "c", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.filter_duplicate_candidates": [[53, 110], ["numpy.zeros", "EmMerger.DuplicateMerger.shrink_boxes", "cv2.normalize", "cv2.convertScaleAbs", "cv2.threshold", "cv2.findContours", "EmMerger.DuplicateMerger.find_new_candidates", "EmMerger.DuplicateMerger.map_original_boxes_to_new_boxes", "pandas.DataFrame", "EmMerger.DuplicateMerger.items", "object_detector_retinanet.keras_retinanet.utils.Boxes.perform_nms_on_image_dataframe", "numpy.ndarray.copy", "original_detections.avg_score.argmax", "original_detections.ix[].copy", "filtered_data.append.append.append"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.shrink_boxes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.find_new_candidates", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.map_original_boxes_to_new_boxes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.perform_nms_on_image_dataframe"], ["def", "filter_duplicate_candidates", "(", "self", ",", "data", ",", "image", ")", ":", "\n", "\n", "        ", "Params", ".", "box_size_factor", "=", "0.5", "\n", "Params", ".", "min_box_size", "=", "5", "\n", "Params", ".", "ellipsoid_thresh", "=", "0.5", "\n", "Params", ".", "min_k", "=", "0", "\n", "\n", "# TODO time optimization: split into initial clusters using gaussian information rather than heatmap contours", "\n", "heat_map", "=", "numpy", ".", "zeros", "(", "shape", "=", "[", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ",", "1", "]", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "original_detection_centers", "=", "self", ".", "shrink_boxes", "(", "data", ",", "heat_map", ")", "\n", "\n", "cv2", ".", "normalize", "(", "heat_map", ",", "heat_map", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ")", "\n", "heat_map", "=", "cv2", ".", "convertScaleAbs", "(", "heat_map", ")", "\n", "h2", ",", "heat_map", "=", "cv2", ".", "threshold", "(", "heat_map", ",", "4", ",", "255", ",", "cv2", ".", "THRESH_TOZERO", ")", "\n", "contours", "=", "cv2", ".", "findContours", "(", "numpy", ".", "ndarray", ".", "copy", "(", "heat_map", ")", ",", "cv2", ".", "RETR_EXTERNAL", ",", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "\n", "candidates", "=", "self", ".", "find_new_candidates", "(", "contours", ",", "heat_map", ",", "data", ",", "original_detection_centers", ",", "image", ")", "\n", "candidates", "=", "self", ".", "map_original_boxes_to_new_boxes", "(", "candidates", ",", "original_detection_centers", ")", "\n", "\n", "# TODO time optimization: parallelize contours/clusters resolvers.", "\n", "# TODO time optimization: convert numpy to tensorflow/keras", "\n", "best_detection_ids", "=", "{", "}", "\n", "filtered_data", "=", "pandas", ".", "DataFrame", "(", "columns", "=", "data", ".", "columns", ")", "\n", "for", "i", ",", "candidate", "in", "candidates", ".", "items", "(", ")", ":", "\n", "            ", "label", "=", "candidate", "[", "'original_detection_ids'", "]", "\n", "original_detections", "=", "data", ".", "ix", "[", "label", "]", "\n", "original_detections", "[", "\n", "'avg_score'", "]", "=", "0.5", "*", "original_detections", ".", "confidence", "+", "0.5", "*", "original_detections", ".", "hard_score", "\n", "best_detection_id", "=", "original_detections", ".", "avg_score", ".", "argmax", "(", ")", "\n", "# best_detection_id = original_detections.confidence.argmax()", "\n", "# best_detection_id = original_detections.hard_score.argmax()", "\n", "best_detection", "=", "original_detections", ".", "ix", "[", "best_detection_id", "]", ".", "copy", "(", ")", "\n", "\n", "# The following code creates the median bboxes", "\n", "# original_detections = original_detections[original_detections.confidence > 0.5]", "\n", "# if original_detections.shape[0] > 0:", "\n", "#     w = original_detections['x2'] - original_detections['x1']", "\n", "#     h = original_detections['y2'] - original_detections['y1']", "\n", "#     x = original_detections['x1'] + 0.5 * w", "\n", "#     y = original_detections['y1'] + 0.5 * h", "\n", "#", "\n", "#     med_x = int(round(scipy.percentile(x, 50)))", "\n", "#     med_y = int(round(scipy.percentile(y, 50)))", "\n", "#     med_w = int(round(scipy.percentile(w, 50)))", "\n", "#     med_h = int(round(scipy.percentile(h, 50)))", "\n", "#     best_detection['x1'] = med_x - med_w / 2", "\n", "#     best_detection['y1'] = med_y - med_h / 2", "\n", "#     best_detection['x2'] = med_x + med_w / 2", "\n", "#     best_detection['y2'] = med_y + med_h / 2", "\n", "\n", "best_detection_ids", "[", "best_detection_id", "]", "=", "best_detection", "\n", "filtered_data", "=", "filtered_data", ".", "append", "(", "best_detection", ")", "\n", "\n", "# to handle overlap between contour bboxes", "\n", "", "filtered_data", "=", "perform_nms_on_image_dataframe", "(", "filtered_data", ",", "0.3", ")", "\n", "\n", "return", "filtered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.find_new_candidates": [[111, 157], ["enumerate", "cv2.boundingRect", "cv2.contourArea", "EmMerger.DuplicateMerger.get_contour_indexes", "EmMerger.DuplicateMerger.sum", "object_detector_retinanet.keras_retinanet.utils.Boxes.extract_boxes_from_edge_boxes", "areas.median", "numpy.copy", "max", "numpy.array", "min", "int", "numpy.round", "object_detector_retinanet.keras_retinanet.utils.CollapsingMoG.collapse", "print", "EmMerger.DuplicateMerger.perform_nms", "EmMerger.DuplicateMerger.remove_redundant", "EmMerger.DuplicateMerger.set_candidates", "original_detection_centers[].copy"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.get_contour_indexes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.extract_boxes_from_edge_boxes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.CollapsingMoG.collapse", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.perform_nms", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.remove_redundant", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.set_candidates"], ["", "def", "find_new_candidates", "(", "self", ",", "contours", ",", "heat_map", ",", "data", ",", "original_detection_centers", ",", "image", ")", ":", "\n", "        ", "candidates", "=", "[", "]", "\n", "for", "contour_i", ",", "contour", "in", "enumerate", "(", "contours", "[", "1", "]", ")", ":", "\n", "            ", "contour_bounding_rect", "=", "cv2", ".", "boundingRect", "(", "contour", ")", "\n", "\n", "contour_bbox", "=", "extract_boxes_from_edge_boxes", "(", "numpy", ".", "array", "(", "contour_bounding_rect", ")", ")", "[", "0", "]", "\n", "box_width", "=", "contour_bbox", "[", "BOX", ".", "X2", "]", "-", "contour_bbox", "[", "BOX", ".", "X1", "]", "\n", "box_height", "=", "contour_bbox", "[", "BOX", ".", "Y2", "]", "-", "contour_bbox", "[", "BOX", ".", "Y1", "]", "\n", "contour_area", "=", "cv2", ".", "contourArea", "(", "contour", ")", "\n", "offset", "=", "contour_bbox", "[", "0", ":", "2", "]", "\n", "mu", "=", "None", "\n", "cov", "=", "None", "\n", "original_indexes", "=", "self", ".", "get_contour_indexes", "(", "contour", ",", "contour_bbox", ",", "original_detection_centers", "[", "'x'", "]", ",", "\n", "original_detection_centers", "[", "'y'", "]", ")", "\n", "\n", "n", "=", "original_indexes", ".", "sum", "(", ")", "\n", "if", "n", ">", "0", "and", "box_width", ">", "3", "and", "box_height", ">", "3", ":", "\n", "                ", "curr_data", "=", "data", "[", "original_indexes", "]", "\n", "w", "=", "(", "curr_data", "[", "'x2'", "]", "-", "curr_data", "[", "'x1'", "]", ")", "*", "Params", ".", "box_size_factor", "\n", "h", "=", "(", "curr_data", "[", "'y2'", "]", "-", "curr_data", "[", "'y1'", "]", ")", "*", "Params", ".", "box_size_factor", "\n", "areas", "=", "w", "*", "h", "\n", "median_area", "=", "areas", ".", "median", "(", ")", "\n", "if", "median_area", ">", "0", ":", "\n", "                    ", "approximate_number_of_objects", "=", "min", "(", "numpy", ".", "round", "(", "contour_area", "/", "median_area", ")", ",", "100", ")", "\n", "", "else", ":", "\n", "                    ", "approximate_number_of_objects", "=", "0", "\n", "", "sub_heat_map", "=", "numpy", ".", "copy", "(", "heat_map", "[", "contour_bbox", "[", "BOX", ".", "Y1", "]", ":", "contour_bbox", "[", "BOX", ".", "Y2", "]", ",", "\n", "contour_bbox", "[", "BOX", ".", "X1", "]", ":", "contour_bbox", "[", "BOX", ".", "X2", "]", "]", ")", "\n", "k", "=", "max", "(", "1", ",", "int", "(", "approximate_number_of_objects", ")", ")", "\n", "# print n,k", "\n", "if", "k", ">=", "1", "and", "n", ">", "k", ":", "\n", "                    ", "if", "k", ">", "Params", ".", "min_k", ":", "\n", "                        ", "beta", ",", "mu", ",", "cov", "=", "collapse", "(", "original_detection_centers", "[", "original_indexes", "]", ".", "copy", "(", ")", ",", "k", ",", "offset", ",", "\n", "max_iter", "=", "20", ",", "epsilon", "=", "1e-10", ")", "\n", "", "if", "mu", "is", "None", ":", "# k<=Params.min_k or EM failed", "\n", "                        ", "print", "(", "n", ",", "k", ",", "' k<=Params.min_k or EM failed'", ")", "\n", "self", ".", "perform_nms", "(", "candidates", ",", "contour_i", ",", "curr_data", ")", "\n", "", "else", ":", "# successful EM", "\n", "                        ", "cov", ",", "mu", ",", "num", ",", "roi", "=", "self", ".", "remove_redundant", "(", "contour_bbox", ",", "cov", ",", "k", ",", "mu", ",", "image", ",", "sub_heat_map", ")", "\n", "self", ".", "set_candidates", "(", "candidates", ",", "cov", ",", "heat_map", ",", "mu", ",", "num", ",", "offset", ",", "roi", ",", "sub_heat_map", ")", "\n", "", "", "elif", "(", "k", "==", "n", ")", ":", "\n", "                    ", "pass", "\n", "# print n, k, ' k==n'", "\n", "# self.perform_nms(candidates, contour_i, curr_data)", "\n", "\n", "", "", "", "return", "candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.set_candidates": [[158, 175], ["enumerate", "zip", "numpy.sqrt", "numpy.sqrt", "int", "int", "int", "int", "numpy.array", "round", "round", "round", "round", "EmMerger.DuplicateMerger.local_box_offset", "candidates.append", "max", "max", "min", "min", "heat_map[].max"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.local_box_offset"], ["", "def", "set_candidates", "(", "self", ",", "candidates", ",", "cov", ",", "heat_map", ",", "mu", ",", "num", ",", "offset", ",", "roi", ",", "sub_heat_map", ")", ":", "\n", "        ", "for", "source_i", ",", "(", "(", "_x", ",", "_y", ")", ",", "c", ")", "in", "enumerate", "(", "zip", "(", "mu", ",", "cov", ")", ")", ":", "\n", "            ", "sigmax", "=", "numpy", ".", "sqrt", "(", "c", "[", "0", ",", "0", "]", ")", "\n", "sigmay", "=", "numpy", ".", "sqrt", "(", "c", "[", "1", ",", "1", "]", ")", "\n", "_x1", "=", "int", "(", "round", "(", "max", "(", "0", ",", "_x", "-", "2", "*", "sigmax", ")", ")", ")", "\n", "_y1", "=", "int", "(", "round", "(", "max", "(", "0", ",", "_y", "-", "2", "*", "sigmay", ")", ")", ")", "\n", "_x2", "=", "int", "(", "round", "(", "min", "(", "sub_heat_map", ".", "shape", "[", "1", "]", ",", "_x", "+", "2", "*", "sigmax", ")", ")", ")", "\n", "_y2", "=", "int", "(", "round", "(", "min", "(", "sub_heat_map", ".", "shape", "[", "0", "]", ",", "_y", "+", "2", "*", "sigmay", ")", ")", ")", "\n", "\n", "local_box", "=", "[", "_x1", ",", "_y1", ",", "_x2", ",", "_y2", "]", "\n", "abs_box", "=", "numpy", ".", "array", "(", "self", ".", "local_box_offset", "(", "offset", ",", "local_box", ")", ")", "\n", "box_width", "=", "abs_box", "[", "BOX", ".", "X2", "]", "-", "abs_box", "[", "BOX", ".", "X1", "]", "\n", "box_height", "=", "abs_box", "[", "BOX", ".", "Y2", "]", "-", "abs_box", "[", "BOX", ".", "Y1", "]", "\n", "if", "box_width", ">", "Params", ".", "min_box_size", "and", "box_height", ">", "Params", ".", "min_box_size", ":", "\n", "                ", "candidates", ".", "append", "(", "{", "'box'", ":", "abs_box", ",", "'original_detection_ids'", ":", "[", "]", ",", "\n", "'score'", ":", "heat_map", "[", "abs_box", "[", "BOX", ".", "Y1", "]", ":", "abs_box", "[", "BOX", ".", "Y2", "]", ",", "\n", "abs_box", "[", "BOX", ".", "X1", "]", ":", "abs_box", "[", "BOX", ".", "X2", "]", "]", ".", "max", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.remove_redundant": [[176, 251], ["mu.round().astype.round().astype.round().astype", "image[].copy", "enumerate", "mu.round().astype.round().astype.copy", "scipy.spatial.distance.cdist", "numpy.ndarray", "range", "numpy.triu", "numpy.unravel_index", "zip", "zip", "numpy.sqrt", "numpy.sqrt", "numpy.math.sqrt", "cv2.eigen", "numpy.math.atan2", "numpy.zeros_like", "cv2.ellipse2Poly", "cv2.fillPoly", "cv2.findContours", "cnts.append", "range", "numpy.argsort", "len", "numpy.array", "numpy.zeros", "mask.astype.astype.astype", "mu.round().astype.round().astype.round", "scipy.stats.chi2.ppf", "numpy.math.sqrt", "numpy.math.sqrt", "cv2.fillPoly.copy", "max", "max", "max", "max", "numpy.array.append", "int", "int", "int", "int", "int", "cv2.pointPolygonTest", "cv2.pointPolygonTest", "min", "min", "min", "min", "round", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "", "", "def", "remove_redundant", "(", "self", ",", "contour_bbox", ",", "cov", ",", "k", ",", "mu", ",", "image", ",", "sub_heat_map", ")", ":", "\n", "        ", "mu", "=", "mu", ".", "round", "(", ")", ".", "astype", "(", "numpy", ".", "int32", ")", "\n", "\n", "roi", "=", "image", "[", "contour_bbox", "[", "BOX", ".", "Y1", "]", ":", "contour_bbox", "[", "BOX", ".", "Y2", "]", ",", "\n", "contour_bbox", "[", "BOX", ".", "X1", "]", ":", "contour_bbox", "[", "BOX", ".", "X2", "]", "]", ".", "copy", "(", ")", "\n", "cnts", "=", "[", "]", "\n", "for", "source_i", ",", "(", "(", "_x", ",", "_y", ")", ",", "c", ")", "in", "enumerate", "(", "zip", "(", "mu", ",", "cov", ")", ")", ":", "\n", "            ", "sigmax", "=", "numpy", ".", "sqrt", "(", "c", "[", "0", ",", "0", "]", ")", "\n", "sigmay", "=", "numpy", ".", "sqrt", "(", "c", "[", "1", ",", "1", "]", ")", "\n", "\n", "chi_square_val", "=", "numpy", ".", "math", ".", "sqrt", "(", "chi2", ".", "ppf", "(", "Params", ".", "ellipsoid_thresh", ",", "2", ")", ")", "\n", "retval", ",", "eigenvalues", ",", "eigenvectors", "=", "cv2", ".", "eigen", "(", "c", ")", "\n", "angle", "=", "numpy", ".", "math", ".", "atan2", "(", "eigenvectors", "[", "0", ",", "1", "]", ",", "eigenvectors", "[", "0", ",", "0", "]", ")", "\n", "if", "angle", "<", "0", ":", "\n", "                ", "angle", "+=", "2", "*", "numpy", ".", "math", ".", "pi", "\n", "", "angle", "=", "180", "*", "angle", "/", "numpy", ".", "math", ".", "pi", "\n", "\n", "half_major_axis_size", "=", "chi_square_val", "*", "numpy", ".", "math", ".", "sqrt", "(", "eigenvalues", "[", "1", "]", ")", "\n", "half_minor_axis_size", "=", "chi_square_val", "*", "numpy", ".", "math", ".", "sqrt", "(", "eigenvalues", "[", "0", "]", ")", "\n", "\n", "local_m", "=", "numpy", ".", "zeros_like", "(", "sub_heat_map", ")", "\n", "poly", "=", "cv2", ".", "ellipse2Poly", "(", "(", "int", "(", "round", "(", "_x", ")", ")", ",", "int", "(", "round", "(", "_y", ")", ")", ")", ",", "\n", "(", "int", "(", "round", "(", "half_minor_axis_size", ")", ")", ",", "int", "(", "round", "(", "half_major_axis_size", ")", ")", ")", ",", "\n", "-", "int", "(", "round", "(", "angle", ")", ")", ",", "0", ",", "360", ",", "15", ")", "\n", "ellipse_mask", "=", "cv2", ".", "fillPoly", "(", "local_m", ",", "[", "poly", "]", ",", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "contours", "=", "cv2", ".", "findContours", "(", "ellipse_mask", ".", "copy", "(", ")", ",", "cv2", ".", "RETR_EXTERNAL", ",", "\n", "cv2", ".", "CHAIN_APPROX_SIMPLE", ")", "\n", "cnts", ".", "append", "(", "contours", "[", "1", "]", "[", "0", "]", ")", "\n", "", "center_points", "=", "mu", ".", "copy", "(", ")", "\n", "distances", "=", "scipy", ".", "spatial", ".", "distance", ".", "cdist", "(", "center_points", ",", "center_points", ")", "\n", "scaled_distances", "=", "numpy", ".", "ndarray", "(", "shape", "=", "[", "k", ",", "k", "]", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "k", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "k", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "scaled_distances", "[", "i", ",", "j", "]", "=", "0", "\n", "continue", "\n", "", "cnt_i", "=", "cnts", "[", "i", "]", "\n", "cnt_j", "=", "cnts", "[", "j", "]", "\n", "ct_i_to_pt_j", "=", "-", "cv2", ".", "pointPolygonTest", "(", "cnt_i", ",", "(", "mu", "[", "j", "]", "[", "0", "]", ",", "mu", "[", "j", "]", "[", "1", "]", ")", ",", "measureDist", "=", "True", ")", "\n", "ct_j_to_pt_i", "=", "-", "cv2", ".", "pointPolygonTest", "(", "cnt_j", ",", "(", "mu", "[", "i", "]", "[", "0", "]", ",", "mu", "[", "i", "]", "[", "1", "]", ")", ",", "measureDist", "=", "True", ")", "\n", "if", "ct_i_to_pt_j", "<=", "0", "or", "ct_j_to_pt_i", "<=", "0", ":", "\n", "                    ", "scaled_distances", "[", "i", ",", "j", "]", "=", "-", "numpy", ".", "inf", "\n", "", "else", ":", "\n", "                    ", "pt_dist", "=", "distances", "[", "i", ",", "j", "]", "\n", "ct_i_to_ct_j", "=", "ct_i_to_pt_j", "-", "pt_dist", "+", "ct_j_to_pt_i", "\n", "scaled_distances", "[", "i", ",", "j", "]", "=", "ct_i_to_ct_j", "\n", "", "", "", "scaled_distances", "=", "numpy", ".", "triu", "(", "scaled_distances", ")", "\n", "i_s", ",", "j_s", "=", "numpy", ".", "unravel_index", "(", "numpy", ".", "argsort", "(", "scaled_distances", ",", "axis", "=", "None", ")", ",", "scaled_distances", ".", "shape", ")", "\n", "to_remove", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "zip", "(", "i_s", ",", "j_s", ")", ":", "\n", "            ", "if", "scaled_distances", "[", "i", ",", "j", "]", ">=", "0", ":", "\n", "                ", "break", "\n", "", "if", "i", "not", "in", "to_remove", "and", "j", "not", "in", "to_remove", ":", "\n", "                ", "pt_i", "=", "center_points", "[", "i", "]", "\n", "pt_j", "=", "center_points", "[", "j", "]", "\n", "pt1_x", "=", "max", "(", "0", ",", "min", "(", "pt_i", "[", "1", "]", ",", "sub_heat_map", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "pt1_y", "=", "max", "(", "0", ",", "min", "(", "pt_i", "[", "0", "]", ",", "sub_heat_map", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "pt2_x", "=", "max", "(", "0", ",", "min", "(", "pt_j", "[", "1", "]", ",", "sub_heat_map", ".", "shape", "[", "0", "]", "-", "1", ")", ")", "\n", "pt2_y", "=", "max", "(", "0", ",", "min", "(", "pt_j", "[", "0", "]", ",", "sub_heat_map", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "\n", "val_i", "=", "sub_heat_map", "[", "pt1_x", ",", "pt1_y", "]", "\n", "val_j", "=", "sub_heat_map", "[", "pt2_x", ",", "pt2_y", "]", "\n", "remove_id", "=", "i", "\n", "if", "val_j", "<", "val_i", ":", "\n", "                    ", "remove_id", "=", "j", "\n", "", "to_remove", ".", "append", "(", "remove_id", ")", "\n", "", "", "if", "len", "(", "to_remove", ")", ">", "0", ":", "\n", "            ", "to_remove", "=", "numpy", ".", "array", "(", "to_remove", ")", "\n", "mask", "=", "numpy", ".", "zeros", "(", "mu", ".", "shape", "[", "0", "]", ")", "\n", "mask", "[", "to_remove", "]", "=", "1", "\n", "mask", "=", "mask", ".", "astype", "(", "numpy", ".", "bool", ")", "\n", "mu", "=", "mu", "[", "~", "mask", "]", "\n", "cov", "=", "cov", "[", "~", "mask", "]", "\n", "", "num", "=", "mu", ".", "shape", "[", "0", "]", "\n", "return", "cov", ",", "mu", ",", "num", ",", "roi", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.perform_nms": [[252, 262], ["object_detector_retinanet.keras_retinanet.utils.Boxes.perform_nms_on_image_dataframe", "object_detector_retinanet.keras_retinanet.utils.Boxes.perform_nms_on_image_dataframe.iterrows", "numpy.asarray", "candidates.append"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.perform_nms_on_image_dataframe"], ["", "def", "perform_nms", "(", "self", ",", "candidates", ",", "contour_i", ",", "curr_data", ")", ":", "\n", "\n", "        ", "nms_data", "=", "perform_nms_on_image_dataframe", "(", "curr_data", ",", "0.3", ")", "\n", "\n", "for", "sub_ind", ",", "row", "in", "nms_data", ".", "iterrows", "(", ")", ":", "\n", "            ", "curr_box", "=", "numpy", ".", "asarray", "(", "[", "row", "[", "'x1'", "]", ",", "row", "[", "'y1'", "]", ",", "row", "[", "'x2'", "]", ",", "row", "[", "'y2'", "]", "]", ")", "\n", "box_width", "=", "curr_box", "[", "BOX", ".", "X2", "]", "-", "curr_box", "[", "BOX", ".", "X1", "]", "\n", "box_height", "=", "curr_box", "[", "BOX", ".", "Y2", "]", "-", "curr_box", "[", "BOX", ".", "Y1", "]", "\n", "if", "box_width", ">", "Params", ".", "min_box_size", "and", "box_height", ">", "Params", ".", "min_box_size", ":", "\n", "                ", "candidates", ".", "append", "(", "{", "'box'", ":", "curr_box", ",", "'original_detection_ids'", ":", "[", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.get_contour_indexes": [[263, 267], ["None"], "methods", ["None"], ["", "", "", "def", "get_contour_indexes", "(", "self", ",", "contour", ",", "contour_bbox", ",", "x", ",", "y", ")", ":", "\n", "        ", "original_indexes", "=", "(", "contour_bbox", "[", "BOX", ".", "X1", "]", "<=", "x", ")", "&", "(", "x", "<=", "contour_bbox", "[", "BOX", ".", "X2", "]", ")", "&", "(", "\n", "contour_bbox", "[", "BOX", ".", "Y1", "]", "<=", "y", ")", "&", "(", "y", "<=", "contour_bbox", "[", "BOX", ".", "Y2", "]", ")", "\n", "return", "original_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.local_box_offset": [[268, 275], ["None"], "methods", ["None"], ["", "def", "local_box_offset", "(", "self", ",", "offset", ",", "box", ")", ":", "\n", "        ", "box_offset", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "box_offset", "[", "BOX", ".", "X1", "]", "=", "box", "[", "BOX", ".", "X1", "]", "+", "offset", "[", "0", "]", "\n", "box_offset", "[", "BOX", ".", "Y1", "]", "=", "box", "[", "BOX", ".", "Y1", "]", "+", "offset", "[", "1", "]", "\n", "box_offset", "[", "BOX", ".", "X2", "]", "=", "box", "[", "BOX", ".", "X2", "]", "+", "offset", "[", "0", "]", "\n", "box_offset", "[", "BOX", ".", "Y2", "]", "=", "box", "[", "BOX", ".", "Y2", "]", "+", "offset", "[", "1", "]", "\n", "return", "box_offset", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.shrink_boxes": [[277, 339], ["original_detection_centers_x.to_frame().join", "x1.to_frame().join().join().join", "original_detection_centers.join.join.join", "original_detection_centers.join.join.join", "original_detection_centers.join.join.join", "original_detection_centers.join.join.join", "original_detection_centers.join.join.join", "original_detection_centers.join.join.join", "original_detection_centers.join.join.join", "numpy.array", "numpy.asarray", "numpy.asarray", "numpy.asarray", "EmMerger.aggregate_gaussians", "original_detection_centers_y.to_frame", "y2.to_frame", "numpy.asarray.x1.to_frame", "numpy.asarray.x2.to_frame", "numpy.asarray.y1.to_frame", "numpy.asarray.y2.to_frame", "numpy.array.to_frame", "numpy.round().astype", "numpy.round().astype", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.zeros", "numpy.expand_dims", "original_detection_centers_x.to_frame", "x1.to_frame().join().join", "numpy.round", "numpy.round", "range", "cv2.resize", "y1.to_frame", "numpy.round", "numpy.round", "x1.to_frame().join", "x2.to_frame", "x1.to_frame"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.aggregate_gaussians", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "shrink_boxes", "(", "self", ",", "data", ",", "heat_map", ")", ":", "\n", "        ", "x1", "=", "data", "[", "'x1'", "]", "\n", "y1", "=", "data", "[", "'y1'", "]", "\n", "x2", "=", "data", "[", "'x2'", "]", "\n", "y2", "=", "data", "[", "'y2'", "]", "\n", "\n", "width", "=", "x2", "-", "x1", "\n", "height", "=", "y2", "-", "y1", "\n", "original_detection_centers_x", "=", "x1", "+", "width", "/", "2.", "\n", "original_detection_centers_y", "=", "y1", "+", "height", "/", "2.", "\n", "original_detection_centers", "=", "original_detection_centers_x", ".", "to_frame", "(", "'x'", ")", ".", "join", "(", "\n", "original_detection_centers_y", ".", "to_frame", "(", "'y'", ")", ")", "\n", "\n", "boxes", "=", "x1", ".", "to_frame", "(", "'x1'", ")", ".", "join", "(", "x2", ".", "to_frame", "(", "'x2'", ")", ")", ".", "join", "(", "y1", ".", "to_frame", "(", "'y1'", ")", ")", ".", "join", "(", "y2", ".", "to_frame", "(", "'y2'", ")", ")", "\n", "w_shift", "=", "(", "(", "width", "*", "(", "1", "-", "Params", ".", "box_size_factor", ")", ")", "/", "2.", ")", ".", "astype", "(", "numpy", ".", "int32", ")", "\n", "h_shift", "=", "(", "(", "height", "*", "(", "1", "-", "Params", ".", "box_size_factor", ")", ")", "/", "2.", ")", ".", "astype", "(", "numpy", ".", "int32", ")", "\n", "\n", "boxes", ".", "x1", "+=", "w_shift", "\n", "boxes", ".", "x2", "-=", "w_shift", "\n", "boxes", ".", "y1", "+=", "h_shift", "\n", "boxes", ".", "y2", "-=", "h_shift", "\n", "\n", "width", "=", "boxes", ".", "x2", "-", "boxes", ".", "x1", "\n", "height", "=", "boxes", ".", "y2", "-", "boxes", ".", "y1", "\n", "confidence", "=", "data", "[", "'confidence'", "]", "\n", "\n", "original_detection_centers", "=", "original_detection_centers", ".", "join", "(", "boxes", ".", "x1", ".", "to_frame", "(", "'left_x'", ")", ")", "\n", "original_detection_centers", "=", "original_detection_centers", ".", "join", "(", "boxes", ".", "x2", ".", "to_frame", "(", "'right_x'", ")", ")", "\n", "original_detection_centers", "=", "original_detection_centers", ".", "join", "(", "boxes", ".", "y1", ".", "to_frame", "(", "'top_y'", ")", ")", "\n", "original_detection_centers", "=", "original_detection_centers", ".", "join", "(", "boxes", ".", "y2", ".", "to_frame", "(", "'bottom_y'", ")", ")", "\n", "original_detection_centers", "=", "original_detection_centers", ".", "join", "(", "(", "width", "/", "2.", ")", ".", "to_frame", "(", "'sigma_x'", ")", ")", "\n", "original_detection_centers", "=", "original_detection_centers", ".", "join", "(", "(", "height", "/", "2.", ")", ".", "to_frame", "(", "'sigma_y'", ")", ")", "\n", "original_detection_centers", "=", "original_detection_centers", ".", "join", "(", "confidence", ".", "to_frame", "(", "'confidence'", ")", ")", "\n", "\n", "confidence", "=", "numpy", ".", "array", "(", "confidence", ")", "\n", "width", "=", "numpy", ".", "asarray", "(", "width", ")", "\n", "height", "=", "numpy", ".", "asarray", "(", "height", ")", "\n", "boxes", "=", "numpy", ".", "asarray", "(", "[", "boxes", ".", "x1", ".", "values", ",", "boxes", ".", "y1", ".", "values", ",", "boxes", ".", "x2", ".", "values", ",", "boxes", ".", "y2", ".", "values", "]", ",", "dtype", "=", "numpy", ".", "int32", ")", "\n", "\n", "compression_factor", "=", "self", ".", "compression_factor", "\n", "orig_shape", "=", "heat_map", ".", "shape", "\n", "shape", "=", "(", "orig_shape", "[", "0", "]", "/", "compression_factor", ",", "orig_shape", "[", "1", "]", "/", "compression_factor", ",", "orig_shape", "[", "2", "]", ")", "\n", "small_heat_map", "=", "heat_map", "\n", "if", "compression_factor", ">", "1", ":", "\n", "            ", "width", "/=", "compression_factor", "\n", "height", "/=", "compression_factor", "\n", "boxes", "/=", "compression_factor", "\n", "\n", "width", "=", "numpy", ".", "round", "(", "width", ")", ".", "astype", "(", "int", ")", "\n", "height", "=", "numpy", ".", "round", "(", "height", ")", ".", "astype", "(", "int", ")", "\n", "boxes", "[", "BOX", ".", "X1", "]", "=", "numpy", ".", "maximum", "(", "numpy", ".", "round", "(", "boxes", "[", "BOX", ".", "X1", "]", ")", ",", "0", ")", "\n", "boxes", "[", "BOX", ".", "Y1", "]", "=", "numpy", ".", "maximum", "(", "numpy", ".", "round", "(", "boxes", "[", "BOX", ".", "Y1", "]", ")", ",", "0", ")", "\n", "boxes", "[", "BOX", ".", "X2", "]", "=", "numpy", ".", "minimum", "(", "boxes", "[", "BOX", ".", "X1", "]", "+", "width", ",", "shape", "[", "1", "]", ")", "\n", "boxes", "[", "BOX", ".", "Y2", "]", "=", "numpy", ".", "minimum", "(", "boxes", "[", "BOX", ".", "Y1", "]", "+", "height", ",", "shape", "[", "0", "]", ")", "\n", "\n", "small_heat_map", "=", "numpy", ".", "zeros", "(", "shape", "=", "shape", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "\n", "", "small_heat_map", "+=", "aggregate_gaussians", "(", "sub_range", "=", "range", "(", "0", ",", "data", ".", "shape", "[", "0", "]", ")", ",", "shape", "=", "shape", ",", "width", "=", "width", ",", "\n", "height", "=", "height", ",", "confidence", "=", "confidence", ",", "boxes", "=", "boxes", ")", "\n", "if", "compression_factor", ">", "1", ":", "\n", "            ", "heat_map", "+=", "numpy", ".", "expand_dims", "(", "cv2", ".", "resize", "(", "small_heat_map", ",", "(", "orig_shape", "[", "1", "]", ",", "orig_shape", "[", "0", "]", ")", ")", ",", "axis", "=", "2", ")", "\n", "", "return", "original_detection_centers", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.map_original_boxes_to_new_boxes": [[340, 360], ["numpy.ndarray", "numpy.ndarray.fill", "list", "original_indexes[].keys", "len"], "methods", ["None"], ["", "def", "map_original_boxes_to_new_boxes", "(", "self", ",", "candidates", ",", "original_detection_centers", ")", ":", "\n", "        ", "x", "=", "original_detection_centers", "[", "'x'", "]", "\n", "y", "=", "original_detection_centers", "[", "'y'", "]", "\n", "matched_indexes", "=", "numpy", ".", "ndarray", "(", "shape", "=", "original_detection_centers", ".", "shape", "[", "0", "]", ",", "dtype", "=", "numpy", ".", "bool", ")", "\n", "matched_indexes", ".", "fill", "(", "False", ")", "\n", "for", "candidate", "in", "candidates", ":", "\n", "            ", "box", "=", "candidate", "[", "'box'", "]", "\n", "original_indexes", "=", "(", "box", "[", "BOX", ".", "X1", "]", "<=", "x", ")", "&", "(", "x", "<=", "box", "[", "BOX", ".", "X2", "]", ")", "&", "(", "box", "[", "BOX", ".", "Y1", "]", "<=", "y", ")", "&", "(", "\n", "y", "<=", "box", "[", "BOX", ".", "Y2", "]", ")", "&", "~", "matched_indexes", "\n", "matched_indexes", "[", "original_indexes", "]", "=", "True", "\n", "candidate", "[", "'original_detection_ids'", "]", "=", "list", "(", "original_indexes", "[", "original_indexes", "]", ".", "keys", "(", ")", ")", "\n", "\n", "", "new_candidates", "=", "{", "}", "\n", "i", "=", "0", "\n", "for", "candidate", "in", "candidates", ":", "\n", "            ", "if", "len", "(", "candidate", "[", "'original_detection_ids'", "]", ")", ">", "0", ":", "\n", "                ", "new_candidates", "[", "i", "]", "=", "candidate", "\n", "i", "+=", "1", "\n", "\n", "", "", "return", "new_candidates", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.gaussian_blur": [[24, 36], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "numpy.exp", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.meshgrid"], ["", "def", "gaussian_blur", "(", "w", ",", "h", ")", ":", "\n", "    ", "sigmaX", "=", "w", "/", "2.", "\n", "sigmaY", "=", "h", "/", "2.", "\n", "x", "=", "numpy", ".", "linspace", "(", "-", "(", "w", "/", "2.", ")", ",", "(", "w", "/", "2.", ")", ",", "w", ")", "\n", "y", "=", "numpy", ".", "linspace", "(", "-", "(", "h", "/", "2.", ")", ",", "(", "h", "/", "2.", ")", ",", "h", ")", "\n", "x", ",", "y", "=", "numpy", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "x", "/=", "numpy", ".", "sqrt", "(", "2.", ")", "*", "sigmaX", "\n", "y", "/=", "numpy", ".", "sqrt", "(", "2.", ")", "*", "sigmaY", "\n", "x2", "=", "x", "**", "2", "\n", "y2", "=", "y", "**", "2", "\n", "kernel", "=", "numpy", ".", "exp", "(", "-", "x2", "-", "y2", ")", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.aggregate_gaussians": [[38, 48], ["numpy.zeros", "int", "EmMerger.gaussian_blur", "cv2.normalize", "gaussian_blur.reshape"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.gaussian_blur"], ["", "def", "aggregate_gaussians", "(", "sub_range", ",", "shape", ",", "width", ",", "height", ",", "confidence", ",", "boxes", ")", ":", "\n", "    ", "shape", "=", "[", "int", "(", "x", ")", "for", "x", "in", "shape", "]", "\n", "heat_map", "=", "numpy", ".", "zeros", "(", "shape", "=", "shape", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "for", "i", "in", "sub_range", ":", "\n", "        ", "curr_gaussian", "=", "gaussian_blur", "(", "width", "[", "i", "]", ",", "height", "[", "i", "]", ")", "\n", "cv2", ".", "normalize", "(", "curr_gaussian", ",", "curr_gaussian", ",", "0", ",", "confidence", "[", "i", "]", ",", "cv2", ".", "NORM_MINMAX", ")", "\n", "box", "=", "boxes", "[", ":", ",", "i", "]", "\n", "shape", "=", "heat_map", "[", "box", "[", "BOX", ".", "Y1", "]", ":", "box", "[", "BOX", ".", "Y2", "]", ",", "box", "[", "BOX", ".", "X1", "]", ":", "box", "[", "BOX", ".", "X2", "]", "]", ".", "shape", "\n", "heat_map", "[", "box", "[", "BOX", ".", "Y1", "]", ":", "box", "[", "BOX", ".", "Y2", "]", ",", "box", "[", "BOX", ".", "X1", "]", ":", "box", "[", "BOX", ".", "X2", "]", "]", "+=", "curr_gaussian", ".", "reshape", "(", "shape", ")", "\n", "", "return", "heat_map", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.merge_detections": [[362, 389], ["pandas.DataFrame", "results[].astype", "results[].astype", "results[].astype", "results[].astype", "pandas.DataFrame.reset_index", "EmMerger.DuplicateMerger", "EmMerger.DuplicateMerger.filter_duplicate_candidates", "object_detector_retinanet.keras_retinanet.utils.image.read_image_bgr", "os.path.join", "object_detector_retinanet.utils.root_dir"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.DuplicateMerger.filter_duplicate_candidates", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.read_image_bgr", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir"], ["", "", "def", "merge_detections", "(", "image_name", ",", "results", ")", ":", "\n", "#    project = 'SKU_dataset'", "\n", "    ", "result_df", "=", "pandas", ".", "DataFrame", "(", ")", "\n", "result_df", "[", "'x1'", "]", "=", "results", "[", ":", ",", "0", "]", ".", "astype", "(", "int", ")", "\n", "result_df", "[", "'y1'", "]", "=", "results", "[", ":", ",", "1", "]", ".", "astype", "(", "int", ")", "\n", "result_df", "[", "'x2'", "]", "=", "results", "[", ":", ",", "2", "]", ".", "astype", "(", "int", ")", "\n", "result_df", "[", "'y2'", "]", "=", "results", "[", ":", ",", "3", "]", ".", "astype", "(", "int", ")", "\n", "result_df", "[", "'confidence'", "]", "=", "results", "[", ":", ",", "4", "]", "\n", "result_df", "[", "'hard_score'", "]", "=", "results", "[", ":", ",", "5", "]", "\n", "result_df", "[", "'uuid'", "]", "=", "'object_label'", "\n", "result_df", "[", "'label_type'", "]", "=", "'object_label'", "\n", "#    result_df['project'] = project", "\n", "result_df", "[", "'image_name'", "]", "=", "image_name", "\n", "\n", "result_df", ".", "reset_index", "(", ")", "\n", "result_df", "[", "'id'", "]", "=", "result_df", ".", "index", "\n", "pixel_data", "=", "None", "\n", "duplicate_merger", "=", "DuplicateMerger", "(", ")", "\n", "duplicate_merger", ".", "multiprocess", "=", "False", "\n", "duplicate_merger", ".", "compression_factor", "=", "1", "\n", "#    project = result_df['project'].iloc[0]", "\n", "image_name", "=", "result_df", "[", "'image_name'", "]", ".", "iloc", "[", "0", "]", "\n", "if", "pixel_data", "is", "None", ":", "\n", "        ", "pixel_data", "=", "read_image_bgr", "(", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "image_name", ")", ")", "\n", "\n", "", "filtered_data", "=", "duplicate_merger", ".", "filter_duplicate_candidates", "(", "result_df", ",", "pixel_data", ")", "\n", "return", "filtered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.predict_iou.predict": [[33, 115], ["csv_data_lst.append", "os.path.join", "object_detector_retinanet.utils.create_folder", "datetime.datetime.utcnow", "range", "print", "object_detector_retinanet.utils.root_dir", "generator.size", "os.path.join", "generator.load_image", "generator.preprocess_image", "generator.resize_image", "model.predict_on_batch", "numpy.squeeze", "numpy.concatenate", "numpy.concatenate", "object_detector_retinanet.keras_retinanet.utils.EmMerger.merge_detections", "EmMerger.merge_detections.iterrows", "range", "print", "open", "csv.writer", "csv.writer.writerows", "range", "generator.load_image.copy", "numpy.expand_dims", "numpy.where", "numpy.argsort", "numpy.asarray", "filtered_boxes.append", "filtered_scores.append", "filtered_labels.append", "csv_data_lst.append", "object_detector_retinanet.utils.create_folder", "visualization.draw_annotations", "visualization.draw_detections", "cv2.imwrite", "generator.num_classes", "range", "generator.size", "generator.image_path().split", "generator.image_path().split", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "generator.load_annotations", "numpy.asarray", "numpy.asarray", "numpy.asarray", "os.path.join", "generator.size", "generator.num_classes", "generator.image_path", "generator.image_path"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.create_folder", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_image", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.preprocess_image", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.resize_image", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.EmMerger.merge_detections", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.create_folder", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_annotations", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.visualization.draw_detections", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.num_classes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.load_annotations", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.num_classes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path"], ["def", "predict", "(", "\n", "generator", ",", "\n", "model", ",", "\n", "score_threshold", "=", "0.05", ",", "\n", "max_detections", "=", "9999", ",", "\n", "save_path", "=", "None", ",", "\n", "hard_score_rate", "=", "1.", ")", ":", "\n", "    ", "all_detections", "=", "[", "[", "None", "for", "i", "in", "range", "(", "generator", ".", "num_classes", "(", ")", ")", "]", "for", "j", "in", "range", "(", "generator", ".", "size", "(", ")", ")", "]", "\n", "csv_data_lst", "=", "[", "]", "\n", "csv_data_lst", ".", "append", "(", "[", "'image_id'", ",", "'x1'", ",", "'y1'", ",", "'x2'", ",", "'y2'", ",", "'confidence'", ",", "'hard_score'", "]", ")", "\n", "result_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "'results'", ")", "\n", "create_folder", "(", "result_dir", ")", "\n", "timestamp", "=", "datetime", ".", "datetime", ".", "utcnow", "(", ")", "\n", "res_file", "=", "result_dir", "+", "'/detections_output_iou_{}_{}.csv'", ".", "format", "(", "hard_score_rate", ",", "timestamp", ")", "\n", "for", "i", "in", "range", "(", "generator", ".", "size", "(", ")", ")", ":", "\n", "        ", "image_name", "=", "os", ".", "path", ".", "join", "(", "generator", ".", "image_path", "(", "i", ")", ".", "split", "(", "os", ".", "path", ".", "sep", ")", "[", "-", "2", "]", ",", "\n", "generator", ".", "image_path", "(", "i", ")", ".", "split", "(", "os", ".", "path", ".", "sep", ")", "[", "-", "1", "]", ")", "\n", "raw_image", "=", "generator", ".", "load_image", "(", "i", ")", "\n", "image", "=", "generator", ".", "preprocess_image", "(", "raw_image", ".", "copy", "(", ")", ")", "\n", "image", ",", "scale", "=", "generator", ".", "resize_image", "(", "image", ")", "\n", "\n", "# run network", "\n", "boxes", ",", "hard_scores", ",", "labels", ",", "soft_scores", "=", "model", ".", "predict_on_batch", "(", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "0", ")", ")", "\n", "soft_scores", "=", "np", ".", "squeeze", "(", "soft_scores", ",", "axis", "=", "-", "1", ")", "\n", "soft_scores", "=", "hard_score_rate", "*", "hard_scores", "+", "(", "1", "-", "hard_score_rate", ")", "*", "soft_scores", "\n", "# correct boxes for image scale", "\n", "boxes", "/=", "scale", "\n", "\n", "# select indices which have a score above the threshold", "\n", "indices", "=", "np", ".", "where", "(", "hard_scores", "[", "0", ",", ":", "]", ">", "score_threshold", ")", "[", "0", "]", "\n", "\n", "# select those scores", "\n", "scores", "=", "soft_scores", "[", "0", "]", "[", "indices", "]", "\n", "hard_scores", "=", "hard_scores", "[", "0", "]", "[", "indices", "]", "\n", "\n", "# find the order with which to sort the scores", "\n", "scores_sort", "=", "np", ".", "argsort", "(", "-", "scores", ")", "[", ":", "max_detections", "]", "\n", "\n", "# select detections", "\n", "image_boxes", "=", "boxes", "[", "0", ",", "indices", "[", "scores_sort", "]", ",", ":", "]", "\n", "image_scores", "=", "scores", "[", "scores_sort", "]", "\n", "image_hard_scores", "=", "hard_scores", "[", "scores_sort", "]", "\n", "image_labels", "=", "labels", "[", "0", ",", "indices", "[", "scores_sort", "]", "]", "\n", "image_detections", "=", "np", ".", "concatenate", "(", "\n", "[", "image_boxes", ",", "np", ".", "expand_dims", "(", "image_scores", ",", "axis", "=", "1", ")", ",", "np", ".", "expand_dims", "(", "image_labels", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", "\n", "results", "=", "np", ".", "concatenate", "(", "\n", "[", "image_boxes", ",", "np", ".", "expand_dims", "(", "image_scores", ",", "axis", "=", "1", ")", ",", "np", ".", "expand_dims", "(", "image_hard_scores", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "expand_dims", "(", "image_labels", ",", "axis", "=", "1", ")", "]", ",", "axis", "=", "1", ")", "\n", "filtered_data", "=", "EmMerger", ".", "merge_detections", "(", "image_name", ",", "results", ")", "\n", "filtered_boxes", "=", "[", "]", "\n", "filtered_scores", "=", "[", "]", "\n", "filtered_labels", "=", "[", "]", "\n", "\n", "for", "_", ",", "detection", "in", "filtered_data", ".", "iterrows", "(", ")", ":", "\n", "            ", "box", "=", "np", ".", "asarray", "(", "[", "detection", "[", "'x1'", "]", ",", "detection", "[", "'y1'", "]", ",", "detection", "[", "'x2'", "]", ",", "detection", "[", "'y2'", "]", "]", ")", "\n", "filtered_boxes", ".", "append", "(", "box", ")", "\n", "filtered_scores", ".", "append", "(", "detection", "[", "'confidence'", "]", ")", "\n", "filtered_labels", ".", "append", "(", "'{0:.2f}'", ".", "format", "(", "detection", "[", "'hard_score'", "]", ")", ")", "\n", "row", "=", "[", "image_name", ",", "detection", "[", "'x1'", "]", ",", "detection", "[", "'y1'", "]", ",", "detection", "[", "'x2'", "]", ",", "detection", "[", "'y2'", "]", ",", "\n", "detection", "[", "'confidence'", "]", ",", "detection", "[", "'hard_score'", "]", "]", "\n", "csv_data_lst", ".", "append", "(", "row", ")", "\n", "\n", "", "if", "save_path", "is", "not", "None", ":", "\n", "            ", "create_folder", "(", "save_path", ")", "\n", "\n", "draw_annotations", "(", "raw_image", ",", "generator", ".", "load_annotations", "(", "i", ")", ",", "label_to_name", "=", "generator", ".", "label_to_name", ")", "\n", "draw_detections", "(", "raw_image", ",", "np", ".", "asarray", "(", "filtered_boxes", ")", ",", "np", ".", "asarray", "(", "filtered_scores", ")", ",", "\n", "np", ".", "asarray", "(", "filtered_labels", ")", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'{}.png'", ".", "format", "(", "i", ")", ")", ",", "raw_image", ")", "\n", "\n", "# copy detections to all_detections", "\n", "", "for", "label", "in", "range", "(", "generator", ".", "num_classes", "(", ")", ")", ":", "\n", "            ", "all_detections", "[", "i", "]", "[", "label", "]", "=", "image_detections", "[", "image_detections", "[", ":", ",", "-", "1", "]", "==", "label", ",", ":", "-", "1", "]", "\n", "\n", "", "print", "(", "'{}/{}'", ".", "format", "(", "i", "+", "1", ",", "generator", ".", "size", "(", ")", ")", ",", "end", "=", "'\\r'", ")", "\n", "\n", "# Save annotations csv file", "\n", "", "with", "open", "(", "res_file", ",", "'w'", ")", "as", "fl_csv", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "fl_csv", ")", "\n", "writer", ".", "writerows", "(", "csv_data_lst", ")", "\n", "", "print", "(", "\"Saved output.csv file\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.model.freeze": [[18, 29], ["None"], "function", ["None"], ["def", "freeze", "(", "model", ")", ":", "\n", "    ", "\"\"\" Set all layers in a model to non-trainable.\n\n    The weights for these layers will not be updated during training.\n\n    This function modifies the given model in-place,\n    but it also returns the modified model to allow easy chaining with other functions.\n    \"\"\"", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "layer", ".", "trainable", "=", "False", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.colvec": [[6, 9], ["numpy.array"], "function", ["None"], ["def", "colvec", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\" Create a numpy array representing a column vector. \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "args", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.transform_aabb": [[11, 39], ["transform.dot", "transform.dot.min", "transform.dot.max"], "function", ["None"], ["", "def", "transform_aabb", "(", "transform", ",", "aabb", ")", ":", "\n", "    ", "\"\"\" Apply a transformation to an axis aligned bounding box.\n\n    The result is a new AABB in the same coordinate system as the original AABB.\n    The new AABB contains all corner points of the original AABB after applying the given transformation.\n\n    Args\n        transform: The transformation to apply.\n        x1:        The minimum x value of the AABB.\n        y1:        The minimum y value of the AABB.\n        x2:        The maximum x value of the AABB.\n        y2:        The maximum y value of the AABB.\n    Returns\n        The new AABB as tuple (x1, y1, x2, y2)\n    \"\"\"", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "aabb", "\n", "# Transform all 4 corners of the AABB.", "\n", "points", "=", "transform", ".", "dot", "(", "[", "\n", "[", "x1", ",", "x2", ",", "x1", ",", "x2", "]", ",", "\n", "[", "y1", ",", "y2", ",", "y2", ",", "y1", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", ")", "\n", "\n", "# Extract the min and max corners again.", "\n", "min_corner", "=", "points", ".", "min", "(", "axis", "=", "1", ")", "\n", "max_corner", "=", "points", ".", "max", "(", "axis", "=", "1", ")", "\n", "\n", "return", "[", "min_corner", "[", "0", "]", ",", "min_corner", "[", "1", "]", ",", "max_corner", "[", "0", "]", ",", "max_corner", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform._random_vector": [[41, 52], ["numpy.array", "numpy.array", "prng.uniform", "len"], "function", ["None"], ["", "def", "_random_vector", "(", "min", ",", "max", ",", "prng", "=", "DEFAULT_PRNG", ")", ":", "\n", "    ", "\"\"\" Construct a random vector between min and max.\n    Args\n        min: the minimum value for each component\n        max: the maximum value for each component\n    \"\"\"", "\n", "min", "=", "np", ".", "array", "(", "min", ")", "\n", "max", "=", "np", ".", "array", "(", "max", ")", "\n", "assert", "min", ".", "shape", "==", "max", ".", "shape", "\n", "assert", "len", "(", "min", ".", "shape", ")", "==", "1", "\n", "return", "prng", ".", "uniform", "(", "min", ",", "max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.rotation": [[54, 65], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "rotation", "(", "angle", ")", ":", "\n", "    ", "\"\"\" Construct a homogeneous 2D rotation matrix.\n    Args\n        angle: the angle in radians\n    Returns\n        the rotation matrix as 3 by 3 numpy array\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "cos", "(", "angle", ")", ",", "-", "np", ".", "sin", "(", "angle", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angle", ")", ",", "np", ".", "cos", "(", "angle", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_rotation": [[68, 78], ["transform.rotation", "prng.uniform"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.rotation"], ["", "def", "random_rotation", "(", "min", ",", "max", ",", "prng", "=", "DEFAULT_PRNG", ")", ":", "\n", "    ", "\"\"\" Construct a random rotation between -max and max.\n    Args\n        min:  a scalar for the minimum absolute angle in radians\n        max:  a scalar for the maximum absolute angle in radians\n        prng: the pseudo-random number generator to use.\n    Returns\n        a homogeneous 3 by 3 rotation matrix\n    \"\"\"", "\n", "return", "rotation", "(", "prng", ".", "uniform", "(", "min", ",", "max", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.translation": [[80, 91], ["numpy.array"], "function", ["None"], ["", "def", "translation", "(", "translation", ")", ":", "\n", "    ", "\"\"\" Construct a homogeneous 2D translation matrix.\n    # Arguments\n        translation: the translation 2D vector\n    # Returns\n        the translation matrix as 3 by 3 numpy array\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "translation", "[", "0", "]", "]", ",", "\n", "[", "0", ",", "1", ",", "translation", "[", "1", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_translation": [[94, 104], ["transform.translation", "transform._random_vector"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.translation", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform._random_vector"], ["", "def", "random_translation", "(", "min", ",", "max", ",", "prng", "=", "DEFAULT_PRNG", ")", ":", "\n", "    ", "\"\"\" Construct a random 2D translation between min and max.\n    Args\n        min:  a 2D vector with the minimum translation for each dimension\n        max:  a 2D vector with the maximum translation for each dimension\n        prng: the pseudo-random number generator to use.\n    Returns\n        a homogeneous 3 by 3 translation matrix\n    \"\"\"", "\n", "return", "translation", "(", "_random_vector", "(", "min", ",", "max", ",", "prng", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.shear": [[106, 117], ["numpy.array", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "shear", "(", "angle", ")", ":", "\n", "    ", "\"\"\" Construct a homogeneous 2D shear matrix.\n    Args\n        angle: the shear angle in radians\n    Returns\n        the shear matrix as 3 by 3 numpy array\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "-", "np", ".", "sin", "(", "angle", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angle", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_shear": [[120, 130], ["transform.shear", "prng.uniform"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.shear"], ["", "def", "random_shear", "(", "min", ",", "max", ",", "prng", "=", "DEFAULT_PRNG", ")", ":", "\n", "    ", "\"\"\" Construct a random 2D shear matrix with shear angle between -max and max.\n    Args\n        min:  the minimum shear angle in radians.\n        max:  the maximum shear angle in radians.\n        prng: the pseudo-random number generator to use.\n    Returns\n        a homogeneous 3 by 3 shear matrix\n    \"\"\"", "\n", "return", "shear", "(", "prng", ".", "uniform", "(", "min", ",", "max", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.scaling": [[132, 143], ["numpy.array"], "function", ["None"], ["", "def", "scaling", "(", "factor", ")", ":", "\n", "    ", "\"\"\" Construct a homogeneous 2D scaling matrix.\n    Args\n        factor: a 2D vector for X and Y scaling\n    Returns\n        the zoom matrix as 3 by 3 numpy array\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "\n", "[", "factor", "[", "0", "]", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "factor", "[", "1", "]", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_scaling": [[146, 156], ["transform.scaling", "transform._random_vector"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.scaling", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform._random_vector"], ["", "def", "random_scaling", "(", "min", ",", "max", ",", "prng", "=", "DEFAULT_PRNG", ")", ":", "\n", "    ", "\"\"\" Construct a random 2D scale matrix between -max and max.\n    Args\n        min:  a 2D vector containing the minimum scaling factor for X and Y.\n        min:  a 2D vector containing The maximum scaling factor for X and Y.\n        prng: the pseudo-random number generator to use.\n    Returns\n        a homogeneous 3 by 3 scaling matrix\n    \"\"\"", "\n", "return", "scaling", "(", "_random_vector", "(", "min", ",", "max", ",", "prng", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_flip": [[158, 171], ["transform.scaling", "prng.uniform", "prng.uniform"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.scaling"], ["", "def", "random_flip", "(", "flip_x_chance", ",", "flip_y_chance", ",", "prng", "=", "DEFAULT_PRNG", ")", ":", "\n", "    ", "\"\"\" Construct a transformation randomly containing X/Y flips (or not).\n    Args\n        flip_x_chance: The chance that the result will contain a flip along the X axis.\n        flip_y_chance: The chance that the result will contain a flip along the Y axis.\n        prng:          The pseudo-random number generator to use.\n    Returns\n        a homogeneous 3 by 3 transformation matrix\n    \"\"\"", "\n", "flip_x", "=", "prng", ".", "uniform", "(", "0", ",", "1", ")", "<", "flip_x_chance", "\n", "flip_y", "=", "prng", ".", "uniform", "(", "0", ",", "1", ")", "<", "flip_y_chance", "\n", "# 1 - 2 * bool gives 1 for False and -1 for True.", "\n", "return", "scaling", "(", "(", "1", "-", "2", "*", "flip_x", ",", "1", "-", "2", "*", "flip_y", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.change_transform_origin": [[173, 184], ["numpy.array", "numpy.linalg.multi_dot", "transform.translation", "transform.translation"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.translation", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.translation"], ["", "def", "change_transform_origin", "(", "transform", ",", "center", ")", ":", "\n", "    ", "\"\"\" Create a new transform representing the same transformation,\n        only with the origin of the linear part changed.\n    Args\n        transform: the transformation matrix\n        center: the new origin of the transformation\n    Returns\n        translate(center) * transform * translate(-center)\n    \"\"\"", "\n", "center", "=", "np", ".", "array", "(", "center", ")", "\n", "return", "np", ".", "linalg", ".", "multi_dot", "(", "[", "translation", "(", "center", ")", ",", "transform", ",", "translation", "(", "-", "center", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_transform": [[186, 233], ["numpy.linalg.multi_dot", "transform.random_rotation", "transform.random_translation", "transform.random_shear", "transform.random_scaling", "transform.random_flip"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_rotation", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_translation", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_shear", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_scaling", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_flip"], ["", "def", "random_transform", "(", "\n", "min_rotation", "=", "0", ",", "\n", "max_rotation", "=", "0", ",", "\n", "min_translation", "=", "(", "0", ",", "0", ")", ",", "\n", "max_translation", "=", "(", "0", ",", "0", ")", ",", "\n", "min_shear", "=", "0", ",", "\n", "max_shear", "=", "0", ",", "\n", "min_scaling", "=", "(", "1", ",", "1", ")", ",", "\n", "max_scaling", "=", "(", "1", ",", "1", ")", ",", "\n", "flip_x_chance", "=", "0", ",", "\n", "flip_y_chance", "=", "0", ",", "\n", "prng", "=", "DEFAULT_PRNG", "\n", ")", ":", "\n", "    ", "\"\"\" Create a random transformation.\n\n    The transformation consists of the following operations in this order (from left to right):\n      * rotation\n      * translation\n      * shear\n      * scaling\n      * flip x (if applied)\n      * flip y (if applied)\n\n    Note that by default, the data generators in `keras_retinanet.preprocessing.generators` interpret the translation\n    as factor of the image size. So an X translation of 0.1 would translate the image by 10% of it's width.\n    Set `relative_translation` to `False` in the `TransformParameters` of a data generator to have it interpret\n    the translation directly as pixel distances instead.\n\n    Args\n        min_rotation:    The minimum rotation in radians for the transform as scalar.\n        max_rotation:    The maximum rotation in radians for the transform as scalar.\n        min_translation: The minimum translation for the transform as 2D column vector.\n        max_translation: The maximum translation for the transform as 2D column vector.\n        min_shear:       The minimum shear angle for the transform in radians.\n        max_shear:       The maximum shear angle for the transform in radians.\n        min_scaling:     The minimum scaling for the transform as 2D column vector.\n        max_scaling:     The maximum scaling for the transform as 2D column vector.\n        flip_x_chance:   The chance (0 to 1) that a transform will contain a flip along X direction.\n        flip_y_chance:   The chance (0 to 1) that a transform will contain a flip along Y direction.\n        prng:            The pseudo-random number generator to use.\n    \"\"\"", "\n", "return", "np", ".", "linalg", ".", "multi_dot", "(", "[", "\n", "random_rotation", "(", "min_rotation", ",", "max_rotation", ",", "prng", ")", ",", "\n", "random_translation", "(", "min_translation", ",", "max_translation", ",", "prng", ")", ",", "\n", "random_shear", "(", "min_shear", ",", "max_shear", ",", "prng", ")", ",", "\n", "random_scaling", "(", "min_scaling", ",", "max_scaling", ",", "prng", ")", ",", "\n", "random_flip", "(", "flip_x_chance", ",", "flip_y_chance", ",", "prng", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_transform_generator": [[236, 274], ["numpy.random.RandomState", "transform.random_transform"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_transform"], ["", "def", "random_transform_generator", "(", "prng", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Create a random transform generator.\n\n    Uses a dedicated, newly created, properly seeded PRNG by default instead of the global DEFAULT_PRNG.\n\n    The transformation consists of the following operations in this order (from left to right):\n      * rotation\n      * translation\n      * shear\n      * scaling\n      * flip x (if applied)\n      * flip y (if applied)\n\n    Note that by default, the data generators in `keras_retinanet.preprocessing.generators` interpret the translation\n    as factor of the image size. So an X translation of 0.1 would translate the image by 10% of it's width.\n    Set `relative_translation` to `False` in the `TransformParameters` of a data generator to have it interpret\n    the translation directly as pixel distances instead.\n\n    Args\n        min_rotation:    The minimum rotation in radians for the transform as scalar.\n        max_rotation:    The maximum rotation in radians for the transform as scalar.\n        min_translation: The minimum translation for the transform as 2D column vector.\n        max_translation: The maximum translation for the transform as 2D column vector.\n        min_shear:       The minimum shear angle for the transform in radians.\n        max_shear:       The maximum shear angle for the transform in radians.\n        min_scaling:     The minimum scaling for the transform as 2D column vector.\n        max_scaling:     The maximum scaling for the transform as 2D column vector.\n        flip_x_chance:   The chance (0 to 1) that a transform will contain a flip along X direction.\n        flip_y_chance:   The chance (0 to 1) that a transform will contain a flip along Y direction.\n        prng:            The pseudo-random number generator to use.\n    \"\"\"", "\n", "\n", "if", "prng", "is", "None", ":", "\n", "# RandomState automatically seeds using the best available method.", "\n", "        ", "prng", "=", "np", ".", "random", ".", "RandomState", "(", ")", "\n", "\n", "", "while", "True", ":", "\n", "        ", "yield", "random_transform", "(", "prng", "=", "prng", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.BOX.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.reshape_vector": [[26, 44], ["isinstance", "TypeError", "len", "ndarr.copy", "ndarr.copy.resize", "type", "len", "print"], "function", ["None"], ["", "def", "reshape_vector", "(", "ndarr", ")", ":", "\n", "    ", "\"\"\"\n    :param ndarr: take list and transform it to a ndarray with reshape\n    :return: numpy array of numpy array\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "ndarr", ",", "numpy", ".", "ndarray", ")", ":", "\n", "# If ndarr is not a ndarray raise exception", "\n", "        ", "msg", "=", "'This is not a ndarray type: type{}'", ".", "format", "(", "type", "(", "ndarr", ")", ")", "\n", "raise", "TypeError", "(", "msg", ")", "\n", "\n", "", "if", "len", "(", "ndarr", ".", "shape", ")", "==", "1", ":", "\n", "        ", "if", "len", "(", "ndarr", ")", "==", "0", ":", "\n", "            ", "print", "(", "'ndarray is empty, will not reshape'", ")", "\n", "return", "ndarr", "\n", "", "ndarr_mat", "=", "ndarr", ".", "copy", "(", ")", "\n", "ndarr_mat", ".", "resize", "(", "1", ",", "ndarr", ".", "size", ")", "\n", "return", "ndarr_mat", "\n", "", "return", "ndarr", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.extract_boxes_from_edge_boxes": [[45, 52], ["Boxes.reshape_vector", "reshape_vector.copy"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.reshape_vector"], ["", "def", "extract_boxes_from_edge_boxes", "(", "edge_boxes", ")", ":", "\n", "    ", "edge_boxes", "=", "reshape_vector", "(", "edge_boxes", ")", "\n", "\n", "boxes", "=", "edge_boxes", ".", "copy", "(", ")", "\n", "boxes", "[", ":", ",", "BOX", ".", "X2", "]", "=", "edge_boxes", "[", ":", ",", "0", "]", "+", "edge_boxes", "[", ":", ",", "2", "]", "\n", "boxes", "[", ":", ",", "BOX", ".", "Y2", "]", "=", "edge_boxes", "[", ":", ",", "1", "]", "+", "edge_boxes", "[", ":", ",", "3", "]", "\n", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.box_area": [[53, 63], ["Boxes.reshape_vector"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.reshape_vector"], ["", "def", "box_area", "(", "boxes", ")", ":", "\n", "    ", "\"\"\"\n    Calculates a box or boxes area.\n    :param boxes: A list of boxes or a box (dictionary with keys x1, x2, y1, y2).\n    :rtype: np.ndarray\n    \"\"\"", "\n", "boxes", "=", "reshape_vector", "(", "boxes", ")", "\n", "area_value", "=", "(", "boxes", "[", ":", ",", "BOX", ".", "X2", "]", "-", "boxes", "[", ":", ",", "BOX", ".", "X1", "]", ")", "*", "(", "boxes", "[", ":", ",", "BOX", ".", "Y2", "]", "-", "boxes", "[", ":", ",", "BOX", ".", "Y1", "]", ")", "\n", "\n", "return", "area_value", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.intersection": [[65, 82], ["Boxes.reshape_vector", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.reshape_vector"], ["", "def", "intersection", "(", "boxes", ",", "candidate_box", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the intersection  of a given box and an array of boxes.\n    :param candidate_box: Either a box array or an index.\n    :param boxes: An array where boxes[0] is 'x1', boxes[1] is 'y1', boxes[2] is width, boxes[3] is height.\n    :return: intersection vector\n    \"\"\"", "\n", "\n", "boxes", "=", "reshape_vector", "(", "boxes", ")", "\n", "\n", "intersection_value", "=", "numpy", ".", "maximum", "(", "0", ",", "numpy", ".", "minimum", "(", "boxes", "[", ":", ",", "BOX", ".", "X2", "]", ",", "candidate_box", "[", "BOX", ".", "X2", "]", ")", "-", "\n", "numpy", ".", "maximum", "(", "boxes", "[", ":", ",", "BOX", ".", "X1", "]", ",", "candidate_box", "[", "BOX", ".", "X1", "]", ")", ")", "*", "numpy", ".", "maximum", "(", "0", ",", "numpy", ".", "minimum", "(", "boxes", "[", ":", ",", "BOX", ".", "Y2", "]", ",", "candidate_box", "[", "BOX", ".", "Y2", "]", ")", "-", "\n", "numpy", ".", "maximum", "(", "boxes", "[", ":", ",", "BOX", ".", "Y1", "]", ",", "candidate_box", "[", "BOX", ".", "Y1", "]", ")", ")", "\n", "\n", "return", "intersection_value", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.maximum_overlap": [[83, 104], ["Boxes.reshape_vector", "Boxes.intersection", "Boxes.box_area", "Boxes.box_area", "numpy.minimum"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.reshape_vector", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.intersection", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.box_area", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.box_area"], ["", "def", "maximum_overlap", "(", "boxes", ",", "candidate_box", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the maximum overlap of a given box and an array of boxes.\n    :param candidate_box: Either a box array or an index.\n    :param boxes: An array where boxes[0] is 'x1', boxes[1] is 'y1', boxes[2] is 'x2', boxes[3] is 'y2'.\n    :return: maximum overlap ratios vector\n    \"\"\"", "\n", "\n", "boxes", "=", "reshape_vector", "(", "boxes", ")", "\n", "\n", "intersection_value", "=", "intersection", "(", "boxes", ",", "candidate_box", ")", "\n", "\n", "candidate_area", "=", "box_area", "(", "candidate_box", ")", "\n", "boxes_area", "=", "box_area", "(", "boxes", ")", "\n", "minimum_area", "=", "numpy", ".", "minimum", "(", "boxes_area", ",", "candidate_area", ")", "\n", "\n", "indices", "=", "minimum_area", ">", "0", "\n", "minimum_area_divide", "=", "minimum_area", "*", "indices", "+", "(", "1", "-", "indices", ")", "\n", "max_overlap_value", "=", "(", "intersection_value", "*", "indices", ")", "/", "numpy", ".", "cast", "[", "'float32'", "]", "(", "minimum_area_divide", ")", "\n", "\n", "return", "max_overlap_value", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.non_maximal_suppression": [[107, 142], ["numpy.argsort", "numpy.ones", "numpy.ones", "nms_boxes.append", "nms_scores.append", "numpy.delete", "Boxes.maximum_overlap", "numpy.asarray", "numpy.asarray", "list"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.maximum_overlap"], ["", "def", "non_maximal_suppression", "(", "boxes", ",", "scores", "=", "None", ",", "labels", "=", "None", ",", "overlap_threshold", "=", "0.5", ")", ":", "\n", "\n", "    ", "if", "scores", "is", "None", ":", "\n", "        ", "scores", "=", "numpy", ".", "ones", "(", "boxes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "if", "labels", "is", "None", ":", "\n", "        ", "labels", "=", "numpy", ".", "ones", "(", "boxes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "# values = numpy.sort(scores)", "\n", "# argsort - decreasing order (largest last)!", "\n", "", "indices", "=", "numpy", ".", "argsort", "(", "scores", ")", "\n", "\n", "nms_boxes", ",", "nms_scores", ",", "nms_labels", ",", "nms_predictions", ",", "deleted_indices", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "while", "indices", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "best_confidence_sorted_index", "=", "indices", ".", "shape", "[", "0", "]", "-", "1", "\n", "best_confidence_index", "=", "indices", "[", "best_confidence_sorted_index", "]", "\n", "\n", "# Saving the best confidence box (it is not suppressed).", "\n", "max_box", "=", "boxes", "[", "best_confidence_index", "]", "# Another option, takes the avg: numpy.average(overlapping_boxes, 0)", "\n", "max_scores", "=", "scores", "[", "best_confidence_index", "]", "\n", "nms_boxes", ".", "append", "(", "max_box", ")", "\n", "nms_scores", ".", "append", "(", "max_scores", ")", "\n", "indices", "=", "numpy", ".", "delete", "(", "indices", ",", "best_confidence_sorted_index", ")", "\n", "if", "indices", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "break", "\n", "\n", "", "overlap", "=", "maximum_overlap", "(", "boxes", "[", "indices", "[", "0", ":", "best_confidence_sorted_index", "]", "]", ",", "boxes", "[", "best_confidence_index", ",", ":", "]", ")", "\n", "\n", "if", "overlap", "is", "not", "None", ":", "\n", "            ", "deleted_indices", "+=", "list", "(", "indices", "[", "overlap", ">=", "overlap_threshold", "]", ")", "\n", "# Suppressing non maximal boxes.", "\n", "indices", "=", "indices", "[", "overlap", "<", "overlap_threshold", "]", "\n", "\n", "", "", "return", "numpy", ".", "asarray", "(", "nms_boxes", ")", ",", "numpy", ".", "asarray", "(", "nms_scores", ")", ",", "deleted_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.perform_nms_on_image_dataframe": [[144, 156], ["len", "image_data.as_matrix", "numpy.array", "Boxes.non_maximal_suppression", "list", "image_data[].unique", "print", "image_data[].isin"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.Boxes.non_maximal_suppression"], ["", "def", "perform_nms_on_image_dataframe", "(", "image_data", ",", "overlap_threshold", "=", "0.5", ")", ":", "\n", "    ", "number_of_images", "=", "len", "(", "image_data", "[", "'image_name'", "]", ".", "unique", "(", ")", ")", "\n", "if", "number_of_images", ">", "1", ":", "\n", "        ", "print", "(", "'nms received data including more than 1 image - cannot perform nms!'", ")", "\n", "", "image_boxes", "=", "image_data", ".", "as_matrix", "(", "BOX_CONSTANTS", ")", "\n", "image_scores", "=", "numpy", ".", "array", "(", "image_data", "[", "'confidence'", "]", ")", "\n", "\n", "nms_boxes", ",", "nms_scores", ",", "deleted_indices", "=", "non_maximal_suppression", "(", "image_boxes", ",", "image_scores", ",", "\n", "overlap_threshold", "=", "overlap_threshold", ")", "\n", "\n", "deleted_ids", "=", "list", "(", "image_data", "[", "'id'", "]", ".", "iloc", "[", "deleted_indices", "]", ")", "\n", "return", "image_data", "[", "~", "image_data", "[", "'id'", "]", ".", "isin", "(", "deleted_ids", ")", "]", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.TransformParameters.__init__": [[96, 119], ["keras.backend.image_data_format", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "fill_mode", "=", "'nearest'", ",", "\n", "interpolation", "=", "'linear'", ",", "\n", "cval", "=", "0", ",", "\n", "data_format", "=", "None", ",", "\n", "relative_translation", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "fill_mode", "=", "fill_mode", "\n", "self", ".", "cval", "=", "cval", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "relative_translation", "=", "relative_translation", "\n", "\n", "if", "data_format", "is", "None", ":", "\n", "            ", "data_format", "=", "keras", ".", "backend", ".", "image_data_format", "(", ")", "\n", "", "self", ".", "data_format", "=", "data_format", "\n", "\n", "if", "data_format", "==", "'channels_first'", ":", "\n", "            ", "self", ".", "channel_axis", "=", "0", "\n", "", "elif", "data_format", "==", "'channels_last'", ":", "\n", "            ", "self", ".", "channel_axis", "=", "2", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"invalid data_format, expected 'channels_first' or 'channels_last', got '{}'\"", ".", "format", "(", "data_format", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.TransformParameters.cvBorderMode": [[120, 129], ["None"], "methods", ["None"], ["", "", "def", "cvBorderMode", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "fill_mode", "==", "'constant'", ":", "\n", "            ", "return", "cv2", ".", "BORDER_CONSTANT", "\n", "", "if", "self", ".", "fill_mode", "==", "'nearest'", ":", "\n", "            ", "return", "cv2", ".", "BORDER_REPLICATE", "\n", "", "if", "self", ".", "fill_mode", "==", "'reflect'", ":", "\n", "            ", "return", "cv2", ".", "BORDER_REFLECT_101", "\n", "", "if", "self", ".", "fill_mode", "==", "'wrap'", ":", "\n", "            ", "return", "cv2", ".", "BORDER_WRAP", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.TransformParameters.cvInterpolation": [[130, 141], ["None"], "methods", ["None"], ["", "", "def", "cvInterpolation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "interpolation", "==", "'nearest'", ":", "\n", "            ", "return", "cv2", ".", "INTER_NEAREST", "\n", "", "if", "self", ".", "interpolation", "==", "'linear'", ":", "\n", "            ", "return", "cv2", ".", "INTER_LINEAR", "\n", "", "if", "self", ".", "interpolation", "==", "'cubic'", ":", "\n", "            ", "return", "cv2", ".", "INTER_CUBIC", "\n", "", "if", "self", ".", "interpolation", "==", "'area'", ":", "\n", "            ", "return", "cv2", ".", "INTER_AREA", "\n", "", "if", "self", ".", "interpolation", "==", "'lanczos4'", ":", "\n", "            ", "return", "cv2", ".", "INTER_LANCZOS4", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.read_image_bgr": [[26, 34], ["numpy.asarray", "image[].copy", "PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "read_image_bgr", "(", "path", ")", ":", "\n", "    ", "\"\"\" Read an image in BGR format.\n\n    Args\n        path: Path to the image.\n    \"\"\"", "\n", "image", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "return", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.preprocess_image": [[36, 63], ["x.astype.astype", "keras.backend.floatx", "keras.backend.image_data_format"], "function", ["None"], ["", "def", "preprocess_image", "(", "x", ")", ":", "\n", "    ", "\"\"\" Preprocess an image by subtracting the ImageNet mean.\n\n    Args\n        x: np.array of shape (None, None, 3) or (3, None, None).\n\n    Returns\n        The input with the ImageNet mean subtracted.\n    \"\"\"", "\n", "# mostly identical to \"https://github.com/fchollet/keras/blob/master/keras/applications/imagenet_utils.py\"", "\n", "# except for converting RGB -> BGR since we assume BGR already", "\n", "x", "=", "x", ".", "astype", "(", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "if", "keras", ".", "backend", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "        ", "if", "x", ".", "ndim", "==", "3", ":", "\n", "            ", "x", "[", "0", ",", ":", ",", ":", "]", "-=", "103.939", "\n", "x", "[", "1", ",", ":", ",", ":", "]", "-=", "116.779", "\n", "x", "[", "2", ",", ":", ",", ":", "]", "-=", "123.68", "\n", "", "else", ":", "\n", "            ", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "-=", "103.939", "\n", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "-=", "116.779", "\n", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "-=", "123.68", "\n", "", "", "else", ":", "\n", "        ", "x", "[", "...", ",", "0", "]", "-=", "103.939", "\n", "x", "[", "...", ",", "1", "]", "-=", "116.779", "\n", "x", "[", "...", ",", "2", "]", "-=", "123.68", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.adjust_transform_for_image": [[65, 83], ["transform.change_transform_origin"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.change_transform_origin"], ["", "def", "adjust_transform_for_image", "(", "transform", ",", "image", ",", "relative_translation", ")", ":", "\n", "    ", "\"\"\" Adjust a transformation for a specific image.\n\n    The translation of the matrix will be scaled with the size of the image.\n    The linear part of the transformation will adjusted so that the origin of the transformation will be at the center of the image.\n    \"\"\"", "\n", "height", ",", "width", ",", "channels", "=", "image", ".", "shape", "\n", "\n", "result", "=", "transform", "\n", "\n", "# Scale the translation with the image size if specified.", "\n", "if", "relative_translation", ":", "\n", "        ", "result", "[", "0", ":", "2", ",", "2", "]", "*=", "[", "width", ",", "height", "]", "\n", "\n", "# Move the origin of transformation.", "\n", "", "result", "=", "change_transform_origin", "(", "transform", ",", "(", "0.5", "*", "width", ",", "0.5", "*", "height", ")", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.apply_transform": [[143, 172], ["cv2.warpAffine", "numpy.moveaxis", "numpy.moveaxis", "params.cvInterpolation", "params.cvBorderMode"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.TransformParameters.cvInterpolation", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.TransformParameters.cvBorderMode"], ["", "", "", "def", "apply_transform", "(", "matrix", ",", "image", ",", "params", ")", ":", "\n", "    ", "\"\"\"\n    Apply a transformation to an image.\n\n    The origin of transformation is at the top left corner of the image.\n\n    The matrix is interpreted such that a point (x, y) on the original image is moved to transform * (x, y) in the generated image.\n    Mathematically speaking, that means that the matrix is a transformation from the transformed image space to the original image space.\n\n    Args\n      matrix: A homogeneous 3 by 3 matrix holding representing the transformation to apply.\n      image:  The image to transform.\n      params: The transform parameters (see TransformParameters)\n    \"\"\"", "\n", "if", "params", ".", "channel_axis", "!=", "2", ":", "\n", "        ", "image", "=", "np", ".", "moveaxis", "(", "image", ",", "params", ".", "channel_axis", ",", "2", ")", "\n", "\n", "", "output", "=", "cv2", ".", "warpAffine", "(", "\n", "image", ",", "\n", "matrix", "[", ":", "2", ",", ":", "]", ",", "\n", "dsize", "=", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ",", "\n", "flags", "=", "params", ".", "cvInterpolation", "(", ")", ",", "\n", "borderMode", "=", "params", ".", "cvBorderMode", "(", ")", ",", "\n", "borderValue", "=", "params", ".", "cval", ",", "\n", ")", "\n", "\n", "if", "params", ".", "channel_axis", "!=", "2", ":", "\n", "        ", "output", "=", "np", ".", "moveaxis", "(", "output", ",", "2", ",", "params", ".", "channel_axis", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.image.resize_image": [[174, 201], ["min", "max", "cv2.resize"], "function", ["None"], ["", "def", "resize_image", "(", "img", ",", "min_side", "=", "800", ",", "max_side", "=", "1333", ")", ":", "\n", "    ", "\"\"\" Resize an image such that the size is constrained to min_side and max_side.\n\n    Args\n        min_side: The image's min side will be equal to min_side after resizing.\n        max_side: If after resizing the image's max side is above max_side, resize until the max side is equal to max_side.\n\n    Returns\n        A resized image.\n    \"\"\"", "\n", "(", "rows", ",", "cols", ",", "_", ")", "=", "img", ".", "shape", "\n", "\n", "smallest_side", "=", "min", "(", "rows", ",", "cols", ")", "\n", "\n", "# rescale the image so the smallest side is min_side", "\n", "scale", "=", "min_side", "/", "smallest_side", "\n", "\n", "# check if the largest side is now greater than max_side, which can happen", "\n", "# when images have a large aspect ratio", "\n", "largest_side", "=", "max", "(", "rows", ",", "cols", ")", "\n", "if", "largest_side", "*", "scale", ">", "max_side", ":", "\n", "        ", "scale", "=", "max_side", "/", "largest_side", "\n", "\n", "# resize the image with the computed scale", "\n", "", "img", "=", "cv2", ".", "resize", "(", "img", ",", "None", ",", "fx", "=", "scale", ",", "fy", "=", "scale", ")", "\n", "\n", "return", "img", ",", "scale", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.makedirs": [[53, 62], ["os.makedirs", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.makedirs"], ["def", "makedirs", "(", "path", ")", ":", "\n", "# Intended behavior: try to create the directory,", "\n", "# pass if the directory exists already, fails otherwise.", "\n", "# Meant for Python 2.7/3.n compatibility.", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.get_session": [[64, 70], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["", "", "", "def", "get_session", "(", ")", ":", "\n", "    ", "\"\"\" Construct a modified tf session.\n    \"\"\"", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "return", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.model_with_weights": [[72, 83], ["model.load_weights"], "function", ["None"], ["", "def", "model_with_weights", "(", "model", ",", "weights", ",", "skip_mismatch", ")", ":", "\n", "    ", "\"\"\" Load weights for model.\n\n    Args\n        model         : The model to load weights for.\n        weights       : The weights to load.\n        skip_mismatch : If True, skips layers whose shape of weights doesn't match with the model.\n    \"\"\"", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_weights", "(", "weights", ",", "by_name", "=", "True", ",", "skip_mismatch", "=", "skip_mismatch", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.create_models": [[85, 131], ["object_detector_retinanet.keras_retinanet.models.retinanet.AnchorParameters.default.num_anchors", "object_detector_retinanet.keras_retinanet.models.retinanet.iou_submodels", "object_detector_retinanet.keras_retinanet.layers.retinanet_iou_layer.retinanet_iou", "object_detector_retinanet.keras_retinanet.models.retinanet.retinanet_bbox", "keras.utils.multi_gpu_model.compile", "train_iou.model_with_weights", "tensorflow.device", "train_iou.model_with_weights", "keras.utils.multi_gpu_model", "backbone_retinanet", "keras.optimizers.adam", "keras.optimizers.adam", "backbone_retinanet", "object_detector_retinanet.keras_retinanet.losses.iou_score"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.AnchorParameters.num_anchors", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.iou_submodels", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.retinanet_iou_layer.retinanet_iou", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.retinanet_bbox", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.model_with_weights", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.model_with_weights", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.iou_score"], ["", "def", "create_models", "(", "backbone_retinanet", ",", "num_classes", ",", "weights", ",", "multi_gpu", "=", "0", ",", "freeze_backbone", "=", "False", ")", ":", "\n", "    ", "\"\"\" Creates three models (model, training_model, prediction_model).\n\n    Args\n        backbone_retinanet : A function to call to create a retinanet model with a given backbone.\n        num_classes        : The number of classes to train.\n        weights            : The weights to load into the model.\n        multi_gpu          : The number of GPUs to use for training.\n        freeze_backbone    : If True, disables learning for the backbone.\n\n    Returns\n        model            : The base model. This is also the model that is saved in snapshots.\n        training_model   : The training model. If multi_gpu=0, this is identical to model.\n        prediction_model : The model wrapped with utility functions to perform object detection (applies regression values and performs NMS).\n    \"\"\"", "\n", "modifier", "=", "freeze_model", "if", "freeze_backbone", "else", "None", "\n", "\n", "# Keras recommends initialising a multi-gpu model on the CPU to ease weight sharing, and to prevent OOM errors.", "\n", "# optionally wrap in a parallel model", "\n", "num_anchors", "=", "AnchorParameters", ".", "default", ".", "num_anchors", "(", ")", "\n", "submodels", "=", "iou_submodels", "(", "num_classes", "=", "num_classes", ",", "num_anchors", "=", "num_anchors", ")", "\n", "if", "multi_gpu", ">", "1", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "model", "=", "model_with_weights", "(", "backbone_retinanet", "(", "num_classes", ",", "modifier", "=", "modifier", ",", "submodels", "=", "submodels", ")", ",", "\n", "weights", "=", "weights", ",", "\n", "skip_mismatch", "=", "True", ")", "\n", "iou_model", "=", "multi_gpu_model", "(", "model", ",", "gpus", "=", "multi_gpu", ")", "\n", "", "", "else", ":", "\n", "        ", "model", "=", "model_with_weights", "(", "backbone_retinanet", "(", "num_classes", ",", "modifier", "=", "modifier", ",", "submodels", "=", "submodels", ")", ",", "\n", "weights", "=", "weights", ",", "\n", "skip_mismatch", "=", "True", ")", "\n", "\n", "# make prediction model", "\n", "", "iou_model", "=", "retinanet_iou", "(", "model", "=", "model", ")", "\n", "prediction_model", "=", "retinanet_bbox", "(", "model", "=", "model", ")", "\n", "\n", "# compile model", "\n", "iou_model", ".", "compile", "(", "\n", "loss", "=", "{", "\n", "'iou_regression_output'", ":", "losses", ".", "iou_score", "(", ")", "\n", "}", ",", "\n", "optimizer", "=", "keras", ".", "optimizers", ".", "adam", "(", "lr", "=", "1e-5", ",", "clipnorm", "=", "0.001", ")", "\n", "# optimizer=keras.optimizers.SGD()", "\n", ")", "\n", "\n", "return", "model", ",", "iou_model", ",", "prediction_model", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.create_callbacks": [[133, 191], ["callbacks.append", "keras.callbacks.TensorBoard", "keras.callbacks.TensorBoard", "callbacks.append", "train_iou.makedirs", "keras.callbacks.ModelCheckpoint", "keras.callbacks.ModelCheckpoint", "object_detector_retinanet.keras_retinanet.callbacks.RedirectModel", "callbacks.append", "keras.callbacks.ReduceLROnPlateau", "keras.callbacks.ReduceLROnPlateau", "os.path.join"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.makedirs"], ["", "def", "create_callbacks", "(", "model", ",", "training_model", ",", "prediction_model", ",", "validation_generator", ",", "args", ")", ":", "\n", "    ", "\"\"\" Creates the callbacks to use during training.\n\n    Args\n        model: The base model.\n        training_model: The model that is used for training.\n        prediction_model: The model that should be used for validation.\n        validation_generator: The generator for creating validation data.\n        args: parseargs args object.\n\n    Returns:\n        A list of callbacks used for training.\n    \"\"\"", "\n", "callbacks", "=", "[", "]", "\n", "\n", "tensorboard_callback", "=", "None", "\n", "\n", "if", "args", ".", "tensorboard_dir", ":", "\n", "        ", "tensorboard_callback", "=", "keras", ".", "callbacks", ".", "TensorBoard", "(", "\n", "log_dir", "=", "args", ".", "tensorboard_dir", ",", "\n", "histogram_freq", "=", "0", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "write_graph", "=", "True", ",", "\n", "write_grads", "=", "False", ",", "\n", "write_images", "=", "False", ",", "\n", "embeddings_freq", "=", "0", ",", "\n", "embeddings_layer_names", "=", "None", ",", "\n", "embeddings_metadata", "=", "None", "\n", ")", "\n", "callbacks", ".", "append", "(", "tensorboard_callback", ")", "\n", "\n", "# save the model", "\n", "", "if", "args", ".", "snapshots", ":", "\n", "# ensure directory created first; otherwise h5py will error after epoch.", "\n", "        ", "makedirs", "(", "args", ".", "snapshot_path", ")", "\n", "checkpoint", "=", "keras", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "snapshot_path", ",", "\n", "'iou_{backbone}_{dataset_type}_{{epoch:02d}}.h5'", ".", "format", "(", "backbone", "=", "args", ".", "backbone", ",", "\n", "dataset_type", "=", "args", ".", "dataset_type", ")", "\n", ")", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "checkpoint", "=", "RedirectModel", "(", "checkpoint", ",", "model", ")", "\n", "callbacks", ".", "append", "(", "checkpoint", ")", "\n", "\n", "", "callbacks", ".", "append", "(", "keras", ".", "callbacks", ".", "ReduceLROnPlateau", "(", "\n", "monitor", "=", "'loss'", ",", "\n", "factor", "=", "0.1", ",", "\n", "patience", "=", "2", ",", "\n", "verbose", "=", "1", ",", "\n", "mode", "=", "'auto'", ",", "\n", "epsilon", "=", "0.0001", ",", "\n", "cooldown", "=", "0", ",", "\n", "min_lr", "=", "0", "\n", ")", ")", "\n", "\n", "return", "callbacks", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.create_generators": [[193, 239], ["object_detector_retinanet.keras_retinanet.utils.transform.random_transform_generator", "object_detector_retinanet.keras_retinanet.utils.transform.random_transform_generator", "object_detector_retinanet.keras_retinanet.preprocessing.csv_generator_iou.CSVIouGenerator", "ValueError", "object_detector_retinanet.keras_retinanet.preprocessing.csv_generator_iou.CSVIouGenerator"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_transform_generator", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_transform_generator"], ["", "def", "create_generators", "(", "args", ")", ":", "\n", "    ", "\"\"\" Create generators for training and validation.\n    \"\"\"", "\n", "# create random transform generator for augmenting training data", "\n", "if", "args", ".", "random_transform", ":", "\n", "        ", "transform_generator", "=", "random_transform_generator", "(", "\n", "min_rotation", "=", "-", "0.1", ",", "\n", "max_rotation", "=", "0.1", ",", "\n", "min_translation", "=", "(", "-", "0.1", ",", "-", "0.1", ")", ",", "\n", "max_translation", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "min_shear", "=", "-", "0.1", ",", "\n", "max_shear", "=", "0.1", ",", "\n", "min_scaling", "=", "(", "0.9", ",", "0.9", ")", ",", "\n", "max_scaling", "=", "(", "1.1", ",", "1.1", ")", ",", "\n", "flip_x_chance", "=", "0.5", ",", "\n", "flip_y_chance", "=", "0.5", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "transform_generator", "=", "random_transform_generator", "(", "flip_x_chance", "=", "0.5", ")", "\n", "\n", "", "if", "args", ".", "dataset_type", "==", "'csv'", ":", "\n", "        ", "train_generator", "=", "CSVIouGenerator", "(", "\n", "args", ".", "annotations", ",", "\n", "args", ".", "classes", ",", "\n", "base_dir", "=", "args", ".", "base_dir", ",", "\n", "transform_generator", "=", "transform_generator", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "image_min_side", "=", "args", ".", "image_min_side", ",", "\n", "image_max_side", "=", "args", ".", "image_max_side", "\n", ")", "\n", "\n", "if", "args", ".", "val_annotations", ":", "\n", "            ", "validation_generator", "=", "CSVIouGenerator", "(", "\n", "args", ".", "val_annotations", ",", "\n", "args", ".", "classes", ",", "\n", "base_dir", "=", "args", ".", "base_dir", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "image_min_side", "=", "args", ".", "image_min_side", ",", "\n", "image_max_side", "=", "args", ".", "image_max_side", "\n", ")", "\n", "", "else", ":", "\n", "            ", "validation_generator", "=", "None", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid data type received: {}'", ".", "format", "(", "args", ".", "dataset_type", ")", ")", "\n", "\n", "", "return", "train_generator", ",", "validation_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.check_args": [[241, 272], ["ValueError", "ValueError", "ValueError", "warnings.warn"], "function", ["None"], ["", "def", "check_args", "(", "parsed_args", ")", ":", "\n", "    ", "\"\"\" Function to check for inherent contradictions within parsed arguments.\n    For example, batch_size < num_gpus\n    Intended to raise errors prior to backend initialisation.\n\n    Args\n        parsed_args: parser.parse_args()\n\n    Returns\n        parsed_args\n    \"\"\"", "\n", "\n", "if", "parsed_args", ".", "multi_gpu", ">", "1", "and", "parsed_args", ".", "batch_size", "<", "parsed_args", ".", "multi_gpu", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Batch size ({}) must be equal to or higher than the number of GPUs ({})\"", ".", "format", "(", "parsed_args", ".", "batch_size", ",", "\n", "parsed_args", ".", "multi_gpu", ")", ")", "\n", "\n", "", "if", "parsed_args", ".", "multi_gpu", ">", "1", "and", "parsed_args", ".", "snapshot", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Multi GPU training ({}) and resuming from snapshots ({}) is not supported.\"", ".", "format", "(", "parsed_args", ".", "multi_gpu", ",", "\n", "parsed_args", ".", "snapshot", ")", ")", "\n", "\n", "", "if", "parsed_args", ".", "multi_gpu", ">", "1", "and", "not", "parsed_args", ".", "multi_gpu_force", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Multi-GPU support is experimental, use at own risk! Run with --multi-gpu-force if you wish to continue.\"", ")", "\n", "\n", "", "if", "'resnet'", "not", "in", "parsed_args", ".", "backbone", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'Using experimental backbone {}. Only resnet50 has been properly tested.'", ".", "format", "(", "parsed_args", ".", "backbone", ")", ")", "\n", "\n", "", "return", "parsed_args", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.parse_args": [[274, 352], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "object_detector_retinanet.utils.annotation_path", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "train_iou.check_args", "string.split", "object_detector_retinanet.utils.root_dir", "object_detector_retinanet.utils.root_dir", "argparse.ArgumentParser.parse_args", "os.path.join", "object_detector_retinanet.utils.image_path", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.annotation_path", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.check_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path"], ["", "def", "parse_args", "(", "args", ")", ":", "\n", "    ", "\"\"\" Parse the arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Simple training script for training a RetinaNet network.'", ")", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "help", "=", "'Arguments for specific dataset types.'", ",", "dest", "=", "'dataset_type'", ")", "\n", "subparsers", ".", "required", "=", "True", "\n", "\n", "coco_parser", "=", "subparsers", ".", "add_parser", "(", "'coco'", ")", "\n", "coco_parser", ".", "add_argument", "(", "'coco_path'", ",", "help", "=", "'Path to dataset directory (ie. /tmp/COCO).'", ")", "\n", "\n", "pascal_parser", "=", "subparsers", ".", "add_parser", "(", "'pascal'", ")", "\n", "pascal_parser", ".", "add_argument", "(", "'pascal_path'", ",", "help", "=", "'Path to dataset directory (ie. /tmp/VOCdevkit).'", ")", "\n", "\n", "kitti_parser", "=", "subparsers", ".", "add_parser", "(", "'kitti'", ")", "\n", "kitti_parser", ".", "add_argument", "(", "'kitti_path'", ",", "help", "=", "'Path to dataset directory (ie. /tmp/kitti).'", ")", "\n", "\n", "def", "csv_list", "(", "string", ")", ":", "\n", "        ", "return", "string", ".", "split", "(", "','", ")", "\n", "\n", "", "oid_parser", "=", "subparsers", ".", "add_parser", "(", "'oid'", ")", "\n", "oid_parser", ".", "add_argument", "(", "'main_dir'", ",", "help", "=", "'Path to dataset directory.'", ")", "\n", "oid_parser", ".", "add_argument", "(", "'--version'", ",", "help", "=", "'The current dataset version is v4.'", ",", "default", "=", "'v4'", ")", "\n", "oid_parser", ".", "add_argument", "(", "'--labels-filter'", ",", "help", "=", "'A list of labels to filter.'", ",", "type", "=", "csv_list", ",", "default", "=", "None", ")", "\n", "oid_parser", ".", "add_argument", "(", "'--annotation-cache-dir'", ",", "help", "=", "'Path to store annotation cache.'", ",", "default", "=", "'.'", ")", "\n", "oid_parser", ".", "add_argument", "(", "'--fixed-labels'", ",", "help", "=", "'Use the exact specified labels.'", ",", "default", "=", "False", ")", "\n", "\n", "data_dir", "=", "annotation_path", "(", ")", "\n", "args_annotations", "=", "data_dir", "+", "'/annotations_train.csv'", "\n", "args_val_annotations", "=", "data_dir", "+", "'/annotations_val.csv'", "\n", "\n", "args_snapshot_path", "=", "root_dir", "(", ")", "+", "'/snapshot'", "\n", "args_tensorboard_dir", "=", "root_dir", "(", ")", "+", "'/logs'", "\n", "\n", "csv_parser", "=", "subparsers", ".", "add_parser", "(", "'csv'", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--annotations'", ",", "help", "=", "'Path to CSV file containing annotations for training.'", ",", "\n", "default", "=", "args_annotations", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--classes'", ",", "help", "=", "'Path to a CSV file containing class label mapping.'", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'class_mappings.csv'", ")", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--val-annotations'", ",", "\n", "help", "=", "'Path to CSV file containing annotations for validation (optional).'", ",", "\n", "default", "=", "args_val_annotations", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--base_dir'", ",", "\n", "help", "=", "'Path to base dir for CSV file.'", ",", "\n", "default", "=", "image_path", "(", ")", ")", "\n", "\n", "group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group", ".", "add_argument", "(", "'--snapshot'", ",", "help", "=", "'Resume training from a snapshot.'", ")", "\n", "group", ".", "add_argument", "(", "'--imagenet-weights'", ",", "\n", "help", "=", "'Initialize the model with pretrained imagenet weights. This is the default behaviour.'", ",", "\n", "action", "=", "'store_const'", ",", "const", "=", "True", ",", "default", "=", "False", ")", "\n", "group", ".", "add_argument", "(", "'--weights'", ",", "help", "=", "'Initialize the model with weights from a file.'", ")", "\n", "group", ".", "add_argument", "(", "'--no-weights'", ",", "help", "=", "'Don\\'t initialize the model with any weights.'", ",", "dest", "=", "'imagenet_weights'", ",", "\n", "action", "=", "'store_const'", ",", "const", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "help", "=", "'Backbone model used by retinanet.'", ",", "default", "=", "'resnet50'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "help", "=", "'Size of the batches.'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "help", "=", "'Id of the GPU to use (as reported by nvidia-smi).'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi-gpu'", ",", "help", "=", "'Number of GPUs to use for parallel processing.'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--multi-gpu-force'", ",", "help", "=", "'Extra flag needed to enable (experimental) multi-gpu support.'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "help", "=", "'Number of epochs to train.'", ",", "type", "=", "int", ",", "default", "=", "150", ")", "\n", "parser", ".", "add_argument", "(", "'--steps'", ",", "help", "=", "'Number of steps per epoch.'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot-path'", ",", "\n", "help", "=", "'Path to store snapshots of models during training (defaults to \\'./snapshots\\')'", ",", "\n", "default", "=", "args_snapshot_path", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard-dir'", ",", "help", "=", "'Log directory for Tensorboard output'", ",", "\n", "default", "=", "args_tensorboard_dir", ")", "\n", "parser", ".", "add_argument", "(", "'--no-snapshots'", ",", "help", "=", "'Disable saving snapshots.'", ",", "dest", "=", "'snapshots'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-evaluation'", ",", "help", "=", "'Disable per epoch evaluation.'", ",", "dest", "=", "'evaluation'", ",", "\n", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze-backbone'", ",", "help", "=", "'Freeze training of backbone layers.'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--random-transform'", ",", "help", "=", "'Randomly transform image and annotations.'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--image-min-side'", ",", "help", "=", "'Rescale the image so the smallest side is min_side.'", ",", "type", "=", "int", ",", "\n", "default", "=", "800", ")", "\n", "parser", ".", "add_argument", "(", "'--image-max-side'", ",", "help", "=", "'Rescale the image if the largest side is larger than max_side.'", ",", "\n", "type", "=", "int", ",", "default", "=", "1333", ")", "\n", "\n", "return", "check_args", "(", "parser", ".", "parse_args", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train_iou.main": [[354, 445], ["train_iou.parse_args", "object_detector_retinanet.keras_retinanet.models.backbone", "object_detector_retinanet.keras_retinanet.utils.keras_version.check_keras_version", "keras.backend.tensorflow_backend.set_session", "keras.backend.tensorflow_backend.set_session", "time.strftime().replace", "os.path.join", "os.path.join", "print", "print", "object_detector_retinanet.utils.create_folder", "object_detector_retinanet.utils.create_folder", "train_iou.create_generators", "print", "train_iou.create_callbacks", "training_model.fit_generator", "str", "str", "train_iou.get_session", "print", "object_detector_retinanet.keras_retinanet.models.load_model", "object_detector_retinanet.keras_retinanet.models.retinanet.retinanet_bbox", "os.path.join", "print", "train_iou.create_models", "functools.partial", "time.strftime", "train_generator.size", "validation_generator.size", "os.path.join", "models.backbone.download_imagenet", "validation_generator.size", "object_detector_retinanet.utils.root_dir", "train_generator.num_classes", "object_detector_retinanet.keras_retinanet.utils.anchors.make_shapes_callback"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.backbone", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.check_keras_version", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.create_folder", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.create_folder", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_generators", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_callbacks", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.get_session", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.load_model", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.retinanet_bbox", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_models", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.download_imagenet", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.num_classes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.make_shapes_callback"], ["", "def", "main", "(", "args", "=", "None", ")", ":", "\n", "# parse arguments", "\n", "    ", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "", "args", "=", "parse_args", "(", "args", ")", "\n", "\n", "if", "DEBUG_MODE", ":", "\n", "        ", "args", ".", "steps", "=", "10", "\n", "\n", "# create object that stores backbone information", "\n", "", "backbone", "=", "models", ".", "backbone", "(", "args", ".", "backbone", ")", "\n", "\n", "# make sure keras is the minimum required version", "\n", "check_keras_version", "(", ")", "\n", "\n", "# optionally choose specific GPU", "\n", "use_cpu", "=", "False", "\n", "\n", "if", "args", ".", "gpu", ":", "\n", "        ", "gpu_num", "=", "args", ".", "gpu", "\n", "", "else", ":", "\n", "        ", "gpu_num", "=", "str", "(", "0", ")", "\n", "\n", "", "if", "use_cpu", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "666", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu_num", "\n", "", "keras", ".", "backend", ".", "tensorflow_backend", ".", "set_session", "(", "get_session", "(", ")", ")", "\n", "\n", "# Weights and logs saves in a new locations", "\n", "stmp", "=", "time", ".", "strftime", "(", "\"%c\"", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "args", ".", "snapshot_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_path", ",", "stmp", ")", "\n", "args", ".", "tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "tensorboard_dir", ",", "stmp", ")", "\n", "print", "(", "\"Weights will be saved in  {}\"", ".", "format", "(", "args", ".", "snapshot_path", ")", ")", "\n", "print", "(", "\"Logs will be saved in {}\"", ".", "format", "(", "args", ".", "tensorboard_dir", ")", ")", "\n", "create_folder", "(", "args", ".", "snapshot_path", ")", "\n", "create_folder", "(", "args", ".", "tensorboard_dir", ")", "\n", "\n", "# create the generators", "\n", "train_generator", ",", "validation_generator", "=", "create_generators", "(", "args", ")", "\n", "print", "(", "'train_size:{},val_size:{}'", ".", "format", "(", "train_generator", ".", "size", "(", ")", ",", "validation_generator", ".", "size", "(", ")", ")", ")", "\n", "\n", "# create the model", "\n", "if", "args", ".", "snapshot", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Loading model, this may take a second...'", ")", "\n", "model", "=", "models", ".", "load_model", "(", "args", ".", "snapshot", ",", "backbone_name", "=", "args", ".", "backbone", ")", "\n", "training_model", "=", "model", "\n", "prediction_model", "=", "retinanet_bbox", "(", "model", "=", "model", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "args", ".", "weights", ")", ")", "\n", "# default to imagenet if nothing else is specified", "\n", "if", "weights", "is", "None", "and", "args", ".", "imagenet_weights", ":", "\n", "            ", "weights", "=", "backbone", ".", "download_imagenet", "(", ")", "\n", "\n", "", "print", "(", "'Creating model, this may take a second...'", ")", "\n", "model", ",", "training_model", ",", "prediction_model", "=", "create_models", "(", "\n", "backbone_retinanet", "=", "backbone", ".", "retinanet", ",", "\n", "num_classes", "=", "train_generator", ".", "num_classes", "(", ")", ",", "\n", "weights", "=", "weights", ",", "\n", "multi_gpu", "=", "args", ".", "multi_gpu", ",", "\n", "freeze_backbone", "=", "args", ".", "freeze_backbone", "\n", ")", "\n", "\n", "# print model summary", "\n", "# print(model.summary())", "\n", "\n", "# this lets the generator compute backbone layer shapes using the actual backbone model", "\n", "", "if", "'vgg'", "in", "args", ".", "backbone", "or", "'densenet'", "in", "args", ".", "backbone", ":", "\n", "        ", "compute_anchor_targets", "=", "functools", ".", "partial", "(", "anchor_targets_bbox", ",", "shapes_callback", "=", "make_shapes_callback", "(", "model", ")", ")", "\n", "train_generator", ".", "compute_anchor_targets", "=", "compute_anchor_targets", "\n", "if", "validation_generator", "is", "not", "None", ":", "\n", "            ", "validation_generator", ".", "compute_anchor_targets", "=", "compute_anchor_targets", "\n", "\n", "# create the callbacks", "\n", "", "", "callbacks", "=", "create_callbacks", "(", "\n", "model", ",", "\n", "training_model", ",", "\n", "prediction_model", ",", "\n", "validation_generator", ",", "\n", "args", ",", "\n", ")", "\n", "\n", "# start training", "\n", "training_model", ".", "fit_generator", "(", "\n", "generator", "=", "train_generator", ",", "\n", "steps_per_epoch", "=", "args", ".", "steps", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "validation_generator", ",", "\n", "validation_steps", "=", "validation_generator", ".", "size", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.predict.get_session": [[34, 40], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["def", "get_session", "(", ")", ":", "\n", "    ", "\"\"\" Construct a modified tf session.\n    \"\"\"", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "return", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.predict.create_generator": [[42, 57], ["object_detector_retinanet.keras_retinanet.preprocessing.csv_generator.CSVGenerator", "ValueError"], "function", ["None"], ["", "def", "create_generator", "(", "args", ")", ":", "\n", "    ", "\"\"\" Create generators for evaluation.\n    \"\"\"", "\n", "if", "args", ".", "dataset_type", "==", "'csv'", ":", "\n", "        ", "validation_generator", "=", "CSVGenerator", "(", "\n", "args", ".", "annotations", ",", "\n", "args", ".", "classes", ",", "\n", "image_min_side", "=", "args", ".", "image_min_side", ",", "\n", "image_max_side", "=", "args", ".", "image_max_side", ",", "\n", "base_dir", "=", "args", ".", "base_dir", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid data type received: {}'", ".", "format", "(", "args", ".", "dataset_type", ")", ")", "\n", "\n", "", "return", "validation_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.predict.parse_args": [[59, 103], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "object_detector_retinanet.utils.annotation_path", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "object_detector_retinanet.utils.image_path", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.annotation_path", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path"], ["", "def", "parse_args", "(", "args", ")", ":", "\n", "    ", "\"\"\" Parse the arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluation script for a RetinaNet network.'", ")", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "help", "=", "'Arguments for specific dataset types.'", ",", "dest", "=", "'dataset_type'", ")", "\n", "subparsers", ".", "required", "=", "True", "\n", "\n", "coco_parser", "=", "subparsers", ".", "add_parser", "(", "'coco'", ")", "\n", "coco_parser", ".", "add_argument", "(", "'coco_path'", ",", "help", "=", "'Path to dataset directory (ie. /tmp/COCO).'", ")", "\n", "\n", "pascal_parser", "=", "subparsers", ".", "add_parser", "(", "'pascal'", ")", "\n", "pascal_parser", ".", "add_argument", "(", "'pascal_path'", ",", "help", "=", "'Path to dataset directory (ie. /tmp/VOCdevkit).'", ")", "\n", "\n", "data_dir", "=", "annotation_path", "(", ")", "\n", "args_annotations", "=", "data_dir", "+", "'/annotations_test.csv'", "\n", "\n", "csv_parser", "=", "subparsers", ".", "add_parser", "(", "'csv'", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--annotations'", ",", "help", "=", "'Path to CSV file containing annotations for evaluation.'", ",", "\n", "default", "=", "args_annotations", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--classes'", ",", "help", "=", "'Path to a CSV file containing class label mapping.'", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'class_mappings.csv'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--hard_score_rate'", ",", "help", "=", "''", ",", "default", "=", "\"0.5\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'model'", ",", "help", "=", "'Path to RetinaNet model.'", ")", "\n", "parser", ".", "add_argument", "(", "'--base_dir'", ",", "help", "=", "'Path to base dir for CSV file.'", ",", "\n", "default", "=", "image_path", "(", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--convert-model'", ",", "\n", "help", "=", "'Convert the model to an inference model (ie. the input is a training model).'", ",", "type", "=", "int", ",", "\n", "default", "=", "1", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "help", "=", "'The backbone of the model.'", ",", "default", "=", "'resnet50'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "help", "=", "'Id of the GPU to use (as reported by nvidia-smi).'", ")", "\n", "parser", ".", "add_argument", "(", "'--score-threshold'", ",", "help", "=", "'Threshold on score to filter detections with (defaults to 0.05).'", ",", "\n", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--iou-threshold'", ",", "help", "=", "'IoU Threshold to count for a positive detection (defaults to 0.5).'", ",", "\n", "default", "=", "0.75", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--save-path'", ",", "help", "=", "'Path for saving images with detections (doesn\\'t work for COCO).'", ")", "\n", "parser", ".", "add_argument", "(", "'--image-min-side'", ",", "help", "=", "'Rescale the image so the smallest side is min_side.'", ",", "type", "=", "int", ",", "\n", "default", "=", "800", ")", "\n", "parser", ".", "add_argument", "(", "'--image-max-side'", ",", "help", "=", "'Rescale the image if the largest side is larger than max_side.'", ",", "\n", "type", "=", "int", ",", "default", "=", "1333", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.predict.main": [[105, 150], ["predict.parse_args", "print", "object_detector_retinanet.keras_retinanet.utils.keras_version.check_keras_version", "keras.backend.tensorflow_backend.set_session", "predict.create_generator", "print", "object_detector_retinanet.keras_retinanet.models.load_model", "object_detector_retinanet.keras_retinanet.utils.predict_iou.predict", "float", "str", "str", "predict.get_session", "os.makedirs", "os.path.join", "parse_args.hard_score_rate.lower", "os.path.exists", "object_detector_retinanet.utils.root_dir", "os.path.join", "object_detector_retinanet.utils.root_dir"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.check_keras_version", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.predict.create_generator", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.load_model", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.predict_iou.predict", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.get_session", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.makedirs", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir"], ["", "def", "main", "(", "args", "=", "None", ")", ":", "\n", "# parse arguments", "\n", "    ", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "", "args", "=", "parse_args", "(", "args", ")", "\n", "if", "args", ".", "hard_score_rate", ":", "\n", "        ", "hard_score_rate", "=", "float", "(", "args", ".", "hard_score_rate", ".", "lower", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "hard_score_rate", "=", "0.5", "\n", "", "print", "(", "\"hard_score_rate={}\"", ".", "format", "(", "hard_score_rate", ")", ")", "\n", "# make sure keras is the minimum required version", "\n", "check_keras_version", "(", ")", "\n", "\n", "# optionally choose specific GPU", "\n", "use_cpu", "=", "False", "\n", "\n", "if", "args", ".", "gpu", ":", "\n", "        ", "gpu_num", "=", "args", ".", "gpu", "\n", "", "else", ":", "\n", "        ", "gpu_num", "=", "str", "(", "0", ")", "\n", "\n", "", "if", "use_cpu", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "666", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu_num", "\n", "", "keras", ".", "backend", ".", "tensorflow_backend", ".", "set_session", "(", "get_session", "(", ")", ")", "\n", "\n", "# make save path if it doesn't exist", "\n", "if", "args", ".", "save_path", "is", "not", "None", "and", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_path", ")", "\n", "\n", "# create the generator", "\n", "", "generator", "=", "create_generator", "(", "args", ")", "\n", "\n", "# load the model", "\n", "print", "(", "'Loading model, this may take a second...'", ")", "\n", "model", "=", "models", ".", "load_model", "(", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "args", ".", "model", ")", ",", "backbone_name", "=", "args", ".", "backbone", ",", "convert", "=", "args", ".", "convert_model", ",", "nms", "=", "False", ")", "\n", "\n", "# start prediction", "\n", "predict", "(", "\n", "generator", ",", "\n", "model", ",", "\n", "score_threshold", "=", "args", ".", "score_threshold", ",", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "'res_images_iou'", ")", ",", "\n", "hard_score_rate", "=", "hard_score_rate", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.makedirs": [[52, 61], ["os.makedirs", "os.path.isdir"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.makedirs"], ["def", "makedirs", "(", "path", ")", ":", "\n", "# Intended behavior: try to create the directory,", "\n", "# pass if the directory exists already, fails otherwise.", "\n", "# Meant for Python 2.7/3.n compatibility.", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.get_session": [[63, 69], ["tensorflow.ConfigProto", "tensorflow.Session"], "function", ["None"], ["", "", "", "def", "get_session", "(", ")", ":", "\n", "    ", "\"\"\" Construct a modified tf session.\n    \"\"\"", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "return", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.model_with_weights": [[71, 82], ["model.load_weights"], "function", ["None"], ["", "def", "model_with_weights", "(", "model", ",", "weights", ",", "skip_mismatch", ")", ":", "\n", "    ", "\"\"\" Load weights for model.\n\n    Args\n        model         : The model to load weights for.\n        weights       : The weights to load.\n        skip_mismatch : If True, skips layers whose shape of weights doesn't match with the model.\n    \"\"\"", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_weights", "(", "weights", ",", "by_name", "=", "True", ",", "skip_mismatch", "=", "skip_mismatch", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_models": [[84, 127], ["object_detector_retinanet.keras_retinanet.models.retinanet.retinanet_bbox", "keras.utils.multi_gpu_model.compile", "keras.utils.multi_gpu_model", "train.model_with_weights", "tensorflow.device", "train.model_with_weights", "backbone_retinanet", "keras.optimizers.adam", "keras.optimizers.adam", "backbone_retinanet", "object_detector_retinanet.keras_retinanet.losses.smooth_l1", "object_detector_retinanet.keras_retinanet.losses.focal"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.retinanet_bbox", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.model_with_weights", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.model_with_weights", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.smooth_l1", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.focal"], ["", "def", "create_models", "(", "backbone_retinanet", ",", "num_classes", ",", "weights", ",", "multi_gpu", "=", "0", ",", "freeze_backbone", "=", "False", ")", ":", "\n", "    ", "\"\"\" Creates three models (model, training_model, prediction_model).\n\n    Args\n        backbone_retinanet : A function to call to create a retinanet model with a given backbone.\n        num_classes        : The number of classes to train.\n        weights            : The weights to load into the model.\n        multi_gpu          : The number of GPUs to use for training.\n        freeze_backbone    : If True, disables learning for the backbone.\n\n    Returns\n        model            : The base model. This is also the model that is saved in snapshots.\n        training_model   : The training model. If multi_gpu=0, this is identical to model.\n        prediction_model : The model wrapped with utility functions to perform object detection (applies regression values and performs NMS).\n    \"\"\"", "\n", "modifier", "=", "freeze_model", "if", "freeze_backbone", "else", "None", "\n", "\n", "# Keras recommends initialising a multi-gpu model on the CPU to ease weight sharing, and to prevent OOM errors.", "\n", "# optionally wrap in a parallel model", "\n", "if", "multi_gpu", ">", "1", ":", "\n", "        ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "model", "=", "model_with_weights", "(", "backbone_retinanet", "(", "num_classes", ",", "modifier", "=", "modifier", ")", ",", "weights", "=", "weights", ",", "\n", "skip_mismatch", "=", "True", ")", "\n", "", "training_model", "=", "multi_gpu_model", "(", "model", ",", "gpus", "=", "multi_gpu", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "model_with_weights", "(", "backbone_retinanet", "(", "num_classes", ",", "modifier", "=", "modifier", ")", ",", "weights", "=", "weights", ",", "\n", "skip_mismatch", "=", "True", ")", "\n", "training_model", "=", "model", "\n", "\n", "# make prediction model", "\n", "", "prediction_model", "=", "retinanet_bbox", "(", "model", "=", "model", ")", "\n", "\n", "# compile model", "\n", "training_model", ".", "compile", "(", "\n", "loss", "=", "{", "\n", "'regression'", ":", "losses", ".", "smooth_l1", "(", ")", ",", "\n", "'classification'", ":", "losses", ".", "focal", "(", ")", "\n", "}", ",", "\n", "optimizer", "=", "keras", ".", "optimizers", ".", "adam", "(", "lr", "=", "1e-5", ",", "clipnorm", "=", "0.001", ")", "\n", "# optimizer=keras.optimizers.SGD()", "\n", ")", "\n", "\n", "return", "model", ",", "training_model", ",", "prediction_model", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_callbacks": [[129, 187], ["callbacks.append", "keras.callbacks.TensorBoard", "keras.callbacks.TensorBoard", "callbacks.append", "train.makedirs", "keras.callbacks.ModelCheckpoint", "keras.callbacks.ModelCheckpoint", "object_detector_retinanet.keras_retinanet.callbacks.RedirectModel", "callbacks.append", "keras.callbacks.ReduceLROnPlateau", "keras.callbacks.ReduceLROnPlateau", "os.path.join"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.makedirs"], ["", "def", "create_callbacks", "(", "model", ",", "training_model", ",", "prediction_model", ",", "validation_generator", ",", "args", ")", ":", "\n", "    ", "\"\"\" Creates the callbacks to use during training.\n\n    Args\n        model: The base model.\n        training_model: The model that is used for training.\n        prediction_model: The model that should be used for validation.\n        validation_generator: The generator for creating validation data.\n        args: parseargs args object.\n\n    Returns:\n        A list of callbacks used for training.\n    \"\"\"", "\n", "callbacks", "=", "[", "]", "\n", "\n", "tensorboard_callback", "=", "None", "\n", "\n", "if", "args", ".", "tensorboard_dir", ":", "\n", "        ", "tensorboard_callback", "=", "keras", ".", "callbacks", ".", "TensorBoard", "(", "\n", "log_dir", "=", "args", ".", "tensorboard_dir", ",", "\n", "histogram_freq", "=", "0", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "write_graph", "=", "True", ",", "\n", "write_grads", "=", "False", ",", "\n", "write_images", "=", "False", ",", "\n", "embeddings_freq", "=", "0", ",", "\n", "embeddings_layer_names", "=", "None", ",", "\n", "embeddings_metadata", "=", "None", "\n", ")", "\n", "callbacks", ".", "append", "(", "tensorboard_callback", ")", "\n", "\n", "# save the model", "\n", "", "if", "args", ".", "snapshots", ":", "\n", "# ensure directory created first; otherwise h5py will error after epoch.", "\n", "        ", "makedirs", "(", "args", ".", "snapshot_path", ")", "\n", "checkpoint", "=", "keras", ".", "callbacks", ".", "ModelCheckpoint", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "snapshot_path", ",", "\n", "'{backbone}_{dataset_type}_{{epoch:02d}}.h5'", ".", "format", "(", "backbone", "=", "args", ".", "backbone", ",", "\n", "dataset_type", "=", "args", ".", "dataset_type", ")", "\n", ")", ",", "\n", "verbose", "=", "1", "\n", ")", "\n", "checkpoint", "=", "RedirectModel", "(", "checkpoint", ",", "model", ")", "\n", "callbacks", ".", "append", "(", "checkpoint", ")", "\n", "\n", "", "callbacks", ".", "append", "(", "keras", ".", "callbacks", ".", "ReduceLROnPlateau", "(", "\n", "monitor", "=", "'loss'", ",", "\n", "factor", "=", "0.1", ",", "\n", "patience", "=", "2", ",", "\n", "verbose", "=", "1", ",", "\n", "mode", "=", "'auto'", ",", "\n", "epsilon", "=", "0.0001", ",", "\n", "cooldown", "=", "0", ",", "\n", "min_lr", "=", "0", "\n", ")", ")", "\n", "\n", "return", "callbacks", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_generators": [[189, 235], ["object_detector_retinanet.keras_retinanet.utils.transform.random_transform_generator", "object_detector_retinanet.keras_retinanet.utils.transform.random_transform_generator", "object_detector_retinanet.keras_retinanet.preprocessing.csv_generator.CSVGenerator", "ValueError", "object_detector_retinanet.keras_retinanet.preprocessing.csv_generator.CSVGenerator"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_transform_generator", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.transform.random_transform_generator"], ["", "def", "create_generators", "(", "args", ")", ":", "\n", "    ", "\"\"\" Create generators for training and validation.\n    \"\"\"", "\n", "# create random transform generator for augmenting training data", "\n", "if", "args", ".", "random_transform", ":", "\n", "        ", "transform_generator", "=", "random_transform_generator", "(", "\n", "min_rotation", "=", "-", "0.1", ",", "\n", "max_rotation", "=", "0.1", ",", "\n", "min_translation", "=", "(", "-", "0.1", ",", "-", "0.1", ")", ",", "\n", "max_translation", "=", "(", "0.1", ",", "0.1", ")", ",", "\n", "min_shear", "=", "-", "0.1", ",", "\n", "max_shear", "=", "0.1", ",", "\n", "min_scaling", "=", "(", "0.9", ",", "0.9", ")", ",", "\n", "max_scaling", "=", "(", "1.1", ",", "1.1", ")", ",", "\n", "flip_x_chance", "=", "0.5", ",", "\n", "flip_y_chance", "=", "0.5", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "transform_generator", "=", "random_transform_generator", "(", "flip_x_chance", "=", "0.5", ")", "\n", "\n", "", "if", "args", ".", "dataset_type", "==", "'csv'", ":", "\n", "        ", "train_generator", "=", "CSVGenerator", "(", "\n", "args", ".", "annotations", ",", "\n", "args", ".", "classes", ",", "\n", "base_dir", "=", "args", ".", "base_dir", ",", "\n", "transform_generator", "=", "transform_generator", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "image_min_side", "=", "args", ".", "image_min_side", ",", "\n", "image_max_side", "=", "args", ".", "image_max_side", "\n", ")", "\n", "\n", "if", "args", ".", "val_annotations", ":", "\n", "            ", "validation_generator", "=", "CSVGenerator", "(", "\n", "args", ".", "val_annotations", ",", "\n", "args", ".", "classes", ",", "\n", "base_dir", "=", "args", ".", "base_dir", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "image_min_side", "=", "args", ".", "image_min_side", ",", "\n", "image_max_side", "=", "args", ".", "image_max_side", "\n", ")", "\n", "", "else", ":", "\n", "            ", "validation_generator", "=", "None", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid data type received: {}'", ".", "format", "(", "args", ".", "dataset_type", ")", ")", "\n", "\n", "", "return", "train_generator", ",", "validation_generator", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.check_args": [[237, 268], ["ValueError", "ValueError", "ValueError", "warnings.warn"], "function", ["None"], ["", "def", "check_args", "(", "parsed_args", ")", ":", "\n", "    ", "\"\"\" Function to check for inherent contradictions within parsed arguments.\n    For example, batch_size < num_gpus\n    Intended to raise errors prior to backend initialisation.\n\n    Args\n        parsed_args: parser.parse_args()\n\n    Returns\n        parsed_args\n    \"\"\"", "\n", "\n", "if", "parsed_args", ".", "multi_gpu", ">", "1", "and", "parsed_args", ".", "batch_size", "<", "parsed_args", ".", "multi_gpu", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Batch size ({}) must be equal to or higher than the number of GPUs ({})\"", ".", "format", "(", "parsed_args", ".", "batch_size", ",", "\n", "parsed_args", ".", "multi_gpu", ")", ")", "\n", "\n", "", "if", "parsed_args", ".", "multi_gpu", ">", "1", "and", "parsed_args", ".", "snapshot", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Multi GPU training ({}) and resuming from snapshots ({}) is not supported.\"", ".", "format", "(", "parsed_args", ".", "multi_gpu", ",", "\n", "parsed_args", ".", "snapshot", ")", ")", "\n", "\n", "", "if", "parsed_args", ".", "multi_gpu", ">", "1", "and", "not", "parsed_args", ".", "multi_gpu_force", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Multi-GPU support is experimental, use at own risk! Run with --multi-gpu-force if you wish to continue.\"", ")", "\n", "\n", "", "if", "'resnet'", "not", "in", "parsed_args", ".", "backbone", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'Using experimental backbone {}. Only resnet50 has been properly tested.'", ".", "format", "(", "parsed_args", ".", "backbone", ")", ")", "\n", "\n", "", "return", "parsed_args", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.parse_args": [[270, 349], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "object_detector_retinanet.utils.annotation_path", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "train.check_args", "string.split", "object_detector_retinanet.utils.root_dir", "object_detector_retinanet.utils.root_dir", "argparse.ArgumentParser.parse_args", "os.path.join", "object_detector_retinanet.utils.image_path", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.annotation_path", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.check_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.root_dir", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.csv_generator.CSVGenerator.image_path"], ["", "def", "parse_args", "(", "args", ")", ":", "\n", "    ", "\"\"\" Parse the arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Simple training script for training a RetinaNet network.'", ")", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "help", "=", "'Arguments for specific dataset types.'", ",", "dest", "=", "'dataset_type'", ")", "\n", "subparsers", ".", "required", "=", "True", "\n", "\n", "coco_parser", "=", "subparsers", ".", "add_parser", "(", "'coco'", ")", "\n", "coco_parser", ".", "add_argument", "(", "'coco_path'", ",", "help", "=", "'Path to dataset directory (ie. /tmp/COCO).'", ")", "\n", "\n", "pascal_parser", "=", "subparsers", ".", "add_parser", "(", "'pascal'", ")", "\n", "pascal_parser", ".", "add_argument", "(", "'pascal_path'", ",", "help", "=", "'Path to dataset directory (ie. /tmp/VOCdevkit).'", ")", "\n", "\n", "kitti_parser", "=", "subparsers", ".", "add_parser", "(", "'kitti'", ")", "\n", "kitti_parser", ".", "add_argument", "(", "'kitti_path'", ",", "help", "=", "'Path to dataset directory (ie. /tmp/kitti).'", ")", "\n", "\n", "def", "csv_list", "(", "string", ")", ":", "\n", "        ", "return", "string", ".", "split", "(", "','", ")", "\n", "\n", "", "oid_parser", "=", "subparsers", ".", "add_parser", "(", "'oid'", ")", "\n", "oid_parser", ".", "add_argument", "(", "'main_dir'", ",", "help", "=", "'Path to dataset directory.'", ")", "\n", "oid_parser", ".", "add_argument", "(", "'--version'", ",", "help", "=", "'The current dataset version is v4.'", ",", "default", "=", "'v4'", ")", "\n", "oid_parser", ".", "add_argument", "(", "'--labels-filter'", ",", "help", "=", "'A list of labels to filter.'", ",", "type", "=", "csv_list", ",", "default", "=", "None", ")", "\n", "oid_parser", ".", "add_argument", "(", "'--annotation-cache-dir'", ",", "help", "=", "'Path to store annotation cache.'", ",", "default", "=", "'.'", ")", "\n", "oid_parser", ".", "add_argument", "(", "'--fixed-labels'", ",", "help", "=", "'Use the exact specified labels.'", ",", "default", "=", "False", ")", "\n", "\n", "data_dir", "=", "annotation_path", "(", ")", "\n", "args_annotations", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'annotations_train.csv'", ")", "\n", "args_classes", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'class_mappings_train.csv'", ")", "\n", "args_val_annotations", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'annotations_val.csv'", ")", "\n", "\n", "args_snapshot_path", "=", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "'snapshot'", ")", "\n", "args_tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "root_dir", "(", ")", ",", "'logs'", ")", "\n", "\n", "csv_parser", "=", "subparsers", ".", "add_parser", "(", "'csv'", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--annotations'", ",", "help", "=", "'Path to CSV file containing annotations for training.'", ",", "\n", "default", "=", "args_annotations", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--classes'", ",", "help", "=", "'Path to a CSV file containing class label mapping.'", ",", "\n", "default", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'class_mappings.csv'", ")", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--val-annotations'", ",", "\n", "help", "=", "'Path to CSV file containing annotations for validation (optional).'", ",", "\n", "default", "=", "args_val_annotations", ")", "\n", "csv_parser", ".", "add_argument", "(", "'--base_dir'", ",", "\n", "help", "=", "'Path to base dir for CSV file.'", ",", "\n", "default", "=", "image_path", "(", ")", ")", "\n", "\n", "group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group", ".", "add_argument", "(", "'--snapshot'", ",", "help", "=", "'Resume training from a snapshot.'", ")", "\n", "group", ".", "add_argument", "(", "'--imagenet-weights'", ",", "\n", "help", "=", "'Initialize the model with pretrained imagenet weights. This is the default behaviour.'", ",", "\n", "action", "=", "'store_const'", ",", "const", "=", "True", ",", "default", "=", "True", ")", "\n", "group", ".", "add_argument", "(", "'--weights'", ",", "help", "=", "'Initialize the model with weights from a file.'", ")", "\n", "group", ".", "add_argument", "(", "'--no-weights'", ",", "help", "=", "'Don\\'t initialize the model with any weights.'", ",", "dest", "=", "'imagenet_weights'", ",", "\n", "action", "=", "'store_const'", ",", "const", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "help", "=", "'Backbone model used by retinanet.'", ",", "default", "=", "'resnet50'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "help", "=", "'Size of the batches.'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "help", "=", "'Id of the GPU to use (as reported by nvidia-smi).'", ")", "\n", "parser", ".", "add_argument", "(", "'--multi-gpu'", ",", "help", "=", "'Number of GPUs to use for parallel processing.'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--multi-gpu-force'", ",", "help", "=", "'Extra flag needed to enable (experimental) multi-gpu support.'", ",", "\n", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "help", "=", "'Number of epochs to train.'", ",", "type", "=", "int", ",", "default", "=", "150", ")", "\n", "parser", ".", "add_argument", "(", "'--steps'", ",", "help", "=", "'Number of steps per epoch.'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "parser", ".", "add_argument", "(", "'--snapshot-path'", ",", "\n", "help", "=", "'Path to store snapshots of models during training (defaults to \\'./snapshots\\')'", ",", "\n", "default", "=", "args_snapshot_path", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard-dir'", ",", "help", "=", "'Log directory for Tensorboard output'", ",", "\n", "default", "=", "args_tensorboard_dir", ")", "\n", "parser", ".", "add_argument", "(", "'--no-snapshots'", ",", "help", "=", "'Disable saving snapshots.'", ",", "dest", "=", "'snapshots'", ",", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-evaluation'", ",", "help", "=", "'Disable per epoch evaluation.'", ",", "dest", "=", "'evaluation'", ",", "\n", "action", "=", "'store_false'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze-backbone'", ",", "help", "=", "'Freeze training of backbone layers.'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--random-transform'", ",", "help", "=", "'Randomly transform image and annotations.'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--image-min-side'", ",", "help", "=", "'Rescale the image so the smallest side is min_side.'", ",", "type", "=", "int", ",", "\n", "default", "=", "800", ")", "\n", "parser", ".", "add_argument", "(", "'--image-max-side'", ",", "help", "=", "'Rescale the image if the largest side is larger than max_side.'", ",", "\n", "type", "=", "int", ",", "default", "=", "1333", ")", "\n", "\n", "return", "check_args", "(", "parser", ".", "parse_args", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.main": [[351, 444], ["train.parse_args", "object_detector_retinanet.keras_retinanet.models.backbone", "object_detector_retinanet.keras_retinanet.utils.keras_version.check_keras_version", "keras.backend.tensorflow_backend.set_session", "keras.backend.tensorflow_backend.set_session", "time.strftime().replace().replace", "os.path.join", "os.path.join", "print", "print", "object_detector_retinanet.utils.create_folder", "object_detector_retinanet.utils.create_folder", "train.create_generators", "print", "train.create_callbacks", "training_model.fit_generator", "str", "str", "train.get_session", "print", "object_detector_retinanet.keras_retinanet.models.load_model", "object_detector_retinanet.keras_retinanet.models.retinanet.retinanet_bbox", "print", "train.create_models", "functools.partial", "time.strftime().replace", "train_generator.size", "validation_generator.size", "models.backbone.download_imagenet", "validation_generator.size", "train_generator.num_classes", "object_detector_retinanet.keras_retinanet.utils.anchors.make_shapes_callback", "time.strftime"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.backbone", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.keras_version.check_keras_version", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.create_folder", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.object_detector_retinanet.utils.create_folder", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_generators", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_callbacks", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.get_session", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.load_model", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.retinanet_bbox", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.train.create_models", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.download_imagenet", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.size", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.preprocessing.generatorIou.GeneratorIou.num_classes", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.make_shapes_callback"], ["", "def", "main", "(", "args", "=", "None", ")", ":", "\n", "# parse arguments", "\n", "    ", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "", "args", "=", "parse_args", "(", "args", ")", "\n", "\n", "if", "DEBUG_MODE", ":", "\n", "        ", "args", ".", "image_min_side", "=", "200", "\n", "args", ".", "image_max_side", "=", "200", "\n", "args", ".", "steps", "=", "10", "\n", "\n", "# create object that stores backbone information", "\n", "", "backbone", "=", "models", ".", "backbone", "(", "args", ".", "backbone", ")", "\n", "\n", "# make sure keras is the minimum required version", "\n", "check_keras_version", "(", ")", "\n", "\n", "# optionally choose specific GPU", "\n", "use_cpu", "=", "False", "\n", "\n", "if", "args", ".", "gpu", ":", "\n", "        ", "gpu_num", "=", "args", ".", "gpu", "\n", "", "else", ":", "\n", "        ", "gpu_num", "=", "str", "(", "0", ")", "\n", "\n", "", "if", "use_cpu", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "666", ")", "\n", "", "else", ":", "\n", "        ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpu_num", "\n", "", "keras", ".", "backend", ".", "tensorflow_backend", ".", "set_session", "(", "get_session", "(", ")", ")", "\n", "\n", "# Weights and logs saves in a new locations", "\n", "stmp", "=", "time", ".", "strftime", "(", "\"%c\"", ")", ".", "replace", "(", "\":\"", ",", "\"_\"", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "args", ".", "snapshot_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "snapshot_path", ",", "stmp", ")", "\n", "args", ".", "tensorboard_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "tensorboard_dir", ",", "stmp", ")", "\n", "print", "(", "\"Weights will be saved in  {}\"", ".", "format", "(", "args", ".", "snapshot_path", ")", ")", "\n", "print", "(", "\"Logs will be saved in {}\"", ".", "format", "(", "args", ".", "tensorboard_dir", ")", ")", "\n", "create_folder", "(", "args", ".", "snapshot_path", ")", "\n", "create_folder", "(", "args", ".", "tensorboard_dir", ")", "\n", "\n", "# create the generators", "\n", "train_generator", ",", "validation_generator", "=", "create_generators", "(", "args", ")", "\n", "print", "(", "'train_size:{},val_size:{}'", ".", "format", "(", "train_generator", ".", "size", "(", ")", ",", "validation_generator", ".", "size", "(", ")", ")", ")", "\n", "\n", "# create the model", "\n", "if", "args", ".", "snapshot", "is", "not", "None", ":", "\n", "        ", "print", "(", "'Loading model, this may take a second...'", ")", "\n", "model", "=", "models", ".", "load_model", "(", "args", ".", "snapshot", ",", "backbone_name", "=", "args", ".", "backbone", ")", "\n", "training_model", "=", "model", "\n", "prediction_model", "=", "retinanet_bbox", "(", "model", "=", "model", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "args", ".", "weights", "\n", "# default to imagenet if nothing else is specified", "\n", "if", "weights", "is", "None", "and", "args", ".", "imagenet_weights", ":", "\n", "            ", "weights", "=", "backbone", ".", "download_imagenet", "(", ")", "\n", "\n", "", "print", "(", "'Creating model, this may take a second...'", ")", "\n", "model", ",", "training_model", ",", "prediction_model", "=", "create_models", "(", "\n", "backbone_retinanet", "=", "backbone", ".", "retinanet", ",", "\n", "num_classes", "=", "train_generator", ".", "num_classes", "(", ")", ",", "\n", "weights", "=", "weights", ",", "\n", "multi_gpu", "=", "args", ".", "multi_gpu", ",", "\n", "freeze_backbone", "=", "args", ".", "freeze_backbone", "\n", ")", "\n", "\n", "# print model summary", "\n", "# print(model.summary())", "\n", "\n", "# this lets the generator compute backbone layer shapes using the actual backbone model", "\n", "", "if", "'vgg'", "in", "args", ".", "backbone", "or", "'densenet'", "in", "args", ".", "backbone", ":", "\n", "        ", "compute_anchor_targets", "=", "functools", ".", "partial", "(", "anchor_targets_bbox", ",", "shapes_callback", "=", "make_shapes_callback", "(", "model", ")", ")", "\n", "train_generator", ".", "compute_anchor_targets", "=", "compute_anchor_targets", "\n", "if", "validation_generator", "is", "not", "None", ":", "\n", "            ", "validation_generator", ".", "compute_anchor_targets", "=", "compute_anchor_targets", "\n", "\n", "# create the callbacks", "\n", "", "", "callbacks", "=", "create_callbacks", "(", "\n", "model", ",", "\n", "training_model", ",", "\n", "prediction_model", ",", "\n", "validation_generator", ",", "\n", "args", ",", "\n", ")", "\n", "\n", "# start training", "\n", "training_model", ".", "fit_generator", "(", "\n", "generator", "=", "train_generator", ",", "\n", "steps_per_epoch", "=", "args", ".", "steps", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "validation_data", "=", "validation_generator", ",", "\n", "validation_steps", "=", "validation_generator", ".", "size", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args": [[26, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args"], ["def", "parse_args", "(", "args", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Script for converting a training model to an inference model.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'model_in'", ",", "help", "=", "'The model to convert.'", ")", "\n", "parser", ".", "add_argument", "(", "'model_out'", ",", "help", "=", "'Path to save the converted model to.'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "help", "=", "'The backbone of the model to convert.'", ",", "default", "=", "'resnet50'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-nms'", ",", "help", "=", "'Disables non maximum suppression.'", ",", "dest", "=", "'nms'", ",", "action", "=", "'store_false'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.main": [[37, 48], ["convert_model.parse_args", "object_detector_retinanet.keras_retinanet.models.load_model", "models.load_model.save"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.bin.convert_model.parse_args", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.load_model"], ["", "def", "main", "(", "args", "=", "None", ")", ":", "\n", "# parse arguments", "\n", "    ", "if", "args", "is", "None", ":", "\n", "        ", "args", "=", "sys", ".", "argv", "[", "1", ":", "]", "\n", "", "args", "=", "parse_args", "(", "args", ")", "\n", "\n", "# load and convert model", "\n", "model", "=", "models", ".", "load_model", "(", "args", ".", "model_in", ",", "convert", "=", "True", ",", "backbone_name", "=", "args", ".", "backbone", ",", "nms", "=", "args", ".", "nms", ")", "\n", "\n", "# save model", "\n", "model", ".", "save", "(", "args", ".", "model_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.retinanet_iou_layer.BasicModel.freeze_base_layers": [[51, 58], ["hasattr", "retinanet_iou_layer.BasicModel.freeze_base_layers"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.retinanet_iou_layer.BasicModel.freeze_base_layers"], ["    ", "@", "staticmethod", "\n", "def", "freeze_base_layers", "(", "layers", ")", ":", "\n", "        ", "for", "layer", "in", "layers", ":", "\n", "            ", "if", "'iou'", "not", "in", "layer", ".", "name", ":", "\n", "                ", "layer", ".", "trainable", "=", "False", "\n", "", "if", "hasattr", "(", "layer", ",", "'layers'", ")", ":", "\n", "                ", "BasicModel", ".", "freeze_base_layers", "(", "layer", ".", "layers", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.retinanet_iou_layer.retinanet_iou": [[12, 48], ["retinanet_iou_layer.BasicModel.freeze_base_layers", "object_detector_retinanet.keras_retinanet.models.retinanet.__build_anchors", "keras.layers.Concatenate", "keras.layers.Concatenate.", "keras.models.Model", "object_detector_retinanet.keras_retinanet.models.retinanet.retinanet", "object_detector_retinanet.keras_retinanet.layers.RegressBoxes", "object_detector_retinanet.keras_retinanet.models.retinanet.retinanet.get_layer", "anchor_parameters.num_anchors"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.retinanet_iou_layer.BasicModel.freeze_base_layers", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.__build_anchors", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.retinanet", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.AnchorParameters.num_anchors"], ["def", "retinanet_iou", "(", "\n", "model", "=", "None", ",", "\n", "anchor_parameters", "=", "AnchorParameters", ".", "default", ",", "\n", "name", "=", "'retinanet-iou'", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "if", "model", "is", "None", ":", "\n", "        ", "model", "=", "retinanet", "(", "num_anchors", "=", "anchor_parameters", ".", "num_anchors", "(", ")", ",", "**", "kwargs", ")", "\n", "\n", "", "BasicModel", ".", "freeze_base_layers", "(", "model", ".", "layers", ")", "\n", "\n", "# compute the anchors", "\n", "features", "=", "[", "model", ".", "get_layer", "(", "p_name", ")", ".", "output", "for", "p_name", "in", "[", "'P3'", ",", "'P4'", ",", "'P5'", ",", "'P6'", ",", "'P7'", "]", "]", "\n", "anchors", "=", "__build_anchors", "(", "anchor_parameters", ",", "features", ")", "\n", "\n", "# we expect the anchors, regression and classification values as first output", "\n", "regression", "=", "model", ".", "outputs", "[", "0", "]", "\n", "classification", "=", "model", ".", "outputs", "[", "1", "]", "\n", "\n", "# \"other\" can be any additional output from custom submodels, by default this will be []", "\n", "other", "=", "model", ".", "outputs", "[", "2", ":", "]", "\n", "\n", "# apply predicted regression to anchors", "\n", "boxes", "=", "RegressBoxes", "(", "name", "=", "'boxes'", ")", "(", "[", "anchors", ",", "regression", "]", ")", "\n", "# boxes = ClipBoxes(name='clipped_boxes')([model.inputs[0], boxes])", "\n", "\n", "# # filter detections (apply NMS / score threshold / select top-k)", "\n", "# detections = FilterDetections(nms=False, name='filtered_detections')(", "\n", "#     [boxes, classification] + other)", "\n", "\n", "# concat = keras.layers.Concatenate([detections[0], detections[-1]], name='iou_regression_output')", "\n", "concatenation_layer", "=", "keras", ".", "layers", ".", "Concatenate", "(", "axis", "=", "-", "1", ",", "name", "=", "'iou_regression_output'", ")", "\n", "concatenated_top", "=", "concatenation_layer", "(", "[", "boxes", ",", "other", "[", "0", "]", ",", "classification", "]", ")", "\n", "iou_model", "=", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "model", ".", "inputs", ",", "outputs", "=", "concatenated_top", ",", "name", "=", "name", ")", "\n", "\n", "return", "iou_model", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.Anchors.__init__": [[28, 59], ["keras.backend.variable", "super().__init__", "isinstance", "isinstance", "len", "len", "utils.anchors.generate_anchors", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "keras.backend.floatx", "keras.backend.floatx"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.utils.anchors.generate_anchors"], ["def", "__init__", "(", "self", ",", "size", ",", "stride", ",", "ratios", "=", "None", ",", "scales", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Initializer for an Anchors layer.\n\n        Args\n            size: The base size of the anchors to generate.\n            stride: The stride of the anchors to generate.\n            ratios: The ratios of the anchors to generate (defaults to [0.5, 1, 2]).\n            scales: The scales of the anchors to generate (defaults to [2^0, 2^(1/3), 2^(2/3)]).\n        \"\"\"", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "ratios", "=", "ratios", "\n", "self", ".", "scales", "=", "scales", "\n", "\n", "if", "ratios", "is", "None", ":", "\n", "            ", "self", ".", "ratios", "=", "np", ".", "array", "(", "[", "0.5", ",", "1", ",", "2", "]", ",", "keras", ".", "backend", ".", "floatx", "(", ")", ")", ",", "\n", "", "elif", "isinstance", "(", "ratios", ",", "list", ")", ":", "\n", "            ", "self", ".", "ratios", "=", "np", ".", "array", "(", "ratios", ")", "\n", "", "if", "scales", "is", "None", ":", "\n", "            ", "self", ".", "scales", "=", "np", ".", "array", "(", "[", "2", "**", "0", ",", "2", "**", "(", "1.0", "/", "3.0", ")", ",", "2", "**", "(", "2.0", "/", "3.0", ")", "]", ",", "keras", ".", "backend", ".", "floatx", "(", ")", ")", ",", "\n", "", "elif", "isinstance", "(", "scales", ",", "list", ")", ":", "\n", "            ", "self", ".", "scales", "=", "np", ".", "array", "(", "scales", ")", "\n", "\n", "", "self", ".", "num_anchors", "=", "len", "(", "ratios", ")", "*", "len", "(", "scales", ")", "\n", "self", ".", "anchors", "=", "keras", ".", "backend", ".", "variable", "(", "utils_anchors", ".", "generate_anchors", "(", "\n", "base_size", "=", "size", ",", "\n", "ratios", "=", "ratios", ",", "\n", "scales", "=", "scales", ",", "\n", ")", ")", "\n", "\n", "super", "(", "Anchors", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.Anchors.call": [[60, 69], ["backend.shift", "keras.backend.tile", "keras.backend.shape", "keras.backend.expand_dims"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.common.shift"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "features", "=", "inputs", "\n", "features_shape", "=", "keras", ".", "backend", ".", "shape", "(", "features", ")", "[", ":", "3", "]", "\n", "\n", "# generate proposals from bbox deltas and shifted anchors", "\n", "anchors", "=", "backend", ".", "shift", "(", "features_shape", "[", "1", ":", "3", "]", ",", "self", ".", "stride", ",", "self", ".", "anchors", ")", "\n", "anchors", "=", "keras", ".", "backend", ".", "tile", "(", "keras", ".", "backend", ".", "expand_dims", "(", "anchors", ",", "axis", "=", "0", ")", ",", "(", "features_shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "\n", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.Anchors.compute_output_shape": [[70, 76], ["numpy.prod"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "None", "not", "in", "input_shape", "[", "1", ":", "]", ":", "\n", "            ", "total", "=", "np", ".", "prod", "(", "input_shape", "[", "1", ":", "3", "]", ")", "*", "self", ".", "num_anchors", "\n", "return", "(", "input_shape", "[", "0", "]", ",", "total", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "input_shape", "[", "0", "]", ",", "None", ",", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.Anchors.get_config": [[77, 87], ["super().get_config", "super().get_config.update", "_misc.Anchors.ratios.tolist", "_misc.Anchors.scales.tolist"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.get_config"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", "Anchors", ",", "self", ")", ".", "get_config", "(", ")", "\n", "config", ".", "update", "(", "{", "\n", "'size'", ":", "self", ".", "size", ",", "\n", "'stride'", ":", "self", ".", "stride", ",", "\n", "'ratios'", ":", "self", ".", "ratios", ".", "tolist", "(", ")", ",", "\n", "'scales'", ":", "self", ".", "scales", ".", "tolist", "(", ")", ",", "\n", "}", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.UpsampleLike.call": [[93, 97], ["keras.backend.shape", "backend.resize_images"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.resize_images"], ["def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "source", ",", "target", "=", "inputs", "\n", "target_shape", "=", "keras", ".", "backend", ".", "shape", "(", "target", ")", "\n", "return", "backend", ".", "resize_images", "(", "source", ",", "(", "target_shape", "[", "1", "]", ",", "target_shape", "[", "2", "]", ")", ",", "method", "=", "'nearest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.UpsampleLike.compute_output_shape": [[98, 100], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", ")", "+", "input_shape", "[", "1", "]", "[", "1", ":", "3", "]", "+", "(", "input_shape", "[", "0", "]", "[", "-", "1", "]", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.RegressBoxes.__init__": [[106, 131], ["isinstance", "isinstance", "super().__init__", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "isinstance", "ValueError", "isinstance", "ValueError", "type", "type"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__"], ["def", "__init__", "(", "self", ",", "mean", "=", "None", ",", "std", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Initializer for the RegressBoxes layer.\n\n        Args\n            mean: The mean value of the regression values which was used for normalization.\n            std: The standard value of the regression values which was used for normalization.\n        \"\"\"", "\n", "if", "mean", "is", "None", ":", "\n", "            ", "mean", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "", "if", "std", "is", "None", ":", "\n", "            ", "std", "=", "np", ".", "array", "(", "[", "0.2", ",", "0.2", ",", "0.2", ",", "0.2", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "mean", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "mean", "=", "np", ".", "array", "(", "mean", ")", "\n", "", "elif", "not", "isinstance", "(", "mean", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected mean to be a np.ndarray, list or tuple. Received: {}'", ".", "format", "(", "type", "(", "mean", ")", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "std", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "std", "=", "np", ".", "array", "(", "std", ")", "\n", "", "elif", "not", "isinstance", "(", "std", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected std to be a np.ndarray, list or tuple. Received: {}'", ".", "format", "(", "type", "(", "std", ")", ")", ")", "\n", "\n", "", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "super", "(", "RegressBoxes", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.RegressBoxes.call": [[132, 135], ["backend.bbox_transform_inv"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.common.bbox_transform_inv"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "anchors", ",", "regression", "=", "inputs", "\n", "return", "backend", ".", "bbox_transform_inv", "(", "anchors", ",", "regression", ",", "mean", "=", "self", ".", "mean", ",", "std", "=", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.RegressBoxes.compute_output_shape": [[136, 138], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.RegressBoxes.get_config": [[139, 147], ["super().get_config", "super().get_config.update", "_misc.RegressBoxes.mean.tolist", "_misc.RegressBoxes.std.tolist"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", "RegressBoxes", ",", "self", ")", ".", "get_config", "(", ")", "\n", "config", ".", "update", "(", "{", "\n", "'mean'", ":", "self", ".", "mean", ".", "tolist", "(", ")", ",", "\n", "'std'", ":", "self", ".", "std", ".", "tolist", "(", ")", ",", "\n", "}", ")", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.ClipBoxes.call": [[153, 163], ["keras.backend.cast", "backend.clip_by_value", "backend.clip_by_value", "backend.clip_by_value", "backend.clip_by_value", "keras.backend.stack", "keras.backend.shape", "keras.backend.floatx"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.clip_by_value", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.clip_by_value", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.clip_by_value", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.clip_by_value"], ["def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "image", ",", "boxes", "=", "inputs", "\n", "shape", "=", "keras", ".", "backend", ".", "cast", "(", "keras", ".", "backend", ".", "shape", "(", "image", ")", ",", "keras", ".", "backend", ".", "floatx", "(", ")", ")", "\n", "\n", "x1", "=", "backend", ".", "clip_by_value", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", ",", "0", ",", "shape", "[", "2", "]", ")", "\n", "y1", "=", "backend", ".", "clip_by_value", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", ",", "0", ",", "shape", "[", "1", "]", ")", "\n", "x2", "=", "backend", ".", "clip_by_value", "(", "boxes", "[", ":", ",", ":", ",", "2", "]", ",", "0", ",", "shape", "[", "2", "]", ")", "\n", "y2", "=", "backend", ".", "clip_by_value", "(", "boxes", "[", ":", ",", ":", ",", "3", "]", ",", "0", ",", "shape", "[", "1", "]", ")", "\n", "\n", "return", "keras", ".", "backend", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers._misc.ClipBoxes.compute_output_shape": [[164, 166], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "input_shape", "[", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.__init__": [[103, 127], ["numpy.int32", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nms", "=", "False", ",", "\n", "nms_threshold", "=", "0.5", ",", "\n", "score_threshold", "=", "0.1", ",", "\n", "max_detections", "=", "1000", ",", "\n", "parallel_iterations", "=", "32", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\" Filters detections using score threshold, NMS and selecting the top-k detections.\n\n        Args\n            nms                 : Flag to enable/disable NMS.\n            nms_threshold       : Threshold for the IoU value to determine when a box should be suppressed.\n            score_threshold     : Threshold used to prefilter the boxes with.\n            max_detections      : Maximum number of detections to keep.\n            parallel_iterations : Number of batch items to process in parallel.\n        \"\"\"", "\n", "self", ".", "nms", "=", "nms", "\n", "self", ".", "nms_threshold", "=", "nms_threshold", "\n", "self", ".", "score_threshold", "=", "score_threshold", "\n", "self", ".", "max_detections", "=", "numpy", ".", "int32", "(", "999999", ")", "#max_detections", "\n", "self", ".", "parallel_iterations", "=", "parallel_iterations", "\n", "super", "(", "FilterDetections", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.call": [[128, 163], ["backend.map_fn", "filter_detections.filter_detections", "keras.backend.floatx", "keras.backend.floatx"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.map_fn", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.filter_detections"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Constructs the NMS graph.\n\n        Args\n            inputs : List of [boxes, classification, other[0], other[1], ...] tensors.\n        \"\"\"", "\n", "boxes", "=", "inputs", "[", "0", "]", "\n", "classification", "=", "inputs", "[", "1", "]", "\n", "other", "=", "inputs", "[", "2", ":", "]", "\n", "\n", "# wrap nms with our parameters", "\n", "def", "_filter_detections", "(", "args", ")", ":", "\n", "            ", "boxes", "=", "args", "[", "0", "]", "\n", "classification", "=", "args", "[", "1", "]", "\n", "other", "=", "args", "[", "2", "]", "\n", "\n", "return", "filter_detections", "(", "\n", "boxes", ",", "\n", "classification", ",", "\n", "other", ",", "\n", "nms", "=", "self", ".", "nms", ",", "\n", "score_threshold", "=", "self", ".", "score_threshold", ",", "\n", "max_detections", "=", "self", ".", "max_detections", ",", "\n", "nms_threshold", "=", "self", ".", "nms_threshold", ",", "\n", ")", "\n", "\n", "# call filter_detections on each batch", "\n", "", "outputs", "=", "backend", ".", "map_fn", "(", "\n", "_filter_detections", ",", "\n", "elems", "=", "[", "boxes", ",", "classification", ",", "other", "]", ",", "\n", "dtype", "=", "[", "keras", ".", "backend", ".", "floatx", "(", ")", ",", "keras", ".", "backend", ".", "floatx", "(", ")", ",", "'int32'", "]", "+", "[", "o", ".", "dtype", "for", "o", "in", "other", "]", ",", "\n", "parallel_iterations", "=", "self", ".", "parallel_iterations", "\n", ")", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.compute_output_shape": [[164, 180], ["tuple", "range", "list", "len"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\" Computes the output shapes given the input shapes.\n\n        Args\n            input_shape : List of input shapes [boxes, classification, other[0], other[1], ...].\n\n        Returns\n            List of tuples representing the output shapes:\n            [filtered_boxes.shape, filtered_scores.shape, filtered_labels.shape, filtered_other[0].shape, filtered_other[1].shape, ...]\n        \"\"\"", "\n", "return", "[", "\n", "(", "input_shape", "[", "0", "]", "[", "0", "]", ",", "self", ".", "max_detections", ",", "4", ")", ",", "\n", "(", "input_shape", "[", "1", "]", "[", "0", "]", ",", "self", ".", "max_detections", ")", ",", "\n", "(", "input_shape", "[", "1", "]", "[", "0", "]", ",", "self", ".", "max_detections", ")", ",", "\n", "]", "+", "[", "\n", "tuple", "(", "[", "input_shape", "[", "i", "]", "[", "0", "]", ",", "self", ".", "max_detections", "]", "+", "list", "(", "input_shape", "[", "i", "]", "[", "2", ":", "]", ")", ")", "for", "i", "in", "range", "(", "2", ",", "len", "(", "input_shape", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.compute_mask": [[182, 186], ["len"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ",", "inputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" This is required in Keras when there is more than 1 output.\n        \"\"\"", "\n", "return", "(", "len", "(", "inputs", ")", "+", "1", ")", "*", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.get_config": [[187, 203], ["super().get_config", "super().get_config.update"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.FilterDetections.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "\"\"\" Gets the configuration of this layer.\n\n        Returns\n            Dictionary containing the parameters of this layer.\n        \"\"\"", "\n", "config", "=", "super", "(", "FilterDetections", ",", "self", ")", ".", "get_config", "(", ")", "\n", "config", ".", "update", "(", "{", "\n", "'nms'", ":", "self", ".", "nms", ",", "\n", "'nms_threshold'", ":", "self", ".", "nms_threshold", ",", "\n", "'score_threshold'", ":", "self", ".", "score_threshold", ",", "\n", "'max_detections'", ":", "self", ".", "max_detections", ",", "\n", "'parallel_iterations'", ":", "self", ".", "parallel_iterations", ",", "\n", "}", ")", "\n", "\n", "return", "config", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.layers.filter_detections.filter_detections": [[23, 97], ["range", "keras.backend.concatenate", "backend.gather_nd", "backend.top_k", "keras.backend.gather", "keras.backend.gather", "keras.backend.gather", "keras.backend.maximum", "backend.pad", "backend.pad", "backend.pad", "keras.backend.cast", "backend.pad.set_shape", "backend.pad.set_shape", "keras.backend.cast.set_shape", "zip", "int", "backend.where", "keras.backend.stack", "all_indices.append", "keras.backend.gather", "backend.pad", "o.set_shape", "keras.backend.greater", "backend.gather_nd", "backend.non_max_suppression", "keras.backend.gather", "keras.backend.ones", "keras.backend.minimum", "list", "keras.backend.gather", "keras.backend.shape", "keras.backend.int_shape", "keras.backend.shape", "keras.backend.shape", "range", "len"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.top_k", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.pad", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.pad", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.pad", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.pad", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.non_max_suppression", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["def", "filter_detections", "(", "boxes", ",", "classification", ",", "other", "=", "[", "]", ",", "nms", "=", "True", ",", "score_threshold", "=", "0.05", ",", "max_detections", "=", "300", ",", "nms_threshold", "=", "0.5", ")", ":", "\n", "    ", "\"\"\" Filter detections using the boxes and classification values.\n\n    Args\n        boxes           : Tensor of shape (num_boxes, 4) containing the boxes in (x1, y1, x2, y2) format.\n        classification  : Tensor of shape (num_boxes, num_classes) containing the classification scores.\n        other           : List of tensors of shape (num_boxes, ...) to filter along with the boxes and classification scores.\n        nms             : Flag to enable/disable non maximum suppression.\n        score_threshold : Threshold used to prefilter the boxes with.\n        max_detections  : Maximum number of detections to keep.\n        nms_threshold   : Threshold for the IoU value to determine when a box should be suppressed.\n\n    Returns\n        A list of [boxes, scores, labels, other[0], other[1], ...].\n        boxes is shaped (max_detections, 4) and contains the (x1, y1, x2, y2) of the non-suppressed boxes.\n        scores is shaped (max_detections,) and contains the scores of the predicted class.\n        labels is shaped (max_detections,) and contains the predicted label.\n        other[i] is shaped (max_detections, ...) and contains the filtered other[i] data.\n        In case there are less than max_detections detections, the tensors are padded with -1's.\n    \"\"\"", "\n", "all_indices", "=", "[", "]", "\n", "\n", "# perform per class filtering", "\n", "for", "c", "in", "range", "(", "int", "(", "classification", ".", "shape", "[", "1", "]", ")", ")", ":", "\n", "        ", "scores", "=", "classification", "[", ":", ",", "c", "]", "\n", "\n", "# threshold based on score", "\n", "indices", "=", "backend", ".", "where", "(", "keras", ".", "backend", ".", "greater", "(", "scores", ",", "score_threshold", ")", ")", "\n", "\n", "if", "nms", ":", "\n", "            ", "filtered_boxes", "=", "backend", ".", "gather_nd", "(", "boxes", ",", "indices", ")", "\n", "filtered_scores", "=", "keras", ".", "backend", ".", "gather", "(", "scores", ",", "indices", ")", "[", ":", ",", "0", "]", "\n", "\n", "# perform NMS", "\n", "nms_indices", "=", "backend", ".", "non_max_suppression", "(", "filtered_boxes", ",", "filtered_scores", ",", "max_output_size", "=", "max_detections", ",", "iou_threshold", "=", "nms_threshold", ")", "\n", "\n", "# filter indices based on NMS", "\n", "indices", "=", "keras", ".", "backend", ".", "gather", "(", "indices", ",", "nms_indices", ")", "\n", "\n", "# add indices to list of all indices", "\n", "", "labels", "=", "c", "*", "keras", ".", "backend", ".", "ones", "(", "(", "keras", ".", "backend", ".", "shape", "(", "indices", ")", "[", "0", "]", ",", ")", ",", "dtype", "=", "'int64'", ")", "\n", "indices", "=", "keras", ".", "backend", ".", "stack", "(", "[", "indices", "[", ":", ",", "0", "]", ",", "labels", "]", ",", "axis", "=", "1", ")", "\n", "all_indices", ".", "append", "(", "indices", ")", "\n", "\n", "# concatenate indices to single tensor", "\n", "", "indices", "=", "keras", ".", "backend", ".", "concatenate", "(", "all_indices", ",", "axis", "=", "0", ")", "\n", "\n", "# select top k", "\n", "scores", "=", "backend", ".", "gather_nd", "(", "classification", ",", "indices", ")", "\n", "labels", "=", "indices", "[", ":", ",", "1", "]", "\n", "scores", ",", "top_indices", "=", "backend", ".", "top_k", "(", "scores", ",", "k", "=", "keras", ".", "backend", ".", "minimum", "(", "max_detections", ",", "keras", ".", "backend", ".", "shape", "(", "scores", ")", "[", "0", "]", ")", ")", "\n", "\n", "# filter input using the final set of indices", "\n", "indices", "=", "keras", ".", "backend", ".", "gather", "(", "indices", "[", ":", ",", "0", "]", ",", "top_indices", ")", "\n", "boxes", "=", "keras", ".", "backend", ".", "gather", "(", "boxes", ",", "indices", ")", "\n", "labels", "=", "keras", ".", "backend", ".", "gather", "(", "labels", ",", "top_indices", ")", "\n", "other_", "=", "[", "keras", ".", "backend", ".", "gather", "(", "o", ",", "indices", ")", "for", "o", "in", "other", "]", "\n", "\n", "# zero pad the outputs", "\n", "pad_size", "=", "keras", ".", "backend", ".", "maximum", "(", "0", ",", "max_detections", "-", "keras", ".", "backend", ".", "shape", "(", "scores", ")", "[", "0", "]", ")", "\n", "boxes", "=", "backend", ".", "pad", "(", "boxes", ",", "[", "[", "0", ",", "pad_size", "]", ",", "[", "0", ",", "0", "]", "]", ",", "constant_values", "=", "-", "1", ")", "\n", "scores", "=", "backend", ".", "pad", "(", "scores", ",", "[", "[", "0", ",", "pad_size", "]", "]", ",", "constant_values", "=", "-", "1", ")", "\n", "labels", "=", "backend", ".", "pad", "(", "labels", ",", "[", "[", "0", ",", "pad_size", "]", "]", ",", "constant_values", "=", "-", "1", ")", "\n", "labels", "=", "keras", ".", "backend", ".", "cast", "(", "labels", ",", "'int32'", ")", "\n", "other_", "=", "[", "backend", ".", "pad", "(", "o", ",", "[", "[", "0", ",", "pad_size", "]", "]", "+", "[", "[", "0", ",", "0", "]", "for", "_", "in", "range", "(", "1", ",", "len", "(", "o", ".", "shape", ")", ")", "]", ",", "constant_values", "=", "-", "1", ")", "for", "o", "in", "other_", "]", "\n", "\n", "# set shapes, since we know what they are", "\n", "boxes", ".", "set_shape", "(", "[", "max_detections", ",", "4", "]", ")", "\n", "scores", ".", "set_shape", "(", "[", "max_detections", "]", ")", "\n", "labels", ".", "set_shape", "(", "[", "max_detections", "]", ")", "\n", "for", "o", ",", "s", "in", "zip", "(", "other_", ",", "[", "list", "(", "keras", ".", "backend", ".", "int_shape", "(", "o", ")", ")", "for", "o", "in", "other", "]", ")", ":", "\n", "        ", "o", ".", "set_shape", "(", "[", "max_detections", "]", "+", "s", "[", "1", ":", "]", ")", "\n", "\n", "", "return", "[", "boxes", ",", "scores", ",", "labels", "]", "+", "other_", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.__init__": [[19, 26], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__"], ["def", "__init__", "(", "self", ",", "\n", "callback", ",", "\n", "model", ")", ":", "\n", "        ", "super", "(", "RedirectModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "callback", "=", "callback", "\n", "self", ".", "redirect_model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_epoch_begin": [[27, 29], ["common.RedirectModel.callback.on_epoch_begin"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_epoch_begin"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_epoch_begin", "(", "epoch", ",", "logs", "=", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_epoch_end": [[30, 32], ["common.RedirectModel.callback.on_epoch_end"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_epoch_end"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_epoch_end", "(", "epoch", ",", "logs", "=", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_batch_begin": [[33, 35], ["common.RedirectModel.callback.on_batch_begin"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_batch_begin"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_batch_begin", "(", "batch", ",", "logs", "=", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_batch_end": [[36, 38], ["common.RedirectModel.callback.on_batch_end"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_batch_end"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_batch_end", "(", "batch", ",", "logs", "=", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_train_begin": [[39, 44], ["common.RedirectModel.callback.set_model", "common.RedirectModel.callback.on_train_begin"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_train_begin"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "# overwrite the model with our custom model", "\n", "        ", "self", ".", "callback", ".", "set_model", "(", "self", ".", "redirect_model", ")", "\n", "\n", "self", ".", "callback", ".", "on_train_begin", "(", "logs", "=", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_train_end": [[45, 47], ["common.RedirectModel.callback.on_train_end"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.callbacks.common.RedirectModel.on_train_end"], ["", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_train_end", "(", "logs", "=", "logs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.common.bbox_transform_inv": [[21, 53], ["keras.backend.stack"], "function", ["None"], ["model", ")", ":", "\n", "        ", "super", "(", "RedirectModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "callback", "=", "callback", "\n", "self", ".", "redirect_model", "=", "model", "\n", "\n", "", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_epoch_begin", "(", "epoch", ",", "logs", "=", "logs", ")", "\n", "\n", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_epoch_end", "(", "epoch", ",", "logs", "=", "logs", ")", "\n", "\n", "", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_batch_begin", "(", "batch", ",", "logs", "=", "logs", ")", "\n", "\n", "", "def", "on_batch_end", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_batch_end", "(", "batch", ",", "logs", "=", "logs", ")", "\n", "\n", "", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "# overwrite the model with our custom model", "\n", "        ", "self", ".", "callback", ".", "set_model", "(", "self", ".", "redirect_model", ")", "\n", "\n", "self", ".", "callback", ".", "on_train_begin", "(", "logs", "=", "logs", ")", "\n", "\n", "", "def", "on_train_end", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "callback", ".", "on_train_end", "(", "logs", "=", "logs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.common.shift": [[55, 86], ["dynamic.meshgrid", "keras.backend.reshape", "keras.backend.reshape", "keras.backend.stack", "keras.backend.transpose", "keras.backend.reshape", "keras.backend.shape", "keras.backend.shape", "keras.backend.reshape", "keras.backend.cast", "keras.backend.arange", "keras.backend.constant", "keras.backend.arange", "keras.backend.constant", "keras.backend.reshape", "keras.backend.floatx", "keras.backend.floatx", "keras.backend.floatx", "keras.backend.floatx", "keras.backend.floatx"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.meshgrid"], []], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.map_fn": [[20, 24], ["tensorflow.map_fn"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.map_fn"], ["def", "map_fn", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/map_fn .\n    \"\"\"", "\n", "return", "tensorflow", ".", "map_fn", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.pad": [[26, 30], ["tensorflow.pad"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.pad"], ["", "def", "pad", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/pad .\n    \"\"\"", "\n", "return", "tensorflow", ".", "pad", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.top_k": [[32, 36], ["tensorflow.nn.top_k"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.top_k"], ["", "def", "top_k", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/nn/top_k .\n    \"\"\"", "\n", "return", "tensorflow", ".", "nn", ".", "top_k", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.clip_by_value": [[38, 42], ["tensorflow.clip_by_value"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.clip_by_value"], ["", "def", "clip_by_value", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/clip_by_value .\n    \"\"\"", "\n", "return", "tensorflow", ".", "clip_by_value", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.resize_images": [[44, 57], ["tensorflow.image.resize_images"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.resize_images"], ["", "def", "resize_images", "(", "images", ",", "size", ",", "method", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/image/resize_images .\n\n    Args\n        method: The method used for interpolation. One of ('bilinear', 'nearest', 'bicubic', 'area').\n    \"\"\"", "\n", "methods", "=", "{", "\n", "'bilinear'", ":", "tensorflow", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "'nearest'", ":", "tensorflow", ".", "image", ".", "ResizeMethod", ".", "NEAREST_NEIGHBOR", ",", "\n", "'bicubic'", ":", "tensorflow", ".", "image", ".", "ResizeMethod", ".", "BICUBIC", ",", "\n", "'area'", ":", "tensorflow", ".", "image", ".", "ResizeMethod", ".", "AREA", ",", "\n", "}", "\n", "return", "tensorflow", ".", "image", ".", "resize_images", "(", "images", ",", "size", ",", "methods", "[", "method", "]", ",", "align_corners", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.non_max_suppression": [[59, 63], ["tensorflow.image.non_max_suppression"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.non_max_suppression"], ["", "def", "non_max_suppression", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/image/non_max_suppression .\n    \"\"\"", "\n", "return", "tensorflow", ".", "image", ".", "non_max_suppression", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range": [[65, 69], ["tensorflow.range"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "range", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/range .\n    \"\"\"", "\n", "return", "tensorflow", ".", "range", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.scatter_nd": [[71, 75], ["tensorflow.scatter_nd"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.scatter_nd"], ["", "def", "scatter_nd", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/scatter_nd .\n    \"\"\"", "\n", "return", "tensorflow", ".", "scatter_nd", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd": [[77, 81], ["tensorflow.gather_nd"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.gather_nd"], ["", "def", "gather_nd", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/gather_nd .\n    \"\"\"", "\n", "return", "tensorflow", ".", "gather_nd", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.meshgrid": [[83, 87], ["tensorflow.meshgrid"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.meshgrid"], ["", "def", "meshgrid", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/meshgrid .\n    \"\"\"", "\n", "return", "tensorflow", ".", "meshgrid", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where": [[89, 93], ["tensorflow.where"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.where"], ["", "def", "where", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" See https://www.tensorflow.org/versions/master/api_docs/python/tf/where .\n    \"\"\"", "\n", "return", "tensorflow", ".", "where", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.mobilenet.MobileNetBackbone.__init__": [[30, 36], ["Backbone.__init__", "mobilenet.MobileNetBackbone.custom_objects.update"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", "MobileNetBackbone", ",", "self", ")", ".", "__init__", "(", "backbone", ")", "\n", "\n", "self", ".", "custom_objects", ".", "update", "(", "{", "\n", "'relu6'", ":", "relu6", ",", "\n", "'DepthwiseConv2D'", ":", "DepthwiseConv2D", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.mobilenet.MobileNetBackbone.retinanet": [[38, 42], ["mobilenet.mobilenet_retinanet"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.mobilenet.mobilenet_retinanet"], ["", "def", "retinanet", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Returns a retinanet model using the correct backbone.\n        \"\"\"", "\n", "return", "mobilenet_retinanet", "(", "*", "args", ",", "backbone", "=", "self", ".", "backbone", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.mobilenet.MobileNetBackbone.download_imagenet": [[43, 71], ["float", "int", "keras.applications.mobilenet.get_file", "[].replace", "keras.backend.image_data_format", "ValueError", "mobilenet.MobileNetBackbone.backbone.split", "mobilenet.MobileNetBackbone.backbone.split"], "methods", ["None"], ["", "def", "download_imagenet", "(", "self", ")", ":", "\n", "        ", "\"\"\" Download pre-trained weights for the specified backbone name.\n        This name is in the format mobilenet{rows}_{alpha} where rows is the\n        imagenet shape dimension and 'alpha' controls the width of the network.\n        For more info check the explanation from the keras mobilenet script itself.\n        \"\"\"", "\n", "\n", "alpha", "=", "float", "(", "self", ".", "backbone", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "rows", "=", "int", "(", "self", ".", "backbone", ".", "split", "(", "'_'", ")", "[", "0", "]", ".", "replace", "(", "'mobilenet'", ",", "''", ")", ")", "\n", "\n", "# load weights", "\n", "if", "keras", ".", "backend", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "            ", "raise", "ValueError", "(", "'Weights for \"channels_last\" format '", "\n", "'are not available.'", ")", "\n", "", "if", "alpha", "==", "1.0", ":", "\n", "            ", "alpha_text", "=", "'1_0'", "\n", "", "elif", "alpha", "==", "0.75", ":", "\n", "            ", "alpha_text", "=", "'7_5'", "\n", "", "elif", "alpha", "==", "0.50", ":", "\n", "            ", "alpha_text", "=", "'5_0'", "\n", "", "else", ":", "\n", "            ", "alpha_text", "=", "'2_5'", "\n", "\n", "", "model_name", "=", "'mobilenet_{}_{}_tf_no_top.h5'", ".", "format", "(", "alpha_text", ",", "rows", ")", "\n", "weights_url", "=", "BASE_WEIGHT_PATH", "+", "model_name", "\n", "weights_path", "=", "get_file", "(", "model_name", ",", "weights_url", ",", "cache_subdir", "=", "'models'", ")", "\n", "\n", "return", "weights_path", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.mobilenet.MobileNetBackbone.validate": [[72, 79], ["mobilenet.MobileNetBackbone.backbone.split", "ValueError"], "methods", ["None"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "\"\"\" Checks whether the backbone string is correct.\n        \"\"\"", "\n", "backbone", "=", "self", ".", "backbone", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "\n", "if", "backbone", "not", "in", "MobileNetBackbone", ".", "allowed_backbones", ":", "\n", "            ", "raise", "ValueError", "(", "'Backbone (\\'{}\\') not in allowed backbones ({}).'", ".", "format", "(", "backbone", ",", "MobileNetBackbone", ".", "allowed_backbones", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.mobilenet.mobilenet_retinanet": [[81, 111], ["float", "keras.applications.mobilenet.MobileNet", "keras.models.Model", "retinanet.retinanet", "keras.layers.Input", "modifier", "backbone.split", "modifier.get_layer"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.retinanet"], ["", "", "", "def", "mobilenet_retinanet", "(", "num_classes", ",", "backbone", "=", "'mobilenet224_1.0'", ",", "inputs", "=", "None", ",", "modifier", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Constructs a retinanet model using a mobilenet backbone.\n\n    Args\n        num_classes: Number of classes to predict.\n        backbone: Which backbone to use (one of ('mobilenet128', 'mobilenet160', 'mobilenet192', 'mobilenet224')).\n        inputs: The inputs to the network (defaults to a Tensor of shape (None, None, 3)).\n        modifier: A function handler which can modify the backbone before using it in retinanet (this can be used to freeze backbone layers for example).\n\n    Returns\n        RetinaNet model with a MobileNet backbone.\n    \"\"\"", "\n", "alpha", "=", "float", "(", "backbone", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "\n", "# choose default input", "\n", "if", "inputs", "is", "None", ":", "\n", "        ", "inputs", "=", "keras", ".", "layers", ".", "Input", "(", "(", "None", ",", "None", ",", "3", ")", ")", "\n", "\n", "", "mobilenet", "=", "MobileNet", "(", "input_tensor", "=", "inputs", ",", "alpha", "=", "alpha", ",", "include_top", "=", "False", ",", "pooling", "=", "None", ",", "weights", "=", "None", ")", "\n", "\n", "# create the full model", "\n", "layer_names", "=", "[", "'conv_pw_5_relu'", ",", "'conv_pw_11_relu'", ",", "'conv_pw_13_relu'", "]", "\n", "layer_outputs", "=", "[", "mobilenet", ".", "get_layer", "(", "name", ")", ".", "output", "for", "name", "in", "layer_names", "]", "\n", "mobilenet", "=", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "layer_outputs", ",", "name", "=", "mobilenet", ".", "name", ")", "\n", "\n", "# invoke modifier if given", "\n", "if", "modifier", ":", "\n", "        ", "mobilenet", "=", "modifier", "(", "mobilenet", ")", "\n", "\n", "", "return", "retinanet", ".", "retinanet", "(", "inputs", "=", "inputs", ",", "num_classes", "=", "num_classes", ",", "backbone_layers", "=", "mobilenet", ".", "outputs", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.AnchorParameters.__init__": [[206, 211], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sizes", ",", "strides", ",", "ratios", ",", "scales", ")", ":", "\n", "        ", "self", ".", "sizes", "=", "sizes", "\n", "self", ".", "strides", "=", "strides", "\n", "self", ".", "ratios", "=", "ratios", "\n", "self", ".", "scales", "=", "scales", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.AnchorParameters.num_anchors": [[212, 214], ["len", "len"], "methods", ["None"], ["", "def", "num_anchors", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ratios", ")", "*", "len", "(", "self", ".", "scales", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_classification_model": [[24, 75], ["keras.layers.Input", "range", "keras.models.Model", "keras.layers.Conv2D", "keras.layers.Reshape", "keras.layers.Activation", "keras.layers.Conv2D", "keras.initializers.zeros", "initializers.PriorProbability", "keras.initializers.normal"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["def", "default_classification_model", "(", "\n", "num_classes", ",", "\n", "num_anchors", ",", "\n", "pyramid_feature_size", "=", "256", ",", "\n", "prior_probability", "=", "0.01", ",", "\n", "classification_feature_size", "=", "256", ",", "\n", "name", "=", "'classification_submodel'", "\n", ")", ":", "\n", "    ", "\"\"\" Creates the default regression submodel.\n\n    Args\n        num_classes                 : Number of classes to predict a score for at each feature level.\n        num_anchors                 : Number of anchors to predict classification scores for at each feature level.\n        pyramid_feature_size        : The number of filters to expect from the feature pyramid levels.\n        classification_feature_size : The number of filters to use in the layers in the classification submodel.\n        name                        : The name of the submodel.\n\n    Returns\n        A keras.models.Model that predicts classes for each anchor.\n    \"\"\"", "\n", "options", "=", "{", "\n", "'kernel_size'", ":", "3", ",", "\n", "'strides'", ":", "1", ",", "\n", "'padding'", ":", "'same'", ",", "\n", "}", "\n", "\n", "inputs", "=", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "None", ",", "None", ",", "pyramid_feature_size", ")", ")", "\n", "outputs", "=", "inputs", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "outputs", "=", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "classification_feature_size", ",", "\n", "activation", "=", "'relu'", ",", "\n", "name", "=", "'pyramid_classification_{}'", ".", "format", "(", "i", ")", ",", "\n", "kernel_initializer", "=", "keras", ".", "initializers", ".", "normal", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ",", "seed", "=", "None", ")", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "**", "options", "\n", ")", "(", "outputs", ")", "\n", "\n", "", "outputs", "=", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "num_classes", "*", "num_anchors", ",", "\n", "kernel_initializer", "=", "keras", ".", "initializers", ".", "zeros", "(", ")", ",", "\n", "bias_initializer", "=", "initializers", ".", "PriorProbability", "(", "probability", "=", "prior_probability", ")", ",", "\n", "name", "=", "'pyramid_classification'", ",", "\n", "**", "options", "\n", ")", "(", "outputs", ")", "\n", "\n", "# reshape output and apply sigmoid", "\n", "outputs", "=", "keras", ".", "layers", ".", "Reshape", "(", "(", "-", "1", ",", "num_classes", ")", ",", "name", "=", "'pyramid_classification_reshape'", ")", "(", "outputs", ")", "\n", "outputs", "=", "keras", ".", "layers", ".", "Activation", "(", "'sigmoid'", ",", "name", "=", "'pyramid_classification_sigmoid'", ")", "(", "outputs", ")", "\n", "\n", "return", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_iou_model": [[77, 116], ["keras.layers.Input", "range", "keras.models.Model", "keras.layers.Conv2D", "keras.layers.Reshape", "keras.layers.Activation", "keras.layers.Conv2D", "keras.initializers.normal", "keras.initializers.normal"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "default_iou_model", "(", "\n", "num_classes", ",", "\n", "num_anchors", ",", "\n", "pyramid_feature_size", "=", "256", ",", "\n", "prior_probability", "=", "0.01", ",", "\n", "iou_feature_size", "=", "256", ",", "\n", "name", "=", "'iou_submodel'", "\n", ")", ":", "\n", "    ", "options", "=", "{", "\n", "'kernel_size'", ":", "3", ",", "\n", "'strides'", ":", "1", ",", "\n", "'padding'", ":", "'same'", ",", "\n", "}", "\n", "\n", "inputs", "=", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "None", ",", "None", ",", "pyramid_feature_size", ")", ")", "\n", "outputs", "=", "inputs", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "outputs", "=", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "iou_feature_size", ",", "\n", "activation", "=", "'relu'", ",", "\n", "name", "=", "'pyramid_iou_{}'", ".", "format", "(", "i", ")", ",", "\n", "kernel_initializer", "=", "keras", ".", "initializers", ".", "normal", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ",", "seed", "=", "None", ")", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "**", "options", "\n", ")", "(", "outputs", ")", "\n", "\n", "", "outputs", "=", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "num_classes", "*", "num_anchors", ",", "\n", "kernel_initializer", "=", "keras", ".", "initializers", ".", "normal", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ",", "seed", "=", "None", ")", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "name", "=", "'pyramid_iou'", ",", "\n", "**", "options", "\n", ")", "(", "outputs", ")", "\n", "\n", "# reshape output and apply sigmoid", "\n", "outputs", "=", "keras", ".", "layers", ".", "Reshape", "(", "(", "-", "1", ",", "num_classes", ")", ",", "name", "=", "'pyramid_iou_reshape'", ")", "(", "outputs", ")", "\n", "outputs", "=", "keras", ".", "layers", ".", "Activation", "(", "'sigmoid'", ",", "name", "=", "'pyramid_iou_sigmoid'", ")", "(", "outputs", ")", "\n", "\n", "return", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_regression_model": [[118, 156], ["keras.layers.Input", "range", "keras.models.Model", "keras.initializers.normal", "keras.layers.Conv2D", "keras.layers.Reshape", "keras.layers.Conv2D"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.backend.tensorflow_backend.range"], ["", "def", "default_regression_model", "(", "num_anchors", ",", "pyramid_feature_size", "=", "256", ",", "regression_feature_size", "=", "256", ",", "\n", "name", "=", "'regression_submodel'", ")", ":", "\n", "    ", "\"\"\" Creates the default regression submodel.\n\n    Args\n        num_anchors             : Number of anchors to regress for each feature level.\n        pyramid_feature_size    : The number of filters to expect from the feature pyramid levels.\n        regression_feature_size : The number of filters to use in the layers in the regression submodel.\n        name                    : The name of the submodel.\n\n    Returns\n        A keras.models.Model that predicts regression values for each anchor.\n    \"\"\"", "\n", "# All new conv layers except the final one in the", "\n", "# RetinaNet (classification) subnets are initialized", "\n", "# with bias b = 0 and a Gaussian weight fill with stddev = 0.01.", "\n", "options", "=", "{", "\n", "'kernel_size'", ":", "3", ",", "\n", "'strides'", ":", "1", ",", "\n", "'padding'", ":", "'same'", ",", "\n", "'kernel_initializer'", ":", "keras", ".", "initializers", ".", "normal", "(", "mean", "=", "0.0", ",", "stddev", "=", "0.01", ",", "seed", "=", "None", ")", ",", "\n", "'bias_initializer'", ":", "'zeros'", "\n", "}", "\n", "\n", "inputs", "=", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "None", ",", "None", ",", "pyramid_feature_size", ")", ")", "\n", "outputs", "=", "inputs", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "outputs", "=", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "regression_feature_size", ",", "\n", "activation", "=", "'relu'", ",", "\n", "name", "=", "'pyramid_regression_{}'", ".", "format", "(", "i", ")", ",", "\n", "**", "options", "\n", ")", "(", "outputs", ")", "\n", "\n", "", "outputs", "=", "keras", ".", "layers", ".", "Conv2D", "(", "num_anchors", "*", "4", ",", "name", "=", "'pyramid_regression'", ",", "**", "options", ")", "(", "outputs", ")", "\n", "outputs", "=", "keras", ".", "layers", ".", "Reshape", "(", "(", "-", "1", ",", "4", ")", ",", "name", "=", "'pyramid_regression_reshape'", ")", "(", "outputs", ")", "\n", "\n", "return", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.__create_pyramid_features": [[158, 194], ["keras.layers.Conv2D", "layers.UpsampleLike", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Add", "layers.UpsampleLike", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Add", "keras.layers.Conv2D", "keras.layers.Conv2D", "keras.layers.Activation", "keras.layers.Conv2D"], "function", ["None"], ["", "def", "__create_pyramid_features", "(", "C3", ",", "C4", ",", "C5", ",", "feature_size", "=", "256", ")", ":", "\n", "    ", "\"\"\" Creates the FPN layers on top of the backbone features.\n\n    Args\n        C3           : Feature stage C3 from the backbone.\n        C4           : Feature stage C4 from the backbone.\n        C5           : Feature stage C5 from the backbone.\n        feature_size : The feature size to use for the resulting feature levels.\n\n    Returns\n        A list of feature levels [P3, P4, P5, P6, P7].\n    \"\"\"", "\n", "# upsample C5 to get P5 from the FPN paper", "\n", "P5", "=", "keras", ".", "layers", ".", "Conv2D", "(", "feature_size", ",", "kernel_size", "=", "1", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'C5_reduced'", ")", "(", "C5", ")", "\n", "P5_upsampled", "=", "layers", ".", "UpsampleLike", "(", "name", "=", "'P5_upsampled'", ")", "(", "[", "P5", ",", "C4", "]", ")", "\n", "P5", "=", "keras", ".", "layers", ".", "Conv2D", "(", "feature_size", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'P5'", ")", "(", "P5", ")", "\n", "\n", "# add P5 elementwise to C4", "\n", "P4", "=", "keras", ".", "layers", ".", "Conv2D", "(", "feature_size", ",", "kernel_size", "=", "1", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'C4_reduced'", ")", "(", "C4", ")", "\n", "P4", "=", "keras", ".", "layers", ".", "Add", "(", "name", "=", "'P4_merged'", ")", "(", "[", "P5_upsampled", ",", "P4", "]", ")", "\n", "P4_upsampled", "=", "layers", ".", "UpsampleLike", "(", "name", "=", "'P4_upsampled'", ")", "(", "[", "P4", ",", "C3", "]", ")", "\n", "P4", "=", "keras", ".", "layers", ".", "Conv2D", "(", "feature_size", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'P4'", ")", "(", "P4", ")", "\n", "\n", "# add P4 elementwise to C3", "\n", "P3", "=", "keras", ".", "layers", ".", "Conv2D", "(", "feature_size", ",", "kernel_size", "=", "1", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'C3_reduced'", ")", "(", "C3", ")", "\n", "P3", "=", "keras", ".", "layers", ".", "Add", "(", "name", "=", "'P3_merged'", ")", "(", "[", "P4_upsampled", ",", "P3", "]", ")", "\n", "P3", "=", "keras", ".", "layers", ".", "Conv2D", "(", "feature_size", ",", "kernel_size", "=", "3", ",", "strides", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'P3'", ")", "(", "P3", ")", "\n", "\n", "# \"P6 is obtained via a 3x3 stride-2 conv on C5\"", "\n", "P6", "=", "keras", ".", "layers", ".", "Conv2D", "(", "feature_size", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'P6'", ")", "(", "C5", ")", "\n", "\n", "# \"P7 is computed by applying ReLU followed by a 3x3 stride-2 conv on P6\"", "\n", "P7", "=", "keras", ".", "layers", ".", "Activation", "(", "'relu'", ",", "name", "=", "'C6_relu'", ")", "(", "P6", ")", "\n", "P7", "=", "keras", ".", "layers", ".", "Conv2D", "(", "feature_size", ",", "kernel_size", "=", "3", ",", "strides", "=", "2", ",", "padding", "=", "'same'", ",", "name", "=", "'P7'", ")", "(", "P7", ")", "\n", "\n", "return", "[", "P3", ",", "P4", ",", "P5", ",", "P6", ",", "P7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_submodels": [[227, 242], ["retinanet.default_regression_model", "retinanet.default_classification_model"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_regression_model", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_classification_model"], ["def", "default_submodels", "(", "num_classes", ",", "num_anchors", ")", ":", "\n", "    ", "\"\"\" Create a list of default submodels used for object detection.\n\n    The default submodels contains a regression submodel and a classification submodel.\n\n    Args\n        num_classes : Number of classes to use.\n        num_anchors : Number of base anchors.\n\n    Returns\n        A list of tuple, where the first element is the name of the submodel and the second element is the submodel itself.\n    \"\"\"", "\n", "return", "[", "\n", "(", "'regression'", ",", "default_regression_model", "(", "num_anchors", ")", ")", ",", "\n", "(", "'classification'", ",", "default_classification_model", "(", "num_classes", ",", "num_anchors", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.iou_submodels": [[245, 261], ["retinanet.default_regression_model", "retinanet.default_classification_model", "retinanet.default_iou_model"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_regression_model", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_classification_model", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_iou_model"], ["", "def", "iou_submodels", "(", "num_classes", ",", "num_anchors", ")", ":", "\n", "    ", "\"\"\" Create a list of default submodels used for object detection.\n\n    The default submodels contains a regression submodel and a classification submodel.\n\n    Args\n        num_classes : Number of classes to use.\n        num_anchors : Number of base anchors.\n\n    Returns\n        A list of tuple, where the first element is the name of the submodel and the second element is the submodel itself.\n    \"\"\"", "\n", "return", "[", "\n", "(", "'regression'", ",", "default_regression_model", "(", "num_anchors", ")", ")", ",", "\n", "(", "'classification'", ",", "default_classification_model", "(", "num_classes", ",", "num_anchors", ")", ")", ",", "\n", "(", "'iou'", ",", "default_iou_model", "(", "num_classes", ",", "num_anchors", ")", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.__build_model_pyramid": [[264, 276], ["keras.layers.Concatenate", "model"], "function", ["None"], ["", "def", "__build_model_pyramid", "(", "name", ",", "model", ",", "features", ")", ":", "\n", "    ", "\"\"\" Applies a single submodel to each FPN level.\n\n    Args\n        name     : Name of the submodel.\n        model    : The submodel to evaluate.\n        features : The FPN features.\n\n    Returns\n        A tensor containing the response from the submodel on the FPN features.\n    \"\"\"", "\n", "return", "keras", ".", "layers", ".", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "name", ")", "(", "[", "model", "(", "f", ")", "for", "f", "in", "features", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.__build_pyramid": [[278, 289], ["retinanet.__build_model_pyramid"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.__build_model_pyramid"], ["", "def", "__build_pyramid", "(", "models", ",", "features", ")", ":", "\n", "    ", "\"\"\" Applies all submodels to each FPN level.\n\n    Args\n        models   : List of sumodels to run on each pyramid level (by default only regression, classifcation).\n        features : The FPN features.\n\n    Returns\n        A list of tensors, one for each submodel.\n    \"\"\"", "\n", "return", "[", "__build_model_pyramid", "(", "n", ",", "m", ",", "features", ")", "for", "n", ",", "m", "in", "models", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.__build_anchors": [[291, 317], ["keras.layers.Concatenate", "layers.Anchors", "enumerate"], "function", ["None"], ["", "def", "__build_anchors", "(", "anchor_parameters", ",", "features", ")", ":", "\n", "    ", "\"\"\" Builds anchors for the shape of the features from FPN.\n\n    Args\n        anchor_parameters : Parameteres that determine how anchors are generated.\n        features          : The FPN features.\n\n    Returns\n        A tensor containing the anchors for the FPN features.\n\n        The shape is:\n        ```\n        (batch_size, num_anchors, 4)\n        ```\n    \"\"\"", "\n", "anchors", "=", "[", "\n", "layers", ".", "Anchors", "(", "\n", "size", "=", "anchor_parameters", ".", "sizes", "[", "i", "]", ",", "\n", "stride", "=", "anchor_parameters", ".", "strides", "[", "i", "]", ",", "\n", "ratios", "=", "anchor_parameters", ".", "ratios", ",", "\n", "scales", "=", "anchor_parameters", ".", "scales", ",", "\n", "name", "=", "'anchors_{}'", ".", "format", "(", "i", ")", "\n", ")", "(", "f", ")", "for", "i", ",", "f", "in", "enumerate", "(", "features", ")", "\n", "]", "\n", "\n", "return", "keras", ".", "layers", ".", "Concatenate", "(", "axis", "=", "1", ",", "name", "=", "'anchors'", ")", "(", "anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.retinanet": [[319, 362], ["create_pyramid_features", "retinanet.__build_pyramid", "keras.models.Model", "retinanet.default_submodels"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.__build_pyramid", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.default_submodels"], ["", "def", "retinanet", "(", "\n", "inputs", ",", "\n", "backbone_layers", ",", "\n", "num_classes", ",", "\n", "num_anchors", "=", "9", ",", "\n", "create_pyramid_features", "=", "__create_pyramid_features", ",", "\n", "submodels", "=", "None", ",", "\n", "name", "=", "'retinanet'", "\n", ")", ":", "\n", "    ", "\"\"\" Construct a RetinaNet model on top of a backbone.\n\n    This model is the minimum model necessary for training (with the unfortunate exception of anchors as output).\n\n    Args\n        inputs                  : keras.layers.Input (or list of) for the input to the model.\n        num_classes             : Number of classes to classify.\n        num_anchors             : Number of base anchors.\n        create_pyramid_features : Functor for creating pyramid features given the features C3, C4, C5 from the backbone.\n        submodels               : Submodels to run on each feature map (default is regression and classification submodels).\n        name                    : Name of the model.\n\n    Returns\n        A keras.models.Model which takes an image as input and outputs generated anchors and the result from each submodel on every pyramid level.\n\n        The order of the outputs is as defined in submodels:\n        ```\n        [\n            regression, classification, other[0], other[1], ...\n        ]\n        ```\n    \"\"\"", "\n", "if", "submodels", "is", "None", ":", "\n", "        ", "submodels", "=", "default_submodels", "(", "num_classes", ",", "num_anchors", ")", "\n", "\n", "", "C3", ",", "C4", ",", "C5", "=", "backbone_layers", "\n", "\n", "# compute pyramid features as per https://arxiv.org/abs/1708.02002", "\n", "features", "=", "create_pyramid_features", "(", "C3", ",", "C4", ",", "C5", ")", "\n", "\n", "# for all pyramid levels, run available submodels", "\n", "pyramids", "=", "__build_pyramid", "(", "submodels", ",", "features", ")", "\n", "\n", "return", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "pyramids", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.retinanet_bbox": [[364, 417], ["retinanet.__build_anchors", "keras.models.Model", "retinanet.retinanet", "layers.RegressBoxes", "layers.ClipBoxes", "layers.FilterDetections", "retinanet.get_layer", "anchor_parameters.num_anchors"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.__build_anchors", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.retinanet", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.AnchorParameters.num_anchors"], ["", "def", "retinanet_bbox", "(", "\n", "model", "=", "None", ",", "\n", "anchor_parameters", "=", "AnchorParameters", ".", "default", ",", "\n", "nms", "=", "False", ",", "\n", "name", "=", "'retinanet-bbox'", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "\"\"\" Construct a RetinaNet model on top of a backbone and adds convenience functions to output boxes directly.\n\n    This model uses the minimum retinanet model and appends a few layers to compute boxes within the graph.\n    These layers include applying the regression values to the anchors and performing NMS.\n\n    Args\n        model             : RetinaNet model to append bbox layers to. If None, it will create a RetinaNet model using **kwargs.\n        anchor_parameters : Struct containing configuration for anchor generation (sizes, strides, ratios, scales).\n        name              : Name of the model.\n        *kwargs           : Additional kwargs to pass to the minimal retinanet model.\n\n    Returns\n        A keras.models.Model which takes an image as input and outputs the detections on the image.\n\n        The order is defined as follows:\n        ```\n        [\n            boxes, scores, labels, other[0], other[1], ...\n        ]\n        ```\n    \"\"\"", "\n", "if", "model", "is", "None", ":", "\n", "        ", "model", "=", "retinanet", "(", "num_anchors", "=", "anchor_parameters", ".", "num_anchors", "(", ")", ",", "**", "kwargs", ")", "\n", "\n", "# compute the anchors", "\n", "", "features", "=", "[", "model", ".", "get_layer", "(", "p_name", ")", ".", "output", "for", "p_name", "in", "[", "'P3'", ",", "'P4'", ",", "'P5'", ",", "'P6'", ",", "'P7'", "]", "]", "\n", "anchors", "=", "__build_anchors", "(", "anchor_parameters", ",", "features", ")", "\n", "\n", "# we expect the anchors, regression and classification values as first output", "\n", "regression", "=", "model", ".", "outputs", "[", "0", "]", "\n", "classification", "=", "model", ".", "outputs", "[", "1", "]", "\n", "\n", "# \"other\" can be any additional output from custom submodels, by default this will be []", "\n", "other", "=", "model", ".", "outputs", "[", "2", ":", "]", "\n", "\n", "# apply predicted regression to anchors", "\n", "boxes", "=", "layers", ".", "RegressBoxes", "(", "name", "=", "'boxes'", ")", "(", "[", "anchors", ",", "regression", "]", ")", "\n", "boxes", "=", "layers", ".", "ClipBoxes", "(", "name", "=", "'clipped_boxes'", ")", "(", "[", "model", ".", "inputs", "[", "0", "]", ",", "boxes", "]", ")", "\n", "\n", "# filter detections (apply NMS / score threshold / select top-k)", "\n", "detections", "=", "layers", ".", "FilterDetections", "(", "nms", "=", "nms", ",", "name", "=", "'filtered_detections'", ")", "(", "[", "boxes", ",", "classification", "]", "+", "other", ")", "\n", "\n", "outputs", "=", "detections", "\n", "\n", "# construct the model", "\n", "return", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "model", ".", "inputs", ",", "outputs", "=", "outputs", ",", "name", "=", "name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.vgg.VGGBackbone.retinanet": [[28, 32], ["vgg.vgg_retinanet"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.vgg.vgg_retinanet"], ["def", "retinanet", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Returns a retinanet model using the correct backbone.\n        \"\"\"", "\n", "return", "vgg_retinanet", "(", "*", "args", ",", "backbone", "=", "self", ".", "backbone", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.vgg.VGGBackbone.download_imagenet": [[33, 51], ["keras.applications.imagenet_utils.get_file", "ValueError"], "methods", ["None"], ["", "def", "download_imagenet", "(", "self", ")", ":", "\n", "        ", "\"\"\" Downloads ImageNet weights and returns path to weights file.\n        Weights can be downloaded at https://github.com/fizyr/keras-models/releases .\n        \"\"\"", "\n", "if", "self", ".", "backbone", "==", "'vgg16'", ":", "\n", "            ", "resource", "=", "keras", ".", "applications", ".", "vgg16", ".", "WEIGHTS_PATH_NO_TOP", "\n", "checksum", "=", "'6d6bbae143d832006294945121d1f1fc'", "\n", "", "elif", "self", ".", "backbone", "==", "'vgg19'", ":", "\n", "            ", "resource", "=", "keras", ".", "applications", ".", "vgg19", ".", "WEIGHTS_PATH_NO_TOP", "\n", "checksum", "=", "'253f8cb515780f3b799900260a226db6'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Backbone '{}' not recognized.\"", ".", "format", "(", "self", ".", "backbone", ")", ")", "\n", "\n", "", "return", "keras", ".", "applications", ".", "imagenet_utils", ".", "get_file", "(", "\n", "'{}_weights_tf_dim_ordering_tf_kernels_notop.h5'", ".", "format", "(", "self", ".", "backbone", ")", ",", "\n", "resource", ",", "\n", "cache_subdir", "=", "'models'", ",", "\n", "file_hash", "=", "checksum", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.vgg.VGGBackbone.validate": [[53, 60], ["ValueError"], "methods", ["None"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "\"\"\" Checks whether the backbone string is correct.\n        \"\"\"", "\n", "allowed_backbones", "=", "[", "'vgg16'", ",", "'vgg19'", "]", "\n", "\n", "if", "self", ".", "backbone", "not", "in", "allowed_backbones", ":", "\n", "            ", "raise", "ValueError", "(", "'Backbone (\\'{}\\') not in allowed backbones ({}).'", ".", "format", "(", "self", ".", "backbone", ",", "allowed_backbones", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.vgg.vgg_retinanet": [[62, 93], ["retinanet.retinanet", "keras.layers.Input", "keras.applications.VGG16", "modifier", "keras.applications.VGG19", "ValueError", "keras.applications.VGG19.get_layer"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.retinanet"], ["", "", "", "def", "vgg_retinanet", "(", "num_classes", ",", "backbone", "=", "'vgg16'", ",", "inputs", "=", "None", ",", "modifier", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Constructs a retinanet model using a vgg backbone.\n\n    Args\n        num_classes: Number of classes to predict.\n        backbone: Which backbone to use (one of ('vgg16', 'vgg19')).\n        inputs: The inputs to the network (defaults to a Tensor of shape (None, None, 3)).\n        modifier: A function handler which can modify the backbone before using it in retinanet (this can be used to freeze backbone layers for example).\n\n    Returns\n        RetinaNet model with a VGG backbone.\n    \"\"\"", "\n", "# choose default input", "\n", "if", "inputs", "is", "None", ":", "\n", "        ", "inputs", "=", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "None", ",", "None", ",", "3", ")", ")", "\n", "\n", "# create the vgg backbone", "\n", "", "if", "backbone", "==", "'vgg16'", ":", "\n", "        ", "vgg", "=", "keras", ".", "applications", ".", "VGG16", "(", "input_tensor", "=", "inputs", ",", "include_top", "=", "False", ")", "\n", "", "elif", "backbone", "==", "'vgg19'", ":", "\n", "        ", "vgg", "=", "keras", ".", "applications", ".", "VGG19", "(", "input_tensor", "=", "inputs", ",", "include_top", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Backbone '{}' not recognized.\"", ".", "format", "(", "backbone", ")", ")", "\n", "\n", "", "if", "modifier", ":", "\n", "        ", "vgg", "=", "modifier", "(", "vgg", ")", "\n", "\n", "# create the full model", "\n", "", "layer_names", "=", "[", "\"block3_pool\"", ",", "\"block4_pool\"", ",", "\"block5_pool\"", "]", "\n", "layer_outputs", "=", "[", "vgg", ".", "get_layer", "(", "name", ")", ".", "output", "for", "name", "in", "layer_names", "]", "\n", "return", "retinanet", ".", "retinanet", "(", "inputs", "=", "inputs", ",", "num_classes", "=", "num_classes", ",", "backbone_layers", "=", "layer_outputs", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.ResNetBackbone.__init__": [[30, 33], ["Backbone.__init__", "resnet.ResNetBackbone.custom_objects.update"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__"], ["def", "__init__", "(", "self", ",", "backbone", ")", ":", "\n", "        ", "super", "(", "ResNetBackbone", ",", "self", ")", ".", "__init__", "(", "backbone", ")", "\n", "self", ".", "custom_objects", ".", "update", "(", "keras_resnet", ".", "custom_objects", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.ResNetBackbone.retinanet": [[34, 38], ["resnet.resnet_retinanet"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.resnet_retinanet"], ["", "def", "retinanet", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Returns a retinanet model using the correct backbone.\n        \"\"\"", "\n", "return", "resnet_retinanet", "(", "*", "args", ",", "backbone", "=", "self", ".", "backbone", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.ResNetBackbone.download_imagenet": [[39, 60], ["int", "resnet_filename.format", "resnet_resource.format", "keras.utils.get_file", "resnet.ResNetBackbone.backbone.replace"], "methods", ["None"], ["", "def", "download_imagenet", "(", "self", ")", ":", "\n", "        ", "\"\"\" Downloads ImageNet weights and returns path to weights file.\n        \"\"\"", "\n", "resnet_filename", "=", "'ResNet-{}-model.keras.h5'", "\n", "resnet_resource", "=", "'https://github.com/fizyr/keras-models/releases/download/v0.0.1/{}'", ".", "format", "(", "resnet_filename", ")", "\n", "depth", "=", "int", "(", "self", ".", "backbone", ".", "replace", "(", "'resnet'", ",", "''", ")", ")", "\n", "\n", "filename", "=", "resnet_filename", ".", "format", "(", "depth", ")", "\n", "resource", "=", "resnet_resource", ".", "format", "(", "depth", ")", "\n", "if", "depth", "==", "50", ":", "\n", "            ", "checksum", "=", "'3e9f4e4f77bbe2c9bec13b53ee1c2319'", "\n", "", "elif", "depth", "==", "101", ":", "\n", "            ", "checksum", "=", "'05dc86924389e5b401a9ea0348a3213c'", "\n", "", "elif", "depth", "==", "152", ":", "\n", "            ", "checksum", "=", "'6ee11ef2b135592f8031058820bb9e71'", "\n", "\n", "", "return", "get_file", "(", "\n", "filename", ",", "\n", "resource", ",", "\n", "cache_subdir", "=", "'models'", ",", "\n", "md5_hash", "=", "checksum", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.ResNetBackbone.validate": [[62, 70], ["resnet.ResNetBackbone.backbone.split", "ValueError"], "methods", ["None"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "\"\"\" Checks whether the backbone string is correct.\n        \"\"\"", "\n", "allowed_backbones", "=", "[", "'resnet50'", ",", "'resnet101'", ",", "'resnet152'", "]", "\n", "backbone", "=", "self", ".", "backbone", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "\n", "if", "backbone", "not", "in", "allowed_backbones", ":", "\n", "            ", "raise", "ValueError", "(", "'Backbone (\\'{}\\') not in allowed backbones ({}).'", ".", "format", "(", "backbone", ",", "allowed_backbones", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.resnet_retinanet": [[72, 104], ["retinanet.retinanet", "keras.layers.Input", "keras_resnet.models.ResNet50", "keras_resnet.models.ResNet50", "modifier", "keras_resnet.models.ResNet101", "keras_resnet.models.ResNet101", "keras_resnet.models.ResNet152", "keras_resnet.models.ResNet152", "ValueError"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.retinanet"], ["", "", "", "def", "resnet_retinanet", "(", "num_classes", ",", "backbone", "=", "'resnet50'", ",", "inputs", "=", "None", ",", "modifier", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Constructs a retinanet model using a resnet backbone.\n\n    Args\n        num_classes: Number of classes to predict.\n        backbone: Which backbone to use (one of ('resnet50', 'resnet101', 'resnet152')).\n        inputs: The inputs to the network (defaults to a Tensor of shape (None, None, 3)).\n        modifier: A function handler which can modify the backbone before using it in retinanet (this can be used to freeze backbone layers for example).\n\n    Returns\n        RetinaNet model with a ResNet backbone.\n    \"\"\"", "\n", "# choose default input", "\n", "if", "inputs", "is", "None", ":", "\n", "        ", "inputs", "=", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "None", ",", "None", ",", "3", ")", ")", "\n", "\n", "# create the resnet backbone", "\n", "", "if", "backbone", "==", "'resnet50'", ":", "\n", "        ", "resnet", "=", "keras_resnet", ".", "models", ".", "ResNet50", "(", "inputs", ",", "include_top", "=", "False", ",", "freeze_bn", "=", "True", ")", "\n", "", "elif", "backbone", "==", "'resnet101'", ":", "\n", "        ", "resnet", "=", "keras_resnet", ".", "models", ".", "ResNet101", "(", "inputs", ",", "include_top", "=", "False", ",", "freeze_bn", "=", "True", ")", "\n", "", "elif", "backbone", "==", "'resnet152'", ":", "\n", "        ", "resnet", "=", "keras_resnet", ".", "models", ".", "ResNet152", "(", "inputs", ",", "include_top", "=", "False", ",", "freeze_bn", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Backbone (\\'{}\\') is invalid.'", ".", "format", "(", "backbone", ")", ")", "\n", "\n", "# invoke modifier if given", "\n", "", "if", "modifier", ":", "\n", "        ", "resnet", "=", "modifier", "(", "resnet", ")", "\n", "\n", "# create the full model", "\n", "", "return", "retinanet", ".", "retinanet", "(", "inputs", "=", "inputs", ",", "num_classes", "=", "num_classes", ",", "backbone_layers", "=", "resnet", ".", "outputs", "[", "1", ":", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.resnet50_retinanet": [[106, 108], ["resnet.resnet_retinanet"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.resnet_retinanet"], ["", "def", "resnet50_retinanet", "(", "num_classes", ",", "inputs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "resnet_retinanet", "(", "num_classes", "=", "num_classes", ",", "backbone", "=", "'resnet50'", ",", "inputs", "=", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.resnet101_retinanet": [[110, 112], ["resnet.resnet_retinanet"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.resnet_retinanet"], ["", "def", "resnet101_retinanet", "(", "num_classes", ",", "inputs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "resnet_retinanet", "(", "num_classes", "=", "num_classes", ",", "backbone", "=", "'resnet101'", ",", "inputs", "=", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.resnet152_retinanet": [[114, 116], ["resnet.resnet_retinanet"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.resnet.resnet_retinanet"], ["", "def", "resnet152_retinanet", "(", "num_classes", ",", "inputs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "resnet_retinanet", "(", "num_classes", "=", "num_classes", ",", "backbone", "=", "'resnet152'", ",", "inputs", "=", "inputs", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.densenet.DenseNetBackbone.retinanet": [[30, 34], ["densenet.densenet_retinanet"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.densenet.densenet_retinanet"], ["def", "retinanet", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Returns a retinanet model using the correct backbone.\n        \"\"\"", "\n", "return", "densenet_retinanet", "(", "*", "args", ",", "backbone", "=", "self", ".", "backbone", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.densenet.DenseNetBackbone.download_imagenet": [[35, 51], ["keras.applications.densenet.get_file", "keras.backend.image_data_format", "ValueError", "file_name.format", "file_name.format"], "methods", ["None"], ["", "def", "download_imagenet", "(", "self", ")", ":", "\n", "        ", "\"\"\" Download pre-trained weights for the specified backbone name.\n        This name is in the format {backbone}_weights_tf_dim_ordering_tf_kernels_notop\n        where backbone is the densenet + number of layers (e.g. densenet121).\n        For more info check the explanation from the keras densenet script itself:\n            https://github.com/keras-team/keras/blob/master/keras/applications/densenet.py\n        \"\"\"", "\n", "origin", "=", "'https://github.com/fchollet/deep-learning-models/releases/download/v0.8/'", "\n", "file_name", "=", "'{}_weights_tf_dim_ordering_tf_kernels_notop.h5'", "\n", "\n", "# load weights", "\n", "if", "keras", ".", "backend", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "            ", "raise", "ValueError", "(", "'Weights for \"channels_first\" format are not available.'", ")", "\n", "\n", "", "weights_url", "=", "origin", "+", "file_name", ".", "format", "(", "self", ".", "backbone", ")", "\n", "return", "get_file", "(", "file_name", ".", "format", "(", "self", ".", "backbone", ")", ",", "weights_url", ",", "cache_subdir", "=", "'models'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.densenet.DenseNetBackbone.validate": [[52, 59], ["densenet.DenseNetBackbone.backbone.split", "ValueError", "allowed_backbones.keys"], "methods", ["None"], ["", "def", "validate", "(", "self", ")", ":", "\n", "        ", "\"\"\" Checks whether the backbone string is correct.\n        \"\"\"", "\n", "backbone", "=", "self", ".", "backbone", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "\n", "if", "backbone", "not", "in", "allowed_backbones", ":", "\n", "            ", "raise", "ValueError", "(", "'Backbone (\\'{}\\') not in allowed backbones ({}).'", ".", "format", "(", "backbone", ",", "allowed_backbones", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.densenet.densenet_retinanet": [[61, 94], ["keras.applications.densenet.DenseNet", "keras.models.Model", "retinanet.retinanet", "keras.layers.Input", "modifier", "modifier.get_layer", "enumerate"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.retinanet"], ["", "", "", "def", "densenet_retinanet", "(", "num_classes", ",", "backbone", "=", "'densenet121'", ",", "inputs", "=", "None", ",", "modifier", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Constructs a retinanet model using a densenet backbone.\n\n    Args\n        num_classes: Number of classes to predict.\n        backbone: Which backbone to use (one of ('densenet121', 'densenet169', 'densenet201')).\n        inputs: The inputs to the network (defaults to a Tensor of shape (None, None, 3)).\n        modifier: A function handler which can modify the backbone before using it in retinanet (this can be used to freeze backbone layers for example).\n\n    Returns\n        RetinaNet model with a DenseNet backbone.\n    \"\"\"", "\n", "# choose default input", "\n", "if", "inputs", "is", "None", ":", "\n", "        ", "inputs", "=", "keras", ".", "layers", ".", "Input", "(", "(", "None", ",", "None", ",", "3", ")", ")", "\n", "\n", "", "blocks", "=", "allowed_backbones", "[", "backbone", "]", "\n", "densenet", "=", "DenseNet", "(", "blocks", "=", "blocks", ",", "input_tensor", "=", "inputs", ",", "include_top", "=", "False", ",", "pooling", "=", "None", ",", "weights", "=", "None", ")", "\n", "\n", "# get last conv layer from the end of each dense block", "\n", "layer_outputs", "=", "[", "densenet", ".", "get_layer", "(", "name", "=", "'conv{}_block{}_concat'", ".", "format", "(", "idx", "+", "2", ",", "block_num", ")", ")", ".", "output", "for", "idx", ",", "block_num", "in", "enumerate", "(", "blocks", ")", "]", "\n", "\n", "# create the densenet backbone", "\n", "densenet", "=", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "layer_outputs", "[", "1", ":", "]", ",", "name", "=", "densenet", ".", "name", ")", "\n", "\n", "# invoke modifier if given", "\n", "if", "modifier", ":", "\n", "        ", "densenet", "=", "modifier", "(", "densenet", ")", "\n", "\n", "# create the full model", "\n", "", "model", "=", "retinanet", ".", "retinanet", "(", "inputs", "=", "inputs", ",", "num_classes", "=", "num_classes", ",", "backbone_layers", "=", "densenet", ".", "outputs", ",", "**", "kwargs", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.__init__": [[4, 22], ["__init__.Backbone.validate", "losses.smooth_l1", "losses.focal"], "methods", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.validate", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.smooth_l1", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.keras_retinanet.losses.focal"], []], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.retinanet": [[23, 27], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.download_imagenet": [[28, 32], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.Backbone.validate": [[33, 37], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.backbone": [[39, 54], ["b", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.load_model": [[56, 82], ["keras.models.load_model", "retinanet_bbox", "__init__.backbone"], "function", ["home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.load_model", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.retinanet.retinanet_bbox", "home.repos.pwc.inspect_result.eg4000_SKU110K_CVPR19.models.__init__.backbone"], []]}