{"home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.models.reactive_net.__init__": [[17, 61], ["torch.Module.__init__", "torchvision.models.densenet.densenet121", "torchvision.models.densenet.densenet121", "torchvision.models.densenet.densenet121", "torchvision.models.densenet.densenet121", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.reactive_net.named_modules", "collections.OrderedDict", "collections.OrderedDict", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "m[].weight.data.fill_", "m[].bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.real.camera.Camera.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_cuda", ")", ":", "# , snapshot=None", "\n", "        ", "super", "(", "reactive_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n", "# Initialize network trunks with DenseNet pre-trained on ImageNet", "\n", "self", ".", "push_color_trunk", "=", "torchvision", ".", "models", ".", "densenet", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "push_depth_trunk", "=", "torchvision", ".", "models", ".", "densenet", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "grasp_color_trunk", "=", "torchvision", ".", "models", ".", "densenet", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "grasp_depth_trunk", "=", "torchvision", ".", "models", ".", "densenet", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "\n", "self", ".", "num_rotations", "=", "16", "\n", "\n", "# Construct network branches for pushing and grasping", "\n", "self", ".", "pushnet", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'push-norm0'", ",", "nn", ".", "BatchNorm2d", "(", "2048", ")", ")", ",", "\n", "(", "'push-relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'push-conv0'", ",", "nn", ".", "Conv2d", "(", "2048", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'push-norm1'", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ")", ",", "\n", "(", "'push-relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'push-conv1'", ",", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "# ('push-upsample2', nn.Upsample(scale_factor=4, mode='bilinear'))", "\n", "]", ")", ")", "\n", "self", ".", "graspnet", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'grasp-norm0'", ",", "nn", ".", "BatchNorm2d", "(", "2048", ")", ")", ",", "\n", "(", "'grasp-relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'grasp-conv0'", ",", "nn", ".", "Conv2d", "(", "2048", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'grasp-norm1'", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ")", ",", "\n", "(", "'grasp-relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'grasp-conv1'", ",", "nn", ".", "Conv2d", "(", "64", ",", "3", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "# ('grasp-upsample2', nn.Upsample(scale_factor=4, mode='bilinear'))", "\n", "]", ")", ")", "\n", "\n", "# Initialize network weights", "\n", "for", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'push-'", "in", "m", "[", "0", "]", "or", "'grasp-'", "in", "m", "[", "0", "]", ":", "\n", "                ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal", "(", "m", "[", "1", "]", ".", "weight", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", "[", "1", "]", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", "[", "1", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# Initialize output variable (for backprop)", "\n", "", "", "", "self", ".", "interm_feat", "=", "[", "]", "\n", "self", ".", "output_prob", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.models.reactive_net.forward": [[63, 163], ["range", "numpy.radians", "numpy.asarray", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "models.reactive_net.push_color_trunk.features", "models.reactive_net.push_depth_trunk.features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.reactive_net.grasp_color_trunk.features", "models.reactive_net.grasp_depth_trunk.features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.reactive_net.interm_feat.append", "numpy.asarray", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "models.reactive_net.output_prob.append", "numpy.radians", "numpy.asarray", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "models.reactive_net.push_color_trunk.features", "models.reactive_net.push_depth_trunk.features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.reactive_net.grasp_color_trunk.features", "models.reactive_net.grasp_depth_trunk.features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "interm_feat.append", "numpy.asarray", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "output_prob.append", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "input_color_data.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input_color_data.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cat.data.size", "torch.cat.data.size", "torch.cat.data.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.data.size", "torch.cat.data.size", "torch.cat.data.size", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "input_color_data.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input_color_data.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cat.data.size", "torch.cat.data.size", "torch.cat.data.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.data.size", "torch.cat.data.size", "torch.cat.data.size", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "numpy.sin", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.sin", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.reactive_net.pushnet", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.reactive_net.graspnet", "numpy.sin", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.sin", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.reactive_net.pushnet", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.reactive_net.graspnet"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward"], ["", "def", "forward", "(", "self", ",", "input_color_data", ",", "input_depth_data", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "-", "1", ")", ":", "\n", "\n", "        ", "if", "is_volatile", ":", "\n", "            ", "output_prob", "=", "[", "]", "\n", "interm_feat", "=", "[", "]", "\n", "\n", "# Apply rotations to images", "\n", "for", "rotate_idx", "in", "range", "(", "self", ".", "num_rotations", ")", ":", "\n", "                ", "rotate_theta", "=", "np", ".", "radians", "(", "rotate_idx", "*", "(", "360", "/", "self", ".", "num_rotations", ")", ")", "\n", "\n", "# Compute sample grid for rotation BEFORE neural network", "\n", "affine_mat_before", "=", "np", ".", "asarray", "(", "[", "[", "np", ".", "cos", "(", "-", "rotate_theta", ")", ",", "np", ".", "sin", "(", "-", "rotate_theta", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "-", "rotate_theta", ")", ",", "np", ".", "cos", "(", "-", "rotate_theta", ")", ",", "0", "]", "]", ")", "\n", "affine_mat_before", ".", "shape", "=", "(", "2", ",", "3", ",", "1", ")", "\n", "affine_mat_before", "=", "torch", ".", "from_numpy", "(", "affine_mat_before", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "flow_grid_before", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_before", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "input_color_data", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flow_grid_before", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_before", ",", "requires_grad", "=", "False", ")", ",", "input_color_data", ".", "size", "(", ")", ")", "\n", "\n", "# Rotate images clockwise", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "rotate_color", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_color_data", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "rotate_depth", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_depth_data", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                    ", "rotate_color", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_color_data", ",", "volatile", "=", "True", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "rotate_depth", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_depth_data", ",", "volatile", "=", "True", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# Compute intermediate features", "\n", "", "interm_push_color_feat", "=", "self", ".", "push_color_trunk", ".", "features", "(", "rotate_color", ")", "\n", "interm_push_depth_feat", "=", "self", ".", "push_depth_trunk", ".", "features", "(", "rotate_depth", ")", "\n", "interm_push_feat", "=", "torch", ".", "cat", "(", "(", "interm_push_color_feat", ",", "interm_push_depth_feat", ")", ",", "dim", "=", "1", ")", "\n", "interm_grasp_color_feat", "=", "self", ".", "grasp_color_trunk", ".", "features", "(", "rotate_color", ")", "\n", "interm_grasp_depth_feat", "=", "self", ".", "grasp_depth_trunk", ".", "features", "(", "rotate_depth", ")", "\n", "interm_grasp_feat", "=", "torch", ".", "cat", "(", "(", "interm_grasp_color_feat", ",", "interm_grasp_depth_feat", ")", ",", "dim", "=", "1", ")", "\n", "interm_feat", ".", "append", "(", "[", "interm_push_feat", ",", "interm_grasp_feat", "]", ")", "\n", "\n", "# Compute sample grid for rotation AFTER branches", "\n", "affine_mat_after", "=", "np", ".", "asarray", "(", "[", "[", "np", ".", "cos", "(", "rotate_theta", ")", ",", "np", ".", "sin", "(", "rotate_theta", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "rotate_theta", ")", ",", "np", ".", "cos", "(", "rotate_theta", ")", ",", "0", "]", "]", ")", "\n", "affine_mat_after", ".", "shape", "=", "(", "2", ",", "3", ",", "1", ")", "\n", "affine_mat_after", "=", "torch", ".", "from_numpy", "(", "affine_mat_after", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "flow_grid_after", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_after", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "interm_push_feat", ".", "data", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "flow_grid_after", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_after", ",", "requires_grad", "=", "False", ")", ",", "interm_push_feat", ".", "data", ".", "size", "(", ")", ")", "\n", "\n", "# Forward pass through branches, undo rotation on output predictions, upsample results", "\n", "", "output_prob", ".", "append", "(", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bilinear'", ")", ".", "forward", "(", "F", ".", "grid_sample", "(", "self", ".", "pushnet", "(", "interm_push_feat", ")", ",", "flow_grid_after", ",", "mode", "=", "'nearest'", ")", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bilinear'", ")", ".", "forward", "(", "F", ".", "grid_sample", "(", "self", ".", "graspnet", "(", "interm_grasp_feat", ")", ",", "flow_grid_after", ",", "mode", "=", "'nearest'", ")", ")", "]", ")", "\n", "\n", "", "return", "output_prob", ",", "interm_feat", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_prob", "=", "[", "]", "\n", "self", ".", "interm_feat", "=", "[", "]", "\n", "\n", "# Apply rotations to intermediate features", "\n", "# for rotate_idx in range(self.num_rotations):", "\n", "rotate_idx", "=", "specific_rotation", "\n", "rotate_theta", "=", "np", ".", "radians", "(", "rotate_idx", "*", "(", "360", "/", "self", ".", "num_rotations", ")", ")", "\n", "\n", "# Compute sample grid for rotation BEFORE branches", "\n", "affine_mat_before", "=", "np", ".", "asarray", "(", "[", "[", "np", ".", "cos", "(", "-", "rotate_theta", ")", ",", "np", ".", "sin", "(", "-", "rotate_theta", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "-", "rotate_theta", ")", ",", "np", ".", "cos", "(", "-", "rotate_theta", ")", ",", "0", "]", "]", ")", "\n", "affine_mat_before", ".", "shape", "=", "(", "2", ",", "3", ",", "1", ")", "\n", "affine_mat_before", "=", "torch", ".", "from_numpy", "(", "affine_mat_before", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "flow_grid_before", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_before", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "input_color_data", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "flow_grid_before", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_before", ",", "requires_grad", "=", "False", ")", ",", "input_color_data", ".", "size", "(", ")", ")", "\n", "\n", "# Rotate images clockwise", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "                ", "rotate_color", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_color_data", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "rotate_depth", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_depth_data", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "rotate_color", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_color_data", ",", "requires_grad", "=", "False", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "rotate_depth", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_depth_data", ",", "requires_grad", "=", "False", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# Compute intermediate features", "\n", "", "interm_push_color_feat", "=", "self", ".", "push_color_trunk", ".", "features", "(", "rotate_color", ")", "\n", "interm_push_depth_feat", "=", "self", ".", "push_depth_trunk", ".", "features", "(", "rotate_depth", ")", "\n", "interm_push_feat", "=", "torch", ".", "cat", "(", "(", "interm_push_color_feat", ",", "interm_push_depth_feat", ")", ",", "dim", "=", "1", ")", "\n", "interm_grasp_color_feat", "=", "self", ".", "grasp_color_trunk", ".", "features", "(", "rotate_color", ")", "\n", "interm_grasp_depth_feat", "=", "self", ".", "grasp_depth_trunk", ".", "features", "(", "rotate_depth", ")", "\n", "interm_grasp_feat", "=", "torch", ".", "cat", "(", "(", "interm_grasp_color_feat", ",", "interm_grasp_depth_feat", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "interm_feat", ".", "append", "(", "[", "interm_push_feat", ",", "interm_grasp_feat", "]", ")", "\n", "\n", "# Compute sample grid for rotation AFTER branches", "\n", "affine_mat_after", "=", "np", ".", "asarray", "(", "[", "[", "np", ".", "cos", "(", "rotate_theta", ")", ",", "np", ".", "sin", "(", "rotate_theta", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "rotate_theta", ")", ",", "np", ".", "cos", "(", "rotate_theta", ")", ",", "0", "]", "]", ")", "\n", "affine_mat_after", ".", "shape", "=", "(", "2", ",", "3", ",", "1", ")", "\n", "affine_mat_after", "=", "torch", ".", "from_numpy", "(", "affine_mat_after", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "flow_grid_after", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_after", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "interm_push_feat", ".", "data", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "flow_grid_after", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_after", ",", "requires_grad", "=", "False", ")", ",", "interm_push_feat", ".", "data", ".", "size", "(", ")", ")", "\n", "\n", "# Forward pass through branches, undo rotation on output predictions, upsample results", "\n", "", "self", ".", "output_prob", ".", "append", "(", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bilinear'", ")", ".", "forward", "(", "F", ".", "grid_sample", "(", "self", ".", "pushnet", "(", "interm_push_feat", ")", ",", "flow_grid_after", ",", "mode", "=", "'nearest'", ")", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bilinear'", ")", ".", "forward", "(", "F", ".", "grid_sample", "(", "self", ".", "graspnet", "(", "interm_grasp_feat", ")", ",", "flow_grid_after", ",", "mode", "=", "'nearest'", ")", ")", "]", ")", "\n", "\n", "return", "self", ".", "output_prob", ",", "self", ".", "interm_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.models.reinforcement_net.__init__": [[167, 211], ["torch.Module.__init__", "torchvision.models.densenet.densenet121", "torchvision.models.densenet.densenet121", "torchvision.models.densenet.densenet121", "torchvision.models.densenet.densenet121", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.reinforcement_net.named_modules", "collections.OrderedDict", "collections.OrderedDict", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "m[].weight.data.fill_", "m[].bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.real.camera.Camera.__init__"], ["    ", "def", "__init__", "(", "self", ",", "use_cuda", ")", ":", "# , snapshot=None", "\n", "        ", "super", "(", "reinforcement_net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n", "# Initialize network trunks with DenseNet pre-trained on ImageNet", "\n", "self", ".", "push_color_trunk", "=", "torchvision", ".", "models", ".", "densenet", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "push_depth_trunk", "=", "torchvision", ".", "models", ".", "densenet", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "grasp_color_trunk", "=", "torchvision", ".", "models", ".", "densenet", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "grasp_depth_trunk", "=", "torchvision", ".", "models", ".", "densenet", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "\n", "self", ".", "num_rotations", "=", "16", "\n", "\n", "# Construct network branches for pushing and grasping", "\n", "self", ".", "pushnet", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'push-norm0'", ",", "nn", ".", "BatchNorm2d", "(", "2048", ")", ")", ",", "\n", "(", "'push-relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'push-conv0'", ",", "nn", ".", "Conv2d", "(", "2048", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'push-norm1'", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ")", ",", "\n", "(", "'push-relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'push-conv1'", ",", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "# ('push-upsample2', nn.Upsample(scale_factor=4, mode='bilinear'))", "\n", "]", ")", ")", "\n", "self", ".", "graspnet", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'grasp-norm0'", ",", "nn", ".", "BatchNorm2d", "(", "2048", ")", ")", ",", "\n", "(", "'grasp-relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'grasp-conv0'", ",", "nn", ".", "Conv2d", "(", "2048", ",", "64", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'grasp-norm1'", ",", "nn", ".", "BatchNorm2d", "(", "64", ")", ")", ",", "\n", "(", "'grasp-relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'grasp-conv1'", ",", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "# ('grasp-upsample2', nn.Upsample(scale_factor=4, mode='bilinear'))", "\n", "]", ")", ")", "\n", "\n", "# Initialize network weights", "\n", "for", "m", "in", "self", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'push-'", "in", "m", "[", "0", "]", "or", "'grasp-'", "in", "m", "[", "0", "]", ":", "\n", "                ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal", "(", "m", "[", "1", "]", ".", "weight", ".", "data", ")", "\n", "", "elif", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                    ", "m", "[", "1", "]", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", "[", "1", "]", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# Initialize output variable (for backprop)", "\n", "", "", "", "self", ".", "interm_feat", "=", "[", "]", "\n", "self", ".", "output_prob", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.models.reinforcement_net.forward": [[213, 314], ["numpy.radians", "numpy.asarray", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "models.reinforcement_net.push_color_trunk.features", "models.reinforcement_net.push_depth_trunk.features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.reinforcement_net.grasp_color_trunk.features", "models.reinforcement_net.grasp_depth_trunk.features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.reinforcement_net.interm_feat.append", "numpy.asarray", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "models.reinforcement_net.output_prob.append", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "numpy.radians", "numpy.asarray", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "models.reinforcement_net.push_color_trunk.features", "models.reinforcement_net.push_depth_trunk.features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.reinforcement_net.grasp_color_trunk.features", "models.reinforcement_net.grasp_depth_trunk.features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "interm_feat.append", "numpy.asarray", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "output_prob.append", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "input_color_data.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input_color_data.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cat.data.size", "torch.cat.data.size", "torch.cat.data.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.data.size", "torch.cat.data.size", "torch.cat.data.size", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "input_color_data.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input_color_data.size", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.cat.data.size", "torch.cat.data.size", "torch.cat.data.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat.data.size", "torch.cat.data.size", "torch.cat.data.size", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "torch.Upsample().forward", "numpy.sin", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.sin", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.reinforcement_net.pushnet", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.reinforcement_net.graspnet", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "numpy.sin", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.sin", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.reinforcement_net.pushnet", "torch.Upsample", "torch.Upsample", "torch.Upsample", "models.reinforcement_net.graspnet"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward"], ["", "def", "forward", "(", "self", ",", "input_color_data", ",", "input_depth_data", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "-", "1", ")", ":", "\n", "\n", "        ", "if", "is_volatile", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output_prob", "=", "[", "]", "\n", "interm_feat", "=", "[", "]", "\n", "\n", "# Apply rotations to images", "\n", "for", "rotate_idx", "in", "range", "(", "self", ".", "num_rotations", ")", ":", "\n", "                    ", "rotate_theta", "=", "np", ".", "radians", "(", "rotate_idx", "*", "(", "360", "/", "self", ".", "num_rotations", ")", ")", "\n", "\n", "# Compute sample grid for rotation BEFORE neural network", "\n", "affine_mat_before", "=", "np", ".", "asarray", "(", "[", "[", "np", ".", "cos", "(", "-", "rotate_theta", ")", ",", "np", ".", "sin", "(", "-", "rotate_theta", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "-", "rotate_theta", ")", ",", "np", ".", "cos", "(", "-", "rotate_theta", ")", ",", "0", "]", "]", ")", "\n", "affine_mat_before", ".", "shape", "=", "(", "2", ",", "3", ",", "1", ")", "\n", "affine_mat_before", "=", "torch", ".", "from_numpy", "(", "affine_mat_before", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                        ", "flow_grid_before", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_before", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "input_color_data", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "flow_grid_before", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_before", ",", "requires_grad", "=", "False", ")", ",", "input_color_data", ".", "size", "(", ")", ")", "\n", "\n", "# Rotate images clockwise", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "                        ", "rotate_color", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_color_data", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "rotate_depth", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_depth_data", ",", "volatile", "=", "True", ")", ".", "cuda", "(", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                        ", "rotate_color", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_color_data", ",", "volatile", "=", "True", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "rotate_depth", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_depth_data", ",", "volatile", "=", "True", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# Compute intermediate features", "\n", "", "interm_push_color_feat", "=", "self", ".", "push_color_trunk", ".", "features", "(", "rotate_color", ")", "\n", "interm_push_depth_feat", "=", "self", ".", "push_depth_trunk", ".", "features", "(", "rotate_depth", ")", "\n", "interm_push_feat", "=", "torch", ".", "cat", "(", "(", "interm_push_color_feat", ",", "interm_push_depth_feat", ")", ",", "dim", "=", "1", ")", "\n", "interm_grasp_color_feat", "=", "self", ".", "grasp_color_trunk", ".", "features", "(", "rotate_color", ")", "\n", "interm_grasp_depth_feat", "=", "self", ".", "grasp_depth_trunk", ".", "features", "(", "rotate_depth", ")", "\n", "interm_grasp_feat", "=", "torch", ".", "cat", "(", "(", "interm_grasp_color_feat", ",", "interm_grasp_depth_feat", ")", ",", "dim", "=", "1", ")", "\n", "interm_feat", ".", "append", "(", "[", "interm_push_feat", ",", "interm_grasp_feat", "]", ")", "\n", "\n", "# Compute sample grid for rotation AFTER branches", "\n", "affine_mat_after", "=", "np", ".", "asarray", "(", "[", "[", "np", ".", "cos", "(", "rotate_theta", ")", ",", "np", ".", "sin", "(", "rotate_theta", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "rotate_theta", ")", ",", "np", ".", "cos", "(", "rotate_theta", ")", ",", "0", "]", "]", ")", "\n", "affine_mat_after", ".", "shape", "=", "(", "2", ",", "3", ",", "1", ")", "\n", "affine_mat_after", "=", "torch", ".", "from_numpy", "(", "affine_mat_after", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                        ", "flow_grid_after", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_after", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "interm_push_feat", ".", "data", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                        ", "flow_grid_after", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_after", ",", "requires_grad", "=", "False", ")", ",", "interm_push_feat", ".", "data", ".", "size", "(", ")", ")", "\n", "\n", "# Forward pass through branches, undo rotation on output predictions, upsample results", "\n", "", "output_prob", ".", "append", "(", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bilinear'", ")", ".", "forward", "(", "F", ".", "grid_sample", "(", "self", ".", "pushnet", "(", "interm_push_feat", ")", ",", "flow_grid_after", ",", "mode", "=", "'nearest'", ")", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bilinear'", ")", ".", "forward", "(", "F", ".", "grid_sample", "(", "self", ".", "graspnet", "(", "interm_grasp_feat", ")", ",", "flow_grid_after", ",", "mode", "=", "'nearest'", ")", ")", "]", ")", "\n", "\n", "", "", "return", "output_prob", ",", "interm_feat", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_prob", "=", "[", "]", "\n", "self", ".", "interm_feat", "=", "[", "]", "\n", "\n", "# Apply rotations to intermediate features", "\n", "# for rotate_idx in range(self.num_rotations):", "\n", "rotate_idx", "=", "specific_rotation", "\n", "rotate_theta", "=", "np", ".", "radians", "(", "rotate_idx", "*", "(", "360", "/", "self", ".", "num_rotations", ")", ")", "\n", "\n", "# Compute sample grid for rotation BEFORE branches", "\n", "affine_mat_before", "=", "np", ".", "asarray", "(", "[", "[", "np", ".", "cos", "(", "-", "rotate_theta", ")", ",", "np", ".", "sin", "(", "-", "rotate_theta", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "-", "rotate_theta", ")", ",", "np", ".", "cos", "(", "-", "rotate_theta", ")", ",", "0", "]", "]", ")", "\n", "affine_mat_before", ".", "shape", "=", "(", "2", ",", "3", ",", "1", ")", "\n", "affine_mat_before", "=", "torch", ".", "from_numpy", "(", "affine_mat_before", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "flow_grid_before", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_before", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "input_color_data", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "flow_grid_before", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_before", ",", "requires_grad", "=", "False", ")", ",", "input_color_data", ".", "size", "(", ")", ")", "\n", "\n", "# Rotate images clockwise", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "                ", "rotate_color", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_color_data", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "rotate_depth", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_depth_data", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "", "else", ":", "\n", "                ", "rotate_color", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_color_data", ",", "requires_grad", "=", "False", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "rotate_depth", "=", "F", ".", "grid_sample", "(", "Variable", "(", "input_depth_data", ",", "requires_grad", "=", "False", ")", ",", "flow_grid_before", ",", "mode", "=", "'nearest'", ")", "\n", "\n", "# Compute intermediate features", "\n", "", "interm_push_color_feat", "=", "self", ".", "push_color_trunk", ".", "features", "(", "rotate_color", ")", "\n", "interm_push_depth_feat", "=", "self", ".", "push_depth_trunk", ".", "features", "(", "rotate_depth", ")", "\n", "interm_push_feat", "=", "torch", ".", "cat", "(", "(", "interm_push_color_feat", ",", "interm_push_depth_feat", ")", ",", "dim", "=", "1", ")", "\n", "interm_grasp_color_feat", "=", "self", ".", "grasp_color_trunk", ".", "features", "(", "rotate_color", ")", "\n", "interm_grasp_depth_feat", "=", "self", ".", "grasp_depth_trunk", ".", "features", "(", "rotate_depth", ")", "\n", "interm_grasp_feat", "=", "torch", ".", "cat", "(", "(", "interm_grasp_color_feat", ",", "interm_grasp_depth_feat", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "interm_feat", ".", "append", "(", "[", "interm_push_feat", ",", "interm_grasp_feat", "]", ")", "\n", "\n", "# Compute sample grid for rotation AFTER branches", "\n", "affine_mat_after", "=", "np", ".", "asarray", "(", "[", "[", "np", ".", "cos", "(", "rotate_theta", ")", ",", "np", ".", "sin", "(", "rotate_theta", ")", ",", "0", "]", ",", "[", "-", "np", ".", "sin", "(", "rotate_theta", ")", ",", "np", ".", "cos", "(", "rotate_theta", ")", ",", "0", "]", "]", ")", "\n", "affine_mat_after", ".", "shape", "=", "(", "2", ",", "3", ",", "1", ")", "\n", "affine_mat_after", "=", "torch", ".", "from_numpy", "(", "affine_mat_after", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "flow_grid_after", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_after", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", ",", "interm_push_feat", ".", "data", ".", "size", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "flow_grid_after", "=", "F", ".", "affine_grid", "(", "Variable", "(", "affine_mat_after", ",", "requires_grad", "=", "False", ")", ",", "interm_push_feat", ".", "data", ".", "size", "(", ")", ")", "\n", "\n", "# Forward pass through branches, undo rotation on output predictions, upsample results", "\n", "", "self", ".", "output_prob", ".", "append", "(", "[", "nn", ".", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bilinear'", ")", ".", "forward", "(", "F", ".", "grid_sample", "(", "self", ".", "pushnet", "(", "interm_push_feat", ")", ",", "flow_grid_after", ",", "mode", "=", "'nearest'", ")", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "16", ",", "mode", "=", "'bilinear'", ")", ".", "forward", "(", "F", ".", "grid_sample", "(", "self", ".", "graspnet", "(", "interm_grasp_feat", ")", ",", "flow_grid_after", ",", "mode", "=", "'nearest'", ")", ")", "]", ")", "\n", "\n", "return", "self", ".", "output_prob", ",", "self", ".", "interm_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.touch.mouseclick_callback": [[35, 57], ["numpy.multiply", "numpy.multiply", "numpy.asarray", "print", "robot.move_to", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_to"], ["def", "mouseclick_callback", "(", "event", ",", "x", ",", "y", ",", "flags", ",", "param", ")", ":", "\n", "    ", "if", "event", "==", "cv2", ".", "EVENT_LBUTTONDOWN", ":", "\n", "        ", "global", "camera", ",", "robot", ",", "click_point_pix", "\n", "click_point_pix", "=", "(", "x", ",", "y", ")", "\n", "\n", "# Get click point in camera coordinates", "\n", "click_z", "=", "camera_depth_img", "[", "y", "]", "[", "x", "]", "*", "robot", ".", "cam_depth_scale", "\n", "click_x", "=", "np", ".", "multiply", "(", "x", "-", "robot", ".", "cam_intrinsics", "[", "0", "]", "[", "2", "]", ",", "click_z", "/", "robot", ".", "cam_intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "click_y", "=", "np", ".", "multiply", "(", "y", "-", "robot", ".", "cam_intrinsics", "[", "1", "]", "[", "2", "]", ",", "click_z", "/", "robot", ".", "cam_intrinsics", "[", "1", "]", "[", "1", "]", ")", "\n", "if", "click_z", "==", "0", ":", "\n", "            ", "return", "\n", "", "click_point", "=", "np", ".", "asarray", "(", "[", "click_x", ",", "click_y", ",", "click_z", "]", ")", "\n", "click_point", ".", "shape", "=", "(", "3", ",", "1", ")", "\n", "\n", "# Convert camera to robot coordinates", "\n", "# camera2robot = np.linalg.inv(robot.cam_pose)", "\n", "camera2robot", "=", "robot", ".", "cam_pose", "\n", "target_position", "=", "np", ".", "dot", "(", "camera2robot", "[", "0", ":", "3", ",", "0", ":", "3", "]", ",", "click_point", ")", "+", "camera2robot", "[", "0", ":", "3", ",", "3", ":", "]", "\n", "\n", "target_position", "=", "target_position", "[", "0", ":", "3", ",", "0", "]", "\n", "print", "(", "target_position", ")", "\n", "robot", ".", "move_to", "(", "target_position", ",", "tool_orientation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.main.main": [[21, 407], ["numpy.random.seed", "robot.Robot", "trainer.Trainer", "logger.Logger", "logger.Logger.save_camera_info", "logger.Logger.save_heightmap_info", "threading.Thread", "threading.Thread.start", "os.path.abspath", "numpy.asarray", "numpy.asarray", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.abspath", "trainer.Trainer.preload", "print", "time.time", "robot.Robot.get_camera_data", "utils.get_heightmap", "depth_heightmap.copy", "logger.Logger.save_images", "logger.Logger.save_heightmaps", "numpy.zeros", "color_img.copy", "depth_img.copy", "color_heightmap.copy", "depth_heightmap.copy", "depth_heightmap.copy.copy", "push_predictions.copy", "grasp_predictions.copy", "time.time", "print", "time.sleep", "robot.Robot.check_sim", "trainer.Trainer.clearance_log.append", "logger.Logger.write_to_log", "trainer.Trainer.forward", "locals", "abs", "numpy.sum", "print", "trainer.Trainer.get_label_value", "trainer.Trainer.label_value_log.append", "logger.Logger.write_to_log", "trainer.Trainer.reward_value_log.append", "logger.Logger.write_to_log", "trainer.Trainer.backprop", "time.sleep", "numpy.max", "numpy.max", "print", "trainer.Trainer.is_exploit_log.append", "logger.Logger.write_to_log", "trainer.Trainer.use_heuristic_log.append", "logger.Logger.write_to_log", "trainer.Trainer.predicted_value_log.append", "logger.Logger.write_to_log", "print", "numpy.deg2rad", "logger.Logger.write_to_log", "numpy.isnan", "numpy.sum", "print", "robot.Robot.restart_sim", "robot.Robot.add_objects", "print", "robot.Robot.restart_real", "numpy.argwhere", "logger.Logger.save_backup_model", "print", "trainer.Trainer.push_heuristic", "int", "trainer.Trainer.executed_action_log.append", "trainer.Trainer.get_prediction_vis", "logger.Logger.save_visualizations", "cv2.imwrite", "trainer.Trainer.get_prediction_vis", "logger.Logger.save_visualizations", "cv2.imwrite", "robot.Robot.push", "print", "trainer.Trainer.model.load_state_dict", "len", "numpy.isnan", "max", "numpy.logical_and", "numpy.argsort", "int", "print", "cv2.imread", "cv2.cvtColor", "cv2.imread", "cv2.imread", "cv2.cvtColor", "cv2.imread", "[].astype", "trainer.Trainer.backprop", "print", "logger.Logger.save_model", "numpy.random.uniform", "print", "print", "print", "trainer.Trainer.grasp_heuristic", "numpy.round", "trainer.Trainer.executed_action_log.append", "robot.Robot.grasp", "print", "numpy.sum", "torch.load", "numpy.sum", "numpy.abs", "numpy.round", "os.path.join", "os.path.join", "cv2.imread.astype", "torch.no_grad", "trainer.Trainer.forward", "os.path.join", "os.path.join", "cv2.imread.astype", "trainer.Trainer.model.cuda", "numpy.unravel_index", "numpy.max", "numpy.max", "numpy.power", "numpy.abs", "numpy.max", "numpy.random.randint", "numpy.argmax", "numpy.unravel_index", "numpy.max", "max", "min", "max", "min", "numpy.asarray", "numpy.asarray", "numpy.random.power", "numpy.asarray", "numpy.max", "numpy.argmax", "numpy.asarray", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_camera_info", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_heightmap_info", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.preload", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_camera_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.get_heightmap", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_images", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_heightmaps", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.check_sim", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.write_to_log", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.get_label_value", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.write_to_log", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.write_to_log", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.backprop", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.write_to_log", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.write_to_log", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.write_to_log", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.write_to_log", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.restart_sim", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.add_objects", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.restart_real", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_backup_model", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.push_heuristic", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.get_prediction_vis", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_visualizations", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.get_prediction_vis", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_visualizations", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.push", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.backprop", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_model", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.grasp_heuristic", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.grasp", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "\n", "# --------------- Setup options ---------------", "\n", "    ", "is_sim", "=", "args", ".", "is_sim", "# Run in simulation?", "\n", "obj_mesh_dir", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "obj_mesh_dir", ")", "if", "is_sim", "else", "None", "# Directory containing 3D mesh files (.obj) of objects to be added to simulation", "\n", "num_obj", "=", "args", ".", "num_obj", "if", "is_sim", "else", "None", "# Number of objects to add to simulation", "\n", "tcp_host_ip", "=", "args", ".", "tcp_host_ip", "if", "not", "is_sim", "else", "None", "# IP and port to robot arm as TCP client (UR5)", "\n", "tcp_port", "=", "args", ".", "tcp_port", "if", "not", "is_sim", "else", "None", "\n", "rtc_host_ip", "=", "args", ".", "rtc_host_ip", "if", "not", "is_sim", "else", "None", "# IP and port to robot arm as real-time client (UR5)", "\n", "rtc_port", "=", "args", ".", "rtc_port", "if", "not", "is_sim", "else", "None", "\n", "if", "is_sim", ":", "\n", "        ", "workspace_limits", "=", "np", ".", "asarray", "(", "[", "[", "-", "0.724", ",", "-", "0.276", "]", ",", "[", "-", "0.224", ",", "0.224", "]", ",", "[", "-", "0.0001", ",", "0.4", "]", "]", ")", "# Cols: min max, Rows: x y z (define workspace limits in robot coordinates)", "\n", "", "else", ":", "\n", "        ", "workspace_limits", "=", "np", ".", "asarray", "(", "[", "[", "0.3", ",", "0.748", "]", ",", "[", "-", "0.224", ",", "0.224", "]", ",", "[", "-", "0.255", ",", "-", "0.1", "]", "]", ")", "# Cols: min max, Rows: x y z (define workspace limits in robot coordinates)", "\n", "", "heightmap_resolution", "=", "args", ".", "heightmap_resolution", "# Meters per pixel of heightmap", "\n", "random_seed", "=", "args", ".", "random_seed", "\n", "force_cpu", "=", "args", ".", "force_cpu", "\n", "\n", "# ------------- Algorithm options -------------", "\n", "method", "=", "args", ".", "method", "# 'reactive' (supervised learning) or 'reinforcement' (reinforcement learning ie Q-learning)", "\n", "push_rewards", "=", "args", ".", "push_rewards", "if", "method", "==", "'reinforcement'", "else", "None", "# Use immediate rewards (from change detection) for pushing?", "\n", "future_reward_discount", "=", "args", ".", "future_reward_discount", "\n", "experience_replay", "=", "args", ".", "experience_replay", "# Use prioritized experience replay?", "\n", "heuristic_bootstrap", "=", "args", ".", "heuristic_bootstrap", "# Use handcrafted grasping algorithm when grasping fails too many times in a row?", "\n", "explore_rate_decay", "=", "args", ".", "explore_rate_decay", "\n", "grasp_only", "=", "args", ".", "grasp_only", "\n", "\n", "# -------------- Testing options --------------", "\n", "is_testing", "=", "args", ".", "is_testing", "\n", "max_test_trials", "=", "args", ".", "max_test_trials", "# Maximum number of test runs per case/scenario", "\n", "test_preset_cases", "=", "args", ".", "test_preset_cases", "\n", "test_preset_file", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "test_preset_file", ")", "if", "test_preset_cases", "else", "None", "\n", "\n", "# ------ Pre-loading and logging options ------", "\n", "load_snapshot", "=", "args", ".", "load_snapshot", "# Load pre-trained snapshot of model?", "\n", "snapshot_file", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "snapshot_file", ")", "if", "load_snapshot", "else", "None", "\n", "continue_logging", "=", "args", ".", "continue_logging", "# Continue logging from previous session", "\n", "logging_directory", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "logging_directory", ")", "if", "continue_logging", "else", "os", ".", "path", ".", "abspath", "(", "'logs'", ")", "\n", "save_visualizations", "=", "args", ".", "save_visualizations", "# Save visualizations of FCN predictions? Takes 0.6s per training step if set to True", "\n", "\n", "\n", "# Set random seed", "\n", "np", ".", "random", ".", "seed", "(", "random_seed", ")", "\n", "\n", "# Initialize pick-and-place system (camera and robot)", "\n", "robot", "=", "Robot", "(", "is_sim", ",", "obj_mesh_dir", ",", "num_obj", ",", "workspace_limits", ",", "\n", "tcp_host_ip", ",", "tcp_port", ",", "rtc_host_ip", ",", "rtc_port", ",", "\n", "is_testing", ",", "test_preset_cases", ",", "test_preset_file", ")", "\n", "\n", "# Initialize trainer", "\n", "trainer", "=", "Trainer", "(", "method", ",", "push_rewards", ",", "future_reward_discount", ",", "\n", "is_testing", ",", "load_snapshot", ",", "snapshot_file", ",", "force_cpu", ")", "\n", "\n", "# Initialize data logger", "\n", "logger", "=", "Logger", "(", "continue_logging", ",", "logging_directory", ")", "\n", "logger", ".", "save_camera_info", "(", "robot", ".", "cam_intrinsics", ",", "robot", ".", "cam_pose", ",", "robot", ".", "cam_depth_scale", ")", "# Save camera intrinsics and pose", "\n", "logger", ".", "save_heightmap_info", "(", "workspace_limits", ",", "heightmap_resolution", ")", "# Save heightmap parameters", "\n", "\n", "# Find last executed iteration of pre-loaded log, and load execution info and RL variables", "\n", "if", "continue_logging", ":", "\n", "        ", "trainer", ".", "preload", "(", "logger", ".", "transitions_directory", ")", "\n", "\n", "# Initialize variables for heuristic bootstrapping and exploration probability", "\n", "", "no_change_count", "=", "[", "2", ",", "2", "]", "if", "not", "is_testing", "else", "[", "0", ",", "0", "]", "\n", "explore_prob", "=", "0.5", "if", "not", "is_testing", "else", "0.0", "\n", "\n", "# Quick hack for nonlocal memory between threads in Python 2", "\n", "nonlocal_variables", "=", "{", "'executing_action'", ":", "False", ",", "\n", "'primitive_action'", ":", "None", ",", "\n", "'best_pix_ind'", ":", "None", ",", "\n", "'push_success'", ":", "False", ",", "\n", "'grasp_success'", ":", "False", "}", "\n", "\n", "\n", "# Parallel thread to process network output and execute actions", "\n", "# -------------------------------------------------------------", "\n", "def", "process_actions", "(", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "if", "nonlocal_variables", "[", "'executing_action'", "]", ":", "\n", "\n", "# Determine whether grasping or pushing should be executed based on network predictions", "\n", "                ", "best_push_conf", "=", "np", ".", "max", "(", "push_predictions", ")", "\n", "best_grasp_conf", "=", "np", ".", "max", "(", "grasp_predictions", ")", "\n", "print", "(", "'Primitive confidence scores: %f (push), %f (grasp)'", "%", "(", "best_push_conf", ",", "best_grasp_conf", ")", ")", "\n", "nonlocal_variables", "[", "'primitive_action'", "]", "=", "'grasp'", "\n", "explore_actions", "=", "False", "\n", "if", "not", "grasp_only", ":", "\n", "                    ", "if", "is_testing", "and", "method", "==", "'reactive'", ":", "\n", "                        ", "if", "best_push_conf", ">", "2", "*", "best_grasp_conf", ":", "\n", "                            ", "nonlocal_variables", "[", "'primitive_action'", "]", "=", "'push'", "\n", "", "", "else", ":", "\n", "                        ", "if", "best_push_conf", ">", "best_grasp_conf", ":", "\n", "                            ", "nonlocal_variables", "[", "'primitive_action'", "]", "=", "'push'", "\n", "", "", "explore_actions", "=", "np", ".", "random", ".", "uniform", "(", ")", "<", "explore_prob", "\n", "if", "explore_actions", ":", "# Exploitation (do best action) vs exploration (do other action)", "\n", "                        ", "print", "(", "'Strategy: explore (exploration probability: %f)'", "%", "(", "explore_prob", ")", ")", "\n", "nonlocal_variables", "[", "'primitive_action'", "]", "=", "'push'", "if", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "==", "0", "else", "'grasp'", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'Strategy: exploit (exploration probability: %f)'", "%", "(", "explore_prob", ")", ")", "\n", "", "", "trainer", ".", "is_exploit_log", ".", "append", "(", "[", "0", "if", "explore_actions", "else", "1", "]", ")", "\n", "logger", ".", "write_to_log", "(", "'is-exploit'", ",", "trainer", ".", "is_exploit_log", ")", "\n", "\n", "# If heuristic bootstrapping is enabled: if change has not been detected more than 2 times, execute heuristic algorithm to detect grasps/pushes", "\n", "# NOTE: typically not necessary and can reduce final performance.", "\n", "if", "heuristic_bootstrap", "and", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'push'", "and", "no_change_count", "[", "0", "]", ">=", "2", ":", "\n", "                    ", "print", "(", "'Change not detected for more than two pushes. Running heuristic pushing.'", ")", "\n", "nonlocal_variables", "[", "'best_pix_ind'", "]", "=", "trainer", ".", "push_heuristic", "(", "valid_depth_heightmap", ")", "\n", "no_change_count", "[", "0", "]", "=", "0", "\n", "predicted_value", "=", "push_predictions", "[", "nonlocal_variables", "[", "'best_pix_ind'", "]", "]", "\n", "use_heuristic", "=", "True", "\n", "", "elif", "heuristic_bootstrap", "and", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'grasp'", "and", "no_change_count", "[", "1", "]", ">=", "2", ":", "\n", "                    ", "print", "(", "'Change not detected for more than two grasps. Running heuristic grasping.'", ")", "\n", "nonlocal_variables", "[", "'best_pix_ind'", "]", "=", "trainer", ".", "grasp_heuristic", "(", "valid_depth_heightmap", ")", "\n", "no_change_count", "[", "1", "]", "=", "0", "\n", "predicted_value", "=", "grasp_predictions", "[", "nonlocal_variables", "[", "'best_pix_ind'", "]", "]", "\n", "use_heuristic", "=", "True", "\n", "", "else", ":", "\n", "                    ", "use_heuristic", "=", "False", "\n", "\n", "# Get pixel location and rotation with highest affordance prediction from heuristic algorithms (rotation, y, x)", "\n", "if", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'push'", ":", "\n", "                        ", "nonlocal_variables", "[", "'best_pix_ind'", "]", "=", "np", ".", "unravel_index", "(", "np", ".", "argmax", "(", "push_predictions", ")", ",", "push_predictions", ".", "shape", ")", "\n", "predicted_value", "=", "np", ".", "max", "(", "push_predictions", ")", "\n", "", "elif", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'grasp'", ":", "\n", "                        ", "nonlocal_variables", "[", "'best_pix_ind'", "]", "=", "np", ".", "unravel_index", "(", "np", ".", "argmax", "(", "grasp_predictions", ")", ",", "grasp_predictions", ".", "shape", ")", "\n", "predicted_value", "=", "np", ".", "max", "(", "grasp_predictions", ")", "\n", "", "", "trainer", ".", "use_heuristic_log", ".", "append", "(", "[", "1", "if", "use_heuristic", "else", "0", "]", ")", "\n", "logger", ".", "write_to_log", "(", "'use-heuristic'", ",", "trainer", ".", "use_heuristic_log", ")", "\n", "\n", "# Save predicted confidence value", "\n", "trainer", ".", "predicted_value_log", ".", "append", "(", "[", "predicted_value", "]", ")", "\n", "logger", ".", "write_to_log", "(", "'predicted-value'", ",", "trainer", ".", "predicted_value_log", ")", "\n", "\n", "# Compute 3D position of pixel", "\n", "print", "(", "'Action: %s at (%d, %d, %d)'", "%", "(", "nonlocal_variables", "[", "'primitive_action'", "]", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "0", "]", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "1", "]", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "2", "]", ")", ")", "\n", "best_rotation_angle", "=", "np", ".", "deg2rad", "(", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "0", "]", "*", "(", "360.0", "/", "trainer", ".", "model", ".", "num_rotations", ")", ")", "\n", "best_pix_x", "=", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "2", "]", "\n", "best_pix_y", "=", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "1", "]", "\n", "primitive_position", "=", "[", "best_pix_x", "*", "heightmap_resolution", "+", "workspace_limits", "[", "0", "]", "[", "0", "]", ",", "best_pix_y", "*", "heightmap_resolution", "+", "workspace_limits", "[", "1", "]", "[", "0", "]", ",", "valid_depth_heightmap", "[", "best_pix_y", "]", "[", "best_pix_x", "]", "+", "workspace_limits", "[", "2", "]", "[", "0", "]", "]", "\n", "\n", "# If pushing, adjust start position, and make sure z value is safe and not too low", "\n", "if", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'push'", ":", "# or nonlocal_variables['primitive_action'] == 'place':", "\n", "                    ", "finger_width", "=", "0.02", "\n", "safe_kernel_width", "=", "int", "(", "np", ".", "round", "(", "(", "finger_width", "/", "2", ")", "/", "heightmap_resolution", ")", ")", "\n", "local_region", "=", "valid_depth_heightmap", "[", "max", "(", "best_pix_y", "-", "safe_kernel_width", ",", "0", ")", ":", "min", "(", "best_pix_y", "+", "safe_kernel_width", "+", "1", ",", "valid_depth_heightmap", ".", "shape", "[", "0", "]", ")", ",", "max", "(", "best_pix_x", "-", "safe_kernel_width", ",", "0", ")", ":", "min", "(", "best_pix_x", "+", "safe_kernel_width", "+", "1", ",", "valid_depth_heightmap", ".", "shape", "[", "1", "]", ")", "]", "\n", "if", "local_region", ".", "size", "==", "0", ":", "\n", "                        ", "safe_z_position", "=", "workspace_limits", "[", "2", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                        ", "safe_z_position", "=", "np", ".", "max", "(", "local_region", ")", "+", "workspace_limits", "[", "2", "]", "[", "0", "]", "\n", "", "primitive_position", "[", "2", "]", "=", "safe_z_position", "\n", "\n", "# Save executed primitive", "\n", "", "if", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'push'", ":", "\n", "                    ", "trainer", ".", "executed_action_log", ".", "append", "(", "[", "0", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "0", "]", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "1", "]", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "2", "]", "]", ")", "# 0 - push", "\n", "", "elif", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'grasp'", ":", "\n", "                    ", "trainer", ".", "executed_action_log", ".", "append", "(", "[", "1", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "0", "]", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "1", "]", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", "[", "2", "]", "]", ")", "# 1 - grasp", "\n", "", "logger", ".", "write_to_log", "(", "'executed-action'", ",", "trainer", ".", "executed_action_log", ")", "\n", "\n", "# Visualize executed primitive, and affordances", "\n", "if", "save_visualizations", ":", "\n", "                    ", "push_pred_vis", "=", "trainer", ".", "get_prediction_vis", "(", "push_predictions", ",", "color_heightmap", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", ")", "\n", "logger", ".", "save_visualizations", "(", "trainer", ".", "iteration", ",", "push_pred_vis", ",", "'push'", ")", "\n", "cv2", ".", "imwrite", "(", "'visualization.push.png'", ",", "push_pred_vis", ")", "\n", "grasp_pred_vis", "=", "trainer", ".", "get_prediction_vis", "(", "grasp_predictions", ",", "color_heightmap", ",", "nonlocal_variables", "[", "'best_pix_ind'", "]", ")", "\n", "logger", ".", "save_visualizations", "(", "trainer", ".", "iteration", ",", "grasp_pred_vis", ",", "'grasp'", ")", "\n", "cv2", ".", "imwrite", "(", "'visualization.grasp.png'", ",", "grasp_pred_vis", ")", "\n", "\n", "# Initialize variables that influence reward", "\n", "", "nonlocal_variables", "[", "'push_success'", "]", "=", "False", "\n", "nonlocal_variables", "[", "'grasp_success'", "]", "=", "False", "\n", "change_detected", "=", "False", "\n", "\n", "# Execute primitive", "\n", "if", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'push'", ":", "\n", "                    ", "nonlocal_variables", "[", "'push_success'", "]", "=", "robot", ".", "push", "(", "primitive_position", ",", "best_rotation_angle", ",", "workspace_limits", ")", "\n", "print", "(", "'Push successful: %r'", "%", "(", "nonlocal_variables", "[", "'push_success'", "]", ")", ")", "\n", "", "elif", "nonlocal_variables", "[", "'primitive_action'", "]", "==", "'grasp'", ":", "\n", "                    ", "nonlocal_variables", "[", "'grasp_success'", "]", "=", "robot", ".", "grasp", "(", "primitive_position", ",", "best_rotation_angle", ",", "workspace_limits", ")", "\n", "print", "(", "'Grasp successful: %r'", "%", "(", "nonlocal_variables", "[", "'grasp_success'", "]", ")", ")", "\n", "\n", "", "nonlocal_variables", "[", "'executing_action'", "]", "=", "False", "\n", "\n", "", "time", ".", "sleep", "(", "0.01", ")", "\n", "", "", "action_thread", "=", "threading", ".", "Thread", "(", "target", "=", "process_actions", ")", "\n", "action_thread", ".", "daemon", "=", "True", "\n", "action_thread", ".", "start", "(", ")", "\n", "exit_called", "=", "False", "\n", "# -------------------------------------------------------------", "\n", "# -------------------------------------------------------------", "\n", "\n", "\n", "# Start main training/testing loop", "\n", "while", "True", ":", "\n", "        ", "print", "(", "'\\n%s iteration: %d'", "%", "(", "'Testing'", "if", "is_testing", "else", "'Training'", ",", "trainer", ".", "iteration", ")", ")", "\n", "iteration_time_0", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Make sure simulation is still stable (if not, reset simulation)", "\n", "if", "is_sim", ":", "robot", ".", "check_sim", "(", ")", "\n", "\n", "# Get latest RGB-D image", "\n", "color_img", ",", "depth_img", "=", "robot", ".", "get_camera_data", "(", ")", "\n", "depth_img", "=", "depth_img", "*", "robot", ".", "cam_depth_scale", "# Apply depth scale from calibration", "\n", "\n", "# Get heightmap from RGB-D image (by re-projecting 3D point cloud)", "\n", "color_heightmap", ",", "depth_heightmap", "=", "utils", ".", "get_heightmap", "(", "color_img", ",", "depth_img", ",", "robot", ".", "cam_intrinsics", ",", "robot", ".", "cam_pose", ",", "workspace_limits", ",", "heightmap_resolution", ")", "\n", "valid_depth_heightmap", "=", "depth_heightmap", ".", "copy", "(", ")", "\n", "valid_depth_heightmap", "[", "np", ".", "isnan", "(", "valid_depth_heightmap", ")", "]", "=", "0", "\n", "\n", "# Save RGB-D images and RGB-D heightmaps", "\n", "logger", ".", "save_images", "(", "trainer", ".", "iteration", ",", "color_img", ",", "depth_img", ",", "'0'", ")", "\n", "logger", ".", "save_heightmaps", "(", "trainer", ".", "iteration", ",", "color_heightmap", ",", "valid_depth_heightmap", ",", "'0'", ")", "\n", "\n", "# Reset simulation or pause real-world training if table is empty", "\n", "stuff_count", "=", "np", ".", "zeros", "(", "valid_depth_heightmap", ".", "shape", ")", "\n", "stuff_count", "[", "valid_depth_heightmap", ">", "0.02", "]", "=", "1", "\n", "empty_threshold", "=", "300", "\n", "if", "is_sim", "and", "is_testing", ":", "\n", "            ", "empty_threshold", "=", "10", "\n", "", "if", "np", ".", "sum", "(", "stuff_count", ")", "<", "empty_threshold", "or", "(", "is_sim", "and", "no_change_count", "[", "0", "]", "+", "no_change_count", "[", "1", "]", ">", "10", ")", ":", "\n", "            ", "no_change_count", "=", "[", "0", ",", "0", "]", "\n", "if", "is_sim", ":", "\n", "                ", "print", "(", "'Not enough objects in view (value: %d)! Repositioning objects.'", "%", "(", "np", ".", "sum", "(", "stuff_count", ")", ")", ")", "\n", "robot", ".", "restart_sim", "(", ")", "\n", "robot", ".", "add_objects", "(", ")", "\n", "if", "is_testing", ":", "# If at end of test run, re-load original weights (before test run)", "\n", "                    ", "trainer", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "snapshot_file", ")", ")", "\n", "", "", "else", ":", "\n", "# print('Not enough stuff on the table (value: %d)! Pausing for 30 seconds.' % (np.sum(stuff_count)))", "\n", "# time.sleep(30)", "\n", "                ", "print", "(", "'Not enough stuff on the table (value: %d)! Flipping over bin of objects...'", "%", "(", "np", ".", "sum", "(", "stuff_count", ")", ")", ")", "\n", "robot", ".", "restart_real", "(", ")", "\n", "\n", "", "trainer", ".", "clearance_log", ".", "append", "(", "[", "trainer", ".", "iteration", "]", ")", "\n", "logger", ".", "write_to_log", "(", "'clearance'", ",", "trainer", ".", "clearance_log", ")", "\n", "if", "is_testing", "and", "len", "(", "trainer", ".", "clearance_log", ")", ">=", "max_test_trials", ":", "\n", "                ", "exit_called", "=", "True", "# Exit after training thread (backprop and saving labels)", "\n", "", "continue", "\n", "\n", "", "if", "not", "exit_called", ":", "\n", "\n", "# Run forward pass with network to get affordances", "\n", "            ", "push_predictions", ",", "grasp_predictions", ",", "state_feat", "=", "trainer", ".", "forward", "(", "color_heightmap", ",", "valid_depth_heightmap", ",", "is_volatile", "=", "True", ")", "\n", "\n", "# Execute best primitive action on robot in another thread", "\n", "nonlocal_variables", "[", "'executing_action'", "]", "=", "True", "\n", "\n", "# Run training iteration in current thread (aka training thread)", "\n", "", "if", "'prev_color_img'", "in", "locals", "(", ")", ":", "\n", "\n", "# Detect changes", "\n", "            ", "depth_diff", "=", "abs", "(", "depth_heightmap", "-", "prev_depth_heightmap", ")", "\n", "depth_diff", "[", "np", ".", "isnan", "(", "depth_diff", ")", "]", "=", "0", "\n", "depth_diff", "[", "depth_diff", ">", "0.3", "]", "=", "0", "\n", "depth_diff", "[", "depth_diff", "<", "0.01", "]", "=", "0", "\n", "depth_diff", "[", "depth_diff", ">", "0", "]", "=", "1", "\n", "change_threshold", "=", "300", "\n", "change_value", "=", "np", ".", "sum", "(", "depth_diff", ")", "\n", "change_detected", "=", "change_value", ">", "change_threshold", "or", "prev_grasp_success", "\n", "print", "(", "'Change detected: %r (value: %d)'", "%", "(", "change_detected", ",", "change_value", ")", ")", "\n", "\n", "if", "change_detected", ":", "\n", "                ", "if", "prev_primitive_action", "==", "'push'", ":", "\n", "                    ", "no_change_count", "[", "0", "]", "=", "0", "\n", "", "elif", "prev_primitive_action", "==", "'grasp'", ":", "\n", "                    ", "no_change_count", "[", "1", "]", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "if", "prev_primitive_action", "==", "'push'", ":", "\n", "                    ", "no_change_count", "[", "0", "]", "+=", "1", "\n", "", "elif", "prev_primitive_action", "==", "'grasp'", ":", "\n", "                    ", "no_change_count", "[", "1", "]", "+=", "1", "\n", "\n", "# Compute training labels", "\n", "", "", "label_value", ",", "prev_reward_value", "=", "trainer", ".", "get_label_value", "(", "prev_primitive_action", ",", "prev_push_success", ",", "prev_grasp_success", ",", "change_detected", ",", "prev_push_predictions", ",", "prev_grasp_predictions", ",", "color_heightmap", ",", "valid_depth_heightmap", ")", "\n", "trainer", ".", "label_value_log", ".", "append", "(", "[", "label_value", "]", ")", "\n", "logger", ".", "write_to_log", "(", "'label-value'", ",", "trainer", ".", "label_value_log", ")", "\n", "trainer", ".", "reward_value_log", ".", "append", "(", "[", "prev_reward_value", "]", ")", "\n", "logger", ".", "write_to_log", "(", "'reward-value'", ",", "trainer", ".", "reward_value_log", ")", "\n", "\n", "# Backpropagate", "\n", "trainer", ".", "backprop", "(", "prev_color_heightmap", ",", "prev_valid_depth_heightmap", ",", "prev_primitive_action", ",", "prev_best_pix_ind", ",", "label_value", ")", "\n", "\n", "# Adjust exploration probability", "\n", "if", "not", "is_testing", ":", "\n", "                ", "explore_prob", "=", "max", "(", "0.5", "*", "np", ".", "power", "(", "0.9998", ",", "trainer", ".", "iteration", ")", ",", "0.1", ")", "if", "explore_rate_decay", "else", "0.5", "\n", "\n", "# Do sampling for experience replay", "\n", "", "if", "experience_replay", "and", "not", "is_testing", ":", "\n", "                ", "sample_primitive_action", "=", "prev_primitive_action", "\n", "if", "sample_primitive_action", "==", "'push'", ":", "\n", "                    ", "sample_primitive_action_id", "=", "0", "\n", "if", "method", "==", "'reactive'", ":", "\n", "                        ", "sample_reward_value", "=", "0", "if", "prev_reward_value", "==", "1", "else", "1", "# random.randint(1, 2) # 2", "\n", "", "elif", "method", "==", "'reinforcement'", ":", "\n", "                        ", "sample_reward_value", "=", "0", "if", "prev_reward_value", "==", "0.5", "else", "0.5", "\n", "", "", "elif", "sample_primitive_action", "==", "'grasp'", ":", "\n", "                    ", "sample_primitive_action_id", "=", "1", "\n", "if", "method", "==", "'reactive'", ":", "\n", "                        ", "sample_reward_value", "=", "0", "if", "prev_reward_value", "==", "1", "else", "1", "\n", "", "elif", "method", "==", "'reinforcement'", ":", "\n", "                        ", "sample_reward_value", "=", "0", "if", "prev_reward_value", "==", "1", "else", "1", "\n", "\n", "# Get samples of the same primitive but with different results", "\n", "", "", "sample_ind", "=", "np", ".", "argwhere", "(", "np", ".", "logical_and", "(", "np", ".", "asarray", "(", "trainer", ".", "reward_value_log", ")", "[", "1", ":", "trainer", ".", "iteration", ",", "0", "]", "==", "sample_reward_value", ",", "np", ".", "asarray", "(", "trainer", ".", "executed_action_log", ")", "[", "1", ":", "trainer", ".", "iteration", ",", "0", "]", "==", "sample_primitive_action_id", ")", ")", "\n", "\n", "if", "sample_ind", ".", "size", ">", "0", ":", "\n", "\n", "# Find sample with highest surprise value", "\n", "                    ", "if", "method", "==", "'reactive'", ":", "\n", "                        ", "sample_surprise_values", "=", "np", ".", "abs", "(", "np", ".", "asarray", "(", "trainer", ".", "predicted_value_log", ")", "[", "sample_ind", "[", ":", ",", "0", "]", "]", "-", "(", "1", "-", "sample_reward_value", ")", ")", "\n", "", "elif", "method", "==", "'reinforcement'", ":", "\n", "                        ", "sample_surprise_values", "=", "np", ".", "abs", "(", "np", ".", "asarray", "(", "trainer", ".", "predicted_value_log", ")", "[", "sample_ind", "[", ":", ",", "0", "]", "]", "-", "np", ".", "asarray", "(", "trainer", ".", "label_value_log", ")", "[", "sample_ind", "[", ":", ",", "0", "]", "]", ")", "\n", "", "sorted_surprise_ind", "=", "np", ".", "argsort", "(", "sample_surprise_values", "[", ":", ",", "0", "]", ")", "\n", "sorted_sample_ind", "=", "sample_ind", "[", "sorted_surprise_ind", ",", "0", "]", "\n", "pow_law_exp", "=", "2", "\n", "rand_sample_ind", "=", "int", "(", "np", ".", "round", "(", "np", ".", "random", ".", "power", "(", "pow_law_exp", ",", "1", ")", "*", "(", "sample_ind", ".", "size", "-", "1", ")", ")", ")", "\n", "sample_iteration", "=", "sorted_sample_ind", "[", "rand_sample_ind", "]", "\n", "print", "(", "'Experience replay: iteration %d (surprise value: %f)'", "%", "(", "sample_iteration", ",", "sample_surprise_values", "[", "sorted_surprise_ind", "[", "rand_sample_ind", "]", "]", ")", ")", "\n", "\n", "# Load sample RGB-D heightmap", "\n", "sample_color_heightmap", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "logger", ".", "color_heightmaps_directory", ",", "'%06d.0.color.png'", "%", "(", "sample_iteration", ")", ")", ")", "\n", "sample_color_heightmap", "=", "cv2", ".", "cvtColor", "(", "sample_color_heightmap", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "sample_depth_heightmap", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "logger", ".", "depth_heightmaps_directory", ",", "'%06d.0.depth.png'", "%", "(", "sample_iteration", ")", ")", ",", "-", "1", ")", "\n", "sample_depth_heightmap", "=", "sample_depth_heightmap", ".", "astype", "(", "np", ".", "float32", ")", "/", "100000", "\n", "\n", "# Compute forward pass with sample", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "sample_push_predictions", ",", "sample_grasp_predictions", ",", "sample_state_feat", "=", "trainer", ".", "forward", "(", "sample_color_heightmap", ",", "sample_depth_heightmap", ",", "is_volatile", "=", "True", ")", "\n", "\n", "# Load next sample RGB-D heightmap", "\n", "", "next_sample_color_heightmap", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "logger", ".", "color_heightmaps_directory", ",", "'%06d.0.color.png'", "%", "(", "sample_iteration", "+", "1", ")", ")", ")", "\n", "next_sample_color_heightmap", "=", "cv2", ".", "cvtColor", "(", "next_sample_color_heightmap", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "next_sample_depth_heightmap", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "logger", ".", "depth_heightmaps_directory", ",", "'%06d.0.depth.png'", "%", "(", "sample_iteration", "+", "1", ")", ")", ",", "-", "1", ")", "\n", "next_sample_depth_heightmap", "=", "next_sample_depth_heightmap", ".", "astype", "(", "np", ".", "float32", ")", "/", "100000", "\n", "\n", "sample_push_success", "=", "sample_reward_value", "==", "0.5", "\n", "sample_grasp_success", "=", "sample_reward_value", "==", "1", "\n", "sample_change_detected", "=", "sample_push_success", "\n", "# new_sample_label_value, _ = trainer.get_label_value(sample_primitive_action, sample_push_success, sample_grasp_success, sample_change_detected, sample_push_predictions, sample_grasp_predictions, next_sample_color_heightmap, next_sample_depth_heightmap)", "\n", "\n", "# Get labels for sample and backpropagate", "\n", "sample_best_pix_ind", "=", "(", "np", ".", "asarray", "(", "trainer", ".", "executed_action_log", ")", "[", "sample_iteration", ",", "1", ":", "4", "]", ")", ".", "astype", "(", "int", ")", "\n", "trainer", ".", "backprop", "(", "sample_color_heightmap", ",", "sample_depth_heightmap", ",", "sample_primitive_action", ",", "sample_best_pix_ind", ",", "trainer", ".", "label_value_log", "[", "sample_iteration", "]", ")", "\n", "\n", "# Recompute prediction value and label for replay buffer", "\n", "if", "sample_primitive_action", "==", "'push'", ":", "\n", "                        ", "trainer", ".", "predicted_value_log", "[", "sample_iteration", "]", "=", "[", "np", ".", "max", "(", "sample_push_predictions", ")", "]", "\n", "# trainer.label_value_log[sample_iteration] = [new_sample_label_value]", "\n", "", "elif", "sample_primitive_action", "==", "'grasp'", ":", "\n", "                        ", "trainer", ".", "predicted_value_log", "[", "sample_iteration", "]", "=", "[", "np", ".", "max", "(", "sample_grasp_predictions", ")", "]", "\n", "# trainer.label_value_log[sample_iteration] = [new_sample_label_value]", "\n", "\n", "", "", "else", ":", "\n", "                    ", "print", "(", "'Not enough prior training samples. Skipping experience replay.'", ")", "\n", "\n", "# Save model snapshot", "\n", "", "", "if", "not", "is_testing", ":", "\n", "                ", "logger", ".", "save_backup_model", "(", "trainer", ".", "model", ",", "method", ")", "\n", "if", "trainer", ".", "iteration", "%", "50", "==", "0", ":", "\n", "                    ", "logger", ".", "save_model", "(", "trainer", ".", "iteration", ",", "trainer", ".", "model", ",", "method", ")", "\n", "if", "trainer", ".", "use_cuda", ":", "\n", "                        ", "trainer", ".", "model", "=", "trainer", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "# Sync both action thread and training thread", "\n", "", "", "", "", "while", "nonlocal_variables", "[", "'executing_action'", "]", ":", "\n", "            ", "time", ".", "sleep", "(", "0.01", ")", "\n", "\n", "", "if", "exit_called", ":", "\n", "            ", "break", "\n", "\n", "# Save information for next training step", "\n", "", "prev_color_img", "=", "color_img", ".", "copy", "(", ")", "\n", "prev_depth_img", "=", "depth_img", ".", "copy", "(", ")", "\n", "prev_color_heightmap", "=", "color_heightmap", ".", "copy", "(", ")", "\n", "prev_depth_heightmap", "=", "depth_heightmap", ".", "copy", "(", ")", "\n", "prev_valid_depth_heightmap", "=", "valid_depth_heightmap", ".", "copy", "(", ")", "\n", "prev_push_success", "=", "nonlocal_variables", "[", "'push_success'", "]", "\n", "prev_grasp_success", "=", "nonlocal_variables", "[", "'grasp_success'", "]", "\n", "prev_primitive_action", "=", "nonlocal_variables", "[", "'primitive_action'", "]", "\n", "prev_push_predictions", "=", "push_predictions", ".", "copy", "(", ")", "\n", "prev_grasp_predictions", "=", "grasp_predictions", ".", "copy", "(", ")", "\n", "prev_best_pix_ind", "=", "nonlocal_variables", "[", "'best_pix_ind'", "]", "\n", "\n", "trainer", ".", "iteration", "+=", "1", "\n", "iteration_time_1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Time elapsed: %f'", "%", "(", "iteration_time_1", "-", "iteration_time_0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.__init__": [[16, 87], ["trainer.Trainer.model.train", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "models.reactive_net", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "trainer.Trainer.model.load_state_dict", "print", "trainer.Trainer.model.cuda", "trainer.Trainer.model.parameters", "print", "print", "utils.CrossEntropyLoss2d().cuda", "utils.CrossEntropyLoss2d", "utils.CrossEntropyLoss2d().cuda", "utils.CrossEntropyLoss2d", "models.reinforcement_net", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.nn.SmoothL1Loss", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.Trainer.criterion.cuda", "utils.CrossEntropyLoss2d", "utils.CrossEntropyLoss2d", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "method", ",", "push_rewards", ",", "future_reward_discount", ",", "\n", "is_testing", ",", "load_snapshot", ",", "snapshot_file", ",", "force_cpu", ")", ":", "\n", "\n", "        ", "self", ".", "method", "=", "method", "\n", "\n", "# Check if CUDA can be used", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "force_cpu", ":", "\n", "            ", "print", "(", "\"CUDA detected. Running with GPU acceleration.\"", ")", "\n", "self", ".", "use_cuda", "=", "True", "\n", "", "elif", "force_cpu", ":", "\n", "            ", "print", "(", "\"CUDA detected, but overriding with option '--cpu'. Running with only CPU.\"", ")", "\n", "self", ".", "use_cuda", "=", "False", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"CUDA is *NOT* detected. Running with only CPU.\"", ")", "\n", "self", ".", "use_cuda", "=", "False", "\n", "\n", "# Fully convolutional classification network for supervised learning", "\n", "", "if", "self", ".", "method", "==", "'reactive'", ":", "\n", "            ", "self", ".", "model", "=", "reactive_net", "(", "self", ".", "use_cuda", ")", "\n", "\n", "# Initialize classification loss", "\n", "push_num_classes", "=", "3", "# 0 - push, 1 - no change push, 2 - no loss", "\n", "push_class_weights", "=", "torch", ".", "ones", "(", "push_num_classes", ")", "\n", "push_class_weights", "[", "push_num_classes", "-", "1", "]", "=", "0", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "self", ".", "push_criterion", "=", "CrossEntropyLoss2d", "(", "push_class_weights", ".", "cuda", "(", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "push_criterion", "=", "CrossEntropyLoss2d", "(", "push_class_weights", ")", "\n", "", "grasp_num_classes", "=", "3", "# 0 - grasp, 1 - failed grasp, 2 - no loss", "\n", "grasp_class_weights", "=", "torch", ".", "ones", "(", "grasp_num_classes", ")", "\n", "grasp_class_weights", "[", "grasp_num_classes", "-", "1", "]", "=", "0", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "self", ".", "grasp_criterion", "=", "CrossEntropyLoss2d", "(", "grasp_class_weights", ".", "cuda", "(", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "grasp_criterion", "=", "CrossEntropyLoss2d", "(", "grasp_class_weights", ")", "\n", "\n", "# Fully convolutional Q network for deep reinforcement learning", "\n", "", "", "elif", "self", ".", "method", "==", "'reinforcement'", ":", "\n", "            ", "self", ".", "model", "=", "reinforcement_net", "(", "self", ".", "use_cuda", ")", "\n", "self", ".", "push_rewards", "=", "push_rewards", "\n", "self", ".", "future_reward_discount", "=", "future_reward_discount", "\n", "\n", "# Initialize Huber loss", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "SmoothL1Loss", "(", "reduce", "=", "False", ")", "# Huber loss", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                ", "self", ".", "criterion", "=", "self", ".", "criterion", ".", "cuda", "(", ")", "\n", "\n", "# Load pre-trained model", "\n", "", "", "if", "load_snapshot", ":", "\n", "            ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "snapshot_file", ")", ")", "\n", "print", "(", "'Pre-trained model snapshot loaded from: %s'", "%", "(", "snapshot_file", ")", ")", "\n", "\n", "# Convert model from CPU to GPU", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n", "# Set model to training mode", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "# Initialize optimizer", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-4", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "2e-5", ")", "\n", "self", ".", "iteration", "=", "0", "\n", "\n", "# Initialize lists to save execution info and RL variables", "\n", "self", ".", "executed_action_log", "=", "[", "]", "\n", "self", ".", "label_value_log", "=", "[", "]", "\n", "self", ".", "reward_value_log", "=", "[", "]", "\n", "self", ".", "predicted_value_log", "=", "[", "]", "\n", "self", ".", "use_heuristic_log", "=", "[", "]", "\n", "self", ".", "is_exploit_log", "=", "[", "]", "\n", "self", ".", "clearance_log", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.preload": [[90, 118], ["numpy.loadtxt", "trainer.Trainer.executed_action_log.tolist", "numpy.loadtxt", "trainer.Trainer.label_value_log.tolist", "numpy.loadtxt", "trainer.Trainer.predicted_value_log.tolist", "numpy.loadtxt", "trainer.Trainer.reward_value_log.tolist", "numpy.loadtxt", "trainer.Trainer.use_heuristic_log.tolist", "numpy.loadtxt", "trainer.Trainer.is_exploit_log.tolist", "numpy.loadtxt", "trainer.Trainer.clearance_log.tolist", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "preload", "(", "self", ",", "transitions_directory", ")", ":", "\n", "        ", "self", ".", "executed_action_log", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "transitions_directory", ",", "'executed-action.log.txt'", ")", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "iteration", "=", "self", ".", "executed_action_log", ".", "shape", "[", "0", "]", "-", "2", "\n", "self", ".", "executed_action_log", "=", "self", ".", "executed_action_log", "[", "0", ":", "self", ".", "iteration", ",", ":", "]", "\n", "self", ".", "executed_action_log", "=", "self", ".", "executed_action_log", ".", "tolist", "(", ")", "\n", "self", ".", "label_value_log", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "transitions_directory", ",", "'label-value.log.txt'", ")", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "label_value_log", "=", "self", ".", "label_value_log", "[", "0", ":", "self", ".", "iteration", "]", "\n", "self", ".", "label_value_log", ".", "shape", "=", "(", "self", ".", "iteration", ",", "1", ")", "\n", "self", ".", "label_value_log", "=", "self", ".", "label_value_log", ".", "tolist", "(", ")", "\n", "self", ".", "predicted_value_log", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "transitions_directory", ",", "'predicted-value.log.txt'", ")", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "predicted_value_log", "=", "self", ".", "predicted_value_log", "[", "0", ":", "self", ".", "iteration", "]", "\n", "self", ".", "predicted_value_log", ".", "shape", "=", "(", "self", ".", "iteration", ",", "1", ")", "\n", "self", ".", "predicted_value_log", "=", "self", ".", "predicted_value_log", ".", "tolist", "(", ")", "\n", "self", ".", "reward_value_log", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "transitions_directory", ",", "'reward-value.log.txt'", ")", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "reward_value_log", "=", "self", ".", "reward_value_log", "[", "0", ":", "self", ".", "iteration", "]", "\n", "self", ".", "reward_value_log", ".", "shape", "=", "(", "self", ".", "iteration", ",", "1", ")", "\n", "self", ".", "reward_value_log", "=", "self", ".", "reward_value_log", ".", "tolist", "(", ")", "\n", "self", ".", "use_heuristic_log", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "transitions_directory", ",", "'use-heuristic.log.txt'", ")", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "use_heuristic_log", "=", "self", ".", "use_heuristic_log", "[", "0", ":", "self", ".", "iteration", "]", "\n", "self", ".", "use_heuristic_log", ".", "shape", "=", "(", "self", ".", "iteration", ",", "1", ")", "\n", "self", ".", "use_heuristic_log", "=", "self", ".", "use_heuristic_log", ".", "tolist", "(", ")", "\n", "self", ".", "is_exploit_log", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "transitions_directory", ",", "'is-exploit.log.txt'", ")", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "is_exploit_log", "=", "self", ".", "is_exploit_log", "[", "0", ":", "self", ".", "iteration", "]", "\n", "self", ".", "is_exploit_log", ".", "shape", "=", "(", "self", ".", "iteration", ",", "1", ")", "\n", "self", ".", "is_exploit_log", "=", "self", ".", "is_exploit_log", ".", "tolist", "(", ")", "\n", "self", ".", "clearance_log", "=", "np", ".", "loadtxt", "(", "os", ".", "path", ".", "join", "(", "transitions_directory", ",", "'clearance.log.txt'", ")", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "clearance_log", ".", "shape", "=", "(", "self", ".", "clearance_log", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "clearance_log", "=", "self", ".", "clearance_log", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.forward": [[121, 188], ["scipy.ndimage.zoom", "scipy.ndimage.zoom", "int", "numpy.pad", "numpy.pad", "numpy.pad", "numpy.concatenate", "numpy.pad", "range", "numpy.concatenate", "range", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "trainer.Trainer.model.forward", "float", "numpy.sqrt", "numpy.ceil", "numpy.concatenate.astype", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "range", "input_color_image.astype", "numpy.concatenate.astype", "numpy.concatenate", "numpy.concatenate", "len", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "numpy.concatenate", "numpy.concatenate", "[].cpu().data.numpy", "[].cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu().data.numpy", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "int", "int", "int", "int", "int", "int", "int", "int", "[].cpu().data.numpy", "[].cpu().data.numpy", "[].cpu", "[].cpu", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "torch.softmax().cpu", "int", "int", "int", "int", "int", "int", "int", "int", "[].cpu", "[].cpu", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward"], ["", "def", "forward", "(", "self", ",", "color_heightmap", ",", "depth_heightmap", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "-", "1", ")", ":", "\n", "\n", "# Apply 2x scale to input heightmaps", "\n", "        ", "color_heightmap_2x", "=", "ndimage", ".", "zoom", "(", "color_heightmap", ",", "zoom", "=", "[", "2", ",", "2", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "depth_heightmap_2x", "=", "ndimage", ".", "zoom", "(", "depth_heightmap", ",", "zoom", "=", "[", "2", ",", "2", "]", ",", "order", "=", "0", ")", "\n", "assert", "(", "color_heightmap_2x", ".", "shape", "[", "0", ":", "2", "]", "==", "depth_heightmap_2x", ".", "shape", "[", "0", ":", "2", "]", ")", "\n", "\n", "# Add extra padding (to handle rotations inside network)", "\n", "diag_length", "=", "float", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", ")", "*", "np", ".", "sqrt", "(", "2", ")", "\n", "diag_length", "=", "np", ".", "ceil", "(", "diag_length", "/", "32", ")", "*", "32", "\n", "padding_width", "=", "int", "(", "(", "diag_length", "-", "color_heightmap_2x", ".", "shape", "[", "0", "]", ")", "/", "2", ")", "\n", "color_heightmap_2x_r", "=", "np", ".", "pad", "(", "color_heightmap_2x", "[", ":", ",", ":", ",", "0", "]", ",", "padding_width", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "color_heightmap_2x_r", ".", "shape", "=", "(", "color_heightmap_2x_r", ".", "shape", "[", "0", "]", ",", "color_heightmap_2x_r", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "color_heightmap_2x_g", "=", "np", ".", "pad", "(", "color_heightmap_2x", "[", ":", ",", ":", ",", "1", "]", ",", "padding_width", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "color_heightmap_2x_g", ".", "shape", "=", "(", "color_heightmap_2x_g", ".", "shape", "[", "0", "]", ",", "color_heightmap_2x_g", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "color_heightmap_2x_b", "=", "np", ".", "pad", "(", "color_heightmap_2x", "[", ":", ",", ":", ",", "2", "]", ",", "padding_width", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "color_heightmap_2x_b", ".", "shape", "=", "(", "color_heightmap_2x_b", ".", "shape", "[", "0", "]", ",", "color_heightmap_2x_b", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "color_heightmap_2x", "=", "np", ".", "concatenate", "(", "(", "color_heightmap_2x_r", ",", "color_heightmap_2x_g", ",", "color_heightmap_2x_b", ")", ",", "axis", "=", "2", ")", "\n", "depth_heightmap_2x", "=", "np", ".", "pad", "(", "depth_heightmap_2x", ",", "padding_width", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "# Pre-process color image (scale and normalize)", "\n", "image_mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "image_std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "input_color_image", "=", "color_heightmap_2x", ".", "astype", "(", "float", ")", "/", "255", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "            ", "input_color_image", "[", ":", ",", ":", ",", "c", "]", "=", "(", "input_color_image", "[", ":", ",", ":", ",", "c", "]", "-", "image_mean", "[", "c", "]", ")", "/", "image_std", "[", "c", "]", "\n", "\n", "# Pre-process depth image (normalize)", "\n", "", "image_mean", "=", "[", "0.01", ",", "0.01", ",", "0.01", "]", "\n", "image_std", "=", "[", "0.03", ",", "0.03", ",", "0.03", "]", "\n", "depth_heightmap_2x", ".", "shape", "=", "(", "depth_heightmap_2x", ".", "shape", "[", "0", "]", ",", "depth_heightmap_2x", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "input_depth_image", "=", "np", ".", "concatenate", "(", "(", "depth_heightmap_2x", ",", "depth_heightmap_2x", ",", "depth_heightmap_2x", ")", ",", "axis", "=", "2", ")", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "            ", "input_depth_image", "[", ":", ",", ":", ",", "c", "]", "=", "(", "input_depth_image", "[", ":", ",", ":", ",", "c", "]", "-", "image_mean", "[", "c", "]", ")", "/", "image_std", "[", "c", "]", "\n", "\n", "# Construct minibatch of size 1 (b,c,h,w)", "\n", "", "input_color_image", ".", "shape", "=", "(", "input_color_image", ".", "shape", "[", "0", "]", ",", "input_color_image", ".", "shape", "[", "1", "]", ",", "input_color_image", ".", "shape", "[", "2", "]", ",", "1", ")", "\n", "input_depth_image", ".", "shape", "=", "(", "input_depth_image", ".", "shape", "[", "0", "]", ",", "input_depth_image", ".", "shape", "[", "1", "]", ",", "input_depth_image", ".", "shape", "[", "2", "]", ",", "1", ")", "\n", "input_color_data", "=", "torch", ".", "from_numpy", "(", "input_color_image", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "input_depth_data", "=", "torch", ".", "from_numpy", "(", "input_depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "\n", "# Pass input data through model", "\n", "output_prob", ",", "state_feat", "=", "self", ".", "model", ".", "forward", "(", "input_color_data", ",", "input_depth_data", ",", "is_volatile", ",", "specific_rotation", ")", "\n", "\n", "if", "self", ".", "method", "==", "'reactive'", ":", "\n", "\n", "# Return affordances (and remove extra padding)", "\n", "            ", "for", "rotate_idx", "in", "range", "(", "len", "(", "output_prob", ")", ")", ":", "\n", "                ", "if", "rotate_idx", "==", "0", ":", "\n", "                    ", "push_predictions", "=", "F", ".", "softmax", "(", "output_prob", "[", "rotate_idx", "]", "[", "0", "]", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "(", "padding_width", "/", "2", ")", ":", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", ",", "(", "padding_width", "/", "2", ")", ":", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", "]", "\n", "grasp_predictions", "=", "F", ".", "softmax", "(", "output_prob", "[", "rotate_idx", "]", "[", "1", "]", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "(", "padding_width", "/", "2", ")", ":", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", ",", "(", "padding_width", "/", "2", ")", ":", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "                    ", "push_predictions", "=", "np", ".", "concatenate", "(", "(", "push_predictions", ",", "F", ".", "softmax", "(", "output_prob", "[", "rotate_idx", "]", "[", "0", "]", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "(", "padding_width", "/", "2", ")", ":", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", ",", "(", "padding_width", "/", "2", ")", ":", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "grasp_predictions", "=", "np", ".", "concatenate", "(", "(", "grasp_predictions", ",", "F", ".", "softmax", "(", "output_prob", "[", "rotate_idx", "]", "[", "1", "]", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "(", "padding_width", "/", "2", ")", ":", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", ",", "(", "padding_width", "/", "2", ")", ":", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "elif", "self", ".", "method", "==", "'reinforcement'", ":", "\n", "\n", "# Return Q values (and remove extra padding)", "\n", "            ", "for", "rotate_idx", "in", "range", "(", "len", "(", "output_prob", ")", ")", ":", "\n", "                ", "if", "rotate_idx", "==", "0", ":", "\n", "                    ", "push_predictions", "=", "output_prob", "[", "rotate_idx", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "int", "(", "padding_width", "/", "2", ")", ":", "int", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", ",", "int", "(", "padding_width", "/", "2", ")", ":", "int", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", "]", "\n", "grasp_predictions", "=", "output_prob", "[", "rotate_idx", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "int", "(", "padding_width", "/", "2", ")", ":", "int", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", ",", "int", "(", "padding_width", "/", "2", ")", ":", "int", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", "]", "\n", "", "else", ":", "\n", "                    ", "push_predictions", "=", "np", ".", "concatenate", "(", "(", "push_predictions", ",", "output_prob", "[", "rotate_idx", "]", "[", "0", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "int", "(", "padding_width", "/", "2", ")", ":", "int", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", ",", "int", "(", "padding_width", "/", "2", ")", ":", "int", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "grasp_predictions", "=", "np", ".", "concatenate", "(", "(", "grasp_predictions", ",", "output_prob", "[", "rotate_idx", "]", "[", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "int", "(", "padding_width", "/", "2", ")", ":", "int", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", ",", "int", "(", "padding_width", "/", "2", ")", ":", "int", "(", "color_heightmap_2x", ".", "shape", "[", "0", "]", "/", "2", "-", "padding_width", "/", "2", ")", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "return", "push_predictions", ",", "grasp_predictions", ",", "state_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.get_label_value": [[190, 238], ["print", "print", "print", "trainer.Trainer.forward", "max", "print", "print", "numpy.max", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward"], ["", "def", "get_label_value", "(", "self", ",", "primitive_action", ",", "push_success", ",", "grasp_success", ",", "change_detected", ",", "prev_push_predictions", ",", "prev_grasp_predictions", ",", "next_color_heightmap", ",", "next_depth_heightmap", ")", ":", "\n", "\n", "        ", "if", "self", ".", "method", "==", "'reactive'", ":", "\n", "\n", "# Compute label value", "\n", "            ", "label_value", "=", "0", "\n", "if", "primitive_action", "==", "'push'", ":", "\n", "                ", "if", "not", "change_detected", ":", "\n", "                    ", "label_value", "=", "1", "\n", "", "", "elif", "primitive_action", "==", "'grasp'", ":", "\n", "                ", "if", "not", "grasp_success", ":", "\n", "                    ", "label_value", "=", "1", "\n", "\n", "", "", "print", "(", "'Label value: %d'", "%", "(", "label_value", ")", ")", "\n", "return", "label_value", ",", "label_value", "\n", "\n", "", "elif", "self", ".", "method", "==", "'reinforcement'", ":", "\n", "\n", "# Compute current reward", "\n", "            ", "current_reward", "=", "0", "\n", "if", "primitive_action", "==", "'push'", ":", "\n", "                ", "if", "change_detected", ":", "\n", "                    ", "current_reward", "=", "0.5", "\n", "", "", "elif", "primitive_action", "==", "'grasp'", ":", "\n", "                ", "if", "grasp_success", ":", "\n", "                    ", "current_reward", "=", "1.0", "\n", "\n", "# Compute future reward", "\n", "", "", "if", "not", "change_detected", "and", "not", "grasp_success", ":", "\n", "                ", "future_reward", "=", "0", "\n", "", "else", ":", "\n", "                ", "next_push_predictions", ",", "next_grasp_predictions", ",", "next_state_feat", "=", "self", ".", "forward", "(", "next_color_heightmap", ",", "next_depth_heightmap", ",", "is_volatile", "=", "True", ")", "\n", "future_reward", "=", "max", "(", "np", ".", "max", "(", "next_push_predictions", ")", ",", "np", ".", "max", "(", "next_grasp_predictions", ")", ")", "\n", "\n", "# # Experiment: use Q differences", "\n", "# push_predictions_difference = next_push_predictions - prev_push_predictions", "\n", "# grasp_predictions_difference = next_grasp_predictions - prev_grasp_predictions", "\n", "# future_reward = max(np.max(push_predictions_difference), np.max(grasp_predictions_difference))", "\n", "\n", "", "print", "(", "'Current reward: %f'", "%", "(", "current_reward", ")", ")", "\n", "print", "(", "'Future reward: %f'", "%", "(", "future_reward", ")", ")", "\n", "if", "primitive_action", "==", "'push'", "and", "not", "self", ".", "push_rewards", ":", "\n", "                ", "expected_reward", "=", "self", ".", "future_reward_discount", "*", "future_reward", "\n", "print", "(", "'Expected reward: %f + %f x %f = %f'", "%", "(", "0.0", ",", "self", ".", "future_reward_discount", ",", "future_reward", ",", "expected_reward", ")", ")", "\n", "", "else", ":", "\n", "                ", "expected_reward", "=", "current_reward", "+", "self", ".", "future_reward_discount", "*", "future_reward", "\n", "print", "(", "'Expected reward: %f + %f x %f = %f'", "%", "(", "current_reward", ",", "self", ".", "future_reward_discount", ",", "future_reward", ",", "expected_reward", ")", ")", "\n", "", "return", "expected_reward", ",", "current_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.backprop": [[241, 369], ["numpy.zeros", "trainer.Trainer.optimizer.zero_grad", "print", "trainer.Trainer.optimizer.step", "numpy.zeros", "numpy.zeros", "trainer.Trainer.forward", "loss.sum.sum.backward", "loss.sum.sum.cpu().data.numpy", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "trainer.Trainer.optimizer.zero_grad", "print", "trainer.Trainer.optimizer.step", "trainer.Trainer.push_criterion", "trainer.Trainer.push_criterion", "trainer.Trainer.forward", "loss.sum.sum.backward", "loss.sum.sum.cpu().data.numpy", "trainer.Trainer.forward", "loss.sum.sum.backward", "loss.sum.sum.cpu().data.numpy", "trainer.Trainer.forward", "loss.sum.sum.sum", "loss.sum.sum.backward", "loss.sum.sum.cpu().data.numpy", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.Trainer.grasp_criterion", "trainer.Trainer.grasp_criterion", "trainer.Trainer.grasp_criterion", "trainer.Trainer.grasp_criterion", "trainer.Trainer.forward", "loss.sum.sum.sum", "loss.sum.sum.backward", "loss.sum.sum.cpu().data.numpy", "trainer.Trainer.forward", "loss.sum.sum.sum", "loss.sum.sum.backward", "loss.sum.sum.cpu().data.numpy", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "loss.sum.sum.cpu", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.Trainer.criterion", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.Trainer.criterion", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "loss.sum.sum.cpu", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "loss.sum.sum.cpu", "[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "loss.sum.sum.cpu", "trainer.Trainer.criterion", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.Trainer.criterion", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.Trainer.criterion", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "trainer.Trainer.criterion", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "loss.sum.sum.cpu", "[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "[].view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "loss.sum.sum.cpu", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward"], ["", "", "def", "backprop", "(", "self", ",", "color_heightmap", ",", "depth_heightmap", ",", "primitive_action", ",", "best_pix_ind", ",", "label_value", ")", ":", "\n", "\n", "        ", "if", "self", ".", "method", "==", "'reactive'", ":", "\n", "\n", "# Compute fill value", "\n", "            ", "fill_value", "=", "2", "\n", "\n", "# Compute labels", "\n", "label", "=", "np", ".", "zeros", "(", "(", "1", ",", "320", ",", "320", ")", ")", "+", "fill_value", "\n", "action_area", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", ")", ")", "\n", "action_area", "[", "best_pix_ind", "[", "1", "]", "]", "[", "best_pix_ind", "[", "2", "]", "]", "=", "1", "\n", "# blur_kernel = np.ones((5,5),np.float32)/25", "\n", "# action_area = cv2.filter2D(action_area, -1, blur_kernel)", "\n", "tmp_label", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", ")", ")", "+", "fill_value", "\n", "tmp_label", "[", "action_area", ">", "0", "]", "=", "label_value", "\n", "label", "[", "0", ",", "48", ":", "(", "320", "-", "48", ")", ",", "48", ":", "(", "320", "-", "48", ")", "]", "=", "tmp_label", "\n", "\n", "# Compute loss and backward pass", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_value", "=", "0", "\n", "if", "primitive_action", "==", "'push'", ":", "\n", "# loss = self.push_criterion(self.model.output_prob[best_pix_ind[0]][0], Variable(torch.from_numpy(label).long().cuda()))", "\n", "\n", "# Do forward pass with specified rotation (to save gradients)", "\n", "                ", "push_predictions", ",", "grasp_predictions", ",", "state_feat", "=", "self", ".", "forward", "(", "color_heightmap", ",", "depth_heightmap", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "best_pix_ind", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "loss", "=", "self", ".", "push_criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "0", "]", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "push_criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "0", "]", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", ")", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "loss_value", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "elif", "primitive_action", "==", "'grasp'", ":", "\n", "# loss = self.grasp_criterion(self.model.output_prob[best_pix_ind[0]][1], Variable(torch.from_numpy(label).long().cuda()))", "\n", "# loss += self.grasp_criterion(self.model.output_prob[(best_pix_ind[0] + self.model.num_rotations/2) % self.model.num_rotations][1], Variable(torch.from_numpy(label).long().cuda()))", "\n", "\n", "# Do forward pass with specified rotation (to save gradients)", "\n", "                ", "push_predictions", ",", "grasp_predictions", ",", "state_feat", "=", "self", ".", "forward", "(", "color_heightmap", ",", "depth_heightmap", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "best_pix_ind", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "loss", "=", "self", ".", "grasp_criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "1", "]", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "grasp_criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "1", "]", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", ")", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "loss_value", "+=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "# Since grasping is symmetric, train with another forward pass of opposite rotation angle", "\n", "opposite_rotate_idx", "=", "(", "best_pix_ind", "[", "0", "]", "+", "self", ".", "model", ".", "num_rotations", "/", "2", ")", "%", "self", ".", "model", ".", "num_rotations", "\n", "\n", "push_predictions", ",", "grasp_predictions", ",", "state_feat", "=", "self", ".", "forward", "(", "color_heightmap", ",", "depth_heightmap", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "opposite_rotate_idx", ")", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "loss", "=", "self", ".", "grasp_criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "1", "]", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "grasp_criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "1", "]", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "long", "(", ")", ")", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "loss_value", "+=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "loss_value", "=", "loss_value", "/", "2", "\n", "\n", "", "print", "(", "'Training loss: %f'", "%", "(", "loss_value", ")", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "elif", "self", ".", "method", "==", "'reinforcement'", ":", "\n", "\n", "# Compute labels", "\n", "            ", "label", "=", "np", ".", "zeros", "(", "(", "1", ",", "320", ",", "320", ")", ")", "\n", "action_area", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", ")", ")", "\n", "action_area", "[", "best_pix_ind", "[", "1", "]", "]", "[", "best_pix_ind", "[", "2", "]", "]", "=", "1", "\n", "# blur_kernel = np.ones((5,5),np.float32)/25", "\n", "# action_area = cv2.filter2D(action_area, -1, blur_kernel)", "\n", "tmp_label", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", ")", ")", "\n", "tmp_label", "[", "action_area", ">", "0", "]", "=", "label_value", "\n", "label", "[", "0", ",", "48", ":", "(", "320", "-", "48", ")", ",", "48", ":", "(", "320", "-", "48", ")", "]", "=", "tmp_label", "\n", "\n", "# Compute label mask", "\n", "label_weights", "=", "np", ".", "zeros", "(", "label", ".", "shape", ")", "\n", "tmp_label_weights", "=", "np", ".", "zeros", "(", "(", "224", ",", "224", ")", ")", "\n", "tmp_label_weights", "[", "action_area", ">", "0", "]", "=", "1", "\n", "label_weights", "[", "0", ",", "48", ":", "(", "320", "-", "48", ")", ",", "48", ":", "(", "320", "-", "48", ")", "]", "=", "tmp_label_weights", "\n", "\n", "# Compute loss and backward pass", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_value", "=", "0", "\n", "if", "primitive_action", "==", "'push'", ":", "\n", "\n", "# Do forward pass with specified rotation (to save gradients)", "\n", "                ", "push_predictions", ",", "grasp_predictions", ",", "state_feat", "=", "self", ".", "forward", "(", "color_heightmap", ",", "depth_heightmap", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "best_pix_ind", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "loss", "=", "self", ".", "criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "0", "]", ".", "view", "(", "1", ",", "320", ",", "320", ")", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", ")", "*", "Variable", "(", "torch", ".", "from_numpy", "(", "label_weights", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "0", "]", ".", "view", "(", "1", ",", "320", ",", "320", ")", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "float", "(", ")", ")", ")", "*", "Variable", "(", "torch", ".", "from_numpy", "(", "label_weights", ")", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "loss_value", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "", "elif", "primitive_action", "==", "'grasp'", ":", "\n", "\n", "# Do forward pass with specified rotation (to save gradients)", "\n", "                ", "push_predictions", ",", "grasp_predictions", ",", "state_feat", "=", "self", ".", "forward", "(", "color_heightmap", ",", "depth_heightmap", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "best_pix_ind", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "loss", "=", "self", ".", "criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "1", "]", ".", "view", "(", "1", ",", "320", ",", "320", ")", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", ")", "*", "Variable", "(", "torch", ".", "from_numpy", "(", "label_weights", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "1", "]", ".", "view", "(", "1", ",", "320", ",", "320", ")", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "float", "(", ")", ")", ")", "*", "Variable", "(", "torch", ".", "from_numpy", "(", "label_weights", ")", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "loss_value", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "opposite_rotate_idx", "=", "(", "best_pix_ind", "[", "0", "]", "+", "self", ".", "model", ".", "num_rotations", "/", "2", ")", "%", "self", ".", "model", ".", "num_rotations", "\n", "\n", "push_predictions", ",", "grasp_predictions", ",", "state_feat", "=", "self", ".", "forward", "(", "color_heightmap", ",", "depth_heightmap", ",", "is_volatile", "=", "False", ",", "specific_rotation", "=", "opposite_rotate_idx", ")", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "                    ", "loss", "=", "self", ".", "criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "1", "]", ".", "view", "(", "1", ",", "320", ",", "320", ")", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", ")", "*", "Variable", "(", "torch", ".", "from_numpy", "(", "label_weights", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "criterion", "(", "self", ".", "model", ".", "output_prob", "[", "0", "]", "[", "1", "]", ".", "view", "(", "1", ",", "320", ",", "320", ")", ",", "Variable", "(", "torch", ".", "from_numpy", "(", "label", ")", ".", "float", "(", ")", ")", ")", "*", "Variable", "(", "torch", ".", "from_numpy", "(", "label_weights", ")", ".", "float", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "loss_value", "=", "loss", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n", "loss_value", "=", "loss_value", "/", "2", "\n", "\n", "", "print", "(", "'Training loss: %f'", "%", "(", "loss_value", ")", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.get_prediction_vis": [[371, 400], ["range", "int", "range", "predictions[].copy", "numpy.clip", "cv2.applyColorMap", "scipy.ndimage.rotate", "scipy.ndimage.rotate", "numpy.concatenate", "cv2.circle", "numpy.concatenate", "int", "int", "cv2.cvtColor"], "methods", ["None"], ["", "", "def", "get_prediction_vis", "(", "self", ",", "predictions", ",", "color_heightmap", ",", "best_pix_ind", ")", ":", "\n", "\n", "        ", "canvas", "=", "None", "\n", "num_rotations", "=", "predictions", ".", "shape", "[", "0", "]", "\n", "for", "canvas_row", "in", "range", "(", "int", "(", "num_rotations", "/", "4", ")", ")", ":", "\n", "            ", "tmp_row_canvas", "=", "None", "\n", "for", "canvas_col", "in", "range", "(", "4", ")", ":", "\n", "                ", "rotate_idx", "=", "canvas_row", "*", "4", "+", "canvas_col", "\n", "prediction_vis", "=", "predictions", "[", "rotate_idx", ",", ":", ",", ":", "]", ".", "copy", "(", ")", "\n", "# prediction_vis[prediction_vis < 0] = 0 # assume probability", "\n", "# prediction_vis[prediction_vis > 1] = 1 # assume probability", "\n", "prediction_vis", "=", "np", ".", "clip", "(", "prediction_vis", ",", "0", ",", "1", ")", "\n", "prediction_vis", ".", "shape", "=", "(", "predictions", ".", "shape", "[", "1", "]", ",", "predictions", ".", "shape", "[", "2", "]", ")", "\n", "prediction_vis", "=", "cv2", ".", "applyColorMap", "(", "(", "prediction_vis", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "if", "rotate_idx", "==", "best_pix_ind", "[", "0", "]", ":", "\n", "                    ", "prediction_vis", "=", "cv2", ".", "circle", "(", "prediction_vis", ",", "(", "int", "(", "best_pix_ind", "[", "2", "]", ")", ",", "int", "(", "best_pix_ind", "[", "1", "]", ")", ")", ",", "7", ",", "(", "0", ",", "0", ",", "255", ")", ",", "2", ")", "\n", "", "prediction_vis", "=", "ndimage", ".", "rotate", "(", "prediction_vis", ",", "rotate_idx", "*", "(", "360.0", "/", "num_rotations", ")", ",", "reshape", "=", "False", ",", "order", "=", "0", ")", "\n", "background_image", "=", "ndimage", ".", "rotate", "(", "color_heightmap", ",", "rotate_idx", "*", "(", "360.0", "/", "num_rotations", ")", ",", "reshape", "=", "False", ",", "order", "=", "0", ")", "\n", "prediction_vis", "=", "(", "0.5", "*", "cv2", ".", "cvtColor", "(", "background_image", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "+", "0.5", "*", "prediction_vis", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "tmp_row_canvas", "is", "None", ":", "\n", "                    ", "tmp_row_canvas", "=", "prediction_vis", "\n", "", "else", ":", "\n", "                    ", "tmp_row_canvas", "=", "np", ".", "concatenate", "(", "(", "tmp_row_canvas", ",", "prediction_vis", ")", ",", "axis", "=", "1", ")", "\n", "", "", "if", "canvas", "is", "None", ":", "\n", "                ", "canvas", "=", "tmp_row_canvas", "\n", "", "else", ":", "\n", "                ", "canvas", "=", "np", ".", "concatenate", "(", "(", "canvas", ",", "tmp_row_canvas", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "canvas", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.push_heuristic": [[402, 423], ["range", "numpy.unravel_index", "scipy.ndimage.rotate", "numpy.zeros", "cv2.filter2D", "scipy.ndimage.rotate", "numpy.argmax", "numpy.ones", "numpy.concatenate", "scipy.ndimage.interpolation.shift"], "methods", ["None"], ["", "def", "push_heuristic", "(", "self", ",", "depth_heightmap", ")", ":", "\n", "\n", "        ", "num_rotations", "=", "16", "\n", "\n", "for", "rotate_idx", "in", "range", "(", "num_rotations", ")", ":", "\n", "            ", "rotated_heightmap", "=", "ndimage", ".", "rotate", "(", "depth_heightmap", ",", "rotate_idx", "*", "(", "360.0", "/", "num_rotations", ")", ",", "reshape", "=", "False", ",", "order", "=", "0", ")", "\n", "valid_areas", "=", "np", ".", "zeros", "(", "rotated_heightmap", ".", "shape", ")", "\n", "valid_areas", "[", "ndimage", ".", "interpolation", ".", "shift", "(", "rotated_heightmap", ",", "[", "0", ",", "-", "25", "]", ",", "order", "=", "0", ")", "-", "rotated_heightmap", ">", "0.02", "]", "=", "1", "\n", "# valid_areas = np.multiply(valid_areas, rotated_heightmap)", "\n", "blur_kernel", "=", "np", ".", "ones", "(", "(", "25", ",", "25", ")", ",", "np", ".", "float32", ")", "/", "9", "\n", "valid_areas", "=", "cv2", ".", "filter2D", "(", "valid_areas", ",", "-", "1", ",", "blur_kernel", ")", "\n", "tmp_push_predictions", "=", "ndimage", ".", "rotate", "(", "valid_areas", ",", "-", "rotate_idx", "*", "(", "360.0", "/", "num_rotations", ")", ",", "reshape", "=", "False", ",", "order", "=", "0", ")", "\n", "tmp_push_predictions", ".", "shape", "=", "(", "1", ",", "rotated_heightmap", ".", "shape", "[", "0", "]", ",", "rotated_heightmap", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "rotate_idx", "==", "0", ":", "\n", "                ", "push_predictions", "=", "tmp_push_predictions", "\n", "", "else", ":", "\n", "                ", "push_predictions", "=", "np", ".", "concatenate", "(", "(", "push_predictions", ",", "tmp_push_predictions", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "best_pix_ind", "=", "np", ".", "unravel_index", "(", "np", ".", "argmax", "(", "push_predictions", ")", ",", "push_predictions", ".", "shape", ")", "\n", "return", "best_pix_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.trainer.Trainer.grasp_heuristic": [[425, 446], ["range", "numpy.unravel_index", "scipy.ndimage.rotate", "numpy.zeros", "cv2.filter2D", "scipy.ndimage.rotate", "numpy.argmax", "numpy.ones", "numpy.concatenate", "numpy.logical_and", "scipy.ndimage.interpolation.shift", "scipy.ndimage.interpolation.shift"], "methods", ["None"], ["", "def", "grasp_heuristic", "(", "self", ",", "depth_heightmap", ")", ":", "\n", "\n", "        ", "num_rotations", "=", "16", "\n", "\n", "for", "rotate_idx", "in", "range", "(", "num_rotations", ")", ":", "\n", "            ", "rotated_heightmap", "=", "ndimage", ".", "rotate", "(", "depth_heightmap", ",", "rotate_idx", "*", "(", "360.0", "/", "num_rotations", ")", ",", "reshape", "=", "False", ",", "order", "=", "0", ")", "\n", "valid_areas", "=", "np", ".", "zeros", "(", "rotated_heightmap", ".", "shape", ")", "\n", "valid_areas", "[", "np", ".", "logical_and", "(", "rotated_heightmap", "-", "ndimage", ".", "interpolation", ".", "shift", "(", "rotated_heightmap", ",", "[", "0", ",", "-", "25", "]", ",", "order", "=", "0", ")", ">", "0.02", ",", "rotated_heightmap", "-", "ndimage", ".", "interpolation", ".", "shift", "(", "rotated_heightmap", ",", "[", "0", ",", "25", "]", ",", "order", "=", "0", ")", ">", "0.02", ")", "]", "=", "1", "\n", "# valid_areas = np.multiply(valid_areas, rotated_heightmap)", "\n", "blur_kernel", "=", "np", ".", "ones", "(", "(", "25", ",", "25", ")", ",", "np", ".", "float32", ")", "/", "9", "\n", "valid_areas", "=", "cv2", ".", "filter2D", "(", "valid_areas", ",", "-", "1", ",", "blur_kernel", ")", "\n", "tmp_grasp_predictions", "=", "ndimage", ".", "rotate", "(", "valid_areas", ",", "-", "rotate_idx", "*", "(", "360.0", "/", "num_rotations", ")", ",", "reshape", "=", "False", ",", "order", "=", "0", ")", "\n", "tmp_grasp_predictions", ".", "shape", "=", "(", "1", ",", "rotated_heightmap", ".", "shape", "[", "0", "]", ",", "rotated_heightmap", ".", "shape", "[", "1", "]", ")", "\n", "\n", "if", "rotate_idx", "==", "0", ":", "\n", "                ", "grasp_predictions", "=", "tmp_grasp_predictions", "\n", "", "else", ":", "\n", "                ", "grasp_predictions", "=", "np", ".", "concatenate", "(", "(", "grasp_predictions", ",", "tmp_grasp_predictions", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "best_pix_ind", "=", "np", ".", "unravel_index", "(", "np", ".", "argmax", "(", "grasp_predictions", ")", ",", "grasp_predictions", ".", "shape", ")", "\n", "return", "best_pix_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.__init__": [[11, 51], ["time.time", "datetime.datetime.fromtimestamp", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "print", "os.path.join", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "datetime.datetime.fromtimestamp.strftime", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "continue_logging", ",", "logging_directory", ")", ":", "\n", "\n", "# Create directory to save data", "\n", "        ", "timestamp", "=", "time", ".", "time", "(", ")", "\n", "timestamp_value", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "timestamp", ")", "\n", "self", ".", "continue_logging", "=", "continue_logging", "\n", "if", "self", ".", "continue_logging", ":", "\n", "            ", "self", ".", "base_directory", "=", "logging_directory", "\n", "print", "(", "'Pre-loading data logging session: %s'", "%", "(", "self", ".", "base_directory", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "base_directory", "=", "os", ".", "path", ".", "join", "(", "logging_directory", ",", "timestamp_value", ".", "strftime", "(", "'%Y-%m-%d.%H:%M:%S'", ")", ")", "\n", "print", "(", "'Creating data logging session: %s'", "%", "(", "self", ".", "base_directory", ")", ")", "\n", "", "self", ".", "info_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'info'", ")", "\n", "self", ".", "color_images_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'data'", ",", "'color-images'", ")", "\n", "self", ".", "depth_images_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'data'", ",", "'depth-images'", ")", "\n", "self", ".", "color_heightmaps_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'data'", ",", "'color-heightmaps'", ")", "\n", "self", ".", "depth_heightmaps_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'data'", ",", "'depth-heightmaps'", ")", "\n", "self", ".", "models_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'models'", ")", "\n", "self", ".", "visualizations_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'visualizations'", ")", "\n", "self", ".", "recordings_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'recordings'", ")", "\n", "self", ".", "transitions_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_directory", ",", "'transitions'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "info_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "info_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "color_images_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "color_images_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "depth_images_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "depth_images_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "color_heightmaps_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "color_heightmaps_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "depth_heightmaps_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "depth_heightmaps_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "models_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "models_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "visualizations_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "visualizations_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "recordings_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "recordings_directory", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "transitions_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "transitions_directory", ",", "'data'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_camera_info": [[52, 56], ["numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "def", "save_camera_info", "(", "self", ",", "intrinsics", ",", "pose", ",", "depth_scale", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "info_directory", ",", "'camera-intrinsics.txt'", ")", ",", "intrinsics", ",", "delimiter", "=", "' '", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "info_directory", ",", "'camera-pose.txt'", ")", ",", "pose", ",", "delimiter", "=", "' '", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "info_directory", ",", "'camera-depth-scale.txt'", ")", ",", "[", "depth_scale", "]", ",", "delimiter", "=", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_heightmap_info": [[57, 60], ["numpy.savetxt", "numpy.savetxt", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "save_heightmap_info", "(", "self", ",", "boundaries", ",", "resolution", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "info_directory", ",", "'heightmap-boundaries.txt'", ")", ",", "boundaries", ",", "delimiter", "=", "' '", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "info_directory", ",", "'heightmap-resolution.txt'", ")", ",", "[", "resolution", "]", ",", "delimiter", "=", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_images": [[61, 66], ["cv2.cvtColor", "cv2.imwrite", "numpy.round().astype", "cv2.imwrite", "os.path.join", "os.path.join", "numpy.round"], "methods", ["None"], ["", "def", "save_images", "(", "self", ",", "iteration", ",", "color_image", ",", "depth_image", ",", "mode", ")", ":", "\n", "        ", "color_image", "=", "cv2", ".", "cvtColor", "(", "color_image", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "color_images_directory", ",", "'%06d.%s.color.png'", "%", "(", "iteration", ",", "mode", ")", ")", ",", "color_image", ")", "\n", "depth_image", "=", "np", ".", "round", "(", "depth_image", "*", "10000", ")", ".", "astype", "(", "np", ".", "uint16", ")", "# Save depth in 1e-4 meters", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "depth_images_directory", ",", "'%06d.%s.depth.png'", "%", "(", "iteration", ",", "mode", ")", ")", ",", "depth_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_heightmaps": [[67, 72], ["cv2.cvtColor", "cv2.imwrite", "numpy.round().astype", "cv2.imwrite", "os.path.join", "os.path.join", "numpy.round"], "methods", ["None"], ["", "def", "save_heightmaps", "(", "self", ",", "iteration", ",", "color_heightmap", ",", "depth_heightmap", ",", "mode", ")", ":", "\n", "        ", "color_heightmap", "=", "cv2", ".", "cvtColor", "(", "color_heightmap", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "color_heightmaps_directory", ",", "'%06d.%s.color.png'", "%", "(", "iteration", ",", "mode", ")", ")", ",", "color_heightmap", ")", "\n", "depth_heightmap", "=", "np", ".", "round", "(", "depth_heightmap", "*", "100000", ")", ".", "astype", "(", "np", ".", "uint16", ")", "# Save depth in 1e-5 meters", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "depth_heightmaps_directory", ",", "'%06d.%s.depth.png'", "%", "(", "iteration", ",", "mode", ")", ")", ",", "depth_heightmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.write_to_log": [[73, 75], ["numpy.savetxt", "os.path.join"], "methods", ["None"], ["", "def", "write_to_log", "(", "self", ",", "log_name", ",", "log", ")", ":", "\n", "        ", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "self", ".", "transitions_directory", ",", "'%s.log.txt'", "%", "log_name", ")", ",", "log", ",", "delimiter", "=", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_model": [[76, 78], ["torch.save", "model.cpu().state_dict", "os.path.join", "model.cpu"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "iteration", ",", "model", ",", "name", ")", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "cpu", "(", ")", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "models_directory", ",", "'snapshot-%06d.%s.pth'", "%", "(", "iteration", ",", "name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_backup_model": [[79, 81], ["torch.save", "model.state_dict", "os.path.join"], "methods", ["None"], ["", "def", "save_backup_model", "(", "self", ",", "model", ",", "name", ")", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "self", ".", "models_directory", ",", "'snapshot-backup.%s.pth'", "%", "(", "name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_visualizations": [[82, 84], ["cv2.imwrite", "os.path.join"], "methods", ["None"], ["", "def", "save_visualizations", "(", "self", ",", "iteration", ",", "affordance_vis", ",", "name", ")", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "visualizations_directory", ",", "'%06d.%s.png'", "%", "(", "iteration", ",", "name", ")", ")", ",", "affordance_vis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.make_new_recording_directory": [[94, 99], ["os.path.join", "os.path.exists", "os.makedirs"], "methods", ["None"], ["", "def", "make_new_recording_directory", "(", "self", ",", "iteration", ")", ":", "\n", "        ", "recording_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "recordings_directory", ",", "'%06d'", "%", "(", "iteration", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "recording_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "recording_directory", ")", "\n", "", "return", "recording_directory", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.logger.Logger.save_transition": [[100, 105], ["numpy.round().astype", "cv2.imwrite", "numpy.round().astype", "cv2.imwrite", "os.path.join", "os.path.join", "numpy.round", "numpy.round"], "methods", ["None"], ["", "def", "save_transition", "(", "self", ",", "iteration", ",", "transition", ")", ":", "\n", "        ", "depth_heightmap", "=", "np", ".", "round", "(", "transition", ".", "state", "*", "100000", ")", ".", "astype", "(", "np", ".", "uint16", ")", "# Save depth in 1e-5 meters", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "transitions_directory", ",", "'data'", ",", "'%06d.0.depth.png'", "%", "(", "iteration", ")", ")", ",", "depth_heightmap", ")", "\n", "next_depth_heightmap", "=", "np", ".", "round", "(", "transition", ".", "next_state", "*", "100000", ")", ".", "astype", "(", "np", ".", "uint16", ")", "# Save depth in 1e-5 meters", "\n", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "self", ".", "transitions_directory", ",", "'data'", ",", "'%06d.1.depth.png'", "%", "(", "iteration", ")", ")", ",", "next_depth_heightmap", ")", "\n", "# np.savetxt(os.path.join(self.transitions_directory, '%06d.action.txt' % (iteration)), [1 if (transition.action == 'grasp') else 0], delimiter=' ')", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.__init__": [[11, 135], ["os.listdir", "numpy.random.randint", "simulation.vrep.simxFinish", "simulation.vrep.simxStart", "robot.Robot.setup_sim_camera", "robot.Robot.add_objects", "robot.Robot.close_gripper", "robot.Robot.go_home", "Camera", "numpy.loadtxt", "numpy.loadtxt", "numpy.asarray", "len", "print", "exit", "print", "robot.Robot.restart_sim", "open", "open.readlines", "range", "open.close", "numpy.asarray", "file_content[].split", "robot.Robot.test_obj_mesh_files.append", "robot.Robot.test_obj_mesh_colors.append", "robot.Robot.test_obj_positions.append", "robot.Robot.test_obj_orientations.append", "os.path.join", "numpy.asarray", "float", "float", "float", "float", "float", "float", "float", "float", "float", "range"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxFinish", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxStart", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.setup_sim_camera", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.add_objects", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.close_gripper", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.go_home", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.restart_sim"], ["    ", "def", "__init__", "(", "self", ",", "is_sim", ",", "obj_mesh_dir", ",", "num_obj", ",", "workspace_limits", ",", "\n", "tcp_host_ip", ",", "tcp_port", ",", "rtc_host_ip", ",", "rtc_port", ",", "\n", "is_testing", ",", "test_preset_cases", ",", "test_preset_file", ")", ":", "\n", "\n", "        ", "self", ".", "is_sim", "=", "is_sim", "\n", "self", ".", "workspace_limits", "=", "workspace_limits", "\n", "\n", "# If in simulation...", "\n", "if", "self", ".", "is_sim", ":", "\n", "\n", "# Define colors for object meshes (Tableau palette)", "\n", "            ", "self", ".", "color_space", "=", "np", ".", "asarray", "(", "[", "[", "78.0", ",", "121.0", ",", "167.0", "]", ",", "# blue", "\n", "[", "89.0", ",", "161.0", ",", "79.0", "]", ",", "# green", "\n", "[", "156", ",", "117", ",", "95", "]", ",", "# brown", "\n", "[", "242", ",", "142", ",", "43", "]", ",", "# orange", "\n", "[", "237.0", ",", "201.0", ",", "72.0", "]", ",", "# yellow", "\n", "[", "186", ",", "176", ",", "172", "]", ",", "# gray", "\n", "[", "255.0", ",", "87.0", ",", "89.0", "]", ",", "# red", "\n", "[", "176", ",", "122", ",", "161", "]", ",", "# purple", "\n", "[", "118", ",", "183", ",", "178", "]", ",", "# cyan", "\n", "[", "255", ",", "157", ",", "167", "]", "]", ")", "/", "255.0", "#pink", "\n", "\n", "# Read files in object mesh directory", "\n", "self", ".", "obj_mesh_dir", "=", "obj_mesh_dir", "\n", "self", ".", "num_obj", "=", "num_obj", "\n", "self", ".", "mesh_list", "=", "os", ".", "listdir", "(", "self", ".", "obj_mesh_dir", ")", "\n", "\n", "# Randomly choose objects to add to scene", "\n", "self", ".", "obj_mesh_ind", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "mesh_list", ")", ",", "size", "=", "self", ".", "num_obj", ")", "\n", "self", ".", "obj_mesh_color", "=", "self", ".", "color_space", "[", "np", ".", "asarray", "(", "range", "(", "self", ".", "num_obj", ")", ")", "%", "10", ",", ":", "]", "\n", "\n", "# Make sure to have the server side running in V-REP:", "\n", "# in a child script of a V-REP scene, add following command", "\n", "# to be executed just once, at simulation start:", "\n", "#", "\n", "# simExtRemoteApiStart(19999)", "\n", "#", "\n", "# then start simulation, and run this program.", "\n", "#", "\n", "# IMPORTANT: for each successful call to simxStart, there", "\n", "# should be a corresponding call to simxFinish at the end!", "\n", "\n", "# MODIFY remoteApiConnections.txt", "\n", "\n", "# Connect to simulator", "\n", "vrep", ".", "simxFinish", "(", "-", "1", ")", "# Just in case, close all opened connections", "\n", "self", ".", "sim_client", "=", "vrep", ".", "simxStart", "(", "'127.0.0.1'", ",", "19997", ",", "True", ",", "True", ",", "5000", ",", "5", ")", "# Connect to V-REP on port 19997", "\n", "if", "self", ".", "sim_client", "==", "-", "1", ":", "\n", "                ", "print", "(", "'Failed to connect to simulation (V-REP remote API server). Exiting.'", ")", "\n", "exit", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Connected to simulation.'", ")", "\n", "self", ".", "restart_sim", "(", ")", "\n", "\n", "", "self", ".", "is_testing", "=", "is_testing", "\n", "self", ".", "test_preset_cases", "=", "test_preset_cases", "\n", "self", ".", "test_preset_file", "=", "test_preset_file", "\n", "\n", "# Setup virtual camera in simulation", "\n", "self", ".", "setup_sim_camera", "(", ")", "\n", "\n", "# If testing, read object meshes and poses from test case file", "\n", "if", "self", ".", "is_testing", "and", "self", ".", "test_preset_cases", ":", "\n", "                ", "file", "=", "open", "(", "self", ".", "test_preset_file", ",", "'r'", ")", "\n", "file_content", "=", "file", ".", "readlines", "(", ")", "\n", "self", ".", "test_obj_mesh_files", "=", "[", "]", "\n", "self", ".", "test_obj_mesh_colors", "=", "[", "]", "\n", "self", ".", "test_obj_positions", "=", "[", "]", "\n", "self", ".", "test_obj_orientations", "=", "[", "]", "\n", "for", "object_idx", "in", "range", "(", "self", ".", "num_obj", ")", ":", "\n", "                    ", "file_content_curr_object", "=", "file_content", "[", "object_idx", "]", ".", "split", "(", ")", "\n", "self", ".", "test_obj_mesh_files", ".", "append", "(", "os", ".", "path", ".", "join", "(", "self", ".", "obj_mesh_dir", ",", "file_content_curr_object", "[", "0", "]", ")", ")", "\n", "self", ".", "test_obj_mesh_colors", ".", "append", "(", "[", "float", "(", "file_content_curr_object", "[", "1", "]", ")", ",", "float", "(", "file_content_curr_object", "[", "2", "]", ")", ",", "float", "(", "file_content_curr_object", "[", "3", "]", ")", "]", ")", "\n", "self", ".", "test_obj_positions", ".", "append", "(", "[", "float", "(", "file_content_curr_object", "[", "4", "]", ")", ",", "float", "(", "file_content_curr_object", "[", "5", "]", ")", ",", "float", "(", "file_content_curr_object", "[", "6", "]", ")", "]", ")", "\n", "self", ".", "test_obj_orientations", ".", "append", "(", "[", "float", "(", "file_content_curr_object", "[", "7", "]", ")", ",", "float", "(", "file_content_curr_object", "[", "8", "]", ")", ",", "float", "(", "file_content_curr_object", "[", "9", "]", ")", "]", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "self", ".", "obj_mesh_color", "=", "np", ".", "asarray", "(", "self", ".", "test_obj_mesh_colors", ")", "\n", "\n", "# Add objects to simulation environment", "\n", "", "self", ".", "add_objects", "(", ")", "\n", "\n", "\n", "# If in real-settings...", "\n", "", "else", ":", "\n", "\n", "# Connect to robot client", "\n", "            ", "self", ".", "tcp_host_ip", "=", "tcp_host_ip", "\n", "self", ".", "tcp_port", "=", "tcp_port", "\n", "# self.tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)", "\n", "\n", "# Connect as real-time client to parse state data", "\n", "self", ".", "rtc_host_ip", "=", "rtc_host_ip", "\n", "self", ".", "rtc_port", "=", "rtc_port", "\n", "\n", "# Default home joint configuration", "\n", "# self.home_joint_config = [-np.pi, -np.pi/2, np.pi/2, -np.pi/2, -np.pi/2, 0]", "\n", "self", ".", "home_joint_config", "=", "[", "-", "(", "180.0", "/", "360.0", ")", "*", "2", "*", "np", ".", "pi", ",", "-", "(", "84.2", "/", "360.0", ")", "*", "2", "*", "np", ".", "pi", ",", "(", "112.8", "/", "360.0", ")", "*", "2", "*", "np", ".", "pi", ",", "-", "(", "119.7", "/", "360.0", ")", "*", "2", "*", "np", ".", "pi", ",", "-", "(", "90.0", "/", "360.0", ")", "*", "2", "*", "np", ".", "pi", ",", "0.0", "]", "\n", "\n", "# Default joint speed configuration", "\n", "self", ".", "joint_acc", "=", "8", "# Safe: 1.4", "\n", "self", ".", "joint_vel", "=", "3", "# Safe: 1.05", "\n", "\n", "# Joint tolerance for blocking calls", "\n", "self", ".", "joint_tolerance", "=", "0.01", "\n", "\n", "# Default tool speed configuration", "\n", "self", ".", "tool_acc", "=", "1.2", "# Safe: 0.5", "\n", "self", ".", "tool_vel", "=", "0.25", "# Safe: 0.2", "\n", "\n", "# Tool pose tolerance for blocking calls", "\n", "self", ".", "tool_pose_tolerance", "=", "[", "0.002", ",", "0.002", ",", "0.002", ",", "0.01", ",", "0.01", ",", "0.01", "]", "\n", "\n", "# Move robot to home pose", "\n", "self", ".", "close_gripper", "(", ")", "\n", "self", ".", "go_home", "(", ")", "\n", "\n", "# Fetch RGB-D data from RealSense camera", "\n", "from", "real", ".", "camera", "import", "Camera", "\n", "self", ".", "camera", "=", "Camera", "(", ")", "\n", "self", ".", "cam_intrinsics", "=", "self", ".", "camera", ".", "intrinsics", "\n", "\n", "# Load camera pose (from running calibrate.py), intrinsics and depth scale", "\n", "self", ".", "cam_pose", "=", "np", ".", "loadtxt", "(", "'real/camera_pose.txt'", ",", "delimiter", "=", "' '", ")", "\n", "self", ".", "cam_depth_scale", "=", "np", ".", "loadtxt", "(", "'real/camera_depth_scale.txt'", ",", "delimiter", "=", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.setup_sim_camera": [[137, 157], ["simulation.vrep.simxGetObjectHandle", "simulation.vrep.simxGetObjectPosition", "simulation.vrep.simxGetObjectOrientation", "numpy.eye", "numpy.asarray", "numpy.eye", "numpy.linalg.inv", "numpy.dot", "numpy.asarray", "robot.Robot.get_camera_data", "utils.euler2rotm"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectHandle", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectOrientation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_camera_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.euler2rotm"], ["", "", "def", "setup_sim_camera", "(", "self", ")", ":", "\n", "\n", "# Get handle to camera", "\n", "        ", "sim_ret", ",", "self", ".", "cam_handle", "=", "vrep", ".", "simxGetObjectHandle", "(", "self", ".", "sim_client", ",", "'Vision_sensor_persp'", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "\n", "# Get camera pose and intrinsics in simulation", "\n", "sim_ret", ",", "cam_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "cam_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "sim_ret", ",", "cam_orientation", "=", "vrep", ".", "simxGetObjectOrientation", "(", "self", ".", "sim_client", ",", "self", ".", "cam_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "cam_trans", "=", "np", ".", "eye", "(", "4", ",", "4", ")", "\n", "cam_trans", "[", "0", ":", "3", ",", "3", "]", "=", "np", ".", "asarray", "(", "cam_position", ")", "\n", "cam_orientation", "=", "[", "-", "cam_orientation", "[", "0", "]", ",", "-", "cam_orientation", "[", "1", "]", ",", "-", "cam_orientation", "[", "2", "]", "]", "\n", "cam_rotm", "=", "np", ".", "eye", "(", "4", ",", "4", ")", "\n", "cam_rotm", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "np", ".", "linalg", ".", "inv", "(", "utils", ".", "euler2rotm", "(", "cam_orientation", ")", ")", "\n", "self", ".", "cam_pose", "=", "np", ".", "dot", "(", "cam_trans", ",", "cam_rotm", ")", "# Compute rigid transformation representating camera pose", "\n", "self", ".", "cam_intrinsics", "=", "np", ".", "asarray", "(", "[", "[", "618.62", ",", "0", ",", "320", "]", ",", "[", "0", ",", "618.62", ",", "240", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "self", ".", "cam_depth_scale", "=", "1", "\n", "\n", "# Get background image", "\n", "self", ".", "bg_color_img", ",", "self", ".", "bg_depth_img", "=", "self", ".", "get_camera_data", "(", ")", "\n", "self", ".", "bg_depth_img", "=", "self", ".", "bg_depth_img", "*", "self", ".", "cam_depth_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.add_objects": [[159, 187], ["range", "len", "os.path.join", "simulation.vrep.simxCallScriptFunction", "robot.Robot.object_handles.append", "bytearray", "print", "exit", "time.sleep", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxCallScriptFunction"], ["", "def", "add_objects", "(", "self", ")", ":", "\n", "\n", "# Add each object to robot workspace at x,y location and orientation (random or pre-loaded)", "\n", "        ", "self", ".", "object_handles", "=", "[", "]", "\n", "sim_obj_handles", "=", "[", "]", "\n", "for", "object_idx", "in", "range", "(", "len", "(", "self", ".", "obj_mesh_ind", ")", ")", ":", "\n", "            ", "curr_mesh_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "obj_mesh_dir", ",", "self", ".", "mesh_list", "[", "self", ".", "obj_mesh_ind", "[", "object_idx", "]", "]", ")", "\n", "if", "self", ".", "is_testing", "and", "self", ".", "test_preset_cases", ":", "\n", "                ", "curr_mesh_file", "=", "self", ".", "test_obj_mesh_files", "[", "object_idx", "]", "\n", "", "curr_shape_name", "=", "'shape_%02d'", "%", "object_idx", "\n", "drop_x", "=", "(", "self", ".", "workspace_limits", "[", "0", "]", "[", "1", "]", "-", "self", ".", "workspace_limits", "[", "0", "]", "[", "0", "]", "-", "0.2", ")", "*", "np", ".", "random", ".", "random_sample", "(", ")", "+", "self", ".", "workspace_limits", "[", "0", "]", "[", "0", "]", "+", "0.1", "\n", "drop_y", "=", "(", "self", ".", "workspace_limits", "[", "1", "]", "[", "1", "]", "-", "self", ".", "workspace_limits", "[", "1", "]", "[", "0", "]", "-", "0.2", ")", "*", "np", ".", "random", ".", "random_sample", "(", ")", "+", "self", ".", "workspace_limits", "[", "1", "]", "[", "0", "]", "+", "0.1", "\n", "object_position", "=", "[", "drop_x", ",", "drop_y", ",", "0.15", "]", "\n", "object_orientation", "=", "[", "2", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", ",", "2", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", ",", "2", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", "]", "\n", "if", "self", ".", "is_testing", "and", "self", ".", "test_preset_cases", ":", "\n", "                ", "object_position", "=", "[", "self", ".", "test_obj_positions", "[", "object_idx", "]", "[", "0", "]", ",", "self", ".", "test_obj_positions", "[", "object_idx", "]", "[", "1", "]", ",", "self", ".", "test_obj_positions", "[", "object_idx", "]", "[", "2", "]", "]", "\n", "object_orientation", "=", "[", "self", ".", "test_obj_orientations", "[", "object_idx", "]", "[", "0", "]", ",", "self", ".", "test_obj_orientations", "[", "object_idx", "]", "[", "1", "]", ",", "self", ".", "test_obj_orientations", "[", "object_idx", "]", "[", "2", "]", "]", "\n", "", "object_color", "=", "[", "self", ".", "obj_mesh_color", "[", "object_idx", "]", "[", "0", "]", ",", "self", ".", "obj_mesh_color", "[", "object_idx", "]", "[", "1", "]", ",", "self", ".", "obj_mesh_color", "[", "object_idx", "]", "[", "2", "]", "]", "\n", "ret_resp", ",", "ret_ints", ",", "ret_floats", ",", "ret_strings", ",", "ret_buffer", "=", "vrep", ".", "simxCallScriptFunction", "(", "self", ".", "sim_client", ",", "'remoteApiCommandServer'", ",", "vrep", ".", "sim_scripttype_childscript", ",", "'importShape'", ",", "[", "0", ",", "0", ",", "255", ",", "0", "]", ",", "object_position", "+", "object_orientation", "+", "object_color", ",", "[", "curr_mesh_file", ",", "curr_shape_name", "]", ",", "bytearray", "(", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "if", "ret_resp", "==", "8", ":", "\n", "                ", "print", "(", "'Failed to add new objects to simulation. Please restart.'", ")", "\n", "exit", "(", ")", "\n", "", "curr_shape_handle", "=", "ret_ints", "[", "0", "]", "\n", "self", ".", "object_handles", ".", "append", "(", "curr_shape_handle", ")", "\n", "if", "not", "(", "self", ".", "is_testing", "and", "self", ".", "test_preset_cases", ")", ":", "\n", "                ", "time", ".", "sleep", "(", "2", ")", "\n", "", "", "self", ".", "prev_obj_positions", "=", "[", "]", "\n", "self", ".", "obj_positions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.restart_sim": [[189, 203], ["simulation.vrep.simxGetObjectHandle", "simulation.vrep.simxSetObjectPosition", "simulation.vrep.simxStopSimulation", "simulation.vrep.simxStartSimulation", "time.sleep", "simulation.vrep.simxGetObjectHandle", "simulation.vrep.simxGetObjectPosition", "simulation.vrep.simxStopSimulation", "simulation.vrep.simxStartSimulation", "time.sleep", "simulation.vrep.simxGetObjectPosition"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectHandle", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxStopSimulation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxStartSimulation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectHandle", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxStopSimulation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxStartSimulation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition"], ["", "def", "restart_sim", "(", "self", ")", ":", "\n", "\n", "        ", "sim_ret", ",", "self", ".", "UR5_target_handle", "=", "vrep", ".", "simxGetObjectHandle", "(", "self", ".", "sim_client", ",", "'UR5_target'", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "-", "0.5", ",", "0", ",", "0.3", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxStopSimulation", "(", "self", ".", "sim_client", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxStartSimulation", "(", "self", ".", "sim_client", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "sim_ret", ",", "self", ".", "RG2_tip_handle", "=", "vrep", ".", "simxGetObjectHandle", "(", "self", ".", "sim_client", ",", "'UR5_tip'", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "sim_ret", ",", "gripper_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "RG2_tip_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "while", "gripper_position", "[", "2", "]", ">", "0.4", ":", "# V-REP bug requiring multiple starts and stops to restart", "\n", "            ", "vrep", ".", "simxStopSimulation", "(", "self", ".", "sim_client", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxStartSimulation", "(", "self", ".", "sim_client", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "sim_ret", ",", "gripper_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "RG2_tip_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.check_sim": [[205, 214], ["simulation.vrep.simxGetObjectPosition", "print", "robot.Robot.restart_sim", "robot.Robot.add_objects"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.restart_sim", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.add_objects"], ["", "", "def", "check_sim", "(", "self", ")", ":", "\n", "\n", "# Check if simulation is stable by checking if gripper is within workspace", "\n", "        ", "sim_ret", ",", "gripper_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "RG2_tip_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "sim_ok", "=", "gripper_position", "[", "0", "]", ">", "self", ".", "workspace_limits", "[", "0", "]", "[", "0", "]", "-", "0.1", "and", "gripper_position", "[", "0", "]", "<", "self", ".", "workspace_limits", "[", "0", "]", "[", "1", "]", "+", "0.1", "and", "gripper_position", "[", "1", "]", ">", "self", ".", "workspace_limits", "[", "1", "]", "[", "0", "]", "-", "0.1", "and", "gripper_position", "[", "1", "]", "<", "self", ".", "workspace_limits", "[", "1", "]", "[", "1", "]", "+", "0.1", "and", "gripper_position", "[", "2", "]", ">", "self", ".", "workspace_limits", "[", "2", "]", "[", "0", "]", "and", "gripper_position", "[", "2", "]", "<", "self", ".", "workspace_limits", "[", "2", "]", "[", "1", "]", "\n", "if", "not", "sim_ok", ":", "\n", "            ", "print", "(", "'Simulation unstable. Restarting environment.'", ")", "\n", "self", ".", "restart_sim", "(", ")", "\n", "self", ".", "add_objects", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_task_score": [[216, 234], ["numpy.asarray", "numpy.asarray", "numpy.tile", "numpy.tile", "numpy.sqrt", "numpy.argmin", "numpy.sum", "robot.Robot.get_obj_positions", "numpy.sum", "numpy.power", "numpy.asarray", "range"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_obj_positions"], ["", "", "def", "get_task_score", "(", "self", ")", ":", "\n", "\n", "        ", "key_positions", "=", "np", ".", "asarray", "(", "[", "[", "-", "0.625", ",", "0.125", ",", "0.0", "]", ",", "# red", "\n", "[", "-", "0.625", ",", "-", "0.125", ",", "0.0", "]", ",", "# blue", "\n", "[", "-", "0.375", ",", "0.125", ",", "0.0", "]", ",", "# green", "\n", "[", "-", "0.375", ",", "-", "0.125", ",", "0.0", "]", "]", ")", "#yellow", "\n", "\n", "obj_positions", "=", "np", ".", "asarray", "(", "self", ".", "get_obj_positions", "(", ")", ")", "\n", "obj_positions", ".", "shape", "=", "(", "1", ",", "obj_positions", ".", "shape", "[", "0", "]", ",", "obj_positions", ".", "shape", "[", "1", "]", ")", "\n", "obj_positions", "=", "np", ".", "tile", "(", "obj_positions", ",", "(", "key_positions", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "\n", "key_positions", ".", "shape", "=", "(", "key_positions", ".", "shape", "[", "0", "]", ",", "1", ",", "key_positions", ".", "shape", "[", "1", "]", ")", "\n", "key_positions", "=", "np", ".", "tile", "(", "key_positions", ",", "(", "1", ",", "obj_positions", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "\n", "key_dist", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "obj_positions", "-", "key_positions", ",", "2", ")", ",", "axis", "=", "2", ")", ")", "\n", "key_nn_idx", "=", "np", ".", "argmin", "(", "key_dist", ",", "axis", "=", "0", ")", "\n", "\n", "return", "np", ".", "sum", "(", "key_nn_idx", "==", "np", ".", "asarray", "(", "range", "(", "self", ".", "num_obj", ")", ")", "%", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.check_goal_reached": [[236, 240], ["robot.Robot.get_task_score"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_task_score"], ["", "def", "check_goal_reached", "(", "self", ")", ":", "\n", "\n", "        ", "goal_reached", "=", "self", ".", "get_task_score", "(", ")", "==", "self", ".", "num_obj", "\n", "return", "goal_reached", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_obj_positions": [[260, 268], ["simulation.vrep.simxGetObjectPosition", "obj_positions.append"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition"], ["", "def", "get_obj_positions", "(", "self", ")", ":", "\n", "\n", "        ", "obj_positions", "=", "[", "]", "\n", "for", "object_handle", "in", "self", ".", "object_handles", ":", "\n", "            ", "sim_ret", ",", "object_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "object_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "obj_positions", ".", "append", "(", "object_position", ")", "\n", "\n", "", "return", "obj_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_obj_positions_and_orientations": [[269, 280], ["simulation.vrep.simxGetObjectPosition", "simulation.vrep.simxGetObjectOrientation", "obj_positions.append", "obj_orientations.append"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectOrientation"], ["", "def", "get_obj_positions_and_orientations", "(", "self", ")", ":", "\n", "\n", "        ", "obj_positions", "=", "[", "]", "\n", "obj_orientations", "=", "[", "]", "\n", "for", "object_handle", "in", "self", ".", "object_handles", ":", "\n", "            ", "sim_ret", ",", "object_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "object_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "sim_ret", ",", "object_orientation", "=", "vrep", ".", "simxGetObjectOrientation", "(", "self", ".", "sim_client", ",", "object_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "obj_positions", ".", "append", "(", "object_position", ")", "\n", "obj_orientations", ".", "append", "(", "object_orientation", ")", "\n", "\n", "", "return", "obj_positions", ",", "obj_orientations", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.reposition_objects": [[282, 300], ["robot.Robot.move_to", "simulation.vrep.simxSetObjectPosition", "simulation.vrep.simxSetObjectOrientation", "time.sleep", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample", "numpy.random.random_sample"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_to", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectOrientation"], ["", "def", "reposition_objects", "(", "self", ",", "workspace_limits", ")", ":", "\n", "\n", "# Move gripper out of the way", "\n", "        ", "self", ".", "move_to", "(", "[", "-", "0.1", ",", "0", ",", "0.3", "]", ",", "None", ")", "\n", "# sim_ret, UR5_target_handle = vrep.simxGetObjectHandle(self.sim_client,'UR5_target',vrep.simx_opmode_blocking)", "\n", "# vrep.simxSetObjectPosition(self.sim_client, UR5_target_handle, -1, (-0.5,0,0.3), vrep.simx_opmode_blocking)", "\n", "# time.sleep(1)", "\n", "\n", "for", "object_handle", "in", "self", ".", "object_handles", ":", "\n", "\n", "# Drop object at random x,y location and random orientation in robot workspace", "\n", "            ", "drop_x", "=", "(", "workspace_limits", "[", "0", "]", "[", "1", "]", "-", "workspace_limits", "[", "0", "]", "[", "0", "]", "-", "0.2", ")", "*", "np", ".", "random", ".", "random_sample", "(", ")", "+", "workspace_limits", "[", "0", "]", "[", "0", "]", "+", "0.1", "\n", "drop_y", "=", "(", "workspace_limits", "[", "1", "]", "[", "1", "]", "-", "workspace_limits", "[", "1", "]", "[", "0", "]", "-", "0.2", ")", "*", "np", ".", "random", ".", "random_sample", "(", ")", "+", "workspace_limits", "[", "1", "]", "[", "0", "]", "+", "0.1", "\n", "object_position", "=", "[", "drop_x", ",", "drop_y", ",", "0.15", "]", "\n", "object_orientation", "=", "[", "2", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", ",", "2", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", ",", "2", "*", "np", ".", "pi", "*", "np", ".", "random", ".", "random_sample", "(", ")", "]", "\n", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "object_handle", ",", "-", "1", ",", "object_position", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetObjectOrientation", "(", "self", ".", "sim_client", ",", "object_handle", ",", "-", "1", ",", "object_orientation", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_camera_data": [[302, 332], ["simulation.vrep.simxGetVisionSensorImage", "numpy.asarray", "numpy.fliplr", "color_img.astype.astype.astype", "simulation.vrep.simxGetVisionSensorDepthBuffer", "numpy.asarray", "numpy.fliplr", "robot.Robot.camera.get_data", "color_img.astype.astype.astype"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetVisionSensorImage", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetVisionSensorDepthBuffer", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.real.camera.Camera.get_data"], ["", "", "def", "get_camera_data", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_sim", ":", "\n", "\n", "# Get color image from simulation", "\n", "            ", "sim_ret", ",", "resolution", ",", "raw_image", "=", "vrep", ".", "simxGetVisionSensorImage", "(", "self", ".", "sim_client", ",", "self", ".", "cam_handle", ",", "0", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "color_img", "=", "np", ".", "asarray", "(", "raw_image", ")", "\n", "color_img", ".", "shape", "=", "(", "resolution", "[", "1", "]", ",", "resolution", "[", "0", "]", ",", "3", ")", "\n", "color_img", "=", "color_img", ".", "astype", "(", "np", ".", "float", ")", "/", "255", "\n", "color_img", "[", "color_img", "<", "0", "]", "+=", "1", "\n", "color_img", "*=", "255", "\n", "color_img", "=", "np", ".", "fliplr", "(", "color_img", ")", "\n", "color_img", "=", "color_img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "# Get depth image from simulation", "\n", "sim_ret", ",", "resolution", ",", "depth_buffer", "=", "vrep", ".", "simxGetVisionSensorDepthBuffer", "(", "self", ".", "sim_client", ",", "self", ".", "cam_handle", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "depth_img", "=", "np", ".", "asarray", "(", "depth_buffer", ")", "\n", "depth_img", ".", "shape", "=", "(", "resolution", "[", "1", "]", ",", "resolution", "[", "0", "]", ")", "\n", "depth_img", "=", "np", ".", "fliplr", "(", "depth_img", ")", "\n", "zNear", "=", "0.01", "\n", "zFar", "=", "10", "\n", "depth_img", "=", "depth_img", "*", "(", "zFar", "-", "zNear", ")", "+", "zNear", "\n", "\n", "", "else", ":", "\n", "# Get color and depth image from ROS service", "\n", "            ", "color_img", ",", "depth_img", "=", "self", ".", "camera", ".", "get_data", "(", ")", "\n", "# color_img = self.camera.color_data.copy()", "\n", "# depth_img = self.camera.depth_data.copy()", "\n", "\n", "", "return", "color_img", ",", "depth_img", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data": [[334, 379], ["bytearray", "bytearray.extend", "struct.unpack", "range", "range", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack", "struct.unpack"], "methods", ["None"], ["", "def", "parse_tcp_state_data", "(", "self", ",", "state_data", ",", "subpackage", ")", ":", "\n", "\n", "# Read package header", "\n", "        ", "data_bytes", "=", "bytearray", "(", ")", "\n", "data_bytes", ".", "extend", "(", "state_data", ")", "\n", "data_length", "=", "struct", ".", "unpack", "(", "\"!i\"", ",", "data_bytes", "[", "0", ":", "4", "]", ")", "[", "0", "]", ";", "\n", "robot_message_type", "=", "data_bytes", "[", "4", "]", "\n", "assert", "(", "robot_message_type", "==", "16", ")", "\n", "byte_idx", "=", "5", "\n", "\n", "# Parse sub-packages", "\n", "subpackage_types", "=", "{", "'joint_data'", ":", "1", ",", "'cartesian_info'", ":", "4", ",", "'force_mode_data'", ":", "7", ",", "'tool_data'", ":", "2", "}", "\n", "while", "byte_idx", "<", "data_length", ":", "\n", "# package_length = int.from_bytes(data_bytes[byte_idx:(byte_idx+4)], byteorder='big', signed=False)", "\n", "            ", "package_length", "=", "struct", ".", "unpack", "(", "\"!i\"", ",", "data_bytes", "[", "byte_idx", ":", "(", "byte_idx", "+", "4", ")", "]", ")", "[", "0", "]", "\n", "byte_idx", "+=", "4", "\n", "package_idx", "=", "data_bytes", "[", "byte_idx", "]", "\n", "if", "package_idx", "==", "subpackage_types", "[", "subpackage", "]", ":", "\n", "                ", "byte_idx", "+=", "1", "\n", "break", "\n", "", "byte_idx", "+=", "package_length", "-", "4", "\n", "\n", "", "def", "parse_joint_data", "(", "data_bytes", ",", "byte_idx", ")", ":", "\n", "            ", "actual_joint_positions", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "target_joint_positions", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "for", "joint_idx", "in", "range", "(", "6", ")", ":", "\n", "                ", "actual_joint_positions", "[", "joint_idx", "]", "=", "struct", ".", "unpack", "(", "'!d'", ",", "data_bytes", "[", "(", "byte_idx", "+", "0", ")", ":", "(", "byte_idx", "+", "8", ")", "]", ")", "[", "0", "]", "\n", "target_joint_positions", "[", "joint_idx", "]", "=", "struct", ".", "unpack", "(", "'!d'", ",", "data_bytes", "[", "(", "byte_idx", "+", "8", ")", ":", "(", "byte_idx", "+", "16", ")", "]", ")", "[", "0", "]", "\n", "byte_idx", "+=", "41", "\n", "", "return", "actual_joint_positions", "\n", "\n", "", "def", "parse_cartesian_info", "(", "data_bytes", ",", "byte_idx", ")", ":", "\n", "            ", "actual_tool_pose", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "for", "pose_value_idx", "in", "range", "(", "6", ")", ":", "\n", "                ", "actual_tool_pose", "[", "pose_value_idx", "]", "=", "struct", ".", "unpack", "(", "'!d'", ",", "data_bytes", "[", "(", "byte_idx", "+", "0", ")", ":", "(", "byte_idx", "+", "8", ")", "]", ")", "[", "0", "]", "\n", "byte_idx", "+=", "8", "\n", "", "return", "actual_tool_pose", "\n", "\n", "", "def", "parse_tool_data", "(", "data_bytes", ",", "byte_idx", ")", ":", "\n", "            ", "byte_idx", "+=", "2", "\n", "tool_analog_input2", "=", "struct", ".", "unpack", "(", "'!d'", ",", "data_bytes", "[", "(", "byte_idx", "+", "0", ")", ":", "(", "byte_idx", "+", "8", ")", "]", ")", "[", "0", "]", "\n", "return", "tool_analog_input2", "\n", "\n", "", "parse_functions", "=", "{", "'joint_data'", ":", "parse_joint_data", ",", "'cartesian_info'", ":", "parse_cartesian_info", ",", "'tool_data'", ":", "parse_tool_data", "}", "\n", "return", "parse_functions", "[", "subpackage", "]", "(", "data_bytes", ",", "byte_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_rtc_state_data": [[380, 394], ["bytearray", "bytearray.extend", "range", "struct.unpack", "struct.unpack"], "methods", ["None"], ["", "def", "parse_rtc_state_data", "(", "self", ",", "state_data", ")", ":", "\n", "\n", "# Read package header", "\n", "        ", "data_bytes", "=", "bytearray", "(", ")", "\n", "data_bytes", ".", "extend", "(", "state_data", ")", "\n", "data_length", "=", "struct", ".", "unpack", "(", "\"!i\"", ",", "data_bytes", "[", "0", ":", "4", "]", ")", "[", "0", "]", ";", "\n", "assert", "(", "data_length", "==", "812", ")", "\n", "byte_idx", "=", "4", "+", "8", "+", "8", "*", "48", "+", "24", "+", "120", "\n", "TCP_forces", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "for", "joint_idx", "in", "range", "(", "6", ")", ":", "\n", "            ", "TCP_forces", "[", "joint_idx", "]", "=", "struct", ".", "unpack", "(", "'!d'", ",", "data_bytes", "[", "(", "byte_idx", "+", "0", ")", ":", "(", "byte_idx", "+", "8", ")", "]", ")", "[", "0", "]", "\n", "byte_idx", "+=", "8", "\n", "\n", "", "return", "TCP_forces", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.close_gripper": [[396, 427], ["simulation.vrep.simxGetObjectHandle", "simulation.vrep.simxGetJointPosition", "simulation.vrep.simxSetJointForce", "simulation.vrep.simxSetJointTargetVelocity", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.close", "simulation.vrep.simxGetJointPosition", "str.encode", "time.sleep", "robot.Robot.check_grasp"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectHandle", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetJointPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetJointForce", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetJointTargetVelocity", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetJointPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.check_grasp"], ["", "def", "close_gripper", "(", "self", ",", "asynch", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_sim", ":", "\n", "            ", "gripper_motor_velocity", "=", "-", "0.5", "\n", "gripper_motor_force", "=", "100", "\n", "sim_ret", ",", "RG2_gripper_handle", "=", "vrep", ".", "simxGetObjectHandle", "(", "self", ".", "sim_client", ",", "'RG2_openCloseJoint'", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "sim_ret", ",", "gripper_joint_position", "=", "vrep", ".", "simxGetJointPosition", "(", "self", ".", "sim_client", ",", "RG2_gripper_handle", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetJointForce", "(", "self", ".", "sim_client", ",", "RG2_gripper_handle", ",", "gripper_motor_force", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetJointTargetVelocity", "(", "self", ".", "sim_client", ",", "RG2_gripper_handle", ",", "gripper_motor_velocity", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "gripper_fully_closed", "=", "False", "\n", "while", "gripper_joint_position", ">", "-", "0.045", ":", "# Block until gripper is fully closed", "\n", "                ", "sim_ret", ",", "new_gripper_joint_position", "=", "vrep", ".", "simxGetJointPosition", "(", "self", ".", "sim_client", ",", "RG2_gripper_handle", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "# print(gripper_joint_position)", "\n", "if", "new_gripper_joint_position", ">=", "gripper_joint_position", ":", "\n", "                    ", "return", "gripper_fully_closed", "\n", "", "gripper_joint_position", "=", "new_gripper_joint_position", "\n", "", "gripper_fully_closed", "=", "True", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"set_digital_out(8,True)\\n\"", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "if", "asynch", ":", "\n", "                ", "gripper_fully_closed", "=", "True", "\n", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "1.5", ")", "\n", "gripper_fully_closed", "=", "self", ".", "check_grasp", "(", ")", "\n", "\n", "", "", "return", "gripper_fully_closed", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.open_gripper": [[428, 448], ["simulation.vrep.simxGetObjectHandle", "simulation.vrep.simxGetJointPosition", "simulation.vrep.simxSetJointForce", "simulation.vrep.simxSetJointTargetVelocity", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.close", "simulation.vrep.simxGetJointPosition", "str.encode", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectHandle", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetJointPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetJointForce", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetJointTargetVelocity", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetJointPosition"], ["", "def", "open_gripper", "(", "self", ",", "asynch", "=", "False", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_sim", ":", "\n", "            ", "gripper_motor_velocity", "=", "0.5", "\n", "gripper_motor_force", "=", "20", "\n", "sim_ret", ",", "RG2_gripper_handle", "=", "vrep", ".", "simxGetObjectHandle", "(", "self", ".", "sim_client", ",", "'RG2_openCloseJoint'", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "sim_ret", ",", "gripper_joint_position", "=", "vrep", ".", "simxGetJointPosition", "(", "self", ".", "sim_client", ",", "RG2_gripper_handle", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetJointForce", "(", "self", ".", "sim_client", ",", "RG2_gripper_handle", ",", "gripper_motor_force", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetJointTargetVelocity", "(", "self", ".", "sim_client", ",", "RG2_gripper_handle", ",", "gripper_motor_velocity", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "while", "gripper_joint_position", "<", "0.03", ":", "# Block until gripper is fully open", "\n", "                ", "sim_ret", ",", "gripper_joint_position", "=", "vrep", ".", "simxGetJointPosition", "(", "self", ".", "sim_client", ",", "RG2_gripper_handle", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"set_digital_out(8,False)\\n\"", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "if", "not", "asynch", ":", "\n", "                ", "time", ".", "sleep", "(", "1.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state": [[450, 457], ["socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.recv", "robot.Robot.tcp_socket.close"], "methods", ["None"], ["", "", "", "def", "get_state", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "state_data", "=", "self", ".", "tcp_socket", ".", "recv", "(", "2048", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "return", "state_data", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_to": [[459, 494], ["simulation.vrep.simxGetObjectPosition", "numpy.asarray", "numpy.linalg.norm", "int", "range", "simulation.vrep.simxSetObjectPosition", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.recv", "robot.Robot.parse_tcp_state_data", "robot.Robot.tcp_socket.close", "numpy.floor", "simulation.vrep.simxSetObjectPosition", "simulation.vrep.simxGetObjectPosition", "str.encode", "all", "robot.Robot.tcp_socket.recv", "numpy.asarray().copy", "robot.Robot.parse_tcp_state_data", "time.sleep", "numpy.asarray", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data"], ["", "def", "move_to", "(", "self", ",", "tool_position", ",", "tool_orientation", ")", ":", "\n", "\n", "        ", "if", "self", ".", "is_sim", ":", "\n", "\n", "# sim_ret, UR5_target_handle = vrep.simxGetObjectHandle(self.sim_client,'UR5_target',vrep.simx_opmode_blocking)", "\n", "            ", "sim_ret", ",", "UR5_target_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "\n", "move_direction", "=", "np", ".", "asarray", "(", "[", "tool_position", "[", "0", "]", "-", "UR5_target_position", "[", "0", "]", ",", "tool_position", "[", "1", "]", "-", "UR5_target_position", "[", "1", "]", ",", "tool_position", "[", "2", "]", "-", "UR5_target_position", "[", "2", "]", "]", ")", "\n", "move_magnitude", "=", "np", ".", "linalg", ".", "norm", "(", "move_direction", ")", "\n", "move_step", "=", "0.02", "*", "move_direction", "/", "move_magnitude", "\n", "num_move_steps", "=", "int", "(", "np", ".", "floor", "(", "move_magnitude", "/", "0.02", ")", ")", "\n", "\n", "for", "step_iter", "in", "range", "(", "num_move_steps", ")", ":", "\n", "                ", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "UR5_target_position", "[", "0", "]", "+", "move_step", "[", "0", "]", ",", "UR5_target_position", "[", "1", "]", "+", "move_step", "[", "1", "]", ",", "UR5_target_position", "[", "2", "]", "+", "move_step", "[", "2", "]", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "sim_ret", ",", "UR5_target_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "tool_position", "[", "0", "]", ",", "tool_position", "[", "1", "]", ",", "tool_position", "[", "2", "]", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"movel(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0)\\n\"", "%", "(", "tool_position", "[", "0", "]", ",", "tool_position", "[", "1", "]", ",", "tool_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "tool_acc", ",", "self", ".", "tool_vel", ")", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "\n", "# Block until robot reaches target tool position", "\n", "tcp_state_data", "=", "self", ".", "tcp_socket", ".", "recv", "(", "2048", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "tcp_state_data", ",", "'cartesian_info'", ")", "\n", "while", "not", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "tool_position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "# [min(np.abs(actual_tool_pose[j] - tool_orientation[j-3]), np.abs(np.abs(actual_tool_pose[j] - tool_orientation[j-3]) - np.pi*2)) < self.tool_pose_tolerance[j] for j in range(3,6)]", "\n", "# print([np.abs(actual_tool_pose[j] - tool_position[j]) for j in range(3)] + [min(np.abs(actual_tool_pose[j] - tool_orientation[j-3]), np.abs(np.abs(actual_tool_pose[j] - tool_orientation[j-3]) - np.pi*2)) for j in range(3,6)])", "\n", "                ", "tcp_state_data", "=", "self", ".", "tcp_socket", ".", "recv", "(", "2048", ")", "\n", "prev_actual_tool_pose", "=", "np", ".", "asarray", "(", "actual_tool_pose", ")", ".", "copy", "(", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "tcp_state_data", ",", "'cartesian_info'", ")", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.guarded_move_to": [[495, 557], ["socket.socket", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.rtc_socket.connect", "robot.Robot.tcp_socket.recv", "robot.Robot.parse_tcp_state_data", "robot.Robot.tcp_socket.close", "robot.Robot.rtc_socket.close", "all", "numpy.asarray", "robot.Robot.tcp_socket.send", "time.time", "robot.Robot.tcp_socket.recv", "robot.Robot.parse_tcp_state_data", "robot.Robot.rtc_socket.recv", "robot.Robot.parse_rtc_state_data", "time.sleep", "numpy.linalg.norm", "str.encode", "all", "robot.Robot.tcp_socket.recv", "robot.Robot.parse_tcp_state_data", "time.time", "time.sleep", "print", "numpy.linalg.norm", "numpy.asarray", "numpy.linalg.norm", "numpy.abs", "range", "range", "numpy.asarray", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_rtc_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data"], ["", "", "def", "guarded_move_to", "(", "self", ",", "tool_position", ",", "tool_orientation", ")", ":", "\n", "\n", "        ", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "rtc_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "self", ".", "rtc_socket", ".", "connect", "(", "(", "self", ".", "rtc_host_ip", ",", "self", ".", "rtc_port", ")", ")", "\n", "\n", "# Read actual tool position", "\n", "tcp_state_data", "=", "self", ".", "tcp_socket", ".", "recv", "(", "2048", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "tcp_state_data", ",", "'cartesian_info'", ")", "\n", "execute_success", "=", "True", "\n", "\n", "# Increment every cm, check force", "\n", "self", ".", "tool_acc", "=", "0.1", "# 1.2 # 0.5", "\n", "\n", "while", "not", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "tool_position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "# [min(np.abs(actual_tool_pose[j] - tool_orientation[j-3]), np.abs(np.abs(actual_tool_pose[j] - tool_orientation[j-3]) - np.pi*2)) < self.tool_pose_tolerance[j] for j in range(3,6)]", "\n", "\n", "# Compute motion trajectory in 1cm increments", "\n", "            ", "increment", "=", "np", ".", "asarray", "(", "[", "(", "tool_position", "[", "j", "]", "-", "actual_tool_pose", "[", "j", "]", ")", "for", "j", "in", "range", "(", "3", ")", "]", ")", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "increment", ")", "<", "0.01", ":", "\n", "                ", "increment_position", "=", "tool_position", "\n", "", "else", ":", "\n", "                ", "increment", "=", "0.01", "*", "increment", "/", "np", ".", "linalg", ".", "norm", "(", "increment", ")", "\n", "increment_position", "=", "np", ".", "asarray", "(", "actual_tool_pose", "[", "0", ":", "3", "]", ")", "+", "increment", "\n", "\n", "# Move to next increment position (blocking call)", "\n", "", "tcp_command", "=", "\"movel(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0)\\n\"", "%", "(", "increment_position", "[", "0", "]", ",", "increment_position", "[", "1", "]", ",", "increment_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "tool_acc", ",", "self", ".", "tool_vel", ")", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "\n", "time_start", "=", "time", ".", "time", "(", ")", "\n", "tcp_state_data", "=", "self", ".", "tcp_socket", ".", "recv", "(", "2048", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "tcp_state_data", ",", "'cartesian_info'", ")", "\n", "while", "not", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "increment_position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "# print([np.abs(actual_tool_pose[j] - increment_position[j]) for j in range(3)])", "\n", "                ", "tcp_state_data", "=", "self", ".", "tcp_socket", ".", "recv", "(", "2048", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "tcp_state_data", ",", "'cartesian_info'", ")", "\n", "time_snapshot", "=", "time", ".", "time", "(", ")", "\n", "if", "time_snapshot", "-", "time_start", ">", "1", ":", "\n", "                    ", "break", "\n", "", "time", ".", "sleep", "(", "0.01", ")", "\n", "\n", "# Reading TCP forces from real-time client connection", "\n", "", "rtc_state_data", "=", "self", ".", "rtc_socket", ".", "recv", "(", "6496", ")", "\n", "TCP_forces", "=", "self", ".", "parse_rtc_state_data", "(", "rtc_state_data", ")", "\n", "\n", "# If TCP forces in x/y exceed 20 Newtons, stop moving", "\n", "# print(TCP_forces[0:3])", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "np", ".", "asarray", "(", "TCP_forces", "[", "0", ":", "2", "]", ")", ")", ">", "20", "or", "(", "time_snapshot", "-", "time_start", ")", ">", "1", ":", "\n", "                ", "print", "(", "'Warning: contact detected! Movement halted. TCP forces: [%f, %f, %f]'", "%", "(", "TCP_forces", "[", "0", "]", ",", "TCP_forces", "[", "1", "]", ",", "TCP_forces", "[", "2", "]", ")", ")", "\n", "execute_success", "=", "False", "\n", "break", "\n", "\n", "", "time", ".", "sleep", "(", "0.01", ")", "\n", "\n", "", "self", ".", "tool_acc", "=", "1.2", "# 1.2 # 0.5", "\n", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "self", ".", "rtc_socket", ".", "close", "(", ")", "\n", "\n", "return", "execute_success", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_joints": [[559, 578], ["socket.socket", "robot.Robot.tcp_socket.connect", "range", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.recv", "robot.Robot.parse_tcp_state_data", "robot.Robot.tcp_socket.close", "str.encode", "all", "robot.Robot.tcp_socket.recv", "robot.Robot.parse_tcp_state_data", "time.sleep", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data"], ["", "def", "move_joints", "(", "self", ",", "joint_configuration", ")", ":", "\n", "\n", "        ", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"movej([%f\"", "%", "joint_configuration", "[", "0", "]", "\n", "for", "joint_idx", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "            ", "tcp_command", "=", "tcp_command", "+", "(", "\",%f\"", "%", "joint_configuration", "[", "joint_idx", "]", ")", "\n", "", "tcp_command", "=", "tcp_command", "+", "\"],a=%f,v=%f)\\n\"", "%", "(", "self", ".", "joint_acc", ",", "self", ".", "joint_vel", ")", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "\n", "# Block until robot reaches home state", "\n", "state_data", "=", "self", ".", "tcp_socket", ".", "recv", "(", "2048", ")", "\n", "actual_joint_positions", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'joint_data'", ")", "\n", "while", "not", "all", "(", "[", "np", ".", "abs", "(", "actual_joint_positions", "[", "j", "]", "-", "joint_configuration", "[", "j", "]", ")", "<", "self", ".", "joint_tolerance", "for", "j", "in", "range", "(", "6", ")", "]", ")", ":", "\n", "            ", "state_data", "=", "self", ".", "tcp_socket", ".", "recv", "(", "2048", ")", "\n", "actual_joint_positions", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'joint_data'", ")", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "\n", "", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.go_home": [[580, 583], ["robot.Robot.move_joints"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_joints"], ["", "def", "go_home", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "move_joints", "(", "self", ".", "home_joint_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.check_grasp": [[586, 591], ["robot.Robot.get_state", "robot.Robot.parse_tcp_state_data"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data"], ["", "def", "check_grasp", "(", "self", ")", ":", "\n", "\n", "        ", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "return", "tool_analog_input2", ">", "0.26", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.grasp": [[595, 769], ["print", "numpy.asarray().copy", "max", "simulation.vrep.simxGetObjectPosition", "numpy.asarray", "numpy.linalg.norm", "int", "simulation.vrep.simxGetObjectOrientation", "int", "range", "simulation.vrep.simxSetObjectPosition", "simulation.vrep.simxSetObjectOrientation", "robot.Robot.open_gripper", "robot.Robot.move_to", "robot.Robot.close_gripper", "robot.Robot.move_to", "robot.Robot.close_gripper", "numpy.linalg.norm", "utils.euler2rotm", "numpy.dot", "utils.rotm2angle", "numpy.asarray().copy", "max", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.close", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "time.time", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "robot.Robot.parse_tcp_state_data", "numpy.floor", "numpy.floor", "max", "simulation.vrep.simxSetObjectPosition", "simulation.vrep.simxSetObjectOrientation", "numpy.asarray", "numpy.argmax", "simulation.vrep.simxSetObjectPosition", "numpy.asarray", "utils.angle2rotm", "numpy.asarray", "numpy.asarray", "str.encode", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "robot.Robot.parse_tcp_state_data", "time.time", "min", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.close", "robot.Robot.get_state", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.close", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "robot.Robot.parse_tcp_state_data", "numpy.asarray", "robot.Robot.get_obj_positions", "numpy.asarray", "str.encode", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "robot.Robot.parse_tcp_state_data", "measurements.append", "len", "str.encode", "all", "all", "all", "abs", "abs", "abs", "abs", "abs", "min", "min", "min", "min", "float", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.abs", "range", "numpy.abs", "range", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectOrientation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectOrientation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.open_gripper", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_to", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.close_gripper", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_to", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.close_gripper", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.euler2rotm", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.rotm2angle", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectOrientation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.angle2rotm", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_obj_positions", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data"], ["", "def", "grasp", "(", "self", ",", "position", ",", "heightmap_rotation_angle", ",", "workspace_limits", ")", ":", "\n", "        ", "print", "(", "'Executing: grasp at (%f, %f, %f)'", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", ")", ")", "\n", "\n", "if", "self", ".", "is_sim", ":", "\n", "\n", "# Compute tool orientation from heightmap rotation angle", "\n", "            ", "tool_rotation_angle", "=", "(", "heightmap_rotation_angle", "%", "np", ".", "pi", ")", "-", "np", ".", "pi", "/", "2", "\n", "\n", "# Avoid collision with floor", "\n", "position", "=", "np", ".", "asarray", "(", "position", ")", ".", "copy", "(", ")", "\n", "position", "[", "2", "]", "=", "max", "(", "position", "[", "2", "]", "-", "0.04", ",", "workspace_limits", "[", "2", "]", "[", "0", "]", "+", "0.02", ")", "\n", "\n", "# Move gripper to location above grasp target", "\n", "grasp_location_margin", "=", "0.15", "\n", "# sim_ret, UR5_target_handle = vrep.simxGetObjectHandle(self.sim_client,'UR5_target',vrep.simx_opmode_blocking)", "\n", "location_above_grasp_target", "=", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", "+", "grasp_location_margin", ")", "\n", "\n", "# Compute gripper position and linear movement increments", "\n", "tool_position", "=", "location_above_grasp_target", "\n", "sim_ret", ",", "UR5_target_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "move_direction", "=", "np", ".", "asarray", "(", "[", "tool_position", "[", "0", "]", "-", "UR5_target_position", "[", "0", "]", ",", "tool_position", "[", "1", "]", "-", "UR5_target_position", "[", "1", "]", ",", "tool_position", "[", "2", "]", "-", "UR5_target_position", "[", "2", "]", "]", ")", "\n", "move_magnitude", "=", "np", ".", "linalg", ".", "norm", "(", "move_direction", ")", "\n", "move_step", "=", "0.05", "*", "move_direction", "/", "move_magnitude", "\n", "num_move_steps", "=", "int", "(", "np", ".", "floor", "(", "move_direction", "[", "0", "]", "/", "move_step", "[", "0", "]", ")", ")", "\n", "\n", "# Compute gripper orientation and rotation increments", "\n", "sim_ret", ",", "gripper_orientation", "=", "vrep", ".", "simxGetObjectOrientation", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "rotation_step", "=", "0.3", "if", "(", "tool_rotation_angle", "-", "gripper_orientation", "[", "1", "]", ">", "0", ")", "else", "-", "0.3", "\n", "num_rotation_steps", "=", "int", "(", "np", ".", "floor", "(", "(", "tool_rotation_angle", "-", "gripper_orientation", "[", "1", "]", ")", "/", "rotation_step", ")", ")", "\n", "\n", "# Simultaneously move and rotate gripper", "\n", "for", "step_iter", "in", "range", "(", "max", "(", "num_move_steps", ",", "num_rotation_steps", ")", ")", ":", "\n", "                ", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "UR5_target_position", "[", "0", "]", "+", "move_step", "[", "0", "]", "*", "min", "(", "step_iter", ",", "num_move_steps", ")", ",", "UR5_target_position", "[", "1", "]", "+", "move_step", "[", "1", "]", "*", "min", "(", "step_iter", ",", "num_move_steps", ")", ",", "UR5_target_position", "[", "2", "]", "+", "move_step", "[", "2", "]", "*", "min", "(", "step_iter", ",", "num_move_steps", ")", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetObjectOrientation", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "np", ".", "pi", "/", "2", ",", "gripper_orientation", "[", "1", "]", "+", "rotation_step", "*", "min", "(", "step_iter", ",", "num_rotation_steps", ")", ",", "np", ".", "pi", "/", "2", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "tool_position", "[", "0", "]", ",", "tool_position", "[", "1", "]", ",", "tool_position", "[", "2", "]", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetObjectOrientation", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "np", ".", "pi", "/", "2", ",", "tool_rotation_angle", ",", "np", ".", "pi", "/", "2", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "\n", "# Ensure gripper is open", "\n", "self", ".", "open_gripper", "(", ")", "\n", "\n", "# Approach grasp target", "\n", "self", ".", "move_to", "(", "position", ",", "None", ")", "\n", "\n", "# Close gripper to grasp target", "\n", "gripper_full_closed", "=", "self", ".", "close_gripper", "(", ")", "\n", "\n", "# Move gripper to location above grasp target", "\n", "self", ".", "move_to", "(", "location_above_grasp_target", ",", "None", ")", "\n", "\n", "# Check if grasp is successful", "\n", "gripper_full_closed", "=", "self", ".", "close_gripper", "(", ")", "\n", "grasp_success", "=", "not", "gripper_full_closed", "\n", "\n", "# Move the grasped object elsewhere", "\n", "if", "grasp_success", ":", "\n", "                ", "object_positions", "=", "np", ".", "asarray", "(", "self", ".", "get_obj_positions", "(", ")", ")", "\n", "object_positions", "=", "object_positions", "[", ":", ",", "2", "]", "\n", "grasped_object_ind", "=", "np", ".", "argmax", "(", "object_positions", ")", "\n", "grasped_object_handle", "=", "self", ".", "object_handles", "[", "grasped_object_ind", "]", "\n", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "grasped_object_handle", ",", "-", "1", ",", "(", "-", "0.5", ",", "0.5", "+", "0.05", "*", "float", "(", "grasped_object_ind", ")", ",", "0.1", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "\n", "", "", "else", ":", "\n", "\n", "# Compute tool orientation from heightmap rotation angle", "\n", "            ", "grasp_orientation", "=", "[", "1.0", ",", "0.0", "]", "\n", "if", "heightmap_rotation_angle", ">", "np", ".", "pi", ":", "\n", "                ", "heightmap_rotation_angle", "=", "heightmap_rotation_angle", "-", "2", "*", "np", ".", "pi", "\n", "", "tool_rotation_angle", "=", "heightmap_rotation_angle", "/", "2", "\n", "tool_orientation", "=", "np", ".", "asarray", "(", "[", "grasp_orientation", "[", "0", "]", "*", "np", ".", "cos", "(", "tool_rotation_angle", ")", "-", "grasp_orientation", "[", "1", "]", "*", "np", ".", "sin", "(", "tool_rotation_angle", ")", ",", "grasp_orientation", "[", "0", "]", "*", "np", ".", "sin", "(", "tool_rotation_angle", ")", "+", "grasp_orientation", "[", "1", "]", "*", "np", ".", "cos", "(", "tool_rotation_angle", ")", ",", "0.0", "]", ")", "*", "np", ".", "pi", "\n", "tool_orientation_angle", "=", "np", ".", "linalg", ".", "norm", "(", "tool_orientation", ")", "\n", "tool_orientation_axis", "=", "tool_orientation", "/", "tool_orientation_angle", "\n", "tool_orientation_rotm", "=", "utils", ".", "angle2rotm", "(", "tool_orientation_angle", ",", "tool_orientation_axis", ",", "point", "=", "None", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n", "# Compute tilted tool orientation during dropping into bin", "\n", "tilt_rotm", "=", "utils", ".", "euler2rotm", "(", "np", ".", "asarray", "(", "[", "-", "np", ".", "pi", "/", "4", ",", "0", ",", "0", "]", ")", ")", "\n", "tilted_tool_orientation_rotm", "=", "np", ".", "dot", "(", "tilt_rotm", ",", "tool_orientation_rotm", ")", "\n", "tilted_tool_orientation_axis_angle", "=", "utils", ".", "rotm2angle", "(", "tilted_tool_orientation_rotm", ")", "\n", "tilted_tool_orientation", "=", "tilted_tool_orientation_axis_angle", "[", "0", "]", "*", "np", ".", "asarray", "(", "tilted_tool_orientation_axis_angle", "[", "1", ":", "4", "]", ")", "\n", "\n", "# Attempt grasp", "\n", "position", "=", "np", ".", "asarray", "(", "position", ")", ".", "copy", "(", ")", "\n", "position", "[", "2", "]", "=", "max", "(", "position", "[", "2", "]", "-", "0.05", ",", "workspace_limits", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"def process():\\n\"", "\n", "tcp_command", "+=", "\" set_digital_out(8,False)\\n\"", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.09)\\n\"", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", "+", "0.1", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "0.0", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "0.0", ",", "self", ".", "joint_acc", "*", "0.1", ",", "self", ".", "joint_vel", "*", "0.1", ")", "\n", "tcp_command", "+=", "\" set_digital_out(8,True)\\n\"", "\n", "tcp_command", "+=", "\"end\\n\"", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "\n", "# Block until robot reaches target tool position and gripper fingers have stopped moving", "\n", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "timeout_t0", "=", "time", ".", "time", "(", ")", "\n", "while", "True", ":", "\n", "                ", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "new_tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'cartesian_info'", ")", "\n", "timeout_t1", "=", "time", ".", "time", "(", ")", "\n", "if", "(", "tool_analog_input2", "<", "3.7", "and", "(", "abs", "(", "new_tool_analog_input2", "-", "tool_analog_input2", ")", "<", "0.01", ")", "and", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ")", "or", "(", "timeout_t1", "-", "timeout_t0", ")", ">", "5", ":", "\n", "                    ", "break", "\n", "", "tool_analog_input2", "=", "new_tool_analog_input2", "\n", "\n", "# Check if gripper is open (grasp might be successful)", "\n", "", "gripper_open", "=", "tool_analog_input2", ">", "0.26", "\n", "\n", "# # Check if grasp is successful", "\n", "# grasp_success =  tool_analog_input2 > 0.26", "\n", "\n", "home_position", "=", "[", "0.49", ",", "0.11", ",", "0.03", "]", "\n", "bin_position", "=", "[", "0.5", ",", "-", "0.45", ",", "0.1", "]", "\n", "\n", "# If gripper is open, drop object in bin and check if grasp is successful", "\n", "grasp_success", "=", "False", "\n", "if", "gripper_open", ":", "\n", "\n", "# Pre-compute blend radius", "\n", "                ", "blend_radius", "=", "min", "(", "abs", "(", "bin_position", "[", "1", "]", "-", "position", "[", "1", "]", ")", "/", "2", "-", "0.01", ",", "0.2", ")", "\n", "\n", "# Attempt placing", "\n", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"def process():\\n\"", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=%f)\\n\"", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "bin_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "0.0", ",", "self", ".", "joint_acc", ",", "self", ".", "joint_vel", ",", "blend_radius", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=%f)\\n\"", "%", "(", "bin_position", "[", "0", "]", ",", "bin_position", "[", "1", "]", ",", "bin_position", "[", "2", "]", ",", "tilted_tool_orientation", "[", "0", "]", ",", "tilted_tool_orientation", "[", "1", "]", ",", "tilted_tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", ",", "self", ".", "joint_vel", ",", "blend_radius", ")", "\n", "tcp_command", "+=", "\" set_digital_out(8,False)\\n\"", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.0)\\n\"", "%", "(", "home_position", "[", "0", "]", ",", "home_position", "[", "1", "]", ",", "home_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "0.0", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\"end\\n\"", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "# print(tcp_command) # Debug", "\n", "\n", "# Measure gripper width until robot reaches near bin location", "\n", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "measurements", "=", "[", "]", "\n", "while", "True", ":", "\n", "                    ", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'cartesian_info'", ")", "\n", "measurements", ".", "append", "(", "tool_analog_input2", ")", "\n", "if", "abs", "(", "actual_tool_pose", "[", "1", "]", "-", "bin_position", "[", "1", "]", ")", "<", "0.2", "or", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "home_position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                        ", "break", "\n", "\n", "# If gripper width did not change before reaching bin location, then object is in grip and grasp is successful", "\n", "", "", "if", "len", "(", "measurements", ")", ">=", "2", ":", "\n", "                    ", "if", "abs", "(", "measurements", "[", "0", "]", "-", "measurements", "[", "1", "]", ")", "<", "0.1", ":", "\n", "                        ", "grasp_success", "=", "True", "\n", "\n", "", "", "", "else", ":", "\n", "                ", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"def process():\\n\"", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.09)\\n\"", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", "+", "0.1", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "0.0", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.0)\\n\"", "%", "(", "home_position", "[", "0", "]", ",", "home_position", "[", "1", "]", ",", "home_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "0.0", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\"end\\n\"", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "\n", "# Block until robot reaches home location", "\n", "", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'cartesian_info'", ")", "\n", "while", "True", ":", "\n", "                ", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "new_tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'cartesian_info'", ")", "\n", "if", "(", "abs", "(", "new_tool_analog_input2", "-", "tool_analog_input2", ")", "<", "0.01", ")", "and", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "home_position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                    ", "break", "\n", "", "tool_analog_input2", "=", "new_tool_analog_input2", "\n", "\n", "", "", "return", "grasp_success", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.push": [[771, 887], ["print", "numpy.asarray", "simulation.vrep.simxGetObjectPosition", "numpy.asarray", "numpy.linalg.norm", "int", "simulation.vrep.simxGetObjectOrientation", "int", "range", "simulation.vrep.simxSetObjectPosition", "simulation.vrep.simxSetObjectOrientation", "robot.Robot.close_gripper", "robot.Robot.move_to", "min", "min", "numpy.sqrt", "robot.Robot.move_to", "robot.Robot.move_to", "numpy.linalg.norm", "numpy.asarray", "min", "min", "numpy.asarray", "numpy.dot", "numpy.dot", "utils.rotm2angle", "numpy.asarray().copy", "min", "min", "max", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.close", "robot.Robot.get_state", "time.sleep", "numpy.floor", "numpy.floor", "max", "simulation.vrep.simxSetObjectPosition", "simulation.vrep.simxSetObjectOrientation", "max", "max", "numpy.asarray", "utils.angle2rotm", "max", "max", "utils.angle2rotm", "numpy.asarray", "max", "max", "str.encode", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "all", "numpy.power", "numpy.power", "utils.euler2rotm", "numpy.asarray", "numpy.asarray", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.abs", "range", "min", "min", "min", "min", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectOrientation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectOrientation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.close_gripper", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_to", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_to", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.move_to", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.rotm2angle", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectOrientation", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.angle2rotm", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.angle2rotm", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.euler2rotm"], ["", "def", "push", "(", "self", ",", "position", ",", "heightmap_rotation_angle", ",", "workspace_limits", ")", ":", "\n", "        ", "print", "(", "'Executing: push at (%f, %f, %f)'", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", ")", ")", "\n", "\n", "if", "self", ".", "is_sim", ":", "\n", "\n", "# Compute tool orientation from heightmap rotation angle", "\n", "            ", "tool_rotation_angle", "=", "(", "heightmap_rotation_angle", "%", "np", ".", "pi", ")", "-", "np", ".", "pi", "/", "2", "\n", "\n", "# Adjust pushing point to be on tip of finger", "\n", "position", "[", "2", "]", "=", "position", "[", "2", "]", "+", "0.026", "\n", "\n", "# Compute pushing direction", "\n", "push_orientation", "=", "[", "1.0", ",", "0.0", "]", "\n", "push_direction", "=", "np", ".", "asarray", "(", "[", "push_orientation", "[", "0", "]", "*", "np", ".", "cos", "(", "heightmap_rotation_angle", ")", "-", "push_orientation", "[", "1", "]", "*", "np", ".", "sin", "(", "heightmap_rotation_angle", ")", ",", "push_orientation", "[", "0", "]", "*", "np", ".", "sin", "(", "heightmap_rotation_angle", ")", "+", "push_orientation", "[", "1", "]", "*", "np", ".", "cos", "(", "heightmap_rotation_angle", ")", "]", ")", "\n", "\n", "# Move gripper to location above pushing point", "\n", "pushing_point_margin", "=", "0.1", "\n", "location_above_pushing_point", "=", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", "+", "pushing_point_margin", ")", "\n", "\n", "# Compute gripper position and linear movement increments", "\n", "tool_position", "=", "location_above_pushing_point", "\n", "sim_ret", ",", "UR5_target_position", "=", "vrep", ".", "simxGetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "move_direction", "=", "np", ".", "asarray", "(", "[", "tool_position", "[", "0", "]", "-", "UR5_target_position", "[", "0", "]", ",", "tool_position", "[", "1", "]", "-", "UR5_target_position", "[", "1", "]", ",", "tool_position", "[", "2", "]", "-", "UR5_target_position", "[", "2", "]", "]", ")", "\n", "move_magnitude", "=", "np", ".", "linalg", ".", "norm", "(", "move_direction", ")", "\n", "move_step", "=", "0.05", "*", "move_direction", "/", "move_magnitude", "\n", "num_move_steps", "=", "int", "(", "np", ".", "floor", "(", "move_direction", "[", "0", "]", "/", "move_step", "[", "0", "]", ")", ")", "\n", "\n", "# Compute gripper orientation and rotation increments", "\n", "sim_ret", ",", "gripper_orientation", "=", "vrep", ".", "simxGetObjectOrientation", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "rotation_step", "=", "0.3", "if", "(", "tool_rotation_angle", "-", "gripper_orientation", "[", "1", "]", ">", "0", ")", "else", "-", "0.3", "\n", "num_rotation_steps", "=", "int", "(", "np", ".", "floor", "(", "(", "tool_rotation_angle", "-", "gripper_orientation", "[", "1", "]", ")", "/", "rotation_step", ")", ")", "\n", "\n", "# Simultaneously move and rotate gripper", "\n", "for", "step_iter", "in", "range", "(", "max", "(", "num_move_steps", ",", "num_rotation_steps", ")", ")", ":", "\n", "                ", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "UR5_target_position", "[", "0", "]", "+", "move_step", "[", "0", "]", "*", "min", "(", "step_iter", ",", "num_move_steps", ")", ",", "UR5_target_position", "[", "1", "]", "+", "move_step", "[", "1", "]", "*", "min", "(", "step_iter", ",", "num_move_steps", ")", ",", "UR5_target_position", "[", "2", "]", "+", "move_step", "[", "2", "]", "*", "min", "(", "step_iter", ",", "num_move_steps", ")", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetObjectOrientation", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "np", ".", "pi", "/", "2", ",", "gripper_orientation", "[", "1", "]", "+", "rotation_step", "*", "min", "(", "step_iter", ",", "num_rotation_steps", ")", ",", "np", ".", "pi", "/", "2", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "", "vrep", ".", "simxSetObjectPosition", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "tool_position", "[", "0", "]", ",", "tool_position", "[", "1", "]", ",", "tool_position", "[", "2", "]", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "vrep", ".", "simxSetObjectOrientation", "(", "self", ".", "sim_client", ",", "self", ".", "UR5_target_handle", ",", "-", "1", ",", "(", "np", ".", "pi", "/", "2", ",", "tool_rotation_angle", ",", "np", ".", "pi", "/", "2", ")", ",", "vrep", ".", "simx_opmode_blocking", ")", "\n", "\n", "# Ensure gripper is closed", "\n", "self", ".", "close_gripper", "(", ")", "\n", "\n", "# Approach pushing point", "\n", "self", ".", "move_to", "(", "position", ",", "None", ")", "\n", "\n", "# Compute target location (push to the right)", "\n", "push_length", "=", "0.1", "\n", "target_x", "=", "min", "(", "max", "(", "position", "[", "0", "]", "+", "push_direction", "[", "0", "]", "*", "push_length", ",", "workspace_limits", "[", "0", "]", "[", "0", "]", ")", ",", "workspace_limits", "[", "0", "]", "[", "1", "]", ")", "\n", "target_y", "=", "min", "(", "max", "(", "position", "[", "1", "]", "+", "push_direction", "[", "1", "]", "*", "push_length", ",", "workspace_limits", "[", "1", "]", "[", "0", "]", ")", ",", "workspace_limits", "[", "1", "]", "[", "1", "]", ")", "\n", "push_length", "=", "np", ".", "sqrt", "(", "np", ".", "power", "(", "target_x", "-", "position", "[", "0", "]", ",", "2", ")", "+", "np", ".", "power", "(", "target_y", "-", "position", "[", "1", "]", ",", "2", ")", ")", "\n", "\n", "# Move in pushing direction towards target location", "\n", "self", ".", "move_to", "(", "[", "target_x", ",", "target_y", ",", "position", "[", "2", "]", "]", ",", "None", ")", "\n", "\n", "# Move gripper to location above grasp target", "\n", "self", ".", "move_to", "(", "[", "target_x", ",", "target_y", ",", "location_above_pushing_point", "[", "2", "]", "]", ",", "None", ")", "\n", "\n", "push_success", "=", "True", "\n", "\n", "", "else", ":", "\n", "\n", "# Compute tool orientation from heightmap rotation angle", "\n", "            ", "push_orientation", "=", "[", "1.0", ",", "0.0", "]", "\n", "tool_rotation_angle", "=", "heightmap_rotation_angle", "/", "2", "\n", "tool_orientation", "=", "np", ".", "asarray", "(", "[", "push_orientation", "[", "0", "]", "*", "np", ".", "cos", "(", "tool_rotation_angle", ")", "-", "push_orientation", "[", "1", "]", "*", "np", ".", "sin", "(", "tool_rotation_angle", ")", ",", "push_orientation", "[", "0", "]", "*", "np", ".", "sin", "(", "tool_rotation_angle", ")", "+", "push_orientation", "[", "1", "]", "*", "np", ".", "cos", "(", "tool_rotation_angle", ")", ",", "0.0", "]", ")", "*", "np", ".", "pi", "\n", "tool_orientation_angle", "=", "np", ".", "linalg", ".", "norm", "(", "tool_orientation", ")", "\n", "tool_orientation_axis", "=", "tool_orientation", "/", "tool_orientation_angle", "\n", "tool_orientation_rotm", "=", "utils", ".", "angle2rotm", "(", "tool_orientation_angle", ",", "tool_orientation_axis", ",", "point", "=", "None", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n", "# Compute push direction and endpoint (push to right of rotated heightmap)", "\n", "push_direction", "=", "np", ".", "asarray", "(", "[", "push_orientation", "[", "0", "]", "*", "np", ".", "cos", "(", "heightmap_rotation_angle", ")", "-", "push_orientation", "[", "1", "]", "*", "np", ".", "sin", "(", "heightmap_rotation_angle", ")", ",", "push_orientation", "[", "0", "]", "*", "np", ".", "sin", "(", "heightmap_rotation_angle", ")", "+", "push_orientation", "[", "1", "]", "*", "np", ".", "cos", "(", "heightmap_rotation_angle", ")", ",", "0.0", "]", ")", "\n", "target_x", "=", "min", "(", "max", "(", "position", "[", "0", "]", "+", "push_direction", "[", "0", "]", "*", "0.1", ",", "workspace_limits", "[", "0", "]", "[", "0", "]", ")", ",", "workspace_limits", "[", "0", "]", "[", "1", "]", ")", "\n", "target_y", "=", "min", "(", "max", "(", "position", "[", "1", "]", "+", "push_direction", "[", "1", "]", "*", "0.1", ",", "workspace_limits", "[", "1", "]", "[", "0", "]", ")", ",", "workspace_limits", "[", "1", "]", "[", "1", "]", ")", "\n", "push_endpoint", "=", "np", ".", "asarray", "(", "[", "target_x", ",", "target_y", ",", "position", "[", "2", "]", "]", ")", "\n", "push_direction", ".", "shape", "=", "(", "3", ",", "1", ")", "\n", "\n", "# Compute tilted tool orientation during push", "\n", "tilt_axis", "=", "np", ".", "dot", "(", "utils", ".", "euler2rotm", "(", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "np", ".", "pi", "/", "2", "]", ")", ")", "[", ":", "3", ",", ":", "3", "]", ",", "push_direction", ")", "\n", "tilt_rotm", "=", "utils", ".", "angle2rotm", "(", "-", "np", ".", "pi", "/", "8", ",", "tilt_axis", ",", "point", "=", "None", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "tilted_tool_orientation_rotm", "=", "np", ".", "dot", "(", "tilt_rotm", ",", "tool_orientation_rotm", ")", "\n", "tilted_tool_orientation_axis_angle", "=", "utils", ".", "rotm2angle", "(", "tilted_tool_orientation_rotm", ")", "\n", "tilted_tool_orientation", "=", "tilted_tool_orientation_axis_angle", "[", "0", "]", "*", "np", ".", "asarray", "(", "tilted_tool_orientation_axis_angle", "[", "1", ":", "4", "]", ")", "\n", "\n", "# Push only within workspace limits", "\n", "position", "=", "np", ".", "asarray", "(", "position", ")", ".", "copy", "(", ")", "\n", "position", "[", "0", "]", "=", "min", "(", "max", "(", "position", "[", "0", "]", ",", "workspace_limits", "[", "0", "]", "[", "0", "]", ")", ",", "workspace_limits", "[", "0", "]", "[", "1", "]", ")", "\n", "position", "[", "1", "]", "=", "min", "(", "max", "(", "position", "[", "1", "]", ",", "workspace_limits", "[", "1", "]", "[", "0", "]", ")", ",", "workspace_limits", "[", "1", "]", "[", "1", "]", ")", "\n", "position", "[", "2", "]", "=", "max", "(", "position", "[", "2", "]", "+", "0.005", ",", "workspace_limits", "[", "2", "]", "[", "0", "]", "+", "0.005", ")", "# Add buffer to surface", "\n", "\n", "home_position", "=", "[", "0.49", ",", "0.11", ",", "0.03", "]", "\n", "\n", "# Attempt push", "\n", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"def process():\\n\"", "\n", "tcp_command", "+=", "\" set_digital_out(8,True)\\n\"", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.09)\\n\"", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", "+", "0.1", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.1", ",", "self", ".", "joint_vel", "*", "0.1", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "push_endpoint", "[", "0", "]", ",", "push_endpoint", "[", "1", "]", ",", "push_endpoint", "[", "2", "]", ",", "tilted_tool_orientation", "[", "0", "]", ",", "tilted_tool_orientation", "[", "1", "]", ",", "tilted_tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.1", ",", "self", ".", "joint_vel", "*", "0.1", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.03)\\n\"", "%", "(", "position", "[", "0", "]", ",", "position", "[", "1", "]", ",", "position", "[", "2", "]", "+", "0.1", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "home_position", "[", "0", "]", ",", "home_position", "[", "1", "]", ",", "home_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\"end\\n\"", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "\n", "# Block until robot reaches target tool position and gripper fingers have stopped moving", "\n", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "while", "True", ":", "\n", "                ", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'cartesian_info'", ")", "\n", "if", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "home_position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                    ", "break", "\n", "", "", "push_success", "=", "True", "\n", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "", "return", "push_success", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.restart_real": [[889, 957], ["numpy.linalg.norm", "utils.euler2rotm", "numpy.dot", "utils.rotm2angle", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.close", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "socket.socket", "robot.Robot.tcp_socket.connect", "robot.Robot.tcp_socket.send", "robot.Robot.tcp_socket.close", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "numpy.asarray", "utils.angle2rotm", "numpy.asarray", "numpy.asarray", "str.encode", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "robot.Robot.parse_tcp_state_data", "str.encode", "robot.Robot.get_state", "robot.Robot.parse_tcp_state_data", "robot.Robot.parse_tcp_state_data", "all", "all", "abs", "abs", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.abs", "range", "numpy.abs", "range"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.euler2rotm", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.rotm2angle", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.angle2rotm", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.get_state", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data", "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.robot.Robot.parse_tcp_state_data"], ["", "def", "restart_real", "(", "self", ")", ":", "\n", "\n", "# Compute tool orientation from heightmap rotation angle", "\n", "        ", "grasp_orientation", "=", "[", "1.0", ",", "0.0", "]", "\n", "tool_rotation_angle", "=", "-", "np", ".", "pi", "/", "4", "\n", "tool_orientation", "=", "np", ".", "asarray", "(", "[", "grasp_orientation", "[", "0", "]", "*", "np", ".", "cos", "(", "tool_rotation_angle", ")", "-", "grasp_orientation", "[", "1", "]", "*", "np", ".", "sin", "(", "tool_rotation_angle", ")", ",", "grasp_orientation", "[", "0", "]", "*", "np", ".", "sin", "(", "tool_rotation_angle", ")", "+", "grasp_orientation", "[", "1", "]", "*", "np", ".", "cos", "(", "tool_rotation_angle", ")", ",", "0.0", "]", ")", "*", "np", ".", "pi", "\n", "tool_orientation_angle", "=", "np", ".", "linalg", ".", "norm", "(", "tool_orientation", ")", "\n", "tool_orientation_axis", "=", "tool_orientation", "/", "tool_orientation_angle", "\n", "tool_orientation_rotm", "=", "utils", ".", "angle2rotm", "(", "tool_orientation_angle", ",", "tool_orientation_axis", ",", "point", "=", "None", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n", "tilt_rotm", "=", "utils", ".", "euler2rotm", "(", "np", ".", "asarray", "(", "[", "-", "np", ".", "pi", "/", "4", ",", "0", ",", "0", "]", ")", ")", "\n", "tilted_tool_orientation_rotm", "=", "np", ".", "dot", "(", "tilt_rotm", ",", "tool_orientation_rotm", ")", "\n", "tilted_tool_orientation_axis_angle", "=", "utils", ".", "rotm2angle", "(", "tilted_tool_orientation_rotm", ")", "\n", "tilted_tool_orientation", "=", "tilted_tool_orientation_axis_angle", "[", "0", "]", "*", "np", ".", "asarray", "(", "tilted_tool_orientation_axis_angle", "[", "1", ":", "4", "]", ")", "\n", "\n", "# Move to box grabbing position", "\n", "box_grab_position", "=", "[", "0.5", ",", "-", "0.35", ",", "-", "0.12", "]", "\n", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"def process():\\n\"", "\n", "tcp_command", "+=", "\" set_digital_out(8,False)\\n\"", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.09)\\n\"", "%", "(", "box_grab_position", "[", "0", "]", ",", "box_grab_position", "[", "1", "]", ",", "box_grab_position", "[", "2", "]", "+", "0.1", ",", "tilted_tool_orientation", "[", "0", "]", ",", "tilted_tool_orientation", "[", "1", "]", ",", "tilted_tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", ",", "self", ".", "joint_vel", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "box_grab_position", "[", "0", "]", ",", "box_grab_position", "[", "1", "]", ",", "box_grab_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", ",", "self", ".", "joint_vel", ")", "\n", "tcp_command", "+=", "\" set_digital_out(8,True)\\n\"", "\n", "tcp_command", "+=", "\"end\\n\"", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "\n", "# Block until robot reaches box grabbing position and gripper fingers have stopped moving", "\n", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "while", "True", ":", "\n", "            ", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "new_tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'cartesian_info'", ")", "\n", "if", "tool_analog_input2", "<", "3.7", "and", "(", "abs", "(", "new_tool_analog_input2", "-", "tool_analog_input2", ")", "<", "0.01", ")", "and", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "box_grab_position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                ", "break", "\n", "", "tool_analog_input2", "=", "new_tool_analog_input2", "\n", "\n", "# Move to box release position", "\n", "", "box_release_position", "=", "[", "0.5", ",", "0.08", ",", "-", "0.12", "]", "\n", "home_position", "=", "[", "0.49", ",", "0.11", ",", "0.03", "]", "\n", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "tcp_command", "=", "\"def process():\\n\"", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "box_release_position", "[", "0", "]", ",", "box_release_position", "[", "1", "]", ",", "box_release_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.1", ",", "self", ".", "joint_vel", "*", "0.1", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "box_release_position", "[", "0", "]", ",", "box_release_position", "[", "1", "]", ",", "box_release_position", "[", "2", "]", "+", "0.3", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.02", ",", "self", ".", "joint_vel", "*", "0.02", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.29)\\n\"", "%", "(", "box_grab_position", "[", "0", "]", "-", "0.05", ",", "box_grab_position", "[", "1", "]", "+", "0.1", ",", "box_grab_position", "[", "2", "]", "+", "0.3", ",", "tilted_tool_orientation", "[", "0", "]", ",", "tilted_tool_orientation", "[", "1", "]", ",", "tilted_tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "box_grab_position", "[", "0", "]", "-", "0.05", ",", "box_grab_position", "[", "1", "]", "+", "0.1", ",", "box_grab_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.5", ",", "self", ".", "joint_vel", "*", "0.5", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "box_grab_position", "[", "0", "]", ",", "box_grab_position", "[", "1", "]", ",", "box_grab_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.1", ",", "self", ".", "joint_vel", "*", "0.1", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "box_grab_position", "[", "0", "]", "+", "0.05", ",", "box_grab_position", "[", "1", "]", ",", "box_grab_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", "*", "0.1", ",", "self", ".", "joint_vel", "*", "0.1", ")", "\n", "tcp_command", "+=", "\" set_digital_out(8,False)\\n\"", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.09)\\n\"", "%", "(", "box_grab_position", "[", "0", "]", ",", "box_grab_position", "[", "1", "]", ",", "box_grab_position", "[", "2", "]", "+", "0.1", ",", "tilted_tool_orientation", "[", "0", "]", ",", "tilted_tool_orientation", "[", "1", "]", ",", "tilted_tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", ",", "self", ".", "joint_vel", ")", "\n", "tcp_command", "+=", "\" movej(p[%f,%f,%f,%f,%f,%f],a=%f,v=%f,t=0,r=0.00)\\n\"", "%", "(", "home_position", "[", "0", "]", ",", "home_position", "[", "1", "]", ",", "home_position", "[", "2", "]", ",", "tool_orientation", "[", "0", "]", ",", "tool_orientation", "[", "1", "]", ",", "tool_orientation", "[", "2", "]", ",", "self", ".", "joint_acc", ",", "self", ".", "joint_vel", ")", "\n", "tcp_command", "+=", "\"end\\n\"", "\n", "self", ".", "tcp_socket", ".", "send", "(", "str", ".", "encode", "(", "tcp_command", ")", ")", "\n", "self", ".", "tcp_socket", ".", "close", "(", ")", "\n", "\n", "# Block until robot reaches home position", "\n", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "while", "True", ":", "\n", "            ", "state_data", "=", "self", ".", "get_state", "(", ")", "\n", "new_tool_analog_input2", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'tool_data'", ")", "\n", "actual_tool_pose", "=", "self", ".", "parse_tcp_state_data", "(", "state_data", ",", "'cartesian_info'", ")", "\n", "if", "tool_analog_input2", ">", "3.0", "and", "(", "abs", "(", "new_tool_analog_input2", "-", "tool_analog_input2", ")", "<", "0.01", ")", "and", "all", "(", "[", "np", ".", "abs", "(", "actual_tool_pose", "[", "j", "]", "-", "home_position", "[", "j", "]", ")", "<", "self", ".", "tool_pose_tolerance", "[", "j", "]", "for", "j", "in", "range", "(", "3", ")", "]", ")", ":", "\n", "                ", "break", "\n", "", "tool_analog_input2", "=", "new_tool_analog_input2", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.calibrate.get_rigid_transform": [[104, 119], ["numpy.mean", "numpy.mean", "numpy.dot", "numpy.linalg.svd", "numpy.dot", "len", "len", "numpy.tile", "numpy.tile", "numpy.transpose", "numpy.linalg.det", "numpy.dot", "numpy.dot"], "function", ["None"], ["def", "get_rigid_transform", "(", "A", ",", "B", ")", ":", "\n", "    ", "assert", "len", "(", "A", ")", "==", "len", "(", "B", ")", "\n", "N", "=", "A", ".", "shape", "[", "0", "]", ";", "# Total points", "\n", "centroid_A", "=", "np", ".", "mean", "(", "A", ",", "axis", "=", "0", ")", "\n", "centroid_B", "=", "np", ".", "mean", "(", "B", ",", "axis", "=", "0", ")", "\n", "AA", "=", "A", "-", "np", ".", "tile", "(", "centroid_A", ",", "(", "N", ",", "1", ")", ")", "# Centre the points", "\n", "BB", "=", "B", "-", "np", ".", "tile", "(", "centroid_B", ",", "(", "N", ",", "1", ")", ")", "\n", "H", "=", "np", ".", "dot", "(", "np", ".", "transpose", "(", "AA", ")", ",", "BB", ")", "# Dot is matrix multiplication for array", "\n", "U", ",", "S", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "R", "=", "np", ".", "dot", "(", "Vt", ".", "T", ",", "U", ".", "T", ")", "\n", "if", "np", ".", "linalg", ".", "det", "(", "R", ")", "<", "0", ":", "# Special reflection case", "\n", "       ", "Vt", "[", "2", ",", ":", "]", "*=", "-", "1", "\n", "R", "=", "np", ".", "dot", "(", "Vt", ".", "T", ",", "U", ".", "T", ")", "\n", "", "t", "=", "np", ".", "dot", "(", "-", "R", ",", "centroid_A", ".", "T", ")", "+", "centroid_B", ".", "T", "\n", "return", "R", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.calibrate.get_rigid_transform_error": [[120, 140], ["numpy.multiply", "numpy.multiply", "numpy.concatenate", "calibrate.get_rigid_transform", "numpy.concatenate", "numpy.sum", "numpy.sqrt", "numpy.asarray", "numpy.asarray", "numpy.dot", "numpy.tile", "numpy.transpose", "numpy.multiply", "numpy.concatenate", "numpy.array", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.calibrate.get_rigid_transform"], ["", "def", "get_rigid_transform_error", "(", "z_scale", ")", ":", "\n", "    ", "global", "measured_pts", ",", "observed_pts", ",", "observed_pix", ",", "world2camera", ",", "camera", "\n", "\n", "# Apply z offset and compute new observed points using camera intrinsics", "\n", "observed_z", "=", "observed_pts", "[", ":", ",", "2", ":", "]", "*", "z_scale", "\n", "observed_x", "=", "np", ".", "multiply", "(", "observed_pix", "[", ":", ",", "[", "0", "]", "]", "-", "robot", ".", "cam_intrinsics", "[", "0", "]", "[", "2", "]", ",", "observed_z", "/", "robot", ".", "cam_intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "observed_y", "=", "np", ".", "multiply", "(", "observed_pix", "[", ":", ",", "[", "1", "]", "]", "-", "robot", ".", "cam_intrinsics", "[", "1", "]", "[", "2", "]", ",", "observed_z", "/", "robot", ".", "cam_intrinsics", "[", "1", "]", "[", "1", "]", ")", "\n", "new_observed_pts", "=", "np", ".", "concatenate", "(", "(", "observed_x", ",", "observed_y", ",", "observed_z", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# Estimate rigid transform between measured points and new observed points", "\n", "R", ",", "t", "=", "get_rigid_transform", "(", "np", ".", "asarray", "(", "measured_pts", ")", ",", "np", ".", "asarray", "(", "new_observed_pts", ")", ")", "\n", "t", ".", "shape", "=", "(", "3", ",", "1", ")", "\n", "world2camera", "=", "np", ".", "concatenate", "(", "(", "np", ".", "concatenate", "(", "(", "R", ",", "t", ")", ",", "axis", "=", "1", ")", ",", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# Compute rigid transform error", "\n", "registered_pts", "=", "np", ".", "dot", "(", "R", ",", "np", ".", "transpose", "(", "measured_pts", ")", ")", "+", "np", ".", "tile", "(", "t", ",", "(", "1", ",", "measured_pts", ".", "shape", "[", "0", "]", ")", ")", "\n", "error", "=", "np", ".", "transpose", "(", "registered_pts", ")", "-", "new_observed_pts", "\n", "error", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "error", ",", "error", ")", ")", "\n", "rmse", "=", "np", ".", "sqrt", "(", "error", "/", "measured_pts", ".", "shape", "[", "0", "]", ")", ";", "\n", "return", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.__init__": [[305, 308], ["torch.Module.__init__", "torch.NLLLoss2d", "torch.NLLLoss2d", "torch.NLLLoss2d"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.real.camera.Camera.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLoss2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nll_loss", "=", "nn", ".", "NLLLoss2d", "(", "weight", ",", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.CrossEntropyLoss2d.forward": [[309, 311], ["utils.CrossEntropyLoss2d.nll_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "return", "self", ".", "nll_loss", "(", "F", ".", "log_softmax", "(", "inputs", ",", "dim", "=", "1", ")", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.get_pointcloud": [[11, 38], ["numpy.meshgrid", "numpy.multiply", "numpy.multiply", "depth_img.copy", "numpy.concatenate", "numpy.concatenate", "numpy.linspace", "numpy.linspace"], "function", ["None"], ["def", "get_pointcloud", "(", "color_img", ",", "depth_img", ",", "camera_intrinsics", ")", ":", "\n", "\n", "# Get depth image size", "\n", "    ", "im_h", "=", "depth_img", ".", "shape", "[", "0", "]", "\n", "im_w", "=", "depth_img", ".", "shape", "[", "1", "]", "\n", "\n", "# Project depth into 3D point cloud in camera coordinates", "\n", "pix_x", ",", "pix_y", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "im_w", "-", "1", ",", "im_w", ")", ",", "np", ".", "linspace", "(", "0", ",", "im_h", "-", "1", ",", "im_h", ")", ")", "\n", "cam_pts_x", "=", "np", ".", "multiply", "(", "pix_x", "-", "camera_intrinsics", "[", "0", "]", "[", "2", "]", ",", "depth_img", "/", "camera_intrinsics", "[", "0", "]", "[", "0", "]", ")", "\n", "cam_pts_y", "=", "np", ".", "multiply", "(", "pix_y", "-", "camera_intrinsics", "[", "1", "]", "[", "2", "]", ",", "depth_img", "/", "camera_intrinsics", "[", "1", "]", "[", "1", "]", ")", "\n", "cam_pts_z", "=", "depth_img", ".", "copy", "(", ")", "\n", "cam_pts_x", ".", "shape", "=", "(", "im_h", "*", "im_w", ",", "1", ")", "\n", "cam_pts_y", ".", "shape", "=", "(", "im_h", "*", "im_w", ",", "1", ")", "\n", "cam_pts_z", ".", "shape", "=", "(", "im_h", "*", "im_w", ",", "1", ")", "\n", "\n", "# Reshape image into colors for 3D point cloud", "\n", "rgb_pts_r", "=", "color_img", "[", ":", ",", ":", ",", "0", "]", "\n", "rgb_pts_g", "=", "color_img", "[", ":", ",", ":", ",", "1", "]", "\n", "rgb_pts_b", "=", "color_img", "[", ":", ",", ":", ",", "2", "]", "\n", "rgb_pts_r", ".", "shape", "=", "(", "im_h", "*", "im_w", ",", "1", ")", "\n", "rgb_pts_g", ".", "shape", "=", "(", "im_h", "*", "im_w", ",", "1", ")", "\n", "rgb_pts_b", ".", "shape", "=", "(", "im_h", "*", "im_w", ",", "1", ")", "\n", "\n", "cam_pts", "=", "np", ".", "concatenate", "(", "(", "cam_pts_x", ",", "cam_pts_y", ",", "cam_pts_z", ")", ",", "axis", "=", "1", ")", "\n", "rgb_pts", "=", "np", ".", "concatenate", "(", "(", "rgb_pts_r", ",", "rgb_pts_g", ",", "rgb_pts_b", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "cam_pts", ",", "rgb_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.get_heightmap": [[40, 79], ["numpy.round().astype", "utils.get_pointcloud", "numpy.transpose", "numpy.argsort", "numpy.logical_and", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.floor().astype", "numpy.floor().astype", "numpy.concatenate", "numpy.logical_and", "numpy.round", "numpy.dot", "numpy.tile", "numpy.logical_and", "numpy.floor", "numpy.floor", "numpy.transpose", "numpy.logical_and"], "function", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.get_pointcloud"], ["", "def", "get_heightmap", "(", "color_img", ",", "depth_img", ",", "cam_intrinsics", ",", "cam_pose", ",", "workspace_limits", ",", "heightmap_resolution", ")", ":", "\n", "\n", "# Compute heightmap size", "\n", "    ", "heightmap_size", "=", "np", ".", "round", "(", "(", "(", "workspace_limits", "[", "1", "]", "[", "1", "]", "-", "workspace_limits", "[", "1", "]", "[", "0", "]", ")", "/", "heightmap_resolution", ",", "(", "workspace_limits", "[", "0", "]", "[", "1", "]", "-", "workspace_limits", "[", "0", "]", "[", "0", "]", ")", "/", "heightmap_resolution", ")", ")", ".", "astype", "(", "int", ")", "\n", "\n", "# Get 3D point cloud from RGB-D images", "\n", "surface_pts", ",", "color_pts", "=", "get_pointcloud", "(", "color_img", ",", "depth_img", ",", "cam_intrinsics", ")", "\n", "\n", "# Transform 3D point cloud from camera coordinates to robot coordinates", "\n", "surface_pts", "=", "np", ".", "transpose", "(", "np", ".", "dot", "(", "cam_pose", "[", "0", ":", "3", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "surface_pts", ")", ")", "+", "np", ".", "tile", "(", "cam_pose", "[", "0", ":", "3", ",", "3", ":", "]", ",", "(", "1", ",", "surface_pts", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "\n", "# Sort surface points by z value", "\n", "sort_z_ind", "=", "np", ".", "argsort", "(", "surface_pts", "[", ":", ",", "2", "]", ")", "\n", "surface_pts", "=", "surface_pts", "[", "sort_z_ind", "]", "\n", "color_pts", "=", "color_pts", "[", "sort_z_ind", "]", "\n", "\n", "# Filter out surface points outside heightmap boundaries", "\n", "heightmap_valid_ind", "=", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "surface_pts", "[", ":", ",", "0", "]", ">=", "workspace_limits", "[", "0", "]", "[", "0", "]", ",", "surface_pts", "[", ":", ",", "0", "]", "<", "workspace_limits", "[", "0", "]", "[", "1", "]", ")", ",", "surface_pts", "[", ":", ",", "1", "]", ">=", "workspace_limits", "[", "1", "]", "[", "0", "]", ")", ",", "surface_pts", "[", ":", ",", "1", "]", "<", "workspace_limits", "[", "1", "]", "[", "1", "]", ")", ",", "surface_pts", "[", ":", ",", "2", "]", "<", "workspace_limits", "[", "2", "]", "[", "1", "]", ")", "\n", "surface_pts", "=", "surface_pts", "[", "heightmap_valid_ind", "]", "\n", "color_pts", "=", "color_pts", "[", "heightmap_valid_ind", "]", "\n", "\n", "# Create orthographic top-down-view RGB-D heightmaps", "\n", "color_heightmap_r", "=", "np", ".", "zeros", "(", "(", "heightmap_size", "[", "0", "]", ",", "heightmap_size", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "color_heightmap_g", "=", "np", ".", "zeros", "(", "(", "heightmap_size", "[", "0", "]", ",", "heightmap_size", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "color_heightmap_b", "=", "np", ".", "zeros", "(", "(", "heightmap_size", "[", "0", "]", ",", "heightmap_size", "[", "1", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "depth_heightmap", "=", "np", ".", "zeros", "(", "heightmap_size", ")", "\n", "heightmap_pix_x", "=", "np", ".", "floor", "(", "(", "surface_pts", "[", ":", ",", "0", "]", "-", "workspace_limits", "[", "0", "]", "[", "0", "]", ")", "/", "heightmap_resolution", ")", ".", "astype", "(", "int", ")", "\n", "heightmap_pix_y", "=", "np", ".", "floor", "(", "(", "surface_pts", "[", ":", ",", "1", "]", "-", "workspace_limits", "[", "1", "]", "[", "0", "]", ")", "/", "heightmap_resolution", ")", ".", "astype", "(", "int", ")", "\n", "color_heightmap_r", "[", "heightmap_pix_y", ",", "heightmap_pix_x", "]", "=", "color_pts", "[", ":", ",", "[", "0", "]", "]", "\n", "color_heightmap_g", "[", "heightmap_pix_y", ",", "heightmap_pix_x", "]", "=", "color_pts", "[", ":", ",", "[", "1", "]", "]", "\n", "color_heightmap_b", "[", "heightmap_pix_y", ",", "heightmap_pix_x", "]", "=", "color_pts", "[", ":", ",", "[", "2", "]", "]", "\n", "color_heightmap", "=", "np", ".", "concatenate", "(", "(", "color_heightmap_r", ",", "color_heightmap_g", ",", "color_heightmap_b", ")", ",", "axis", "=", "2", ")", "\n", "depth_heightmap", "[", "heightmap_pix_y", ",", "heightmap_pix_x", "]", "=", "surface_pts", "[", ":", ",", "2", "]", "\n", "z_bottom", "=", "workspace_limits", "[", "2", "]", "[", "0", "]", "\n", "depth_heightmap", "=", "depth_heightmap", "-", "z_bottom", "\n", "depth_heightmap", "[", "depth_heightmap", "<", "0", "]", "=", "0", "\n", "depth_heightmap", "[", "depth_heightmap", "==", "-", "z_bottom", "]", "=", "np", ".", "nan", "\n", "\n", "return", "color_heightmap", ",", "depth_heightmap", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.pcwrite": [[81, 104], ["open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "range", "open.close", "bytearray", "bytearray", "bytearray", "bytearray", "bytearray", "bytearray", "bytearray", "bytearray", "bytearray", "bytearray", "open.write", "numpy.ones().astype", "bytearray", "struct.pack", "numpy.ones", "[].tostring", "[].tostring", "[].tostring"], "function", ["None"], ["", "def", "pcwrite", "(", "xyz_pts", ",", "filename", ",", "rgb_pts", "=", "None", ")", ":", "\n", "    ", "assert", "xyz_pts", ".", "shape", "[", "1", "]", "==", "3", ",", "'input XYZ points should be an Nx3 matrix'", "\n", "if", "rgb_pts", "is", "None", ":", "\n", "        ", "rgb_pts", "=", "np", ".", "ones", "(", "xyz_pts", ".", "shape", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "", "assert", "xyz_pts", ".", "shape", "==", "rgb_pts", ".", "shape", ",", "'input RGB colors should be Nx3 matrix and same size as input XYZ points'", "\n", "\n", "# Write header for .ply file", "\n", "pc_file", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'ply\\n'", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'format binary_little_endian 1.0\\n'", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "(", "'element vertex %d\\n'", "%", "xyz_pts", ".", "shape", "[", "0", "]", ")", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'property float x\\n'", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'property float y\\n'", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'property float z\\n'", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'property uchar red\\n'", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'property uchar green\\n'", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'property uchar blue\\n'", ",", "'utf8'", ")", ")", "\n", "pc_file", ".", "write", "(", "bytearray", "(", "'end_header\\n'", ",", "'utf8'", ")", ")", "\n", "\n", "# Write 3D points to .ply file", "\n", "for", "i", "in", "range", "(", "xyz_pts", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "pc_file", ".", "write", "(", "bytearray", "(", "struct", ".", "pack", "(", "\"fffccc\"", ",", "xyz_pts", "[", "i", "]", "[", "0", "]", ",", "xyz_pts", "[", "i", "]", "[", "1", "]", ",", "xyz_pts", "[", "i", "]", "[", "2", "]", ",", "rgb_pts", "[", "i", "]", "[", "0", "]", ".", "tostring", "(", ")", ",", "rgb_pts", "[", "i", "]", "[", "1", "]", ".", "tostring", "(", ")", ",", "rgb_pts", "[", "i", "]", "[", "2", "]", ".", "tostring", "(", ")", ")", ")", ")", "\n", "", "pc_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.get_affordance_vis": [[106, 133], ["range", "range", "cv2.applyColorMap", "cv2.resize", "numpy.concatenate", "cv2.circle", "numpy.concatenate", "int", "int", "cv2.cvtColor"], "function", ["None"], ["", "def", "get_affordance_vis", "(", "grasp_affordances", ",", "input_images", ",", "num_rotations", ",", "best_pix_ind", ")", ":", "\n", "    ", "vis", "=", "None", "\n", "for", "vis_row", "in", "range", "(", "num_rotations", "/", "4", ")", ":", "\n", "        ", "tmp_row_vis", "=", "None", "\n", "for", "vis_col", "in", "range", "(", "4", ")", ":", "\n", "            ", "rotate_idx", "=", "vis_row", "*", "4", "+", "vis_col", "\n", "affordance_vis", "=", "grasp_affordances", "[", "rotate_idx", ",", ":", ",", ":", "]", "\n", "affordance_vis", "[", "affordance_vis", "<", "0", "]", "=", "0", "# assume probability", "\n", "# affordance_vis = np.divide(affordance_vis, np.max(affordance_vis))", "\n", "affordance_vis", "[", "affordance_vis", ">", "1", "]", "=", "1", "# assume probability", "\n", "affordance_vis", ".", "shape", "=", "(", "grasp_affordances", ".", "shape", "[", "1", "]", ",", "grasp_affordances", ".", "shape", "[", "2", "]", ")", "\n", "affordance_vis", "=", "cv2", ".", "applyColorMap", "(", "(", "affordance_vis", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "input_image_vis", "=", "(", "input_images", "[", "rotate_idx", ",", ":", ",", ":", ",", ":", "]", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "input_image_vis", "=", "cv2", ".", "resize", "(", "input_image_vis", ",", "(", "0", ",", "0", ")", ",", "fx", "=", "0.5", ",", "fy", "=", "0.5", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", "\n", "affordance_vis", "=", "(", "0.5", "*", "cv2", ".", "cvtColor", "(", "input_image_vis", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "+", "0.5", "*", "affordance_vis", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "rotate_idx", "==", "best_pix_ind", "[", "0", "]", ":", "\n", "                ", "affordance_vis", "=", "cv2", ".", "circle", "(", "affordance_vis", ",", "(", "int", "(", "best_pix_ind", "[", "2", "]", ")", ",", "int", "(", "best_pix_ind", "[", "1", "]", ")", ")", ",", "7", ",", "(", "0", ",", "0", ",", "255", ")", ",", "2", ")", "\n", "", "if", "tmp_row_vis", "is", "None", ":", "\n", "                ", "tmp_row_vis", "=", "affordance_vis", "\n", "", "else", ":", "\n", "                ", "tmp_row_vis", "=", "np", ".", "concatenate", "(", "(", "tmp_row_vis", ",", "affordance_vis", ")", ",", "axis", "=", "1", ")", "\n", "", "", "if", "vis", "is", "None", ":", "\n", "            ", "vis", "=", "tmp_row_vis", "\n", "", "else", ":", "\n", "            ", "vis", "=", "np", ".", "concatenate", "(", "(", "vis", ",", "tmp_row_vis", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "vis", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.get_difference": [[135, 163], ["numpy.concatenate", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.sqrt", "numpy.sqrt", "numpy.argmin", "numpy.argmin", "np.tile.astype", "np.tile.astype", "numpy.sum", "numpy.sum", "numpy.sum().astype", "numpy.sum().astype", "numpy.asarray", "numpy.power", "numpy.power", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "get_difference", "(", "color_heightmap", ",", "color_space", ",", "bg_color_heightmap", ")", ":", "\n", "\n", "    ", "color_space", "=", "np", ".", "concatenate", "(", "(", "color_space", ",", "np", ".", "asarray", "(", "[", "[", "0.0", ",", "0.0", ",", "0.0", "]", "]", ")", ")", ",", "axis", "=", "0", ")", "\n", "color_space", ".", "shape", "=", "(", "color_space", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "color_space", ".", "shape", "[", "1", "]", ")", "\n", "color_space", "=", "np", ".", "tile", "(", "color_space", ",", "(", "1", ",", "color_heightmap", ".", "shape", "[", "0", "]", ",", "color_heightmap", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "\n", "# Normalize color heightmaps", "\n", "color_heightmap", "=", "color_heightmap", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "color_heightmap", ".", "shape", "=", "(", "1", ",", "color_heightmap", ".", "shape", "[", "0", "]", ",", "color_heightmap", ".", "shape", "[", "1", "]", ",", "color_heightmap", ".", "shape", "[", "2", "]", ")", "\n", "color_heightmap", "=", "np", ".", "tile", "(", "color_heightmap", ",", "(", "color_space", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "bg_color_heightmap", "=", "bg_color_heightmap", ".", "astype", "(", "float", ")", "/", "255.0", "\n", "bg_color_heightmap", ".", "shape", "=", "(", "1", ",", "bg_color_heightmap", ".", "shape", "[", "0", "]", ",", "bg_color_heightmap", ".", "shape", "[", "1", "]", ",", "bg_color_heightmap", ".", "shape", "[", "2", "]", ")", "\n", "bg_color_heightmap", "=", "np", ".", "tile", "(", "bg_color_heightmap", ",", "(", "color_space", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "\n", "# Compute nearest neighbor distances to key colors", "\n", "key_color_dist", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "color_heightmap", "-", "color_space", ",", "2", ")", ",", "axis", "=", "3", ")", ")", "\n", "# key_color_dist_prob = F.softmax(Variable(torch.from_numpy(key_color_dist), volatile=True), dim=0).data.numpy()", "\n", "\n", "bg_key_color_dist", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "bg_color_heightmap", "-", "color_space", ",", "2", ")", ",", "axis", "=", "3", ")", ")", "\n", "# bg_key_color_dist_prob = F.softmax(Variable(torch.from_numpy(bg_key_color_dist), volatile=True), dim=0).data.numpy()", "\n", "\n", "key_color_match", "=", "np", ".", "argmin", "(", "key_color_dist", ",", "axis", "=", "0", ")", "\n", "bg_key_color_match", "=", "np", ".", "argmin", "(", "bg_key_color_dist", ",", "axis", "=", "0", ")", "\n", "key_color_match", "[", "key_color_match", "==", "color_space", ".", "shape", "[", "0", "]", "-", "1", "]", "=", "color_space", ".", "shape", "[", "0", "]", "+", "1", "\n", "bg_key_color_match", "[", "bg_key_color_match", "==", "color_space", ".", "shape", "[", "0", "]", "-", "1", "]", "=", "color_space", ".", "shape", "[", "0", "]", "+", "2", "\n", "\n", "return", "np", ".", "sum", "(", "key_color_match", "==", "bg_key_color_match", ")", ".", "astype", "(", "float", ")", "/", "np", ".", "sum", "(", "bg_key_color_match", "<", "color_space", ".", "shape", "[", "0", "]", ")", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.euler2rotm": [[166, 181], ["numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.sin"], "function", ["None"], ["", "def", "euler2rotm", "(", "theta", ")", ":", "\n", "    ", "R_x", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "math", ".", "cos", "(", "theta", "[", "0", "]", ")", ",", "-", "math", ".", "sin", "(", "theta", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "math", ".", "sin", "(", "theta", "[", "0", "]", ")", ",", "math", ".", "cos", "(", "theta", "[", "0", "]", ")", "]", "\n", "]", ")", "\n", "R_y", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "theta", "[", "1", "]", ")", ",", "0", ",", "math", ".", "sin", "(", "theta", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "math", ".", "sin", "(", "theta", "[", "1", "]", ")", ",", "0", ",", "math", ".", "cos", "(", "theta", "[", "1", "]", ")", "]", "\n", "]", ")", "\n", "R_z", "=", "np", ".", "array", "(", "[", "[", "math", ".", "cos", "(", "theta", "[", "2", "]", ")", ",", "-", "math", ".", "sin", "(", "theta", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "math", ".", "sin", "(", "theta", "[", "2", "]", ")", ",", "math", ".", "cos", "(", "theta", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "R_z", ",", "np", ".", "dot", "(", "R_y", ",", "R_x", ")", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.isRotm": [[184, 190], ["numpy.transpose", "numpy.dot", "numpy.identity", "numpy.linalg.norm"], "function", ["None"], ["", "def", "isRotm", "(", "R", ")", ":", "\n", "    ", "Rt", "=", "np", ".", "transpose", "(", "R", ")", "\n", "shouldBeIdentity", "=", "np", ".", "dot", "(", "Rt", ",", "R", ")", "\n", "I", "=", "np", ".", "identity", "(", "3", ",", "dtype", "=", "R", ".", "dtype", ")", "\n", "n", "=", "np", ".", "linalg", ".", "norm", "(", "I", "-", "shouldBeIdentity", ")", "\n", "return", "n", "<", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.rotm2euler": [[193, 210], ["utils.isRotm", "math.sqrt", "numpy.array", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2"], "function", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.isRotm"], ["", "def", "rotm2euler", "(", "R", ")", ":", "\n", "\n", "    ", "assert", "(", "isRotm", "(", "R", ")", ")", "\n", "\n", "sy", "=", "math", ".", "sqrt", "(", "R", "[", "0", ",", "0", "]", "*", "R", "[", "0", ",", "0", "]", "+", "R", "[", "1", ",", "0", "]", "*", "R", "[", "1", ",", "0", "]", ")", "\n", "singular", "=", "sy", "<", "1e-6", "\n", "\n", "if", "not", "singular", ":", "\n", "        ", "x", "=", "math", ".", "atan2", "(", "R", "[", "2", ",", "1", "]", ",", "R", "[", "2", ",", "2", "]", ")", "\n", "y", "=", "math", ".", "atan2", "(", "-", "R", "[", "2", ",", "0", "]", ",", "sy", ")", "\n", "z", "=", "math", ".", "atan2", "(", "R", "[", "1", ",", "0", "]", ",", "R", "[", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "math", ".", "atan2", "(", "-", "R", "[", "1", ",", "2", "]", ",", "R", "[", "1", ",", "1", "]", ")", "\n", "y", "=", "math", ".", "atan2", "(", "-", "R", "[", "2", ",", "0", "]", ",", "sy", ")", "\n", "z", "=", "0", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.angle2rotm": [[212, 234], ["math.sin", "math.cos", "numpy.diag", "numpy.array", "numpy.identity", "numpy.linalg.norm", "numpy.outer", "numpy.array", "numpy.dot"], "function", ["None"], ["", "def", "angle2rotm", "(", "angle", ",", "axis", ",", "point", "=", "None", ")", ":", "\n", "# Copyright (c) 2006-2018, Christoph Gohlke", "\n", "\n", "    ", "sina", "=", "math", ".", "sin", "(", "angle", ")", "\n", "cosa", "=", "math", ".", "cos", "(", "angle", ")", "\n", "axis", "=", "axis", "/", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "\n", "\n", "# Rotation matrix around unit vector", "\n", "R", "=", "np", ".", "diag", "(", "[", "cosa", ",", "cosa", ",", "cosa", "]", ")", "\n", "R", "+=", "np", ".", "outer", "(", "axis", ",", "axis", ")", "*", "(", "1.0", "-", "cosa", ")", "\n", "axis", "*=", "sina", "\n", "R", "+=", "np", ".", "array", "(", "[", "[", "0.0", ",", "-", "axis", "[", "2", "]", ",", "axis", "[", "1", "]", "]", ",", "\n", "[", "axis", "[", "2", "]", ",", "0.0", ",", "-", "axis", "[", "0", "]", "]", ",", "\n", "[", "-", "axis", "[", "1", "]", ",", "axis", "[", "0", "]", ",", "0.0", "]", "]", ")", "\n", "M", "=", "np", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "if", "point", "is", "not", "None", ":", "\n", "\n", "# Rotation not around origin", "\n", "        ", "point", "=", "np", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "np", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "point", "-", "np", ".", "dot", "(", "R", ",", "point", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.rotm2angle": [[236, 300], ["utils.isRotm", "numpy.sqrt", "numpy.arccos", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "abs", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.None.utils.isRotm"], ["", "def", "rotm2angle", "(", "R", ")", ":", "\n", "# From: euclideanspace.com", "\n", "\n", "    ", "epsilon", "=", "0.01", "# Margin to allow for rounding errors", "\n", "epsilon2", "=", "0.1", "# Margin to distinguish between 0 and 180 degrees", "\n", "\n", "assert", "(", "isRotm", "(", "R", ")", ")", "\n", "\n", "if", "(", "(", "abs", "(", "R", "[", "0", "]", "[", "1", "]", "-", "R", "[", "1", "]", "[", "0", "]", ")", "<", "epsilon", ")", "and", "(", "abs", "(", "R", "[", "0", "]", "[", "2", "]", "-", "R", "[", "2", "]", "[", "0", "]", ")", "<", "epsilon", ")", "and", "(", "abs", "(", "R", "[", "1", "]", "[", "2", "]", "-", "R", "[", "2", "]", "[", "1", "]", ")", "<", "epsilon", ")", ")", ":", "\n", "# Singularity found", "\n", "# First check for identity matrix which must have +1 for all terms in leading diagonaland zero in other terms", "\n", "        ", "if", "(", "(", "abs", "(", "R", "[", "0", "]", "[", "1", "]", "+", "R", "[", "1", "]", "[", "0", "]", ")", "<", "epsilon2", ")", "and", "(", "abs", "(", "R", "[", "0", "]", "[", "2", "]", "+", "R", "[", "2", "]", "[", "0", "]", ")", "<", "epsilon2", ")", "and", "(", "abs", "(", "R", "[", "1", "]", "[", "2", "]", "+", "R", "[", "2", "]", "[", "1", "]", ")", "<", "epsilon2", ")", "and", "(", "abs", "(", "R", "[", "0", "]", "[", "0", "]", "+", "R", "[", "1", "]", "[", "1", "]", "+", "R", "[", "2", "]", "[", "2", "]", "-", "3", ")", "<", "epsilon2", ")", ")", ":", "\n", "# this singularity is identity matrix so angle = 0", "\n", "            ", "return", "[", "0", ",", "1", ",", "0", ",", "0", "]", "# zero angle, arbitrary axis", "\n", "\n", "# Otherwise this singularity is angle = 180", "\n", "", "angle", "=", "np", ".", "pi", "\n", "xx", "=", "(", "R", "[", "0", "]", "[", "0", "]", "+", "1", ")", "/", "2", "\n", "yy", "=", "(", "R", "[", "1", "]", "[", "1", "]", "+", "1", ")", "/", "2", "\n", "zz", "=", "(", "R", "[", "2", "]", "[", "2", "]", "+", "1", ")", "/", "2", "\n", "xy", "=", "(", "R", "[", "0", "]", "[", "1", "]", "+", "R", "[", "1", "]", "[", "0", "]", ")", "/", "4", "\n", "xz", "=", "(", "R", "[", "0", "]", "[", "2", "]", "+", "R", "[", "2", "]", "[", "0", "]", ")", "/", "4", "\n", "yz", "=", "(", "R", "[", "1", "]", "[", "2", "]", "+", "R", "[", "2", "]", "[", "1", "]", ")", "/", "4", "\n", "if", "(", "(", "xx", ">", "yy", ")", "and", "(", "xx", ">", "zz", ")", ")", ":", "# R[0][0] is the largest diagonal term", "\n", "            ", "if", "(", "xx", "<", "epsilon", ")", ":", "\n", "                ", "x", "=", "0", "\n", "y", "=", "0.7071", "\n", "z", "=", "0.7071", "\n", "", "else", ":", "\n", "                ", "x", "=", "np", ".", "sqrt", "(", "xx", ")", "\n", "y", "=", "xy", "/", "x", "\n", "z", "=", "xz", "/", "x", "\n", "", "", "elif", "(", "yy", ">", "zz", ")", ":", "# R[1][1] is the largest diagonal term", "\n", "            ", "if", "(", "yy", "<", "epsilon", ")", ":", "\n", "                ", "x", "=", "0.7071", "\n", "y", "=", "0", "\n", "z", "=", "0.7071", "\n", "", "else", ":", "\n", "                ", "y", "=", "np", ".", "sqrt", "(", "yy", ")", "\n", "x", "=", "xy", "/", "y", "\n", "z", "=", "yz", "/", "y", "\n", "", "", "else", ":", "# R[2][2] is the largest diagonal term so base result on this", "\n", "            ", "if", "(", "zz", "<", "epsilon", ")", ":", "\n", "                ", "x", "=", "0.7071", "\n", "y", "=", "0.7071", "\n", "z", "=", "0", "\n", "", "else", ":", "\n", "                ", "z", "=", "np", ".", "sqrt", "(", "zz", ")", "\n", "x", "=", "xz", "/", "z", "\n", "y", "=", "yz", "/", "z", "\n", "", "", "return", "[", "angle", ",", "x", ",", "y", ",", "z", "]", "# Return 180 deg rotation", "\n", "\n", "# As we have reached here there are no singularities so we can handle normally", "\n", "", "s", "=", "np", ".", "sqrt", "(", "(", "R", "[", "2", "]", "[", "1", "]", "-", "R", "[", "1", "]", "[", "2", "]", ")", "*", "(", "R", "[", "2", "]", "[", "1", "]", "-", "R", "[", "1", "]", "[", "2", "]", ")", "+", "(", "R", "[", "0", "]", "[", "2", "]", "-", "R", "[", "2", "]", "[", "0", "]", ")", "*", "(", "R", "[", "0", "]", "[", "2", "]", "-", "R", "[", "2", "]", "[", "0", "]", ")", "+", "(", "R", "[", "1", "]", "[", "0", "]", "-", "R", "[", "0", "]", "[", "1", "]", ")", "*", "(", "R", "[", "1", "]", "[", "0", "]", "-", "R", "[", "0", "]", "[", "1", "]", ")", ")", "# used to normalise", "\n", "if", "(", "abs", "(", "s", ")", "<", "0.001", ")", ":", "\n", "        ", "s", "=", "1", "\n", "\n", "# Prevent divide by zero, should not happen if matrix is orthogonal and should be", "\n", "# Caught by singularity test above, but I've left it in just in case", "\n", "", "angle", "=", "np", ".", "arccos", "(", "(", "R", "[", "0", "]", "[", "0", "]", "+", "R", "[", "1", "]", "[", "1", "]", "+", "R", "[", "2", "]", "[", "2", "]", "-", "1", ")", "/", "2", ")", "\n", "x", "=", "(", "R", "[", "2", "]", "[", "1", "]", "-", "R", "[", "1", "]", "[", "2", "]", ")", "/", "s", "\n", "y", "=", "(", "R", "[", "0", "]", "[", "2", "]", "-", "R", "[", "2", "]", "[", "0", "]", ")", "/", "s", "\n", "z", "=", "(", "R", "[", "1", "]", "[", "0", "]", "-", "R", "[", "0", "]", "[", "1", "]", ")", "/", "s", "\n", "return", "[", "angle", ",", "x", ",", "y", ",", "z", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.real.camera.Camera.__init__": [[13, 28], ["socket.socket", "camera.Camera.tcp_socket.connect", "camera.Camera.get_data"], "methods", ["home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.real.camera.Camera.get_data"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "# Data options (change me)", "\n", "        ", "self", ".", "im_height", "=", "720", "\n", "self", ".", "im_width", "=", "1280", "\n", "self", ".", "tcp_host_ip", "=", "'127.0.0.1'", "\n", "self", ".", "tcp_port", "=", "50000", "\n", "self", ".", "buffer_size", "=", "4098", "# 4 KiB", "\n", "\n", "# Connect to server", "\n", "self", ".", "tcp_socket", "=", "socket", ".", "socket", "(", "socket", ".", "AF_INET", ",", "socket", ".", "SOCK_STREAM", ")", "\n", "self", ".", "tcp_socket", ".", "connect", "(", "(", "self", ".", "tcp_host_ip", ",", "self", ".", "tcp_port", ")", ")", "\n", "\n", "self", ".", "intrinsics", "=", "None", "\n", "self", ".", "get_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.real.camera.Camera.get_data": [[30, 51], ["camera.Camera.tcp_socket.send", "numpy.fromstring().reshape", "numpy.fromstring().reshape", "numpy.fromstring().reshape", "len", "camera.Camera.tcp_socket.recv", "numpy.fromstring", "numpy.fromstring().reshape.astype", "numpy.fromstring", "numpy.fromstring", "numpy.fromstring"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "\n", "# Ping the server with anything", "\n", "        ", "self", ".", "tcp_socket", ".", "send", "(", "b'asdf'", ")", "\n", "\n", "# Fetch TCP data:", "\n", "#     color camera intrinsics, 9 floats, number of bytes: 9 x 4", "\n", "#     depth scale for converting depth from uint16 to float, 1 float, number of bytes: 4", "\n", "#     depth image, self.im_width x self.im_height uint16, number of bytes: self.im_width x self.im_height x 2", "\n", "#     color image, self.im_width x self.im_height x 3 uint8, number of bytes: self.im_width x self.im_height x 3", "\n", "data", "=", "b''", "\n", "while", "len", "(", "data", ")", "<", "(", "10", "*", "4", "+", "self", ".", "im_height", "*", "self", ".", "im_width", "*", "5", ")", ":", "\n", "            ", "data", "+=", "self", ".", "tcp_socket", ".", "recv", "(", "self", ".", "buffer_size", ")", "\n", "\n", "# Reorganize TCP data into color and depth frame", "\n", "", "self", ".", "intrinsics", "=", "np", ".", "fromstring", "(", "data", "[", "0", ":", "(", "9", "*", "4", ")", "]", ",", "np", ".", "float32", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "depth_scale", "=", "np", ".", "fromstring", "(", "data", "[", "(", "9", "*", "4", ")", ":", "(", "10", "*", "4", ")", "]", ",", "np", ".", "float32", ")", "[", "0", "]", "\n", "depth_img", "=", "np", ".", "fromstring", "(", "data", "[", "(", "10", "*", "4", ")", ":", "(", "(", "10", "*", "4", ")", "+", "self", ".", "im_width", "*", "self", ".", "im_height", "*", "2", ")", "]", ",", "np", ".", "uint16", ")", ".", "reshape", "(", "self", ".", "im_height", ",", "self", ".", "im_width", ")", "\n", "color_img", "=", "np", ".", "fromstring", "(", "data", "[", "(", "(", "10", "*", "4", ")", "+", "self", ".", "im_width", "*", "self", ".", "im_height", "*", "2", ")", ":", "]", ",", "np", ".", "uint8", ")", ".", "reshape", "(", "self", ".", "im_height", ",", "self", ".", "im_width", ",", "3", ")", "\n", "depth_img", "=", "depth_img", ".", "astype", "(", "float", ")", "*", "depth_scale", "\n", "return", "color_img", ",", "depth_img", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetJointPosition": [[167, 173], ["ctypes.c_float", "c_GetJointPosition", "ctypes.byref"], "function", ["None"], ["def", "simxGetJointPosition", "(", "clientID", ",", "jointHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "position", "=", "ct", ".", "c_float", "(", ")", "\n", "return", "c_GetJointPosition", "(", "clientID", ",", "jointHandle", ",", "ct", ".", "byref", "(", "position", ")", ",", "operationMode", ")", ",", "position", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetJointPosition": [[174, 180], ["c_SetJointPosition"], "function", ["None"], ["", "def", "simxSetJointPosition", "(", "clientID", ",", "jointHandle", ",", "position", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetJointPosition", "(", "clientID", ",", "jointHandle", ",", "position", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetJointMatrix": [[181, 191], ["c_GetJointMatrix", "range", "arr.append"], "function", ["None"], ["", "def", "simxGetJointMatrix", "(", "clientID", ",", "jointHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "matrix", "=", "(", "ct", ".", "c_float", "*", "12", ")", "(", ")", "\n", "ret", "=", "c_GetJointMatrix", "(", "clientID", ",", "jointHandle", ",", "matrix", ",", "operationMode", ")", "\n", "arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "        ", "arr", ".", "append", "(", "matrix", "[", "i", "]", ")", "\n", "", "return", "ret", ",", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetSphericalJointMatrix": [[192, 198], ["c_SetSphericalJointMatrix"], "function", ["None"], ["", "def", "simxSetSphericalJointMatrix", "(", "clientID", ",", "jointHandle", ",", "matrix", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "matrix", "=", "(", "ct", ".", "c_float", "*", "12", ")", "(", "*", "matrix", ")", "\n", "return", "c_SetSphericalJointMatrix", "(", "clientID", ",", "jointHandle", ",", "matrix", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetJointTargetVelocity": [[199, 205], ["c_SetJointTargetVelocity"], "function", ["None"], ["", "def", "simxSetJointTargetVelocity", "(", "clientID", ",", "jointHandle", ",", "targetVelocity", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetJointTargetVelocity", "(", "clientID", ",", "jointHandle", ",", "targetVelocity", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetJointTargetPosition": [[206, 212], ["c_SetJointTargetPosition"], "function", ["None"], ["", "def", "simxSetJointTargetPosition", "(", "clientID", ",", "jointHandle", ",", "targetPosition", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetJointTargetPosition", "(", "clientID", ",", "jointHandle", ",", "targetPosition", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxJointGetForce": [[213, 219], ["ctypes.c_float", "c_GetJointForce", "ctypes.byref"], "function", ["None"], ["", "def", "simxJointGetForce", "(", "clientID", ",", "jointHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "force", "=", "ct", ".", "c_float", "(", ")", "\n", "return", "c_GetJointForce", "(", "clientID", ",", "jointHandle", ",", "ct", ".", "byref", "(", "force", ")", ",", "operationMode", ")", ",", "force", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetJointForce": [[220, 226], ["ctypes.c_float", "c_GetJointForce", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetJointForce", "(", "clientID", ",", "jointHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "force", "=", "ct", ".", "c_float", "(", ")", "\n", "return", "c_GetJointForce", "(", "clientID", ",", "jointHandle", ",", "ct", ".", "byref", "(", "force", ")", ",", "operationMode", ")", ",", "force", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetJointForce": [[227, 232], ["c_SetJointForce"], "function", ["None"], ["", "def", "simxSetJointForce", "(", "clientID", ",", "jointHandle", ",", "force", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "return", "c_SetJointForce", "(", "clientID", ",", "jointHandle", ",", "force", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxReadForceSensor": [[233, 252], ["ctypes.c_ubyte", "c_ReadForceSensor", "range", "range", "ctypes.byref", "arr1.append", "arr2.append"], "function", ["None"], ["", "def", "simxReadForceSensor", "(", "clientID", ",", "forceSensorHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "state", "=", "ct", ".", "c_ubyte", "(", ")", "\n", "forceVector", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "torqueVector", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "ret", "=", "c_ReadForceSensor", "(", "clientID", ",", "forceSensorHandle", ",", "ct", ".", "byref", "(", "state", ")", ",", "forceVector", ",", "torqueVector", ",", "operationMode", ")", "\n", "arr1", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr1", ".", "append", "(", "forceVector", "[", "i", "]", ")", "\n", "", "arr2", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr2", ".", "append", "(", "torqueVector", "[", "i", "]", ")", "\n", "#if sys.version_info[0] == 3:", "\n", "#    state=state.value", "\n", "#else:", "\n", "#    state=ord(state.value)", "\n", "", "return", "ret", ",", "state", ".", "value", ",", "arr1", ",", "arr2", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxBreakForceSensor": [[253, 258], ["c_BreakForceSensor"], "function", ["None"], ["", "def", "simxBreakForceSensor", "(", "clientID", ",", "forceSensorHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "return", "c_BreakForceSensor", "(", "clientID", ",", "forceSensorHandle", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxReadVisionSensor": [[259, 281], ["ctypes.c_ubyte", "c_ReadVisionSensor", "ctypes.POINTER", "ctypes.POINTER", "ctypes.byref", "ctypes.byref", "ctypes.byref", "range", "c_ReleaseBuffer", "c_ReleaseBuffer", "bool", "auxValues2.append"], "function", ["None"], ["", "def", "simxReadVisionSensor", "(", "clientID", ",", "sensorHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "detectionState", "=", "ct", ".", "c_ubyte", "(", ")", "\n", "auxValues", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_float", ")", "(", ")", "\n", "auxValuesCount", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", "(", ")", "\n", "ret", "=", "c_ReadVisionSensor", "(", "clientID", ",", "sensorHandle", ",", "ct", ".", "byref", "(", "detectionState", ")", ",", "ct", ".", "byref", "(", "auxValues", ")", ",", "ct", ".", "byref", "(", "auxValuesCount", ")", ",", "operationMode", ")", "\n", "\n", "auxValues2", "=", "[", "]", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "s", "=", "0", "\n", "for", "i", "in", "range", "(", "auxValuesCount", "[", "0", "]", ")", ":", "\n", "            ", "auxValues2", ".", "append", "(", "auxValues", "[", "s", ":", "s", "+", "auxValuesCount", "[", "i", "+", "1", "]", "]", ")", "\n", "s", "+=", "auxValuesCount", "[", "i", "+", "1", "]", "\n", "\n", "#free C buffers", "\n", "", "c_ReleaseBuffer", "(", "auxValues", ")", "\n", "c_ReleaseBuffer", "(", "auxValuesCount", ")", "\n", "\n", "", "return", "ret", ",", "bool", "(", "detectionState", ".", "value", "!=", "0", ")", ",", "auxValues2", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectHandle": [[282, 290], ["ctypes.c_int", "objectName.encode.encode", "c_GetObjectHandle", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetObjectHandle", "(", "clientID", ",", "objectName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "handle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "objectName", ")", "is", "str", ")", ":", "\n", "        ", "objectName", "=", "objectName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_GetObjectHandle", "(", "clientID", ",", "objectName", ",", "ct", ".", "byref", "(", "handle", ")", ",", "operationMode", ")", ",", "handle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetVisionSensorImage": [[291, 312], ["c_GetVisionSensorImage", "ctypes.POINTER", "ctypes.byref", "range", "range", "reso.append"], "function", ["None"], ["", "def", "simxGetVisionSensorImage", "(", "clientID", ",", "sensorHandle", ",", "options", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "resolution", "=", "(", "ct", ".", "c_int", "*", "2", ")", "(", ")", "\n", "c_image", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_byte", ")", "(", ")", "\n", "bytesPerPixel", "=", "3", "\n", "if", "(", "options", "and", "1", ")", "!=", "0", ":", "\n", "        ", "bytesPerPixel", "=", "1", "\n", "", "ret", "=", "c_GetVisionSensorImage", "(", "clientID", ",", "sensorHandle", ",", "resolution", ",", "ct", ".", "byref", "(", "c_image", ")", ",", "options", ",", "operationMode", ")", "\n", "\n", "reso", "=", "[", "]", "\n", "image", "=", "[", "]", "\n", "if", "(", "ret", "==", "0", ")", ":", "\n", "        ", "image", "=", "[", "None", "]", "*", "resolution", "[", "0", "]", "*", "resolution", "[", "1", "]", "*", "bytesPerPixel", "\n", "for", "i", "in", "range", "(", "resolution", "[", "0", "]", "*", "resolution", "[", "1", "]", "*", "bytesPerPixel", ")", ":", "\n", "            ", "image", "[", "i", "]", "=", "c_image", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "reso", ".", "append", "(", "resolution", "[", "i", "]", ")", "\n", "", "", "return", "ret", ",", "reso", ",", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetVisionSensorImage": [[313, 320], ["len", "c_SetVisionSensorImage"], "function", ["None"], ["", "def", "simxSetVisionSensorImage", "(", "clientID", ",", "sensorHandle", ",", "image", ",", "options", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "size", "=", "len", "(", "image", ")", "\n", "image_bytes", "=", "(", "ct", ".", "c_byte", "*", "size", ")", "(", "*", "image", ")", "\n", "return", "c_SetVisionSensorImage", "(", "clientID", ",", "sensorHandle", ",", "image_bytes", ",", "size", ",", "options", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetVisionSensorDepthBuffer": [[321, 337], ["c_GetVisionSensorDepthBuffer", "ctypes.POINTER", "ctypes.byref", "range", "range", "reso.append"], "function", ["None"], ["", "def", "simxGetVisionSensorDepthBuffer", "(", "clientID", ",", "sensorHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "c_buffer", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_float", ")", "(", ")", "\n", "resolution", "=", "(", "ct", ".", "c_int", "*", "2", ")", "(", ")", "\n", "ret", "=", "c_GetVisionSensorDepthBuffer", "(", "clientID", ",", "sensorHandle", ",", "resolution", ",", "ct", ".", "byref", "(", "c_buffer", ")", ",", "operationMode", ")", "\n", "reso", "=", "[", "]", "\n", "buffer", "=", "[", "]", "\n", "if", "(", "ret", "==", "0", ")", ":", "\n", "        ", "buffer", "=", "[", "None", "]", "*", "resolution", "[", "0", "]", "*", "resolution", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "resolution", "[", "0", "]", "*", "resolution", "[", "1", "]", ")", ":", "\n", "            ", "buffer", "[", "i", "]", "=", "c_buffer", "[", "i", "]", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "reso", ".", "append", "(", "resolution", "[", "i", "]", ")", "\n", "", "", "return", "ret", ",", "reso", ",", "buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectChild": [[338, 344], ["ctypes.c_int", "c_GetObjectChild", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetObjectChild", "(", "clientID", ",", "parentObjectHandle", ",", "childIndex", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "childObjectHandle", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetObjectChild", "(", "clientID", ",", "parentObjectHandle", ",", "childIndex", ",", "ct", ".", "byref", "(", "childObjectHandle", ")", ",", "operationMode", ")", ",", "childObjectHandle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectParent": [[345, 352], ["ctypes.c_int", "c_GetObjectParent", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetObjectParent", "(", "clientID", ",", "childObjectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "parentObjectHandle", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetObjectParent", "(", "clientID", ",", "childObjectHandle", ",", "ct", ".", "byref", "(", "parentObjectHandle", ")", ",", "operationMode", ")", ",", "parentObjectHandle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxReadProximitySensor": [[353, 370], ["ctypes.c_ubyte", "ctypes.c_int", "c_ReadProximitySensor", "range", "range", "ctypes.byref", "ctypes.byref", "arr1.append", "arr2.append", "bool"], "function", ["None"], ["", "def", "simxReadProximitySensor", "(", "clientID", ",", "sensorHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "detectionState", "=", "ct", ".", "c_ubyte", "(", ")", "\n", "detectedObjectHandle", "=", "ct", ".", "c_int", "(", ")", "\n", "detectedPoint", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "detectedSurfaceNormalVector", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "ret", "=", "c_ReadProximitySensor", "(", "clientID", ",", "sensorHandle", ",", "ct", ".", "byref", "(", "detectionState", ")", ",", "detectedPoint", ",", "ct", ".", "byref", "(", "detectedObjectHandle", ")", ",", "detectedSurfaceNormalVector", ",", "operationMode", ")", "\n", "arr1", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr1", ".", "append", "(", "detectedPoint", "[", "i", "]", ")", "\n", "", "arr2", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr2", ".", "append", "(", "detectedSurfaceNormalVector", "[", "i", "]", ")", "\n", "", "return", "ret", ",", "bool", "(", "detectionState", ".", "value", "!=", "0", ")", ",", "arr1", ",", "detectedObjectHandle", ".", "value", ",", "arr2", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxLoadModel": [[371, 379], ["ctypes.c_int", "modelPathAndName.encode.encode", "c_LoadModel", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxLoadModel", "(", "clientID", ",", "modelPathAndName", ",", "options", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "baseHandle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "modelPathAndName", ")", "is", "str", ")", ":", "\n", "        ", "modelPathAndName", "=", "modelPathAndName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_LoadModel", "(", "clientID", ",", "modelPathAndName", ",", "options", ",", "ct", ".", "byref", "(", "baseHandle", ")", ",", "operationMode", ")", ",", "baseHandle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxLoadUI": [[380, 399], ["ctypes.c_int", "c_LoadUI", "ctypes.POINTER", "uiPathAndName.encode.encode", "ctypes.byref", "ctypes.byref", "range", "c_ReleaseBuffer", "type", "handles.append"], "function", ["None"], ["", "def", "simxLoadUI", "(", "clientID", ",", "uiPathAndName", ",", "options", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "count", "=", "ct", ".", "c_int", "(", ")", "\n", "uiHandles", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "uiPathAndName", ")", "is", "str", ")", ":", "\n", "        ", "uiPathAndName", "=", "uiPathAndName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "ret", "=", "c_LoadUI", "(", "clientID", ",", "uiPathAndName", ",", "options", ",", "ct", ".", "byref", "(", "count", ")", ",", "ct", ".", "byref", "(", "uiHandles", ")", ",", "operationMode", ")", "\n", "\n", "handles", "=", "[", "]", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "count", ".", "value", ")", ":", "\n", "            ", "handles", ".", "append", "(", "uiHandles", "[", "i", "]", ")", "\n", "#free C buffers", "\n", "", "c_ReleaseBuffer", "(", "uiHandles", ")", "\n", "\n", "", "return", "ret", ",", "handles", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxLoadScene": [[400, 408], ["c_LoadScene", "scenePathAndName.encode.encode", "type"], "function", ["None"], ["", "def", "simxLoadScene", "(", "clientID", ",", "scenePathAndName", ",", "options", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "scenePathAndName", ")", "is", "str", ")", ":", "\n", "        ", "scenePathAndName", "=", "scenePathAndName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_LoadScene", "(", "clientID", ",", "scenePathAndName", ",", "options", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxStartSimulation": [[409, 415], ["c_StartSimulation"], "function", ["None"], ["", "def", "simxStartSimulation", "(", "clientID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_StartSimulation", "(", "clientID", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxPauseSimulation": [[416, 422], ["c_PauseSimulation"], "function", ["None"], ["", "def", "simxPauseSimulation", "(", "clientID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_PauseSimulation", "(", "clientID", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxStopSimulation": [[423, 429], ["c_StopSimulation"], "function", ["None"], ["", "def", "simxStopSimulation", "(", "clientID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_StopSimulation", "(", "clientID", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetUIHandle": [[430, 439], ["ctypes.c_int", "uiName.encode.encode", "c_GetUIHandle", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetUIHandle", "(", "clientID", ",", "uiName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "handle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "uiName", ")", "is", "str", ")", ":", "\n", "        ", "uiName", "=", "uiName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_GetUIHandle", "(", "clientID", ",", "uiName", ",", "ct", ".", "byref", "(", "handle", ")", ",", "operationMode", ")", ",", "handle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetUISlider": [[440, 447], ["ctypes.c_int", "c_GetUISlider", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetUISlider", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "position", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetUISlider", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "ct", ".", "byref", "(", "position", ")", ",", "operationMode", ")", ",", "position", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetUISlider": [[448, 454], ["c_SetUISlider"], "function", ["None"], ["", "def", "simxSetUISlider", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "position", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetUISlider", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "position", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetUIEventButton": [[455, 467], ["ctypes.c_int", "c_GetUIEventButton", "range", "ctypes.byref", "arr.append"], "function", ["None"], ["", "def", "simxGetUIEventButton", "(", "clientID", ",", "uiHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "uiEventButtonID", "=", "ct", ".", "c_int", "(", ")", "\n", "auxValues", "=", "(", "ct", ".", "c_int", "*", "2", ")", "(", ")", "\n", "ret", "=", "c_GetUIEventButton", "(", "clientID", ",", "uiHandle", ",", "ct", ".", "byref", "(", "uiEventButtonID", ")", ",", "auxValues", ",", "operationMode", ")", "\n", "arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "arr", ".", "append", "(", "auxValues", "[", "i", "]", ")", "\n", "", "return", "ret", ",", "uiEventButtonID", ".", "value", ",", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetUIButtonProperty": [[468, 475], ["ctypes.c_int", "c_GetUIButtonProperty", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetUIButtonProperty", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "prop", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetUIButtonProperty", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "ct", ".", "byref", "(", "prop", ")", ",", "operationMode", ")", ",", "prop", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetUIButtonProperty": [[476, 482], ["c_SetUIButtonProperty"], "function", ["None"], ["", "def", "simxSetUIButtonProperty", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "prop", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetUIButtonProperty", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "prop", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxAddStatusbarMessage": [[483, 491], ["c_AddStatusbarMessage", "message.encode.encode", "type"], "function", ["None"], ["", "def", "simxAddStatusbarMessage", "(", "clientID", ",", "message", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "message", ")", "is", "str", ")", ":", "\n", "        ", "message", "=", "message", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_AddStatusbarMessage", "(", "clientID", ",", "message", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxAuxiliaryConsoleOpen": [[492, 517], ["ctypes.c_int", "title.encode.encode", "c_AuxiliaryConsoleOpen", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxAuxiliaryConsoleOpen", "(", "clientID", ",", "title", ",", "maxLines", ",", "mode", ",", "position", ",", "size", ",", "textColor", ",", "backgroundColor", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "consoleHandle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "title", ")", "is", "str", ")", ":", "\n", "        ", "title", "=", "title", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "position", "!=", "None", ":", "\n", "        ", "c_position", "=", "(", "ct", ".", "c_int", "*", "2", ")", "(", "*", "position", ")", "\n", "", "else", ":", "\n", "        ", "c_position", "=", "None", "\n", "", "if", "size", "!=", "None", ":", "\n", "        ", "c_size", "=", "(", "ct", ".", "c_int", "*", "2", ")", "(", "*", "size", ")", "\n", "", "else", ":", "\n", "        ", "c_size", "=", "None", "\n", "", "if", "textColor", "!=", "None", ":", "\n", "        ", "c_textColor", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", "*", "textColor", ")", "\n", "", "else", ":", "\n", "        ", "c_textColor", "=", "None", "\n", "", "if", "backgroundColor", "!=", "None", ":", "\n", "        ", "c_backgroundColor", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", "*", "backgroundColor", ")", "\n", "", "else", ":", "\n", "        ", "c_backgroundColor", "=", "None", "\n", "", "return", "c_AuxiliaryConsoleOpen", "(", "clientID", ",", "title", ",", "maxLines", ",", "mode", ",", "c_position", ",", "c_size", ",", "c_textColor", ",", "c_backgroundColor", ",", "ct", ".", "byref", "(", "consoleHandle", ")", ",", "operationMode", ")", ",", "consoleHandle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxAuxiliaryConsoleClose": [[518, 524], ["c_AuxiliaryConsoleClose"], "function", ["None"], ["", "def", "simxAuxiliaryConsoleClose", "(", "clientID", ",", "consoleHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_AuxiliaryConsoleClose", "(", "clientID", ",", "consoleHandle", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxAuxiliaryConsolePrint": [[525, 533], ["c_AuxiliaryConsolePrint", "txt.encode.encode", "type"], "function", ["None"], ["", "def", "simxAuxiliaryConsolePrint", "(", "clientID", ",", "consoleHandle", ",", "txt", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "txt", ")", "is", "str", ")", ":", "\n", "        ", "txt", "=", "txt", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_AuxiliaryConsolePrint", "(", "clientID", ",", "consoleHandle", ",", "txt", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxAuxiliaryConsoleShow": [[534, 540], ["c_AuxiliaryConsoleShow"], "function", ["None"], ["", "def", "simxAuxiliaryConsoleShow", "(", "clientID", ",", "consoleHandle", ",", "showState", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_AuxiliaryConsoleShow", "(", "clientID", ",", "consoleHandle", ",", "showState", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectOrientation": [[541, 551], ["c_GetObjectOrientation", "range", "arr.append"], "function", ["None"], ["", "def", "simxGetObjectOrientation", "(", "clientID", ",", "objectHandle", ",", "relativeToObjectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "eulerAngles", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "ret", "=", "c_GetObjectOrientation", "(", "clientID", ",", "objectHandle", ",", "relativeToObjectHandle", ",", "eulerAngles", ",", "operationMode", ")", "\n", "arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr", ".", "append", "(", "eulerAngles", "[", "i", "]", ")", "\n", "", "return", "ret", ",", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectPosition": [[552, 562], ["c_GetObjectPosition", "range", "arr.append"], "function", ["None"], ["", "def", "simxGetObjectPosition", "(", "clientID", ",", "objectHandle", ",", "relativeToObjectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "position", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "ret", "=", "c_GetObjectPosition", "(", "clientID", ",", "objectHandle", ",", "relativeToObjectHandle", ",", "position", ",", "operationMode", ")", "\n", "arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr", ".", "append", "(", "position", "[", "i", "]", ")", "\n", "", "return", "ret", ",", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectOrientation": [[563, 570], ["c_SetObjectOrientation"], "function", ["None"], ["", "def", "simxSetObjectOrientation", "(", "clientID", ",", "objectHandle", ",", "relativeToObjectHandle", ",", "eulerAngles", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "angles", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", "*", "eulerAngles", ")", "\n", "return", "c_SetObjectOrientation", "(", "clientID", ",", "objectHandle", ",", "relativeToObjectHandle", ",", "angles", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectPosition": [[571, 578], ["c_SetObjectPosition"], "function", ["None"], ["", "def", "simxSetObjectPosition", "(", "clientID", ",", "objectHandle", ",", "relativeToObjectHandle", ",", "position", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "c_position", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", "*", "position", ")", "\n", "return", "c_SetObjectPosition", "(", "clientID", ",", "objectHandle", ",", "relativeToObjectHandle", ",", "c_position", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectParent": [[579, 585], ["c_SetObjectParent"], "function", ["None"], ["", "def", "simxSetObjectParent", "(", "clientID", ",", "objectHandle", ",", "parentObject", ",", "keepInPlace", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetObjectParent", "(", "clientID", ",", "objectHandle", ",", "parentObject", ",", "keepInPlace", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetUIButtonLabel": [[586, 597], ["c_SetUIButtonLabel", "type", "upStateLabel.encode.encode", "type", "downStateLabel.encode.encode"], "function", ["None"], ["", "def", "simxSetUIButtonLabel", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "upStateLabel", ",", "downStateLabel", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "if", "type", "(", "upStateLabel", ")", "is", "str", ":", "\n", "            ", "upStateLabel", "=", "upStateLabel", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "downStateLabel", ")", "is", "str", ":", "\n", "            ", "downStateLabel", "=", "downStateLabel", ".", "encode", "(", "'utf-8'", ")", "\n", "", "", "return", "c_SetUIButtonLabel", "(", "clientID", ",", "uiHandle", ",", "uiButtonID", ",", "upStateLabel", ",", "downStateLabel", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetLastErrors": [[598, 623], ["ctypes.c_int", "c_GetLastErrors", "ctypes.POINTER", "ctypes.byref", "ctypes.byref", "range", "bytearray", "errors.append", "errors.append", "bytearray.append", "bytearray.append", "str", "str", "int.from_bytes"], "function", ["None"], ["", "def", "simxGetLastErrors", "(", "clientID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "errors", "=", "[", "]", "\n", "errorCnt", "=", "ct", ".", "c_int", "(", ")", "\n", "errorStrings", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_char", ")", "(", ")", "\n", "ret", "=", "c_GetLastErrors", "(", "clientID", ",", "ct", ".", "byref", "(", "errorCnt", ")", ",", "ct", ".", "byref", "(", "errorStrings", ")", ",", "operationMode", ")", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "s", "=", "0", "\n", "for", "i", "in", "range", "(", "errorCnt", ".", "value", ")", ":", "\n", "            ", "a", "=", "bytearray", "(", ")", "\n", "while", "errorStrings", "[", "s", "]", "!=", "b'\\0'", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "                    ", "a", ".", "append", "(", "int", ".", "from_bytes", "(", "errorStrings", "[", "s", "]", ",", "'big'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "a", ".", "append", "(", "errorStrings", "[", "s", "]", ")", "\n", "", "s", "+=", "1", "\n", "", "s", "+=", "1", "#skip null", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "                ", "errors", ".", "append", "(", "str", "(", "a", ",", "'utf-8'", ")", ")", "\n", "", "else", ":", "\n", "                ", "errors", ".", "append", "(", "str", "(", "a", ")", ")", "\n", "\n", "", "", "", "return", "ret", ",", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetArrayParameter": [[624, 634], ["c_GetArrayParameter", "range", "arr.append"], "function", ["None"], ["", "def", "simxGetArrayParameter", "(", "clientID", ",", "paramIdentifier", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "paramValues", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "ret", "=", "c_GetArrayParameter", "(", "clientID", ",", "paramIdentifier", ",", "paramValues", ",", "operationMode", ")", "\n", "arr", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr", ".", "append", "(", "paramValues", "[", "i", "]", ")", "\n", "", "return", "ret", ",", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetArrayParameter": [[635, 642], ["c_SetArrayParameter"], "function", ["None"], ["", "def", "simxSetArrayParameter", "(", "clientID", ",", "paramIdentifier", ",", "paramValues", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "c_paramValues", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", "*", "paramValues", ")", "\n", "return", "c_SetArrayParameter", "(", "clientID", ",", "paramIdentifier", ",", "c_paramValues", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetBooleanParameter": [[643, 650], ["ctypes.c_ubyte", "c_GetBooleanParameter", "bool", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetBooleanParameter", "(", "clientID", ",", "paramIdentifier", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "paramValue", "=", "ct", ".", "c_ubyte", "(", ")", "\n", "return", "c_GetBooleanParameter", "(", "clientID", ",", "paramIdentifier", ",", "ct", ".", "byref", "(", "paramValue", ")", ",", "operationMode", ")", ",", "bool", "(", "paramValue", ".", "value", "!=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetBooleanParameter": [[651, 657], ["c_SetBooleanParameter"], "function", ["None"], ["", "def", "simxSetBooleanParameter", "(", "clientID", ",", "paramIdentifier", ",", "paramValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetBooleanParameter", "(", "clientID", ",", "paramIdentifier", ",", "paramValue", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetIntegerParameter": [[658, 665], ["ctypes.c_int", "c_GetIntegerParameter", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetIntegerParameter", "(", "clientID", ",", "paramIdentifier", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "paramValue", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetIntegerParameter", "(", "clientID", ",", "paramIdentifier", ",", "ct", ".", "byref", "(", "paramValue", ")", ",", "operationMode", ")", ",", "paramValue", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetIntegerParameter": [[666, 672], ["c_SetIntegerParameter"], "function", ["None"], ["", "def", "simxSetIntegerParameter", "(", "clientID", ",", "paramIdentifier", ",", "paramValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetIntegerParameter", "(", "clientID", ",", "paramIdentifier", ",", "paramValue", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetFloatingParameter": [[673, 680], ["ctypes.c_float", "c_GetFloatingParameter", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetFloatingParameter", "(", "clientID", ",", "paramIdentifier", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "paramValue", "=", "ct", ".", "c_float", "(", ")", "\n", "return", "c_GetFloatingParameter", "(", "clientID", ",", "paramIdentifier", ",", "ct", ".", "byref", "(", "paramValue", ")", ",", "operationMode", ")", ",", "paramValue", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetFloatingParameter": [[681, 687], ["c_SetFloatingParameter"], "function", ["None"], ["", "def", "simxSetFloatingParameter", "(", "clientID", ",", "paramIdentifier", ",", "paramValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetFloatingParameter", "(", "clientID", ",", "paramIdentifier", ",", "paramValue", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetStringParameter": [[688, 709], ["c_GetStringParameter", "bytearray", "ctypes.POINTER", "ctypes.byref", "str", "str", "str.append", "str.append", "int.from_bytes"], "function", ["None"], ["", "def", "simxGetStringParameter", "(", "clientID", ",", "paramIdentifier", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "paramValue", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_char", ")", "(", ")", "\n", "ret", "=", "c_GetStringParameter", "(", "clientID", ",", "paramIdentifier", ",", "ct", ".", "byref", "(", "paramValue", ")", ",", "operationMode", ")", "\n", "\n", "a", "=", "bytearray", "(", ")", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "i", "=", "0", "\n", "while", "paramValue", "[", "i", "]", "!=", "b'\\0'", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "                ", "a", ".", "append", "(", "int", ".", "from_bytes", "(", "paramValue", "[", "i", "]", ",", "'big'", ")", ")", "\n", "", "else", ":", "\n", "                ", "a", ".", "append", "(", "paramValue", "[", "i", "]", ")", "\n", "", "i", "=", "i", "+", "1", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "a", "=", "str", "(", "a", ",", "'utf-8'", ")", "\n", "", "else", ":", "\n", "        ", "a", "=", "str", "(", "a", ")", "\n", "", "return", "ret", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetCollisionHandle": [[710, 719], ["ctypes.c_int", "collisionObjectName.encode.encode", "c_GetCollisionHandle", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetCollisionHandle", "(", "clientID", ",", "collisionObjectName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "handle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "collisionObjectName", ")", "is", "str", ")", ":", "\n", "        ", "collisionObjectName", "=", "collisionObjectName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_GetCollisionHandle", "(", "clientID", ",", "collisionObjectName", ",", "ct", ".", "byref", "(", "handle", ")", ",", "operationMode", ")", ",", "handle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetCollectionHandle": [[720, 729], ["ctypes.c_int", "collectionName.encode.encode", "c_GetCollectionHandle", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetCollectionHandle", "(", "clientID", ",", "collectionName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "handle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "collectionName", ")", "is", "str", ")", ":", "\n", "        ", "collectionName", "=", "collectionName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_GetCollectionHandle", "(", "clientID", ",", "collectionName", ",", "ct", ".", "byref", "(", "handle", ")", ",", "operationMode", ")", ",", "handle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetDistanceHandle": [[730, 739], ["ctypes.c_int", "distanceObjectName.encode.encode", "c_GetDistanceHandle", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetDistanceHandle", "(", "clientID", ",", "distanceObjectName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "handle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "distanceObjectName", ")", "is", "str", ")", ":", "\n", "        ", "distanceObjectName", "=", "distanceObjectName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_GetDistanceHandle", "(", "clientID", ",", "distanceObjectName", ",", "ct", ".", "byref", "(", "handle", ")", ",", "operationMode", ")", ",", "handle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxReadCollision": [[740, 746], ["ctypes.c_ubyte", "c_ReadCollision", "bool", "ctypes.byref"], "function", ["None"], ["", "def", "simxReadCollision", "(", "clientID", ",", "collisionObjectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "collisionState", "=", "ct", ".", "c_ubyte", "(", ")", "\n", "return", "c_ReadCollision", "(", "clientID", ",", "collisionObjectHandle", ",", "ct", ".", "byref", "(", "collisionState", ")", ",", "operationMode", ")", ",", "bool", "(", "collisionState", ".", "value", "!=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxReadDistance": [[747, 754], ["ctypes.c_float", "c_ReadDistance", "ctypes.byref"], "function", ["None"], ["", "def", "simxReadDistance", "(", "clientID", ",", "distanceObjectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "minimumDistance", "=", "ct", ".", "c_float", "(", ")", "\n", "return", "c_ReadDistance", "(", "clientID", ",", "distanceObjectHandle", ",", "ct", ".", "byref", "(", "minimumDistance", ")", ",", "operationMode", ")", ",", "minimumDistance", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxRemoveObject": [[755, 761], ["c_RemoveObject"], "function", ["None"], ["", "def", "simxRemoveObject", "(", "clientID", ",", "objectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_RemoveObject", "(", "clientID", ",", "objectHandle", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxRemoveModel": [[762, 768], ["c_RemoveModel"], "function", ["None"], ["", "def", "simxRemoveModel", "(", "clientID", ",", "objectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_RemoveModel", "(", "clientID", ",", "objectHandle", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxRemoveUI": [[769, 775], ["c_RemoveUI"], "function", ["None"], ["", "def", "simxRemoveUI", "(", "clientID", ",", "uiHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_RemoveUI", "(", "clientID", ",", "uiHandle", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxCloseScene": [[776, 782], ["c_CloseScene"], "function", ["None"], ["", "def", "simxCloseScene", "(", "clientID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_CloseScene", "(", "clientID", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjects": [[783, 798], ["ctypes.c_int", "c_GetObjects", "ctypes.POINTER", "ctypes.byref", "ctypes.byref", "range", "handles.append"], "function", ["None"], ["", "def", "simxGetObjects", "(", "clientID", ",", "objectType", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "objectCount", "=", "ct", ".", "c_int", "(", ")", "\n", "objectHandles", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", "(", ")", "\n", "\n", "ret", "=", "c_GetObjects", "(", "clientID", ",", "objectType", ",", "ct", ".", "byref", "(", "objectCount", ")", ",", "ct", ".", "byref", "(", "objectHandles", ")", ",", "operationMode", ")", "\n", "handles", "=", "[", "]", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "objectCount", ".", "value", ")", ":", "\n", "            ", "handles", ".", "append", "(", "objectHandles", "[", "i", "]", ")", "\n", "\n", "", "", "return", "ret", ",", "handles", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxDisplayDialog": [[800, 823], ["ctypes.c_int", "ctypes.c_int", "c_DisplayDialog", "type", "titleText.encode.encode", "type", "mainText.encode.encode", "type", "initialText.encode.encode", "ctypes.byref", "ctypes.byref"], "function", ["None"], ["", "def", "simxDisplayDialog", "(", "clientID", ",", "titleText", ",", "mainText", ",", "dialogType", ",", "initialText", ",", "titleColors", ",", "dialogColors", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "if", "titleColors", "!=", "None", ":", "\n", "        ", "c_titleColors", "=", "(", "ct", ".", "c_float", "*", "6", ")", "(", "*", "titleColors", ")", "\n", "", "else", ":", "\n", "        ", "c_titleColors", "=", "None", "\n", "", "if", "dialogColors", "!=", "None", ":", "\n", "        ", "c_dialogColors", "=", "(", "ct", ".", "c_float", "*", "6", ")", "(", "*", "dialogColors", ")", "\n", "", "else", ":", "\n", "        ", "c_dialogColors", "=", "None", "\n", "\n", "", "c_dialogHandle", "=", "ct", ".", "c_int", "(", ")", "\n", "c_uiHandle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "if", "type", "(", "titleText", ")", "is", "str", ":", "\n", "            ", "titleText", "=", "titleText", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "mainText", ")", "is", "str", ":", "\n", "            ", "mainText", "=", "mainText", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "initialText", ")", "is", "str", ":", "\n", "            ", "initialText", "=", "initialText", ".", "encode", "(", "'utf-8'", ")", "\n", "", "", "return", "c_DisplayDialog", "(", "clientID", ",", "titleText", ",", "mainText", ",", "dialogType", ",", "initialText", ",", "c_titleColors", ",", "c_dialogColors", ",", "ct", ".", "byref", "(", "c_dialogHandle", ")", ",", "ct", ".", "byref", "(", "c_uiHandle", ")", ",", "operationMode", ")", ",", "c_dialogHandle", ".", "value", ",", "c_uiHandle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxEndDialog": [[824, 830], ["c_EndDialog"], "function", ["None"], ["", "def", "simxEndDialog", "(", "clientID", ",", "dialogHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_EndDialog", "(", "clientID", ",", "dialogHandle", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetDialogInput": [[831, 853], ["c_GetDialogInput", "bytearray", "ctypes.POINTER", "ctypes.byref", "str", "str", "str.append", "str.append", "int.from_bytes"], "function", ["None"], ["", "def", "simxGetDialogInput", "(", "clientID", ",", "dialogHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "inputText", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_char", ")", "(", ")", "\n", "ret", "=", "c_GetDialogInput", "(", "clientID", ",", "dialogHandle", ",", "ct", ".", "byref", "(", "inputText", ")", ",", "operationMode", ")", "\n", "\n", "a", "=", "bytearray", "(", ")", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "i", "=", "0", "\n", "while", "inputText", "[", "i", "]", "!=", "b'\\0'", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "                ", "a", ".", "append", "(", "int", ".", "from_bytes", "(", "inputText", "[", "i", "]", ",", "'big'", ")", ")", "\n", "", "else", ":", "\n", "                ", "a", ".", "append", "(", "inputText", "[", "i", "]", ")", "\n", "", "i", "=", "i", "+", "1", "\n", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "a", "=", "str", "(", "a", ",", "'utf-8'", ")", "\n", "", "else", ":", "\n", "        ", "a", "=", "str", "(", "a", ")", "\n", "", "return", "ret", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetDialogResult": [[855, 861], ["ctypes.c_int", "c_GetDialogResult", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetDialogResult", "(", "clientID", ",", "dialogHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "result", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetDialogResult", "(", "clientID", ",", "dialogHandle", ",", "ct", ".", "byref", "(", "result", ")", ",", "operationMode", ")", ",", "result", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxCopyPasteObjects": [[862, 878], ["ctypes.cast", "ctypes.c_int", "c_CopyPasteObjects", "ctypes.POINTER", "ctypes.POINTER", "len", "ctypes.byref", "ctypes.byref", "range", "len", "newobj.append"], "function", ["None"], ["", "def", "simxCopyPasteObjects", "(", "clientID", ",", "objectHandles", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "c_objectHandles", "=", "(", "ct", ".", "c_int", "*", "len", "(", "objectHandles", ")", ")", "(", "*", "objectHandles", ")", "\n", "c_objectHandles", "=", "ct", ".", "cast", "(", "c_objectHandles", ",", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", ")", "# IronPython needs this", "\n", "newObjectCount", "=", "ct", ".", "c_int", "(", ")", "\n", "newObjectHandles", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", "(", ")", "\n", "ret", "=", "c_CopyPasteObjects", "(", "clientID", ",", "c_objectHandles", ",", "len", "(", "objectHandles", ")", ",", "ct", ".", "byref", "(", "newObjectHandles", ")", ",", "ct", ".", "byref", "(", "newObjectCount", ")", ",", "operationMode", ")", "\n", "\n", "newobj", "=", "[", "]", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "newObjectCount", ".", "value", ")", ":", "\n", "            ", "newobj", ".", "append", "(", "newObjectHandles", "[", "i", "]", ")", "\n", "\n", "", "", "return", "ret", ",", "newobj", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectSelection": [[880, 894], ["ctypes.c_int", "c_GetObjectSelection", "ctypes.POINTER", "ctypes.byref", "ctypes.byref", "range", "newobj.append"], "function", ["None"], ["", "def", "simxGetObjectSelection", "(", "clientID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "objectCount", "=", "ct", ".", "c_int", "(", ")", "\n", "objectHandles", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", "(", ")", "\n", "ret", "=", "c_GetObjectSelection", "(", "clientID", ",", "ct", ".", "byref", "(", "objectHandles", ")", ",", "ct", ".", "byref", "(", "objectCount", ")", ",", "operationMode", ")", "\n", "\n", "newobj", "=", "[", "]", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "objectCount", ".", "value", ")", ":", "\n", "            ", "newobj", ".", "append", "(", "objectHandles", "[", "i", "]", ")", "\n", "\n", "", "", "return", "ret", ",", "newobj", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectSelection": [[897, 904], ["c_SetObjectSelection", "len", "len"], "function", ["None"], ["", "def", "simxSetObjectSelection", "(", "clientID", ",", "objectHandles", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "c_objectHandles", "=", "(", "ct", ".", "c_int", "*", "len", "(", "objectHandles", ")", ")", "(", "*", "objectHandles", ")", "\n", "return", "c_SetObjectSelection", "(", "clientID", ",", "c_objectHandles", ",", "len", "(", "objectHandles", ")", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxClearFloatSignal": [[905, 913], ["c_ClearFloatSignal", "signalName.encode.encode", "type"], "function", ["None"], ["", "def", "simxClearFloatSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_ClearFloatSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxClearIntegerSignal": [[914, 922], ["c_ClearIntegerSignal", "signalName.encode.encode", "type"], "function", ["None"], ["", "def", "simxClearIntegerSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_ClearIntegerSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxClearStringSignal": [[923, 931], ["c_ClearStringSignal", "signalName.encode.encode", "type"], "function", ["None"], ["", "def", "simxClearStringSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_ClearStringSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetFloatSignal": [[932, 941], ["ctypes.c_float", "signalName.encode.encode", "c_GetFloatSignal", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetFloatSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "signalValue", "=", "ct", ".", "c_float", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_GetFloatSignal", "(", "clientID", ",", "signalName", ",", "ct", ".", "byref", "(", "signalValue", ")", ",", "operationMode", ")", ",", "signalValue", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetIntegerSignal": [[942, 951], ["ctypes.c_int", "signalName.encode.encode", "c_GetIntegerSignal", "type", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetIntegerSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "signalValue", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_GetIntegerSignal", "(", "clientID", ",", "signalName", ",", "ct", ".", "byref", "(", "signalValue", ")", ",", "operationMode", ")", ",", "signalValue", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetStringSignal": [[952, 971], ["ctypes.c_int", "c_GetStringSignal", "bytearray", "ctypes.POINTER", "signalName.encode.encode", "ctypes.byref", "ctypes.byref", "range", "str", "type", "str.append"], "function", ["None"], ["", "def", "simxGetStringSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "signalLength", "=", "ct", ".", "c_int", "(", ")", ";", "\n", "signalValue", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "ret", "=", "c_GetStringSignal", "(", "clientID", ",", "signalName", ",", "ct", ".", "byref", "(", "signalValue", ")", ",", "ct", ".", "byref", "(", "signalLength", ")", ",", "operationMode", ")", "\n", "\n", "a", "=", "bytearray", "(", ")", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "signalLength", ".", "value", ")", ":", "\n", "            ", "a", ".", "append", "(", "signalValue", "[", "i", "]", ")", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "!=", "3", ":", "\n", "        ", "a", "=", "str", "(", "a", ")", "\n", "\n", "", "return", "ret", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetAndClearStringSignal": [[972, 991], ["ctypes.c_int", "c_GetAndClearStringSignal", "bytearray", "ctypes.POINTER", "signalName.encode.encode", "ctypes.byref", "ctypes.byref", "range", "str", "type", "str.append"], "function", ["None"], ["", "def", "simxGetAndClearStringSignal", "(", "clientID", ",", "signalName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "signalLength", "=", "ct", ".", "c_int", "(", ")", ";", "\n", "signalValue", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "ret", "=", "c_GetAndClearStringSignal", "(", "clientID", ",", "signalName", ",", "ct", ".", "byref", "(", "signalValue", ")", ",", "ct", ".", "byref", "(", "signalLength", ")", ",", "operationMode", ")", "\n", "\n", "a", "=", "bytearray", "(", ")", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "signalLength", ".", "value", ")", ":", "\n", "            ", "a", ".", "append", "(", "signalValue", "[", "i", "]", ")", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "!=", "3", ":", "\n", "        ", "a", "=", "str", "(", "a", ")", "\n", "\n", "", "return", "ret", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxReadStringStream": [[992, 1011], ["ctypes.c_int", "c_ReadStringStream", "bytearray", "ctypes.POINTER", "signalName.encode.encode", "ctypes.byref", "ctypes.byref", "range", "str", "type", "str.append"], "function", ["None"], ["", "def", "simxReadStringStream", "(", "clientID", ",", "signalName", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "signalLength", "=", "ct", ".", "c_int", "(", ")", ";", "\n", "signalValue", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", "(", ")", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "ret", "=", "c_ReadStringStream", "(", "clientID", ",", "signalName", ",", "ct", ".", "byref", "(", "signalValue", ")", ",", "ct", ".", "byref", "(", "signalLength", ")", ",", "operationMode", ")", "\n", "\n", "a", "=", "bytearray", "(", ")", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "signalLength", ".", "value", ")", ":", "\n", "            ", "a", ".", "append", "(", "signalValue", "[", "i", "]", ")", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "!=", "3", ":", "\n", "        ", "a", "=", "str", "(", "a", ")", "\n", "\n", "", "return", "ret", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetFloatSignal": [[1012, 1020], ["c_SetFloatSignal", "signalName.encode.encode", "type"], "function", ["None"], ["", "def", "simxSetFloatSignal", "(", "clientID", ",", "signalName", ",", "signalValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_SetFloatSignal", "(", "clientID", ",", "signalName", ",", "signalValue", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetIntegerSignal": [[1021, 1029], ["c_SetIntegerSignal", "signalName.encode.encode", "type"], "function", ["None"], ["", "def", "simxSetIntegerSignal", "(", "clientID", ",", "signalName", ",", "signalValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "signalName", ")", "is", "str", ")", ":", "\n", "        ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_SetIntegerSignal", "(", "clientID", ",", "signalName", ",", "signalValue", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetStringSignal": [[1030, 1052], ["ctypes.cast", "c_SetStringSignal", "ctypes.POINTER", "len", "type", "signalName.encode.encode", "type", "type", "bytearray.encode", "type", "type", "bytearray", "len", "len", "len", "len"], "function", ["None"], ["", "def", "simxSetStringSignal", "(", "clientID", ",", "signalName", ",", "signalValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "sigV", "=", "signalValue", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "if", "type", "(", "signalName", ")", "is", "str", ":", "\n", "            ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "bytearray", ":", "\n", "            ", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "str", ":", "\n", "            ", "signalValue", "=", "signalValue", ".", "encode", "(", "'utf-8'", ")", "\n", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "type", "(", "signalValue", ")", "is", "bytearray", ":", "\n", "            ", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "str", ":", "\n", "            ", "signalValue", "=", "bytearray", "(", "signalValue", ")", "\n", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "", "sigV", "=", "ct", ".", "cast", "(", "sigV", ",", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", ")", "# IronPython needs this", "\n", "return", "c_SetStringSignal", "(", "clientID", ",", "signalName", ",", "sigV", ",", "len", "(", "signalValue", ")", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxAppendStringSignal": [[1053, 1075], ["ctypes.cast", "c_AppendStringSignal", "ctypes.POINTER", "len", "type", "signalName.encode.encode", "type", "type", "bytearray.encode", "type", "type", "bytearray", "len", "len", "len", "len"], "function", ["None"], ["", "def", "simxAppendStringSignal", "(", "clientID", ",", "signalName", ",", "signalValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "sigV", "=", "signalValue", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "if", "type", "(", "signalName", ")", "is", "str", ":", "\n", "            ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "bytearray", ":", "\n", "            ", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "str", ":", "\n", "            ", "signalValue", "=", "signalValue", ".", "encode", "(", "'utf-8'", ")", "\n", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "type", "(", "signalValue", ")", "is", "bytearray", ":", "\n", "            ", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "str", ":", "\n", "            ", "signalValue", "=", "bytearray", "(", "signalValue", ")", "\n", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "", "sigV", "=", "ct", ".", "cast", "(", "sigV", ",", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", ")", "# IronPython needs this", "\n", "return", "c_AppendStringSignal", "(", "clientID", ",", "signalName", ",", "sigV", ",", "len", "(", "signalValue", ")", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxWriteStringStream": [[1076, 1098], ["ctypes.cast", "c_WriteStringStream", "ctypes.POINTER", "len", "type", "signalName.encode.encode", "type", "type", "bytearray.encode", "type", "type", "bytearray", "len", "len", "len", "len"], "function", ["None"], ["", "def", "simxWriteStringStream", "(", "clientID", ",", "signalName", ",", "signalValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "sigV", "=", "signalValue", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "if", "type", "(", "signalName", ")", "is", "str", ":", "\n", "            ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "bytearray", ":", "\n", "            ", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "str", ":", "\n", "            ", "signalValue", "=", "signalValue", ".", "encode", "(", "'utf-8'", ")", "\n", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "type", "(", "signalValue", ")", "is", "bytearray", ":", "\n", "            ", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "str", ":", "\n", "            ", "signalValue", "=", "bytearray", "(", "signalValue", ")", "\n", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "", "sigV", "=", "ct", ".", "cast", "(", "sigV", ",", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", ")", "# IronPython needs this", "\n", "return", "c_WriteStringStream", "(", "clientID", ",", "signalName", ",", "sigV", ",", "len", "(", "signalValue", ")", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectFloatParameter": [[1099, 1106], ["ctypes.c_float", "c_GetObjectFloatParameter", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetObjectFloatParameter", "(", "clientID", ",", "objectHandle", ",", "parameterID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "parameterValue", "=", "ct", ".", "c_float", "(", ")", "\n", "return", "c_GetObjectFloatParameter", "(", "clientID", ",", "objectHandle", ",", "parameterID", ",", "ct", ".", "byref", "(", "parameterValue", ")", ",", "operationMode", ")", ",", "parameterValue", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectFloatParameter": [[1107, 1113], ["c_SetObjectFloatParameter"], "function", ["None"], ["", "def", "simxSetObjectFloatParameter", "(", "clientID", ",", "objectHandle", ",", "parameterID", ",", "parameterValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetObjectFloatParameter", "(", "clientID", ",", "objectHandle", ",", "parameterID", ",", "parameterValue", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectIntParameter": [[1114, 1121], ["ctypes.c_int", "c_GetObjectIntParameter", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetObjectIntParameter", "(", "clientID", ",", "objectHandle", ",", "parameterID", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "parameterValue", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetObjectIntParameter", "(", "clientID", ",", "objectHandle", ",", "parameterID", ",", "ct", ".", "byref", "(", "parameterValue", ")", ",", "operationMode", ")", ",", "parameterValue", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetObjectIntParameter": [[1122, 1128], ["c_SetObjectIntParameter"], "function", ["None"], ["", "def", "simxSetObjectIntParameter", "(", "clientID", ",", "objectHandle", ",", "parameterID", ",", "parameterValue", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetObjectIntParameter", "(", "clientID", ",", "objectHandle", ",", "parameterID", ",", "parameterValue", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetModelProperty": [[1129, 1135], ["ctypes.c_int", "c_GetModelProperty", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetModelProperty", "(", "clientID", ",", "objectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "prop", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetModelProperty", "(", "clientID", ",", "objectHandle", ",", "ct", ".", "byref", "(", "prop", ")", ",", "operationMode", ")", ",", "prop", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSetModelProperty": [[1136, 1142], ["c_SetModelProperty"], "function", ["None"], ["", "def", "simxSetModelProperty", "(", "clientID", ",", "objectHandle", ",", "prop", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SetModelProperty", "(", "clientID", ",", "objectHandle", ",", "prop", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxStart": [[1143, 1151], ["c_Start", "connectionAddress.encode.encode", "type"], "function", ["None"], ["", "def", "simxStart", "(", "connectionAddress", ",", "connectionPort", ",", "waitUntilConnected", ",", "doNotReconnectOnceDisconnected", ",", "timeOutInMs", ",", "commThreadCycleInMs", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "connectionAddress", ")", "is", "str", ")", ":", "\n", "        ", "connectionAddress", "=", "connectionAddress", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_Start", "(", "connectionAddress", ",", "connectionPort", ",", "waitUntilConnected", ",", "doNotReconnectOnceDisconnected", ",", "timeOutInMs", ",", "commThreadCycleInMs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxFinish": [[1152, 1158], ["c_Finish"], "function", ["None"], ["", "def", "simxFinish", "(", "clientID", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_Finish", "(", "clientID", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetPingTime": [[1159, 1165], ["ctypes.c_int", "c_GetPingTime", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetPingTime", "(", "clientID", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "pingTime", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetPingTime", "(", "clientID", ",", "ct", ".", "byref", "(", "pingTime", ")", ")", ",", "pingTime", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetLastCmdTime": [[1166, 1172], ["c_GetLastCmdTime"], "function", ["None"], ["", "def", "simxGetLastCmdTime", "(", "clientID", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_GetLastCmdTime", "(", "clientID", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSynchronousTrigger": [[1173, 1179], ["c_SynchronousTrigger"], "function", ["None"], ["", "def", "simxSynchronousTrigger", "(", "clientID", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_SynchronousTrigger", "(", "clientID", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxSynchronous": [[1180, 1186], ["c_Synchronous"], "function", ["None"], ["", "def", "simxSynchronous", "(", "clientID", ",", "enable", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_Synchronous", "(", "clientID", ",", "enable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxPauseCommunication": [[1187, 1193], ["c_PauseCommunication"], "function", ["None"], ["", "def", "simxPauseCommunication", "(", "clientID", ",", "enable", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_PauseCommunication", "(", "clientID", ",", "enable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetInMessageInfo": [[1194, 1200], ["ctypes.c_int", "c_GetInMessageInfo", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetInMessageInfo", "(", "clientID", ",", "infoType", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "info", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetInMessageInfo", "(", "clientID", ",", "infoType", ",", "ct", ".", "byref", "(", "info", ")", ")", ",", "info", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetOutMessageInfo": [[1201, 1207], ["ctypes.c_int", "c_GetOutMessageInfo", "ctypes.byref"], "function", ["None"], ["", "def", "simxGetOutMessageInfo", "(", "clientID", ",", "infoType", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "info", "=", "ct", ".", "c_int", "(", ")", "\n", "return", "c_GetOutMessageInfo", "(", "clientID", ",", "infoType", ",", "ct", ".", "byref", "(", "info", ")", ")", ",", "info", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetConnectionId": [[1208, 1214], ["c_GetConnectionId"], "function", ["None"], ["", "def", "simxGetConnectionId", "(", "clientID", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_GetConnectionId", "(", "clientID", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxCreateBuffer": [[1215, 1221], ["c_CreateBuffer"], "function", ["None"], ["", "def", "simxCreateBuffer", "(", "bufferSize", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_CreateBuffer", "(", "bufferSize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxReleaseBuffer": [[1222, 1228], ["c_ReleaseBuffer"], "function", ["None"], ["", "def", "simxReleaseBuffer", "(", "buffer", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "return", "c_ReleaseBuffer", "(", "buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxTransferFile": [[1229, 1237], ["c_TransferFile", "filePathAndName.encode.encode", "type"], "function", ["None"], ["", "def", "simxTransferFile", "(", "clientID", ",", "filePathAndName", ",", "fileName_serverSide", ",", "timeOut", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "filePathAndName", ")", "is", "str", ")", ":", "\n", "        ", "filePathAndName", "=", "filePathAndName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_TransferFile", "(", "clientID", ",", "filePathAndName", ",", "fileName_serverSide", ",", "timeOut", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxEraseFile": [[1238, 1246], ["c_EraseFile", "fileName_serverSide.encode.encode", "type"], "function", ["None"], ["", "def", "simxEraseFile", "(", "clientID", ",", "fileName_serverSide", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "(", "sys", ".", "version_info", "[", "0", "]", "==", "3", ")", "and", "(", "type", "(", "fileName_serverSide", ")", "is", "str", ")", ":", "\n", "        ", "fileName_serverSide", "=", "fileName_serverSide", ".", "encode", "(", "'utf-8'", ")", "\n", "", "return", "c_EraseFile", "(", "clientID", ",", "fileName_serverSide", ",", "operationMode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxCreateDummy": [[1247, 1258], ["ctypes.c_int", "c_CreateDummy", "ctypes.byref"], "function", ["None"], ["", "def", "simxCreateDummy", "(", "clientID", ",", "size", ",", "color", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "handle", "=", "ct", ".", "c_int", "(", ")", "\n", "if", "color", "!=", "None", ":", "\n", "        ", "c_color", "=", "(", "ct", ".", "c_ubyte", "*", "12", ")", "(", "*", "color", ")", "\n", "", "else", ":", "\n", "        ", "c_color", "=", "None", "\n", "", "return", "c_CreateDummy", "(", "clientID", ",", "size", ",", "c_color", ",", "ct", ".", "byref", "(", "handle", ")", ",", "operationMode", ")", ",", "handle", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxQuery": [[1259, 1296], ["ctypes.c_int", "ctypes.cast", "c_Query", "bytearray", "ctypes.POINTER", "ctypes.POINTER", "len", "ctypes.byref", "ctypes.byref", "range", "str", "type", "signalName.encode.encode", "type", "retSignalName.encode.encode", "type", "type", "bytearray.encode", "type", "type", "bytearray", "str.append", "len", "len", "len", "len"], "function", ["None"], ["", "def", "simxQuery", "(", "clientID", ",", "signalName", ",", "signalValue", ",", "retSignalName", ",", "timeOutInMs", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "retSignalLength", "=", "ct", ".", "c_int", "(", ")", ";", "\n", "retSignalValue", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", "(", ")", "\n", "\n", "sigV", "=", "signalValue", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "if", "type", "(", "signalName", ")", "is", "str", ":", "\n", "            ", "signalName", "=", "signalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "retSignalName", ")", "is", "str", ":", "\n", "            ", "retSignalName", "=", "retSignalName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "bytearray", ":", "\n", "            ", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "str", ":", "\n", "            ", "signalValue", "=", "signalValue", ".", "encode", "(", "'utf-8'", ")", "\n", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "type", "(", "signalValue", ")", "is", "bytearray", ":", "\n", "            ", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "if", "type", "(", "signalValue", ")", "is", "str", ":", "\n", "            ", "signalValue", "=", "bytearray", "(", "signalValue", ")", "\n", "sigV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "signalValue", ")", ")", "(", "*", "signalValue", ")", "\n", "", "", "sigV", "=", "ct", ".", "cast", "(", "sigV", ",", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", ")", "# IronPython needs this", "\n", "\n", "ret", "=", "c_Query", "(", "clientID", ",", "signalName", ",", "sigV", ",", "len", "(", "signalValue", ")", ",", "retSignalName", ",", "ct", ".", "byref", "(", "retSignalValue", ")", ",", "ct", ".", "byref", "(", "retSignalLength", ")", ",", "timeOutInMs", ")", "\n", "\n", "a", "=", "bytearray", "(", ")", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "retSignalLength", ".", "value", ")", ":", "\n", "            ", "a", ".", "append", "(", "retSignalValue", "[", "i", "]", ")", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "!=", "3", ":", "\n", "        ", "a", "=", "str", "(", "a", ")", "\n", "\n", "", "return", "ret", ",", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectGroupData": [[1297, 1340], ["ctypes.c_int", "ctypes.c_int", "ctypes.c_int", "ctypes.c_int", "c_GetObjectGroupData", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "range", "range", "range", "range", "handles.append", "intData.append", "floatData.append", "bytearray", "stringData.append", "str", "str", "str.append", "str.append", "int.from_bytes"], "function", ["None"], ["", "def", "simxGetObjectGroupData", "(", "clientID", ",", "objectType", ",", "dataType", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "handles", "=", "[", "]", "\n", "intData", "=", "[", "]", "\n", "floatData", "=", "[", "]", "\n", "stringData", "=", "[", "]", "\n", "handlesC", "=", "ct", ".", "c_int", "(", ")", "\n", "handlesP", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", "(", ")", "\n", "intDataC", "=", "ct", ".", "c_int", "(", ")", "\n", "intDataP", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", "(", ")", "\n", "floatDataC", "=", "ct", ".", "c_int", "(", ")", "\n", "floatDataP", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_float", ")", "(", ")", "\n", "stringDataC", "=", "ct", ".", "c_int", "(", ")", "\n", "stringDataP", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_char", ")", "(", ")", "\n", "ret", "=", "c_GetObjectGroupData", "(", "clientID", ",", "objectType", ",", "dataType", ",", "ct", ".", "byref", "(", "handlesC", ")", ",", "ct", ".", "byref", "(", "handlesP", ")", ",", "ct", ".", "byref", "(", "intDataC", ")", ",", "ct", ".", "byref", "(", "intDataP", ")", ",", "ct", ".", "byref", "(", "floatDataC", ")", ",", "ct", ".", "byref", "(", "floatDataP", ")", ",", "ct", ".", "byref", "(", "stringDataC", ")", ",", "ct", ".", "byref", "(", "stringDataP", ")", ",", "operationMode", ")", "\n", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "handlesC", ".", "value", ")", ":", "\n", "            ", "handles", ".", "append", "(", "handlesP", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "intDataC", ".", "value", ")", ":", "\n", "            ", "intData", ".", "append", "(", "intDataP", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "floatDataC", ".", "value", ")", ":", "\n", "            ", "floatData", ".", "append", "(", "floatDataP", "[", "i", "]", ")", "\n", "", "s", "=", "0", "\n", "for", "i", "in", "range", "(", "stringDataC", ".", "value", ")", ":", "\n", "            ", "a", "=", "bytearray", "(", ")", "\n", "while", "stringDataP", "[", "s", "]", "!=", "b'\\0'", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "                    ", "a", ".", "append", "(", "int", ".", "from_bytes", "(", "stringDataP", "[", "s", "]", ",", "'big'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "a", ".", "append", "(", "stringDataP", "[", "s", "]", ")", "\n", "", "s", "+=", "1", "\n", "", "s", "+=", "1", "#skip null", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "                ", "a", "=", "str", "(", "a", ",", "'utf-8'", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "str", "(", "a", ")", "\n", "", "stringData", ".", "append", "(", "a", ")", "\n", "\n", "", "", "return", "ret", ",", "handles", ",", "intData", ",", "floatData", ",", "stringData", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxCallScriptFunction": [[1341, 1421], ["ctypes.cast", "ctypes.cast", "ctypes.cast", "range", "bytearray", "ctypes.c_int", "ctypes.c_int", "ctypes.c_int", "ctypes.c_int", "c_CallScriptFunction", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "len", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "ctypes.POINTER", "len", "len", "len", "len", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "ctypes.byref", "range", "range", "range", "range", "str", "type", "scriptDescription.encode.encode", "type", "functionName.encode.encode", "type", "type", "bytearray.encode", "type", "type", "bytearray", "len", "len", "type", "str.encode", "len", "intDataOut.append", "floatDataOut.append", "bytearray", "stringDataOut.append", "str.append", "str", "str", "len", "len", "len", "len", "str.append", "str.append", "int.from_bytes"], "function", ["None"], ["", "def", "simxCallScriptFunction", "(", "clientID", ",", "scriptDescription", ",", "options", ",", "functionName", ",", "inputInts", ",", "inputFloats", ",", "inputStrings", ",", "inputBuffer", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "inputBufferV", "=", "inputBuffer", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "if", "type", "(", "scriptDescription", ")", "is", "str", ":", "\n", "            ", "scriptDescription", "=", "scriptDescription", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "functionName", ")", "is", "str", ":", "\n", "            ", "functionName", "=", "functionName", ".", "encode", "(", "'utf-8'", ")", "\n", "", "if", "type", "(", "inputBuffer", ")", "is", "bytearray", ":", "\n", "            ", "inputBufferV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "inputBuffer", ")", ")", "(", "*", "inputBuffer", ")", "\n", "", "if", "type", "(", "inputBuffer", ")", "is", "str", ":", "\n", "            ", "inputBuffer", "=", "inputBuffer", ".", "encode", "(", "'utf-8'", ")", "\n", "inputBufferV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "inputBuffer", ")", ")", "(", "*", "inputBuffer", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "type", "(", "inputBuffer", ")", "is", "bytearray", ":", "\n", "            ", "inputBufferV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "inputBuffer", ")", ")", "(", "*", "inputBuffer", ")", "\n", "", "if", "type", "(", "inputBuffer", ")", "is", "str", ":", "\n", "            ", "inputBuffer", "=", "bytearray", "(", "inputBuffer", ")", "\n", "inputBufferV", "=", "(", "ct", ".", "c_ubyte", "*", "len", "(", "inputBuffer", ")", ")", "(", "*", "inputBuffer", ")", "\n", "", "", "inputBufferV", "=", "ct", ".", "cast", "(", "inputBufferV", ",", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", ")", "# IronPython needs this", "\n", "\n", "c_inInts", "=", "(", "ct", ".", "c_int", "*", "len", "(", "inputInts", ")", ")", "(", "*", "inputInts", ")", "\n", "c_inInts", "=", "ct", ".", "cast", "(", "c_inInts", ",", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", ")", "# IronPython needs this", "\n", "c_inFloats", "=", "(", "ct", ".", "c_float", "*", "len", "(", "inputFloats", ")", ")", "(", "*", "inputFloats", ")", "\n", "c_inFloats", "=", "ct", ".", "cast", "(", "c_inFloats", ",", "ct", ".", "POINTER", "(", "ct", ".", "c_float", ")", ")", "# IronPython needs this", "\n", "\n", "concatStr", "=", "''", ".", "encode", "(", "'utf-8'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "inputStrings", ")", ")", ":", "\n", "        ", "a", "=", "inputStrings", "[", "i", "]", "\n", "a", "=", "a", "+", "'\\0'", "\n", "if", "type", "(", "a", ")", "is", "str", ":", "\n", "            ", "a", "=", "a", ".", "encode", "(", "'utf-8'", ")", "\n", "", "concatStr", "=", "concatStr", "+", "a", "\n", "", "c_inStrings", "=", "(", "ct", ".", "c_char", "*", "len", "(", "concatStr", ")", ")", "(", "*", "concatStr", ")", "\n", "\n", "intDataOut", "=", "[", "]", "\n", "floatDataOut", "=", "[", "]", "\n", "stringDataOut", "=", "[", "]", "\n", "bufferOut", "=", "bytearray", "(", ")", "\n", "\n", "intDataC", "=", "ct", ".", "c_int", "(", ")", "\n", "intDataP", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_int", ")", "(", ")", "\n", "floatDataC", "=", "ct", ".", "c_int", "(", ")", "\n", "floatDataP", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_float", ")", "(", ")", "\n", "stringDataC", "=", "ct", ".", "c_int", "(", ")", "\n", "stringDataP", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_char", ")", "(", ")", "\n", "bufferS", "=", "ct", ".", "c_int", "(", ")", "\n", "bufferP", "=", "ct", ".", "POINTER", "(", "ct", ".", "c_ubyte", ")", "(", ")", "\n", "\n", "ret", "=", "c_CallScriptFunction", "(", "clientID", ",", "scriptDescription", ",", "options", ",", "functionName", ",", "len", "(", "inputInts", ")", ",", "c_inInts", ",", "len", "(", "inputFloats", ")", ",", "c_inFloats", ",", "len", "(", "inputStrings", ")", ",", "c_inStrings", ",", "len", "(", "inputBuffer", ")", ",", "inputBufferV", ",", "ct", ".", "byref", "(", "intDataC", ")", ",", "ct", ".", "byref", "(", "intDataP", ")", ",", "ct", ".", "byref", "(", "floatDataC", ")", ",", "ct", ".", "byref", "(", "floatDataP", ")", ",", "ct", ".", "byref", "(", "stringDataC", ")", ",", "ct", ".", "byref", "(", "stringDataP", ")", ",", "ct", ".", "byref", "(", "bufferS", ")", ",", "ct", ".", "byref", "(", "bufferP", ")", ",", "operationMode", ")", "\n", "\n", "if", "ret", "==", "0", ":", "\n", "        ", "for", "i", "in", "range", "(", "intDataC", ".", "value", ")", ":", "\n", "            ", "intDataOut", ".", "append", "(", "intDataP", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "floatDataC", ".", "value", ")", ":", "\n", "            ", "floatDataOut", ".", "append", "(", "floatDataP", "[", "i", "]", ")", "\n", "", "s", "=", "0", "\n", "for", "i", "in", "range", "(", "stringDataC", ".", "value", ")", ":", "\n", "            ", "a", "=", "bytearray", "(", ")", "\n", "while", "stringDataP", "[", "s", "]", "!=", "b'\\0'", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "                    ", "a", ".", "append", "(", "int", ".", "from_bytes", "(", "stringDataP", "[", "s", "]", ",", "'big'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "a", ".", "append", "(", "stringDataP", "[", "s", "]", ")", "\n", "", "s", "+=", "1", "\n", "", "s", "+=", "1", "#skip null", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "                ", "a", "=", "str", "(", "a", ",", "'utf-8'", ")", "\n", "", "else", ":", "\n", "                ", "a", "=", "str", "(", "a", ")", "\n", "", "stringDataOut", ".", "append", "(", "a", ")", "\n", "", "for", "i", "in", "range", "(", "bufferS", ".", "value", ")", ":", "\n", "            ", "bufferOut", ".", "append", "(", "bufferP", "[", "i", "]", ")", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "!=", "3", ":", "\n", "        ", "bufferOut", "=", "str", "(", "bufferOut", ")", "\n", "\n", "", "return", "ret", ",", "intDataOut", ",", "floatDataOut", ",", "stringDataOut", ",", "bufferOut", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxGetObjectVelocity": [[1422, 1436], ["c_GetObjectVelocity", "range", "range", "arr1.append", "arr2.append"], "function", ["None"], ["", "def", "simxGetObjectVelocity", "(", "clientID", ",", "objectHandle", ",", "operationMode", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "linearVel", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "angularVel", "=", "(", "ct", ".", "c_float", "*", "3", ")", "(", ")", "\n", "ret", "=", "c_GetObjectVelocity", "(", "clientID", ",", "objectHandle", ",", "linearVel", ",", "angularVel", ",", "operationMode", ")", "\n", "arr1", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr1", ".", "append", "(", "linearVel", "[", "i", "]", ")", "\n", "", "arr2", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "arr2", ".", "append", "(", "angularVel", "[", "i", "]", ")", "\n", "", "return", "ret", ",", "arr1", ",", "arr2", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxPackInts": [[1437, 1452], ["bytes", "range", "bytearray", "range", "len", "len", "struct.pack", "struct.pack"], "function", ["None"], ["", "def", "simxPackInts", "(", "intList", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "s", "=", "bytes", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "intList", ")", ")", ":", "\n", "            ", "s", "=", "s", "+", "struct", ".", "pack", "(", "'<i'", ",", "intList", "[", "i", "]", ")", "\n", "", "s", "=", "bytearray", "(", "s", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "''", "\n", "for", "i", "in", "range", "(", "len", "(", "intList", ")", ")", ":", "\n", "            ", "s", "+=", "struct", ".", "pack", "(", "'<i'", ",", "intList", "[", "i", "]", ")", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxUnpackInts": [[1453, 1461], ["range", "int", "b.append", "len", "struct.unpack"], "function", ["None"], ["", "def", "simxUnpackInts", "(", "intsPackedInString", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "b", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "intsPackedInString", ")", "/", "4", ")", ")", ":", "\n", "        ", "b", ".", "append", "(", "struct", ".", "unpack", "(", "'<i'", ",", "intsPackedInString", "[", "4", "*", "i", ":", "4", "*", "(", "i", "+", "1", ")", "]", ")", "[", "0", "]", ")", "\n", "", "return", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxPackFloats": [[1462, 1477], ["bytes", "range", "bytearray", "range", "len", "len", "struct.pack", "struct.pack"], "function", ["None"], ["", "def", "simxPackFloats", "(", "floatList", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", ":", "\n", "        ", "s", "=", "bytes", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "floatList", ")", ")", ":", "\n", "            ", "s", "=", "s", "+", "struct", ".", "pack", "(", "'<f'", ",", "floatList", "[", "i", "]", ")", "\n", "", "s", "=", "bytearray", "(", "s", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "''", "\n", "for", "i", "in", "range", "(", "len", "(", "floatList", ")", ")", ":", "\n", "            ", "s", "+=", "struct", ".", "pack", "(", "'<f'", ",", "floatList", "[", "i", "]", ")", "\n", "", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.andyzeng_visual-pushing-grasping.simulation.vrep.simxUnpackFloats": [[1478, 1486], ["range", "int", "b.append", "len", "struct.unpack"], "function", ["None"], ["", "def", "simxUnpackFloats", "(", "floatsPackedInString", ")", ":", "\n", "    ", "'''\n    Please have a look at the function description/documentation in the V-REP user manual\n    '''", "\n", "b", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "len", "(", "floatsPackedInString", ")", "/", "4", ")", ")", ":", "\n", "        ", "b", ".", "append", "(", "struct", ".", "unpack", "(", "'<f'", ",", "floatsPackedInString", "[", "4", "*", "i", ":", "4", "*", "(", "i", "+", "1", ")", "]", ")", "[", "0", "]", ")", "\n", "", "return", "b", "\n", "", ""]]}