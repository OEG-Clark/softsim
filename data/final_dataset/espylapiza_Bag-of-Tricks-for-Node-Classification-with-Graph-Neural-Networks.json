{"home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.models.GATConv.__init__": [[21, 69], ["torch.Module.__init__", "dgl.utils.expand_as_pair", "dgl.utils.expand_as_pair", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.GATConv.reset_parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "node_feats", ",", "\n", "edge_feats", ",", "\n", "out_feats", ",", "\n", "n_heads", "=", "1", ",", "\n", "attn_drop", "=", "0.0", ",", "\n", "edge_drop", "=", "0.0", ",", "\n", "negative_slope", "=", "0.2", ",", "\n", "residual", "=", "True", ",", "\n", "activation", "=", "None", ",", "\n", "use_attn_dst", "=", "True", ",", "\n", "allow_zero_in_degree", "=", "True", ",", "\n", "use_symmetric_norm", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GATConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_n_heads", "=", "n_heads", "\n", "self", ".", "_in_src_feats", ",", "self", ".", "_in_dst_feats", "=", "expand_as_pair", "(", "node_feats", ")", "\n", "self", ".", "_out_feats", "=", "out_feats", "\n", "self", ".", "_allow_zero_in_degree", "=", "allow_zero_in_degree", "\n", "self", ".", "_use_symmetric_norm", "=", "use_symmetric_norm", "\n", "\n", "# feat fc", "\n", "self", ".", "src_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "out_feats", "*", "n_heads", ",", "bias", "=", "False", ")", "\n", "if", "residual", ":", "\n", "            ", "self", ".", "dst_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "out_feats", "*", "n_heads", ")", "\n", "self", ".", "bias", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "dst_fc", "=", "None", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "out_feats", "*", "n_heads", ")", "\n", "\n", "# attn fc", "\n", "", "self", ".", "attn_src_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "n_heads", ",", "bias", "=", "False", ")", "\n", "if", "use_attn_dst", ":", "\n", "            ", "self", ".", "attn_dst_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "n_heads", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_dst_fc", "=", "None", "\n", "", "if", "edge_feats", ">", "0", ":", "\n", "            ", "self", ".", "attn_edge_fc", "=", "nn", ".", "Linear", "(", "edge_feats", ",", "n_heads", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_edge_fc", "=", "None", "\n", "\n", "", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "edge_drop", "=", "edge_drop", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.models.GATConv.reset_parameters": [[70, 84], ["torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "src_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "if", "self", ".", "dst_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "dst_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_src_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "if", "self", ".", "attn_dst_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_dst_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "if", "self", ".", "attn_edge_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_edge_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.models.GATConv.set_allow_zero_in_degree": [[85, 87], ["None"], "methods", ["None"], ["", "", "def", "set_allow_zero_in_degree", "(", "self", ",", "set_value", ")", ":", "\n", "        ", "self", ".", "_allow_zero_in_degree", "=", "set_value", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.models.GATConv.forward": [[88, 168], ["graph.local_scope", "models.GATConv.src_fc().view", "models.GATConv.dst_fc().view", "models.GATConv.attn_src_fc().view", "graph.srcdata.update", "models.GATConv.leaky_relu", "graph.update_all", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "models.GATConv.attn_dst_fc().view", "graph.dstdata.update", "graph.apply_edges", "graph.apply_edges", "models.GATConv.attn_edge_fc().view", "graph.edata.update", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "models.GATConv.attn_drop", "models.GATConv.attn_drop", "dgl.u_mul_e", "dgl.u_mul_e", "dgl.sum", "dgl.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "models.GATConv.activation", "models.GATConv.src_fc", "models.GATConv.dst_fc", "models.GATConv.attn_src_fc", "dgl.u_add_v", "dgl.u_add_v", "dgl.copy_u", "dgl.copy_u", "graph.number_of_edges", "dgl.ops.edge_softmax", "dgl.ops.edge_softmax", "dgl.ops.edge_softmax", "dgl.ops.edge_softmax", "graph.number_of_dst_nodes", "models.GATConv.attn_dst_fc", "models.GATConv.attn_edge_fc", "graph.number_of_edges", "feat_dst.dim", "graph.in_degrees", "feat_src.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "graph", ",", "feat_src", ",", "feat_edge", "=", "None", ")", ":", "\n", "        ", "with", "graph", ".", "local_scope", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "_allow_zero_in_degree", ":", "\n", "                ", "if", "(", "graph", ".", "in_degrees", "(", ")", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "                    ", "assert", "False", "\n", "\n", "", "", "if", "graph", ".", "is_block", ":", "\n", "                ", "feat_dst", "=", "feat_src", "[", ":", "graph", ".", "number_of_dst_nodes", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "feat_dst", "=", "feat_src", "\n", "\n", "", "if", "self", ".", "_use_symmetric_norm", ":", "\n", "                ", "degs", "=", "graph", ".", "srcdata", "[", "\"deg\"", "]", "\n", "# degs = graph.out_degrees().float().clamp(min=1)", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "feat_src", ".", "dim", "(", ")", "-", "1", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "feat_src", "=", "feat_src", "*", "norm", "\n", "\n", "", "feat_src_fc", "=", "self", ".", "src_fc", "(", "feat_src", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "self", ".", "_out_feats", ")", "\n", "feat_dst_fc", "=", "self", ".", "dst_fc", "(", "feat_dst", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "self", ".", "_out_feats", ")", "\n", "attn_src", "=", "self", ".", "attn_src_fc", "(", "feat_src", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "1", ")", "\n", "\n", "# NOTE: GAT paper uses \"first concatenation then linear projection\"", "\n", "# to compute attention scores, while ours is \"first projection then", "\n", "# addition\", the two approaches are mathematically equivalent:", "\n", "# We decompose the weight vector a mentioned in the paper into", "\n", "# [a_l || a_r], then", "\n", "# a^T [Wh_i || Wh_j] = a_l Wh_i + a_r Wh_j", "\n", "# Our implementation is much efficient because we do not need to", "\n", "# save [Wh_i || Wh_j] on edges, which is not memory-efficient. Plus,", "\n", "# addition could be optimized with DGL's built-in function u_add_v,", "\n", "# which further speeds up computation and saves memory footprint.", "\n", "graph", ".", "srcdata", ".", "update", "(", "{", "\"feat_src_fc\"", ":", "feat_src_fc", ",", "\"attn_src\"", ":", "attn_src", "}", ")", "\n", "\n", "if", "self", ".", "attn_dst_fc", "is", "not", "None", ":", "\n", "                ", "attn_dst", "=", "self", ".", "attn_dst_fc", "(", "feat_dst", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "1", ")", "\n", "graph", ".", "dstdata", ".", "update", "(", "{", "\"attn_dst\"", ":", "attn_dst", "}", ")", "\n", "graph", ".", "apply_edges", "(", "fn", ".", "u_add_v", "(", "\"attn_src\"", ",", "\"attn_dst\"", ",", "\"attn_node\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "graph", ".", "apply_edges", "(", "fn", ".", "copy_u", "(", "\"attn_src\"", ",", "\"attn_node\"", ")", ")", "\n", "\n", "", "e", "=", "graph", ".", "edata", "[", "\"attn_node\"", "]", "\n", "if", "feat_edge", "is", "not", "None", ":", "\n", "                ", "attn_edge", "=", "self", ".", "attn_edge_fc", "(", "feat_edge", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "1", ")", "\n", "graph", ".", "edata", ".", "update", "(", "{", "\"attn_edge\"", ":", "attn_edge", "}", ")", "\n", "e", "+=", "graph", ".", "edata", "[", "\"attn_edge\"", "]", "\n", "", "e", "=", "self", ".", "leaky_relu", "(", "e", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "edge_drop", ">", "0", ":", "\n", "                ", "perm", "=", "torch", ".", "randperm", "(", "graph", ".", "number_of_edges", "(", ")", ",", "device", "=", "e", ".", "device", ")", "\n", "bound", "=", "int", "(", "graph", ".", "number_of_edges", "(", ")", "*", "self", ".", "edge_drop", ")", "\n", "eids", "=", "perm", "[", "bound", ":", "]", "\n", "graph", ".", "edata", "[", "\"a\"", "]", "=", "torch", ".", "zeros_like", "(", "e", ")", "\n", "graph", ".", "edata", "[", "\"a\"", "]", "[", "eids", "]", "=", "self", ".", "attn_drop", "(", "edge_softmax", "(", "graph", ",", "e", "[", "eids", "]", ",", "eids", "=", "eids", ")", ")", "\n", "", "else", ":", "\n", "                ", "graph", ".", "edata", "[", "\"a\"", "]", "=", "self", ".", "attn_drop", "(", "edge_softmax", "(", "graph", ",", "e", ")", ")", "\n", "\n", "# message passing", "\n", "", "graph", ".", "update_all", "(", "fn", ".", "u_mul_e", "(", "\"feat_src_fc\"", ",", "\"a\"", ",", "\"m\"", ")", ",", "fn", ".", "sum", "(", "\"m\"", ",", "\"feat_src_fc\"", ")", ")", "\n", "rst", "=", "graph", ".", "dstdata", "[", "\"feat_src_fc\"", "]", "\n", "\n", "if", "self", ".", "_use_symmetric_norm", ":", "\n", "                ", "degs", "=", "graph", ".", "dstdata", "[", "\"deg\"", "]", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "0.5", ")", "\n", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "feat_dst", ".", "dim", "(", ")", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "rst", "=", "rst", "*", "norm", "\n", "\n", "# residual", "\n", "", "if", "self", ".", "dst_fc", "is", "not", "None", ":", "\n", "                ", "rst", "+=", "feat_dst_fc", "\n", "", "else", ":", "\n", "                ", "rst", "+=", "self", ".", "bias", "\n", "\n", "# activation", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "                ", "rst", "=", "self", ".", "activation", "(", "rst", ",", "inplace", "=", "True", ")", "\n", "\n", "", "return", "rst", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.models.GAT.__init__": [[171, 232], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.GAT.convs.append", "models.GAT.norms.append", "models.GAT.edge_encoder.append", "models.GATConv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "node_feats", ",", "\n", "edge_feats", ",", "\n", "n_classes", ",", "\n", "n_layers", ",", "\n", "n_heads", ",", "\n", "n_hidden", ",", "\n", "edge_emb", ",", "\n", "activation", ",", "\n", "dropout", ",", "\n", "input_drop", ",", "\n", "attn_drop", ",", "\n", "edge_drop", ",", "\n", "use_attn_dst", "=", "True", ",", "\n", "allow_zero_in_degree", "=", "False", ",", "\n", "residual", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "n_hidden", "=", "n_hidden", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "norms", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "node_encoder", "=", "nn", ".", "Linear", "(", "node_feats", ",", "n_hidden", ")", "\n", "if", "edge_emb", ">", "0", ":", "\n", "            ", "self", ".", "edge_encoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "edge_encoder", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "in_hidden", "=", "n_heads", "*", "n_hidden", "if", "i", ">", "0", "else", "node_feats", "\n", "out_hidden", "=", "n_hidden", "\n", "# bias = i == n_layers - 1", "\n", "\n", "if", "self", ".", "edge_encoder", "is", "not", "None", ":", "\n", "                ", "self", ".", "edge_encoder", ".", "append", "(", "nn", ".", "Linear", "(", "edge_feats", ",", "edge_emb", ")", ")", "\n", "", "self", ".", "convs", ".", "append", "(", "\n", "GATConv", "(", "\n", "in_hidden", ",", "\n", "edge_emb", ",", "\n", "out_hidden", ",", "\n", "n_heads", "=", "n_heads", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "edge_drop", "=", "edge_drop", ",", "\n", "use_attn_dst", "=", "use_attn_dst", ",", "\n", "allow_zero_in_degree", "=", "allow_zero_in_degree", ",", "\n", "use_symmetric_norm", "=", "False", ",", "# TAG", "\n", ")", "\n", ")", "\n", "self", ".", "norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "n_heads", "*", "out_hidden", ")", ")", "\n", "\n", "", "self", ".", "pred_linear", "=", "nn", ".", "Linear", "(", "n_heads", "*", "n_hidden", ",", "n_classes", ")", "\n", "\n", "self", ".", "input_drop", "=", "nn", ".", "Dropout", "(", "input_drop", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.models.GAT.forward": [[233, 266], ["models.GAT.input_drop", "range", "models.GAT.pred_linear", "isinstance", "models.GAT.activation", "models.GAT.dropout", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "g", ",", "inference", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "g", ",", "list", ")", ":", "\n", "            ", "subgraphs", "=", "[", "g", "]", "*", "self", ".", "n_layers", "\n", "", "else", ":", "\n", "            ", "subgraphs", "=", "g", "\n", "\n", "", "h", "=", "subgraphs", "[", "0", "]", ".", "srcdata", "[", "\"feat\"", "]", "\n", "h", "=", "self", ".", "input_drop", "(", "h", ")", "\n", "\n", "h_last", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "edge_encoder", "is", "not", "None", ":", "\n", "                ", "efeat", "=", "subgraphs", "[", "i", "]", ".", "edata", "[", "\"feat\"", "]", "\n", "efeat_emb", "=", "self", ".", "edge_encoder", "[", "i", "]", "(", "efeat", ")", "\n", "efeat_emb", "=", "F", ".", "relu", "(", "efeat_emb", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "efeat_emb", "=", "None", "\n", "\n", "", "h", "=", "self", ".", "convs", "[", "i", "]", "(", "subgraphs", "[", "i", "]", ",", "h", ",", "efeat_emb", ")", ".", "flatten", "(", "1", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "residual", "and", "h_last", "is", "not", "None", ":", "\n", "                ", "h", "+=", "h_last", "[", ":", "h", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "\n", "", "h_last", "=", "h", "\n", "\n", "h", "=", "self", ".", "norms", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ",", "inplace", "=", "True", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "\n", "", "h", "=", "self", ".", "pred_linear", "(", "h", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.models.MLP.__init__": [[269, 293], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "models.MLP.norms.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "in_feats", ",", "n_classes", ",", "n_layers", ",", "n_hidden", ",", "activation", ",", "dropout", "=", "0.0", ",", "input_drop", "=", "0.0", ",", "residual", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_hidden", "=", "n_hidden", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "norms", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "in_hidden", "=", "n_hidden", "if", "i", ">", "0", "else", "in_feats", "\n", "out_hidden", "=", "n_hidden", "if", "i", "<", "n_layers", "-", "1", "else", "n_classes", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "in_hidden", ",", "out_hidden", ")", ")", "\n", "\n", "if", "i", "<", "n_layers", "-", "1", ":", "\n", "                ", "self", ".", "norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_hidden", ")", ")", "\n", "\n", "", "", "self", ".", "activation", "=", "activation", "\n", "self", ".", "input_drop", "=", "nn", ".", "Dropout", "(", "input_drop", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.models.MLP.forward": [[294, 313], ["models.MLP.input_drop", "range", "models.MLP.activation", "models.MLP.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h", "=", "self", ".", "input_drop", "(", "h", ")", "\n", "\n", "h_last", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "linears", "[", "i", "]", "(", "h", ")", "\n", "\n", "if", "self", ".", "residual", "and", "0", "<", "i", "<", "self", ".", "n_layers", "-", "1", ":", "\n", "                ", "h", "+=", "h_last", "\n", "\n", "", "h_last", "=", "h", "\n", "\n", "if", "i", "<", "self", ".", "n_layers", "-", "1", ":", "\n", "                ", "h", "=", "self", ".", "norms", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ",", "inplace", "=", "True", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "\n", "", "", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.seed": [[35, 44], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "dgl.random.seed", "dgl.random.seed"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed"], ["def", "seed", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "dgl", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.load_data": [[46, 58], ["ogb.nodeproppred.DglNodePropPredDataset", "ogb.nodeproppred.Evaluator", "ogb.nodeproppred.DglNodePropPredDataset.get_idx_split", "print"], "function", ["None"], ["", "def", "load_data", "(", "dataset", ")", ":", "\n", "    ", "data", "=", "DglNodePropPredDataset", "(", "name", "=", "dataset", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "dataset", ")", "\n", "\n", "splitted_idx", "=", "data", ".", "get_idx_split", "(", ")", "\n", "train_idx", ",", "val_idx", ",", "test_idx", "=", "splitted_idx", "[", "\"train\"", "]", ",", "splitted_idx", "[", "\"valid\"", "]", ",", "splitted_idx", "[", "\"test\"", "]", "\n", "graph", ",", "labels", "=", "data", "[", "0", "]", "\n", "graph", ".", "ndata", "[", "\"labels\"", "]", "=", "labels", "\n", "\n", "print", "(", "\"#Features:\"", ",", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", ")", "\n", "\n", "return", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.preprocess": [[60, 78], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "graph.out_degrees().float().clamp", "graph.create_formats_", "graph.number_of_nodes", "graph.number_of_nodes", "graph.out_degrees().float", "labels.max", "graph.out_degrees"], "function", ["None"], ["", "def", "preprocess", "(", "graph", ",", "labels", ",", "train_idx", ")", ":", "\n", "    ", "global", "n_node_feats", ",", "n_classes", "\n", "n_node_feats", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", "[", "1", "]", "\n", "n_classes", "=", "(", "labels", ".", "max", "(", ")", "+", "1", ")", ".", "item", "(", ")", "\n", "\n", "# graph = graph.remove_self_loop().add_self_loop()", "\n", "n_node_feats", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "graph", ".", "ndata", "[", "\"train_labels_onehot\"", "]", "=", "torch", ".", "zeros", "(", "graph", ".", "number_of_nodes", "(", ")", ",", "n_classes", ")", "\n", "graph", ".", "ndata", "[", "\"train_labels_onehot\"", "]", "[", "train_idx", ",", "labels", "[", "train_idx", ",", "0", "]", "]", "=", "1", "\n", "\n", "graph", ".", "ndata", "[", "\"is_train\"", "]", "=", "torch", ".", "zeros", "(", "graph", ".", "number_of_nodes", "(", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "graph", ".", "ndata", "[", "\"is_train\"", "]", "[", "train_idx", "]", "=", "1", "\n", "graph", ".", "ndata", "[", "\"deg\"", "]", "=", "graph", ".", "out_degrees", "(", ")", ".", "float", "(", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "\n", "graph", ".", "create_formats_", "(", ")", "\n", "\n", "return", "graph", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.gen_model": [[80, 105], ["models.GAT"], "function", ["None"], ["", "def", "gen_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "use_labels", ":", "\n", "        ", "n_node_feats_", "=", "n_node_feats", "+", "n_classes", "\n", "", "else", ":", "\n", "        ", "n_node_feats_", "=", "n_node_feats", "\n", "\n", "", "model", "=", "GAT", "(", "\n", "n_node_feats_", ",", "\n", "n_edge_feats", ",", "\n", "n_classes", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden", ",", "\n", "edge_emb", "=", "0", ",", "\n", "activation", "=", "F", ".", "relu", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "input_drop", "=", "args", ".", "input_drop", ",", "\n", "attn_drop", "=", "args", ".", "attn_dropout", ",", "\n", "edge_drop", "=", "args", ".", "edge_drop", ",", "\n", "use_attn_dst", "=", "not", "args", ".", "no_attn_dst", ",", "\n", "allow_zero_in_degree", "=", "True", ",", "\n", "residual", "=", "True", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.custom_loss_function": [[107, 111], ["torch.cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "math.log"], "function", ["None"], ["", "def", "custom_loss_function", "(", "x", ",", "labels", ")", ":", "\n", "    ", "y", "=", "F", ".", "cross_entropy", "(", "x", ",", "labels", "[", ":", ",", "0", "]", ",", "reduction", "=", "\"none\"", ")", "\n", "y", "=", "torch", ".", "log", "(", "epsilon", "+", "y", ")", "-", "math", ".", "log", "(", "epsilon", ")", "# comment this line to use logistic loss", "\n", "return", "torch", ".", "mean", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.add_labels": [[113, 118], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "add_labels", "(", "graph", ",", "idx", ")", ":", "\n", "    ", "feat", "=", "graph", ".", "srcdata", "[", "\"feat\"", "]", "\n", "train_labels_onehot", "=", "torch", ".", "zeros", "(", "[", "feat", ".", "shape", "[", "0", "]", ",", "n_classes", "]", ",", "device", "=", "device", ")", "\n", "train_labels_onehot", "[", "idx", "]", "=", "graph", ".", "srcdata", "[", "\"train_labels_onehot\"", "]", "[", "idx", "]", "\n", "graph", ".", "srcdata", "[", "\"feat\"", "]", "=", "torch", ".", "cat", "(", "[", "feat", ",", "train_labels_onehot", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.train": [[120, 157], ["model.train", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "model", "model.cpu().detach", "criterion", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "len", "evaluator", "b.to", "len", "torch.arange", "torch.arange", "torch.arange", "gat.add_labels", "criterion.item", "len", "len", "model.cpu"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.add_labels"], ["", "def", "train", "(", "args", ",", "model", ",", "dataloader", ",", "labels", ",", "train_idx", ",", "criterion", ",", "optimizer", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "loss_sum", ",", "total", "=", "0", ",", "0", "\n", "\n", "preds", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "n_classes", ")", "\n", "\n", "for", "input_nodes", ",", "output_nodes", ",", "subgraphs", "in", "dataloader", ":", "\n", "        ", "subgraphs", "=", "[", "b", ".", "to", "(", "device", ")", "for", "b", "in", "subgraphs", "]", "\n", "new_train_idx", "=", "torch", ".", "arange", "(", "len", "(", "output_nodes", ")", ")", "\n", "\n", "if", "args", ".", "use_labels", ":", "\n", "            ", "train_labels_idx", "=", "torch", ".", "arange", "(", "len", "(", "output_nodes", ")", ",", "len", "(", "input_nodes", ")", ",", "device", "=", "device", ")", "\n", "train_pred_idx", "=", "new_train_idx", "\n", "\n", "add_labels", "(", "subgraphs", "[", "0", "]", ",", "train_labels_idx", ")", "\n", "", "else", ":", "\n", "            ", "train_pred_idx", "=", "new_train_idx", "\n", "\n", "", "pred", "=", "model", "(", "subgraphs", ")", "\n", "\n", "preds", "[", "output_nodes", "]", "=", "pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# NOTE: This is not a complete implementation of label reuse, since it is too expensive", "\n", "# to predict the nodes in validation and test set during training time.", "\n", "loss", "=", "criterion", "(", "pred", "[", "train_pred_idx", "]", ",", "subgraphs", "[", "-", "1", "]", ".", "dstdata", "[", "\"labels\"", "]", "[", "train_pred_idx", "]", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "count", "=", "len", "(", "train_pred_idx", ")", "\n", "loss_sum", "+=", "loss", ".", "item", "(", ")", "*", "count", "\n", "total", "+=", "count", "\n", "\n", "", "return", "(", "\n", "evaluator", "(", "preds", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "\n", "loss_sum", "/", "total", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.evaluate": [[160, 193], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "torch.zeros", "torch.zeros", "torch.zeros", "range", "criterion().item", "criterion().item", "criterion().item", "evaluator", "evaluator", "evaluator", "torch.arange", "torch.arange", "torch.arange", "model", "criterion", "criterion", "criterion", "b.to", "len", "gat.add_labels"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.add_labels"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "args", ",", "model", ",", "dataloader", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "criterion", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "# Due to the memory capacity constraints, we use sampling for inference and calculate the average of the predictions 'eval_times' times.", "\n", "eval_times", "=", "1", "\n", "\n", "preds_avg", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "n_classes", ",", "device", "=", "device", ")", "\n", "\n", "for", "_", "in", "range", "(", "eval_times", ")", ":", "\n", "        ", "for", "input_nodes", ",", "output_nodes", ",", "subgraphs", "in", "dataloader", ":", "\n", "            ", "subgraphs", "=", "[", "b", ".", "to", "(", "device", ")", "for", "b", "in", "subgraphs", "]", "\n", "new_train_idx", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "input_nodes", ")", ")", "\n", "\n", "if", "args", ".", "use_labels", ":", "\n", "                ", "add_labels", "(", "subgraphs", "[", "0", "]", ",", "new_train_idx", ")", "\n", "\n", "", "pred", "=", "model", "(", "subgraphs", ")", "\n", "preds_avg", "[", "output_nodes", "]", "+=", "pred", "\n", "\n", "", "", "preds_avg", "/=", "eval_times", "\n", "\n", "train_loss", "=", "criterion", "(", "preds_avg", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ".", "item", "(", ")", "\n", "val_loss", "=", "criterion", "(", "preds_avg", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", ".", "item", "(", ")", "\n", "test_loss", "=", "criterion", "(", "preds_avg", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", ".", "item", "(", ")", "\n", "\n", "return", "(", "\n", "evaluator", "(", "preds_avg", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "\n", "evaluator", "(", "preds_avg", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", ",", "\n", "evaluator", "(", "preds_avg", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", ",", "\n", "train_loss", ",", "\n", "val_loss", ",", "\n", "test_loss", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.run": [[196, 355], ["dgl.dataloading.MultiLayerNeighborSampler", "utils.DataLoaderWrapper", "print", "dgl.dataloading.MultiLayerNeighborSampler", "torch.cat", "torch.cat", "torch.cat", "utils.DataLoaderWrapper", "print", "gen_model().to", "torch.AdamW", "torch.lr_scheduler.ReduceLROnPlateau", "range", "print", "print", "print", "dgl.dataloading.pytorch.NodeDataLoader", "len", "dgl.dataloading.pytorch.NodeDataLoader", "len", "gen_model().to.parameters", "time.time", "gat.train", "time.time", "print", "time.time", "optim.lr_scheduler.ReduceLROnPlateau.step", "time.time", "print", "dgl.dataloading.MultiLayerNeighborSampler", "gen_model().to.load_state_dict", "utils.DataLoaderWrapper", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_xticks", "fig.gca.set_yticks", "fig.gca.tick_params", "zip", "fig.gca.xaxis.set_major_locator", "fig.gca.xaxis.set_minor_locator", "fig.gca.yaxis.set_major_locator", "fig.gca.yaxis.set_minor_locator", "matplotlib.grid", "matplotlib.grid", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_xticks", "fig.gca.tick_params", "zip", "fig.gca.xaxis.set_major_locator", "fig.gca.xaxis.set_minor_locator", "fig.gca.yaxis.set_major_locator", "fig.gca.yaxis.set_minor_locator", "matplotlib.grid", "matplotlib.grid", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "evaluator.eval", "graph.cpu", "train_idx.cpu", "train_idx.cpu", "val_idx.cpu", "test_idx_during_training.cpu", "graph.cpu", "gat.gen_model", "gat.evaluate", "zip", "dgl.dataloading.pytorch.NodeDataLoader", "gat.evaluate", "numpy.arange", "numpy.linspace", "matplotlib.plot", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "numpy.arange", "matplotlib.plot", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "range", "utils.BatchSampler", "range", "torch.arange", "torch.arange", "torch.arange", "utils.BatchSampler", "print", "l.append", "graph.cpu", "test_idx.cpu", "range", "range", "pred.argmax", "len", "len", "range", "utils.BatchSampler", "len", "v.to", "len", "gen_model().to.state_dict().items", "gen_model().to.state_dict"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.gen_model", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.evaluate", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.evaluate"], ["", "def", "run", "(", "args", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "n_running", ")", ":", "\n", "    ", "evaluator_wrapper", "=", "lambda", "pred", ",", "labels", ":", "evaluator", ".", "eval", "(", "\n", "{", "\"y_pred\"", ":", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "\"y_true\"", ":", "labels", "}", "\n", ")", "[", "\"acc\"", "]", "\n", "criterion", "=", "custom_loss_function", "\n", "\n", "n_train_samples", "=", "train_idx", ".", "shape", "[", "0", "]", "\n", "train_batch_size", "=", "(", "n_train_samples", "+", "29", ")", "//", "30", "\n", "train_sampler", "=", "MultiLayerNeighborSampler", "(", "[", "8", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "train_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n", "train_idx", ".", "cpu", "(", ")", ",", "\n", "train_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "train_idx", ")", ",", "batch_size", "=", "train_batch_size", ",", "shuffle", "=", "True", ")", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", ")", "\n", "print", "(", "\"len(train_idx):\"", ",", "len", "(", "train_idx", ")", ")", "\n", "\n", "eval_batch_size", "=", "(", "n_train_samples", "+", "29", ")", "//", "30", "\n", "eval_sampler", "=", "MultiLayerNeighborSampler", "(", "[", "8", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "\n", "if", "args", ".", "estimation_mode", ":", "\n", "        ", "test_idx_during_training", "=", "test_idx", "[", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "len", "(", "test_idx", ")", ",", "step", "=", "45", ")", "]", "\n", "", "else", ":", "\n", "        ", "test_idx_during_training", "=", "test_idx", "\n", "\n", "", "eval_idx", "=", "torch", ".", "cat", "(", "[", "train_idx", ".", "cpu", "(", ")", ",", "val_idx", ".", "cpu", "(", ")", ",", "test_idx_during_training", ".", "cpu", "(", ")", "]", ")", "\n", "eval_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n", "eval_idx", ",", "\n", "eval_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "eval_idx", ")", ",", "batch_size", "=", "eval_batch_size", ",", "shuffle", "=", "False", ")", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", ")", "\n", "print", "(", "\"len(eval_idx):\"", ",", "len", "(", "eval_idx", ")", ")", "\n", "\n", "model", "=", "gen_model", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "mode", "=", "\"max\"", ",", "factor", "=", "0.7", ",", "patience", "=", "20", ",", "verbose", "=", "True", ",", "min_lr", "=", "1e-4", "\n", ")", "\n", "\n", "best_model_state_dict", "=", "None", "\n", "\n", "total_time", "=", "0", "\n", "val_score", ",", "best_val_score", ",", "final_test_score", "=", "0", ",", "0", ",", "0", "\n", "\n", "scores", ",", "train_scores", ",", "val_scores", ",", "test_scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "score", ",", "loss", "=", "train", "(", "args", ",", "model", ",", "train_dataloader", ",", "labels", ",", "train_idx", ",", "criterion", ",", "optimizer", ",", "evaluator_wrapper", ")", "\n", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"train:\"", ",", "toc", "-", "tic", ")", "\n", "total_time", "+=", "toc", "-", "tic", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "epoch", "==", "args", ".", "n_epochs", "or", "epoch", "%", "args", ".", "eval_every", "==", "0", "or", "epoch", "%", "args", ".", "log_every", "==", "0", ":", "\n", "            ", "train_score", ",", "val_score", ",", "test_score", ",", "train_loss", ",", "val_loss", ",", "test_loss", "=", "evaluate", "(", "\n", "args", ",", "\n", "model", ",", "\n", "eval_dataloader", ",", "\n", "labels", ",", "\n", "train_idx", ",", "\n", "val_idx", ",", "\n", "test_idx_during_training", ",", "\n", "criterion", ",", "\n", "evaluator_wrapper", ",", "\n", ")", "\n", "\n", "if", "val_score", ">", "best_val_score", ":", "\n", "                ", "best_val_score", "=", "val_score", "\n", "final_test_score", "=", "test_score", "\n", "if", "args", ".", "estimation_mode", ":", "\n", "                    ", "best_model_state_dict", "=", "{", "k", ":", "v", ".", "to", "(", "\"cpu\"", ")", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "\n", "", "", "if", "epoch", "==", "args", ".", "n_epochs", "or", "epoch", "%", "args", ".", "log_every", "==", "0", ":", "\n", "                ", "print", "(", "\n", "f\"Run: {n_running}/{args.n_runs}, Epoch: {epoch}/{args.n_epochs}, Average epoch time: {total_time / epoch:.2f}s\\n\"", "\n", "f\"Loss: {loss:.4f}, Score: {score:.4f}\\n\"", "\n", "f\"Train/Val/Test loss: {train_loss:.4f}/{val_loss:.4f}/{test_loss:.4f}\\n\"", "\n", "f\"Train/Val/Test/Best val/Final test score: {train_score:.4f}/{val_score:.4f}/{test_score:.4f}/{best_val_score:.4f}/{final_test_score:.4f}\"", "\n", ")", "\n", "\n", "", "for", "l", ",", "e", "in", "zip", "(", "\n", "[", "scores", ",", "train_scores", ",", "val_scores", ",", "test_scores", ",", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "]", ",", "\n", "[", "score", ",", "train_score", ",", "val_score", ",", "test_score", ",", "loss", ",", "train_loss", ",", "val_loss", ",", "test_loss", "]", ",", "\n", ")", ":", "\n", "                ", "l", ".", "append", "(", "e", ")", "\n", "\n", "", "", "lr_scheduler", ".", "step", "(", "val_score", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"eval:\"", ",", "toc", "-", "tic", ")", "\n", "\n", "", "if", "args", ".", "estimation_mode", ":", "\n", "        ", "eval_sampler", "=", "MultiLayerNeighborSampler", "(", "[", "48", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "model", ".", "load_state_dict", "(", "best_model_state_dict", ")", "\n", "eval_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n", "test_idx", ".", "cpu", "(", ")", ",", "\n", "eval_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "test_idx", ")", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "False", ")", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", ")", "\n", "final_test_score", "=", "evaluate", "(", "\n", "args", ",", "model", ",", "eval_dataloader", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "criterion", ",", "evaluator_wrapper", "\n", ")", "[", "2", "]", "\n", "\n", "", "print", "(", "\"*\"", "*", "50", ")", "\n", "print", "(", "f\"Best val score: {best_val_score}, Final test score: {final_test_score}\"", ")", "\n", "print", "(", "\"*\"", "*", "50", ")", "\n", "\n", "if", "args", ".", "plot_curves", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "24", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "n_epochs", ",", "100", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "linspace", "(", "0", ",", "1.0", ",", "101", ")", ")", "\n", "ax", ".", "tick_params", "(", "labeltop", "=", "True", ",", "labelright", "=", "True", ")", "\n", "for", "y", ",", "label", "in", "zip", "(", "[", "train_scores", ",", "val_scores", ",", "test_scores", "]", ",", "[", "\"train score\"", ",", "\"val score\"", ",", "\"test score\"", "]", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ",", "args", ".", "log_every", ")", ",", "y", ",", "label", "=", "label", ",", "linewidth", "=", "1", ")", "\n", "", "ax", ".", "xaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "10", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "0.01", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "2", ")", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"major\"", ",", "color", "=", "\"red\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"gat_score_{n_running}.png\"", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "24", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "n_epochs", ",", "100", ")", ")", "\n", "ax", ".", "tick_params", "(", "labeltop", "=", "True", ",", "labelright", "=", "True", ")", "\n", "for", "y", ",", "label", "in", "zip", "(", "\n", "[", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "]", ",", "[", "\"loss\"", ",", "\"train loss\"", ",", "\"val loss\"", ",", "\"test loss\"", "]", "\n", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ",", "args", ".", "log_every", ")", ",", "y", ",", "label", "=", "label", ",", "linewidth", "=", "1", ")", "\n", "", "ax", ".", "xaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "10", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "0.1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "5", ")", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"major\"", ",", "color", "=", "\"red\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"gat_loss_{n_running}.png\"", ")", "\n", "\n", "", "return", "best_val_score", ",", "final_test_score", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.count_parameters": [[357, 360], ["gat.gen_model", "sum", "numpy.prod", "p.size", "gen_model.parameters"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.gen_model"], ["", "def", "count_parameters", "(", "args", ")", ":", "\n", "    ", "model", "=", "gen_model", "(", "args", ")", "\n", "return", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.gat.main": [[362, 427], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "gat.load_data", "print", "gat.preprocess", "map", "range", "print", "print", "print", "print", "print", "print", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "gat.seed", "gat.run", "val_scores.append", "test_scores.append", "x.to", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "gat.count_parameters"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.load_data", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.preprocess", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.run", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.count_parameters"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "device", "\n", "\n", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "\"GAT implementation on ogbn-products\"", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", "\n", ")", "\n", "argparser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"CPU mode. This option overrides '--gpu'.\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU device ID\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"seed\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"running times\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-epochs\"", ",", "type", "=", "int", ",", "default", "=", "250", ",", "help", "=", "\"number of epochs\"", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "\"--use-labels\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Use labels in the training set as input features.\"", "\n", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-label-iters\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of label iterations\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--no-attn-dst\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Don't use attn_dst.\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--mask-rate\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "\"mask rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-heads\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"number of heads\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "\"learning rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-layers\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"number of layers\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-hidden\"", ",", "type", "=", "int", ",", "default", "=", "120", ",", "help", "=", "\"number of hidden units\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "\"dropout rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--input-drop\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"input drop rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--attn-dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"attention drop rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--edge-drop\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "\"edge drop rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--wd\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "\"weight decay\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--eval-every\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"log every EVAL_EVERY epochs\"", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "\"--estimation-mode\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Estimate the score of test set for speed during training.\"", "\n", ")", "\n", "argparser", ".", "add_argument", "(", "\"--log-every\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"log every LOG_EVERY epochs\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--plot-curves\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"plot learning curves\"", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "cpu", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "args", ".", "gpu", ")", "\n", "\n", "# load data", "\n", "", "print", "(", "\"Loading data\"", ")", "\n", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "=", "load_data", "(", "dataset", ")", "\n", "\n", "# preprocess", "\n", "print", "(", "\"Preprocessing\"", ")", "\n", "graph", ",", "labels", "=", "preprocess", "(", "graph", ",", "labels", ",", "train_idx", ")", "\n", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", "=", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "device", ")", ",", "(", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ")", ")", "\n", "\n", "# run", "\n", "val_scores", ",", "test_scores", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "args", ".", "n_runs", "+", "1", ")", ":", "\n", "        ", "seed", "(", "args", ".", "seed", "+", "i", ")", "\n", "val_score", ",", "test_score", "=", "run", "(", "args", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "i", ")", "\n", "val_scores", ".", "append", "(", "val_score", ")", "\n", "test_scores", ".", "append", "(", "test_score", ")", "\n", "\n", "", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "print", "(", "args", ")", "\n", "print", "(", "f\"Runned {args.n_runs} times\"", ")", "\n", "print", "(", "\"Val scores:\"", ",", "val_scores", ")", "\n", "print", "(", "\"Test scores:\"", ",", "test_scores", ")", "\n", "print", "(", "f\"Average val score: {np.mean(val_scores)} \u00b1 {np.std(val_scores)}\"", ")", "\n", "print", "(", "f\"Average test score: {np.mean(test_scores)} \u00b1 {np.std(test_scores)}\"", ")", "\n", "print", "(", "f\"Number of params: {count_parameters(args)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.seed": [[34, 42], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed"], ["def", "seed", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.load_data": [[44, 54], ["ogb.nodeproppred.DglNodePropPredDataset", "ogb.nodeproppred.Evaluator", "ogb.nodeproppred.DglNodePropPredDataset.get_idx_split"], "function", ["None"], ["", "def", "load_data", "(", "dataset", ")", ":", "\n", "    ", "data", "=", "DglNodePropPredDataset", "(", "name", "=", "dataset", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "dataset", ")", "\n", "\n", "splitted_idx", "=", "data", ".", "get_idx_split", "(", ")", "\n", "train_idx", ",", "val_idx", ",", "test_idx", "=", "splitted_idx", "[", "\"train\"", "]", ",", "splitted_idx", "[", "\"valid\"", "]", ",", "splitted_idx", "[", "\"test\"", "]", "\n", "graph", ",", "labels", "=", "data", "[", "0", "]", "\n", "graph", ".", "ndata", "[", "\"labels\"", "]", "=", "labels", "\n", "\n", "return", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.preprocess": [[56, 65], ["labels.max"], "function", ["None"], ["", "def", "preprocess", "(", "graph", ",", "labels", ")", ":", "\n", "    ", "global", "n_node_feats", ",", "n_classes", "\n", "n_node_feats", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", "[", "1", "]", "\n", "n_classes", "=", "(", "labels", ".", "max", "(", ")", "+", "1", ")", ".", "item", "(", ")", "\n", "\n", "# graph = graph.remove_self_loop().add_self_loop()", "\n", "n_node_feats", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "return", "graph", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.gen_model": [[67, 80], ["models.MLP"], "function", ["None"], ["", "def", "gen_model", "(", "args", ")", ":", "\n", "    ", "model", "=", "MLP", "(", "\n", "n_node_feats", ",", "\n", "n_classes", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden", ",", "\n", "activation", "=", "F", ".", "relu", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "input_drop", "=", "args", ".", "input_drop", ",", "\n", "residual", "=", "False", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.custom_loss_function": [[82, 87], ["torch.cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "math.log"], "function", ["None"], ["", "def", "custom_loss_function", "(", "x", ",", "labels", ")", ":", "\n", "    ", "y", "=", "F", ".", "cross_entropy", "(", "x", ",", "labels", "[", ":", ",", "0", "]", ",", "reduction", "=", "\"none\"", ")", "\n", "# y = (1 - torch.exp(-y)) ** 2", "\n", "y", "=", "torch", ".", "log", "(", "epsilon", "+", "y", ")", "-", "math", ".", "log", "(", "epsilon", ")", "\n", "return", "torch", ".", "mean", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.train": [[89, 115], ["model.train", "torch.zeros", "torch.zeros", "torch.zeros", "list", "model", "model.cpu().detach", "criterion", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "len", "evaluator", "b.to", "range", "criterion.item", "len", "model.cpu"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train"], ["", "def", "train", "(", "args", ",", "model", ",", "dataloader", ",", "labels", ",", "train_idx", ",", "criterion", ",", "optimizer", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "loss_sum", ",", "total", "=", "0", ",", "0", "\n", "\n", "preds", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "n_classes", ")", "\n", "\n", "for", "_input_nodes", ",", "output_nodes", ",", "subgraphs", "in", "dataloader", ":", "\n", "        ", "subgraphs", "=", "[", "b", ".", "to", "(", "device", ")", "for", "b", "in", "subgraphs", "]", "\n", "new_train_idx", "=", "list", "(", "range", "(", "len", "(", "output_nodes", ")", ")", ")", "\n", "\n", "pred", "=", "model", "(", "subgraphs", "[", "0", "]", ".", "srcdata", "[", "\"feat\"", "]", ")", "\n", "preds", "[", "output_nodes", "]", "=", "pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "loss", "=", "criterion", "(", "pred", "[", "new_train_idx", "]", ",", "labels", "[", "output_nodes", "]", "[", "new_train_idx", "]", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "count", "=", "len", "(", "new_train_idx", ")", "\n", "loss_sum", "+=", "loss", ".", "item", "(", ")", "*", "count", "\n", "total", "+=", "count", "\n", "\n", "", "return", "(", "\n", "loss_sum", "/", "total", ",", "\n", "evaluator", "(", "preds", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.evaluate": [[118, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "torch.zeros", "torch.zeros", "torch.zeros", "range", "criterion().item", "criterion().item", "criterion().item", "evaluator", "evaluator", "evaluator", "model", "criterion", "criterion", "criterion", "b.to"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "args", ",", "model", ",", "dataloader", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "criterion", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "preds", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "n_classes", ",", "device", "=", "device", ")", "\n", "\n", "eval_times", "=", "1", "# Due to the memory capacity constraints, we use sampling for inference and calculate the average of the predictions 'eval_times' times.", "\n", "\n", "for", "_", "in", "range", "(", "eval_times", ")", ":", "\n", "        ", "for", "_input_nodes", ",", "output_nodes", ",", "subgraphs", "in", "dataloader", ":", "\n", "            ", "subgraphs", "=", "[", "b", ".", "to", "(", "device", ")", "for", "b", "in", "subgraphs", "]", "\n", "\n", "pred", "=", "model", "(", "subgraphs", "[", "0", "]", ".", "srcdata", "[", "\"feat\"", "]", ")", "\n", "preds", "[", "output_nodes", "]", "=", "pred", "\n", "\n", "", "", "preds", "/=", "eval_times", "\n", "\n", "train_loss", "=", "criterion", "(", "preds", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ".", "item", "(", ")", "\n", "val_loss", "=", "criterion", "(", "preds", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", ".", "item", "(", ")", "\n", "test_loss", "=", "criterion", "(", "preds", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", ".", "item", "(", ")", "\n", "\n", "return", "(", "\n", "evaluator", "(", "preds", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "\n", "evaluator", "(", "preds", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", ",", "\n", "evaluator", "(", "preds", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", ",", "\n", "train_loss", ",", "\n", "val_loss", ",", "\n", "test_loss", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.run": [[149, 293], ["dgl.dataloading.MultiLayerNeighborSampler", "utils.DataLoaderWrapper", "dgl.dataloading.MultiLayerNeighborSampler", "utils.DataLoaderWrapper", "gen_model().to", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "range", "print", "print", "dgl.dataloading.pytorch.NodeDataLoader", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dgl.dataloading.pytorch.NodeDataLoader", "gen_model().to.parameters", "time.time", "mlp.train", "time.time", "optim.lr_scheduler.ReduceLROnPlateau.step", "gen_model().to.load_state_dict", "utils.DataLoaderWrapper", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_xticks", "fig.gca.set_yticks", "fig.gca.tick_params", "zip", "fig.gca.xaxis.set_major_locator", "fig.gca.xaxis.set_minor_locator", "fig.gca.yaxis.set_major_locator", "fig.gca.yaxis.set_minor_locator", "matplotlib.grid", "matplotlib.grid", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_xticks", "fig.gca.tick_params", "zip", "fig.gca.xaxis.set_major_locator", "fig.gca.xaxis.set_minor_locator", "fig.gca.yaxis.set_major_locator", "fig.gca.yaxis.set_minor_locator", "matplotlib.grid", "matplotlib.grid", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "evaluator.eval", "graph.cpu", "train_idx.cpu", "graph.cpu", "mlp.gen_model", "mlp.evaluate", "zip", "dgl.dataloading.pytorch.NodeDataLoader", "mlp.evaluate", "numpy.arange", "numpy.linspace", "matplotlib.plot", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "numpy.arange", "matplotlib.plot", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "range", "utils.BatchSampler", "range", "train_idx.cpu", "val_idx.cpu", "train_idx.cpu", "val_idx.cpu", "test_idx.cpu", "utils.BatchSampler", "print", "print", "l.append", "graph.cpu", "test_idx.cpu", "range", "range", "pred.argmax", "len", "len", "collections.OrderedDict", "utils.BatchSampler", "v.to", "len", "gen_model().to.state_dict().items", "gen_model().to.state_dict"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.gen_model", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.evaluate", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.evaluate"], ["", "def", "run", "(", "args", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "n_running", ")", ":", "\n", "    ", "evaluator_wrapper", "=", "lambda", "pred", ",", "labels", ":", "evaluator", ".", "eval", "(", "\n", "{", "\"y_pred\"", ":", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "\"y_true\"", ":", "labels", "}", "\n", ")", "[", "\"acc\"", "]", "\n", "criterion", "=", "custom_loss_function", "\n", "\n", "# train_batch_size = (train_idx.shape[0] + 29) // 30", "\n", "train_batch_size", "=", "4096", "\n", "train_sampler", "=", "MultiLayerNeighborSampler", "(", "[", "0", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "# no not sample neighbors", "\n", "train_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n", "train_idx", ".", "cpu", "(", ")", ",", "\n", "train_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "train_idx", ")", ",", "batch_size", "=", "train_batch_size", ",", "shuffle", "=", "True", ")", ",", "\n", "num_workers", "=", "6", ",", "\n", ")", "\n", ")", "\n", "\n", "# eval_batch_size = (train_idx.shape[0] + 9) // 10", "\n", "eval_batch_size", "=", "32768", "\n", "eval_sampler", "=", "MultiLayerNeighborSampler", "(", "[", "0", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "# no not sample neighbors", "\n", "if", "args", ".", "eval_last", ":", "\n", "        ", "eval_idx", "=", "torch", ".", "cat", "(", "[", "train_idx", ".", "cpu", "(", ")", ",", "val_idx", ".", "cpu", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "eval_idx", "=", "torch", ".", "cat", "(", "[", "train_idx", ".", "cpu", "(", ")", ",", "val_idx", ".", "cpu", "(", ")", ",", "test_idx", ".", "cpu", "(", ")", "]", ")", "\n", "", "eval_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n", "eval_idx", ",", "\n", "eval_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "eval_idx", ")", ",", "batch_size", "=", "eval_batch_size", ",", "shuffle", "=", "False", ")", ",", "\n", "num_workers", "=", "6", ",", "\n", ")", "\n", ")", "\n", "\n", "model", "=", "gen_model", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "mode", "=", "\"max\"", ",", "factor", "=", "0.7", ",", "patience", "=", "20", ",", "verbose", "=", "True", ",", "min_lr", "=", "1e-4", "\n", ")", "\n", "\n", "best_model_state_dict", "=", "None", "\n", "\n", "total_time", "=", "0", "\n", "val_score", ",", "best_val_score", ",", "final_test_score", "=", "0", ",", "0", ",", "0", "\n", "\n", "scores", ",", "train_scores", ",", "val_scores", ",", "test_scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "loss", ",", "score", "=", "train", "(", "args", ",", "model", ",", "train_dataloader", ",", "labels", ",", "train_idx", ",", "criterion", ",", "optimizer", ",", "evaluator_wrapper", ")", "\n", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "total_time", "+=", "toc", "-", "tic", "\n", "\n", "if", "epoch", "%", "args", ".", "eval_every", "==", "0", "or", "epoch", "%", "args", ".", "log_every", "==", "0", ":", "\n", "            ", "train_score", ",", "val_score", ",", "test_score", ",", "train_loss", ",", "val_loss", ",", "test_loss", "=", "evaluate", "(", "\n", "args", ",", "model", ",", "eval_dataloader", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "criterion", ",", "evaluator_wrapper", "\n", ")", "\n", "\n", "if", "val_score", ">", "best_val_score", ":", "\n", "                ", "best_val_score", "=", "val_score", "\n", "final_test_score", "=", "test_score", "\n", "if", "args", ".", "eval_last", ":", "\n", "                    ", "best_model_state_dict", "=", "{", "k", ":", "v", ".", "to", "(", "\"cpu\"", ")", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "best_model_state_dict", "=", "OrderedDict", "(", "best_model_state_dict", ")", "\n", "\n", "", "", "if", "epoch", "%", "args", ".", "log_every", "==", "0", ":", "\n", "                ", "print", "(", "\n", "f\"Run: {n_running}/{args.n_runs}, Epoch: {epoch}/{args.n_epochs}, Average epoch time: {total_time / epoch}\"", "\n", ")", "\n", "print", "(", "\n", "f\"Loss: {loss:.4f}, Score: {score:.4f}\\n\"", "\n", "f\"Train/Val/Test loss: {train_loss:.4f}/{val_loss:.4f}/{test_loss:.4f}\\n\"", "\n", "f\"Train/Val/Test/Best val/Final test score: {train_score:.4f}/{val_score:.4f}/{test_score:.4f}/{best_val_score:.4f}/{final_test_score:.4f}\"", "\n", ")", "\n", "\n", "", "for", "l", ",", "e", "in", "zip", "(", "\n", "[", "scores", ",", "train_scores", ",", "val_scores", ",", "test_scores", ",", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "]", ",", "\n", "[", "score", ",", "train_score", ",", "val_score", ",", "test_score", ",", "loss", ",", "train_loss", ",", "val_loss", ",", "test_loss", "]", ",", "\n", ")", ":", "\n", "                ", "l", ".", "append", "(", "e", ")", "\n", "\n", "", "", "lr_scheduler", ".", "step", "(", "val_score", ")", "\n", "\n", "", "if", "args", ".", "eval_last", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "best_model_state_dict", ")", "\n", "eval_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n", "test_idx", ".", "cpu", "(", ")", ",", "\n", "eval_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "test_idx", ")", ",", "batch_size", "=", "eval_batch_size", ",", "shuffle", "=", "False", ")", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", ")", "\n", "final_test_score", "=", "evaluate", "(", "\n", "args", ",", "model", ",", "eval_dataloader", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "criterion", ",", "evaluator_wrapper", "\n", ")", "[", "2", "]", "\n", "\n", "", "print", "(", "\"*\"", "*", "50", ")", "\n", "print", "(", "f\"Average epoch time: {total_time / args.n_epochs}, Test score: {final_test_score}\"", ")", "\n", "\n", "if", "args", ".", "plot_curves", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "24", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "n_epochs", ",", "100", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "linspace", "(", "0", ",", "1.0", ",", "101", ")", ")", "\n", "ax", ".", "tick_params", "(", "labeltop", "=", "True", ",", "labelright", "=", "True", ")", "\n", "for", "y", ",", "label", "in", "zip", "(", "[", "train_scores", ",", "val_scores", ",", "test_scores", "]", ",", "[", "\"train score\"", ",", "\"val score\"", ",", "\"test score\"", "]", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ",", "args", ".", "log_every", ")", ",", "y", ",", "label", "=", "label", ",", "linewidth", "=", "1", ")", "\n", "", "ax", ".", "xaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "20", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "0.01", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "2", ")", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"major\"", ",", "color", "=", "\"red\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"gat_score_{n_running}.png\"", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "24", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "n_epochs", ",", "100", ")", ")", "\n", "ax", ".", "tick_params", "(", "labeltop", "=", "True", ",", "labelright", "=", "True", ")", "\n", "for", "y", ",", "label", "in", "zip", "(", "\n", "[", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "]", ",", "[", "\"loss\"", ",", "\"train loss\"", ",", "\"val loss\"", ",", "\"test loss\"", "]", "\n", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ",", "args", ".", "log_every", ")", ",", "y", ",", "label", "=", "label", ",", "linewidth", "=", "1", ")", "\n", "", "ax", ".", "xaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "20", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "0.1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "5", ")", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"major\"", ",", "color", "=", "\"red\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"gat_loss_{n_running}.png\"", ")", "\n", "\n", "", "return", "best_val_score", ",", "final_test_score", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.count_parameters": [[295, 298], ["mlp.gen_model", "sum", "numpy.prod", "p.size", "gen_model.parameters"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.gen_model"], ["", "def", "count_parameters", "(", "args", ")", ":", "\n", "    ", "model", "=", "gen_model", "(", "args", ")", "\n", "return", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.mlp.main": [[300, 363], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "mlp.seed", "mlp.load_data", "mlp.preprocess", "graph.create_formats_", "labels.to.to", "train_idx.to.to", "val_idx.to.to", "test_idx.to.to", "range", "print", "print", "print", "print", "print", "print", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "mlp.run", "val_scores.append", "test_scores.append", "torch.arange", "torch.arange", "torch.arange", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "mlp.count_parameters", "len"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.load_data", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.preprocess", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.run", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.count_parameters"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "device", "\n", "\n", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "\"GAT on OGBN-Proteins\"", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "argparser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"CPU mode. This option overrides '--gpu'.\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU device ID.\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "help", "=", "\"seed\"", ",", "default", "=", "0", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-epochs\"", ",", "type", "=", "int", ",", "default", "=", "500", ")", "\n", "argparser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-layers\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-hidden\"", ",", "type", "=", "int", ",", "default", "=", "480", ")", "\n", "argparser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "argparser", ".", "add_argument", "(", "\"--input-drop\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "argparser", ".", "add_argument", "(", "\"--wd\"", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "\"--estimation-mode\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Estimate the test score during training for speed. The final test score is accurate.\"", ",", "\n", ")", "\n", "argparser", ".", "add_argument", "(", "\"--eval-last\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"Evaluate the score of test set at last.\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--eval-every\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "argparser", ".", "add_argument", "(", "\"--log-every\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "argparser", ".", "add_argument", "(", "\"--plot-curves\"", ",", "action", "=", "\"store_true\"", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "cpu", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda:%d\"", "%", "args", ".", "gpu", ")", "\n", "\n", "", "if", "args", ".", "estimation_mode", ":", "\n", "        ", "print", "(", "\"WARNING: Estimation mode is enabled.\"", ")", "\n", "\n", "", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "=", "load_data", "(", "dataset", ")", "\n", "graph", ",", "labels", "=", "preprocess", "(", "graph", ",", "labels", ")", "\n", "graph", ".", "create_formats_", "(", ")", "\n", "\n", "# graph = graph.to(device)", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "train_idx", "=", "train_idx", ".", "to", "(", "device", ")", "\n", "val_idx", "=", "val_idx", ".", "to", "(", "device", ")", "\n", "test_idx", "=", "test_idx", ".", "to", "(", "device", ")", "\n", "if", "args", ".", "estimation_mode", ":", "\n", "        ", "test_idx", "=", "test_idx", "[", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "len", "(", "test_idx", ")", ",", "step", "=", "50", ")", "]", "\n", "\n", "", "val_scores", ",", "test_scores", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "args", ".", "n_runs", "+", "1", ")", ":", "\n", "        ", "val_score", ",", "test_score", "=", "run", "(", "args", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "i", ")", "\n", "val_scores", ".", "append", "(", "val_score", ")", "\n", "test_scores", ".", "append", "(", "test_score", ")", "\n", "\n", "", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "print", "(", "args", ")", "\n", "print", "(", "f\"Runned {args.n_runs} times\"", ")", "\n", "print", "(", "\"Val scores:\"", ",", "val_scores", ")", "\n", "print", "(", "\"Test scores:\"", ",", "test_scores", ")", "\n", "print", "(", "f\"Average val score: {np.mean(val_scores)} \u00b1 {np.std(val_scores)}\"", ")", "\n", "print", "(", "f\"Average test score: {np.mean(test_scores)} \u00b1 {np.std(test_scores)}\"", ")", "\n", "print", "(", "f\"Number of params: {count_parameters(args)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.utils.DataLoaderWrapper.__init__": [[5, 7], ["iter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "self", ".", "iter", "=", "iter", "(", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.utils.DataLoaderWrapper.__iter__": [[8, 10], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.utils.DataLoaderWrapper.__next__": [[11, 16], ["next", "StopIteration"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "next", "(", "self", ".", "iter", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "raise", "StopIteration", "(", ")", "from", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.utils.BatchSampler.__init__": [[19, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "batch_size", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-products.utils.BatchSampler.__iter__": [[24, 34], ["torch.arange", "torch.randperm.split", "torch.randperm"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "shuffle", ":", "\n", "            ", "perm", "=", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "self", ".", "n", ")", "\n", "", "while", "True", ":", "\n", "            ", "if", "self", ".", "shuffle", ":", "\n", "                ", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "n", ")", "\n", "", "shuf", "=", "perm", ".", "split", "(", "self", ".", "batch_size", ")", "\n", "for", "shuf_batch", "in", "shuf", ":", "\n", "                ", "yield", "shuf_batch", "\n", "", "yield", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.models.GATConv.__init__": [[20, 68], ["torch.Module.__init__", "dgl.utils.expand_as_pair", "dgl.utils.expand_as_pair", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.GATConv.reset_parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.reset_parameters"], ["class", "GATConv", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "node_feats", ",", "\n", "edge_feats", ",", "\n", "out_feats", ",", "\n", "n_heads", "=", "1", ",", "\n", "attn_drop", "=", "0.0", ",", "\n", "edge_drop", "=", "0.0", ",", "\n", "negative_slope", "=", "0.2", ",", "\n", "residual", "=", "True", ",", "\n", "activation", "=", "None", ",", "\n", "use_attn_dst", "=", "True", ",", "\n", "allow_zero_in_degree", "=", "True", ",", "\n", "use_symmetric_norm", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GATConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_n_heads", "=", "n_heads", "\n", "self", ".", "_in_src_feats", ",", "self", ".", "_in_dst_feats", "=", "expand_as_pair", "(", "node_feats", ")", "\n", "self", ".", "_out_feats", "=", "out_feats", "\n", "self", ".", "_allow_zero_in_degree", "=", "allow_zero_in_degree", "\n", "self", ".", "_use_symmetric_norm", "=", "use_symmetric_norm", "\n", "\n", "# feat fc", "\n", "self", ".", "src_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "out_feats", "*", "n_heads", ",", "bias", "=", "False", ")", "\n", "if", "residual", ":", "\n", "            ", "self", ".", "dst_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "out_feats", "*", "n_heads", ")", "\n", "self", ".", "bias", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "dst_fc", "=", "None", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "out_feats", "*", "n_heads", ")", "\n", "\n", "# attn fc", "\n", "", "self", ".", "attn_src_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "n_heads", ",", "bias", "=", "False", ")", "\n", "if", "use_attn_dst", ":", "\n", "            ", "self", ".", "attn_dst_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "n_heads", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_dst_fc", "=", "None", "\n", "", "if", "edge_feats", ">", "0", ":", "\n", "            ", "self", ".", "attn_edge_fc", "=", "nn", ".", "Linear", "(", "edge_feats", ",", "n_heads", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_edge_fc", "=", "None", "\n", "\n", "", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "edge_drop", "=", "edge_drop", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.models.GATConv.reset_parameters": [[69, 83], ["torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "src_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "if", "self", ".", "dst_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "dst_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_src_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "if", "self", ".", "attn_dst_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_dst_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "if", "self", ".", "attn_edge_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_edge_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.models.GATConv.set_allow_zero_in_degree": [[84, 86], ["None"], "methods", ["None"], ["\n", "", "", "def", "set_allow_zero_in_degree", "(", "self", ",", "set_value", ")", ":", "\n", "        ", "self", ".", "_allow_zero_in_degree", "=", "set_value", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.models.GATConv.forward": [[87, 169], ["graph.local_scope", "models.GATConv.src_fc().view", "models.GATConv.dst_fc().view", "models.GATConv.attn_src_fc().view", "graph.srcdata.update", "models.GATConv.leaky_relu", "graph.update_all", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "models.GATConv.attn_dst_fc().view", "graph.dstdata.update", "graph.apply_edges", "graph.apply_edges", "models.GATConv.attn_edge_fc().view", "graph.edata.update", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "models.GATConv.attn_drop", "models.GATConv.attn_drop", "dgl.u_mul_e", "dgl.u_mul_e", "dgl.sum", "dgl.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "models.GATConv.activation", "models.GATConv.src_fc", "models.GATConv.dst_fc", "models.GATConv.attn_src_fc", "dgl.u_add_v", "dgl.u_add_v", "dgl.copy_u", "dgl.copy_u", "graph.number_of_edges", "dgl.ops.edge_softmax", "dgl.ops.edge_softmax", "dgl.ops.edge_softmax", "dgl.ops.edge_softmax", "graph.number_of_dst_nodes", "models.GATConv.attn_dst_fc", "models.GATConv.attn_edge_fc", "graph.number_of_edges", "feat_dst.dim", "graph.in_degrees", "feat_src.dim"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "graph", ",", "feat_src", ",", "feat_edge", "=", "None", ")", ":", "\n", "        ", "with", "graph", ".", "local_scope", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "_allow_zero_in_degree", ":", "\n", "                ", "if", "(", "graph", ".", "in_degrees", "(", ")", "==", "0", ")", ".", "any", "(", ")", ":", "\n", "                    ", "assert", "False", "\n", "\n", "", "", "if", "graph", ".", "is_block", ":", "\n", "                ", "feat_dst", "=", "feat_src", "[", ":", "graph", ".", "number_of_dst_nodes", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "feat_dst", "=", "feat_src", "\n", "\n", "", "if", "self", ".", "_use_symmetric_norm", ":", "\n", "                ", "degs", "=", "graph", ".", "srcdata", "[", "\"deg\"", "]", "\n", "# degs = graph.out_degrees().float().clamp(min=1)", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "feat_src", ".", "dim", "(", ")", "-", "1", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "feat_src", "=", "feat_src", "*", "norm", "\n", "\n", "", "feat_src_fc", "=", "self", ".", "src_fc", "(", "feat_src", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "self", ".", "_out_feats", ")", "\n", "feat_dst_fc", "=", "self", ".", "dst_fc", "(", "feat_dst", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "self", ".", "_out_feats", ")", "\n", "attn_src", "=", "self", ".", "attn_src_fc", "(", "feat_src", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "1", ")", "\n", "\n", "# NOTE: GAT paper uses \"first concatenation then linear projection\"", "\n", "# to compute attention scores, while ours is \"first projection then", "\n", "# addition\", the two approaches are mathematically equivalent:", "\n", "# We decompose the weight vector a mentioned in the paper into", "\n", "# [a_l || a_r], then", "\n", "# a^T [Wh_i || Wh_j] = a_l Wh_i + a_r Wh_j", "\n", "# Our implementation is much efficient because we do not need to", "\n", "# save [Wh_i || Wh_j] on edges, which is not memory-efficient. Plus,", "\n", "# addition could be optimized with DGL's built-in function u_add_v,", "\n", "# which further speeds up computation and saves memory footprint.", "\n", "graph", ".", "srcdata", ".", "update", "(", "{", "\"feat_src_fc\"", ":", "feat_src_fc", ",", "\"attn_src\"", ":", "attn_src", "}", ")", "\n", "\n", "if", "self", ".", "attn_dst_fc", "is", "not", "None", ":", "\n", "                ", "attn_dst", "=", "self", ".", "attn_dst_fc", "(", "feat_dst", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "1", ")", "\n", "graph", ".", "dstdata", ".", "update", "(", "{", "\"attn_dst\"", ":", "attn_dst", "}", ")", "\n", "graph", ".", "apply_edges", "(", "fn", ".", "u_add_v", "(", "\"attn_src\"", ",", "\"attn_dst\"", ",", "\"attn_node\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "graph", ".", "apply_edges", "(", "fn", ".", "copy_u", "(", "\"attn_src\"", ",", "\"attn_node\"", ")", ")", "\n", "\n", "", "e", "=", "graph", ".", "edata", "[", "\"attn_node\"", "]", "\n", "if", "feat_edge", "is", "not", "None", ":", "\n", "                ", "attn_edge", "=", "self", ".", "attn_edge_fc", "(", "feat_edge", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "1", ")", "\n", "graph", ".", "edata", ".", "update", "(", "{", "\"attn_edge\"", ":", "attn_edge", "}", ")", "\n", "e", "+=", "graph", ".", "edata", "[", "\"attn_edge\"", "]", "\n", "", "e", "=", "self", ".", "leaky_relu", "(", "e", ")", "\n", "\n", "if", "self", ".", "training", "and", "self", ".", "edge_drop", ">", "0", ":", "\n", "                ", "perm", "=", "torch", ".", "randperm", "(", "graph", ".", "number_of_edges", "(", ")", ",", "device", "=", "e", ".", "device", ")", "\n", "bound", "=", "int", "(", "graph", ".", "number_of_edges", "(", ")", "*", "self", ".", "edge_drop", ")", "\n", "eids", "=", "perm", "[", "bound", ":", "]", "\n", "graph", ".", "edata", "[", "\"a\"", "]", "=", "torch", ".", "zeros_like", "(", "e", ")", "\n", "graph", ".", "edata", "[", "\"a\"", "]", "[", "eids", "]", "=", "self", ".", "attn_drop", "(", "edge_softmax", "(", "graph", ",", "e", "[", "eids", "]", ",", "eids", "=", "eids", ")", ")", "\n", "", "else", ":", "\n", "                ", "graph", ".", "edata", "[", "\"a\"", "]", "=", "self", ".", "attn_drop", "(", "edge_softmax", "(", "graph", ",", "e", ")", ")", "\n", "\n", "# message passing", "\n", "", "graph", ".", "update_all", "(", "fn", ".", "u_mul_e", "(", "\"feat_src_fc\"", ",", "\"a\"", ",", "\"m\"", ")", ",", "fn", ".", "sum", "(", "\"m\"", ",", "\"feat_src_fc\"", ")", ")", "\n", "rst", "=", "graph", ".", "dstdata", "[", "\"feat_src_fc\"", "]", "\n", "\n", "if", "self", ".", "_use_symmetric_norm", ":", "\n", "                ", "degs", "=", "graph", ".", "dstdata", "[", "\"deg\"", "]", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "0.5", ")", "\n", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "feat_dst", ".", "dim", "(", ")", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "rst", "=", "rst", "*", "norm", "\n", "\n", "# residual", "\n", "", "if", "self", ".", "dst_fc", "is", "not", "None", ":", "\n", "                ", "rst", "+=", "feat_dst_fc", "\n", "", "else", ":", "\n", "                ", "rst", "+=", "self", ".", "bias", "\n", "\n", "# activation", "\n", "", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "                ", "rst", "=", "self", ".", "activation", "(", "rst", ",", "inplace", "=", "True", ")", "\n", "\n", "", "return", "rst", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.models.GAT.__init__": [[172, 229], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.GAT.convs.append", "models.GAT.norms.append", "models.GAT.edge_encoder.append", "models.GATConv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__"], ["self", ",", "\n", "node_feats", ",", "\n", "edge_feats", ",", "\n", "n_classes", ",", "\n", "n_layers", ",", "\n", "n_heads", ",", "\n", "n_hidden", ",", "\n", "edge_emb", ",", "\n", "activation", ",", "\n", "dropout", ",", "\n", "input_drop", ",", "\n", "attn_drop", ",", "\n", "edge_drop", ",", "\n", "use_attn_dst", "=", "True", ",", "\n", "allow_zero_in_degree", "=", "False", ",", "\n", "residual", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "n_hidden", "=", "n_hidden", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "norms", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "node_encoder", "=", "nn", ".", "Linear", "(", "node_feats", ",", "n_hidden", ")", "\n", "if", "edge_emb", ">", "0", ":", "\n", "            ", "self", ".", "edge_encoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "edge_encoder", "=", "None", "\n", "\n", "", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "in_hidden", "=", "n_heads", "*", "n_hidden", "if", "i", ">", "0", "else", "node_feats", "\n", "out_hidden", "=", "n_hidden", "\n", "# bias = i == n_layers - 1", "\n", "\n", "if", "self", ".", "edge_encoder", "is", "not", "None", ":", "\n", "                ", "self", ".", "edge_encoder", ".", "append", "(", "nn", ".", "Linear", "(", "edge_feats", ",", "edge_emb", ")", ")", "\n", "", "self", ".", "convs", ".", "append", "(", "\n", "GATConv", "(", "\n", "in_hidden", ",", "\n", "edge_emb", ",", "\n", "out_hidden", ",", "\n", "n_heads", "=", "n_heads", ",", "\n", "attn_drop", "=", "attn_drop", ",", "\n", "edge_drop", "=", "edge_drop", ",", "\n", "use_attn_dst", "=", "use_attn_dst", ",", "\n", "allow_zero_in_degree", "=", "allow_zero_in_degree", ",", "\n", "use_symmetric_norm", "=", "False", ",", "# TAG", "\n", ")", "\n", ")", "\n", "self", ".", "norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "n_heads", "*", "out_hidden", ")", ")", "\n", "\n", "", "self", ".", "pred_linear", "=", "nn", ".", "Linear", "(", "n_heads", "*", "n_hidden", ",", "n_classes", ")", "\n", "\n", "self", ".", "input_drop", "=", "nn", ".", "Dropout", "(", "input_drop", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.models.GAT.forward": [[230, 265], ["models.GAT.node_encoder", "torch.relu", "torch.relu", "torch.relu", "models.GAT.input_drop", "range", "models.GAT.pred_linear", "isinstance", "models.GAT.activation", "models.GAT.dropout", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["self", ".", "activation", "=", "activation", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "inference", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "g", ",", "list", ")", ":", "\n", "            ", "subgraphs", "=", "[", "g", "]", "*", "self", ".", "n_layers", "\n", "", "else", ":", "\n", "            ", "subgraphs", "=", "g", "\n", "\n", "", "h", "=", "subgraphs", "[", "0", "]", ".", "srcdata", "[", "\"feat\"", "]", "\n", "h", "=", "self", ".", "input_drop", "(", "h", ")", "\n", "\n", "h_last", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "edge_encoder", "is", "not", "None", ":", "\n", "                ", "efeat", "=", "subgraphs", "[", "i", "]", ".", "edata", "[", "\"feat\"", "]", "\n", "efeat_emb", "=", "self", ".", "edge_encoder", "[", "i", "]", "(", "efeat", ")", "\n", "efeat_emb", "=", "F", ".", "relu", "(", "efeat_emb", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "efeat_emb", "=", "None", "\n", "\n", "", "h", "=", "self", ".", "convs", "[", "i", "]", "(", "subgraphs", "[", "i", "]", ",", "h", ",", "efeat_emb", ")", ".", "flatten", "(", "1", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "residual", "and", "h_last", "is", "not", "None", ":", "\n", "                ", "h", "+=", "h_last", "[", ":", "h", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "\n", "", "h_last", "=", "h", "\n", "\n", "h", "=", "self", ".", "norms", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ",", "inplace", "=", "True", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "\n", "", "h", "=", "self", ".", "pred_linear", "(", "h", ")", "\n", "\n", "return", "h", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.seed": [[31, 40], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "dgl.random.seed", "dgl.random.seed"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed"], ["dataset", "=", "\"ogbn-products\"", "\n", "n_node_feats", ",", "n_edge_feats", ",", "n_classes", "=", "0", ",", "0", ",", "0", "\n", "\n", "\n", "def", "seed", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.load_data": [[42, 52], ["ogb.nodeproppred.DglNodePropPredDataset", "ogb.nodeproppred.Evaluator", "ogb.nodeproppred.DglNodePropPredDataset.get_idx_split"], "function", ["None"], ["torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "dgl", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "\n", "", "def", "load_data", "(", "dataset", ")", ":", "\n", "    ", "data", "=", "DglNodePropPredDataset", "(", "name", "=", "dataset", ")", "\n", "evaluator", "=", "Evaluator", "(", "name", "=", "dataset", ")", "\n", "\n", "splitted_idx", "=", "data", ".", "get_idx_split", "(", ")", "\n", "train_idx", ",", "val_idx", ",", "test_idx", "=", "splitted_idx", "[", "\"train\"", "]", ",", "splitted_idx", "[", "\"valid\"", "]", ",", "splitted_idx", "[", "\"test\"", "]", "\n", "graph", ",", "labels", "=", "data", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.preprocess": [[54, 69], ["graph.update_all", "torch.zeros", "torch.zeros", "torch.zeros", "graph.out_degrees().float().clamp", "graph.create_formats_", "dgl.copy_e", "dgl.sum", "graph.number_of_nodes", "graph.out_degrees().float", "graph.out_degrees"], "function", ["None"], ["\n", "print", "(", "\"#Features:\"", ",", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", ")", "\n", "\n", "return", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "\n", "\n", "\n", "", "def", "preprocess", "(", "graph", ",", "labels", ",", "train_idx", ")", ":", "\n", "    ", "global", "n_node_feats", ",", "n_classes", "\n", "n_node_feats", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", "[", "1", "]", "\n", "n_classes", "=", "(", "labels", ".", "max", "(", ")", "+", "1", ")", ".", "item", "(", ")", "\n", "\n", "# graph = graph.remove_self_loop().add_self_loop()", "\n", "n_node_feats", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "graph", ".", "ndata", "[", "\"train_labels_onehot\"", "]", "=", "torch", ".", "zeros", "(", "graph", ".", "number_of_nodes", "(", ")", ",", "n_classes", ")", "\n", "graph", ".", "ndata", "[", "\"train_labels_onehot\"", "]", "[", "train_idx", ",", "labels", "[", "train_idx", ",", "0", "]", "]", "=", "1", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.gen_model": [[71, 94], ["models.GAT"], "function", ["None"], ["graph", ".", "ndata", "[", "\"is_train\"", "]", "=", "torch", ".", "zeros", "(", "graph", ".", "number_of_nodes", "(", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "graph", ".", "ndata", "[", "\"is_train\"", "]", "[", "train_idx", "]", "=", "1", "\n", "graph", ".", "ndata", "[", "\"deg\"", "]", "=", "graph", ".", "out_degrees", "(", ")", ".", "float", "(", ")", ".", "clamp", "(", "min", "=", "1", ")", "\n", "\n", "graph", ".", "create_formats_", "(", ")", "\n", "\n", "return", "graph", ",", "labels", "\n", "\n", "\n", "", "def", "gen_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "use_labels", ":", "\n", "        ", "n_node_feats_", "=", "n_node_feats", "+", "n_classes", "\n", "", "else", ":", "\n", "        ", "n_node_feats_", "=", "n_node_feats", "\n", "\n", "", "model", "=", "GAT", "(", "\n", "n_node_feats_", ",", "\n", "n_edge_feats", ",", "\n", "n_classes", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden", ",", "\n", "edge_emb", "=", "0", ",", "\n", "activation", "=", "F", ".", "relu", ",", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.add_labels": [[96, 101], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["input_drop", "=", "args", ".", "input_drop", ",", "\n", "attn_drop", "=", "args", ".", "attn_dropout", ",", "\n", "edge_drop", "=", "args", ".", "edge_drop", ",", "\n", "use_attn_dst", "=", "not", "args", ".", "no_attn_dst", ",", "\n", "allow_zero_in_degree", "=", "True", ",", "\n", "residual", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.train": [[103, 133], ["model.train", "torch.arange", "torch.arange", "torch.arange", "model", "criterion", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "len", "b.to", "len", "torch.arange", "torch.arange", "torch.arange", "gat.add_labels", "[].float", "criterion.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.add_labels"], ["\n", "return", "model", "\n", "\n", "\n", "", "def", "custom_loss_function", "(", "x", ",", "labels", ")", ":", "\n", "    ", "y", "=", "F", ".", "cross_entropy", "(", "x", ",", "labels", "[", ":", ",", "0", "]", ",", "reduction", "=", "\"none\"", ")", "\n", "y", "=", "torch", ".", "log", "(", "epsilon", "+", "y", ")", "-", "math", ".", "log", "(", "epsilon", ")", "# comment this line to use logistic loss", "\n", "return", "torch", ".", "mean", "(", "y", ")", "\n", "\n", "\n", "", "def", "add_labels", "(", "graph", ",", "idx", ")", ":", "\n", "    ", "feat", "=", "graph", ".", "srcdata", "[", "\"feat\"", "]", "\n", "train_labels_onehot", "=", "torch", ".", "zeros", "(", "[", "feat", ".", "shape", "[", "0", "]", ",", "n_classes", "]", ",", "device", "=", "device", ")", "\n", "train_labels_onehot", "[", "idx", "]", "=", "graph", ".", "srcdata", "[", "\"train_labels_onehot\"", "]", "[", "idx", "]", "\n", "graph", ".", "srcdata", "[", "\"feat\"", "]", "=", "torch", ".", "cat", "(", "[", "feat", ",", "train_labels_onehot", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n", "", "def", "train", "(", "args", ",", "model", ",", "dataloader", ",", "labels", ",", "train_idx", ",", "criterion", ",", "optimizer", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "loss_sum", ",", "total", "=", "0", ",", "0", "\n", "\n", "preds", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "n_classes", ")", "\n", "\n", "for", "input_nodes", ",", "output_nodes", ",", "subgraphs", "in", "dataloader", ":", "\n", "        ", "subgraphs", "=", "[", "b", ".", "to", "(", "device", ")", "for", "b", "in", "subgraphs", "]", "\n", "new_train_idx", "=", "torch", ".", "arange", "(", "len", "(", "output_nodes", ")", ")", "\n", "\n", "if", "args", ".", "use_labels", ":", "\n", "            ", "train_labels_idx", "=", "torch", ".", "arange", "(", "len", "(", "output_nodes", ")", ",", "len", "(", "input_nodes", ")", ",", "device", "=", "device", ")", "\n", "train_pred_idx", "=", "new_train_idx", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.evaluate": [[135, 171], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "criterion().item", "criterion().item", "criterion().item", "evaluator", "evaluator", "evaluator", "torch.zeros", "torch.zeros", "torch.zeros", "list", "model", "criterion", "criterion", "criterion", "b.to", "range", "gat.add_labels", "labels[].float", "labels[].float", "labels[].float", "len"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.add_labels"], ["add_labels", "(", "subgraphs", "[", "0", "]", ",", "train_labels_idx", ")", "\n", "", "else", ":", "\n", "            ", "train_pred_idx", "=", "new_train_idx", "\n", "\n", "", "pred", "=", "model", "(", "subgraphs", ")", "\n", "\n", "preds", "[", "output_nodes", "]", "=", "pred", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# NOTE: This is not a complete implementation of label reuse, since it is too expensive", "\n", "# to predict the nodes in validation and test set during training time.", "\n", "loss", "=", "criterion", "(", "pred", "[", "train_pred_idx", "]", ",", "subgraphs", "[", "-", "1", "]", ".", "dstdata", "[", "\"labels\"", "]", "[", "train_pred_idx", "]", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "count", "=", "len", "(", "train_pred_idx", ")", "\n", "loss_sum", "+=", "loss", ".", "item", "(", ")", "*", "count", "\n", "total", "+=", "count", "\n", "\n", "", "return", "(", "\n", "evaluator", "(", "preds", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "\n", "loss_sum", "/", "total", ",", "\n", ")", "\n", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "args", ",", "model", ",", "dataloader", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "criterion", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "# Due to the memory capacity constraints, we use sampling for inference and calculate the average of the predictions 'eval_times' times.", "\n", "eval_times", "=", "1", "\n", "\n", "preds_avg", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "n_classes", ",", "device", "=", "device", ")", "\n", "\n", "for", "_", "in", "range", "(", "eval_times", ")", ":", "\n", "        ", "for", "input_nodes", ",", "output_nodes", ",", "subgraphs", "in", "dataloader", ":", "\n", "            ", "subgraphs", "=", "[", "b", ".", "to", "(", "device", ")", "for", "b", "in", "subgraphs", "]", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.run": [[174, 298], ["dgl.dataloading.MultiLayerNeighborSampler", "utils.DataLoaderWrapper", "dgl.dataloading.MultiLayerNeighborSampler", "utils.DataLoaderWrapper", "torch.nn.BCEWithLogitsLoss", "gen_model().to", "torch.AdamW", "torch.lr_scheduler.ReduceLROnPlateau", "range", "print", "print", "print", "dgl.dataloading.pytorch.NodeDataLoader", "dgl.dataloading.pytorch.NodeDataLoader", "gen_model().to.parameters", "time.time", "gat.train", "time.time", "optim.lr_scheduler.ReduceLROnPlateau.step", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_xticks", "fig.gca.set_yticks", "fig.gca.tick_params", "zip", "fig.gca.xaxis.set_major_locator", "fig.gca.xaxis.set_minor_locator", "fig.gca.yaxis.set_major_locator", "fig.gca.yaxis.set_minor_locator", "matplotlib.grid", "matplotlib.grid", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.figure", "plt.figure.gca", "fig.gca.set_xticks", "fig.gca.tick_params", "zip", "fig.gca.xaxis.set_major_locator", "fig.gca.xaxis.set_minor_locator", "fig.gca.yaxis.set_major_locator", "fig.gca.yaxis.set_minor_locator", "matplotlib.grid", "matplotlib.grid", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "os.makedirs", "torch.save", "torch.save", "torch.save", "evaluator.eval", "len", "graph.cpu", "train_idx.cpu", "graph.cpu", "torch.cat", "torch.cat", "torch.cat", "gat.gen_model", "gat.evaluate", "zip", "numpy.arange", "numpy.linspace", "matplotlib.plot", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "numpy.arange", "matplotlib.plot", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "torch.softmax", "range", "utils.BatchSampler", "range", "utils.BatchSampler", "print", "print", "l.append", "range", "range", "len", "train_idx.cpu", "val_idx.cpu", "test_idx.cpu", "graph.number_of_nodes"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.gen_model", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.evaluate"], ["if", "args", ".", "use_labels", ":", "\n", "                ", "add_labels", "(", "subgraphs", "[", "0", "]", ",", "new_train_idx", ")", "\n", "\n", "", "pred", "=", "model", "(", "subgraphs", ")", "\n", "preds_avg", "[", "output_nodes", "]", "+=", "pred", "\n", "\n", "", "", "preds_avg", "/=", "eval_times", "\n", "\n", "train_loss", "=", "criterion", "(", "preds_avg", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ".", "item", "(", ")", "\n", "val_loss", "=", "criterion", "(", "preds_avg", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", ".", "item", "(", ")", "\n", "test_loss", "=", "criterion", "(", "preds_avg", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", ".", "item", "(", ")", "\n", "\n", "return", "(", "\n", "evaluator", "(", "preds_avg", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "\n", "evaluator", "(", "preds_avg", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", ",", "\n", "evaluator", "(", "preds_avg", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", ",", "\n", "train_loss", ",", "\n", "val_loss", ",", "\n", "test_loss", ",", "\n", ")", "\n", "\n", "\n", "", "def", "run", "(", "args", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "n_running", ")", ":", "\n", "    ", "evaluator_wrapper", "=", "lambda", "pred", ",", "labels", ":", "evaluator", ".", "eval", "(", "\n", "{", "\"y_pred\"", ":", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "\"y_true\"", ":", "labels", "}", "\n", ")", "[", "\"acc\"", "]", "\n", "criterion", "=", "custom_loss_function", "\n", "\n", "n_train_samples", "=", "train_idx", ".", "shape", "[", "0", "]", "\n", "train_batch_size", "=", "(", "n_train_samples", "+", "29", ")", "//", "30", "\n", "train_sampler", "=", "MultiLayerNeighborSampler", "(", "[", "8", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "train_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n", "train_idx", ".", "cpu", "(", ")", ",", "\n", "train_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "train_idx", ")", ",", "batch_size", "=", "train_batch_size", ",", "shuffle", "=", "True", ")", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", ")", "\n", "print", "(", "\"len(train_idx):\"", ",", "len", "(", "train_idx", ")", ")", "\n", "\n", "eval_batch_size", "=", "(", "n_train_samples", "+", "29", ")", "//", "30", "\n", "eval_sampler", "=", "MultiLayerNeighborSampler", "(", "[", "8", "for", "_", "in", "range", "(", "args", ".", "n_layers", ")", "]", ")", "\n", "\n", "if", "args", ".", "estimation_mode", ":", "\n", "        ", "test_idx_during_training", "=", "test_idx", "[", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "len", "(", "test_idx", ")", ",", "step", "=", "45", ")", "]", "\n", "", "else", ":", "\n", "        ", "test_idx_during_training", "=", "test_idx", "\n", "\n", "", "eval_idx", "=", "torch", ".", "cat", "(", "[", "train_idx", ".", "cpu", "(", ")", ",", "val_idx", ".", "cpu", "(", ")", ",", "test_idx_during_training", ".", "cpu", "(", ")", "]", ")", "\n", "eval_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n", "eval_idx", ",", "\n", "eval_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "eval_idx", ")", ",", "batch_size", "=", "eval_batch_size", ",", "shuffle", "=", "False", ")", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", ")", "\n", "print", "(", "\"len(eval_idx):\"", ",", "len", "(", "eval_idx", ")", ")", "\n", "\n", "model", "=", "gen_model", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "mode", "=", "\"max\"", ",", "factor", "=", "0.7", ",", "patience", "=", "20", ",", "verbose", "=", "True", ",", "min_lr", "=", "1e-4", "\n", ")", "\n", "\n", "best_model_state_dict", "=", "None", "\n", "\n", "total_time", "=", "0", "\n", "val_score", ",", "best_val_score", ",", "final_test_score", "=", "0", ",", "0", ",", "0", "\n", "\n", "scores", ",", "train_scores", ",", "val_scores", ",", "test_scores", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ")", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "score", ",", "loss", "=", "train", "(", "args", ",", "model", ",", "train_dataloader", ",", "labels", ",", "train_idx", ",", "criterion", ",", "optimizer", ",", "evaluator_wrapper", ")", "\n", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"train:\"", ",", "toc", "-", "tic", ")", "\n", "total_time", "+=", "toc", "-", "tic", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "epoch", "==", "args", ".", "n_epochs", "or", "epoch", "%", "args", ".", "eval_every", "==", "0", "or", "epoch", "%", "args", ".", "log_every", "==", "0", ":", "\n", "            ", "train_score", ",", "val_score", ",", "test_score", ",", "train_loss", ",", "val_loss", ",", "test_loss", "=", "evaluate", "(", "\n", "args", ",", "\n", "model", ",", "\n", "eval_dataloader", ",", "\n", "labels", ",", "\n", "train_idx", ",", "\n", "val_idx", ",", "\n", "test_idx_during_training", ",", "\n", "criterion", ",", "\n", "evaluator_wrapper", ",", "\n", ")", "\n", "\n", "if", "val_score", ">", "best_val_score", ":", "\n", "                ", "best_val_score", "=", "val_score", "\n", "final_test_score", "=", "test_score", "\n", "if", "args", ".", "estimation_mode", ":", "\n", "                    ", "best_model_state_dict", "=", "{", "k", ":", "v", ".", "to", "(", "\"cpu\"", ")", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "\n", "", "", "if", "epoch", "==", "args", ".", "n_epochs", "or", "epoch", "%", "args", ".", "log_every", "==", "0", ":", "\n", "                ", "print", "(", "\n", "f\"Run: {n_running}/{args.n_runs}, Epoch: {epoch}/{args.n_epochs}, Average epoch time: {total_time / epoch:.2f}s\\n\"", "\n", "f\"Loss: {loss:.4f}, Score: {score:.4f}\\n\"", "\n", "f\"Train/Val/Test loss: {train_loss:.4f}/{val_loss:.4f}/{test_loss:.4f}\\n\"", "\n", "f\"Train/Val/Test/Best val/Final test score: {train_score:.4f}/{val_score:.4f}/{test_score:.4f}/{best_val_score:.4f}/{final_test_score:.4f}\"", "\n", ")", "\n", "\n", "", "for", "l", ",", "e", "in", "zip", "(", "\n", "[", "scores", ",", "train_scores", ",", "val_scores", ",", "test_scores", ",", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "]", ",", "\n", "[", "score", ",", "train_score", ",", "val_score", ",", "test_score", ",", "loss", ",", "train_loss", ",", "val_loss", ",", "test_loss", "]", ",", "\n", ")", ":", "\n", "                ", "l", ".", "append", "(", "e", ")", "\n", "\n", "", "", "lr_scheduler", ".", "step", "(", "val_score", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"eval:\"", ",", "toc", "-", "tic", ")", "\n", "\n", "", "if", "args", ".", "estimation_mode", ":", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.count_parameters": [[300, 303], ["gat.gen_model", "sum", "numpy.prod", "p.size", "gen_model.parameters"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.gen_model"], ["model", ".", "load_state_dict", "(", "best_model_state_dict", ")", "\n", "eval_dataloader", "=", "DataLoaderWrapper", "(", "\n", "NodeDataLoader", "(", "\n", "graph", ".", "cpu", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.gat.main": [[305, 366], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "gat.load_data", "print", "gat.preprocess", "map", "range", "print", "print", "print", "print", "print", "print", "print", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "gat.seed", "gat.run", "val_scores.append", "test_scores.append", "x.to", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "gat.count_parameters"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.load_data", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.preprocess", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.run", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.count_parameters"], ["eval_sampler", ",", "\n", "batch_sampler", "=", "BatchSampler", "(", "len", "(", "test_idx", ")", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "False", ")", ",", "\n", "num_workers", "=", "4", ",", "\n", ")", "\n", ")", "\n", "final_test_score", "=", "evaluate", "(", "\n", "args", ",", "model", ",", "eval_dataloader", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "criterion", ",", "evaluator_wrapper", "\n", ")", "[", "2", "]", "\n", "\n", "", "print", "(", "\"*\"", "*", "50", ")", "\n", "print", "(", "f\"Best val score: {best_val_score}, Final test score: {final_test_score}\"", ")", "\n", "print", "(", "\"*\"", "*", "50", ")", "\n", "\n", "if", "args", ".", "plot_curves", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "24", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "n_epochs", ",", "100", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "linspace", "(", "0", ",", "1.0", ",", "101", ")", ")", "\n", "ax", ".", "tick_params", "(", "labeltop", "=", "True", ",", "labelright", "=", "True", ")", "\n", "for", "y", ",", "label", "in", "zip", "(", "[", "train_scores", ",", "val_scores", ",", "test_scores", "]", ",", "[", "\"train score\"", ",", "\"val score\"", ",", "\"test score\"", "]", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ",", "args", ".", "log_every", ")", ",", "y", ",", "label", "=", "label", ",", "linewidth", "=", "1", ")", "\n", "", "ax", ".", "xaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "10", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "0.01", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "2", ")", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"major\"", ",", "color", "=", "\"red\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"gat_score_{n_running}.png\"", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "24", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "n_epochs", ",", "100", ")", ")", "\n", "ax", ".", "tick_params", "(", "labeltop", "=", "True", ",", "labelright", "=", "True", ")", "\n", "for", "y", ",", "label", "in", "zip", "(", "\n", "[", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "]", ",", "[", "\"loss\"", ",", "\"train loss\"", ",", "\"val loss\"", ",", "\"test loss\"", "]", "\n", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "1", ",", "args", ".", "n_epochs", "+", "1", ",", "args", ".", "log_every", ")", ",", "y", ",", "label", "=", "label", ",", "linewidth", "=", "1", ")", "\n", "", "ax", ".", "xaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "10", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "0.1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "5", ")", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"major\"", ",", "color", "=", "\"red\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"gat_loss_{n_running}.png\"", ")", "\n", "\n", "", "return", "best_val_score", ",", "final_test_score", "\n", "\n", "\n", "", "def", "count_parameters", "(", "args", ")", ":", "\n", "    ", "model", "=", "gen_model", "(", "args", ")", "\n", "return", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", ")", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "global", "device", "\n", "\n", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "\"GAT implementation on ogbn-products\"", ",", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.utils.DataLoaderWrapper.__init__": [[9, 11], ["iter"], "methods", ["None"], ["        ", "return", "self", "\n", "\n", "", "def", "__next__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.utils.DataLoaderWrapper.__iter__": [[12, 14], ["None"], "methods", ["None"], ["        ", "try", ":", "\n", "            ", "return", "next", "(", "self", ".", "iter", ")", "\n", "", "except", "Exception", ":", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.utils.DataLoaderWrapper.__next__": [[15, 20], ["next", "StopIteration"], "methods", ["None"], ["            ", "raise", "StopIteration", "(", ")", "from", "None", "\n", "\n", "\n", "", "", "", "class", "BatchSampler", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "n", ",", "batch_size", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.utils.BatchSampler.__init__": [[23, 26], ["None"], "methods", ["None"], ["\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "shuffle", ":", "\n", "            ", "perm", "=", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "self", ".", "n", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.ogbn-proteins.utils.BatchSampler.__iter__": [[27, 33], ["torch.randperm().split", "torch.randperm().split", "torch.randperm().split", "torch.randperm().split", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "while", "True", ":", "\n", "            ", "if", "self", ".", "shuffle", ":", "\n", "                ", "perm", "=", "torch", ".", "randperm", "(", "self", ".", "n", ")", "\n", "", "shuf", "=", "perm", ".", "split", "(", "self", ".", "batch_size", ")", "\n", "for", "shuf_batch", "in", "shuf", ":", "\n", "                ", "yield", "shuf_batch", "\n", "", "yield", "None", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.ElementWiseLinear.__init__": [[19, 32], ["torch.Module.__init__", "models.ElementWiseLinear.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.reset_parameters"], ["\n", "class", "GATConv", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "node_feats", ",", "\n", "edge_feats", ",", "\n", "out_feats", ",", "\n", "n_heads", "=", "1", ",", "\n", "attn_drop", "=", "0.0", ",", "\n", "edge_drop", "=", "0.0", ",", "\n", "negative_slope", "=", "0.2", ",", "\n", "residual", "=", "True", ",", "\n", "activation", "=", "None", ",", "\n", "use_attn_dst", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.ElementWiseLinear.reset_parameters": [[33, 38], ["torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.ones_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["allow_zero_in_degree", "=", "True", ",", "\n", "use_symmetric_norm", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GATConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_n_heads", "=", "n_heads", "\n", "self", ".", "_in_src_feats", ",", "self", ".", "_in_dst_feats", "=", "expand_as_pair", "(", "node_feats", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.ElementWiseLinear.forward": [[39, 51], ["x.mul_", "x.add_"], "methods", ["None"], ["self", ".", "_out_feats", "=", "out_feats", "\n", "self", ".", "_allow_zero_in_degree", "=", "allow_zero_in_degree", "\n", "self", ".", "_use_symmetric_norm", "=", "use_symmetric_norm", "\n", "\n", "# feat fc", "\n", "self", ".", "src_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "out_feats", "*", "n_heads", ",", "bias", "=", "False", ")", "\n", "if", "residual", ":", "\n", "            ", "self", ".", "dst_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "out_feats", "*", "n_heads", ")", "\n", "self", ".", "bias", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "dst_fc", "=", "None", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "out_feats", "*", "n_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.MLP.__init__": [[54, 91], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.MLP.linears.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "models.MLP.norms.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__"], ["if", "use_attn_dst", ":", "\n", "            ", "self", ".", "attn_dst_fc", "=", "nn", ".", "Linear", "(", "self", ".", "_in_src_feats", ",", "n_heads", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_dst_fc", "=", "None", "\n", "", "if", "edge_feats", ">", "0", ":", "\n", "            ", "self", ".", "attn_edge_fc", "=", "nn", ".", "Linear", "(", "edge_feats", ",", "n_heads", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_edge_fc", "=", "None", "\n", "\n", "", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "self", ".", "edge_drop", "=", "edge_drop", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "\"relu\"", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "src_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "if", "self", ".", "dst_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "dst_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_src_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "if", "self", ".", "attn_dst_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_dst_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "", "if", "self", ".", "attn_edge_fc", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attn_edge_fc", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n", "", "", "def", "set_allow_zero_in_degree", "(", "self", ",", "set_value", ")", ":", "\n", "        ", "self", ".", "_allow_zero_in_degree", "=", "set_value", "\n", "\n", "", "def", "forward", "(", "self", ",", "graph", ",", "feat_src", ",", "feat_edge", "=", "None", ")", ":", "\n", "        ", "with", "graph", ".", "local_scope", "(", ")", ":", "\n", "            ", "if", "not", "self", ".", "_allow_zero_in_degree", ":", "\n", "                ", "if", "(", "graph", ".", "in_degrees", "(", ")", "==", "0", ")", ".", "any", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.MLP.forward": [[92, 111], ["models.MLP.input_drop", "range", "models.MLP.activation", "models.MLP.dropout"], "methods", ["None"], ["                    ", "assert", "False", "\n", "\n", "", "", "if", "graph", ".", "is_block", ":", "\n", "                ", "feat_dst", "=", "feat_src", "[", ":", "graph", ".", "number_of_dst_nodes", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "feat_dst", "=", "feat_src", "\n", "\n", "", "if", "self", ".", "_use_symmetric_norm", ":", "\n", "                ", "degs", "=", "graph", ".", "srcdata", "[", "\"deg\"", "]", "\n", "# degs = graph.out_degrees().float().clamp(min=1)", "\n", "norm", "=", "torch", ".", "pow", "(", "degs", ",", "-", "0.5", ")", "\n", "shp", "=", "norm", ".", "shape", "+", "(", "1", ",", ")", "*", "(", "feat_src", ".", "dim", "(", ")", "-", "1", ")", "\n", "norm", "=", "torch", ".", "reshape", "(", "norm", ",", "shp", ")", "\n", "feat_src", "=", "feat_src", "*", "norm", "\n", "\n", "", "feat_src_fc", "=", "self", ".", "src_fc", "(", "feat_src", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "self", ".", "_out_feats", ")", "\n", "feat_dst_fc", "=", "self", ".", "dst_fc", "(", "feat_dst", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "self", ".", "_out_feats", ")", "\n", "attn_src", "=", "self", ".", "attn_src_fc", "(", "feat_src", ")", ".", "view", "(", "-", "1", ",", "self", ".", "_n_heads", ",", "1", ")", "\n", "\n", "# NOTE: GAT paper uses \"first concatenation then linear projection\"", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GraphConv.__init__": [[226, 252], ["torch.Module.__init__", "models.GraphConv.reset_parameters", "dgl._ffi.base.DGLError", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.GraphConv.register_parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.GraphConv.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.reset_parameters"], ["", "self", ".", "pred_linear", "=", "nn", ".", "Linear", "(", "n_heads", "*", "n_hidden", ",", "n_classes", ")", "\n", "\n", "self", ".", "input_drop", "=", "nn", ".", "Dropout", "(", "input_drop", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "", "def", "forward", "(", "self", ",", "g", ",", "inference", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "g", ",", "list", ")", ":", "\n", "            ", "subgraphs", "=", "[", "g", "]", "*", "self", ".", "n_layers", "\n", "", "else", ":", "\n", "            ", "subgraphs", "=", "g", "\n", "\n", "", "h", "=", "subgraphs", "[", "0", "]", ".", "srcdata", "[", "\"feat\"", "]", "\n", "h", "=", "self", ".", "input_drop", "(", "h", ")", "\n", "\n", "h_last", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "edge_encoder", "is", "not", "None", ":", "\n", "                ", "efeat", "=", "subgraphs", "[", "i", "]", ".", "edata", "[", "\"feat\"", "]", "\n", "efeat_emb", "=", "self", ".", "edge_encoder", "[", "i", "]", "(", "efeat", ")", "\n", "efeat_emb", "=", "F", ".", "relu", "(", "efeat_emb", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "efeat_emb", "=", "None", "\n", "\n", "", "h", "=", "self", ".", "convs", "[", "i", "]", "(", "subgraphs", "[", "i", "]", ",", "h", ",", "efeat_emb", ")", ".", "flatten", "(", "1", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GraphConv.reset_parameters": [[253, 272], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["\n", "if", "self", ".", "residual", "and", "h_last", "is", "not", "None", ":", "\n", "                ", "h", "+=", "h_last", "[", ":", "h", ".", "shape", "[", "0", "]", ",", ":", "]", "\n", "\n", "", "h_last", "=", "h", "\n", "\n", "h", "=", "self", ".", "norms", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ",", "inplace", "=", "True", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "\n", "", "h", "=", "self", ".", "pred_linear", "(", "h", ")", "\n", "\n", "return", "h", "\n", "\n", "\n", "", "", "class", "MLP", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "in_feats", ",", "n_classes", ",", "n_layers", ",", "n_hidden", ",", "activation", ",", "dropout", "=", "0.0", ",", "input_drop", "=", "0.0", ",", "residual", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GraphConv.set_allow_zero_in_degree": [[273, 286], ["None"], "methods", ["None"], ["self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_hidden", "=", "n_hidden", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "norms", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "n_layers", ")", ":", "\n", "            ", "in_hidden", "=", "n_hidden", "if", "i", ">", "0", "else", "in_feats", "\n", "out_hidden", "=", "n_hidden", "if", "i", "<", "n_layers", "-", "1", "else", "n_classes", "\n", "\n", "self", ".", "linears", ".", "append", "(", "nn", ".", "Linear", "(", "in_hidden", ",", "out_hidden", ")", ")", "\n", "\n", "if", "i", "<", "n_layers", "-", "1", ":", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GraphConv.forward": [[287, 404], ["graph.local_scope", "dgl.utils.expand_as_pair", "graph.out_degrees().float().clamp", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "graph.update_all", "graph.update_all", "graph.in_degrees().float().clamp", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "models.GraphConv._activation", "dgl._ffi.base.DGLError", "dgl._ffi.base.DGLError", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "dgl.function.copy_src", "dgl.function.sum", "dgl.function.copy_src", "dgl.function.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "graph.out_degrees().float", "graph.in_degrees().float", "graph.in_degrees", "torch.matmul.dim", "feat_dst.dim", "graph.out_degrees", "graph.in_degrees"], "methods", ["None"], ["                ", "self", ".", "norms", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_hidden", ")", ")", "\n", "\n", "", "", "self", ".", "activation", "=", "activation", "\n", "self", ".", "input_drop", "=", "nn", ".", "Dropout", "(", "input_drop", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "", "def", "forward", "(", "self", ",", "h", ")", ":", "\n", "        ", "h", "=", "self", ".", "input_drop", "(", "h", ")", "\n", "\n", "h_last", "=", "None", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "h", "=", "self", ".", "linears", "[", "i", "]", "(", "h", ")", "\n", "\n", "if", "self", ".", "residual", "and", "0", "<", "i", "<", "self", ".", "n_layers", "-", "1", ":", "\n", "                ", "h", "+=", "h_last", "\n", "\n", "", "h_last", "=", "h", "\n", "\n", "if", "i", "<", "self", ".", "n_layers", "-", "1", ":", "\n", "                ", "h", "=", "self", ".", "norms", "[", "i", "]", "(", "h", ")", "\n", "h", "=", "self", ".", "activation", "(", "h", ",", "inplace", "=", "True", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "\n", "", "", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GraphConv.extra_repr": [[405, 414], ["summary.format"], "methods", ["None"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.__init__": [[417, 458], ["torch.Module.__init__", "dgl.utils.expand_as_pair", "isinstance", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.GATConv.reset_parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.GATConv.register_buffer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "models.GATConv.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.reset_parameters"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.reset_parameters": [[459, 471], ["torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "hasattr", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "isinstance", "isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["None"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.set_allow_zero_in_degree": [[472, 474], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GATConv.forward": [[475, 567], ["graph.local_scope", "isinstance", "graph.srcdata.update", "models.GATConv.leaky_relu", "graph.update_all", "models.GATConv.feat_drop", "models.GATConv.feat_drop", "models.GATConv.fc_src().view", "models.GATConv.fc_dst().view", "models.GATConv.feat_drop", "models.GATConv.fc().view", "graph.out_degrees().float().clamp", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "graph.dstdata.update", "graph.apply_edges", "graph.apply_edges", "graph.edata.pop", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "models.GATConv.attn_drop", "graph.edata.update", "models.GATConv.attn_drop", "dgl.function.u_mul_e", "dgl.function.sum", "graph.in_degrees().float().clamp", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "models.GATConv.res_fc().view", "models.GATConv._activation", "hasattr", "dgl.function.u_add_v", "dgl.function.copy_u", "graph.number_of_edges", "dgl.ops.edge_softmax", "dgl.ops.edge_softmax", "models.GATConv.fc_src", "models.GATConv.fc_dst", "models.GATConv.fc", "graph.out_degrees().float", "graph.number_of_edges", "graph.in_degrees().float", "models.GATConv.res_fc", "graph.in_degrees", "graph.number_of_dst_nodes", "graph.number_of_dst_nodes", "models.GATConv.dim", "models.GATConv.dim", "graph.out_degrees", "graph.in_degrees"], "methods", ["None"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GCN.__init__": [[570, 615], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.GCN.convs.append", "models.GraphConv", "models.GCN.linear.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "models.GCN.norms.append", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GCN.forward": [[616, 642], ["models.GCN.input_drop", "range", "models.GCN.activation", "models.GCN.dropout"], "methods", ["None"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__": [[645, 708], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "models.GAT.convs.append", "models.GATConv", "models.GAT.biases.append", "models.GAT.norms.append", "models.ElementWiseLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "models.GAT.biases.append", "models.ElementWiseLinear"], "methods", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.__init__"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.models.GAT.forward": [[709, 737], ["models.GAT.input_drop", "range", "models.GAT.mean", "models.GAT.flatten", "models.GAT.activation", "models.GAT.dropout"], "methods", ["None"], []], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.sum_w2": [[41, 46], ["model.parameters", "param.pow().sum().item", "param.pow().sum", "param.pow"], "function", ["None"], ["def", "sum_w2", "(", "model", ")", ":", "\n", "    ", "w2", "=", "0", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "w2", "+=", "param", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "return", "w2", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed": [[48, 57], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "dgl.random.seed"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed"], ["", "def", "seed", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "dgl", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.compute_acc": [[59, 61], ["len", "torch.argmax", "torch.argmax", "torch.argmax"], "function", ["None"], ["", "def", "compute_acc", "(", "pred", ",", "labels", ")", ":", "\n", "    ", "return", "(", "(", "torch", ".", "argmax", "(", "pred", ",", "dim", "=", "1", ")", "==", "labels", "[", ":", ",", "0", "]", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "len", "(", "pred", ")", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.load_data": [[63, 131], ["print", "ogb.nodeproppred.DglNodePropPredDataset", "dgl.data.CoauthorCSDataset.get_idx_split", "ogb.nodeproppred.Evaluator", "print", "dgl.data.CoraGraphDataset", "graph.ndata[].reshape", "map", "dgl.data.CiteseerGraphDataset", "ogb.nodeproppred.Evaluator.eval", "graph.ndata[].reshape", "graph.ndata[].reshape.max", "graph.number_of_nodes", "graph.number_of_edges", "dgl.data.PubmedGraphDataset", "torch.nonzero().squeeze_", "torch.nonzero().squeeze_", "torch.nonzero().squeeze_", "graph.ndata[].reshape", "len", "len", "len", "dgl.data.CoraFullDataset", "pred.argmax", "dgl.data.RedditDataset", "torch.nonzero", "torch.nonzero", "torch.nonzero", "dgl.data.AmazonCoBuyComputerDataset", "dgl.data.AmazonCoBuyPhotoDataset", "dgl.data.CoauthorCSDataset"], "function", ["None"], ["", "def", "load_data", "(", "dataset", ",", "split", ")", ":", "\n", "    ", "global", "n_node_feats", ",", "n_classes", "\n", "\n", "if", "dataset", "in", "[", "\"ogbn-arxiv\"", "]", ":", "\n", "        ", "data", "=", "DglNodePropPredDataset", "(", "name", "=", "dataset", ")", "\n", "", "elif", "dataset", "==", "\"cora\"", ":", "\n", "        ", "data", "=", "CoraGraphDataset", "(", ")", "\n", "", "elif", "dataset", "==", "\"citeseer\"", ":", "\n", "        ", "data", "=", "CiteseerGraphDataset", "(", ")", "\n", "", "elif", "dataset", "==", "\"pubmed\"", ":", "\n", "        ", "data", "=", "PubmedGraphDataset", "(", ")", "\n", "", "elif", "dataset", "==", "\"cora-full\"", ":", "\n", "        ", "data", "=", "CoraFullDataset", "(", ")", "\n", "", "elif", "dataset", "==", "\"reddit\"", ":", "\n", "        ", "data", "=", "RedditDataset", "(", ")", "\n", "", "elif", "dataset", "==", "\"amazon-co-computer\"", ":", "\n", "        ", "data", "=", "AmazonCoBuyComputerDataset", "(", ")", "\n", "", "elif", "dataset", "==", "\"amazon-co-photo\"", ":", "\n", "        ", "data", "=", "AmazonCoBuyPhotoDataset", "(", ")", "\n", "", "elif", "dataset", "==", "\"coauthor-cs\"", ":", "\n", "        ", "data", "=", "CoauthorCSDataset", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "if", "dataset", "in", "[", "\"ogbn-arxiv\"", "]", ":", "\n", "        ", "graph", ",", "labels", "=", "data", "[", "0", "]", "\n", "splitted_idx", "=", "data", ".", "get_idx_split", "(", ")", "\n", "train_idx", ",", "val_idx", ",", "test_idx", "=", "splitted_idx", "[", "\"train\"", "]", ",", "splitted_idx", "[", "\"valid\"", "]", ",", "splitted_idx", "[", "\"test\"", "]", "\n", "\n", "evaluator_", "=", "Evaluator", "(", "name", "=", "dataset", ")", "\n", "evaluator", "=", "lambda", "pred", ",", "labels", ":", "evaluator_", ".", "eval", "(", "\n", "{", "\"y_pred\"", ":", "pred", ".", "argmax", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "\"y_true\"", ":", "labels", "}", "\n", ")", "[", "\"acc\"", "]", "\n", "\n", "", "elif", "dataset", "in", "[", "\"cora\"", ",", "\"citeseer\"", ",", "\"pubmed\"", ",", "\"reddit\"", "]", ":", "\n", "        ", "graph", "=", "data", "[", "0", "]", "\n", "labels", "=", "graph", ".", "ndata", "[", "\"label\"", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "train_mask", ",", "val_mask", ",", "test_mask", "=", "graph", ".", "ndata", "[", "\"train_mask\"", "]", ",", "graph", ".", "ndata", "[", "\"val_mask\"", "]", ",", "graph", ".", "ndata", "[", "\"test_mask\"", "]", "\n", "train_idx", ",", "val_idx", ",", "test_idx", "=", "map", "(", "\n", "lambda", "mask", ":", "torch", ".", "nonzero", "(", "mask", ",", "as_tuple", "=", "False", ")", ".", "squeeze_", "(", ")", ",", "[", "train_mask", ",", "val_mask", ",", "test_mask", "]", "\n", ")", "\n", "\n", "evaluator", "=", "compute_acc", "\n", "", "elif", "dataset", "==", "\"cora-full\"", ":", "\n", "        ", "graph", "=", "data", "[", "0", "]", "\n", "labels", "=", "graph", ".", "ndata", "[", "\"label\"", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "elif", "dataset", "in", "[", "\"amazon-co-computer\"", ",", "\"amazon-co-photo\"", ",", "\"coauthor-cs\"", "]", ":", "\n", "        ", "graph", "=", "data", "[", "0", "]", "\n", "labels", "=", "graph", ".", "ndata", "[", "\"label\"", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "train_idx", ",", "val_idx", ",", "test_idx", "=", "None", ",", "None", ",", "None", "\n", "assert", "split", "==", "\"random\"", "\n", "# train_mask, val_mask, test_mask = graph.ndata[\"train_mask\"], graph.ndata[\"val_mask\"], graph.ndata[\"test_mask\"]", "\n", "# train_idx, val_idx, test_idx = map(", "\n", "#     lambda mask: torch.nonzero(mask, as_tuple=False).squeeze_(), [train_mask, val_mask, test_mask]", "\n", "# )", "\n", "\n", "evaluator", "=", "compute_acc", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "n_node_feats", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", ".", "shape", "[", "1", "]", "\n", "n_classes", "=", "(", "labels", ".", "max", "(", ")", "+", "1", ")", ".", "item", "(", ")", "\n", "\n", "print", "(", "f\"#Nodes: {graph.number_of_nodes()}, #Edges: {graph.number_of_edges()}, #Classes: {n_classes}\"", ")", "\n", "if", "split", "!=", "\"random\"", ":", "\n", "        ", "print", "(", "f\"#Train/Val/Test nodes: {len(train_idx)}/{len(val_idx)}/{len(test_idx)}\"", ")", "\n", "\n", "", "return", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.preprocess": [[133, 149], ["dgl.to_bidirected", "print", "run..remove_self_loop().add_self_loop", "print", "run..create_formats_", "run..remove_self_loop", "run..number_of_edges", "run..number_of_edges"], "function", ["None"], ["", "def", "preprocess", "(", "graph", ")", ":", "\n", "    ", "global", "n_node_feats", "\n", "\n", "# make bidirected", "\n", "feat", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", "\n", "graph", "=", "dgl", ".", "to_bidirected", "(", "graph", ")", "\n", "graph", ".", "ndata", "[", "\"feat\"", "]", "=", "feat", "\n", "\n", "# add self-loop", "\n", "print", "(", "f\"Total edges before adding self-loop {graph.number_of_edges()}\"", ")", "\n", "graph", "=", "graph", ".", "remove_self_loop", "(", ")", ".", "add_self_loop", "(", ")", "\n", "print", "(", "f\"Total edges after adding self-loop {graph.number_of_edges()}\"", ")", "\n", "\n", "graph", ".", "create_formats_", "(", ")", "\n", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.random_split": [[151, 163], ["graph.number_of_nodes", "torch.randperm", "torch.randperm", "torch.randperm", "print", "int", "int", "len", "len", "len"], "function", ["None"], ["", "def", "random_split", "(", "graph", ")", ":", "\n", "    ", "\"\"\"\n    6:2:2 for traing/val/test\n    \"\"\"", "\n", "n", "=", "graph", ".", "number_of_nodes", "(", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "n", ",", "device", "=", "device", ")", "\n", "val_offset", ",", "test_offset", "=", "int", "(", "n", "*", "0.6", ")", ",", "int", "(", "n", "*", "0.8", ")", "\n", "train_idx", ",", "val_idx", ",", "test_idx", "=", "perm", "[", ":", "val_offset", "]", ",", "perm", "[", "val_offset", ":", "test_offset", "]", ",", "perm", "[", "test_offset", ":", "]", "\n", "\n", "print", "(", "f\"#Train/Val/Test nodes: {len(train_idx)}/{len(val_idx)}/{len(test_idx)}\"", ")", "\n", "\n", "return", "train_idx", ",", "val_idx", ",", "test_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.build_model": [[165, 227], ["models.MLP", "models.GCN", "models.GAT"], "function", ["None"], ["", "def", "build_model", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "labels", ":", "\n", "        ", "n_input_feats", "=", "n_node_feats", "+", "n_classes", "\n", "", "else", ":", "\n", "        ", "n_input_feats", "=", "n_node_feats", "\n", "", "if", "args", ".", "activation", "==", "\"relu\"", ":", "\n", "        ", "activation", "=", "F", ".", "relu", "\n", "", "elif", "args", ".", "activation", "==", "\"elu\"", ":", "\n", "        ", "activation", "=", "F", ".", "elu", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "if", "args", ".", "model", "==", "\"mlp\"", ":", "\n", "        ", "model", "=", "MLP", "(", "\n", "in_feats", "=", "n_input_feats", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden", ",", "\n", "n_classes", "=", "n_classes", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "activation", "=", "activation", ",", "\n", "norm", "=", "args", ".", "norm", ",", "\n", "input_drop", "=", "args", ".", "input_drop", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "residual", "=", "args", ".", "residual", ",", "\n", ")", "\n", "", "elif", "args", ".", "model", "==", "\"gcn\"", ":", "\n", "        ", "model", "=", "GCN", "(", "\n", "in_feats", "=", "n_input_feats", ",", "\n", "n_classes", "=", "n_classes", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "activation", "=", "activation", ",", "\n", "norm", "=", "args", ".", "norm", ",", "\n", "norm_adj", "=", "args", ".", "norm_adj", ",", "\n", "input_drop", "=", "args", ".", "input_drop", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "use_linear", "=", "args", ".", "linear", ",", "\n", "residual", "=", "args", ".", "residual", ",", "\n", ")", "\n", "", "elif", "args", ".", "model", "==", "\"gat\"", ":", "\n", "        ", "model", "=", "GAT", "(", "\n", "dim_node", "=", "n_input_feats", ",", "\n", "dim_edge", "=", "n_edge_feats", ",", "\n", "dim_output", "=", "n_classes", ",", "\n", "n_hidden", "=", "args", ".", "n_hidden", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "activation", "=", "activation", ",", "\n", "norm", "=", "args", ".", "norm", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "input_drop", "=", "args", ".", "input_drop", ",", "\n", "attn_drop", "=", "args", ".", "attn_drop", ",", "\n", "edge_drop", "=", "args", ".", "edge_drop", ",", "\n", "non_interactive_attn", "=", "args", ".", "non_interactive_attn", ",", "\n", "# negative_slope=args.negative_slope,", "\n", "use_symmetric_norm", "=", "args", ".", "norm_adj", "==", "\"symm\"", ",", "\n", "linear", "=", "args", ".", "linear", ",", "\n", "residual", "=", "args", ".", "residual", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.compute_loss": [[229, 238], ["torch.cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "math.log", "torch.exp", "torch.exp", "torch.exp"], "function", ["None"], ["", "def", "compute_loss", "(", "args", ",", "x", ",", "labels", ")", ":", "\n", "    ", "y", "=", "F", ".", "cross_entropy", "(", "x", ",", "labels", "[", ":", ",", "0", "]", ",", "reduction", "=", "\"none\"", ")", "\n", "if", "args", ".", "loss", "==", "\"loge\"", ":", "\n", "        ", "y", "=", "torch", ".", "log", "(", "epsilon", "+", "y", ")", "-", "math", ".", "log", "(", "epsilon", ")", "\n", "", "elif", "args", ".", "loss", "==", "\"savage\"", ":", "\n", "        ", "y", "=", "(", "1", "-", "torch", ".", "exp", "(", "-", "y", ")", ")", "**", "2", "\n", "", "else", ":", "\n", "        ", "assert", "args", ".", "loss", "==", "\"logit\"", "\n", "", "return", "torch", ".", "mean", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.add_labels": [[240, 244], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "add_labels", "(", "feat", ",", "labels", ",", "idx", ")", ":", "\n", "    ", "onehot", "=", "torch", ".", "zeros", "(", "[", "feat", ".", "shape", "[", "0", "]", ",", "n_classes", "]", ",", "device", "=", "device", ")", "\n", "onehot", "[", "idx", ",", "labels", "[", "idx", ",", "0", "]", "]", "=", "1", "\n", "return", "torch", ".", "cat", "(", "[", "feat", ",", "onehot", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.adjust_learning_rate": [[246, 250], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "lr", ",", "epoch", ")", ":", "\n", "    ", "if", "epoch", "<=", "50", ":", "\n", "        ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr", "*", "epoch", "/", "50", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train": [[252, 288], ["model.train", "run.compute_loss", "optimizer.zero_grad", "compute_loss.backward", "optimizer.step", "run.add_labels", "model", "model", "torch.cat", "torch.cat", "torch.cat", "range", "evaluator", "compute_loss.item", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "model.detach", "torch.softmax", "model"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.compute_loss", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.add_labels"], ["", "", "", "def", "train", "(", "args", ",", "model", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "optimizer", ",", "evaluator", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "feat", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", "\n", "\n", "if", "args", ".", "labels", ":", "\n", "        ", "mask", "=", "torch", ".", "rand", "(", "train_idx", ".", "shape", ")", "<", "args", ".", "mask_rate", "\n", "\n", "train_labels_idx", "=", "train_idx", "[", "mask", "]", "\n", "train_pred_idx", "=", "train_idx", "[", "~", "mask", "]", "\n", "\n", "feat", "=", "add_labels", "(", "feat", ",", "labels", ",", "train_labels_idx", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "torch", ".", "rand", "(", "train_idx", ".", "shape", ")", "<", "args", ".", "mask_rate", "\n", "\n", "train_pred_idx", "=", "train_idx", "[", "mask", "]", "\n", "\n", "", "if", "args", ".", "model", "==", "\"mlp\"", ":", "\n", "        ", "pred", "=", "model", "(", "feat", ")", "\n", "", "else", ":", "\n", "        ", "pred", "=", "model", "(", "graph", ",", "feat", ")", "\n", "\n", "", "if", "args", ".", "n_label_iters", ">", "0", ":", "\n", "        ", "unlabel_idx", "=", "torch", ".", "cat", "(", "[", "train_pred_idx", ",", "val_idx", ",", "test_idx", "]", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_label_iters", ")", ":", "\n", "            ", "pred", "=", "pred", ".", "detach", "(", ")", "\n", "feat", "[", "unlabel_idx", ",", "-", "n_classes", ":", "]", "=", "F", ".", "softmax", "(", "pred", "[", "unlabel_idx", "]", ",", "dim", "=", "-", "1", ")", "\n", "pred", "=", "model", "(", "graph", ",", "feat", ")", "\n", "\n", "", "", "loss", "=", "compute_loss", "(", "args", ",", "pred", "[", "train_pred_idx", "]", ",", "labels", "[", "train_pred_idx", "]", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "evaluator", "(", "pred", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "loss", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.evaluate": [[290, 322], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "run.compute_loss", "run.compute_loss", "run.compute_loss", "run.add_labels", "model", "model", "torch.cat", "torch.cat", "torch.cat", "range", "evaluator", "evaluator", "evaluator", "torch.softmax", "model"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.compute_loss", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.compute_loss", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.compute_loss", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.add_labels"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "args", ",", "model", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "feat", "=", "graph", ".", "ndata", "[", "\"feat\"", "]", "\n", "\n", "if", "args", ".", "labels", ":", "\n", "        ", "feat", "=", "add_labels", "(", "feat", ",", "labels", ",", "train_idx", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "\"mlp\"", ":", "\n", "        ", "pred", "=", "model", "(", "feat", ")", "\n", "", "else", ":", "\n", "        ", "pred", "=", "model", "(", "graph", ",", "feat", ")", "\n", "\n", "", "if", "args", ".", "n_label_iters", ">", "0", ":", "\n", "        ", "unlabel_idx", "=", "torch", ".", "cat", "(", "[", "val_idx", ",", "test_idx", "]", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "n_label_iters", ")", ":", "\n", "            ", "feat", "[", "unlabel_idx", ",", "-", "n_classes", ":", "]", "=", "F", ".", "softmax", "(", "pred", "[", "unlabel_idx", "]", ",", "dim", "=", "-", "1", ")", "\n", "pred", "=", "model", "(", "graph", ",", "feat", ")", "\n", "\n", "", "", "train_loss", "=", "compute_loss", "(", "args", ",", "pred", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", "\n", "val_loss", "=", "compute_loss", "(", "args", ",", "pred", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", "\n", "test_loss", "=", "compute_loss", "(", "args", ",", "pred", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", "\n", "\n", "return", "(", "\n", "evaluator", "(", "pred", "[", "train_idx", "]", ",", "labels", "[", "train_idx", "]", ")", ",", "\n", "evaluator", "(", "pred", "[", "val_idx", "]", ",", "labels", "[", "val_idx", "]", ")", ",", "\n", "evaluator", "(", "pred", "[", "test_idx", "]", ",", "labels", "[", "test_idx", "]", ")", ",", "\n", "train_loss", ",", "\n", "val_loss", ",", "\n", "test_loss", ",", "\n", "pred", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.run": [[325, 434], ["build_model().to", "range", "print", "print", "print", "run.random_split", "torch.Adam", "float", "time.time", "run.train", "run.evaluate", "time.time", "zip", "matplotlib.pyplot.figure", "plt.figure.gca", "fig.gca.set_xticks", "fig.gca.set_yticks", "fig.gca.tick_params", "zip", "fig.gca.xaxis.set_major_locator", "fig.gca.xaxis.set_minor_locator", "fig.gca.yaxis.set_major_locator", "fig.gca.yaxis.set_minor_locator", "matplotlib.pyplot.grid", "matplotlib.pyplot.grid", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.savefig", "matplotlib.pyplot.figure", "plt.figure.gca", "fig.gca.set_xticks", "fig.gca.tick_params", "zip", "fig.gca.xaxis.set_major_locator", "fig.gca.xaxis.set_minor_locator", "fig.gca.yaxis.set_major_locator", "fig.gca.yaxis.set_minor_locator", "matplotlib.pyplot.grid", "matplotlib.pyplot.grid", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.savefig", "os.makedirs", "torch.save", "torch.save", "torch.save", "run.build_model", "build_model().to.parameters", "torch.RMSprop", "run.adjust_learning_rate", "print", "l.append", "numpy.arange", "numpy.linspace", "matplotlib.pyplot.plot", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "numpy.arange", "matplotlib.pyplot.plot", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "matplotlib.ticker.MultipleLocator", "matplotlib.ticker.AutoMinorLocator", "torch.softmax", "build_model().to.parameters", "torch.SGD", "range", "range", "build_model().to.parameters"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.random_split", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.train", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.evaluate", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.build_model", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.adjust_learning_rate"], ["", "def", "run", "(", "args", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "n_running", ")", ":", "\n", "    ", "if", "args", ".", "split", "==", "\"random\"", ":", "\n", "        ", "train_idx", ",", "val_idx", ",", "test_idx", "=", "random_split", "(", "graph", ")", "\n", "\n", "# define model and optimizer", "\n", "", "model", "=", "build_model", "(", "args", ")", ".", "to", "(", "device", ")", "\n", "if", "args", ".", "optimizer", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "\"rmsprop\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "RMSprop", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", "\n", "", "elif", "args", ".", "optimizer", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ",", "momentum", "=", "0.8", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "\n", "# training loop", "\n", "", "total_time", "=", "0", "\n", "best_val_acc", ",", "final_test_acc", ",", "best_val_loss", "=", "0", ",", "0", ",", "float", "(", "\"inf\"", ")", "\n", "final_pred", "=", "None", "\n", "\n", "accs", ",", "train_accs", ",", "val_accs", ",", "test_accs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "optimizer", "==", "\"rmsprop\"", ":", "\n", "            ", "adjust_learning_rate", "(", "optimizer", ",", "args", ".", "lr", ",", "epoch", ")", "\n", "\n", "", "acc", ",", "loss", "=", "train", "(", "args", ",", "model", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "optimizer", ",", "evaluator", ")", "\n", "\n", "train_acc", ",", "val_acc", ",", "test_acc", ",", "train_loss", ",", "val_loss", ",", "test_loss", ",", "pred", "=", "evaluate", "(", "\n", "args", ",", "model", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "epoch", "\n", ")", "\n", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "total_time", "+=", "toc", "-", "tic", "\n", "\n", "if", "(", "\n", "args", ".", "dataset", "!=", "\"ogbn-arxiv\"", "\n", "and", "val_acc", ">", "best_val_acc", "\n", "or", "args", ".", "dataset", "==", "\"ogbn-arxiv\"", "\n", "and", "val_loss", "<", "best_val_loss", "\n", ")", ":", "\n", "            ", "best_val_loss", "=", "val_loss", "\n", "best_val_acc", "=", "val_acc", "\n", "final_test_acc", "=", "test_acc", "\n", "final_pred", "=", "pred", "\n", "\n", "", "if", "epoch", "==", "args", ".", "epochs", "or", "epoch", "%", "args", ".", "log_every", "==", "0", ":", "\n", "            ", "print", "(", "\n", "f\"Run: {n_running}/{args.runs}, Epoch: {epoch}/{args.epochs}, Average epoch time: {total_time / epoch:.4f}s\\n\"", "\n", "f\"Loss: {loss:.4f}, Acc: {acc:.4f}\\n\"", "\n", "f\"Train/Val/Test loss: {train_loss:.4f}/{val_loss:.4f}/{test_loss:.4f}\\n\"", "\n", "f\"Train/Val/Test/Best val/Final test acc: {train_acc:.4f}/{val_acc:.4f}/{test_acc:.4f}/{best_val_acc:.4f}/{final_test_acc:.4f}\"", "\n", ")", "\n", "\n", "", "for", "l", ",", "e", "in", "zip", "(", "\n", "[", "accs", ",", "train_accs", ",", "val_accs", ",", "test_accs", ",", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "]", ",", "\n", "[", "acc", ",", "train_acc", ",", "val_acc", ",", "test_acc", ",", "loss", ",", "train_loss", ",", "val_loss", ",", "test_loss", "]", ",", "\n", ")", ":", "\n", "            ", "l", ".", "append", "(", "e", ")", "\n", "\n", "", "", "print", "(", "\"*\"", "*", "50", ")", "\n", "print", "(", "f\"Best val acc: {best_val_acc}, Final test acc: {final_test_acc}\"", ")", "\n", "print", "(", "\"*\"", "*", "50", ")", "\n", "\n", "# plot learning curves", "\n", "if", "args", ".", "plot", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "24", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "epochs", ",", "100", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "linspace", "(", "0", ",", "1.0", ",", "101", ")", ")", "\n", "ax", ".", "tick_params", "(", "labeltop", "=", "True", ",", "labelright", "=", "True", ")", "\n", "for", "y", ",", "label", "in", "zip", "(", "[", "accs", ",", "train_accs", ",", "val_accs", ",", "test_accs", "]", ",", "[", "\"acc\"", ",", "\"train acc\"", ",", "\"val acc\"", ",", "\"test acc\"", "]", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "args", ".", "epochs", ")", ",", "y", ",", "label", "=", "label", ",", "linewidth", "=", "1", ")", "\n", "", "ax", ".", "xaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "100", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "0.01", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "2", ")", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"major\"", ",", "color", "=", "\"red\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"{args.model}_acc_{n_running}.png\"", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "24", ",", "24", ")", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "args", ".", "epochs", ",", "100", ")", ")", "\n", "ax", ".", "tick_params", "(", "labeltop", "=", "True", ",", "labelright", "=", "True", ")", "\n", "for", "y", ",", "label", "in", "zip", "(", "\n", "[", "losses", ",", "train_losses", ",", "val_losses", ",", "test_losses", "]", ",", "[", "\"loss\"", ",", "\"train loss\"", ",", "\"val loss\"", ",", "\"test loss\"", "]", "\n", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "args", ".", "epochs", ")", ",", "y", ",", "label", "=", "label", ",", "linewidth", "=", "1", ")", "\n", "", "ax", ".", "xaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "100", ")", ")", "\n", "ax", ".", "xaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_major_locator", "(", "MultipleLocator", "(", "0.1", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_minor_locator", "(", "AutoMinorLocator", "(", "5", ")", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"major\"", ",", "color", "=", "\"red\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "grid", "(", "which", "=", "\"minor\"", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dotted\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"{args.model}_loss_{n_running}.png\"", ")", "\n", "\n", "", "if", "args", ".", "save_pred", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"./output\"", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "F", ".", "softmax", "(", "final_pred", ",", "dim", "=", "1", ")", ",", "f\"./output/{n_running}.pt\"", ")", "\n", "\n", "", "return", "best_val_acc", ",", "final_test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.count_parameters": [[436, 439], ["run.build_model", "sum", "p.numel", "build_model.parameters"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.build_model"], ["", "def", "count_parameters", "(", "args", ")", ":", "\n", "    ", "model", "=", "build_model", "(", "args", ")", "\n", "return", "sum", "(", "[", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.main": [[441, 562], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run.load_data", "run.preprocess", "map", "range", "print", "print", "print", "ValueError", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "map", "run.seed", "run.run", "val_accs.append", "test_accs.append", "print", "print", "print", "print", "print", "ValueError", "ValueError", "ValueError", "x.to", "x.to", "run.count_parameters", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "function", ["home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.load_data", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.preprocess", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.seed", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.run", "home.repos.pwc.inspect_result.espylapiza_Bag-of-Tricks-for-Node-Classification-with-Graph-Neural-Networks.no-sampling.run.count_parameters"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "device", "\n", "\n", "argparser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "\"Implementation of MLP, GCN and GAT with Bag of Tricks (arXiv:2103.13355)\"", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ",", "\n", ")", "\n", "# basic settings", "\n", "argparser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"CPU mode. This option overrides --gpu.\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"GPU device ID\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"seed\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--runs\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "\"running times\"", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "\"--dataset\"", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "\n", "\"ogbn-arxiv\"", ",", "\n", "\"cora\"", ",", "\n", "\"citeseer\"", ",", "\n", "\"pubmed\"", ",", "\n", "\"cora-full\"", ",", "\n", "\"reddit\"", ",", "\n", "\"amazon-co-computer\"", ",", "\n", "\"amazon-co-photo\"", ",", "\n", "\"coauthor-cs\"", ",", "\n", "]", ",", "\n", "default", "=", "\"ogbn-arxiv\"", ",", "\n", "help", "=", "\"dataset\"", ",", "\n", ")", "\n", "argparser", ".", "add_argument", "(", "\"--split\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"std\"", ",", "\"random\"", "]", ",", "default", "=", "\"std\"", ",", "help", "=", "\"split\"", ")", "\n", "# training", "\n", "argparser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "2000", ",", "help", "=", "\"number of epochs\"", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "\"--loss\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"logit\"", ",", "\"loge\"", ",", "\"savage\"", "]", ",", "default", "=", "\"logit\"", ",", "help", "=", "\"loss function\"", "\n", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "\"--optimizer\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"adam\"", ",", "\"rmsprop\"", ",", "\"sgd\"", "]", ",", "default", "=", "\"adam\"", ",", "help", "=", "\"optimizer\"", "\n", ")", "\n", "argparser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "0.002", ",", "help", "=", "\"learning rate\"", ")", "\n", "# model", "\n", "argparser", ".", "add_argument", "(", "\"--labels\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use labels in the training set as input features\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-label-iters\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of label iterations\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--mask-rate\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "\"mask rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"mlp\"", ",", "\"gcn\"", ",", "\"gat\"", "]", ",", "default", "=", "\"gat\"", ",", "help", "=", "\"model\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--residual\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"residual\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--linear\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use linear layer\"", ")", "\n", "argparser", ".", "add_argument", "(", "\n", "\"--norm-adj\"", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"symm\"", ",", "\"rw\"", ",", "\"default\"", "]", ",", "\n", "default", "=", "\"default\"", ",", "\n", "help", "=", "\"symmetric normalized (symm) or randon walk normalized (rw) adjacency matrix; default for GCN: symm, default for GAT: rw\"", ",", "\n", ")", "\n", "argparser", ".", "add_argument", "(", "\"--non-interactive-attn\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"non-interactive attention\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--norm\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"none\"", ",", "\"batch\"", "]", ",", "default", "=", "\"batch\"", ",", "help", "=", "\"norm\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--activation\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"relu\"", ",", "\"elu\"", "]", ",", "default", "=", "\"relu\"", ",", "help", "=", "\"activation\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-prop\"", ",", "type", "=", "int", ",", "default", "=", "7", ",", "help", "=", "\"number of props\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-layers\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"number of layers\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-heads\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "\"number of heads\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--n-hidden\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "\"number of hidden units\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--dropout\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "\"dropout rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--input-drop\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"input drop rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--attn-drop\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"attention drop rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--edge-drop\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "\"edge drop rate\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--wd\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "\"weight decay\"", ")", "\n", "# output", "\n", "argparser", ".", "add_argument", "(", "\"--log-every\"", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "\"log every LOG_EVERY epochs\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--plot\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"plot learning curves\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--save-pred\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"save final predictions\"", ")", "\n", "argparser", ".", "add_argument", "(", "\"--tune\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"tune\"", ")", "\n", "args", "=", "argparser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "args", ".", "labels", "and", "args", ".", "n_label_iters", ">", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"'--labels' must be enabled when n_label_iters > 0\"", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "\"gcn\"", ":", "\n", "        ", "if", "args", ".", "non_interactive_attn", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'no_attn_dst' is not supported for GCN\"", ")", "\n", "", "if", "args", ".", "attn_drop", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'attn_drop' is not supported for GCN\"", ")", "\n", "", "if", "args", ".", "edge_drop", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'edge_drop' is not supported for GCN\"", ")", "\n", "\n", "", "", "if", "args", ".", "cpu", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "f\"cuda:{args.gpu}\"", ")", "\n", "\n", "", "if", "args", ".", "norm_adj", "==", "\"default\"", ":", "\n", "        ", "if", "args", ".", "model", "==", "\"gcn\"", ":", "\n", "            ", "args", ".", "norm_adj", "=", "\"symm\"", "\n", "", "elif", "args", ".", "model", "==", "\"gat\"", ":", "\n", "            ", "args", ".", "norm_adj", "=", "\"rw\"", "\n", "\n", "# load data & preprocess", "\n", "", "", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", "=", "load_data", "(", "args", ".", "dataset", ",", "args", ".", "split", ")", "\n", "graph", "=", "preprocess", "(", "graph", ")", "\n", "\n", "graph", ",", "labels", "=", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "device", ")", ",", "(", "graph", ",", "labels", ")", ")", "\n", "if", "args", ".", "split", "!=", "\"random\"", ":", "\n", "        ", "train_idx", ",", "val_idx", ",", "test_idx", "=", "map", "(", "lambda", "x", ":", "x", ".", "to", "(", "device", ")", ",", "(", "train_idx", ",", "val_idx", ",", "test_idx", ")", ")", "\n", "\n", "# run", "\n", "", "val_accs", ",", "test_accs", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "runs", ")", ":", "\n", "        ", "seed", "(", "args", ".", "seed", "+", "i", ")", "\n", "val_acc", ",", "test_acc", "=", "run", "(", "args", ",", "graph", ",", "labels", ",", "train_idx", ",", "val_idx", ",", "test_idx", ",", "evaluator", ",", "i", "+", "1", ")", "\n", "val_accs", ".", "append", "(", "val_acc", ")", "\n", "test_accs", ".", "append", "(", "test_acc", ")", "\n", "\n", "# print results", "\n", "", "print", "(", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "print", "(", "args", ")", "\n", "if", "args", ".", "runs", ">", "0", ":", "\n", "        ", "print", "(", "f\"Runned {args.runs} times\"", ")", "\n", "print", "(", "\"Val Accs:\"", ",", "val_accs", ")", "\n", "print", "(", "\"Test Accs:\"", ",", "test_accs", ")", "\n", "print", "(", "f\"Average val accuracy: {np.mean(val_accs)} \u00b1 {np.std(val_accs)}\"", ")", "\n", "print", "(", "f\"Average test accuracy: {np.mean(test_accs)} \u00b1 {np.std(test_accs)}\"", ")", "\n", "", "print", "(", "f\"#Params: {count_parameters(args)}\"", ")", "\n", "\n"]]}