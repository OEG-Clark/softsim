{"home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset.__init__": [[447, 452], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ",", "subdir", ")", ":", "\n", "# type: (object, object) -> object", "\n", "        ", "self", ".", "patient_data", "=", "{", "}", "\n", "self", ".", "directory", "=", "directory", "\n", "self", ".", "name", "=", "subdir", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset._filename": [[453, 455], ["os.path.join"], "methods", ["None"], ["", "def", "_filename", "(", "self", ",", "file", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "self", ".", "name", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset.load_nii": [[456, 476], ["nibabel.load", "acdc_data_preparation.Dataset._filename", "nibabel.load.get_data"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset._filename"], ["", "def", "load_nii", "(", "self", ",", "img_path", ")", ":", "\n", "        ", "\"\"\"\n        Function to load a 'nii' or 'nii.gz' file, The function returns\n        everyting needed to save another 'nii' or 'nii.gz'\n        in the same dimensional space, i.e. the affine matrix and the header\n\n        Parameters\n        ----------\n\n        img_path: string\n        String with the path of the 'nii' or 'nii.gz' image file name.\n\n        Returns\n        -------\n        Three element, the first is a numpy array of the image values,\n        the second is the affine transformation of the image, and the\n        last one is the header of the image.\n        \"\"\"", "\n", "nimg", "=", "nib", ".", "load", "(", "self", ".", "_filename", "(", "img_path", ")", ")", "\n", "return", "nimg", ".", "get_data", "(", ")", ",", "nimg", ".", "affine", ",", "nimg", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset.read_patient_info_data": [[477, 487], ["print", "acdc_data_preparation.Dataset._filename", "open", "acdc_data_preparation.Dataset._filename", "line.rstrip().split", "line.rstrip"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset._filename", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset._filename"], ["", "def", "read_patient_info_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Reads patient data in the cfg file from patient folder \n        using Info.cfg\n        \"\"\"", "\n", "print", "(", "self", ".", "_filename", "(", "'Info.cfg'", ")", ")", "\n", "with", "open", "(", "self", ".", "_filename", "(", "'Info.cfg'", ")", ")", "as", "f_in", ":", "\n", "            ", "for", "line", "in", "f_in", ":", "\n", "              ", "l", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\": \"", ")", "\n", "self", ".", "patient_data", "[", "l", "[", "0", "]", "]", "=", "l", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset.read_patient_data": [[488, 561], ["acdc_data_preparation.Dataset.read_patient_info_data", "re.match", "int", "int", "acdc_data_preparation.Dataset.load_nii", "int", "acdc_data_preparation.Dataset.load_nii", "re.match.group", "acdc_data_preparation.Dataset.load_nii", "acdc_data_preparation.Dataset.load_nii", "acdc_data_preparation.Dataset.load_nii", "acdc_data_preparation.heart_metrics", "acdc_data_preparation.heart_metrics", "acdc_data_preparation.ejection_fraction", "acdc_data_preparation.ejection_fraction", "acdc_data_preparation.Dataset.load_nii", "acdc_data_preparation.Dataset.load_nii", "acdc_data_preparation.heart_metrics", "acdc_data_preparation.heart_metrics", "acdc_data_preparation.ejection_fraction", "acdc_data_preparation.ejection_fraction", "acdc_data_preparation.Dataset.load_nii", "acdc_data_preparation.Dataset.load_nii", "acdc_data_preparation.extract_roi_stddev", "hdr.get_zooms", "hdr.get_zooms", "hdr.get_zooms", "hdr.get_zooms", "hdr.get_zooms"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset.read_patient_info_data", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.heart_metrics", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.heart_metrics", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.ejection_fraction", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.ejection_fraction", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.heart_metrics", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.heart_metrics", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.ejection_fraction", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.ejection_fraction", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.extract_roi_stddev"], ["", "", "", "def", "read_patient_data", "(", "self", ",", "mode", "=", "'train'", ",", "roi_detect", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Reads patient data in the cfg file and returns a dictionary and\n        extract End diastole and End Systole image from patient folder\n        using Info.cfg\n        \"\"\"", "\n", "self", ".", "read_patient_info_data", "(", ")", "\n", "# Read patient Number", "\n", "m", "=", "re", ".", "match", "(", "\"patient(\\d{3})\"", ",", "self", ".", "name", ")", "\n", "patient_No", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "# Read Diastole frame Number", "\n", "ED_frame_No", "=", "int", "(", "self", ".", "patient_data", "[", "'ED'", "]", ")", "\n", "ed_img", "=", "\"patient%03d_frame%02d.nii.gz\"", "%", "(", "patient_No", ",", "ED_frame_No", ")", "\n", "ed", ",", "affine", ",", "hdr", "=", "self", ".", "load_nii", "(", "ed_img", ")", "\n", "# Read Systole frame Number", "\n", "ES_frame_No", "=", "int", "(", "self", ".", "patient_data", "[", "'ES'", "]", ")", "\n", "es_img", "=", "\"patient%03d_frame%02d.nii.gz\"", "%", "(", "patient_No", ",", "ES_frame_No", ")", "\n", "es", ",", "_", ",", "_", "=", "self", ".", "load_nii", "(", "es_img", ")", "\n", "# Save Images:", "\n", "self", ".", "patient_data", "[", "'ED_VOL'", "]", "=", "ed", "\n", "self", ".", "patient_data", "[", "'ES_VOL'", "]", "=", "es", "\n", "\n", "# Header Info for saving    ", "\n", "header_info", "=", "{", "'affine'", ":", "affine", ",", "'hdr'", ":", "hdr", "}", "\n", "self", ".", "patient_data", "[", "'header'", "]", "=", "header_info", "\n", "if", "mode", "==", "'reader'", ":", "\n", "# Read a particular volume number in 4D image", "\n", "            ", "img_4d_name", "=", "\"patient%03d_4d.nii.gz\"", "%", "patient_No", "\n", "# Load data", "\n", "img_4D", ",", "_", ",", "hdr", "=", "self", ".", "load_nii", "(", "img_4d_name", ")", "\n", "self", ".", "patient_data", "[", "'4D'", "]", "=", "img_4D", "\n", "\n", "ed_gt", ",", "_", ",", "_", "=", "self", ".", "load_nii", "(", "\"patient%03d_frame%02d_gt.nii.gz\"", "%", "(", "patient_No", ",", "ED_frame_No", ")", ")", "\n", "es_gt", ",", "_", ",", "_", "=", "self", ".", "load_nii", "(", "\"patient%03d_frame%02d_gt.nii.gz\"", "%", "(", "patient_No", ",", "ES_frame_No", ")", ")", "\n", "ed_lv", ",", "ed_rv", ",", "ed_myo", "=", "heart_metrics", "(", "ed_gt", ",", "hdr", ".", "get_zooms", "(", ")", ")", "\n", "es_lv", ",", "es_rv", ",", "es_myo", "=", "heart_metrics", "(", "es_gt", ",", "hdr", ".", "get_zooms", "(", ")", ")", "\n", "ef_lv", "=", "ejection_fraction", "(", "ed_lv", ",", "es_lv", ")", "\n", "ef_rv", "=", "ejection_fraction", "(", "ed_rv", ",", "es_rv", ")", "\n", "heart_param", "=", "{", "'EDV_LV'", ":", "ed_lv", ",", "'EDV_RV'", ":", "ed_rv", ",", "'ESV_LV'", ":", "es_lv", ",", "'ESV_RV'", ":", "es_rv", ",", "\n", "'ED_MYO'", ":", "ed_myo", ",", "'ES_MYO'", ":", "es_myo", ",", "'EF_LV'", ":", "ef_lv", ",", "'EF_RV'", ":", "ef_rv", "}", "\n", "self", ".", "patient_data", "[", "'HP'", "]", "=", "heart_param", "\n", "self", ".", "patient_data", "[", "'ED_GT'", "]", "=", "ed_gt", "\n", "self", ".", "patient_data", "[", "'ES_GT'", "]", "=", "es_gt", "\n", "return", "\n", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "            ", "ed_gt", ",", "_", ",", "_", "=", "self", ".", "load_nii", "(", "\"patient%03d_frame%02d_gt.nii.gz\"", "%", "(", "patient_No", ",", "ED_frame_No", ")", ")", "\n", "es_gt", ",", "_", ",", "_", "=", "self", ".", "load_nii", "(", "\"patient%03d_frame%02d_gt.nii.gz\"", "%", "(", "patient_No", ",", "ES_frame_No", ")", ")", "\n", "ed_lv", ",", "ed_rv", ",", "ed_myo", "=", "heart_metrics", "(", "ed_gt", ",", "hdr", ".", "get_zooms", "(", ")", ")", "\n", "es_lv", ",", "es_rv", ",", "es_myo", "=", "heart_metrics", "(", "es_gt", ",", "hdr", ".", "get_zooms", "(", ")", ")", "\n", "ef_lv", "=", "ejection_fraction", "(", "ed_lv", ",", "es_lv", ")", "\n", "ef_rv", "=", "ejection_fraction", "(", "ed_rv", ",", "es_rv", ")", "\n", "heart_param", "=", "{", "'EDV_LV'", ":", "ed_lv", ",", "'EDV_RV'", ":", "ed_rv", ",", "'ESV_LV'", ":", "es_lv", ",", "'ESV_RV'", ":", "es_rv", ",", "\n", "'ED_MYO'", ":", "ed_myo", ",", "'ES_MYO'", ":", "es_myo", ",", "'EF_LV'", ":", "ef_lv", ",", "'EF_RV'", ":", "ef_rv", "}", "\n", "self", ".", "patient_data", "[", "'HP'", "]", "=", "heart_param", "\n", "self", ".", "patient_data", "[", "'ED_GT'", "]", "=", "ed_gt", "\n", "self", ".", "patient_data", "[", "'ES_GT'", "]", "=", "es_gt", "\n", "\n", "", "if", "mode", "==", "'tester'", ":", "\n", "# Read a particular volume number in 4D image", "\n", "            ", "img_4d_name", "=", "\"patient%03d_4d.nii.gz\"", "%", "patient_No", "\n", "# Load data", "\n", "img_4D", ",", "_", ",", "hdr", "=", "self", ".", "load_nii", "(", "img_4d_name", ")", "\n", "self", ".", "patient_data", "[", "'4D'", "]", "=", "img_4D", "\n", "\n", "", "if", "roi_detect", ":", "\n", "# Read a particular volume number in 4D image", "\n", "            ", "img_4d_name", "=", "\"patient%03d_4d.nii.gz\"", "%", "patient_No", "\n", "# Load data", "\n", "img_4D", ",", "_", ",", "hdr", "=", "self", ".", "load_nii", "(", "img_4d_name", ")", "\n", "c", ",", "r", "=", "extract_roi_stddev", "(", "img_4D", ",", "hdr", ".", "get_zooms", "(", ")", ")", "\n", "self", ".", "patient_data", "[", "'roi_center'", "]", ",", "self", ".", "patient_data", "[", "'roi_radii'", "]", "=", "c", ",", "r", "\n", "self", ".", "patient_data", "[", "'4D'", "]", "=", "img_4D", "\n", "#             print c, r", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.heart_metrics": [[25, 43], ["numpy.copy", "numpy.clip", "np.clip.sum", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy"], ["def", "heart_metrics", "(", "seg_3Dmap", ",", "voxel_size", ",", "classes", "=", "[", "3", ",", "1", ",", "2", "]", ")", ":", "\n", "    ", "\"\"\"\n    Compute the volumes of each classes\n    \"\"\"", "\n", "# Loop on each classes of the input images", "\n", "volumes", "=", "[", "]", "\n", "for", "c", "in", "classes", ":", "\n", "# Copy the gt image to not alterate the input", "\n", "        ", "seg_3Dmap_copy", "=", "np", ".", "copy", "(", "seg_3Dmap", ")", "\n", "seg_3Dmap_copy", "[", "seg_3Dmap_copy", "!=", "c", "]", "=", "0", "\n", "\n", "# Clip the value to compute the volumes", "\n", "seg_3Dmap_copy", "=", "np", ".", "clip", "(", "seg_3Dmap_copy", ",", "0", ",", "1", ")", "\n", "\n", "# Compute volume", "\n", "volume", "=", "seg_3Dmap_copy", ".", "sum", "(", ")", "*", "np", ".", "prod", "(", "voxel_size", ")", "/", "1000.", "\n", "volumes", "+=", "[", "volume", "]", "\n", "", "return", "volumes", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.ejection_fraction": [[44, 50], ["numpy.float", "numpy.float"], "function", ["None"], ["", "def", "ejection_fraction", "(", "ed_vol", ",", "es_vol", ")", ":", "\n", "    ", "\"\"\"\n    Calculate ejection fraction\n    \"\"\"", "\n", "stroke_vol", "=", "ed_vol", "-", "es_vol", "\n", "return", "(", "np", ".", "float", "(", "stroke_vol", ")", "/", "np", ".", "float", "(", "ed_vol", ")", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.myocardialmass": [[51, 56], ["None"], "function", ["None"], ["", "def", "myocardialmass", "(", "myocardvol", ")", ":", "\n", "    ", "\"\"\"\n    Specific gravity of heart muscle (1.05 g/ml)\n    \"\"\"", "\n", "return", "myocardvol", "*", "1.05", "\n", "", "def", "imshow", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.imshow": [[56, 82], ["kwargs.get", "kwargs.get", "matplotlib.show", "len", "ValueError", "len", "matplotlib.title", "matplotlib.imshow", "len", "matplotlib.figure", "range", "type", "type", "matplotlib.subplot", "matplotlib.title", "matplotlib.imshow"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.imshow", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.imshow"], ["", "def", "imshow", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Handy function to show multiple plots in on row, possibly with different cmaps and titles\n    Usage: \n    imshow(img1, title=\"myPlot\")\n    imshow(img1,img2, title=['title1','title2'])\n    imshow(img1,img2, cmap='hot')\n    imshow(img1,img2,cmap=['gray','Blues']) \"\"\"", "\n", "cmap", "=", "kwargs", ".", "get", "(", "'cmap'", ",", "'gray'", ")", "\n", "title", "=", "kwargs", ".", "get", "(", "'title'", ",", "''", ")", "\n", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"No images given to imshow\"", ")", "\n", "", "elif", "len", "(", "args", ")", "==", "1", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "imshow", "(", "args", "[", "0", "]", ",", "interpolation", "=", "'none'", ")", "\n", "", "else", ":", "\n", "        ", "n", "=", "len", "(", "args", ")", "\n", "if", "type", "(", "cmap", ")", "==", "str", ":", "\n", "            ", "cmap", "=", "[", "cmap", "]", "*", "n", "\n", "", "if", "type", "(", "title", ")", "==", "str", ":", "\n", "            ", "title", "=", "[", "title", "]", "*", "n", "\n", "", "plt", ".", "figure", "(", "figsize", "=", "(", "n", "*", "5", ",", "10", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "1", ",", "n", ",", "i", "+", "1", ")", "\n", "plt", ".", "title", "(", "title", "[", "i", "]", ")", "\n", "plt", ".", "imshow", "(", "args", "[", "i", "]", ",", "cmap", "[", "i", "]", ")", "\n", "", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.plot_roi": [[83, 118], ["print", "numpy.swapaxes", "numpy.zeros_like", "matplotlib.figure", "plt.figure.canvas.set_window_title", "plt.figure.gca().imshow", "matplotlib.animation.FuncAnimation", "animation.FuncAnimation.save", "matplotlib.show", "range", "numpy.swapaxes", "fig.gca().imshow.set_data", "fig.gca().imshow.set_data", "str", "plt.figure.gca"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.imshow"], ["", "def", "plot_roi", "(", "data4D", ",", "roi_center", ",", "roi_radii", ")", ":", "\n", "    ", "\"\"\"\n    Do the animation of full heart volume\n    \"\"\"", "\n", "x_roi_center", ",", "y_roi_center", "=", "roi_center", "[", "0", "]", ",", "roi_center", "[", "1", "]", "\n", "x_roi_radius", ",", "y_roi_radius", "=", "roi_radii", "[", "0", "]", ",", "roi_radii", "[", "1", "]", "\n", "print", "(", "'nslices'", ",", "data4D", ".", "shape", "[", "2", "]", ")", "\n", "\n", "zslices", "=", "data4D", ".", "shape", "[", "2", "]", "\n", "tframes", "=", "data4D", ".", "shape", "[", "3", "]", "\n", "\n", "slice_cnt", "=", "0", "\n", "for", "slice", "in", "[", "data4D", "[", ":", ",", ":", ",", "z", ",", ":", "]", "for", "z", "in", "range", "(", "zslices", ")", "]", ":", "\n", "      ", "outdata", "=", "np", ".", "swapaxes", "(", "np", ".", "swapaxes", "(", "slice", "[", ":", ",", ":", ",", ":", "]", ",", "0", ",", "2", ")", ",", "1", ",", "2", ")", "\n", "roi_mask", "=", "np", ".", "zeros_like", "(", "outdata", "[", "0", "]", ")", "\n", "roi_mask", "[", "x_roi_center", "-", "x_roi_radius", ":", "x_roi_center", "+", "x_roi_radius", ",", "\n", "y_roi_center", "-", "y_roi_radius", ":", "y_roi_center", "+", "y_roi_radius", "]", "=", "1", "\n", "\n", "outdata", "[", ":", ",", "roi_mask", ">", "0.5", "]", "=", "0.8", "*", "outdata", "[", ":", ",", "roi_mask", ">", "0.5", "]", "\n", "outdata", "[", ":", ",", "roi_mask", ">", "0.5", "]", "=", "0.8", "*", "outdata", "[", ":", ",", "roi_mask", ">", "0.5", "]", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "1", ")", "\n", "fig", ".", "canvas", ".", "set_window_title", "(", "'slice_No'", "+", "str", "(", "slice_cnt", ")", ")", "\n", "slice_cnt", "+=", "1", "\n", "def", "init_out", "(", ")", ":", "\n", "          ", "im", ".", "set_data", "(", "outdata", "[", "0", "]", ")", "\n", "\n", "", "def", "animate_out", "(", "i", ")", ":", "\n", "          ", "im", ".", "set_data", "(", "outdata", "[", "i", "]", ")", "\n", "return", "im", "\n", "\n", "", "im", "=", "fig", ".", "gca", "(", ")", ".", "imshow", "(", "outdata", "[", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "anim", "=", "animation", ".", "FuncAnimation", "(", "fig", ",", "animate_out", ",", "init_func", "=", "init_out", ",", "frames", "=", "tframes", ",", "interval", "=", "50", ")", "\n", "anim", ".", "save", "(", "'Cine_MRI_SAX_%d.mp4'", "%", "slice_cnt", ",", "fps", "=", "50", ",", "extra_args", "=", "[", "'-vcodec'", ",", "'libx264'", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.plot_4D": [[119, 143], ["print", "numpy.swapaxes", "matplotlib.figure", "plt.figure.canvas.set_window_title", "plt.figure.gca().imshow", "matplotlib.animation.FuncAnimation", "matplotlib.show", "range", "numpy.swapaxes", "fig.gca().imshow.set_data", "fig.gca().imshow.set_data", "str", "plt.figure.gca"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.imshow"], ["", "", "def", "plot_4D", "(", "data4D", ")", ":", "\n", "    ", "\"\"\"\n    Do the animation of full heart volume\n    \"\"\"", "\n", "print", "(", "'nslices'", ",", "data4D", ".", "shape", "[", "2", "]", ")", "\n", "zslices", "=", "data4D", ".", "shape", "[", "2", "]", "\n", "tframes", "=", "data4D", ".", "shape", "[", "3", "]", "\n", "\n", "slice_cnt", "=", "0", "\n", "for", "slice", "in", "[", "data4D", "[", ":", ",", ":", ",", "z", ",", ":", "]", "for", "z", "in", "range", "(", "zslices", ")", "]", ":", "\n", "      ", "outdata", "=", "np", ".", "swapaxes", "(", "np", ".", "swapaxes", "(", "slice", "[", ":", ",", ":", ",", ":", "]", ",", "0", ",", "2", ")", ",", "1", ",", "2", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "1", ")", "\n", "fig", ".", "canvas", ".", "set_window_title", "(", "'slice_No'", "+", "str", "(", "slice_cnt", ")", ")", "\n", "slice_cnt", "+=", "1", "\n", "def", "init_out", "(", ")", ":", "\n", "          ", "im", ".", "set_data", "(", "outdata", "[", "0", "]", ")", "\n", "\n", "", "def", "animate_out", "(", "i", ")", ":", "\n", "          ", "im", ".", "set_data", "(", "outdata", "[", "i", "]", ")", "\n", "return", "im", "\n", "\n", "", "im", "=", "fig", ".", "gca", "(", ")", ".", "imshow", "(", "outdata", "[", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "anim", "=", "animation", ".", "FuncAnimation", "(", "fig", ",", "animate_out", ",", "init_func", "=", "init_out", ",", "frames", "=", "tframes", ",", "interval", "=", "50", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.multilabel_split": [[145, 169], ["numpy.unique", "numpy.zeros", "xrange", "numpy.ones", "len", "numpy.where", "len"], "function", ["None"], ["", "", "def", "multilabel_split", "(", "image_tensor", ")", ":", "\n", "    ", "\"\"\"\n    image_tensor : Batch * H * W\n    Split multilabel images and return stack of images\n    Returns: Tensor of shape: Batch * H * W * n_class (4D tensor)\n    # TODO: Be careful: when using this code: labels need to be \n    defined, explictly before hand as this code does not handle\n    missing labels\n    So far, this function is okay as it considers full volume for\n    finding out unique labels\n    \"\"\"", "\n", "labels", "=", "np", ".", "unique", "(", "image_tensor", ")", "\n", "batch_size", "=", "image_tensor", ".", "shape", "[", "0", "]", "\n", "out_shape", "=", "image_tensor", ".", "shape", "+", "(", "len", "(", "labels", ")", ",", ")", "\n", "image_tensor_4D", "=", "np", ".", "zeros", "(", "out_shape", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "i", "in", "xrange", "(", "batch_size", ")", ":", "\n", "        ", "cnt", "=", "0", "\n", "shape", "=", "image_tensor", ".", "shape", "[", "1", ":", "3", "]", "+", "(", "len", "(", "labels", ")", ",", ")", "\n", "temp", "=", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "temp", "[", "...", ",", "cnt", "]", "=", "np", ".", "where", "(", "image_tensor", "[", "i", "]", "==", "label", ",", "temp", "[", "...", ",", "cnt", "]", ",", "0", ")", "\n", "cnt", "+=", "1", "\n", "", "image_tensor_4D", "[", "i", "]", "=", "temp", "\n", "", "return", "image_tensor_4D", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.save_data": [[170, 175], ["os.path.join", "print", "open", "pickle.dump"], "function", ["None"], ["", "def", "save_data", "(", "data", ",", "filename", ",", "out_path", ")", ":", "\n", "    ", "out_filename", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "filename", ")", "\n", "with", "open", "(", "out_filename", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "print", "(", "'saved to %s'", "%", "out_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.load_pkl": [[176, 180], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_pkl", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy": [[202, 214], ["shutil.copytree", "shutil.ignore_patterns", "shutil.copy", "print"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy"], ["def", "copy", "(", "src", ",", "dest", ")", ":", "\n", "  ", "\"\"\"\n  Copy function\n  \"\"\"", "\n", "try", ":", "\n", "      ", "shutil", ".", "copytree", "(", "src", ",", "dest", ",", "ignore", "=", "shutil", ".", "ignore_patterns", "(", ")", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "# If the error was caused because the source wasn't a directory", "\n", "      ", "if", "e", ".", "errno", "==", "errno", ".", "ENOTDIR", ":", "\n", "          ", "shutil", ".", "copy", "(", "src", ",", "dest", ")", "\n", "", "else", ":", "\n", "          ", "print", "(", "'Directory not copied. Error: %s'", "%", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.read_patient_cfg": [[215, 225], ["open", "os.path.join", "line.rstrip().split", "line.rstrip"], "function", ["None"], ["", "", "", "def", "read_patient_cfg", "(", "path", ")", ":", "\n", "  ", "\"\"\"\n  Reads patient data in the cfg file and returns a dictionary\n  \"\"\"", "\n", "patient_info", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'Info.cfg'", ")", ")", "as", "f_in", ":", "\n", "    ", "for", "line", "in", "f_in", ":", "\n", "      ", "l", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\": \"", ")", "\n", "patient_info", "[", "l", "[", "0", "]", "]", "=", "l", "[", "1", "]", "\n", "", "", "return", "patient_info", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.group_patient_cases": [[226, 247], ["sorted", "os.path.join", "os.path.exists", "os.makedirs", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "shutil.rmtree", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "acdc_data_preparation.copy", "next", "os.path.join", "os.walk", "acdc_data_preparation.read_patient_cfg"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.read_patient_cfg"], ["", "def", "group_patient_cases", "(", "src_path", ",", "out_path", ",", "force", "=", "False", ")", ":", "\n", "  ", "\"\"\" Group the patient data according to cardiac pathology\"\"\"", "\n", "\n", "cases", "=", "sorted", "(", "next", "(", "os", ".", "walk", "(", "src_path", ")", ")", "[", "1", "]", ")", "\n", "dest_path", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "'Patient_Groups'", ")", "\n", "if", "force", ":", "\n", "    ", "shutil", ".", "rmtree", "(", "dest_path", ")", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "dest_path", ")", ":", "\n", "    ", "return", "dest_path", "\n", "\n", "", "os", ".", "makedirs", "(", "dest_path", ")", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "dest_path", ",", "NORMAL", ")", ")", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "dest_path", ",", "MINF", ")", ")", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "dest_path", ",", "DCM", ")", ")", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "dest_path", ",", "HCM", ")", ")", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "dest_path", ",", "RV", ")", ")", "\n", "\n", "for", "case", "in", "cases", ":", "\n", "    ", "full_path", "=", "os", ".", "path", ".", "join", "(", "src_path", ",", "case", ")", "\n", "copy", "(", "full_path", ",", "os", ".", "path", ".", "join", "(", "dest_path", ",", "read_patient_cfg", "(", "full_path", ")", "[", "'Group'", "]", ",", "case", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.generate_train_validate_test_set": [[248, 283], ["os.path.join", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "shutil.rmtree", "os.path.join", "os.path.join", "os.path.join", "next", "numpy.random.shuffle", "os.walk", "next", "next", "os.path.join", "acdc_data_preparation.copy", "os.path.join", "acdc_data_preparation.copy", "os.path.join", "acdc_data_preparation.copy", "os.walk", "os.walk", "int", "int", "int", "int", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy"], ["", "", "def", "generate_train_validate_test_set", "(", "src_path", ",", "dest_path", ")", ":", "\n", "  ", "\"\"\"\n  Split the data into 70:15:15 for train-validate-test set\n  arg: path: input data path\n  \"\"\"", "\n", "SPLIT_TRAIN", "=", "0.7", "\n", "SPLIT_VALID", "=", "0.15", "\n", "\n", "dest_path", "=", "os", ".", "path", ".", "join", "(", "dest_path", ",", "'dataset'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dest_path", ")", ":", "\n", "    ", "shutil", ".", "rmtree", "(", "dest_path", ")", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "dest_path", ",", "'train_set'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "dest_path", ",", "'validation_set'", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "dest_path", ",", "'test_set'", ")", ")", "\n", "# print (src_path)", "\n", "groups", "=", "next", "(", "os", ".", "walk", "(", "src_path", ")", ")", "[", "1", "]", "\n", "for", "group", "in", "groups", ":", "\n", "    ", "group_path", "=", "next", "(", "os", ".", "walk", "(", "os", ".", "path", ".", "join", "(", "src_path", ",", "group", ")", ")", ")", "[", "0", "]", "\n", "patient_folders", "=", "next", "(", "os", ".", "walk", "(", "group_path", ")", ")", "[", "1", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "patient_folders", ")", "\n", "train_", "=", "patient_folders", "[", "0", ":", "int", "(", "SPLIT_TRAIN", "*", "len", "(", "patient_folders", ")", ")", "]", "\n", "valid_", "=", "patient_folders", "[", "int", "(", "SPLIT_TRAIN", "*", "len", "(", "patient_folders", ")", ")", ":", "\n", "int", "(", "(", "SPLIT_TRAIN", "+", "SPLIT_VALID", ")", "*", "len", "(", "patient_folders", ")", ")", "]", "\n", "test_", "=", "patient_folders", "[", "int", "(", "(", "SPLIT_TRAIN", "+", "SPLIT_VALID", ")", "*", "len", "(", "patient_folders", ")", ")", ":", "]", "\n", "for", "patient", "in", "train_", ":", "\n", "      ", "folder_path", "=", "os", ".", "path", ".", "join", "(", "group_path", ",", "patient", ")", "\n", "copy", "(", "folder_path", ",", "os", ".", "path", ".", "join", "(", "dest_path", ",", "'train_set'", ",", "patient", ")", ")", "\n", "\n", "", "for", "patient", "in", "valid_", ":", "\n", "      ", "folder_path", "=", "os", ".", "path", ".", "join", "(", "group_path", ",", "patient", ")", "\n", "copy", "(", "folder_path", ",", "os", ".", "path", ".", "join", "(", "dest_path", ",", "'validation_set'", ",", "patient", ")", ")", "\n", "\n", "", "for", "patient", "in", "test_", ":", "\n", "      ", "folder_path", "=", "os", ".", "path", ".", "join", "(", "group_path", ",", "patient", ")", "\n", "copy", "(", "folder_path", ",", "os", ".", "path", ".", "join", "(", "dest_path", ",", "'test_set'", ",", "patient", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.extract_roi_fft": [[285, 364], ["int", "int", "numpy.tile", "numpy.zeros", "range", "numpy.unravel_index", "range", "numpy.tile", "range", "scipy.fftpack.fftn", "numpy.absolute", "skimage.feature.canny", "numpy.arange", "skimage.transform.hough_circle", "skimage.transform.hough_circle.any", "np.zeros.max", "np.zeros.argmax", "len", "numpy.abs", "numpy.abs", "range", "scipy.fftpack.ifftn", "numpy.max", "zip", "numpy.max", "numpy.max", "skimage.feature.peak_local_max", "centers.extend", "accums.extend", "radii.extend", "allcenters.append", "allradii.append", "allaccums.append", "range", "numpy.argsort", "numpy.max", "numpy.exp"], "function", ["None"], ["", "", "", "def", "extract_roi_fft", "(", "data4D", ",", "pixel_spacing", ",", "minradius_mm", "=", "15", ",", "maxradius_mm", "=", "45", ",", "kernel_width", "=", "5", ",", "\n", "center_margin", "=", "8", ",", "num_peaks", "=", "10", ",", "num_circles", "=", "20", ",", "radstep", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Returns center and radii of ROI region in (i,j) format\n    \"\"\"", "\n", "# Data shape: ", "\n", "# radius of the smallest and largest circles in mm estimated from the train set", "\n", "# convert to pixel counts", "\n", "\n", "pixel_spacing_X", ",", "pixel_spacing_Y", ",", "_", ",", "_", "=", "pixel_spacing", "\n", "minradius", "=", "int", "(", "minradius_mm", "/", "pixel_spacing_X", ")", "\n", "maxradius", "=", "int", "(", "maxradius_mm", "/", "pixel_spacing_Y", ")", "\n", "\n", "ximagesize", "=", "data4D", ".", "shape", "[", "0", "]", "\n", "yimagesize", "=", "data4D", ".", "shape", "[", "1", "]", "\n", "zslices", "=", "data4D", ".", "shape", "[", "2", "]", "\n", "tframes", "=", "data4D", ".", "shape", "[", "3", "]", "\n", "xsurface", "=", "np", ".", "tile", "(", "range", "(", "ximagesize", ")", ",", "(", "yimagesize", ",", "1", ")", ")", ".", "T", "\n", "ysurface", "=", "np", ".", "tile", "(", "range", "(", "yimagesize", ")", ",", "(", "ximagesize", ",", "1", ")", ")", "\n", "lsurface", "=", "np", ".", "zeros", "(", "(", "ximagesize", ",", "yimagesize", ")", ")", "\n", "\n", "allcenters", "=", "[", "]", "\n", "allaccums", "=", "[", "]", "\n", "allradii", "=", "[", "]", "\n", "\n", "for", "slice", "in", "range", "(", "zslices", ")", ":", "\n", "        ", "ff1", "=", "fftn", "(", "[", "data4D", "[", ":", ",", ":", ",", "slice", ",", "t", "]", "for", "t", "in", "range", "(", "tframes", ")", "]", ")", "\n", "fh", "=", "np", ".", "absolute", "(", "ifftn", "(", "ff1", "[", "1", ",", ":", ",", ":", "]", ")", ")", "\n", "fh", "[", "fh", "<", "0.1", "*", "np", ".", "max", "(", "fh", ")", "]", "=", "0.0", "\n", "image", "=", "1.", "*", "fh", "/", "np", ".", "max", "(", "fh", ")", "\n", "# find hough circles and detect two radii", "\n", "edges", "=", "canny", "(", "image", ",", "sigma", "=", "3", ")", "\n", "hough_radii", "=", "np", ".", "arange", "(", "minradius", ",", "maxradius", ",", "radstep", ")", "\n", "# print hough_radii", "\n", "hough_res", "=", "hough_circle", "(", "edges", ",", "hough_radii", ")", "\n", "if", "hough_res", ".", "any", "(", ")", ":", "\n", "            ", "centers", "=", "[", "]", "\n", "accums", "=", "[", "]", "\n", "radii", "=", "[", "]", "\n", "\n", "for", "radius", ",", "h", "in", "zip", "(", "hough_radii", ",", "hough_res", ")", ":", "\n", "# For each radius, extract num_peaks circles", "\n", "                ", "peaks", "=", "peak_local_max", "(", "h", ",", "num_peaks", "=", "num_peaks", ")", "\n", "centers", ".", "extend", "(", "peaks", ")", "\n", "accums", ".", "extend", "(", "h", "[", "peaks", "[", ":", ",", "0", "]", ",", "peaks", "[", ":", ",", "1", "]", "]", ")", "\n", "radii", ".", "extend", "(", "[", "radius", "]", "*", "num_peaks", ")", "\n", "\n", "# Keep the most prominent num_circles circles", "\n", "", "sorted_circles_idxs", "=", "np", ".", "argsort", "(", "accums", ")", "[", ":", ":", "-", "1", "]", "[", ":", "num_circles", "]", "\n", "\n", "for", "idx", "in", "sorted_circles_idxs", ":", "\n", "                ", "center_x", ",", "center_y", "=", "centers", "[", "idx", "]", "\n", "allcenters", ".", "append", "(", "centers", "[", "idx", "]", ")", "\n", "allradii", ".", "append", "(", "radii", "[", "idx", "]", ")", "\n", "allaccums", ".", "append", "(", "accums", "[", "idx", "]", ")", "\n", "brightness", "=", "accums", "[", "idx", "]", "\n", "lsurface", "=", "lsurface", "+", "brightness", "*", "np", ".", "exp", "(", "\n", "-", "(", "(", "xsurface", "-", "center_x", ")", "**", "2", "+", "(", "ysurface", "-", "center_y", ")", "**", "2", ")", "/", "kernel_width", "**", "2", ")", "\n", "\n", "", "", "", "lsurface", "=", "lsurface", "/", "lsurface", ".", "max", "(", ")", "\n", "# select most likely ROI center", "\n", "roi_center", "=", "np", ".", "unravel_index", "(", "lsurface", ".", "argmax", "(", ")", ",", "lsurface", ".", "shape", ")", "\n", "\n", "# determine ROI radius", "\n", "roi_x_radius", "=", "0", "\n", "roi_y_radius", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "allcenters", ")", ")", ":", "\n", "        ", "xshift", "=", "np", ".", "abs", "(", "allcenters", "[", "idx", "]", "[", "0", "]", "-", "roi_center", "[", "0", "]", ")", "\n", "yshift", "=", "np", ".", "abs", "(", "allcenters", "[", "idx", "]", "[", "1", "]", "-", "roi_center", "[", "1", "]", ")", "\n", "if", "(", "xshift", "<=", "center_margin", ")", "&", "(", "yshift", "<=", "center_margin", ")", ":", "\n", "            ", "roi_x_radius", "=", "np", ".", "max", "(", "(", "roi_x_radius", ",", "allradii", "[", "idx", "]", "+", "xshift", ")", ")", "\n", "roi_y_radius", "=", "np", ".", "max", "(", "(", "roi_y_radius", ",", "allradii", "[", "idx", "]", "+", "yshift", ")", ")", "\n", "\n", "", "", "if", "roi_x_radius", ">", "0", "and", "roi_y_radius", ">", "0", ":", "\n", "        ", "roi_radii", "=", "roi_x_radius", ",", "roi_y_radius", "\n", "", "else", ":", "\n", "        ", "roi_radii", "=", "None", "\n", "\n", "", "return", "roi_center", ",", "roi_radii", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.extract_roi_stddev": [[366, 444], ["int", "int", "numpy.tile", "numpy.zeros", "range", "numpy.unravel_index", "range", "numpy.tile", "range", "numpy.array", "numpy.std", "skimage.feature.canny", "numpy.arange", "skimage.transform.hough_circle", "skimage.transform.hough_circle.any", "np.zeros.max", "np.zeros.argmax", "len", "numpy.abs", "numpy.abs", "range", "numpy.max", "zip", "numpy.max", "numpy.max", "skimage.feature.peak_local_max", "centers.extend", "accums.extend", "radii.extend", "allcenters.append", "allradii.append", "allaccums.append", "range", "numpy.argsort", "numpy.max", "numpy.exp"], "function", ["None"], ["", "def", "extract_roi_stddev", "(", "data4D", ",", "pixel_spacing", ",", "minradius_mm", "=", "15", ",", "maxradius_mm", "=", "45", ",", "kernel_width", "=", "5", ",", "\n", "center_margin", "=", "8", ",", "num_peaks", "=", "10", ",", "num_circles", "=", "20", ",", "radstep", "=", "2", ")", ":", "\n", "    ", "\"\"\"\n    Returns center and radii of ROI region in (i,j) format\n    \"\"\"", "\n", "# Data shape: ", "\n", "# radius of the smallest and largest circles in mm estimated from the train set", "\n", "# convert to pixel counts", "\n", "\n", "pixel_spacing_X", ",", "pixel_spacing_Y", ",", "_", ",", "_", "=", "pixel_spacing", "\n", "minradius", "=", "int", "(", "minradius_mm", "/", "pixel_spacing_X", ")", "\n", "maxradius", "=", "int", "(", "maxradius_mm", "/", "pixel_spacing_Y", ")", "\n", "\n", "ximagesize", "=", "data4D", ".", "shape", "[", "0", "]", "\n", "yimagesize", "=", "data4D", ".", "shape", "[", "1", "]", "\n", "zslices", "=", "data4D", ".", "shape", "[", "2", "]", "\n", "tframes", "=", "data4D", ".", "shape", "[", "3", "]", "\n", "xsurface", "=", "np", ".", "tile", "(", "range", "(", "ximagesize", ")", ",", "(", "yimagesize", ",", "1", ")", ")", ".", "T", "\n", "ysurface", "=", "np", ".", "tile", "(", "range", "(", "yimagesize", ")", ",", "(", "ximagesize", ",", "1", ")", ")", "\n", "lsurface", "=", "np", ".", "zeros", "(", "(", "ximagesize", ",", "yimagesize", ")", ")", "\n", "\n", "allcenters", "=", "[", "]", "\n", "allaccums", "=", "[", "]", "\n", "allradii", "=", "[", "]", "\n", "\n", "for", "slice", "in", "range", "(", "zslices", ")", ":", "\n", "        ", "ff1", "=", "np", ".", "array", "(", "[", "data4D", "[", ":", ",", ":", ",", "slice", ",", "t", "]", "for", "t", "in", "range", "(", "tframes", ")", "]", ")", "\n", "fh", "=", "np", ".", "std", "(", "ff1", ",", "axis", "=", "0", ")", "\n", "fh", "[", "fh", "<", "0.1", "*", "np", ".", "max", "(", "fh", ")", "]", "=", "0.0", "\n", "image", "=", "1.", "*", "fh", "/", "np", ".", "max", "(", "fh", ")", "\n", "# find hough circles and detect two radii", "\n", "edges", "=", "canny", "(", "image", ",", "sigma", "=", "3", ")", "\n", "hough_radii", "=", "np", ".", "arange", "(", "minradius", ",", "maxradius", ",", "radstep", ")", "\n", "# print hough_radii", "\n", "hough_res", "=", "hough_circle", "(", "edges", ",", "hough_radii", ")", "\n", "if", "hough_res", ".", "any", "(", ")", ":", "\n", "            ", "centers", "=", "[", "]", "\n", "accums", "=", "[", "]", "\n", "radii", "=", "[", "]", "\n", "for", "radius", ",", "h", "in", "zip", "(", "hough_radii", ",", "hough_res", ")", ":", "\n", "# For each radius, extract num_peaks circles", "\n", "                ", "peaks", "=", "peak_local_max", "(", "h", ",", "num_peaks", "=", "num_peaks", ")", "\n", "centers", ".", "extend", "(", "peaks", ")", "\n", "accums", ".", "extend", "(", "h", "[", "peaks", "[", ":", ",", "0", "]", ",", "peaks", "[", ":", ",", "1", "]", "]", ")", "\n", "radii", ".", "extend", "(", "[", "radius", "]", "*", "num_peaks", ")", "\n", "\n", "# Keep the most prominent num_circles circles", "\n", "", "sorted_circles_idxs", "=", "np", ".", "argsort", "(", "accums", ")", "[", ":", ":", "-", "1", "]", "[", ":", "num_circles", "]", "\n", "\n", "for", "idx", "in", "sorted_circles_idxs", ":", "\n", "                ", "center_x", ",", "center_y", "=", "centers", "[", "idx", "]", "\n", "allcenters", ".", "append", "(", "centers", "[", "idx", "]", ")", "\n", "allradii", ".", "append", "(", "radii", "[", "idx", "]", ")", "\n", "allaccums", ".", "append", "(", "accums", "[", "idx", "]", ")", "\n", "brightness", "=", "accums", "[", "idx", "]", "\n", "lsurface", "=", "lsurface", "+", "brightness", "*", "np", ".", "exp", "(", "\n", "-", "(", "(", "xsurface", "-", "center_x", ")", "**", "2", "+", "(", "ysurface", "-", "center_y", ")", "**", "2", ")", "/", "kernel_width", "**", "2", ")", "\n", "\n", "", "", "", "lsurface", "=", "lsurface", "/", "lsurface", ".", "max", "(", ")", "\n", "# select most likely ROI center", "\n", "roi_center", "=", "np", ".", "unravel_index", "(", "lsurface", ".", "argmax", "(", ")", ",", "lsurface", ".", "shape", ")", "\n", "\n", "# determine ROI radius", "\n", "roi_x_radius", "=", "0", "\n", "roi_y_radius", "=", "0", "\n", "for", "idx", "in", "range", "(", "len", "(", "allcenters", ")", ")", ":", "\n", "        ", "xshift", "=", "np", ".", "abs", "(", "allcenters", "[", "idx", "]", "[", "0", "]", "-", "roi_center", "[", "0", "]", ")", "\n", "yshift", "=", "np", ".", "abs", "(", "allcenters", "[", "idx", "]", "[", "1", "]", "-", "roi_center", "[", "1", "]", ")", "\n", "if", "(", "xshift", "<=", "center_margin", ")", "&", "(", "yshift", "<=", "center_margin", ")", ":", "\n", "            ", "roi_x_radius", "=", "np", ".", "max", "(", "(", "roi_x_radius", ",", "allradii", "[", "idx", "]", "+", "xshift", ")", ")", "\n", "roi_y_radius", "=", "np", ".", "max", "(", "(", "roi_y_radius", ",", "allradii", "[", "idx", "]", "+", "yshift", ")", ")", "\n", "\n", "", "", "if", "roi_x_radius", ">", "0", "and", "roi_y_radius", ">", "0", ":", "\n", "        ", "roi_radii", "=", "roi_x_radius", ",", "roi_y_radius", "\n", "", "else", ":", "\n", "        ", "roi_radii", "=", "None", "\n", "\n", "", "return", "roi_center", ",", "roi_radii", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.convert_nii_np": [[564, 577], ["collections.OrderedDict", "print", "tqdm.tqdm", "next", "sorted", "acdc_data_preparation.Dataset", "acdc_data_preparation.Dataset.read_patient_data", "os.walk"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.Dataset.read_patient_data"], ["", "", "", "def", "convert_nii_np", "(", "data_path", ",", "mode", ",", "roi_detect", ")", ":", "\n", "    ", "\"\"\"\n    Prepare a dictionary of dataset and save it as numpy file\n    \"\"\"", "\n", "patient_fulldata", "=", "OrderedDict", "(", ")", "\n", "print", "(", "data_path", ")", "\n", "patient_folders", "=", "next", "(", "os", ".", "walk", "(", "data_path", ")", ")", "[", "1", "]", "\n", "for", "patient", "in", "tqdm", "(", "sorted", "(", "patient_folders", ")", ")", ":", "\n", "#         print (patient)", "\n", "        ", "dset", "=", "Dataset", "(", "data_path", ",", "patient", ")", "\n", "dset", ".", "read_patient_data", "(", "mode", "=", "mode", ",", "roi_detect", "=", "roi_detect", ")", "\n", "patient_fulldata", "[", "dset", ".", "name", "]", "=", "dset", ".", "patient_data", "\n", "", "return", "patient_fulldata", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_world_size": [[5, 11], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank": [[12, 18], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.synchronize": [[19, 32], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.all_gather": [[33, 74], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.IntTensor().to", "torch.IntTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.IntTensor().to", "torch.IntTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.IntTensor", "torch.IntTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.IntTensor", "torch.IntTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_world_size", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.all_gather", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.all_gather", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "IntTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "IntTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.get_n_hls_colors": [[6, 19], ["hls_colors.append", "random.random", "random.random"], "function", ["None"], ["def", "get_n_hls_colors", "(", "num", ")", ":", "\n", "    ", "hls_colors", "=", "[", "]", "\n", "i", "=", "0", "\n", "step", "=", "360.0", "/", "num", "\n", "while", "i", "<", "360", ":", "\n", "        ", "h", "=", "i", "\n", "s", "=", "90", "+", "random", ".", "random", "(", ")", "*", "10", "\n", "l", "=", "50", "+", "random", ".", "random", "(", ")", "*", "10", "\n", "_hlsc", "=", "[", "h", "/", "360.0", ",", "l", "/", "100.0", ",", "s", "/", "100.0", "]", "\n", "hls_colors", ".", "append", "(", "_hlsc", ")", "\n", "i", "+=", "step", "\n", "\n", "", "return", "hls_colors", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.ncolors": [[20, 32], ["vis_utils.get_n_hls_colors", "numpy.array", "numpy.array", "colorsys.hls_to_rgb", "rgb_colors.append"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.get_n_hls_colors"], ["", "def", "ncolors", "(", "num", ")", ":", "\n", "    ", "rgb_colors", "=", "[", "]", "\n", "if", "num", "<", "1", ":", "\n", "        ", "return", "np", ".", "array", "(", "rgb_colors", ")", "\n", "", "hls_colors", "=", "get_n_hls_colors", "(", "num", ")", "\n", "for", "hlsc", "in", "hls_colors", ":", "\n", "        ", "_r", ",", "_g", ",", "_b", "=", "colorsys", ".", "hls_to_rgb", "(", "hlsc", "[", "0", "]", ",", "hlsc", "[", "1", "]", ",", "hlsc", "[", "2", "]", ")", "\n", "rgb_colors", ".", "append", "(", "[", "_r", ",", "_g", ",", "_b", "]", ")", "\n", "# r, g, b = [int(x * 255.0) for x in (_r, _g, _b)]", "\n", "# rgb_colors.append([r, g, b])", "\n", "\n", "", "return", "np", ".", "array", "(", "rgb_colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.random_colors": [[33, 44], ["list", "map", "range", "colorsys.hsv_to_rgb"], "function", ["None"], ["", "def", "random_colors", "(", "N", ",", "bright", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Generate random colors.\n    To get visually distinct colors, generate them in HSV space then\n    convert to RGB.\n    \"\"\"", "\n", "brightness", "=", "1.0", "if", "bright", "else", "0.7", "\n", "hsv", "=", "[", "(", "i", "/", "N", ",", "1", ",", "brightness", ")", "for", "i", "in", "range", "(", "N", ")", "]", "\n", "colors", "=", "list", "(", "map", "(", "lambda", "c", ":", "colorsys", ".", "hsv_to_rgb", "(", "*", "c", ")", ",", "hsv", ")", ")", "\n", "# random.shuffle(colors)", "\n", "return", "colors", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.mask2png": [[45, 66], ["numpy.zeros_like", "enumerate", "numpy.unique", "len", "numpy.array", "numpy.insert", "cv2.imwrite", "np.zeros_like.astype", "numpy.array", "vis_utils.random_colors", "len"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.random_colors"], ["", "def", "mask2png", "(", "mask", ",", "file_name", "=", "None", ",", "suffix", "=", "\"png\"", ")", ":", "\n", "    ", "\"\"\" mask: (w, h)\n        img_rgb: (w, h, rgb)\n    \"\"\"", "\n", "nums", "=", "np", ".", "unique", "(", "mask", ")", "[", "1", ":", "]", "\n", "if", "len", "(", "nums", ")", "<", "1", ":", "\n", "        ", "colors", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "# colors = ncolors(len(nums))", "\n", "        ", "colors", "=", "(", "np", ".", "array", "(", "random_colors", "(", "len", "(", "nums", ")", ")", ")", "*", "255", ")", ".", "astype", "(", "int", ")", "\n", "colors", "=", "np", ".", "insert", "(", "colors", ",", "0", ",", "[", "0", ",", "0", ",", "0", "]", ",", "0", ")", "\n", "\n", "# \u4fdd\u8bc1mask\u4e2d\u7684\u503c\u4e3a1-N\u8fde\u7eed", "\n", "", "mask_ordered", "=", "np", ".", "zeros_like", "(", "mask", ")", "\n", "for", "cnt", ",", "l", "in", "enumerate", "(", "nums", ",", "1", ")", ":", "\n", "        ", "mask_ordered", "[", "mask", "==", "l", "]", "=", "cnt", "\n", "\n", "", "im_rgb", "=", "colors", "[", "mask_ordered", ".", "astype", "(", "int", ")", "]", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "file_name", "+", "\".\"", "+", "suffix", ",", "im_rgb", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "return", "im_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.apply_mask": [[67, 76], ["range", "numpy.where"], "function", ["None"], ["", "def", "apply_mask", "(", "image", ",", "mask", ",", "color", ",", "alpha", "=", "0.5", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\"Apply the given mask to the image.\n    \"\"\"", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "        ", "image", "[", ":", ",", ":", ",", "c", "]", "=", "np", ".", "where", "(", "mask", "==", "1", ",", "\n", "image", "[", ":", ",", ":", ",", "c", "]", "*", "\n", "(", "1", "-", "alpha", ")", "+", "alpha", "*", "color", "[", "c", "]", "*", "scale", ",", "\n", "image", "[", ":", ",", ":", ",", "c", "]", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.img_mask_png": [[77, 101], ["numpy.zeros_like", "enumerate", "image.copy", "numpy.unique", "len", "numpy.array", "vis_utils.ncolors", "numpy.insert", "numpy.unique", "vis_utils.apply_mask", "cv2.imwrite", "len", "int"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.ncolors", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.apply_mask"], ["", "def", "img_mask_png", "(", "image", ",", "mask", ",", "file_name", "=", "None", ",", "alpha", "=", "0.5", ",", "suffix", "=", "\"png\"", ")", ":", "\n", "    ", "\"\"\" mask: (h, w)\n        image: (h, w, rgb)\n    \"\"\"", "\n", "nums", "=", "np", ".", "unique", "(", "mask", ")", "[", "1", ":", "]", "\n", "if", "len", "(", "nums", ")", "<", "1", ":", "\n", "        ", "colors", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", "]", ")", "\n", "", "else", ":", "\n", "        ", "colors", "=", "ncolors", "(", "len", "(", "nums", ")", ")", "\n", "colors", "=", "np", ".", "insert", "(", "colors", ",", "0", ",", "[", "0", ",", "0", ",", "0", "]", ",", "0", ")", "\n", "\n", "# \u4fdd\u8bc1mask\u4e2d\u7684\u503c\u4e3a1-N\u8fde\u7eed", "\n", "", "mask_ordered", "=", "np", ".", "zeros_like", "(", "mask", ")", "\n", "for", "cnt", ",", "l", "in", "enumerate", "(", "nums", ",", "1", ")", ":", "\n", "        ", "mask_ordered", "[", "mask", "==", "l", "]", "=", "cnt", "\n", "\n", "# mask_rgb = colors[mask_ordered.astype(int)]", "\n", "", "mix_im", "=", "image", ".", "copy", "(", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "mask_ordered", ")", "[", "1", ":", "]", ":", "\n", "        ", "mix_im", "=", "apply_mask", "(", "mix_im", ",", "mask_ordered", "==", "i", ",", "colors", "[", "int", "(", "i", ")", "]", ",", "alpha", "=", "alpha", ",", "scale", "=", "255", ")", "\n", "\n", "", "if", "file_name", "is", "not", "None", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "file_name", "+", "\".\"", "+", "suffix", ",", "mix_im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "", "return", "mix_im", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils._find_contour": [[102, 110], ["cv2.findContours", "numpy.zeros_like", "mask.astype"], "function", ["None"], ["", "def", "_find_contour", "(", "mask", ")", ":", "\n", "# _, contours, _ = cv2.findContours(mask.astype(np.uint8), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)  # \u9876\u70b9", "\n", "    ", "_", ",", "contours", ",", "_", "=", "cv2", ".", "findContours", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "RETR_TREE", ",", "cv2", ".", "CHAIN_APPROX_NONE", ")", "\n", "\n", "cont", "=", "np", ".", "zeros_like", "(", "mask", ")", "\n", "for", "contour", "in", "contours", ":", "\n", "        ", "cont", "[", "contour", "[", ":", ",", ":", ",", "1", "]", ",", "contour", "[", ":", ",", ":", ",", "0", "]", "]", "=", "1", "\n", "", "return", "cont", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.masks_to_contours": [[111, 118], ["numpy.zeros_like", "numpy.unique", "vis_utils._find_contour"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils._find_contour"], ["", "def", "masks_to_contours", "(", "masks", ")", ":", "\n", "# \u5305\u542b\u591a\u4e2a\u533a\u57df", "\n", "    ", "nums", "=", "np", ".", "unique", "(", "masks", ")", "[", "1", ":", "]", "\n", "cont_mask", "=", "np", ".", "zeros_like", "(", "masks", ")", "\n", "for", "i", "in", "nums", ":", "\n", "        ", "cont_mask", "+=", "_find_contour", "(", "masks", "==", "i", ")", "\n", "", "return", "(", "cont_mask", ">", "0", ")", ".", "astype", "(", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.batchToColorImg": [[119, 135], ["numpy.zeros", "range", "cv2.applyColorMap", "cv2.applyColorMap.astype", "batch[].min", "batch[].max", "batch[].min"], "function", ["None"], ["", "def", "batchToColorImg", "(", "batch", ",", "minv", "=", "None", ",", "maxv", "=", "None", ",", "scale", "=", "255.", ")", ":", "\n", "    ", "\"\"\" batch: (N, H, W, C)\n    \"\"\"", "\n", "if", "batch", ".", "ndim", "==", "3", ":", "\n", "        ", "N", ",", "H", ",", "W", "=", "batch", ".", "shape", "\n", "", "elif", "batch", ".", "ndim", "==", "4", ":", "\n", "        ", "N", ",", "H", ",", "W", ",", "_", "=", "batch", ".", "shape", "\n", "", "colorImg", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "H", ",", "W", ",", "3", ")", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "if", "minv", "is", "None", ":", "\n", "            ", "a", "=", "(", "batch", "[", "i", "]", "-", "batch", "[", "i", "]", ".", "min", "(", ")", ")", "/", "(", "batch", "[", "i", "]", ".", "max", "(", ")", "-", "batch", "[", "i", "]", ".", "min", "(", ")", ")", "*", "255", "\n", "", "else", ":", "\n", "            ", "a", "=", "(", "batch", "[", "i", "]", "-", "minv", ")", "/", "(", "maxv", "-", "minv", ")", "*", "scale", "\n", "", "a", "=", "cv2", ".", "applyColorMap", "(", "a", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "colorImg", "[", "i", ",", "...", "]", "=", "a", "[", "...", ",", ":", ":", "-", "1", "]", "/", "255.", "\n", "", "return", "colorImg", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.conv_int": [[55, 57], ["i.isdigit", "int"], "function", ["None"], ["def", "conv_int", "(", "i", ")", ":", "\n", "    ", "return", "int", "(", "i", ")", "if", "i", ".", "isdigit", "(", ")", "else", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.natural_order": [[59, 73], ["isinstance", "dice3D.conv_int", "re.split"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.conv_int"], ["", "def", "natural_order", "(", "sord", ")", ":", "\n", "    ", "\"\"\"\n    Sort a (list,tuple) of strings into natural order.\n\n    Ex:\n\n    ['1','10','2'] -> ['1','2','10']\n\n    ['abc1def','ab10d','b2c','ab1d'] -> ['ab1d','ab10d', 'abc1def', 'b2c']\n\n    \"\"\"", "\n", "if", "isinstance", "(", "sord", ",", "tuple", ")", ":", "\n", "        ", "sord", "=", "sord", "[", "0", "]", "\n", "", "return", "[", "conv_int", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "r'(\\d+)'", ",", "sord", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.load_nii": [[78, 98], ["nibabel.load", "nib.load.get_data"], "function", ["None"], ["", "def", "load_nii", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    Function to load a 'nii' or 'nii.gz' file, The function returns\n    everyting needed to save another 'nii' or 'nii.gz'\n    in the same dimensional space, i.e. the affine matrix and the header\n\n    Parameters\n    ----------\n\n    img_path: string\n    String with the path of the 'nii' or 'nii.gz' image file name.\n\n    Returns\n    -------\n    Three element, the first is a numpy array of the image values,\n    the second is the affine transformation of the image, and the\n    last one is the header of the image.\n    \"\"\"", "\n", "nimg", "=", "nib", ".", "load", "(", "img_path", ")", "\n", "return", "nimg", ".", "get_data", "(", ")", ",", "nimg", ".", "affine", ",", "nimg", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.save_nii": [[100, 122], ["nibabel.Nifti1Image", "nib.Nifti1Image.to_filename"], "function", ["None"], ["", "def", "save_nii", "(", "img_path", ",", "data", ",", "affine", ",", "header", ")", ":", "\n", "    ", "\"\"\"\n    Function to save a 'nii' or 'nii.gz' file.\n\n    Parameters\n    ----------\n\n    img_path: string\n    Path to save the image should be ending with '.nii' or '.nii.gz'.\n\n    data: np.array\n    Numpy array of the image data.\n\n    affine: list of list or np.array\n    The affine transformation to save with the image.\n\n    header: nib.Nifti1Header\n    The header that define everything about the data\n    (pleasecheck nibabel documentation).\n    \"\"\"", "\n", "nimg", "=", "nib", ".", "Nifti1Image", "(", "data", ",", "affine", "=", "affine", ",", "header", "=", "header", ")", "\n", "nimg", ".", "to_filename", "(", "img_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.metrics": [[127, 179], ["ValueError", "numpy.copy", "numpy.copy", "numpy.clip", "numpy.clip", "medpy.metric.binary.dc", "np.clip.sum", "numpy.prod", "np.clip.sum", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy"], ["", "def", "metrics", "(", "img_gt", ",", "img_pred", ",", "voxel_size", ")", ":", "\n", "    ", "\"\"\"\n    Function to compute the metrics between two segmentation maps given as input.\n\n    Parameters\n    ----------\n    img_gt: np.array\n    Array of the ground truth segmentation map.\n\n    img_pred: np.array\n    Array of the predicted segmentation map.\n\n    voxel_size: list, tuple or np.array\n    The size of a voxel of the images used to compute the volumes.\n\n    Return\n    ------\n    A list of metrics in this order, [Dice LV, Volume LV, Err LV(ml),\n    Dice RV, Volume RV, Err RV(ml), Dice MYO, Volume MYO, Err MYO(ml)]\n    \"\"\"", "\n", "\n", "if", "img_gt", ".", "ndim", "!=", "img_pred", ".", "ndim", ":", "\n", "        ", "raise", "ValueError", "(", "\"The arrays 'img_gt' and 'img_pred' should have the \"", "\n", "\"same dimension, {} against {}\"", ".", "format", "(", "img_gt", ".", "ndim", ",", "\n", "img_pred", ".", "ndim", ")", ")", "\n", "\n", "", "res", "=", "[", "]", "\n", "# Loop on each classes of the input images", "\n", "for", "c", "in", "[", "3", ",", "1", ",", "2", "]", ":", "\n", "# Copy the gt image to not alterate the input", "\n", "        ", "gt_c_i", "=", "np", ".", "copy", "(", "img_gt", ")", "\n", "gt_c_i", "[", "gt_c_i", "!=", "c", "]", "=", "0", "\n", "\n", "# Copy the pred image to not alterate the input", "\n", "pred_c_i", "=", "np", ".", "copy", "(", "img_pred", ")", "\n", "pred_c_i", "[", "pred_c_i", "!=", "c", "]", "=", "0", "\n", "\n", "# Clip the value to compute the volumes", "\n", "gt_c_i", "=", "np", ".", "clip", "(", "gt_c_i", ",", "0", ",", "1", ")", "\n", "pred_c_i", "=", "np", ".", "clip", "(", "pred_c_i", ",", "0", ",", "1", ")", "\n", "\n", "# Compute the Dice", "\n", "dice", "=", "dc", "(", "gt_c_i", ",", "pred_c_i", ")", "\n", "\n", "# Compute volume", "\n", "volpred", "=", "pred_c_i", ".", "sum", "(", ")", "*", "np", ".", "prod", "(", "voxel_size", ")", "/", "1000.", "\n", "volgt", "=", "gt_c_i", ".", "sum", "(", ")", "*", "np", ".", "prod", "(", "voxel_size", ")", "/", "1000.", "\n", "\n", "# res += [dice, volpred, volpred-volgt]", "\n", "res", "+=", "[", "dice", "]", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.compute_metrics_on_files": [[181, 206], ["dice3D.load_nii", "dice3D.load_nii", "header.get_zooms", "os.path.basename", "dice3D.metrics", "print", "print", "os.path.basename.split", "formatting.format", "formatting.format"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.metrics"], ["", "def", "compute_metrics_on_files", "(", "path_gt", ",", "path_pred", ")", ":", "\n", "    ", "\"\"\"\n    Function to give the metrics for two files\n\n    Parameters\n    ----------\n\n    path_gt: string\n    Path of the ground truth image.\n\n    path_pred: string\n    Path of the predicted image.\n    \"\"\"", "\n", "gt", ",", "_", ",", "header", "=", "load_nii", "(", "path_gt", ")", "\n", "pred", ",", "_", ",", "_", "=", "load_nii", "(", "path_pred", ")", "\n", "zooms", "=", "header", ".", "get_zooms", "(", ")", "\n", "\n", "name", "=", "os", ".", "path", ".", "basename", "(", "path_gt", ")", "\n", "name", "=", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "res", "=", "metrics", "(", "gt", ",", "pred", ",", "zooms", ")", "\n", "res", "=", "[", "\"{:.3f}\"", ".", "format", "(", "r", ")", "for", "r", "in", "res", "]", "\n", "\n", "formatting", "=", "\"{:>14}, {:>7}, {:>9}, {:>10}, {:>7}, {:>9}, {:>10}, {:>8}, {:>10}, {:>11}\"", "\n", "print", "(", "formatting", ".", "format", "(", "*", "HEADER", ")", ")", "\n", "print", "(", "formatting", ".", "format", "(", "name", ",", "*", "res", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.compute_metrics_on_directories": [[208, 240], ["sorted", "sorted", "zip", "pd.DataFrame", "pd.DataFrame.to_csv", "glob.glob", "glob.glob", "dice3D.load_nii", "dice3D.load_nii", "header.get_zooms", "res.append", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "ValueError", "dice3D.metrics", "os.path.basename().split", "zip", "time.strftime", "os.path.basename", "os.path.basename", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.metrics"], ["", "def", "compute_metrics_on_directories", "(", "dir_gt", ",", "dir_pred", ")", ":", "\n", "    ", "\"\"\"\n    Function to generate a csv file for each images of two directories.\n\n    Parameters\n    ----------\n\n    path_gt: string\n    Directory of the ground truth segmentation maps.\n\n    path_pred: string\n    Directory of the predicted segmentation maps.\n    \"\"\"", "\n", "lst_gt", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "dir_gt", ",", "'*'", ")", ")", ",", "key", "=", "natural_order", ")", "\n", "lst_pred", "=", "sorted", "(", "glob", "(", "os", ".", "path", ".", "join", "(", "dir_pred", ",", "'*'", ")", ")", ",", "key", "=", "natural_order", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "p_gt", ",", "p_pred", "in", "zip", "(", "lst_gt", ",", "lst_pred", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "basename", "(", "p_gt", ")", "!=", "os", ".", "path", ".", "basename", "(", "p_pred", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The two files don't have the same name\"", "\n", "\" {}, {}.\"", ".", "format", "(", "os", ".", "path", ".", "basename", "(", "p_gt", ")", ",", "\n", "os", ".", "path", ".", "basename", "(", "p_pred", ")", ")", ")", "\n", "\n", "", "gt", ",", "_", ",", "header", "=", "load_nii", "(", "p_gt", ")", "\n", "pred", ",", "_", ",", "_", "=", "load_nii", "(", "p_pred", ")", "\n", "zooms", "=", "header", ".", "get_zooms", "(", ")", "\n", "res", ".", "append", "(", "metrics", "(", "gt", ",", "pred", ",", "zooms", ")", ")", "\n", "\n", "", "lst_name_gt", "=", "[", "os", ".", "path", ".", "basename", "(", "gt", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "for", "gt", "in", "lst_gt", "]", "\n", "res", "=", "[", "[", "n", ",", "]", "+", "r", "for", "r", ",", "n", "in", "zip", "(", "res", ",", "lst_name_gt", ")", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "res", ",", "columns", "=", "HEADER", ")", "\n", "df", ".", "to_csv", "(", "\"results_{}.csv\"", ".", "format", "(", "time", ".", "strftime", "(", "\"%Y%m%d_%H%M%S\"", ")", ")", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.main": [[241, 252], ["os.path.isfile", "os.path.isfile", "dice3D.compute_metrics_on_files", "os.path.isdir", "os.path.isdir", "dice3D.compute_metrics_on_directories", "ValueError"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.compute_metrics_on_files", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.dice3D.compute_metrics_on_directories"], ["", "def", "main", "(", "path_gt", ",", "path_pred", ")", ":", "\n", "    ", "\"\"\"\n    Main function to select which method to apply on the input parameters.\n    \"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "path_gt", ")", "and", "os", ".", "path", ".", "isfile", "(", "path_pred", ")", ":", "\n", "        ", "compute_metrics_on_files", "(", "path_gt", ",", "path_pred", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "path_gt", ")", "and", "os", ".", "path", ".", "isdir", "(", "path_pred", ")", ":", "\n", "        ", "compute_metrics_on_directories", "(", "path_gt", ",", "path_pred", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"The paths given needs to be two directories or two files.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.__init__": [[15, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tensors", ",", "image_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            tensors (tensor)\n            image_sizes (list[tuple[int, int]])\n        \"\"\"", "\n", "self", ".", "tensors", "=", "tensors", "\n", "self", ".", "image_sizes", "=", "image_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to": [[24, 27], ["image_list.ImageList.tensors.to", "image_list.ImageList"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["", "def", "to", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "cast_tensor", "=", "self", ".", "tensors", ".", "to", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "ImageList", "(", "cast_tensor", ",", "self", ".", "image_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list": [[29, 77], ["isinstance", "isinstance", "isinstance", "image_list.ImageList", "isinstance", "tensors.dim", "tensors.dim", "tuple", "tensors[].new().zero_", "zip", "TypeError", "list", "int", "int", "tuple", "pad_img[].copy_", "max", "len", "tensors[].new", "type", "zip", "math.ceil", "math.ceil"], "function", ["None"], ["", "", "def", "to_image_list", "(", "tensors", ",", "size_divisible", "=", "0", ",", "return_size", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    tensors can be an ImageList, a torch.Tensor or\n    an iterable of Tensors. It can't be a numpy array.\n    When tensors is an iterable of Tensors, it pads\n    the Tensors with zeros so that they have the same\n    shape\n    \"\"\"", "\n", "if", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", "and", "size_divisible", ">", "0", ":", "\n", "        ", "tensors", "=", "[", "tensors", "]", "\n", "\n", "", "if", "isinstance", "(", "tensors", ",", "ImageList", ")", ":", "\n", "        ", "return", "tensors", "\n", "", "elif", "isinstance", "(", "tensors", ",", "torch", ".", "Tensor", ")", ":", "\n", "# single tensor shape can be inferred", "\n", "        ", "if", "tensors", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "tensors", "=", "tensors", "[", "None", "]", "\n", "", "assert", "tensors", ".", "dim", "(", ")", "==", "4", "\n", "image_sizes", "=", "[", "tensor", ".", "shape", "[", "-", "2", ":", "]", "for", "tensor", "in", "tensors", "]", "\n", "return", "ImageList", "(", "tensors", ",", "image_sizes", ")", "\n", "", "elif", "isinstance", "(", "tensors", ",", "(", "tuple", ",", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "max_size", "=", "tuple", "(", "max", "(", "s", ")", "for", "s", "in", "zip", "(", "*", "[", "img", ".", "shape", "for", "img", "in", "tensors", "]", ")", ")", "\n", "\n", "# TODO Ideally, just remove this and let me model handle arbitrary", "\n", "# input sizs", "\n", "if", "size_divisible", ">", "0", ":", "\n", "            ", "import", "math", "\n", "\n", "stride", "=", "size_divisible", "\n", "max_size", "=", "list", "(", "max_size", ")", "\n", "max_size", "[", "1", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "1", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "[", "2", "]", "=", "int", "(", "math", ".", "ceil", "(", "max_size", "[", "2", "]", "/", "stride", ")", "*", "stride", ")", "\n", "max_size", "=", "tuple", "(", "max_size", ")", "\n", "\n", "", "batch_shape", "=", "(", "len", "(", "tensors", ")", ",", ")", "+", "max_size", "\n", "batched_imgs", "=", "tensors", "[", "0", "]", ".", "new", "(", "*", "batch_shape", ")", ".", "zero_", "(", ")", "\n", "for", "img", ",", "pad_img", "in", "zip", "(", "tensors", ",", "batched_imgs", ")", ":", "\n", "            ", "pad_img", "[", ":", "img", ".", "shape", "[", "0", "]", ",", ":", "img", ".", "shape", "[", "1", "]", ",", ":", "img", ".", "shape", "[", "2", "]", "]", ".", "copy_", "(", "img", ")", "\n", "\n", "", "image_sizes", "=", "[", "im", ".", "shape", "[", "-", "2", ":", "]", "for", "im", "in", "tensors", "]", "\n", "\n", "# return ImageList(batched_imgs, image_sizes)", "\n", "if", "return_size", ":", "\n", "            ", "return", "batched_imgs", ",", "image_sizes", "\n", "", "else", ":", "\n", "            ", "return", "batched_imgs", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Unsupported type for to_image_list: {}\"", ".", "format", "(", "type", "(", "tensors", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice": [[6, 20], ["pred.contiguous.contiguous", "target.contiguous.contiguous", "pred.contiguous.view", "target.contiguous.view", "pred.view.sum().item", "target.view.sum().item", "pred.view.sum", "target.view.sum"], "function", ["None"], ["def", "dice", "(", "pred", ",", "target", ")", ":", "\n", "    ", "pred", "=", "pred", ".", "contiguous", "(", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", "\n", "smooth", "=", "0.00001", "\n", "\n", "# intersection = (pred * target).sum(dim=2).sum(dim=2)", "\n", "pred_flat", "=", "pred", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "target_flat", "=", "target", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "pred_flat", "*", "target_flat", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "# loss = (1 - ((2. * intersection + smooth) / (pred.sum(dim=2).sum(dim=2) + target.sum(dim=2).sum(dim=2) + smooth)))", "\n", "dice", "=", "(", "2", "*", "intersection", "+", "smooth", ")", "/", "(", "pred_flat", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "target_flat", ".", "sum", "(", ")", ".", "item", "(", ")", "+", "smooth", ")", "\n", "return", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice3D": [[21, 73], ["ValueError", "numpy.copy", "numpy.copy", "numpy.clip", "numpy.clip", "medpy.metric.binary.dc"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy"], ["", "def", "dice3D", "(", "img_gt", ",", "img_pred", ",", "voxel_size", ")", ":", "\n", "    ", "\"\"\"\n    Function to compute the metrics between two segmentation maps given as input.\n\n    Parameters\n    ----------\n    img_gt: np.array\n    Array of the ground truth segmentation map.\n\n    img_pred: np.array\n    Array of the predicted segmentation map.\n\n    voxel_size: list, tuple or np.array\n    The size of a voxel of the images used to compute the volumes.\n\n    Return\n    ------\n    A list of metrics in this order, [Dice LV, Volume LV, Err LV(ml),\n    Dice RV, Volume RV, Err RV(ml), Dice MYO, Volume MYO, Err MYO(ml)]\n    \"\"\"", "\n", "\n", "if", "img_gt", ".", "ndim", "!=", "img_pred", ".", "ndim", ":", "\n", "        ", "raise", "ValueError", "(", "\"The arrays 'img_gt' and 'img_pred' should have the \"", "\n", "\"same dimension, {} against {}\"", ".", "format", "(", "img_gt", ".", "ndim", ",", "\n", "img_pred", ".", "ndim", ")", ")", "\n", "\n", "", "res", "=", "[", "]", "\n", "# Loop on each classes of the input images", "\n", "for", "c", "in", "[", "3", ",", "1", ",", "2", "]", ":", "\n", "# Copy the gt image to not alterate the input", "\n", "        ", "gt_c_i", "=", "np", ".", "copy", "(", "img_gt", ")", "\n", "gt_c_i", "[", "gt_c_i", "!=", "c", "]", "=", "0", "\n", "\n", "# Copy the pred image to not alterate the input", "\n", "pred_c_i", "=", "np", ".", "copy", "(", "img_pred", ")", "\n", "pred_c_i", "[", "pred_c_i", "!=", "c", "]", "=", "0", "\n", "\n", "# Clip the value to compute the volumes", "\n", "gt_c_i", "=", "np", ".", "clip", "(", "gt_c_i", ",", "0", ",", "1", ")", "\n", "pred_c_i", "=", "np", ".", "clip", "(", "pred_c_i", ",", "0", ",", "1", ")", "\n", "\n", "# Compute the Dice", "\n", "dice", "=", "dc", "(", "gt_c_i", ",", "pred_c_i", ")", "\n", "\n", "# Compute volume", "\n", "# volpred = pred_c_i.sum() * np.prod(voxel_size) / 1000.", "\n", "# volgt = gt_c_i.sum() * np.prod(voxel_size) / 1000.", "\n", "\n", "# res += [dice, volpred, volpred-volgt]", "\n", "res", "+=", "[", "dice", "]", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.hd_3D": [[74, 94], ["numpy.copy", "numpy.copy", "numpy.clip", "numpy.clip", "medpy.metric.binary.hd", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy"], ["", "def", "hd_3D", "(", "img_pred", ",", "img_gt", ",", "labels", "=", "[", "3", ",", "1", ",", "2", "]", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "c", "in", "labels", ":", "\n", "        ", "gt_c_i", "=", "np", ".", "copy", "(", "img_gt", ")", "\n", "gt_c_i", "[", "gt_c_i", "!=", "c", "]", "=", "0", "\n", "\n", "pred_c_i", "=", "np", ".", "copy", "(", "img_pred", ")", "\n", "pred_c_i", "[", "pred_c_i", "!=", "c", "]", "=", "0", "\n", "\n", "gt_c_i", "=", "np", ".", "clip", "(", "gt_c_i", ",", "0", ",", "1", ")", "\n", "pred_c_i", "=", "np", ".", "clip", "(", "pred_c_i", ",", "0", ",", "1", ")", "\n", "\n", "if", "np", ".", "sum", "(", "pred_c_i", ")", "==", "0", "or", "np", ".", "sum", "(", "gt_c_i", ")", "==", "0", ":", "\n", "            ", "hausdorff", "=", "0", "\n", "", "else", ":", "\n", "            ", "hausdorff", "=", "hd", "(", "pred_c_i", ",", "gt_c_i", ")", "\n", "\n", "", "res", "+=", "[", "hausdorff", "]", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.cal_hausdorff_distance": [[95, 102], ["numpy.array", "numpy.array", "hausdorff.hausdorff_distance", "np.array.contiguous", "np.array.contiguous"], "function", ["None"], ["", "def", "cal_hausdorff_distance", "(", "pred", ",", "target", ")", ":", "\n", "\n", "    ", "pred", "=", "np", ".", "array", "(", "pred", ".", "contiguous", "(", ")", ")", "\n", "target", "=", "np", ".", "array", "(", "target", ".", "contiguous", "(", ")", ")", "\n", "result", "=", "hausdorff_distance", "(", "pred", ",", "target", ",", "distance", "=", "\"euclidean\"", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.make_one_hot": [[103, 118], ["numpy.array", "tuple", "torch.zeros().scatter_", "input.cpu().long", "torch.zeros", "input.cpu"], "function", ["None"], ["", "def", "make_one_hot", "(", "input", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Convert class index tensor to one hot encoding tensor.\n    Args:\n         input: A tensor of shape [N, 1, *]\n         num_classes: An int of number of class\n    Returns:\n        A tensor of shape [N, num_classes, *]\n    \"\"\"", "\n", "shape", "=", "np", ".", "array", "(", "input", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "num_classes", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "result", "=", "torch", ".", "zeros", "(", "shape", ")", ".", "scatter_", "(", "1", ",", "input", ".", "cpu", "(", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "# result = result.scatter_(1, input.cpu(), 1)", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.match_pred_gt": [[119, 142], ["torch.zeros_like", "enumerate", "torch.unique", "torch.unique", "torch.zeros", "enumerate", "numpy.argmax", "torch.zeros_like", "len", "len", "torch.tensor", "enumerate", "len", "len", "metrics.dice", "metrics.make_one_hot", "metrics.make_one_hot"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot"], ["", "def", "match_pred_gt", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "\"\"\" pred: (1, C, H, W)\n        gt: (1, C, H, W)\n    \"\"\"", "\n", "gt_labels", "=", "torch", ".", "unique", "(", "gt", ",", "sorted", "=", "True", ")", "[", "1", ":", "]", "\n", "pred_labels", "=", "torch", ".", "unique", "(", "pred", ",", "sorted", "=", "True", ")", "[", "1", ":", "]", "\n", "\n", "if", "len", "(", "gt_labels", ")", "!=", "0", "and", "len", "(", "pred_labels", ")", "!=", "0", ":", "\n", "        ", "dice_Matrix", "=", "torch", ".", "zeros", "(", "(", "len", "(", "pred_labels", ")", ",", "len", "(", "gt_labels", ")", ")", ")", "\n", "for", "i", ",", "pl", "in", "enumerate", "(", "pred_labels", ")", ":", "\n", "            ", "pred_i", "=", "torch", ".", "tensor", "(", "pred", "==", "pl", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "j", ",", "gl", "in", "enumerate", "(", "gt_labels", ")", ":", "\n", "                ", "dice_Matrix", "[", "i", ",", "j", "]", "=", "dice", "(", "make_one_hot", "(", "pred_i", ",", "2", ")", "[", "0", "]", ",", "make_one_hot", "(", "gt", "==", "gl", ",", "2", ")", "[", "0", "]", ")", "\n", "\n", "# max_axis0 = np.max(dice_Matrix, axis=0)", "\n", "", "", "max_arg0", "=", "np", ".", "argmax", "(", "dice_Matrix", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "\n", "", "pred_match", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "max_arg0", ")", ":", "\n", "        ", "pred_match", "[", "pred", "==", "pred_labels", "[", "arg", "]", "]", "=", "i", "+", "1", "\n", "", "return", "pred_match", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.init_net.init_weights": [[3, 25], ["print", "net.apply", "hasattr", "torch.init.normal_", "hasattr", "torch.init.constant_", "classname.find", "torch.init.normal_", "torch.init.constant_", "classname.find", "classname.find", "torch.init.xavier_normal_", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.uniq": [[5, 7], ["set", "torch.unique().numpy", "torch.unique", "a.cpu"], "function", ["None"], ["def", "uniq", "(", "a", ":", "Tensor", ")", "->", "Set", ":", "\n", "    ", "return", "set", "(", "torch", ".", "unique", "(", "a", ".", "cpu", "(", ")", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.sset": [[8, 10], ["uniq().issubset", "utils_loss.uniq"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.uniq"], ["", "def", "sset", "(", "a", ":", "Tensor", ",", "sub", ":", "Iterable", ")", "->", "bool", ":", "\n", "    ", "return", "uniq", "(", "a", ")", ".", "issubset", "(", "sub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.simplex": [[11, 15], ["t.sum().type", "torch.ones_like", "torch.allclose", "t.sum"], "function", ["None"], ["", "def", "simplex", "(", "t", ":", "Tensor", ",", "axis", "=", "1", ")", "->", "bool", ":", "\n", "    ", "_sum", "=", "t", ".", "sum", "(", "axis", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "_ones", "=", "torch", ".", "ones_like", "(", "_sum", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "torch", ".", "allclose", "(", "_sum", ",", "_ones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.one_hot": [[16, 18], ["utils_loss.simplex", "utils_loss.sset"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.simplex", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.sset"], ["", "def", "one_hot", "(", "t", ":", "Tensor", ",", "axis", "=", "1", ")", "->", "bool", ":", "\n", "    ", "return", "simplex", "(", "t", ",", "axis", ")", "and", "sset", "(", "t", ",", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.probs2class": [[20, 28], ["utils_loss.simplex", "probs.argmax"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.simplex"], ["", "def", "probs2class", "(", "probs", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "b", ",", "_", ",", "w", ",", "h", "=", "probs", ".", "shape", "# type: Tuple[int, int, int, int]", "\n", "assert", "simplex", "(", "probs", ")", "\n", "\n", "res", "=", "probs", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "assert", "res", ".", "shape", "==", "(", "b", ",", "w", ",", "h", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.class2one_hot": [[29, 41], ["utils_loss.sset", "torch.stack().type", "utils_loss.one_hot", "len", "seg.unsqueeze.unsqueeze", "list", "range", "torch.stack", "range"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.sset", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.one_hot"], ["", "def", "class2one_hot", "(", "seg", ":", "Tensor", ",", "C", ":", "int", ")", "->", "Tensor", ":", "\n", "    ", "if", "len", "(", "seg", ".", "shape", ")", "==", "2", ":", "# Only w, h, used by the dataloader", "\n", "        ", "seg", "=", "seg", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "", "assert", "sset", "(", "seg", ",", "list", "(", "range", "(", "C", ")", ")", ")", "\n", "\n", "b", ",", "w", ",", "h", "=", "seg", ".", "shape", "# type: Tuple[int, int, int]", "\n", "\n", "res", "=", "torch", ".", "stack", "(", "[", "seg", "==", "c", "for", "c", "in", "range", "(", "C", ")", "]", ",", "dim", "=", "1", ")", ".", "type", "(", "torch", ".", "int32", ")", "\n", "assert", "res", ".", "shape", "==", "(", "b", ",", "C", ",", "w", ",", "h", ")", "\n", "assert", "one_hot", "(", "res", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.probs2one_hot": [[42, 51], ["utils_loss.simplex", "utils_loss.class2one_hot", "utils_loss.one_hot", "utils_loss.probs2class"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.simplex", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.class2one_hot", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.one_hot", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.probs2class"], ["", "def", "probs2one_hot", "(", "probs", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "_", ",", "C", ",", "_", ",", "_", "=", "probs", ".", "shape", "\n", "assert", "simplex", "(", "probs", ")", "\n", "\n", "res", "=", "class2one_hot", "(", "probs2class", "(", "probs", ")", ",", "C", ")", "\n", "assert", "res", ".", "shape", "==", "probs", ".", "shape", "\n", "assert", "one_hot", "(", "res", ")", "\n", "\n", "return", "res", "", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.direct_field.df_cardia.direct_field": [[7, 65], ["PIL.Image.fromarray", "Image.fromarray.resize", "numpy.array", "numpy.zeros", "numpy.squeeze", "numpy.unique", "cv2.distanceTransformWithLabels", "numpy.copy", "numpy.argwhere", "numpy.zeros", "numpy.indices", "grid.astype.astype", "numpy.zeros", "numpy.divide", "numpy.divide", "numpy.sqrt", "numpy.ones_like", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.None.acdc_data_preparation.copy"], ["def", "direct_field", "(", "a", ",", "norm", "=", "True", ")", ":", "\n", "    ", "\"\"\" a: np.ndarray, (h, w)\n    \"\"\"", "\n", "if", "a", ".", "ndim", "==", "3", ":", "\n", "        ", "a", "=", "np", ".", "squeeze", "(", "a", ")", "\n", "\n", "", "h", ",", "w", "=", "a", ".", "shape", "\n", "\n", "a_Image", "=", "Image", ".", "fromarray", "(", "a", ")", "\n", "a", "=", "a_Image", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "a", "=", "np", ".", "array", "(", "a", ")", "\n", "\n", "accumulation", "=", "np", ".", "zeros", "(", "(", "2", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "np", ".", "unique", "(", "a", ")", "[", "1", ":", "]", ":", "\n", "# b, ind = ndimage.distance_transform_edt(a==i, return_indices=True)", "\n", "# c = np.indices((h, w))", "\n", "# diff = c - ind", "\n", "# dr = np.sqrt(np.sum(diff ** 2, axis=0))", "\n", "\n", "        ", "img", "=", "(", "a", "==", "i", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "dst", ",", "labels", "=", "cv2", ".", "distanceTransformWithLabels", "(", "img", ",", "cv2", ".", "DIST_L2", ",", "cv2", ".", "DIST_MASK_PRECISE", ",", "labelType", "=", "cv2", ".", "DIST_LABEL_PIXEL", ")", "\n", "index", "=", "np", ".", "copy", "(", "labels", ")", "\n", "index", "[", "img", ">", "0", "]", "=", "0", "\n", "place", "=", "np", ".", "argwhere", "(", "index", ">", "0", ")", "\n", "nearCord", "=", "place", "[", "labels", "-", "1", ",", ":", "]", "\n", "x", "=", "nearCord", "[", ":", ",", ":", ",", "0", "]", "\n", "y", "=", "nearCord", "[", ":", ",", ":", ",", "1", "]", "\n", "nearPixel", "=", "np", ".", "zeros", "(", "(", "2", ",", "h", ",", "w", ")", ")", "\n", "nearPixel", "[", "0", ",", ":", ",", ":", "]", "=", "x", "\n", "nearPixel", "[", "1", ",", ":", ",", ":", "]", "=", "y", "\n", "grid", "=", "np", ".", "indices", "(", "img", ".", "shape", ")", "\n", "grid", "=", "grid", ".", "astype", "(", "float", ")", "\n", "diff", "=", "grid", "-", "nearPixel", "\n", "if", "norm", ":", "\n", "            ", "dr", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "dr", "=", "np", ".", "ones_like", "(", "img", ")", "\n", "\n", "# direction = np.zeros((2, h, w), dtype=np.float32)", "\n", "# direction[0, b>0] = np.divide(diff[0, b>0], dr[b>0])", "\n", "# direction[1, b>0] = np.divide(diff[1, b>0], dr[b>0])", "\n", "\n", "", "direction", "=", "np", ".", "zeros", "(", "(", "2", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "direction", "[", "0", ",", "img", ">", "0", "]", "=", "np", ".", "divide", "(", "diff", "[", "0", ",", "img", ">", "0", "]", ",", "dr", "[", "img", ">", "0", "]", ")", "\n", "direction", "[", "1", ",", "img", ">", "0", "]", "=", "np", ".", "divide", "(", "diff", "[", "1", ",", "img", ">", "0", "]", ",", "dr", "[", "img", ">", "0", "]", ")", "\n", "\n", "accumulation", "[", ":", ",", "img", ">", "0", "]", "=", "0", "\n", "accumulation", "=", "accumulation", "+", "direction", "\n", "\n", "# mag, angle = cv2.cartToPolar(accumulation[0, ...], accumulation[1, ...])", "\n", "# for l in np.unique(a)[1:]:", "\n", "#     mag_i = mag[a==l].astype(float)", "\n", "#     t = 1 / mag_i * mag_i.max()", "\n", "#     mag[a==l] = t", "\n", "# x, y = cv2.polarToCart(mag, angle)", "\n", "# accumulation = np.stack([x, y], axis=0)", "\n", "\n", "", "return", "accumulation", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.direct_field.utils_df.one_hot2dist": [[6, 18], ["utils.utils_loss.one_hot", "len", "numpy.zeros_like", "range", "torch.Tensor", "seg[].astype", "seg[].astype.any", "scipy.ndimage.distance_transform_edt", "scipy.ndimage.distance_transform_edt"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.one_hot"], ["def", "one_hot2dist", "(", "seg", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "assert", "one_hot", "(", "torch", ".", "Tensor", "(", "seg", ")", ",", "axis", "=", "0", ")", "\n", "C", ":", "int", "=", "len", "(", "seg", ")", "\n", "\n", "res", "=", "np", ".", "zeros_like", "(", "seg", ")", "\n", "for", "c", "in", "range", "(", "C", ")", ":", "\n", "        ", "posmask", "=", "seg", "[", "c", "]", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "if", "posmask", ".", "any", "(", ")", ":", "\n", "            ", "negmask", "=", "~", "posmask", "\n", "res", "[", "c", "]", "=", "distance", "(", "negmask", ")", "*", "negmask", "-", "(", "distance", "(", "posmask", ")", "-", "1", ")", "*", "posmask", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.direct_field.utils_df.class2dist": [[19, 34], ["utils.utils_loss.class2one_hot().to", "utils.utils_loss.simplex", "utils_df.one_hot2dist", "torch.Tensor", "seg_onehot[].numpy", "torch.Tensor", "utils.utils_loss.class2one_hot", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.simplex", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.direct_field.utils_df.one_hot2dist", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.utils_loss.class2one_hot"], ["", "def", "class2dist", "(", "seg", ":", "np", ".", "ndarray", ",", "C", "=", "4", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "\"\"\" res: (C, H, W)\n    \"\"\"", "\n", "if", "seg", ".", "ndim", "==", "2", ":", "\n", "        ", "seg_tensor", "=", "torch", ".", "Tensor", "(", "seg", ")", "\n", "", "elif", "seg", ".", "ndim", "==", "3", ":", "\n", "        ", "seg_tensor", "=", "torch", ".", "Tensor", "(", "seg", "[", "0", "]", ")", "\n", "", "elif", "seg", ".", "ndim", "==", "4", ":", "\n", "        ", "seg_tensor", "=", "torch", ".", "Tensor", "(", "seg", "[", "0", ",", "...", ",", "0", "]", ")", "\n", "\n", "", "seg_onehot", "=", "class2one_hot", "(", "seg_tensor", ",", "C", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "assert", "simplex", "(", "seg_onehot", ")", "\n", "res", "=", "one_hot2dist", "(", "seg_onehot", "[", "0", "]", ".", "numpy", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.progress_bar": [[17, 30], ["int", "int", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "len", "print", "float"], "function", ["None"], ["def", "progress_bar", "(", "curr_idx", ",", "max_idx", ",", "time_step", ",", "repeat_elem", "=", "\"_\"", ")", ":", "\n", "    ", "max_equals", "=", "55", "\n", "step_ms", "=", "int", "(", "time_step", "*", "1000", ")", "\n", "num_equals", "=", "int", "(", "curr_idx", "*", "max_equals", "/", "float", "(", "max_idx", ")", ")", "\n", "len_reverse", "=", "len", "(", "'Step:%d ms| %d/%d ['", "%", "(", "step_ms", ",", "curr_idx", ",", "max_idx", ")", ")", "+", "num_equals", "\n", "sys", ".", "stdout", ".", "write", "(", "\"Step:%d ms|%d/%d [%s]\"", "%", "(", "step_ms", ",", "curr_idx", ",", "max_idx", ",", "\" \"", "*", "max_equals", ",", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\"/b\"", "*", "(", "max_equals", "+", "1", ")", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "repeat_elem", "*", "num_equals", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "\"/b\"", "*", "len_reverse", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "if", "curr_idx", "==", "max_idx", ":", "\n", "        ", "print", "(", "'/n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.load_nii": [[31, 51], ["nibabel.load", "nib.load.get_fdata"], "function", ["None"], ["", "", "def", "load_nii", "(", "img_path", ")", ":", "\n", "    ", "\"\"\"\n    Function to load a 'nii' or 'nii.gz' file, The function returns\n    everyting needed to save another 'nii' or 'nii.gz'\n    in the same dimensional space, i.e. the affine matrix and the header\n\n    Parameters\n    ----------\n\n    img_path: string\n    String with the path of the 'nii' or 'nii.gz' image file name.\n\n    Returns\n    -------\n    Three element, the first is a numpy array of the image values,\n    the second is the affine transformation of the image, and the\n    last one is the header of the image.\n    \"\"\"", "\n", "nimg", "=", "nib", ".", "load", "(", "img_path", ")", "\n", "return", "nimg", ".", "get_fdata", "(", ")", ",", "nimg", ".", "affine", ",", "nimg", ".", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.save_nii": [[52, 56], ["nibabel.Nifti1Image", "nib.Nifti1Image.set_data_dtype", "nibabel.save", "os.path.join"], "function", ["None"], ["", "def", "save_nii", "(", "vol", ",", "affine", ",", "hdr", ",", "path", ",", "prefix", ",", "suffix", ")", ":", "\n", "    ", "vol", "=", "nib", ".", "Nifti1Image", "(", "vol", ",", "affine", ",", "hdr", ")", "\n", "vol", ".", "set_data_dtype", "(", "np", ".", "uint8", ")", "\n", "nib", ".", "save", "(", "vol", ",", "os", ".", "path", ".", "join", "(", "path", ",", "prefix", "+", "'_'", "+", "suffix", "+", "\".nii.gz\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.get_person_names": [[58, 63], ["os.listdir", "os.listdir.sort"], "function", ["None"], ["", "def", "get_person_names", "(", "root_path", "=", "None", ")", ":", "\n", "    ", "persons_name", "=", "os", ".", "listdir", "(", "root_path", ")", "\n", "persons_name", "=", "[", "pn", "for", "pn", "in", "persons_name", "if", "\"patient\"", "in", "pn", "]", "\n", "persons_name", ".", "sort", "(", ")", "\n", "return", "persons_name", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.get_patient_data": [[64, 101], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "test_acdc_leadboard.load_nii", "numpy.swapaxes", "test_acdc_leadboard.load_nii", "numpy.swapaxes", "test_acdc_leadboard.load_nii", "numpy.swapaxes", "open", "line.rstrip().split", "int", "int", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii"], ["", "def", "get_patient_data", "(", "patient", ",", "root_path", ")", ":", "\n", "    ", "patient_data", "=", "{", "}", "\n", "infocfg_p", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "patient", ",", "\"Info.cfg\"", ")", "\n", "\n", "with", "open", "(", "infocfg_p", ")", "as", "f_in", ":", "\n", "        ", "for", "line", "in", "f_in", ":", "\n", "            ", "l", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\": \"", ")", "\n", "patient_data", "[", "l", "[", "0", "]", "]", "=", "l", "[", "1", "]", "\n", "\n", "", "", "ed_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "patient", ",", "\"%s_frame%02d.nii.gz\"", "%", "(", "patient", ",", "int", "(", "patient_data", "[", "'ED'", "]", ")", ")", ")", "\n", "es_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "patient", ",", "\"%s_frame%02d.nii.gz\"", "%", "(", "patient", ",", "int", "(", "patient_data", "[", "'ES'", "]", ")", ")", ")", "\n", "img_4d_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "patient", ",", "\"{}_4d.nii.gz\"", ".", "format", "(", "patient", ")", ")", "\n", "# ed_gt_path = os.path.join(root_path, patient, \"%s_frame%02d_gt.nii.gz\" % (patient, int(patient_data['ED'])))", "\n", "# es_gt_path = os.path.join(root_path, patient, \"%s_frame%02d_gt.nii.gz\" % (patient, int(patient_data['ES'])))", "\n", "\n", "ed", ",", "affine", ",", "hdr", "=", "load_nii", "(", "ed_path", ")", "\n", "patient_data", "[", "'ED_VOL'", "]", "=", "np", ".", "swapaxes", "(", "ed", ",", "0", ",", "-", "1", ")", "\n", "patient_data", "[", "'3D_affine'", "]", "=", "affine", "\n", "patient_data", "[", "'3D_hdr'", "]", "=", "hdr", "\n", "\n", "es", ",", "_", ",", "_", "=", "load_nii", "(", "es_path", ")", "# (w, h, slices)", "\n", "patient_data", "[", "'ES_VOL'", "]", "=", "np", ".", "swapaxes", "(", "es", ",", "0", ",", "-", "1", ")", "\n", "\n", "img_4d", ",", "affine_4d", ",", "hdr_4d", "=", "load_nii", "(", "img_4d_path", ")", "# (w, h, slices, times)", "\n", "patient_data", "[", "'4D'", "]", "=", "np", ".", "swapaxes", "(", "img_4d", ",", "0", ",", "1", ")", "\n", "patient_data", "[", "'4D_affine'", "]", "=", "affine_4d", "\n", "patient_data", "[", "'4D_hdr'", "]", "=", "hdr_4d", "\n", "\n", "patient_data", "[", "'size'", "]", "=", "img_4d", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", "\n", "patient_data", "[", "'pid'", "]", "=", "patient", "\n", "\n", "# ed_gt = load_nii(ed_gt_path)", "\n", "# patient_data['ED_GT'] = np.swapaxes(ed_gt, 0, 1)", "\n", "\n", "# es_gt = load_nii(es_gt_path)", "\n", "# patient_data['ES_GT'] = np.swapaxes(es_gt, 0, 1)", "\n", "return", "patient_data", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.test_it": [[102, 121], ["model.eval", "imgs.to.to", "model", "torch.functional.softmax", "torch.max", "torch.max", "torch.max", "preds.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["", "def", "test_it", "(", "model", ",", "data", ",", "device", "=", "\"cuda\"", ",", "used_df", "=", "True", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "imgs", "=", "data", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "# gts = gts.to(device)", "\n", "\n", "net_out", "=", "model", "(", "imgs", ")", "\n", "if", "used_df", ":", "\n", "        ", "preds_out", "=", "net_out", "[", "0", "]", "\n", "preds_df", "=", "net_out", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "preds_out", "=", "net_out", "[", "0", "]", "\n", "preds_df", "=", "None", "\n", "", "preds_out", "=", "nn", ".", "functional", ".", "softmax", "(", "preds_out", ",", "dim", "=", "1", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "preds_out", ",", "1", ")", "\n", "preds", "=", "preds", ".", "unsqueeze", "(", "1", ")", "# (N, 1, *)", "\n", "\n", "return", "preds", ",", "preds_df", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.transform": [[122, 133], ["libs.Compose", "standard_augment.Compose.", "libs.To_PIL_Image", "libs.to_Tensor", "libs.normalize"], "function", ["None"], ["", "def", "transform", "(", "imgs", ")", ":", "\n", "    ", "mean", "=", "63.19523533061758", "\n", "std", "=", "70.74166957523165", "\n", "trans", "=", "standard_augment", ".", "Compose", "(", "[", "standard_augment", ".", "To_PIL_Image", "(", ")", ",", "\n", "# joint_augment.RandomAffine(0,translate=(0.125, 0.125)),", "\n", "# joint_augment.RandomRotate((-180,180)),", "\n", "# joint_augment.FixResize(224),", "\n", "standard_augment", ".", "to_Tensor", "(", ")", ",", "\n", "standard_augment", ".", "normalize", "(", "[", "mean", "]", ",", "[", "std", "]", ")", ",", "\n", "]", ")", "\n", "return", "trans", "(", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.test_voxel": [[134, 160], ["imgs[].astype", "utils.image_list.to_image_list", "test_acdc_leadboard.test_it", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.zeros.cpu().numpy", "utils.image_list.to_image_list", "test_acdc_leadboard.test_it", "test_acdc_leadboard.transform", "torch.zeros.cpu"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.test_it", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.test_it", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.transform"], ["", "def", "test_voxel", "(", "model", ",", "imgs", ",", "used_df", ",", "multi_batches", "=", "False", ",", "resize", "=", "None", ")", ":", "\n", "    ", "\"\"\" imgs: (slices, H, W)\n        preds: (slices, 1, H, W)\n    \"\"\"", "\n", "imgs", "=", "imgs", "[", "...", ",", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "B", ",", "_", ",", "_", ",", "C", "=", "imgs", ".", "shape", "\n", "\n", "if", "multi_batches", ":", "\n", "        ", "data", ",", "origin_shape", "=", "to_image_list", "(", "imgs", ",", "size_divisible", "=", "32", ",", "return_size", "=", "True", ")", "\n", "preds", ",", "_", "=", "test_it", "(", "model", ",", "data", ")", "\n", "\n", "# for j in range(imgs.shape[0]):", "\n", "#     preds[j, ...] = pred.cpu().numpy()[j, :, :origin_shape[j][0], :origin_shape[j][1]]", "\n", "", "else", ":", "\n", "        ", "preds", "=", "torch", ".", "zeros", "(", "B", ",", "C", ",", "resize", "[", "0", "]", ",", "resize", "[", "1", "]", ")", "\n", "for", "j", ",", "pt", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "data", "=", "[", "transform", "(", "pt", ")", "]", "\n", "data", ",", "origin_shape", "=", "to_image_list", "(", "data", ",", "size_divisible", "=", "32", ",", "return_size", "=", "True", ")", "\n", "pred", ",", "_", "=", "test_it", "(", "model", ",", "data", ",", "used_df", "=", "used_df", ")", "\n", "preds", "[", "j", ",", "...", "]", "=", "pred", "[", "0", ",", "0", ",", ":", "origin_shape", "[", "0", "]", "[", "0", "]", ",", ":", "origin_shape", "[", "0", "]", "[", "1", "]", "]", "\n", "\n", "", "", "if", "resize", "is", "not", "None", ":", "\n", "# preds = F.interpolate(preds, size=resize, mode='nearest')", "\n", "        ", "preds", "=", "preds", "[", "...", ",", ":", "resize", "[", "0", "]", ",", ":", "resize", "[", "1", "]", "]", "\n", "\n", "", "return", "preds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", "...", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.create_model": [[161, 174], ["libs.network.U_NetDF", "libs.network.U_Net"], "function", ["None"], ["", "def", "create_model", "(", "model_name", ",", "selfeat", ")", ":", "\n", "    ", "if", "model_name", "==", "'U_NetDF'", ":", "\n", "        ", "model", "=", "U_NetDF", "(", "selfeat", "=", "selfeat", ",", "auxseg", "=", "True", ")", "\n", "", "elif", "model_name", "==", "'U_Net'", ":", "\n", "        ", "model", "=", "U_Net", "(", ")", "\n", "# elif model_name == 'Resnet18_DfUnet':", "\n", "#     model = Resnet18_DfUnet()", "\n", "# elif model_name == 'DenseNet':", "\n", "#     model = DenseNet()", "\n", "# elif model_name == 'DenseNet_DF':", "\n", "#     model = DenseNet_DF(selfeat=selfeat)", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.test": [[175, 209], ["test_acdc_leadboard.create_model", "nn.DataParallel.cuda", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "test_acdc_leadboard.get_person_names", "enumerate", "torch.DataParallel", "time.time", "test_acdc_leadboard.get_patient_data", "test_acdc_leadboard.test_voxel", "test_acdc_leadboard.test_voxel", "numpy.transpose", "numpy.transpose", "numpy.zeros", "range", "os.path.join", "os.makedirs", "test_acdc_leadboard.CheckSizeAndSaveVolume", "test_acdc_leadboard.progress_bar", "len", "test_acdc_leadboard.test_voxel", "numpy.transpose", "len", "numpy.transpose", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_model", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.get_person_names", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.get_patient_data", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.test_voxel", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.test_voxel", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.CheckSizeAndSaveVolume", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.progress_bar", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.test_voxel"], ["", "def", "test", "(", "mgpus", ",", "model_name", ",", "model_path", ",", "used_df", ",", "selfeat", ",", "log_path", ")", ":", "\n", "\n", "    ", "model", "=", "create_model", "(", "model_name", ",", "selfeat", "=", "selfeat", ")", "\n", "if", "mgpus", "is", "not", "None", "and", "len", "(", "mgpus", ")", ">", "2", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ")", "\n", "\n", "root_path", "=", "\"MICCAIACDC2017/ACDC_DataSet/testing/testing/\"", "\n", "root_path", "=", "\"/root/ACDC_DataSet/testing/testing/\"", "\n", "persons_name", "=", "get_person_names", "(", "root_path", ")", "\n", "for", "j", ",", "pn", "in", "enumerate", "(", "persons_name", ")", ":", "\n", "        ", "s_time", "=", "time", ".", "time", "(", ")", "\n", "patient_data", "=", "get_patient_data", "(", "pn", ",", "root_path", ")", "\n", "\n", "# (slices, h, w)", "\n", "es_pred", "=", "test_voxel", "(", "model", ",", "patient_data", "[", "'ES_VOL'", "]", ",", "used_df", "=", "used_df", ",", "resize", "=", "patient_data", "[", "'size'", "]", ")", "\n", "ed_pred", "=", "test_voxel", "(", "model", ",", "patient_data", "[", "'ED_VOL'", "]", ",", "used_df", "=", "used_df", ",", "resize", "=", "patient_data", "[", "'size'", "]", ")", "\n", "es_pred", "=", "np", ".", "transpose", "(", "es_pred", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "ed_pred", "=", "np", ".", "transpose", "(", "ed_pred", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n", "img_4D", "=", "patient_data", "[", "'4D'", "]", "\n", "h", ",", "w", ",", "s", ",", "t", "=", "img_4D", ".", "shape", "\n", "pred_4D", "=", "np", ".", "zeros", "(", "(", "w", ",", "h", ",", "s", ",", "t", ")", ")", "\n", "for", "i", "in", "range", "(", "img_4D", ".", "shape", "[", "-", "1", "]", ")", ":", "\n", "            ", "pred", "=", "test_voxel", "(", "model", ",", "np", ".", "transpose", "(", "img_4D", "[", "...", ",", "i", "]", ",", "(", "2", ",", "0", ",", "1", ")", ")", ",", "used_df", "=", "used_df", ",", "resize", "=", "patient_data", "[", "'size'", "]", ")", "\n", "pred_4D", "[", "...", ",", "i", "]", "=", "np", ".", "transpose", "(", "pred", ",", "(", "2", ",", "1", ",", "0", ")", ")", "\n", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "log_path", ",", "\"all_predictions\"", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "CheckSizeAndSaveVolume", "(", "pred_4D", ",", "patient_data", ",", "save_path", ")", "\n", "progress_bar", "(", "j", "%", "(", "len", "(", "persons_name", ")", "+", "1", ")", ",", "len", "(", "persons_name", ")", ",", "time", ".", "time", "(", ")", "-", "s_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.CheckSizeAndSaveVolume": [[211, 232], ["int", "test_acdc_leadboard.save_nii", "int", "test_acdc_leadboard.save_nii", "ED_pred.astype", "ES_pred.astype"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.save_nii", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_acdc_leadboard.save_nii"], ["", "", "def", "CheckSizeAndSaveVolume", "(", "seg_4D", ",", "patient_data", ",", "save_path", ")", ":", "\n", "    ", "\"\"\"\n    TODO:\n    \"\"\"", "\n", "prefix", "=", "patient_data", "[", "'pid'", "]", "\n", "suffix", "=", "'4D'", "\n", "\n", "# save_nii(seg_4D, patient_data['4D_affine'], patient_data['4D_hdr'], save_path, prefix, suffix)", "\n", "suffix", "=", "'ED'", "\n", "ED_phase_n", "=", "int", "(", "patient_data", "[", "'ED'", "]", ")", "\n", "ED_pred", "=", "seg_4D", "[", ":", ",", ":", ",", ":", ",", "ED_phase_n", "]", "\n", "save_nii", "(", "ED_pred", ".", "astype", "(", "np", ".", "uint8", ")", ",", "patient_data", "[", "'3D_affine'", "]", ",", "patient_data", "[", "'3D_hdr'", "]", ",", "save_path", ",", "prefix", ",", "suffix", ")", "\n", "\n", "suffix", "=", "'ES'", "\n", "ES_phase_n", "=", "int", "(", "patient_data", "[", "'ES'", "]", ")", "\n", "ES_pred", "=", "seg_4D", "[", ":", ",", ":", ",", ":", ",", "ES_phase_n", "]", "\n", "save_nii", "(", "ES_pred", ".", "astype", "(", "np", ".", "uint8", ")", ",", "patient_data", "[", "'3D_affine'", "]", ",", "patient_data", "[", "'3D_hdr'", "]", ",", "save_path", ",", "prefix", ",", "suffix", ")", "\n", "\n", "# ED_GT = patient_data.get('ED_GT', None)", "\n", "results", "=", "[", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_logger": [[47, 59], ["logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.getLogger"], "function", ["None"], ["", "def", "create_logger", "(", "log_file", ",", "dist_rank", ")", ":", "\n", "    ", "if", "dist_rank", ">", "0", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "WARNING", ")", "\n", "return", "logger", "\n", "", "log_format", "=", "'%(asctime)s  %(levelname)5s  %(message)s'", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ",", "format", "=", "log_format", ",", "filename", "=", "log_file", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "console", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "logging", ".", "getLogger", "(", "__name__", ")", ".", "addHandler", "(", "console", ")", "\n", "return", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_dataloader": [[60, 112], ["libs.datasets.joint_augment.Compose", "libs.datasets.augment.Compose", "libs.datasets.augment.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "libs.datasets.AcdcDataset", "libs.datasets.joint_augment.Compose", "libs.datasets.augment.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "libs.datasets.joint_augment.To_PIL_Image", "libs.datasets.joint_augment.RandomAffine", "libs.datasets.joint_augment.RandomRotate", "libs.datasets.joint_augment.FixResize", "libs.datasets.augment.to_Tensor", "libs.datasets.augment.normalize", "libs.datasets.augment.to_Tensor", "torch.get_world_size", "torch.get_rank", "libs.datasets.collate_batch.BatchCollator", "libs.datasets.AcdcDataset", "libs.datasets.joint_augment.To_PIL_Image", "libs.datasets.joint_augment.FixResize", "libs.datasets.joint_augment.To_Tensor", "libs.datasets.augment.normalize", "torch.get_world_size", "torch.get_rank", "libs.datasets.collate_batch.BatchCollator"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_world_size", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_world_size", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank"], ["", "def", "create_dataloader", "(", "logger", ")", ":", "\n", "    ", "train_joint_transform", "=", "joint_augment", ".", "Compose", "(", "[", "\n", "joint_augment", ".", "To_PIL_Image", "(", ")", ",", "\n", "joint_augment", ".", "RandomAffine", "(", "0", ",", "translate", "=", "(", "0.125", ",", "0.125", ")", ")", ",", "\n", "joint_augment", ".", "RandomRotate", "(", "(", "-", "180", ",", "180", ")", ")", ",", "\n", "joint_augment", ".", "FixResize", "(", "256", ")", "\n", "]", ")", "\n", "transform", "=", "standard_augment", ".", "Compose", "(", "[", "\n", "standard_augment", ".", "to_Tensor", "(", ")", ",", "\n", "standard_augment", ".", "normalize", "(", "[", "cfg", ".", "DATASET", ".", "MEAN", "]", ",", "[", "cfg", ".", "DATASET", ".", "STD", "]", ")", "]", ")", "\n", "target_transform", "=", "standard_augment", ".", "Compose", "(", "[", "\n", "standard_augment", ".", "to_Tensor", "(", ")", "]", ")", "\n", "\n", "if", "cfg", ".", "DATASET", ".", "NAME", "==", "'acdc'", ":", "\n", "        ", "train_set", "=", "AcdcDataset", "(", "data_list", "=", "cfg", ".", "DATASET", ".", "TRAIN_LIST", ",", "\n", "df_used", "=", "cfg", ".", "DATASET", ".", "DF_USED", ",", "df_norm", "=", "cfg", ".", "DATASET", ".", "DF_NORM", ",", "\n", "boundary", "=", "cfg", ".", "DATASET", ".", "BOUNDARY", ",", "\n", "joint_augment", "=", "train_joint_transform", ",", "\n", "augment", "=", "transform", ",", "target_augment", "=", "target_transform", ")", "\n", "\n", "", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_set", ",", "\n", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", ",", "rank", "=", "dist", ".", "get_rank", "(", ")", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "shuffle", "=", "False", ",", "sampler", "=", "train_sampler", ",", "\n", "collate_fn", "=", "BatchCollator", "(", "size_divisible", "=", "32", ",", "df_used", "=", "cfg", ".", "DATASET", ".", "DF_USED", ",", "\n", "boundary", "=", "cfg", ".", "DATASET", ".", "BOUNDARY", ")", ")", "\n", "\n", "if", "args", ".", "train_with_eval", ":", "\n", "        ", "eval_transform", "=", "joint_augment", ".", "Compose", "(", "[", "\n", "joint_augment", ".", "To_PIL_Image", "(", ")", ",", "\n", "joint_augment", ".", "FixResize", "(", "256", ")", ",", "\n", "joint_augment", ".", "To_Tensor", "(", ")", "]", ")", "\n", "evalImg_transform", "=", "standard_augment", ".", "Compose", "(", "[", "\n", "standard_augment", ".", "normalize", "(", "[", "cfg", ".", "DATASET", ".", "MEAN", "]", ",", "[", "cfg", ".", "DATASET", ".", "STD", "]", ")", "]", ")", "\n", "\n", "if", "cfg", ".", "DATASET", ".", "NAME", "==", "'acdc'", ":", "\n", "            ", "test_set", "=", "AcdcDataset", "(", "data_list", "=", "cfg", ".", "DATASET", ".", "TEST_LIST", ",", "\n", "df_used", "=", "cfg", ".", "DATASET", ".", "DF_USED", ",", "df_norm", "=", "cfg", ".", "DATASET", ".", "DF_NORM", ",", "\n", "boundary", "=", "cfg", ".", "DATASET", ".", "BOUNDARY", ",", "\n", "joint_augment", "=", "eval_transform", ",", "\n", "augment", "=", "evalImg_transform", ")", "\n", "\n", "", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "test_set", ",", "\n", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", ",", "rank", "=", "dist", ".", "get_rank", "(", ")", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "shuffle", "=", "False", ",", "sampler", "=", "test_sampler", ",", "\n", "collate_fn", "=", "BatchCollator", "(", "size_divisible", "=", "32", ",", "df_used", "=", "cfg", ".", "DATASET", ".", "DF_USED", ",", "\n", "boundary", "=", "cfg", ".", "DATASET", ".", "BOUNDARY", ")", ")", "\n", "", "else", ":", "\n", "        ", "test_loader", "=", "None", "\n", "\n", "", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_optimizer": [[113, 122], ["torch.Adam", "model.parameters", "torch.SGD", "model.parameters"], "function", ["None"], ["", "def", "create_optimizer", "(", "model", ")", ":", "\n", "    ", "if", "cfg", ".", "TRAIN", ".", "OPTIMIZER", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "", "elif", "cfg", ".", "TRAIN", ".", "OPTIMIZER", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ",", "\n", "momentum", "=", "cfg", ".", "TRAIN", ".", "MOMENTUM", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_scheduler": [[123, 133], ["torch.lr_scheduler.LambdaLR", "max"], "function", ["None"], ["", "def", "create_scheduler", "(", "model", ",", "optimizer", ",", "total_steps", ",", "last_epoch", ")", ":", "\n", "    ", "def", "lr_lbmd", "(", "cur_epoch", ")", ":", "\n", "        ", "cur_decay", "=", "1", "\n", "for", "decay_step", "in", "cfg", ".", "TRAIN", ".", "DECAY_STEP_LIST", ":", "\n", "            ", "if", "cur_epoch", ">=", "decay_step", ":", "\n", "                ", "cur_decay", "=", "cur_decay", "*", "cfg", ".", "TRAIN", ".", "LR_DECAY", "\n", "", "", "return", "max", "(", "cur_decay", ",", "cfg", ".", "TRAIN", ".", "LR_CLIP", "/", "cfg", ".", "TRAIN", ".", "LR", ")", "\n", "\n", "", "lr_scheduler", "=", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lbmd", ",", "last_epoch", "=", "last_epoch", ")", "\n", "return", "lr_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_model": [[134, 152], ["importlib.import_module", "importlib.import_module", "getattr", "getattr.", "getattr", "getattr.", "getattr", "network.rfind", "network.rfind", "libs.configs.config_acdc.cfg"], "function", ["None"], ["", "def", "create_model", "(", "cfg", ")", ":", "\n", "    ", "network", "=", "cfg", ".", "TRAIN", ".", "NET", "\n", "\n", "module", "=", "'libs.network.'", "+", "network", "[", ":", "network", ".", "rfind", "(", "'.'", ")", "]", "\n", "model", "=", "network", "[", "network", ".", "rfind", "(", "'.'", ")", "+", "1", ":", "]", "\n", "\n", "mod", "=", "importlib", ".", "import_module", "(", "module", ")", "\n", "mod_func", "=", "importlib", ".", "import_module", "(", "'libs.network.train_functions'", ")", "\n", "net_func", "=", "getattr", "(", "mod", ",", "model", ")", "\n", "\n", "net", "=", "net_func", "(", "num_class", "=", "cfg", ".", "DATASET", ".", "NUM_CLASS", ")", "\n", "if", "network", "==", "'unet.U_Net'", ":", "\n", "        ", "train_func", "=", "getattr", "(", "mod_func", ",", "'model_fn_decorator'", ")", "\n", "", "elif", "network", "==", "'unet_df.U_NetDF'", ":", "\n", "        ", "net", "=", "net_func", "(", "selfeat", "=", "cfg", ".", "MODEL", ".", "SELFEATURE", ",", "num_class", "=", "cfg", ".", "DATASET", ".", "NUM_CLASS", ",", "shift_n", "=", "cfg", ".", "MODEL", ".", "SHIFT_N", ",", "auxseg", "=", "cfg", ".", "MODEL", ".", "AUXSEG", ")", "\n", "train_func", "=", "getattr", "(", "mod_func", ",", "'model_DF_decorator'", ")", "\n", "\n", "", "return", "net", ",", "train_func", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.train": [[153, 238], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "utils.comm.synchronize", "train.create_model", "utils.init_net.init_weights", "nn.parallel.DistributedDataParallel.cuda", "torch.parallel.DistributedDataParallel", "os.makedirs", "os.path.join", "train.create_logger", "create_logger.info", "create_logger.info", "vars().items", "create_logger.info", "vars().items", "train.create_dataloader", "train.create_optimizer", "train.create_scheduler", "create_logger.info", "os.path.join", "os.makedirs", "train_utils.Trainer", "train_utils.Trainer.train", "create_logger.info", "utils.comm.get_rank", "create_logger.info", "create_logger.info", "utils.comm.get_rank", "tensorboardX.SummaryWriter", "train_utils.train_utils.load_checkpoint", "libs.losses.create_losses.Total_loss", "torch.CrossEntropyLoss", "os.environ.keys", "vars", "vars", "isinstance", "model_fn_decorator", "model_fn_decorator", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.synchronize", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_model", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet.init_weights", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.create_logger", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.create_dataloader", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_optimizer", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.train.create_scheduler", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer.train", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.load_checkpoint", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.model_fn_decorator", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.model_fn_decorator"], ["", "def", "train", "(", ")", ":", "\n", "    ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ",", "init_method", "=", "\"env://\"", ")", "\n", "synchronize", "(", ")", "\n", "\n", "# create dataloader & network & optimizer", "\n", "model", ",", "model_fn_decorator", "=", "create_model", "(", "cfg", ")", "\n", "init_weights", "(", "model", ",", "init_type", "=", "'kaiming'", ")", "\n", "# model.to('cuda')", "\n", "model", ".", "cuda", "(", ")", "\n", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ")", "\n", "\n", "root_result_dir", "=", "args", ".", "output_dir", "\n", "os", ".", "makedirs", "(", "root_result_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "\"log_train.txt\"", ")", "\n", "logger", "=", "create_logger", "(", "log_file", ",", "get_rank", "(", ")", ")", "\n", "logger", ".", "info", "(", "\"**********************Start logging**********************\"", ")", "\n", "\n", "# log to file", "\n", "gpu_list", "=", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ".", "keys", "(", ")", "else", "'ALL'", "\n", "logger", ".", "info", "(", "\"CUDA_VISIBLE_DEVICES=%s\"", "%", "gpu_list", ")", "\n", "\n", "for", "key", ",", "val", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{:16} {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"***********************config infos**********************\"", ")", "\n", "for", "key", ",", "val", "in", "vars", "(", "cfg", ")", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{:16} {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "# log tensorboard", "\n", "", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "tb_log", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "\"tensorboard\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "tb_log", "=", "None", "\n", "\n", "\n", "", "train_loader", ",", "test_loader", "=", "create_dataloader", "(", "logger", ")", "\n", "\n", "optimizer", "=", "create_optimizer", "(", "model", ")", "\n", "\n", "# load checkpoint if it is possible", "\n", "start_epoch", "=", "it", "=", "best_res", "=", "0", "\n", "last_epoch", "=", "-", "1", "\n", "if", "args", ".", "ckpt", "is", "not", "None", ":", "\n", "        ", "pure_model", "=", "model", ".", "module", "if", "isinstance", "(", "model", ",", "(", "torch", ".", "nn", ".", "DataParallel", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ")", "else", "model", "\n", "it", ",", "start_epoch", ",", "best_res", "=", "load_checkpoint", "(", "pure_model", ",", "optimizer", ",", "args", ".", "ckpt", ",", "logger", ")", "\n", "last_epoch", "=", "start_epoch", "+", "1", "\n", "\n", "", "lr_scheduler", "=", "create_scheduler", "(", "model", ",", "optimizer", ",", "total_steps", "=", "len", "(", "train_loader", ")", "*", "args", ".", "epochs", ",", "\n", "last_epoch", "=", "last_epoch", ")", "\n", "\n", "if", "cfg", ".", "DATASET", ".", "DF_USED", ":", "\n", "        ", "criterion", "=", "Total_loss", "(", "boundary", "=", "cfg", ".", "DATASET", ".", "BOUNDARY", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "\n", "# start training", "\n", "", "logger", ".", "info", "(", "'**********************Start training**********************'", ")", "\n", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "\"ckpt\"", ")", "\n", "os", ".", "makedirs", "(", "ckpt_dir", ",", "exist_ok", "=", "True", ")", "\n", "trainer", "=", "train_utils", ".", "Trainer", "(", "model", ",", "\n", "model_fn", "=", "model_fn_decorator", "(", ")", ",", "\n", "criterion", "=", "criterion", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "ckpt_dir", "=", "ckpt_dir", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ",", "\n", "model_fn_eval", "=", "model_fn_decorator", "(", ")", ",", "\n", "tb_log", "=", "tb_log", ",", "\n", "logger", "=", "logger", ",", "\n", "eval_frequency", "=", "1", ",", "\n", "grad_norm_clip", "=", "cfg", ".", "TRAIN", ".", "GRAD_NORM_CLIP", ",", "\n", "cfg", "=", "cfg", ")", "\n", "\n", "trainer", ".", "train", "(", "start_it", "=", "it", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "n_epochs", "=", "args", ".", "epochs", ",", "\n", "train_loader", "=", "train_loader", ",", "\n", "test_loader", "=", "test_loader", ",", "\n", "ckpt_save_interval", "=", "args", ".", "ckpt_save_interval", ",", "\n", "lr_scheduler_each_iter", "=", "False", ",", "\n", "best_res", "=", "best_res", ")", "\n", "\n", "logger", ".", "info", "(", "'**********************End training**********************'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_utils.personTo4Ddata": [[10, 32], ["enumerate", "numpy.array().transpose", "numpy.array().transpose", "sliceofp.append", "imgs[].append", "gts[].append", "numpy.array", "numpy.array", "personname.split", "time_path.append", "h5py.File", "h5py.File"], "function", ["None"], ["def", "personTo4Ddata", "(", "personname", ",", "test_list", ")", ":", "\n", "    ", "sliceofp", "=", "[", "]", "\n", "for", "tl", "in", "test_list", ":", "\n", "        ", "if", "'/'", ".", "join", "(", "personname", ".", "split", "(", "'-'", ")", ")", "in", "tl", ":", "\n", "            ", "sliceofp", ".", "append", "(", "tl", ")", "\n", "\n", "", "", "imgs", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "gts", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "ti", ",", "time_i", "in", "enumerate", "(", "[", "\"ES\"", ",", "\"ED\"", "]", ")", ":", "\n", "        ", "time_path", "=", "[", "]", "\n", "\n", "for", "sp", "in", "sliceofp", ":", "\n", "            ", "if", "time_i", "in", "sp", ":", "\n", "                ", "time_path", ".", "append", "(", "sp", ")", "\n", "\n", "", "", "for", "tp", "in", "time_path", ":", "\n", "            ", "imgs", "[", "ti", "]", ".", "append", "(", "h5py", ".", "File", "(", "tp", ",", "'r'", ")", "[", "'image'", "]", ")", "\n", "gts", "[", "ti", "]", ".", "append", "(", "h5py", ".", "File", "(", "tp", ",", "'r'", ")", "[", "'label'", "]", ")", "\n", "\n", "", "", "imgs", "=", "np", ".", "array", "(", "imgs", ")", ".", "transpose", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "gts", "=", "np", ".", "array", "(", "gts", ")", ".", "transpose", "(", "1", ",", "2", ",", "3", ",", "0", ")", "\n", "return", "imgs", ",", "gts", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_utils.test_it": [[33, 52], ["model.eval", "imgs.to.to", "model", "torch.functional.softmax", "torch.max", "torch.max", "preds.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["", "def", "test_it", "(", "model", ",", "data", ",", "device", "=", "\"cuda\"", ",", "used_df", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "imgs", "=", "data", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "# gts = gts.to(device)", "\n", "\n", "net_out", "=", "model", "(", "imgs", ")", "\n", "if", "used_df", ":", "\n", "        ", "preds_out", "=", "net_out", "[", "0", "]", "\n", "preds_df", "=", "net_out", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "preds_out", "=", "net_out", "[", "0", "]", "\n", "preds_df", "=", "None", "\n", "", "preds_out", "=", "nn", ".", "functional", ".", "softmax", "(", "preds_out", ",", "dim", "=", "1", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "preds_out", ",", "1", ")", "\n", "preds", "=", "preds", ".", "unsqueeze", "(", "1", ")", "# (N, 1, *)", "\n", "\n", "return", "preds", ",", "preds_df", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_utils.test_person": [[53, 88], ["range", "len", "numpy.zeros", "preds.append", "range", "enumerate", "imgs[].size", "imgs[].size", "imgs[].size", "math.ceil", "test_utils.test_it", "utils.image_list.to_image_list", "test_utils.test_it", "len", "pred.cpu().numpy", "pred.cpu().numpy", "len", "len", "pred.cpu", "pred.cpu"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.test_it", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.test_it"], ["", "def", "test_person", "(", "model", ",", "imgs", ",", "multi_batches", "=", "False", ",", "used_df", "=", "False", ")", ":", "\n", "    ", "\"\"\" imgs: (times, slices, H, W)\n        preds: (times, slices, H, W)\n    \"\"\"", "\n", "preds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "        ", "preds_timei", "=", "np", ".", "zeros", "(", "[", "imgs", "[", "i", "]", ".", "size", "(", "0", ")", ",", "imgs", "[", "i", "]", ".", "size", "(", "2", ")", ",", "imgs", "[", "i", "]", ".", "size", "(", "3", ")", "]", ")", "\n", "\n", "if", "multi_batches", ":", "\n", "            ", "batch_size", "=", "32", "\n", "for", "bs", "in", "range", "(", "math", ".", "ceil", "(", "len", "(", "imgs", "[", "i", "]", ")", "/", "batch_size", ")", ")", ":", "\n", "                ", "st", "=", "batch_size", "*", "bs", "\n", "end", "=", "st", "+", "batch_size", "if", "(", "st", "+", "batch_size", ")", "<=", "len", "(", "imgs", "[", "i", "]", ")", "else", "len", "(", "imgs", "[", "i", "]", ")", "\n", "# data, origin_shape = to_image_list(imgs[i][st:st+batch_size], size_divisible=32, return_size=True)", "\n", "data", "=", "imgs", "[", "i", "]", "[", "st", ":", "end", "]", "\n", "origin_shape", "=", "imgs", "[", "i", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "\n", "pred", ",", "_", "=", "test_it", "(", "model", ",", "data", ",", "used_df", "=", "used_df", ")", "\n", "preds_timei", "[", "st", ":", "end", ",", "...", "]", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "0", ",", ":", "origin_shape", "[", "0", "]", ",", ":", "origin_shape", "[", "1", "]", "]", "\n", "# ===========================", "\n", "# data, origin_shape = to_image_list(imgs[i], size_divisible=32, return_size=True)", "\n", "# pred, _ = test_it(model, data, used_df=used_df)", "\n", "\n", "# for j in range(imgs[i].shape[0]):", "\n", "#     preds_timei[j, ...] = pred.cpu().numpy()[j, :, :origin_shape[j][0], :origin_shape[j][1]]", "\n", "", "", "else", ":", "\n", "            ", "for", "j", ",", "pt", "in", "enumerate", "(", "imgs", "[", "i", "]", ")", ":", "\n", "                ", "data", "=", "[", "pt", "]", "\n", "data", ",", "origin_shape", "=", "to_image_list", "(", "data", ",", "size_divisible", "=", "32", ",", "return_size", "=", "True", ")", "\n", "pred", ",", "_", "=", "test_it", "(", "model", ",", "data", ")", "\n", "preds_timei", "[", "j", ",", "...", "]", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", ",", ":", "origin_shape", "[", "0", "]", "[", "0", "]", ",", ":", "origin_shape", "[", "0", "]", "[", "1", "]", "]", "\n", "\n", "", "", "preds", ".", "append", "(", "preds_timei", ")", "\n", "\n", "", "return", "preds", "\n", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.create_logger": [[40, 48], ["logging.basicConfig", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger().addHandler", "logging.getLogger", "logging.Formatter", "logging.getLogger"], "function", ["None"], ["", "def", "create_logger", "(", "log_file", ")", ":", "\n", "    ", "log_format", "=", "'%(asctime)s  %(levelname)5s  %(message)s'", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "DEBUG", ",", "format", "=", "log_format", ",", "filename", "=", "log_file", ")", "\n", "console", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "console", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "console", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "logging", ".", "getLogger", "(", "__name__", ")", ".", "addHandler", "(", "console", ")", "\n", "return", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.create_dataloader": [[49, 65], ["libs.Compose", "libs.Compose", "torch.utils.data.DataLoader", "libs.datasets.AcdcDataset", "libs.To_PIL_Image", "libs.FixResize", "libs.To_Tensor", "libs.normalize", "libs.datasets.collate_batch.BatchCollator"], "function", ["None"], ["", "def", "create_dataloader", "(", ")", ":", "\n", "    ", "eval_transform", "=", "joint_augment", ".", "Compose", "(", "[", "\n", "joint_augment", ".", "To_PIL_Image", "(", ")", ",", "\n", "joint_augment", ".", "FixResize", "(", "256", ")", ",", "\n", "joint_augment", ".", "To_Tensor", "(", ")", "]", ")", "\n", "evalImg_transform", "=", "standard_augment", ".", "Compose", "(", "[", "\n", "standard_augment", ".", "normalize", "(", "[", "cfg", ".", "DATASET", ".", "MEAN", "]", ",", "[", "cfg", ".", "DATASET", ".", "STD", "]", ")", "]", ")", "\n", "\n", "if", "cfg", ".", "DATASET", ".", "NAME", "==", "\"acdc\"", ":", "\n", "        ", "test_set", "=", "AcdcDataset", "(", "cfg", ".", "DATASET", ".", "TEST_LIST", ",", "df_used", "=", "True", ",", "joint_augment", "=", "eval_transform", ",", "\n", "augment", "=", "evalImg_transform", ")", "\n", "\n", "", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "1", ",", "pin_memory", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "BatchCollator", "(", "size_divisible", "=", "32", ",", "df_used", "=", "True", ")", ")", "\n", "return", "test_loader", ",", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.cal_perfer": [[66, 83], ["range", "tb_dict[].append", "tb_dict[].append", "tb_dict[].append", "LV_dice.append", "RV_dice.append", "MYO_dice.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "utils.metrics.dice", "utils.metrics.dice", "utils.metrics.dice"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice"], ["", "def", "cal_perfer", "(", "preds", ",", "masks", ",", "tb_dict", ")", ":", "\n", "    ", "LV_dice", "=", "[", "]", "# 1", "\n", "MYO_dice", "=", "[", "]", "# 2", "\n", "RV_dice", "=", "[", "]", "# 3", "\n", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "LV_dice", ".", "append", "(", "dice", "(", "preds", "[", "i", ",", "1", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "1", ",", ":", ",", ":", "]", ")", ")", "\n", "RV_dice", ".", "append", "(", "dice", "(", "preds", "[", "i", ",", "3", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "3", ",", ":", ",", ":", "]", ")", ")", "\n", "MYO_dice", ".", "append", "(", "dice", "(", "preds", "[", "i", ",", "2", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "2", ",", ":", ",", ":", "]", ")", ")", "\n", "# LV_dice.append(dice(preds[i, 3,:,:],masks[i,1,:,:]))", "\n", "# RV_dice.append(dice(preds[i, 1, :, :], masks[i, 3, :, :]))", "\n", "# MYO_dice.append(dice(preds[i, 2, :, :], masks[i, 2, :, :]))", "\n", "\n", "", "tb_dict", "[", "\"LV_dice\"", "]", ".", "append", "(", "np", ".", "mean", "(", "LV_dice", ")", ")", "\n", "tb_dict", "[", "\"RV_dice\"", "]", ".", "append", "(", "np", ".", "mean", "(", "RV_dice", ")", ")", "\n", "tb_dict", "[", "\"MYO_dice\"", "]", ".", "append", "(", "np", ".", "mean", "(", "MYO_dice", ")", ")", "\n", "return", "np", ".", "mean", "(", "LV_dice", ")", ",", "np", ".", "mean", "(", "RV_dice", ")", ",", "np", ".", "mean", "(", "MYO_dice", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.make_one_hot": [[84, 99], ["numpy.array", "tuple", "torch.zeros().scatter_", "torch.zeros().scatter_", "input.cpu().long", "torch.zeros", "torch.zeros", "input.cpu"], "function", ["None"], ["", "def", "make_one_hot", "(", "input", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Convert class index tensor to one hot encoding tensor.\n    Args:\n         input: A tensor of shape [N, 1, *]\n         num_classes: An int of number of class\n    Returns:\n        A tensor of shape [N, num_classes, *]\n    \"\"\"", "\n", "shape", "=", "np", ".", "array", "(", "input", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "num_classes", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "result", "=", "torch", ".", "zeros", "(", "shape", ")", ".", "scatter_", "(", "1", ",", "input", ".", "cpu", "(", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "# result = result.scatter_(1, input.cpu(), 1)", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.test_it": [[100, 120], ["model.eval", "imgs.to.to", "gts.to.to", "model", "torch.functional.softmax", "torch.max", "torch.max", "preds.unsqueeze.unsqueeze", "len"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["", "def", "test_it", "(", "model", ",", "data", ",", "device", "=", "\"cuda\"", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "imgs", ",", "gts", "=", "data", "[", ":", "2", "]", "\n", "gts_df", "=", "data", "[", "2", "]", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "gts", "=", "gts", ".", "to", "(", "device", ")", "\n", "\n", "net_out", "=", "model", "(", "imgs", ")", "\n", "if", "len", "(", "net_out", ")", ">", "1", ":", "\n", "        ", "preds_out", "=", "net_out", "[", "0", "]", "\n", "preds_df", "=", "net_out", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "preds_out", "=", "net_out", "[", "0", "]", "\n", "preds_df", "=", "None", "\n", "", "preds_out", "=", "nn", ".", "functional", ".", "softmax", "(", "preds_out", ",", "dim", "=", "1", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "preds_out", ",", "1", ")", "\n", "preds", "=", "preds", ".", "unsqueeze", "(", "1", ")", "# (N, 1, *)", "\n", "\n", "return", "preds", ",", "preds_df", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.vis_it": [[121, 153], ["utils.vis_utils.mask2png().astype", "utils.vis_utils.mask2png().astype", "numpy.stack", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "utils.vis_utils.mask2png", "utils.vis_utils.mask2png", "np.stack.min", "np.stack.max", "np.stack.min"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.mask2png", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.mask2png"], ["", "def", "vis_it", "(", "pred", ",", "gt", ",", "img", "=", "None", ",", "filename", "=", "None", ",", "infos", "=", "None", ")", ":", "\n", "    ", "h", ",", "w", "=", "pred", ".", "shape", "\n", "# gt_contours = masks_to_contours(gt)", "\n", "# mask = np.hstack([pred, np.zeros((h, 1)), gt])", "\n", "# gt_contours = np.hstack([gt_contours, np.zeros((h, 1)), np.zeros_like(gt)])", "\n", "# im_rgb = mask2png(mask).astype(np.int16)", "\n", "# im_rgb[:, w, :] = [255, 255, 255]", "\n", "# im_rgb = apply_mask(im_rgb, gt_contours, [255, 255, 255], 0.8)", "\n", "pred_im", "=", "mask2png", "(", "pred", ")", ".", "astype", "(", "np", ".", "int16", ")", "\n", "gt_im", "=", "mask2png", "(", "gt", ")", ".", "astype", "(", "np", ".", "int16", ")", "\n", "\n", "img", "=", "(", "img", "-", "img", ".", "min", "(", ")", ")", "/", "(", "img", ".", "max", "(", ")", "-", "img", ".", "min", "(", ")", ")", "*", "255", "\n", "img", "=", "np", ".", "stack", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "2", ")", "\n", "# img = img_mask_png(img, gt, alpha=0.1)", "\n", "\n", "# im_rgb = np.hstack([im_rgb, 255*np.ones((h, 1, 3)), img])", "\n", "\n", "# cv2.putText(im_rgb, \"prediction\", (2,h-4),", "\n", "#             fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=0.4, color=(255, 255, 255), thickness=1)", "\n", "# cv2.putText(im_rgb, \"ground truth\", (w, h-4),", "\n", "#             fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=0.4, color=(255, 255, 255), thickness=1)", "\n", "\n", "# st_pos = 15", "\n", "# if infos is not None:", "\n", "#     for info in infos:", "\n", "#         cv2.putText(im_rgb, info+\": {}\".format(infos[info]), (2, st_pos),", "\n", "#                     fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=0.4, color=(255, 255, 255), thickness=1)", "\n", "#         st_pos += 10", "\n", "\n", "cv2", ".", "imwrite", "(", "filename", "+", "\"_img.png\"", ",", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "imwrite", "(", "filename", "+", "\"_pred.png\"", ",", "pred_im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "cv2", ".", "imwrite", "(", "filename", "+", "\"_gt.png\"", ",", "gt_im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.vis_df": [[154, 178], ["numpy.save", "numpy.arctan2", "numpy.sum", "numpy.arctan2", "numpy.sum", "numpy.hstack().astype", "cv2.applyColorMap", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "np.sum.max", "np.sum.max", "numpy.hstack", "np.arctan2.min", "np.arctan2.max", "np.arctan2.min", "np.arctan2.min", "np.arctan2.max", "np.arctan2.min", "numpy.zeros", "numpy.zeros", "numpy.zeros"], "function", ["None"], ["", "def", "vis_df", "(", "pred_df", ",", "gt_df", ",", "filename", ",", "infos", "=", "None", ")", ":", "\n", "    ", "_", ",", "h", ",", "w", "=", "pred_df", ".", "shape", "\n", "\n", "# save .npy files", "\n", "np", ".", "save", "(", "filename", "+", "'.npy'", ",", "[", "pred_df", ",", "gt_df", "]", ")", "\n", "\n", "theta", "=", "np", ".", "arctan2", "(", "gt_df", "[", "1", ",", "...", "]", ",", "gt_df", "[", "0", ",", "...", "]", ")", "\n", "degree_gt", "=", "(", "theta", "-", "theta", ".", "min", "(", ")", ")", "/", "(", "theta", ".", "max", "(", ")", "-", "theta", ".", "min", "(", ")", ")", "*", "255", "\n", "# degree_gt = theta * 360", "\n", "mag_gt", "=", "np", ".", "sum", "(", "gt_df", "**", "2", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "mag_gt", "=", "mag_gt", "/", "mag_gt", ".", "max", "(", ")", "*", "255", "\n", "\n", "theta", "=", "np", ".", "arctan2", "(", "pred_df", "[", "1", ",", "...", "]", ",", "pred_df", "[", "0", ",", "...", "]", ")", "\n", "degree_df", "=", "(", "theta", "-", "theta", ".", "min", "(", ")", ")", "/", "(", "theta", ".", "max", "(", ")", "-", "theta", ".", "min", "(", ")", ")", "*", "255", "\n", "# degree_df = theta * 360", "\n", "magnitude", "=", "np", ".", "sum", "(", "pred_df", "**", "2", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "magnitude", "=", "magnitude", "/", "magnitude", ".", "max", "(", ")", "*", "255", "\n", "\n", "im", "=", "np", ".", "hstack", "(", "[", "magnitude", ",", "np", ".", "zeros", "(", "(", "h", ",", "1", ")", ")", ",", "mag_gt", ",", "np", ".", "zeros", "(", "(", "h", ",", "1", ")", ")", ",", "degree_df", ",", "np", ".", "zeros", "(", "(", "h", ",", "1", ")", ")", ",", "degree_gt", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "im", "=", "cv2", ".", "applyColorMap", "(", "im", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "cv2", ".", "imwrite", "(", "filename", "+", "\"_df_pred_mag.png\"", ",", "im", "[", ":", "h", ",", ":", "w", ",", "...", "]", ")", "\n", "cv2", ".", "imwrite", "(", "filename", "+", "\"_df_gt_mag.png\"", ",", "im", "[", ":", "h", ",", "w", "+", "1", ":", "2", "*", "w", "+", "1", ",", "...", "]", ")", "\n", "cv2", ".", "imwrite", "(", "filename", "+", "\"_df_pred_degree.png\"", ",", "im", "[", ":", "h", ",", "2", "*", "w", "+", "2", ":", "3", "*", "w", "+", "2", ",", "...", "]", ")", "\n", "cv2", ".", "imwrite", "(", "filename", "+", "\"_df_gt_degree.png\"", ",", "im", "[", ":", "h", ",", "3", "*", "w", "+", "3", ":", ",", "...", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.test": [[180, 240], ["os.makedirs", "os.path.join", "test_df_vis.create_logger", "vars().items", "libs.network.U_Net.cuda", "test_df_vis.create_dataloader", "torch.load", "torch.load", "libs.network.U_Net.load_state_dict", "enumerate", "print", "create_logger.info", "create_logger.info", "create_logger.info", "create_logger.info", "create_logger.info", "create_logger.info", "create_logger.info", "libs.network.U_NetDF", "torch.DataParallel", "test_df_vis.test_it", "gt.to.to", "test_df_vis.cal_perfer", "print", "vars", "libs.network.U_Net", "len", "test_df_vis.make_one_hot", "test_df_vis.make_one_hot", "test_df_vis.vis_it", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "test_df_vis.vis_df", "len", "numpy.mean", "list", "pred.cpu().numpy", "gt.to.cpu().numpy", "data[].cpu().numpy", "os.path.join", "len", "list", "dice_dict.values", "str", "pred_df.detach().cpu().numpy", "gt_df.cpu().numpy", "os.path.join", "dice_dict.values", "pred.cpu", "gt.to.cpu", "data[].cpu", "str", "pred_df.detach().cpu", "gt_df.cpu", "pred_df.detach"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.create_logger", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.create_dataloader", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.test_it", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.cal_perfer", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.vis_it", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_df_vis.vis_df"], ["", "def", "test", "(", ")", ":", "\n", "    ", "root_result_dir", "=", "args", ".", "output_dir", "\n", "os", ".", "makedirs", "(", "root_result_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "args", ".", "log_file", ")", "\n", "logger", "=", "create_logger", "(", "log_file", ")", "\n", "\n", "for", "key", ",", "val", "in", "vars", "(", "args", ")", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"{:16} {}\"", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n", "# create dataset & dataloader & network", "\n", "", "if", "args", ".", "used_df", "==", "'U_NetDF'", ":", "\n", "        ", "model", "=", "U_NetDF", "(", "selfeat", "=", "args", ".", "selfeat", ",", "num_class", "=", "4", ",", "auxseg", "=", "True", ")", "\n", "", "elif", "args", ".", "used_df", "==", "'U_Net'", ":", "\n", "        ", "model", "=", "U_Net", "(", "num_class", "=", "4", ")", "\n", "\n", "", "if", "args", ".", "mgpus", "is", "not", "None", "and", "len", "(", "args", ".", "mgpus", ")", ">", "2", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "test_loader", ",", "test_set", "=", "create_dataloader", "(", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "model_path1", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ")", "\n", "\n", "dice_dict", "=", "{", "\"LV_dice\"", ":", "[", "]", ",", "\n", "\"RV_dice\"", ":", "[", "]", ",", "\n", "\"MYO_dice\"", ":", "[", "]", "}", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "i", "!=", "23", ":", "continue", "\n", "# i = 5405", "\n", "# data = test_set[5405]", "\n", "# data = [data[0][None], data[1][None], data[2][None]]", "\n", "\n", "pred", ",", "pred_df", "=", "test_it", "(", "model", ",", "data", "[", ":", "3", "]", ")", "\n", "\n", "_", ",", "gt", ",", "gt_df", "=", "data", "[", ":", "3", "]", "\n", "gt", "=", "gt", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "L", ",", "R", ",", "MYO", "=", "cal_perfer", "(", "make_one_hot", "(", "pred", ",", "4", ")", ",", "make_one_hot", "(", "gt", ",", "4", ")", ",", "dice_dict", ")", "\n", "\n", "data_info", "=", "test_set", ".", "data_infos", "[", "i", "]", "\n", "if", "args", ".", "vis", ":", "\n", "# if 0.7 <= (L + R + MYO) / 3 < 0.8:", "\n", "            ", "vis_it", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ",", "gt", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ",", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", ",", "0", "]", ",", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "str", "(", "i", ")", ")", ")", "\n", "if", "pred_df", "is", "not", "None", ":", "\n", "                ", "vis_df", "(", "pred_df", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "gt_df", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "root_result_dir", ",", "str", "(", "i", ")", ")", ")", "\n", "\n", "", "", "print", "(", "\"\\r{}/{} {:.0%}   {}\"", ".", "format", "(", "i", ",", "len", "(", "test_set", ")", ",", "i", "/", "len", "(", "test_set", ")", ",", "\n", "np", ".", "mean", "(", "list", "(", "dice_dict", ".", "values", "(", ")", ")", ")", ")", ",", "end", "=", "\"\"", ")", "\n", "", "print", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"2D Dice Metirc:\"", ")", "\n", "logger", ".", "info", "(", "\"Total {}\"", ".", "format", "(", "len", "(", "test_set", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"LV_dice: {}\"", ".", "format", "(", "np", ".", "mean", "(", "dice_dict", "[", "\"LV_dice\"", "]", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"RV_dice: {}\"", ".", "format", "(", "np", ".", "mean", "(", "dice_dict", "[", "\"RV_dice\"", "]", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"MYO_dice: {}\"", ".", "format", "(", "np", ".", "mean", "(", "dice_dict", "[", "\"MYO_dice\"", "]", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"Mean_dice: {}\"", ".", "format", "(", "np", ".", "mean", "(", "list", "(", "dice_dict", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.MultiShellScripts.test_df": [[4, 14], ["os.path.join", "os.system", "os.path.join", "os.path.join"], "function", ["None"], ["def", "test_df", "(", "log_dir", ",", "epoch_i", "=", "0", ",", "best_model", "=", "False", ")", ":", "\n", "    ", "OUTPUT_DIR", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"eval\"", ")", "\n", "if", "best_model", ":", "\n", "        ", "MODEL_PATH", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"ckpt\"", ",", "\"model_best.pth\"", ")", "\n", "", "else", ":", "\n", "        ", "MODEL_PATH", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"ckpt\"", ",", "\"checkpoint_epoch_{}.pth\"", ".", "format", "(", "epoch_i", ")", ")", "\n", "\n", "", "commands", "=", "\"python tools/test_df.py --used_df U_NetDF --selfeat --mgpus 6 --model_path1 {} \\\n                    --output_dir {} --log_file ../log_evaluation_vis.txt --vis\"", ".", "format", "(", "MODEL_PATH", ",", "OUTPUT_DIR", ")", "\n", "os", ".", "system", "(", "commands", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.MultiShellScripts.train": [[15, 17], ["os.system"], "function", ["None"], ["", "def", "train", "(", ")", ":", "\n", "    ", "os", ".", "system", "(", "\"python -m torch.distributed.launch --nproc_per_node 2 --master_port $RANDOM tools/train.py --batch_size 24 --mgpus 2,3 --output_dir logs/acdc_logs/log_temp --train_with_eval\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer.__init__": [[53, 66], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "model_fn", ",", "criterion", ",", "optimizer", ",", "ckpt_dir", ",", "lr_scheduler", ",", "model_fn_eval", ",", "\n", "tb_log", ",", "logger", ",", "eval_frequency", "=", "1", ",", "grad_norm_clip", "=", "1.0", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "self", ".", "model", ",", "self", ".", "model_fn", ",", "self", ".", "optimizer", ",", "self", ".", "model_fn_eval", "=", "model", ",", "model_fn", ",", "optimizer", ",", "model_fn_eval", "\n", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "ckpt_dir", "=", "ckpt_dir", "\n", "self", ".", "tb_log", "=", "tb_log", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "eval_frequency", "=", "eval_frequency", "\n", "self", ".", "grad_norm_clip", "=", "grad_norm_clip", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "caches_4D", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer._train_it": [[67, 76], ["train_utils.Trainer.model.train", "train_utils.Trainer.optimizer.zero_grad", "train_utils.Trainer.model_fn", "loss.backward", "train_utils.Trainer.optimizer.step", "loss.item"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer.train"], ["", "def", "_train_it", "(", "self", ",", "batch", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "model_fn", "(", "self", ".", "model", ",", "batch", ",", "self", ".", "criterion", ",", "perfermance", "=", "False", ",", "epoch", "=", "0", ")", "\n", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", ",", "tb_dict", ",", "disp_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer.eval_epoch": [[77, 107], ["train_utils.Trainer.model.eval", "numpy.random.choice", "enumerate", "tb_dict.items", "utils.comm.get_rank", "print", "len", "train_utils.Trainer.optimizer.zero_grad", "train_utils.Trainer.model_fn_eval", "loss.item", "tb_dict.items", "utils.comm.get_rank", "print", "utils.comm.get_rank", "print", "eval_dict.get", "eval_dict.get", "len", "len"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank"], ["", "def", "eval_epoch", "(", "self", ",", "d_loader", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "eval_dict", "=", "{", "}", "\n", "total_loss", "=", "0", "\n", "\n", "# eval one epoch", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "print", "(", "\"evaluating...\"", ")", "\n", "sel_num", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "d_loader", ")", ",", "size", "=", "1", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "d_loader", ",", "0", ")", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "vis", "=", "True", "if", "i", "==", "sel_num", "else", "False", "\n", "\n", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "model_fn_eval", "(", "self", ".", "model", ",", "data", ",", "self", ".", "criterion", ",", "perfermance", "=", "True", ",", "vis", "=", "vis", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "\"vis\"", "not", "in", "k", ":", "\n", "                    ", "eval_dict", "[", "k", "]", "=", "eval_dict", ".", "get", "(", "k", ",", "0", ")", "+", "v", "\n", "", "else", ":", "\n", "                    ", "eval_dict", "[", "k", "]", "=", "v", "\n", "", "", "if", "get_rank", "(", ")", "==", "0", ":", "print", "(", "\"\\r{}/{} {:.0%}\\r\"", ".", "format", "(", "i", ",", "len", "(", "d_loader", ")", ",", "i", "/", "len", "(", "d_loader", ")", ")", ",", "end", "=", "''", ")", "\n", "", "if", "get_rank", "(", ")", "==", "0", ":", "print", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "\"vis\"", "not", "in", "k", ":", "\n", "                ", "eval_dict", "[", "k", "]", "=", "eval_dict", ".", "get", "(", "k", ",", "0", ")", "/", "(", "i", "+", "1", ")", "\n", "\n", "", "", "return", "total_loss", "/", "(", "i", "+", "1", ")", ",", "eval_dict", ",", "disp_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer.train": [[108, 178], ["range", "enumerate", "train_utils.Trainer.lr_scheduler.step", "train_utils.Trainer._train_it", "train_utils.Trainer.lr_scheduler.get_lr", "utils.comm.get_rank", "print", "disp_dict.items", "print", "train_utils.Trainer.tb_log.add_scalar", "train_utils.Trainer.tb_log.add_scalar", "tb_dict.items", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "train_utils.Trainer.eval_epoch", "eval_dict.items", "utils.comm.get_rank", "numpy.mean", "train_utils.Trainer.logger.info", "max", "os.path.join", "train_utils.save_checkpoint", "print", "train_utils.Trainer.tb_log.add_scalar", "train_utils.load_checkpoint", "train_utils.checkpoint_state", "train_utils.Trainer.tb_log.add_scalar", "train_utils.Trainer.tb_log.add_images", "train_utils.Trainer.tb_log.add_images", "train_utils.Trainer.tb_log.add_images", "len", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer._train_it", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer.eval_epoch", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.save_checkpoint", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.load_checkpoint", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.checkpoint_state"], ["", "def", "train", "(", "self", ",", "start_it", ",", "start_epoch", ",", "n_epochs", ",", "train_loader", ",", "test_loader", "=", "None", ",", "\n", "ckpt_save_interval", "=", "5", ",", "lr_scheduler_each_iter", "=", "False", ",", "best_res", "=", "0", ")", ":", "\n", "        ", "eval_frequency", "=", "self", ".", "eval_frequency", "if", "self", ".", "eval_frequency", "else", "1", "\n", "\n", "it", "=", "start_it", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "n_epochs", ")", ":", "\n", "            ", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "step", "(", "epoch", ")", "\n", "\n", "", "for", "cur_it", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "cur_lr", "=", "self", ".", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "loss", ",", "tb_dict", ",", "disp_dict", "=", "self", ".", "_train_it", "(", "batch", ",", "epoch", ")", "\n", "it", "+=", "1", "\n", "\n", "# print infos", "\n", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "print", "(", "\"Epoch/train:{}({:.0%})/{}({:.0%})\"", ".", "format", "(", "epoch", ",", "epoch", "/", "n_epochs", ",", "\n", "cur_it", ",", "cur_it", "/", "len", "(", "train_loader", ")", ")", ",", "end", "=", "\"\"", ")", "\n", "for", "k", ",", "v", "in", "disp_dict", ".", "items", "(", ")", ":", "\n", "                        ", "print", "(", "\", \"", ",", "k", "+", "\": {:.6}\"", ".", "format", "(", "v", ")", ",", "end", "=", "\"\"", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "\n", "# tensorboard logs", "\n", "", "if", "self", ".", "tb_log", "is", "not", "None", ":", "\n", "                    ", "self", ".", "tb_log", ".", "add_scalar", "(", "\"train_loss\"", ",", "loss", ",", "it", ")", "\n", "self", ".", "tb_log", ".", "add_scalar", "(", "\"learning_rate\"", ",", "cur_lr", ",", "it", ")", "\n", "for", "key", ",", "val", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "                        ", "self", ".", "tb_log", ".", "add_scalar", "(", "'train_'", "+", "key", ",", "val", ",", "it", ")", "\n", "\n", "# save trained model", "\n", "", "", "", "trained_epoch", "=", "epoch", "\n", "# if trained_epoch % ckpt_save_interval == 0:", "\n", "#     ckpt_name = os.path.join(self.ckpt_dir, \"checkpoint_epoch_%d\" % trained_epoch)", "\n", "#     save_checkpoint(checkpoint_state(self.model, self.optimizer, trained_epoch, it),", "\n", "#                     filename=ckpt_name)", "\n", "\n", "# eval one epoch", "\n", "if", "(", "epoch", "%", "eval_frequency", ")", "==", "0", "and", "(", "test_loader", "is", "not", "None", ")", ":", "\n", "                ", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "                    ", "val_loss", ",", "eval_dict", ",", "disp_dict", "=", "self", ".", "eval_epoch", "(", "test_loader", ")", "\n", "# mean_3D = self.metric_3D(self.model, self.cfg)", "\n", "\n", "", "if", "self", ".", "tb_log", "is", "not", "None", ":", "\n", "                    ", "for", "key", ",", "val", "in", "eval_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "\"vis\"", "not", "in", "key", ":", "\n", "                            ", "self", ".", "tb_log", ".", "add_scalar", "(", "\"val_\"", "+", "key", ",", "val", ",", "it", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "tb_log", ".", "add_images", "(", "\"df_gt\"", ",", "val", "[", "0", "]", ",", "it", ",", "dataformats", "=", "\"NCHW\"", ")", "\n", "self", ".", "tb_log", ".", "add_images", "(", "\"df_pred\"", ",", "val", "[", "2", "]", ",", "it", ",", "dataformats", "=", "\"NCHW\"", ")", "\n", "self", ".", "tb_log", ".", "add_images", "(", "\"df_magnitude\"", ",", "val", "[", "1", "]", ",", "it", ",", "dataformats", "=", "\"NCHW\"", ")", "\n", "\n", "# save model and best model", "\n", "", "", "", "if", "get_rank", "(", ")", "==", "0", ":", "\n", "# cal 3D dice", "\n", "# if self.tb_log is not None:", "\n", "#     for k, v in mean_3D.items():", "\n", "#         self.tb_log.add_scalar(\"val_3D_\"+k, v, it)", "\n", "\n", "                    ", "res", "=", "np", ".", "mean", "(", "[", "eval_dict", "[", "\"LV_dice\"", "]", ",", "eval_dict", "[", "\"RV_dice\"", "]", ",", "eval_dict", "[", "\"MYO_dice\"", "]", "]", ")", "\n", "# res = np.mean([mean_3D[\"LV_dice\"], mean_3D[\"RV_dice\"], mean_3D[\"MYO_dice\"]])", "\n", "self", ".", "logger", ".", "info", "(", "\"Epoch {} mean dice(2D/3D): {}/N\"", ".", "format", "(", "epoch", ",", "res", ")", ")", "\n", "if", "best_res", "!=", "0", ":", "\n", "                        ", "_", ",", "_", ",", "best_res", "=", "load_checkpoint", "(", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "\"model_best.pth\"", ")", ")", "\n", "", "is_best", "=", "res", ">", "best_res", "\n", "best_res", "=", "max", "(", "res", ",", "best_res", ")", "\n", "\n", "ckpt_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_dir", ",", "\"checkpoint_epoch_%d\"", "%", "trained_epoch", ")", "\n", "save_checkpoint", "(", "checkpoint_state", "(", "self", ".", "model", ",", "self", ".", "optimizer", ",", "trained_epoch", ",", "it", ",", "performance", "=", "res", ")", ",", "\n", "filename", "=", "ckpt_name", ",", "is_best", "=", "is_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.Trainer.metric_3D": [[179, 224], ["enumerate", "total_segMetrics.items", "open", "json.load", "train_utils.joint_transform", "tools.test_utils.test_person", "range", "segMetrics.items", "total_segMetrics.items", "utils.comm.get_rank", "print", "mean.update", "mean.update", "mean.update", "train_utils.Trainer.caches_4D.keys", "numpy.load", "numpy.load", "gt[].numpy", "len", "segMetrics[].append", "segMetrics[].append", "numpy.array().reshape", "range", "utils.comm.get_rank", "print", "os.path.join", "os.path.join", "numpy.load.astype", "numpy.load.astype", "utils.dice3D", "utils.hd_3D", "[].tolist", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "len", "p.split", "p.split", "len"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.joint_transform", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.tools.test_utils.test_person", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.comm.get_rank", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice3D", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.hd_3D"], ["", "", "", "", "def", "metric_3D", "(", "self", ",", "model", ",", "cfg", ")", ":", "\n", "        ", "p_json", "=", "cfg", ".", "DATASET", ".", "TEST_PERSON_LIST", "\n", "datadir_4D", "=", "\"/root/ACDC_DataSet/4dData\"", "\n", "\n", "with", "open", "(", "p_json", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "persons", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "total_segMetrics", "=", "{", "\"dice\"", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "\n", "\"hausdorff\"", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "persons", ")", ":", "\n", "# imgs, gts = personTo4Ddata(p, val_list)", "\n", "            ", "if", "p", "in", "self", ".", "caches_4D", ".", "keys", "(", ")", ":", "\n", "                ", "imgs", ",", "gts", "=", "self", ".", "caches_4D", "[", "p", "]", "\n", "", "else", ":", "\n", "                ", "imgs", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "datadir_4D", ",", "p", ".", "split", "(", "'-'", ")", "[", "1", "]", ",", "'4d_data.npy'", ")", ")", "\n", "gts", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "datadir_4D", ",", "p", ".", "split", "(", "'-'", ")", "[", "1", "]", ",", "'4d_gt.npy'", ")", ")", "\n", "self", ".", "caches_4D", "[", "p", "]", "=", "[", "imgs", ",", "gts", "]", "\n", "\n", "", "imgs", ",", "gts", "=", "imgs", ".", "astype", "(", "np", ".", "float32", ")", "[", "...", ",", "None", ",", ":", "]", ",", "gts", ".", "astype", "(", "np", ".", "float32", ")", "[", "...", ",", "None", ",", ":", "]", "\n", "imgs", ",", "gts", "=", "joint_transform", "(", "imgs", ",", "gts", ",", "cfg", ")", "\n", "gts", "=", "[", "gt", "[", ":", ",", "0", ",", "...", "]", ".", "numpy", "(", ")", "for", "gt", "in", "gts", "]", "\n", "\n", "preds", "=", "test_person", "(", "model", ",", "imgs", ",", "multi_batches", "=", "True", ",", "used_df", "=", "cfg", ".", "DATASET", ".", "DF_USED", ")", "# (times, slices, H, W)", "\n", "\n", "segMetrics", "=", "{", "\"dice\"", ":", "[", "]", ",", "\"hausdorff\"", ":", "[", "]", "}", "\n", "for", "j", "in", "range", "(", "len", "(", "preds", ")", ")", ":", "\n", "                ", "segMetrics", "[", "\"dice\"", "]", ".", "append", "(", "metrics", ".", "dice3D", "(", "preds", "[", "j", "]", ",", "gts", "[", "j", "]", ",", "gts", "[", "j", "]", ".", "shape", ")", ")", "\n", "segMetrics", "[", "\"hausdorff\"", "]", ".", "append", "(", "metrics", ".", "hd_3D", "(", "preds", "[", "j", "]", ",", "gts", "[", "j", "]", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "segMetrics", ".", "items", "(", ")", ":", "\n", "                ", "segMetrics", "[", "k", "]", "=", "np", ".", "array", "(", "v", ")", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "total_segMetrics", ".", "items", "(", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "                    ", "total_segMetrics", "[", "k", "]", "[", "j", "]", "+=", "segMetrics", "[", "k", "]", "[", ":", ",", "j", "]", ".", "tolist", "(", ")", "\n", "# person i is done", "\n", "", "", "if", "get_rank", "(", ")", "==", "0", ":", "print", "(", "\"\\r{}/{} {:.0%}\\r\"", ".", "format", "(", "i", ",", "len", "(", "persons", ")", ",", "i", "/", "len", "(", "persons", ")", ")", ",", "end", "=", "''", ")", "\n", "", "if", "get_rank", "(", ")", "==", "0", ":", "print", "(", ")", "\n", "\n", "mean", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "total_segMetrics", ".", "items", "(", ")", ":", "\n", "            ", "mean", ".", "update", "(", "{", "\"LV_\"", "+", "k", ":", "np", ".", "mean", "(", "v", "[", "1", "]", ")", "}", ")", "\n", "mean", ".", "update", "(", "{", "\"MYO_\"", "+", "k", ":", "np", ".", "mean", "(", "v", "[", "2", "]", ")", "}", ")", "\n", "mean", ".", "update", "(", "{", "\"RV_\"", "+", "k", ":", "np", ".", "mean", "(", "v", "[", "0", "]", ")", "}", ")", "\n", "", "return", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.save_checkpoint": [[15, 20], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "os.path.dirname"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "filename", "=", "'checkpoint'", ",", "is_best", "=", "False", ")", ":", "\n", "    ", "filename", "=", "'{}.pth'", ".", "format", "(", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "\"model_best.pth\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.checkpoint_state": [[21, 32], ["optimizer.state_dict", "isinstance", "model.module.state_dict", "model.state_dict"], "function", ["None"], ["", "", "def", "checkpoint_state", "(", "model", "=", "None", ",", "optimizer", "=", "None", ",", "epoch", "=", "None", ",", "it", "=", "None", ",", "performance", "=", "0.", ")", ":", "\n", "    ", "optim_state", "=", "optimizer", ".", "state_dict", "(", ")", "if", "optimizer", "is", "not", "None", "else", "None", "\n", "if", "model", "is", "not", "None", ":", "\n", "        ", "if", "isinstance", "(", "model", ",", "(", "torch", ".", "nn", ".", "DataParallel", ",", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ")", ":", "\n", "            ", "model_state", "=", "model", ".", "module", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "            ", "model_state", "=", "model", ".", "state_dict", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "model_state", "=", "None", "\n", "\n", "", "return", "{", "'epoch'", ":", "epoch", ",", "'it'", ":", "it", ",", "'model_state'", ":", "model_state", ",", "'optimizer_state'", ":", "optim_state", ",", "'performance'", ":", "performance", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.load_checkpoint": [[33, 51], ["os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load.get", "torch.load.get", "logger.info", "model.load_state_dict", "optimizer.load_state_dict", "logger.info", "torch.load.keys"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", "=", "None", ",", "optimizer", "=", "None", ",", "filename", "=", "\"checkpoint\"", ",", "logger", "=", "None", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\"==> Loading from checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "\"cpu\"", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "if", "'epoch'", "in", "checkpoint", ".", "keys", "(", ")", "else", "-", "1", "\n", "it", "=", "checkpoint", ".", "get", "(", "'it'", ",", "0.0", ")", "\n", "performance", "=", "checkpoint", ".", "get", "(", "'performance'", ",", "0.", ")", "\n", "if", "model", "is", "not", "None", "and", "checkpoint", "[", "'model_state'", "]", "is", "not", "None", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state'", "]", ")", "\n", "", "if", "optimizer", "is", "not", "None", "and", "checkpoint", "[", "'optimizer_state'", "]", "is", "not", "None", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state'", "]", ")", "\n", "", "if", "logger", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\"==> Done\"", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "FileNotFoundError", "\n", "\n", "", "return", "it", ",", "epoch", ",", "performance", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.transform": [[225, 229], ["libs.datasets.augment.Compose", "standard_augment.Compose.", "libs.datasets.augment.normalize"], "function", ["None"], ["", "", "def", "transform", "(", "imgs", ",", "cfg", ")", ":", "\n", "    ", "trans", "=", "standard_augment", ".", "Compose", "(", "[", "standard_augment", ".", "normalize", "(", "[", "cfg", ".", "DATASET", ".", "MEAN", "]", ",", "[", "cfg", ".", "DATASET", ".", "STD", "]", ")", ",", "\n", "]", ")", "\n", "return", "trans", "(", "imgs", ")", "\n", "", "def", "joint_transform", "(", "imgs", ",", "gts", ",", "cfg", ")", ":", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.joint_transform": [[229, 253], ["libs.datasets.joint_augment.Compose", "range", "range", "range", "aligned_imgs.append", "aligned_gts.append", "libs.datasets.joint_augment.To_PIL_Image", "libs.datasets.joint_augment.FixResize", "libs.datasets.joint_augment.To_Tensor", "joint_augment.Compose.", "trans_imgs[].append", "trans_gts[].append", "utils.image_list.to_image_list", "utils.image_list.to_image_list", "train_utils.transform"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.train_utils.train_utils.transform"], ["", "def", "joint_transform", "(", "imgs", ",", "gts", ",", "cfg", ")", ":", "\n", "    ", "trans", "=", "joint_augment", ".", "Compose", "(", "[", "joint_augment", ".", "To_PIL_Image", "(", ")", ",", "\n", "#    joint_augment.RandomAffine(0,translate=(0.125, 0.125)),", "\n", "#    joint_augment.RandomRotate((-180,180)),", "\n", "joint_augment", ".", "FixResize", "(", "256", ")", ",", "\n", "joint_augment", ".", "To_Tensor", "(", ")", "\n", "]", ")", "\n", "S", ",", "H", ",", "W", ",", "C", ",", "T", "=", "gts", ".", "shape", "\n", "trans_imgs", "=", "[", "None", "]", "*", "T", "\n", "trans_gts", "=", "[", "None", "]", "*", "T", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "        ", "trans_imgs", "[", "i", "]", ",", "trans_gts", "[", "i", "]", "=", "[", "]", ",", "[", "]", "\n", "for", "j", "in", "range", "(", "S", ")", ":", "\n", "            ", "t0", ",", "t1", "=", "trans", "(", "imgs", "[", "j", ",", "...", ",", "i", "]", ",", "gts", "[", "j", ",", "...", ",", "i", "]", ")", "\n", "trans_imgs", "[", "i", "]", ".", "append", "(", "transform", "(", "t0", ",", "cfg", ")", ")", "\n", "trans_gts", "[", "i", "]", ".", "append", "(", "t1", ")", "\n", "\n", "", "", "aligned_imgs", "=", "[", "]", "\n", "aligned_gts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "T", ")", ":", "\n", "        ", "aligned_imgs", ".", "append", "(", "to_image_list", "(", "trans_imgs", "[", "i", "]", ",", "size_divisible", "=", "32", ")", ")", "\n", "aligned_gts", ".", "append", "(", "to_image_list", "(", "trans_gts", "[", "i", "]", ",", "size_divisible", "=", "32", ")", ")", "\n", "\n", "", "return", "aligned_imgs", ",", "aligned_gts", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet.conv_block.__init__": [[31, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "conv_block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_out", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet.conv_block.forward": [[43, 46], ["unet.conv_block.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet.up_conv.__init__": [[48, 56], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ch_in", ",", "ch_out", ")", ":", "\n", "        ", "super", "(", "up_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "up", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Upsample(scale_factor=2),", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ch_in", ",", "ch_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ch_out", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet.up_conv.forward": [[58, 61], ["unet.up_conv.up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "up", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet.U_Net.__init__": [[63, 87], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet.conv_block", "unet.conv_block", "unet.conv_block", "unet.conv_block", "unet.conv_block", "unet.up_conv", "unet.conv_block", "unet.up_conv", "unet.conv_block", "unet.up_conv", "unet.conv_block", "unet.up_conv", "unet.conv_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "1", ",", "num_class", "=", "4", ",", "selfeat", "=", "False", ")", ":", "\n", "        ", "super", "(", "U_Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "64", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "1024", ")", "\n", "\n", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Up_conv5", "=", "conv_block", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Up_conv4", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "\n", "self", ".", "Up3", "=", "up_conv", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "\n", "self", ".", "Up2", "=", "up_conv", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "\n", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "num_class", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet.U_Net.forward": [[89, 126], ["unet.U_Net.Conv1", "unet.U_Net.Maxpool", "unet.U_Net.Conv2", "unet.U_Net.Maxpool", "unet.U_Net.Conv3", "unet.U_Net.Maxpool", "unet.U_Net.Conv4", "unet.U_Net.Maxpool", "unet.U_Net.Conv5", "unet.U_Net.Up5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.U_Net.Up_conv5", "unet.U_Net.Up4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.U_Net.Up_conv4", "unet.U_Net.Up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.U_Net.Up_conv3", "unet.U_Net.Up2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.U_Net.Up_conv2", "unet.U_Net.Conv_1x1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# encoding path", "\n", "        ", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "\n", "d5", "=", "self", ".", "Up_conv5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "Up3", "(", "d4", ")", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "d3", ")", ",", "dim", "=", "1", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d3", ")", "\n", "\n", "d2", "=", "self", ".", "Up2", "(", "d3", ")", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "d2", ")", ",", "dim", "=", "1", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d2", ")", "\n", "\n", "d1", "=", "self", ".", "Conv_1x1", "(", "d2", ")", "\n", "\n", "return", "[", "d1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet.init_weights": [[7, 29], ["print", "net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "print", "(", "'initialize network with %s'", "%", "init_type", ")", "\n", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet_df.SelFuseFeature.__init__": [[9, 21], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "shift_n", "=", "5", ",", "n_class", "=", "4", ",", "auxseg", "=", "False", ")", ":", "\n", "        ", "super", "(", "SelFuseFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "shift_n", "=", "shift_n", "\n", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "auxseg", "=", "auxseg", "\n", "self", ".", "fuse_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "*", "2", ",", "in_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "if", "auxseg", ":", "\n", "            ", "self", ".", "auxseg_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "self", ".", "n_class", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet_df.SelFuseFeature.forward": [[23, 56], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "grid.permute().transpose.permute().transpose.expand().to().requires_grad_", "grid.permute().transpose.permute().transpose.permute().transpose", "x.clone", "range", "unet_df.SelFuseFeature.fuse_conv", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "unet_df.SelFuseFeature.auxseg_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "grid.permute().transpose.permute().transpose.expand().to", "grid.permute().transpose.permute().transpose.permute", "grid.permute().transpose.permute().transpose.expand"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "df", ")", ":", "\n", "        ", "N", ",", "_", ",", "H", ",", "W", "=", "df", ".", "shape", "\n", "mag", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "df", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "greater_mask", "=", "mag", ">", "0.5", "\n", "greater_mask", "=", "torch", ".", "stack", "(", "[", "greater_mask", ",", "greater_mask", "]", ",", "dim", "=", "1", ")", "\n", "df", "[", "~", "greater_mask", "]", "=", "0", "\n", "\n", "scale", "=", "1.", "\n", "\n", "grid", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "H", ")", ",", "torch", ".", "arange", "(", "W", ")", ")", ",", "dim", "=", "0", ")", "\n", "grid", "=", "grid", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "x", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ".", "requires_grad_", "(", ")", "\n", "grid", "=", "grid", "+", "scale", "*", "df", "\n", "\n", "grid", "=", "grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "grid_", "=", "grid", "+", "0.", "\n", "grid", "[", "...", ",", "0", "]", "=", "2", "*", "grid_", "[", "...", ",", "0", "]", "/", "(", "H", "-", "1", ")", "-", "1", "\n", "grid", "[", "...", ",", "1", "]", "=", "2", "*", "grid_", "[", "...", ",", "1", "]", "/", "(", "W", "-", "1", ")", "-", "1", "\n", "\n", "# features = []", "\n", "select_x", "=", "x", ".", "clone", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "shift_n", ")", ":", "\n", "            ", "select_x", "=", "F", ".", "grid_sample", "(", "select_x", ",", "grid", ",", "mode", "=", "'bilinear'", ",", "padding_mode", "=", "'border'", ")", "\n", "# features.append(select_x)", "\n", "# select_x = torch.mean(torch.stack(features, dim=0), dim=0)", "\n", "# features.append(select_x.detach().cpu().numpy())", "\n", "# np.save(\"/root/chengfeng/Cardiac/source_code/logs/acdc_logs/logs_temp/feature.npy\", np.array(features))", "\n", "", "if", "self", ".", "auxseg", ":", "\n", "            ", "auxseg", "=", "self", ".", "auxseg_conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "auxseg", "=", "None", "\n", "\n", "", "select_x", "=", "self", ".", "fuse_conv", "(", "torch", ".", "cat", "(", "[", "x", ",", "select_x", "]", ",", "dim", "=", "1", ")", ")", "\n", "return", "[", "select_x", ",", "auxseg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet_df.U_NetDF.__init__": [[58, 91], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "libs.network.unet.conv_block", "libs.network.unet.conv_block", "libs.network.unet.conv_block", "libs.network.unet.conv_block", "libs.network.unet.conv_block", "libs.network.unet.up_conv", "libs.network.unet.conv_block", "libs.network.unet.up_conv", "libs.network.unet.conv_block", "libs.network.unet.up_conv", "libs.network.unet.conv_block", "libs.network.unet.up_conv", "libs.network.unet.conv_block", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet_df.SelFuseFeature"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_ch", "=", "1", ",", "num_class", "=", "4", ",", "selfeat", "=", "False", ",", "shift_n", "=", "5", ",", "auxseg", "=", "False", ")", ":", "\n", "        ", "super", "(", "U_NetDF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "selfeat", "=", "selfeat", "\n", "self", ".", "shift_n", "=", "shift_n", "\n", "\n", "self", ".", "Maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "Conv1", "=", "conv_block", "(", "ch_in", "=", "img_ch", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Conv2", "=", "conv_block", "(", "ch_in", "=", "64", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Conv3", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Conv4", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Conv5", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "1024", ")", "\n", "\n", "self", ".", "Up5", "=", "up_conv", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "self", ".", "Up_conv5", "=", "conv_block", "(", "ch_in", "=", "1024", ",", "ch_out", "=", "512", ")", "\n", "\n", "self", ".", "Up4", "=", "up_conv", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "self", ".", "Up_conv4", "=", "conv_block", "(", "ch_in", "=", "512", ",", "ch_out", "=", "256", ")", "\n", "\n", "self", ".", "Up3", "=", "up_conv", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "self", ".", "Up_conv3", "=", "conv_block", "(", "ch_in", "=", "256", ",", "ch_out", "=", "128", ")", "\n", "\n", "self", ".", "Up2", "=", "up_conv", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "self", ".", "Up_conv2", "=", "conv_block", "(", "ch_in", "=", "128", ",", "ch_out", "=", "64", ")", "\n", "\n", "# Direct Field", "\n", "self", ".", "ConvDf_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "2", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "selfeat", ":", "\n", "            ", "self", ".", "SelDF", "=", "SelFuseFeature", "(", "64", ",", "auxseg", "=", "auxseg", ",", "shift_n", "=", "shift_n", ")", "\n", "\n", "", "self", ".", "Conv_1x1", "=", "nn", ".", "Conv2d", "(", "64", ",", "num_class", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.unet_df.U_NetDF.forward": [[92, 147], ["unet_df.U_NetDF.Conv1", "unet_df.U_NetDF.Maxpool", "unet_df.U_NetDF.Conv2", "unet_df.U_NetDF.Maxpool", "unet_df.U_NetDF.Conv3", "unet_df.U_NetDF.Maxpool", "unet_df.U_NetDF.Conv4", "unet_df.U_NetDF.Maxpool", "unet_df.U_NetDF.Conv5", "unet_df.U_NetDF.Up5", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_df.U_NetDF.Up_conv5", "unet_df.U_NetDF.Up4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_df.U_NetDF.Up_conv4", "unet_df.U_NetDF.Up3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_df.U_NetDF.Up_conv3", "unet_df.U_NetDF.Up2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_df.U_NetDF.Up_conv2", "unet_df.U_NetDF.ConvDf_1x1", "unet_df.U_NetDF.Conv_1x1", "unet_df.U_NetDF.SelDF"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "\n", "# encoding path", "\n", "x1", "=", "self", ".", "Conv1", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "Maxpool", "(", "x1", ")", "\n", "x2", "=", "self", ".", "Conv2", "(", "x2", ")", "\n", "\n", "x3", "=", "self", ".", "Maxpool", "(", "x2", ")", "\n", "x3", "=", "self", ".", "Conv3", "(", "x3", ")", "\n", "\n", "x4", "=", "self", ".", "Maxpool", "(", "x3", ")", "\n", "x4", "=", "self", ".", "Conv4", "(", "x4", ")", "\n", "\n", "x5", "=", "self", ".", "Maxpool", "(", "x4", ")", "\n", "x5", "=", "self", ".", "Conv5", "(", "x5", ")", "\n", "\n", "# decoding + concat path", "\n", "d5", "=", "self", ".", "Up5", "(", "x5", ")", "\n", "d5", "=", "torch", ".", "cat", "(", "(", "x4", ",", "d5", ")", ",", "dim", "=", "1", ")", "\n", "\n", "d5", "=", "self", ".", "Up_conv5", "(", "d5", ")", "\n", "\n", "d4", "=", "self", ".", "Up4", "(", "d5", ")", "\n", "d4", "=", "torch", ".", "cat", "(", "(", "x3", ",", "d4", ")", ",", "dim", "=", "1", ")", "\n", "d4", "=", "self", ".", "Up_conv4", "(", "d4", ")", "\n", "\n", "d3", "=", "self", ".", "Up3", "(", "d4", ")", "\n", "d3", "=", "torch", ".", "cat", "(", "(", "x2", ",", "d3", ")", ",", "dim", "=", "1", ")", "\n", "d3", "=", "self", ".", "Up_conv3", "(", "d3", ")", "\n", "\n", "# df = self.ConvDf_1x1(d3)", "\n", "# # df = F.interpolate(inputs[1], size=d3.shape[-2:], mode='bilinear', align_corners=True)", "\n", "# if self.selfeat:", "\n", "#     d3 = self.SelDF(d3, df)", "\n", "\n", "\n", "d2", "=", "self", ".", "Up2", "(", "d3", ")", "\n", "d2", "=", "torch", ".", "cat", "(", "(", "x1", ",", "d2", ")", ",", "dim", "=", "1", ")", "\n", "d2", "=", "self", ".", "Up_conv2", "(", "d2", ")", "\n", "\n", "# Direct Field", "\n", "df", "=", "self", ".", "ConvDf_1x1", "(", "d2", ")", "\n", "# df = None", "\n", "if", "self", ".", "selfeat", ":", "\n", "            ", "d2_auxseg", "=", "self", ".", "SelDF", "(", "d2", ",", "df", ")", "\n", "d2", ",", "auxseg", "=", "d2_auxseg", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "auxseg", "=", "None", "\n", "\n", "# df = F.interpolate(df, size=x.shape[-2:], mode='bilinear', align_corners=True)", "\n", "", "d1", "=", "self", ".", "Conv_1x1", "(", "d2", ")", "\n", "\n", "return", "[", "d1", ",", "df", ",", "auxseg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.model_fn_decorator": [[12, 43], ["collections.namedtuple", "imgs.to.to", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "model", "criterion", "tb_dict.update", "disp_dict.update", "collections.namedtuple.", "torch.squeeze().to.long", "torch.squeeze().to.unsqueeze", "torch.softmax", "torch.max", "torch.max", "torch.max", "preds.unsqueeze.unsqueeze", "train_functions.cal_perfer", "torch.squeeze", "torch.squeeze", "torch.squeeze", "criterion.item", "criterion.item", "train_functions.make_one_hot", "train_functions.make_one_hot"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.cal_perfer", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot"], ["def", "model_fn_decorator", "(", ")", ":", "\n", "    ", "ModelReturn", "=", "namedtuple", "(", "\"ModelReturn\"", ",", "[", "\"loss\"", ",", "\"tb_dict\"", ",", "\"disp_dict\"", "]", ")", "\n", "\n", "def", "model_fn", "(", "model", ",", "data", ",", "criterion", ",", "perfermance", "=", "False", ",", "vis", "=", "False", ",", "device", "=", "\"cuda\"", ",", "epoch", "=", "0", ",", "num_class", "=", "4", ")", ":", "\n", "# imgs, gts, _ = data", "\n", "        ", "imgs", ",", "gts", "=", "data", "[", ":", "2", "]", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "gts", "=", "torch", ".", "squeeze", "(", "gts", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "net_out", "=", "model", "(", "imgs", ")", "\n", "\n", "loss", "=", "criterion", "(", "net_out", "[", "0", "]", ",", "gts", ".", "long", "(", ")", ")", "\n", "\n", "tb_dict", "=", "{", "}", "\n", "disp_dict", "=", "{", "}", "\n", "tb_dict", ".", "update", "(", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "disp_dict", ".", "update", "(", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "if", "perfermance", ":", "\n", "            ", "gts_", "=", "gts", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "net_out", "=", "F", ".", "softmax", "(", "net_out", "[", "0", "]", ",", "dim", "=", "1", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "net_out", ",", "1", ")", "\n", "preds", "=", "preds", ".", "unsqueeze", "(", "1", ")", "\n", "cal_perfer", "(", "make_one_hot", "(", "preds", ",", "num_class", ")", ",", "make_one_hot", "(", "gts_", ",", "num_class", ")", ",", "tb_dict", ")", "\n", "\n", "\n", "", "return", "ModelReturn", "(", "loss", ",", "tb_dict", ",", "disp_dict", ")", "\n", "\n", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.model_DF_decorator": [[44, 108], ["collections.namedtuple", "imgs.to.to", "torch.squeeze().to().long", "torch.squeeze().to().long", "torch.squeeze().to().long", "gts_df.to.to", "model", "torch.cross_entropy", "criterion", "tb_dict.update", "disp_dict.update", "collections.namedtuple.", "torch.cross_entropy", "torch.tensor", "torch.tensor", "torch.tensor", "torch.squeeze().to().long.unsqueeze", "torch.softmax", "torch.max", "torch.max", "torch.max", "preds.unsqueeze.unsqueeze", "train_functions.cal_perfer", "gts_df.to.cpu().numpy", "cv2.cartToPolar", "utils.vis_utils.batchToColorImg().transpose", "df_out.cpu().numpy", "cv2.cartToPolar", "utils.vis_utils.batchToColorImg().transpose", "utils.vis_utils.batchToColorImg().transpose", "tb_dict.update", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "len", "loss.item", "loss.item", "train_functions.make_one_hot", "train_functions.make_one_hot", "F.cross_entropy.item", "df_loss.item", "boundary_loss.item", "torch.tensor.item", "gts_df.to.cpu", "utils.vis_utils.batchToColorImg", "df_out.cpu", "utils.vis_utils.batchToColorImg", "utils.vis_utils.batchToColorImg", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.cal_perfer", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.batchToColorImg", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.batchToColorImg", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.vis_utils.batchToColorImg"], ["", "def", "model_DF_decorator", "(", ")", ":", "\n", "    ", "ModelReturn", "=", "namedtuple", "(", "\"ModelReturn\"", ",", "[", "\"loss\"", ",", "\"tb_dict\"", ",", "\"disp_dict\"", "]", ")", "\n", "\n", "def", "model_fn", "(", "model", ",", "data", ",", "criterion", "=", "None", ",", "perfermance", "=", "False", ",", "vis", "=", "False", ",", "device", "=", "\"cuda\"", ",", "epoch", "=", "0", ",", "num_class", "=", "4", ")", ":", "\n", "        ", "imgs", ",", "gts", "=", "data", "[", ":", "2", "]", "\n", "gts_df", ",", "dist_maps", "=", "data", "[", "2", ":", "]", "\n", "\n", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "gts", "=", "torch", ".", "squeeze", "(", "gts", ",", "1", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "gts_df", "=", "gts_df", ".", "to", "(", "device", ")", "\n", "\n", "net_out", "=", "model", "(", "imgs", ")", "\n", "seg_out", ",", "df_out", "=", "net_out", "[", ":", "2", "]", "\n", "\n", "# add Auxiliary Segmentation", "\n", "if", "len", "(", "net_out", ")", ">=", "3", "and", "net_out", "[", "2", "]", "is", "not", "None", ":", "\n", "            ", "auxseg_out", "=", "net_out", "[", "2", "]", "\n", "auxseg_loss", "=", "F", ".", "cross_entropy", "(", "auxseg_out", ",", "gts", ")", "\n", "", "else", ":", "\n", "            ", "auxseg_loss", "=", "torch", ".", "tensor", "(", "[", "0.", "]", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", "\n", "\n", "\n", "# loss = criterion(net_out, gts.long())", "\n", "# segmentation Loss", "\n", "", "seg_loss", "=", "F", ".", "cross_entropy", "(", "seg_out", ",", "gts", ")", "\n", "\n", "# direction field Loss", "\n", "df_loss", ",", "boundary_loss", "=", "criterion", "(", "seg_out", ",", "dist_maps", ",", "df_out", ",", "gts_df", ",", "gts", ")", "\n", "\n", "alpha", "=", "1.0", "\n", "loss", "=", "alpha", "*", "(", "seg_loss", "+", "1.", "*", "df_loss", "+", "0.1", "*", "auxseg_loss", ")", "+", "(", "1.", "-", "alpha", ")", "*", "boundary_loss", "\n", "\n", "tb_dict", "=", "{", "}", "\n", "disp_dict", "=", "{", "}", "\n", "tb_dict", ".", "update", "(", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", ",", "\"seg_loss\"", ":", "alpha", "*", "seg_loss", ".", "item", "(", ")", ",", "\"df_loss\"", ":", "alpha", "*", "1.", "*", "df_loss", ".", "item", "(", ")", ",", "\n", "\"boundary_loss\"", ":", "(", "1.", "-", "alpha", ")", "*", "boundary_loss", ".", "item", "(", ")", ",", "\"auxseg_loss\"", ":", "alpha", "*", "0.1", "*", "auxseg_loss", ".", "item", "(", ")", "}", ")", "\n", "disp_dict", ".", "update", "(", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "if", "perfermance", ":", "\n", "            ", "gts_", "=", "gts", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "seg_out", "=", "F", ".", "softmax", "(", "seg_out", ",", "dim", "=", "1", ")", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "seg_out", ",", "1", ")", "\n", "preds", "=", "preds", ".", "unsqueeze", "(", "1", ")", "\n", "cal_perfer", "(", "make_one_hot", "(", "preds", ",", "num_class", ")", ",", "make_one_hot", "(", "gts_", ",", "num_class", ")", ",", "tb_dict", ")", "\n", "\n", "", "if", "vis", ":", "\n", "# \u53ef\u89c6\u5316 \u65b9\u5411\u573a", "\n", "# vis_dict = {}", "\n", "            ", "gt_df", "=", "gts_df", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "_", ",", "angle_gt", "=", "cv2", ".", "cartToPolar", "(", "gt_df", "[", ":", ",", "0", ",", "...", "]", ",", "gt_df", "[", ":", ",", "1", ",", "...", "]", ")", "\n", "angle_gt", "=", "batchToColorImg", "(", "angle_gt", ",", "minv", "=", "0", ",", "maxv", "=", "2", "*", "math", ".", "pi", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "df_map", "=", "df_out", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mag", ",", "angle_df", "=", "cv2", ".", "cartToPolar", "(", "df_map", "[", ":", ",", "0", ",", "...", "]", ",", "df_map", "[", ":", ",", "1", ",", "...", "]", ")", "\n", "angle_df", "=", "batchToColorImg", "(", "angle_df", ",", "minv", "=", "0", ",", "maxv", "=", "2", "*", "math", ".", "pi", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "mag", "=", "batchToColorImg", "(", "mag", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "tb_dict", ".", "update", "(", "{", "\"vis\"", ":", "[", "angle_gt", ",", "mag", ",", "angle_df", "]", "}", ")", "\n", "\n", "\n", "", "return", "ModelReturn", "(", "loss", ",", "tb_dict", ",", "disp_dict", ")", "\n", "\n", "", "return", "model_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.cal_perfer": [[111, 134], ["range", "tb_dict.update", "tb_dict.update", "tb_dict.update", "tb_dict.update", "tb_dict.update", "tb_dict.update", "LV_dice.append", "RV_dice.append", "MYO_dice.append", "LV_hausdorff.append", "RV_hausdorff.append", "MYO_hausdorff.append", "utils.metrics.dice", "utils.metrics.dice", "utils.metrics.dice", "utils.metrics.cal_hausdorff_distance", "utils.metrics.cal_hausdorff_distance", "utils.metrics.cal_hausdorff_distance", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.dice", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.cal_hausdorff_distance", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.cal_hausdorff_distance", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.metrics.cal_hausdorff_distance"], ["", "def", "cal_perfer", "(", "preds", ",", "masks", ",", "tb_dict", ")", ":", "\n", "    ", "LV_dice", "=", "[", "]", "# 1", "\n", "MYO_dice", "=", "[", "]", "# 2", "\n", "RV_dice", "=", "[", "]", "# 3", "\n", "LV_hausdorff", "=", "[", "]", "\n", "MYO_hausdorff", "=", "[", "]", "\n", "RV_hausdorff", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "preds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "LV_dice", ".", "append", "(", "dice", "(", "preds", "[", "i", ",", "1", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "1", ",", ":", ",", ":", "]", ")", ")", "\n", "RV_dice", ".", "append", "(", "dice", "(", "preds", "[", "i", ",", "3", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "3", ",", ":", ",", ":", "]", ")", ")", "\n", "MYO_dice", ".", "append", "(", "dice", "(", "preds", "[", "i", ",", "2", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "2", ",", ":", ",", ":", "]", ")", ")", "\n", "\n", "LV_hausdorff", ".", "append", "(", "cal_hausdorff_distance", "(", "preds", "[", "i", ",", "1", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "1", ",", ":", ",", ":", "]", ")", ")", "\n", "RV_hausdorff", ".", "append", "(", "cal_hausdorff_distance", "(", "preds", "[", "i", ",", "3", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "3", ",", ":", ",", ":", "]", ")", ")", "\n", "MYO_hausdorff", ".", "append", "(", "cal_hausdorff_distance", "(", "preds", "[", "i", ",", "2", ",", ":", ",", ":", "]", ",", "masks", "[", "i", ",", "2", ",", ":", ",", ":", "]", ")", ")", "\n", "\n", "", "tb_dict", ".", "update", "(", "{", "\"LV_dice\"", ":", "np", ".", "mean", "(", "LV_dice", ")", "}", ")", "\n", "tb_dict", ".", "update", "(", "{", "\"RV_dice\"", ":", "np", ".", "mean", "(", "RV_dice", ")", "}", ")", "\n", "tb_dict", ".", "update", "(", "{", "\"MYO_dice\"", ":", "np", ".", "mean", "(", "MYO_dice", ")", "}", ")", "\n", "tb_dict", ".", "update", "(", "{", "\"LV_hausdorff\"", ":", "np", ".", "mean", "(", "LV_hausdorff", ")", "}", ")", "\n", "tb_dict", ".", "update", "(", "{", "\"RV_hausdorff\"", ":", "np", ".", "mean", "(", "RV_hausdorff", ")", "}", ")", "\n", "tb_dict", ".", "update", "(", "{", "\"MYO_hausdorff\"", ":", "np", ".", "mean", "(", "MYO_hausdorff", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.network.train_functions.make_one_hot": [[135, 150], ["numpy.array", "tuple", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "input.cpu().long", "torch.zeros", "torch.zeros", "torch.zeros", "input.cpu"], "function", ["None"], ["", "def", "make_one_hot", "(", "input", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Convert class index tensor to one hot encoding tensor.\n    Args:\n         input: A tensor of shape [N, 1, *]\n         num_classes: An int of number of class\n    Returns:\n        A tensor of shape [N, num_classes, *]\n    \"\"\"", "\n", "shape", "=", "np", ".", "array", "(", "input", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "num_classes", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "result", "=", "torch", ".", "zeros", "(", "shape", ")", ".", "scatter_", "(", "1", ",", "input", ".", "cpu", "(", ")", ".", "long", "(", ")", ",", "1", ")", "\n", "# result = result.scatter_(1, input.cpu(), 1)", "\n", "\n", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.acdc_dataset.AcdcDataset.__init__": [[20, 31], ["open", "json.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_list", ",", "df_used", "=", "False", ",", "joint_augment", "=", "None", ",", "augment", "=", "None", ",", "target_augment", "=", "None", ",", "df_norm", "=", "True", ",", "boundary", "=", "False", ")", ":", "\n", "        ", "self", ".", "joint_augment", "=", "joint_augment", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "target_augment", "=", "target_augment", "\n", "self", ".", "data_list", "=", "data_list", "\n", "self", ".", "df_used", "=", "df_used", "\n", "self", ".", "df_norm", "=", "df_norm", "\n", "self", ".", "boundary", "=", "boundary", "\n", "\n", "with", "open", "(", "data_list", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "data_infos", "=", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.acdc_dataset.AcdcDataset.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.acdc_dataset.AcdcDataset.__getitem__": [[35, 62], ["[].astype", "[].astype", "h5py.File", "h5py.File", "acdc_dataset.AcdcDataset.joint_augment", "acdc_dataset.AcdcDataset.augment", "acdc_dataset.AcdcDataset.target_augment", "utils.direct_field.df_cardia.direct_field", "torch.from_numpy", "torch.from_numpy", "utils.direct_field.utils_df.class2dist", "numpy.array", "numpy.array", "acdc_dataset.AcdcDataset.numpy", "acdc_dataset.AcdcDataset.numpy"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.direct_field.df_cardia.direct_field", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.direct_field.utils_df.class2dist"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "h5py", ".", "File", "(", "self", ".", "data_infos", "[", "index", "]", ",", "'r'", ")", "[", "'image'", "]", "\n", "gt", "=", "h5py", ".", "File", "(", "self", ".", "data_infos", "[", "index", "]", ",", "'r'", ")", "[", "'label'", "]", "\n", "# print(np.unique(gt))", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "[", ":", ",", ":", ",", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "gt", "=", "np", ".", "array", "(", "gt", ")", "[", ":", ",", ":", ",", "None", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# print(np.unique(gt))", "\n", "\n", "if", "self", ".", "joint_augment", "is", "not", "None", ":", "\n", "            ", "img", ",", "gt", "=", "self", ".", "joint_augment", "(", "img", ",", "gt", ")", "\n", "", "if", "self", ".", "augment", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "augment", "(", "img", ")", "\n", "", "if", "self", ".", "target_augment", "is", "not", "None", ":", "\n", "            ", "gt", "=", "self", ".", "target_augment", "(", "gt", ")", "\n", "\n", "", "if", "self", ".", "df_used", ":", "\n", "            ", "gt_df", "=", "direct_field", "(", "gt", ".", "numpy", "(", ")", "[", "0", "]", ",", "norm", "=", "self", ".", "df_norm", ")", "\n", "gt_df", "=", "torch", ".", "from_numpy", "(", "gt_df", ")", "\n", "", "else", ":", "\n", "            ", "gt_df", "=", "None", "\n", "\n", "", "if", "self", ".", "boundary", ":", "\n", "            ", "dist_map", "=", "torch", ".", "from_numpy", "(", "class2dist", "(", "gt", ".", "numpy", "(", ")", "[", "0", "]", ",", "C", "=", "4", ")", ")", "\n", "", "else", ":", "\n", "            ", "dist_map", "=", "None", "\n", "\n", "", "return", "img", ",", "gt", ",", "gt_df", ",", "dist_map", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.Compose.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.Compose.__call__": [[12, 16], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.to_Tensor.__call__": [[18, 23], ["torch.from_numpy", "len", "numpy.array().transpose", "numpy.array().transpose", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "arr", ")", ":", "\n", "        ", "if", "len", "(", "np", ".", "array", "(", "arr", ")", ".", "shape", ")", "==", "2", ":", "\n", "            ", "arr", "=", "np", ".", "array", "(", "arr", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "", "arr", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "arr", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "arr", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.To_PIL_Image.__call__": [[36, 38], ["augment.to_pil_image"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.to_pil_image"], ["    ", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "return", "to_pil_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.normalize.__init__": [[40, 43], ["torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "torch", ".", "tensor", "(", "mean", ")", "\n", "self", ".", "std", "=", "torch", ".", "tensor", "(", "std", ")", "\n", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.normalize.__call__": [[43, 47], ["torch.as_tensor", "torch.as_tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "self", ".", "mean", "=", "torch", ".", "as_tensor", "(", "self", ".", "mean", ",", "dtype", "=", "img", ".", "dtype", ",", "device", "=", "img", ".", "device", ")", "\n", "self", ".", "std", "=", "torch", ".", "as_tensor", "(", "self", ".", "std", ",", "dtype", "=", "img", ".", "dtype", ",", "device", "=", "img", ".", "device", ")", "\n", "return", "(", "img", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomVerticalFlip.__init__": [[49, 51], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomVerticalFlip.__call__": [[52, 59], ["random.random", "isinstance", "isinstance", "img.transpose", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "np", ".", "flip", "(", "img", ",", "axis", "=", "0", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomHorizontallyFlip.__init__": [[61, 63], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomHorizontallyFlip.__call__": [[64, 71], ["random.random", "isinstance", "isinstance", "img.transpose", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomRotate.__init__": [[73, 76], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degree", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomRotate.__call__": [[77, 82], ["random.random", "img.rotate", "random.random"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "rotate_detree", "=", "random", ".", "random", "(", ")", "*", "2", "*", "self", ".", "degree", "-", "self", ".", "degree", "\n", "return", "img", ".", "rotate", "(", "rotate_detree", ",", "interpolation", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomBrightness.__init__": [[84, 96], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_factor", ",", "max_factor", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "\"\"\" :param min_factor: The value between 0.0 and max_factor\n            that define the minimum adjustment of image brightness.\n            The value  0.0 gives a black image,The value 1.0 gives the original image, value bigger than 1.0 gives more bright image.\n            :param max_factor: A value should be bigger than min_factor.\n            that define the maximum adjustment of image brightness.\n            The value  0.0 gives a black image, value 1.0 gives the original image, value bigger than 1.0 gives more bright image.\n\n        \"\"\"", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "min_factor", "=", "min_factor", "\n", "self", ".", "max_factor", "=", "max_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomBrightness.__call__": [[105, 112], ["random.random", "numpy.random.uniform", "numpy.random.uniform", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness.enhance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "factor", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_factor", ",", "self", ".", "max_factor", ")", "\n", "enhancer_brightness", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", "\n", "return", "enhancer_brightness", ".", "enhance", "(", "factor", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomContrast.__init__": [[114, 125], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_factor", ",", "max_factor", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "\"\"\" :param min_factor: The value between 0.0 and max_factor\n            that define the minimum adjustment of image contrast.\n            The value  0.0 gives s solid grey image, value 1.0 gives the original image.\n            :param max_factor: A value should be bigger than min_factor.\n            that define the maximum adjustment of image contrast.\n            The value  0.0 gives s solid grey image, value 1.0 gives the original image.\n        \"\"\"", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "min_factor", "=", "min_factor", "\n", "self", ".", "max_factor", "=", "max_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.RandomContrast.__call__": [[126, 132], ["random.random", "numpy.random.uniform", "numpy.random.uniform", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast.enhance"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "factor", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_factor", ",", "self", ".", "max_factor", ")", "\n", "enhance_contrast", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", "\n", "return", "enhance_contrast", ".", "enhance", "(", "factor", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.imresize": [[24, 34], ["im.resize", "Exception"], "function", ["None"], ["", "", "def", "imresize", "(", "im", ",", "size", ",", "interp", "=", "'bilinear'", ")", ":", "\n", "    ", "if", "interp", "==", "'nearest'", ":", "\n", "        ", "resample", "=", "Image", ".", "NEAREST", "\n", "", "elif", "interp", "==", "'bilinear'", ":", "\n", "        ", "resample", "=", "Image", ".", "BILINEAR", "\n", "", "elif", "interp", "==", "'bicubic'", ":", "\n", "        ", "resample", "=", "Image", ".", "BICUBIC", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'resample method undefined!'", ")", "\n", "", "return", "im", ".", "resize", "(", "size", ",", "resample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.to_pil_image": [[133, 194], ["isinstance", "torch.is_tensor", "PIL.Image.fromarray", "pic.mul().byte.mul().byte", "numpy.transpose", "isinstance", "TypeError", "TypeError", "pic.mul().byte.numpy", "ValueError", "pic.mul().byte.mul", "ValueError", "ValueError", "type"], "function", ["None"], ["", "", "def", "to_pil_image", "(", "pic", ",", "mode", "=", "None", ")", ":", "\n", "    ", "\"\"\"Convert a tensor or an ndarray to PIL Image.\n\n    See :class:`~torchvision.transforms.ToPIlImage` for more details.\n\n    Args:\n        pic (Tensor or numpy.ndarray): Image to be converted to PIL Image.\n        mode (`PIL.Image mode`_): color space and pixel depth of input data (optional).\n\n    .. _PIL.Image mode: http://pillow.readthedocs.io/en/3.4.x/handbook/concepts.html#modes\n\n    Returns:\n        PIL Image: Image converted to PIL Image.\n    \"\"\"", "\n", "# if not(_is_numpy_image(pic) or _is_tensor_image(pic)):", "\n", "#     raise TypeError('pic should be Tensor or ndarray. Got {}.'.format(type(pic)))", "\n", "\n", "npimg", "=", "pic", "\n", "if", "isinstance", "(", "pic", ",", "torch", ".", "FloatTensor", ")", ":", "\n", "        ", "pic", "=", "pic", ".", "mul", "(", "255", ")", ".", "byte", "(", ")", "\n", "", "if", "torch", ".", "is_tensor", "(", "pic", ")", ":", "\n", "        ", "npimg", "=", "np", ".", "transpose", "(", "pic", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "npimg", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'Input pic must be a torch.Tensor or NumPy ndarray, '", "+", "\n", "'not {}'", ".", "format", "(", "type", "(", "npimg", ")", ")", ")", "\n", "\n", "", "if", "npimg", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "        ", "expected_mode", "=", "None", "\n", "npimg", "=", "npimg", "[", ":", ",", ":", ",", "0", "]", "\n", "if", "npimg", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "expected_mode", "=", "'L'", "\n", "", "elif", "npimg", ".", "dtype", "==", "np", ".", "int16", ":", "\n", "            ", "expected_mode", "=", "'I;16'", "\n", "", "elif", "npimg", ".", "dtype", "==", "np", ".", "int32", ":", "\n", "            ", "expected_mode", "=", "'I'", "\n", "", "elif", "npimg", ".", "dtype", "==", "np", ".", "float32", ":", "\n", "            ", "expected_mode", "=", "'F'", "\n", "", "if", "mode", "is", "not", "None", "and", "mode", "!=", "expected_mode", ":", "\n", "            ", "raise", "ValueError", "(", "\"Incorrect mode ({}) supplied for input type {}. Should be {}\"", "\n", ".", "format", "(", "mode", ",", "np", ".", "dtype", ",", "expected_mode", ")", ")", "\n", "", "mode", "=", "expected_mode", "\n", "\n", "", "elif", "npimg", ".", "shape", "[", "2", "]", "==", "4", ":", "\n", "        ", "permitted_4_channel_modes", "=", "[", "'RGBA'", ",", "'CMYK'", "]", "\n", "if", "mode", "is", "not", "None", "and", "mode", "not", "in", "permitted_4_channel_modes", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only modes {} are supported for 4D inputs\"", ".", "format", "(", "permitted_4_channel_modes", ")", ")", "\n", "\n", "", "if", "mode", "is", "None", "and", "npimg", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "mode", "=", "'RGBA'", "\n", "", "", "else", ":", "\n", "        ", "permitted_3_channel_modes", "=", "[", "'RGB'", ",", "'YCbCr'", ",", "'HSV'", "]", "\n", "if", "mode", "is", "not", "None", "and", "mode", "not", "in", "permitted_3_channel_modes", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only modes {} are supported for 3D inputs\"", ".", "format", "(", "permitted_3_channel_modes", ")", ")", "\n", "", "if", "mode", "is", "None", "and", "npimg", ".", "dtype", "==", "np", ".", "uint8", ":", "\n", "            ", "mode", "=", "'RGB'", "\n", "\n", "", "", "if", "mode", "is", "None", ":", "\n", "        ", "raise", "TypeError", "(", "'Input type {} is not supported'", ".", "format", "(", "npimg", ".", "dtype", ")", ")", "\n", "\n", "", "return", "Image", ".", "fromarray", "(", "npimg", ",", "mode", "=", "mode", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.load_nii": [[10, 16], ["nibabel.load", "nib.load.get_data"], "function", ["None"], ["def", "load_nii", "(", "nii_path", ")", ":", "\n", "    ", "data", "=", "nib", ".", "load", "(", "nii_path", ")", "\n", "img", "=", "data", ".", "get_data", "(", ")", "\n", "affine", "=", "data", ".", "affine", "\n", "header", "=", "data", ".", "header", "\n", "return", "img", ",", "affine", ",", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.read_Infocfg": [[18, 41], ["open", "line.rstrip().split", "print", "len", "line.rstrip"], "function", ["None"], ["", "def", "read_Infocfg", "(", "cfg_path", ")", ":", "\n", "    ", "patient_info", "=", "{", "}", "\n", "\n", "\n", "\n", "\n", "with", "open", "(", "cfg_path", ")", "as", "f_in", ":", "\n", "        ", "for", "line", "in", "f_in", ":", "\n", "            ", "l", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", "\":\"", ")", "\n", "#l is the list of the patient_info", "\n", "print", "(", "len", "(", "l", ")", ")", "\n", "patient_info", "[", "l", "[", "0", "]", "]", "=", "l", "[", "1", "]", "\n", "# print(patient_info)", "\n", "", "'''\n        ['ED', ' 1']\n        ['ES', ' 12']\n        ['Group', ' DCM']\n        ['Height', ' 184.0']\n        ['NbFrame', ' 30']\n        ['Weight', ' 95.0']\n        {'ED': ' 1', 'ES': ' 12', 'Group': ' DCM', 'Height': ' 184.0', 'NbFrame': ' 30', 'Weight': ' 95.0'}\n        '''", "\n", "", "return", "patient_info", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.read_json": [[42, 46], ["open", "json.load"], "function", ["None"], ["", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.write_json": [[47, 50], ["open", "json.dump"], "function", ["None"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.write_json_append": [[51, 54], ["open", "json.dump"], "function", ["None"], ["", "", "def", "write_json_append", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.gen_alldatalist": [[55, 67], ["os.listdir", "filelist.sort", "os.path.dirname", "gen_acdcjson.write_json", "os.listdir", "os.path.abspath", "os.path.join", "os.path.join", "filelist.append", "os.path.join"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json"], ["", "", "def", "gen_alldatalist", "(", "path", ")", ":", "\n", "    ", "filelist", "=", "[", "]", "\n", "for", "dir", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "\n", "        ", "for", "file", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root_path", ",", "dir", ")", ")", ":", "\n", "            ", "filelist", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root_path", ",", "dir", ",", "file", ")", ")", "\n", "#the length of the filelist is 1902", "\n", "# print(len(filelist))", "\n", "", "", "filelist", ".", "sort", "(", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "#/home/ffbian/chencheng/XieheCardiac/2DUNet/UNet/libs/datasets", "\n", "write_json", "(", "filelist", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"./acdcjson/ACDCDataList.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.gen_every_kind_datalist": [[68, 78], ["os.listdir", "filelist.sort", "os.path.dirname", "gen_acdcjson.write_json", "filelist.append", "os.path.abspath", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json"], ["", "def", "gen_every_kind_datalist", "(", "kind_path", ")", ":", "\n", "    ", "filelist", "=", "[", "]", "\n", "\n", "for", "file", "in", "os", ".", "listdir", "(", "kind_path", ")", ":", "\n", "        ", "filelist", ".", "append", "(", "os", ".", "path", ".", "join", "(", "kind_path", ",", "file", ")", ")", "\n", "\n", "", "filelist", ".", "sort", "(", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "#/home/ffbian/chencheng/XieheCardiac/2DUNet/UNet/libs/datasets", "\n", "write_json", "(", "filelist", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"./acdcjson/{}DataList.json\"", ".", "format", "(", "kind_path", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.generate_train_test_list": [[79, 100], ["gen_acdcjson.read_json", "len", "set", "list", "list.sort", "os.path.dirname", "print", "gen_acdcjson.write_json", "gen_acdcjson.write_json", "gen_acdcjson.write_json_append", "gen_acdcjson.write_json_append", "numpy.random.choice", "set", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.arange", "int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.read_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.write_json_append", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.gen_acdcjson.write_json_append"], ["", "def", "generate_train_test_list", "(", "json_file_path", ")", ":", "\n", "# json_file = \"/home/fcheng/Cardia/DataList.json\"", "\n", "# json_file = \"/home/ffbian/chencheng/XieheCardiac/2DUNet/UNet/libs/datasets/ACDCDataList.json\"", "\n", "    ", "fileslist", "=", "read_json", "(", "json_file_path", ")", "\n", "\n", "nums", "=", "len", "(", "fileslist", ")", "\n", "train_ind", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "nums", ",", "size", "=", "int", "(", "np", ".", "ceil", "(", "0.8", "*", "nums", ")", ")", ",", "replace", "=", "False", ")", ")", "\n", "test_ind", "=", "set", "(", "np", ".", "arange", "(", "nums", ")", ")", "-", "train_ind", "\n", "\n", "test_ind", "=", "list", "(", "test_ind", ")", "\n", "test_ind", ".", "sort", "(", ")", "\n", "\n", "train_list", "=", "[", "fileslist", "[", "fl", "]", "for", "fl", "in", "train_ind", "]", "\n", "test_list", "=", "[", "fileslist", "[", "fl", "]", "for", "fl", "in", "test_ind", "]", "\n", "\n", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "print", "(", "out_dir", ")", "\n", "write_json", "(", "train_list", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"./acdcjson/RVtrain.json\"", ")", ")", "\n", "write_json", "(", "test_list", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"./acdcjson/RVtest.json\"", ")", ")", "\n", "write_json_append", "(", "train_list", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"./acdcjson/train.json\"", ")", ")", "\n", "write_json_append", "(", "test_list", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"./acdcjson/test.json\"", ")", ")", "\n", "# write_json(test_list, \"/home/ffbian/chencheng/XieheCardiac/2DUNet/UNet/libs/datasets/differentkind/kuodatest.json\")", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.read_json": [[5, 9], ["open", "json.load"], "function", ["None"], ["def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json": [[10, 13], ["open", "json.dump"], "function", ["None"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.generate_fileslist": [[14, 44], ["os.listdir", "os.listdir.sort", "os.path.dirname", "print", "os.listdir", "os.listdir.sort", "os.path.abspath", "len", "os.path.join", "os.listdir", "os.listdir.sort", "os.path.join", "os.path.join", "numpy.load", "range", "fileslist.append"], "function", ["None"], ["", "", "def", "generate_fileslist", "(", ")", ":", "\n", "    ", "root", "=", "\"/home/ffbian/chencheng/XieheCardiac/npydata/\"", "\n", "\n", "cars", "=", "os", ".", "listdir", "(", "root", ")", "\n", "cars", ".", "sort", "(", ")", "\n", "\n", "fileslist", "=", "[", "]", "# [(path, index_time), (), ...]", "\n", "# \u75be\u75c5\u7c7b\u578b", "\n", "for", "car", "in", "cars", ":", "\n", "        ", "persons", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "car", ")", ")", "\n", "persons", ".", "sort", "(", ")", "\n", "\n", "# \u75c5\u4eba\u4e2a\u4f53", "\n", "for", "person", "in", "persons", ":", "\n", "            ", "sliceds", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "car", ",", "person", ",", "\"imgs\"", ")", ")", "\n", "sliceds", ".", "sort", "(", ")", "\n", "\n", "# \u5207\u7247\u4f4d\u7f6e", "\n", "for", "sliced", "in", "sliceds", ":", "\n", "                ", "file_p", "=", "os", ".", "path", ".", "join", "(", "root", ",", "car", ",", "person", ",", "\"imgs\"", ",", "sliced", ")", "\n", "npy", "=", "np", ".", "load", "(", "file_p", ")", "\n", "time_n", "=", "npy", ".", "shape", "[", "-", "1", "]", "# 25, 20, 11, 50", "\n", "\n", "# \u65f6\u5e8f", "\n", "for", "i", "in", "range", "(", "time_n", ")", ":", "\n", "                    ", "fileslist", ".", "append", "(", "(", "file_p", ",", "i", ")", ")", "\n", "\n", "", "", "", "", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "# write_json(fileslist, os.path.join(out_dir, \"DataList.json\"))", "\n", "print", "(", "len", "(", "fileslist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.generate_train_test_list": [[45, 62], ["generate_FilesList.read_json", "len", "set", "list", "list.sort", "os.path.dirname", "generate_FilesList.write_json", "generate_FilesList.write_json", "numpy.random.choice", "set", "os.path.abspath", "os.path.join", "os.path.join", "numpy.arange", "int", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.read_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json"], ["", "def", "generate_train_test_list", "(", ")", ":", "\n", "    ", "json_file", "=", "\"/home/fcheng/Cardia/DataList.json\"", "\n", "fileslist", "=", "read_json", "(", "json_file", ")", "\n", "\n", "nums", "=", "len", "(", "fileslist", ")", "\n", "train_ind", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "nums", ",", "size", "=", "int", "(", "np", ".", "ceil", "(", "0.8", "*", "nums", ")", ")", ",", "replace", "=", "False", ")", ")", "\n", "test_ind", "=", "set", "(", "np", ".", "arange", "(", "nums", ")", ")", "-", "train_ind", "\n", "\n", "test_ind", "=", "list", "(", "test_ind", ")", "\n", "test_ind", ".", "sort", "(", ")", "\n", "\n", "train_list", "=", "[", "fileslist", "[", "fl", "]", "for", "fl", "in", "train_ind", "]", "\n", "test_list", "=", "[", "fileslist", "[", "fl", "]", "for", "fl", "in", "test_ind", "]", "\n", "\n", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "write_json", "(", "train_list", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"train.json\"", ")", ")", "\n", "write_json", "(", "test_list", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"test.json\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.generate_N_list": [[63, 80], ["generate_FilesList.read_json", "len", "set", "list", "list.sort", "os.path.dirname", "generate_FilesList.write_json", "generate_FilesList.write_json", "numpy.random.choice", "set", "os.path.abspath", "os.path.join", "os.path.join", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.read_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json"], ["", "def", "generate_N_list", "(", "N", "=", "50000", ")", ":", "\n", "    ", "json_file", "=", "\"/home/fcheng/Cardia/source_code/libs/datasets/DataList.json\"", "\n", "fileslist", "=", "read_json", "(", "json_file", ")", "\n", "\n", "nums", "=", "len", "(", "fileslist", ")", "\n", "train_ind", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "nums", ",", "size", "=", "N", ",", "replace", "=", "False", ")", ")", "\n", "test_ind", "=", "set", "(", "np", ".", "arange", "(", "nums", ")", ")", "-", "train_ind", "\n", "\n", "test_ind", "=", "list", "(", "test_ind", ")", "\n", "test_ind", ".", "sort", "(", ")", "\n", "\n", "train_list", "=", "[", "fileslist", "[", "fl", "]", "for", "fl", "in", "train_ind", "]", "\n", "test_list", "=", "[", "fileslist", "[", "fl", "]", "for", "fl", "in", "test_ind", "]", "\n", "\n", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "write_json", "(", "train_list", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"train_{}.json\"", ".", "format", "(", "N", ")", ")", ")", "\n", "write_json", "(", "test_list", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"test_{}.json\"", ".", "format", "(", "N", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.gene_uniform_List": [[81, 121], ["os.listdir", "os.listdir.sort", "print", "print", "os.path.dirname", "generate_FilesList.write_json", "generate_FilesList.write_json", "generate_FilesList.read_json", "len", "generate_FilesList.read_json", "numpy.ceil", "print", "set", "list", "list.sort", "list", "list.sort", "len", "len", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "numpy.ceil", "numpy.random.choice", "set", "len", "len", "numpy.arange", "len", "int", "len", "numpy.ceil", "len"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.write_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.read_json", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_FilesList.read_json"], ["", "def", "gene_uniform_List", "(", "ratio", "=", "0.8", ",", "N", "=", "None", ")", ":", "\n", "    ", "root", "=", "\"/home/ffbian/chencheng/XieheCardiac/2DUNet/UNet/libs/datasets/differentkind/\"", "\n", "cars", "=", "os", ".", "listdir", "(", "root", ")", "\n", "cars", "=", "[", "c", "for", "c", "in", "cars", "if", "\"test\"", "not", "in", "c", "]", "\n", "cars", ".", "sort", "(", ")", "\n", "\n", "train_List", "=", "[", "]", "\n", "test_List", "=", "[", "]", "\n", "\n", "total_num", "=", "0", "\n", "for", "json_f", "in", "cars", ":", "\n", "        ", "json_list", "=", "read_json", "(", "os", ".", "path", ".", "join", "(", "root", ",", "json_f", ")", ")", "\n", "total_num", "+=", "len", "(", "json_list", ")", "\n", "\n", "", "if", "N", "is", "not", "None", ":", "\n", "        ", "ratio", "=", "N", "/", "total_num", "\n", "\n", "", "train_num", "=", "0", "\n", "for", "json_f", "in", "cars", ":", "\n", "        ", "json_list", "=", "read_json", "(", "os", ".", "path", ".", "join", "(", "root", ",", "json_f", ")", ")", "\n", "train_num", "+=", "np", ".", "ceil", "(", "ratio", "*", "len", "(", "json_list", ")", ")", "\n", "print", "(", "json_f", ",", "len", "(", "json_list", ")", ",", "np", ".", "ceil", "(", "ratio", "*", "len", "(", "json_list", ")", ")", ")", "\n", "\n", "ta_ind", "=", "set", "(", "np", ".", "random", ".", "choice", "(", "len", "(", "json_list", ")", ",", "size", "=", "int", "(", "np", ".", "ceil", "(", "ratio", "*", "len", "(", "json_list", ")", ")", ")", ",", "replace", "=", "False", ")", ")", "\n", "te_ind", "=", "set", "(", "np", ".", "arange", "(", "len", "(", "json_list", ")", ")", ")", "-", "ta_ind", "\n", "\n", "ta_ind", "=", "list", "(", "ta_ind", ")", "\n", "ta_ind", ".", "sort", "(", ")", "\n", "te_ind", "=", "list", "(", "te_ind", ")", "\n", "te_ind", ".", "sort", "(", ")", "\n", "\n", "train_List", "+=", "[", "json_list", "[", "i", "]", "for", "i", "in", "ta_ind", "]", "\n", "test_List", "+=", "[", "json_list", "[", "i", "]", "for", "i", "in", "te_ind", "]", "\n", "\n", "", "print", "(", "total_num", ",", "train_num", ")", "\n", "print", "(", "len", "(", "train_List", ")", ",", "len", "(", "test_List", ")", ")", "\n", "\n", "out_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "write_json", "(", "train_List", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"train_{}.json\"", ".", "format", "(", "N", ")", ")", ")", "\n", "write_json", "(", "test_List", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"test_{}.json\"", ".", "format", "(", "N", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.generate_personList.func": [[8, 22], ["print", "set", "list", "list.sort", "open", "json.load", "len", "list.add", "tl.split", "a1.split"], "function", ["None"], ["def", "func", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "test_list", "=", "json", ".", "load", "(", "f", ")", "\n", "", "print", "(", "len", "(", "test_list", ")", ")", "\n", "\n", "name_list", "=", "set", "(", ")", "\n", "for", "tl", "in", "test_list", ":", "\n", "        ", "a0", ",", "a1", "=", "tl", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", "\n", "a1", "=", "\"_\"", ".", "join", "(", "a1", ".", "split", "(", "'_'", ")", "[", ":", "2", "]", ")", "\n", "name_list", ".", "add", "(", "a0", "+", "'-'", "+", "a1", ")", "\n", "\n", "", "name_list", "=", "list", "(", "name_list", ")", "\n", "name_list", ".", "sort", "(", ")", "\n", "return", "name_list", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.collate_batch.BatchCollator.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size_divisible", "=", "0", ",", "df_used", "=", "False", ",", "boundary", "=", "False", ")", ":", "\n", "        ", "self", ".", "size_divisible", "=", "size_divisible", "\n", "self", ".", "df_used", "=", "df_used", "\n", "self", ".", "boundary", "=", "boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.collate_batch.BatchCollator.__call__": [[16, 26], ["list", "utils.image_list.to_image_list", "utils.image_list.to_image_list", "zip", "utils.image_list.to_image_list", "utils.image_list.to_image_list"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.to_image_list"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "transposed_batch", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "\n", "images", "=", "to_image_list", "(", "transposed_batch", "[", "0", "]", ",", "self", ".", "size_divisible", ")", "\n", "targets", "=", "to_image_list", "(", "transposed_batch", "[", "1", "]", ",", "self", ".", "size_divisible", ")", "\n", "\n", "dfs", "=", "to_image_list", "(", "transposed_batch", "[", "2", "]", ",", "self", ".", "size_divisible", ")", "if", "self", ".", "df_used", "else", "None", "\n", "\n", "dist_maps", "=", "to_image_list", "(", "transposed_batch", "[", "3", "]", ",", "self", ".", "size_divisible", ")", "if", "self", ".", "boundary", "else", "None", "\n", "\n", "return", "images", ",", "targets", ",", "dfs", ",", "dist_maps", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.Compose.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.Compose.__call__": [[15, 20], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", ",", "mask", "=", "t", "(", "img", ",", "mask", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.To_Tensor.__call__": [[22, 30], ["torch.from_numpy", "torch.from_numpy", "len", "len", "numpy.array().transpose", "numpy.array().transpose", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "arr", ",", "arr2", ")", ":", "\n", "        ", "if", "len", "(", "np", ".", "array", "(", "arr", ")", ".", "shape", ")", "==", "2", ":", "\n", "            ", "arr", "=", "np", ".", "array", "(", "arr", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "", "if", "len", "(", "np", ".", "array", "(", "arr2", ")", ".", "shape", ")", "==", "2", ":", "\n", "            ", "arr2", "=", "np", ".", "array", "(", "arr2", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "", "arr", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "arr", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "arr2", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "arr2", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "arr", ",", "arr2", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.To_PIL_Image.__call__": [[32, 36], ["augment.to_pil_image", "augment.to_pil_image"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.to_pil_image", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.augment.to_pil_image"], ["    ", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "img", "=", "to_pil_image", "(", "img", ")", "\n", "mask", "=", "to_pil_image", "(", "mask", ")", "\n", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomVerticalFlip.__init__": [[38, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomVerticalFlip.__call__": [[41, 48], ["random.random", "isinstance", "isinstance", "img.transpose", "mask.transpose", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", ",", "mask", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "np", ".", "flip", "(", "img", ",", "axis", "=", "0", ")", ",", "np", ".", "flip", "(", "mask", ",", "axis", "=", "0", ")", "\n", "", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomHorizontallyFlip.__init__": [[50, 52], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomHorizontallyFlip.__call__": [[53, 60], ["random.random", "isinstance", "isinstance", "img.transpose", "mask.transpose", "numpy.flip", "numpy.flip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", ",", "mask", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "np", ".", "flip", "(", "img", ",", "axis", "=", "1", ")", ",", "np", ".", "flip", "(", "mask", ",", "axis", "=", "1", ")", "\n", "", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomRotate.__init__": [[62, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "degrees", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "degrees", "=", "degrees", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomRotate.__call__": [[66, 71], ["random.random", "random.uniform", "img.rotate", "mask.rotate"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "rotate_detree", "=", "random", ".", "uniform", "(", "self", ".", "degrees", "[", "0", "]", ",", "self", ".", "degrees", "[", "1", "]", ")", "\n", "return", "img", ".", "rotate", "(", "rotate_detree", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "rotate", "(", "rotate_detree", ",", "Image", ".", "NEAREST", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.FixResize.__init__": [[73, 78], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.FixResize.__call__": [[79, 85], ["img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "mask", "is", "None", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", "\n", "", "if", "img", "is", "None", ":", "\n", "            ", "return", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "self", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.Scale.__init__": [[87, 89], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.Scale.__call__": [[90, 103], ["int", "int", "img.resize", "mask.resize", "img.resize", "mask.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", ">=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", ">=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", ">", "h", ":", "\n", "            ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomCrop.__init__": [[105, 111], ["isinstance", "int", "int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "padding", "=", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomCrop.__call__": [[112, 128], ["random.randint", "random.randint", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.crop", "PIL.ImageOps.expand.resize", "PIL.ImageOps.expand.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "            ", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "mask", "=", "ImageOps", ".", "expand", "(", "mask", ",", "border", "=", "self", ".", "padding", ",", "fill", "=", "0", ")", "\n", "\n", "", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "if", "w", "==", "tw", "and", "h", "==", "th", ":", "\n", "            ", "return", "img", ",", "mask", "\n", "", "if", "w", "<", "tw", "or", "h", "<", "th", ":", "\n", "            ", "return", "img", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "(", "tw", ",", "th", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "", "x1", "=", "random", ".", "randint", "(", "0", ",", "w", "-", "tw", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "h", "-", "th", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", ",", "mask", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomSized.__init__": [[130, 134], ["joint_augment.Scale", "joint_augment.RandomCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "scale", "=", "Scale", "(", "self", ".", "size", ")", "\n", "self", ".", "crop", "=", "RandomCrop", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomSized.__call__": [[135, 144], ["int", "int", "joint_augment.RandomSized.crop", "img.resize", "mask.resize", "random.uniform", "random.uniform", "joint_augment.RandomSized.scale"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "assert", "img", ".", "size", "==", "mask", ".", "size", "\n", "\n", "w", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "*", "img", ".", "size", "[", "0", "]", ")", "\n", "h", "=", "int", "(", "random", ".", "uniform", "(", "0.5", ",", "2", ")", "*", "img", ".", "size", "[", "1", "]", ")", "\n", "\n", "img", ",", "mask", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BILINEAR", ")", ",", "mask", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "return", "self", ".", "crop", "(", "*", "self", ".", "scale", "(", "img", ",", "mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.ScaleRatio.__init__": [[146, 148], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scale_factor", "=", "1", ")", ":", "\n", "        ", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.ScaleRatio.__call__": [[149, 154], ["int", "int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ",", "interpolation", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "new_h", "=", "int", "(", "h", "*", "self", ".", "scale_factor", ")", "\n", "new_w", "=", "int", "(", "w", "*", "self", ".", "scale_factor", ")", "\n", "return", "img", ".", "resize", "(", "(", "new_w", ",", "new_h", ")", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomScale.__init__": [[156, 160], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_factor", "=", "0.8", ",", "max_factor", "=", "1.2", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "min_factor", "=", "min_factor", "\n", "self", ".", "max_factor", "=", "max_factor", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomScale.__scale": [[161, 166], ["int", "int", "img.resize"], "methods", ["None"], ["", "def", "__scale", "(", "self", ",", "img", ",", "scale_factor", ",", "interpolation", ")", ":", "\n", "        ", "w", ",", "h", "=", "img", ".", "size", "\n", "new_h", "=", "int", "(", "h", "*", "scale_factor", ")", "\n", "new_w", "=", "int", "(", "w", "*", "scale_factor", ")", "\n", "return", "img", ".", "resize", "(", "(", "new_w", ",", "new_h", ")", ",", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomScale.__call__": [[167, 172], ["random.random", "numpy.random.uniform", "joint_augment.RandomScale.__scale", "joint_augment.RandomScale.__scale"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomScale.__scale", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomScale.__scale"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "factor", "=", "np", ".", "random", ".", "uniform", "(", "self", ".", "min_factor", ",", "self", ".", "max_factor", ")", "\n", "return", "self", ".", "__scale", "(", "img", ",", "factor", ",", "Image", ".", "BILINEAR", ")", ",", "self", ".", "__scale", "(", "mask", ",", "factor", ",", "Image", ".", "NEAREST", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.Resize.__init__": [[175, 180], ["isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_size", ",", "max_size", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "min_size", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "min_size", "=", "(", "min_size", ",", ")", "\n", "", "self", ".", "min_size", "=", "min_size", "\n", "self", ".", "max_size", "=", "max_size", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.Resize.get_size": [[182, 203], ["random.choice", "float", "float", "int", "int", "min", "max", "int", "round"], "methods", ["None"], ["", "def", "get_size", "(", "self", ",", "image_size", ")", ":", "\n", "        ", "w", ",", "h", "=", "image_size", "\n", "size", "=", "random", ".", "choice", "(", "self", ".", "min_size", ")", "\n", "max_size", "=", "self", ".", "max_size", "\n", "if", "max_size", "is", "not", "None", ":", "\n", "            ", "min_original_size", "=", "float", "(", "min", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "max_original_size", "=", "float", "(", "max", "(", "(", "w", ",", "h", ")", ")", ")", "\n", "if", "max_original_size", "/", "min_original_size", "*", "size", ">", "max_size", ":", "\n", "                ", "size", "=", "int", "(", "round", "(", "max_size", "*", "min_original_size", "/", "max_original_size", ")", ")", "\n", "\n", "", "", "if", "(", "w", "<=", "h", "and", "w", "==", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "size", ")", ":", "\n", "            ", "return", "(", "h", ",", "w", ")", "\n", "\n", "", "if", "w", "<", "h", ":", "\n", "            ", "ow", "=", "size", "\n", "oh", "=", "int", "(", "size", "*", "h", "/", "w", ")", "\n", "", "else", ":", "\n", "            ", "oh", "=", "size", "\n", "ow", "=", "int", "(", "size", "*", "w", "/", "h", ")", "\n", "\n", "", "return", "(", "oh", ",", "ow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.Resize.__call__": [[204, 214], ["joint_augment.Resize.get_size", "torchvision.transforms.functional.resize", "isinstance", "t.resize", "target.resize.resize.resize"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.Resize.get_size"], ["", "def", "__call__", "(", "self", ",", "image", ",", "target", "=", "None", ")", ":", "\n", "        ", "size", "=", "self", ".", "get_size", "(", "image", ".", "size", ")", "\n", "image", "=", "F", ".", "resize", "(", "image", ",", "size", ")", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "            ", "target", "=", "[", "t", ".", "resize", "(", "image", ".", "size", ")", "for", "t", "in", "target", "]", "\n", "", "elif", "target", "is", "None", ":", "\n", "            ", "return", "image", "\n", "", "else", ":", "\n", "            ", "target", "=", "target", ".", "resize", "(", "image", ".", "size", ",", "Image", ".", "NEAREST", ")", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomAffine.__init__": [[239, 280], ["isinstance", "isinstance", "ValueError", "isinstance", "isinstance", "isinstance", "len", "len", "ValueError", "len", "ValueError", "ValueError", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "degrees", ",", "translate", "=", "None", ",", "scale", "=", "None", ",", "shear", "=", "None", ",", "resample", "=", "False", ",", "fillcolor", "=", "0", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "if", "isinstance", "(", "degrees", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "degrees", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If degrees is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "degrees", "=", "(", "-", "degrees", ",", "degrees", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "degrees", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "degrees", ")", "==", "2", ",", "\"degrees should be a list or tuple and it must be of length 2.\"", "\n", "self", ".", "degrees", "=", "degrees", "\n", "\n", "", "if", "translate", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "translate", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "translate", ")", "==", "2", ",", "\"translate should be a list or tuple and it must be of length 2.\"", "\n", "for", "t", "in", "translate", ":", "\n", "                ", "if", "not", "(", "0.0", "<=", "t", "<=", "1.0", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"translation values should be between 0 and 1\"", ")", "\n", "", "", "", "self", ".", "translate", "=", "translate", "\n", "\n", "if", "scale", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "scale", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "scale", ")", "==", "2", ",", "\"scale should be a list or tuple and it must be of length 2.\"", "\n", "for", "s", "in", "scale", ":", "\n", "                ", "if", "s", "<=", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"scale values should be positive\"", ")", "\n", "", "", "", "self", ".", "scale", "=", "scale", "\n", "\n", "if", "shear", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "shear", ",", "numbers", ".", "Number", ")", ":", "\n", "                ", "if", "shear", "<", "0", ":", "\n", "                    ", "raise", "ValueError", "(", "\"If shear is a single number, it must be positive.\"", ")", "\n", "", "self", ".", "shear", "=", "(", "-", "shear", ",", "shear", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "shear", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "shear", ")", "==", "2", ",", "\"shear should be a list or tuple and it must be of length 2.\"", "\n", "self", ".", "shear", "=", "shear", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "shear", "=", "shear", "\n", "\n", "", "self", ".", "resample", "=", "resample", "\n", "self", ".", "fillcolor", "=", "fillcolor", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomAffine.get_params": [[281, 308], ["random.uniform", "random.uniform", "random.uniform", "numpy.round", "numpy.round", "random.uniform", "random.uniform"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_params", "(", "degrees", ",", "translate", ",", "scale_ranges", ",", "shears", ",", "img_size", ")", ":", "\n", "        ", "\"\"\"Get parameters for affine transformation\n\n        Returns:\n            sequence: params to be passed to the affine transformation\n        \"\"\"", "\n", "angle", "=", "random", ".", "uniform", "(", "degrees", "[", "0", "]", ",", "degrees", "[", "1", "]", ")", "\n", "if", "translate", "is", "not", "None", ":", "\n", "            ", "max_dx", "=", "translate", "[", "0", "]", "*", "img_size", "[", "0", "]", "\n", "max_dy", "=", "translate", "[", "1", "]", "*", "img_size", "[", "1", "]", "\n", "translations", "=", "(", "np", ".", "round", "(", "random", ".", "uniform", "(", "-", "max_dx", ",", "max_dx", ")", ")", ",", "\n", "np", ".", "round", "(", "random", ".", "uniform", "(", "-", "max_dy", ",", "max_dy", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "translations", "=", "(", "0", ",", "0", ")", "\n", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "            ", "scale", "=", "random", ".", "uniform", "(", "scale_ranges", "[", "0", "]", ",", "scale_ranges", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "scale", "=", "1.0", "\n", "\n", "", "if", "shears", "is", "not", "None", ":", "\n", "            ", "shear", "=", "random", ".", "uniform", "(", "shears", "[", "0", "]", ",", "shears", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "shear", "=", "0.0", "\n", "\n", "", "return", "angle", ",", "translations", ",", "scale", ",", "shear", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomAffine.__call__": [[309, 320], ["random.random", "joint_augment.RandomAffine.get_params", "torchvision.transforms.functional.affine", "torchvision.transforms.functional.affine"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomAffine.get_params"], ["", "def", "__call__", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n            img (PIL Image): Image to be transformed.\n\n        Returns:\n            PIL Image: Affine transformed image.\n        \"\"\"", "\n", "if", "random", ".", "random", "(", ")", "<", "self", ".", "prob", ":", "\n", "            ", "ret", "=", "self", ".", "get_params", "(", "self", ".", "degrees", ",", "self", ".", "translate", ",", "self", ".", "scale", ",", "self", ".", "shear", ",", "img", ".", "size", ")", "\n", "return", "F", ".", "affine", "(", "img", ",", "*", "ret", ",", "resample", "=", "self", ".", "resample", ",", "fillcolor", "=", "self", ".", "fillcolor", ")", ",", "F", ".", "affine", "(", "mask", ",", "*", "ret", ",", "resample", "=", "self", ".", "resample", ",", "fillcolor", "=", "self", ".", "fillcolor", ")", "\n", "", "return", "img", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.datasets.joint_augment.RandomAffine.__repr__": [[321, 337], ["dict", "s.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "'{name}(degrees={degrees}'", "\n", "if", "self", ".", "translate", "is", "not", "None", ":", "\n", "            ", "s", "+=", "', translate={translate}'", "\n", "", "if", "self", ".", "scale", "is", "not", "None", ":", "\n", "            ", "s", "+=", "', scale={scale}'", "\n", "", "if", "self", ".", "shear", "is", "not", "None", ":", "\n", "            ", "s", "+=", "', shear={shear}'", "\n", "", "if", "self", ".", "resample", ">", "0", ":", "\n", "            ", "s", "+=", "', resample={resample}'", "\n", "", "if", "self", ".", "fillcolor", "!=", "0", ":", "\n", "            ", "s", "+=", "', fillcolor={fillcolor}'", "\n", "", "s", "+=", "')'", "\n", "d", "=", "dict", "(", "self", ".", "__dict__", ")", "\n", "d", "[", "'resample'", "]", "=", "_pil_interpolation_to_str", "[", "d", "[", "'resample'", "]", "]", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "d", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.SurfaceLoss.__init__": [[22, 26], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# Self.idc is used to filter out some classes of the target mask. Use fancy indexing", "\n", "        ", "self", ".", "idc", ":", "List", "[", "int", "]", "=", "kwargs", "[", "\"idc\"", "]", "\n", "print", "(", "f\"Initialized {self.__class__.__name__} with {kwargs}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.SurfaceLoss.__call__": [[27, 44], ["surface_loss.simplex", "dist_maps.to.to.to", "torch.einsum", "torch.einsum.mean", "surface_loss.one_hot"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.simplex", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.one_hot"], ["", "def", "__call__", "(", "self", ",", "probs", ":", "Tensor", ",", "dist_maps", ":", "Tensor", ",", "gts", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "assert", "simplex", "(", "probs", ")", "\n", "assert", "not", "one_hot", "(", "dist_maps", ")", "\n", "\n", "dist_maps", "=", "dist_maps", ".", "to", "(", "probs", ".", "device", ")", "\n", "\n", "pc", "=", "probs", "[", ":", ",", "self", ".", "idc", ",", "...", "]", "\n", "dc", "=", "dist_maps", "[", ":", ",", "self", ".", "idc", ",", "...", "]", "\n", "\n", "multipled", "=", "torch", ".", "einsum", "(", "\"bcwh,bcwh->bcwh\"", ",", "pc", ",", "dc", ")", "\n", "\n", "# gc = class2one_hot(gts)[:, self.idc, ...]", "\n", "# multipled = torch.einsum(\"bcwh,bcwh->bcwh\", pc - gc, dc)", "\n", "\n", "loss", "=", "multipled", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.uniq": [[6, 8], ["set", "torch.unique().numpy", "torch.unique", "a.cpu"], "function", ["None"], ["def", "uniq", "(", "a", ":", "Tensor", ")", "->", "Set", ":", "\n", "    ", "return", "set", "(", "torch", ".", "unique", "(", "a", ".", "cpu", "(", ")", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.sset": [[9, 11], ["uniq().issubset", "surface_loss.uniq"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.uniq"], ["", "def", "sset", "(", "a", ":", "Tensor", ",", "sub", ":", "Iterable", ")", "->", "bool", ":", "\n", "    ", "return", "uniq", "(", "a", ")", ".", "issubset", "(", "sub", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.simplex": [[12, 16], ["t.sum().type", "torch.ones_like", "torch.allclose", "t.sum"], "function", ["None"], ["", "def", "simplex", "(", "t", ":", "Tensor", ",", "axis", "=", "1", ")", "->", "bool", ":", "\n", "    ", "_sum", "=", "t", ".", "sum", "(", "axis", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "_ones", "=", "torch", ".", "ones_like", "(", "_sum", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "torch", ".", "allclose", "(", "_sum", ",", "_ones", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.one_hot": [[17, 19], ["surface_loss.simplex", "surface_loss.sset"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.simplex", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.surface_loss.sset"], ["", "def", "one_hot", "(", "t", ":", "Tensor", ",", "axis", "=", "1", ")", "->", "bool", ":", "\n", "    ", "return", "simplex", "(", "t", ",", "axis", ")", "and", "sset", "(", "t", ",", "[", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.ce_ieLoss.CE_IELoss.__init__": [[8, 13], ["torch.Module.__init__", "torch.NLLLoss", "torch.NLLLoss", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__"], ["def", "__init__", "(", "self", ",", "eps", "=", "0.5", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "CE_IELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "nll", "=", "nn", ".", "NLLLoss", "(", "reduction", "=", "reduction", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.ce_ieLoss.CE_IELoss.update_eps": [[14, 16], ["None"], "methods", ["None"], ["", "def", "update_eps", "(", "self", ")", ":", "\n", "        ", "self", ".", "eps", "=", "self", ".", "eps", "*", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.ce_ieLoss.CE_IELoss.forward": [[17, 29], ["ce_ieLoss.CE_IELoss.softmax", "ce_ieLoss.CE_IELoss.nll", "reg.sum().mean.sum().mean.sum().mean", "ce_ieLoss.CE_IELoss.log", "ce_ieLoss.CE_IELoss.log", "reg.sum().mean.sum().mean.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        :param outputs: [b, c]\n        :param labels: [b,]\n        :return: a loss (Variable)\n        \"\"\"", "\n", "outputs", "=", "self", ".", "softmax", "(", "outputs", ")", "# probabilities", "\n", "ce", "=", "self", ".", "nll", "(", "outputs", ".", "log", "(", ")", ",", "labels", ")", "\n", "reg", "=", "outputs", "*", "outputs", ".", "log", "(", ")", "\n", "reg", "=", "reg", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "loss_total", "=", "ce", "+", "reg", "*", "self", ".", "eps", "\n", "return", "loss_total", "#, ce, reg", "", "", "", ""]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.create_losses.Total_loss.__init__": [[9, 14], ["libs.losses.mag_angle_loss.EuclideanAngleLossWithOHEM", "libs.losses.surface_loss.SurfaceLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "boundary", "=", "False", ")", ":", "\n", "        ", "self", ".", "df_loss", "=", "EuclideanAngleLossWithOHEM", "(", ")", "\n", "self", ".", "boundary", "=", "boundary", "\n", "if", "boundary", ":", "\n", "            ", "self", ".", "boundary_loss", "=", "SurfaceLoss", "(", "idc", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.create_losses.Total_loss.__call__": [[15, 25], ["create_losses.Total_loss.df_loss", "torch.functional.softmax", "torch.functional.softmax", "create_losses.Total_loss.boundary_loss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "net_logit", ",", "dist_maps", ",", "df_out", ",", "gts_df", ",", "gts", ")", ":", "\n", "        ", "df_loss", "=", "self", ".", "df_loss", "(", "df_out", ",", "gts_df", ",", "gts", "[", ":", ",", "None", ",", "...", "]", ")", "\n", "\n", "if", "self", ".", "boundary", ":", "\n", "            ", "net_prob", "=", "nn", ".", "functional", ".", "softmax", "(", "net_logit", ",", "dim", "=", "1", ")", "\n", "b_loss", "=", "self", ".", "boundary_loss", "(", "net_prob", ",", "dist_maps", ",", "gts", ")", "\n", "", "else", ":", "\n", "            ", "b_loss", "=", "torch", ".", "tensor", "(", "[", "0.", "]", ",", "device", "=", "net_logit", ".", "device", ")", "\n", "\n", "", "return", "df_loss", ",", "b_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.mag_angle_loss.EuclideanAngleLossWithOHEM.__init__": [[19, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npRatio", "=", "3", ")", ":", "\n", "        ", "super", "(", "EuclideanAngleLossWithOHEM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npRatio", "=", "npRatio", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.mag_angle_loss.EuclideanAngleLossWithOHEM.__cal_weight": [[23, 45], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "overlap_segi.to"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["", "def", "__cal_weight", "(", "self", ",", "gt", ")", ":", "\n", "        ", "_", ",", "H", ",", "W", "=", "gt", ".", "shape", "# N=1", "\n", "labels", "=", "torch", ".", "unique", "(", "gt", ",", "sorted", "=", "True", ")", "[", "1", ":", "]", "\n", "weight", "=", "torch", ".", "zeros", "(", "(", "H", ",", "W", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "gt", ".", "device", ")", "\n", "posRegion", "=", "gt", "[", "0", ",", "...", "]", ">", "0", "\n", "posCount", "=", "torch", ".", "sum", "(", "posRegion", ")", "\n", "if", "posCount", "!=", "0", ":", "\n", "            ", "segRemain", "=", "0", "\n", "for", "segi", "in", "labels", ":", "\n", "                ", "overlap_segi", "=", "gt", "[", "0", ",", "...", "]", "==", "segi", "\n", "overlapCount_segi", "=", "torch", ".", "sum", "(", "overlap_segi", ")", "\n", "if", "overlapCount_segi", "==", "0", ":", "continue", "\n", "segRemain", "=", "segRemain", "+", "1", "\n", "", "segAve", "=", "float", "(", "posCount", ")", "/", "segRemain", "\n", "for", "segi", "in", "labels", ":", "\n", "                ", "overlap_segi", "=", "gt", "[", "0", ",", "...", "]", "==", "segi", "\n", "overlapCount_segi", "=", "torch", ".", "sum", "(", "overlap_segi", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "if", "overlapCount_segi", "==", "0", ":", "continue", "\n", "pixAve", "=", "segAve", "/", "overlapCount_segi", "\n", "weight", "=", "weight", "*", "(", "~", "overlap_segi", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "pixAve", "*", "overlap_segi", ".", "to", "(", "torch", ".", "float", ")", "\n", "# weight = weight[None]", "\n", "", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.mag_angle_loss.EuclideanAngleLossWithOHEM.forward": [[46, 104], ["mag_angle_loss.cart2polar", "mag_angle_loss.cart2polar", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "range", "torch.flatten.view", "torch.flatten.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros.clone", "torch.zeros.clone", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mag_angle_loss.EuclideanAngleLossWithOHEM.__cal_weight", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.mag_angle_loss.cart2polar", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.mag_angle_loss.cart2polar", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__cal_weight"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gt_df", ",", "gt", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\" pred: (N, C, H, W)\n            gt_df: (N, C, H, W)\n            gt: (N, 1, H, W)\n        \"\"\"", "\n", "# L1 and L2 distance", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "pred", ".", "shape", "\n", "distL1", "=", "pred", "-", "gt_df", "\n", "distL2", "=", "distL1", "**", "2", "\n", "\n", "theta_p", "=", "cart2polar", "(", "pred", ")", "\n", "theta_g", "=", "cart2polar", "(", "gt_df", ")", "\n", "angleDistL1", "=", "theta_g", "-", "theta_p", "\n", "\n", "\n", "if", "weight", "is", "None", ":", "\n", "            ", "weight", "=", "torch", ".", "zeros", "(", "(", "N", ",", "H", ",", "W", ")", ",", "device", "=", "pred", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "weight", "[", "i", "]", "=", "self", ".", "__cal_weight", "(", "gt", "[", "i", "]", ")", "\n", "\n", "# the amount of positive and negtive pixels", "\n", "", "", "regionPos", "=", "(", "weight", ">", "0", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "regionNeg", "=", "(", "weight", "==", "0", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "sumPos", "=", "torch", ".", "sum", "(", "regionPos", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "# (N,)", "\n", "sumNeg", "=", "torch", ".", "sum", "(", "regionNeg", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "# the amount of hard negative pixels", "\n", "sumhardNeg", "=", "torch", ".", "min", "(", "self", ".", "npRatio", "*", "sumPos", ",", "sumNeg", ")", ".", "to", "(", "torch", ".", "int", ")", "# (N,)", "\n", "\n", "# angle loss on ~(top - sumhardNeg) negative pixels to 0", "\n", "angleLossNeg", "=", "(", "angleDistL1", "**", "2", ")", "*", "regionNeg", "\n", "angleLossNegFlat", "=", "torch", ".", "flatten", "(", "angleLossNeg", ",", "start_dim", "=", "1", ")", "# (N, ...)", "\n", "\n", "\n", "# set loss on ~(top - sumhardNeg) negative pixels to 0", "\n", "lossNeg", "=", "(", "distL2", "[", ":", ",", "0", ",", "...", "]", "+", "distL2", "[", ":", ",", "1", ",", "...", "]", ")", "*", "regionNeg", "\n", "lossFlat", "=", "torch", ".", "flatten", "(", "lossNeg", ",", "start_dim", "=", "1", ")", "# (N, ...)", "\n", "\n", "# l2-norm distance and angle distance", "\n", "lossFlat", "=", "lossFlat", "+", "angleLossNegFlat", "\n", "arg", "=", "torch", ".", "argsort", "(", "lossFlat", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "lossFlat", "[", "i", ",", "arg", "[", "i", ",", ":", "-", "sumhardNeg", "[", "i", "]", "]", "]", "=", "0", "\n", "", "lossHard", "=", "lossFlat", ".", "view", "(", "lossNeg", ".", "shape", ")", "\n", "\n", "# weight for positive and negative pixels", "\n", "weightPos", "=", "torch", ".", "zeros_like", "(", "gt", ",", "dtype", "=", "pred", ".", "dtype", ")", "\n", "weightNeg", "=", "torch", ".", "zeros_like", "(", "gt", ",", "dtype", "=", "pred", ".", "dtype", ")", "\n", "\n", "weightPos", "=", "weight", ".", "clone", "(", ")", "\n", "\n", "weightNeg", "[", ":", ",", "0", ",", "...", "]", "=", "(", "lossHard", "!=", "0", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "# total loss", "\n", "total_loss", "=", "torch", ".", "sum", "(", "(", "(", "distL2", "[", ":", ",", "0", ",", "...", "]", "+", "distL2", "[", ":", ",", "1", ",", "...", "]", ")", "+", "angleDistL1", "**", "2", ")", "*", "\n", "(", "weightPos", "+", "weightNeg", ")", ")", "/", "N", "/", "2.", "/", "torch", ".", "sum", "(", "weightPos", "+", "weightNeg", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.mag_angle_loss.cart2polar": [[6, 17], ["torch.atan", "torch.atan"], "function", ["None"], ["def", "cart2polar", "(", "coord", ")", ":", "\n", "    ", "\"\"\" coord: (N, 2, ...)\n    \"\"\"", "\n", "x", "=", "coord", "[", ":", ",", "0", ",", "...", "]", "\n", "y", "=", "coord", "[", ":", ",", "1", ",", "...", "]", "\n", "\n", "theta", "=", "torch", ".", "atan", "(", "y", "/", "(", "x", "+", "1e-12", ")", ")", "\n", "\n", "theta", "=", "theta", "+", "(", "x", "<", "0", ")", ".", "to", "(", "coord", ".", "dtype", ")", "*", "math", ".", "pi", "\n", "theta", "=", "theta", "+", "(", "(", "x", ">", "0", ")", ".", "to", "(", "coord", ".", "dtype", ")", "*", "(", "y", "<", "0", ")", ".", "to", "(", "coord", ".", "dtype", ")", ")", "*", "2", "*", "math", ".", "pi", "\n", "return", "theta", "/", "(", "2", "*", "math", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__": [[24, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "npRatio", "=", "3", ")", ":", "\n", "        ", "super", "(", "EuclideanLossWithOHEM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npRatio", "=", "npRatio", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__cal_weight": [[28, 50], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "overlap_segi.to"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["", "def", "__cal_weight", "(", "self", ",", "gt", ")", ":", "\n", "        ", "_", ",", "H", ",", "W", "=", "gt", ".", "shape", "# N=1", "\n", "labels", "=", "torch", ".", "unique", "(", "gt", ",", "sorted", "=", "True", ")", "[", "1", ":", "]", "\n", "weight", "=", "torch", ".", "zeros", "(", "(", "H", ",", "W", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "gt", ".", "device", ")", "\n", "posRegion", "=", "gt", "[", "0", ",", "...", "]", ">", "0", "\n", "posCount", "=", "torch", ".", "sum", "(", "posRegion", ")", "\n", "if", "posCount", "!=", "0", ":", "\n", "            ", "segRemain", "=", "0", "\n", "for", "segi", "in", "labels", ":", "\n", "                ", "overlap_segi", "=", "gt", "[", "0", ",", "...", "]", "==", "segi", "\n", "overlapCount_segi", "=", "torch", ".", "sum", "(", "overlap_segi", ")", "\n", "if", "overlapCount_segi", "==", "0", ":", "continue", "\n", "segRemain", "=", "segRemain", "+", "1", "\n", "", "segAve", "=", "float", "(", "posCount", ")", "/", "segRemain", "\n", "for", "segi", "in", "labels", ":", "\n", "                ", "overlap_segi", "=", "gt", "[", "0", ",", "...", "]", "==", "segi", "\n", "overlapCount_segi", "=", "torch", ".", "sum", "(", "overlap_segi", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "if", "overlapCount_segi", "==", "0", ":", "continue", "\n", "pixAve", "=", "segAve", "/", "overlapCount_segi", "\n", "weight", "=", "weight", "*", "(", "~", "overlap_segi", ")", ".", "to", "(", "torch", ".", "float", ")", "+", "pixAve", "*", "overlap_segi", ".", "to", "(", "torch", ".", "float", ")", "\n", "# weight = weight[None]", "\n", "", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.forward": [[51, 96], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.min().to", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "range", "torch.flatten.view", "torch.flatten.view", "torch.flatten.view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "df_loss.EuclideanLossWithOHEM.__cal_weight", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.EuclideanLossWithOHEM.__cal_weight"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gt_df", ",", "gt", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\" pred: (N, C, H, W)\n            gt_df: (N, C, H, W)\n            gt: (N, 1, H, W)\n        \"\"\"", "\n", "# L1 and L2 distance", "\n", "N", ",", "_", ",", "H", ",", "W", "=", "pred", ".", "shape", "\n", "distL1", "=", "pred", "-", "gt_df", "\n", "distL2", "=", "distL1", "**", "2", "\n", "\n", "if", "weight", "is", "None", ":", "\n", "            ", "weight", "=", "torch", ".", "zeros", "(", "(", "N", ",", "H", ",", "W", ")", ",", "device", "=", "pred", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "weight", "[", "i", "]", "=", "self", ".", "__cal_weight", "(", "gt", "[", "i", "]", ")", "\n", "\n", "# the amount of positive and negtive pixels", "\n", "", "", "regionPos", "=", "(", "weight", ">", "0", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "regionNeg", "=", "(", "weight", "==", "0", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "sumPos", "=", "torch", ".", "sum", "(", "regionPos", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "# (N,)", "\n", "sumNeg", "=", "torch", ".", "sum", "(", "regionNeg", ",", "dim", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "# the amount of hard negative pixels", "\n", "sumhardNeg", "=", "torch", ".", "min", "(", "self", ".", "npRatio", "*", "sumPos", ",", "sumNeg", ")", ".", "to", "(", "torch", ".", "int", ")", "# (N,)", "\n", "\n", "# set loss on ~(top - sumhardNeg) negative pixels to 0", "\n", "lossNeg", "=", "(", "distL2", "[", ":", ",", "0", ",", "...", "]", "+", "distL2", "[", ":", ",", "1", ",", "...", "]", ")", "*", "regionNeg", "\n", "lossFlat", "=", "torch", ".", "flatten", "(", "lossNeg", ",", "start_dim", "=", "1", ")", "# (N, ...)", "\n", "arg", "=", "torch", ".", "argsort", "(", "lossFlat", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "lossFlat", "[", "i", ",", "arg", "[", "i", ",", ":", "-", "sumhardNeg", "[", "i", "]", "]", "]", "=", "0", "\n", "", "lossHard", "=", "lossFlat", ".", "view", "(", "lossNeg", ".", "shape", ")", "\n", "\n", "# weight for positive and negative pixels", "\n", "weightPos", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "weightNeg", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "\n", "weightPos", "=", "torch", ".", "stack", "(", "[", "weight", ",", "weight", "]", ",", "dim", "=", "1", ")", "\n", "\n", "weightNeg", "[", ":", ",", "0", ",", "...", "]", "=", "(", "lossHard", "!=", "0", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "weightNeg", "[", ":", ",", "1", ",", "...", "]", "=", "(", "lossHard", "!=", "0", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "# total loss", "\n", "total_loss", "=", "torch", ".", "sum", "(", "(", "distL1", "**", "2", ")", "*", "(", "weightPos", "+", "weightNeg", ")", ")", "/", "N", "/", "2.", "/", "torch", ".", "sum", "(", "weightPos", "+", "weightNeg", ")", "\n", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.losses.df_loss.LossSegDF": [[7, 22], ["torch.squeeze().to().long", "torch.squeeze().to().long", "torch.squeeze().to().long", "gts_df.to().long.to().long", "torch.cross_entropy", "torch.mse_loss", "torch.squeeze().to", "torch.squeeze().to", "torch.squeeze().to", "gts_df.to().long.to", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "function", ["home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to", "home.repos.pwc.inspect_result.c-feng_DirectionalFeature.utils.image_list.ImageList.to"], ["def", "LossSegDF", "(", "net_ret", ",", "data", ",", "device", "=", "\"cuda\"", ")", ":", "\n", "    ", "net_out", ",", "df_out", "=", "net_ret", "\n", "\n", "_", ",", "gts", ",", "gts_df", "=", "data", "\n", "gts", "=", "torch", ".", "squeeze", "(", "gts", ",", "1", ")", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "gts_df", "=", "gts_df", ".", "to", "(", "device", ")", ".", "long", "(", ")", "\n", "\n", "# segmentation Loss", "\n", "seg_loss", "=", "F", ".", "cross_entropy", "(", "net_out", ",", "gts", ")", "\n", "\n", "# direction field Loss", "\n", "df_loss", "=", "F", ".", "mse_loss", "(", "df_out", ",", "gts_df", ")", "\n", "\n", "total_loss", "=", "seg_loss", "+", "df_loss", "\n", "return", "total_loss", "\n", "\n"]]}