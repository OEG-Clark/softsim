{"home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.main_dp.test_model": [[18, 27], ["model.eval", "model_linear.eval", "utils.evaluate", "utils.evaluate", "utils.evaluate", "abs", "pprint.pprint"], "function", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate"], ["def", "test_model", "(", "model", ",", "model_linear", ",", "dataloader", ",", "dataloader_0", ",", "dataloader_1", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "model_linear", ".", "eval", "(", ")", "\n", "\n", "ap", ",", "_", "=", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader", ")", "\n", "ap_0", ",", "score_0", "=", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader_0", ")", "\n", "ap_1", ",", "score_1", "=", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader_1", ")", "\n", "gap", "=", "abs", "(", "score_0", "-", "score_1", ")", "\n", "pprint", "(", "\"AP: {:.4f} DP Gap: {:.4f}\"", ".", "format", "(", "ap", ",", "gap", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.main_dp.fit_model": [[30, 120], ["pprint.pprint", "min", "int", "iter", "iter", "iter", "model.train", "model_linear.train", "tqdm.tqdm", "len", "len", "len", "range", "iter.next", "iter.next", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model", "model_linear", "criterion", "optimizer.zero_grad", "optimizer_linear.zero_grad", "loss.backward", "optimizer.step", "optimizer_linear.step", "inputs_0.cuda", "target_0.float().cuda", "inputs_1.cuda", "target_1.float().cuda", "model", "model_linear", "model", "model_linear", "torch.abs", "torch.abs", "pprint.pprint", "numpy.random.beta", "inputs_mix.requires_grad_.requires_grad_", "model", "model_linear().sum", "[].view", "torch.abs", "torch.abs", "target_0.float", "target_1.float", "model_linear.mean", "model_linear.mean", "grad_inn.mean", "pprint.pprint", "numpy.random.beta", "model", "model", "inputs_mix.requires_grad_.requires_grad_", "model_linear().sum", "[].view", "torch.abs", "torch.abs", "model_linear", "grad_inn.mean", "pprint.pprint", "pprint.pprint", "torch.autograd.grad", "torch.autograd.grad", "model_linear", "torch.autograd.grad", "torch.autograd.grad"], "function", ["None"], ["", "def", "fit_model", "(", "epochs", ",", "dataloader", ",", "dataloader_0", ",", "dataloader_1", ",", "mode", "=", "'mixup_smooth'", ",", "lam", "=", "100", ")", ":", "\n", "    ", "pprint", "(", "\"Epoch: {}\"", ".", "format", "(", "epochs", ")", ")", "\n", "\n", "len_dataloader", "=", "min", "(", "len", "(", "dataloader", ")", ",", "len", "(", "dataloader_0", ")", ",", "len", "(", "dataloader_1", ")", ")", "\n", "len_dataloader", "=", "int", "(", "len_dataloader", ")", "\n", "data_iter", "=", "iter", "(", "dataloader", ")", "\n", "data_iter_0", "=", "iter", "(", "dataloader_0", ")", "\n", "data_iter_1", "=", "iter", "(", "dataloader_1", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "model_linear", ".", "train", "(", ")", "\n", "\n", "for", "it", "in", "tqdm", "(", "range", "(", "len_dataloader", ")", ")", ":", "\n", "        ", "inputs_0", ",", "target_0", "=", "data_iter_0", ".", "next", "(", ")", "\n", "inputs_1", ",", "target_1", "=", "data_iter_1", ".", "next", "(", ")", "\n", "inputs_0", ",", "target_0", "=", "inputs_0", ".", "cuda", "(", ")", ",", "target_0", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "inputs_1", ",", "target_1", "=", "inputs_1", ".", "cuda", "(", ")", ",", "target_1", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# supervised loss", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs_0", ",", "inputs_1", ")", ",", "0", ")", "\n", "target", "=", "torch", ".", "cat", "(", "(", "target_0", ",", "target_1", ")", ",", "0", ")", "\n", "feat", "=", "model", "(", "inputs", ")", "\n", "ops", "=", "model_linear", "(", "feat", ")", "\n", "loss_sup", "=", "criterion", "(", "ops", "[", ":", ",", "0", "]", ",", "target", ")", "\n", "\n", "if", "mode", "==", "'GapReg'", ":", "\n", "            ", "feat", "=", "model", "(", "inputs_0", ")", "\n", "ops_0", "=", "model_linear", "(", "feat", ")", "\n", "feat", "=", "model", "(", "inputs_1", ")", "\n", "ops_1", "=", "model_linear", "(", "feat", ")", "\n", "\n", "loss_gap", "=", "torch", ".", "abs", "(", "ops_0", ".", "mean", "(", ")", "-", "ops_1", ".", "mean", "(", ")", ")", "\n", "loss", "=", "loss_sup", "+", "lam", "*", "loss_gap", "\n", "\n", "if", "it", "%", "1000", "==", "0", ":", "\n", "                ", "pprint", "(", "\"Loss Sup: {:.4f} | Loss Gap: {:.8f} \"", ".", "format", "(", "loss_sup", ",", "loss_gap", ")", ")", "\n", "\n", "", "", "elif", "mode", "==", "'mixup'", ":", "\n", "            ", "alpha", "=", "1", "\n", "gamma", "=", "beta", "(", "alpha", ",", "alpha", ")", "\n", "\n", "# Input Mixup", "\n", "inputs_mix", "=", "inputs_0", "*", "gamma", "+", "inputs_1", "*", "(", "1", "-", "gamma", ")", "\n", "inputs_mix", "=", "inputs_mix", ".", "requires_grad_", "(", "True", ")", "\n", "feat", "=", "model", "(", "inputs_mix", ")", "\n", "ops", "=", "model_linear", "(", "feat", ")", ".", "sum", "(", ")", "\n", "\n", "# Smoothness Regularization", "\n", "gradx", "=", "torch", ".", "autograd", ".", "grad", "(", "ops", ",", "inputs_mix", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "inputs_mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x_d", "=", "(", "inputs_1", "-", "inputs_0", ")", ".", "view", "(", "inputs_mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "grad_inn", "=", "(", "gradx", "*", "x_d", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "loss_grad", "=", "torch", ".", "abs", "(", "grad_inn", ".", "mean", "(", ")", ")", "\n", "\n", "loss", "=", "loss_sup", "+", "lam", "*", "loss_grad", "\n", "\n", "if", "it", "%", "1000", "==", "0", ":", "\n", "                ", "pprint", "(", "\"Loss Sup: {:.4f} Loss Mixup {:.7f}\"", ".", "format", "(", "loss_sup", ",", "loss_grad", ")", ")", "\n", "\n", "", "", "elif", "mode", "==", "'mixup_manifold'", ":", "\n", "            ", "alpha", "=", "1", "\n", "gamma", "=", "beta", "(", "alpha", ",", "alpha", ")", "\n", "\n", "# Manifold Mixup", "\n", "feat_0", "=", "model", "(", "inputs_0", ")", "\n", "feat_1", "=", "model", "(", "inputs_1", ")", "\n", "inputs_mix", "=", "feat_0", "*", "gamma", "+", "feat_1", "*", "(", "1", "-", "gamma", ")", "\n", "inputs_mix", "=", "inputs_mix", ".", "requires_grad_", "(", "True", ")", "\n", "ops", "=", "model_linear", "(", "inputs_mix", ")", ".", "sum", "(", ")", "\n", "\n", "# Smoothness Regularization", "\n", "gradx", "=", "torch", ".", "autograd", ".", "grad", "(", "ops", ",", "inputs_mix", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "inputs_mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x_d", "=", "(", "feat_1", "-", "feat_0", ")", ".", "view", "(", "inputs_mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "grad_inn", "=", "(", "gradx", "*", "x_d", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "loss_grad", "=", "torch", ".", "abs", "(", "grad_inn", ".", "mean", "(", ")", ")", "\n", "\n", "loss", "=", "loss_sup", "+", "lam", "*", "loss_grad", "\n", "\n", "if", "it", "%", "1000", "==", "0", ":", "\n", "                ", "pprint", "(", "\"Loss Sup: {:.4f} Loss Mixup Manifold {:.7f}\"", ".", "format", "(", "loss_sup", ",", "loss_grad", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "loss_sup", "\n", "if", "it", "%", "1000", "==", "0", ":", "\n", "                ", "pprint", "(", "\"Loss Sup: {:.4f}\"", ".", "format", "(", "loss_sup", ")", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_linear", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_linear", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.main_eo.test_model": [[18, 34], ["model.eval", "model_linear.eval", "utils.evaluate", "utils.evaluate", "utils.evaluate", "utils.evaluate", "utils.evaluate", "abs", "abs", "pprint.pprint"], "function", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate"], ["def", "test_model", "(", "model", ",", "model_linear", ",", "dataloader", ",", "dataloader_00", ",", "dataloader_01", ",", "dataloader_10", ",", "dataloader_11", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "model_linear", ".", "eval", "(", ")", "\n", "\n", "ap", ",", "_", "=", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader", ")", "\n", "\n", "_", ",", "score_00", "=", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader_00", ")", "\n", "_", ",", "score_01", "=", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader_01", ")", "\n", "_", ",", "score_10", "=", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader_10", ")", "\n", "_", ",", "score_11", "=", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader_11", ")", "\n", "\n", "gap_0", "=", "abs", "(", "score_00", "-", "score_10", ")", "\n", "gap_1", "=", "abs", "(", "score_01", "-", "score_11", ")", "\n", "gap", "=", "gap_0", "+", "gap_1", "\n", "\n", "pprint", "(", "\"AP: {:.4f} EO Gap: {:.4f}\"", ".", "format", "(", "ap", ",", "gap", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.main_eo.fit_model": [[36, 145], ["min", "iter", "iter", "iter", "iter", "iter", "model.train", "model_linear.train", "tqdm.tqdm", "len", "len", "len", "len", "len", "range", "iter.next", "iter.next", "iter.next", "iter.next", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model", "model_linear", "criterion", "optimizer.zero_grad", "optimizer_linear.zero_grad", "loss.backward", "optimizer.step", "optimizer_linear.step", "inputs_00.cuda", "inputs_01.cuda", "inputs_10.cuda", "inputs_11.cuda", "target_00.float().cuda", "target_01.float().cuda", "target_10.float().cuda", "target_11.float().cuda", "range", "model", "model_linear", "model", "model_linear", "torch.abs", "torch.abs", "pprint.pprint", "range", "target_00.float", "target_01.float", "target_10.float", "target_11.float", "numpy.random.beta", "inputs_mix.requires_grad_.requires_grad_", "model", "model_linear", "ops.sum.sum", "[].view", "torch.abs", "torch.abs", "pprint.pprint", "range", "model_linear.mean", "model_linear.mean", "grad_inn.mean", "numpy.random.beta", "model", "model", "inputs_mix.requires_grad_.requires_grad_", "model_linear", "ops.sum.sum", "[].view", "torch.abs", "torch.abs", "pprint.pprint", "pprint.pprint", "grad_inn.mean", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad"], "function", ["None"], ["", "def", "fit_model", "(", "epochs", ",", "model", ",", "dataloader", ",", "dataloader_00", ",", "dataloader_01", ",", "dataloader_10", ",", "dataloader_11", ",", "mode", "=", "'mixup'", ",", "lam", "=", "30", ")", ":", "\n", "\n", "    ", "len_dataloader", "=", "min", "(", "len", "(", "dataloader", ")", ",", "len", "(", "dataloader_00", ")", ",", "len", "(", "dataloader_01", ")", ",", "len", "(", "dataloader_10", ")", ",", "len", "(", "dataloader_11", ")", ")", "\n", "data_iter", "=", "iter", "(", "dataloader", ")", "\n", "data_iter_00", "=", "iter", "(", "dataloader_00", ")", "\n", "data_iter_01", "=", "iter", "(", "dataloader_01", ")", "\n", "data_iter_10", "=", "iter", "(", "dataloader_10", ")", "\n", "data_iter_11", "=", "iter", "(", "dataloader_11", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "model_linear", ".", "train", "(", ")", "\n", "\n", "for", "it", "in", "tqdm", "(", "range", "(", "len_dataloader", ")", ")", ":", "\n", "        ", "inputs_00", ",", "target_00", "=", "data_iter_00", ".", "next", "(", ")", "\n", "inputs_01", ",", "target_01", "=", "data_iter_01", ".", "next", "(", ")", "\n", "inputs_10", ",", "target_10", "=", "data_iter_10", ".", "next", "(", ")", "\n", "inputs_11", ",", "target_11", "=", "data_iter_11", ".", "next", "(", ")", "\n", "\n", "inputs_00", ",", "inputs_01", "=", "inputs_00", ".", "cuda", "(", ")", ",", "inputs_01", ".", "cuda", "(", ")", "\n", "inputs_10", ",", "inputs_11", "=", "inputs_10", ".", "cuda", "(", ")", ",", "inputs_11", ".", "cuda", "(", ")", "\n", "target_00", ",", "target_01", "=", "target_00", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "target_01", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "target_10", ",", "target_11", "=", "target_10", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "target_11", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "inputs_0_", "=", "[", "inputs_00", ",", "inputs_01", "]", "\n", "inputs_1_", "=", "[", "inputs_10", ",", "inputs_11", "]", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs_00", ",", "inputs_01", ",", "inputs_10", ",", "inputs_11", ")", ",", "0", ")", "\n", "target", "=", "torch", ".", "cat", "(", "(", "target_00", ",", "target_01", ",", "target_10", ",", "target_11", ")", ",", "0", ")", "\n", "feat", "=", "model", "(", "inputs", ")", "\n", "ops", "=", "model_linear", "(", "feat", ")", "\n", "\n", "loss_sup", "=", "criterion", "(", "ops", "[", ":", ",", "0", "]", ",", "target", ")", "\n", "\n", "if", "mode", "==", "'GapReg'", ":", "\n", "            ", "loss_gap", "=", "0", "\n", "for", "g", "in", "range", "(", "2", ")", ":", "\n", "                ", "inputs_0", "=", "inputs_0_", "[", "g", "]", "\n", "inputs_1", "=", "inputs_1_", "[", "g", "]", "\n", "feat", "=", "model", "(", "inputs_0", ")", "\n", "ops_0", "=", "model_linear", "(", "feat", ")", "\n", "feat", "=", "model", "(", "inputs_1", ")", "\n", "ops_1", "=", "model_linear", "(", "feat", ")", "\n", "\n", "loss_gap", "+=", "torch", ".", "abs", "(", "ops_0", ".", "mean", "(", ")", "-", "ops_1", ".", "mean", "(", ")", ")", "\n", "\n", "", "loss", "=", "loss_sup", "+", "lam", "*", "loss_gap", "\n", "\n", "if", "it", "%", "1000", "==", "0", ":", "\n", "                ", "pprint", "(", "\"Loss Sup: {:.4f} Loss Gap: {:.8f} \"", ".", "format", "(", "loss_sup", ",", "loss_gap", ")", ")", "\n", "\n", "", "", "elif", "mode", "==", "'mixup'", ":", "\n", "            ", "alpha", "=", "1", "\n", "loss_grad", "=", "0", "\n", "for", "g", "in", "range", "(", "2", ")", ":", "\n", "                ", "inputs_0", "=", "inputs_0_", "[", "g", "]", "\n", "inputs_1", "=", "inputs_1_", "[", "g", "]", "\n", "gamma", "=", "beta", "(", "alpha", ",", "alpha", ")", "\n", "inputs_mix", "=", "inputs_0", "*", "gamma", "+", "inputs_1", "*", "(", "1", "-", "gamma", ")", "\n", "inputs_mix", "=", "inputs_mix", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "feat", "=", "model", "(", "inputs_mix", ")", "\n", "ops", "=", "model_linear", "(", "feat", ")", "\n", "ops", "=", "ops", ".", "sum", "(", ")", "\n", "\n", "gradx", "=", "torch", ".", "autograd", ".", "grad", "(", "ops", ",", "inputs_mix", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "inputs_mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x_d", "=", "(", "inputs_1", "-", "inputs_0", ")", ".", "view", "(", "inputs_mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "grad_inn", "=", "(", "gradx", "*", "x_d", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "loss_grad", "+=", "torch", ".", "abs", "(", "grad_inn", ".", "mean", "(", ")", ")", "\n", "\n", "", "loss", "=", "loss_sup", "+", "lam", "*", "loss_grad", "\n", "\n", "if", "it", "%", "1000", "==", "0", ":", "\n", "                ", "pprint", "(", "\"Loss Sup: {:.4f} Loss Mixup: {:.7f}\"", ".", "format", "(", "loss_sup", ",", "loss_grad", ")", ")", "\n", "\n", "", "", "elif", "mode", "==", "'mixup_manifold'", ":", "\n", "            ", "alpha", "=", "1", "\n", "loss_grad", "=", "0", "\n", "for", "g", "in", "range", "(", "2", ")", ":", "\n", "                ", "inputs_0", "=", "inputs_0_", "[", "g", "]", "\n", "inputs_1", "=", "inputs_1_", "[", "g", "]", "\n", "\n", "gamma", "=", "beta", "(", "alpha", ",", "alpha", ")", "\n", "feat_0", "=", "model", "(", "inputs_0", ")", "\n", "feat_1", "=", "model", "(", "inputs_1", ")", "\n", "inputs_mix", "=", "feat_0", "*", "gamma", "+", "feat_1", "*", "(", "1", "-", "gamma", ")", "\n", "inputs_mix", "=", "inputs_mix", ".", "requires_grad_", "(", "True", ")", "\n", "\n", "ops", "=", "model_linear", "(", "inputs_mix", ")", "\n", "ops", "=", "ops", ".", "sum", "(", ")", "\n", "\n", "gradx", "=", "torch", ".", "autograd", ".", "grad", "(", "ops", ",", "inputs_mix", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "view", "(", "inputs_mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x_d", "=", "(", "feat_1", "-", "feat_0", ")", ".", "view", "(", "inputs_mix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "grad_inn", "=", "(", "gradx", "*", "x_d", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "loss_grad", "+=", "torch", ".", "abs", "(", "grad_inn", ".", "mean", "(", ")", ")", "\n", "\n", "", "loss", "=", "loss_sup", "+", "lam", "*", "loss_grad", "\n", "\n", "if", "it", "%", "1000", "==", "0", ":", "\n", "                ", "pprint", "(", "\"Loss Sup: {:.4f} Loss Mixup Manifold: {:.7f}\"", ".", "format", "(", "loss_sup", ",", "loss_grad", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "loss", "=", "loss_sup", "\n", "if", "it", "%", "1000", "==", "0", ":", "\n", "                ", "pprint", "(", "\"Loss Sup: {:.4f}\"", ".", "format", "(", "loss_sup", ")", ")", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_linear", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_linear", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.model.Identity.__init__": [[7, 9], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.model.Identity.forward": [[10, 12], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.model.ResNet18_Encoder.__init__": [[14, 19], ["torch.Module.__init__", "torchvision.models.resnet18", "model.Identity", "model.Identity"], "methods", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "resnet", ".", "fc", "=", "Identity", "(", ")", "\n", "self", ".", "resnet", ".", "avgpool", "=", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.model.ResNet18_Encoder.forward": [[20, 23], ["model.ResNet18_Encoder.resnet", "model.ResNet18_Encoder.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "resnet", "(", "x", ")", "\n", "return", "outputs", ".", "view", "(", "-", "1", ",", "512", ",", "8", ",", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.model.LinearModel.__init__": [[25, 31], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LinearModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "512", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "1", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "avg", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.model.LinearModel.forward": [[32, 38], ["model.LinearModel.avg().view", "model.LinearModel.fc1", "model.LinearModel.relu", "model.LinearModel.fc2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "model.LinearModel.avg"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg", "(", "x", ")", ".", "view", "(", "-", "1", ",", "512", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "outputs", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "torch", ".", "sigmoid", "(", "outputs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.CelebA.__init__": [[17, 39], ["numpy.concatenate().astype", "numpy.concatenate", "numpy.concatenate", "list", "numpy.concatenate().astype", "numpy.concatenate", "numpy.concatenate().astype", "numpy.where", "numpy.where", "numpy.where", "set", "set", "numpy.concatenate", "numpy.concatenate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataframe", ",", "folder_dir", ",", "target_id", ",", "transform", "=", "None", ",", "gender", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataframe", "=", "dataframe", "\n", "self", ".", "folder_dir", "=", "folder_dir", "\n", "self", ".", "target_id", "=", "target_id", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "file_names", "=", "dataframe", ".", "index", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", ")", ".", "astype", "(", "float", ")", "\n", "gender_id", "=", "20", "\n", "\n", "if", "gender", "is", "not", "None", ":", "\n", "            ", "if", "target", "is", "not", "None", ":", "\n", "                ", "label_np", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", ")", "\n", "gender_idx", "=", "np", ".", "where", "(", "label_np", "[", ":", ",", "gender_id", "]", "==", "gender", ")", "[", "0", "]", "\n", "target_idx", "=", "np", ".", "where", "(", "label_np", "[", ":", ",", "target_id", "]", "==", "target", ")", "[", "0", "]", "\n", "idx", "=", "list", "(", "set", "(", "gender_idx", ")", "&", "set", "(", "target_idx", ")", ")", "\n", "self", ".", "file_names", "=", "self", ".", "file_names", "[", "idx", "]", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", "[", "idx", "]", ")", ".", "astype", "(", "float", ")", "\n", "", "else", ":", "\n", "                ", "label_np", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", ")", "\n", "gender_idx", "=", "np", ".", "where", "(", "label_np", "[", ":", ",", "gender_id", "]", "==", "gender", ")", "[", "0", "]", "\n", "self", ".", "file_names", "=", "self", ".", "file_names", "[", "gender_idx", "]", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", "[", "gender_idx", "]", ")", ".", "astype", "(", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.CelebA.__len__": [[40, 42], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.CelebA.__getitem__": [[43, 49], ["PIL.Image.open", "os.path.join", "utils.CelebA.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder_dir", ",", "self", ".", "file_names", "[", "index", "]", ")", ")", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "return", "image", ",", "label", "[", "self", ".", "target_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.get_loader": [[51, 60], ["utils.CelebA", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], ["", "", "def", "get_loader", "(", "df", ",", "data_path", ",", "target_id", ",", "batch_size", ",", "gender", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "    ", "dl", "=", "CelebA", "(", "df", ",", "data_path", ",", "target_id", ",", "transform", "=", "tfms", ",", "gender", "=", "gender", ",", "target", "=", "target", ")", "\n", "\n", "if", "'train'", "in", "data_path", ":", "\n", "        ", "dloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dl", ",", "shuffle", "=", "True", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "3", ",", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "dloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dl", ",", "shuffle", "=", "False", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "3", ")", "\n", "\n", "", "return", "dloader", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.evaluate": [[61, 77], ["enumerate", "numpy.concatenate", "numpy.concatenate", "sklearn.metrics.average_precision_score", "model", "model_linear().detach", "np.concatenate.append", "np.concatenate.append", "numpy.mean", "inputs.cuda", "target.float().cuda", "pred[].data.cpu().numpy", "target.data.cpu().numpy", "model_linear", "target.float", "pred[].data.cpu", "target.data.cpu"], "function", ["None"], ["", "def", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader", ")", ":", "\n", "    ", "y_scores", "=", "[", "]", "\n", "y_true", "=", "[", "]", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "inputs", ",", "target", "=", "inputs", ".", "cuda", "(", ")", ",", "target", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "feat", "=", "model", "(", "inputs", ")", "\n", "pred", "=", "model_linear", "(", "feat", ")", ".", "detach", "(", ")", "\n", "\n", "y_scores", ".", "append", "(", "pred", "[", ":", ",", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y_true", ".", "append", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "y_scores", "=", "np", ".", "concatenate", "(", "y_scores", ")", "\n", "y_true", "=", "np", ".", "concatenate", "(", "y_true", ")", "\n", "ap", "=", "average_precision_score", "(", "y_true", ",", "y_scores", ")", "\n", "return", "ap", ",", "np", ".", "mean", "(", "y_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.BCELoss": [[78, 80], ["torch.log", "torch.log"], "function", ["None"], ["", "def", "BCELoss", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "-", "(", "target", "*", "torch", ".", "log", "(", "pred", ")", "+", "(", "1", "-", "target", ")", "*", "torch", ".", "log", "(", "1", "-", "pred", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.main.run_experiments": [[14, 62], ["range", "print", "print", "print", "print", "dataset.preprocess_adult_data", "model.Net().cuda", "torch.Adam", "torch.BCELoss", "tqdm.tqdm", "gap_val_epoch.index", "gap.append", "ap.append", "numpy.mean", "numpy.mean", "Net().cuda.parameters", "range", "min", "model.Net", "utils.train_dp", "utils.evaluate_dp", "utils.evaluate_dp", "ap_val_epoch.append", "ap_test_epoch.append", "gap_val_epoch.append", "gap_test_epoch.append", "utils.train_eo", "utils.evaluate_eo", "utils.evaluate_eo", "len"], "function", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset.preprocess_adult_data", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.celeba.utils.BCELoss", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.train_dp", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.evaluate_dp", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.evaluate_dp", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.train_eo", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.evaluate_eo", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.evaluate_eo"], ["def", "run_experiments", "(", "method", "=", "'mixup'", ",", "mode", "=", "'dp'", ",", "lam", "=", "0.5", ",", "num_exp", "=", "10", ")", ":", "\n", "    ", "'''\n    Retrain each model for 10 times and report the mean ap and dp.\n    '''", "\n", "\n", "ap", "=", "[", "]", "\n", "gap", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "num_exp", ")", ":", "\n", "        ", "print", "(", "'On experiment'", ",", "i", ")", "\n", "# get train/test data", "\n", "X_train", ",", "X_val", ",", "X_test", ",", "y_train", ",", "y_val", ",", "y_test", ",", "A_train", ",", "A_val", ",", "A_test", "=", "preprocess_adult_data", "(", "seed", "=", "i", ")", "\n", "\n", "# initialize model", "\n", "model", "=", "Net", "(", "input_size", "=", "len", "(", "X_train", "[", "0", "]", ")", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "\n", "\n", "# run experiments", "\n", "ap_val_epoch", "=", "[", "]", "\n", "gap_val_epoch", "=", "[", "]", "\n", "ap_test_epoch", "=", "[", "]", "\n", "gap_test_epoch", "=", "[", "]", "\n", "for", "j", "in", "tqdm", "(", "range", "(", "10", ")", ")", ":", "\n", "            ", "if", "mode", "==", "'dp'", ":", "\n", "                ", "train_dp", "(", "model", ",", "criterion", ",", "optimizer", ",", "X_train", ",", "A_train", ",", "y_train", ",", "method", ",", "lam", ")", "\n", "ap_val", ",", "gap_val", "=", "evaluate_dp", "(", "model", ",", "X_val", ",", "y_val", ",", "A_val", ")", "\n", "ap_test", ",", "gap_test", "=", "evaluate_dp", "(", "model", ",", "X_test", ",", "y_test", ",", "A_test", ")", "\n", "", "elif", "mode", "==", "'eo'", ":", "\n", "                ", "train_eo", "(", "model", ",", "criterion", ",", "optimizer", ",", "X_train", ",", "A_train", ",", "y_train", ",", "method", ",", "lam", ")", "\n", "ap_val", ",", "gap_val", "=", "evaluate_eo", "(", "model", ",", "X_val", ",", "y_val", ",", "A_val", ")", "\n", "ap_test", ",", "gap_test", "=", "evaluate_eo", "(", "model", ",", "X_test", ",", "y_test", ",", "A_test", ")", "\n", "\n", "", "if", "j", ">", "0", ":", "\n", "                ", "ap_val_epoch", ".", "append", "(", "ap_val", ")", "\n", "ap_test_epoch", ".", "append", "(", "ap_test", ")", "\n", "gap_val_epoch", ".", "append", "(", "gap_val", ")", "\n", "gap_test_epoch", ".", "append", "(", "gap_test", ")", "\n", "\n", "# best model based on validation performance", "\n", "", "", "idx", "=", "gap_val_epoch", ".", "index", "(", "min", "(", "gap_val_epoch", ")", ")", "\n", "gap", ".", "append", "(", "gap_test_epoch", "[", "idx", "]", ")", "\n", "ap", ".", "append", "(", "ap_test_epoch", "[", "idx", "]", ")", "\n", "\n", "\n", "", "print", "(", "'--------AVG---------'", ")", "\n", "print", "(", "'Average Precision'", ",", "np", ".", "mean", "(", "ap", ")", ")", "\n", "print", "(", "mode", "+", "' gap'", ",", "np", ".", "mean", "(", "gap", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset._quantization_binning": [[7, 13], ["numpy.arange", "numpy.quantile", "numpy.diff"], "function", ["None"], ["def", "_quantization_binning", "(", "data", ",", "num_bins", "=", "10", ")", ":", "\n", "        ", "qtls", "=", "np", ".", "arange", "(", "0.0", ",", "1.0", "+", "1", "/", "num_bins", ",", "1", "/", "num_bins", ")", "\n", "bin_edges", "=", "np", ".", "quantile", "(", "data", ",", "qtls", ",", "axis", "=", "0", ")", "# (num_bins + 1, num_features)", "\n", "bin_widths", "=", "np", ".", "diff", "(", "bin_edges", ",", "axis", "=", "0", ")", "\n", "bin_centers", "=", "bin_edges", "[", ":", "-", "1", "]", "+", "bin_widths", "/", "2", "# ()", "\n", "return", "bin_edges", ",", "bin_centers", ",", "bin_widths", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset._quantize": [[14, 20], ["numpy.zeros", "enumerate", "numpy.digitize", "np.zeros.clip"], "function", ["None"], ["", "def", "_quantize", "(", "inputs", ",", "bin_edges", ",", "num_bins", "=", "10", ")", ":", "\n", "        ", "quant_inputs", "=", "np", ".", "zeros", "(", "inputs", ".", "shape", "[", "0", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "inputs", ")", ":", "\n", "            ", "quant_inputs", "[", "i", "]", "=", "np", ".", "digitize", "(", "x", ",", "bin_edges", ")", "\n", "", "quant_inputs", "=", "quant_inputs", ".", "clip", "(", "1", ",", "num_bins", ")", "-", "1", "# Clip edges", "\n", "return", "quant_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset._one_hot": [[21, 23], ["numpy.squeeze", "numpy.eye", "a.reshape().astype", "a.reshape"], "function", ["None"], ["", "def", "_one_hot", "(", "a", ",", "num_bins", "=", "10", ")", ":", "\n", "    ", "return", "np", ".", "squeeze", "(", "np", ".", "eye", "(", "num_bins", ")", "[", "a", ".", "reshape", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset.DataQuantize": [[24, 45], ["range", "range", "dataset._one_hot", "X_.append", "len", "dataset._one_hot", "X_.append", "numpy.concatenate", "dataset._quantize", "dataset._quantization_binning", "dataset._quantize"], "function", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset._one_hot", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset._one_hot", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset._quantize", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset._quantization_binning", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset._quantize"], ["", "def", "DataQuantize", "(", "X", ",", "bin_edges", "=", "None", ",", "num_bins", "=", "10", ")", ":", "\n", "    ", "'''\n    Quantize: First 4 entries are continuos, and the rest are binary\n    '''", "\n", "X_", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "if", "bin_edges", "is", "not", "None", ":", "\n", "            ", "Xi_q", "=", "_quantize", "(", "X", "[", ":", ",", "i", "]", ",", "bin_edges", ",", "num_bins", ")", "\n", "", "else", ":", "\n", "            ", "bin_edges", ",", "bin_centers", ",", "bin_widths", "=", "_quantization_binning", "(", "X", "[", ":", ",", "i", "]", ",", "num_bins", ")", "\n", "Xi_q", "=", "_quantize", "(", "X", "[", ":", ",", "i", "]", ",", "bin_edges", ",", "num_bins", ")", "\n", "", "Xi_q", "=", "_one_hot", "(", "Xi_q", ",", "num_bins", ")", "\n", "X_", ".", "append", "(", "Xi_q", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "5", ",", "len", "(", "X", "[", "0", "]", ")", ")", ":", "\n", "        ", "if", "i", "==", "39", ":", "# gender attribute", "\n", "            ", "continue", "\n", "", "Xi_q", "=", "_one_hot", "(", "X", "[", ":", ",", "i", "]", ",", "num_bins", "=", "2", ")", "\n", "X_", ".", "append", "(", "Xi_q", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "X_", ",", "1", ")", ",", "bin_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset.get_adult_data": [[47, 75], ["pandas.read_csv", "pandas.read_csv", "pandas.concat", "df[].replace", "pd.get_dummies.drop", "pandas.get_dummies", "pd.get_dummies.drop", "aif360.datasets.BinaryLabelDataset"], "function", ["None"], ["", "def", "get_adult_data", "(", ")", ":", "\n", "    ", "'''\n    We borrow the code from https://github.com/IBM/sensitive-subspace-robustness\n    Preprocess the adult data set by removing some features and put adult data into a BinaryLabelDataset\n    You need to download the adult dataset (both the adult.data and adult.test files) from https://archive.ics.uci.edu/ml/datasets/Adult\n    '''", "\n", "\n", "headers", "=", "[", "'age'", ",", "'workclass'", ",", "'fnlwgt'", ",", "'education'", ",", "'education-num'", ",", "'marital-stataus'", ",", "'occupation'", ",", "'relationship'", ",", "'race'", ",", "'sex'", ",", "'capital-gain'", ",", "'capital-loss'", ",", "'hours-per-week'", ",", "'native-country'", ",", "'y'", "]", "\n", "\n", "train", "=", "pd", ".", "read_csv", "(", "'adult/adult.data'", ",", "header", "=", "None", ")", "\n", "test", "=", "pd", ".", "read_csv", "(", "'adult/adult.test'", ",", "header", "=", "None", ")", "\n", "df", "=", "pd", ".", "concat", "(", "[", "train", ",", "test", "]", ",", "ignore_index", "=", "True", ")", "\n", "df", ".", "columns", "=", "headers", "\n", "\n", "df", "[", "'y'", "]", "=", "df", "[", "'y'", "]", ".", "replace", "(", "{", "' <=50K.'", ":", "0", ",", "' >50K.'", ":", "1", ",", "' >50K'", ":", "1", ",", "' <=50K'", ":", "0", "}", ")", "\n", "\n", "df", "=", "df", ".", "drop", "(", "df", "[", "(", "df", "[", "headers", "[", "-", "2", "]", "]", "==", "' ?'", ")", "|", "(", "df", "[", "headers", "[", "6", "]", "]", "==", "' ?'", ")", "]", ".", "index", ")", "\n", "df", "=", "pd", ".", "get_dummies", "(", "df", ",", "columns", "=", "[", "headers", "[", "1", "]", ",", "headers", "[", "5", "]", ",", "headers", "[", "6", "]", ",", "headers", "[", "7", "]", ",", "headers", "[", "9", "]", ",", "headers", "[", "8", "]", ",", "'native-country'", "]", ")", "\n", "\n", "delete_these", "=", "[", "'race_ Amer-Indian-Eskimo'", ",", "'race_ Asian-Pac-Islander'", ",", "'race_ Black'", ",", "'race_ Other'", ",", "'sex_ Female'", "]", "\n", "\n", "delete_these", "+=", "[", "'native-country_ Cambodia'", ",", "'native-country_ Canada'", ",", "'native-country_ China'", ",", "'native-country_ Columbia'", ",", "'native-country_ Cuba'", ",", "'native-country_ Dominican-Republic'", ",", "'native-country_ Ecuador'", ",", "'native-country_ El-Salvador'", ",", "'native-country_ England'", ",", "'native-country_ France'", ",", "'native-country_ Germany'", ",", "'native-country_ Greece'", ",", "'native-country_ Guatemala'", ",", "'native-country_ Haiti'", ",", "'native-country_ Holand-Netherlands'", ",", "'native-country_ Honduras'", ",", "'native-country_ Hong'", ",", "'native-country_ Hungary'", ",", "'native-country_ India'", ",", "'native-country_ Iran'", ",", "'native-country_ Ireland'", ",", "'native-country_ Italy'", ",", "'native-country_ Jamaica'", ",", "'native-country_ Japan'", ",", "'native-country_ Laos'", ",", "'native-country_ Mexico'", ",", "'native-country_ Nicaragua'", ",", "'native-country_ Outlying-US(Guam-USVI-etc)'", ",", "'native-country_ Peru'", ",", "'native-country_ Philippines'", ",", "'native-country_ Poland'", ",", "'native-country_ Portugal'", ",", "'native-country_ Puerto-Rico'", ",", "'native-country_ Scotland'", ",", "'native-country_ South'", ",", "'native-country_ Taiwan'", ",", "'native-country_ Thailand'", ",", "'native-country_ Trinadad&Tobago'", ",", "'native-country_ United-States'", ",", "'native-country_ Vietnam'", ",", "'native-country_ Yugoslavia'", "]", "\n", "\n", "delete_these", "+=", "[", "'fnlwgt'", ",", "'education'", "]", "\n", "\n", "df", ".", "drop", "(", "delete_these", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "BinaryLabelDataset", "(", "df", "=", "df", ",", "label_names", "=", "[", "'y'", "]", ",", "protected_attribute_names", "=", "[", "'sex_ Male'", ",", "'race_ White'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset.preprocess_adult_data": [[78, 118], ["dataset.get_adult_data", "get_adult_data.split", "sklearn.preprocessing.StandardScaler().fit", "StandardScaler().fit.transform", "StandardScaler().fit.transform", "dataset.DataQuantize", "dataset.DataQuantize", "dataset.DataQuantize", "get_adult_data.feature_names.index", "sklearn.preprocessing.StandardScaler", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset.get_adult_data", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset.DataQuantize", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset.DataQuantize", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.dataset.DataQuantize"], ["", "def", "preprocess_adult_data", "(", "seed", "=", "0", ")", ":", "\n", "    ", "'''\n    Description: Ths code (1) standardizes the continuous features, (2) one hot encodes the categorical features, (3) splits into a train (80%) and test set (20%), (4) based on this data, create another copy where gender is deleted as a predictive feature and the feature we predict is gender (used by SenSR when learning the sensitive directions)\n    Input: seed: the seed used to split data into train/test\n    '''", "\n", "# Get the dataset and split into train and test", "\n", "dataset_orig", "=", "get_adult_data", "(", ")", "\n", "\n", "# we will standardize continous features", "\n", "continous_features", "=", "[", "'age'", ",", "'education-num'", ",", "'capital-gain'", ",", "'capital-loss'", ",", "'hours-per-week'", "]", "\n", "continous_features_indices", "=", "[", "dataset_orig", ".", "feature_names", ".", "index", "(", "feat", ")", "for", "feat", "in", "continous_features", "]", "\n", "\n", "# get a 80%/20% train/test split", "\n", "dataset_orig_train", ",", "dataset_orig_test", "=", "dataset_orig", ".", "split", "(", "[", "0.8", "]", ",", "shuffle", "=", "True", ",", "seed", "=", "seed", ")", "\n", "SS", "=", "StandardScaler", "(", ")", ".", "fit", "(", "dataset_orig_train", ".", "features", "[", ":", ",", "continous_features_indices", "]", ")", "\n", "dataset_orig_train", ".", "features", "[", ":", ",", "continous_features_indices", "]", "=", "SS", ".", "transform", "(", "dataset_orig_train", ".", "features", "[", ":", ",", "continous_features_indices", "]", ")", "\n", "dataset_orig_test", ".", "features", "[", ":", ",", "continous_features_indices", "]", "=", "SS", ".", "transform", "(", "dataset_orig_test", ".", "features", "[", ":", ",", "continous_features_indices", "]", ")", "\n", "\n", "X_train", "=", "dataset_orig_train", ".", "features", "\n", "X_test", "=", "dataset_orig_test", ".", "features", "\n", "\n", "y_train", "=", "dataset_orig_train", ".", "labels", "\n", "y_test", "=", "dataset_orig_test", ".", "labels", "\n", "\n", "X_val", "=", "X_train", "[", ":", "len", "(", "X_test", ")", "]", "\n", "y_val", "=", "y_train", "[", ":", "len", "(", "X_test", ")", "]", "\n", "X_train", "=", "X_train", "[", "len", "(", "X_test", ")", ":", "]", "\n", "y_train", "=", "y_train", "[", "len", "(", "X_test", ")", ":", "]", "\n", "\n", "# gender id = 39", "\n", "A_train", "=", "X_train", "[", ":", ",", "39", "]", "\n", "A_val", "=", "X_val", "[", ":", ",", "39", "]", "\n", "A_test", "=", "X_test", "[", ":", ",", "39", "]", "\n", "\n", "X_train", ",", "bin_edges", "=", "DataQuantize", "(", "X_train", ")", "\n", "X_val", ",", "_", "=", "DataQuantize", "(", "X_val", ",", "bin_edges", ")", "\n", "X_test", ",", "_", "=", "DataQuantize", "(", "X_test", ",", "bin_edges", ")", "\n", "\n", "\n", "return", "X_train", ",", "X_val", ",", "X_test", ",", "y_train", ",", "y_val", ",", "y_test", ",", "A_train", ",", "A_val", ",", "A_test", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.model.Net.__init__": [[7, 12], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.model.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.model.Net.forward": [[13, 20], ["model.Net.fc1", "torch.relu", "torch.relu", "torch.relu", "model.Net.fc2", "torch.relu", "torch.relu", "torch.relu", "model.Net.fc3", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "class", "ResNet18_Encoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "pretrained", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resnet", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", "\n", "self", ".", "resnet", ".", "fc", "=", "Identity", "(", ")", "\n", "self", ".", "resnet", ".", "avgpool", "=", "Identity", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.sample_batch_sen_idx": [[12, 20], ["numpy.random.choice().tolist", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "numpy.random.choice", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "numpy.where", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "class", "CelebA", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataframe", ",", "folder_dir", ",", "target_id", ",", "transform", "=", "None", ",", "gender", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataframe", "=", "dataframe", "\n", "self", ".", "folder_dir", "=", "folder_dir", "\n", "self", ".", "target_id", "=", "target_id", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.sample_batch_sen_idx_y": [[21, 33], ["range", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "list", "numpy.random.choice().tolist", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "set", "set", "numpy.random.choice", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.where", "numpy.where"], "function", ["None"], ["self", ".", "transform", "=", "transform", "\n", "self", ".", "file_names", "=", "dataframe", ".", "index", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", ")", ".", "astype", "(", "float", ")", "\n", "gender_id", "=", "20", "\n", "\n", "if", "gender", "is", "not", "None", ":", "\n", "            ", "if", "target", "is", "not", "None", ":", "\n", "                ", "label_np", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", ")", "\n", "gender_idx", "=", "np", ".", "where", "(", "label_np", "[", ":", ",", "gender_id", "]", "==", "gender", ")", "[", "0", "]", "\n", "target_idx", "=", "np", ".", "where", "(", "label_np", "[", ":", ",", "target_id", "]", "==", "target", ")", "[", "0", "]", "\n", "idx", "=", "list", "(", "set", "(", "gender_idx", ")", "&", "set", "(", "target_idx", ")", ")", "\n", "self", ".", "file_names", "=", "self", ".", "file_names", "[", "idx", "]", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", "[", "idx", "]", ")", ".", "astype", "(", "float", ")", "\n"]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.train_dp": [[35, 83], ["model.train", "range", "utils.sample_batch_sen_idx", "utils.sample_batch_sen_idx", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model", "criterion", "optimizer.zero_grad", "loss.backward", "optimizer.step", "numpy.random.beta", "batch_x_mix.requires_grad_.requires_grad_", "model", "grad_inn.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "model", "model", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "model.sum", "model.mean", "model.mean"], "function", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.sample_batch_sen_idx", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.sample_batch_sen_idx"], ["                ", "label_np", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", ")", "\n", "gender_idx", "=", "np", ".", "where", "(", "label_np", "[", ":", ",", "gender_id", "]", "==", "gender", ")", "[", "0", "]", "\n", "self", ".", "file_names", "=", "self", ".", "file_names", "[", "gender_idx", "]", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "dataframe", ".", "labels", ".", "values", "[", "gender_idx", "]", ")", ".", "astype", "(", "float", ")", "\n", "\n", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "folder_dir", ",", "self", ".", "file_names", "[", "index", "]", ")", ")", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "return", "image", ",", "label", "[", "self", ".", "target_id", "]", "\n", "\n", "\n", "", "", "def", "get_loader", "(", "df", ",", "data_path", ",", "target_id", ",", "batch_size", ",", "gender", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "    ", "dl", "=", "CelebA", "(", "df", ",", "data_path", ",", "target_id", ",", "transform", "=", "tfms", ",", "gender", "=", "gender", ",", "target", "=", "target", ")", "\n", "\n", "if", "'train'", "in", "data_path", ":", "\n", "        ", "dloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dl", ",", "shuffle", "=", "True", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "3", ",", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "dloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dl", ",", "shuffle", "=", "False", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "3", ")", "\n", "\n", "", "return", "dloader", "\n", "\n", "", "def", "evaluate", "(", "model", ",", "model_linear", ",", "dataloader", ")", ":", "\n", "    ", "y_scores", "=", "[", "]", "\n", "y_true", "=", "[", "]", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "inputs", ",", "target", "=", "inputs", ".", "cuda", "(", ")", ",", "target", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "feat", "=", "model", "(", "inputs", ")", "\n", "pred", "=", "model_linear", "(", "feat", ")", ".", "detach", "(", ")", "\n", "\n", "y_scores", ".", "append", "(", "pred", "[", ":", ",", "0", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y_true", ".", "append", "(", "target", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "y_scores", "=", "np", ".", "concatenate", "(", "y_scores", ")", "\n", "y_true", "=", "np", ".", "concatenate", "(", "y_true", ")", "\n", "ap", "=", "average_precision_score", "(", "y_true", ",", "y_scores", ")", "\n", "return", "ap", ",", "np", ".", "mean", "(", "y_scores", ")", "\n", "\n", "", "def", "BCELoss", "(", "pred", ",", "target", ")", ":", "\n", "    ", "return", "-", "(", "target", "*", "torch", ".", "log", "(", "pred", ")", "+", "(", "1", "-", "target", ")", "*", "torch", ".", "log", "(", "1", "-", "pred", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.train_eo": [[85, 141], ["model.train", "range", "utils.sample_batch_sen_idx_y", "utils.sample_batch_sen_idx_y", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model", "criterion", "optimizer.zero_grad", "loss.backward", "optimizer.step", "range", "numpy.random.beta", "batch_x_mix.requires_grad_.requires_grad_", "model", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "range", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "grad_inn.mean", "model", "model", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "model.sum", "model.mean", "model.mean"], "function", ["home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.sample_batch_sen_idx_y", "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.sample_batch_sen_idx_y"], []], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.evaluate_dp": [[143, 168], ["model.eval", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "model", "model", "abs", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "model", "output[].data.cpu().numpy", "sklearn.metrics.average_precision_score", "numpy.where", "numpy.where", "model.mean", "model.mean", "abs.data.cpu().numpy", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "output[].data.cpu", "abs.data.cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], []], "home.repos.pwc.inspect_result.chingyaoc_fair-mixup.adult.utils.evaluate_eo": [[170, 206], ["model.eval", "list", "list", "list", "list", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "model", "model", "model", "model", "abs", "abs", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "torch.tensor().cuda().float", "model", "output[].data.cpu().numpy", "sklearn.metrics.average_precision_score", "model.mean", "model.mean", "model.mean", "model.mean", "abs.data.cpu().numpy", "abs.data.cpu().numpy", "set", "set", "set", "set", "set", "set", "set", "set", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "output[].data.cpu", "abs.data.cpu", "abs.data.cpu", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], []]}