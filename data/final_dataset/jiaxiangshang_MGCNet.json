{"home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.None.train_unsupervise.main": [[112, 137], ["tensorflow.set_random_seed", "numpy.random.seed", "random.seed", "print", "FLAGS.__flags.keys", "print", "os.path.join", "src_tfGraph.build_graph.MGC_TRAIN", "src_tfGraph.build_graph.MGC_TRAIN.train", "print", "os.path.exists", "os.makedirs", "open", "FLAGS.__flags.keys", "f.write", "f.write", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.train"], ["def", "main", "(", "_", ")", ":", "\n", "# static random and shuffle", "\n", "    ", "seed", "=", "8964", "\n", "tf", ".", "set_random_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# print and store all flags", "\n", "print", "(", "'**************** Arguments ******************'", ")", "\n", "for", "key", "in", "FLAGS", ".", "__flags", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "'{}: {}'", ".", "format", "(", "key", ",", "getattr", "(", "FLAGS", ",", "key", ")", ")", ")", "\n", "", "print", "(", "'**************** Arguments ******************'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "FLAGS", ".", "checkpoint_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "FLAGS", ".", "checkpoint_dir", ")", "\n", "", "path_arg_log", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "checkpoint_dir", ",", "\"flag.txt\"", ")", "\n", "with", "open", "(", "path_arg_log", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "key", "in", "FLAGS", ".", "__flags", ".", "keys", "(", ")", ":", "\n", "            ", "v", "=", "'{} : {}'", ".", "format", "(", "key", ",", "getattr", "(", "FLAGS", ",", "key", ")", ")", "\n", "f", ".", "write", "(", "v", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "#", "\n", "", "", "system", "=", "MGC_TRAIN", "(", "FLAGS", ")", "\n", "system", ".", "train", "(", "FLAGS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.preprocess.crop_image_affine.cvrt_300w_to_CelebA": [[21, 31], ["numpy.mean", "numpy.mean"], "function", ["None"], ["def", "cvrt_300w_to_CelebA", "(", "lm68", ")", ":", "\n", "    ", "l_eye", "=", "np", ".", "mean", "(", "lm68", "[", "37", "-", "1", ":", "43", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "r_eye", "=", "np", ".", "mean", "(", "lm68", "[", "43", "-", "1", ":", "49", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "nose", "=", "lm68", "[", "34", "-", "1", "]", "\n", "l_m", "=", "lm68", "[", "49", "-", "1", "]", "\n", "r_m", "=", "lm68", "[", "55", "-", "1", "]", "\n", "\n", "return", "[", "l_eye", ",", "r_eye", ",", "nose", ",", "l_m", ",", "r_m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.preprocess.crop_image_affine.inverse_affine_warp_overlay": [[32, 68], ["skimage.transform.SimilarityTransform", "cv2.cvtColor", "cv2.cvtColor", "cv2.warpAffine", "cv2.warpAffine", "np.clip.astype", "numpy.clip", "np.clip.astype", "numpy.clip", "numpy.clip", "np.clip.astype", "numpy.clip"], "function", ["None"], ["", "def", "inverse_affine_warp_overlay", "(", "m_inv", ",", "image_ori", ",", "image_now", ",", "image_mask_now", ")", ":", "\n", "    ", "from", "skimage", "import", "transform", "as", "trans", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", "m_inv", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "\n", "image_now_cv", "=", "cv2", ".", "cvtColor", "(", "image_now", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "image_mask_now_cv", "=", "cv2", ".", "cvtColor", "(", "image_mask_now", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "\n", "\n", "\n", "img_now_warp", "=", "cv2", ".", "warpAffine", "(", "image_now_cv", ",", "M", ",", "(", "image_ori", ".", "shape", "[", "1", "]", ",", "image_ori", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "image_mask_now_warp", "=", "cv2", ".", "warpAffine", "(", "image_mask_now_cv", ",", "M", ",", "(", "image_ori", ".", "shape", "[", "1", "]", ",", "image_ori", ".", "shape", "[", "0", "]", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "\n", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "\n", "image_ori_back", "=", "(", "1.0", "-", "image_mask_now_warp", ")", "*", "image_ori", "\n", "image_ori_back", "=", "image_ori_back", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image_ori_back", "=", "np", ".", "clip", "(", "image_ori_back", ",", "0", ",", "255", ")", "\n", "# if 1:", "\n", "#     cv2.imshow(\"Image Debug\", image_ori_back)", "\n", "#     k = cv2.waitKey(0) & 0xFF", "\n", "#     if k == 27:", "\n", "#         cv2.destroyAllWindows()", "\n", "\n", "img_now_warp", "=", "img_now_warp", "*", "image_mask_now_warp", "\n", "img_now_warp", "=", "img_now_warp", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_now_warp", "=", "np", ".", "clip", "(", "img_now_warp", ",", "0", ",", "255", ")", "\n", "\n", "img_replace", "=", "img_now_warp", "+", "image_ori_back", "\n", "img_replace", "=", "np", ".", "clip", "(", "img_replace", ",", "0", ",", "255", ")", "\n", "\n", "\n", "img_replace", "=", "img_replace", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_replace", "=", "np", ".", "clip", "(", "img_replace", ",", "0", ",", "255", ")", "\n", "\n", "return", "img_replace", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.preprocess.crop_image_affine.crop_align_affine_transform": [[69, 88], ["crop_image_affine.cvrt_300w_to_CelebA", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "cv2.warpAffine", "numpy.concatenate", "numpy.matmul", "numpy.transpose", "numpy.array", "numpy.array", "numpy.array", "numpy.ones", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.cvrt_300w_to_CelebA"], ["", "def", "crop_align_affine_transform", "(", "lm2d", ",", "image", ",", "crop_size", ",", "std_landmark", ")", ":", "\n", "    ", "lm_celebA", "=", "cvrt_300w_to_CelebA", "(", "lm2d", ")", "\n", "# Transform", "\n", "std_points", "=", "np", ".", "array", "(", "std_landmark", ")", "*", "(", "crop_size", "/", "224.0", ")", "\n", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "np", ".", "array", "(", "lm_celebA", ")", ",", "std_points", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "\n", "rot_angle", "=", "tform", ".", "rotation", "*", "180.0", "/", "(", "math", ".", "pi", ")", "\n", "#print(rot_angle, tform.translation)", "\n", "\n", "img_warped", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "(", "crop_size", ",", "crop_size", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "\n", "h_lm2d_home", "=", "np", ".", "concatenate", "(", "[", "lm2d", ",", "np", ".", "ones", "(", "[", "lm2d", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "lm_trans", "=", "np", ".", "matmul", "(", "M", ",", "np", ".", "array", "(", "np", ".", "transpose", "(", "h_lm2d_home", ")", ")", ")", "\n", "lm_trans", "=", "np", ".", "transpose", "(", "lm_trans", ")", "\n", "\n", "return", "lm_trans", ",", "img_warped", ",", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.preprocess.detect_landmark.LM_detector_howfar.__init__": [[19, 26], ["face_alignment.FaceAlignment", "face_alignment.FaceAlignment"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "use_cnn_face_detector", "=", "True", ",", "lm_type", "=", "2", ",", "device", "=", "'cpu'", ",", "face_detector", "=", "'sfd'", ")", ":", "\n", "        ", "if", "lm_type", "==", "2", ":", "\n", "            ", "self", ".", "fa", "=", "face_alignment", ".", "FaceAlignment", "(", "\n", "face_alignment", ".", "LandmarksType", ".", "_2D", ",", "device", "=", "device", ",", "flip_input", "=", "False", ",", "face_detector", "=", "face_detector", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fa", "=", "face_alignment", ".", "FaceAlignment", "(", "\n", "face_alignment", ".", "LandmarksType", ".", "_3D", ",", "device", "=", "device", ",", "flip_input", "=", "False", ",", "face_detector", "=", "face_detector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.preprocess.detect_landmark.LM_detector_howfar.lm_detection_howfar": [[27, 62], ["detect_landmark.LM_detector_howfar.fa.face_detector.detect_from_image", "detect_landmark.LM_detector_howfar.fa.get_landmarks", "max", "cv2.resize", "image[].copy", "range", "numpy.array", "numpy.argmax", "max", "len", "list_hf.append", "numpy.array.append", "int", "int"], "methods", ["None"], ["", "", "def", "lm_detection_howfar", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        :param image: ndarray\n        :return:\n        lm: ndarray or None\n        \"\"\"", "\n", "# filter very large image", "\n", "scale", "=", "1.0", "\n", "h", ",", "w", ",", "c", "=", "image", ".", "shape", "\n", "if", "max", "(", "h", ",", "w", ")", ">", "900", ":", "\n", "            ", "scale", "=", "max", "(", "h", ",", "w", ")", "/", "(", "900.0", ")", "\n", "#image = sktrans.resize(image, [int(h/scale), int(w/scale), 3], anti_aliasing=True)", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "int", "(", "w", "/", "scale", ")", ",", "int", "(", "h", "/", "scale", ")", ")", ")", "\n", "\n", "# torch", "\n", "", "detected_faces", "=", "self", ".", "fa", ".", "face_detector", ".", "detect_from_image", "(", "image", "[", "...", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", ")", "\n", "lm_howfar", "=", "self", ".", "fa", ".", "get_landmarks", "(", "image", ",", "detected_faces", "=", "detected_faces", ")", "\n", "\n", "# check the face detection bbox, that choose the largest one", "\n", "if", "lm_howfar", "is", "not", "None", ":", "\n", "            ", "list_hf", "=", "[", "]", "\n", "list_size_detected_face", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "lm_howfar", ")", ")", ":", "\n", "                ", "l_hf", "=", "lm_howfar", "[", "i", "]", "\n", "l_hf", "=", "l_hf", "*", "scale", "\n", "list_hf", ".", "append", "(", "l_hf", ")", "\n", "\n", "bbox", "=", "detected_faces", "[", "i", "]", "\n", "list_size_detected_face", ".", "append", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "+", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "\n", "", "list_size_detected_face", "=", "np", ".", "array", "(", "list_size_detected_face", ")", "\n", "idx_max", "=", "np", ".", "argmax", "(", "list_size_detected_face", ")", "\n", "return", "list_hf", "[", "idx_max", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.euler2quat": [[11, 44], ["tensorflow.cos", "tensorflow.sin", "tensorflow.cos", "tensorflow.sin", "tensorflow.cos", "tensorflow.sin", "tensorflow.stack"], "function", ["None"], ["def", "euler2quat", "(", "z", ",", "y", ",", "x", ")", ":", "\n", "    ", "''' Return quaternion corresponding to these Euler angles\n    Uses the z, then y, then x convention above\n    Parameters\n    Returns\n    -------\n    quat : array shape (4,)\n         Quaternion in w, x, y z (real, then vector) format\n    Notes\n    -----\n    We can derive this formula in Sympy using:\n    1. Formula giving quaternion corresponding to rotation of theta radians\n         about arbitrary axis:\n         http://mathworld.wolfram.com/EulerParameters.html\n    2. Generated formulae from 1.) for quaternions corresponding to\n         theta radians rotations about ``x, y, z`` axes\n    3. Apply quaternion multiplication formula -\n         http://en.wikipedia.org/wiki/Quaternions#Hamilton_product - to\n         formulae from 2.) to give formula for combined rotations.\n    '''", "\n", "z", "=", "z", "/", "2.0", "\n", "y", "=", "y", "/", "2.0", "\n", "x", "=", "x", "/", "2.0", "\n", "cz", "=", "tf", ".", "cos", "(", "z", ")", "\n", "sz", "=", "tf", ".", "sin", "(", "z", ")", "\n", "cy", "=", "tf", ".", "cos", "(", "y", ")", "\n", "sy", "=", "tf", ".", "sin", "(", "y", ")", "\n", "cx", "=", "tf", ".", "cos", "(", "x", ")", "\n", "sx", "=", "tf", ".", "sin", "(", "x", ")", "\n", "return", "tf", ".", "stack", "(", "[", "cx", "*", "cy", "*", "cz", "-", "sx", "*", "sy", "*", "sz", ",", "\n", "cx", "*", "sy", "*", "sz", "+", "cy", "*", "cz", "*", "sx", ",", "\n", "cx", "*", "cz", "*", "sy", "-", "sx", "*", "cy", "*", "sz", ",", "\n", "cx", "*", "cy", "*", "sz", "+", "sx", "*", "cz", "*", "sy", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.quat2euler": [[46, 65], ["tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.atan2", "tensorflow.squeeze", "tensorflow.cond", "tensorflow.cond", "tensorflow.expand_dims", "tensorflow.atan2", "tensorflow.stack", "tensorflow.greater", "tensorflow.less", "tensorflow.asin", "tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "def", "quat2euler", "(", "quat", ")", ":", "\n", "    ", "w", "=", "tf", ".", "slice", "(", "quat", ",", "[", "0", "]", ",", "[", "1", "]", ")", "\n", "x", "=", "tf", ".", "slice", "(", "quat", ",", "[", "1", "]", ",", "[", "1", "]", ")", "\n", "y", "=", "tf", ".", "slice", "(", "quat", ",", "[", "2", "]", ",", "[", "1", "]", ")", "\n", "z", "=", "tf", ".", "slice", "(", "quat", ",", "[", "3", "]", ",", "[", "1", "]", ")", "\n", "t0", "=", "+", "2.0", "*", "(", "w", "*", "x", "+", "y", "*", "z", ")", "\n", "t1", "=", "+", "1.0", "-", "2.0", "*", "(", "x", "*", "x", "+", "y", "*", "y", ")", "\n", "X", "=", "tf", ".", "atan2", "(", "t0", ",", "t1", ")", "\n", "\n", "t2", "=", "+", "2.0", "*", "(", "w", "*", "y", "-", "z", "*", "x", ")", "\n", "t2", "=", "tf", ".", "squeeze", "(", "t2", ")", "\n", "t2", "=", "tf", ".", "cond", "(", "tf", ".", "greater", "(", "t2", ",", "1.0", ")", ",", "lambda", ":", "tf", ".", "constant", "(", "1.0", ")", ",", "lambda", ":", "t2", ")", "\n", "t2", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "t2", ",", "-", "1.0", ")", ",", "lambda", ":", "tf", ".", "constant", "(", "-", "1.0", ")", ",", "lambda", ":", "t2", ")", "\n", "Y", "=", "tf", ".", "expand_dims", "(", "tf", ".", "asin", "(", "t2", ")", ",", "axis", "=", "0", ")", "\n", "\n", "t3", "=", "+", "2.0", "*", "(", "w", "*", "z", "+", "x", "*", "y", ")", "\n", "t4", "=", "+", "1.0", "-", "2.0", "*", "(", "y", "*", "y", "+", "z", "*", "z", ")", "\n", "Z", "=", "tf", ".", "atan2", "(", "t3", ",", "t4", ")", "\n", "return", "tf", ".", "stack", "(", "[", "Z", ",", "Y", ",", "X", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.quat_slerp": [[67, 93], ["tensorflow.reduce_sum", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.less", "tensorflow.less", "tensorflow.acos", "tensorflow.sin", "tensorflow.sin", "tensorflow.greater", "tensorflow.linalg.norm", "tensorflow.cos"], "function", ["None"], ["", "def", "quat_slerp", "(", "quat1", ",", "quat2", ",", "t", ")", ":", "\n", "    ", "\"t is the weight between two quaternions\"", "\n", "\n", "dot", "=", "tf", ".", "reduce_sum", "(", "quat1", "*", "quat2", ")", "\n", "quat2", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "dot", ",", "0.0", ")", ",", "lambda", ":", "-", "quat2", ",", "lambda", ":", "quat2", ")", "\n", "dot", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "dot", ",", "0.0", ")", ",", "lambda", ":", "-", "dot", ",", "lambda", ":", "dot", ")", "\n", "\n", "def", "res1", "(", ")", ":", "\n", "        ", "result", "=", "quat1", "+", "t", "*", "(", "quat2", "-", "quat1", ")", "\n", "result", "=", "result", "/", "tf", ".", "linalg", ".", "norm", "(", "result", ")", "\n", "return", "result", "\n", "\n", "", "def", "res2", "(", ")", ":", "\n", "        ", "theta_0", "=", "tf", ".", "acos", "(", "dot", ")", "\n", "sin_theta_0", "=", "tf", ".", "sin", "(", "theta_0", ")", "\n", "\n", "theta", "=", "theta_0", "*", "t", "\n", "sin_theta", "=", "tf", ".", "sin", "(", "theta", ")", "\n", "\n", "s0", "=", "tf", ".", "cos", "(", "theta", ")", "-", "dot", "*", "sin_theta", "/", "sin_theta_0", "\n", "s1", "=", "sin_theta", "/", "sin_theta_0", "\n", "return", "(", "s0", "*", "quat1", ")", "+", "(", "s1", "*", "quat2", ")", "\n", "\n", "", "DOT_THRESHOLD", "=", "0.9995", "\n", "result", "=", "tf", ".", "cond", "(", "tf", ".", "greater", "(", "dot", ",", "DOT_THRESHOLD", ")", ",", "res1", ",", "res2", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.simple_motion_average": [[95, 120], ["pose1.get_shape().as_list", "range", "range", "pose1.get_shape", "geo_utils.euler2quat", "geo_utils.euler2quat", "geo_utils.quat_slerp", "geo_utils.quat2euler", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.euler2quat", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.euler2quat", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.quat_slerp", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.quat2euler"], ["", "def", "simple_motion_average", "(", "pose1", ",", "pose2", ")", ":", "\n", "    ", "\"pose1 and pose2 - tensor of size [batch_size, num_source, 6]\"", "\n", "batch_size", ",", "num_source", ",", "_", "=", "pose1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_source", ")", ":", "\n", "            ", "euler1", "=", "pose1", "[", "i", ",", "j", ",", ":", "3", "]", "\n", "euler2", "=", "pose2", "[", "i", ",", "j", ",", ":", "3", "]", "\n", "quat1", "=", "euler2quat", "(", "euler1", "[", "0", "]", ",", "euler1", "[", "1", "]", ",", "euler1", "[", "2", "]", ")", "\n", "quat2", "=", "euler2quat", "(", "euler2", "[", "0", "]", ",", "euler2", "[", "1", "]", ",", "euler2", "[", "2", "]", ")", "\n", "ave_quat", "=", "quat_slerp", "(", "quat1", ",", "quat2", ",", "t", "=", "0.5", ")", "\n", "ave_euler", "=", "quat2euler", "(", "ave_quat", ")", "\n", "\n", "trans1", "=", "pose1", "[", "i", ",", "j", ",", "3", ":", "]", "\n", "trans2", "=", "pose2", "[", "i", ",", "j", ",", "3", ":", "]", "\n", "ave_trans", "=", "(", "trans1", "+", "trans2", ")", "/", "2.0", "\n", "ave_pose", "=", "tf", ".", "concat", "(", "[", "ave_euler", ",", "tf", ".", "expand_dims", "(", "ave_trans", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "1", ")", "\n", "if", "j", "==", "0", ":", "\n", "                ", "res_pose", "=", "ave_pose", "\n", "", "else", ":", "\n", "                ", "res_pose", "=", "tf", ".", "concat", "(", "[", "res_pose", ",", "ave_pose", "]", ",", "axis", "=", "0", ")", "\n", "", "", "if", "i", "==", "0", ":", "\n", "            ", "all_pose", "=", "tf", ".", "expand_dims", "(", "res_pose", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "all_pose", "=", "tf", ".", "concat", "(", "[", "all_pose", ",", "tf", ".", "expand_dims", "(", "res_pose", ",", "axis", "=", "0", ")", "]", ",", "axis", "=", "0", ")", "\n", "", "", "return", "all_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.euler2mat": [[122, 175], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.zeros", "tensorflow.ones", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.cos", "tensorflow.sin", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.shape", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.matmul"], "function", ["None"], ["", "def", "euler2mat", "(", "z", ",", "y", ",", "x", ",", "clip", "=", "False", ")", ":", "\n", "    ", "\"\"\"[summary] Converts euler angles to rotation matrix\n    Reference: https://github.com/pulkitag/pycaffe-utils/blob/master/rot_utils.py#L174\n     TODO: remove the dimension for 'N' (deprecated for converting all source\n           poses altogether)\n    \n    Arguments:\n        z: rotation angle along z axis (in radians) -- size = [B, N]\n        y: rotation angle along y axis (in radians) -- size = [B, N]\n        x: rotation angle along x axis (in radians) -- size = [B, N]\n    \n    Returns:\n        Rotation matrix corresponding to the euler angles -- size = [B, N, 3, 3]\n    \"\"\"", "\n", "\n", "B", "=", "tf", ".", "shape", "(", "z", ")", "[", "0", "]", "\n", "N", "=", "1", "\n", "if", "clip", ":", "\n", "        ", "z", "=", "tf", ".", "clip_by_value", "(", "z", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "y", "=", "tf", ".", "clip_by_value", "(", "y", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "x", "=", "tf", ".", "clip_by_value", "(", "x", ",", "-", "np", ".", "pi", ",", "np", ".", "pi", ")", "\n", "\n", "# Expand to B x N x 1 x 1", "\n", "", "z", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "z", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "y", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "y", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "x", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "x", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "\n", "zeros", "=", "tf", ".", "zeros", "(", "[", "B", ",", "N", ",", "1", ",", "1", "]", ")", "\n", "ones", "=", "tf", ".", "ones", "(", "[", "B", ",", "N", ",", "1", ",", "1", "]", ")", "\n", "\n", "cosz", "=", "tf", ".", "cos", "(", "z", ")", "\n", "sinz", "=", "tf", ".", "sin", "(", "z", ")", "\n", "rotz_1", "=", "tf", ".", "concat", "(", "[", "cosz", ",", "-", "sinz", ",", "zeros", "]", ",", "axis", "=", "3", ")", "\n", "rotz_2", "=", "tf", ".", "concat", "(", "[", "sinz", ",", "cosz", ",", "zeros", "]", ",", "axis", "=", "3", ")", "\n", "rotz_3", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "zeros", ",", "ones", "]", ",", "axis", "=", "3", ")", "\n", "zmat", "=", "tf", ".", "concat", "(", "[", "rotz_1", ",", "rotz_2", ",", "rotz_3", "]", ",", "axis", "=", "2", ")", "\n", "\n", "cosy", "=", "tf", ".", "cos", "(", "y", ")", "\n", "siny", "=", "tf", ".", "sin", "(", "y", ")", "\n", "roty_1", "=", "tf", ".", "concat", "(", "[", "cosy", ",", "zeros", ",", "siny", "]", ",", "axis", "=", "3", ")", "\n", "roty_2", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "ones", ",", "zeros", "]", ",", "axis", "=", "3", ")", "\n", "roty_3", "=", "tf", ".", "concat", "(", "[", "-", "siny", ",", "zeros", ",", "cosy", "]", ",", "axis", "=", "3", ")", "\n", "ymat", "=", "tf", ".", "concat", "(", "[", "roty_1", ",", "roty_2", ",", "roty_3", "]", ",", "axis", "=", "2", ")", "\n", "\n", "cosx", "=", "tf", ".", "cos", "(", "x", ")", "\n", "sinx", "=", "tf", ".", "sin", "(", "x", ")", "\n", "rotx_1", "=", "tf", ".", "concat", "(", "[", "ones", ",", "zeros", ",", "zeros", "]", ",", "axis", "=", "3", ")", "\n", "rotx_2", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "cosx", ",", "-", "sinx", "]", ",", "axis", "=", "3", ")", "\n", "rotx_3", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "sinx", ",", "cosx", "]", ",", "axis", "=", "3", ")", "\n", "xmat", "=", "tf", ".", "concat", "(", "[", "rotx_1", ",", "rotx_2", ",", "rotx_3", "]", ",", "axis", "=", "2", ")", "\n", "\n", "rotMat", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "xmat", ",", "ymat", ")", ",", "zmat", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.mat2euler": [[177, 202], ["tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.sqrt", "geo_utils.mat2euler.f1"], "function", ["None"], ["", "def", "mat2euler", "(", "rot", ")", ":", "\n", "    ", "r00", "=", "tf", ".", "slice", "(", "rot", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "r01", "=", "tf", ".", "slice", "(", "rot", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "r02", "=", "tf", ".", "slice", "(", "rot", ",", "[", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "r10", "=", "tf", ".", "slice", "(", "rot", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "r11", "=", "tf", ".", "slice", "(", "rot", ",", "[", "0", ",", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "r12", "=", "tf", ".", "slice", "(", "rot", ",", "[", "0", ",", "1", ",", "2", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "r22", "=", "tf", ".", "slice", "(", "rot", ",", "[", "0", ",", "2", ",", "2", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "cy", "=", "tf", ".", "sqrt", "(", "r22", "*", "r22", "+", "r12", "*", "r12", ")", "\n", "\n", "def", "f1", "(", ")", ":", "\n", "        ", "z", "=", "tf", ".", "atan2", "(", "-", "r01", ",", "r00", ")", "\n", "y", "=", "tf", ".", "atan2", "(", "r02", ",", "cy", ")", "\n", "x", "=", "tf", ".", "atan2", "(", "-", "r12", ",", "r22", ")", "\n", "return", "tf", ".", "concat", "(", "[", "z", ",", "y", ",", "x", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "def", "f2", "(", ")", ":", "\n", "        ", "z", "=", "tf", ".", "atan2", "(", "r10", ",", "r11", ")", "\n", "y", "=", "tf", ".", "atan2", "(", "r02", ",", "cy", ")", "\n", "x", "=", "tf", ".", "zeros_like", "(", "y", ")", "\n", "return", "tf", ".", "concat", "(", "[", "z", ",", "y", ",", "x", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "x1", "=", "f1", "(", ")", "\n", "x2", "=", "f2", "(", ")", "\n", "return", "tf", ".", "where", "(", "tf", ".", "squeeze", "(", "tf", ".", "less", "(", "cy", ",", "1e-6", ")", ",", "axis", "=", "[", "1", ",", "2", "]", ")", ",", "x2", ",", "x1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2rt": [[204, 214], ["tensorflow.slice", "tensorflow.expand_dims", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "geo_utils.euler2mat", "tensorflow.squeeze"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.euler2mat"], ["", "def", "pose_vec2rt", "(", "vec", ",", "clip", "=", "False", ")", ":", "\n", "    ", "\"\"\"Converts 6DoF parameters to rotation matrix (bs,3,3) and translation vector (bs,3,1)\"\"\"", "\n", "translation", "=", "tf", ".", "slice", "(", "vec", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "translation", "=", "tf", ".", "expand_dims", "(", "translation", ",", "-", "1", ")", "\n", "rz", "=", "tf", ".", "slice", "(", "vec", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "ry", "=", "tf", ".", "slice", "(", "vec", ",", "[", "0", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "rx", "=", "tf", ".", "slice", "(", "vec", ",", "[", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "rot_mat", "=", "euler2mat", "(", "rz", ",", "ry", ",", "rx", ",", "clip", ")", "\n", "rot_mat", "=", "tf", ".", "squeeze", "(", "rot_mat", ",", "axis", "=", "[", "1", "]", ")", "\n", "return", "rot_mat", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat": [[216, 235], ["vec.get_shape().as_list", "geo_utils.pose_vec2rt", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.concat", "vec.get_shape"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2rt"], ["", "def", "pose_vec2mat", "(", "vec", ",", "clip", "=", "False", ")", ":", "\n", "    ", "\"\"\"Converts 6DoF parameters to transformation matrix\n    Args:\n        vec: 6DoF parameters in the order of [rz, ry, rx, tx, ty, tz] -- [B, 6]\n        (NOT the original SfMLearner: tx, ty, tz, rx, ry, rz -- [B, 6])\n    Returns:\n        A transformation matrix -- [B, 4, 4]\n    \"\"\"", "\n", "batch_size", ",", "_", "=", "vec", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "rot_mat", ",", "translation", "=", "pose_vec2rt", "(", "vec", ",", "clip", ")", "\n", "\n", "# rot_check_id = tf_render.matmul(rot_mat, tf_render.transpose(rot_mat, perm=[0, 2, 1]))", "\n", "# rot_mat = tf_render.Print(rot_mat, [rot_check_id], message='rot_check_id:', summarize=batch_size * 3 * 3)", "\n", "\n", "filler", "=", "tf", ".", "constant", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "filler", "=", "tf", ".", "tile", "(", "filler", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "transform_mat", "=", "tf", ".", "concat", "(", "[", "rot_mat", ",", "translation", "]", ",", "axis", "=", "2", ")", "\n", "transform_mat", "=", "tf", ".", "concat", "(", "[", "transform_mat", ",", "filler", "]", ",", "axis", "=", "1", ")", "\n", "return", "transform_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.mat2pose_vec": [[237, 243], ["tensorflow.slice", "geo_utils.mat2euler", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.mat2euler"], ["", "def", "mat2pose_vec", "(", "pose", ")", ":", "\n", "    ", "rot", "=", "tf", ".", "slice", "(", "pose", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "rot_vec", "=", "mat2euler", "(", "rot", ")", "\n", "trans_vec", "=", "tf", ".", "slice", "(", "pose", ",", "[", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "3", ",", "1", "]", ")", "\n", "pose_vec", "=", "tf", ".", "squeeze", "(", "tf", ".", "concat", "(", "[", "rot_vec", ",", "trans_vec", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "return", "pose_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pixel2cam": [[245, 267], ["tf.reshape.get_shape().as_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.matrix_inverse", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.ones", "tensorflow.concat", "tf.reshape.get_shape"], "function", ["None"], ["", "def", "pixel2cam", "(", "depth", ",", "pixel_coords", ",", "intrinsics", ",", "is_homogeneous", "=", "True", ")", ":", "\n", "    ", "\"\"\"Transforms coordinates in the pixel frame to the camera frame.\n\n    Args:\n      depth: [batch, height, width]\n      pixel_coords: homogeneous pixel coordinates [batch, 3, height, width]\n      intrinsics: camera intrinsics [batch, 3, 3]\n      is_homogeneous: return in homogeneous coordinates\n    Returns:\n      Coords in the camera frame [batch, 3 (4 if homogeneous), height, width]\n    \"\"\"", "\n", "batch", ",", "height", ",", "width", "=", "depth", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "depth", "=", "tf", ".", "reshape", "(", "depth", ",", "[", "batch", ",", "1", ",", "-", "1", "]", ")", "\n", "pixel_coords", "=", "tf", ".", "reshape", "(", "pixel_coords", ",", "[", "batch", ",", "3", ",", "-", "1", "]", ")", "\n", "intrin_inv", "=", "tf", ".", "matrix_inverse", "(", "intrinsics", ")", "\n", "cam_coords", "=", "tf", ".", "matmul", "(", "intrin_inv", ",", "pixel_coords", ")", "*", "depth", "\n", "#cam_coords = tf.Print(cam_coords, [tf.reduce_sum(pixel_coords-74.), tf.reduce_sum(depth-852)], message='intrin_inv', summarize=32)", "\n", "if", "is_homogeneous", ":", "\n", "        ", "ones", "=", "tf", ".", "ones", "(", "[", "batch", ",", "1", ",", "height", "*", "width", "]", ")", "\n", "cam_coords", "=", "tf", ".", "concat", "(", "[", "cam_coords", ",", "ones", "]", ",", "axis", "=", "1", ")", "\n", "", "cam_coords", "=", "tf", ".", "reshape", "(", "cam_coords", ",", "[", "batch", ",", "-", "1", ",", "height", ",", "width", "]", ")", "\n", "return", "cam_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.cam2pixel": [[269, 291], ["tf.reshape.get_shape().as_list", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tf.reshape.get_shape"], "function", ["None"], ["", "def", "cam2pixel", "(", "cam_coords", ",", "proj", ")", ":", "\n", "    ", "\"\"\"Transforms coordinates in a camera frame to the pixel frame.\n\n    Args:\n      cam_coords: [batch, 4, height, width]\n      proj: [batch, 4, 4]\n    Returns:\n      Pixel coordinates projected from the camera frame [batch, height, width, 2]\n    \"\"\"", "\n", "batch", ",", "_", ",", "height", ",", "width", "=", "cam_coords", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "cam_coords", "=", "tf", ".", "reshape", "(", "cam_coords", ",", "[", "batch", ",", "4", ",", "-", "1", "]", ")", "\n", "unnormalized_pixel_coords", "=", "tf", ".", "matmul", "(", "proj", ",", "cam_coords", ")", "\n", "x_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "y_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "z_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "2", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "x_n", "=", "x_u", "/", "(", "z_u", "+", "1e-10", ")", "\n", "y_n", "=", "y_u", "/", "(", "z_u", "+", "1e-10", ")", "\n", "pixel_coords", "=", "tf", ".", "concat", "(", "[", "x_n", ",", "y_n", "]", ",", "axis", "=", "1", ")", "\n", "# pixel_coords = tf.Print(pixel_coords, [tf.reduce_mean(unnormalized_pixel_coords),", "\n", "#                                        tf.reduce_mean(cam_coords), ], message='pixel_coords', summarize=32)", "\n", "pixel_coords", "=", "tf", ".", "reshape", "(", "pixel_coords", ",", "[", "batch", ",", "2", ",", "height", ",", "width", "]", ")", "\n", "return", "tf", ".", "transpose", "(", "pixel_coords", ",", "perm", "=", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.meshgrid": [[293, 318], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.tile", "tensorflow.ones", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.ones", "tensorflow.cast", "tensorflow.cast", "tensorflow.ones_like", "tensorflow.stack", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.linspace", "tensorflow.stack", "tensorflow.linspace", "tensorflow.stack"], "function", ["None"], ["", "def", "meshgrid", "(", "batch", ",", "height", ",", "width", ",", "is_homogeneous", "=", "True", ")", ":", "\n", "    ", "\"\"\"Construct a 2D meshgrid.\n\n    Args:\n      batch: batch size\n      height: height of the grid\n      width: width of the grid\n      is_homogeneous: whether to return in homogeneous coordinates\n    Returns:\n      x,y grid coordinates [batch, 2 (3 if homogeneous), height, width]\n    \"\"\"", "\n", "x_t", "=", "tf", ".", "matmul", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "height", ",", "1", "]", ")", ")", ",", "\n", "tf", ".", "transpose", "(", "tf", ".", "expand_dims", "(", "\n", "tf", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "width", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", ")", "\n", "y_t", "=", "tf", ".", "matmul", "(", "tf", ".", "expand_dims", "(", "tf", ".", "linspace", "(", "-", "1.0", ",", "1.0", ",", "height", ")", ",", "1", ")", ",", "\n", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "1", ",", "width", "]", ")", ")", ")", "\n", "x_t", "=", "(", "x_t", "+", "1.0", ")", "*", "0.5", "*", "tf", ".", "cast", "(", "width", "-", "1", ",", "tf", ".", "float32", ")", "\n", "y_t", "=", "(", "y_t", "+", "1.0", ")", "*", "0.5", "*", "tf", ".", "cast", "(", "height", "-", "1", ",", "tf", ".", "float32", ")", "\n", "if", "is_homogeneous", ":", "\n", "        ", "ones", "=", "tf", ".", "ones_like", "(", "x_t", ")", "\n", "coords", "=", "tf", ".", "stack", "(", "[", "x_t", ",", "y_t", ",", "ones", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "coords", "=", "tf", ".", "stack", "(", "[", "x_t", ",", "y_t", "]", ",", "axis", "=", "0", ")", "\n", "", "coords", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "coords", ",", "0", ")", ",", "[", "batch", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "return", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.get_ext_inv": [[320, 339], ["tensorflow.slice", "tensorflow.slice", "tensorflow.transpose", "tensorflow.concat", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "geo_utils.pose_vec2mat", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat"], ["", "def", "get_ext_inv", "(", "pose", ",", "is_vec", "=", "True", ")", ":", "\n", "    ", "batch_size", "=", "pose", ".", "shape", "[", "0", "]", "\n", "\n", "if", "is_vec", ":", "\n", "        ", "pose", "=", "pose_vec2mat", "(", "pose", ",", "clip", "=", "False", ")", "\n", "\n", "", "mtx_rot", "=", "tf", ".", "slice", "(", "pose", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "mtx_t", "=", "tf", ".", "slice", "(", "pose", ",", "[", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "3", ",", "1", "]", ")", "\n", "\n", "mtx_rot_inv", "=", "tf", ".", "transpose", "(", "mtx_rot", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "# bs, row, col", "\n", "mtx_t_inv", "=", "-", "(", "tf", ".", "matmul", "(", "mtx_rot_inv", ",", "mtx_t", ")", ")", "\n", "mtx_ext_inv", "=", "tf", ".", "concat", "(", "[", "mtx_rot_inv", ",", "mtx_t_inv", "]", ",", "axis", "=", "2", ")", "\n", "\n", "filler", "=", "tf", ".", "constant", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "filler", "=", "tf", ".", "tile", "(", "filler", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "mtx_ext_inv", "=", "tf", ".", "concat", "(", "[", "mtx_ext_inv", ",", "filler", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "mtx_ext_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.get_relative_pose": [[340, 365], ["geo_utils.get_ext_inv", "tensorflow.matmul", "tensorflow.cast", "geo_utils.pose_vec2mat", "geo_utils.pose_vec2mat"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.get_ext_inv", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat"], ["", "def", "get_relative_pose", "(", "target_pose", ",", "source_pose", ",", "is_vec", "=", "True", ")", ":", "\n", "    ", "\"\"\"[summary]\n    get relative pose from two absolution poses\n    Arguments:\n        target_pose_vec {[batch_size, 6]} -- [rz, ry, rx, tx, ty, tz],\n            or [batch_size, 4, 4] if is_vec=False\n        source_pose_vec {[batch_size, 6]} -- [rz, ry, rx, tx, ty, tz]\n            or [batch_size, 4, 4] if is_vec=False\n        both are abosulte (up to scale) pose w.r.t. the world coord\n        Note: this is different from the original SfMLearner which is [tx, ty, tz, rx, ry, rz].\n    Returns:\n        transformation from target to source\n    \"\"\"", "\n", "# target_pose = tf_render.Print(target_pose, [target_pose, target_pose.shape], message=\"target_pose\", summarize=16)", "\n", "# source_pose = tf_render.Print(source_pose, [source_pose, source_pose.shape], message=\"source_pose\", summarize=16)", "\n", "if", "is_vec", ":", "\n", "        ", "target_pose", "=", "pose_vec2mat", "(", "target_pose", ",", "clip", "=", "False", ")", "\n", "source_pose", "=", "pose_vec2mat", "(", "source_pose", ",", "clip", "=", "False", ")", "\n", "\n", "#target_pose_inv = tf_render.linalg.inv(target_pose)", "\n", "", "target_pose_inv", "=", "get_ext_inv", "(", "target_pose", ",", "False", ")", "\n", "transform_mat", "=", "tf", ".", "matmul", "(", "source_pose", ",", "target_pose_inv", ")", "\n", "\n", "transform_mat", "=", "tf", ".", "cast", "(", "transform_mat", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "transform_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.get_source_pose": [[367, 391], ["tensorflow.matmul", "tensorflow.tile", "geo_utils.pose_vec2mat", "geo_utils.pose_vec2mat"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat"], ["", "def", "get_source_pose", "(", "target_pose", ",", "rel_pose", ",", "is_vec", "=", "True", ")", ":", "\n", "    ", "\"\"\"[summary]\n    get relative pose from two absolution poses\n    Arguments:\n        target_pose_vec {[batch_size, 6]} -- [rz, ry, rx, tx, ty, tz],\n            or [batch_size, 4, 4] if is_vec=False\n        source_pose_vec {[batch_size, 6]} -- [rz, ry, rx, tx, ty, tz]\n            or [batch_size, 4, 4] if is_vec=False\n        both are abosulte (up to scale) pose w.r.t. the world coord\n        Note: this is different from the original SfMLearner which is [tx, ty, tz, rx, ry, rz].\n    Returns:\n        transformation from target to source\n    \"\"\"", "\n", "batch_size", "=", "rel_pose", ".", "shape", "[", "0", "]", "\n", "\n", "if", "target_pose", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "        ", "target_pose", "=", "tf", ".", "tile", "(", "target_pose", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "", "if", "is_vec", ":", "\n", "        ", "target_pose", "=", "pose_vec2mat", "(", "target_pose", ")", "\n", "rel_pose", "=", "pose_vec2mat", "(", "rel_pose", ")", "\n", "\n", "", "source_pose", "=", "tf", ".", "matmul", "(", "rel_pose", ",", "target_pose", ")", "\n", "return", "source_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.projective_inverse_warp_mask": [[392, 428], ["img.get_shape().as_list", "geo_utils.meshgrid", "geo_utils.pixel2cam", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "geo_utils.cam2pixel", "geo_utils.bilinear_sampler", "geo_utils.bilinear_sampler", "geo_utils.pose_vec2mat", "img.get_shape", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.meshgrid", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pixel2cam", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.cam2pixel", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.bilinear_sampler", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.bilinear_sampler", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat"], ["", "def", "projective_inverse_warp_mask", "(", "img", ",", "img_mask", ",", "depth", ",", "source_depth", ",", "pose", ",", "intrinsics", ",", "is_vec", "=", "True", ")", ":", "\n", "    ", "\"\"\"Inverse warp a source image to the target image plane based on projection.\n\n    Args:\n      img: the source image [batch, height_s, width_s, 3]\n      depth: depth map of the target image [batch, height_t, width_t]\n      pose: target to source camera transformation matrix [batch, 6], in the\n            order of tx, ty, tz, rx, ry, rz\n      intrinsics: camera intrinsics [batch, 3, 3]\n    Returns:\n      Source image inverse warped to the target image plane [batch, height_t,\n      width_t, 3]\n    \"\"\"", "\n", "batch", ",", "height", ",", "width", ",", "_", "=", "img", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "# Convert pose vector to matrix", "\n", "if", "is_vec", ":", "\n", "        ", "pose", "=", "pose_vec2mat", "(", "pose", ")", "\n", "\n", "# Construct pixel grid coordinates", "\n", "", "pixel_coords", "=", "meshgrid", "(", "batch", ",", "height", ",", "width", ")", "\n", "# Convert pixel coordinates to the camera frame", "\n", "cam_coords", "=", "pixel2cam", "(", "depth", ",", "pixel_coords", ",", "intrinsics", ")", "\n", "# Construct a 4x4 intrinsic matrix (TODO: can it be 3x4?)", "\n", "filler", "=", "tf", ".", "constant", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "filler", "=", "tf", ".", "tile", "(", "filler", ",", "[", "batch", ",", "1", ",", "1", "]", ")", "\n", "intrinsics", "=", "tf", ".", "concat", "(", "[", "intrinsics", ",", "tf", ".", "zeros", "(", "[", "batch", ",", "3", ",", "1", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "intrinsics", "=", "tf", ".", "concat", "(", "[", "intrinsics", ",", "filler", "]", ",", "axis", "=", "1", ")", "\n", "# Get a 4x4 transformation matrix from 'target' camera frame to 'source'", "\n", "# pixel frame.", "\n", "proj_tgt_cam_to_src_pixel", "=", "tf", ".", "matmul", "(", "intrinsics", ",", "pose", ")", "\n", "src_pixel_coords", "=", "cam2pixel", "(", "cam_coords", ",", "proj_tgt_cam_to_src_pixel", ")", "\n", "\n", "output_img", ",", "mask", "=", "bilinear_sampler", "(", "img", ",", "src_pixel_coords", ")", "\n", "output_depth", ",", "_", "=", "bilinear_sampler", "(", "source_depth", ",", "src_pixel_coords", ")", "\n", "\n", "return", "output_img", ",", "output_depth", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.projective_inverse_warp": [[429, 468], ["img.get_shape().as_list", "geo_utils.meshgrid", "geo_utils.pixel2cam", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "geo_utils.cam2pixel", "geo_utils.bilinear_sampler", "geo_utils.bilinear_sampler", "geo_utils.pose_vec2mat", "img.get_shape", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.meshgrid", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pixel2cam", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.cam2pixel", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.bilinear_sampler", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.bilinear_sampler", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat"], ["", "def", "projective_inverse_warp", "(", "img", ",", "depth", ",", "source_depth", ",", "pose", ",", "intrinsics", ",", "is_vec", "=", "True", ")", ":", "\n", "    ", "\"\"\"Inverse warp a source image to the target image plane based on projection.\n\n    Args:\n      img: the source image [batch, height_s, width_s, 3]\n      depth: depth map of the target image [batch, height_t, width_t]\n      pose: target to source camera transformation matrix [batch, 6], in the\n            order of tx, ty, tz, rx, ry, rz\n      intrinsics: camera intrinsics [batch, 3, 3]\n    Returns:\n      Source image inverse warped to the target image plane [batch, height_t,\n      width_t, 3]\n    \"\"\"", "\n", "batch", ",", "height", ",", "width", ",", "_", "=", "img", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "# Convert pose vector to matrix", "\n", "if", "is_vec", ":", "\n", "        ", "pose", "=", "pose_vec2mat", "(", "pose", ")", "\n", "\n", "# Construct pixel grid coordinates", "\n", "", "pixel_coords", "=", "meshgrid", "(", "batch", ",", "height", ",", "width", ")", "\n", "# Convert pixel coordinates to the camera frame", "\n", "cam_coords", "=", "pixel2cam", "(", "depth", ",", "pixel_coords", ",", "intrinsics", ")", "\n", "# Construct a 4x4 intrinsic matrix (TODO: can it be 3x4?)", "\n", "filler", "=", "tf", ".", "constant", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "filler", "=", "tf", ".", "tile", "(", "filler", ",", "[", "batch", ",", "1", ",", "1", "]", ")", "\n", "intrinsics", "=", "tf", ".", "concat", "(", "[", "intrinsics", ",", "tf", ".", "zeros", "(", "[", "batch", ",", "3", ",", "1", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "intrinsics", "=", "tf", ".", "concat", "(", "[", "intrinsics", ",", "filler", "]", ",", "axis", "=", "1", ")", "\n", "# Get a 4x4 transformation matrix from 'target' camera frame to 'source'", "\n", "# pixel frame.", "\n", "proj_tgt_cam_to_src_pixel", "=", "tf", ".", "matmul", "(", "intrinsics", ",", "pose", ")", "\n", "src_pixel_coords", "=", "cam2pixel", "(", "cam_coords", ",", "proj_tgt_cam_to_src_pixel", ")", "\n", "\n", "# src_pixel_coords = tf.Print(src_pixel_coords, [tf.reduce_mean(cam_coords),", "\n", "#                                                tf.reduce_mean(depth), tf.reduce_mean(pixel_coords), intrinsics],", "\n", "#                             message='src_pixel_coords', summarize=32)", "\n", "\n", "output_img", ",", "mask", "=", "bilinear_sampler", "(", "img", ",", "src_pixel_coords", ")", "\n", "output_depth", ",", "_", "=", "bilinear_sampler", "(", "source_depth", ",", "src_pixel_coords", ")", "\n", "return", "output_img", ",", "output_depth", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.reprojection_error": [[469, 565], ["depth.get_shape().as_list", "geo_utils.pose_vec2mat", "tensorflow.split", "tensorflow.cast", "tensorflow.cast", "tensorflow.floor", "tensorflow.floor", "tensorflow.cast", "tensorflow.cast", "tensorflow.zeros", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.reshape", "range", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.add_n", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile", "tensorflow.ones", "tensorflow.concat", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "tensorflow.tile", "tensorflow.matmul", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.norm", "tensorflow.reduce_mean", "tensorflow.shape", "tensorflow.shape", "tensorflow.stack", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.matrix_inverse", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.concat", "depth.get_shape", "tensorflow.zeros", "tensorflow.concat", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.zeros", "tensorflow.shape", "tensorflow.shape", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat"], ["", "def", "reprojection_error", "(", "tgt_points", ",", "src_points", ",", "depth", ",", "pose", ",", "intrinsics", ")", ":", "\n", "    ", "\"\"\"Compute re-projection error given match points\n    \n    Arguments:\n        tgt_points {[type]} -- homogeneous coordinates [batch_size, match_num, 3]\n        src_points {[type]} -- homogeneous coordinates [batch_size, match_num, 3]\n        depth {depth mat} -- [batch_size, height, width]\n        pose {pose vector} -- [batch_size, 6]\n        intrinsics {[type]} -- [batch_size, 3, 3]\n    \n    Returns:\n        reprojection error given sparse matches\n    \"\"\"", "\n", "batch", "=", "tf", ".", "shape", "(", "tgt_points", ")", "[", "0", "]", "\n", "match_num", "=", "tf", ".", "shape", "(", "tgt_points", ")", "[", "1", "]", "\n", "_", ",", "height", ",", "width", ",", "ch", "=", "depth", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "pose", "=", "pose_vec2mat", "(", "pose", ")", "\n", "tgt_coords", "=", "tgt_points", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "src_coords", "=", "src_points", "[", ":", ",", ":", ",", ":", "2", "]", "\n", "coords_x", ",", "coords_y", "=", "tf", ".", "split", "(", "tgt_coords", ",", "[", "1", ",", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "coords_x", "=", "tf", ".", "cast", "(", "coords_x", ",", "'float32'", ")", "\n", "coords_y", "=", "tf", ".", "cast", "(", "coords_y", ",", "'float32'", ")", "\n", "x0", "=", "tf", ".", "floor", "(", "coords_x", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "tf", ".", "floor", "(", "coords_y", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "y_max", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "depth", ")", "[", "1", "]", "-", "1", ",", "'float32'", ")", "\n", "x_max", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "depth", ")", "[", "2", "]", "-", "1", ",", "'float32'", ")", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "x0_safe", "=", "tf", ".", "clip_by_value", "(", "x0", ",", "zero", ",", "x_max", ")", "\n", "y0_safe", "=", "tf", ".", "clip_by_value", "(", "y0", ",", "zero", ",", "y_max", ")", "\n", "x1_safe", "=", "tf", ".", "clip_by_value", "(", "x1", ",", "zero", ",", "x_max", ")", "\n", "y1_safe", "=", "tf", ".", "clip_by_value", "(", "y1", ",", "zero", ",", "y_max", ")", "\n", "\n", "wt_x0", "=", "x1_safe", "-", "coords_x", "\n", "wt_x1", "=", "coords_x", "-", "x0_safe", "\n", "wt_y0", "=", "y1_safe", "-", "coords_y", "\n", "wt_y1", "=", "coords_y", "-", "y0_safe", "\n", "\n", "one_img_size", "=", "height", "*", "width", "\n", "depths_flat", "=", "tf", ".", "reshape", "(", "depth", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "tgt_points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "base", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "1", ",", "match_num", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "start", "=", "i", "*", "one_img_size", "*", "tf", ".", "ones", "(", "shape", "=", "[", "1", ",", "match_num", ",", "1", "]", ")", "\n", "base", "=", "tf", ".", "concat", "(", "[", "base", ",", "start", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "base_y0", "=", "base", "+", "y0_safe", "*", "width", "\n", "base_y1", "=", "base", "+", "y1_safe", "*", "width", "\n", "idx00", "=", "x0_safe", "+", "base_y0", "\n", "idx01", "=", "x0_safe", "+", "base_y1", "\n", "idx10", "=", "x1_safe", "+", "base_y0", "\n", "idx11", "=", "x1_safe", "+", "base_y1", "\n", "\n", "## sample from depth", "\n", "im00", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "depths_flat", ",", "tf", ".", "cast", "(", "idx00", ",", "'int32'", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "im01", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "depths_flat", ",", "tf", ".", "cast", "(", "idx01", ",", "'int32'", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "im10", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "depths_flat", ",", "tf", ".", "cast", "(", "idx10", ",", "'int32'", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "im11", "=", "tf", ".", "squeeze", "(", "tf", ".", "gather", "(", "depths_flat", ",", "tf", ".", "cast", "(", "idx11", ",", "'int32'", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "w00", "=", "wt_x0", "*", "wt_y0", "\n", "w01", "=", "wt_x0", "*", "wt_y1", "\n", "w10", "=", "wt_x1", "*", "wt_y0", "\n", "w11", "=", "wt_x1", "*", "wt_y1", "\n", "sparse_depth", "=", "tf", ".", "add_n", "(", "[", "w00", "*", "im00", ",", "w01", "*", "im01", ",", "w10", "*", "im10", ",", "w11", "*", "im11", "]", ")", "\n", "\n", "#tgt_points = tf_render.reshape(tgt_points, shape=[batch, 3, -1])", "\n", "inverse_k", "=", "tf", ".", "expand_dims", "(", "tf", ".", "matrix_inverse", "(", "intrinsics", ")", ",", "axis", "=", "1", ")", "\n", "inverse_k", "=", "tf", ".", "tile", "(", "inverse_k", ",", "[", "1", ",", "match_num", ",", "1", ",", "1", "]", ")", "\n", "sparse_depth", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "sparse_depth", ",", "shape", "=", "[", "batch", ",", "match_num", ",", "1", ",", "1", "]", ")", ",", "[", "1", ",", "1", ",", "3", ",", "1", "]", ")", "\n", "cam_coords", "=", "tf", ".", "matmul", "(", "inverse_k", ",", "tf", ".", "expand_dims", "(", "tgt_points", ",", "axis", "=", "-", "1", ")", ")", "*", "sparse_depth", "\n", "ones", "=", "tf", ".", "ones", "(", "[", "batch", ",", "match_num", ",", "1", ",", "1", "]", ")", "\n", "cam_coords", "=", "tf", ".", "concat", "(", "[", "cam_coords", ",", "ones", "]", ",", "axis", "=", "2", ")", "\n", "# Construct a 4x4 intrinsic matrix", "\n", "filler", "=", "tf", ".", "constant", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "filler", "=", "tf", ".", "tile", "(", "filler", ",", "[", "batch", ",", "1", ",", "1", "]", ")", "\n", "intrinsics", "=", "tf", ".", "concat", "(", "[", "intrinsics", ",", "tf", ".", "zeros", "(", "[", "batch", ",", "3", ",", "1", "]", ")", "]", ",", "axis", "=", "2", ")", "\n", "intrinsics", "=", "tf", ".", "concat", "(", "[", "intrinsics", ",", "filler", "]", ",", "axis", "=", "1", ")", "\n", "proj", "=", "tf", ".", "matmul", "(", "intrinsics", ",", "pose", ")", "\n", "proj", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "proj", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "match_num", ",", "1", ",", "1", "]", ")", "\n", "\n", "#cam_coords = tf_render.reshape(cam_coords, [batch, 4, -1])", "\n", "unnormalized_pixel_coords", "=", "tf", ".", "matmul", "(", "proj", ",", "cam_coords", ")", "\n", "x_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "y_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "z_u", "=", "tf", ".", "slice", "(", "unnormalized_pixel_coords", ",", "[", "0", ",", "0", ",", "2", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "x_n", "=", "x_u", "/", "(", "z_u", "+", "1e-10", ")", "\n", "y_n", "=", "y_u", "/", "(", "z_u", "+", "1e-10", ")", "\n", "src_pixel_coords", "=", "tf", ".", "squeeze", "(", "tf", ".", "concat", "(", "[", "x_n", ",", "y_n", "]", ",", "axis", "=", "2", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "reproj_error", "=", "tf", ".", "norm", "(", "src_pixel_coords", "-", "src_coords", "+", "1e-6", ",", "axis", "=", "2", ")", "\n", "reproj_error", "=", "tf", ".", "reduce_mean", "(", "reproj_error", ",", "axis", "=", "1", ")", "\n", "return", "reproj_error", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils._repeat": [[567, 572], ["tensorflow.transpose", "tensorflow.cast", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.reshape", "tensorflow.ones", "tensorflow.stack"], "function", ["None"], ["", "def", "_repeat", "(", "x", ",", "n_repeats", ")", ":", "\n", "    ", "rep", "=", "tf", ".", "transpose", "(", "tf", ".", "expand_dims", "(", "tf", ".", "ones", "(", "shape", "=", "tf", ".", "stack", "(", "[", "n_repeats", ",", "]", ")", ")", ",", "1", ")", ",", "[", "1", ",", "0", "]", ")", "\n", "rep", "=", "tf", ".", "cast", "(", "rep", ",", "'float32'", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "1", ")", ")", ",", "rep", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.bilinear_sampler": [[573, 655], ["tensorflow.name_scope", "tensorflow.split", "imgs.get_shape", "coords.get_shape", "coords.get_shape().as_list", "tensorflow.cast", "tensorflow.cast", "tensorflow.floor", "tensorflow.floor", "tensorflow.cast", "tensorflow.cast", "tensorflow.zeros", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.cast", "tensorflow.cast", "geo_utils._repeat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.add_n", "tensorflow.add_n", "imgs.get_shape().as_list", "tensorflow.stack", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "coords.get_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "imgs.get_shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.range"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils._repeat"], ["", "def", "bilinear_sampler", "(", "imgs", ",", "coords", ")", ":", "\n", "    ", "\"\"\"Construct a new image by bilinear sampling from the input image.\n\n    Points falling outside the source image boundary have value 0.\n\n    Args:\n      imgs: source image to be sampled from [batch, height_s, width_s, channels]\n      coords: coordinates of source pixels to sample from [batch, height_t,\n        width_t, 2]. height_t/width_t correspond to the dimensions of the output\n        image (don't need to be the same as height_s/width_s). The two channels\n        correspond to x and y coordinates respectively.\n    Returns:\n      A new sampled image [batch, height_t, width_t, channels]\n    \"\"\"", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'image_sampling'", ")", ":", "\n", "        ", "coords_x", ",", "coords_y", "=", "tf", ".", "split", "(", "coords", ",", "[", "1", ",", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "inp_size", "=", "imgs", ".", "get_shape", "(", ")", "\n", "coord_size", "=", "coords", ".", "get_shape", "(", ")", "\n", "out_size", "=", "coords", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "out_size", "[", "3", "]", "=", "imgs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", "\n", "\n", "coords_x", "=", "tf", ".", "cast", "(", "coords_x", ",", "'float32'", ")", "\n", "coords_y", "=", "tf", ".", "cast", "(", "coords_y", ",", "'float32'", ")", "\n", "\n", "x0", "=", "tf", ".", "floor", "(", "coords_x", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "tf", ".", "floor", "(", "coords_y", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "y_max", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "imgs", ")", "[", "1", "]", "-", "1", ",", "'float32'", ")", "\n", "x_max", "=", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "imgs", ")", "[", "2", "]", "-", "1", ",", "'float32'", ")", "\n", "zero", "=", "tf", ".", "zeros", "(", "[", "1", "]", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "x0_safe", "=", "tf", ".", "clip_by_value", "(", "x0", ",", "zero", ",", "x_max", ")", "\n", "y0_safe", "=", "tf", ".", "clip_by_value", "(", "y0", ",", "zero", ",", "y_max", ")", "\n", "x1_safe", "=", "tf", ".", "clip_by_value", "(", "x1", ",", "zero", ",", "x_max", ")", "\n", "y1_safe", "=", "tf", ".", "clip_by_value", "(", "y1", ",", "zero", ",", "y_max", ")", "\n", "\n", "## bilinear interp weights, with points outside the grid having weight 0", "\n", "\"\"\"\n        weight of point take the value of far distance\n        \"\"\"", "\n", "wt_x0", "=", "x1_safe", "-", "coords_x", "\n", "wt_x1", "=", "coords_x", "-", "x0_safe", "\n", "wt_y0", "=", "y1_safe", "-", "coords_y", "\n", "wt_y1", "=", "coords_y", "-", "y0_safe", "\n", "\n", "## indices in the flat image to sample from", "\n", "dim2", "=", "tf", ".", "cast", "(", "inp_size", "[", "2", "]", ",", "'float32'", ")", "\n", "dim1", "=", "tf", ".", "cast", "(", "inp_size", "[", "2", "]", "*", "inp_size", "[", "1", "]", ",", "'float32'", ")", "\n", "base", "=", "_repeat", "(", "tf", ".", "cast", "(", "tf", ".", "range", "(", "coord_size", "[", "0", "]", ")", ",", "'float32'", ")", "*", "dim1", ",", "coord_size", "[", "1", "]", "*", "coord_size", "[", "2", "]", ")", "\n", "base", "=", "tf", ".", "reshape", "(", "base", ",", "[", "out_size", "[", "0", "]", ",", "out_size", "[", "1", "]", ",", "out_size", "[", "2", "]", ",", "1", "]", ")", "\n", "\n", "base_y0", "=", "base", "+", "y0_safe", "*", "dim2", "\n", "base_y1", "=", "base", "+", "y1_safe", "*", "dim2", "\n", "\n", "\"\"\"\n        idx00 mean the index of image_flat that int(lt of current coordinate)\n        \"\"\"", "\n", "idx00", "=", "tf", ".", "reshape", "(", "x0_safe", "+", "base_y0", ",", "[", "-", "1", "]", ")", "\n", "idx01", "=", "x0_safe", "+", "base_y1", "\n", "idx10", "=", "x1_safe", "+", "base_y0", "\n", "idx11", "=", "x1_safe", "+", "base_y1", "\n", "\n", "## sample from imgs", "\n", "imgs_flat", "=", "tf", ".", "reshape", "(", "imgs", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "inp_size", "[", "3", "]", "]", ")", ")", "\n", "imgs_flat", "=", "tf", ".", "cast", "(", "imgs_flat", ",", "'float32'", ")", "\n", "im00", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "imgs_flat", ",", "tf", ".", "cast", "(", "idx00", ",", "'int32'", ")", ")", ",", "out_size", ")", "\n", "im01", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "imgs_flat", ",", "tf", ".", "cast", "(", "idx01", ",", "'int32'", ")", ")", ",", "out_size", ")", "\n", "im10", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "imgs_flat", ",", "tf", ".", "cast", "(", "idx10", ",", "'int32'", ")", ")", ",", "out_size", ")", "\n", "im11", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "imgs_flat", ",", "tf", ".", "cast", "(", "idx11", ",", "'int32'", ")", ")", ",", "out_size", ")", "\n", "\n", "w00", "=", "wt_x0", "*", "wt_y0", "\n", "w01", "=", "wt_x0", "*", "wt_y1", "\n", "w10", "=", "wt_x1", "*", "wt_y0", "\n", "w11", "=", "wt_x1", "*", "wt_y1", "\n", "\n", "output", "=", "tf", ".", "add_n", "(", "[", "w00", "*", "im00", ",", "w01", "*", "im01", ",", "w10", "*", "im10", ",", "w11", "*", "im11", "]", ")", "\n", "mask", "=", "tf", ".", "add_n", "(", "[", "w00", ",", "w01", ",", "w10", ",", "w11", "]", ")", "\n", "\n", "return", "output", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.skew_symmetric_mat3": [[657, 673], ["tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.zeros", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.shape"], "function", ["None"], ["", "", "def", "skew_symmetric_mat3", "(", "vec3", ")", ":", "\n", "    ", "\"\"\"compute the skew symmetric matrix for cross product\n    \n    Arguments:\n        vec {vector of shape [batch_size, 3, 1]}\n    \"\"\"", "\n", "bs", "=", "tf", ".", "shape", "(", "vec3", ")", "[", "0", "]", "# batch size", "\n", "a1", "=", "tf", ".", "slice", "(", "vec3", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "a2", "=", "tf", ".", "slice", "(", "vec3", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "a3", "=", "tf", ".", "slice", "(", "vec3", ",", "[", "0", ",", "2", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "zeros", "=", "tf", ".", "zeros", "(", "[", "bs", ",", "1", ",", "1", "]", ")", "\n", "row1", "=", "tf", ".", "concat", "(", "[", "zeros", ",", "-", "a3", ",", "a2", "]", ",", "axis", "=", "2", ")", "\n", "row2", "=", "tf", ".", "concat", "(", "[", "a3", ",", "zeros", ",", "-", "a1", "]", ",", "axis", "=", "2", ")", "\n", "row3", "=", "tf", ".", "concat", "(", "[", "-", "a2", ",", "a1", ",", "zeros", "]", ",", "axis", "=", "2", ")", "\n", "vec3_ssm", "=", "tf", ".", "concat", "(", "[", "row1", ",", "row2", ",", "row3", "]", ",", "axis", "=", "1", ")", "\n", "return", "vec3_ssm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.fundamental_matrix_from_rt": [[675, 687], ["geo_utils.pose_vec2rt", "geo_utils.skew_symmetric_mat3", "tensorflow.matmul", "tensorflow.matrix_inverse", "tensorflow.matmul", "tensorflow.matmul"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2rt", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.skew_symmetric_mat3"], ["", "def", "fundamental_matrix_from_rt", "(", "vec", ",", "intrinsics", ")", ":", "\n", "    ", "rot_mat", ",", "translation", "=", "pose_vec2rt", "(", "vec", ",", "clip", "=", "False", ")", "\n", "translation_ssm", "=", "skew_symmetric_mat3", "(", "translation", ")", "\n", "\n", "essential_mat", "=", "tf", ".", "matmul", "(", "rot_mat", ",", "translation_ssm", ",", "name", "=", "'essential_mat'", ")", "\n", "intrinsics_inv", "=", "tf", ".", "matrix_inverse", "(", "intrinsics", ")", "\n", "#intrinsics_inv = tf.Print(intrinsics_inv, [intrinsics, intrinsics_inv], message='intrinsics_inv', summarize=64)", "\n", "\n", "fundamental_mat", "=", "tf", ".", "matmul", "(", "intrinsics_inv", ",", "essential_mat", ",", "transpose_a", "=", "True", ")", "\n", "fundamental_mat", "=", "tf", ".", "matmul", "(", "fundamental_mat", ",", "intrinsics_inv", ")", "\n", "\n", "return", "fundamental_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.scale_intrinsics": [[689, 696], ["numpy.copy"], "function", ["None"], ["", "def", "scale_intrinsics", "(", "mat", ",", "sx", ",", "sy", ")", ":", "\n", "    ", "out", "=", "np", ".", "copy", "(", "mat", ")", "\n", "out", "[", "0", ",", "0", "]", "*=", "sx", "\n", "out", "[", "0", ",", "2", "]", "*=", "sx", "\n", "out", "[", "1", ",", "1", "]", "*=", "sy", "\n", "out", "[", "1", ",", "2", "]", "*=", "sy", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.covisible.mm_covisible_tri": [[12, 38], ["tensorflow.reshape", "tensorflow.gather", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.gather", "tensorflow.reshape", "tensorflow.sets.set_intersection", "tensorflow.sparse_tensor_to_dense", "range", "tensorflow.stack", "tensorflow.gather", "tensorflow.reshape", "tensorflow.gather", "tf.stack.append"], "function", ["None"], ["def", "mm_covisible_tri", "(", "h_lrgp", ",", "tri_ids_tar", ",", "tri_ids_src", ")", ":", "\n", "    ", "batch_size", "=", "h_lrgp", ".", "batch_size", "\n", "\n", "tri_ids_tar", "=", "tf", ".", "reshape", "(", "tri_ids_tar", ",", "[", "-", "1", "]", ")", "\n", "ver_ids_tar", "=", "tf", ".", "gather", "(", "h_lrgp", ".", "h_fore", ".", "mesh_tri", ",", "tri_ids_tar", ")", "# vertex idx", "\n", "ver_ids_tar", "=", "tf", ".", "reshape", "(", "ver_ids_tar", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "\n", "tri_ids_src", "=", "tf", ".", "reshape", "(", "tri_ids_src", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "ver_ids_src", "=", "tf", ".", "gather", "(", "h_lrgp", ".", "h_fore", ".", "mesh_tri", ",", "tri_ids_src", ")", "\n", "ver_ids_src", "=", "tf", ".", "reshape", "(", "ver_ids_src", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "\n", "ver_ids_consistency", "=", "tf", ".", "sets", ".", "set_intersection", "(", "ver_ids_tar", ",", "ver_ids_src", ",", "False", ")", "\n", "ver_ids_consistency", "=", "tf", ".", "sparse_tensor_to_dense", "(", "ver_ids_consistency", ",", "validate_indices", "=", "False", ")", "# bs, h*w*3", "\n", "\n", "tri_consistency", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "batch_size", ")", ":", "\n", "# find adjacent triangle for robust", "\n", "        ", "tri_ids_consistency_b", "=", "tf", ".", "gather", "(", "h_lrgp", ".", "h_fore", ".", "mesh_vertex_refer_face_pad", ",", "ver_ids_consistency", "[", "j", "]", ")", "# num, 8", "\n", "tri_ids_consistency_b", "=", "tf", ".", "reshape", "(", "tri_ids_consistency_b", ",", "[", "-", "1", "]", ")", "\n", "tri_consistency_b", "=", "tf", ".", "gather", "(", "h_lrgp", ".", "h_fore", ".", "mesh_tri", ",", "tri_ids_consistency_b", ")", "# vertex idx", "\n", "# [4w 3]", "\n", "# tri_consistency_b = tf.Print(tri_consistency_b, [tf.shape(tri_consistency_b)], message='tri_consistency')", "\n", "tri_consistency", ".", "append", "(", "tri_consistency_b", ")", "\n", "", "tri_consistency", "=", "tf", ".", "stack", "(", "tri_consistency", ",", "axis", "=", "0", ")", "\n", "\n", "return", "tri_consistency", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.__init__": [[7, 12], ["h5py.File"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path_file", ",", "handler_file", "=", "None", ",", "mode", "=", "'a'", ")", ":", "\n", "        ", "if", "(", "handler_file", "==", "None", ")", ":", "\n", "            ", "self", ".", "handler_file", "=", "h5py", ".", "File", "(", "path_file", ",", "mode", "=", "mode", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "handler_file", "=", "handler_file", "\n", "", "", "def", "GetMainKeys", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetMainKeys": [[12, 14], ["HDF5IO.HDF5IO.handler_file.keys"], "methods", ["None"], ["", "", "def", "GetMainKeys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "handler_file", ".", "keys", "(", ")", "\n", "", "def", "GetValue", "(", "self", ",", "name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue": [[14, 16], ["None"], "methods", ["None"], ["", "def", "GetValue", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "handler_file", "[", "name", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo.__init__": [[28, 40], ["HDF5IO.HDF5IO.HDF5IO", "bfm09_tf_uv.BFM_singleTopo._read_hdf5", "bfm09_tf_uv.BFM_singleTopo._generate_tensor"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo._read_hdf5", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo._generate_tensor"], ["    ", "def", "__init__", "(", "self", ",", "path_gpmm", ",", "name", ",", "batch_size", ",", "rank", "=", "80", ",", "gpmm_exp_rank", "=", "64", ",", "mode_light", "=", "False", ",", "CVRT_MICRON_MM", "=", "1000.0", ")", ":", "\n", "        ", "self", ".", "path_gpmm", "=", "path_gpmm", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "hdf5io", "=", "HDF5IO", "(", "path_gpmm", ",", "mode", "=", "'r'", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "gpmm_exp_rank", "=", "gpmm_exp_rank", "\n", "self", ".", "CVRT_MICRON_MM", "=", "CVRT_MICRON_MM", "\n", "\n", "self", ".", "_read_hdf5", "(", ")", "\n", "self", ".", "_generate_tensor", "(", "mode_light", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo._read_hdf5": [[41, 170], ["HDF5IO.HDF5IO.HDF5IO", "HDF5IO.HDF5IO.HDF5IO", "HDF5IO.HDF5IO.HDF5IO", "np.reshape", "np.reshape", "np.square", "np.reshape", "HDF5IO.HDF5IO.HDF5IO", "HDF5IO.HDF5IO.HDF5IO", "np.reshape", "np.reshape", "np.square", "np.reshape", "np.reshape", "range", "np.array", "HDF5IO.HDF5IO.HDF5IO", "HDF5IO.HDF5IO.HDF5IO", "np.reshape", "np.square", "np.reshape", "bfm09_tf_uv.BFM_singleTopo._get_v_ring_f", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_model.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_model.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_model.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_rgb_model.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_rgb_model.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_rgb_model.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_rgb_model.GetValue", "np.zeros", "range", "np.asarray", "cv2.cvtColor", "cv2.imshow", "len", "list_uvImageIndex.append", "bfm09_tf_uv.BFM_singleTopo.hdf5io_exp_model.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_exp_model.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_representer.GetValue", "mesh_tri_reference.astype", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_representer.GetMainKeys", "np.reshape", "tensorflow.constant", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_representer.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_representer.GetValue", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_representer.GetMainKeys", "np.reshape", "np.reshape.astype", "len", "int", "int", "cv2.waitKey", "cv2.destroyAllWindows", "int", "int", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_representer.GetValue", "idx_subTopo.astype", "bfm09_tf_uv.BFM_singleTopo.hdf5io_pt_representer.GetValue"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo._get_v_ring_f", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetMainKeys", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetMainKeys", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.HDF5IO.HDF5IO.GetValue"], ["", "def", "_read_hdf5", "(", "self", ")", ":", "\n", "        ", "CVRT_MICRON_MM", "=", "self", ".", "CVRT_MICRON_MM", "\n", "name", "=", "self", ".", "name", "\n", "\"\"\"\n        Shape\n        Origin Unit of measurement is micron\n        We convert to mm\n        pcaVar is eignvalue rather Var\n        \"\"\"", "\n", "hdf5io_shape", "=", "HDF5IO", "(", "self", ".", "path_gpmm", ",", "self", ".", "hdf5io", ".", "handler_file", "[", "'shape'", "+", "name", "]", ")", "\n", "self", ".", "hdf5io_pt_model", "=", "HDF5IO", "(", "self", ".", "path_gpmm", ",", "hdf5io_shape", ".", "handler_file", "[", "'model'", "]", ")", "\n", "self", ".", "hdf5io_pt_representer", "=", "HDF5IO", "(", "self", ".", "path_gpmm", ",", "hdf5io_shape", ".", "handler_file", "[", "'representer'", "]", ")", "\n", "\n", "pt_mean", "=", "self", ".", "hdf5io_pt_model", ".", "GetValue", "(", "'mean'", ")", ".", "value", "\n", "pt_mean", "=", "np", ".", "reshape", "(", "pt_mean", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "pt_mean_np", "=", "pt_mean", "/", "CVRT_MICRON_MM", "\n", "\n", "pt_pcaBasis", "=", "self", ".", "hdf5io_pt_model", ".", "GetValue", "(", "'pcaBasis'", ")", ".", "value", "\n", "self", ".", "pt_pcaBasis_np", "=", "pt_pcaBasis", "/", "CVRT_MICRON_MM", "\n", "\n", "pt_pcaVariance", "=", "self", ".", "hdf5io_pt_model", ".", "GetValue", "(", "'pcaVariance'", ")", ".", "value", "\n", "pt_pcaVariance", "=", "np", ".", "reshape", "(", "pt_pcaVariance", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "pt_pcaVariance_np", "=", "np", ".", "square", "(", "pt_pcaVariance", ")", "\n", "\n", "self", ".", "point3d_mean_np", "=", "np", ".", "reshape", "(", "self", ".", "pt_mean_np", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "\n", "\"\"\"\n        Vertex color\n        Origin Unit of measurement is uint\n        We convert to float\n        pcaVar is eignvalue rather Var\n        \"\"\"", "\n", "hdf5io_color", "=", "HDF5IO", "(", "self", ".", "path_gpmm", ",", "self", ".", "hdf5io", ".", "handler_file", "[", "'color'", "+", "name", "]", ")", "\n", "self", ".", "hdf5io_rgb_model", "=", "HDF5IO", "(", "self", ".", "path_gpmm", ",", "hdf5io_color", ".", "handler_file", "[", "'model'", "]", ")", "\n", "\n", "rgb_mean", "=", "self", ".", "hdf5io_rgb_model", ".", "GetValue", "(", "'mean'", ")", ".", "value", "\n", "rgb_mean", "=", "np", ".", "reshape", "(", "rgb_mean", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "rgb_mean_np", "=", "rgb_mean", "/", "255.0", "\n", "\n", "rgb_pcaBasis", "=", "self", ".", "hdf5io_rgb_model", ".", "GetValue", "(", "'pcaBasis'", ")", ".", "value", "\n", "self", ".", "rgb_pcaBasis_np", "=", "rgb_pcaBasis", "/", "255.0", "\n", "\n", "rgb_pcaVariance", "=", "self", ".", "hdf5io_rgb_model", ".", "GetValue", "(", "'pcaVariance'", ")", ".", "value", "\n", "rgb_pcaVariance", "=", "np", ".", "reshape", "(", "rgb_pcaVariance", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "rgb_pcaVariance_np", "=", "np", ".", "square", "(", "rgb_pcaVariance", ")", "\n", "\n", "self", ".", "rgb3d_mean_np", "=", "np", ".", "reshape", "(", "self", ".", "rgb_mean_np", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "\n", "uv", "=", "self", ".", "hdf5io_rgb_model", ".", "GetValue", "(", "'uv'", ")", ".", "value", "\n", "self", ".", "uv_np", "=", "np", ".", "reshape", "(", "uv", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "\n", "if", "0", ":", "\n", "            ", "import", "cv2", "\n", "texMU_fore_point", "=", "self", ".", "rgb3d_mean_np", "\n", "image", "=", "np", ".", "zeros", "(", "shape", "=", "[", "224", ",", "224", ",", "3", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "texMU_fore_point", ")", ")", ":", "\n", "                ", "color", "=", "texMU_fore_point", "[", "i", "]", "*", "255.0", "\n", "uv", "=", "self", ".", "uv_np", "[", "i", "]", "\n", "u", "=", "int", "(", "uv", "[", "0", "]", "*", "223", ")", "\n", "v", "=", "int", "(", "(", "1", "-", "uv", "[", "1", "]", ")", "*", "223", ")", "\n", "image", "[", "v", ",", "u", ",", ":", "]", "=", "color", "\n", "", "image", "=", "np", ".", "asarray", "(", "image", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "cv2", ".", "imshow", "(", "\"Image Debug\"", ",", "image", ")", "\n", "k", "=", "cv2", ".", "waitKey", "(", "0", ")", "&", "0xFF", "\n", "if", "k", "==", "27", ":", "\n", "                ", "cv2", ".", "destroyAllWindows", "(", ")", "\n", "\n", "", "", "list_uvImageIndex", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "rgb3d_mean_np", ")", ")", ":", "\n", "            ", "uv", "=", "self", ".", "uv_np", "[", "i", "]", "\n", "u", "=", "int", "(", "uv", "[", "0", "]", "*", "224", ")", "-", "1", "\n", "v", "=", "int", "(", "(", "1", "-", "uv", "[", "1", "]", ")", "*", "224", ")", "-", "1", "\n", "if", "u", "<", "0", ":", "\n", "                ", "u", "=", "0", "\n", "", "if", "v", "<", "0", ":", "\n", "                ", "v", "=", "0", "\n", "\n", "", "idx", "=", "v", "*", "224", "+", "u", "\n", "list_uvImageIndex", ".", "append", "(", "idx", ")", "\n", "", "self", ".", "uvIdx_np", "=", "np", ".", "array", "(", "list_uvImageIndex", ")", "\n", "\n", "\"\"\"\n        Expression\n        Origin Unit of measurement is micron\n        We convert to mm\n        pcaVar is eignvalue rather Var\n        \"\"\"", "\n", "hdf5io_exp", "=", "HDF5IO", "(", "self", ".", "path_gpmm", ",", "self", ".", "hdf5io", ".", "handler_file", "[", "'expression'", "+", "name", "]", ")", "\n", "self", ".", "hdf5io_exp_model", "=", "HDF5IO", "(", "self", ".", "path_gpmm", ",", "hdf5io_exp", ".", "handler_file", "[", "'model'", "]", ")", "\n", "\n", "# self.exp_mean = self.hdf5io_exp_model.GetValue('mean').value", "\n", "exp_pcaBasis", "=", "self", ".", "hdf5io_exp_model", ".", "GetValue", "(", "'pcaBasis'", ")", ".", "value", "\n", "self", ".", "exp_pcaBasis_np", "=", "exp_pcaBasis", "/", "CVRT_MICRON_MM", "\n", "\n", "exp_pcaVariance", "=", "self", ".", "hdf5io_exp_model", ".", "GetValue", "(", "'pcaVariance'", ")", ".", "value", "\n", "exp_pcaVariance", "=", "np", ".", "reshape", "(", "exp_pcaVariance", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "exp_pcaVariance_np", "=", "np", ".", "square", "(", "exp_pcaVariance", ")", "\n", "# self.exp3d_mean_np = np.reshape(self.exp_mean, [-1, 3])", "\n", "\n", "\"\"\"\n        Tri\n        Index from 1\n        \"\"\"", "\n", "mesh_tri_reference", "=", "self", ".", "hdf5io_pt_representer", ".", "GetValue", "(", "'tri'", ")", ".", "value", "\n", "mesh_tri_reference", "=", "mesh_tri_reference", "-", "1", "\n", "self", ".", "mesh_tri_np", "=", "np", ".", "reshape", "(", "mesh_tri_reference", ".", "astype", "(", "np", ".", "int32", ")", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "\n", "# Here depend on how to generate", "\n", "# Here depend on how to generate", "\n", "# Here depend on how to generate", "\n", "if", "'idx_sub'", "in", "self", ".", "hdf5io_pt_representer", ".", "GetMainKeys", "(", ")", ":", "\n", "            ", "idx_subTopo", "=", "self", ".", "hdf5io_pt_representer", ".", "GetValue", "(", "'idx_sub'", ")", ".", "value", "\n", "idx_subTopo", "=", "idx_subTopo", "# Here depend on how to generate", "\n", "self", ".", "idx_subTopo_np", "=", "np", ".", "reshape", "(", "idx_subTopo", ".", "astype", "(", "np", ".", "int32", ")", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "idx_subTopo", "=", "tf", ".", "constant", "(", "self", ".", "idx_subTopo_np", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "", "self", ".", "nplist_v_ring_f_flat_np", "=", "self", ".", "hdf5io_pt_representer", ".", "GetValue", "(", "'vertex_ring_face_flat'", ")", ".", "value", "\n", "# used in tensor", "\n", "self", ".", "nplist_ver_ref_face_num", "=", "self", ".", "hdf5io_pt_representer", ".", "GetValue", "(", "'vertex_ring_face_num'", ")", ".", "value", "\n", "self", ".", "nplist_v_ring_f", ",", "self", ".", "nplist_v_ring_f_index", "=", "self", ".", "_get_v_ring_f", "(", "self", ".", "nplist_v_ring_f_flat_np", ",", "self", ".", "nplist_ver_ref_face_num", ")", "\n", "\"\"\"\n        lm idx\n        \"\"\"", "\n", "if", "'idx_lm68'", "in", "self", ".", "hdf5io_pt_representer", ".", "GetMainKeys", "(", ")", ":", "\n", "            ", "idx_lm68_np", "=", "self", ".", "hdf5io_pt_representer", ".", "GetValue", "(", "'idx_lm68'", ")", ".", "value", "\n", "idx_lm68_np", "=", "np", ".", "reshape", "(", "idx_lm68_np", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "idx_lm68_np", "=", "idx_lm68_np", ".", "astype", "(", "dtype", "=", "np", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo._generate_tensor": [[171, 224], ["max", "len", "np.array", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "bfm09_tf_uv.BFM_singleTopo._generate_tensor.trp"], "methods", ["None"], ["", "", "def", "_generate_tensor", "(", "self", ",", "mode_light", "=", "False", ")", ":", "\n", "        ", "rank", "=", "self", ".", "rank", "\n", "gpmm_exp_rank", "=", "self", ".", "gpmm_exp_rank", "\n", "if", "mode_light", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n            Vertex\n            \"\"\"", "\n", "self", ".", "pt_mean", "=", "tf", ".", "constant", "(", "self", ".", "pt_mean_np", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "pt_pcaBasis", "=", "tf", ".", "constant", "(", "self", ".", "pt_pcaBasis_np", "[", ":", ",", ":", "rank", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "pt_pcaVariance", "=", "tf", ".", "constant", "(", "self", ".", "pt_pcaVariance_np", "[", ":", "rank", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "\"\"\"\n            Vertex color\n            \"\"\"", "\n", "self", ".", "rgb_mean", "=", "tf", ".", "constant", "(", "self", ".", "rgb_mean_np", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "rgb_pcaBasis", "=", "tf", ".", "constant", "(", "self", ".", "rgb_pcaBasis_np", "[", ":", ",", ":", "rank", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "rgb_pcaVariance", "=", "tf", ".", "constant", "(", "self", ".", "rgb_pcaVariance_np", "[", ":", "rank", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "uv", "=", "tf", ".", "constant", "(", "self", ".", "uv_np", "[", ":", "rank", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "\"\"\"\n            Expression\n            \"\"\"", "\n", "self", ".", "exp_pcaBasis", "=", "tf", ".", "constant", "(", "self", ".", "exp_pcaBasis_np", "[", ":", ",", ":", "gpmm_exp_rank", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "exp_pcaVariance", "=", "tf", ".", "constant", "(", "self", ".", "exp_pcaVariance_np", "[", ":", "gpmm_exp_rank", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "\"\"\"\n        Generate normal presplit\n        \"\"\"", "\n", "self", ".", "nplist_v_ring_f_flat", "=", "[", "item", "for", "sublist", "in", "self", ".", "nplist_v_ring_f", "for", "item", "in", "sublist", "]", "\n", "\n", "max_padding", "=", "max", "(", "self", ".", "nplist_v_ring_f", ",", "key", "=", "len", ")", "\n", "max_padding", "=", "len", "(", "max_padding", ")", "\n", "self", ".", "nplist_v_ring_f_index_pad", "=", "[", "]", "\n", "for", "sublist", "in", "self", ".", "nplist_v_ring_f", ":", "\n", "            ", "def", "trp", "(", "l", ",", "n", ")", ":", "\n", "                ", "return", "np", ".", "concatenate", "(", "[", "l", "[", ":", "n", "]", ",", "[", "l", "[", "-", "1", "]", "]", "*", "(", "n", "-", "len", "(", "l", ")", ")", "]", ")", "\n", "", "sublist_pad", "=", "trp", "(", "sublist", ",", "max_padding", ")", "\n", "self", ".", "nplist_v_ring_f_index_pad", ".", "append", "(", "sublist_pad", ")", "\n", "", "self", ".", "nplist_v_ring_f_index_pad", "=", "np", ".", "array", "(", "self", ".", "nplist_v_ring_f_index_pad", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "nplist_v_ring_f_index_flat", "=", "[", "item", "for", "sublist", "in", "self", ".", "nplist_v_ring_f_index", "for", "item", "in", "sublist", "]", "\n", "\n", "self", ".", "mesh_vertex_refer_face", "=", "tf", ".", "constant", "(", "self", ".", "nplist_v_ring_f_flat", ",", "dtype", "=", "tf", ".", "int32", ")", "# vertex_num*[2/3...8]", "\n", "self", ".", "mesh_vertex_refer_face_pad", "=", "tf", ".", "constant", "(", "self", ".", "nplist_v_ring_f_index_pad", ",", "dtype", "=", "tf", ".", "int32", ")", "# vertex_num, max_padding", "\n", "self", ".", "mesh_vertex_refer_face_index", "=", "tf", ".", "constant", "(", "self", ".", "nplist_v_ring_f_index_flat", ",", "dtype", "=", "tf", ".", "int32", ")", "# vertex_num*[2/3...8]", "\n", "self", ".", "mesh_vertex_refer_face_num", "=", "tf", ".", "constant", "(", "self", ".", "nplist_ver_ref_face_num", ",", "dtype", "=", "tf", ".", "float32", ")", "# vertex_num", "\n", "\n", "# tri", "\n", "self", ".", "mesh_tri", "=", "tf", ".", "constant", "(", "self", ".", "mesh_tri_np", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "# uv", "\n", "self", ".", "uvIdx", "=", "tf", ".", "constant", "(", "self", ".", "uvIdx_np", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo._get_v_ring_f": [[225, 237], ["range", "len", "list_v_ring_f.append", "list_v_ring_f_index.append", "np.array", "np.array", "np.zeros", "len"], "methods", ["None"], ["", "def", "_get_v_ring_f", "(", "self", ",", "v_ring_f_flat", ",", "v_ring_f_num", ")", ":", "\n", "        ", "list_v_ring_f", "=", "[", "]", "\n", "list_v_ring_f_index", "=", "[", "]", "\n", "idx_start", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "v_ring_f_num", ")", ")", ":", "\n", "            ", "vf_num", "=", "v_ring_f_num", "[", "i", "]", "\n", "v_ring_f", "=", "v_ring_f_flat", "[", "idx_start", ":", "idx_start", "+", "vf_num", "]", "\n", "list_v_ring_f", ".", "append", "(", "v_ring_f", ")", "\n", "v_ring_f_index", "=", "np", ".", "zeros", "(", "[", "len", "(", "v_ring_f", ")", "]", ",", "dtype", "=", "np", ".", "int32", ")", "+", "i", "\n", "list_v_ring_f_index", ".", "append", "(", "v_ring_f_index", ")", "\n", "idx_start", "=", "idx_start", "+", "vf_num", "\n", "", "return", "np", ".", "array", "(", "list_v_ring_f", ")", ",", "np", ".", "array", "(", "list_v_ring_f_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo.instance": [[238, 274], ["tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.sqrt", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "instance", "(", "self", ",", "coeff_batch", ",", "coeff_exp_batch", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param coeff_batch: shape=[bs, 80]\n        :param coeff_exp_batch: shape=[bs, 64]\n        :return:\n        \"\"\"", "\n", "\n", "\"\"\"\n        Vertex\n        \"\"\"", "\n", "coeff_var_batch", "=", "coeff_batch", "*", "tf", ".", "sqrt", "(", "self", ".", "pt_pcaVariance", ")", "\n", "coeff_var_batch", "=", "tf", ".", "transpose", "(", "coeff_var_batch", ")", "\n", "#coeff_var_batch = tf.expand_dims(coeff_var_batch, -1)", "\n", "\n", "mesh_diff", "=", "tf", ".", "matmul", "(", "self", ".", "pt_pcaBasis", ",", "coeff_var_batch", ")", "\n", "#mesh_diff = tf.squeeze(mesh_diff, axis=-1)", "\n", "mesh_diff", "=", "tf", ".", "transpose", "(", "mesh_diff", ")", "# shape=[bs, 80]", "\n", "\n", "\"\"\"\n        Exp\n        \"\"\"", "\n", "if", "coeff_exp_batch", "is", "not", "None", ":", "\n", "            ", "coeff_var_batch", "=", "coeff_exp_batch", "*", "tf", ".", "sqrt", "(", "self", ".", "exp_pcaVariance", ")", "\n", "coeff_var_batch", "=", "tf", ".", "transpose", "(", "coeff_var_batch", ")", "\n", "#coeff_var_batch = tf.expand_dims(coeff_var_batch, -1)", "\n", "\n", "exp_diff", "=", "tf", ".", "matmul", "(", "self", ".", "exp_pcaBasis", ",", "coeff_var_batch", ")", "\n", "#exp_diff = tf.squeeze(exp_diff, axis=-1)", "\n", "exp_diff", "=", "tf", ".", "transpose", "(", "exp_diff", ")", "\n", "\n", "mesh", "=", "self", ".", "pt_mean", "+", "mesh_diff", "+", "exp_diff", "\n", "", "else", ":", "\n", "            ", "mesh", "=", "self", ".", "pt_mean", "+", "mesh_diff", "\n", "\n", "", "mesh", "=", "tf", ".", "reshape", "(", "mesh", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "3", "]", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo.instance_color": [[275, 294], ["tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.clip_by_value", "tensorflow.reshape", "tensorflow.sqrt"], "methods", ["None"], ["", "def", "instance_color", "(", "self", ",", "coeff_batch", ")", ":", "\n", "\n", "        ", "coeff_var_batch", "=", "coeff_batch", "*", "tf", ".", "sqrt", "(", "self", ".", "rgb_pcaVariance", ")", "\n", "coeff_var_batch", "=", "tf", ".", "transpose", "(", "coeff_var_batch", ")", "\n", "\n", "#coeff_var_batch = tf.Print(coeff_var_batch, [coeff_batch, coeff_var_batch], summarize=256, message='instance_color')", "\n", "#coeff_var_batch = tf.expand_dims(coeff_var_batch, -1)", "\n", "\n", "mesh_diff", "=", "tf", ".", "matmul", "(", "self", ".", "rgb_pcaBasis", ",", "coeff_var_batch", ")", "\n", "mesh_diff", "=", "tf", ".", "transpose", "(", "mesh_diff", ")", "# shape=[bs, 80]", "\n", "#mesh_diff = tf.squeeze(mesh_diff, axis=-1)", "\n", "\n", "mesh", "=", "self", ".", "rgb_mean", "+", "mesh_diff", "\n", "#mesh = tf.Print(mesh, [self.rgb_mean[:10], mesh_diff[:10]], summarize=256, message='mesh_color')", "\n", "\n", "mesh", "=", "tf", ".", "clip_by_value", "(", "mesh", ",", "0.0", ",", "1.0", ")", "\n", "\n", "mesh", "=", "tf", ".", "reshape", "(", "mesh", ",", "[", "self", ".", "batch_size", ",", "-", "1", ",", "3", "]", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_singleTopo.get_mesh_mean": [[296, 307], ["bfm09_tf_uv.BFM_singleTopo.pt_mean_np.reshape", "bfm09_tf_uv.BFM_singleTopo.rgb_mean_np.reshape", "trimesh.Trimesh"], "methods", ["None"], ["", "def", "get_mesh_mean", "(", "self", ")", ":", "\n", "        ", "pt_mean_3d", "=", "self", ".", "pt_mean_np", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "rgb_mean_3d", "=", "self", ".", "rgb_mean_np", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "mesh_mean", "=", "trimesh", ".", "Trimesh", "(", "\n", "pt_mean_3d", ",", "\n", "self", ".", "mesh_tri_np", ",", "\n", "vertex_colors", "=", "rgb_mean_3d", ",", "\n", "process", "=", "False", "\n", ")", "\n", "return", "mesh_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.__init__": [[311, 337], ["bfm09_tf_uv.BFM_TF._get_origin_model", "bfm09_tf_uv.BFM_TF._get_fore_model", "tensorflow.constant", "bfm09_tf_uv.BFM_TF._get_full_model"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF._get_origin_model", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF._get_fore_model", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF._get_full_model"], ["    ", "def", "__init__", "(", "self", ",", "path_gpmm", ",", "rank", "=", "80", ",", "gpmm_exp_rank", "=", "64", ",", "batch_size", "=", "1", ",", "full", "=", "False", ")", ":", "\n", "\n", "# 0. Read HDF5 IO", "\n", "        ", "self", ".", "path_gpmm", "=", "path_gpmm", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "gpmm_exp_rank", "=", "gpmm_exp_rank", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "\"\"\"\n        Read origin model, np only\n        \"\"\"", "\n", "self", ".", "h_curr", "=", "self", ".", "_get_origin_model", "(", ")", "\n", "if", "full", ":", "\n", "            ", "self", ".", "h_full", "=", "self", ".", "_get_full_model", "(", ")", "\n", "", "self", ".", "h_fore", "=", "self", ".", "_get_fore_model", "(", ")", "\n", "\n", "\"\"\"\n        Tri\n        \"\"\"", "\n", "# self.mesh_idx_fore = tf.constant(self.mesh_idx_fore_np, dtype=tf.int32) # 27660", "\n", "# self.mesh_tri_reference_fore = tf.constant(self.mesh_tri_reference_fore_np, dtype=tf.int32) # 54681, 3", "\n", "\n", "\"\"\"\n        LM\n        \"\"\"", "\n", "self", ".", "idx_lm68", "=", "tf", ".", "constant", "(", "self", ".", "h_curr", ".", "idx_lm68_np", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF._get_origin_model": [[338, 340], ["bfm09_tf_uv.BFM_singleTopo"], "methods", ["None"], ["", "def", "_get_origin_model", "(", "self", ")", ":", "\n", "        ", "return", "BFM_singleTopo", "(", "self", ".", "path_gpmm", ",", "name", "=", "''", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF._get_full_model": [[341, 343], ["bfm09_tf_uv.BFM_singleTopo"], "methods", ["None"], ["", "def", "_get_full_model", "(", "self", ")", ":", "\n", "        ", "return", "BFM_singleTopo", "(", "self", ".", "path_gpmm", ",", "name", "=", "'_full'", ",", "batch_size", "=", "self", ".", "batch_size", ",", "mode_light", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF._get_fore_model": [[344, 346], ["bfm09_tf_uv.BFM_singleTopo"], "methods", ["None"], ["", "def", "_get_fore_model", "(", "self", ")", ":", "\n", "        ", "return", "BFM_singleTopo", "(", "self", ".", "path_gpmm", ",", "name", "=", "'_fore'", ",", "batch_size", "=", "self", ".", "batch_size", ",", "mode_light", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance": [[347, 349], ["bfm09_tf_uv.BFM_TF.h_curr.instance"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance"], ["", "def", "instance", "(", "self", ",", "coeff_batch", ",", "coeff_exp_batch", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "h_curr", ".", "instance", "(", "coeff_batch", ",", "coeff_exp_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_color": [[350, 352], ["bfm09_tf_uv.BFM_TF.h_curr.instance_color"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_color"], ["", "def", "instance_color", "(", "self", ",", "coeff_batch", ")", ":", "\n", "        ", "return", "self", ".", "h_curr", ".", "instance_color", "(", "coeff_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_full": [[353, 355], ["bfm09_tf_uv.BFM_TF.h_full.instance"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance"], ["", "def", "instance_full", "(", "self", ",", "coeff_batch", ",", "coeff_exp_batch", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "h_full", ".", "instance", "(", "coeff_batch", ",", "coeff_exp_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_color_full": [[356, 358], ["bfm09_tf_uv.BFM_TF.h_full.instance_color"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_color"], ["", "def", "instance_color_full", "(", "self", ",", "coeff_batch", ")", ":", "\n", "        ", "return", "self", ".", "h_full", ".", "instance_color", "(", "coeff_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_lm3d_instance_vertex": [[359, 362], ["tensorflow.gather"], "methods", ["None"], ["", "def", "get_lm3d_instance_vertex", "(", "self", ",", "lm_idx", ",", "points_tensor_batch", ")", ":", "\n", "        ", "lm3d_batch", "=", "tf", ".", "gather", "(", "points_tensor_batch", ",", "lm_idx", ",", "axis", "=", "1", ")", "\n", "return", "lm3d_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_lm3d_mean": [[363, 367], ["tensorflow.reshape", "tensorflow.gather"], "methods", ["None"], ["", "def", "get_lm3d_mean", "(", "self", ")", ":", "\n", "        ", "pt_mean", "=", "tf", ".", "reshape", "(", "self", ".", "pt_mean", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "lm3d_mean", "=", "tf", ".", "gather", "(", "pt_mean", ",", "self", ".", "idx_lm68", ")", "\n", "return", "lm3d_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_mesh_mean": [[369, 378], ["bfm09_tf_uv.BFM_TF.h_curr.get_mesh_mean", "bfm09_tf_uv.BFM_TF.h_fore.get_mesh_mean", "bfm09_tf_uv.BFM_TF.h_full.get_mesh_mean"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_mesh_mean", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_mesh_mean", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_mesh_mean"], ["", "def", "get_mesh_mean", "(", "self", ",", "mode_str", ")", ":", "\n", "        ", "if", "mode_str", "==", "'curr'", ":", "\n", "            ", "return", "self", ".", "h_curr", ".", "get_mesh_mean", "(", ")", "\n", "", "elif", "mode_str", "==", "'fore'", ":", "\n", "            ", "return", "self", ".", "h_fore", ".", "get_mesh_mean", "(", ")", "\n", "", "elif", "mode_str", "==", "'full'", ":", "\n", "            ", "return", "self", ".", "h_full", ".", "get_mesh_mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_mesh_fore_mean": [[379, 390], ["bfm09_tf_uv.BFM_TF.pt_mean_np.reshape", "bfm09_tf_uv.BFM_TF.rgb_mean_np.reshape", "trimesh.Trimesh"], "methods", ["None"], ["", "", "def", "get_mesh_fore_mean", "(", "self", ")", ":", "\n", "        ", "pt_mean_3d", "=", "self", ".", "pt_mean_np", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "rgb_mean_3d", "=", "self", ".", "rgb_mean_np", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "mesh_mean", "=", "trimesh", ".", "Trimesh", "(", "\n", "pt_mean_3d", "[", "self", ".", "mesh_idx_fore_np", "]", ",", "\n", "self", ".", "mesh_tri_reference_fore_np", ",", "\n", "vertex_colors", "=", "rgb_mean_3d", "[", "self", ".", "mesh_idx_fore_np", "]", ",", "\n", "process", "=", "False", "\n", ")", "\n", "return", "mesh_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_lm3d": [[391, 397], ["None"], "methods", ["None"], ["", "def", "get_lm3d", "(", "self", ",", "vertices", ",", "idx_lm68_np", "=", "None", ")", ":", "\n", "        ", "if", "idx_lm68_np", "is", "None", ":", "\n", "            ", "idx_lm", "=", "self", ".", "idx_lm68_np", "\n", "", "else", ":", "\n", "            ", "idx_lm", "=", "idx_lm68_np", "\n", "", "return", "vertices", "[", "idx_lm", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_random_vertex_color_batch": [[398, 435], ["range", "tensorflow.stack", "tensorflow.stack", "bfm09_tf_uv.BFM_TF.instance", "range", "tensorflow.stack", "bfm09_tf_uv.BFM_TF.instance_color", "tensorflow.random.normal", "tensorflow.stack.append", "tensorflow.random.normal", "tensorflow.stack.append", "tensorflow.random.normal", "tensorflow.stack.append", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.sqrt"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_color"], ["", "def", "get_random_vertex_color_batch", "(", "self", ")", ":", "\n", "        ", "coeff_shape_batch", "=", "[", "]", "\n", "coeff_exp_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "coeff_shape", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "[", "self", ".", "rank", "]", ",", "mean", "=", "0", ",", "stddev", "=", "tf", ".", "sqrt", "(", "3.0", ")", ")", "\n", "coeff_shape_batch", ".", "append", "(", "coeff_shape", ")", "\n", "exp_shape", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "[", "self", ".", "gpmm_exp_rank", "]", ",", "mean", "=", "0", ",", "stddev", "=", "tf", ".", "sqrt", "(", "3.0", ")", ")", "\n", "coeff_exp_batch", ".", "append", "(", "exp_shape", ")", "\n", "", "coeff_shape_batch", "=", "tf", ".", "stack", "(", "coeff_shape_batch", ")", "\n", "coeff_exp_batch", "=", "tf", ".", "stack", "(", "coeff_exp_batch", ")", "\n", "points_tensor_batch", "=", "self", ".", "instance", "(", "coeff_shape_batch", ",", "coeff_exp_batch", ")", "\n", "\n", "coeff_color_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "coeff_color", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "[", "self", ".", "rank", "]", ",", "mean", "=", "0", ",", "stddev", "=", "tf", ".", "sqrt", "(", "3.0", ")", ")", "\n", "coeff_color_batch", ".", "append", "(", "coeff_color", ")", "\n", "", "coeff_color_batch", "=", "tf", ".", "stack", "(", "coeff_color_batch", ")", "\n", "points_color_tensor_batch", "=", "self", ".", "instance_color", "(", "coeff_color_batch", ")", "\n", "\n", "# mesh_tri_shape_list = []", "\n", "# for i in range(batch):", "\n", "#     points_np = points_tensor_batch[i]", "\n", "#     tri_np = tf.transpose(self.mesh_tri_reference)", "\n", "#     points_color_np = tf.uint8(points_color_tensor_batch[i]*255)", "\n", "#", "\n", "#", "\n", "#     mesh_tri_shape = trimesh.Trimesh(", "\n", "#         points_np,", "\n", "#         tri_np,", "\n", "#         vertex_colors=points_color_np,", "\n", "#         process=False", "\n", "#     )", "\n", "#     #mesh_tri_shape.show()", "\n", "#     #mesh_tri_shape.export(\"/home/jx.ply\")", "\n", "#     mesh_tri_shape_list.append(mesh_tri_shape)", "\n", "\n", "return", "points_tensor_batch", ",", "points_color_tensor_batch", ",", "coeff_shape_batch", ",", "coeff_color_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.trimesh_util.vertex_y_max": [[9, 14], ["numpy.array", "list", "list.index", "max"], "function", ["None"], ["def", "vertex_y_max", "(", "trimesh", ")", ":", "\n", "    ", "vertex", "=", "np", ".", "array", "(", "trimesh", ".", "vertices", ")", "\n", "vertex_y", "=", "list", "(", "vertex", "[", ":", ",", "1", "]", ")", "\n", "y_idx", "=", "vertex_y", ".", "index", "(", "max", "(", "vertex_y", ")", ")", "\n", "return", "vertex", "[", "y_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.trimesh_util.vertex_y_min": [[15, 20], ["numpy.array", "list", "list.index", "min"], "function", ["None"], ["", "def", "vertex_y_min", "(", "trimesh", ")", ":", "\n", "    ", "vertex", "=", "np", ".", "array", "(", "trimesh", ".", "vertices", ")", "\n", "vertex_y", "=", "list", "(", "vertex", "[", ":", ",", "1", "]", ")", "\n", "y_idx", "=", "vertex_y", ".", "index", "(", "min", "(", "vertex_y", ")", ")", "\n", "return", "vertex", "[", "y_idx", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.trimesh_render.Render_Trimesh_feed": [[22, 83], ["tfmatchd.face.common.format_helper.batch_size_extract", "tensorflow.constant", "tensorflow.tile", "tensorflow.constant", "tensorflow.tile", "tfmatchd.face.geometry.render.api_tf_mesh_render.mesh_renderer_camera", "tensorflow.clip_by_value", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.batch_size_extract", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera"], ["def", "Render_Trimesh_feed", "(", "vertices", ",", "triangles", ",", "normals", ",", "diffuse_colors", ",", "\n", "mtx_cam", ",", "mtx_perspect_frustrum", ",", "cam_position", ",", "image_width", ",", "image_height", ")", ":", "\n", "    ", "\"\"\"\n    :param trimesh:\n    :param mtx_cam:\n    :param mtx_perspect_frustrum:\n    :param cam_position:\n    :param image_width:\n    :param image_height:\n    :return:\n        A 4-D float32 tensor of shape [batch_size, image_height, image_width, 4]\n        containing the lit RGBA color values for each image at each pixel. RGB\n        colors are the intensity values before tonemapping and can be in the range\n        [0, infinity]. Clipping to the range [0,1] with tf_render.clip_by_value is likely\n        reasonable for both viewing and training most scenes. More complex scenes\n        with multiple lights should tone map color values for display only. One\n        simple tonemapping approach is to rescale color values as x/(1+x); gamma\n        compression is another common techinque. Alpha values are zero for\n        background pixels and near one for mesh pixels.\n    \"\"\"", "\n", "batch_size", "=", "batch_size_extract", "(", "vertices", ",", "normals", ",", "diffuse_colors", ",", "\n", "mtx_cam", ",", "mtx_perspect_frustrum", ",", "cam_position", ")", "\n", "\n", "light_positions", "=", "tf", ".", "constant", "(", "[", "[", "0.0", ",", "0.0", ",", "1000.0", ",", "-", "1000.0", ",", "0.0", ",", "1000.0", ",", "1000.0", ",", "0.0", ",", "1000.0", "]", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "light_positions", "=", "tf", ".", "tile", "(", "light_positions", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "light_intensities", "=", "tf", ".", "constant", "(", "[", "[", "0.50", ",", "0.50", ",", "0.50", "]", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "light_intensities", "=", "tf", ".", "tile", "(", "light_intensities", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "# light_positions = tf.constant([[0.0, 0.0, 2000.0]], shape=[1, 1, 3])", "\n", "# light_intensities = tf.constant([[0.5, 0.5, 0.5]], shape=[1, 1, 3])", "\n", "#light_intensities = tf.constant([[1.0, 1.0, 1.0]], shape=[1, 1, 3])", "\n", "#ambient_color = tf.constant([[1.0, 1.0, 1.0]])", "\n", "# Batch", "\n", "\n", "#print(batch_size, image_width, image_height)", "\n", "\n", "if", "vertices", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "        ", "vertices", "=", "tf", ".", "tile", "(", "vertices", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "normals", "=", "tf", ".", "tile", "(", "normals", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "diffuse_colors", "=", "tf", ".", "tile", "(", "diffuse_colors", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "if", "mtx_perspect_frustrum", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "        ", "mtx_perspect_frustrum", "=", "tf", ".", "tile", "(", "mtx_perspect_frustrum", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "# if ambient_color.shape[0] != batch_size:", "\n", "#     ambient_color = tf.tile(ambient_color, [batch_size, 1])", "\n", "\n", "", "renders", ",", "pixel_mask", "=", "mesh_renderer_camera", "(", "\n", "vertices", ",", "triangles", ",", "normals", ",", "diffuse_colors", ",", "\n", "mtx_cam", ",", "mtx_perspect_frustrum", ",", "cam_position", ",", "\n", "light_positions", ",", "light_intensities", ",", "image_width", ",", "image_height", "#, ambient_color=ambient_color", "\n", ")", "\n", "renders", "=", "tf", ".", "clip_by_value", "(", "renders", ",", "0.0", ",", "1.0", ")", "\n", "# tonemapped_renders = tf.concat(", "\n", "#     [", "\n", "#         tone_mapper(renders[:, :, :, 0:3], 0.7),", "\n", "#         renders[:, :, :, 3:4]", "\n", "#     ],", "\n", "#     axis=3)", "\n", "# return tonemapped_renders", "\n", "return", "renders", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.trimesh_render.RenderDepthmap_Trimesh_feed": [[84, 127], ["tfmatchd.face.common.format_helper.batch_size_extract", "tfmatchd.face.geometry.render.api_tf_mesh_render.mesh_depthmap_camera", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.tile"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.batch_size_extract", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_depthmap_camera"], ["", "def", "RenderDepthmap_Trimesh_feed", "(", "vertices", ",", "triangles", ",", "mtx_ext", ",", "mtx_cam", ",", "mtx_perspect_frustrum", ",", "\n", "image_width", ",", "image_height", ")", ":", "\n", "    ", "\"\"\"\n    :param trimesh:\n    :param mtx_cam:\n    :param mtx_perspect_frustrum:\n    :param cam_position:\n    :param image_width:\n    :param image_height:\n    :return:\n        A 4-D float32 tensor of shape [batch_size, image_height, image_width, 4]\n        containing the lit RGBA color values for each image at each pixel. RGB\n        colors are the intensity values before tonemapping and can be in the range\n        [0, infinity]. Clipping to the range [0,1] with tf_render.clip_by_value is likely\n        reasonable for both viewing and training most scenes. More complex scenes\n        with multiple lights should tone map color values for display only. One\n        simple tonemapping approach is to rescale color values as x/(1+x); gamma\n        compression is another common techinque. Alpha values are zero for\n        background pixels and near one for mesh pixels.\n    \"\"\"", "\n", "# Batch", "\n", "batch_size", "=", "batch_size_extract", "(", "vertices", ",", "mtx_cam", ",", "mtx_perspect_frustrum", ")", "\n", "#print(batch_size, image_width, image_height)", "\n", "\n", "if", "vertices", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "        ", "vertices", "=", "tf", ".", "tile", "(", "vertices", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "if", "mtx_perspect_frustrum", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "        ", "mtx_perspect_frustrum", "=", "tf", ".", "tile", "(", "mtx_perspect_frustrum", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "renders", ",", "pixel_mask", "=", "mesh_depthmap_camera", "(", "\n", "vertices", ",", "triangles", ",", "mtx_ext", ",", "mtx_cam", ",", "mtx_perspect_frustrum", ",", "image_width", ",", "image_height", "\n", ")", "\n", "renders", "=", "tf", ".", "expand_dims", "(", "renders", ",", "-", "1", ")", "# * pixel_mask", "\n", "#renders = tf.clip_by_value(renders, 0.0, 100000.0)", "\n", "# tonemapped_renders = tf.concat(", "\n", "#     [", "\n", "#         tone_mapper(renders[:, :, :, 0:3], 0.7),", "\n", "#         renders[:, :, :, 3:4]", "\n", "#     ],", "\n", "#     axis=3)", "\n", "# return tonemapped_renders", "\n", "return", "renders", ",", "pixel_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.trimesh_render.Render_Trimesh": [[129, 191], ["tensorflow.constant", "tensorflow.reshape", "tensorflow.constant", "tensorflow.reshape", "tensorflow.constant", "tensorflow.reshape", "tensorflow.constant", "tensorflow.reshape", "tfmatchd.face.common.format_helper.batch_size_extract", "tfmatchd.face.geometry.render.api_tf_mesh_render.mesh_renderer_camera", "tensorflow.concat", "numpy.array", "numpy.array", "numpy.array", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "numpy.array", "tf_mesh_renderer.mesh_renderer.mesh_renderer.tone_mapper"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.batch_size_extract", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera"], ["", "def", "Render_Trimesh", "(", "trimesh", ",", "mtx_cam", ",", "mtx_perspect_frustrum", ",", "cam_position", ",", "\n", "light_positions", ",", "light_intensities", ",", "image_width", ",", "image_height", ",", "ambient_color", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n\n    :param trimesh:\n    :param mtx_cam:\n    :param mtx_perspect_frustrum:\n    :param cam_position:\n    :param light_positions:\n    :param light_intensities:\n    :param image_width:\n    :param image_height:\n    :param ambient_color:\n    :return:\n        A 4-D float32 tensor of shape [batch_size, image_height, image_width, 4]\n        containing the lit RGBA color values for each image at each pixel. RGB\n        colors are the intensity values before tonemapping and can be in the range\n        [0, infinity]. Clipping to the range [0,1] with tf_render.clip_by_value is likely\n        reasonable for both viewing and training most scenes. More complex scenes\n        with multiple lights should tone map color values for display only. One\n        simple tonemapping approach is to rescale color values as x/(1+x); gamma\n        compression is another common techinque. Alpha values are zero for\n        background pixels and near one for mesh pixels.\n    \"\"\"", "\n", "vertices", "=", "tf", ".", "constant", "(", "np", ".", "array", "(", "trimesh", ".", "vertices", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "vertices", "=", "tf", ".", "reshape", "(", "vertices", ",", "[", "1", ",", "-", "1", ",", "3", "]", ")", "\n", "triangles", "=", "tf", ".", "constant", "(", "np", ".", "array", "(", "trimesh", ".", "faces", ")", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "triangles", "=", "tf", ".", "reshape", "(", "triangles", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "#normals = tf_render.nn.l2_normalize(vertices, dim=2)", "\n", "normals", "=", "tf", ".", "constant", "(", "np", ".", "array", "(", "trimesh", ".", "vertex_normals", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "normals", "=", "tf", ".", "reshape", "(", "normals", ",", "[", "1", ",", "-", "1", ",", "3", "]", ")", "\n", "diffuse_colors", "=", "tf", ".", "constant", "(", "np", ".", "array", "(", "trimesh", ".", "visual", ".", "vertex_colors", "[", ":", ",", "0", ":", "3", "]", ")", "/", "255.0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "diffuse_colors", "=", "tf", ".", "reshape", "(", "diffuse_colors", ",", "[", "1", ",", "-", "1", ",", "3", "]", ")", "\n", "\n", "# Batch", "\n", "batch_size", "=", "batch_size_extract", "(", "vertices", ",", "normals", ",", "diffuse_colors", ",", "\n", "mtx_cam", ",", "mtx_perspect_frustrum", ",", "cam_position", ",", "\n", "light_positions", ",", "light_intensities", ")", "\n", "\n", "if", "vertices", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "        ", "vertices", "=", "tf", ".", "tile", "(", "vertices", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "normals", "=", "tf", ".", "tile", "(", "normals", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "diffuse_colors", "=", "tf", ".", "tile", "(", "diffuse_colors", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "if", "mtx_perspect_frustrum", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "        ", "mtx_perspect_frustrum", "=", "tf", ".", "tile", "(", "mtx_perspect_frustrum", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "if", "ambient_color", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "        ", "ambient_color", "=", "tf", ".", "tile", "(", "ambient_color", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "", "renders", ",", "pixel_mask", "=", "mesh_renderer_camera", "(", "\n", "vertices", ",", "triangles", ",", "normals", ",", "diffuse_colors", ",", "\n", "mtx_cam", ",", "mtx_perspect_frustrum", ",", "cam_position", ",", "\n", "light_positions", ",", "light_intensities", ",", "image_width", ",", "image_height", ",", "ambient_color", "=", "ambient_color", "\n", ")", "\n", "tonemapped_renders", "=", "tf", ".", "concat", "(", "\n", "[", "\n", "tone_mapper", "(", "renders", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "0.7", ")", ",", "\n", "renders", "[", ":", ",", ":", ",", ":", ",", "3", ":", "4", "]", "\n", "]", ",", "\n", "axis", "=", "3", ")", "\n", "return", "tonemapped_renders", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.trimesh_render.RotationMtx_Trimesh": [[193, 211], ["tensorflow.constant", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.stack", "tfmatchd.face.geometry.camera.rotation.ExtMtxBatch.create_location_batch", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_location_batch"], ["", "def", "RotationMtx_Trimesh", "(", "mesh_tri", ",", "idx_nose", ",", "camera_centre_distance", ")", ":", "\n", "    ", "mesh_c", "=", "tf", ".", "constant", "(", "mesh_tri", ".", "vertices", "[", "idx_nose", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "# mm", "\n", "\n", "cam_front_eye", "=", "tf", ".", "Variable", "(", "\n", "[", "[", "mesh_c", "[", "0", "]", ",", "mesh_c", "[", "1", "]", ",", "mesh_c", "[", "2", "]", "+", "camera_centre_distance", "]", "]", ",", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "cam_front_center", "=", "tf", ".", "Variable", "(", "\n", "[", "[", "mesh_c", "[", "0", "]", ",", "mesh_c", "[", "1", "]", ",", "mesh_c", "[", "2", "]", "]", "]", ",", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "cam_front_up", "=", "tf", ".", "Variable", "(", "\n", "[", "[", "0.0", ",", "1.0", ",", "0.0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", "\n", ")", "\n", "location", "=", "tf", ".", "stack", "(", "[", "cam_front_eye", ",", "cam_front_center", ",", "cam_front_up", "]", ",", "axis", "=", "1", ")", "\n", "\n", "h_ext", "=", "ExtMtxBatch", ".", "create_location_batch", "(", "location", ")", "\n", "\n", "mesh_c_batch", "=", "tf", ".", "expand_dims", "(", "mesh_c", ",", "0", ")", "\n", "return", "h_ext", ",", "mesh_c_batch", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.tensor_render.gpmm_render_image": [[8, 54], ["len", "api_tf_mesh_render.mesh_renderer_camera_light", "tensorflow.clip_by_value", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "api_tf_mesh_render.mesh_renderer_camera_light", "tensorflow.clip_by_value", "list_tonemapped_renders.append", "list_render_image_mask.append", "list_render_tri_ids.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera_light", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera_light"], ["def", "gpmm_render_image", "(", "opt", ",", "vertex", ",", "tri", ",", "vertex_normal", ",", "vertex_color", ",", "mtx_perspect_frustrum", ",", "mtx_model_view", ",", "cam_position", ")", ":", "\n", "    ", "\"\"\"\n    :param vertex: [bs, num_ver, 3]\n    :param tri: [bs, num_tri, 3] or [num_tri, 3]\n    :param vertex_normal: [bs, num_ver, 3]\n    :param vertex_color: [bs, num_ver, 3]\n    :param mtx_perspect_frustrum: [bs, 4, 4]\n    :param mtx_model_view: [bs, 4, 4]\n    :param cam_position: [bs, 3]\n    :return:\n    render_image, shape=[batch_size, h, w, 3], dtype=tf_render.float32\n    render_image_mask, shape=[batch_size, h, w, 1], dtype=tf_render.float32\n    render_tri_ids, shape=[batch_size, h, w, 1], dtype=tf_render.int32\n    \"\"\"", "\n", "# manual light", "\n", "# light_positions = tf.constant([[0.0, 0.0, 1000.0]], shape=[1, 1, 3])", "\n", "# light_intensities = tf.constant([[1.0, 0.0, 0.0]], shape=[1, 1, 3])", "\n", "# ambient_color = tf.constant([[1.0, 1.0, 1.0]], shape=[1, 3])", "\n", "# ambient_color = tf.tile(ambient_color, [opt.batch_size, 1])", "\n", "\n", "if", "len", "(", "tri", ".", "shape", ")", "==", "2", ":", "# common render for bfm09", "\n", "        ", "render_image", ",", "render_image_mask", ",", "render_tri_ids", "=", "mesh_renderer_camera_light", "(", "vertex", ",", "tri", ",", "vertex_normal", ",", "vertex_color", ",", "mtx_model_view", ",", "\n", "mtx_perspect_frustrum", ",", "cam_position", ",", "opt", ".", "img_width", ",", "opt", ".", "img_height", ")", "\n", "tonemapped_renders", "=", "tf", ".", "clip_by_value", "(", "render_image", ",", "0.0", ",", "100000.0", ")", "\n", "", "else", ":", "# convisiable mask render have diff tri for sample in batch", "\n", "        ", "list_tonemapped_renders", "=", "[", "]", "\n", "list_render_image_mask", "=", "[", "]", "\n", "list_render_tri_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tri", ".", "shape", "[", "0", "]", ")", ":", "# bs", "\n", "            ", "render_image", ",", "render_image_mask", ",", "render_tri_ids", "=", "mesh_renderer_camera_light", "(", "\n", "vertex", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "tri", "[", "i", "]", ",", "vertex_normal", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "vertex_color", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "\n", "mtx_model_view", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "mtx_perspect_frustrum", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "cam_position", "[", "i", ":", "i", "+", "1", ",", ":", "]", ",", "\n", "opt", ".", "img_width", ",", "opt", ".", "img_height", ")", "\n", "tonemapped_renders", "=", "tf", ".", "clip_by_value", "(", "render_image", ",", "0.0", ",", "100000.0", ")", "\n", "\n", "list_tonemapped_renders", ".", "append", "(", "tonemapped_renders", ")", "\n", "list_render_image_mask", ".", "append", "(", "render_image_mask", ")", "\n", "list_render_tri_ids", ".", "append", "(", "render_tri_ids", ")", "\n", "\n", "", "tonemapped_renders", "=", "tf", ".", "concat", "(", "list_tonemapped_renders", ",", "axis", "=", "0", ")", "\n", "render_image_mask", "=", "tf", ".", "concat", "(", "list_render_image_mask", ",", "axis", "=", "0", ")", "\n", "render_tri_ids", "=", "tf", ".", "concat", "(", "list_render_tri_ids", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "tonemapped_renders", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "render_image_mask", ",", "render_tri_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.tensor_render.gpmm_render_image_garyLight": [[56, 107], ["tensorflow.constant", "tensorflow.tile", "tensorflow.constant", "tensorflow.tile", "len", "api_tf_mesh_render.mesh_renderer_camera", "tensorflow.clip_by_value", "range", "tensorflow.concat", "tensorflow.concat", "api_tf_mesh_render.mesh_renderer_camera", "tensorflow.clip_by_value", "list_tonemapped_renders.append", "list_render_image_mask.append", "list_render_tri_ids.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera"], ["", "def", "gpmm_render_image_garyLight", "(", "opt", ",", "vertex", ",", "tri", ",", "vertex_normal", ",", "vertex_color", ",", "mtx_perspect_frustrum", ",", "mtx_model_view", ",", "cam_position", ",", "background", "=", "10.999", ")", ":", "\n", "    ", "\"\"\"\n    :param vertex: [bs, num_ver, 3]\n    :param tri: [bs, num_tri, 3] or [num_tri, 3]\n    :param vertex_normal: [bs, num_ver, 3]\n    :param vertex_color: [bs, num_ver, 3]\n    :param mtx_perspect_frustrum: [bs, 4, 4]\n    :param mtx_model_view: [bs, 4, 4]\n    :param cam_position: [bs, 3]\n    :return:\n    render_image, shape=[batch_size, h, w, 3], dtype=tf_render.float32\n    render_image_mask, shape=[batch_size, h, w, 1], dtype=tf_render.float32\n    render_tri_ids, shape=[batch_size, h, w, 1], dtype=tf_render.int32\n    \"\"\"", "\n", "\n", "# manual light", "\n", "light_positions", "=", "tf", ".", "constant", "(", "[", "[", "0.0", ",", "0.0", ",", "1000.0", "]", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "light_positions", "=", "tf", ".", "tile", "(", "light_positions", ",", "[", "opt", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "light_intensities", "=", "tf", ".", "constant", "(", "[", "[", "1.0", ",", "1.0", ",", "1.0", "]", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "light_intensities", "=", "tf", ".", "tile", "(", "light_intensities", ",", "[", "opt", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "# ambient_color = tf.constant([[1.0, 1.0, 1.0]], shape=[1, 3])", "\n", "# ambient_color = tf.tile(ambient_color, [opt.batch_size, 1])", "\n", "\n", "if", "len", "(", "tri", ".", "shape", ")", "==", "2", ":", "\n", "        ", "render_image", ",", "render_image_mask", "=", "mesh_renderer_camera", "(", "vertex", ",", "tri", ",", "vertex_normal", ",", "vertex_color", ",", "mtx_model_view", ",", "\n", "mtx_perspect_frustrum", ",", "cam_position", ",", "light_positions", ",", "light_intensities", ",", "\n", "opt", ".", "img_width", ",", "opt", ".", "img_height", ",", "background", "=", "background", ")", "\n", "\n", "tonemapped_renders", "=", "tf", ".", "clip_by_value", "(", "render_image", ",", "0.0", ",", "100000.0", ")", "\n", "\n", "", "else", ":", "\n", "        ", "list_tonemapped_renders", "=", "[", "]", "\n", "list_render_image_mask", "=", "[", "]", "\n", "list_render_tri_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tri", ".", "shape", "[", "0", "]", ")", ":", "# bs", "\n", "            ", "render_image", ",", "render_image_mask", "=", "mesh_renderer_camera", "(", "\n", "vertex", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "tri", "[", "i", "]", ",", "vertex_normal", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "vertex_color", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "\n", "mtx_model_view", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "mtx_perspect_frustrum", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "cam_position", "[", "i", ":", "i", "+", "1", ",", ":", "]", ",", "\n", "light_positions", ",", "light_intensities", ",", "opt", ".", "img_width", ",", "opt", ".", "img_height", ",", "background", "=", "10.999", ")", "\n", "\n", "tonemapped_renders", "=", "tf", ".", "clip_by_value", "(", "render_image", ",", "0.0", ",", "100000.0", ")", "\n", "\n", "list_tonemapped_renders", ".", "append", "(", "tonemapped_renders", ")", "\n", "list_render_image_mask", ".", "append", "(", "render_image_mask", ")", "\n", "list_render_tri_ids", ".", "append", "(", "1", ")", "\n", "\n", "", "tonemapped_renders", "=", "tf", ".", "concat", "(", "list_tonemapped_renders", ",", "axis", "=", "0", ")", "\n", "render_image_mask", "=", "tf", ".", "concat", "(", "list_render_image_mask", ",", "axis", "=", "0", ")", "\n", "", "return", "tonemapped_renders", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "render_image_mask", ",", "render_image_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.tensor_render.gpmm_generate_depthmap": [[109, 118], ["api_tf_mesh_render.mesh_depthmap_camera", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_depthmap_camera"], ["", "def", "gpmm_generate_depthmap", "(", "opt", ",", "mesh", ",", "tri", ",", "mtx_perspect_frustrum", ",", "mtx_ext", ",", "mtx_model_view", ",", "cam_position", ",", "background", "=", "99999999", ")", ":", "\n", "    ", "depthmap", ",", "depthmap_mask", ",", "depth_min", ",", "depth_max", "=", "mesh_depthmap_camera", "(", "mesh", ",", "tri", ",", "mtx_ext", ",", "mtx_model_view", ",", "mtx_perspect_frustrum", ",", "\n", "opt", ".", "img_width", ",", "opt", ".", "img_height", ",", "background", "=", "background", ")", "\n", "\n", "#depthmap = depthmap * tf.squeeze(depthmap_mask, axis=-1)", "\n", "#depthmap = tf.clip_by_value(depthmap, opt.depth_min, opt.depth_max)", "\n", "depthmap", "=", "tf", ".", "expand_dims", "(", "depthmap", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "depthmap", ",", "depthmap_mask", ",", "depth_min", ",", "depth_max", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera_light": [[18, 117], ["tensorflow.concat", "tensorflow.matmul", "thirdParty.tf_mesh_renderer.mesh_renderer.rasterize_triangles.rasterize_triangles", "tensorflow.reverse", "tensorflow.cast", "tensorflow.reverse", "tensorflow.expand_dims", "len", "ValueError", "len", "ValueError", "len", "ValueError", "tf.tile.get_shape().as_list", "tensorflow.tile", "tf.tile.get_shape().as_list", "tensorflow.tile", "mtx_perspective_frustrum.get_shape().as_list", "tensorflow.tile", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tf.tile.get_shape", "tf.tile.get_shape", "mtx_perspective_frustrum.get_shape", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape"], "function", ["None"], ["def", "mesh_renderer_camera_light", "(", "vertices", ",", "triangles", ",", "normals", ",", "diffuse_colors", ",", "\n", "mtx_camera", ",", "mtx_perspective_frustrum", ",", "camera_position", ",", "\n", "image_width", ",", "image_height", ")", ":", "\n", "  ", "\"\"\"Renders an input scene using phong shading, and returns an output image.\n\n  Args:\n    vertices: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is an xyz position in world space.\n    triangles: 2-D int32 tensor with shape [triangle_count, 3]. Each triplet\n        should contain vertex indices describing a triangle such that the\n        triangle's normal points toward the viewer if the forward order of the\n        triplet defines a clockwise winding of the vertices. Gradients with\n        respect to this tensor are not available.\n    normals: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is the xyz vertex normal for its corresponding vertex. Each\n        vector is assumed to be already normalized.\n    diffuse_colors: 3-D float32 tensor with shape [batch_size,\n        vertex_count, 3]. The RGB diffuse reflection in the range [0,1] for\n        each vertex.\n\n    mtx_camera: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the camera model view matrix\n    mtx_perspective_frustrum: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the perspective and frustrum matrix\n    camera_position: 2-D tensor with shape [batch_size, 3] or 1-D tensor with\n        shape [3] specifying the XYZ world space camera position.\n\n    light_intensities: a 3-D tensor with shape [batch_size, light_count, 3]. The\n        RGB intensity values for each light. Intensities may be above one.\n    image_width: int specifying desired output image width in pixels.\n    image_height: int specifying desired output image height in pixels.\n\n  Returns:\n    A 4-D float32 tensor of shape [batch_size, image_height, image_width, 4]\n    containing the lit RGBA color values for each image at each pixel. RGB\n    colors are the intensity values before tonemapping and can be in the range\n    [0, infinity]. Clipping to the range [0,1] with tf_render.clip_by_value is likely\n    reasonable for both viewing and training most scenes. More complex scenes\n    with multiple lights should tone map color values for display only. One\n    simple tonemapping approach is to rescale color values as x/(1+x); gamma\n    compression is another common techinque. Alpha values are zero for\n    background pixels and near one for mesh pixels.\n  Raises:\n    ValueError: An invalid argument to the method is detected.\n  \"\"\"", "\n", "if", "len", "(", "vertices", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Vertices must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", ".", "value", "\n", "if", "len", "(", "normals", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Normals must have shape [batch_size, vertex_count, 3].'", ")", "\n", "\n", "", "if", "len", "(", "diffuse_colors", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'vertex_diffuse_colors must have shape [batch_size, vertex_count, 3].'", ")", "\n", "\n", "", "if", "camera_position", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "3", "]", ":", "\n", "    ", "camera_position", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "camera_position", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "", "elif", "camera_position", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "3", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_position must have shape [batch_size, 3]'", ")", "\n", "\n", "# TODO: Debug Shape", "\n", "", "if", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_camera", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_camera", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "", "if", "mtx_perspective_frustrum", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_camera", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_perspective_frustrum", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "", "elif", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "\n", "", "vertex_attributes", "=", "tf", ".", "concat", "(", "[", "normals", ",", "vertices", ",", "diffuse_colors", "]", ",", "axis", "=", "2", ")", "\n", "\n", "clip_space_transforms", "=", "tf", ".", "matmul", "(", "mtx_perspective_frustrum", ",", "mtx_camera", ",", "name", "=", "\"mtx_clip_space_transforms_batch\"", ")", "\n", "\n", "pixel_attributes", ",", "alpha", ",", "tri_ids", "=", "rasterize_triangles", "(", "\n", "vertices", ",", "vertex_attributes", ",", "triangles", ",", "clip_space_transforms", ",", "\n", "image_width", ",", "image_height", ",", "[", "-", "1", "]", "*", "vertex_attributes", ".", "shape", "[", "2", "]", ".", "value", ")", "\n", "\n", "# Extract the interpolated vertex attributes from the pixel buffer and", "\n", "# supply them to the shader:", "\n", "#pixel_normals = tf.nn.l2_normalize(pixel_attributes[:, :, :, 0:3], dim=3)", "\n", "#pixel_positions = pixel_attributes[:, :, :, 3:6]", "\n", "diffuse_colors", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "6", ":", "9", "]", "\n", "diffuse_colors", "=", "tf", ".", "reverse", "(", "diffuse_colors", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "#return renders, pixel_mask", "\n", "pixel_mask", "=", "alpha", ">", "0.5", "\n", "pixel_mask", "=", "tf", ".", "cast", "(", "pixel_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "pixel_mask", "=", "tf", ".", "reverse", "(", "pixel_mask", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "#", "\n", "tri_ids", "=", "tf", ".", "expand_dims", "(", "tri_ids", ",", "-", "1", ")", "\n", "\n", "return", "diffuse_colors", ",", "pixel_mask", ",", "tri_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera": [[119, 298], ["tensorflow.matmul", "thirdParty.tf_mesh_renderer.mesh_renderer.rasterize_triangles.rasterize_triangles", "tensorflow.nn.l2_normalize", "tensorflow.cast", "thirdParty.tf_mesh_renderer.mesh_renderer.mesh_renderer.phong_shader", "tensorflow.cast", "tensorflow.reverse", "len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "ValueError", "ValueError", "tf.tile.get_shape().as_list", "tensorflow.tile", "tf.tile.get_shape().as_list", "tensorflow.tile", "mtx_perspective_frustrum.get_shape().as_list", "tensorflow.tile", "ValueError", "ValueError", "isinstance", "tensorflow.concat", "tensorflow.reduce_any", "ambient_color.get_shape().as_list", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tensorflow.constant", "len", "ValueError", "len", "ValueError", "len", "tensorflow.concat", "tensorflow.concat", "len", "tensorflow.reshape", "tf.tile.get_shape", "tf.tile.get_shape", "mtx_perspective_frustrum.get_shape", "ambient_color.get_shape", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape", "tensorflow.expand_dims"], "function", ["None"], ["", "def", "mesh_renderer_camera", "(", "vertices", ",", "triangles", ",", "normals", ",", "diffuse_colors", ",", "\n", "mtx_camera", ",", "mtx_perspective_frustrum", ",", "camera_position", ",", "\n", "light_positions", ",", "light_intensities", ",", "image_width", ",", "image_height", ",", "\n", "specular_colors", "=", "None", ",", "shininess_coefficients", "=", "None", ",", "ambient_color", "=", "None", ",", "background", "=", "-", "1", "\n", ")", ":", "\n", "  ", "\"\"\"Renders an input scene using phong shading, and returns an output image.\n\n  Args:\n    vertices: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is an xyz position in world space.\n    triangles: 2-D int32 tensor with shape [triangle_count, 3]. Each triplet\n        should contain vertex indices describing a triangle such that the\n        triangle's normal points toward the viewer if the forward order of the\n        triplet defines a clockwise winding of the vertices. Gradients with\n        respect to this tensor are not available.\n    normals: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is the xyz vertex normal for its corresponding vertex. Each\n        vector is assumed to be already normalized.\n    diffuse_colors: 3-D float32 tensor with shape [batch_size,\n        vertex_count, 3]. The RGB diffuse reflection in the range [0,1] for\n        each vertex.\n\n    mtx_camera: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the camera model view matrix\n    mtx_perspective_frustrum: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the perspective and frustrum matrix\n    camera_position: 2-D tensor with shape [batch_size, 3] or 1-D tensor with\n        shape [3] specifying the XYZ world space camera position.\n\n    light_positions: a 3-D tensor with shape [batch_size, light_count, 3]. The\n        XYZ position of each light in the scene. In the same coordinate space as\n        pixel_positions.\n    light_intensities: a 3-D tensor with shape [batch_size, light_count, 3]. The\n        RGB intensity values for each light. Intensities may be above one.\n    image_width: int specifying desired output image width in pixels.\n    image_height: int specifying desired output image height in pixels.\n\n    specular_colors: 3-D float32 tensor with shape [batch_size,\n        vertex_count, 3]. The RGB specular reflection in the range [0, 1] for\n        each vertex.  If supplied, specular reflections will be computed, and\n        both specular_colors and shininess_coefficients are expected.\n    shininess_coefficients: a 0D-2D float32 tensor with maximum shape\n       [batch_size, vertex_count]. The phong shininess coefficient of each\n       vertex. A 0D tensor or float gives a constant shininess coefficient\n       across all batches and images. A 1D tensor must have shape [batch_size],\n       and a single shininess coefficient per image is used.\n    ambient_color: a 2D tensor with shape [batch_size, 3]. The RGB ambient\n        color, which is added to each pixel in the scene. If None, it is\n        assumed to be black.\n\n\n  Returns:\n    A 4-D float32 tensor of shape [batch_size, image_height, image_width, 4]\n    containing the lit RGBA color values for each image at each pixel. RGB\n    colors are the intensity values before tonemapping and can be in the range\n    [0, infinity]. Clipping to the range [0,1] with tf_render.clip_by_value is likely\n    reasonable for both viewing and training most scenes. More complex scenes\n    with multiple lights should tone map color values for display only. One\n    simple tonemapping approach is to rescale color values as x/(1+x); gamma\n    compression is another common techinque. Alpha values are zero for\n    background pixels and near one for mesh pixels.\n  Raises:\n    ValueError: An invalid argument to the method is detected.\n  \"\"\"", "\n", "if", "len", "(", "vertices", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Vertices must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", ".", "value", "\n", "if", "len", "(", "normals", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Normals must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "if", "len", "(", "light_positions", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'Light_positions must have shape [batch_size, light_count, 3].'", ")", "\n", "", "if", "len", "(", "light_intensities", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'Light_intensities must have shape [batch_size, light_count, 3].'", ")", "\n", "", "if", "len", "(", "diffuse_colors", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'vertex_diffuse_colors must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "if", "(", "ambient_color", "is", "not", "None", "and", "\n", "ambient_color", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "3", "]", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Ambient_color must have shape [batch_size, 3].'", ")", "\n", "", "if", "camera_position", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "3", "]", ":", "\n", "    ", "camera_position", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "camera_position", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "", "elif", "camera_position", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "3", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_position must have shape [batch_size, 3]'", ")", "\n", "\n", "# TODO: Debug Shape", "\n", "", "if", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_camera", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_camera", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "", "if", "mtx_perspective_frustrum", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_camera", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_perspective_frustrum", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "", "elif", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "", "if", "specular_colors", "is", "not", "None", "and", "shininess_coefficients", "is", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'Specular colors were supplied without shininess coefficients.'", ")", "\n", "", "if", "shininess_coefficients", "is", "not", "None", "and", "specular_colors", "is", "None", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'Shininess coefficients were supplied without specular colors.'", ")", "\n", "", "if", "specular_colors", "is", "not", "None", ":", "\n", "# Since a 0-D float32 tensor is accepted, also accept a float.", "\n", "    ", "if", "isinstance", "(", "shininess_coefficients", ",", "float", ")", ":", "\n", "      ", "shininess_coefficients", "=", "tf", ".", "constant", "(", "\n", "shininess_coefficients", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "if", "len", "(", "specular_colors", ".", "shape", ")", "!=", "3", ":", "\n", "      ", "raise", "ValueError", "(", "'The specular colors must have shape [batch_size, '", "\n", "'vertex_count, 3].'", ")", "\n", "", "if", "len", "(", "shininess_coefficients", ".", "shape", ")", ">", "2", ":", "\n", "      ", "raise", "ValueError", "(", "'The shininess coefficients must have shape at most'", "\n", "'[batch_size, vertex_count].'", ")", "\n", "# If we don't have per-vertex coefficients, we can just reshape the", "\n", "# input shininess to broadcast later, rather than interpolating an", "\n", "# additional vertex attribute:", "\n", "", "if", "len", "(", "shininess_coefficients", ".", "shape", ")", "<", "2", ":", "\n", "      ", "vertex_attributes", "=", "tf", ".", "concat", "(", "\n", "[", "normals", ",", "vertices", ",", "diffuse_colors", ",", "specular_colors", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "      ", "vertex_attributes", "=", "tf", ".", "concat", "(", "\n", "[", "\n", "normals", ",", "vertices", ",", "diffuse_colors", ",", "specular_colors", ",", "\n", "tf", ".", "expand_dims", "(", "shininess_coefficients", ",", "axis", "=", "2", ")", "\n", "]", ",", "\n", "axis", "=", "2", ")", "\n", "", "", "else", ":", "\n", "    ", "vertex_attributes", "=", "tf", ".", "concat", "(", "[", "normals", ",", "vertices", ",", "diffuse_colors", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# camera_matrices = camera_utils.look_at(camera_position, camera_lookat,", "\n", "#                                        camera_up)", "\n", "#", "\n", "# perspective_transforms = camera_utils.perspective(image_width / image_height,", "\n", "#                                                   fov_y, near_clip, far_clip)", "\n", "\n", "", "clip_space_transforms", "=", "tf", ".", "matmul", "(", "mtx_perspective_frustrum", ",", "mtx_camera", ",", "name", "=", "\"mtx_clip_space_transforms_batch\"", ")", "\n", "\n", "pixel_attributes", ",", "alpha", ",", "tri_ids", "=", "rasterize_triangles", "(", "\n", "vertices", ",", "vertex_attributes", ",", "triangles", ",", "clip_space_transforms", ",", "\n", "image_width", ",", "image_height", ",", "[", "background", "]", "*", "vertex_attributes", ".", "shape", "[", "2", "]", ".", "value", ")", "\n", "\n", "# Extract the interpolated vertex attributes from the pixel buffer and", "\n", "# supply them to the shader:", "\n", "pixel_normals", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "dim", "=", "3", ")", "\n", "pixel_positions", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "3", ":", "6", "]", "\n", "diffuse_colors", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "6", ":", "9", "]", "\n", "if", "specular_colors", "is", "not", "None", ":", "\n", "    ", "specular_colors", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "9", ":", "12", "]", "\n", "# Retrieve the interpolated shininess coefficients if necessary, or just", "\n", "# reshape our input for broadcasting:", "\n", "if", "len", "(", "shininess_coefficients", ".", "shape", ")", "==", "2", ":", "\n", "      ", "shininess_coefficients", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "12", "]", "\n", "", "else", ":", "\n", "      ", "shininess_coefficients", "=", "tf", ".", "reshape", "(", "shininess_coefficients", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "", "pixel_mask", "=", "tf", ".", "cast", "(", "tf", ".", "reduce_any", "(", "diffuse_colors", ">=", "0", ",", "axis", "=", "3", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "renders", "=", "phong_shader", "(", "\n", "normals", "=", "pixel_normals", ",", "\n", "alphas", "=", "pixel_mask", ",", "\n", "pixel_positions", "=", "pixel_positions", ",", "\n", "light_positions", "=", "light_positions", ",", "\n", "light_intensities", "=", "light_intensities", ",", "\n", "diffuse_colors", "=", "diffuse_colors", ",", "\n", "camera_position", "=", "camera_position", "if", "specular_colors", "is", "not", "None", "else", "None", ",", "\n", "specular_colors", "=", "specular_colors", ",", "\n", "shininess_coefficients", "=", "shininess_coefficients", ",", "\n", "ambient_color", "=", "ambient_color", ")", "\n", "\n", "#return renders, pixel_mask", "\n", "pixel_mask", "=", "alpha", ">", "0.5", "\n", "pixel_mask", "=", "tf", ".", "cast", "(", "pixel_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "pixel_mask", "=", "tf", ".", "reverse", "(", "pixel_mask", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "return", "renders", ",", "pixel_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_depthmap_camera": [[300, 393], ["tensorflow.matmul", "thirdParty.tf_mesh_renderer.mesh_renderer.rasterize_triangles.rasterize_triangles", "tensorflow.ones", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reverse", "tensorflow.reverse", "len", "ValueError", "tf.tile.get_shape().as_list", "tensorflow.tile", "mtx_perspective_frustrum.get_shape().as_list", "tensorflow.tile", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tf.tile.get_shape", "mtx_perspective_frustrum.get_shape", "tf.tile.get_shape", "tf.tile.get_shape"], "function", ["None"], ["", "def", "mesh_depthmap_camera", "(", "vertices", ",", "triangles", ",", "mtx_ext", ",", "\n", "mtx_camera", ",", "mtx_perspective_frustrum", ",", "\n", "image_width", ",", "image_height", "\n", ")", ":", "\n", "  ", "\"\"\"Renders an input scene using phong shading, and returns an output image.\n\n  Args:\n    vertices: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is an xyz position in world space.\n    triangles: 2-D int32 tensor with shape [triangle_count, 3]. Each triplet\n        should contain vertex indices describing a triangle such that the\n        triangle's normal points toward the viewer if the forward order of the\n        triplet defines a clockwise winding of the vertices. Gradients with\n        respect to this tensor are not available.\n    normals: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is the xyz vertex normal for its corresponding vertex. Each\n        vector is assumed to be already normalized.\n\n    mtx_camera: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the camera model view matrix\n    mtx_perspective_frustrum: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the perspective and frustrum matrix\n    camera_position: 2-D tensor with shape [batch_size, 3] or 1-D tensor with\n        shape [3] specifying the XYZ world space camera position.\n\n    image_width: int specifying desired output image width in pixels.\n    image_height: int specifying desired output image height in pixels.\n\n  Returns:\n    A 4-D float32 tensor of shape [batch_size, image_height, image_width, 4]\n    containing the lit RGBA color values for each image at each pixel. RGB\n    colors are the intensity values before tonemapping and can be in the range\n    [0, infinity]. Clipping to the range [0,1] with tf_render.clip_by_value is likely\n    reasonable for both viewing and training most scenes. More complex scenes\n    with multiple lights should tone map color values for display only. One\n    simple tonemapping approach is to rescale color values as x/(1+x); gamma\n    compression is another common techinque. Alpha values are zero for\n    background pixels and near one for mesh pixels.\n  Raises:\n    ValueError: An invalid argument to the method is detected.\n  \"\"\"", "\n", "if", "len", "(", "vertices", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Vertices must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", ".", "value", "\n", "\n", "# TODO: Debug Shape", "\n", "if", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_camera", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_camera", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "", "if", "mtx_perspective_frustrum", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_camera", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_perspective_frustrum", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "", "elif", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "\n", "# vertex attribute of depthmap is only z", "\n", "", "vertex_attributes", "=", "vertices", "\n", "#vertex_attributes = tf_render.expand_dims(vertex_attributes, -1)", "\n", "# camera_matrices = camera_utils.look_at(camera_position, camera_lookat,", "\n", "#                                        camera_up)", "\n", "#", "\n", "# perspective_transforms = camera_utils.perspective(image_width / image_height,", "\n", "#                                                   fov_y, near_clip, far_clip)", "\n", "\n", "clip_space_transforms", "=", "tf", ".", "matmul", "(", "mtx_perspective_frustrum", ",", "mtx_camera", ",", "name", "=", "\"mtx_clip_space_transforms_batch\"", ")", "\n", "\n", "pixel_attributes", ",", "alpha", ",", "_", "=", "rasterize_triangles", "(", "\n", "vertices", ",", "vertex_attributes", ",", "triangles", ",", "clip_space_transforms", ",", "\n", "image_width", ",", "image_height", ",", "[", "99999999", "]", "*", "vertex_attributes", ".", "shape", "[", "2", "]", ".", "value", ")", "\n", "\n", "# Extract the interpolated vertex attributes from the pixel buffer and", "\n", "# supply them to the shader:", "\n", "filler_homo", "=", "tf", ".", "ones", "(", "shape", "=", "[", "pixel_attributes", ".", "shape", "[", "0", "]", ",", "pixel_attributes", ".", "shape", "[", "1", "]", ",", "pixel_attributes", ".", "shape", "[", "2", "]", ",", "1", "]", ")", "\n", "pixel_attributes", "=", "tf", ".", "concat", "(", "[", "pixel_attributes", ",", "filler_homo", "]", ",", "axis", "=", "3", ")", "\n", "pixel_attributes", "=", "tf", ".", "reshape", "(", "pixel_attributes", ",", "shape", "=", "[", "batch_size", ",", "-", "1", ",", "4", "]", ")", "\n", "pixel_attributes", "=", "tf", ".", "transpose", "(", "pixel_attributes", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "pixel_attributes", "=", "tf", ".", "matmul", "(", "mtx_ext", ",", "pixel_attributes", ")", "\n", "pixel_attributes", "=", "tf", ".", "transpose", "(", "pixel_attributes", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "pixel_attributes", "=", "tf", ".", "reshape", "(", "pixel_attributes", ",", "shape", "=", "[", "batch_size", ",", "image_height", ",", "image_width", ",", "4", "]", ")", "\n", "depth_map", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "\n", "pixel_mask", "=", "alpha", ">", "0.5", "\n", "pixel_mask", "=", "tf", ".", "cast", "(", "pixel_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "depth_map", "=", "tf", ".", "reverse", "(", "depth_map", ",", "axis", "=", "[", "1", "]", ")", "\n", "pixel_mask", "=", "tf", ".", "reverse", "(", "pixel_mask", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "return", "depth_map", ",", "pixel_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_rendererOrtho_camera": [[395, 524], ["tensorflow.concat", "tensorflow.matmul", "thirdParty.tf_mesh_renderer.mesh_renderer.rasterize_triangles.rasterize_triangles", "tensorflow.nn.l2_normalize", "tensorflow.cast", "thirdParty.tf_mesh_renderer.mesh_renderer.mesh_renderer.phong_shader", "tensorflow.cast", "tensorflow.reverse", "len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "ValueError", "len", "ValueError", "ValueError", "tf.tile.get_shape().as_list", "tensorflow.tile", "mtx_perspective_frustrum.get_shape().as_list", "tensorflow.tile", "tensorflow.reduce_any", "ambient_color.get_shape().as_list", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tf.tile.get_shape", "mtx_perspective_frustrum.get_shape", "ambient_color.get_shape", "tf.tile.get_shape", "tf.tile.get_shape"], "function", ["None"], ["", "def", "mesh_rendererOrtho_camera", "(", "vertices", ",", "triangles", ",", "normals", ",", "diffuse_colors", ",", "\n", "mtx_camera", ",", "mtx_perspective_frustrum", ",", "light_positions", ",", "light_intensities", ",", "\n", "image_width", ",", "image_height", ",", "ambient_color", "=", "None", ",", "background", "=", "-", "1", "\n", ")", ":", "\n", "  ", "\"\"\"Renders an input scene using phong shading, and returns an output image.\n\n  Args:\n    vertices: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is an xyz position in world space.\n    triangles: 2-D int32 tensor with shape [triangle_count, 3]. Each triplet\n        should contain vertex indices describing a triangle such that the\n        triangle's normal points toward the viewer if the forward order of the\n        triplet defines a clockwise winding of the vertices. Gradients with\n        respect to this tensor are not available.\n    normals: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is the xyz vertex normal for its corresponding vertex. Each\n        vector is assumed to be already normalized.\n    diffuse_colors: 3-D float32 tensor with shape [batch_size,\n        vertex_count, 3]. The RGB diffuse reflection in the range [0,1] for\n        each vertex.\n\n    mtx_camera: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the camera model view matrix\n    mtx_perspective_frustrum: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the perspective and frustrum matrix\n    camera_position: 2-D tensor with shape [batch_size, 3] or 1-D tensor with\n        shape [3] specifying the XYZ world space camera position.\n\n    light_positions: a 3-D tensor with shape [batch_size, light_count, 3]. The\n        XYZ position of each light in the scene. In the same coordinate space as\n        pixel_positions.\n    light_intensities: a 3-D tensor with shape [batch_size, light_count, 3]. The\n        RGB intensity values for each light. Intensities may be above one.\n    image_width: int specifying desired output image width in pixels.\n    image_height: int specifying desired output image height in pixels.\n\n    specular_colors: 3-D float32 tensor with shape [batch_size,\n        vertex_count, 3]. The RGB specular reflection in the range [0, 1] for\n        each vertex.  If supplied, specular reflections will be computed, and\n        both specular_colors and shininess_coefficients are expected.\n    shininess_coefficients: a 0D-2D float32 tensor with maximum shape\n       [batch_size, vertex_count]. The phong shininess coefficient of each\n       vertex. A 0D tensor or float gives a constant shininess coefficient\n       across all batches and images. A 1D tensor must have shape [batch_size],\n       and a single shininess coefficient per image is used.\n    ambient_color: a 2D tensor with shape [batch_size, 3]. The RGB ambient\n        color, which is added to each pixel in the scene. If None, it is\n        assumed to be black.\n\n\n  Returns:\n    A 4-D float32 tensor of shape [batch_size, image_height, image_width, 4]\n    containing the lit RGBA color values for each image at each pixel. RGB\n    colors are the intensity values before tonemapping and can be in the range\n    [0, infinity]. Clipping to the range [0,1] with tf_render.clip_by_value is likely\n    reasonable for both viewing and training most scenes. More complex scenes\n    with multiple lights should tone map color values for display only. One\n    simple tonemapping approach is to rescale color values as x/(1+x); gamma\n    compression is another common techinque. Alpha values are zero for\n    background pixels and near one for mesh pixels.\n  Raises:\n    ValueError: An invalid argument to the method is detected.\n  \"\"\"", "\n", "if", "len", "(", "vertices", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Vertices must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", ".", "value", "\n", "if", "len", "(", "normals", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Normals must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "if", "len", "(", "light_positions", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'Light_positions must have shape [batch_size, light_count, 3].'", ")", "\n", "", "if", "len", "(", "light_intensities", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'Light_intensities must have shape [batch_size, light_count, 3].'", ")", "\n", "", "if", "len", "(", "diffuse_colors", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "\n", "'vertex_diffuse_colors must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "if", "(", "ambient_color", "is", "not", "None", "and", "\n", "ambient_color", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "3", "]", ")", ":", "\n", "    ", "raise", "ValueError", "(", "'Ambient_color must have shape [batch_size, 3].'", ")", "\n", "\n", "# TODO: Debug Shape", "\n", "", "if", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_camera", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_camera", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "", "if", "mtx_perspective_frustrum", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_camera", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_perspective_frustrum", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "", "elif", "mtx_camera", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "\n", "", "vertex_attributes", "=", "tf", ".", "concat", "(", "[", "normals", ",", "vertices", ",", "diffuse_colors", "]", ",", "axis", "=", "2", ")", "\n", "\n", "clip_space_transforms", "=", "tf", ".", "matmul", "(", "mtx_perspective_frustrum", ",", "mtx_camera", ",", "name", "=", "\"mtx_clip_space_transforms_batch\"", ")", "\n", "\n", "pixel_attributes", ",", "alpha", ",", "tri_ids", "=", "rasterize_triangles", "(", "\n", "vertices", ",", "vertex_attributes", ",", "triangles", ",", "clip_space_transforms", ",", "\n", "image_width", ",", "image_height", ",", "[", "background", "]", "*", "vertex_attributes", ".", "shape", "[", "2", "]", ".", "value", ")", "\n", "\n", "# Extract the interpolated vertex attributes from the pixel buffer and", "\n", "# supply them to the shader:", "\n", "pixel_normals", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "dim", "=", "3", ")", "\n", "pixel_positions", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "3", ":", "6", "]", "\n", "diffuse_colors", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "6", ":", "9", "]", "\n", "\n", "pixel_mask", "=", "tf", ".", "cast", "(", "tf", ".", "reduce_any", "(", "diffuse_colors", ">=", "0", ",", "axis", "=", "3", ")", ",", "tf", ".", "float32", ")", "\n", "\n", "renders", "=", "phong_shader", "(", "\n", "normals", "=", "pixel_normals", ",", "\n", "alphas", "=", "pixel_mask", ",", "\n", "pixel_positions", "=", "pixel_positions", ",", "\n", "light_positions", "=", "light_positions", ",", "\n", "light_intensities", "=", "light_intensities", ",", "\n", "diffuse_colors", "=", "diffuse_colors", ",", "\n", "camera_position", "=", "None", ",", "\n", "specular_colors", "=", "None", ",", "\n", "shininess_coefficients", "=", "None", ",", "\n", "ambient_color", "=", "ambient_color", ")", "\n", "\n", "#return renders, pixel_mask", "\n", "pixel_mask", "=", "alpha", ">", "0.5", "\n", "pixel_mask", "=", "tf", ".", "cast", "(", "pixel_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "pixel_mask", "=", "tf", ".", "reverse", "(", "pixel_mask", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "return", "renders", ",", "pixel_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_depthmapOrtho_camera": [[526, 618], ["tensorflow.matmul", "thirdParty.tf_mesh_renderer.mesh_renderer.rasterize_triangles.rasterize_triangles", "tensorflow.ones", "tensorflow.concat", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reverse", "tensorflow.reverse", "len", "ValueError", "tf.tile.get_shape().as_list", "tensorflow.tile", "tf.tile.get_shape().as_list", "tensorflow.tile", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tensorflow.expand_dims", "tf.tile.get_shape().as_list", "ValueError", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape"], "function", ["None"], ["", "def", "mesh_depthmapOrtho_camera", "(", "vertices", ",", "triangles", ",", "\n", "mtx_ext", ",", "mtx_perspective_frustrum", ",", "image_width", ",", "image_height", "\n", ")", ":", "\n", "  ", "\"\"\"Renders an input scene using phong shading, and returns an output image.\n\n  Args:\n    vertices: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is an xyz position in world space.\n    triangles: 2-D int32 tensor with shape [triangle_count, 3]. Each triplet\n        should contain vertex indices describing a triangle such that the\n        triangle's normal points toward the viewer if the forward order of the\n        triplet defines a clockwise winding of the vertices. Gradients with\n        respect to this tensor are not available.\n    normals: 3-D float32 tensor with shape [batch_size, vertex_count, 3]. Each\n        triplet is the xyz vertex normal for its corresponding vertex. Each\n        vector is assumed to be already normalized.\n\n    mtx_camera: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the camera model view matrix\n    mtx_perspective_frustrum: 3-D tensor with shape [batch_size, 4, 4] or 2-D tensor with\n        shape [4, 4] specifying the perspective and frustrum matrix\n    camera_position: 2-D tensor with shape [batch_size, 3] or 1-D tensor with\n        shape [3] specifying the XYZ world space camera position.\n\n    image_width: int specifying desired output image width in pixels.\n    image_height: int specifying desired output image height in pixels.\n\n  Returns:\n    A 4-D float32 tensor of shape [batch_size, image_height, image_width, 4]\n    containing the lit RGBA color values for each image at each pixel. RGB\n    colors are the intensity values before tonemapping and can be in the range\n    [0, infinity]. Clipping to the range [0,1] with tf_render.clip_by_value is likely\n    reasonable for both viewing and training most scenes. More complex scenes\n    with multiple lights should tone map color values for display only. One\n    simple tonemapping approach is to rescale color values as x/(1+x); gamma\n    compression is another common techinque. Alpha values are zero for\n    background pixels and near one for mesh pixels.\n  Raises:\n    ValueError: An invalid argument to the method is detected.\n  \"\"\"", "\n", "if", "len", "(", "vertices", ".", "shape", ")", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Vertices must have shape [batch_size, vertex_count, 3].'", ")", "\n", "", "batch_size", "=", "vertices", ".", "shape", "[", "0", "]", ".", "value", "\n", "\n", "# TODO: Debug Shape", "\n", "if", "mtx_ext", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_ext", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_ext", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "", "elif", "mtx_ext", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "", "if", "mtx_perspective_frustrum", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "==", "[", "4", ",", "4", "]", ":", "\n", "      ", "mtx_perspective_frustrum", "=", "tf", ".", "tile", "(", "\n", "tf", ".", "expand_dims", "(", "mtx_perspective_frustrum", ",", "axis", "=", "0", ")", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "", "elif", "mtx_perspective_frustrum", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "!=", "[", "batch_size", ",", "4", ",", "4", "]", ":", "\n", "    ", "raise", "ValueError", "(", "'Camera_lookat must have shape [batch_size, 4, 4]'", ")", "\n", "\n", "\n", "# vertex attribute of depthmap is only z", "\n", "", "vertex_attributes", "=", "vertices", "\n", "#vertex_attributes = tf_render.expand_dims(vertex_attributes, -1)", "\n", "# camera_matrices = camera_utils.look_at(camera_position, camera_lookat,", "\n", "#                                        camera_up)", "\n", "#", "\n", "# perspective_transforms = camera_utils.perspective(image_width / image_height,", "\n", "#                                                   fov_y, near_clip, far_clip)", "\n", "\n", "clip_space_transforms", "=", "tf", ".", "matmul", "(", "mtx_perspective_frustrum", ",", "mtx_ext", ",", "name", "=", "\"mtx_clip_space_transforms_batch\"", ")", "\n", "\n", "pixel_attributes", ",", "alpha", ",", "_", "=", "rasterize_triangles", "(", "\n", "vertices", ",", "vertex_attributes", ",", "triangles", ",", "clip_space_transforms", ",", "\n", "image_width", ",", "image_height", ",", "[", "99999999", "]", "*", "vertex_attributes", ".", "shape", "[", "2", "]", ".", "value", ")", "\n", "\n", "# Extract the interpolated vertex attributes from the pixel buffer and", "\n", "# supply them to the shader:", "\n", "filler_homo", "=", "tf", ".", "ones", "(", "shape", "=", "[", "pixel_attributes", ".", "shape", "[", "0", "]", ",", "pixel_attributes", ".", "shape", "[", "1", "]", ",", "pixel_attributes", ".", "shape", "[", "2", "]", ",", "1", "]", ")", "\n", "pixel_attributes", "=", "tf", ".", "concat", "(", "[", "pixel_attributes", ",", "filler_homo", "]", ",", "axis", "=", "3", ")", "\n", "pixel_attributes", "=", "tf", ".", "reshape", "(", "pixel_attributes", ",", "shape", "=", "[", "batch_size", ",", "-", "1", ",", "4", "]", ")", "\n", "pixel_attributes", "=", "tf", ".", "transpose", "(", "pixel_attributes", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "pixel_attributes", "=", "tf", ".", "matmul", "(", "mtx_ext", ",", "pixel_attributes", ")", "\n", "pixel_attributes", "=", "tf", ".", "transpose", "(", "pixel_attributes", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "pixel_attributes", "=", "tf", ".", "reshape", "(", "pixel_attributes", ",", "shape", "=", "[", "batch_size", ",", "image_height", ",", "image_width", ",", "4", "]", ")", "\n", "depth_map", "=", "pixel_attributes", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "\n", "pixel_mask", "=", "alpha", ">", "0.5", "\n", "pixel_mask", "=", "tf", ".", "cast", "(", "pixel_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "depth_map", "=", "tf", ".", "reverse", "(", "depth_map", ",", "axis", "=", "[", "1", "]", ")", "\n", "pixel_mask", "=", "tf", ".", "reverse", "(", "pixel_mask", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "return", "depth_map", ",", "pixel_mask", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._repeat_1d": [[6, 10], ["tensorflow.reshape", "tensorflow.tile", "tensor.get_shape", "tensorflow.convert_to_tensor"], "function", ["None"], ["def", "_repeat_1d", "(", "tensor", ",", "count", ")", ":", "\n", "\n", "    ", "assert", "tensor", ".", "get_shape", "(", ")", ".", "ndims", "==", "1", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "tensor", "[", ":", ",", "tf", ".", "newaxis", "]", ",", "tf", ".", "convert_to_tensor", "(", "[", "1", ",", "count", "]", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._prepare_vertices_and_faces": [[12, 23], ["isinstance", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.cast"], "function", ["None"], ["", "def", "_prepare_vertices_and_faces", "(", "vertices", ",", "faces", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "vertices", ",", "tf", ".", "Tensor", ")", "==", "False", ":", "\n", "        ", "vertices", "=", "tf", ".", "convert_to_tensor", "(", "vertices", ",", "name", "=", "'vertices'", ")", "\n", "faces", "=", "tf", ".", "convert_to_tensor", "(", "faces", ",", "name", "=", "'faces'", ")", "\n", "\n", "", "if", "faces", ".", "dtype", "is", "not", "tf", ".", "int32", ":", "\n", "        ", "assert", "faces", ".", "dtype", "is", "tf", ".", "int64", "\n", "faces", "=", "tf", ".", "cast", "(", "faces", ",", "tf", ".", "int32", ")", "\n", "\n", "", "return", "vertices", ",", "faces", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._get_face_normals": [[25, 34], ["tensorflow.transpose", "tensorflow.gather", "tensorflow.cross", "vertices.get_shape", "tensorflow.norm", "list", "range"], "function", ["None"], ["", "def", "_get_face_normals", "(", "vertices", ",", "faces", ")", ":", "\n", "\n", "    ", "vertices_ndim", "=", "vertices", ".", "get_shape", "(", ")", ".", "ndims", "\n", "v_trans_axis", "=", "[", "vertices_ndim", "-", "2", "]", "+", "list", "(", "range", "(", "vertices_ndim", "-", "2", ")", ")", "+", "[", "vertices_ndim", "-", "1", "]", "\n", "vertices_by_index", "=", "tf", ".", "transpose", "(", "vertices", ",", "v_trans_axis", ")", "# indexed by vertex-index, *, x/y/z", "\n", "vertices_by_face", "=", "tf", ".", "gather", "(", "vertices_by_index", ",", "faces", ")", "# indexed by face-index, vertex-in-face, *, x/y/z", "\n", "normals_by_face", "=", "tf", ".", "cross", "(", "vertices_by_face", "[", ":", ",", "1", "]", "-", "vertices_by_face", "[", ":", ",", "0", "]", ",", "vertices_by_face", "[", ":", ",", "2", "]", "-", "vertices_by_face", "[", ":", ",", "0", "]", ")", "# indexed by face-index, *, x/y/z", "\n", "normals_by_face", "/=", "(", "tf", ".", "norm", "(", "normals_by_face", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "1.e-12", ")", "# ditto", "\n", "return", "normals_by_face", ",", "vertices_by_index", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting.vertex_normals": [[36, 103], ["tensorflow.python.framework.ops.name_scope", "lighting._prepare_vertices_and_faces", "lighting._get_face_normals", "tensorflow.shape", "tensorflow.reduce_prod", "tensorflow.cast", "tensorflow.reshape", "tensorflow.cast", "tensorflow.SparseTensor", "tensorflow.sparse_reduce_sum", "tensorflow.transpose", "tf.transpose.set_shape", "vertices.get_shape", "tensorflow.shape", "tensorflow.stack", "tensorflow.tile", "tensorflow.concat", "vertices.get_shape", "tensorflow.tile", "tensorflow.norm", "range", "lighting._repeat_1d", "tensorflow.range", "tensorflow.tile", "lighting._repeat_1d", "lighting._repeat_1d", "tensorflow.constant", "tensorflow.convert_to_tensor", "tensorflow.range", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._prepare_vertices_and_faces", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._get_face_normals", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._repeat_1d", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._repeat_1d", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._repeat_1d"], ["", "def", "vertex_normals", "(", "vertices", ",", "faces", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Computes vertex normals for the given meshes.\n\n    This function takes a batch of meshes with common topology, and calculates vertex normals for each.\n\n    Args:\n        vertices: a `Tensor` of shape [*, vertex count, 3] or [*, vertex count, 4], where * represents arbitrarily\n            many leading (batch) dimensions.\n        faces: an int32 `Tensor` of shape [face count, 3]; each value is an index into the first dimension of `vertices`, and\n            each row defines one triangle.\n        name: an optional name for the operation\n\n    Returns:\n        a `Tensor` of shape [*, vertex count, 3], which for each vertex, gives the (normalised) average of the normals of\n        all faces that include that vertex\n    \"\"\"", "\n", "\n", "# This computes vertex normals, as the average of the normals of the faces each vertex is part of", "\n", "# vertices is indexed by *, vertex-index, x/y/z[/w]", "\n", "# faces is indexed by face-index, vertex-in-face", "\n", "# result is indexed by *, vertex-index, x/y/z", "\n", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "'VertexNormals'", ",", "[", "vertices", ",", "faces", "]", ")", "as", "scope", ":", "\n", "\n", "        ", "vertices", ",", "faces", "=", "_prepare_vertices_and_faces", "(", "vertices", ",", "faces", ")", "\n", "vertices", "=", "vertices", "[", "...", ",", ":", "3", "]", "# drop the w-coordinate if present", "\n", "\n", "vertices_ndim", "=", "vertices", ".", "get_shape", "(", ")", ".", "ndims", "\n", "normals_by_face", ",", "vertices_by_index", "=", "_get_face_normals", "(", "vertices", ",", "faces", ")", "# normals_by_face is indexed by face-index, *, x/y/z", "\n", "\n", "face_count", "=", "tf", ".", "shape", "(", "faces", ")", "[", "0", "]", "\n", "vbi_shape", "=", "tf", ".", "shape", "(", "vertices_by_index", ")", "\n", "N_extra", "=", "tf", ".", "reduce_prod", "(", "vbi_shape", "[", "1", ":", "-", "1", "]", ")", "# this is the number of 'elements' in the * dimensions", "\n", "\n", "assert", "vertices_ndim", "in", "{", "2", ",", "3", "}", "# ** keep it simple for now; in the general case we need a flattened outer product of ranges", "\n", "if", "vertices_ndim", "==", "2", ":", "\n", "            ", "extra_indices", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "extra_indices", "=", "[", "tf", ".", "tile", "(", "_repeat_1d", "(", "tf", ".", "range", "(", "N_extra", ")", ",", "3", ")", ",", "[", "face_count", "*", "3", "]", ")", "]", "\n", "\n", "", "sparse_index", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "stack", "(", "\n", "[", "# each element of this stack is repeated a number of times matching the things after, then tiled a number of times matching the things before, so that each has the same length", "\n", "_repeat_1d", "(", "tf", ".", "range", "(", "face_count", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "N_extra", "*", "9", ")", ",", "\n", "_repeat_1d", "(", "tf", ".", "reshape", "(", "faces", ",", "[", "-", "1", "]", ")", ",", "N_extra", "*", "3", ")", "\n", "]", "+", "extra_indices", "+", "[", "\n", "tf", ".", "tile", "(", "tf", ".", "constant", "(", "[", "0", ",", "1", ",", "2", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "tf", ".", "convert_to_tensor", "(", "[", "face_count", "*", "N_extra", "*", "3", "]", ")", ")", "\n", "]", ",", "axis", "=", "1", "\n", ")", ",", "\n", "tf", ".", "int64", "\n", ")", "\n", "sparse_value", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "normals_by_face", "[", ":", ",", "tf", ".", "newaxis", ",", "...", "]", ",", "[", "1", ",", "3", "]", "+", "[", "1", "]", "*", "(", "vertices_ndim", "-", "1", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "sparse_dense_shape", "=", "tf", ".", "cast", "(", "tf", ".", "concat", "(", "[", "[", "face_count", "]", ",", "vbi_shape", "]", ",", "axis", "=", "0", ")", ",", "tf", ".", "int64", ")", "\n", "normals_by_face_and_vertex", "=", "tf", ".", "SparseTensor", "(", "\n", "indices", "=", "sparse_index", ",", "\n", "values", "=", "sparse_value", ",", "\n", "dense_shape", "=", "sparse_dense_shape", "\n", ")", "# indexed by face-index, vertex-index, *, x/y/z", "\n", "\n", "summed_normals_by_vertex", "=", "tf", ".", "sparse_reduce_sum", "(", "normals_by_face_and_vertex", ",", "axis", "=", "0", ")", "# indexed by vertex-index, *, x/y/z", "\n", "# summed_normals_by_vertex = tf_render.Print(summed_normals_by_vertex, [summed_normals_by_vertex.shape],", "\n", "#                                     message='summed_normals_by_vertex', summarize=16)", "\n", "renormalised_normals_by_vertex", "=", "summed_normals_by_vertex", "/", "(", "tf", ".", "norm", "(", "summed_normals_by_vertex", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "+", "1.e-12", ")", "# ditto", "\n", "\n", "result", "=", "tf", ".", "transpose", "(", "renormalised_normals_by_vertex", ",", "range", "(", "1", ",", "vertices_ndim", "-", "1", ")", "+", "[", "0", ",", "vertices_ndim", "-", "1", "]", ")", "\n", "result", ".", "set_shape", "(", "vertices", ".", "get_shape", "(", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._static_map_fn": [[105, 108], ["tensorflow.stack", "f", "elements.get_shape", "xrange", "int", "elements.get_shape"], "function", ["None"], ["", "", "def", "_static_map_fn", "(", "f", ",", "elements", ")", ":", "\n", "    ", "assert", "elements", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "is", "not", "None", "\n", "return", "tf", ".", "stack", "(", "[", "f", "(", "elements", "[", "index", "]", ")", "for", "index", "in", "xrange", "(", "int", "(", "elements", ".", "get_shape", "(", ")", "[", "0", "]", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting.vertex_normals_pre_split_fixtopo": [[110, 157], ["tensorflow.python.framework.ops.name_scope", "int", "lighting._prepare_vertices_and_faces", "lighting._get_face_normals", "tensorflow.transpose", "tensorflow.tile", "range", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.gather", "tensorflow.scatter_add", "list_normals_by_ver.append", "vertices.get_shape", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.norm"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._prepare_vertices_and_faces", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._get_face_normals"], ["", "def", "vertex_normals_pre_split_fixtopo", "(", "vertices", ",", "faces", ",", "ver_ref_face", ",", "ver_ref_face_index", ",", "ver_ref_face_num", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param vertices: batch size, vertex-index, x/y/z[/w]\n    :param faces: face-index, vertex-in-face, tf_render.int32\n    :param ver_ref_face: vertex-index*flat\n    :param ver_ref_face_index: vertex-index*flat\n    :param ver_ref_face_num: vertex-index\n    :param name:\n    :return:\n    \"\"\"", "\n", "\"\"\"Computes vertex normals for the given pre-split meshes.\n\n    This function is identical to `vertex_normals`, except that it assumes each vertex is used by just one face, which\n    allows a more efficient implementation.\n    \"\"\"", "\n", "\n", "# This is identical to vertex_normals, but assumes each vertex appears in exactly one face, e.g. due to having been", "\n", "# processed by split_vertices_by_face", "\n", "# vertices is indexed by", "\n", "# faces is indexed by", "\n", "# result is indexed by *", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "'VertexNormalsPreSplit'", ",", "[", "vertices", ",", "faces", "]", ")", "as", "scope", ":", "\n", "        ", "vertices_num", "=", "int", "(", "vertices", ".", "get_shape", "(", ")", "[", "1", "]", ")", "\n", "vertices", ",", "faces", "=", "_prepare_vertices_and_faces", "(", "vertices", ",", "faces", ")", "\n", "normals_by_face", ",", "_", "=", "_get_face_normals", "(", "vertices", ",", "faces", ")", "# indexed by face-index, batch_size, x/y/z", "\n", "normals_by_face", "=", "tf", ".", "transpose", "(", "normals_by_face", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "ver_ref_face_num_tile", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "ver_ref_face_num", ",", "-", "1", ")", ",", "multiples", "=", "[", "1", ",", "3", "]", ")", "\n", "\n", "list_normals_by_ver", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "vertices", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "normals_by_face_b", "=", "normals_by_face", "[", "b", "]", "\n", "normals_by_vertex_flat_b", "=", "tf", ".", "gather", "(", "normals_by_face_b", ",", "ver_ref_face", ")", "\n", "\n", "nv", "=", "tf", ".", "scatter_add", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "shape", "=", "[", "vertices_num", ",", "3", "]", ")", ",", "trainable", "=", "False", ")", ",", "\n", "ver_ref_face_index", ",", "\n", "normals_by_vertex_flat_b", "\n", ")", "\n", "\n", "nv", "=", "nv", "/", "(", "ver_ref_face_num_tile", "+", "1e-6", ")", "\n", "nv", "=", "nv", "/", "(", "tf", ".", "norm", "(", "nv", ",", "axis", "=", "-", "1", ",", "keep_dims", "=", "True", ")", "+", "1e-12", ")", "# ditto", "\n", "\n", "list_normals_by_ver", ".", "append", "(", "nv", ")", "\n", "\n", "", "normals_by_vertex", "=", "tf", ".", "stack", "(", "list_normals_by_ver", ")", "\n", "return", "normals_by_vertex", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting.vertex_normals_pre_split": [[159, 194], ["tensorflow.python.framework.ops.name_scope", "lighting._prepare_vertices_and_faces", "lighting._get_face_normals", "tensorflow.reshape", "tensorflow.reshape", "int", "tensorflow.transpose", "tensorflow.shape", "tensorflow.shape", "tensorflow.scatter_nd", "faces.get_shape", "range", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.shape", "normals_by_face.get_shape", "normals_by_face.get_shape"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._prepare_vertices_and_faces", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._get_face_normals"], ["", "", "def", "vertex_normals_pre_split", "(", "vertices", ",", "faces", ",", "name", "=", "None", ",", "static", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes vertex normals for the given pre-split meshes.\n\n    This function is identical to `vertex_normals`, except that it assumes each vertex is used by just one face, which\n    allows a more efficient implementation.\n    \"\"\"", "\n", "\n", "# This is identical to vertex_normals, but assumes each vertex appears in exactly one face, e.g. due to having been", "\n", "# processed by split_vertices_by_face", "\n", "# vertices is indexed by *, vertex-index, x/y/z[/w]", "\n", "# faces is indexed by face-index, vertex-in-face", "\n", "# result is indexed by *, vertex-index, x/y/z", "\n", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "'VertexNormalsPreSplit'", ",", "[", "vertices", ",", "faces", "]", ")", "as", "scope", ":", "\n", "\n", "        ", "vertices", ",", "faces", "=", "_prepare_vertices_and_faces", "(", "vertices", ",", "faces", ")", "\n", "vertices", "=", "vertices", "[", "...", ",", ":", "3", "]", "# drop the w-coordinate if present", "\n", "face_count", "=", "int", "(", "faces", ".", "get_shape", "(", ")", "[", "0", "]", ")", "if", "static", "else", "tf", ".", "shape", "(", "faces", ")", "[", "0", "]", "\n", "\n", "normals_by_face", ",", "_", "=", "_get_face_normals", "(", "vertices", ",", "faces", ")", "# indexed by face-index, *, x/y/z", "\n", "normals_by_face_flat", "=", "tf", ".", "reshape", "(", "\n", "tf", ".", "transpose", "(", "normals_by_face", ",", "range", "(", "1", ",", "normals_by_face", ".", "get_shape", "(", ")", ".", "ndims", "-", "1", ")", "+", "[", "0", ",", "normals_by_face", ".", "get_shape", "(", ")", ".", "ndims", "-", "1", "]", ")", ",", "\n", "[", "-", "1", ",", "face_count", ",", "3", "]", "\n", ")", "# indexed by prod(*), face-index, x/y/z", "\n", "\n", "normals_by_vertex_flat", "=", "(", "_static_map_fn", "if", "static", "else", "tf", ".", "map_fn", ")", "(", "\n", "lambda", "normals_for_iib", ":", "tf", ".", "scatter_nd", "(", "\n", "indices", "=", "tf", ".", "reshape", "(", "faces", ",", "[", "-", "1", ",", "1", "]", ")", ",", "\n", "updates", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "normals_for_iib", "[", ":", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "[", "1", ",", "3", ",", "1", "]", ")", ",", "[", "-", "1", ",", "3", "]", ")", ",", "\n", "shape", "=", "tf", ".", "shape", "(", "vertices", ")", "[", "-", "2", ":", "]", "\n", ")", ",", "normals_by_face_flat", "\n", ")", "\n", "normals_by_vertex", "=", "tf", ".", "reshape", "(", "normals_by_vertex_flat", ",", "tf", ".", "shape", "(", "vertices", ")", ")", "\n", "\n", "return", "normals_by_vertex", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting.split_vertices_by_face": [[196, 240], ["tensorflow.python.framework.ops.name_scope", "lighting._prepare_vertices_and_faces", "tensorflow.shape", "tensorflow.reshape", "tensorflow.map_fn", "tensorflow.reshape", "tensorflow.reshape", "tf.reshape.set_shape", "tensorflow.shape", "tensorflow.concat", "tensorflow.range", "tf.reshape.set_shape", "tensorflow.gather", "vertices.get_shape", "faces.get_shape", "faces.get_shape", "vertices.get_shape", "vertices.get_shape"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting._prepare_vertices_and_faces"], ["", "", "def", "split_vertices_by_face", "(", "vertices", ",", "faces", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns a new mesh where each vertex is used by exactly one face.\n\n    This function takes a batch of meshes with common topology as input, and also returns a batch of meshes\n    with common topology. The resulting meshes have the same geometry, but each vertex is used by exactly\n    one face.\n\n    Args:\n        vertices: a `Tensor` of shape [*, vertex count, 3] or [*, vertex count, 4], where * represents arbitrarily\n            many leading (batch) dimensions.\n        faces: an int32 `Tensor` of shape [face count, 3]; each value is an index into the first dimension of `vertices`, and\n            each row defines one triangle.\n\n    Returns:\n        a tuple of two tensors `new_vertices, new_faces`, where `new_vertices` has shape [*, V, 3] or [*,  V, 4], where\n        V is the new vertex count after splitting, and `new_faces` has shape [F, 3] where F is the new face count after\n        splitting.\n    \"\"\"", "\n", "\n", "# This returns an equivalent mesh, with vertices duplicated such that there is exactly one vertex per face it is used in", "\n", "# vertices is indexed by *, vertex-index, x/y/z[/w]", "\n", "# faces is indexed by face-index, vertex-in-face", "\n", "# Ditto for results", "\n", "\n", "with", "ops", ".", "name_scope", "(", "name", ",", "'SplitVerticesByFace'", ",", "[", "vertices", ",", "faces", "]", ")", "as", "scope", ":", "\n", "\n", "        ", "vertices", ",", "faces", "=", "_prepare_vertices_and_faces", "(", "vertices", ",", "faces", ")", "\n", "\n", "vertices_shape", "=", "tf", ".", "shape", "(", "vertices", ")", "\n", "face_count", "=", "tf", ".", "shape", "(", "faces", ")", "[", "0", "]", "\n", "\n", "flat_vertices", "=", "tf", ".", "reshape", "(", "vertices", ",", "[", "-", "1", ",", "vertices_shape", "[", "-", "2", "]", ",", "vertices_shape", "[", "-", "1", "]", "]", ")", "\n", "new_flat_vertices", "=", "tf", ".", "map_fn", "(", "lambda", "vertices_for_iib", ":", "tf", ".", "gather", "(", "vertices_for_iib", ",", "faces", ")", ",", "flat_vertices", ")", "\n", "new_vertices", "=", "tf", ".", "reshape", "(", "new_flat_vertices", ",", "tf", ".", "concat", "(", "[", "vertices_shape", "[", ":", "-", "2", "]", ",", "[", "face_count", "*", "3", ",", "vertices_shape", "[", "-", "1", "]", "]", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "new_faces", "=", "tf", ".", "reshape", "(", "tf", ".", "range", "(", "face_count", "*", "3", ")", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "\n", "static_face_count", "=", "faces", ".", "get_shape", "(", ")", ".", "dims", "[", "0", "]", "if", "faces", ".", "get_shape", "(", ")", ".", "dims", "is", "not", "None", "else", "None", "\n", "static_new_vertex_count", "=", "static_face_count", "*", "3", "if", "static_face_count", "is", "not", "None", "else", "None", "\n", "if", "vertices", ".", "get_shape", "(", ")", ".", "dims", "is", "not", "None", ":", "\n", "            ", "new_vertices", ".", "set_shape", "(", "vertices", ".", "get_shape", "(", ")", ".", "dims", "[", ":", "-", "2", "]", "+", "[", "static_new_vertex_count", "]", "+", "vertices", ".", "get_shape", "(", ")", ".", "dims", "[", "-", "1", ":", "]", ")", "\n", "", "new_faces", ".", "set_shape", "(", "[", "static_face_count", ",", "3", "]", ")", "\n", "\n", "return", "new_vertices", ",", "new_faces", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.build_train_graph_3dmm_frustrum": [[22, 48], ["tensorflow.slice", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.slice", "tensorflow.squeeze", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "camera_utils.projectionFrustrumMatrix_batch", "tensorflow.constant", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.projectionFrustrumMatrix_batch"], ["def", "build_train_graph_3dmm_frustrum", "(", "intrinsic", ",", "near", "=", "3000.0", ",", "far", "=", "7000.0", ")", ":", "\n", "    ", "batch_size", "=", "intrinsic", ".", "shape", "[", "0", "]", "\n", "# def build_train_graph_3dmm_frustrum(self, intrinsic, near=0.1, far=2000.0):", "\n", "# intrinsic", "\n", "focal_len_x", "=", "tf", ".", "slice", "(", "intrinsic", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "focal_len_x", "=", "tf", ".", "squeeze", "(", "focal_len_x", ",", "axis", "=", "-", "1", ")", "\n", "\n", "focal_len_y", "=", "tf", ".", "slice", "(", "intrinsic", ",", "[", "0", ",", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "focal_len_y", "=", "tf", ".", "squeeze", "(", "focal_len_y", ",", "axis", "=", "-", "1", ")", "\n", "\n", "u", "=", "tf", ".", "slice", "(", "intrinsic", ",", "[", "0", ",", "0", ",", "2", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "u", "=", "tf", ".", "squeeze", "(", "u", ",", "axis", "=", "-", "1", ")", "\n", "\n", "v", "=", "tf", ".", "slice", "(", "intrinsic", ",", "[", "0", ",", "1", ",", "2", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "v", "=", "tf", ".", "squeeze", "(", "v", ",", "axis", "=", "-", "1", ")", "\n", "\n", "#", "\n", "near", "=", "tf", ".", "reshape", "(", "tf", ".", "constant", "(", "near", ")", ",", "shape", "=", "[", "1", ",", "1", "]", ")", "\n", "far", "=", "tf", ".", "reshape", "(", "tf", ".", "constant", "(", "far", ")", ",", "shape", "=", "[", "1", ",", "1", "]", ")", "\n", "near", "=", "tf", ".", "tile", "(", "near", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "far", "=", "tf", ".", "tile", "(", "far", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "#", "\n", "mtx_frustrum", "=", "projectionFrustrumMatrix_batch", "(", "focal_len_x", ",", "focal_len_y", ",", "u", ",", "v", ",", "near", ",", "far", ")", "\n", "\n", "return", "mtx_frustrum", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.build_train_graph_3dmm_camera": [[49, 77], ["range", "isinstance", "len", "src_common.geometry.geo_utils.pose_vec2mat", "tensorflow.slice", "tensorflow.slice", "tensorflow.expand_dims", "camera_utils.project_batch", "camera_utils.modelViewMatrix_batch", "camera_utils.ext_to_eye_batch", "list_ext.append", "list_proj.append", "list_mv.append", "list_eye.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.pose_vec2mat", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.project_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.modelViewMatrix_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.ext_to_eye_batch"], ["", "def", "build_train_graph_3dmm_camera", "(", "intrinsic", ",", "pose_6dof", ")", ":", "\n", "    ", "if", "isinstance", "(", "pose_6dof", ",", "list", ")", "==", "False", ":", "\n", "        ", "pose_6dof", "=", "[", "pose_6dof", "]", "\n", "\n", "", "list_ext", "=", "[", "]", "\n", "list_proj", "=", "[", "]", "\n", "list_mv", "=", "[", "]", "\n", "list_eye", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "pose_6dof", ")", ")", ":", "\n", "        ", "mtx_ext", "=", "pose_vec2mat", "(", "pose_6dof", "[", "i", "]", ",", "False", ")", "\n", "mtx_rot", "=", "tf", ".", "slice", "(", "mtx_ext", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "mtx_t", "=", "tf", ".", "slice", "(", "pose_6dof", "[", "i", "]", ",", "[", "0", ",", "3", "]", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "mtx_t", "=", "tf", ".", "expand_dims", "(", "mtx_t", ",", "-", "1", ")", "\n", "\n", "# ext", "\n", "mtx_proj", "=", "project_batch", "(", "intrinsic", ",", "mtx_rot", ",", "mtx_t", ")", "\n", "#", "\n", "mtx_mv", "=", "modelViewMatrix_batch", "(", "mtx_rot", ",", "mtx_t", ")", "\n", "#", "\n", "mtx_eye", "=", "ext_to_eye_batch", "(", "mtx_rot", ",", "mtx_t", ")", "\n", "\n", "list_ext", ".", "append", "(", "mtx_ext", ")", "\n", "list_proj", ".", "append", "(", "mtx_proj", ")", "\n", "list_mv", ".", "append", "(", "mtx_mv", ")", "\n", "list_eye", ".", "append", "(", "mtx_eye", ")", "\n", "\n", "", "return", "list_ext", ",", "list_proj", ",", "list_mv", ",", "list_eye", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.project_batch": [[81, 93], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.concat", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat"], "function", ["None"], ["def", "project_batch", "(", "mtx_intrinsic", ",", "rot_batch", ",", "t_batch", ")", ":", "\n", "    ", "batch_size", "=", "mtx_intrinsic", ".", "shape", "[", "0", "]", "\n", "\n", "M", "=", "tf", ".", "matmul", "(", "mtx_intrinsic", ",", "rot_batch", ")", "\n", "p4", "=", "tf", ".", "matmul", "(", "mtx_intrinsic", ",", "t_batch", ")", "\n", "proj", "=", "tf", ".", "concat", "(", "[", "M", ",", "p4", "]", ",", "axis", "=", "2", ")", "\n", "\n", "r4", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "r4", "=", "tf", ".", "tile", "(", "r4", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "proj", "=", "tf", ".", "concat", "(", "[", "proj", ",", "r4", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "proj", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.project3d_batch": [[94, 109], ["tensorflow.ones", "tensorflow.concat", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.shape"], "function", ["None"], ["", "def", "project3d_batch", "(", "pt_batch", ",", "mtx_proj_batch", ")", ":", "\n", "    ", "batch_size", "=", "pt_batch", ".", "shape", "[", "0", "]", "\n", "\n", "homo_batch", "=", "tf", ".", "ones", "(", "[", "batch_size", ",", "tf", ".", "shape", "(", "pt_batch", ")", "[", "1", "]", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "pt_batch_homo", "=", "tf", ".", "concat", "(", "[", "pt_batch", ",", "homo_batch", "]", ",", "axis", "=", "2", ")", "\n", "pt_batch_homo_trans", "=", "tf", ".", "transpose", "(", "pt_batch_homo", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "pt_batch_homo_2d_trans", "=", "tf", ".", "matmul", "(", "mtx_proj_batch", ",", "pt_batch_homo_trans", ")", "\n", "pt_batch_homo_2d", "=", "tf", ".", "transpose", "(", "pt_batch_homo_2d_trans", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "pt_batch_homo_2d_main", "=", "pt_batch_homo_2d", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "pt_batch_homo_2d_w", "=", "pt_batch_homo_2d", "[", ":", ",", ":", ",", "2", "]", "\n", "pt_batch_homo_2d_w", "=", "tf", ".", "expand_dims", "(", "pt_batch_homo_2d_w", ",", "-", "1", ")", "\n", "pt_batch_homo_2d_normal", "=", "pt_batch_homo_2d_main", "/", "(", "pt_batch_homo_2d_w", "+", "1e-6", ")", "\n", "\n", "return", "pt_batch_homo_2d_normal", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.ext_to_eye_batch": [[110, 116], ["tensorflow.transpose", "tensorflow.squeeze", "tensorflow.matmul"], "function", ["None"], ["", "def", "ext_to_eye_batch", "(", "rot_batch", ",", "t_batch", ")", ":", "\n", "#mtx_t_trans = tf_render.expand_dims(t_batch, 1)", "\n", "    ", "t_batch", "=", "tf", ".", "transpose", "(", "t_batch", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "eye_trans", "=", "-", "tf", ".", "matmul", "(", "t_batch", ",", "rot_batch", ")", "\n", "eye", "=", "tf", ".", "squeeze", "(", "eye_trans", ",", "axis", "=", "1", ")", "\n", "return", "eye", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.modelViewMatrix_batch": [[117, 148], ["tensorflow.constant", "tensorflow.tile", "tensorflow.matmul", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.eye", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "camera_utils.ext_to_eye_batch"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.ext_to_eye_batch"], ["", "def", "modelViewMatrix_batch", "(", "rot_batch", ",", "t_batch", ")", ":", "\n", "    ", "batch_size", "=", "rot_batch", ".", "shape", "[", "0", "]", "\n", "\n", "mtx_inv", "=", "tf", ".", "constant", "(", "\n", "[", "\n", "[", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "-", "1.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "-", "1.", "]", "\n", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "3", "]", "\n", ")", "\n", "mtx_inv", "=", "tf", ".", "tile", "(", "mtx_inv", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Inv rotate", "\n", "rot_inv", "=", "tf", ".", "matmul", "(", "mtx_inv", ",", "rot_batch", ")", "\n", "c4", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "0.", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "1", "]", ")", "\n", "c4", "=", "tf", ".", "tile", "(", "c4", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "rot_inv", "=", "tf", ".", "concat", "(", "[", "rot_inv", ",", "c4", "]", ",", "axis", "=", "2", ")", "\n", "\n", "r4", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "r4", "=", "tf", ".", "tile", "(", "r4", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "rot_inv", "=", "tf", ".", "concat", "(", "[", "rot_inv", ",", "r4", "]", ",", "axis", "=", "1", ")", "\n", "\n", "eye_inv", "=", "-", "ext_to_eye_batch", "(", "rot_batch", ",", "t_batch", ")", "\n", "eye_inv_trans", "=", "tf", ".", "expand_dims", "(", "eye_inv", ",", "axis", "=", "-", "1", ")", "\n", "trans_id_inv", "=", "tf", ".", "eye", "(", "3", ",", "batch_shape", "=", "[", "batch_size", "]", ")", "\n", "trans_inv", "=", "tf", ".", "concat", "(", "[", "trans_id_inv", ",", "eye_inv_trans", "]", ",", "axis", "=", "2", ")", "\n", "trans_inv", "=", "tf", ".", "concat", "(", "[", "trans_inv", ",", "r4", "]", ",", "axis", "=", "1", ")", "\n", "\n", "mv", "=", "tf", ".", "matmul", "(", "rot_inv", ",", "trans_inv", ")", "\n", "\n", "return", "mv", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.projectionFrustrumMatrix_batch": [[152, 189], ["tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.concat"], "function", ["None"], ["def", "projectionFrustrumMatrix_batch", "(", "focal_len_x", ",", "focal_len_y", ",", "u", ",", "v", ",", "near", ",", "far", ")", ":", "\n", "    ", "image_width_batch", "=", "2", "*", "u", "\n", "image_height_batch", "=", "2", "*", "v", "\n", "\n", "# From triangle similarity", "\n", "width", "=", "image_width_batch", "*", "near", "/", "focal_len_x", "\n", "height", "=", "image_height_batch", "*", "near", "/", "focal_len_y", "\n", "\n", "right", "=", "width", "-", "(", "u", "*", "near", "/", "focal_len_x", ")", "\n", "left", "=", "right", "-", "width", "\n", "\n", "top", "=", "v", "*", "near", "/", "focal_len_y", "\n", "bottom", "=", "top", "-", "height", "\n", "\n", "vertical_range", "=", "right", "-", "left", "\n", "p00", "=", "2", "*", "near", "/", "vertical_range", "\n", "p02", "=", "(", "right", "+", "left", ")", "/", "vertical_range", "\n", "\n", "horizon_range", "=", "top", "-", "bottom", "\n", "p11", "=", "2", "*", "near", "/", "horizon_range", "\n", "p12", "=", "(", "top", "+", "bottom", ")", "/", "horizon_range", "\n", "\n", "depth_range", "=", "far", "-", "near", "\n", "p_22", "=", "-", "(", "far", "+", "near", ")", "/", "depth_range", "\n", "p_23", "=", "-", "2.0", "*", "(", "far", "*", "near", "/", "depth_range", ")", "\n", "\n", "zero_fill", "=", "tf", ".", "zeros_like", "(", "p00", ")", "\n", "minus_one_fill", "=", "tf", ".", "ones_like", "(", "p00", ")", "\n", "\n", "r1", "=", "tf", ".", "stack", "(", "[", "p00", ",", "zero_fill", ",", "p02", ",", "zero_fill", "]", ",", "axis", "=", "2", ")", "\n", "r2", "=", "tf", ".", "stack", "(", "[", "zero_fill", ",", "p11", ",", "p12", ",", "zero_fill", "]", ",", "axis", "=", "2", ")", "\n", "r3", "=", "tf", ".", "stack", "(", "[", "zero_fill", ",", "zero_fill", ",", "p_22", ",", "p_23", "]", ",", "axis", "=", "2", ")", "\n", "r4", "=", "tf", ".", "stack", "(", "[", "zero_fill", ",", "zero_fill", ",", "-", "minus_one_fill", ",", "zero_fill", "]", ",", "axis", "=", "2", ")", "\n", "\n", "P", "=", "tf", ".", "concat", "(", "[", "r1", ",", "r2", ",", "r3", ",", "r4", "]", ",", "axis", "=", "1", ",", "name", "=", "'mtx_fustrum_batch'", ")", "\n", "\n", "return", "P", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align_facenet.get_facenet_align_lm": [[9, 59], ["tensorflow.constant", "tensorflow.cast", "numpy.min", "numpy.max", "float"], "function", ["None"], ["def", "get_facenet_align_lm", "(", "img_height", ")", ":", "\n", "    ", "lm_facenet_align", "=", "[", "\n", "(", "0.0792396913815", ",", "0.339223741112", ")", ",", "(", "0.0829219487236", ",", "0.456955367943", ")", ",", "\n", "(", "0.0967927109165", ",", "0.575648016728", ")", ",", "(", "0.122141515615", ",", "0.691921601066", ")", ",", "\n", "(", "0.168687863544", ",", "0.800341263616", ")", ",", "(", "0.239789390707", ",", "0.895732504778", ")", ",", "\n", "(", "0.325662452515", ",", "0.977068762493", ")", ",", "(", "0.422318282013", ",", "1.04329000149", ")", ",", "\n", "(", "0.531777802068", ",", "1.06080371126", ")", ",", "(", "0.641296298053", ",", "1.03981924107", ")", ",", "\n", "(", "0.738105872266", ",", "0.972268833998", ")", ",", "(", "0.824444363295", ",", "0.889624082279", ")", ",", "\n", "(", "0.894792677532", ",", "0.792494155836", ")", ",", "(", "0.939395486253", ",", "0.681546643421", ")", ",", "\n", "(", "0.96111933829", ",", "0.562238253072", ")", ",", "(", "0.970579841181", ",", "0.441758925744", ")", ",", "\n", "(", "0.971193274221", ",", "0.322118743967", ")", ",", "(", "0.163846223133", ",", "0.249151738053", ")", ",", "\n", "(", "0.21780354657", ",", "0.204255863861", ")", ",", "(", "0.291299351124", ",", "0.192367318323", ")", ",", "\n", "(", "0.367460241458", ",", "0.203582210627", ")", ",", "(", "0.4392945113", ",", "0.233135599851", ")", ",", "\n", "(", "0.586445962425", ",", "0.228141644834", ")", ",", "(", "0.660152671635", ",", "0.195923841854", ")", ",", "\n", "(", "0.737466449096", ",", "0.182360984545", ")", ",", "(", "0.813236546239", ",", "0.192828009114", ")", ",", "\n", "(", "0.8707571886", ",", "0.235293377042", ")", ",", "(", "0.51534533827", ",", "0.31863546193", ")", ",", "\n", "(", "0.516221448289", ",", "0.396200446263", ")", ",", "(", "0.517118861835", ",", "0.473797687758", ")", ",", "\n", "(", "0.51816430343", ",", "0.553157797772", ")", ",", "(", "0.433701156035", ",", "0.604054457668", ")", ",", "\n", "(", "0.475501237769", ",", "0.62076344024", ")", ",", "(", "0.520712933176", ",", "0.634268222208", ")", ",", "\n", "(", "0.565874114041", ",", "0.618796581487", ")", ",", "(", "0.607054002672", ",", "0.60157671656", ")", ",", "\n", "(", "0.252418718401", ",", "0.331052263829", ")", ",", "(", "0.298663015648", ",", "0.302646354002", ")", ",", "\n", "(", "0.355749724218", ",", "0.303020650651", ")", ",", "(", "0.403718978315", ",", "0.33867711083", ")", ",", "\n", "(", "0.352507175597", ",", "0.349987615384", ")", ",", "(", "0.296791759886", ",", "0.350478978225", ")", ",", "\n", "(", "0.631326076346", ",", "0.334136672344", ")", ",", "(", "0.679073381078", ",", "0.29645404267", ")", ",", "\n", "(", "0.73597236153", ",", "0.294721285802", ")", ",", "(", "0.782865376271", ",", "0.321305281656", ")", ",", "\n", "(", "0.740312274764", ",", "0.341849376713", ")", ",", "(", "0.68499850091", ",", "0.343734332172", ")", ",", "\n", "(", "0.353167761422", ",", "0.746189164237", ")", ",", "(", "0.414587777921", ",", "0.719053835073", ")", ",", "\n", "(", "0.477677654595", ",", "0.706835892494", ")", ",", "(", "0.522732900812", ",", "0.717092275768", ")", ",", "\n", "(", "0.569832064287", ",", "0.705414478982", ")", ",", "(", "0.635195811927", ",", "0.71565572516", ")", ",", "\n", "(", "0.69951672331", ",", "0.739419187253", ")", ",", "(", "0.639447159575", ",", "0.805236879972", ")", ",", "\n", "(", "0.576410514055", ",", "0.835436670169", ")", ",", "(", "0.525398405766", ",", "0.841706377792", ")", ",", "\n", "(", "0.47641545769", ",", "0.837505914975", ")", ",", "(", "0.41379548902", ",", "0.810045601727", ")", ",", "\n", "(", "0.380084785646", ",", "0.749979603086", ")", ",", "(", "0.477955996282", ",", "0.74513234612", ")", ",", "\n", "(", "0.523389793327", ",", "0.748924302636", ")", ",", "(", "0.571057789237", ",", "0.74332894691", ")", ",", "\n", "(", "0.672409137852", ",", "0.744177032192", ")", ",", "(", "0.572539621444", ",", "0.776609286626", ")", ",", "\n", "(", "0.5240106503", ",", "0.783370783245", ")", ",", "(", "0.477561227414", ",", "0.778476346951", ")", "\n", "]", "\n", "\n", "TPL_MIN", ",", "TPL_MAX", "=", "np", ".", "min", "(", "lm_facenet_align", ",", "axis", "=", "0", ")", ",", "np", ".", "max", "(", "lm_facenet_align", ",", "axis", "=", "0", ")", "\n", "lm_facenet_align", "=", "(", "lm_facenet_align", "-", "TPL_MIN", ")", "/", "(", "TPL_MAX", "-", "TPL_MIN", ")", "\n", "defined_lm_facenet_align", "=", "tf", ".", "constant", "(", "lm_facenet_align", ",", "shape", "=", "[", "1", ",", "68", ",", "2", "]", ")", "\n", "# defined_lm_facenet_align = defined_lm_facenet_align[:, 17:, :]", "\n", "# defined_lm_facenet_align = defined_lm_facenet_align[:, 48:, :]", "\n", "# defined_lm_facenet_align = lm_dlib_to_celebA(defined_lm_facenet_align)", "\n", "\n", "facenet_scale", "=", "float", "(", "96", ")", "/", "110.0", "\n", "defined_lm_facenet_align", "=", "img_height", "*", "defined_lm_facenet_align", "*", "facenet_scale", "+", "img_height", "*", "(", "1", "-", "facenet_scale", ")", "/", "2", "\n", "defined_lm_facenet_align", "=", "tf", ".", "cast", "(", "defined_lm_facenet_align", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "return", "defined_lm_facenet_align", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align_facenet.facenet_align": [[60, 83], ["range", "isinstance", "isinstance", "len", "tensorflow.pad", "tensorflow.device", "align.lm2d_trans", "tensorflow.contrib.image.matrices_to_flat_transforms", "tensorflow.contrib.image.transform", "list_image_warp.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.lm2d_trans"], ["", "def", "facenet_align", "(", "list_image", ",", "list_lm", ",", "std_lm", ",", "img_height", ",", "img_width", ")", ":", "\n", "    ", "if", "isinstance", "(", "list_image", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_image", "=", "[", "list_image", "]", "\n", "", "if", "isinstance", "(", "list_lm", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_lm", "=", "[", "list_lm", "]", "\n", "\n", "", "list_image_warp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_image", ")", ")", ":", "\n", "        ", "images", "=", "list_image", "[", "i", "]", "\n", "images_pad", "=", "tf", ".", "pad", "(", "images", ",", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "56", ",", "56", "]", ",", "[", "56", ",", "56", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'REFLECT'", ")", "\n", "lm2d_align", "=", "list_lm", "[", "i", "]", "# bs, lm_num, xy", "\n", "lm2d_align", "=", "lm2d_align", "+", "56", "\n", "# lm2d_align = lm2d_align[:, 48:, :]", "\n", "# lm2d_align = lm_dlib_to_celebA(lm2d_align)", "\n", "#", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "trans_mat", "=", "lm2d_trans", "(", "std_lm", ",", "lm2d_align", ")", "\n", "# image_warp = transform(images, trans_mat)", "\n", "flat_transforms", "=", "tf", ".", "contrib", ".", "image", ".", "matrices_to_flat_transforms", "(", "trans_mat", ")", "\n", "image_warp", "=", "tf", ".", "contrib", ".", "image", ".", "transform", "(", "images_pad", ",", "flat_transforms", ",", "interpolation", "=", "'BILINEAR'", ",", "\n", "output_shape", "=", "[", "img_height", ",", "img_width", "]", ")", "\n", "list_image_warp", ".", "append", "(", "image_warp", ")", "\n", "", "", "return", "list_image_warp", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.Quaternion2Mat": [[10, 34], ["tensorflow.squeeze", "tensorflow.stack", "tensorflow.reshape"], "function", ["None"], ["def", "Quaternion2Mat", "(", "quat", ")", ":", "\n", "    ", "\"\"\"\n    :param quat: 4\n    :return: 3x3\n    \"\"\"", "\n", "quat", "=", "tf", ".", "squeeze", "(", "quat", ")", "\n", "w", "=", "quat", "[", "0", "]", "\n", "x", "=", "quat", "[", "1", "]", "\n", "y", "=", "quat", "[", "2", "]", "\n", "z", "=", "quat", "[", "3", "]", "\n", "\n", "val00", "=", "1", "-", "2", "*", "y", "*", "y", "-", "2", "*", "z", "*", "z", "\n", "val01", "=", "2", "*", "x", "*", "y", "-", "2", "*", "z", "*", "w", "\n", "val02", "=", "2", "*", "x", "*", "z", "+", "2", "*", "y", "*", "w", "\n", "val10", "=", "2", "*", "x", "*", "y", "+", "2", "*", "z", "*", "w", "\n", "\n", "val11", "=", "1", "-", "2", "*", "x", "*", "x", "-", "2", "*", "z", "*", "z", "\n", "val12", "=", "2", "*", "y", "*", "z", "-", "2", "*", "x", "*", "w", "\n", "val20", "=", "2", "*", "x", "*", "z", "-", "2", "*", "y", "*", "w", "\n", "val21", "=", "2", "*", "y", "*", "z", "+", "2", "*", "x", "*", "w", "\n", "val22", "=", "1", "-", "2", "*", "x", "*", "x", "-", "2", "*", "y", "*", "y", "\n", "rotation", "=", "tf", ".", "stack", "(", "[", "val00", ",", "val01", ",", "val02", ",", "val10", ",", "val11", ",", "val12", ",", "val20", ",", "val21", ",", "val22", "]", ",", "axis", "=", "0", ")", "\n", "rotation", "=", "tf", ".", "reshape", "(", "rotation", ",", "shape", "=", "[", "3", ",", "3", "]", ")", "\n", "return", "rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.CenterOfPoints": [[35, 38], ["tensorflow.reduce_mean"], "function", ["None"], ["", "def", "CenterOfPoints", "(", "points", ")", ":", "\n", "    ", "center", "=", "tf", ".", "reduce_mean", "(", "points", ",", "axis", "=", "1", ")", "# 3", "\n", "return", "center", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.UncenterPoints": [[39, 46], ["align.CenterOfPoints", "tensorflow.expand_dims", "tensorflow.tile", "points.get_shape().as_list", "points.get_shape"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.CenterOfPoints"], ["", "def", "UncenterPoints", "(", "points", ")", ":", "\n", "    ", "point_num", "=", "points", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "center", "=", "CenterOfPoints", "(", "points", ")", "# 2", "\n", "center", "=", "tf", ".", "expand_dims", "(", "center", ",", "axis", "=", "-", "1", ")", "# 2x1", "\n", "center_tile", "=", "tf", ".", "tile", "(", "center", ",", "[", "1", ",", "point_num", "]", ")", "\n", "u_points", "=", "points", "-", "center_tile", "\n", "return", "u_points", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.ScaleFromPoints": [[47, 62], ["align.UncenterPoints", "align.UncenterPoints", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.square", "tensorflow.square", "tensorflow.norm", "tensorflow.norm"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.UncenterPoints", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.UncenterPoints"], ["", "def", "ScaleFromPoints", "(", "left_points", ",", "right_points", ")", ":", "\n", "    ", "\"\"\"\n    Compute relative scale from left points to right points\n    :param left_points: 3xN\n    :param right_points: 3xN\n    :return:\n    \"\"\"", "\n", "lefts", "=", "UncenterPoints", "(", "left_points", ")", "# 3xN", "\n", "rights", "=", "UncenterPoints", "(", "right_points", ")", "\n", "\n", "## Compute scale", "\n", "left_norm_square", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "norm", "(", "lefts", ",", "axis", "=", "0", ")", ")", ")", "\n", "right_norm_square", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "norm", "(", "rights", ",", "axis", "=", "0", ")", ")", ")", "\n", "scale", "=", "tf", ".", "sqrt", "(", "right_norm_square", "/", "left_norm_square", ")", "\n", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.TransformFromPointsTF": [[63, 122], ["align.UncenterPoints", "align.UncenterPoints", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.matmul", "tensorflow.stack", "tensorflow.reshape", "tensorflow.self_adjoint_eig", "tensorflow.squeeze", "align.Quaternion2Mat", "align.CenterOfPoints", "align.CenterOfPoints", "tensorflow.squeeze", "tensorflow.square", "tensorflow.square", "tensorflow.slice", "tensorflow.matmul", "tensorflow.norm", "tensorflow.norm", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.UncenterPoints", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.UncenterPoints", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.Quaternion2Mat", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.CenterOfPoints", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.CenterOfPoints"], ["", "def", "TransformFromPointsTF", "(", "left_points", ",", "right_points", ")", ":", "\n", "    ", "\"\"\"\n    Tensorflow implementatin of aligning left points to right points\n    :param left_points: 3xN\n    :param right_points: 3xN\n    :return:\n    \"\"\"", "\n", "\n", "lefts", "=", "UncenterPoints", "(", "left_points", ")", "# 3xN", "\n", "rights", "=", "UncenterPoints", "(", "right_points", ")", "\n", "# lefts = left_points", "\n", "# rights = right_points", "\n", "\n", "## Compute scale", "\n", "left_norm_square", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "norm", "(", "lefts", ",", "axis", "=", "0", ")", ")", ")", "\n", "right_norm_square", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "tf", ".", "norm", "(", "rights", ",", "axis", "=", "0", ")", ")", ")", "\n", "scale", "=", "tf", ".", "sqrt", "(", "right_norm_square", "/", "(", "left_norm_square", "+", "1e-6", ")", ")", "\n", "\n", "## Compute rotation", "\n", "#rights = tf.Print(rights, [rights], message='rights', summarize=2 * 68)", "\n", "M", "=", "tf", ".", "matmul", "(", "lefts", ",", "rights", ",", "transpose_b", "=", "True", ")", "# 3x3", "\n", "#M = tf.Print(M, [M.shape, M], message=\"M\", summarize=64)", "\n", "\n", "N00", "=", "M", "[", "0", ",", "0", "]", "+", "M", "[", "1", ",", "1", "]", "+", "M", "[", "2", ",", "2", "]", "\n", "N11", "=", "M", "[", "0", ",", "0", "]", "-", "M", "[", "1", ",", "1", "]", "-", "M", "[", "2", ",", "2", "]", "\n", "N22", "=", "-", "M", "[", "0", ",", "0", "]", "+", "M", "[", "1", ",", "1", "]", "-", "M", "[", "2", ",", "2", "]", "\n", "N33", "=", "-", "M", "[", "0", ",", "0", "]", "-", "M", "[", "1", ",", "1", "]", "+", "M", "[", "2", ",", "2", "]", "\n", "\n", "N01", "=", "M", "[", "1", ",", "2", "]", "-", "M", "[", "2", ",", "1", "]", "\n", "N10", "=", "M", "[", "1", ",", "2", "]", "-", "M", "[", "2", ",", "1", "]", "\n", "N02", "=", "M", "[", "2", ",", "0", "]", "-", "M", "[", "0", ",", "2", "]", "\n", "N20", "=", "M", "[", "2", ",", "0", "]", "-", "M", "[", "0", ",", "2", "]", "\n", "\n", "N03", "=", "M", "[", "0", ",", "1", "]", "-", "M", "[", "1", ",", "0", "]", "\n", "N30", "=", "M", "[", "0", ",", "1", "]", "-", "M", "[", "1", ",", "0", "]", "\n", "N12", "=", "M", "[", "0", ",", "1", "]", "+", "M", "[", "1", ",", "0", "]", "\n", "N21", "=", "M", "[", "0", ",", "1", "]", "+", "M", "[", "1", ",", "0", "]", "\n", "\n", "N13", "=", "M", "[", "0", ",", "2", "]", "+", "M", "[", "2", ",", "0", "]", "\n", "N31", "=", "M", "[", "0", ",", "2", "]", "+", "M", "[", "2", ",", "0", "]", "\n", "N23", "=", "M", "[", "1", ",", "2", "]", "+", "M", "[", "2", ",", "1", "]", "\n", "N32", "=", "M", "[", "1", ",", "2", "]", "+", "M", "[", "2", ",", "1", "]", "\n", "N", "=", "tf", ".", "stack", "(", "[", "N00", ",", "N01", ",", "N02", ",", "N03", ",", "N10", ",", "N11", ",", "N12", ",", "N13", ",", "N20", ",", "N21", ",", "N22", ",", "N23", ",", "N30", ",", "N31", ",", "N32", ",", "N33", "]", ",", "axis", "=", "0", ")", "\n", "N", "=", "tf", ".", "reshape", "(", "N", ",", "[", "4", ",", "4", "]", ")", "\n", "\n", "#N = tf.Print(N, [N.shape, N], message=\"N\", summarize=64)", "\n", "\n", "eigen_vals", ",", "eigen_vecs", "=", "tf", ".", "self_adjoint_eig", "(", "N", ")", "\n", "quaternion", "=", "tf", ".", "squeeze", "(", "(", "tf", ".", "slice", "(", "eigen_vecs", ",", "[", "0", ",", "3", "]", ",", "[", "4", ",", "1", "]", ")", ")", ")", "# 4", "\n", "#quaternion = tf_render.Print(quaternion, [quaternion], message='quaternion', summarize=4)", "\n", "rotation", "=", "Quaternion2Mat", "(", "quaternion", ")", "# 3x3", "\n", "\n", "## Compute translation", "\n", "left_center", "=", "CenterOfPoints", "(", "left_points", ")", "\n", "right_center", "=", "CenterOfPoints", "(", "right_points", ")", "\n", "rot_left_center", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "rotation", ",", "tf", ".", "expand_dims", "(", "left_center", ",", "axis", "=", "-", "1", ")", ")", ")", "# 3", "\n", "translation", "=", "right_center", "-", "scale", "*", "rot_left_center", "\n", "\n", "return", "scale", ",", "rotation", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.lm2d_trans": [[124, 155], ["tensorflow.constant", "range", "tensorflow.stack", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.transpose", "tensorflow.concat", "tensorflow.transpose", "align.TransformFromPointsTF", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.concat", "list_trans_mtx.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align.TransformFromPointsTF"], ["", "def", "lm2d_trans", "(", "lm_src", ",", "lm_tar", ")", ":", "\n", "    ", "filler_mtx", "=", "tf", ".", "constant", "(", "[", "0.0", ",", "0.0", ",", "1.0", "]", ",", "shape", "=", "[", "1", ",", "3", "]", ")", "\n", "list_trans_mtx", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "lm_src", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "filler_z", "=", "tf", ".", "constant", "(", "[", "0.0", "]", ",", "shape", "=", "[", "1", ",", "1", "]", ")", "\n", "filler_z", "=", "tf", ".", "tile", "(", "filler_z", ",", "multiples", "=", "[", "lm_src", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "b_src", "=", "lm_src", "[", "b", "]", "\n", "b_src", "=", "tf", ".", "concat", "(", "[", "b_src", ",", "filler_z", "]", ",", "axis", "=", "1", ")", "\n", "b_src", "=", "tf", ".", "transpose", "(", "b_src", ")", "\n", "b_tar", "=", "lm_tar", "[", "b", "]", "\n", "b_tar", "=", "tf", ".", "concat", "(", "[", "b_tar", ",", "filler_z", "]", ",", "axis", "=", "1", ")", "\n", "b_tar", "=", "tf", ".", "transpose", "(", "b_tar", ")", "\n", "\n", "#b_src = tf.Print(b_src, [b_src], message='b_src', summarize=2 * 68)", "\n", "# b_tar = tf_render.Print(b_tar, [b_tar], message='b_tar', summarize=16)", "\n", "s", ",", "rot_mat", ",", "translation", "=", "TransformFromPointsTF", "(", "b_src", ",", "b_tar", ")", "\n", "\n", "# s = tf_render.Print(s, [s, s.shape], message='s', summarize=1)", "\n", "\n", "# rot_mat = tf_render.Print(rot_mat, [rot_mat], message='rot_mat', summarize=9)", "\n", "# translation = tf_render.Print(translation, [translation], message='translation', summarize=3)", "\n", "rot_mat", "=", "rot_mat", "[", "0", ":", "2", ",", "0", ":", "2", "]", "*", "s", "\n", "translation", "=", "translation", "[", "0", ":", "2", "]", "\n", "translation", "=", "tf", ".", "expand_dims", "(", "translation", ",", "axis", "=", "-", "1", ")", "\n", "\n", "ext_mat", "=", "tf", ".", "concat", "(", "[", "rot_mat", ",", "translation", "]", ",", "axis", "=", "1", ")", "\n", "ext_mat", "=", "tf", ".", "concat", "(", "[", "ext_mat", ",", "filler_mtx", "]", ",", "axis", "=", "0", ")", "\n", "list_trans_mtx", ".", "append", "(", "ext_mat", ")", "\n", "\n", "", "trans_mtx", "=", "tf", ".", "stack", "(", "list_trans_mtx", ")", "\n", "return", "trans_mtx", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.generate_align_self.set_ext_mesh_nose_centre_radio": [[27, 62], ["vertex_y_max", "vertex_y_min", "print", "tf.constant", "ExtMtxBatch.create_location_batch().rotMtx_location", "RotationMtxBatch.create_matrixRot_batch().eular_rotMtx", "tf.expand_dims", "tf.expand_dims", "tf.reverse", "tf.concat", "ExtMtxBatch.create_location_batch", "RotationMtxBatch.create_matrixRot_batch"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.trimesh_util.vertex_y_max", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.trimesh_util.vertex_y_min", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_location", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.eular_rotMtx", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_location_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.create_matrixRot_batch"], ["def", "set_ext_mesh_nose_centre_radio", "(", "h_lrgp", ",", "intrinsic_mtx", ",", "mesh_tri", ",", "image_height", ",", "image_radio_face", ")", ":", "\n", "    ", "idx_nose", "=", "h_lrgp", ".", "idx_lm68_np", "[", "34", "-", "1", "]", "\n", "idx_low", "=", "h_lrgp", ".", "idx_lm68_np", "[", "9", "-", "1", "]", "\n", "\n", "\n", "mesh_c", "=", "mesh_tri", ".", "vertices", "[", "idx_nose", "]", "# mm", "\n", "mesh_low", "=", "mesh_tri", ".", "vertices", "[", "idx_low", "]", "\n", "\n", "# Cam", "\n", "max_xyz_model", "=", "vertex_y_max", "(", "mesh_tri", ")", "\n", "min_xyz_model", "=", "vertex_y_min", "(", "mesh_tri", ")", "\n", "y_mid", "=", "(", "max_xyz_model", "[", "1", "]", "+", "mesh_low", "[", "1", "]", ")", "/", "2.0", "\n", "z_mid", "=", "(", "max_xyz_model", "[", "2", "]", "+", "mesh_low", "[", "2", "]", ")", "/", "2.0", "\n", "\n", "k_eye_dis", "=", "intrinsic_mtx", "[", "4", "]", "*", "(", "max_xyz_model", "[", "1", "]", "-", "mesh_low", "[", "1", "]", ")", "/", "(", "image_height", "*", "image_radio_face", ")", "\n", "print", "(", "k_eye_dis", ")", "\n", "\n", "cam_front_eye", "=", "[", "mesh_c", "[", "0", "]", ",", "y_mid", ",", "z_mid", "+", "k_eye_dis", "]", "\n", "cam_front_center", "=", "[", "mesh_c", "[", "0", "]", ",", "y_mid", ",", "z_mid", "]", "\n", "cam_front_up", "=", "[", "0.0", ",", "1.0", ",", "0.0", "]", "\n", "\n", "ecu", "=", "[", "cam_front_eye", ",", "cam_front_center", ",", "cam_front_up", "]", "\n", "ecu", "=", "tf", ".", "constant", "(", "ecu", ")", "\n", "\n", "mtx_rot", ",", "t", "=", "ExtMtxBatch", ".", "create_location_batch", "(", "ecu", ")", ".", "rotMtx_location", "(", "ecu", ")", "\n", "rot", "=", "RotationMtxBatch", ".", "create_matrixRot_batch", "(", "mtx_rot", ")", ".", "eular_rotMtx", "(", "mtx_rot", ")", "\n", "rot", "=", "tf", ".", "expand_dims", "(", "rot", ",", "0", ")", "\n", "t", "=", "tf", ".", "expand_dims", "(", "t", ",", "0", ")", "\n", "\n", "# rx, ry, rz to rz, ry, rx", "\n", "rot", "=", "tf", ".", "reverse", "(", "rot", ",", "axis", "=", "[", "1", "]", ")", "\n", "\n", "pose", "=", "tf", ".", "concat", "(", "[", "rot", ",", "t", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.cvrt_PRN_to_DY": [[113, 146], ["isinstance", "lm68.tolist.tolist"], "function", ["None"], ["def", "cvrt_PRN_to_DY", "(", "lm68", ")", ":", "\n", "    ", "if", "isinstance", "(", "lm68", ",", "np", ".", "ndarray", ")", "==", "True", ":", "\n", "        ", "lm68", "=", "lm68", ".", "tolist", "(", ")", "\n", "\n", "", "l_1_17_syn", "=", "lm68", "[", "1", "-", "1", ":", "17", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_18_27_syn", "=", "lm68", "[", "18", "-", "1", ":", "27", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_28_31", "=", "lm68", "[", "28", "-", "1", ":", "31", "]", "\n", "\n", "l_32_36_syn", "=", "lm68", "[", "32", "-", "1", ":", "36", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_37_40_syn", "=", "lm68", "[", "43", "-", "1", ":", "46", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_41_42_syn", "=", "lm68", "[", "47", "-", "1", ":", "48", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_43_46_syn", "=", "lm68", "[", "37", "-", "1", ":", "40", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_47_48_syn", "=", "lm68", "[", "41", "-", "1", ":", "42", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_49_55_syn", "=", "lm68", "[", "49", "-", "1", ":", "55", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_56_60_syn", "=", "lm68", "[", "56", "-", "1", ":", "60", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_61_65_syn", "=", "lm68", "[", "61", "-", "1", ":", "65", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "l_66_68_syn", "=", "lm68", "[", "66", "-", "1", ":", "68", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "lm", "=", "l_1_17_syn", "+", "l_18_27_syn", "+", "l_28_31", "+", "l_32_36_syn", "+", "l_37_40_syn", "+", "l_41_42_syn", "+", "l_43_46_syn", "+", "l_47_48_syn", "+", "l_49_55_syn", "+", "l_56_60_syn", "+", "l_61_65_syn", "+", "l_66_68_syn", "\n", "\n", "return", "lm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.cvrt_300w_to_CelebA": [[147, 157], ["numpy.mean", "numpy.mean"], "function", ["None"], ["", "def", "cvrt_300w_to_CelebA", "(", "lm68", ")", ":", "\n", "    ", "l_eye", "=", "np", ".", "mean", "(", "lm68", "[", "37", "-", "1", ":", "43", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "r_eye", "=", "np", ".", "mean", "(", "lm68", "[", "43", "-", "1", ":", "49", "-", "1", "]", ",", "axis", "=", "0", ")", "\n", "\n", "nose", "=", "lm68", "[", "34", "-", "1", "]", "\n", "l_m", "=", "lm68", "[", "49", "-", "1", "]", "\n", "r_m", "=", "lm68", "[", "55", "-", "1", "]", "\n", "\n", "return", "[", "l_eye", ",", "r_eye", ",", "nose", ",", "l_m", ",", "r_m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.cvrt_Now_to_CelebA": [[158, 164], ["numpy.concatenate", "numpy.array"], "function", ["None"], ["", "def", "cvrt_Now_to_CelebA", "(", "lm7", ")", ":", "\n", "    ", "l_eye", "=", "(", "lm7", "[", "0", "]", "+", "lm7", "[", "1", "]", ")", "/", "2.0", "\n", "\n", "r_eye", "=", "(", "lm7", "[", "2", "]", "+", "lm7", "[", "3", "]", ")", "/", "2.0", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "[", "l_eye", ",", "r_eye", "]", ")", ",", "lm7", "[", "4", ":", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.cvrt_300w_to_Now": [[166, 178], ["None"], "function", ["None"], ["", "def", "cvrt_300w_to_Now", "(", "lm68", ")", ":", "\n", "    ", "l_eye_out", "=", "lm68", "[", "37", "-", "1", "]", "\n", "l_eye_in", "=", "lm68", "[", "40", "-", "1", "]", "\n", "\n", "r_eye_in", "=", "lm68", "[", "43", "-", "1", "]", "\n", "r_eye_out", "=", "lm68", "[", "46", "-", "1", "]", "\n", "\n", "nose", "=", "lm68", "[", "34", "-", "1", "]", "\n", "l_m", "=", "lm68", "[", "49", "-", "1", "]", "\n", "r_m", "=", "lm68", "[", "55", "-", "1", "]", "\n", "\n", "return", "[", "l_eye_out", ",", "l_eye_in", ",", "r_eye_in", ",", "r_eye_out", ",", "nose", ",", "l_m", ",", "r_m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.crop_align_affine_transform": [[179, 199], ["numpy.array", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "cv2.warpAffine", "numpy.matmul", "numpy.transpose", "h_lm2d.get_lm", "gafr_std_align.cvrt_300w_to_CelebA", "numpy.array", "numpy.array", "numpy.array", "numpy.transpose", "h_lm2d.get_lm_homo"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.cvrt_300w_to_CelebA"], ["", "def", "crop_align_affine_transform", "(", "h_lm2d", ",", "image", ",", "crop_size", ",", "std_landmark", ")", ":", "\n", "    ", "lm_celebA", "=", "np", ".", "array", "(", "h_lm2d", ".", "get_lm", "(", ")", ")", "\n", "if", "lm_celebA", ".", "shape", "[", "0", "]", "!=", "5", ":", "\n", "        ", "lm_celebA", "=", "cvrt_300w_to_CelebA", "(", "lm_celebA", ")", "\n", "# Transform", "\n", "", "std_points", "=", "np", ".", "array", "(", "std_landmark", ")", "*", "(", "crop_size", "/", "224.0", ")", "\n", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "np", ".", "array", "(", "lm_celebA", ")", ",", "std_points", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "\n", "rot_angle", "=", "tform", ".", "rotation", "*", "180.0", "/", "(", "math", ".", "pi", ")", "\n", "#print(rot_angle, tform.translation)", "\n", "\n", "img_warped", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "(", "crop_size", ",", "crop_size", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "\n", "lm_trans", "=", "np", ".", "matmul", "(", "M", ",", "np", ".", "array", "(", "np", ".", "transpose", "(", "h_lm2d", ".", "get_lm_homo", "(", ")", ")", ")", ")", "\n", "lm_trans", "=", "np", ".", "transpose", "(", "lm_trans", ")", "\n", "\n", "return", "lm_trans", ",", "img_warped", ",", "tform", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.crop_align_affine_transform_5": [[200, 220], ["numpy.array", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "cv2.warpAffine", "numpy.matmul", "numpy.transpose", "h_lm2d.get_lm", "gafr_std_align.cvrt_300w_to_CelebA", "numpy.array", "numpy.array", "numpy.array", "numpy.transpose", "h_lm2d.get_lm_homo"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.cvrt_300w_to_CelebA"], ["", "def", "crop_align_affine_transform_5", "(", "h_lm2d", ",", "image", ",", "crop_size", ",", "std_224_bfm09", ")", ":", "\n", "    ", "lm_celebA", "=", "np", ".", "array", "(", "h_lm2d", ".", "get_lm", "(", ")", ")", "\n", "if", "lm_celebA", ".", "shape", "[", "0", "]", "!=", "5", ":", "\n", "        ", "lm_celebA", "=", "cvrt_300w_to_CelebA", "(", "lm_celebA", ")", "\n", "# Transform", "\n", "", "std_points", "=", "np", ".", "array", "(", "std_224_bfm09", ")", "*", "(", "crop_size", "/", "224.0", ")", "\n", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "np", ".", "array", "(", "lm_celebA", ")", ",", "std_points", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "\n", "rot_angle", "=", "tform", ".", "rotation", "*", "180.0", "/", "(", "math", ".", "pi", ")", "\n", "#print(tform.scale)", "\n", "\n", "img_warped", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "(", "crop_size", ",", "crop_size", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "\n", "lm_trans", "=", "np", ".", "matmul", "(", "M", ",", "np", ".", "array", "(", "np", ".", "transpose", "(", "h_lm2d", ".", "get_lm_homo", "(", ")", ")", ")", ")", "\n", "lm_trans", "=", "np", ".", "transpose", "(", "lm_trans", ")", "\n", "\n", "return", "lm_trans", ",", "img_warped", ",", "rot_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.crop_align_affine_transform_68": [[222, 240], ["h_lm2d.get_lm", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "cv2.warpAffine", "numpy.matmul", "numpy.transpose", "numpy.array", "numpy.array", "numpy.array", "numpy.transpose", "h_lm2d.get_lm_homo"], "function", ["None"], ["", "def", "crop_align_affine_transform_68", "(", "h_lm2d", ",", "image", ",", "crop_size", ",", "std_224_bfm09_lmFull", ")", ":", "\n", "    ", "lm_celebA", "=", "h_lm2d", ".", "get_lm", "(", ")", "\n", "# Transform", "\n", "std_points", "=", "np", ".", "array", "(", "std_224_bfm09_lmFull", ")", "*", "(", "crop_size", "/", "224.0", ")", "\n", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "np", ".", "array", "(", "lm_celebA", ")", ",", "std_points", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "\n", "rot_angle", "=", "tform", ".", "rotation", "*", "180.0", "/", "(", "math", ".", "pi", ")", "\n", "#print(rot_angle, tform.translation)", "\n", "\n", "img_warped", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "(", "crop_size", ",", "crop_size", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "\n", "lm_trans", "=", "np", ".", "matmul", "(", "M", ",", "np", ".", "array", "(", "np", ".", "transpose", "(", "h_lm2d", ".", "get_lm_homo", "(", ")", ")", ")", ")", "\n", "lm_trans", "=", "np", ".", "transpose", "(", "lm_trans", ")", "\n", "\n", "return", "lm_trans", ",", "img_warped", ",", "rot_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.gafr_std_align.crop_bbox_affine_transform": [[241, 260], ["numpy.array", "numpy.array", "skimage.transform.SimilarityTransform", "trans.SimilarityTransform.estimate", "cv2.warpAffine"], "function", ["None"], ["", "def", "crop_bbox_affine_transform", "(", "bbox", ",", "image", ",", "crop_size", ")", ":", "\n", "    ", "contour", "=", "np", ".", "array", "(", "\n", "[", "[", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", "]", ",", "\n", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "1", "]", "]", ",", "\n", "[", "bbox", "[", "2", "]", ",", "bbox", "[", "3", "]", "]", ",", "\n", "[", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "]", "]", "\n", ")", "\n", "contour_image", "=", "np", ".", "array", "(", "\n", "[", "[", "0.0", ",", "0.0", "]", ",", "\n", "[", "crop_size", ",", "0.0", "]", ",", "\n", "[", "crop_size", ",", "crop_size", "]", ",", "\n", "[", "0.0", ",", "crop_size", "]", "]", "\n", ")", "\n", "tform", "=", "trans", ".", "SimilarityTransform", "(", ")", "\n", "tform", ".", "estimate", "(", "contour", ",", "contour_image", ")", "\n", "M", "=", "tform", ".", "params", "[", "0", ":", "2", ",", ":", "]", "\n", "img_warped", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "(", "crop_size", ",", "crop_size", ")", ",", "flags", "=", "cv2", ".", "INTER_LINEAR", ",", "borderMode", "=", "cv2", ".", "BORDER_REPLICATE", ")", "\n", "\n", "return", "img_warped", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_augment.CameraAugment.__init__": [[25, 49], ["camera_render.CameraRender.__init__", "h_intrinsic.Get_image_width", "h_intrinsic.Get_image_height"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.__init__", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.Get_image_width", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.Get_image_height"], ["    ", "def", "__init__", "(", "self", ",", "h_intrinsic", ",", "h_extenal", ",", "\n", "centre_camera_rot", ",", "\n", "roll_num", "=", "0", ",", "roll_max_angle", "=", "0", ",", "#", "\n", "pitch_num", "=", "0", ",", "pitch_max_angle", "=", "0", ",", "#", "\n", "yaw_num", "=", "0", ",", "yaw_max_angle", "=", "0", ",", "#", "\n", "near", "=", "0.1", ",", "far", "=", "2000.0", "\n", ")", ":", "\n", "        ", "super", "(", "CameraAugment", ",", "self", ")", ".", "__init__", "(", "h_intrinsic", ",", "h_extenal", ",", "near", ",", "far", ")", "\n", "\n", "self", ".", "image_width_batch", "=", "h_intrinsic", ".", "Get_image_width", "(", ")", "\n", "self", ".", "image_height_batch", "=", "h_intrinsic", ".", "Get_image_height", "(", ")", "\n", "\n", "#super(CameraRender, self)._Cal_mtxProj()", "\n", "\n", "self", ".", "centre_camera_rot", "=", "centre_camera_rot", "\n", "\n", "self", ".", "roll_num", "=", "roll_num", "\n", "self", ".", "roll_max_angle", "=", "roll_max_angle", "\n", "\n", "self", ".", "pitch_num", "=", "pitch_num", "\n", "self", ".", "pitch_max_angle", "=", "pitch_max_angle", "\n", "\n", "self", ".", "yaw_num", "=", "yaw_num", "\n", "self", ".", "yaw_max_angle", "=", "yaw_max_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_augment.CameraAugment.Augment_Single_Random": [[50, 93], ["camera_render.CameraRender", "camera_augment.CameraAugment.h_extenal.Get_viewDirect_batch", "camera_augment.CameraAugment.h_extenal.Get_upDirect_batch", "camera_augment.CameraAugment.h_extenal.Get_rightDirect_batch", "tensorflow.random_uniform", "camera_augment.CameraAugment.h_extenal.rotMtx_axisAngle_batch", "camera_render.CameraRender.h_extenal.rotate_batch", "rotation.ExtMtxBatch.create_matrixExt_batch", "camera_render.CameraRender", "camera_augment.CameraAugment.h_extenal.rotMtx_axisAngle_batch", "camera_render.CameraRender.h_extenal.rotate_batch", "rotation.ExtMtxBatch.create_matrixExt_batch", "camera_render.CameraRender", "camera_augment.CameraAugment.h_extenal.rotMtx_axisAngle_batch", "camera_render.CameraRender.h_extenal.rotate_batch", "rotation.ExtMtxBatch.create_matrixExt_batch", "camera_render.CameraRender", "camera_render.CameraRender.Get_eularAngle_rot_t_batch", "tensorflow.reverse", "tensorflow.concat", "tensorflow.random_uniform", "tensorflow.random_uniform", "int"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_viewDirect_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_upDirect_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_rightDirect_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_axisAngle_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotate_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_matrixExt_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_axisAngle_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotate_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_matrixExt_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_axisAngle_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotate_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_matrixExt_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch.Get_eularAngle_rot_t_batch"], ["", "def", "Augment_Single_Random", "(", "self", ")", ":", "\n", "        ", "cam", "=", "CameraRender", "(", "self", ".", "h_intrinsic", ",", "self", ".", "h_extenal", ")", "\n", "\n", "z_axis", "=", "self", ".", "h_extenal", ".", "Get_viewDirect_batch", "(", ")", "\n", "y_axis", "=", "self", ".", "h_extenal", ".", "Get_upDirect_batch", "(", ")", "\n", "x_axis", "=", "self", ".", "h_extenal", ".", "Get_rightDirect_batch", "(", ")", "\n", "\n", "#", "\n", "psi_angle", "=", "tf", ".", "random_uniform", "(", "shape", "=", "[", "int", "(", "self", ".", "batch_size", ")", "]", ")", "\n", "psi_angle", "=", "psi_angle", "*", "(", "2", "*", "self", ".", "roll_max_angle", ")", "-", "self", ".", "roll_max_angle", "\n", "psi", "=", "psi_angle", "*", "math", ".", "pi", "/", "(", "180.", ")", "\n", "\n", "mtx_rel_rot", "=", "self", ".", "h_extenal", ".", "rotMtx_axisAngle_batch", "(", "z_axis", ",", "psi", ")", "\n", "mtx_rot_batch", ",", "mtx_t_batch", "=", "cam", ".", "h_extenal", ".", "rotate_batch", "(", "mtx_rel_rot", ",", "self", ".", "centre_camera_rot", ")", "\n", "# New", "\n", "h_ext_tmp", "=", "ExtMtxBatch", ".", "create_matrixExt_batch", "(", "mtx_rot_batch", ",", "mtx_t_batch", ")", "\n", "cam_psi", "=", "CameraRender", "(", "self", ".", "h_intrinsic", ",", "h_ext_tmp", ")", "\n", "\n", "#", "\n", "phi_angle", "=", "tf", ".", "random_uniform", "(", "shape", "=", "[", "1", "]", ")", "*", "(", "2", "*", "self", ".", "pitch_max_angle", ")", "-", "self", ".", "pitch_max_angle", "\n", "phi", "=", "phi_angle", "*", "math", ".", "pi", "/", "(", "180.", ")", "\n", "\n", "mtx_rel_rot", "=", "self", ".", "h_extenal", ".", "rotMtx_axisAngle_batch", "(", "x_axis", ",", "phi", ")", "\n", "mtx_rot_batch", ",", "mtx_t_batch", "=", "cam_psi", ".", "h_extenal", ".", "rotate_batch", "(", "mtx_rel_rot", ",", "self", ".", "centre_camera_rot", ")", "\n", "# New", "\n", "h_ext_tmp", "=", "ExtMtxBatch", ".", "create_matrixExt_batch", "(", "mtx_rot_batch", ",", "mtx_t_batch", ")", "\n", "cam_phi", "=", "CameraRender", "(", "self", ".", "h_intrinsic", ",", "h_ext_tmp", ")", "\n", "\n", "#", "\n", "theta_angle", "=", "tf", ".", "random_uniform", "(", "shape", "=", "[", "1", "]", ")", "*", "(", "2", "*", "self", ".", "yaw_max_angle", ")", "-", "self", ".", "yaw_max_angle", "\n", "theta", "=", "theta_angle", "*", "math", ".", "pi", "/", "(", "180.", ")", "\n", "\n", "mtx_rel_rot", "=", "self", ".", "h_extenal", ".", "rotMtx_axisAngle_batch", "(", "y_axis", ",", "theta", ")", "\n", "mtx_rot_batch", ",", "mtx_t_batch", "=", "cam_phi", ".", "h_extenal", ".", "rotate_batch", "(", "mtx_rel_rot", ",", "self", ".", "centre_camera_rot", ")", "\n", "# New", "\n", "h_ext_tmp", "=", "ExtMtxBatch", ".", "create_matrixExt_batch", "(", "mtx_rot_batch", ",", "mtx_t_batch", ")", "\n", "cam_th", "=", "CameraRender", "(", "self", ".", "h_intrinsic", ",", "h_ext_tmp", ")", "\n", "\n", "#", "\n", "rot", ",", "t", "=", "cam_th", ".", "Get_eularAngle_rot_t_batch", "(", ")", "\n", "rot", "=", "tf", ".", "reverse", "(", "rot", ",", "axis", "=", "[", "1", "]", ")", "# rx, ry, rz, to, rz, ry, rx", "\n", "\n", "return", "tf", ".", "concat", "(", "[", "rot", ",", "t", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_augment.CameraAugment.Augment_Average_Interval": [[94, 156], ["list", "camera_augment.CameraAugment.list_cam.append", "camera_augment.CameraAugment.h_extenal.Get_viewDirect_batch", "camera_augment.CameraAugment.h_extenal.Get_upDirect_batch", "camera_augment.CameraAugment.h_extenal.Get_rightDirect_batch", "camera_render.CameraRender", "range", "range", "range", "len", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "camera_augment.CameraAugment.h_extenal.rotMtx_axisAngle", "cam.h_extenal.rotate_batch", "rotation.ExtMtxBatch.create_matrixExt_batch", "camera_render.CameraRender", "list_cam_prev.append", "camera_augment.CameraAugment.h_extenal.rotMtx_axisAngle", "cam.h_extenal.rotate_batch", "rotation.ExtMtxBatch.create_matrixExt_batch", "camera_render.CameraRender", "list_cam_prev.append", "camera_augment.CameraAugment.h_extenal.rotMtx_axisAngle", "cam.h_extenal.rotate_batch", "rotation.ExtMtxBatch.create_matrixExt_batch", "camera_render.CameraRender", "list_cam_prev.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_viewDirect_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_upDirect_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_rightDirect_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_axisAngle", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotate_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_matrixExt_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_axisAngle", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotate_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_matrixExt_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_axisAngle", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotate_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_matrixExt_batch"], ["", "def", "Augment_Average_Interval", "(", "self", ")", ":", "\n", "        ", "self", ".", "list_cam", "=", "list", "(", ")", "\n", "self", ".", "list_cam", ".", "append", "(", "CameraRender", "(", "self", ".", "h_intrinsic", ",", "self", ".", "h_extenal", ")", ")", "\n", "\n", "z_axis", "=", "self", ".", "h_extenal", ".", "Get_viewDirect_batch", "(", ")", "\n", "y_axis", "=", "self", ".", "h_extenal", ".", "Get_upDirect_batch", "(", ")", "\n", "x_axis", "=", "self", ".", "h_extenal", ".", "Get_rightDirect_batch", "(", ")", "\n", "\n", "list_cam_prev", "=", "[", "]", "\n", "if", "self", ".", "roll_num", "!=", "0", ":", "\n", "            ", "for", "r", "in", "range", "(", "-", "self", ".", "roll_num", ",", "self", ".", "roll_num", "+", "1", ")", ":", "\n", "                ", "if", "r", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "psi_angle", "=", "r", "*", "(", "self", ".", "roll_max_angle", "/", "(", "self", ".", "roll_num", "+", "1.", ")", ")", "\n", "psi", "=", "psi_angle", "*", "math", ".", "pi", "/", "(", "180.", ")", "\n", "psi", "=", "tf", ".", "Variable", "(", "[", "psi", "]", ")", "\n", "\n", "for", "cam", "in", "self", ".", "list_cam", ":", "\n", "# Rotate", "\n", "                    ", "mtx_rel_rot", "=", "self", ".", "h_extenal", ".", "rotMtx_axisAngle", "(", "z_axis", ",", "psi", ")", "\n", "mtx_rot_batch", ",", "mtx_t_batch", "=", "cam", ".", "h_extenal", ".", "rotate_batch", "(", "mtx_rel_rot", ",", "self", ".", "centre_camera_rot", ")", "\n", "# New", "\n", "h_ext_tmp", "=", "ExtMtxBatch", ".", "create_matrixExt_batch", "(", "mtx_rot_batch", ",", "mtx_t_batch", ")", "\n", "cam_aug", "=", "CameraRender", "(", "self", ".", "h_intrinsic", ",", "h_ext_tmp", ")", "\n", "list_cam_prev", ".", "append", "(", "cam_aug", ")", "\n", "", "", "self", ".", "list_cam", "=", "self", ".", "list_cam", "+", "list_cam_prev", "\n", "\n", "", "list_cam_prev", "=", "[", "]", "\n", "if", "self", ".", "pitch_num", "!=", "0", ":", "\n", "            ", "for", "p", "in", "range", "(", "-", "self", ".", "pitch_num", ",", "self", ".", "pitch_num", "+", "1", ")", ":", "\n", "                ", "phi_angle", "=", "p", "*", "(", "self", ".", "pitch_max_angle", "/", "(", "self", ".", "pitch_num", "+", "1.", ")", ")", "\n", "phi", "=", "phi_angle", "*", "math", ".", "pi", "/", "(", "180.", ")", "\n", "phi", "=", "tf", ".", "Variable", "(", "[", "phi", "]", ")", "\n", "\n", "for", "cam", "in", "self", ".", "list_cam", ":", "\n", "# Rotate", "\n", "                    ", "mtx_rel_rot", "=", "self", ".", "h_extenal", ".", "rotMtx_axisAngle", "(", "x_axis", ",", "phi", ")", "\n", "mtx_rot_batch", ",", "mtx_t_batch", "=", "cam", ".", "h_extenal", ".", "rotate_batch", "(", "mtx_rel_rot", ",", "self", ".", "centre_camera_rot", ")", "\n", "# New", "\n", "h_ext_tmp", "=", "ExtMtxBatch", ".", "create_matrixExt_batch", "(", "mtx_rot_batch", ",", "mtx_t_batch", ")", "\n", "cam_aug", "=", "CameraRender", "(", "self", ".", "h_intrinsic", ",", "h_ext_tmp", ")", "\n", "list_cam_prev", ".", "append", "(", "cam_aug", ")", "\n", "", "", "self", ".", "list_cam", "=", "self", ".", "list_cam", "+", "list_cam_prev", "\n", "\n", "", "list_cam_prev", "=", "[", "]", "\n", "if", "self", ".", "yaw_num", "!=", "0", ":", "\n", "            ", "for", "y", "in", "range", "(", "-", "self", ".", "yaw_num", ",", "self", ".", "yaw_num", "+", "1", ")", ":", "\n", "                ", "theta_angle", "=", "y", "*", "(", "self", ".", "yaw_max_angle", "/", "(", "self", ".", "yaw_num", "+", "1.", ")", ")", "\n", "theta", "=", "theta_angle", "*", "math", ".", "pi", "/", "(", "180.", ")", "\n", "theta", "=", "tf", ".", "Variable", "(", "[", "theta", "]", ")", "\n", "\n", "for", "cam", "in", "self", ".", "list_cam", ":", "\n", "# Rotate", "\n", "                    ", "mtx_rel_rot", "=", "self", ".", "h_extenal", ".", "rotMtx_axisAngle", "(", "y_axis", ",", "theta", ")", "\n", "mtx_rot_batch", ",", "mtx_t_batch", "=", "cam", ".", "h_extenal", ".", "rotate_batch", "(", "mtx_rel_rot", ",", "self", ".", "centre_camera_rot", ")", "\n", "# New", "\n", "h_ext_tmp", "=", "ExtMtxBatch", ".", "create_matrixExt_batch", "(", "mtx_rot_batch", ",", "mtx_t_batch", ")", "\n", "cam_aug", "=", "CameraRender", "(", "self", ".", "h_intrinsic", ",", "h_ext_tmp", ")", "\n", "list_cam_prev", ".", "append", "(", "cam_aug", ")", "\n", "", "", "self", ".", "list_cam", "=", "self", ".", "list_cam", "+", "list_cam_prev", "\n", "", "if", "len", "(", "self", ".", "list_cam", ")", ">", "1", ":", "\n", "            ", "self", ".", "list_cam", "=", "self", ".", "list_cam", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_augment.CameraAugment.Get_aug_mtxMV_batch": [[157, 165], ["range", "tensorflow.concat", "len", "cam.Get_modelViewMatrix_batch", "list_mv.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_render.CameraRender.Get_modelViewMatrix_batch"], ["", "", "def", "Get_aug_mtxMV_batch", "(", "self", ")", ":", "# Model View matrix", "\n", "        ", "list_mv", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "list_cam", ")", ")", ":", "\n", "            ", "cam", "=", "self", ".", "list_cam", "[", "i", "]", "\n", "mv", "=", "cam", ".", "Get_modelViewMatrix_batch", "(", ")", "\n", "list_mv", ".", "append", "(", "mv", ")", "\n", "", "mv_batch", "=", "tf", ".", "concat", "(", "list_mv", ",", "axis", "=", "0", ")", "\n", "return", "mv_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_augment.CameraAugment.Get_aug_eye_batch": [[166, 174], ["range", "tensorflow.concat", "len", "cam.Get_eye_batch", "list_eye.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.Get_eye_batch"], ["", "def", "Get_aug_eye_batch", "(", "self", ")", ":", "\n", "        ", "list_eye", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "list_cam", ")", ")", ":", "\n", "            ", "cam", "=", "self", ".", "list_cam", "[", "i", "]", "\n", "eye", "=", "cam", ".", "Get_eye_batch", "(", ")", "\n", "list_eye", ".", "append", "(", "eye", ")", "\n", "", "eye_batch", "=", "tf", ".", "concat", "(", "list_eye", ",", "axis", "=", "0", ")", "\n", "return", "eye_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_augment.CameraAugment.Get_aug_eularAngle_rot_t_batch": [[175, 186], ["range", "tensorflow.concat", "tensorflow.concat", "len", "cam.Get_eularAngle_rot_t_batch", "list_rot.append", "list_t.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch.Get_eularAngle_rot_t_batch"], ["", "def", "Get_aug_eularAngle_rot_t_batch", "(", "self", ")", ":", "\n", "        ", "list_rot", "=", "[", "]", "\n", "list_t", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "list_cam", ")", ")", ":", "\n", "            ", "cam", "=", "self", ".", "list_cam", "[", "i", "]", "\n", "mtx_param_rot", ",", "mtx_t", "=", "cam", ".", "Get_eularAngle_rot_t_batch", "(", ")", "\n", "list_rot", ".", "append", "(", "mtx_param_rot", ")", "\n", "list_t", ".", "append", "(", "mtx_t", ")", "\n", "", "param_rot_batch", "=", "tf", ".", "concat", "(", "list_rot", ",", "axis", "=", "0", ")", "\n", "t_batch", "=", "tf", ".", "concat", "(", "list_t", ",", "axis", "=", "0", ")", "\n", "return", "param_rot_batch", ",", "t_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_augment.CameraAugment.Get_aug_proj_pt2d_batch": [[187, 195], ["range", "tensorflow.concat", "len", "super().Project", "list_proj.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch.Project"], ["", "def", "Get_aug_proj_pt2d_batch", "(", "self", ",", "lm3d_batch", ")", ":", "\n", "        ", "list_proj", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "list_cam", ")", ")", ":", "\n", "            ", "cam", "=", "self", ".", "list_cam", "[", "i", "]", "\n", "proj", "=", "super", "(", "CameraRender", ",", "cam", ")", ".", "Project", "(", "lm3d_batch", ")", "\n", "list_proj", ".", "append", "(", "proj", ")", "\n", "", "proj_batch", "=", "tf", ".", "concat", "(", "list_proj", ",", "axis", "=", "0", ")", "\n", "return", "proj_batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.__init__": [[48, 113], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tfmatchd.face.common.format_helper.batch_size_extract", "tensorflow.zeros_like", "tensorflow.stack", "tensorflow.reshape", "tensorflow.stack", "tensorflow.reshape", "tensorflow.constant", "tensorflow.tile", "tensorflow.stack", "isinstance", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "camera.IntrinsicMtxBatch._create_focal_len", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "camera.IntrinsicMtxBatch._create_fov_x", "camera.IntrinsicMtxBatch._create_fov_y"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.batch_size_extract", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch._create_focal_len", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch._create_fov_x", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch._create_fov_y"], ["def", "__init__", "(", "self", ",", "u", ",", "v", ",", "focal_len_x", "=", "None", ",", "focal_len_y", "=", "None", ",", "fov_x", "=", "None", ",", "fov_y", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param u:\n        :param v:\n        :param focal_len_x:\n        :param focal_len_y:\n        :param fov_x: field of view\n                            *\n                        *   ~\n                    *       |\n                *           |   u\n            *   ) fov_x     |\n        *   *   *   *   *   ~\n        {__________________}\n            focal_len_x\n\n        \"\"\"", "\n", "\n", "# Read information", "\n", "if", "isinstance", "(", "u", ",", "tf", ".", "Tensor", ")", "==", "False", ":", "\n", "            ", "self", ".", "u", "=", "tf", ".", "convert_to_tensor", "(", "u", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "v", "=", "tf", ".", "convert_to_tensor", "(", "v", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "u", "=", "u", "\n", "self", ".", "v", "=", "v", "\n", "", "self", ".", "aspect_ratio", "=", "self", ".", "u", "/", "self", ".", "v", "\n", "\n", "if", "focal_len_x", "is", "not", "None", ":", "\n", "            ", "self", ".", "_create_focal_len", "(", "focal_len_x", ",", "focal_len_y", ")", "\n", "", "else", ":", "\n", "            ", "assert", "fov_x", "is", "not", "None", "or", "fov_y", "is", "not", "None", "\n", "\n", "if", "fov_x", "is", "not", "None", ":", "\n", "                ", "self", ".", "_create_fov_x", "(", "fov_x", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_create_fov_y", "(", "fov_y", ")", "\n", "\n", "# Normalize [batch_size, data]", "\n", "", "", "self", ".", "u", "=", "tf", ".", "reshape", "(", "self", ".", "u", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "self", ".", "v", "=", "tf", ".", "reshape", "(", "self", ".", "v", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "self", ".", "aspect_ratio", "=", "tf", ".", "reshape", "(", "self", ".", "aspect_ratio", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "self", ".", "focal_len_x", "=", "tf", ".", "reshape", "(", "self", ".", "focal_len_x", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "self", ".", "focal_len_y", "=", "tf", ".", "reshape", "(", "self", ".", "focal_len_y", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "# 0. Batch", "\n", "batch_size", "=", "batch_size_extract", "(", "self", ".", "u", ",", "self", ".", "v", ",", "self", ".", "focal_len_x", ",", "self", ".", "focal_len_y", ")", "\n", "assert", "batch_size", "is", "not", "None", "\n", "\n", "# 1. Broadcast", "\n", "if", "self", ".", "u", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "self", ".", "u", "=", "tf", ".", "tile", "(", "self", ".", "u", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "v", "=", "tf", ".", "tile", "(", "self", ".", "v", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "focal_len_x", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "self", ".", "focal_len_x", "=", "tf", ".", "tile", "(", "self", ".", "focal_len_x", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "focal_len_y", "=", "tf", ".", "tile", "(", "self", ".", "focal_len_y", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "", "zeros", "=", "tf", ".", "zeros_like", "(", "self", ".", "focal_len_x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "r1", "=", "tf", ".", "stack", "(", "[", "self", ".", "focal_len_x", ",", "zeros", ",", "self", ".", "u", "]", ",", "axis", "=", "1", ")", "\n", "r1", "=", "tf", ".", "reshape", "(", "r1", ",", "[", "batch_size", ",", "3", "]", ")", "\n", "r2", "=", "tf", ".", "stack", "(", "[", "zeros", ",", "self", ".", "focal_len_y", ",", "self", ".", "v", "]", ",", "axis", "=", "1", ")", "\n", "r2", "=", "tf", ".", "reshape", "(", "r2", ",", "[", "batch_size", ",", "3", "]", ")", "\n", "r3", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "1.", "]", ",", "shape", "=", "[", "1", ",", "3", "]", ")", "\n", "r3", "=", "tf", ".", "tile", "(", "r3", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "mtx_intrinsic", "=", "tf", ".", "stack", "(", "[", "r1", ",", "r2", ",", "r3", "]", ",", "axis", "=", "1", ")", "# [batch, r, c] r:axis=1", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch._create_focal_len": [[114, 121], ["isinstance", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "_create_focal_len", "(", "self", ",", "focal_len_x", ",", "focal_len_y", ")", ":", "\n", "        ", "if", "isinstance", "(", "focal_len_x", ",", "tf", ".", "Tensor", ")", "==", "False", ":", "\n", "            ", "self", ".", "focal_len_x", "=", "tf", ".", "convert_to_tensor", "(", "focal_len_x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "focal_len_y", "=", "tf", ".", "convert_to_tensor", "(", "focal_len_y", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "focal_len_x", "=", "focal_len_x", "\n", "self", ".", "focal_len_y", "=", "focal_len_y", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch._create_fov_x": [[122, 127], ["isinstance", "tensorflow.convert_to_tensor", "tensorflow.tan"], "methods", ["None"], ["", "", "def", "_create_fov_x", "(", "self", ",", "fov_x", ")", ":", "\n", "        ", "if", "isinstance", "(", "fov_x", ",", "tf", ".", "Tensor", ")", "==", "False", ":", "\n", "            ", "self", ".", "fov_x", "=", "tf", ".", "convert_to_tensor", "(", "fov_x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "self", ".", "focal_len_x", "=", "(", "1.0", "*", "self", ".", "u", ")", "/", "tf", ".", "tan", "(", "fov_x", "*", "(", "math", ".", "pi", "/", "360.0", ")", ")", "\n", "self", ".", "focal_len_y", "=", "self", ".", "focal_len_x", "*", "self", ".", "aspect_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch._create_fov_y": [[128, 133], ["isinstance", "tensorflow.convert_to_tensor", "tensorflow.tan"], "methods", ["None"], ["", "def", "_create_fov_y", "(", "self", ",", "fov_y", ")", ":", "\n", "        ", "if", "isinstance", "(", "fov_y", ",", "tf", ".", "Tensor", ")", "==", "False", ":", "\n", "            ", "self", ".", "fov_y", "=", "tf", ".", "convert_to_tensor", "(", "fov_y", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "self", ".", "focal_len_y", "=", "(", "1.0", "*", "self", ".", "v", ")", "/", "tf", ".", "tan", "(", "fov_y", "*", "(", "math", ".", "pi", "/", "360.0", ")", ")", "\n", "self", ".", "focal_len_x", "=", "self", ".", "focal_len_y", "/", "self", ".", "aspect_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.Get_image_width": [[134, 136], ["None"], "methods", ["None"], ["", "def", "Get_image_width", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "u", "*", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.Get_image_height": [[137, 139], ["None"], "methods", ["None"], ["", "def", "Get_image_height", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "v", "*", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.Get_batch_mtx_intrinsic": [[140, 142], ["None"], "methods", ["None"], ["", "def", "Get_batch_mtx_intrinsic", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mtx_intrinsic", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch.__init__": [[151, 173], ["camera.CameraMtxBatch.h_intrinsic.Get_batch_mtx_intrinsic", "tfmatchd.face.common.format_helper.batch_size_extract", "camera.CameraMtxBatch._Cal_mtxProj", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.Get_batch_mtx_intrinsic", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.batch_size_extract", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch._Cal_mtxProj"], ["def", "__init__", "(", "self", ",", "h_intrinsic", ",", "h_extenal", ")", ":", "\n", "        ", "self", ".", "h_intrinsic", "=", "h_intrinsic", "\n", "self", ".", "h_extenal", "=", "h_extenal", "\n", "\n", "self", ".", "mtx_intrinsic", "=", "self", ".", "h_intrinsic", ".", "Get_batch_mtx_intrinsic", "(", ")", "\n", "self", ".", "mtx_rot", "=", "self", ".", "h_extenal", ".", "rot_batch", "\n", "self", ".", "mtx_t", "=", "self", ".", "h_extenal", ".", "t_batch", "\n", "\n", "# 0. Batch", "\n", "self", ".", "batch_size", "=", "batch_size_extract", "(", "self", ".", "mtx_intrinsic", ",", "self", ".", "mtx_rot", ",", "self", ".", "mtx_t", ")", "\n", "assert", "self", ".", "batch_size", "is", "not", "None", "\n", "\n", "# 1. broadcast", "\n", "if", "self", ".", "mtx_intrinsic", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "self", ".", "mtx_intrinsic", "=", "tf", ".", "tile", "(", "self", ".", "mtx_intrinsic", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "mtx_rot", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "self", ".", "mtx_rot", "=", "tf", ".", "tile", "(", "self", ".", "mtx_rot", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "mtx_t", "=", "tf", ".", "tile", "(", "self", ".", "mtx_t", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "\n", "#", "\n", "", "self", ".", "mtx_proj", "=", "self", ".", "_Cal_mtxProj", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch._Cal_mtxProj": [[174, 185], ["tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.concat", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat"], "methods", ["None"], ["", "def", "_Cal_mtxProj", "(", "self", ")", ":", "\n", "        ", "M", "=", "tf", ".", "matmul", "(", "self", ".", "mtx_intrinsic", ",", "self", ".", "mtx_rot", ")", "\n", "t_trans", "=", "tf", ".", "expand_dims", "(", "self", ".", "mtx_t", ",", "-", "1", ")", "\n", "p4", "=", "tf", ".", "matmul", "(", "self", ".", "mtx_intrinsic", ",", "t_trans", ")", "\n", "ext", "=", "tf", ".", "concat", "(", "[", "M", ",", "p4", "]", ",", "axis", "=", "2", ")", "\n", "\n", "r4", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "r4", "=", "tf", ".", "tile", "(", "r4", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "ext", "=", "tf", ".", "concat", "(", "[", "ext", ",", "r4", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "ext", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch.Project": [[186, 199], ["tensorflow.ones", "tensorflow.concat", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "Project", "(", "self", ",", "pt_batch", ",", "re_grad", "=", "False", ")", ":", "\n", "        ", "homo_batch", "=", "tf", ".", "ones", "(", "[", "self", ".", "batch_size", ",", "pt_batch", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "pt_batch_homo", "=", "tf", ".", "concat", "(", "[", "pt_batch", ",", "homo_batch", "]", ",", "axis", "=", "2", ")", "\n", "pt_batch_homo_trans", "=", "tf", ".", "transpose", "(", "pt_batch_homo", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "pt_batch_homo_2d_trans", "=", "tf", ".", "matmul", "(", "self", ".", "mtx_proj", ",", "pt_batch_homo_trans", ")", "\n", "pt_batch_homo_2d", "=", "tf", ".", "transpose", "(", "pt_batch_homo_2d_trans", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "\n", "pt_batch_homo_2d_main", "=", "pt_batch_homo_2d", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "pt_batch_homo_2d_w", "=", "pt_batch_homo_2d", "[", ":", ",", ":", ",", "2", "]", "\n", "pt_batch_homo_2d_w", "=", "tf", ".", "expand_dims", "(", "pt_batch_homo_2d_w", ",", "-", "1", ")", "\n", "pt_batch_homo_2d_normal", "=", "pt_batch_homo_2d_main", "/", "pt_batch_homo_2d_w", "\n", "\n", "return", "pt_batch_homo_2d_normal", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch.Get_rot_t_batch": [[200, 202], ["None"], "methods", ["None"], ["", "def", "Get_rot_t_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mtx_rot", ",", "self", ".", "mtx_t", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch.Get_eularAngle_rot_t_batch": [[203, 206], ["camera.CameraMtxBatch.h_extenal.eular_rotMtx_batch"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.eular_rotMtx_batch"], ["", "def", "Get_eularAngle_rot_t_batch", "(", "self", ")", ":", "\n", "        ", "eular_angle_rot", "=", "self", ".", "h_extenal", ".", "eular_rotMtx_batch", "(", "self", ".", "mtx_rot", ")", "\n", "return", "eular_angle_rot", ",", "self", ".", "mtx_t", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.CameraMtxBatch.Get_eye_batch": [[207, 209], ["camera.CameraMtxBatch.h_extenal.Get_eye_batch"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.Get_eye_batch"], ["", "def", "Get_eye_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "h_extenal", ".", "Get_eye_batch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.__init__": [[21, 34], ["tensorflow.reshape", "tensorflow.reshape", "rotation.RotationMtxBatch.rotMtx_quat_batch"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_quat_batch"], ["def", "__init__", "(", "self", ",", "**", "rotation_param", ")", ":", "\n", "# Normalize [batch_size, data]", "\n", "#", "\n", "        ", "if", "rotation_param", "[", "'type_rot'", "]", "==", "'matrix'", ":", "\n", "            ", "self", ".", "rot_batch", "=", "tf", ".", "reshape", "(", "rotation_param", "[", "'data'", "]", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "", "elif", "rotation_param", "[", "'type_rot'", "]", "==", "'quaternion'", ":", "\n", "            ", "self", ".", "data", "=", "tf", ".", "reshape", "(", "rotation_param", "[", "'data'", "]", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "self", ".", "rotMtx_quat_batch", "(", "self", ".", "data", ")", "\n", "", "elif", "rotation_param", "[", "'type_rot'", "]", "==", "'eularangle'", ":", "\n", "            ", "pass", "\n", "# self.data = tf_render.reshape(rotation_param['data'], [-1, 3, 3])", "\n", "# self.rotMtx_quat_batch(self.data)", "\n", "", "self", ".", "batch_size", "=", "self", ".", "rot_batch", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.create_matrixRot_batch": [[35, 38], ["rotation.RotationMtxBatch."], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "create_matrixRot_batch", "(", "class_self", ",", "data_batch", ")", ":", "\n", "        ", "return", "class_self", "(", "type_rot", "=", "'matrix'", ",", "data", "=", "data_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.create_quaternion_batch": [[39, 42], ["rotation.RotationMtxBatch."], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "create_quaternion_batch", "(", "class_self", ",", "data_batch", ")", ":", "\n", "        ", "return", "class_self", "(", "type_rot", "=", "'quaternion'", ",", "data", "=", "data_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_quat_batch": [[43, 50], ["range", "tensorflow.stack", "rotation.RotationMtxBatch.rotMtx_quat", "rot_batch_list.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_quat"], ["", "def", "rotMtx_quat_batch", "(", "self", ",", "quat_tensor_batch", ",", "re_grad", "=", "False", ")", ":", "\n", "        ", "rot_batch_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "quat_tensor_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "quat", "=", "quat_tensor_batch", "[", "i", ",", ":", "]", "\n", "rot", "=", "self", ".", "rotMtx_quat", "(", "quat", ",", "re_grad", ")", "\n", "rot_batch_list", ".", "append", "(", "rot", ")", "\n", "", "self", ".", "rot_batch", "=", "tf", ".", "stack", "(", "rot_batch_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_quat": [[51, 96], ["tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "rot_r0.unsqueeze.unsqueeze.unsqueeze", "rot_r1.unsqueeze.unsqueeze.unsqueeze", "rot_r2.unsqueeze.unsqueeze.unsqueeze", "tensorflow.stack", "tensorflow.mul"], "methods", ["None"], ["", "def", "rotMtx_quat", "(", "self", ",", "quat_tensor", ",", "re_grad", "=", "False", ")", ":", "\n", "# (*this)(0) = DT(1) - yy - zz;", "\n", "# (*this)(1) = xy - zw;", "\n", "# (*this)(2) = xz + yw;", "\n", "# (*this)(3) = xy + zw;", "\n", "# (*this)(4) = DT(1) - xx - zz;", "\n", "# (*this)(5) = yz - xw;", "\n", "# (*this)(6) = xz - yw;", "\n", "# (*this)(7) = yz + xw;", "\n", "# (*this)(8) = DT(1) - xx - yy;", "\n", "\n", "        ", "X", "=", "quat_tensor", "[", "0", "]", "\n", "Y", "=", "quat_tensor", "[", "1", "]", "\n", "Z", "=", "quat_tensor", "[", "2", "]", "\n", "W", "=", "quat_tensor", "[", "3", "]", "\n", "\n", "sqX", "=", "X", "*", "X", "\n", "sqY", "=", "Y", "*", "Y", "\n", "sqZ", "=", "Z", "*", "Z", "\n", "sqW", "=", "W", "*", "W", "\n", "\n", "invs", "=", "1.0", "/", "(", "sqX", "+", "sqY", "+", "sqZ", "+", "sqW", ")", "\n", "\n", "xy", "=", "X", "*", "Y", "\n", "zw", "=", "Z", "*", "W", "\n", "\n", "xz", "=", "X", "*", "Z", "\n", "yw", "=", "Y", "*", "W", "\n", "\n", "yz", "=", "Y", "*", "Z", "\n", "xw", "=", "X", "*", "W", "\n", "\n", "rot_r0", "=", "tf", ".", "stack", "(", "[", "1", "-", "2.0", "*", "(", "sqY", "+", "sqZ", ")", ",", "2", "*", "(", "xy", "-", "zw", ")", ",", "2", "*", "(", "xz", "+", "yw", ")", "]", ")", "\n", "rot_r1", "=", "tf", ".", "stack", "(", "[", "2", "*", "(", "xy", "+", "zw", ")", ",", "1", "-", "2.0", "*", "(", "sqX", "+", "sqZ", ")", ",", "2", "*", "(", "yz", "-", "xw", ")", "]", ")", "\n", "rot_r2", "=", "tf", ".", "stack", "(", "[", "2", "*", "(", "xz", "-", "yw", ")", ",", "2", "*", "(", "yz", "+", "xw", ")", ",", "1", "-", "2.0", "*", "(", "sqX", "+", "sqY", ")", "]", ")", "\n", "\n", "rot_r0", "=", "rot_r0", ".", "unsqueeze", "(", "0", ")", "\n", "rot_r1", "=", "rot_r1", ".", "unsqueeze", "(", "0", ")", "\n", "rot_r2", "=", "rot_r2", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "rot", "=", "tf", ".", "stack", "(", "[", "rot_r0", ",", "rot_r1", ",", "rot_r2", "]", ",", "dim", "=", "1", ")", "\n", "\n", "tf", ".", "mul", "(", "rot", ",", "invs", ")", "\n", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_viewDirect_batch": [[98, 100], ["None"], "methods", ["None"], ["", "def", "Get_viewDirect_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rot_batch", "[", ":", ",", "2", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_upDirect_batch": [[101, 103], ["None"], "methods", ["None"], ["", "def", "Get_upDirect_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rot_batch", "[", ":", ",", "1", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.Get_rightDirect_batch": [[104, 106], ["None"], "methods", ["None"], ["", "def", "Get_rightDirect_batch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "rot_batch", "[", ":", ",", "0", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_eular_batch": [[108, 115], ["range", "tensorflow.stack", "rotation.RotationMtxBatch.rotMtx_eular", "rot_batch_list.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_eular"], ["", "def", "rotMtx_eular_batch", "(", "self", ",", "eular_batch", ")", ":", "\n", "        ", "rot_batch_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "eular_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "eular", "=", "eular_batch", "[", "i", ",", ":", "]", "\n", "rot", "=", "self", ".", "rotMtx_eular", "(", "eular", ")", "\n", "rot_batch_list", ".", "append", "(", "rot", ")", "\n", "", "self", ".", "rot_batch", "=", "tf", ".", "stack", "(", "rot_batch_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_eular": [[137, 158], ["tensorflow.sin", "tensorflow.cos", "tensorflow.sin", "tensorflow.cos", "tensorflow.sin", "tensorflow.cos", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat"], "methods", ["None"], ["def", "rotMtx_eular", "(", "self", ",", "euler_tensor", ")", ":", "\n", "        ", "phi", "=", "euler_tensor", "[", "0", "]", "# x", "\n", "theta", "=", "euler_tensor", "[", "1", "]", "# y", "\n", "psi", "=", "euler_tensor", "[", "2", "]", "# z", "\n", "\n", "s_ph", "=", "tf", ".", "sin", "(", "phi", ")", "# x", "\n", "c_ph", "=", "tf", ".", "cos", "(", "phi", ")", "\n", "\n", "s_t", "=", "tf", ".", "sin", "(", "theta", ")", "# y", "\n", "c_t", "=", "tf", ".", "cos", "(", "theta", ")", "\n", "\n", "s_ps", "=", "tf", ".", "sin", "(", "psi", ")", "# z", "\n", "c_ps", "=", "tf", ".", "cos", "(", "psi", ")", "\n", "\n", "r1", "=", "tf", ".", "concat", "(", "[", "c_t", "*", "c_ps", ",", "-", "c_t", "*", "s_ps", ",", "s_t", "]", ")", "\n", "r2", "=", "tf", ".", "concat", "(", "[", "c_ph", "*", "s_ps", "+", "c_ps", "*", "s_ph", "*", "s_t", ",", "c_ph", "*", "c_ps", "-", "s_ph", "*", "s_t", "*", "s_ps", ",", "-", "c_t", "*", "s_ph", "]", ")", "\n", "r3", "=", "tf", ".", "concat", "(", "[", "s_ps", "*", "s_ph", "-", "c_ph", "*", "c_ps", "*", "s_t", ",", "c_ps", "*", "s_ph", "+", "c_ph", "*", "s_t", "*", "s_ps", ",", "c_t", "*", "c_ph", "]", ")", "\n", "\n", "rot", "=", "tf", ".", "concat", "(", "[", "r1", ",", "r2", ",", "r3", "]", ")", "\n", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.eular_rotMtx_batch": [[159, 167], ["range", "tensorflow.stack", "rotation.RotationMtxBatch.eular_rotMtx", "eular_batch_list.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.eular_rotMtx"], ["", "def", "eular_rotMtx_batch", "(", "self", ",", "rot_batch", ")", ":", "\n", "        ", "eular_batch_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "rot_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "rot", "=", "rot_batch", "[", "i", ",", ":", "]", "\n", "eular", "=", "self", ".", "eular_rotMtx", "(", "rot", ")", "\n", "eular_batch_list", ".", "append", "(", "eular", ")", "\n", "", "eular_batch", "=", "tf", ".", "stack", "(", "eular_batch_list", ")", "\n", "return", "eular_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.eular_rotMtx": [[168, 180], ["tensorflow.sqrt", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.stack", "tensorflow.less", "tensorflow.less", "tensorflow.less", "tensorflow.atan2", "tensorflow.atan2", "tensorflow.atan2", "tensorflow.atan2", "tensorflow.zeros_like", "tensorflow.atan2"], "methods", ["None"], ["", "def", "eular_rotMtx", "(", "self", ",", "rot", ")", ":", "\n", "        ", "c_t_y", "=", "tf", ".", "sqrt", "(", "\n", "rot", "[", "2", "]", "[", "2", "]", "*", "rot", "[", "2", "]", "[", "2", "]", "+", "rot", "[", "1", "]", "[", "2", "]", "*", "rot", "[", "1", "]", "[", "2", "]", "\n", ")", "\n", "\n", "psi_z", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "c_t_y", ",", "1e-6", ")", ",", "lambda", ":", "tf", ".", "atan2", "(", "rot", "[", "1", "]", "[", "0", "]", ",", "rot", "[", "1", "]", "[", "1", "]", ")", ",", "lambda", ":", "tf", ".", "atan2", "(", "rot", "[", "0", "]", "[", "1", "]", ",", "rot", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "theta_y", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "c_t_y", ",", "1e-6", ")", ",", "lambda", ":", "tf", ".", "atan2", "(", "rot", "[", "0", "]", "[", "2", "]", ",", "c_t_y", ")", ",", "lambda", ":", "tf", ".", "atan2", "(", "rot", "[", "0", "]", "[", "2", "]", ",", "c_t_y", ")", ")", "\n", "phi_x", "=", "tf", ".", "cond", "(", "tf", ".", "less", "(", "c_t_y", ",", "1e-6", ")", ",", "lambda", ":", "tf", ".", "zeros_like", "(", "theta_y", ")", ",", "lambda", ":", "tf", ".", "atan2", "(", "rot", "[", "1", "]", "[", "2", "]", ",", "rot", "[", "2", "]", "[", "2", "]", ")", ")", "\n", "\n", "euler_tensor", "=", "tf", ".", "stack", "(", "[", "phi_x", ",", "theta_y", ",", "psi_z", "]", ")", "\n", "\n", "return", "euler_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_axisAngle": [[182, 206], ["tensorflow.cos", "tensorflow.sin", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "len", "tensorflow.squeeze", "len", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "rotMtx_axisAngle", "(", "self", ",", "axis_tensor", ",", "rad_tensor", ")", ":", "\n", "        ", "if", "len", "(", "axis_tensor", ".", "shape", ")", ">", "1", ":", "\n", "            ", "axis_tensor", "=", "tf", ".", "squeeze", "(", "axis_tensor", ")", "\n", "", "if", "len", "(", "rad_tensor", ".", "shape", ")", ">", "1", ":", "\n", "            ", "rad_tensor", "=", "tf", ".", "squeeze", "(", "rad_tensor", ")", "\n", "\n", "", "c", "=", "tf", ".", "cos", "(", "rad_tensor", ")", "\n", "s", "=", "tf", ".", "sin", "(", "rad_tensor", ")", "\n", "\n", "x", "=", "axis_tensor", "[", "0", "]", "\n", "y", "=", "axis_tensor", "[", "1", "]", "\n", "z", "=", "axis_tensor", "[", "2", "]", "\n", "\n", "rot_r0", "=", "tf", ".", "stack", "(", "[", "c", "+", "(", "1.0", "-", "c", ")", "*", "x", "*", "x", ",", "(", "1.0", "-", "c", ")", "*", "x", "*", "y", "-", "s", "*", "z", ",", "(", "1.0", "-", "c", ")", "*", "x", "*", "z", "+", "s", "*", "y", "]", ",", "axis", "=", "1", ")", "\n", "rot_r1", "=", "tf", ".", "stack", "(", "[", "(", "1.0", "-", "c", ")", "*", "x", "*", "y", "+", "s", "*", "z", ",", "c", "+", "(", "1.0", "-", "c", ")", "*", "y", "*", "y", ",", "(", "1.0", "-", "c", ")", "*", "y", "*", "z", "-", "s", "*", "x", "]", ",", "axis", "=", "1", ")", "\n", "rot_r2", "=", "tf", ".", "stack", "(", "[", "(", "1.0", "-", "c", ")", "*", "x", "*", "z", "-", "s", "*", "y", ",", "(", "1.0", "-", "c", ")", "*", "y", "*", "z", "+", "s", "*", "x", ",", "c", "+", "(", "1.0", "-", "c", ")", "*", "z", "*", "z", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# rot_r0 = rot_r0.unsqueeze(0)", "\n", "# rot_r1 = rot_r1.unsqueeze(0)", "\n", "# rot_r2 = rot_r2.unsqueeze(0)", "\n", "\n", "rot", "=", "tf", ".", "stack", "(", "[", "rot_r0", ",", "rot_r1", ",", "rot_r2", "]", ",", "axis", "=", "1", ")", "# [batch, row, col] so axis=1", "\n", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.RotationMtxBatch.rotMtx_axisAngle_batch": [[207, 226], ["tensorflow.cos", "tensorflow.sin", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack"], "methods", ["None"], ["", "def", "rotMtx_axisAngle_batch", "(", "self", ",", "axis_tensor", ",", "rad_tensor", ")", ":", "\n", "        ", "c", "=", "tf", ".", "cos", "(", "rad_tensor", ")", "\n", "s", "=", "tf", ".", "sin", "(", "rad_tensor", ")", "\n", "\n", "x", "=", "axis_tensor", "[", ":", ",", "0", "]", "\n", "y", "=", "axis_tensor", "[", ":", ",", "1", "]", "\n", "z", "=", "axis_tensor", "[", ":", ",", "2", "]", "\n", "\n", "rot_r0", "=", "tf", ".", "stack", "(", "[", "c", "+", "(", "1.0", "-", "c", ")", "*", "x", "*", "x", ",", "(", "1.0", "-", "c", ")", "*", "x", "*", "y", "-", "s", "*", "z", ",", "(", "1.0", "-", "c", ")", "*", "x", "*", "z", "+", "s", "*", "y", "]", ",", "axis", "=", "-", "1", ")", "\n", "rot_r1", "=", "tf", ".", "stack", "(", "[", "(", "1.0", "-", "c", ")", "*", "x", "*", "y", "+", "s", "*", "z", ",", "c", "+", "(", "1.0", "-", "c", ")", "*", "y", "*", "y", ",", "(", "1.0", "-", "c", ")", "*", "y", "*", "z", "-", "s", "*", "x", "]", ",", "axis", "=", "-", "1", ")", "\n", "rot_r2", "=", "tf", ".", "stack", "(", "[", "(", "1.0", "-", "c", ")", "*", "x", "*", "z", "-", "s", "*", "y", ",", "(", "1.0", "-", "c", ")", "*", "y", "*", "z", "+", "s", "*", "x", ",", "c", "+", "(", "1.0", "-", "c", ")", "*", "z", "*", "z", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# rot_r0 = rot_r0.unsqueeze(0)", "\n", "# rot_r1 = rot_r1.unsqueeze(0)", "\n", "# rot_r2 = rot_r2.unsqueeze(0)", "\n", "\n", "rot", "=", "tf", ".", "stack", "(", "[", "rot_r0", ",", "rot_r1", ",", "rot_r2", "]", ",", "axis", "=", "1", ")", "# [batch, row, col] so axis=1", "\n", "\n", "return", "rot", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.__init__": [[231, 247], ["tensorflow.reshape", "tensorflow.reshape", "rotation.RotationMtxBatch.__init__", "tensorflow.reshape", "rotation.ExtMtxBatch.rotMtx_location_batch", "tensorflow.reshape", "rotation.ExtMtxBatch.rotMtx_locationOpengl_batch"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.__init__", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_location_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_locationOpengl_batch"], ["    ", "def", "__init__", "(", "self", ",", "**", "ext_param", ")", ":", "\n", "# Normalize [batch_size, data]", "\n", "#", "\n", "        ", "if", "ext_param", "[", "'type_ext'", "]", "==", "'matrix'", ":", "\n", "            ", "self", ".", "data_rot", "=", "tf", ".", "reshape", "(", "ext_param", "[", "'data_rot'", "]", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "self", ".", "data_t", "=", "tf", ".", "reshape", "(", "ext_param", "[", "'data_t'", "]", ",", "[", "-", "1", ",", "3", "]", ")", "\n", "super", "(", "ExtMtxBatch", ",", "self", ")", ".", "__init__", "(", "type_rot", "=", "'matrix'", ",", "data", "=", "self", ".", "data_rot", ")", "\n", "self", ".", "t_batch", "=", "self", ".", "data_t", "\n", "", "elif", "ext_param", "[", "'type_ext'", "]", "==", "'location'", ":", "\n", "            ", "self", ".", "data", "=", "tf", ".", "reshape", "(", "ext_param", "[", "'data'", "]", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "# super(ExtMtxBatch, self).__init__(type_rot='data', data=self.data)", "\n", "self", ".", "rotMtx_location_batch", "(", "self", ".", "data", ")", "\n", "", "elif", "ext_param", "[", "'type_ext'", "]", "==", "'locationOpengl'", ":", "\n", "            ", "self", ".", "data", "=", "tf", ".", "reshape", "(", "ext_param", "[", "'data'", "]", ",", "[", "-", "1", ",", "3", ",", "3", "]", ")", "\n", "# super(ExtMtxBatch, self).__init__(type_rot='data', data=self.data)", "\n", "self", ".", "rotMtx_locationOpengl_batch", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_matrixExt_batch": [[248, 251], ["rotation.ExtMtxBatch."], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "create_matrixExt_batch", "(", "class_self", ",", "rot_data_batch", ",", "t_data_batch", ")", ":", "\n", "        ", "return", "class_self", "(", "type_ext", "=", "'matrix'", ",", "data_rot", "=", "rot_data_batch", ",", "data_t", "=", "t_data_batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_location_batch": [[253, 256], ["rotation.ExtMtxBatch."], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "create_location_batch", "(", "class_self", ",", "data_batch", ")", ":", "\n", "        ", "return", "class_self", "(", "type_ext", "=", "'location'", ",", "data", "=", "data_batch", ")", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.create_locationOpengl_batch": [[256, 259], ["rotation.ExtMtxBatch."], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "create_locationOpengl_batch", "(", "class_self", ",", "data_batch", ")", ":", "\n", "        ", "return", "class_self", "(", "type_ext", "=", "'locationOpengl'", ",", "data", "=", "data_batch", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_location_batch": [[260, 270], ["range", "tensorflow.stack", "tensorflow.stack", "rotation.ExtMtxBatch.rotMtx_location", "rot_batch_list.append", "t_batch_list.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_location"], ["", "def", "rotMtx_location_batch", "(", "self", ",", "eye_center_up_batch", ",", "re_grad", "=", "False", ")", ":", "\n", "        ", "rot_batch_list", "=", "[", "]", "\n", "t_batch_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "eye_center_up_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "eye_center_up", "=", "eye_center_up_batch", "[", "i", ",", ":", ",", ":", "]", "\n", "rot", ",", "t", "=", "self", ".", "rotMtx_location", "(", "eye_center_up", ",", "re_grad", ")", "\n", "rot_batch_list", ".", "append", "(", "rot", ")", "\n", "t_batch_list", ".", "append", "(", "t", ")", "\n", "", "self", ".", "rot_batch", "=", "tf", ".", "stack", "(", "rot_batch_list", ")", "\n", "self", ".", "t_batch", "=", "tf", ".", "stack", "(", "t_batch_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_location": [[271, 292], ["tensorflow.nn.l2_normalize", "tensorflow.cross", "tensorflow.nn.l2_normalize", "tensorflow.cross", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "rotMtx_location", "(", "self", ",", "eye_center_up", ",", "re_grad", "=", "False", ")", ":", "\n", "        ", "eye", "=", "eye_center_up", "[", "0", "]", "\n", "center", "=", "eye_center_up", "[", "1", "]", "\n", "up", "=", "eye_center_up", "[", "2", "]", "\n", "\n", "view_dir", "=", "center", "-", "eye", "\n", "view_dir", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "view_dir", ")", "\n", "\n", "down_dir", "=", "-", "up", "\n", "\n", "right_dir", "=", "tf", ".", "cross", "(", "down_dir", ",", "view_dir", ")", "\n", "right_dir", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "right_dir", ")", "\n", "\n", "down_dir", "=", "tf", ".", "cross", "(", "view_dir", ",", "right_dir", ")", "\n", "\n", "rot", "=", "tf", ".", "stack", "(", "[", "right_dir", ",", "down_dir", ",", "view_dir", "]", ")", "\n", "eye_trans", "=", "tf", ".", "expand_dims", "(", "eye", ",", "-", "1", ")", "\n", "t_trans", "=", "-", "tf", ".", "matmul", "(", "rot", ",", "eye_trans", ")", "\n", "t", "=", "tf", ".", "transpose", "(", "tf", ".", "squeeze", "(", "t_trans", ")", ")", "\n", "\n", "return", "rot", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_locationOpengl_batch": [[294, 304], ["range", "tensorflow.stack", "tensorflow.stack", "rotation.ExtMtxBatch.rotMtx_locationOpengl", "rot_batch_list.append", "t_batch_list.append"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_locationOpengl"], ["", "def", "rotMtx_locationOpengl_batch", "(", "self", ",", "eye_center_up_batch", ",", "re_grad", "=", "False", ")", ":", "\n", "        ", "rot_batch_list", "=", "[", "]", "\n", "t_batch_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "eye_center_up_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "eye_center_up", "=", "eye_center_up_batch", "[", "i", ",", ":", ",", ":", "]", "\n", "rot", ",", "t", "=", "self", ".", "rotMtx_locationOpengl", "(", "eye_center_up", ",", "re_grad", ")", "\n", "rot_batch_list", ".", "append", "(", "rot", ")", "\n", "t_batch_list", ".", "append", "(", "t", ")", "\n", "", "self", ".", "rot_batch", "=", "tf", ".", "stack", "(", "rot_batch_list", ")", "\n", "self", ".", "t_batch", "=", "tf", ".", "stack", "(", "t_batch_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotMtx_locationOpengl": [[305, 325], ["tensorflow.nn.l2_normalize", "tensorflow.cross", "tensorflow.nn.l2_normalize", "tensorflow.cross", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.transpose", "tensorflow.matmul", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "rotMtx_locationOpengl", "(", "self", ",", "eye_center_up", ",", "re_grad", "=", "False", ")", ":", "\n", "        ", "eye", "=", "eye_center_up", "[", "0", "]", "\n", "center", "=", "eye_center_up", "[", "1", "]", "\n", "up", "=", "eye_center_up", "[", "2", "]", "\n", "\n", "view_dir", "=", "-", "(", "center", "-", "eye", ")", "\n", "view_dir", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "view_dir", ")", "\n", "\n", "\n", "right_dir", "=", "tf", ".", "cross", "(", "up", ",", "view_dir", ")", "\n", "right_dir", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "right_dir", ")", "\n", "\n", "up_dir", "=", "tf", ".", "cross", "(", "view_dir", ",", "right_dir", ")", "\n", "\n", "rot", "=", "tf", ".", "stack", "(", "[", "right_dir", ",", "up_dir", ",", "view_dir", "]", ")", "\n", "eye_trans", "=", "tf", ".", "expand_dims", "(", "eye", ",", "-", "1", ")", "\n", "t_trans", "=", "-", "tf", ".", "matmul", "(", "rot", ",", "eye_trans", ")", "\n", "t", "=", "tf", ".", "transpose", "(", "tf", ".", "squeeze", "(", "t_trans", ")", ")", "\n", "\n", "return", "rot", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.Apply_batch": [[327, 336], ["tensorflow.matmul", "tensorflow.squeeze", "len", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "Apply_batch", "(", "self", ",", "v3d", ")", ":", "\n", "        ", "if", "len", "(", "v3d", ".", "shape", ")", "<", "3", ":", "\n", "            ", "v3d", "=", "tf", ".", "expand_dims", "(", "v3d", ",", "-", "1", ")", "\n", "", "v3d_rot", "=", "tf", ".", "matmul", "(", "self", ".", "rot_batch", ",", "v3d", ")", "\n", "v3d_rot", "=", "tf", ".", "squeeze", "(", "v3d_rot", ",", "-", "1", ")", "\n", "\n", "v3d_transform", "=", "v3d_rot", "+", "self", ".", "t_batch", "\n", "\n", "return", "v3d_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.Get_ext_batch": [[337, 346], ["tensorflow.expand_dims", "tensorflow.concat", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat"], "methods", ["None"], ["", "def", "Get_ext_batch", "(", "self", ")", ":", "\n", "        ", "t_batch_trans", "=", "tf", ".", "expand_dims", "(", "self", ".", "t_batch", ",", "axis", "=", "-", "1", ")", "\n", "ext_batch", "=", "tf", ".", "concat", "(", "[", "self", ".", "rot_batch", ",", "t_batch_trans", "]", ",", "axis", "=", "2", ")", "\n", "\n", "r4", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "r4", "=", "tf", ".", "tile", "(", "r4", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "ext_batch", "=", "tf", ".", "concat", "(", "[", "ext_batch", ",", "r4", "]", ",", "axis", "=", "1", ")", "\n", "\n", "return", "ext_batch", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.Get_eye_batch": [[347, 352], ["tensorflow.expand_dims", "tensorflow.squeeze", "tensorflow.matmul"], "methods", ["None"], ["", "def", "Get_eye_batch", "(", "self", ")", ":", "\n", "        ", "mtx_t_trans", "=", "tf", ".", "expand_dims", "(", "self", ".", "t_batch", ",", "1", ")", "\n", "eye_trans", "=", "-", "tf", ".", "matmul", "(", "mtx_t_trans", ",", "self", ".", "rot_batch", ")", "\n", "eye", "=", "tf", ".", "squeeze", "(", "eye_trans", ",", "squeeze_dims", "=", "1", ")", "\n", "return", "eye", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.rotate_batch": [[360, 385], ["rotation.ExtMtxBatch.Apply_batch", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.squeeze", "rotation.ExtMtxBatch.Get_eye_batch"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.Apply_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.Get_eye_batch"], ["def", "rotate_batch", "(", "self", ",", "rel_rot_batch", ",", "centre_mesh_batch", ")", ":", "\n", "        ", "\"\"\"\n        :param rel_rot_batch:\n        :param centre_mesh_batch: world xyz\n        :return:\n        \"\"\"", "\n", "# Camera centre", "\n", "centre_mesh_cameraAxis_batch", "=", "self", ".", "Apply_batch", "(", "centre_mesh_batch", ")", "\n", "\n", "# Rotation", "\n", "r1_r", "=", "tf", ".", "matmul", "(", "rel_rot_batch", ",", "self", ".", "rot_batch", ")", "\n", "\n", "# Translation", "\n", "eye_trans", "=", "tf", ".", "expand_dims", "(", "self", ".", "Get_eye_batch", "(", ")", ",", "-", "1", ")", "\n", "r1_r_c", "=", "tf", ".", "matmul", "(", "r1_r", ",", "eye_trans", ")", "\n", "r1_r_c", "=", "tf", ".", "squeeze", "(", "r1_r_c", ",", "squeeze_dims", "=", "-", "1", ")", "\n", "\n", "centre_mesh_cameraAxis_batch_trans", "=", "tf", ".", "expand_dims", "(", "centre_mesh_cameraAxis_batch", ",", "-", "1", ")", "\n", "r1_c1", "=", "tf", ".", "matmul", "(", "rel_rot_batch", ",", "centre_mesh_cameraAxis_batch_trans", ")", "\n", "r1_c1", "=", "tf", ".", "squeeze", "(", "r1_c1", ",", "squeeze_dims", "=", "-", "1", ")", "\n", "\n", "t", "=", "centre_mesh_cameraAxis_batch", "-", "r1_r_c", "-", "r1_c1", "\n", "\n", "\n", "return", "r1_r", ",", "t", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_render.CameraRender.__init__": [[24, 44], ["camera.CameraMtxBatch.__init__", "h_intrinsic.Get_image_width", "h_intrinsic.Get_image_height", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.tile", "tensorflow.tile", "tensorflow.constant", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.__init__", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.Get_image_width", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera.IntrinsicMtxBatch.Get_image_height"], ["    ", "def", "__init__", "(", "self", ",", "h_intrinsic", ",", "h_extenal", ",", "near", "=", "0.1", ",", "far", "=", "2000.0", ")", ":", "\n", "        ", "super", "(", "CameraRender", ",", "self", ")", ".", "__init__", "(", "h_intrinsic", ",", "h_extenal", ")", "\n", "\n", "self", ".", "h_intrinsic", "=", "h_intrinsic", "\n", "self", ".", "h_extenal", "=", "h_extenal", "\n", "\n", "self", ".", "focal_len_x", "=", "h_intrinsic", ".", "focal_len_x", "\n", "self", ".", "focal_len_y", "=", "h_intrinsic", ".", "focal_len_y", "\n", "\n", "self", ".", "u", "=", "h_intrinsic", ".", "u", "\n", "self", ".", "v", "=", "h_intrinsic", ".", "v", "\n", "\n", "self", ".", "image_width_batch", "=", "h_intrinsic", ".", "Get_image_width", "(", ")", "\n", "self", ".", "image_height_batch", "=", "h_intrinsic", ".", "Get_image_height", "(", ")", "\n", "\n", "#super(CameraRender, self)._Cal_mtxProj()", "\n", "self", ".", "near", "=", "tf", ".", "reshape", "(", "tf", ".", "constant", "(", "near", ")", ",", "shape", "=", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "far", "=", "tf", ".", "reshape", "(", "tf", ".", "constant", "(", "far", ")", ",", "shape", "=", "[", "1", ",", "1", "]", ")", "\n", "self", ".", "near", "=", "tf", ".", "tile", "(", "self", ".", "near", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "self", ".", "far", "=", "tf", ".", "tile", "(", "self", ".", "far", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_render.CameraRender.Get_modelViewMatrix_batch": [[45, 74], ["tensorflow.constant", "tensorflow.tile", "tensorflow.matmul", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.constant", "tensorflow.tile", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.eye", "tensorflow.concat", "tensorflow.concat", "tensorflow.matmul", "camera_render.CameraRender.Get_eye_batch"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.rotation.ExtMtxBatch.Get_eye_batch"], ["", "def", "Get_modelViewMatrix_batch", "(", "self", ",", "re_grad", "=", "False", ")", ":", "\n", "        ", "mtx_inv", "=", "tf", ".", "constant", "(", "\n", "[", "\n", "[", "1.", ",", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "-", "1.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "-", "1.", "]", "\n", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "3", "]", "\n", ")", "\n", "mtx_inv", "=", "tf", ".", "tile", "(", "mtx_inv", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n", "# Inv rotate", "\n", "rot_inv", "=", "tf", ".", "matmul", "(", "mtx_inv", ",", "self", ".", "mtx_rot", ")", "\n", "c4", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "0.", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "1", "]", ")", "\n", "c4", "=", "tf", ".", "tile", "(", "c4", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "rot_inv", "=", "tf", ".", "concat", "(", "[", "rot_inv", ",", "c4", "]", ",", "axis", "=", "2", ")", "\n", "\n", "r4", "=", "tf", ".", "constant", "(", "[", "0.", ",", "0.", ",", "0.", ",", "1.", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "4", "]", ")", "\n", "r4", "=", "tf", ".", "tile", "(", "r4", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "rot_inv", "=", "tf", ".", "concat", "(", "[", "rot_inv", ",", "r4", "]", ",", "axis", "=", "1", ")", "\n", "\n", "eye_inv", "=", "-", "self", ".", "Get_eye_batch", "(", ")", "\n", "eye_inv_trans", "=", "tf", ".", "expand_dims", "(", "eye_inv", ",", "axis", "=", "-", "1", ")", "\n", "trans_id_inv", "=", "tf", ".", "eye", "(", "3", ",", "batch_shape", "=", "[", "self", ".", "batch_size", "]", ")", "\n", "trans_inv", "=", "tf", ".", "concat", "(", "[", "trans_id_inv", ",", "eye_inv_trans", "]", ",", "axis", "=", "2", ")", "\n", "trans_inv", "=", "tf", ".", "concat", "(", "[", "trans_inv", ",", "r4", "]", ",", "axis", "=", "1", ")", "\n", "\n", "mv", "=", "tf", ".", "matmul", "(", "rot_inv", ",", "trans_inv", ")", "\n", "\n", "return", "mv", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera.camera_render.CameraRender.Get_projectionFrustrumMatrix_batch": [[75, 109], ["tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.concat"], "methods", ["None"], ["", "def", "Get_projectionFrustrumMatrix_batch", "(", "self", ",", "re_grad", "=", "False", ")", ":", "\n", "# From triangle similarity", "\n", "        ", "width", "=", "self", ".", "image_width_batch", "*", "self", ".", "near", "/", "self", ".", "focal_len_x", "\n", "height", "=", "self", ".", "image_height_batch", "*", "self", ".", "near", "/", "self", ".", "focal_len_y", "\n", "\n", "right", "=", "width", "-", "(", "self", ".", "u", "*", "self", ".", "near", "/", "self", ".", "focal_len_x", ")", "\n", "left", "=", "right", "-", "width", "\n", "\n", "top", "=", "self", ".", "v", "*", "self", ".", "near", "/", "self", ".", "focal_len_y", "\n", "bottom", "=", "top", "-", "height", "\n", "\n", "vertical_range", "=", "right", "-", "left", "\n", "p00", "=", "2", "*", "self", ".", "near", "/", "vertical_range", "\n", "p02", "=", "(", "right", "+", "left", ")", "/", "vertical_range", "\n", "\n", "horizon_range", "=", "top", "-", "bottom", "\n", "p11", "=", "2", "*", "self", ".", "near", "/", "horizon_range", "\n", "p12", "=", "(", "top", "+", "bottom", ")", "/", "horizon_range", "\n", "\n", "depth_range", "=", "self", ".", "far", "-", "self", ".", "near", "\n", "p_22", "=", "-", "(", "self", ".", "far", "+", "self", ".", "near", ")", "/", "depth_range", "\n", "p_23", "=", "-", "2.0", "*", "(", "self", ".", "far", "*", "self", ".", "near", "/", "depth_range", ")", "\n", "\n", "zero_fill", "=", "tf", ".", "zeros_like", "(", "p00", ")", "\n", "minus_one_fill", "=", "tf", ".", "ones_like", "(", "p00", ")", "\n", "\n", "r1", "=", "tf", ".", "stack", "(", "[", "p00", ",", "zero_fill", ",", "p02", ",", "zero_fill", "]", ",", "axis", "=", "2", ")", "\n", "r2", "=", "tf", ".", "stack", "(", "[", "zero_fill", ",", "p11", ",", "p12", ",", "zero_fill", "]", ",", "axis", "=", "2", ")", "\n", "r3", "=", "tf", ".", "stack", "(", "[", "zero_fill", ",", "zero_fill", ",", "p_22", ",", "p_23", "]", ",", "axis", "=", "2", ",", "name", "=", "'mtx_fustrum_r3_batch'", ")", "\n", "r4", "=", "tf", ".", "stack", "(", "[", "zero_fill", ",", "zero_fill", ",", "-", "minus_one_fill", ",", "zero_fill", "]", ",", "axis", "=", "2", ")", "\n", "\n", "P", "=", "tf", ".", "concat", "(", "[", "r1", ",", "r2", ",", "r3", ",", "r4", "]", ",", "axis", "=", "1", ",", "name", "=", "'mtx_fustrum_batch'", ")", "\n", "\n", "return", "P", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.data_loader_semi_unsupervised_skin.DataLoader.__init__": [[10, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset_dir", "=", "None", ",", "\n", "batch_size", "=", "None", ",", "\n", "img_height", "=", "None", ",", "\n", "img_width", "=", "None", ",", "\n", "num_source", "=", "None", ",", "\n", "aug_crop_size", "=", "None", ",", "\n", "read_pose", "=", "False", ",", "\n", "match_num", "=", "0", ",", "\n", "read_gpmm", "=", "False", ",", "\n", "flag_data_aug", "=", "False", ",", "\n", "flag_shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "dataset_dir", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "img_height", "=", "img_height", "\n", "self", ".", "img_width", "=", "img_width", "\n", "self", ".", "num_source", "=", "num_source", "\n", "self", ".", "aug_crop_size", "=", "aug_crop_size", "\n", "self", ".", "read_pose", "=", "read_pose", "\n", "self", ".", "match_num", "=", "match_num", "\n", "self", ".", "flag_data_aug", "=", "flag_data_aug", "\n", "self", ".", "flag_shuffle", "=", "flag_shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.data_loader_semi_unsupervised_skin.DataLoader.format_file_list": [[33, 68], ["int", "print", "list", "zip", "int", "print", "open", "f.readlines", "os.path.join", "os.path.join", "os.path.join", "zip", "random.shuffle", "print", "len", "range", "x.split", "x.split", "range", "range", "range", "len", "len", "print", "x.split", "len", "len", "len"], "methods", ["None"], ["", "def", "format_file_list", "(", "self", ",", "data_root", ",", "split", ")", ":", "\n", "        ", "all_list", "=", "{", "}", "\n", "with", "open", "(", "data_root", "+", "'/%s.txt'", "%", "split", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "frames", "=", "f", ".", "readlines", "(", ")", "\n", "", "flag_slg_mul", "=", "[", "x", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "x", "in", "frames", "]", "\n", "subfolders", "=", "[", "x", ".", "split", "(", "' '", ")", "[", "1", "]", "for", "x", "in", "frames", "]", "\n", "frame_ids", "=", "[", "x", ".", "split", "(", "' '", ")", "[", "2", "]", "[", ":", "-", "1", "]", "for", "x", "in", "frames", "]", "\n", "\n", "image_file_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "subfolders", "[", "i", "]", ",", "\n", "frame_ids", "[", "i", "]", "+", "'.jpg'", ")", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", "]", "\n", "cam_file_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "subfolders", "[", "i", "]", ",", "\n", "frame_ids", "[", "i", "]", "+", "'_cam.txt'", ")", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", "]", "\n", "skin_file_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "subfolders", "[", "i", "]", ",", "\n", "frame_ids", "[", "i", "]", "+", "'_skin.jpg'", ")", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", "]", "\n", "\n", "steps_per_epoch", "=", "int", "(", "len", "(", "image_file_list", ")", "//", "self", ".", "batch_size", ")", "\n", "print", "(", "\"*************************************************************** format_file_list \"", ")", "\n", "img_cam", "=", "list", "(", "zip", "(", "image_file_list", ",", "cam_file_list", ",", "skin_file_list", ",", "flag_slg_mul", ")", ")", "\n", "if", "self", ".", "flag_shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "img_cam", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Without shuffle\"", ")", "\n", "", "image_file_list", ",", "cam_file_list", ",", "skin_file_list", ",", "flag_slg_mul", "=", "zip", "(", "*", "img_cam", ")", "\n", "\n", "all_list", "[", "'image_file_list'", "]", "=", "image_file_list", "\n", "all_list", "[", "'cam_file_list'", "]", "=", "cam_file_list", "\n", "all_list", "[", "'skin_file_list'", "]", "=", "skin_file_list", "\n", "all_list", "[", "'flag_slg_mul'", "]", "=", "flag_slg_mul", "\n", "\n", "self", ".", "steps_per_epoch", "=", "int", "(", "len", "(", "all_list", "[", "'image_file_list'", "]", ")", "//", "self", ".", "batch_size", ")", "\n", "print", "(", "\"Finish format_file_list\"", ")", "\n", "if", "len", "(", "image_file_list", ")", ">", "10", ":", "\n", "            ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "print", "(", "image_file_list", "[", "i", "]", ")", "\n", "", "", "return", "all_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.data_loader_semi_unsupervised_skin.DataLoader.load_train_batch": [[69, 135], ["tensorflow.placeholder", "tensorflow.data.Dataset.from_tensor_slices().map", "tensorflow.placeholder", "tensorflow.data.Dataset.from_tensor_slices().map", "tensorflow.placeholder", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.placeholder", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.zip", "all_dataset.shuffle().repeat().prefetch.shuffle().repeat().prefetch.batch", "all_dataset.shuffle().repeat().prefetch.shuffle().repeat().prefetch.map", "all_dataset.shuffle().repeat().prefetch.shuffle().repeat().prefetch.make_initializable_iterator", "tensorflow.cast", "tensorflow.concat", "tensorflow.placeholder", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.placeholder", "tensorflow.data.Dataset.from_tensor_slices", "all_dataset.shuffle().repeat().prefetch.shuffle().repeat().prefetch.shuffle().repeat().prefetch", "tensorflow.device", "tensorflow.read_file", "tensorflow.image.decode_jpeg", "src_common.common.tf_io.unpack_image_sequence", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "src_common.common.tf_io.data_augmentation_mul", "src_common.common.tf_io.data_augmentation_mul", "all_dataset.shuffle().repeat().prefetch.shuffle().repeat().prefetch.shuffle().repeat", "all_dataset.shuffle().repeat().prefetch.shuffle().repeat().prefetch.shuffle"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.tf_io.unpack_image_sequence", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.tf_io.data_augmentation_mul", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.tf_io.data_augmentation_mul"], ["", "def", "load_train_batch", "(", "self", ",", "is_test", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Load a batch of training instances using the new tensorflow\n        Dataset api.\n        \"\"\"", "\n", "def", "_parse_train_img", "(", "img_path", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "                ", "img_buffer", "=", "tf", ".", "read_file", "(", "img_path", ")", "\n", "image_decoded", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "img_buffer", ")", "\n", "# TODO: TW Image sequence structure", "\n", "tgt_image", ",", "src_image_stack", "=", "unpack_image_sequence", "(", "\n", "image_decoded", ",", "self", ".", "img_height", ",", "self", ".", "img_width", ",", "self", ".", "num_source", ")", "\n", "", "return", "tgt_image", ",", "src_image_stack", "\n", "\n", "", "def", "_batch_preprocessing", "(", "stack_images", ",", "stack_images_skin", ",", "flag_sgl_mul", ",", "intrinsics", ",", "optional_data1", ",", "optional_data2", ")", ":", "\n", "            ", "intrinsics", "=", "tf", ".", "cast", "(", "intrinsics", ",", "tf", ".", "float32", ")", "\n", "image_all", "=", "tf", ".", "concat", "(", "[", "stack_images", "[", "0", "]", ",", "stack_images", "[", "1", "]", ",", "stack_images_skin", "[", "0", "]", ",", "stack_images_skin", "[", "1", "]", "]", ",", "axis", "=", "3", ")", "\n", "\n", "if", "not", "is_test", "and", "self", ".", "flag_data_aug", ":", "# otherwise matches coords are wrong", "\n", "                ", "if", "self", ".", "match_num", "==", "0", ":", "\n", "                    ", "image_all", ",", "intrinsics", ",", "matches", "=", "data_augmentation_mul", "(", "\n", "image_all", ",", "intrinsics", ",", "self", ".", "img_height", ",", "self", ".", "img_width", ")", "\n", "", "else", ":", "\n", "                    ", "image_all", ",", "intrinsics", ",", "matches", "=", "data_augmentation_mul", "(", "\n", "image_all", ",", "intrinsics", ",", "self", ".", "img_height", ",", "self", ".", "img_width", ",", "optional_data2", ")", "\n", "", "", "else", ":", "\n", "                ", "matches", "=", "optional_data2", "\n", "\n", "", "image", "=", "image_all", "[", ":", ",", ":", ",", ":", ",", ":", "3", "*", "(", "self", ".", "num_source", "+", "1", ")", "]", "\n", "image_skin", "=", "image_all", "[", ":", ",", ":", ",", ":", ",", "3", "*", "(", "self", ".", "num_source", "+", "1", ")", ":", "]", "\n", "return", "image", ",", "image_skin", ",", "flag_sgl_mul", ",", "intrinsics", ",", "optional_data1", ",", "matches", "\n", "\n", "", "input_image_names_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'input_image_names_ph'", ")", "\n", "image_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "input_image_names_ph", ")", ".", "map", "(", "_parse_train_img", ")", "\n", "\n", "input_skin_names_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'input_skin_names_ph'", ")", "\n", "skin_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "input_skin_names_ph", ")", ".", "map", "(", "_parse_train_img", ")", "\n", "\n", "flag_sgl_mul_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "'flag_sgl_mul_ph'", ")", "\n", "flag_sgl_mul_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "flag_sgl_mul_ph", ")", "\n", "\n", "cam_intrinsics_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "1", "+", "self", ".", "num_source", ",", "3", ",", "3", "]", ",", "name", "=", "'cam_intrinsics_ph'", ")", "\n", "intrinsics_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "cam_intrinsics_ph", ")", "\n", "\n", "datasets", "=", "(", "image_dataset", ",", "skin_dataset", ",", "flag_sgl_mul_dataset", ",", "intrinsics_dataset", ")", "\n", "if", "self", ".", "read_pose", ":", "\n", "            ", "poses_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "1", "+", "self", ".", "num_source", ",", "6", "]", ",", "name", "=", "'poses_ph'", ")", "\n", "pose_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "poses_ph", ")", "\n", "datasets", "=", "datasets", "+", "(", "pose_dataset", ",", ")", "\n", "", "else", ":", "\n", "            ", "datasets", "=", "datasets", "+", "(", "intrinsics_dataset", ",", ")", "\n", "", "if", "self", ".", "match_num", ">", "0", ":", "\n", "            ", "matches_ph", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "(", "1", "+", "self", ".", "num_source", ")", ",", "self", ".", "match_num", ",", "2", "]", ",", "name", "=", "'matches_ph'", ")", "\n", "match_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "matches_ph", ")", "\n", "datasets", "=", "datasets", "+", "(", "match_dataset", ",", ")", "\n", "", "else", ":", "\n", "            ", "datasets", "=", "datasets", "+", "(", "intrinsics_dataset", ",", ")", "\n", "\n", "", "all_dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "datasets", ")", "\n", "all_dataset", "=", "all_dataset", ".", "batch", "(", "self", ".", "batch_size", ")", "\n", "if", "self", ".", "flag_shuffle", ":", "\n", "            ", "all_dataset", "=", "all_dataset", ".", "shuffle", "(", "buffer_size", "=", "4000", ")", ".", "repeat", "(", ")", ".", "prefetch", "(", "self", ".", "batch_size", "*", "4", ")", "\n", "", "all_dataset", "=", "all_dataset", ".", "map", "(", "_batch_preprocessing", ")", "\n", "iterator", "=", "all_dataset", ".", "make_initializable_iterator", "(", ")", "\n", "return", "iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.data_loader_semi_unsupervised_skin.DataLoader.init_data_pipeline": [[136, 218], ["print", "data_loader_semi_unsupervised_skin.DataLoader.init_data_pipeline._load_cam_intrinsics"], "methods", ["None"], ["", "def", "init_data_pipeline", "(", "self", ",", "sess", ",", "batch_sample", ",", "file_list", ")", ":", "\n", "#", "\n", "        ", "def", "_load_cam_intrinsics", "(", "cam_filelist", ",", "read_pose", ",", "match_num", ")", ":", "\n", "            ", "all_cam_intrinsics", "=", "[", "]", "\n", "all_poses", "=", "[", "]", "\n", "all_matches", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "cam_filelist", ")", ")", ":", "\n", "                ", "filename", "=", "cam_filelist", "[", "i", "]", "\n", "if", "i", "%", "50000", "==", "0", ":", "\n", "                    ", "print", "(", "i", ",", "' in all: '", ",", "len", "(", "cam_filelist", ")", ")", "\n", "", "f", "=", "open", "(", "filename", ")", "\n", "one_intrinsic", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", "+", "self", ".", "num_source", ")", ":", "\n", "                    ", "line", "=", "f", ".", "readline", "(", ")", "\n", "#", "\n", "cam_intri_vec", "=", "[", "float", "(", "num", ")", "for", "num", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "]", "\n", "if", "len", "(", "cam_intri_vec", ")", "!=", "9", ":", "\n", "                        ", "print", "(", "filename", ",", "i", ",", "line", ")", "\n", "\n", "", "cam_intrinsics", "=", "np", ".", "reshape", "(", "cam_intri_vec", ",", "[", "3", ",", "3", "]", ")", "\n", "one_intrinsic", ".", "append", "(", "cam_intrinsics", ")", "\n", "", "one_intrinsic", "=", "np", ".", "stack", "(", "one_intrinsic", ",", "axis", "=", "0", ")", "\n", "all_cam_intrinsics", ".", "append", "(", "one_intrinsic", ")", "\n", "#", "\n", "if", "read_pose", ":", "\n", "                    ", "one_sample_pose", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "1", "+", "self", ".", "num_source", ")", ":", "\n", "                        ", "lines", "=", "f", ".", "readline", "(", ")", "\n", "pose", "=", "[", "float", "(", "num", ")", "for", "num", "in", "lines", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "]", "\n", "pose_vec", "=", "np", ".", "reshape", "(", "pose", ",", "[", "6", "]", ")", "\n", "one_sample_pose", ".", "append", "(", "pose_vec", ")", "\n", "", "one_sample_pose", "=", "np", ".", "stack", "(", "one_sample_pose", ",", "axis", "=", "0", ")", "\n", "all_poses", ".", "append", "(", "one_sample_pose", ")", "\n", "#", "\n", "", "if", "match_num", ">", "0", ":", "\n", "                    ", "image_matches", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", "+", "self", ".", "num_source", ")", ":", "\n", "                        ", "one_matches", "=", "[", "]", "\n", "line", "=", "f", ".", "readline", "(", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "match_num", ")", ":", "\n", "                            ", "line", "=", "f", ".", "readline", "(", ")", "\n", "\n", "match_coords", "=", "[", "float", "(", "num", ")", "for", "num", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "]", "\n", "match_vec", "=", "np", ".", "reshape", "(", "match_coords", ",", "[", "2", "]", ")", "\n", "one_matches", ".", "append", "(", "match_vec", ")", "\n", "", "one_matches", "=", "np", ".", "stack", "(", "one_matches", ",", "axis", "=", "0", ")", "# 68", "\n", "image_matches", ".", "append", "(", "one_matches", ")", "\n", "# TODO: Very dangerous", "\n", "# if i == self.num_source / 2:", "\n", "#     image_matches = [one_matches] + image_matches", "\n", "# else:", "\n", "\n", "", "image_matches", "=", "np", ".", "stack", "(", "image_matches", ",", "axis", "=", "0", ")", "# (1 + self.num_source), 68", "\n", "\n", "all_matches", ".", "append", "(", "image_matches", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "", "all_cam_intrinsics", "=", "np", ".", "stack", "(", "all_cam_intrinsics", ",", "axis", "=", "0", ")", "\n", "\n", "if", "read_pose", ":", "\n", "                ", "all_poses", "=", "np", ".", "stack", "(", "all_poses", ",", "axis", "=", "0", ")", "\n", "", "if", "match_num", ">", "0", ":", "\n", "                ", "all_matches", "=", "np", ".", "stack", "(", "all_matches", ",", "axis", "=", "0", ")", "\n", "", "return", "all_cam_intrinsics", ",", "all_poses", ",", "all_matches", "\n", "\n", "# load cam_intrinsics using native python", "\n", "", "print", "(", "'load camera intrinsics...'", ")", "\n", "cam_intrinsics", ",", "all_poses", ",", "all_matches", "=", "_load_cam_intrinsics", "(", "file_list", "[", "'cam_file_list'", "]", ",", "self", ".", "read_pose", ",", "self", ".", "match_num", ")", "\n", "\n", "input_dict", "=", "{", "'data_loading/input_image_names_ph:0'", ":", "file_list", "[", "'image_file_list'", "]", "[", ":", "self", ".", "batch_size", "*", "self", ".", "steps_per_epoch", "]", ",", "\n", "'data_loading/input_skin_names_ph:0'", ":", "file_list", "[", "'skin_file_list'", "]", "[", ":", "self", ".", "batch_size", "*", "self", ".", "steps_per_epoch", "]", ",", "\n", "'data_loading/flag_sgl_mul_ph:0'", ":", "file_list", "[", "'flag_slg_mul'", "]", "[", ":", "self", ".", "batch_size", "*", "self", ".", "steps_per_epoch", "]", ",", "\n", "'data_loading/cam_intrinsics_ph:0'", ":", "cam_intrinsics", "[", ":", "self", ".", "batch_size", "*", "self", ".", "steps_per_epoch", "]", "}", "\n", "if", "self", ".", "read_pose", ":", "\n", "            ", "print", "(", "'load pose data...'", ")", "\n", "input_dict", "[", "'data_loading/poses_ph:0'", "]", "=", "all_poses", "[", ":", "self", ".", "batch_size", "*", "self", ".", "steps_per_epoch", "]", "\n", "", "if", "self", ".", "match_num", ">", "0", ":", "\n", "            ", "print", "(", "'load matches data...'", ")", "\n", "input_dict", "[", "'data_loading/matches_ph:0'", "]", "=", "all_matches", "[", ":", "self", ".", "batch_size", "*", "self", ".", "steps_per_epoch", "]", "\n", "\n", "", "sess", ".", "run", "(", "batch_sample", ".", "initializer", ",", "feed_dict", "=", "input_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.data_loader_semi_unsupervised_skin.DataLoader.batch_unpack_image_sequence": [[219, 240], ["int", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "int", "int", "int", "tensorflow.slice", "range"], "methods", ["None"], ["", "def", "batch_unpack_image_sequence", "(", "self", ",", "image_seq", ",", "img_height", ",", "img_width", ",", "num_source", ")", ":", "\n", "# Assuming the center image is the target frame", "\n", "        ", "tgt_start_idx", "=", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", "\n", "tgt_image", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "0", ",", "tgt_start_idx", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "img_width", ",", "-", "1", "]", ")", "\n", "# Source frames before the target frame", "\n", "src_image_1", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", "-", "1", "]", ")", "\n", "# Source frames after the target frame", "\n", "src_image_2", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "0", ",", "int", "(", "tgt_start_idx", "+", "img_width", ")", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", "-", "1", "]", ")", "\n", "src_image_seq", "=", "tf", ".", "concat", "(", "[", "src_image_1", ",", "src_image_2", "]", ",", "axis", "=", "2", ")", "\n", "# Stack source frames along the color channels (i.e. [B, H, W, N*3])", "\n", "src_image_stack", "=", "tf", ".", "concat", "(", "[", "tf", ".", "slice", "(", "src_image_seq", ",", "\n", "[", "0", ",", "0", ",", "i", "*", "img_width", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "1", ",", "img_width", ",", "-", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "num_source", ")", "]", ",", "axis", "=", "3", ")", "\n", "return", "tgt_image", ",", "src_image_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.__init__.find_dataloader_using_name": [[8, 29], ["importlib.import_module", "importlib.import_module.__dict__.items", "print", "exit"], "function", ["None"], []], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.resnet_v1_3dmm.encoder_resnet50": [[63, 84], ["tensorflow.contrib.slim.nets.resnet_v1.resnet_v1_50", "tensorflow.squeeze"], "function", ["None"], ["def", "encoder_resnet50", "(", "images", ",", "num_classes", ",", "is_training", "=", "True", ",", "reuse", "=", "None", ")", ":", "\n", "\n", "    ", "\"\"\"Predict prediction tensors from inputs tensor.\n\n    Outputs of this function can be passed to loss or postprocess functions.\n\n    Args:\n        preprocessed_inputs: A float32 tensor with shape [batch_size,\n            height, width, num_channels] representing a batch of images.\n\n    Returns:\n        prediction_dict: A dictionary holding prediction tensors to be\n            passed to the Loss or Postprocess functions.\n    \"\"\"", "\n", "net", ",", "endpoints", "=", "resnet_v1", ".", "resnet_v1_50", "(", "\n", "images", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "is_training", "=", "is_training", ",", "\n", "reuse", "=", "reuse", ")", "\n", "net", "=", "tf", ".", "squeeze", "(", "net", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "return", "net", ",", "endpoints", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.block35": [[42, 61], ["tensorflow.variable_scope", "tensorflow.concat", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "activation_fn", "activation_fn.get_shape"], "function", ["None"], ["def", "block35", "(", "net", ",", "scale", "=", "1.0", ",", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "scope", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "\"\"\"Builds the 35x35 resnet block.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'Block35'", ",", "[", "net", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "            ", "tower_conv", "=", "slim", ".", "conv2d", "(", "net", ",", "32", ",", "1", ",", "scope", "=", "'Conv2d_1x1'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "            ", "tower_conv1_0", "=", "slim", ".", "conv2d", "(", "net", ",", "32", ",", "1", ",", "scope", "=", "'Conv2d_0a_1x1'", ")", "\n", "tower_conv1_1", "=", "slim", ".", "conv2d", "(", "tower_conv1_0", ",", "32", ",", "3", ",", "scope", "=", "'Conv2d_0b_3x3'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "            ", "tower_conv2_0", "=", "slim", ".", "conv2d", "(", "net", ",", "32", ",", "1", ",", "scope", "=", "'Conv2d_0a_1x1'", ")", "\n", "tower_conv2_1", "=", "slim", ".", "conv2d", "(", "tower_conv2_0", ",", "32", ",", "3", ",", "scope", "=", "'Conv2d_0b_3x3'", ")", "\n", "tower_conv2_2", "=", "slim", ".", "conv2d", "(", "tower_conv2_1", ",", "32", ",", "3", ",", "scope", "=", "'Conv2d_0c_3x3'", ")", "\n", "", "mixed", "=", "tf", ".", "concat", "(", "[", "tower_conv", ",", "tower_conv1_1", ",", "tower_conv2_2", "]", ",", "3", ")", "\n", "up", "=", "slim", ".", "conv2d", "(", "mixed", ",", "net", ".", "get_shape", "(", ")", "[", "3", "]", ",", "1", ",", "normalizer_fn", "=", "None", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'Conv2d_1x1'", ")", "\n", "net", "+=", "scale", "*", "up", "\n", "if", "activation_fn", ":", "\n", "            ", "net", "=", "activation_fn", "(", "net", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.block17": [[64, 82], ["tensorflow.variable_scope", "tensorflow.concat", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "activation_fn", "activation_fn.get_shape"], "function", ["None"], ["", "def", "block17", "(", "net", ",", "scale", "=", "1.0", ",", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "scope", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "\"\"\"Builds the 17x17 resnet block.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'Block17'", ",", "[", "net", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "            ", "tower_conv", "=", "slim", ".", "conv2d", "(", "net", ",", "128", ",", "1", ",", "scope", "=", "'Conv2d_1x1'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "            ", "tower_conv1_0", "=", "slim", ".", "conv2d", "(", "net", ",", "128", ",", "1", ",", "scope", "=", "'Conv2d_0a_1x1'", ")", "\n", "tower_conv1_1", "=", "slim", ".", "conv2d", "(", "tower_conv1_0", ",", "128", ",", "[", "1", ",", "7", "]", ",", "\n", "scope", "=", "'Conv2d_0b_1x7'", ")", "\n", "tower_conv1_2", "=", "slim", ".", "conv2d", "(", "tower_conv1_1", ",", "128", ",", "[", "7", ",", "1", "]", ",", "\n", "scope", "=", "'Conv2d_0c_7x1'", ")", "\n", "", "mixed", "=", "tf", ".", "concat", "(", "[", "tower_conv", ",", "tower_conv1_2", "]", ",", "3", ")", "\n", "up", "=", "slim", ".", "conv2d", "(", "mixed", ",", "net", ".", "get_shape", "(", ")", "[", "3", "]", ",", "1", ",", "normalizer_fn", "=", "None", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'Conv2d_1x1'", ")", "\n", "net", "+=", "scale", "*", "up", "\n", "if", "activation_fn", ":", "\n", "            ", "net", "=", "activation_fn", "(", "net", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.block8": [[85, 103], ["tensorflow.variable_scope", "tensorflow.concat", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "activation_fn", "activation_fn.get_shape"], "function", ["None"], ["", "def", "block8", "(", "net", ",", "scale", "=", "1.0", ",", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "scope", "=", "None", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "\"\"\"Builds the 8x8 resnet block.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'Block8'", ",", "[", "net", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "            ", "tower_conv", "=", "slim", ".", "conv2d", "(", "net", ",", "192", ",", "1", ",", "scope", "=", "'Conv2d_1x1'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "            ", "tower_conv1_0", "=", "slim", ".", "conv2d", "(", "net", ",", "192", ",", "1", ",", "scope", "=", "'Conv2d_0a_1x1'", ")", "\n", "tower_conv1_1", "=", "slim", ".", "conv2d", "(", "tower_conv1_0", ",", "192", ",", "[", "1", ",", "3", "]", ",", "\n", "scope", "=", "'Conv2d_0b_1x3'", ")", "\n", "tower_conv1_2", "=", "slim", ".", "conv2d", "(", "tower_conv1_1", ",", "192", ",", "[", "3", ",", "1", "]", ",", "\n", "scope", "=", "'Conv2d_0c_3x1'", ")", "\n", "", "mixed", "=", "tf", ".", "concat", "(", "[", "tower_conv", ",", "tower_conv1_2", "]", ",", "3", ")", "\n", "up", "=", "slim", ".", "conv2d", "(", "mixed", ",", "net", ".", "get_shape", "(", ")", "[", "3", "]", ",", "1", ",", "normalizer_fn", "=", "None", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'Conv2d_1x1'", ")", "\n", "net", "+=", "scale", "*", "up", "\n", "if", "activation_fn", ":", "\n", "            ", "net", "=", "activation_fn", "(", "net", ")", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.reduction_a": [[105, 121], ["tensorflow.concat", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.max_pool2d"], "function", ["None"], ["", "def", "reduction_a", "(", "net", ",", "k", ",", "l", ",", "m", ",", "n", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "tower_conv", "=", "slim", ".", "conv2d", "(", "net", ",", "n", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'Conv2d_1a_3x3'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "tower_conv1_0", "=", "slim", ".", "conv2d", "(", "net", ",", "k", ",", "1", ",", "scope", "=", "'Conv2d_0a_1x1'", ")", "\n", "tower_conv1_1", "=", "slim", ".", "conv2d", "(", "tower_conv1_0", ",", "l", ",", "3", ",", "\n", "scope", "=", "'Conv2d_0b_3x3'", ")", "\n", "tower_conv1_2", "=", "slim", ".", "conv2d", "(", "tower_conv1_1", ",", "m", ",", "3", ",", "\n", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'Conv2d_1a_3x3'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "tower_pool", "=", "slim", ".", "max_pool2d", "(", "net", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'MaxPool_1a_3x3'", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "tower_conv", ",", "tower_conv1_2", ",", "tower_pool", "]", ",", "3", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.reduction_b": [[123, 144], ["tensorflow.concat", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.variable_scope", "tensorflow.max_pool2d"], "function", ["None"], ["", "def", "reduction_b", "(", "net", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "tower_conv", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "1", ",", "scope", "=", "'Conv2d_0a_1x1'", ")", "\n", "tower_conv_1", "=", "slim", ".", "conv2d", "(", "tower_conv", ",", "384", ",", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "'Conv2d_1a_3x3'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "tower_conv1", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "1", ",", "scope", "=", "'Conv2d_0a_1x1'", ")", "\n", "tower_conv1_1", "=", "slim", ".", "conv2d", "(", "tower_conv1", ",", "256", ",", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "'Conv2d_1a_3x3'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "tower_conv2", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "1", ",", "scope", "=", "'Conv2d_0a_1x1'", ")", "\n", "tower_conv2_1", "=", "slim", ".", "conv2d", "(", "tower_conv2", ",", "256", ",", "3", ",", "\n", "scope", "=", "'Conv2d_0b_3x3'", ")", "\n", "tower_conv2_2", "=", "slim", ".", "conv2d", "(", "tower_conv2_1", ",", "256", ",", "3", ",", "stride", "=", "2", ",", "\n", "padding", "=", "'VALID'", ",", "scope", "=", "'Conv2d_1a_3x3'", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "tower_pool", "=", "slim", ".", "max_pool2d", "(", "net", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'MaxPool_1a_3x3'", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "tower_conv_1", ",", "tower_conv1_1", ",", "\n", "tower_conv2_2", ",", "tower_pool", "]", ",", "3", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.inception_resnet_v1": [[146, 239], ["tensorflow.variable_scope", "tensorflow.arg_scope", "tensorflow.arg_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.max_pool2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.repeat", "tensorflow.repeat", "tensorflow.repeat", "inception_resnet_v1.block8", "tensorflow.fully_connected", "tensorflow.variable_scope", "inception_resnet_v1.reduction_a", "tensorflow.variable_scope", "inception_resnet_v1.reduction_b", "tensorflow.variable_scope", "tensorflow.avg_pool2d", "tensorflow.flatten", "tensorflow.dropout", "slim.dropout.get_shape"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.block8", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.reduction_a", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.reduction_b"], ["", "def", "inception_resnet_v1", "(", "inputs", ",", "is_training", "=", "True", ",", "\n", "dropout_keep_prob", "=", "0.8", ",", "\n", "bottleneck_layer_size", "=", "128", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'InceptionResnetV1'", ")", ":", "\n", "    ", "\"\"\"Creates the Inception Resnet V1 model.\n    Args:\n      inputs: a 4-D tensor of size [batch_size, height, width, 3].\n      is_training: whether is training or not.\n      dropout_keep_prob: float, the fraction to keep before final layer.\n      reuse: whether or not the network and its variables should be reused. To be\n        able to reuse 'scope' must be given.\n      scope: Optional variable_scope.\n    Returns:\n      logits: the logits outputs of the model.\n      end_points: the set of end_points from the inception model.\n    \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'InceptionResnetV1'", ",", "[", "inputs", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", ",", "slim", ".", "dropout", "]", ",", "\n", "is_training", "=", "is_training", ")", ":", "\n", "            ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "max_pool2d", ",", "slim", ".", "avg_pool2d", "]", ",", "\n", "stride", "=", "1", ",", "padding", "=", "'SAME'", ")", ":", "\n", "# 149 x 149 x 32", "\n", "                ", "net", "=", "slim", ".", "conv2d", "(", "inputs", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'Conv2d_1a_3x3'", ")", "\n", "end_points", "[", "'Conv2d_1a_3x3'", "]", "=", "net", "\n", "# 147 x 147 x 32", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "32", ",", "3", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'Conv2d_2a_3x3'", ")", "\n", "end_points", "[", "'Conv2d_2a_3x3'", "]", "=", "net", "\n", "# 147 x 147 x 64", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "64", ",", "3", ",", "scope", "=", "'Conv2d_2b_3x3'", ")", "\n", "end_points", "[", "'Conv2d_2b_3x3'", "]", "=", "net", "\n", "# 73 x 73 x 64", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'MaxPool_3a_3x3'", ")", "\n", "end_points", "[", "'MaxPool_3a_3x3'", "]", "=", "net", "\n", "# 73 x 73 x 80", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "80", ",", "1", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'Conv2d_3b_1x1'", ")", "\n", "end_points", "[", "'Conv2d_3b_1x1'", "]", "=", "net", "\n", "# 71 x 71 x 192", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "192", ",", "3", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'Conv2d_4a_3x3'", ")", "\n", "end_points", "[", "'Conv2d_4a_3x3'", "]", "=", "net", "\n", "# 35 x 35 x 256", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'Conv2d_4b_3x3'", ")", "\n", "end_points", "[", "'Conv2d_4b_3x3'", "]", "=", "net", "\n", "\n", "# 5 x Inception-resnet-A", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "5", ",", "block35", ",", "scale", "=", "0.17", ")", "\n", "end_points", "[", "'Mixed_5a'", "]", "=", "net", "\n", "\n", "# Reduction-A", "\n", "with", "tf", ".", "variable_scope", "(", "'Mixed_6a'", ")", ":", "\n", "                    ", "net", "=", "reduction_a", "(", "net", ",", "192", ",", "192", ",", "256", ",", "384", ")", "\n", "", "end_points", "[", "'Mixed_6a'", "]", "=", "net", "\n", "\n", "# 10 x Inception-Resnet-B", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "10", ",", "block17", ",", "scale", "=", "0.10", ")", "\n", "end_points", "[", "'Mixed_6b'", "]", "=", "net", "\n", "\n", "# Reduction-B", "\n", "with", "tf", ".", "variable_scope", "(", "'Mixed_7a'", ")", ":", "\n", "                    ", "net", "=", "reduction_b", "(", "net", ")", "\n", "", "end_points", "[", "'Mixed_7a'", "]", "=", "net", "\n", "\n", "# 5 x Inception-Resnet-C", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "5", ",", "block8", ",", "scale", "=", "0.20", ")", "\n", "end_points", "[", "'Mixed_8a'", "]", "=", "net", "\n", "\n", "net", "=", "block8", "(", "net", ",", "activation_fn", "=", "None", ")", "\n", "end_points", "[", "'Mixed_8b'", "]", "=", "net", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'Logits'", ")", ":", "\n", "                    ", "end_points", "[", "'PrePool'", "]", "=", "net", "\n", "# pylint: disable=no-member", "\n", "net", "=", "slim", ".", "avg_pool2d", "(", "net", ",", "net", ".", "get_shape", "(", ")", "[", "1", ":", "3", "]", ",", "padding", "=", "'VALID'", ",", "\n", "scope", "=", "'AvgPool_1a_8x8'", ")", "\n", "net", "=", "slim", ".", "flatten", "(", "net", ")", "\n", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'Dropout'", ")", "\n", "\n", "end_points", "[", "'PreLogitsFlatten'", "]", "=", "net", "\n", "\n", "", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "bottleneck_layer_size", ",", "activation_fn", "=", "None", ",", "\n", "scope", "=", "'Bottleneck'", ",", "reuse", "=", "False", ")", "\n", "\n", "", "", "", "return", "net", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.identity_inference": [[241, 262], ["tensorflow.arg_scope", "inception_resnet_v1.inception_resnet_v1", "tensorflow.initializers.xavier_initializer", "tensorflow.l2_regularizer"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.inception_resnet_v1"], ["", "def", "identity_inference", "(", "images", ",", "keep_probability", ",", "phase_train", "=", "True", ",", "\n", "bottleneck_layer_size", "=", "128", ",", "weight_decay", "=", "0.0", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "batch_norm_params", "=", "{", "\n", "# Decay for the moving averages.", "\n", "'decay'", ":", "0.995", ",", "\n", "# epsilon to prevent 0s in variance.", "\n", "'epsilon'", ":", "0.001", ",", "\n", "# force in-place updates of mean and variance estimates", "\n", "'updates_collections'", ":", "None", ",", "\n", "# Moving averages ends up in the trainable variables collection", "\n", "'variables_collections'", ":", "[", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", "]", ",", "\n", "}", "\n", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_initializer", "=", "slim", ".", "initializers", ".", "xavier_initializer", "(", ")", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "        ", "return", "inception_resnet_v1", "(", "images", ",", "is_training", "=", "phase_train", ",", "\n", "dropout_keep_prob", "=", "keep_probability", ",", "bottleneck_layer_size", "=", "bottleneck_layer_size", ",", "\n", "reuse", "=", "reuse", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq": [[13, 15], ["None"], "function", ["None"], ["def", "parse_seq", "(", "list_seq", ")", ":", "\n", "    ", "return", "list_seq", "[", "0", ":", "1", "]", ",", "list_seq", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_gpu_list": [[16, 18], ["gpu_list.split"], "function", ["None"], ["", "def", "parse_gpu_list", "(", "gpu_list", ")", ":", "\n", "    ", "return", "gpu_list", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.batch_size_extract": [[19, 32], ["max", "max", "isinstance", "isinstance", "len"], "function", ["None"], ["", "def", "batch_size_extract", "(", "*", "object", ")", ":", "# TODO: More robust", "\n", "    ", "\"\"\"\n    :param object: np, tensor, scalar\n    :return:\n    \"\"\"", "\n", "batch_size", "=", "None", "\n", "for", "inst", "in", "object", ":", "\n", "        ", "if", "inst", "is", "not", "None", ":", "\n", "            ", "if", "(", "isinstance", "(", "inst", ",", "tf", ".", "Tensor", ")", "or", "isinstance", "(", "inst", ",", "np", ".", "ndarray", ")", ")", "and", "len", "(", "inst", ".", "shape", ")", ">", "1", ":", "\n", "                ", "batch_size", "=", "max", "(", "inst", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "batch_size", "=", "max", "(", "1", ",", "batch_size", ")", "\n", "", "", "", "return", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.parse_encoder.parse_coeff_list": [[12, 31], ["range", "len", "parse_encoder.parse_coeff", "list_coeff_shape.append", "list_coeff_color.append", "list_coeff_exp.append", "list_coeff_pose.append", "list_coeff_sh.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.parse_encoder.parse_coeff"], ["def", "parse_coeff_list", "(", "opt", ",", "coeff_all_list", ",", "defined_pose_main", ")", ":", "\n", "    ", "list_coeff_shape", "=", "[", "]", "\n", "list_coeff_color", "=", "[", "]", "\n", "list_coeff_exp", "=", "[", "]", "\n", "list_coeff_pose", "=", "[", "]", "\n", "list_coeff_sh", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "coeff_all_list", ")", ")", ":", "\n", "        ", "coeff_all", "=", "coeff_all_list", "[", "i", "]", "\n", "pred_3dmm_shape", ",", "pred_3dmm_color", ",", "pred_3dmm_exp", ",", "pred_pose_render", ",", "pred_sh", "=", "parse_coeff", "(", "opt", ",", "coeff_all", ",", "defined_pose_main", ")", "\n", "list_coeff_shape", ".", "append", "(", "pred_3dmm_shape", ")", "\n", "list_coeff_color", ".", "append", "(", "pred_3dmm_color", ")", "\n", "list_coeff_exp", ".", "append", "(", "pred_3dmm_exp", ")", "\n", "\n", "#pred_pose_render = tf.Print(pred_pose_render, [pred_pose_render], summarize=16, message='pred_pose_render')", "\n", "list_coeff_pose", ".", "append", "(", "pred_pose_render", ")", "\n", "list_coeff_sh", ".", "append", "(", "pred_sh", ")", "\n", "\n", "", "return", "list_coeff_shape", ",", "list_coeff_color", ",", "list_coeff_exp", ",", "list_coeff_pose", ",", "list_coeff_sh", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.parse_encoder.parse_coeff": [[32, 46], ["None"], "function", ["None"], ["", "def", "parse_coeff", "(", "opt", ",", "coeff_all", ",", "defined_pose_main", ")", ":", "\n", "#", "\n", "    ", "pred_3dmm_shape", "=", "coeff_all", "[", ":", ",", "0", ":", "opt", ".", "gpmm_rank", "]", "\n", "pred_3dmm_color", "=", "coeff_all", "[", ":", ",", "opt", ".", "gpmm_rank", ":", "2", "*", "opt", ".", "gpmm_rank", "]", "\n", "pred_3dmm_exp", "=", "coeff_all", "[", ":", ",", "2", "*", "opt", ".", "gpmm_rank", ":", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "]", "\n", "\n", "#", "\n", "pred_pose_render", "=", "coeff_all", "[", ":", ",", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", ":", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "+", "6", "]", "\n", "pred_pose_render", "=", "pred_pose_render", "+", "defined_pose_main", "\n", "\n", "#", "\n", "pred_sh", "=", "coeff_all", "[", ":", ",", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "+", "6", ":", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "+", "6", "+", "27", "]", "\n", "\n", "return", "pred_3dmm_shape", ",", "pred_3dmm_color", ",", "pred_3dmm_exp", ",", "pred_pose_render", ",", "pred_sh", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.draw_landmark_image": [[12, 36], ["range", "len", "tensorflow.image.convert_image_dtype", "visual_helper.render_lm2d_circle_image", "tensorflow.image.convert_image_dtype", "list_img_lm.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.render_lm2d_circle_image"], ["def", "draw_landmark_image", "(", "list_img", ",", "list_lm", ",", "img_height", ",", "img_width", ",", "color", ")", ":", "\n", "    ", "\"\"\"\n    :param list_img:\n    :param list_lm:\n    :param img_height:\n    :param img_width:\n    :param color: 1:r 2:g 3:b\n    :return:\n    \"\"\"", "\n", "list_img_lm", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_img", ")", ")", ":", "\n", "        ", "img", "=", "list_img", "[", "i", "]", "\n", "\n", "if", "len", "(", "list_img", ")", "==", "len", "(", "list_lm", ")", ":", "\n", "            ", "lm", "=", "list_lm", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "lm", "=", "list_lm", "[", "0", "]", "\n", "", "img_draw_lm", "=", "img", "\n", "\n", "img_draw_lm", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "img_draw_lm", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "img_draw_lm", "=", "render_lm2d_circle_image", "(", "img_draw_lm", ",", "lm", ",", "img_height", ",", "img_width", ",", "color", "=", "color", ")", "\n", "img_draw_lm", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "img_draw_lm", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "list_img_lm", ".", "append", "(", "img_draw_lm", ")", "\n", "", "return", "list_img_lm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.render_lm2d": [[37, 81], ["tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.stack", "range", "tensorflow.stack", "tensorflow.cast", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.stack", "tf.stack.append", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.linspace", "tensorflow.zeros", "tensorflow.zeros"], "function", ["None"], ["", "def", "render_lm2d", "(", "lm2d_batch_xy", ",", "h", ",", "w", ")", ":", "\n", "    ", "\"\"\"\n    :param lm2d_batch:\n    :param h:\n    :param w:\n    :return:\n    \"\"\"", "\n", "# preprocess", "\n", "\"\"\"\n    row correspond to y\n    column correspond to x\n    (row, column) = (y, x)\n    \"\"\"", "\n", "x", "=", "lm2d_batch_xy", "[", ":", ",", ":", ",", "0", "]", "\n", "y", "=", "lm2d_batch_xy", "[", ":", ",", ":", ",", "1", "]", "\n", "x", "=", "tf", ".", "clip_by_value", "(", "x", ",", "0", ",", "w", "-", "1", ")", "\n", "y", "=", "tf", ".", "clip_by_value", "(", "y", ",", "0", ",", "h", "-", "1", ")", "\n", "lm2d_batch", "=", "tf", ".", "stack", "(", "[", "y", ",", "x", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "#", "\n", "visual_lm2d", "=", "[", "]", "\n", "for", "b_it", "in", "range", "(", "lm2d_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "lm2d", "=", "lm2d_batch", "[", "b_it", "]", "\n", "lm2d", "=", "tf", ".", "cast", "(", "lm2d", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "r", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "linspace", "(", "0.0", ",", "1.0", ",", "lm2d", ".", "shape", "[", "0", "]", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "g", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "lm2d", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "b", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "lm2d", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "rgb", "=", "tf", ".", "stack", "(", "[", "r", ",", "g", ",", "b", "]", ",", "axis", "=", "-", "1", ")", "\n", "visual_lm2d", ".", "append", "(", "rgb", ")", "\n", "\n", "", "visual_lm2d", "=", "tf", ".", "stack", "(", "visual_lm2d", ")", "\n", "return", "visual_lm2d", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.render_lm2d_image": [[82, 186], ["tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.stack", "range", "tensorflow.stack", "range", "tensorflow.stack", "tensorflow.cast", "tensorflow.stack", "tf.stack.append", "tensorflow.cast", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.stack", "tf.stack.append", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.ones", "tensorflow.ones", "tensorflow.ones", "tensorflow.linspace", "tensorflow.zeros", "tensorflow.linspace", "tensorflow.zeros", "tensorflow.linspace", "tensorflow.zeros", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "def", "render_lm2d_image", "(", "image", ",", "lm2d_batch_xy", ",", "h", ",", "w", ",", "color", "=", "2", ",", "radius", "=", "1", ",", "light", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    :param image: (0, 1)\n    :param lm2d_batch_xy:\n    :param h:\n    :param w:\n    :param color:\n    :param radius:\n    :param light:\n    :return:\n    \"\"\"", "\n", "# preprocess", "\n", "\"\"\"\n    row correspond to y\n    column correspond to x\n    (row, column) = (y, x)\n    \"\"\"", "\n", "x", "=", "lm2d_batch_xy", "[", ":", ",", ":", ",", "0", "]", "\n", "y", "=", "lm2d_batch_xy", "[", ":", ",", ":", ",", "1", "]", "\n", "x", "=", "tf", ".", "clip_by_value", "(", "x", ",", "0", ",", "w", "-", "1", ")", "\n", "y", "=", "tf", ".", "clip_by_value", "(", "y", ",", "0", ",", "h", "-", "1", ")", "\n", "lm2d_batch", "=", "tf", ".", "stack", "(", "[", "y", ",", "x", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\"\"\"\n    circle lm    \n    \"\"\"", "\n", "#", "\n", "visual_lm2d", "=", "[", "]", "\n", "for", "b_it", "in", "range", "(", "lm2d_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "lm2d", "=", "lm2d_batch", "[", "b_it", "]", "\n", "lm2d", "=", "tf", ".", "cast", "(", "lm2d", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "if", "color", "==", "1", ":", "\n", "            ", "r", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "linspace", "(", "light", ",", "1.0", ",", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "if", "color", "==", "2", ":", "\n", "            ", "g", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "linspace", "(", "light", ",", "1.0", ",", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "g", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "if", "color", "==", "3", ":", "\n", "            ", "b", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "linspace", "(", "light", ",", "1.0", ",", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "rgb", "=", "tf", ".", "stack", "(", "[", "r", ",", "g", ",", "b", "]", ",", "axis", "=", "-", "1", ")", "\n", "visual_lm2d", ".", "append", "(", "rgb", ")", "\n", "", "visual_lm2d", "=", "tf", ".", "stack", "(", "visual_lm2d", ")", "\n", "\n", "\"\"\"\n    assign image\n    \"\"\"", "\n", "# Mask", "\n", "mask_lm2d", "=", "[", "]", "\n", "for", "b_it", "in", "range", "(", "lm2d_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "lm2d", "=", "lm2d_batch", "[", "b_it", "]", "\n", "lm2d", "=", "tf", ".", "cast", "(", "lm2d", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "r", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "ones", "(", "shape", "=", "[", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "g", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "ones", "(", "shape", "=", "[", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "b", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "ones", "(", "shape", "=", "[", "tf", ".", "shape", "(", "lm2d", ")", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "rgb", "=", "tf", ".", "stack", "(", "[", "r", ",", "g", ",", "b", "]", ",", "axis", "=", "-", "1", ")", "\n", "mask_lm2d", ".", "append", "(", "rgb", ")", "\n", "", "mask_lm2d", "=", "tf", ".", "stack", "(", "mask_lm2d", ")", "\n", "mask_lm2d", "=", "1.0", "-", "mask_lm2d", "\n", "\n", "visual_image", "=", "image", "\n", "visual_image", "=", "visual_image", "*", "mask_lm2d", "\n", "\n", "visual_image", "=", "visual_image", "+", "visual_lm2d", "\n", "return", "visual_image", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.lm_expand_circle": [[187, 226], ["tensorflow.constant", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.transpose", "range", "tensorflow.shape", "tensorflow.add", "tensorflow.transpose", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.stack", "tensorflow.concat"], "function", ["None"], ["", "def", "lm_expand_circle", "(", "lm2d_batch", ",", "h", ",", "w", ")", ":", "\n", "        ", "batch_size", "=", "lm2d_batch", ".", "shape", "[", "0", "]", "\n", "num_lm", "=", "tf", ".", "shape", "(", "lm2d_batch", ")", "[", "1", "]", "\n", "\n", "neighboor", "=", "tf", ".", "constant", "(", "\n", "[", "[", "-", "1.", ",", "-", "1.", "]", ",", "[", "-", "1.", ",", "0.", "]", ",", "[", "-", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "-", "1.", "]", ",", "[", "0.", ",", "0.", "]", ",", "[", "0.", ",", "1.", "]", ",", "\n", "[", "1.", ",", "-", "1.", "]", ",", "[", "1.", ",", "0.", "]", ",", "[", "1.", ",", "1.", "]", ",", "\n", "]", "\n", ")", "\n", "# neighboor = tf.expand_dims(neighboor, 0)", "\n", "# neighboor = tf.tile(neighboor, [batch_size, num_lm, 1])", "\n", "#", "\n", "# lm2d_batch = tf.tile(lm2d_batch, [1, 9, 1])", "\n", "# lm_neightboor = tf.add(neighboor, lm2d_batch)", "\n", "# y = lm_neightboor[:, :, 0]", "\n", "# y = tf.clip_by_value(y, 0, h-1)", "\n", "# x = lm_neightboor[:, :, 1]", "\n", "# x = tf.clip_by_value(x, 0, w-1)", "\n", "# lm2d_point_batch = tf.stack([y, x], axis=-1)", "\n", "\n", "neighboor", "=", "tf", ".", "expand_dims", "(", "neighboor", ",", "0", ")", "\n", "neighboor", "=", "tf", ".", "tile", "(", "neighboor", ",", "[", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "neighboor", "=", "tf", ".", "transpose", "(", "neighboor", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "lm2d_circle_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "lm2d_batch", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "lm_neightboor", "=", "tf", ".", "add", "(", "neighboor", ",", "lm2d_batch", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "lm_neightboor", "=", "tf", ".", "transpose", "(", "lm_neightboor", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "y", "=", "lm_neightboor", "[", ":", ",", ":", ",", "0", "]", "\n", "y", "=", "tf", ".", "clip_by_value", "(", "y", ",", "0", ",", "h", "-", "1", ")", "\n", "x", "=", "lm_neightboor", "[", ":", ",", ":", ",", "1", "]", "\n", "x", "=", "tf", ".", "clip_by_value", "(", "x", ",", "0", ",", "w", "-", "1", ")", "\n", "lm2d_point_batch", "=", "tf", ".", "stack", "(", "[", "y", ",", "x", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "lm2d_circle_batch", "=", "lm2d_point_batch", "\n", "", "else", ":", "\n", "                ", "lm2d_circle_batch", "=", "tf", ".", "concat", "(", "[", "lm2d_circle_batch", ",", "lm2d_point_batch", "]", ",", "axis", "=", "1", ")", "\n", "", "", "return", "lm2d_circle_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.render_lm2d_circle_image": [[227, 333], ["tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.stack", "visual_helper.lm_expand_circle", "range", "tensorflow.stack", "range", "tensorflow.stack", "tensorflow.cast", "tensorflow.stack", "tf.stack.append", "tensorflow.cast", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.stack", "tf.stack.append", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.sparse_tensor_to_dense", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.ones", "tensorflow.ones", "tensorflow.ones", "tensorflow.linspace", "tensorflow.zeros", "tensorflow.linspace", "tensorflow.zeros", "tensorflow.linspace", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.lm_expand_circle"], ["", "def", "render_lm2d_circle_image", "(", "image", ",", "lm2d_batch_xy", ",", "h", ",", "w", ",", "color", "=", "2", ",", "radius", "=", "1", ",", "light", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    :param image: (0, 1)\n    :param lm2d_batch_xy:\n    :param h:\n    :param w:\n    :param color:\n    :param radius:\n    :param light:\n    :return:\n    \"\"\"", "\n", "# preprocess", "\n", "\"\"\"\n    row correspond to y\n    column correspond to x\n    (row, column) = (y, x)\n    \"\"\"", "\n", "x", "=", "lm2d_batch_xy", "[", ":", ",", ":", ",", "0", "]", "\n", "y", "=", "lm2d_batch_xy", "[", ":", ",", ":", ",", "1", "]", "\n", "x", "=", "tf", ".", "clip_by_value", "(", "x", ",", "0", ",", "w", "-", "1", ")", "\n", "y", "=", "tf", ".", "clip_by_value", "(", "y", ",", "0", ",", "h", "-", "1", ")", "\n", "lm2d_batch", "=", "tf", ".", "stack", "(", "[", "y", ",", "x", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\"\"\"\n    circle lm    \n    \"\"\"", "\n", "lm2d_batch", "=", "lm_expand_circle", "(", "lm2d_batch", ",", "h", ",", "w", ")", "\n", "\n", "#", "\n", "visual_lm2d", "=", "[", "]", "\n", "for", "b_it", "in", "range", "(", "lm2d_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "lm2d", "=", "lm2d_batch", "[", "b_it", "]", "\n", "lm2d", "=", "tf", ".", "cast", "(", "lm2d", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "if", "color", "==", "1", ":", "\n", "            ", "r", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "linspace", "(", "light", ",", "1.0", ",", "lm2d", ".", "shape", "[", "0", "]", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "r", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "lm2d", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "if", "color", "==", "2", ":", "\n", "            ", "g", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "linspace", "(", "light", ",", "1.0", ",", "lm2d", ".", "shape", "[", "0", "]", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "g", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "lm2d", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "if", "color", "==", "3", ":", "\n", "            ", "b", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "linspace", "(", "light", ",", "1.0", ",", "lm2d", ".", "shape", "[", "0", "]", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "lm2d", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "", "rgb", "=", "tf", ".", "stack", "(", "[", "r", ",", "g", ",", "b", "]", ",", "axis", "=", "-", "1", ")", "\n", "visual_lm2d", ".", "append", "(", "rgb", ")", "\n", "", "visual_lm2d", "=", "tf", ".", "stack", "(", "visual_lm2d", ")", "\n", "\n", "\"\"\"\n    assign image\n    \"\"\"", "\n", "# Mask", "\n", "mask_lm2d", "=", "[", "]", "\n", "for", "b_it", "in", "range", "(", "lm2d_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "lm2d", "=", "lm2d_batch", "[", "b_it", "]", "\n", "lm2d", "=", "tf", ".", "cast", "(", "lm2d", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "r", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "ones", "(", "shape", "=", "[", "lm2d", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "g", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "ones", "(", "shape", "=", "[", "lm2d", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "b", "=", "tf", ".", "sparse_tensor_to_dense", "(", "\n", "tf", ".", "SparseTensor", "(", "indices", "=", "lm2d", ",", "values", "=", "tf", ".", "ones", "(", "shape", "=", "[", "lm2d", ".", "shape", "[", "0", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "\n", "dense_shape", "=", "[", "h", ",", "w", "]", ")", ",", "\n", "validate_indices", "=", "False", "\n", ")", "\n", "rgb", "=", "tf", ".", "stack", "(", "[", "r", ",", "g", ",", "b", "]", ",", "axis", "=", "-", "1", ")", "\n", "mask_lm2d", ".", "append", "(", "rgb", ")", "\n", "", "mask_lm2d", "=", "tf", ".", "stack", "(", "mask_lm2d", ")", "\n", "mask_lm2d", "=", "1.0", "-", "mask_lm2d", "\n", "\n", "visual_image", "=", "image", "\n", "visual_image", "=", "visual_image", "*", "mask_lm2d", "\n", "\n", "visual_image", "=", "visual_image", "+", "visual_lm2d", "\n", "return", "visual_image", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.gauss": [[335, 337], ["tensorflow.exp"], "function", ["None"], ["", "def", "gauss", "(", "x", ",", "a", ",", "b", ",", "c", ",", "d", "=", "0", ")", ":", "\n", "    ", "return", "a", "*", "tf", ".", "exp", "(", "-", "(", "x", "-", "b", ")", "**", "2", "/", "(", "2", "*", "c", "**", "2", ")", ")", "+", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.pixel_error_heatmap": [[338, 359], ["visual_helper.gauss", "visual_helper.gauss", "tensorflow.concat", "tensorflow.clip_by_value", "len", "tensorflow.expand_dims", "visual_helper.gauss", "visual_helper.gauss"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.gauss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.gauss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.gauss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.gauss"], ["", "def", "pixel_error_heatmap", "(", "image_error", ")", ":", "\n", "    ", "\"\"\"\n    :param image_error: shape=[bs, h, w, 1], [0, 1]\n    :return:\n    \"\"\"", "\n", "x", "=", "image_error", "\n", "# x = tf.reduce_max(tf.reshape(x, [x.shape[0], -1]), axis=1)", "\n", "# x = tf.divide(x, tf.reshape(v_error_max, [x.shape[0], 1, 1, 1]) + 1e-6)", "\n", "\n", "if", "len", "(", "image_error", ".", "shape", ")", "==", "3", ":", "\n", "        ", "x", "=", "tf", ".", "expand_dims", "(", "image_error", ",", "-", "1", ")", "\n", "\n", "\n", "", "color_0", "=", "gauss", "(", "x", ",", ".5", ",", ".6", ",", ".2", ")", "+", "gauss", "(", "x", ",", "1", ",", ".8", ",", ".3", ")", "\n", "color_1", "=", "gauss", "(", "x", ",", "1", ",", ".5", ",", ".3", ")", "\n", "color_2", "=", "gauss", "(", "x", ",", "1", ",", ".2", ",", ".3", ")", "\n", "color", "=", "tf", ".", "concat", "(", "[", "color_0", ",", "color_1", ",", "color_2", "]", ",", "axis", "=", "3", ")", "\n", "\n", "color", "=", "tf", ".", "clip_by_value", "(", "color", ",", "0.0", ",", "1.0", ")", "\n", "\n", "return", "color", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.preprocess_image": [[361, 365], ["tensorflow.image.convert_image_dtype"], "function", ["None"], ["", "def", "preprocess_image", "(", "image", ")", ":", "\n", "# Assuming input image is uint8", "\n", "    ", "image", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "image", "#* 2. - 1.", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series": [[366, 373], ["range", "len", "visual_helper.deprocess_image", "list_image_depro.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image"], ["", "def", "deprocess_image_series", "(", "list_image", ")", ":", "\n", "    ", "list_image_depro", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_image", ")", ")", ":", "\n", "        ", "image", "=", "list_image", "[", "i", "]", "\n", "image_depro", "=", "deprocess_image", "(", "image", ")", "\n", "list_image_depro", ".", "append", "(", "image_depro", ")", "\n", "", "return", "list_image_depro", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_normal_series": [[374, 382], ["range", "len", "visual_helper.deprocess_image", "list_image_depro.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image"], ["", "def", "deprocess_normal_series", "(", "list_image", ")", ":", "\n", "    ", "list_image_depro", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_image", ")", ")", ":", "\n", "        ", "image", "=", "list_image", "[", "i", "]", "\n", "image", "=", "image", "/", "2.0", "+", "0.5", "\n", "image_depro", "=", "deprocess_image", "(", "image", ")", "\n", "list_image_depro", ".", "append", "(", "image_depro", ")", "\n", "", "return", "list_image_depro", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image": [[383, 395], ["tensorflow.clip_by_value", "tensorflow.image.convert_image_dtype"], "function", ["None"], ["", "def", "deprocess_image", "(", "image", ")", ":", "\n", "# Assuming input image is float32", "\n", "    ", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "# norm", "\n", "\n", "# image_max = tf.reduce_max(", "\n", "#     tf.reshape(image, [batch_size, -1]), axis=1)", "\n", "# image_norm = tf.divide(image,", "\n", "#                          tf.reshape(image_max, [batch_size, 1, 1, 1]) + 1e-6)", "\n", "image", "=", "tf", ".", "clip_by_value", "(", "image", ",", "0.0", ",", "1.0", ")", "\n", "#image = (image + 1.) / 2.", "\n", "return", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_gary_image_series": [[396, 406], ["range", "isinstance", "len", "visual_helper.deprocess_gary_image", "list_image_depro.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_gary_image"], ["", "def", "deprocess_gary_image_series", "(", "list_image", ",", "convert", "=", "True", ")", ":", "\n", "    ", "if", "isinstance", "(", "list_image", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_image", "=", "[", "list_image", "]", "\n", "\n", "", "list_image_depro", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_image", ")", ")", ":", "\n", "        ", "image", "=", "list_image", "[", "i", "]", "\n", "image_depro", "=", "deprocess_gary_image", "(", "image", ",", "convert", ")", "\n", "list_image_depro", ".", "append", "(", "image_depro", ")", "\n", "", "return", "list_image_depro", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_gary_image": [[407, 414], ["tensorflow.image.grayscale_to_rgb", "tensorflow.image.convert_image_dtype"], "function", ["None"], ["", "def", "deprocess_gary_image", "(", "image", ",", "convert", "=", "True", ")", ":", "\n", "# Assuming input image is float32", "\n", "    ", "image", "=", "tf", ".", "image", ".", "grayscale_to_rgb", "(", "image", ")", "\n", "if", "convert", ":", "\n", "        ", "image", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series": [[416, 424], ["range", "len", "tensorflow.concat", "list_cat.append"], "function", ["None"], ["", "def", "concate_image_series", "(", "list_image_l", ",", "list_image_r", ",", "axis", ")", ":", "\n", "    ", "list_cat", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_image_l", ")", ")", ":", "\n", "        ", "image_l", "=", "list_image_l", "[", "i", "]", "\n", "image_r", "=", "list_image_r", "[", "i", "]", "\n", "image_cat", "=", "tf", ".", "concat", "(", "[", "image_l", ",", "image_r", "]", ",", "axis", "=", "axis", ")", "\n", "list_cat", ".", "append", "(", "image_cat", ")", "\n", "", "return", "list_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.insert_semi_image_series": [[425, 433], ["range", "tensorflow.concat", "len", "tf.concat.append", "tf.concat.append", "len"], "function", ["None"], ["", "def", "insert_semi_image_series", "(", "list_tar", ",", "list_src", ")", ":", "\n", "    ", "list_cat", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_src", ")", ")", ":", "\n", "        ", "if", "i", "==", "len", "(", "list_src", ")", "/", "2", ":", "\n", "            ", "list_cat", ".", "append", "(", "list_tar", "[", "0", "]", ")", "\n", "", "list_cat", ".", "append", "(", "list_src", "[", "i", "]", ")", "\n", "", "list_cat", "=", "tf", ".", "concat", "(", "list_cat", ",", "axis", "=", "2", ")", "# bs, h, w", "\n", "return", "list_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_semi_image_series": [[434, 451], ["range", "isinstance", "len", "tf.concat.append", "numpy.concatenate", "tensorflow.concat", "tf.concat.append", "len"], "function", ["None"], ["", "def", "concate_semi_image_series", "(", "list", ",", "list_src", "=", "None", ")", ":", "\n", "    ", "if", "list_src", "is", "None", ":", "\n", "        ", "list_tar", "=", "[", "list", "[", "0", "]", "]", "\n", "list_src", "=", "list", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "        ", "list_tar", "=", "list", "\n", "list_src", "=", "list_src", "\n", "", "list_cat", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_src", ")", ")", ":", "\n", "        ", "if", "i", "==", "len", "(", "list_src", ")", "/", "2", ":", "\n", "            ", "list_cat", ".", "append", "(", "list_tar", "[", "0", "]", ")", "\n", "", "list_cat", ".", "append", "(", "list_src", "[", "i", "]", ")", "\n", "", "if", "isinstance", "(", "list_cat", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "list_cat", "=", "np", ".", "concatenate", "(", "list_cat", ",", "axis", "=", "2", ")", "# bs, h, w", "\n", "", "else", ":", "\n", "        ", "list_cat", "=", "tf", ".", "concat", "(", "list_cat", ",", "axis", "=", "2", ")", "# bs, h, w", "\n", "", "return", "list_cat", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.normal_max_for_show": [[453, 459], ["tensorflow.reduce_max", "tensorflow.cast"], "function", ["None"], ["", "def", "normal_max_for_show", "(", "disp", ")", ":", "\n", "    ", "disp_max", "=", "tf", ".", "reduce_max", "(", "disp", ")", "\n", "disp_new", "=", "disp", "/", "disp_max", "\n", "disp_new", "=", "disp_new", "*", "255", "\n", "disp_new_uint8", "=", "tf", ".", "cast", "(", "disp_new", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "return", "disp_new_uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.normal_depthmap_for_show_bgMax": [[460, 470], ["tensorflow.reduce_min", "tensorflow.reshape", "tensorflow.cast"], "function", ["None"], ["", "def", "normal_depthmap_for_show_bgMax", "(", "disp", ")", ":", "\n", "#disp_min = tf.contrib.distributions.percentile(disp, q=0, axis=[1, 2], interpolation='lower')", "\n", "    ", "disp_min", "=", "tf", ".", "reduce_min", "(", "disp", ")", "\n", "#disp_max = disp_min+255", "\n", "#disp = tf.clip_by_value(disp, disp_min, disp_max)", "\n", "#disp_max = tf.expand_dims(tf.expand_dims(disp_max, 1), 1)", "\n", "disp_min", "=", "tf", ".", "reshape", "(", "disp_min", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "disp_new", "=", "disp", "-", "disp_min", "\n", "disp_new_uint8", "=", "tf", ".", "cast", "(", "disp_new", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "return", "disp_new_uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.normal_depthmap_for_show": [[471, 490], ["tensorflow.contrib.distributions.percentile", "tensorflow.reduce_max", "tensorflow.clip_by_value", "tensorflow.reshape", "tensorflow.cast"], "function", ["None"], ["", "def", "normal_depthmap_for_show", "(", "disp", ")", ":", "\n", "    ", "disp_max", "=", "tf", ".", "contrib", ".", "distributions", ".", "percentile", "(", "disp", ",", "q", "=", "100", ",", "axis", "=", "[", "1", ",", "2", "]", ",", "interpolation", "=", "'lower'", ")", "\n", "disp_max", "=", "tf", ".", "reduce_max", "(", "disp_max", ")", "\n", "disp_min", "=", "disp_max", "-", "255", "*", "2", "\n", "disp", "=", "tf", ".", "clip_by_value", "(", "disp", ",", "disp_min", ",", "disp_max", ")", "\n", "#disp_max = tf.expand_dims(tf.expand_dims(disp_max, 1), 1)", "\n", "disp_min", "=", "tf", ".", "reshape", "(", "disp_min", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "\n", "disp_new", "=", "disp", "-", "disp_min", "\n", "#disp_new = (disp_new - disp_min) / (disp_max - disp_min)", "\n", "\n", "# disp_new = []", "\n", "# for i in range(disp.shape[0]):", "\n", "#     #disp_i = tf_render.clip_by_value(disp[i], disp_min[i], disp_max[i])", "\n", "#     dn = (disp[i] - disp_min[i]) / (disp_max[i] - disp_min[i])", "\n", "#     disp_new.append(dn)", "\n", "# disp_new = tf_render.stack(disp_new)", "\n", "disp_new", "=", "tf", ".", "cast", "(", "disp_new", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "return", "disp_new", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.write_self_lm": [[6, 26], ["isinstance", "isinstance", "open.write", "open.write", "range", "open", "numpy.array", "str", "range", "open.write", "len", "open.write", "open.write", "len"], "function", ["None"], ["def", "write_self_lm", "(", "path_info_save", ",", "lm_all", ",", "inter", "=", "\",\"", ")", ":", "\n", "    ", "if", "isinstance", "(", "path_info_save", ",", "str", ")", ":", "\n", "        ", "f_info", "=", "open", "(", "path_info_save", ",", "'w'", ")", "\n", "", "else", ":", "\n", "        ", "f_info", "=", "path_info_save", "\n", "\n", "", "if", "isinstance", "(", "lm_all", ",", "list", ")", ":", "\n", "        ", "lm_all", "=", "np", ".", "array", "(", "lm_all", ")", "\n", "\n", "", "f_info", ".", "write", "(", "str", "(", "lm_all", ".", "shape", "[", "0", "]", ")", ")", "\n", "f_info", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "i", "in", "range", "(", "lm_all", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "lm", "=", "lm_all", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "lm", ")", ")", ":", "\n", "            ", "lm_xyz", "=", "lm", "[", "j", "]", "\n", "if", "j", "!=", "len", "(", "lm", ")", "-", "1", ":", "\n", "                ", "f_info", ".", "write", "(", "(", "\"%f\"", "+", "inter", ")", "%", "(", "lm_xyz", ")", ")", "\n", "", "else", ":", "\n", "                ", "f_info", ".", "write", "(", "\"%f\"", "%", "(", "lm_xyz", ")", ")", "\n", "", "", "f_info", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.parse_self_lm": [[27, 37], ["open", "f_info.readlines", "lm2d[].split", "list_lm.append", "float"], "function", ["None"], ["", "", "def", "parse_self_lm", "(", "path_info_save", ")", ":", "\n", "    ", "with", "open", "(", "path_info_save", ")", "as", "f_info", ":", "\n", "        ", "lines", "=", "f_info", ".", "readlines", "(", ")", "\n", "lines_lm", "=", "lines", "[", "1", ":", "]", "\n", "list_lm", "=", "[", "]", "\n", "for", "lm2d", "in", "lines_lm", ":", "\n", "            ", "xyz", "=", "lm2d", "[", ":", "-", "1", "]", ".", "split", "(", "','", ")", "\n", "xyz", "=", "[", "float", "(", "ele", ")", "for", "ele", "in", "xyz", "]", "\n", "list_lm", ".", "append", "(", "xyz", ")", "\n", "", "", "return", "list_lm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.format_file_list": [[38, 68], ["open", "f.readlines", "sorted", "os.path.join", "x.split", "os.path.join", "os.path.join", "range", "text.isdigit", "int", "face_io.format_file_list.atoi"], "function", ["None"], ["", "def", "format_file_list", "(", "data_root", ",", "split", ",", "fmt", "=", "None", ",", "sort", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "data_root", "+", "'/%s.txt'", "%", "split", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "frames", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "if", "sort", ":", "\n", "        ", "import", "re", "\n", "def", "atoi", "(", "text", ")", ":", "\n", "            ", "return", "int", "(", "text", ")", "if", "text", ".", "isdigit", "(", ")", "else", "text", "\n", "\n", "", "def", "natural_keys", "(", "text", ")", ":", "\n", "            ", "'''\n            alist.sort(key=natural_keys) sorts in human order\n            http://nedbatchelder.com/blog/200712/human_sorting.html\n            (See Toothy's implementation in the comments)\n            '''", "\n", "return", "[", "atoi", "(", "c", ")", "for", "c", "in", "re", ".", "split", "(", "r'(\\d+)'", ",", "text", ")", "]", "\n", "\n", "", "frames", "=", "sorted", "(", "frames", ",", "key", "=", "natural_keys", ")", "\n", "\n", "\n", "", "subfolders", "=", "[", "x", ".", "split", "(", "' '", ")", "[", "0", "]", "for", "x", "in", "frames", "]", "\n", "frame_ids", "=", "[", "x", ".", "split", "(", "' '", ")", "[", "1", "]", "[", ":", "-", "1", "]", "for", "x", "in", "frames", "]", "\n", "\n", "if", "fmt", "is", "None", ":", "\n", "        ", "image_file_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "subfolders", "[", "i", "]", ",", "frame_ids", "[", "i", "]", "+", "'.jpg'", ")", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", "]", "\n", "", "else", ":", "\n", "        ", "image_file_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "subfolders", "[", "i", "]", ",", "frame_ids", "[", "i", "]", "+", "fmt", ")", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", "]", "\n", "", "cam_file_list", "=", "[", "os", ".", "path", ".", "join", "(", "data_root", ",", "subfolders", "[", "i", "]", ",", "frame_ids", "[", "i", "]", "+", "'_info.txt'", ")", "for", "i", "in", "range", "(", "len", "(", "frames", ")", ")", "]", "\n", "\n", "return", "image_file_list", ",", "cam_file_list", ",", "subfolders", ",", "frame_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.write_self_6DoF": [[70, 80], ["isinstance", "open.write", "open"], "function", ["None"], ["", "def", "write_self_6DoF", "(", "path_info_save", ",", "dof", ",", "inter", "=", "\",\"", ")", ":", "\n", "    ", "if", "isinstance", "(", "path_info_save", ",", "str", ")", ":", "\n", "        ", "f_info", "=", "open", "(", "path_info_save", ",", "'w'", ")", "\n", "", "else", ":", "\n", "        ", "f_info", "=", "path_info_save", "\n", "\n", "# intrinsic", "\n", "", "f_info", ".", "write", "(", "'%f,%f,%f,%f,%f,%f\\n'", "%", "\n", "(", "\n", "dof", "[", "0", "]", ",", "dof", "[", "1", "]", ",", "dof", "[", "2", "]", ",", "dof", "[", "3", "]", ",", "dof", "[", "4", "]", ",", "dof", "[", "5", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.parse_self_6DoF": [[83, 93], ["isinstance", "dof.split.split", "open", "open.readline", "float"], "function", ["None"], ["", "def", "parse_self_6DoF", "(", "path_info_save", ",", "inter", "=", "\",\"", ")", ":", "\n", "    ", "if", "isinstance", "(", "path_info_save", ",", "str", ")", ":", "\n", "        ", "f_info", "=", "open", "(", "path_info_save", ",", "'r'", ")", "\n", "", "else", ":", "\n", "        ", "f_info", "=", "path_info_save", "\n", "\n", "", "dof", "=", "f_info", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "dof", "=", "dof", ".", "split", "(", "inter", ")", "\n", "dof", "=", "[", "float", "(", "p", ")", "for", "p", "in", "dof", "]", "\n", "return", "dof", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.write_self_intrinsicMtx": [[95, 111], ["isinstance", "open.write", "open"], "function", ["None"], ["", "def", "write_self_intrinsicMtx", "(", "path_info_save", ",", "intrinsic", ",", "inter", "=", "\",\"", ")", ":", "\n", "    ", "\"\"\"\n    :param path_info_save:\n    :param intrinsic: [focalx focaly u v]\n    :param inter:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "path_info_save", ",", "str", ")", ":", "\n", "        ", "f_info", "=", "open", "(", "path_info_save", ",", "'w'", ")", "\n", "", "else", ":", "\n", "        ", "f_info", "=", "path_info_save", "\n", "\n", "# intrinsic", "\n", "", "f_info", ".", "write", "(", "'%f,0.,%f,0.,%f,%f,0.,0.,1.\\n'", "%", "\n", "(", "\n", "intrinsic", "[", "0", "]", ",", "intrinsic", "[", "1", "]", ",", "intrinsic", "[", "2", "]", ",", "intrinsic", "[", "3", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.parse_self_intrinsicMtx": [[114, 126], ["isinstance", "np.reshape.split", "numpy.array", "numpy.reshape", "open", "open.readline", "float"], "function", ["None"], ["", "def", "parse_self_intrinsicMtx", "(", "path_info_save", ",", "inter", "=", "\",\"", ")", ":", "\n", "    ", "if", "isinstance", "(", "path_info_save", ",", "str", ")", ":", "\n", "        ", "f_info", "=", "open", "(", "path_info_save", ",", "'w'", ")", "\n", "", "else", ":", "\n", "        ", "f_info", "=", "path_info_save", "\n", "\n", "", "intrin_mtx", "=", "f_info", ".", "readline", "(", ")", "[", ":", "-", "1", "]", "\n", "intrin_mtx", "=", "intrin_mtx", ".", "split", "(", "inter", ")", "\n", "intrin_mtx", "=", "[", "float", "(", "p", ")", "for", "p", "in", "intrin_mtx", "]", "\n", "intrin_mtx", "=", "np", ".", "array", "(", "intrin_mtx", ")", "\n", "intrin_mtx", "=", "np", ".", "reshape", "(", "intrin_mtx", ",", "[", "3", ",", "3", "]", ")", "\n", "return", "intrin_mtx", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.write_self_camera": [[128, 167], ["isinstance", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "range", "open.write", "open.write", "open.write", "range", "open.write", "open", "len", "numpy.reshape", "str", "str", "open.write", "open.write", "open.write", "open.write", "len", "len"], "function", ["None"], ["", "def", "write_self_camera", "(", "path_info_save", ",", "img_width", ",", "img_height", ",", "intrinsic", ",", "pose", ")", ":", "\n", "    ", "\"\"\"\n    :param path_info_save: str\n    :param intrinsic: shape=[3, 3]\n    :param pose: shape=[6], rx, ry, rz, tx, ty, tz\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "path_info_save", ",", "str", ")", ":", "\n", "        ", "f_info", "=", "open", "(", "path_info_save", ",", "'w'", ")", "\n", "", "else", ":", "\n", "        ", "f_info", "=", "path_info_save", "\n", "\n", "", "if", "len", "(", "intrinsic", ".", "shape", ")", "==", "2", ":", "\n", "        ", "intrinsic", "=", "np", ".", "reshape", "(", "intrinsic", ",", "[", "-", "1", "]", ")", "\n", "\n", "", "f_info", ".", "write", "(", "str", "(", "img_width", ")", ")", "\n", "f_info", ".", "write", "(", "\" \"", ")", "\n", "f_info", ".", "write", "(", "str", "(", "img_height", ")", ")", "\n", "f_info", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "f_info", ".", "write", "(", "\"intrinsic\"", ")", "\n", "f_info", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "i", "in", "range", "(", "intrinsic", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "row", "=", "intrinsic", "[", "i", "]", "\n", "if", "i", "!=", "len", "(", "intrinsic", ")", "-", "1", ":", "\n", "            ", "f_info", ".", "write", "(", "\"%f,\"", "%", "(", "row", ")", ")", "\n", "", "else", ":", "\n", "            ", "f_info", ".", "write", "(", "\"%f\"", "%", "(", "row", ")", ")", "\n", "", "", "f_info", ".", "write", "(", "'\\n'", ")", "\n", "\n", "f_info", ".", "write", "(", "\"external\"", ")", "\n", "f_info", ".", "write", "(", "\"\\n\"", ")", "\n", "for", "i", "in", "range", "(", "pose", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "row", "=", "pose", "[", "i", "]", "\n", "if", "i", "!=", "len", "(", "pose", ")", "-", "1", ":", "\n", "            ", "f_info", ".", "write", "(", "\"%f,\"", "%", "(", "row", ")", ")", "\n", "", "else", ":", "\n", "            ", "f_info", ".", "write", "(", "\"%f\"", "%", "(", "row", ")", ")", "\n", "", "", "f_info", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.parser_self_camera": [[168, 188], ["open", "open.readline", "int", "int", "open.readline", "face_io..", "open.readline", "face_io.."], "function", ["None"], ["", "def", "parser_self_camera", "(", "path_info_save", ")", ":", "\n", "    ", "\"\"\"\n    :param path_info_save: str\n    :param intrinsic: shape=[3, 3]\n    :param pose: shape=[6], rx, ry, rz, tx, ty, tz\n    :return:\n    \"\"\"", "\n", "f_info", "=", "open", "(", "path_info_save", ",", "'r'", ")", "\n", "\n", "frs", "=", "f_info", ".", "readline", "(", ")", "\n", "img_width", "=", "int", "(", "frs", "[", "0", "]", ")", "\n", "img_height", "=", "int", "(", "frs", "[", "1", "]", ")", "\n", "\n", "f_info", ".", "readline", "(", ")", "\n", "intrin_mtx", "=", "parse_self_intrinsicMtx", "(", "f_info", ")", "\n", "\n", "f_info", ".", "readline", "(", ")", "\n", "pose", "=", "parse_self_6DoF", "(", "f_info", ")", "\n", "\n", "return", "img_width", ",", "img_height", ",", "intrin_mtx", ",", "pose", "\n", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.tf_io.unpack_image_sequence": [[13, 40], ["int", "tensorflow.slice", "tensorflow.slice", "tensorflow.slice", "tensorflow.concat", "tensorflow.concat", "tf.concat.set_shape", "tf.slice.set_shape", "len", "tensorflow.expand_dims", "int", "int", "int", "tensorflow.slice", "range"], "function", ["None"], ["def", "unpack_image_sequence", "(", "image_seq", ",", "img_height", ",", "img_width", ",", "num_source", ")", ":", "\n", "    ", "if", "len", "(", "image_seq", ".", "shape", ")", "==", "2", ":", "\n", "        ", "image_seq", "=", "tf", ".", "expand_dims", "(", "image_seq", ",", "-", "1", ")", "\n", "", "channel", "=", "image_seq", ".", "shape", "[", "2", "]", "\n", "\n", "# Assuming the center image is the target frame", "\n", "tgt_start_idx", "=", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", "\n", "tgt_image", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "tgt_start_idx", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "img_width", ",", "-", "1", "]", ")", "\n", "# Source frames before the target frame", "\n", "src_image_1", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", "-", "1", "]", ")", "\n", "# Source frames after the target frame", "\n", "src_image_2", "=", "tf", ".", "slice", "(", "image_seq", ",", "\n", "[", "0", ",", "int", "(", "tgt_start_idx", "+", "img_width", ")", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", "-", "1", "]", ")", "\n", "src_image_seq", "=", "tf", ".", "concat", "(", "[", "src_image_1", ",", "src_image_2", "]", ",", "axis", "=", "1", ")", "\n", "# Stack source frames along the color channels (i.e. [H, W, N*3])", "\n", "src_image_stack", "=", "tf", ".", "concat", "(", "[", "tf", ".", "slice", "(", "src_image_seq", ",", "\n", "[", "0", ",", "i", "*", "img_width", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "img_width", ",", "-", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "num_source", ")", "]", ",", "axis", "=", "2", ")", "\n", "src_image_stack", ".", "set_shape", "(", "[", "img_height", ",", "img_width", ",", "num_source", "*", "channel", "]", ")", "\n", "tgt_image", ".", "set_shape", "(", "[", "img_height", ",", "img_width", ",", "channel", "]", ")", "\n", "return", "tgt_image", ",", "src_image_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.tf_io.data_augmentation_mul": [[41, 116], ["tensorflow.cast", "tensorflow.cast", "tensorflow.unstack", "tf_io.data_augmentation_mul.random_scaling"], "function", ["None"], ["", "def", "data_augmentation_mul", "(", "im", ",", "intrinsics", ",", "out_h", ",", "out_w", ",", "matches", "=", "None", ")", ":", "\n", "    ", "out_h", "=", "tf", ".", "cast", "(", "out_h", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "out_w", "=", "tf", ".", "cast", "(", "out_w", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "# Random scaling", "\n", "def", "random_scaling", "(", "im", ",", "intrinsics", ",", "matches", ")", ":", "\n", "# print(tf_render.unstack(tf_render.shape(im)))", "\n", "# print(im.get_shape().as_list())", "\n", "        ", "_", ",", "in_h", ",", "in_w", ",", "_", "=", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "im", ")", ")", "\n", "in_h", "=", "tf", ".", "cast", "(", "in_h", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "in_w", "=", "tf", ".", "cast", "(", "in_w", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "scaling", "=", "tf", ".", "random_uniform", "(", "[", "2", "]", ",", "1.0", ",", "1.2", ")", "\n", "x_scaling", "=", "scaling", "[", "0", "]", "\n", "y_scaling", "=", "scaling", "[", "0", "]", "\n", "\n", "out_h", "=", "tf", ".", "cast", "(", "in_h", "*", "y_scaling", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "out_w", "=", "tf", ".", "cast", "(", "in_w", "*", "x_scaling", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "im", "=", "tf", ".", "image", ".", "resize_area", "(", "im", ",", "[", "out_h", ",", "out_w", "]", ")", "\n", "\n", "list_intrinsics", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "intrinsics", ".", "shape", "[", "1", "]", ")", ":", "# bs, num_src+1, 3, 3", "\n", "            ", "fx", "=", "intrinsics", "[", ":", ",", "i", ",", "0", ",", "0", "]", "*", "x_scaling", "\n", "fy", "=", "intrinsics", "[", ":", ",", "i", ",", "1", ",", "1", "]", "*", "y_scaling", "\n", "cx", "=", "intrinsics", "[", ":", ",", "i", ",", "0", ",", "2", "]", "*", "x_scaling", "\n", "cy", "=", "intrinsics", "[", ":", ",", "i", ",", "1", ",", "2", "]", "*", "y_scaling", "\n", "intrinsics_new", "=", "make_intrinsics_matrix", "(", "fx", ",", "fy", ",", "cx", ",", "cy", ")", "\n", "list_intrinsics", ".", "append", "(", "intrinsics_new", ")", "\n", "", "intrinsics", "=", "tf", ".", "stack", "(", "list_intrinsics", ",", "axis", "=", "1", ")", "\n", "\n", "if", "matches", "is", "None", ":", "\n", "            ", "return", "im", ",", "intrinsics", ",", "None", "\n", "", "else", ":", "\n", "            ", "x", "=", "matches", "[", ":", ",", ":", ",", ":", ",", "0", "]", "*", "x_scaling", "\n", "y", "=", "matches", "[", ":", ",", ":", ",", ":", ",", "1", "]", "*", "y_scaling", "\n", "matches", "=", "tf", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "3", ")", "# bs, tar, num, axis", "\n", "return", "im", ",", "intrinsics", ",", "matches", "\n", "\n", "# Random cropping", "\n", "", "", "def", "random_cropping", "(", "im", ",", "intrinsics", ",", "out_h", ",", "out_w", ",", "matches", ")", ":", "\n", "# batch_size, in_h, in_w, _ = im.get_shape().as_list()", "\n", "        ", "batch_size", ",", "in_h", ",", "in_w", ",", "_", "=", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "im", ")", ")", "\n", "offset_y", "=", "tf", ".", "random_uniform", "(", "[", "1", "]", ",", "0", ",", "in_h", "-", "out_h", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "0", "]", "\n", "offset_x", "=", "offset_y", "\n", "im", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "\n", "im", ",", "offset_y", ",", "offset_x", ",", "out_h", ",", "out_w", ")", "\n", "\n", "list_intrinsics", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "intrinsics", ".", "shape", "[", "1", "]", ")", ":", "# bs, num_src+1, 3, 3", "\n", "            ", "fx", "=", "intrinsics", "[", ":", ",", "i", ",", "0", ",", "0", "]", "\n", "fy", "=", "intrinsics", "[", ":", ",", "i", ",", "1", ",", "1", "]", "\n", "cx", "=", "intrinsics", "[", ":", ",", "i", ",", "0", ",", "2", "]", "-", "tf", ".", "cast", "(", "offset_x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "cy", "=", "intrinsics", "[", ":", ",", "i", ",", "1", ",", "2", "]", "-", "tf", ".", "cast", "(", "offset_y", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "intrinsics_new", "=", "make_intrinsics_matrix", "(", "fx", ",", "fy", ",", "cx", ",", "cy", ")", "\n", "list_intrinsics", ".", "append", "(", "intrinsics_new", ")", "\n", "", "intrinsics", "=", "tf", ".", "stack", "(", "list_intrinsics", ",", "axis", "=", "1", ")", "\n", "\n", "if", "matches", "is", "None", ":", "\n", "            ", "return", "im", ",", "intrinsics", ",", "None", "\n", "", "else", ":", "\n", "            ", "x", "=", "matches", "[", ":", ",", ":", ",", ":", ",", "0", "]", "-", "tf", ".", "cast", "(", "offset_x", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "y", "=", "matches", "[", ":", ",", ":", ",", ":", ",", "1", "]", "-", "tf", ".", "cast", "(", "offset_y", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "matches", "=", "tf", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "3", ")", "# bs, tar, num, axis", "\n", "return", "im", ",", "intrinsics", ",", "matches", "\n", "\n", "", "", "batch_size", ",", "in_h", ",", "in_w", ",", "_", "=", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "im", ")", ")", "\n", "im", ",", "intrinsics", ",", "matches", "=", "random_scaling", "(", "im", ",", "intrinsics", ",", "matches", ")", "\n", "im", ",", "intrinsics", ",", "matches", "=", "random_cropping", "(", "im", ",", "intrinsics", ",", "out_h", ",", "out_w", ",", "matches", ")", "\n", "# im, intrinsics, matches = random_scaling(im, intrinsics, matches, in_h, in_w)", "\n", "im", "=", "tf", ".", "cast", "(", "im", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "\n", "if", "matches", "is", "None", ":", "\n", "        ", "return", "im", ",", "intrinsics", ",", "None", "\n", "", "else", ":", "\n", "        ", "return", "im", ",", "intrinsics", ",", "matches", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.tf_io.unpack_image_batch_list": [[118, 133], ["range", "tensorflow.stack", "tensorflow.stack", "tf_io.unpack_image_sequence", "tar_list.append", "src_list.append", "range"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.tf_io.unpack_image_sequence"], ["", "", "def", "unpack_image_batch_list", "(", "image_seq", ",", "img_height", ",", "img_width", ",", "num_source", ")", ":", "\n", "    ", "tar_list", "=", "[", "]", "\n", "src_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "image_seq", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tgt_image", ",", "src_image_stack", "=", "unpack_image_sequence", "(", "image_seq", "[", "i", "]", ",", "img_height", ",", "img_width", ",", "num_source", ")", "\n", "tar_list", ".", "append", "(", "tgt_image", ")", "\n", "src_list", ".", "append", "(", "src_image_stack", ")", "\n", "", "tgt_image_b", "=", "tf", ".", "stack", "(", "tar_list", ")", "\n", "src_image_stack_b", "=", "tf", ".", "stack", "(", "src_list", ")", "\n", "\n", "list_tar_image", "=", "[", "tgt_image_b", "]", "\n", "list_src_image", "=", "[", "src_image_stack_b", "[", ":", ",", ":", ",", ":", ",", "i", "*", "3", ":", "(", "i", "+", "1", ")", "*", "3", "]", "for", "i", "in", "range", "(", "num_source", ")", "]", "\n", "list_image", "=", "list_tar_image", "+", "list_src_image", "\n", "\n", "return", "list_image", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.tf_io.unpack_image_np": [[135, 144], ["int", "int", "int"], "function", ["None"], ["", "def", "unpack_image_np", "(", "image_seq", ",", "img_height", ",", "img_width", ",", "num_source", ")", ":", "\n", "\n", "    ", "tgt_start_idx", "=", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", "\n", "\n", "tgt_image", "=", "image_seq", "[", ":", ",", "tgt_start_idx", ":", "tgt_start_idx", "+", "img_width", ",", ":", "]", "\n", "src_image_1", "=", "image_seq", "[", ":", ",", "0", ":", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", ":", "]", "\n", "src_image_2", "=", "image_seq", "[", ":", ",", "tgt_start_idx", "+", "img_width", ":", "tgt_start_idx", "+", "img_width", "+", "int", "(", "img_width", "*", "(", "num_source", "//", "2", ")", ")", ",", ":", "]", "\n", "\n", "return", "src_image_1", ",", "tgt_image", ",", "src_image_2", ",", "[", "tgt_image", ",", "src_image_1", ",", "src_image_2", "]", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_coeff": [[23, 54], ["tensorflow.name_scope", "range", "len", "src_common.net.resnet_v1_3dmm.encoder_resnet50", "list_gpmm.append", "list_gpmm_color.append", "list_gpmm_exp.append", "list_gpmm_pose.append", "list_gpmm_lighting.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.resnet_v1_3dmm.encoder_resnet50"], ["def", "pred_encoder_coeff", "(", "opt", ",", "defined_pose_main", ",", "list_image", ",", "is_training", "=", "True", ")", ":", "\n", "    ", "pred_rank", "=", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "+", "6", "+", "27", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"3dmm_coeff\"", ")", ":", "\n", "#", "\n", "        ", "list_gpmm", "=", "[", "]", "\n", "list_gpmm_color", "=", "[", "]", "\n", "list_gpmm_exp", "=", "[", "]", "\n", "list_gpmm_pose", "=", "[", "]", "\n", "list_gpmm_lighting", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "list_image", ")", ")", ":", "\n", "\n", "            ", "pred_id_src", ",", "end_points_src", "=", "encoder_resnet50", "(", "list_image", "[", "i", "]", ",", "pred_rank", ",", "is_training", "=", "is_training", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "\n", "pred_3dmm_src", "=", "pred_id_src", "[", ":", ",", ":", "opt", ".", "gpmm_rank", "]", "\n", "pred_3dmm_color_src", "=", "pred_id_src", "[", ":", ",", "opt", ".", "gpmm_rank", ":", "2", "*", "opt", ".", "gpmm_rank", "]", "\n", "pred_3dmm_exp_src", "=", "pred_id_src", "[", ":", ",", "2", "*", "opt", ".", "gpmm_rank", ":", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "]", "\n", "\n", "list_gpmm", ".", "append", "(", "pred_3dmm_src", ")", "\n", "list_gpmm_color", ".", "append", "(", "pred_3dmm_color_src", ")", "\n", "list_gpmm_exp", ".", "append", "(", "pred_3dmm_exp_src", ")", "\n", "\n", "pred_pose_render_src", "=", "pred_id_src", "[", ":", ",", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", ":", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "+", "6", "]", "\n", "pred_pose_render_src", "=", "pred_pose_render_src", "+", "defined_pose_main", "\n", "pred_lighting_src", "=", "pred_id_src", "[", ":", ",", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "+", "6", ":", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "+", "6", "+", "27", "]", "\n", "\n", "list_gpmm_pose", ".", "append", "(", "pred_pose_render_src", ")", "\n", "list_gpmm_lighting", ".", "append", "(", "pred_lighting_src", ")", "\n", "\n", "", "return", "list_gpmm", ",", "list_gpmm_color", ",", "list_gpmm_exp", ",", "list_gpmm_pose", ",", "list_gpmm_lighting", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_coeff_light": [[55, 65], ["tensorflow.name_scope", "range", "len", "src_common.net.resnet_v1_3dmm.encoder_resnet50", "list_gpmm.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.resnet_v1_3dmm.encoder_resnet50"], ["", "", "def", "pred_encoder_coeff_light", "(", "opt", ",", "defined_pose_main", ",", "list_image", ",", "is_training", "=", "True", ")", ":", "\n", "    ", "pred_rank", "=", "2", "*", "opt", ".", "gpmm_rank", "+", "opt", ".", "gpmm_exp_rank", "+", "6", "+", "27", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"3dmm_coeff\"", ")", ":", "\n", "#", "\n", "        ", "list_gpmm", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_image", ")", ")", ":", "\n", "            ", "pred_id_src", ",", "end_points_src", "=", "encoder_resnet50", "(", "list_image", "[", "i", "]", ",", "pred_rank", ",", "is_training", "=", "is_training", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "list_gpmm", ".", "append", "(", "pred_id_src", ")", "\n", "", "return", "list_gpmm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_id": [[67, 84], ["range", "len", "deep_3dmm_decoder.facenet_image_process", "deep_3dmm_decoder.pred_encoder_facenet", "list_gpmm_id_pred_tar.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.facenet_image_process", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_facenet"], ["", "", "def", "pred_encoder_id", "(", "opt", ",", "gpmm_render_tar_align", ")", ":", "\n", "    ", "list_gpmm_id_pred_tar", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gpmm_render_tar_align", ")", ")", ":", "\n", "        ", "gpmm_render_de", "=", "gpmm_render_tar_align", "[", "i", "]", "*", "255.0", "\n", "\n", "# if opt.mode_depth_pixel_loss == 'clip':", "\n", "#     gpmm_render_de = tf.clip_by_value(gpmm_render_de, 0.0, 255.0)", "\n", "\n", "gpmm_render_de", "=", "facenet_image_process", "(", "gpmm_render_de", ")", "\n", "\n", "gpmm_id_pred_tar", "=", "pred_encoder_facenet", "(", "gpmm_render_de", ")", "\n", "\n", "#gpmm_id_pred_tar = tf.Print(gpmm_id_pred_tar, [tf.reduce_mean(gpmm_render_de), tf.reduce_mean(gpmm_id_pred_tar)], message='gpmm_id_pred')", "\n", "\n", "list_gpmm_id_pred_tar", ".", "append", "(", "gpmm_id_pred_tar", "[", "0", "]", ")", "\n", "\n", "", "return", "list_gpmm_id_pred_tar", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_facenet": [[85, 100], ["tensorflow.name_scope", "src_common.net.inception_resnet_v1.identity_inference", "tensorflow.nn.l2_normalize", "list_gpmm_id.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.net.inception_resnet_v1.identity_inference"], ["", "def", "pred_encoder_facenet", "(", "image", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"3dmm_identity\"", ")", ":", "\n", "#", "\n", "        ", "list_gpmm_id", "=", "[", "]", "\n", "\n", "prelogits", ",", "end_points", "=", "identity_inference", "(", "\n", "image", ",", "0.8", ",", "phase_train", "=", "False", ",", "\n", "bottleneck_layer_size", "=", "512", ",", "weight_decay", "=", "0.0", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", "\n", ")", "\n", "# list_gpmm_id.append(prelogits)", "\n", "embeddings", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "prelogits", ",", "1", ",", "1e-10", ",", "name", "=", "'embeddings'", ")", "\n", "\n", "list_gpmm_id", ".", "append", "(", "embeddings", ")", "\n", "\n", "return", "list_gpmm_id", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_similar": [[101, 115], ["src_common.geometry.face_align.align_facenet.facenet_align", "deep_3dmm_decoder.pred_encoder_id", "src_common.geometry.face_align.align_facenet.facenet_align", "deep_3dmm_decoder.pred_encoder_id"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align_facenet.facenet_align", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_id", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align_facenet.facenet_align", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_id"], ["", "", "def", "decoder_similar", "(", "opt", ",", "defined_lm_facenet_align", ",", "render_img", ",", "list_img", ",", "lm2d", ",", "list_lm2d_gt", ")", ":", "\n", "    ", "\"\"\"\n    Render image align, id\n    \"\"\"", "\n", "gpmm_render_align", "=", "facenet_align", "(", "render_img", ",", "lm2d", ",", "defined_lm_facenet_align", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ")", "\n", "gpmm_render_tar_id", "=", "pred_encoder_id", "(", "opt", ",", "gpmm_render_align", ")", "\n", "\n", "\"\"\"\n    Ori image align, id\n    \"\"\"", "\n", "image_align", "=", "facenet_align", "(", "list_img", ",", "list_lm2d_gt", ",", "defined_lm_facenet_align", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ")", "\n", "tgt_image_id", "=", "pred_encoder_id", "(", "opt", ",", "image_align", ")", "\n", "\n", "return", "gpmm_render_tar_id", ",", "tgt_image_id", ",", "gpmm_render_align", ",", "image_align", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_colorMesh": [[117, 159], ["range", "len", "h_lrgp.instance", "h_lrgp.instance_color", "src_common.geometry.render.lighting.vertex_normals_pre_split_fixtopo", "deep_3dmm_decoder.gpmm_lighting", "list_gpmm_vertex.append", "list_gpmm_vertexNormal.append", "list_gpmm_vertexColor.append", "list_gpmm_vertexShade.append", "list_gpmm_vertexColorOrigin.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_color", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting.vertex_normals_pre_split_fixtopo", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_lighting"], ["", "def", "decoder_colorMesh", "(", "h_lrgp", ",", "list_gpmm", ",", "list_gpmm_color", ",", "list_gpmm_exp", ",", "list_gpmm_lighting", ",", "flag_sgl_mul", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param list_gpmm:\n    :param list_gpmm_color:\n    :param list_gpmm_exp:\n    :param list_gpmm_lighting:\n    :return:\n    list_gpmm_vertex:\n    list_gpmm_vertexNormal: range (0, 1),\n    list_gpmm_vertexColor: range (0, 1_NAN),\n    list_gpmm_vertexShade: range (0, 1_NAN),\n    list_gpmm_vertexColorOrigin: range (0, 1),\n    \"\"\"", "\n", "list_gpmm_vertex", "=", "[", "]", "\n", "list_gpmm_vertexNormal", "=", "[", "]", "\n", "list_gpmm_vertexColor", "=", "[", "]", "\n", "list_gpmm_vertexShade", "=", "[", "]", "\n", "list_gpmm_vertexColorOrigin", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "list_gpmm", ")", ")", ":", "\n", "\n", "        ", "gpmm_vertex_src", "=", "h_lrgp", ".", "instance", "(", "list_gpmm", "[", "i", "]", ",", "list_gpmm_exp", "[", "i", "]", ")", "\n", "\n", "# gpmm_vertex_src = tf.Print(gpmm_vertex_src, [tf.reduce_mean(gpmm_vertex_src), tf.reduce_mean(list_gpmm[i]),", "\n", "#                                              tf.reduce_mean(list_gpmm_exp[i])], message='coeff, vertex')", "\n", "gpmm_vertexColor_ori", "=", "h_lrgp", ".", "instance_color", "(", "list_gpmm_color", "[", "i", "]", ")", "\n", "\n", "gpmm_vertexNormal", "=", "vertex_normals_pre_split_fixtopo", "(", "\n", "gpmm_vertex_src", ",", "h_lrgp", ".", "h_curr", ".", "mesh_tri", ",", "h_lrgp", ".", "h_curr", ".", "mesh_vertex_refer_face", ",", "\n", "h_lrgp", ".", "h_curr", ".", "mesh_vertex_refer_face_index", ",", "h_lrgp", ".", "h_curr", ".", "mesh_vertex_refer_face_num", "\n", ")", "\n", "gpmm_vertexColor", ",", "pred_gpmm_vertexShade", "=", "gpmm_lighting", "(", "list_gpmm_lighting", "[", "i", "]", ",", "gpmm_vertexNormal", ",", "gpmm_vertexColor_ori", ")", "\n", "\n", "list_gpmm_vertex", ".", "append", "(", "gpmm_vertex_src", ")", "\n", "list_gpmm_vertexNormal", ".", "append", "(", "gpmm_vertexNormal", ")", "\n", "\n", "list_gpmm_vertexColor", ".", "append", "(", "gpmm_vertexColor", ")", "\n", "list_gpmm_vertexShade", ".", "append", "(", "pred_gpmm_vertexShade", ")", "\n", "list_gpmm_vertexColorOrigin", ".", "append", "(", "gpmm_vertexColor_ori", ")", "\n", "\n", "", "return", "list_gpmm_vertex", ",", "list_gpmm_vertexNormal", ",", "list_gpmm_vertexColor", ",", "list_gpmm_vertexShade", ",", "list_gpmm_vertexColorOrigin", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_colorMesh_test": [[160, 217], ["range", "len", "list_gpmm_vertex.append", "list_gpmm_vertexColorOrigin.append", "h_lrgp.instance_color_full", "h_lrgp.instance_color", "src_common.geometry.render.lighting.vertex_normals_pre_split_fixtopo", "deep_3dmm_decoder.gpmm_lighting", "list_gpmm_vertexNormal.append", "list_gpmm_vertexColor.append", "list_gpmm_vertexShade.append", "h_lrgp.instance_full", "h_lrgp.instance_full", "h_lrgp.instance", "h_lrgp.instance"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_color_full", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_color", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.lighting.vertex_normals_pre_split_fixtopo", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_lighting", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_full", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance_full", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.instance"], ["", "def", "decoder_colorMesh_test", "(", "h_lrgp", ",", "dict_inter_comm", ",", "exp", "=", "True", ",", "full", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param list_gpmm:\n    :param list_gpmm_color:\n    :param list_gpmm_exp:\n    :param list_gpmm_lighting:\n    :return:\n    list_gpmm_vertex:\n    list_gpmm_vertexNormal: range (0, 1),\n    list_gpmm_vertexColor: range (0, 1_NAN),\n    list_gpmm_vertexShade: range (0, 1_NAN),\n    list_gpmm_vertexColorOrigin: range (0, 1),\n    \"\"\"", "\n", "list_gpmm_vertex", "=", "[", "]", "\n", "list_gpmm_vertexNormal", "=", "[", "]", "\n", "list_gpmm_vertexColor", "=", "[", "]", "\n", "list_gpmm_vertexShade", "=", "[", "]", "\n", "list_gpmm_vertexColorOrigin", "=", "[", "]", "\n", "\n", "# parse", "\n", "list_gpmm", "=", "dict_inter_comm", "[", "'pred_coeff_shape'", "]", "\n", "list_gpmm_color", "=", "dict_inter_comm", "[", "'pred_coeff_color'", "]", "\n", "list_gpmm_exp", "=", "dict_inter_comm", "[", "'pred_coeff_exp'", "]", "\n", "list_gpmm_lighting", "=", "dict_inter_comm", "[", "'pred_coeff_light'", "]", "\n", "\n", "#", "\n", "for", "i", "in", "range", "(", "len", "(", "list_gpmm", ")", ")", ":", "\n", "        ", "if", "full", ":", "\n", "            ", "if", "exp", "==", "True", ":", "\n", "                ", "gpmm_vertex_src", "=", "h_lrgp", ".", "instance_full", "(", "list_gpmm", "[", "i", "]", ",", "list_gpmm_exp", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "gpmm_vertex_src", "=", "h_lrgp", ".", "instance_full", "(", "list_gpmm", "[", "i", "]", ")", "\n", "\n", "", "gpmm_vertexColor_ori", "=", "h_lrgp", ".", "instance_color_full", "(", "list_gpmm_color", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "if", "exp", "==", "True", ":", "\n", "                ", "gpmm_vertex_src", "=", "h_lrgp", ".", "instance", "(", "list_gpmm", "[", "i", "]", ",", "list_gpmm_exp", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "gpmm_vertex_src", "=", "h_lrgp", ".", "instance", "(", "list_gpmm", "[", "i", "]", ")", "\n", "\n", "", "gpmm_vertexColor_ori", "=", "h_lrgp", ".", "instance_color", "(", "list_gpmm_color", "[", "i", "]", ")", "\n", "\n", "gpmm_vertexNormal", "=", "vertex_normals_pre_split_fixtopo", "(", "\n", "gpmm_vertex_src", ",", "h_lrgp", ".", "h_curr", ".", "mesh_tri", ",", "h_lrgp", ".", "h_curr", ".", "mesh_vertex_refer_face", ",", "\n", "h_lrgp", ".", "h_curr", ".", "mesh_vertex_refer_face_index", ",", "h_lrgp", ".", "h_curr", ".", "mesh_vertex_refer_face_num", "\n", ")", "\n", "gpmm_vertexColor", ",", "pred_gpmm_vertexShade", "=", "gpmm_lighting", "(", "list_gpmm_lighting", "[", "i", "]", ",", "gpmm_vertexNormal", ",", "gpmm_vertexColor_ori", ")", "\n", "\n", "list_gpmm_vertexNormal", ".", "append", "(", "gpmm_vertexNormal", ")", "\n", "list_gpmm_vertexColor", ".", "append", "(", "gpmm_vertexColor", ")", "\n", "list_gpmm_vertexShade", ".", "append", "(", "pred_gpmm_vertexShade", ")", "\n", "\n", "", "list_gpmm_vertex", ".", "append", "(", "gpmm_vertex_src", ")", "\n", "list_gpmm_vertexColorOrigin", ".", "append", "(", "gpmm_vertexColor_ori", ")", "\n", "\n", "", "return", "list_gpmm_vertex", ",", "list_gpmm_vertexNormal", ",", "list_gpmm_vertexColor", ",", "list_gpmm_vertexShade", ",", "list_gpmm_vertexColorOrigin", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_lm": [[218, 231], ["tensorflow.name_scope", "range", "len", "h_lrgp.get_lm3d_instance_vertex", "src_common.geometry.camera_distribute.camera_utils.project3d_batch", "list_lm2d.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.gpmm.bfm09_tf_uv.BFM_TF.get_lm3d_instance_vertex", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.project3d_batch"], ["", "def", "decoder_lm", "(", "h_lrgp", ",", "list_gpmm_vertex_tar_batch", ",", "list_mtx_proj_batch", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "\"3dmm/lm\"", ")", ":", "\n", "        ", "list_lm2d", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_gpmm_vertex_tar_batch", ")", ")", ":", "\n", "            ", "gpmm_vertex_tar_batch", "=", "list_gpmm_vertex_tar_batch", "[", "i", "]", "\n", "#", "\n", "lm3d", "=", "h_lrgp", ".", "get_lm3d_instance_vertex", "(", "h_lrgp", ".", "idx_lm68", ",", "gpmm_vertex_tar_batch", ")", "\n", "#", "\n", "lm2d", "=", "project3d_batch", "(", "lm3d", ",", "list_mtx_proj_batch", "[", "i", "]", ")", "\n", "\n", "list_lm2d", ".", "append", "(", "lm2d", ")", "\n", "\n", "", "return", "list_lm2d", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh": [[233, 279], ["range", "isinstance", "isinstance", "isinstance", "len", "gpmm_render.append", "gpmm_render_mask.append", "gpmm_render_tri_ids.append", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "len", "deep_3dmm_decoder.gpmm_render_image", "deep_3dmm_decoder.gpmm_render_image"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_render_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_render_image"], ["", "", "def", "decoder_renderColorMesh", "(", "opt", ",", "h_lrgp", ",", "list_vertex", ",", "list_vertex_normal", ",", "list_vertexColor", ",", "mtx_perspect_frustrum", ",", "\n", "list_mtx_model_view", ",", "list_cam_position", ",", "fore", "=", "1", ",", "tone", "=", "True", ")", ":", "\n", "    ", "if", "isinstance", "(", "list_vertex", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_vertex", "=", "[", "list_vertex", "]", "\n", "list_vertex_normal", "=", "[", "list_vertex_normal", "]", "\n", "", "if", "isinstance", "(", "list_vertexColor", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_vertexColor", "=", "[", "list_vertexColor", "]", "\n", "", "if", "isinstance", "(", "list_mtx_model_view", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_mtx_model_view", "=", "[", "list_mtx_model_view", "]", "\n", "list_cam_position", "=", "[", "list_cam_position", "]", "\n", "\n", "# render", "\n", "", "gpmm_render", "=", "[", "]", "\n", "gpmm_render_mask", "=", "[", "]", "\n", "gpmm_render_tri_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_vertex", ")", ")", ":", "\n", "        ", "if", "fore", ">", "0", ":", "\n", "            ", "vertex_fore", "=", "tf", ".", "gather", "(", "list_vertex", "[", "i", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "vertex_normal_fore", "=", "tf", ".", "gather", "(", "list_vertex_normal", "[", "i", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "vertex_color_fore", "=", "tf", ".", "gather", "(", "list_vertexColor", "[", "i", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "tri", "=", "h_lrgp", ".", "h_fore", ".", "mesh_tri", "\n", "# vertex_fore = tf.Print(vertex_fore, [tf.reduce_mean(vertex_fore), tf.reduce_mean(vertex_normal_fore),", "\n", "#                                      tf.reduce_mean(vertex_color_fore),", "\n", "#                                      tf.reduce_mean(list_mtx_model_view[0]),", "\n", "#                                      tf.reduce_mean(list_cam_position[0])], message='before render')", "\n", "", "else", ":", "\n", "            ", "vertex_fore", "=", "list_vertex", "[", "i", "]", "\n", "vertex_normal_fore", "=", "list_vertex_normal", "[", "i", "]", "\n", "vertex_color_fore", "=", "list_vertexColor", "[", "i", "]", "\n", "tri", "=", "h_lrgp", ".", "h_curr", ".", "mesh_tri", "\n", "\n", "", "if", "i", "<", "len", "(", "list_mtx_model_view", ")", ":", "\n", "            ", "pred_render", ",", "pred_render_mask", ",", "pred_render_tri_ids", "=", "gpmm_render_image", "(", "\n", "opt", ",", "vertex_fore", ",", "tri", ",", "vertex_normal_fore", ",", "vertex_color_fore", ",", "\n", "mtx_perspect_frustrum", ",", "list_mtx_model_view", "[", "i", "]", ",", "list_cam_position", "[", "i", "]", ",", "tone", "\n", ")", "\n", "", "else", ":", "\n", "            ", "pred_render", ",", "pred_render_mask", ",", "pred_render_tri_ids", "=", "gpmm_render_image", "(", "\n", "opt", ",", "vertex_fore", ",", "tri", ",", "vertex_normal_fore", ",", "vertex_color_fore", ",", "\n", "mtx_perspect_frustrum", ",", "list_mtx_model_view", "[", "0", "]", ",", "list_cam_position", "[", "0", "]", ",", "tone", "\n", ")", "\n", "\n", "", "gpmm_render", ".", "append", "(", "pred_render", ")", "\n", "gpmm_render_mask", ".", "append", "(", "pred_render_mask", ")", "\n", "gpmm_render_tri_ids", ".", "append", "(", "pred_render_tri_ids", ")", "\n", "", "return", "gpmm_render", ",", "gpmm_render_mask", ",", "gpmm_render_tri_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh_gary": [[280, 321], ["range", "isinstance", "isinstance", "isinstance", "len", "gpmm_render.append", "gpmm_render_mask.append", "gpmm_render_tri_ids.append", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "len", "deep_3dmm_decoder.gpmm_render_image_garyLight", "deep_3dmm_decoder.gpmm_render_image_garyLight"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_render_image_garyLight", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_render_image_garyLight"], ["", "def", "decoder_renderColorMesh_gary", "(", "opt", ",", "h_lrgp", ",", "list_vertex", ",", "list_vertex_normal", ",", "list_vertexColor", ",", "mtx_perspect_frustrum", ",", "\n", "list_mtx_model_view", ",", "list_cam_position", ",", "fore", "=", "1", ",", "tone", "=", "True", ",", "background", "=", "10.0", ")", ":", "\n", "    ", "if", "isinstance", "(", "list_vertex", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_vertex", "=", "[", "list_vertex", "]", "\n", "list_vertex_normal", "=", "[", "list_vertex_normal", "]", "\n", "", "if", "isinstance", "(", "list_vertexColor", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_vertexColor", "=", "[", "list_vertexColor", "]", "\n", "", "if", "isinstance", "(", "list_mtx_model_view", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_mtx_model_view", "=", "[", "list_mtx_model_view", "]", "\n", "list_cam_position", "=", "[", "list_cam_position", "]", "\n", "# render", "\n", "", "gpmm_render", "=", "[", "]", "\n", "gpmm_render_mask", "=", "[", "]", "\n", "gpmm_render_tri_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_vertex", ")", ")", ":", "\n", "        ", "if", "fore", ">", "0", ":", "\n", "            ", "vertex_fore", "=", "tf", ".", "gather", "(", "list_vertex", "[", "i", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "vertex_normal_fore", "=", "tf", ".", "gather", "(", "list_vertex_normal", "[", "i", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "vertex_color_fore", "=", "tf", ".", "gather", "(", "list_vertexColor", "[", "i", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "tri", "=", "h_lrgp", ".", "h_fore", ".", "mesh_tri", "\n", "", "else", ":", "\n", "            ", "vertex_fore", "=", "list_vertex", "[", "i", "]", "\n", "vertex_normal_fore", "=", "list_vertex_normal", "[", "i", "]", "\n", "vertex_color_fore", "=", "list_vertexColor", "[", "i", "]", "\n", "tri", "=", "h_lrgp", ".", "h_curr", ".", "mesh_tri", "\n", "\n", "", "if", "i", "<", "len", "(", "list_mtx_model_view", ")", ":", "\n", "            ", "pred_render", ",", "pred_render_mask", ",", "pred_render_tri_ids", "=", "gpmm_render_image_garyLight", "(", "\n", "opt", ",", "vertex_fore", ",", "tri", ",", "vertex_normal_fore", ",", "vertex_color_fore", ",", "\n", "mtx_perspect_frustrum", ",", "list_mtx_model_view", "[", "i", "]", ",", "list_cam_position", "[", "i", "]", ",", "tone", ",", "background", "\n", ")", "\n", "", "else", ":", "\n", "            ", "pred_render", ",", "pred_render_mask", ",", "pred_render_tri_ids", "=", "gpmm_render_image_garyLight", "(", "\n", "opt", ",", "vertex_fore", ",", "tri", ",", "vertex_normal_fore", ",", "vertex_color_fore", ",", "\n", "mtx_perspect_frustrum", ",", "list_mtx_model_view", "[", "0", "]", ",", "list_cam_position", "[", "0", "]", ",", "tone", ",", "background", "\n", ")", "\n", "\n", "", "gpmm_render", ".", "append", "(", "pred_render", ")", "\n", "gpmm_render_mask", ".", "append", "(", "pred_render_mask", ")", "\n", "gpmm_render_tri_ids", ".", "append", "(", "pred_render_tri_ids", ")", "\n", "", "return", "gpmm_render", ",", "gpmm_render_mask", ",", "gpmm_render_tri_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_depth": [[322, 347], ["tensorflow.name_scope", "range", "len", "refine_depths.append", "refine_depths_mask.append", "tensorflow.gather", "len", "deep_3dmm_decoder.gpmm_generate_depthmap", "deep_3dmm_decoder.gpmm_generate_depthmap"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_generate_depthmap", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_generate_depthmap"], ["", "def", "decoder_depth", "(", "opt", ",", "h_lrgp", ",", "list_vertex", ",", "mtx_perspect_frustrum", ",", "list_mtx_ext", ",", "list_mtx_model_view", ",", "list_cam_position", ",", "fore", "=", "1", ")", ":", "\n", "    ", "refine_depths", "=", "[", "]", "\n", "refine_depths_mask", "=", "[", "]", "\n", "with", "tf", ".", "name_scope", "(", "\"3dmm/depth\"", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "list_vertex", ")", ")", ":", "\n", "            ", "if", "fore", ">", "0", ":", "\n", "                ", "vertex_fore", "=", "tf", ".", "gather", "(", "list_vertex", "[", "i", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "tri", "=", "h_lrgp", ".", "h_fore", ".", "mesh_tri", "\n", "", "else", ":", "\n", "                ", "vertex_fore", "=", "list_vertex", "[", "i", "]", "\n", "tri", "=", "h_lrgp", ".", "h_curr", ".", "mesh_tri", "\n", "\n", "", "if", "i", "<", "len", "(", "list_mtx_model_view", ")", ":", "\n", "                ", "pred_render", ",", "mask", "=", "gpmm_generate_depthmap", "(", "\n", "opt", ",", "vertex_fore", ",", "tri", ",", "\n", "mtx_perspect_frustrum", ",", "list_mtx_ext", "[", "i", "]", ",", "list_mtx_model_view", "[", "i", "]", ",", "list_cam_position", "[", "i", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "pred_render", ",", "mask", "=", "gpmm_generate_depthmap", "(", "\n", "opt", ",", "vertex_fore", ",", "tri", ",", "\n", "mtx_perspect_frustrum", ",", "list_mtx_ext", "[", "0", "]", ",", "list_mtx_model_view", "[", "0", "]", ",", "list_cam_position", "[", "0", "]", "\n", ")", "\n", "", "refine_depths", ".", "append", "(", "pred_render", ")", "\n", "refine_depths_mask", ".", "append", "(", "mask", ")", "\n", "", "", "return", "refine_depths", ",", "refine_depths_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.facenet_image_process": [[349, 356], ["range", "tensorflow.stack", "list_img_std.append", "tensorflow.cast"], "function", ["None"], ["", "def", "facenet_image_process", "(", "image_batch_float", ")", ":", "\n", "    ", "list_img_std", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "image_batch_float", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "image_std", "=", "(", "tf", ".", "cast", "(", "image_batch_float", "[", "b", "]", ",", "tf", ".", "float32", ")", "-", "127.5", ")", "/", "128.0", "\n", "# image_std = tf.image.per_image_standardization(image_batch_float[b])", "\n", "list_img_std", ".", "append", "(", "image_std", ")", "\n", "", "return", "tf", ".", "stack", "(", "list_img_std", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_lighting": [[358, 410], ["tensorflow.constant", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "tensorflow.tile", "tensorflow.cast", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.concat", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.squeeze", "tensorflow.stack", "tensorflow.stack", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "numpy.sqrt", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.sqrt", "tensorflow.square", "tensorflow.square", "tensorflow.square"], "function", ["None"], ["", "def", "gpmm_lighting", "(", "gamma", ",", "norm", ",", "face_texture", ")", ":", "\n", "# compute vertex color using face_texture and SH function lighting approximation", "\n", "# input: face_texture with shape [1,N,3]", "\n", "# \t     norm with shape [1,N,3]", "\n", "#\t\t gamma with shape [1,27]", "\n", "# output: face_color with shape [1,N,3], RGB order, range from 0-1", "\n", "#\t\t  lighting with shape [1,N,3], color under uniform texture, range from 0-1", "\n", "    ", "batch_size", "=", "face_texture", ".", "shape", "[", "0", "]", "\n", "num_vertex", "=", "face_texture", ".", "shape", "[", "1", "]", "\n", "\n", "init_lit", "=", "tf", ".", "constant", "(", "[", "0.8", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "init_lit", "=", "tf", ".", "reshape", "(", "init_lit", ",", "[", "1", ",", "1", ",", "9", "]", ")", "\n", "init_lit", "=", "tf", ".", "tile", "(", "init_lit", ",", "multiples", "=", "[", "batch_size", ",", "3", ",", "1", "]", ")", "\n", "\n", "gamma", "=", "tf", ".", "reshape", "(", "gamma", ",", "[", "-", "1", ",", "3", ",", "9", "]", ")", "\n", "gamma", "=", "gamma", "+", "init_lit", "\n", "\n", "# parameter of 9 SH function", "\n", "a0", "=", "np", ".", "pi", "\n", "a1", "=", "2", "*", "np", ".", "pi", "/", "np", ".", "sqrt", "(", "3.0", ")", "\n", "a2", "=", "2", "*", "np", ".", "pi", "/", "np", ".", "sqrt", "(", "8.0", ")", "\n", "c0", "=", "1", "/", "np", ".", "sqrt", "(", "4", "*", "np", ".", "pi", ")", "\n", "c1", "=", "np", ".", "sqrt", "(", "3.0", ")", "/", "np", ".", "sqrt", "(", "4", "*", "np", ".", "pi", ")", "\n", "c2", "=", "3", "*", "np", ".", "sqrt", "(", "5.0", ")", "/", "np", ".", "sqrt", "(", "12", "*", "np", ".", "pi", ")", "\n", "\n", "Y0", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "a0", "*", "c0", ",", "[", "1", ",", "1", ",", "1", "]", ")", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "Y0", "=", "tf", ".", "cast", "(", "Y0", ",", "tf", ".", "float32", ")", "\n", "Y1", "=", "tf", ".", "reshape", "(", "-", "a1", "*", "c1", "*", "norm", "[", ":", ",", ":", ",", "1", "]", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "Y2", "=", "tf", ".", "reshape", "(", "a1", "*", "c1", "*", "norm", "[", ":", ",", ":", ",", "2", "]", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "Y3", "=", "tf", ".", "reshape", "(", "-", "a1", "*", "c1", "*", "norm", "[", ":", ",", ":", ",", "0", "]", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "Y4", "=", "tf", ".", "reshape", "(", "a2", "*", "c2", "*", "norm", "[", ":", ",", ":", ",", "0", "]", "*", "norm", "[", ":", ",", ":", ",", "1", "]", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "Y5", "=", "tf", ".", "reshape", "(", "-", "a2", "*", "c2", "*", "norm", "[", ":", ",", ":", ",", "1", "]", "*", "norm", "[", ":", ",", ":", ",", "2", "]", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "Y6", "=", "tf", ".", "reshape", "(", "a2", "*", "c2", "*", "0.5", "/", "tf", ".", "sqrt", "(", "3.0", ")", "*", "(", "3", "*", "tf", ".", "square", "(", "norm", "[", ":", ",", ":", ",", "2", "]", ")", "-", "1", ")", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "Y7", "=", "tf", ".", "reshape", "(", "-", "a2", "*", "c2", "*", "norm", "[", ":", ",", ":", ",", "0", "]", "*", "norm", "[", ":", ",", ":", ",", "2", "]", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "Y8", "=", "tf", ".", "reshape", "(", "a2", "*", "c2", "*", "0.5", "*", "(", "tf", ".", "square", "(", "norm", "[", ":", ",", ":", ",", "0", "]", ")", "-", "tf", ".", "square", "(", "norm", "[", ":", ",", ":", ",", "1", "]", ")", ")", ",", "[", "batch_size", ",", "num_vertex", ",", "1", "]", ")", "\n", "\n", "Y", "=", "tf", ".", "concat", "(", "[", "Y0", ",", "Y1", ",", "Y2", ",", "Y3", ",", "Y4", ",", "Y5", ",", "Y6", ",", "Y7", ",", "Y8", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# Y shape:[batch,N,9].", "\n", "lit_r", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "Y", ",", "tf", ".", "expand_dims", "(", "gamma", "[", ":", ",", "0", ",", ":", "]", ",", "2", ")", ")", ",", "2", ")", "# [batch,N,9] * [batch,9,1] = [batch,N]", "\n", "lit_g", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "Y", ",", "tf", ".", "expand_dims", "(", "gamma", "[", ":", ",", "1", ",", ":", "]", ",", "2", ")", ")", ",", "2", ")", "\n", "lit_b", "=", "tf", ".", "squeeze", "(", "tf", ".", "matmul", "(", "Y", ",", "tf", ".", "expand_dims", "(", "gamma", "[", ":", ",", "2", ",", ":", "]", ",", "2", ")", ")", ",", "2", ")", "\n", "\n", "# shape:[batch,N,3]", "\n", "face_color", "=", "tf", ".", "stack", "(", "\n", "[", "lit_r", "*", "face_texture", "[", ":", ",", ":", ",", "0", "]", ",", "lit_g", "*", "face_texture", "[", ":", ",", ":", ",", "1", "]", ",", "lit_b", "*", "face_texture", "[", ":", ",", ":", ",", "2", "]", "]", ",", "axis", "=", "2", ")", "\n", "shade_color", "=", "tf", ".", "stack", "(", "[", "lit_r", ",", "lit_g", ",", "lit_b", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# face_color = tf.clip_by_value(face_color, 0.0, 1.0)", "\n", "# shade_color = tf.clip_by_value(shade_color, 0.0, 1.0)", "\n", "\n", "return", "face_color", ",", "shade_color", "# (0, Nan) (0, Nan)", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_face_replace": [[412, 432], ["range", "isinstance", "isinstance", "isinstance", "len", "tensorflow.tile", "list_gpmm_render_img_replace.append"], "function", ["None"], ["", "def", "gpmm_face_replace", "(", "list_img", ",", "list_gpmm_render_img", ",", "list_gpmm_render_mask", ")", ":", "\n", "    ", "if", "isinstance", "(", "list_img", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_img", "=", "[", "list_img", "]", "\n", "", "if", "isinstance", "(", "list_gpmm_render_img", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_gpmm_render_img", "=", "[", "list_gpmm_render_img", "]", "\n", "", "if", "isinstance", "(", "list_gpmm_render_mask", ",", "list", ")", "==", "False", ":", "\n", "        ", "list_gpmm_render_mask", "=", "[", "list_gpmm_render_mask", "]", "\n", "\n", "", "list_gpmm_render_img_replace", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_img", ")", ")", ":", "\n", "        ", "img", "=", "list_img", "[", "i", "]", "\n", "gpmm_render_img", "=", "list_gpmm_render_img", "[", "i", "]", "\n", "gpmm_render_mask", "=", "list_gpmm_render_mask", "[", "i", "]", "\n", "gpmm_render_mask", "=", "tf", ".", "tile", "(", "gpmm_render_mask", ",", "multiples", "=", "[", "1", ",", "1", ",", "1", ",", "3", "]", ")", "\n", "\n", "img_replace", "=", "gpmm_render_img", "+", "(", "1.0", "-", "gpmm_render_mask", ")", "*", "img", "\n", "\n", "list_gpmm_render_img_replace", ".", "append", "(", "img_replace", ")", "\n", "\n", "", "return", "list_gpmm_render_img_replace", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_render_image": [[434, 500], ["len", "src_common.geometry.render.api_tf_mesh_render.mesh_renderer_camera_light", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.clip_by_value", "src_common.geometry.render.api_tf_mesh_render.mesh_renderer_camera_light", "list_tonemapped_renders.append", "list_render_image_mask.append", "list_render_tri_ids.append", "tensorflow.concat", "tensorflow.clip_by_value", "src_common.geometry.render.api_tf_mesh_render.tone_mapper", "src_common.geometry.render.api_tf_mesh_render.tone_mapper"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera_light", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera_light"], ["", "def", "gpmm_render_image", "(", "opt", ",", "vertex", ",", "tri", ",", "vertex_normal", ",", "vertex_color", ",", "mtx_perspect_frustrum", ",", "mtx_model_view", ",", "\n", "cam_position", ",", "tone", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param vertex: [bs, num_ver, 3]\n    :param tri: [bs, num_tri, 3] or [num_tri, 3]\n    :param vertex_normal: [bs, num_ver, 3]\n    :param vertex_color: [bs, num_ver, 3]\n    :param mtx_perspect_frustrum: [bs, 4, 4]\n    :param mtx_model_view: [bs, 4, 4]\n    :param cam_position: [bs, 3]\n    :return:\n    render_image, shape=[batch_size, h, w, 3], dtype=tf_render.float32\n    render_image_mask, shape=[batch_size, h, w, 1], dtype=tf_render.float32\n    render_tri_ids, shape=[batch_size, h, w, 1], dtype=tf_render.int32\n    \"\"\"", "\n", "\n", "# manual light", "\n", "# light_positions = tf.constant([[0.0, 0.0, 1000.0]], shape=[1, 1, 3])", "\n", "# light_intensities = tf.constant([[1.0, 0.0, 0.0]], shape=[1, 1, 3])", "\n", "# ambient_color = tf.constant([[1.0, 1.0, 1.0]], shape=[1, 3])", "\n", "# ambient_color = tf.tile(ambient_color, [opt.batch_size, 1])", "\n", "\n", "if", "len", "(", "tri", ".", "shape", ")", "==", "2", ":", "\n", "        ", "render_image", ",", "render_image_mask", ",", "render_tri_ids", "=", "mesh_renderer_camera_light", "(", "vertex", ",", "tri", ",", "vertex_normal", ",", "vertex_color", ",", "mtx_model_view", ",", "\n", "mtx_perspect_frustrum", ",", "cam_position", ",", "opt", ".", "img_width", ",", "opt", ".", "img_height", ")", "\n", "if", "tone", ":", "\n", "            ", "tonemapped_renders", "=", "tf", ".", "concat", "(", "\n", "[", "\n", "tone_mapper", "(", "render_image", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "0.7", ")", ",", "\n", "render_image", "[", ":", ",", ":", ",", ":", ",", "3", ":", "4", "]", "\n", "]", ",", "\n", "axis", "=", "3", ")", "\n", "", "else", ":", "\n", "            ", "tonemapped_renders", "=", "tf", ".", "clip_by_value", "(", "render_image", ",", "0.0", ",", "100000.0", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "list_tonemapped_renders", "=", "[", "]", "\n", "list_render_image_mask", "=", "[", "]", "\n", "list_render_tri_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tri", ".", "shape", "[", "0", "]", ")", ":", "# bs", "\n", "            ", "render_image", ",", "render_image_mask", ",", "render_tri_ids", "=", "mesh_renderer_camera_light", "(", "\n", "vertex", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "tri", "[", "i", "]", ",", "vertex_normal", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "vertex_color", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "\n", "mtx_model_view", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "mtx_perspect_frustrum", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "cam_position", "[", "i", ":", "i", "+", "1", ",", ":", "]", ",", "\n", "opt", ".", "img_width", ",", "opt", ".", "img_height", ")", "\n", "\n", "if", "tone", ":", "\n", "                ", "tonemapped_renders", "=", "tf", ".", "concat", "(", "\n", "[", "\n", "tone_mapper", "(", "render_image", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "0.7", ")", ",", "\n", "render_image", "[", ":", ",", ":", ",", ":", ",", "3", ":", "4", "]", "\n", "]", ",", "\n", "axis", "=", "3", ")", "\n", "", "else", ":", "\n", "                ", "tonemapped_renders", "=", "tf", ".", "clip_by_value", "(", "render_image", ",", "0.0", ",", "100000.0", ")", "\n", "\n", "", "list_tonemapped_renders", ".", "append", "(", "tonemapped_renders", ")", "\n", "list_render_image_mask", ".", "append", "(", "render_image_mask", ")", "\n", "list_render_tri_ids", ".", "append", "(", "render_tri_ids", ")", "\n", "\n", "", "tonemapped_renders", "=", "tf", ".", "concat", "(", "list_tonemapped_renders", ",", "axis", "=", "0", ")", "\n", "render_image_mask", "=", "tf", ".", "concat", "(", "list_render_image_mask", ",", "axis", "=", "0", ")", "\n", "render_tri_ids", "=", "tf", ".", "concat", "(", "list_render_tri_ids", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "tonemapped_renders", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "render_image_mask", ",", "render_tri_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_render_image_garyLight": [[501, 555], ["tensorflow.constant", "tensorflow.tile", "tensorflow.constant", "tensorflow.tile", "len", "src_common.geometry.render.api_tf_mesh_render.mesh_renderer_camera", "tensorflow.clip_by_value", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "src_common.geometry.render.api_tf_mesh_render.mesh_renderer_camera", "tensorflow.clip_by_value", "list_tonemapped_renders.append", "list_render_image_mask.append", "list_render_tri_ids.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_renderer_camera"], ["", "def", "gpmm_render_image_garyLight", "(", "opt", ",", "vertex", ",", "tri", ",", "vertex_normal", ",", "vertex_color", ",", "mtx_perspect_frustrum", ",", "mtx_model_view", ",", "\n", "cam_position", ",", "tone", "=", "True", ",", "background", "=", "10.999", ")", ":", "\n", "    ", "\"\"\"\n    :param vertex: [bs, num_ver, 3]\n    :param tri: [bs, num_tri, 3] or [num_tri, 3]\n    :param vertex_normal: [bs, num_ver, 3]\n    :param vertex_color: [bs, num_ver, 3]\n    :param mtx_perspect_frustrum: [bs, 4, 4]\n    :param mtx_model_view: [bs, 4, 4]\n    :param cam_position: [bs, 3]\n    :return:\n    render_image, shape=[batch_size, h, w, 3], dtype=tf_render.float32\n    render_image_mask, shape=[batch_size, h, w, 1], dtype=tf_render.float32\n    render_tri_ids, shape=[batch_size, h, w, 1], dtype=tf_render.int32\n    \"\"\"", "\n", "\n", "# manual light", "\n", "light_positions", "=", "tf", ".", "constant", "(", "[", "[", "0.0", ",", "0.0", ",", "1000.0", ",", "-", "1000.0", ",", "0.0", ",", "1000.0", ",", "1000.0", ",", "0.0", ",", "1000.0", "]", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "light_positions", "=", "tf", ".", "tile", "(", "light_positions", ",", "[", "opt", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "light_intensities", "=", "tf", ".", "constant", "(", "[", "[", "0.50", ",", "0.50", ",", "0.50", "]", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "light_intensities", "=", "tf", ".", "tile", "(", "light_intensities", ",", "[", "opt", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "# ambient_color = tf.constant([[1.0, 1.0, 1.0]], shape=[1, 3])", "\n", "# ambient_color = tf.tile(ambient_color, [opt.batch_size, 1])", "\n", "\n", "if", "len", "(", "tri", ".", "shape", ")", "==", "2", ":", "\n", "        ", "render_image", ",", "render_image_mask", "=", "mesh_renderer_camera", "(", "vertex", ",", "tri", ",", "vertex_normal", ",", "vertex_color", ",", "mtx_model_view", ",", "\n", "mtx_perspect_frustrum", ",", "cam_position", ",", "light_positions", ",", "light_intensities", ",", "\n", "opt", ".", "img_width", ",", "opt", ".", "img_height", ",", "background", "=", "background", ")", "\n", "\n", "tonemapped_renders", "=", "tf", ".", "clip_by_value", "(", "render_image", ",", "0.0", ",", "100000.0", ")", "\n", "\n", "", "else", ":", "\n", "        ", "list_tonemapped_renders", "=", "[", "]", "\n", "list_render_image_mask", "=", "[", "]", "\n", "list_render_tri_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "tri", ".", "shape", "[", "0", "]", ")", ":", "# bs", "\n", "            ", "render_image", ",", "render_image_mask", "=", "mesh_renderer_camera", "(", "\n", "vertex", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "tri", "[", "i", "]", ",", "vertex_normal", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "vertex_color", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "\n", "mtx_model_view", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "mtx_perspect_frustrum", "[", "i", ":", "i", "+", "1", ",", ":", ",", ":", "]", ",", "cam_position", "[", "i", ":", "i", "+", "1", ",", ":", "]", ",", "\n", "light_positions", ",", "light_intensities", ",", "opt", ".", "img_width", ",", "opt", ".", "img_height", ",", "background", "=", "10.999", ")", "\n", "\n", "tonemapped_renders", "=", "tf", ".", "clip_by_value", "(", "render_image", ",", "0.0", ",", "100000.0", ")", "\n", "\n", "list_tonemapped_renders", ".", "append", "(", "tonemapped_renders", ")", "\n", "list_render_image_mask", ".", "append", "(", "render_image_mask", ")", "\n", "list_render_tri_ids", ".", "append", "(", "1", ")", "\n", "\n", "", "tonemapped_renders", "=", "tf", ".", "concat", "(", "list_tonemapped_renders", ",", "axis", "=", "0", ")", "\n", "render_image_mask", "=", "tf", ".", "concat", "(", "list_render_image_mask", ",", "axis", "=", "0", ")", "\n", "render_tri_ids", "=", "tf", ".", "concat", "(", "list_render_tri_ids", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "tonemapped_renders", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "render_image_mask", ",", "render_image_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_generate_depthmap": [[557, 566], ["src_common.geometry.render.api_tf_mesh_render.mesh_depthmap_camera", "tensorflow.clip_by_value", "tensorflow.expand_dims", "tensorflow.squeeze"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.render.api_tf_mesh_render.mesh_depthmap_camera"], ["", "def", "gpmm_generate_depthmap", "(", "opt", ",", "mesh", ",", "tri", ",", "mtx_perspect_frustrum", ",", "mtx_ext", ",", "mtx_model_view", ",", "cam_position", ")", ":", "\n", "    ", "depthmap", ",", "depthmap_mask", "=", "mesh_depthmap_camera", "(", "mesh", ",", "tri", ",", "mtx_ext", ",", "mtx_model_view", ",", "mtx_perspect_frustrum", ",", "\n", "opt", ".", "img_width", ",", "opt", ".", "img_height", ")", "\n", "\n", "depthmap", "=", "depthmap", "*", "tf", ".", "squeeze", "(", "depthmap_mask", ",", "axis", "=", "-", "1", ")", "\n", "depthmap", "=", "tf", ".", "clip_by_value", "(", "depthmap", ",", "opt", ".", "depth_min", ",", "opt", ".", "depth_max", ")", "\n", "depthmap", "=", "tf", ".", "expand_dims", "(", "depthmap", ",", "axis", "=", "-", "1", ")", "\n", "\n", "return", "depthmap", ",", "depthmap_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_3dmm_regular_l2_loss": [[15, 21], ["range", "len", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["None"], ["def", "compute_3dmm_regular_l2_loss", "(", "pred_batch_list", ")", ":", "\n", "    ", "gpmm_regular_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_batch_list", ")", ")", ":", "\n", "        ", "loss_gpmm_src_reg", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "pred_batch_list", "[", "i", "]", ")", ")", "\n", "gpmm_regular_loss", "+=", "loss_gpmm_src_reg", "\n", "", "return", "gpmm_regular_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_lm_eul_square_loss": [[22, 34], ["range", "len", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.square"], "function", ["None"], ["", "def", "compute_lm_eul_square_loss", "(", "pred_batch_list", ",", "gt_batch_list", ",", "weight", "=", "None", ")", ":", "\n", "    ", "gpmm_lm_loss", "=", "0.0", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_batch_list", ")", ")", ":", "\n", "        ", "lm2d", "=", "pred_batch_list", "[", "i", "]", "\n", "lm2d_gt", "=", "gt_batch_list", "[", "i", "]", "\n", "\n", "lm_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "lm2d", "-", "lm2d_gt", ")", ",", "2", ")", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "lm_loss", "=", "lm_loss", "*", "weight", "\n", "\n", "", "gpmm_lm_loss", "+=", "tf", ".", "reduce_mean", "(", "lm_loss", ")", "\n", "", "return", "gpmm_lm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_3dmm_render_eul_masknorm_skin_loss": [[35, 76], ["range", "isinstance", "isinstance", "len", "tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.expand_dims", "list_render_loss_error.append", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.square", "src_common.common.visual_helper.pixel_error_heatmap"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.pixel_error_heatmap"], ["", "def", "compute_3dmm_render_eul_masknorm_skin_loss", "(", "pred_batch_list", ",", "pred_mask_batch_list", ",", "pred_skin_batch_list", ",", "gt_batch", ")", ":", "\n", "    ", "\"\"\"\n    :param pred_batch_list:\n    :param pred_mask_batch_list:\n    :param pred_skin_batch_list:\n    :param gt_batch:\n    :return:\n    \"\"\"", "\n", "if", "isinstance", "(", "pred_batch_list", ",", "list", ")", "==", "False", ":", "\n", "        ", "pred_batch_list", "=", "[", "pred_batch_list", "]", "\n", "", "if", "isinstance", "(", "pred_mask_batch_list", ",", "list", ")", "==", "False", ":", "\n", "        ", "pred_mask_batch_list", "=", "[", "pred_mask_batch_list", "]", "\n", "\n", "", "gpmm_pixel_loss", "=", "0.0", "\n", "list_render_loss_error", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_batch_list", ")", ")", ":", "\n", "        ", "pred", "=", "pred_batch_list", "[", "i", "]", "*", "pred_skin_batch_list", "[", "i", "]", "# (0, 1) * (0, 1)", "\n", "gt", "=", "gt_batch", "[", "i", "]", "*", "pred_skin_batch_list", "[", "i", "]", "\n", "\n", "# l1", "\n", "curr_render_error", "=", "pred", "-", "gt", "\n", "curr_render_src_error", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "curr_render_error", ")", ",", "3", ")", "# bs, h, w, c", "\n", "curr_render_src_error", "=", "tf", ".", "sqrt", "(", "curr_render_src_error", "+", "1e-6", ")", "\n", "curr_render_src_error", "=", "tf", ".", "expand_dims", "(", "curr_render_src_error", ",", "-", "1", ")", "# bs, h, w, 1 # (0, 1) * (0, 1)", "\n", "\n", "list_render_loss_error", ".", "append", "(", "pixel_error_heatmap", "(", "curr_render_src_error", ")", ")", "\n", "\n", "# loss", "\n", "# curr_render_mask_sum = pred_mask_batch_list[i]", "\n", "# curr_render_mask_sum = tf.reduce_sum(curr_render_mask_sum, axis=[1, 2, 3])", "\n", "\n", "curr_render_option_sum", "=", "pred_skin_batch_list", "[", "i", "]", "*", "pred_mask_batch_list", "[", "i", "]", "\n", "curr_render_option_sum", "=", "tf", ".", "reduce_sum", "(", "curr_render_option_sum", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "curr_render_src_error", "=", "tf", ".", "reduce_sum", "(", "curr_render_src_error", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "curr_render_src_error", "=", "curr_render_src_error", "/", "(", "curr_render_option_sum", "+", "1e-6", ")", "\n", "curr_render_src_error", "=", "tf", ".", "reduce_mean", "(", "curr_render_src_error", ")", "\n", "\n", "gpmm_pixel_loss", "+=", "curr_render_src_error", "\n", "\n", "", "return", "gpmm_pixel_loss", ",", "list_render_loss_error", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_3dmm_id_cos_loss": [[77, 102], ["range", "isinstance", "isinstance", "len", "tensorflow.reduce_sum", "list_simi_norm.append", "tensorflow.reduce_mean", "tensorflow.multiply"], "function", ["None"], ["", "def", "compute_3dmm_id_cos_loss", "(", "pred_batch_list", ",", "gt_batch_list", ")", ":", "\n", "    ", "if", "isinstance", "(", "pred_batch_list", ",", "list", ")", "==", "False", ":", "\n", "        ", "pred_batch_list", "=", "[", "pred_batch_list", "]", "\n", "", "if", "isinstance", "(", "gt_batch_list", ",", "list", ")", "==", "False", ":", "\n", "        ", "gt_batch_list", "=", "[", "gt_batch_list", "]", "\n", "\n", "", "gpmm_id_loss", "=", "0.0", "\n", "list_simi_norm", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_batch_list", ")", ")", ":", "\n", "        ", "pred", "=", "pred_batch_list", "[", "i", "]", "\n", "gt", "=", "gt_batch_list", "[", "i", "]", "\n", "\n", "simi", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "pred", ",", "gt", ")", ",", "axis", "=", "1", ")", "# bs, 199", "\n", "#x_norm = tf_render.sqrt(tf_render.reduce_sum(tf_render.square(pred) + 1e-6, axis=1))", "\n", "#y_norm = tf_render.sqrt(tf_render.reduce_sum(tf_render.square(gt) + 1e-6, axis=1))", "\n", "#loss = loss / (x_norm*y_norm + 1e-6)", "\n", "#simi = tf.Print(simi, [simi], message=\"simi\", summarize=4)", "\n", "simi_norm", "=", "(", "simi", "+", "1.0", ")", "/", "2.0", "\n", "list_simi_norm", ".", "append", "(", "simi_norm", ")", "\n", "\n", "loss", "=", "-", "simi", "+", "1.0", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "gpmm_id_loss", "+=", "loss", "\n", "\n", "", "return", "gpmm_id_loss", ",", "list_simi_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.combine_flag_sgl_mul_loss": [[104, 119], ["tensorflow.constant", "range", "len", "tensorflow.expand_dims", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "combine_flag_sgl_mul_loss", "(", "loss_batch_list", ",", "flag_sgl_mul_curr", ",", "flag_batch_norm", "=", "True", ")", ":", "\n", "    ", "loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "loss_batch_list", ")", ")", ":", "\n", "        ", "curr_proj_error", "=", "loss_batch_list", "[", "i", "]", "\n", "curr_proj_error", "=", "tf", ".", "expand_dims", "(", "curr_proj_error", ",", "-", "1", ")", "\n", "# curr_proj_error = tf.Print(curr_proj_error, [curr_proj_error.shape, self.flag_sgl_mul.shape], message='curr_proj_error', summarize=16)", "\n", "curr_proj_error_batch", "=", "curr_proj_error", "*", "flag_sgl_mul_curr", "# bs", "\n", "#tf.print(curr_proj_error_batch,[tf.reduce_mean(curr_proj_error_batch), flag_sgl_mul_curr],message='flag_curr_proj_error_batch', summarize=12)", "\n", "# curr_proj_error_batch = tf.Print(curr_proj_error_batch, [curr_proj_error_batch], message='curr_proj_error_batch', summarize=16)", "\n", "# self.pixel_loss += tf.reduce_sum(curr_proj_error_batch) / (tf.reduce_sum(self.flag_sgl_mul) + 1e-6)", "\n", "if", "flag_batch_norm", ":", "\n", "            ", "loss", "+=", "tf", ".", "reduce_mean", "(", "curr_proj_error_batch", ")", "\n", "", "else", ":", "\n", "            ", "loss", "+=", "tf", ".", "reduce_sum", "(", "curr_proj_error_batch", ")", "/", "(", "tf", ".", "reduce_sum", "(", "flag_sgl_mul_curr", ")", "+", "1e-6", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_pixel_eul_loss_list": [[120, 134], ["range", "len", "deep_3dmm_loss.compute_pixel_eul_loss", "list_render_loss_batch.append", "list_render_loss_visual_batch.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_pixel_eul_loss"], ["", "def", "compute_pixel_eul_loss_list", "(", "pred_batch", ",", "pred_mask_batch", ",", "pred_gpmmmask_batch", ",", "gt_batch", ")", ":", "\n", "    ", "render_loss", "=", "0.0", "\n", "list_render_loss_batch", "=", "[", "]", "\n", "list_render_loss_visual_batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pred_batch", ")", ")", ":", "\n", "        ", "pred", "=", "pred_batch", "[", "i", "]", "\n", "warp_mask", "=", "pred_mask_batch", "[", "i", "]", "\n", "render_mask", "=", "pred_gpmmmask_batch", "[", "i", "]", "\n", "gt", "=", "gt_batch", "[", "i", "]", "\n", "curr_render_error", ",", "curr_render_src_error_visual", "=", "compute_pixel_eul_loss", "(", "pred", ",", "warp_mask", ",", "render_mask", ",", "gt", ")", "\n", "\n", "list_render_loss_batch", ".", "append", "(", "curr_render_error", ")", "\n", "list_render_loss_visual_batch", ".", "append", "(", "curr_render_src_error_visual", ")", "\n", "", "return", "list_render_loss_batch", ",", "list_render_loss_visual_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_pixel_eul_loss": [[135, 159], ["tensorflow.reduce_sum", "tensorflow.sqrt", "tensorflow.expand_dims", "src_common.common.visual_helper.pixel_error_heatmap", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.pixel_error_heatmap"], ["", "def", "compute_pixel_eul_loss", "(", "pred_batch", ",", "pred_mask_batch", ",", "pred_gpmmmask_batch", ",", "gt_batch", ")", ":", "\n", "# eul", "\n", "    ", "curr_render_error", "=", "pred_batch", "-", "gt_batch", "\n", "\n", "curr_render_src_error", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "curr_render_error", ")", ",", "3", ")", "\n", "\n", "curr_render_src_error", "=", "tf", ".", "sqrt", "(", "curr_render_src_error", "+", "1e-6", ")", "\n", "curr_render_src_error", "=", "tf", ".", "expand_dims", "(", "curr_render_src_error", ",", "-", "1", ")", "\n", "\n", "curr_render_src_error", "=", "curr_render_src_error", "*", "pred_mask_batch", "\n", "curr_render_src_error", "=", "curr_render_src_error", "*", "pred_gpmmmask_batch", "\n", "\n", "curr_render_src_error_visual", "=", "pixel_error_heatmap", "(", "curr_render_src_error", ")", "\n", "\n", "curr_render_option_sum", "=", "pred_mask_batch", "*", "pred_gpmmmask_batch", "\n", "curr_render_option_sum", "=", "tf", ".", "reduce_sum", "(", "curr_render_option_sum", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "curr_render_src_error", "=", "tf", ".", "reduce_sum", "(", "curr_render_src_error", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "curr_render_src_error", "=", "curr_render_src_error", "/", "(", "curr_render_option_sum", "+", "1e-6", ")", "\n", "\n", "# curr_render_src_error = tf.Print(curr_render_src_error, [tf.reduce_sum(curr_render_src_error), tf.reduce_sum(curr_render_option_sum)],", "\n", "#                            message='error')", "\n", "\n", "return", "curr_render_src_error", ",", "curr_render_src_error_visual", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_ssim_loss_list": [[160, 171], ["range", "len", "tensorflow.reduce_mean", "list_ssim_error.append", "deep_3dmm_loss.compute_ssim_loss"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_ssim_loss"], ["", "def", "compute_ssim_loss_list", "(", "list_x", ",", "list_y", ",", "list_mask", ")", ":", "\n", "    ", "list_ssim_error", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_x", ")", ")", ":", "\n", "        ", "x", "=", "list_x", "[", "i", "]", "\n", "y", "=", "list_y", "[", "i", "]", "\n", "\n", "ssim_error", "=", "compute_ssim_loss", "(", "x", ",", "y", ")", "*", "list_mask", "[", "i", "]", "\n", "ssim_error", "=", "tf", ".", "reduce_mean", "(", "ssim_error", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "list_ssim_error", ".", "append", "(", "ssim_error", ")", "\n", "", "return", "list_ssim_error", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_ssim_loss": [[172, 186], ["tensorflow.avg_pool2d", "tensorflow.avg_pool2d", "tensorflow.clip_by_value", "tensorflow.avg_pool2d", "tensorflow.avg_pool2d", "tensorflow.avg_pool2d"], "function", ["None"], ["", "def", "compute_ssim_loss", "(", "x", ",", "y", ")", ":", "\n", "# reference https://github.com/tensorflow/models/tree/master/research/vid2depth/model.py", "\n", "    ", "\"\"\"Computes a differentiable structured image similarity measure.\"\"\"", "\n", "c1", "=", "0.01", "**", "2", "\n", "c2", "=", "0.03", "**", "2", "\n", "mu_x", "=", "slim", ".", "avg_pool2d", "(", "x", ",", "3", ",", "1", ",", "'VALID'", ")", "\n", "mu_y", "=", "slim", ".", "avg_pool2d", "(", "y", ",", "3", ",", "1", ",", "'VALID'", ")", "\n", "sigma_x", "=", "slim", ".", "avg_pool2d", "(", "x", "**", "2", ",", "3", ",", "1", ",", "'VALID'", ")", "-", "mu_x", "**", "2", "\n", "sigma_y", "=", "slim", ".", "avg_pool2d", "(", "y", "**", "2", ",", "3", ",", "1", ",", "'VALID'", ")", "-", "mu_y", "**", "2", "\n", "sigma_xy", "=", "slim", ".", "avg_pool2d", "(", "x", "*", "y", ",", "3", ",", "1", ",", "'VALID'", ")", "-", "mu_x", "*", "mu_y", "\n", "ssim_n", "=", "(", "2", "*", "mu_x", "*", "mu_y", "+", "c1", ")", "*", "(", "2", "*", "sigma_xy", "+", "c2", ")", "\n", "ssim_d", "=", "(", "mu_x", "**", "2", "+", "mu_y", "**", "2", "+", "c1", ")", "*", "(", "sigma_x", "+", "sigma_y", "+", "c2", ")", "\n", "ssim", "=", "ssim_n", "/", "ssim_d", "\n", "return", "tf", ".", "clip_by_value", "(", "(", "1", "-", "ssim", ")", "/", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_depthmap_l1_loss_list": [[187, 197], ["range", "len", "deep_3dmm_loss.compute_depthmap_l1_loss", "list_curr_viewSyn_depth_error.append", "list_curr_viewSyn_pixel_depth_visual.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_depthmap_l1_loss"], ["", "def", "compute_depthmap_l1_loss_list", "(", "list_pred_batch", ",", "list_pred_mask_batch", ",", "list_gt_batch", ")", ":", "\n", "    ", "list_curr_viewSyn_depth_error", "=", "[", "]", "\n", "list_curr_viewSyn_pixel_depth_visual", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_pred_batch", ")", ")", ":", "\n", "        ", "curr_render_src_error", ",", "curr_render_src_error_visual", "=", "compute_depthmap_l1_loss", "(", "list_pred_batch", "[", "i", "]", ",", "list_pred_mask_batch", "[", "i", "]", ",", "list_pred_mask_batch", "[", "i", "]", ",", "list_gt_batch", "[", "i", "]", ")", "\n", "#curr_render_src_error = tf.Print(curr_render_src_error, [tf.reduce_mean(curr_render_src_error)],message='curr_render_src_error')", "\n", "list_curr_viewSyn_depth_error", ".", "append", "(", "curr_render_src_error", ")", "\n", "list_curr_viewSyn_pixel_depth_visual", ".", "append", "(", "curr_render_src_error_visual", ")", "\n", "", "return", "list_curr_viewSyn_depth_error", ",", "list_curr_viewSyn_pixel_depth_visual", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_depthmap_l1_loss": [[198, 223], ["tensorflow.abs", "tensorflow.reduce_max", "tensorflow.divide", "src_common.common.visual_helper.pixel_error_heatmap", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.pixel_error_heatmap"], ["", "def", "compute_depthmap_l1_loss", "(", "pred_batch", ",", "pred_mask_batch", ",", "pred_gpmmmask_batch", ",", "gt_batch", ")", ":", "\n", "    ", "batch_size", "=", "pred_batch", ".", "shape", "[", "0", "]", "\n", "# l1", "\n", "curr_render_error", "=", "pred_batch", "-", "gt_batch", "\n", "\n", "curr_render_src_error", "=", "tf", ".", "abs", "(", "curr_render_error", ")", "\n", "\n", "curr_render_src_error", "=", "curr_render_src_error", "*", "pred_mask_batch", "\n", "curr_render_src_error", "=", "curr_render_src_error", "*", "pred_gpmmmask_batch", "\n", "\n", "\n", "error_max", "=", "tf", ".", "reduce_max", "(", "tf", ".", "reshape", "(", "curr_render_src_error", ",", "[", "batch_size", ",", "-", "1", "]", ")", ",", "axis", "=", "1", ")", "\n", "curr_render_src_error_norm", "=", "tf", ".", "divide", "(", "curr_render_src_error", ",", "tf", ".", "reshape", "(", "error_max", ",", "[", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", "+", "1e-6", ")", "\n", "\n", "curr_render_src_error_visual", "=", "pixel_error_heatmap", "(", "curr_render_src_error_norm", ")", "\n", "\n", "# curr_render_option_sum = pred_mask_batch * pred_gpmmmask_batch", "\n", "# curr_render_option_sum = tf.reduce_sum(curr_render_option_sum, axis=[1, 2, 3])", "\n", "#", "\n", "# curr_render_src_error = tf.reduce_sum(curr_render_src_error, axis=[1, 2, 3])", "\n", "# curr_render_src_error = curr_render_src_error / (curr_render_option_sum + 1e-6)", "\n", "\n", "curr_render_src_error", "=", "tf", ".", "reduce_mean", "(", "curr_render_src_error", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "\n", "return", "curr_render_src_error", ",", "curr_render_src_error_visual", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_match_loss_list": [[224, 237], ["range", "deep_3dmm_loss.compute_match_loss", "list_epiLoss_batch.append", "list_reprojLoss_batch.append", "mgc_epi_lines.append", "mgc_epi_distances.append", "len"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_match_loss"], ["", "def", "compute_match_loss_list", "(", "list_points", ",", "pred_depth", ",", "list_pose", ",", "intrinsics", ")", ":", "\n", "    ", "list_epiLoss_batch", "=", "[", "]", "\n", "list_reprojLoss_batch", "=", "[", "]", "\n", "mgc_epi_lines", "=", "[", "]", "\n", "mgc_epi_distances", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_points", ")", "-", "1", ")", ":", "\n", "        ", "dist_p2l_aver", ",", "reproj_error", ",", "epi_lines", ",", "dist_p2l", "=", "compute_match_loss", "(", "list_points", "[", "0", "]", ",", "list_points", "[", "1", "+", "i", "]", ",", "pred_depth", ",", "list_pose", "[", "i", "]", ",", "intrinsics", ")", "\n", "list_epiLoss_batch", ".", "append", "(", "dist_p2l_aver", ")", "\n", "list_reprojLoss_batch", ".", "append", "(", "reproj_error", ")", "\n", "mgc_epi_lines", ".", "append", "(", "epi_lines", ")", "\n", "mgc_epi_distances", ".", "append", "(", "dist_p2l", ")", "\n", "", "return", "list_epiLoss_batch", ",", "list_reprojLoss_batch", ",", "mgc_epi_lines", ",", "mgc_epi_distances", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_match_loss": [[238, 275], ["tensorflow.ones", "tensorflow.concat", "tensorflow.concat", "src_common.geometry.geo_utils.fundamental_matrix_from_rt", "tensorflow.expand_dims", "tensorflow.tile", "range", "tensorflow.stack", "tensorflow.stack", "tensorflow.slice", "tensorflow.slice", "tensorflow.reduce_mean", "src_common.geometry.geo_utils.reprojection_error", "tensorflow.shape", "tensorflow.matmul", "tensorflow.abs", "list_epi_lines.append", "list_dist_p2l.append", "tensorflow.sqrt", "tensorflow.matmul", "tensorflow.expand_dims", "tensorflow.transpose", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.fundamental_matrix_from_rt", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.reprojection_error"], ["", "def", "compute_match_loss", "(", "points1", ",", "points2", ",", "pred_depth", ",", "pose", ",", "intrinsics", ")", ":", "\n", "    ", "batch_size", "=", "points1", ".", "shape", "[", "0", "]", "\n", "match_num", "=", "tf", ".", "shape", "(", "points1", ")", "[", "1", "]", "\n", "\n", "ones", "=", "tf", ".", "ones", "(", "[", "batch_size", ",", "match_num", ",", "1", "]", ")", "\n", "points1", "=", "tf", ".", "concat", "(", "[", "points1", ",", "ones", "]", ",", "axis", "=", "2", ")", "# bs, num, 3", "\n", "points2", "=", "tf", ".", "concat", "(", "[", "points2", ",", "ones", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# compute fundamental matrix loss", "\n", "fmat", "=", "fundamental_matrix_from_rt", "(", "pose", ",", "intrinsics", ")", "\n", "fmat", "=", "tf", ".", "expand_dims", "(", "fmat", ",", "axis", "=", "1", ")", "\n", "fmat_tiles", "=", "tf", ".", "tile", "(", "fmat", ",", "[", "1", ",", "match_num", ",", "1", ",", "1", "]", ")", "\n", "\n", "list_epi_lines", "=", "[", "]", "\n", "list_dist_p2l", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "epi_lines", "=", "tf", ".", "matmul", "(", "fmat_tiles", "[", "i", "]", ",", "tf", ".", "expand_dims", "(", "points1", ",", "axis", "=", "3", ")", "[", "i", "]", ")", "\n", "dist_p2l", "=", "tf", ".", "abs", "(", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "epi_lines", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ",", "tf", ".", "expand_dims", "(", "points2", ",", "axis", "=", "3", ")", "[", "i", "]", ")", ")", "\n", "list_epi_lines", ".", "append", "(", "epi_lines", ")", "\n", "list_dist_p2l", ".", "append", "(", "dist_p2l", ")", "\n", "", "epi_lines", "=", "tf", ".", "stack", "(", "list_epi_lines", ")", "\n", "dist_p2l", "=", "tf", ".", "stack", "(", "list_dist_p2l", ")", "\n", "\n", "a", "=", "tf", ".", "slice", "(", "epi_lines", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "b", "=", "tf", ".", "slice", "(", "epi_lines", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "dist_div", "=", "tf", ".", "sqrt", "(", "a", "*", "a", "+", "b", "*", "b", ")", "+", "1e-6", "\n", "dist_p2l", "=", "(", "dist_p2l", "/", "dist_div", ")", "\n", "\n", "dist_p2l_aver", "=", "tf", ".", "reduce_mean", "(", "dist_p2l", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "#dist_p2l_aver = tf.Print(dist_p2l_aver, [tf.shape(dist_p2l_aver), dist_p2l_aver], message=\"dist_p2l_aver\", summarize=2 * 16)", "\n", "\n", "# compute projection loss", "\n", "reproj_error", "=", "reprojection_error", "(", "points1", ",", "points2", ",", "pred_depth", ",", "pose", ",", "intrinsics", ")", "\n", "#reproj_error = tf.Print(reproj_error, [tf.shape(reproj_error), reproj_error], message=\"reproj_error\", summarize=2 * 16)", "\n", "\n", "\n", "return", "dist_p2l_aver", ",", "reproj_error", ",", "epi_lines", ",", "dist_p2l", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.__init__": [[28, 32], ["src_common.geometry.gpmm.bfm09_tf_uv.BFM_TF"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "# 3dmm", "\n", "self", ".", "h_lrgp", "=", "BFM_TF", "(", "opt", ".", "path_gpmm", ",", "opt", ".", "gpmm_rank", ",", "opt", ".", "gpmm_exp_rank", ",", "opt", ".", "batch_size", ",", "full", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_train_graph_dataLoader": [[34, 112], ["src_common.data.find_dataloader_using_name", "src_common.data.find_dataloader_using_name.", "tf.name_scope", "src_common.data.find_dataloader_using_name.load_train_batch", "DataLoader.load_train_batch.get_next", "build_graph.MGC_TRAIN.tgt_image.set_shape", "build_graph.MGC_TRAIN.src_image_stack.set_shape", "preprocess_image", "preprocess_image", "build_graph.MGC_TRAIN.build_train_graph_dataLoader.process_skin"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.__init__.find_dataloader_using_name", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.data_loader_semi_unsupervised_skin.DataLoader.load_train_batch", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.preprocess_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.preprocess_image"], ["", "def", "build_train_graph_dataLoader", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "DataLoader", "=", "find_dataloader_using_name", "(", "opt", ".", "dataset_loader", ")", "\n", "#getattr(sys.modules[__name__], self.data_loader_name)", "\n", "data_loader", "=", "DataLoader", "(", "opt", ".", "dataset_dir", ",", "\n", "opt", ".", "batch_size", ",", "\n", "opt", ".", "img_height", ",", "\n", "opt", ".", "img_width", ",", "\n", "opt", ".", "num_source", ",", "\n", "match_num", "=", "opt", ".", "match_num", ",", "\n", "flag_data_aug", "=", "opt", ".", "flag_data_aug", ",", "\n", "flag_shuffle", "=", "opt", ".", "flag_shuffle", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"data_loading\"", ")", ":", "\n", "            ", "batch_sample", "=", "data_loader", ".", "load_train_batch", "(", ")", "\n", "# give additional batch_size info since the input is undetermined placeholder", "\n", "batch_image_concat", ",", "batch_skin_concat", ",", "batch_flag_sgl_mul", ",", "batch_intrinsic", ",", "batch_intrinsic", ",", "batch_matches", "=", "batch_sample", ".", "get_next", "(", ")", "\n", "\n", "def", "process_skin", "(", "list_skin", ")", ":", "\n", "                ", "list_skin_prop", "=", "[", "]", "\n", "for", "skin", "in", "list_skin", ":", "\n", "                    ", "skin", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "skin", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "skin", "=", "tf", ".", "image", ".", "rgb_to_grayscale", "(", "skin", ")", "\n", "\n", "tgt_skin_add", "=", "skin", ">", "0.5", "\n", "tgt_skin_add", "=", "tf", ".", "cast", "(", "tgt_skin_add", ",", "tf", ".", "float32", ")", "\n", "\n", "tgt_skin_store", "=", "1.0", "-", "tgt_skin_add", "\n", "\n", "tgt_skin_pro", "=", "tgt_skin_add", "+", "skin", "*", "tgt_skin_store", "\n", "\n", "list_skin_prop", ".", "append", "(", "tgt_skin_pro", ")", "\n", "", "return", "list_skin_prop", "\n", "\n", "#", "\n", "", "self", ".", "tgt_image", "=", "batch_image_concat", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "self", ".", "src_image_stack", "=", "batch_image_concat", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "\n", "self", ".", "tgt_image", ".", "set_shape", "(", "[", "opt", ".", "batch_size", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "3", "]", ")", "# [bs, 128, 416, 3]", "\n", "self", ".", "src_image_stack", ".", "set_shape", "(", "[", "opt", ".", "batch_size", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "3", "*", "opt", ".", "num_source", "]", ")", "# [bs, 128, 416, 6]", "\n", "\n", "self", ".", "tgt_image", "=", "preprocess_image", "(", "self", ".", "tgt_image", ")", "\n", "self", ".", "src_image_stack", "=", "preprocess_image", "(", "self", ".", "src_image_stack", ")", "\n", "\n", "self", ".", "list_tar_image", "=", "[", "self", ".", "tgt_image", "]", "\n", "self", ".", "list_src_image", "=", "[", "self", ".", "src_image_stack", "[", ":", ",", ":", ",", ":", ",", "i", "*", "3", ":", "(", "i", "+", "1", ")", "*", "3", "]", "for", "i", "in", "range", "(", "opt", ".", "num_source", ")", "]", "\n", "self", ".", "list_image", "=", "self", ".", "list_tar_image", "+", "self", ".", "list_src_image", "\n", "\n", "#", "\n", "self", ".", "tgt_skin", "=", "batch_skin_concat", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "self", ".", "tgt_skin", "=", "[", "self", ".", "tgt_skin", "]", "\n", "self", ".", "list_tar_skin", "=", "process_skin", "(", "self", ".", "tgt_skin", ")", "\n", "\n", "self", ".", "src_skin", "=", "batch_skin_concat", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "\n", "self", ".", "src_skin", ".", "set_shape", "(", "[", "opt", ".", "batch_size", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "3", "*", "opt", ".", "num_source", "]", ")", "\n", "self", ".", "src_skin", "=", "[", "self", ".", "src_skin", "[", ":", ",", ":", ",", ":", ",", "i", "*", "3", ":", "(", "i", "+", "1", ")", "*", "3", "]", "for", "i", "in", "range", "(", "opt", ".", "num_source", ")", "]", "\n", "self", ".", "list_src_skin", "=", "process_skin", "(", "self", ".", "src_skin", ")", "\n", "self", ".", "list_skin", "=", "self", ".", "list_tar_skin", "+", "self", ".", "list_src_skin", "\n", "\n", "#", "\n", "self", ".", "flag_sgl_mul", "=", "tf", ".", "reshape", "(", "batch_flag_sgl_mul", ",", "[", "opt", ".", "batch_size", "]", ")", "# [bs, 1]", "\n", "self", ".", "flag_sgl_mul", "=", "tf", ".", "cast", "(", "self", ".", "flag_sgl_mul", ",", "dtype", "=", "tf", ".", "float32", ")", "# [0, 1, 2]", "\n", "\n", "\n", "self", ".", "matches", "=", "batch_matches", "\n", "self", ".", "matches", ".", "set_shape", "(", "[", "opt", ".", "batch_size", ",", "(", "opt", ".", "num_source", "+", "1", ")", ",", "opt", ".", "match_num", ",", "2", "]", ")", "\n", "\n", "self", ".", "lm2d_weight", "=", "np", ".", "ones", "(", "68", ",", "dtype", "=", "float", ")", "\n", "self", ".", "lm2d_weight", "[", "28", "-", "1", ":", "36", "]", "=", "opt", ".", "lm_detail_weight", "\n", "self", ".", "lm2d_weight", "[", "61", "-", "1", ":", "]", "=", "opt", ".", "lm_detail_weight", "\n", "self", ".", "lm2d_weight", "=", "tf", ".", "constant", "(", "self", ".", "lm2d_weight", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "self", ".", "list_lm2d_gt_tar", "=", "[", "self", ".", "matches", "[", ":", ",", "0", ",", ":", ",", ":", "]", "]", "\n", "self", ".", "list_lm2d_gt_src", "=", "[", "self", ".", "matches", "[", ":", ",", "i", ",", ":", ",", ":", "]", "for", "i", "in", "range", "(", "1", ",", "self", ".", "matches", ".", "shape", "[", "1", "]", ")", "]", "\n", "self", ".", "list_lm2d_gt", "=", "self", ".", "list_lm2d_gt_tar", "+", "self", ".", "list_lm2d_gt_src", "\n", "\n", "", "return", "data_loader", ",", "batch_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.set_constant_node": [[114, 133], ["tf.Variable", "tf.constant", "tf.constant", "tf.tile", "build_train_graph_3dmm_frustrum", "tf.tile", "src_common.geometry.face_align.align_facenet.get_facenet_align_lm", "tf.tile"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.build_train_graph_3dmm_frustrum", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.face_align.align_facenet.get_facenet_align_lm"], ["", "def", "set_constant_node", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "\"\"\"\n        ************************************    data load   ************************************\n        \"\"\"", "\n", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'global_step'", ",", "trainable", "=", "False", ")", "\n", "\n", "self", ".", "batch_size", "=", "self", ".", "opt", ".", "batch_size", "\n", "\n", "# camera", "\n", "defined_pose_main", "=", "tf", ".", "constant", "(", "[", "0.000000", ",", "0.000000", ",", "3.141593", ",", "0.17440447", ",", "9.1053238", ",", "4994.3359", "]", ",", "shape", "=", "[", "1", ",", "6", "]", ")", "\n", "self", ".", "intrinsics_single", "=", "tf", ".", "constant", "(", "[", "4700.000000", ",", "0.", ",", "112.000000", ",", "0.", ",", "4700.000000", ",", "112.000000", ",", "0.", ",", "0.", ",", "1.", "]", ",", "shape", "=", "[", "1", ",", "3", ",", "3", "]", ")", "\n", "self", ".", "intrinsics_single", "=", "tf", ".", "tile", "(", "self", ".", "intrinsics_single", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "gpmm_frustrum", "=", "build_train_graph_3dmm_frustrum", "(", "self", ".", "intrinsics_single", ")", "\n", "self", ".", "defined_pose_main", "=", "tf", ".", "tile", "(", "defined_pose_main", ",", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "\n", "# identity loss", "\n", "defined_lm_facenet_align", "=", "get_facenet_align_lm", "(", "opt", ".", "img_height", ")", "\n", "self", ".", "defined_lm_facenet_align", "=", "tf", ".", "tile", "(", "defined_lm_facenet_align", ",", "[", "self", ".", "batch_size", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_train_graph": [[137, 207], ["build_graph.MGC_TRAIN.set_constant_node", "tf.constant", "build_graph.MGC_TRAIN.build_decoderCommon", "parse_seq", "parse_seq", "parse_seq", "parse_seq", "parse_seq", "parse_seq", "parse_seq", "parse_seq", "parse_seq", "build_graph.MGC_TRAIN.build_decoderMGC", "build_graph.MGC_TRAIN.build_train_graph_train_op", "deep_3dmm_decoder.pred_encoder_coeff_light"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.set_constant_node", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_decoderCommon", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.format_helper.parse_seq", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_decoderMGC", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_train_graph_train_op", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_coeff_light"], ["def", "build_train_graph", "(", "self", ",", "list_coeffALL", "=", "None", ")", ":", "\n", "        ", "'''[summary]\n        build training graph\n        Returns:\n            data loader and batch sample for train() to initialize\n            undefined placeholders\n        '''", "\n", "opt", "=", "self", ".", "opt", "\n", "\n", "\"\"\"\n        ************************************    setting   **********************************************\n        \"\"\"", "\n", "self", ".", "set_constant_node", "(", ")", "\n", "self", ".", "total_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "# ********************************************  Network", "\n", "if", "list_coeffALL", "is", "None", ":", "\n", "            ", "list_coeffALL", "=", "pred_encoder_coeff_light", "(", "self", ".", "opt", ",", "self", ".", "defined_pose_main", ",", "self", ".", "list_image", ",", "is_training", "=", "True", ")", "\n", "\n", "# ********************************************  Common flow", "\n", "", "dict_loss_common", ",", "dict_intermedate_common", "=", "self", ".", "build_decoderCommon", "(", "list_coeffALL", ",", "self", ".", "list_image", ",", "self", ".", "list_skin", ",", "self", ".", "list_lm2d_gt", ",", "self", ".", "flag_sgl_mul", ")", "\n", "self", ".", "dict_inter_comm", "=", "dict_intermedate_common", "\n", "\n", "# ********************************************  Intermediate result for(print, visual, tensorboard)", "\n", "# weighted loss for each view", "\n", "self", ".", "gpmm_regular_shape_loss", "=", "dict_loss_common", "[", "'reg_shape_loss'", "]", "\n", "self", ".", "gpmm_regular_color_loss", "=", "dict_loss_common", "[", "'reg_color_loss'", "]", "\n", "self", ".", "gpmm_lm_loss", "=", "dict_loss_common", "[", "'lm2d_loss'", "]", "\n", "self", ".", "gpmm_pixel_loss", "=", "dict_loss_common", "[", "'render_loss'", "]", "\n", "self", ".", "gpmm_id_loss", "=", "dict_loss_common", "[", "'id_loss'", "]", "\n", "\n", "# visual landmark on the rendered images/shade/render loss error map", "\n", "#self.gpmm_pose_tar, self.gpmm_pose_src = parse_seq(dict_intermedate_common['pred_6dof_pose'])", "\n", "self", ".", "lm2d_tar", ",", "self", ".", "lm2d_src", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'pred_lm2d'", "]", ")", "\n", "self", ".", "gpmm_render_tar", ",", "self", ".", "gpmm_render_src", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'3dmm_render'", "]", ")", "\n", "self", ".", "gpmm_render_mask_tar", ",", "self", ".", "gpmm_render_mask_src", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'3dmm_render_mask'", "]", ")", "\n", "self", ".", "gpmm_render_shade_tar", ",", "self", ".", "gpmm_render_shade_src", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'3dmm_render_shade'", "]", ")", "\n", "self", ".", "gpmm_render_tri_ids_tar", ",", "self", ".", "gpmm_render_tri_ids_src", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'3dmm_render_tri_id'", "]", ")", "\n", "self", ".", "list_render_loss_error_tar", ",", "self", ".", "list_render_loss_error_src", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'3dmm_render_loss_heat'", "]", ")", "\n", "\n", "# visual identity facenet input", "\n", "self", ".", "gpmm_render_tar_align", ",", "self", ".", "gpmm_render_src_align", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'id_render_align'", "]", ")", "\n", "self", ".", "tar_image_align", ",", "self", ".", "src_image_align", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'id_image_align'", "]", ")", "\n", "\n", "# visual depthmap", "\n", "self", ".", "tar_depths", ",", "self", ".", "lr_depths", "=", "parse_seq", "(", "dict_intermedate_common", "[", "'3dmm_depthmap'", "]", ")", "\n", "\n", "self", ".", "gpmm_consist_pixel_tar", "=", "self", ".", "list_lm2d_gt_tar", "\n", "self", ".", "gpmm_consist_pixel_src", "=", "self", ".", "list_lm2d_gt_src", "\n", "\n", "self", ".", "common_loss", "=", "dict_loss_common", "[", "'loss_common'", "]", "\n", "self", ".", "total_loss", "+=", "self", ".", "common_loss", "\n", "\n", "# ********************************************  Multi-view flow", "\n", "dict_loss_mgc", ",", "dict_inter_mgc", "=", "self", ".", "build_decoderMGC", "(", "self", ".", "flag_sgl_mul", ",", "self", ".", "list_image", ",", "self", ".", "list_lm2d_gt", ",", "dict_intermedate_common", ")", "\n", "self", ".", "dict_inter_mgc", "=", "dict_inter_mgc", "\n", "\n", "# loss", "\n", "self", ".", "ga_loss", "=", "dict_loss_mgc", "[", "'loss_mgc'", "]", "\n", "self", ".", "ssim_loss", "=", "dict_loss_mgc", "[", "'ssim_loss'", "]", "\n", "self", ".", "pixel_loss", "=", "dict_loss_mgc", "[", "'pixel_loss'", "]", "\n", "self", ".", "epipolar_loss", "=", "dict_loss_mgc", "[", "'epi_loss'", "]", "\n", "self", ".", "depth_loss", "=", "dict_loss_mgc", "[", "'depth_loss'", "]", "\n", "\n", "self", ".", "total_loss", "+=", "opt", ".", "MULTIVIEW_weight", "*", "dict_loss_mgc", "[", "'loss_mgc'", "]", "\n", "\n", "# ********************************************  Training op", "\n", "self", ".", "build_train_graph_train_op", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_decoderCommon": [[209, 353], ["dict", "dict", "src_common.common.parse_encoder.parse_coeff_list", "deep_3dmm_decoder.decoder_colorMesh", "build_train_graph_3dmm_camera", "deep_3dmm_decoder.decoder_lm", "deep_3dmm_decoder.decoder_renderColorMesh", "deep_3dmm_decoder.gpmm_face_replace", "deep_3dmm_decoder.decoder_renderColorMesh", "deep_3dmm_loss.compute_3dmm_regular_l2_loss", "deep_3dmm_loss.compute_lm_eul_square_loss", "deep_3dmm_loss.compute_3dmm_render_eul_masknorm_skin_loss", "deep_3dmm_decoder.decoder_similar", "deep_3dmm_loss.compute_3dmm_id_cos_loss", "deep_3dmm_decoder.decoder_depth", "tf.constant", "deep_3dmm_loss.compute_3dmm_regular_l2_loss", "deep_3dmm_loss.compute_3dmm_regular_l2_loss"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.parse_encoder.parse_coeff_list", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_colorMesh", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.build_train_graph_3dmm_camera", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_lm", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_face_replace", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_3dmm_regular_l2_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_lm_eul_square_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_3dmm_render_eul_masknorm_skin_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_similar", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_3dmm_id_cos_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_depth", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_3dmm_regular_l2_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_3dmm_regular_l2_loss"], ["", "def", "build_decoderCommon", "(", "self", ",", "list_coeff_all", ",", "list_image", ",", "list_skin", "=", "None", ",", "list_lm2d_gt", "=", "None", ",", "flag_sgl_mul", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        A common mapping function from images to intermediate result\n        :param gpmm_frustrum:\n        :param list_image:\n            1.can be single image or multi images\n            2.shape: [bs, h, w, c]\n        :param list_lm2d_gt:\n        :return:\n        \"\"\"", "\n", "dict_loss_common", "=", "dict", "(", ")", "\n", "dict_intermedate_common", "=", "dict", "(", ")", "\n", "\"\"\"\n        ************************************    Coefficients (clean)    *********************************\n        \"\"\"", "\n", "list_gpmm", ",", "list_gpmm_color", ",", "list_gpmm_exp", ",", "list_gpmm_pose", ",", "list_gpmm_light", "=", "parse_coeff_list", "(", "self", ".", "opt", ",", "list_coeff_all", ",", "self", ".", "defined_pose_main", ")", "\n", "\n", "dict_intermedate_common", "[", "'pred_coeff_shape'", "]", "=", "list_gpmm", "\n", "dict_intermedate_common", "[", "'pred_coeff_color'", "]", "=", "list_gpmm_color", "\n", "dict_intermedate_common", "[", "'pred_coeff_exp'", "]", "=", "list_gpmm_exp", "\n", "dict_intermedate_common", "[", "'pred_coeff_light'", "]", "=", "list_gpmm_light", "\n", "\n", "dict_intermedate_common", "[", "'pred_6dof_pose'", "]", "=", "list_gpmm_pose", "\n", "\n", "\"\"\"\n        ************************************    Decoder    **********************************************\n        \"\"\"", "\n", "# bfm", "\n", "list_gpmm_vertex", ",", "list_gpmm_vertexNormal", ",", "list_gpmm_vertexColor", ",", "list_gpmm_vertexShade", ",", "list_gpmm_vertexColorOri", "=", "decoder_colorMesh", "(", "self", ".", "h_lrgp", ",", "list_gpmm", ",", "list_gpmm_color", ",", "list_gpmm_exp", ",", "list_gpmm_light", ",", "flag_sgl_mul", ")", "\n", "\n", "dict_intermedate_common", "[", "'gpmm_vertex'", "]", "=", "list_gpmm_vertex", "\n", "dict_intermedate_common", "[", "'gpmm_vertexNormal'", "]", "=", "list_gpmm_vertexNormal", "\n", "dict_intermedate_common", "[", "'gpmm_vertexColor'", "]", "=", "list_gpmm_vertexColor", "\n", "# cam", "\n", "list_gpmm_ext", ",", "list_gpmm_proj", ",", "list_gpmm_mv", ",", "list_gpmm_eye", "=", "build_train_graph_3dmm_camera", "(", "self", ".", "intrinsics_single", ",", "list_gpmm_pose", ")", "\n", "dict_intermedate_common", "[", "'pred_cam_mv'", "]", "=", "list_gpmm_mv", "\n", "dict_intermedate_common", "[", "'pred_cam_eye'", "]", "=", "list_gpmm_eye", "\n", "\"\"\"\n        ************************************    Landmark (clean)    *************************************\n        \"\"\"", "\n", "# loss:lm", "\n", "list_lm2d", "=", "decoder_lm", "(", "self", ".", "h_lrgp", ",", "list_gpmm_vertex", ",", "list_gpmm_proj", ")", "# bs, ver_num, xy", "\n", "\n", "dict_intermedate_common", "[", "'pred_lm2d'", "]", "=", "list_lm2d", "\n", "\n", "\"\"\"\n        ************************************    Render     **********************************************\n        \"\"\"", "\n", "list_gpmm_render", ",", "list_gpmm_render_mask", ",", "list_gpmm_render_tri_ids", "=", "decoder_renderColorMesh", "(", "\n", "# gpmm_vertexColor: (0, Nan)", "\n", "self", ".", "opt", ",", "self", ".", "h_lrgp", ",", "list_gpmm_vertex", ",", "list_gpmm_vertexNormal", ",", "list_gpmm_vertexColor", ",", "\n", "self", ".", "gpmm_frustrum", ",", "list_gpmm_mv", ",", "list_gpmm_eye", ",", "fore", "=", "self", ".", "opt", ".", "flag_fore", ",", "tone", "=", "False", "\n", ")", "\n", "list_gpmm_render", "=", "gpmm_face_replace", "(", "list_image", ",", "list_gpmm_render", ",", "list_gpmm_render_mask", ")", "\n", "\n", "\"\"\"\n        ************************************    Visualization or Testing    *****************************\n        \"\"\"", "\n", "# render visual", "\n", "list_gpmm_render_shade", ",", "_", ",", "_", "=", "decoder_renderColorMesh", "(", "# gpmm_vertexShade: (0, Nan)", "\n", "self", ".", "opt", ",", "self", ".", "h_lrgp", ",", "list_gpmm_vertex", ",", "list_gpmm_vertexNormal", ",", "list_gpmm_vertexShade", ",", "\n", "self", ".", "gpmm_frustrum", ",", "list_gpmm_mv", ",", "list_gpmm_eye", ",", "fore", "=", "self", ".", "opt", ".", "flag_fore", ",", "tone", "=", "False", "\n", ")", "\n", "dict_intermedate_common", "[", "'3dmm_render_shade'", "]", "=", "list_gpmm_render_shade", "\n", "# # main 3 view", "\n", "# gpmm_main_ext, gpmm_main_proj, gpmm_main_mv, gpmm_main_eye = \\", "\n", "#     build_train_graph_3dmm_camera(self.intrinsics_single, self.defined_pose_main)", "\n", "# gpmm_render_tar_main, _, _ = decoder_renderColorMesh(", "\n", "#     opt, self.h_lrgp, gpmm_vertex, gpmm_vertexNormal, gpmm_vertexColorOri, gpmm_frustrum,", "\n", "#     gpmm_main_mv, gpmm_main_eye)", "\n", "\n", "\"\"\"\n        Weighted Loss\n        \"\"\"", "\n", "if", "list_lm2d_gt", "is", "not", "None", ":", "\n", "# loss:reg", "\n", "            ", "gpmm_regular_shape_loss", "=", "compute_3dmm_regular_l2_loss", "(", "list_gpmm", ")", "\n", "gpmm_regular_shape_loss", "+=", "0.8", "*", "compute_3dmm_regular_l2_loss", "(", "list_gpmm_exp", ")", "\n", "gpmm_regular_color_loss", "=", "0.0017", "*", "compute_3dmm_regular_l2_loss", "(", "list_gpmm_color", ")", "\n", "\n", "gpmm_lm_loss", "=", "compute_lm_eul_square_loss", "(", "list_lm2d", ",", "list_lm2d_gt", ",", "self", ".", "lm2d_weight", ")", "# clean", "\n", "\n", "gpmm_pixel_loss", ",", "list_render_loss_error", "=", "compute_3dmm_render_eul_masknorm_skin_loss", "(", "list_gpmm_render", ",", "list_gpmm_render_mask", ",", "list_skin", ",", "\n", "list_image", ")", "\n", "dict_intermedate_common", "[", "'3dmm_render'", "]", "=", "list_gpmm_render", "\n", "dict_intermedate_common", "[", "'3dmm_render_mask'", "]", "=", "list_gpmm_render_mask", "\n", "dict_intermedate_common", "[", "'3dmm_render_tri_id'", "]", "=", "list_gpmm_render_tri_ids", "\n", "dict_intermedate_common", "[", "'3dmm_render_loss_heat'", "]", "=", "list_render_loss_error", "\n", "\n", "\"\"\"\n            ************************************    Identity     ********************************************\n            \"\"\"", "\n", "\n", "list_gpmm_render_id", ",", "list_image_id", ",", "gpmm_render_align", ",", "image_align", "=", "decoder_similar", "(", "self", ".", "opt", ",", "self", ".", "defined_lm_facenet_align", ",", "list_gpmm_render", ",", "list_image", ",", "list_lm2d", ",", "\n", "list_lm2d_gt", ")", "\n", "gpmm_id_loss", ",", "_", "=", "compute_3dmm_id_cos_loss", "(", "list_image_id", ",", "list_gpmm_render_id", ")", "\n", "dict_intermedate_common", "[", "'id_render'", "]", "=", "list_gpmm_render_id", "\n", "dict_intermedate_common", "[", "'id_image'", "]", "=", "list_image_id", "\n", "dict_intermedate_common", "[", "'id_render_align'", "]", "=", "gpmm_render_align", "\n", "dict_intermedate_common", "[", "'id_image_align'", "]", "=", "image_align", "\n", "\n", "\"\"\"\n            ************************************    Depthmap    *********************************************\n            \"\"\"", "\n", "list_gpmm_depthmap", ",", "_", "=", "decoder_depth", "(", "self", ".", "opt", ",", "self", ".", "h_lrgp", ",", "list_gpmm_vertex", ",", "self", ".", "gpmm_frustrum", ",", "list_gpmm_ext", ",", "\n", "list_gpmm_mv", ",", "\n", "list_gpmm_eye", ")", "\n", "dict_intermedate_common", "[", "'3dmm_depthmap'", "]", "=", "list_gpmm_depthmap", "\n", "# dict_intermedate_common['3dmm_depthmap_mask'] = list_gpmm_depthmap_mask", "\n", "# dict_intermedate_common['3dmm_depthmap_min'] = list_gpmm_depthmap_min", "\n", "# dict_intermedate_common['3dmm_depthmap_max'] = list_gpmm_depthmap_max", "\n", "\n", "gpmm_regular_shape_loss", "=", "gpmm_regular_shape_loss", "/", "(", "self", ".", "opt", ".", "num_source", "+", "1", ")", "\n", "gpmm_regular_color_loss", "=", "gpmm_regular_color_loss", "/", "(", "self", ".", "opt", ".", "num_source", "+", "1", ")", "\n", "gpmm_lm_loss", "=", "gpmm_lm_loss", "/", "(", "self", ".", "opt", ".", "num_source", "+", "1", ")", "\n", "gpmm_pixel_loss", "=", "gpmm_pixel_loss", "/", "(", "self", ".", "opt", ".", "num_source", "+", "1", ")", "\n", "gpmm_id_loss", "=", "gpmm_id_loss", "/", "(", "self", ".", "opt", ".", "num_source", "+", "1", ")", "\n", "dict_loss_common", "[", "'reg_shape_loss'", "]", "=", "gpmm_regular_shape_loss", "\n", "dict_loss_common", "[", "'reg_color_loss'", "]", "=", "gpmm_regular_color_loss", "\n", "dict_loss_common", "[", "'lm2d_loss'", "]", "=", "gpmm_lm_loss", "\n", "dict_loss_common", "[", "'render_loss'", "]", "=", "gpmm_pixel_loss", "\n", "dict_loss_common", "[", "'id_loss'", "]", "=", "gpmm_id_loss", "\n", "\n", "loss_common", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "loss_common", "+=", "self", ".", "opt", ".", "gpmm_regular_shape_loss_weight", "*", "gpmm_regular_shape_loss", "\n", "loss_common", "+=", "self", ".", "opt", ".", "gpmm_regular_color_loss_weight", "*", "gpmm_regular_color_loss", "\n", "\n", "if", "self", ".", "opt", ".", "gpmm_lm_loss_weight", ">", "0", ":", "\n", "                ", "loss_common", "+=", "self", ".", "opt", ".", "gpmm_lm_loss_weight", "*", "gpmm_lm_loss", "\n", "", "if", "self", ".", "opt", ".", "gpmm_pixel_loss_weight", ">", "0", ":", "\n", "                ", "loss_common", "+=", "self", ".", "opt", ".", "gpmm_pixel_loss_weight", "*", "gpmm_pixel_loss", "\n", "", "if", "self", ".", "opt", ".", "gpmm_id_loss_weight", ":", "\n", "                ", "loss_common", "+=", "self", ".", "opt", ".", "gpmm_id_loss_weight", "*", "gpmm_id_loss", "\n", "\n", "", "dict_loss_common", "[", "'loss_common'", "]", "=", "loss_common", "\n", "\n", "", "return", "dict_loss_common", ",", "dict_intermedate_common", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_decoderMGC": [[355, 525], ["decoder_multiView.decoder_warppose", "decoder_multiView.decoder_covisible_map", "dict", "dict", "range", "deep_3dmm_loss.compute_pixel_eul_loss_list", "tf.clip_by_value", "deep_3dmm_loss.combine_flag_sgl_mul_loss", "deep_3dmm_loss.compute_ssim_loss_list", "tf.clip_by_value", "deep_3dmm_loss.combine_flag_sgl_mul_loss", "decoder_multiView.decoder_align_depthMap", "deep_3dmm_loss.compute_depthmap_l1_loss_list", "tf.clip_by_value", "deep_3dmm_loss.combine_flag_sgl_mul_loss", "deep_3dmm_loss.compute_match_loss_list", "tf.clip_by_value", "deep_3dmm_loss.combine_flag_sgl_mul_loss", "tf.constant", "list_tarTile_image.append", "list_tarTile_depth.append", "tf.constant", "tf.constant", "tf.constant", "tf.constant", "tf.name_scope", "src_common.geometry.geo_utils.projective_inverse_warp", "list_viewSyn_image.append", "list_viewSyn_depth.append", "list_viewSyn_mask.append", "list_render_mask.append", "list_viewSyn_image_masked.append", "slim.avg_pool2d", "list_viewSyn_ssim_mask.append", "tf.squeeze", "tf.ones_like", "tf.zeros_like", "tf.where", "tf.greater"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.decoder_multiView.decoder_warppose", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.decoder_multiView.decoder_covisible_map", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_pixel_eul_loss_list", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.combine_flag_sgl_mul_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_ssim_loss_list", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.combine_flag_sgl_mul_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.decoder_multiView.decoder_align_depthMap", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_depthmap_l1_loss_list", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.combine_flag_sgl_mul_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.compute_match_loss_list", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_loss.combine_flag_sgl_mul_loss", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.projective_inverse_warp"], ["", "def", "build_decoderMGC", "(", "self", ",", "flag_sgl_mul", ",", "list_image", ",", "list_lm2d_gt", ",", "dict_inter_common", ")", ":", "\n", "        ", "\"\"\"\n        :param list_image:\n        :param list_lm2d_gt:\n        :param dict_intermedate_common:\n        :return:\n        \"\"\"", "\n", "\n", "# input", "\n", "#relative pose from target to source", "\n", "list_rel_poses", "=", "decoder_warppose", "(", "self", ".", "opt", ",", "dict_inter_common", "[", "'pred_6dof_pose'", "]", ")", "\n", "\n", "#", "\n", "list_covisible_map", "=", "decoder_covisible_map", "(", "self", ".", "opt", ",", "self", ".", "h_lrgp", ",", "self", ".", "gpmm_frustrum", ",", "dict_inter_common", ")", "\n", "\n", "# inter", "\n", "list_tarTile_image", "=", "[", "]", "\n", "list_tarTile_depth", "=", "[", "]", "\n", "\n", "list_viewSyn_image", "=", "[", "]", "\n", "list_viewSyn_depth", "=", "[", "]", "\n", "list_viewSyn_mask", "=", "[", "]", "\n", "list_viewSyn_image_masked", "=", "[", "]", "\n", "list_render_mask", "=", "[", "]", "\n", "list_viewSyn_ssim_mask", "=", "[", "]", "\n", "\n", "# output", "\n", "dict_loss_common", "=", "dict", "(", ")", "\n", "dict_intermedate_common", "=", "dict", "(", ")", "\n", "\n", "# Start loop all source view", "\n", "curr_tar_image", "=", "list_image", "[", "0", "]", "\n", "curr_tar_depths", "=", "dict_inter_common", "[", "'3dmm_depthmap'", "]", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "opt", ".", "num_source", ")", ":", "\n", "            ", "list_tarTile_image", ".", "append", "(", "curr_tar_image", ")", "\n", "list_tarTile_depth", ".", "append", "(", "curr_tar_depths", ")", "\n", "# Inverse warp the source image to the target image frame", "\n", "with", "tf", ".", "name_scope", "(", "\"warp\"", ")", ":", "\n", "                ", "curr_src_image", "=", "list_image", "[", "1", "+", "i", "]", "# careful of [tar, src_all]", "\n", "curr_source_depth", "=", "dict_inter_common", "[", "'3dmm_depthmap'", "]", "[", "1", "+", "i", "]", "\n", "warp_pose", "=", "list_rel_poses", "[", "i", "]", "\n", "# view synthetic", "\n", "# curr_src_image = tf.Print(curr_src_image, [tf.reduce_mean(curr_src_image)], message='curr_src_image')", "\n", "# curr_tar_depths = tf.Print(curr_tar_depths, [tf.reduce_mean(curr_tar_depths)], message='curr_tar_depths')", "\n", "# curr_source_depth = tf.Print(curr_source_depth, [tf.reduce_mean(curr_source_depth)], message='curr_source_depth')", "\n", "\n", "curr_viewSyn_image", ",", "curr_viewSyn_depth", ",", "viewSyn_mask", "=", "projective_inverse_warp", "(", "\n", "curr_src_image", ",", "tf", ".", "squeeze", "(", "curr_tar_depths", ",", "axis", "=", "-", "1", ")", ",", "curr_source_depth", ",", "\n", "warp_pose", ",", "self", ".", "intrinsics_single", "[", ":", ",", ":", ",", ":", "]", ",", "is_vec", "=", "True", ")", "\n", "#", "\n", "# curr_viewSyn_image = tf.Print(curr_viewSyn_image,", "\n", "#                            [tf.reduce_sum(curr_viewSyn_image), tf.reduce_sum(curr_tar_depths-852)], message='warp')", "\n", "\n", "#", "\n", "list_viewSyn_image", ".", "append", "(", "curr_viewSyn_image", ")", "\n", "list_viewSyn_depth", ".", "append", "(", "curr_viewSyn_depth", ")", "\n", "\n", "# covisible map", "\n", "view_syn_mask", "=", "viewSyn_mask", "*", "list_covisible_map", "[", "i", "]", "\n", "#view_syn_mask = tf.Print(view_syn_mask, [tf.reduce_sum(view_syn_mask)], message='view_syn_mask')", "\n", "\n", "# cut bg", "\n", "if", "0", ":", "\n", "                    ", "depthRender_min", "=", "dict_inter_common", "[", "'3dmm_depthmap_min'", "]", "[", "1", "+", "i", "]", "\n", "depthRender_max", "=", "dict_inter_common", "[", "'3dmm_depthmap_max'", "]", "[", "1", "+", "i", "]", "\n", "l_one", "=", "tf", ".", "ones_like", "(", "curr_viewSyn_depth", ")", "\n", "l_zero", "=", "tf", ".", "zeros_like", "(", "curr_viewSyn_depth", ")", "\n", "depthValid_mask", "=", "tf", ".", "where", "(", "tf", ".", "greater", "(", "viewSyn_depth", ",", "depthRender_max", ")", ",", "x", "=", "l_zero", ",", "y", "=", "l_one", ")", "\n", "#view_syn_mask = view_syn_mask * depthValid_mask", "\n", "\n", "# mask dict_intermedate_common['3dmm_render_mask']", "\n", "", "list_viewSyn_mask", ".", "append", "(", "view_syn_mask", ")", "\n", "list_render_mask", ".", "append", "(", "dict_inter_common", "[", "'3dmm_render_mask'", "]", "[", "0", "]", ")", "\n", "\n", "curr_viewSyn_image_mask", "=", "curr_viewSyn_image", "*", "view_syn_mask", "# (0, 1)", "\n", "list_viewSyn_image_masked", ".", "append", "(", "curr_viewSyn_image_mask", ")", "\n", "\n", "# 1.pixel", "\n", "ssim_mask", "=", "slim", ".", "avg_pool2d", "(", "view_syn_mask", ",", "3", ",", "1", ",", "'VALID'", ")", "# TODO: Right SSIM", "\n", "list_viewSyn_ssim_mask", ".", "append", "(", "ssim_mask", ")", "\n", "\n", "# 2.depth", "\n", "\n", "# 3.epipolar", "\n", "", "", "dict_intermedate_common", "[", "'list_viewSyn_image'", "]", "=", "list_viewSyn_image", "\n", "dict_intermedate_common", "[", "'list_viewSyn_mask'", "]", "=", "list_viewSyn_mask", "\n", "dict_intermedate_common", "[", "'list_viewSyn_image_masked'", "]", "=", "list_viewSyn_image_masked", "\n", "\n", "\n", "# 1. pixel loss", "\n", "# photo loss", "\n", "list_curr_viewSyn_pixel_error", ",", "list_curr_viewSyn_pixel_error_visual", "=", "compute_pixel_eul_loss_list", "(", "list_viewSyn_image_masked", ",", "list_viewSyn_mask", ",", "list_render_mask", ",", "list_tarTile_image", ")", "\n", "\n", "flag_sgl_mul_curr", "=", "flag_sgl_mul", "\n", "flag_sgl_mul_curr", "=", "tf", ".", "clip_by_value", "(", "flag_sgl_mul_curr", ",", "0.0", ",", "1.0", ")", "\n", "pixel_loss", "=", "combine_flag_sgl_mul_loss", "(", "list_curr_viewSyn_pixel_error", ",", "flag_sgl_mul_curr", ")", "\n", "\n", "dict_intermedate_common", "[", "'list_curr_viewSyn_pixel_error_visual'", "]", "=", "list_curr_viewSyn_pixel_error_visual", "\n", "\n", "# ssim loss", "\n", "list_curr_viewSyn_ssim_error", "=", "compute_ssim_loss_list", "(", "list_viewSyn_image", ",", "list_tarTile_image", ",", "list_viewSyn_ssim_mask", ")", "\n", "\n", "flag_sgl_mul_curr", "=", "flag_sgl_mul", "\n", "flag_sgl_mul_curr", "=", "tf", ".", "clip_by_value", "(", "flag_sgl_mul_curr", ",", "0.0", ",", "1.0", ")", "\n", "ssim_loss", "=", "combine_flag_sgl_mul_loss", "(", "list_curr_viewSyn_ssim_error", ",", "flag_sgl_mul_curr", ")", "\n", "\n", "# 2. depth loss", "\n", "\"\"\"\n        depth: range(0, NAN+)\n        proj_mask: range(0, 1)\n        \"\"\"", "\n", "list_viewSyn_depth_alinged", "=", "decoder_align_depthMap", "(", "self", ".", "opt", ",", "list_tarTile_depth", ",", "list_viewSyn_depth", ",", "list_viewSyn_mask", ")", "\n", "\n", "list_curr_viewSyn_depth_error", ",", "list_curr_viewSyn_depth_visual", "=", "compute_depthmap_l1_loss_list", "(", "list_viewSyn_depth_alinged", ",", "list_viewSyn_mask", ",", "list_tarTile_depth", ")", "# TODO: bug!!!", "\n", "\n", "flag_sgl_mul_curr", "=", "flag_sgl_mul", "\n", "flag_sgl_mul_curr", "=", "tf", ".", "clip_by_value", "(", "flag_sgl_mul_curr", ",", "0.0", ",", "1.0", ")", "\n", "depth_loss", "=", "combine_flag_sgl_mul_loss", "(", "list_curr_viewSyn_depth_error", ",", "flag_sgl_mul_curr", ",", "flag_batch_norm", "=", "False", ")", "\n", "\n", "dict_intermedate_common", "[", "'list_viewSyn_depth_alinged'", "]", "=", "list_viewSyn_depth_alinged", "\n", "dict_intermedate_common", "[", "'list_curr_viewSyn_depth_visual'", "]", "=", "list_curr_viewSyn_depth_visual", "\n", "\n", "# 3. Eipipolar loss (fundamental matrix)", "\n", "list_epiLoss_batch", ",", "list_reprojLoss_batch", ",", "mgc_epi_lines", ",", "mgc_epi_distances", "=", "compute_match_loss_list", "(", "\n", "list_lm2d_gt", ",", "dict_inter_common", "[", "'3dmm_depthmap'", "]", "[", "0", "]", ",", "list_rel_poses", ",", "self", ".", "intrinsics_single", "\n", ")", "\n", "flag_sgl_mul_curr", "=", "flag_sgl_mul", "-", "1", "\n", "flag_sgl_mul_curr", "=", "tf", ".", "clip_by_value", "(", "flag_sgl_mul_curr", ",", "0.0", ",", "1.0", ")", "\n", "epi_loss", "=", "combine_flag_sgl_mul_loss", "(", "list_epiLoss_batch", ",", "flag_sgl_mul_curr", ",", "flag_batch_norm", "=", "False", ")", "\n", "\n", "\n", "dict_intermedate_common", "[", "'mgc_epi_lines'", "]", "=", "mgc_epi_lines", "\n", "dict_intermedate_common", "[", "'mgc_epi_distances'", "]", "=", "mgc_epi_distances", "\n", "\n", "\"\"\"\n        Weighted Loss\n        \"\"\"", "\n", "loss_multiView", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "if", "self", ".", "opt", ".", "photom_weight", ">", "0", ":", "\n", "            ", "loss_multiView", "+=", "self", ".", "opt", ".", "photom_weight", "*", "pixel_loss", "\n", "dict_loss_common", "[", "'pixel_loss'", "]", "=", "pixel_loss", "\n", "", "else", ":", "\n", "            ", "dict_loss_common", "[", "'pixel_loss'", "]", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "ssim_weight", ">", "0", ":", "\n", "            ", "loss_multiView", "+=", "self", ".", "opt", ".", "ssim_weight", "*", "ssim_loss", "\n", "dict_loss_common", "[", "'ssim_loss'", "]", "=", "ssim_loss", "\n", "", "else", ":", "\n", "            ", "dict_loss_common", "[", "'ssim_loss'", "]", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "epipolar_weight", ">", "0", ":", "\n", "            ", "loss_multiView", "+=", "self", ".", "opt", ".", "epipolar_weight", "*", "epi_loss", "\n", "dict_loss_common", "[", "'epi_loss'", "]", "=", "epi_loss", "\n", "", "else", ":", "\n", "            ", "dict_loss_common", "[", "'epi_loss'", "]", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "", "if", "self", ".", "opt", ".", "depth_weight", ">", "0", ":", "\n", "            ", "loss_multiView", "+=", "self", ".", "opt", ".", "depth_weight", "*", "depth_loss", "\n", "dict_loss_common", "[", "'depth_loss'", "]", "=", "depth_loss", "\n", "", "else", ":", "\n", "            ", "dict_loss_common", "[", "'depth_loss'", "]", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "\n", "", "dict_loss_common", "[", "'loss_mgc'", "]", "=", "loss_multiView", "\n", "\n", "# inter", "\n", "dict_intermedate_common", "[", "'list_rel_poses'", "]", "=", "list_rel_poses", "\n", "\n", "return", "dict_loss_common", ",", "dict_intermedate_common", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_train_graph_train_op": [[527, 560], ["tf.name_scope", "print", "tf.get_collection", "tf.control_dependencies", "tf.train.AdamOptimizer", "tf.assign", "tf.trainable_variables", "len", "len", "tf.train.AdamOptimizer.compute_gradients", "tf.reduce_sum", "build_graph.MGC_TRAIN.train_op.append", "var.name.find", "tf.reduce_sum", "tf.train.AdamOptimizer.apply_gradients", "print"], "methods", ["None"], ["", "def", "build_train_graph_train_op", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"train_op\"", ")", ":", "\n", "#print('Global variables:', tf.global_variables())", "\n", "            ", "train_vars", "=", "[", "var", "for", "var", "in", "tf", ".", "trainable_variables", "(", ")", "]", "\n", "#print('Optimized variables:', train_vars)", "\n", "\n", "#print(\"Global variables number: %d\" % (len(tf.global_variables())))", "\n", "print", "(", "\"Optimized variables number: %d\"", "%", "(", "len", "(", "train_vars", ")", ")", ")", "\n", "\"\"\"\n            Clean\n            \"\"\"", "\n", "train_vars", "=", "[", "(", "var", ")", "for", "var", "in", "train_vars", "if", "var", ".", "name", ".", "find", "(", "'InceptionResnetV1'", ")", "==", "-", "1", "]", "\n", "#print(\"Optimized variables number(After clean forward var): %d\" % (len(train_vars)))", "\n", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                ", "optim0", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "1.0", "*", "opt", ".", "learning_rate", ",", "opt", ".", "beta1", ")", "# face+pose: no constrain", "\n", "self", ".", "train_op", "=", "[", "]", "\n", "\n", "if", "len", "(", "train_vars", ")", "!=", "0", ":", "\n", "#self.total_loss = tf.Print(self.total_loss, [self.total_loss], message='self.total_loss', summarize=4)", "\n", "                    ", "self", ".", "grads_and_vars", "=", "optim0", ".", "compute_gradients", "(", "self", ".", "total_loss", ",", "var_list", "=", "train_vars", ")", "\n", "\n", "for", "grad", ",", "var", "in", "self", ".", "grads_and_vars", ":", "\n", "                        ", "if", "grad", "is", "None", ":", "\n", "                            ", "print", "(", "\"Optimized variables grad is None: \"", ",", "var", ")", "\n", "", "", "self", ".", "grads_and_vars", "=", "[", "(", "grad", ",", "var", ")", "for", "grad", ",", "var", "in", "self", ".", "grads_and_vars", "if", "grad", "is", "not", "None", "]", "\n", "sum_grads", "=", "[", "tf", ".", "reduce_sum", "(", "grad", ")", "for", "grad", ",", "var", "in", "self", ".", "grads_and_vars", "]", "\n", "self", ".", "total_grad", "=", "tf", ".", "reduce_sum", "(", "sum_grads", ")", "\n", "self", ".", "train_op", ".", "append", "(", "optim0", ".", "apply_gradients", "(", "self", ".", "grads_and_vars", ")", ")", "\n", "", "self", ".", "incr_global_step", "=", "tf", ".", "assign", "(", "self", ".", "global_step", ",", "self", ".", "global_step", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.collect_summaries": [[562, 696], ["tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "draw_landmark_image", "deprocess_image_series", "deprocess_image_series", "deprocess_gary_image_series", "deprocess_image_series", "concate_image_series", "deprocess_image_series", "concate_image_series", "concate_image_series", "deprocess_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "insert_semi_image_series", "tf.summary.image", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "deprocess_image_series", "deprocess_image_series", "draw_landmark_image", "draw_landmark_image", "draw_landmark_image", "draw_landmark_image", "deprocess_image_series", "deprocess_image_series", "deprocess_gary_image_series", "deprocess_gary_image_series", "deprocess_gary_image_series", "deprocess_gary_image_series", "deprocess_image_series", "deprocess_image_series", "deprocess_image_series", "deprocess_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_image_series", "concate_semi_image_series", "tf.summary.image", "draw_landmark_image", "draw_landmark_image"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.draw_landmark_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_gary_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.insert_semi_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.draw_landmark_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.draw_landmark_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.draw_landmark_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.draw_landmark_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_gary_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_gary_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_gary_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_gary_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.deprocess_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.concate_semi_image_series", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.draw_landmark_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.draw_landmark_image"], ["", "", "", "def", "collect_summaries", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "\n", "# scalar", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"total_loss\"", ",", "self", ".", "total_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"common_loss\"", ",", "self", ".", "common_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"ga_loss\"", ",", "self", ".", "ga_loss", ")", "\n", "# common", "\n", "if", "opt", ".", "gpmm_regular_shape_loss_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"gpmm_regular_shape_loss\"", ",", "self", ".", "gpmm_regular_shape_loss", ")", "\n", "", "if", "opt", ".", "gpmm_regular_color_loss_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"gpmm_regular_color_loss\"", ",", "self", ".", "gpmm_regular_color_loss", ")", "\n", "", "if", "opt", ".", "gpmm_lm_loss_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"gpmm_lm_loss\"", ",", "self", ".", "gpmm_lm_loss", ")", "\n", "", "if", "opt", ".", "gpmm_pixel_loss_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"gpmm_pixel_loss\"", ",", "self", ".", "gpmm_pixel_loss", ")", "\n", "", "if", "opt", ".", "gpmm_id_loss_weight", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"gpmm_id_loss\"", ",", "self", ".", "gpmm_id_loss", ")", "\n", "# multi-view", "\n", "", "if", "opt", ".", "ssim_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"ssim_loss\"", ",", "self", ".", "ssim_loss", ")", "\n", "", "if", "opt", ".", "photom_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"pixel_loss\"", ",", "self", ".", "pixel_loss", ")", "\n", "", "if", "opt", ".", "epipolar_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"epipolar_loss\"", ",", "self", ".", "epipolar_loss", ")", "\n", "", "if", "opt", ".", "depth_weight", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "\"depth_loss\"", ",", "self", ".", "depth_loss", ")", "\n", "\n", "", "if", "1", ":", "\n", "\n", "            ", "\"\"\"\n            image\n            \"\"\"", "\n", "self", ".", "list_img_tar", "=", "deprocess_image_series", "(", "self", ".", "list_tar_image", ")", "\n", "self", ".", "list_img_src", "=", "deprocess_image_series", "(", "self", ".", "list_src_image", ")", "\n", "\n", "\"\"\"\n            image + landmark\n            \"\"\"", "\n", "list_img_lmDraw_tar", "=", "draw_landmark_image", "(", "self", ".", "list_tar_image", ",", "self", ".", "lm2d_tar", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "color", "=", "1", ")", "\n", "list_img_lmDraw_tar", "=", "draw_landmark_image", "(", "list_img_lmDraw_tar", ",", "self", ".", "list_lm2d_gt_tar", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "color", "=", "2", ")", "\n", "\n", "list_img_lmDraw_src", "=", "draw_landmark_image", "(", "self", ".", "list_src_image", ",", "self", ".", "lm2d_src", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "color", "=", "1", ")", "\n", "list_img_lmDraw_src", "=", "draw_landmark_image", "(", "list_img_lmDraw_src", ",", "self", ".", "list_lm2d_gt_src", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "color", "=", "2", ")", "\n", "\n", "\"\"\"\n            render main pose\n            \"\"\"", "\n", "#tf.summary.image('gpmm_render_tar_main', deprocess_image(self.gpmm_render_tar_main[0]))", "\n", "\n", "\"\"\"\n            render derivatives\n            \"\"\"", "\n", "# shade", "\n", "list_shade_tar", "=", "deprocess_image_series", "(", "self", ".", "gpmm_render_shade_tar", ")", "\n", "list_shade_src", "=", "deprocess_image_series", "(", "self", ".", "gpmm_render_shade_src", ")", "\n", "\n", "# mask", "\n", "list_render_mask_tar", "=", "deprocess_gary_image_series", "(", "self", ".", "gpmm_render_mask_tar", ")", "\n", "list_render_mask_src", "=", "deprocess_gary_image_series", "(", "self", ".", "gpmm_render_mask_src", ")", "\n", "\n", "# skin", "\n", "list_skin_tar", "=", "deprocess_gary_image_series", "(", "self", ".", "list_tar_skin", ")", "\n", "list_skin_src", "=", "deprocess_gary_image_series", "(", "self", ".", "list_src_skin", ")", "\n", "\n", "\"\"\"\n            render\n            \"\"\"", "\n", "# tar render and ori image", "\n", "self", ".", "list_render_image_tar", "=", "deprocess_image_series", "(", "self", ".", "gpmm_render_tar", ")", "\n", "self", ".", "list_render_image_src", "=", "deprocess_image_series", "(", "self", ".", "gpmm_render_src", ")", "\n", "\n", "list_render_loss_tar", "=", "deprocess_image_series", "(", "self", ".", "list_render_loss_error_tar", ")", "\n", "list_render_loss_src", "=", "deprocess_image_series", "(", "self", ".", "list_render_loss_error_src", ")", "\n", "\n", "# Render", "\n", "# 1", "\n", "show_img_imgLM_tar", "=", "concate_image_series", "(", "self", ".", "list_img_tar", ",", "list_img_lmDraw_tar", ",", "axis", "=", "1", ")", "\n", "show_img_imgLM_src", "=", "concate_image_series", "(", "self", ".", "list_img_src", ",", "list_img_lmDraw_src", ",", "axis", "=", "1", ")", "\n", "\n", "# 2", "\n", "show_light_mask_tar", "=", "concate_image_series", "(", "list_skin_tar", ",", "list_shade_tar", ",", "axis", "=", "1", ")", "\n", "show_light_mask_src", "=", "concate_image_series", "(", "list_skin_src", ",", "list_shade_src", ",", "axis", "=", "1", ")", "\n", "\n", "# fusion", "\n", "render_12_tar", "=", "concate_image_series", "(", "show_img_imgLM_tar", ",", "self", ".", "list_render_image_tar", ",", "axis", "=", "1", ")", "\n", "render_23_tar", "=", "concate_image_series", "(", "show_light_mask_tar", ",", "list_render_loss_tar", ",", "axis", "=", "1", ")", "\n", "render_123_tar", "=", "concate_image_series", "(", "render_12_tar", ",", "render_23_tar", ",", "axis", "=", "2", ")", "\n", "\n", "render_12_src", "=", "concate_image_series", "(", "show_img_imgLM_src", ",", "self", ".", "list_render_image_src", ",", "axis", "=", "1", ")", "\n", "render_23_src", "=", "concate_image_series", "(", "show_light_mask_src", ",", "list_render_loss_src", ",", "axis", "=", "1", ")", "\n", "render_123_src", "=", "concate_image_series", "(", "render_12_src", ",", "render_23_src", ",", "axis", "=", "2", ")", "\n", "\n", "self", ".", "show_gpmm_render_all", "=", "concate_semi_image_series", "(", "render_123_tar", ",", "render_123_src", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'gpmm_render_all'", ",", "self", ".", "show_gpmm_render_all", ")", "\n", "\n", "\"\"\"\n            epipolar:\n            image + consistance\n            \"\"\"", "\n", "self", ".", "list_img_lmConsistDraw_tar", "=", "draw_landmark_image", "(", "self", ".", "list_tar_image", ",", "self", ".", "gpmm_consist_pixel_tar", ",", "opt", ",", "color", "=", "1", ")", "\n", "self", ".", "list_img_lmConsistDraw_src", "=", "draw_landmark_image", "(", "self", ".", "list_src_image", ",", "self", ".", "gpmm_consist_pixel_src", ",", "opt", ",", "color", "=", "1", ")", "\n", "\n", "# epipolar", "\n", "", "list_img_lmConsistDraw", "=", "draw_landmark_image", "(", "self", ".", "list_image", ",", "self", ".", "list_lm2d_gt", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "color", "=", "1", ")", "\n", "\n", "# photematric", "\n", "list_geo_proj_img_src", "=", "deprocess_image_series", "(", "self", ".", "dict_inter_mgc", "[", "'list_viewSyn_image'", "]", ")", "\n", "list_geo_proj_img_fore_src", "=", "deprocess_image_series", "(", "self", ".", "dict_inter_mgc", "[", "'list_viewSyn_image_masked'", "]", ")", "\n", "\n", "list_geo_proj_mask_src", "=", "deprocess_gary_image_series", "(", "self", ".", "dict_inter_mgc", "[", "'list_viewSyn_mask'", "]", ")", "\n", "list_geo_proj_img_error_src", "=", "deprocess_image_series", "(", "self", ".", "dict_inter_mgc", "[", "'list_curr_viewSyn_pixel_error_visual'", "]", ")", "\n", "\n", "# 1", "\n", "show_geo_proj_img_tar", "=", "concate_image_series", "(", "self", ".", "list_tar_image", ",", "self", ".", "list_tar_image", ",", "axis", "=", "1", ")", "\n", "show_geo_proj_img_tar", "=", "deprocess_image_series", "(", "show_geo_proj_img_tar", ")", "\n", "show_geo_proj_img_src", "=", "concate_image_series", "(", "list_geo_proj_img_src", ",", "list_geo_proj_img_fore_src", ",", "axis", "=", "1", ")", "\n", "\n", "show_geo_proj_img_me_tar", "=", "concate_image_series", "(", "self", ".", "list_tar_image", ",", "self", ".", "list_tar_image", ",", "axis", "=", "1", ")", "\n", "show_geo_proj_img_me_tar", "=", "deprocess_image_series", "(", "show_geo_proj_img_me_tar", ")", "\n", "show_geo_proj_img_me_src", "=", "concate_image_series", "(", "list_geo_proj_mask_src", ",", "list_geo_proj_img_error_src", ",", "axis", "=", "1", ")", "\n", "\n", "# 2", "\n", "show_geo_proj_tar", "=", "concate_image_series", "(", "show_geo_proj_img_tar", ",", "show_geo_proj_img_me_tar", ",", "axis", "=", "1", ")", "\n", "show_geo_proj_src", "=", "concate_image_series", "(", "show_geo_proj_img_src", ",", "show_geo_proj_img_me_src", ",", "axis", "=", "1", ")", "\n", "\n", "# 3", "\n", "show_geo_epi_tar", "=", "concate_image_series", "(", "list_img_lmConsistDraw", "[", "0", ":", "1", "]", ",", "show_geo_proj_tar", ",", "axis", "=", "1", ")", "\n", "show_geo_epi_src", "=", "concate_image_series", "(", "list_img_lmConsistDraw", "[", "1", ":", "]", ",", "show_geo_proj_src", ",", "axis", "=", "1", ")", "\n", "\n", "# fusion", "\n", "self", ".", "show_proj_all", "=", "insert_semi_image_series", "(", "show_geo_epi_tar", ",", "show_geo_epi_src", ")", "\n", "\n", "tf", ".", "summary", ".", "image", "(", "\"show_warp_proj_all\"", ",", "self", ".", "show_proj_all", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.train_pre": [[698, 736], ["tf.global_variables", "tf.train.Saver", "tf.train.Saver", "tf.global_variables", "slim.get_model_variables", "print", "slim.assign_from_checkpoint_fn", "tf.model_variables", "print", "tf.train.Saver", "len", "len", "var.op.name.find", "var.op.name.find", "var.op.name.find", "tf.model_variables.append"], "methods", ["None"], ["", "def", "train_pre", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "\"\"\"\n        1.continue training\n        2.pretrain model\n        \"\"\"", "\n", "restore_vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "self", ".", "restorer", "=", "tf", ".", "train", ".", "Saver", "(", "restore_vars", ",", "max_to_keep", "=", "None", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "global_variables", "(", ")", ",", "max_to_keep", "=", "None", ")", "\n", "\n", "# pretrain model", "\n", "if", "opt", ".", "ckpt_face_pretrain", "is", "not", "None", ":", "\n", "            ", "face_variables_to_restore", "=", "[", "]", "\n", "\n", "\n", "face_variables_to_restore_all", "=", "slim", ".", "get_model_variables", "(", "\"resnet_v1_50\"", ")", "\n", "for", "var", "in", "face_variables_to_restore_all", ":", "\n", "                ", "if", "var", ".", "op", ".", "name", ".", "find", "(", "'logits'", ")", "!=", "-", "1", "or", "var", ".", "op", ".", "name", ".", "find", "(", "'predictions'", ")", "!=", "-", "1", ":", "\n", "                    ", "pass", "\n", "", "elif", "var", ".", "op", ".", "name", ".", "find", "(", "'block1_final'", ")", "!=", "-", "1", ":", "\n", "                    ", "pass", "\n", "", "else", ":", "\n", "                    ", "face_variables_to_restore", ".", "append", "(", "var", ")", "\n", "", "", "print", "(", "\"Face network pretrain, number: %d\"", "%", "(", "len", "(", "face_variables_to_restore", ")", ")", ")", "\n", "self", ".", "face_restorer", "=", "slim", ".", "assign_from_checkpoint_fn", "(", "opt", ".", "ckpt_face_pretrain", ",", "face_variables_to_restore", ",", "True", ")", "\n", "\n", "", "if", "opt", ".", "ckpt_face_id_pretrain", "is", "not", "None", ":", "\n", "# 1", "\n", "# face_variables_to_restore = slim.get_model_variables(\"InceptionResnetV1\")", "\n", "# print(\"ID network pretrain, number: %d\" % (len(face_variables_to_restore)))", "\n", "# self.face_id_restorer = slim.assign_from_checkpoint_fn(opt.ckpt_face_id_pretrain, face_variables_to_restore, True)", "\n", "\n", "# 2", "\n", "            ", "face_variables_to_restore", "=", "tf", ".", "model_variables", "(", "\"InceptionResnetV1\"", ")", "\n", "print", "(", "\"Identity variables number: %d\"", "%", "(", "len", "(", "face_variables_to_restore", ")", ")", ")", "\n", "#saver = tf_render.train.Saver([var for var in test_var])", "\n", "self", ".", "face_id_restorer", "=", "tf", ".", "train", ".", "Saver", "(", "face_variables_to_restore", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.train": [[738, 889], ["build_graph.MGC_TRAIN.build_train_graph_dataLoader", "build_graph.MGC_TRAIN.build_train_graph", "build_graph.MGC_TRAIN.collect_summaries", "build_graph.MGC_TRAIN.train_pre", "tf.train.Supervisor", "tf.ConfigProto", "tf.name_scope", "tf.reduce_sum", "tf.train.Supervisor.managed_session", "print", "time.time", "sess.graph.finalize", "range", "sess.run", "print", "build_graph.MGC_TRAIN.restorer.restore", "os.path.split", "build_graph.MGC_TRAIN.face_id_restorer.restore", "sess.run", "tf.reduce_prod", "tf.train.latest_checkpoint", "[].split", "int", "build_graph.MGC_TRAIN.face_restorer", "data_loader.format_file_list", "data_loader.init_data_pipeline", "print", "tf.train.Supervisor.summary_writer.add_summary", "math.ceil", "print", "print", "print", "print", "print", "print", "time.time", "build_graph.MGC_TRAIN.save", "tf.shape", "tf.trainable_variables", "name_ckpt.split", "time.time"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_train_graph_dataLoader", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_train_graph", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.collect_summaries", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.train_pre", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.face_io.format_file_list", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.data.data_loader_semi_unsupervised_skin.DataLoader.init_data_pipeline", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.save"], ["", "", "def", "train", "(", "self", ",", "opt", ")", ":", "\n", "# FLAGS", "\n", "        ", "assert", "opt", ".", "num_source", "==", "opt", ".", "seq_length", "-", "1", "\n", "\"\"\"\n        Build Graph\n        \"\"\"", "\n", "# all the data directly stored in the self.Graph", "\n", "data_loader", ",", "batch_sample", "=", "self", ".", "build_train_graph_dataLoader", "(", ")", "\n", "#with tf.device('/cpu:0'):", "\n", "self", ".", "build_train_graph", "(", ")", "\n", "\n", "#", "\n", "self", ".", "collect_summaries", "(", ")", "\n", "\n", "#", "\n", "with", "tf", ".", "name_scope", "(", "\"parameter_count\"", ")", ":", "\n", "            ", "parameter_count", "=", "tf", ".", "reduce_sum", "(", "[", "tf", ".", "reduce_prod", "(", "tf", ".", "shape", "(", "v", ")", ")", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", "]", ")", "\n", "\n", "# model", "\n", "", "self", ".", "train_pre", "(", "opt", ")", "\n", "\n", "\"\"\"\n        Start Training\n        \"\"\"", "\n", "# Initialize variables", "\n", "sv", "=", "tf", ".", "train", ".", "Supervisor", "(", "logdir", "=", "opt", ".", "checkpoint_dir", ",", "\n", "save_summaries_secs", "=", "0", ",", "\n", "saver", "=", "None", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "config", ".", "gpu_options", ".", "allocator_type", "=", "'BFC'", "# A \"Best-fit with coalescing\" algorithm, simplified from a version of dlmalloc.", "\n", "#config.gpu_options.per_process_gpu_memory_fraction = 0.8", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "sv", ".", "managed_session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "            ", "print", "(", "\"Parameter count =\"", ",", "sess", ".", "run", "(", "parameter_count", ")", ")", "\n", "\n", "\"\"\"\n            Functional Define\n            \"\"\"", "\n", "# continue train", "\n", "if", "opt", ".", "continue_train", ":", "\n", "                ", "if", "opt", ".", "init_ckpt_file", "is", "None", ":", "\n", "                    ", "checkpoint", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "opt", ".", "checkpoint_dir", ")", "\n", "", "else", ":", "\n", "                    ", "checkpoint", "=", "opt", ".", "init_ckpt_file", "\n", "", "print", "(", "\"Resume training from previous checkpoint: %s\"", "%", "checkpoint", ")", "\n", "self", ".", "restorer", ".", "restore", "(", "sess", ",", "checkpoint", ")", "\n", "#", "\n", "dic_ckpt", ",", "name_ckpt", "=", "os", ".", "path", ".", "split", "(", "checkpoint", ")", "\n", "gs", "=", "name_ckpt", ".", "split", "(", "'-'", ")", "[", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "#", "\n", "# self.global_step = tf.Variable(0, name='global_step', trainable=False)", "\n", "step_start", "=", "int", "(", "gs", ")", "+", "1", "\n", "", "else", ":", "\n", "# pretrain model", "\n", "                ", "if", "opt", ".", "ckpt_face_pretrain", "is", "not", "None", ":", "\n", "                    ", "self", ".", "face_restorer", "(", "sess", ")", "\n", "", "step_start", "=", "0", "+", "1", "\n", "\n", "", "if", "opt", ".", "ckpt_face_id_pretrain", "is", "not", "None", ":", "\n", "                ", "self", ".", "face_id_restorer", ".", "restore", "(", "sess", ",", "opt", ".", "ckpt_face_id_pretrain", ")", "\n", "\n", "# init global", "\n", "#sess.run(tf_render.global_variables_initializer())", "\n", "\n", "", "\"\"\"\n            Loop Start\n            \"\"\"", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# \"\"\"", "\n", "# Data init", "\n", "# \"\"\"", "\n", "sess", ".", "graph", ".", "finalize", "(", ")", "\n", "for", "step", "in", "range", "(", "step_start", ",", "opt", ".", "max_steps", "+", "1", ")", ":", "\n", "                ", "\"\"\"\n                Data init\n                \"\"\"", "\n", "if", "step", "==", "1", "or", "(", "opt", ".", "dataset_name_list", "==", "'train'", "and", "step", "%", "self", ".", "steps_per_epoch", "==", "0", ")", "or", "(", "opt", ".", "continue_train", "and", "step", "==", "step_start", ")", ":", "\n", "                    ", "global_all_file_list", "=", "data_loader", ".", "format_file_list", "(", "opt", ".", "dataset_dir", ",", "opt", ".", "dataset_name_list", ")", "\n", "self", ".", "steps_per_epoch", "=", "data_loader", ".", "steps_per_epoch", "# Step count", "\n", "data_loader", ".", "init_data_pipeline", "(", "sess", ",", "batch_sample", ",", "global_all_file_list", ")", "\n", "print", "(", "\"Update dataloader list: (step %d in all %d)\"", "%", "(", "step", ",", "self", ".", "steps_per_epoch", ")", ")", "\n", "\n", "", "\"\"\"\n                Define fetch\n                \"\"\"", "\n", "fetches", "=", "{", "\n", "\"total_loss\"", ":", "self", ".", "total_loss", ",", "\n", "#\"total_grad\": self.total_grad,", "\n", "\"train\"", ":", "self", ".", "train_op", ",", "\n", "\"global_step\"", ":", "self", ".", "global_step", ",", "\n", "\"incr_global_step\"", ":", "self", ".", "incr_global_step", "\n", "}", "\n", "if", "step", "%", "opt", ".", "summary_freq", "==", "0", ":", "\n", "                    ", "fetches", "[", "\"ga_loss\"", "]", "=", "self", ".", "ga_loss", "\n", "fetches", "[", "\"pixel_loss\"", "]", "=", "self", ".", "pixel_loss", "\n", "fetches", "[", "\"ssim_loss\"", "]", "=", "self", ".", "ssim_loss", "\n", "fetches", "[", "\"depth_loss\"", "]", "=", "self", ".", "depth_loss", "\n", "fetches", "[", "\"epipolar_loss\"", "]", "=", "self", ".", "epipolar_loss", "\n", "\n", "fetches", "[", "\"gpmm_pixel_loss\"", "]", "=", "self", ".", "gpmm_pixel_loss", "\n", "fetches", "[", "\"gpmm_lm_loss\"", "]", "=", "self", ".", "gpmm_lm_loss", "\n", "fetches", "[", "\"gpmm_id_loss\"", "]", "=", "self", ".", "gpmm_id_loss", "\n", "fetches", "[", "\"gpmm_reg_shape_loss\"", "]", "=", "self", ".", "gpmm_regular_shape_loss", "\n", "fetches", "[", "\"gpmm_reg_color_loss\"", "]", "=", "self", ".", "gpmm_regular_color_loss", "\n", "\n", "fetches", "[", "\"summary\"", "]", "=", "sv", ".", "summary_op", "\n", "\n", "", "\"\"\"\n                *********************************************   Start Trainning   *********************************************\n                \"\"\"", "\n", "results", "=", "sess", ".", "run", "(", "fetches", ")", "\n", "gs", "=", "results", "[", "\"global_step\"", "]", "\n", "\n", "if", "step", "%", "opt", ".", "summary_freq", "==", "0", ":", "\n", "                    ", "sv", ".", "summary_writer", ".", "add_summary", "(", "results", "[", "\"summary\"", "]", ",", "gs", ")", "\n", "train_epoch", "=", "math", ".", "ceil", "(", "gs", "/", "self", ".", "steps_per_epoch", ")", "\n", "train_step", "=", "gs", "-", "(", "train_epoch", "-", "1", ")", "*", "self", ".", "steps_per_epoch", "\n", "print", "(", "\"Epoch %2d: %5d/%5d (time: %4.4f), Step %d:\"", "\n", "%", "(", "train_epoch", ",", "train_step", ",", "gs", ",", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "opt", ".", "summary_freq", ",", "step", ")", ")", "\n", "\n", "print", "(", "\"total: [%.4f]\"", "%", "(", "results", "[", "\"total_loss\"", "]", ")", ")", "\n", "\n", "print", "(", "\"ga/pixel/ssim/depth/epipolar loss: [%.4f/%.4f/%.4f/%.4f/%.4f]\"", "%", "(", "\n", "results", "[", "\"ga_loss\"", "]", ",", "results", "[", "\"pixel_loss\"", "]", ",", "results", "[", "\"ssim_loss\"", "]", ",", "results", "[", "\"depth_loss\"", "]", ",", "results", "[", "\"epipolar_loss\"", "]", ")", ")", "\n", "\n", "print", "(", "\"(weight)ga/pixel/ssim/depth/epipolar loss: [%.4f/%.4f/%.4f/%.4f/%.4f]\"", "%", "(", "\n", "results", "[", "\"ga_loss\"", "]", "*", "opt", ".", "MULTIVIEW_weight", ",", "\n", "results", "[", "\"pixel_loss\"", "]", "*", "(", "1", "-", "opt", ".", "ssim_weight", ")", ",", "\n", "results", "[", "\"ssim_loss\"", "]", "*", "opt", ".", "ssim_weight", ",", "\n", "results", "[", "\"depth_loss\"", "]", "*", "opt", ".", "depth_weight", ",", "\n", "results", "[", "\"epipolar_loss\"", "]", "*", "opt", ".", "epipolar_weight", ")", "\n", ")", "\n", "\n", "# 3dmm loss", "\n", "print", "(", "\"mm_pixel/mm_lm/mm_id/mm_reg_s/mm_reg_c loss: [%.4f/%.4f/%.4f/%.4f/%.4f]\"", "%", "(", "\n", "results", "[", "\"gpmm_pixel_loss\"", "]", ",", "results", "[", "\"gpmm_lm_loss\"", "]", ",", "results", "[", "\"gpmm_id_loss\"", "]", ",", "\n", "results", "[", "\"gpmm_reg_shape_loss\"", "]", ",", "results", "[", "\"gpmm_reg_color_loss\"", "]", ")", ")", "\n", "\n", "print", "(", "\"(weight)mm_pixel/mm_lm/mm_id/mm_reg_s/mm_reg_c loss: [%.4f/%.4f/%.4f/%.4f/%.4f]\\n\"", "%", "(", "\n", "results", "[", "\"gpmm_pixel_loss\"", "]", "*", "opt", ".", "gpmm_pixel_loss_weight", ",", "\n", "results", "[", "\"gpmm_lm_loss\"", "]", "*", "opt", ".", "gpmm_lm_loss_weight", ",", "\n", "results", "[", "\"gpmm_id_loss\"", "]", "*", "opt", ".", "gpmm_id_loss_weight", ",", "\n", "results", "[", "\"gpmm_reg_shape_loss\"", "]", "*", "opt", ".", "gpmm_regular_shape_loss_weight", ",", "\n", "results", "[", "\"gpmm_reg_color_loss\"", "]", "*", "opt", ".", "gpmm_regular_color_loss_weight", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "", "\"\"\"\n                Save model\n                \"\"\"", "\n", "if", "gs", "%", "opt", ".", "save_freq", "==", "0", "and", "step", ">=", "opt", ".", "min_steps", ":", "\n", "                    ", "self", ".", "save", "(", "sess", ",", "opt", ".", "checkpoint_dir", ",", "gs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.save": [[891, 895], ["print", "build_graph.MGC_TRAIN.saver.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.save"], ["", "", "", "", "def", "save", "(", "self", ",", "sess", ",", "checkpoint_dir", ",", "step", ")", ":", "\n", "        ", "model_name", "=", "'model'", "\n", "print", "(", "\" [*] Saving checkpoint step %d to %s...\"", "%", "(", "step", ",", "checkpoint_dir", ")", ")", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "model_name", ")", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.set_constant_test": [[899, 916], ["build_graph.MGC_TRAIN.set_constant_node", "tf.constant", "tf.tile", "tf.constant", "tf.tile", "tf.stack", "tf.constant", "tf.tile"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.set_constant_node"], ["def", "set_constant_test", "(", "self", ")", ":", "\n", "# cam", "\n", "        ", "self", ".", "set_constant_node", "(", ")", "\n", "\n", "# multi pose", "\n", "defined_pose_left", "=", "tf", ".", "constant", "(", "[", "-", "0.000000", ",", "-", "0.392699", ",", "-", "3.141593", ",", "37.504993", ",", "9.1053238", ",", "4994.3359", "]", ",", "shape", "=", "[", "1", ",", "6", "]", ")", "\n", "self", ".", "defined_pose_left", "=", "tf", ".", "tile", "(", "defined_pose_left", ",", "multiples", "=", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "defined_pose_right", "=", "tf", ".", "constant", "(", "[", "-", "0.000000", ",", "0.392699", ",", "-", "3.141593", ",", "-", "37.341232", ",", "9.1053238", ",", "4994.3359", "]", ",", "shape", "=", "[", "1", ",", "6", "]", ")", "\n", "self", ".", "defined_pose_right", "=", "tf", ".", "tile", "(", "defined_pose_right", ",", "multiples", "=", "[", "self", ".", "batch_size", ",", "1", "]", ")", "\n", "\n", "self", ".", "define_pose", "=", "tf", ".", "stack", "(", "[", "self", ".", "defined_pose_left", ",", "self", ".", "defined_pose_main", ",", "self", ".", "defined_pose_right", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# print color", "\n", "gpmm_vertexColor_gary", "=", "tf", ".", "constant", "(", "[", "0.7529", ",", "0.7529", ",", "0.7529", "]", ",", "shape", "=", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "#gpmm_vertexColor_gary = tf.constant([0.5, 0.5, 0.5], shape=[1, 1, 3])", "\n", "gpmm_vertexColor_gary", "=", "tf", ".", "tile", "(", "gpmm_vertexColor_gary", ",", "[", "self", ".", "batch_size", ",", "self", ".", "h_lrgp", ".", "h_curr", ".", "point3d_mean_np", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "\n", "self", ".", "list_vertexColor_gary", "=", "[", "gpmm_vertexColor_gary", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_test_graph": [[918, 950], ["tf.placeholder", "preprocess_image", "build_graph.MGC_TRAIN.set_constant_test", "deep_3dmm_decoder.pred_encoder_coeff_light", "build_graph.MGC_TRAIN.build_decoderCommon", "deep_3dmm_decoder.decoder_colorMesh_test", "build_graph.MGC_TRAIN.build_testVisual_graph"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.common.visual_helper.preprocess_image", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.set_constant_test", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.pred_encoder_coeff_light", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_decoderCommon", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_colorMesh_test", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_testVisual_graph"], ["", "def", "build_test_graph", "(", "self", ",", "opt", ",", "img_height", ",", "img_width", ",", "batch_size", "=", "1", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "\n", "self", ".", "img_height", "=", "img_height", "\n", "self", ".", "img_width", "=", "img_width", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "rank", "=", "self", ".", "opt", ".", "gpmm_rank", "\n", "\n", "# start", "\n", "input_uint8", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "[", "self", ".", "batch_size", ",", "self", ".", "img_height", ",", "self", ".", "img_width", ",", "3", "]", ",", "name", "=", "'pl_input'", ")", "\n", "input_float", "=", "preprocess_image", "(", "input_uint8", ")", "\n", "self", ".", "list_input_float", "=", "[", "input_float", "]", "\n", "\n", "# setting", "\n", "self", ".", "set_constant_test", "(", ")", "\n", "\n", "# single view", "\n", "list_coeffALL", "=", "pred_encoder_coeff_light", "(", "self", ".", "opt", ",", "self", ".", "defined_pose_main", ",", "self", ".", "list_input_float", ",", "is_training", "=", "False", ")", "\n", "\n", "dict_loss_common", ",", "dict_intermedate_common", "=", "self", ".", "build_decoderCommon", "(", "list_coeffALL", ",", "self", ".", "list_input_float", ")", "\n", "self", ".", "dict_inter_comm", "=", "dict_intermedate_common", "\n", "self", ".", "dict_loss_common", "=", "dict_loss_common", "\n", "\n", "# multi-level", "\n", "self", ".", "list_vertex", ",", "self", ".", "list_vertexNormal", ",", "self", ".", "list_vertexColor", ",", "self", ".", "list_vertexShade", ",", "self", ".", "list_vertexColorOri", "=", "decoder_colorMesh_test", "(", "self", ".", "h_lrgp", ",", "self", ".", "dict_inter_comm", ",", "exp", "=", "True", ")", "\n", "\n", "# visual", "\n", "if", "opt", ".", "flag_visual", ":", "\n", "            ", "self", ".", "build_testVisual_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.build_testVisual_graph": [[952, 1068], ["range", "len", "range", "build_graph.MGC_TRAIN.gpmm_render_mask.append", "build_graph.MGC_TRAIN.overlay_255.append", "build_graph.MGC_TRAIN.overlayTex_255.append", "build_graph.MGC_TRAIN.overlayLight_255.append", "deep_3dmm_decoder.decoder_renderColorMesh_gary", "deep_3dmm_decoder.gpmm_face_replace", "tf.clip_by_value", "tf.image.convert_image_dtype", "build_graph.MGC_TRAIN.overlayGeo_255.append", "len", "deep_3dmm_decoder.decoder_renderColorMesh", "deep_3dmm_decoder.gpmm_face_replace", "tf.clip_by_value", "tf.image.convert_image_dtype", "overlay_single.append", "build_train_graph_3dmm_camera", "range", "build_graph.MGC_TRAIN.overlayMain_255.append", "build_graph.MGC_TRAIN.overlayTexMain_255.append", "build_graph.MGC_TRAIN.overlayLightMain_255.append", "deep_3dmm_decoder.decoder_renderColorMesh_gary", "tf.clip_by_value", "tf.image.convert_image_dtype", "build_graph.MGC_TRAIN.overlayGeoMain_255.append", "range", "build_graph.MGC_TRAIN.apper_mulPose_255.append", "len", "deep_3dmm_decoder.decoder_renderColorMesh", "tf.clip_by_value", "tf.image.convert_image_dtype", "overlay_single.append", "build_train_graph_3dmm_camera", "deep_3dmm_decoder.decoder_renderColorMesh", "tf.clip_by_value", "tf.image.convert_image_dtype", "tf.concat", "tf.image.convert_image_dtype"], "methods", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh_gary", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_face_replace", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_face_replace", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.build_train_graph_3dmm_camera", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh_gary", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.camera_distribute.camera_utils.build_train_graph_3dmm_camera", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.decoder_renderColorMesh"], ["", "", "def", "build_testVisual_graph", "(", "self", ")", ":", "\n", "        ", "opt", "=", "self", ".", "opt", "\n", "self", ".", "gpmm_render_mask", "=", "[", "]", "\n", "\n", "self", ".", "overlay_255", "=", "[", "]", "\n", "self", ".", "overlayTex_255", "=", "[", "]", "\n", "self", ".", "overlayLight_255", "=", "[", "]", "\n", "\n", "self", ".", "overlayGeo_255", "=", "[", "]", "\n", "self", ".", "overlayMain_255", "=", "[", "]", "\n", "self", ".", "overlayTexMain_255", "=", "[", "]", "\n", "self", ".", "overlayLightMain_255", "=", "[", "]", "\n", "\n", "self", ".", "overlayGeoMain_255", "=", "[", "]", "\n", "self", ".", "apper_mulPose_255", "=", "[", "]", "\n", "\n", "for", "v", "in", "range", "(", "len", "(", "self", ".", "list_vertex", ")", ")", ":", "\n", "            ", "\"\"\"\n            0. single visual: overlay(color + texture + geometry + illumination)\n            \"\"\"", "\n", "color_overlay_single", "=", "[", "self", ".", "list_vertexColor", "[", "0", "]", ",", "\n", "self", ".", "list_vertexColorOri", "[", "0", "]", ",", "\n", "self", ".", "list_vertexShade", "[", "0", "]", "]", "\n", "overlay_single", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "color_overlay_single", ")", ")", ":", "\n", "# render", "\n", "                ", "texture_color", "=", "color_overlay_single", "[", "i", "]", "\n", "\n", "gpmm_render", ",", "gpmm_render_mask_v", ",", "_", "=", "decoder_renderColorMesh", "(", "\n", "opt", ",", "self", ".", "h_lrgp", ",", "self", ".", "list_vertex", "[", "0", "]", ",", "self", ".", "list_vertexNormal", "[", "0", "]", ",", "texture_color", ",", "\n", "self", ".", "gpmm_frustrum", ",", "self", ".", "dict_inter_comm", "[", "'pred_cam_mv'", "]", "[", "v", "]", ",", "self", ".", "dict_inter_comm", "[", "'pred_cam_eye'", "]", "[", "v", "]", ",", "fore", "=", "opt", ".", "flag_fore", ",", "tone", "=", "False", "\n", ")", "\n", "\n", "gpmm_render", "=", "gpmm_face_replace", "(", "self", ".", "list_input_float", "[", "v", "]", ",", "gpmm_render", ",", "gpmm_render_mask_v", ")", "\n", "gpmm_render", "=", "tf", ".", "clip_by_value", "(", "gpmm_render", ",", "0.0", ",", "1.0", ")", "\n", "#gpmm_render = tf.Print(gpmm_render, [gpmm_render], message='gpmm_render')", "\n", "#", "\n", "gpmm_render_visual", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "gpmm_render", "[", "0", "]", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "overlay_single", ".", "append", "(", "gpmm_render_visual", ")", "\n", "#", "\n", "", "self", ".", "gpmm_render_mask", ".", "append", "(", "gpmm_render_mask_v", "[", "0", "]", ")", "\n", "\n", "self", ".", "overlay_255", ".", "append", "(", "overlay_single", "[", "0", "]", ")", "\n", "self", ".", "overlayTex_255", ".", "append", "(", "overlay_single", "[", "1", "]", ")", "\n", "self", ".", "overlayLight_255", ".", "append", "(", "overlay_single", "[", "2", "]", ")", "\n", "\n", "\n", "# single visual geo", "\n", "overlayGeo", ",", "_", ",", "_", "=", "decoder_renderColorMesh_gary", "(", "\n", "opt", ",", "self", ".", "h_lrgp", ",", "self", ".", "list_vertex", "[", "0", "]", ",", "self", ".", "list_vertexNormal", "[", "0", "]", ",", "self", ".", "list_vertexColor_gary", ",", "\n", "self", ".", "gpmm_frustrum", ",", "self", ".", "dict_inter_comm", "[", "'pred_cam_mv'", "]", "[", "v", "]", ",", "self", ".", "dict_inter_comm", "[", "'pred_cam_eye'", "]", "[", "v", "]", ",", "fore", "=", "opt", ".", "flag_fore", ",", "tone", "=", "False", ",", "background", "=", "-", "1", "\n", ")", "\n", "overlayGeo", "=", "gpmm_face_replace", "(", "self", ".", "list_input_float", "[", "v", "]", ",", "overlayGeo", ",", "self", ".", "gpmm_render_mask", "[", "v", "]", ")", "\n", "overlayGeo", "=", "tf", ".", "clip_by_value", "(", "overlayGeo", ",", "0.0", ",", "1.0", ")", "\n", "overlayGeo_255", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "overlayGeo", "[", "0", "]", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "self", ".", "overlayGeo_255", ".", "append", "(", "overlayGeo_255", ")", "\n", "\n", "\"\"\"\n            1. single visual: main(color + texture + geometry + illumination)\n            \"\"\"", "\n", "if", "v", "==", "0", ":", "\n", "                ", "gpmm_tar_extMain", ",", "gpmm_tar_projMain", ",", "gpmm_tar_mvMain", ",", "gpmm_tar_eyeMain", "=", "build_train_graph_3dmm_camera", "(", "self", ".", "intrinsics_single", ",", "self", ".", "define_pose", "[", "1", "]", ")", "\n", "\n", "overlay_single", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "color_overlay_single", ")", ")", ":", "\n", "# render", "\n", "                    ", "texture_color", "=", "color_overlay_single", "[", "i", "]", "\n", "\n", "gpmm_render", ",", "gpmm_render_mask_v", ",", "_", "=", "decoder_renderColorMesh", "(", "\n", "opt", ",", "self", ".", "h_lrgp", ",", "self", ".", "list_vertex", "[", "0", "]", ",", "self", ".", "list_vertexNormal", "[", "0", "]", ",", "texture_color", ",", "\n", "self", ".", "gpmm_frustrum", ",", "gpmm_tar_mvMain", ",", "gpmm_tar_eyeMain", ",", "fore", "=", "opt", ".", "flag_fore", ",", "tone", "=", "False", "\n", ")", "\n", "\n", "gpmm_render", "=", "tf", ".", "clip_by_value", "(", "gpmm_render", ",", "0.0", ",", "1.0", ")", "\n", "\n", "gpmm_render_visual", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "gpmm_render", "[", "0", "]", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "overlay_single", ".", "append", "(", "gpmm_render_visual", ")", "\n", "\n", "", "self", ".", "overlayMain_255", ".", "append", "(", "overlay_single", "[", "0", "]", ")", "\n", "self", ".", "overlayTexMain_255", ".", "append", "(", "overlay_single", "[", "1", "]", ")", "\n", "self", ".", "overlayLightMain_255", ".", "append", "(", "overlay_single", "[", "2", "]", ")", "\n", "\n", "\n", "#", "\n", "overlayGeo", ",", "_", ",", "_", "=", "decoder_renderColorMesh_gary", "(", "\n", "opt", ",", "self", ".", "h_lrgp", ",", "self", ".", "list_vertex", "[", "0", "]", ",", "self", ".", "list_vertexNormal", "[", "0", "]", ",", "self", ".", "list_vertexColor_gary", ",", "\n", "self", ".", "gpmm_frustrum", ",", "gpmm_tar_mvMain", ",", "gpmm_tar_eyeMain", ",", "fore", "=", "opt", ".", "flag_fore", ",", "tone", "=", "False", ",", "background", "=", "-", "1", "\n", ")", "\n", "#overlayGeo = gpmm_face_replace(self.input_float, overlayGeo, self.gpmm_render_mask)", "\n", "overlayGeo", "=", "tf", ".", "clip_by_value", "(", "overlayGeo", ",", "0.0", ",", "1.0", ")", "\n", "overlayGeoMain_255", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "overlayGeo", "[", "0", "]", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "self", ".", "overlayGeoMain_255", ".", "append", "(", "overlayGeoMain_255", ")", "\n", "\n", "\"\"\"\n                2. multi-poses visual: 3 random pose\n                \"\"\"", "\n", "for", "i", "in", "range", "(", "self", ".", "define_pose", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "pose", "=", "self", ".", "define_pose", "[", "i", "]", "\n", "#pose = tf.tile(pose, multiples=[self.batch_size, 1])", "\n", "\n", "gpmm_tar_ext", ",", "gpmm_tar_proj", ",", "gpmm_tar_mv", ",", "gpmm_tar_eye", "=", "build_train_graph_3dmm_camera", "(", "self", ".", "intrinsics_single", ",", "pose", ")", "\n", "\n", "# render", "\n", "gpmm_render", ",", "gpmm_render_mask", ",", "_", "=", "decoder_renderColorMesh", "(", "\n", "opt", ",", "self", ".", "h_lrgp", ",", "self", ".", "list_vertex", "[", "0", "]", ",", "self", ".", "list_vertexNormal", "[", "0", "]", ",", "self", ".", "list_vertexColor", "[", "0", "]", ",", "\n", "self", ".", "gpmm_frustrum", ",", "gpmm_tar_mv", ",", "gpmm_tar_eye", ",", "fore", "=", "opt", ".", "flag_fore", ",", "tone", "=", "False", "\n", ")", "\n", "gpmm_render", "=", "tf", ".", "clip_by_value", "(", "gpmm_render", ",", "0.0", ",", "1.0", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                        ", "apper_mulPose_255", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "gpmm_render", "[", "0", "]", ",", "dtype", "=", "tf", ".", "uint8", ")", "# bs, y, x", "\n", "", "else", ":", "\n", "                        ", "apper_mulPose_255", "=", "tf", ".", "concat", "(", "[", "apper_mulPose_255", ",", "tf", ".", "image", ".", "convert_image_dtype", "(", "gpmm_render", "[", "0", "]", ",", "dtype", "=", "tf", ".", "uint8", ")", "]", ",", "axis", "=", "2", ")", "# bs, y, x", "\n", "", "", "self", ".", "apper_mulPose_255", ".", "append", "(", "apper_mulPose_255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.build_graph.MGC_TRAIN.inference": [[1070, 1106], ["sess.run"], "methods", ["None"], ["", "", "", "def", "inference", "(", "self", ",", "sess", ",", "inputs", ")", ":", "\n", "        ", "fetches", "=", "{", "}", "\n", "\n", "# Eval", "\n", "# 0. vertex", "\n", "fetches", "[", "'vertex_shape'", "]", "=", "self", ".", "list_vertex", "\n", "\n", "# 1. color", "\n", "fetches", "[", "'vertex_color'", "]", "=", "self", ".", "list_vertexColor", "\n", "fetches", "[", "'vertex_color_ori'", "]", "=", "self", ".", "list_vertexColorOri", "\n", "\n", "# Visual", "\n", "if", "self", ".", "opt", ".", "flag_visual", ":", "\n", "            ", "fetches", "[", "'gpmm_render_mask'", "]", "=", "self", ".", "gpmm_render_mask", "\n", "\n", "fetches", "[", "'overlay_255'", "]", "=", "self", ".", "overlay_255", "\n", "fetches", "[", "'overlayTex_255'", "]", "=", "self", ".", "overlayTex_255", "\n", "fetches", "[", "'overlayLight_255'", "]", "=", "self", ".", "overlayLight_255", "\n", "fetches", "[", "'overlayGeo_255'", "]", "=", "self", ".", "overlayGeo_255", "\n", "\n", "fetches", "[", "'overlayMain_255'", "]", "=", "self", ".", "overlayMain_255", "\n", "fetches", "[", "'overlayTexMain_255'", "]", "=", "self", ".", "overlayTexMain_255", "\n", "fetches", "[", "'overlayLightMain_255'", "]", "=", "self", ".", "overlayLightMain_255", "\n", "fetches", "[", "'overlayGeoMain_255'", "]", "=", "self", ".", "overlayGeoMain_255", "\n", "\n", "fetches", "[", "'apper_mulPose_255'", "]", "=", "self", ".", "apper_mulPose_255", "\n", "\n", "# lm2d, pose", "\n", "", "fetches", "[", "'lm2d'", "]", "=", "self", ".", "dict_inter_comm", "[", "'pred_lm2d'", "]", "\n", "fetches", "[", "'gpmm_pose'", "]", "=", "self", ".", "dict_inter_comm", "[", "'pred_6dof_pose'", "]", "\n", "fetches", "[", "'gpmm_intrinsic'", "]", "=", "self", ".", "intrinsics_single", "\n", "\n", "#", "\n", "results", "=", "sess", ".", "run", "(", "fetches", ",", "feed_dict", "=", "{", "'pl_input:0'", ":", "inputs", "}", ")", "\n", "\n", "return", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.decoder_multiView.decoder_warppose": [[21, 31], ["range", "src_common.geometry.geo_utils.get_relative_pose", "src_common.geometry.geo_utils.mat2pose_vec", "rel_pose_list.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.get_relative_pose", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.geo_utils.mat2pose_vec"], ["def", "decoder_warppose", "(", "opt", ",", "list_pred_pose", ")", ":", "\n", "    ", "pred_pose_render", "=", "list_pred_pose", "[", "0", "]", "\n", "rel_pose_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_source", ")", ":", "\n", "        ", "rel_pose_l", "=", "get_relative_pose", "(", "pred_pose_render", ",", "list_pred_pose", "[", "1", "+", "i", "]", ")", "# careful of [tar, src]", "\n", "rel_pose_l", "=", "mat2pose_vec", "(", "rel_pose_l", ")", "\n", "#rel_pose_l = tf.Print(rel_pose_l, [rel_pose_l], message='rel_pose_l')", "\n", "rel_pose_list", ".", "append", "(", "rel_pose_l", ")", "\n", "#image_pred_poses = tf.stack(rel_pose_list, axis=1)", "\n", "", "return", "rel_pose_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.decoder_multiView.decoder_covisible_map": [[32, 66], ["range", "src_common.geometry.covisible.mm_covisible_tri", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "gpmm_render_image", "list_gpmm_covisibleMap.append"], "function", ["home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.geometry.covisible.mm_covisible_tri", "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.deep_3dmm_decoder.gpmm_render_image"], ["", "def", "decoder_covisible_map", "(", "opt", ",", "h_lrgp", ",", "gpmm_frustrum", ",", "dict_inter_common", ")", ":", "\n", "# input", "\n", "    ", "list_tri_buffer", "=", "dict_inter_common", "[", "'3dmm_render_tri_id'", "]", "\n", "\n", "# return", "\n", "list_gpmm_covisibleMap", "=", "[", "]", "\n", "\n", "\"\"\"\n    Here calculate consistence triangle\n    \"\"\"", "\n", "tri_ids_tar", "=", "list_tri_buffer", "[", "0", "]", "# triangle id on image for per pixel", "\n", "for", "i", "in", "range", "(", "opt", ".", "num_source", ")", ":", "\n", "# careful of [tar, src]", "\n", "        ", "tri_ids_src", "=", "list_tri_buffer", "[", "1", "+", "i", "]", "# triangle id on image for per pixel", "\n", "\n", "tri_consistency", "=", "mm_covisible_tri", "(", "h_lrgp", ",", "tri_ids_tar", ",", "tri_ids_src", ")", "\n", "\n", "# fore render", "\n", "zbf_vertex_fore_tar", "=", "tf", ".", "gather", "(", "dict_inter_common", "[", "'gpmm_vertex'", "]", "[", "0", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "zbf_vertex_normal_fore", "=", "tf", ".", "gather", "(", "dict_inter_common", "[", "'gpmm_vertexNormal'", "]", "[", "0", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "zbf_vertex_color_fore", "=", "tf", ".", "gather", "(", "dict_inter_common", "[", "'gpmm_vertexColor'", "]", "[", "0", "]", ",", "h_lrgp", ".", "h_curr", ".", "idx_subTopo", ",", "axis", "=", "1", ")", "\n", "\n", "_", ",", "zbuffer_mask", ",", "_", "=", "gpmm_render_image", "(", "\n", "opt", ",", "zbf_vertex_fore_tar", ",", "tri_consistency", ",", "zbf_vertex_normal_fore", ",", "zbf_vertex_color_fore", ",", "\n", "gpmm_frustrum", ",", "dict_inter_common", "[", "'pred_cam_mv'", "]", "[", "0", "]", ",", "dict_inter_common", "[", "'pred_cam_eye'", "]", "[", "0", "]", "\n", ")", "\n", "list_gpmm_covisibleMap", ".", "append", "(", "zbuffer_mask", ")", "\n", "# mid", "\n", "# _, zbuffer_mask, _ = gpmm_render_image(", "\n", "#     opt, dict_inter_common['gpmm_vertex'][0], tri_consistency, dict_inter_common['gpmm_vertexNormal'][0], dict_inter_common['gpmm_vertexColor'][0],", "\n", "#     gpmm_frustrum, dict_inter_common['pose_mv'][0], dict_inter_common['pose_eye'][0]", "\n", "# )", "\n", "# list_gpmm_covisibleMap.append(zbuffer_mask)", "\n", "", "return", "list_gpmm_covisibleMap", "\n", "\n"]], "home.repos.pwc.inspect_result.jiaxiangshang_MGCNet.src_tfGraph.decoder_multiView.decoder_align_depthMap": [[67, 96], ["range", "len", "tensorflow.multiply", "tensorflow.multiply", "list_depth_align.append", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.tile", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape"], "function", ["None"], ["", "def", "decoder_align_depthMap", "(", "opt", ",", "list_depthMap", ",", "list_syn_depthMap", ",", "list_syn_mask", ")", ":", "\n", "    ", "list_depth_align", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "list_depthMap", ")", ")", ":", "\n", "        ", "visible_target_depth", "=", "list_depthMap", "[", "i", "]", "\n", "visible_source_depth", "=", "list_syn_depthMap", "[", "i", "]", "\n", "proj_mask", "=", "list_syn_mask", "[", "i", "]", "\n", "\n", "# radio", "\n", "visible_target_depth_mask", "=", "tf", ".", "multiply", "(", "visible_target_depth", ",", "proj_mask", ")", "\n", "visible_source_depth_mask", "=", "tf", ".", "multiply", "(", "visible_source_depth", ",", "proj_mask", ")", "\n", "\n", "# visible_tar_depth_value = tf.boolean_mask(visible_source_depth_mask, proj_mask)", "\n", "# visible_src_depth_value = tf.boolean_mask(visible_source_depth_mask, proj_mask)", "\n", "mean_target_depth", "=", "tf", ".", "reduce_sum", "(", "visible_target_depth_mask", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "/", "(", "tf", ".", "reduce_sum", "(", "proj_mask", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "+", "1.0", ")", "\n", "mean_source_depth", "=", "tf", ".", "reduce_sum", "(", "visible_source_depth_mask", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "/", "(", "tf", ".", "reduce_sum", "(", "proj_mask", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "+", "1.0", ")", "\n", "\n", "depth_ratio", "=", "mean_target_depth", "/", "(", "mean_source_depth", "+", "1e-6", ")", "\n", "#depth_ratio = tf.Print(depth_ratio ,[depth_ratio], message='depth_ratio ')", "\n", "visible_source_depth_radio", "=", "list_syn_depthMap", "[", "i", "]", "*", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "depth_ratio", ",", "[", "opt", ".", "batch_size", ",", "1", ",", "1", ",", "1", "]", ")", ",", "[", "1", ",", "opt", ".", "img_height", ",", "opt", ".", "img_width", ",", "1", "]", ")", "\n", "\n", "#pred_render_max = tf.reduce_max(visible_source_depth_radio)", "\n", "#pred_render_min = tf.reduce_min(visible_source_depth_radio)", "\n", "#visible_source_depth_radio = tf.Print(visible_source_depth_radio, [pred_render_max, pred_render_min], message='src align depthmap')", "\n", "list_depth_align", ".", "append", "(", "visible_source_depth_radio", ")", "\n", "\n", "", "return", "list_depth_align", "", "", ""]]}