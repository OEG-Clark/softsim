{"home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.main.main": [[14, 36], ["print", "run_mcdo.main", "run_mcdo.generate_graph_roi", "numpy.load", "print", "gen_graph.generate_components", "print", "train_gcn.main", "print", "run_crf.main", "print", "print", "print", "print", "print", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.main", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_mcdo.generate_graph_roi", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.gen_graph.generate_components", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.main", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.main"], ["def", "main", "(", "input_file", ")", ":", "\n", "    ", "gcn_epochs", "=", "200", "\n", "cf", "=", "1", "\n", "w", "=", "1", "\n", "th", "=", "0.8", "\n", "mc_sample", "=", "20", "\n", "dropout_rate", "=", "0.3", "\n", "print", "(", "\"_____________________________ {} Inference and Monte Carlo evaluation\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "ref_shape", "=", "mc", ".", "main", "(", "input_file", ",", "mc_samples", "=", "mc_sample", ",", "dropout_rate", "=", "dropout_rate", ",", "save_prefix", "=", "\"\"", ")", "\n", "mc", ".", "generate_graph_roi", "(", "th", ",", "ref_shape", ",", "save_prefix", "=", "\"\"", ")", "\n", "roi", "=", "np", ".", "load", "(", "dirs", ".", "ROI_LIMITS", ")", "\n", "print", "(", "\"_____________________________ {} Generating graph\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "graph_info", "=", "gg", ".", "generate_components", "(", "cf", ",", "w", ")", "\n", "print", "(", "\"_____________________________ {} GCN refinement\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "gcn_info", "=", "gcn", ".", "main", "(", "input_file", ",", "epochs", "=", "gcn_epochs", ")", "\n", "print", "(", "\"_____________________________ {} CRF refinement\"", ".", "format", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "crf_info", "=", "crf", ".", "main", "(", "input_file", ",", "10", ")", "\n", "print", "(", "\"--------------- Final Results --------------\"", ")", "\n", "print", "(", "\"Dice Sore:\"", ")", "\n", "print", "(", "\"CNN DSC: {}\"", ".", "format", "(", "gcn_info", "[", "\"cnn_vol_dsc\"", "]", ")", ")", "\n", "print", "(", "\"GCN Refinement DSC: {}\"", ".", "format", "(", "gcn_info", "[", "\"gcn_vol_dsc\"", "]", ")", ")", "\n", "print", "(", "\"CRF Refinement DSC: {}\"", ".", "format", "(", "crf_info", "[", "\"crf_vol_dsc\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_crf.mean_vol_dsc": [[10, 21], ["range", "dlm.dice_score_np", "float"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.dice_score_np"], ["def", "mean_vol_dsc", "(", "vol", ",", "gt_vol", ")", ":", "\n", "    ", "val_acc", "=", "0.0", "\n", "num_slices", "=", "vol", ".", "shape", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "num_slices", ")", ":", "\n", "        ", "mat", "=", "vol", "[", ":", ",", ":", ",", "i", "]", "\n", "gt_slice", "=", "gt_vol", "[", ":", ",", ":", ",", "i", "]", "\n", "acc", "=", "tools", ".", "dice_score_np", "(", "mat", ",", "gt_slice", ")", "\n", "val_acc", "+=", "acc", "\n", "\n", "", "val_acc", "=", "val_acc", "/", "float", "(", "num_slices", ")", "\n", "return", "val_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_crf.vol_dsc": [[23, 30], ["numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "vol_dsc", "(", "vol", ",", "gt_vol", ")", ":", "\n", "    ", "eps", "=", "1e-9", "\n", "ab", "=", "np", ".", "sum", "(", "vol", "*", "gt_vol", ")", "\n", "a", "=", "np", ".", "sum", "(", "vol", ")", "\n", "b", "=", "np", ".", "sum", "(", "gt_vol", ")", "\n", "dsc", "=", "(", "2", "*", "ab", "+", "eps", ")", "/", "(", "a", "+", "b", "+", "eps", ")", "\n", "return", "dsc", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_crf.get_unary2d": [[32, 38], ["numpy.ndarray", "numpy.log", "np.ndarray.reshape"], "function", ["None"], ["", "def", "get_unary2d", "(", "probabilities", ",", "num_class", ")", ":", "\n", "    ", "y", ",", "x", "=", "probabilities", ".", "shape", "\n", "U", "=", "np", ".", "ndarray", "(", "shape", "=", "[", "num_class", ",", "y", ",", "x", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "U", "[", "0", ",", ":", ",", ":", "]", "=", "1", "-", "probabilities", "\n", "U", "[", "1", ",", ":", ",", ":", "]", "=", "probabilities", "\n", "return", "-", "np", ".", "log", "(", "U", ".", "reshape", "(", "(", "num_class", ",", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_crf.crf_refine": [[40, 98], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.ndarray", "pydensecrf.DenseCRF", "U.reshape.reshape", "dcrf.DenseCRF.setUnaryEnergy", "pydensecrf.utils.create_pairwise_gaussian", "dcrf.DenseCRF.addPairwiseEnergy", "pydensecrf.utils.create_pairwise_bilateral", "dcrf.DenseCRF.addPairwiseEnergy", "dcrf.DenseCRF.inference", "numpy.argmax", "np.argmax.reshape", "numpy.zeros", "numpy.zeros", "run_crf.mean_vol_dsc", "run_crf.mean_vol_dsc", "run_crf.vol_dsc", "run_crf.vol_dsc", "numpy.save", "utilities.misc.npy_to_nifti", "numpy.log"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.mean_vol_dsc", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.mean_vol_dsc", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.vol_dsc", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.vol_dsc", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti"], ["", "def", "crf_refine", "(", "name", ",", "it", "=", "5", ")", ":", "\n", "    ", "vol", "=", "np", ".", "load", "(", "dirs", ".", "WORKING_DIR", "+", "name", "[", "0", "]", ")", "\n", "vol_crop", "=", "np", ".", "load", "(", "dirs", ".", "ROI_VOLUME", ")", "\n", "segmentation", "=", "np", ".", "load", "(", "dirs", ".", "ROI_PREDICTION", ")", "# CNN Prediction", "\n", "gt", "=", "np", ".", "load", "(", "dirs", ".", "WORKING_DIR", "+", "name", "[", "1", "]", ")", "\n", "gt", "[", "gt", "!=", "0", "]", "=", "1", "\n", "\n", "roi_limits", "=", "np", ".", "load", "(", "dirs", ".", "ROI_LIMITS", ")", "\n", "cnn_prediction", "=", "np", ".", "load", "(", "dirs", ".", "ROI_PREDICTION", ")", "\n", "\n", "y", ",", "x", ",", "z", "=", "vol_crop", ".", "shape", "\n", "\n", "U", "=", "np", ".", "ndarray", "(", "shape", "=", "[", "2", ",", "y", ",", "x", ",", "z", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "U", "[", "0", ",", ":", "]", "=", "1", "-", "cnn_prediction", "\n", "U", "[", "1", ",", ":", "]", "=", "cnn_prediction", "\n", "\n", "d", "=", "dcrf", ".", "DenseCRF", "(", "x", "*", "y", "*", "z", ",", "2", ")", "# npoints, nlabels", "\n", "\n", "U", "=", "U", ".", "reshape", "(", "(", "2", ",", "-", "1", ")", ")", "\n", "d", ".", "setUnaryEnergy", "(", "-", "np", ".", "log", "(", "U", "+", "1.0e-15", ")", ")", "\n", "\n", "pairwise_gauss", "=", "create_pairwise_gaussian", "(", "(", "y", ",", "x", ",", "z", ")", ",", "(", "y", ",", "x", ",", "z", ")", ")", "\n", "d", ".", "addPairwiseEnergy", "(", "pairwise_gauss", ",", "compat", "=", "3", ",", "kernel", "=", "dcrf", ".", "DIAG_KERNEL", ",", "normalization", "=", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "\n", "pairwise_bilat", "=", "create_pairwise_bilateral", "(", "sdims", "=", "(", "10", ",", "10", ",", "10", ")", ",", "schan", "=", "(", "1", ",", ")", ",", "img", "=", "vol_crop", ")", "\n", "d", ".", "addPairwiseEnergy", "(", "pairwise_bilat", ",", "compat", "=", "10", ",", "kernel", "=", "dcrf", ".", "DIAG_KERNEL", ",", "normalization", "=", "dcrf", ".", "NORMALIZE_SYMMETRIC", ")", "\n", "\n", "Q", "=", "d", ".", "inference", "(", "it", ")", "\n", "map_res", "=", "np", ".", "argmax", "(", "Q", ",", "axis", "=", "0", ")", "\n", "\n", "graph_predictions", "=", "map_res", ".", "reshape", "(", "(", "y", ",", "x", ",", "z", ")", ")", "\n", "refined", "=", "graph_predictions", "\n", "\n", "# recovering sizes", "\n", "segmentation_expanded", "=", "np", ".", "zeros", "(", "vol", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "\n", "segmentation_expanded", "[", "roi_limits", "[", "0", "]", ":", "roi_limits", "[", "3", "]", ",", "roi_limits", "[", "1", "]", ":", "roi_limits", "[", "4", "]", ",", "roi_limits", "[", "2", "]", ":", "roi_limits", "[", "5", "]", "]", "=", "segmentation", "\n", "\n", "refined_expanded", "=", "np", ".", "zeros", "(", "vol", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "\n", "refined_expanded", "[", "roi_limits", "[", "0", "]", ":", "roi_limits", "[", "3", "]", ",", "roi_limits", "[", "1", "]", ":", "roi_limits", "[", "4", "]", ",", "roi_limits", "[", "2", "]", ":", "roi_limits", "[", "5", "]", "]", "=", "refined", "\n", "\n", "cnn_slice_dsc", "=", "mean_vol_dsc", "(", "segmentation_expanded", ",", "gt", ")", "\n", "crf_slice_dsc", "=", "mean_vol_dsc", "(", "refined_expanded", ",", "gt", ")", "\n", "\n", "cnn_vol_dsc", "=", "vol_dsc", "(", "segmentation_expanded", ",", "gt", ")", "\n", "crf_vol_dsc", "=", "vol_dsc", "(", "refined_expanded", ",", "gt", ")", "\n", "\n", "np", ".", "save", "(", "dirs", ".", "CRF_PREDICTION", ",", "refined", ")", "\n", "npy_to_nifti", "(", "refined_expanded", ",", "dirs", ".", "NIFTI_CRF_SEG", ")", "\n", "\n", "info", "=", "{", "\n", "\"cnn_slice_dsc\"", ":", "cnn_slice_dsc", ",", "\n", "\"crf_slice_dsc\"", ":", "crf_slice_dsc", ",", "\n", "\"cnn_vol_dsc\"", ":", "cnn_vol_dsc", ",", "\n", "\"crf_vol_dsc\"", ":", "crf_vol_dsc", "\n", "}", "\n", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_crf.main": [[100, 103], ["run_crf.crf_refine"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_crf.crf_refine"], ["", "def", "main", "(", "name", ",", "it", "=", "10", ")", ":", "\n", "    ", "info", "=", "crf_refine", "(", "name", ",", "it", ")", "\n", "return", "info", "\n", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.unet_config.ModelUnetAxial1.__init__": [[9, 15], ["dlm.unet.UNet"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "unet", ".", "UNet", "(", "in_channels", "=", "1", ",", "out_classes", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "metric", "=", "tools", ".", "dice_score_tensor", "\n", "self", ".", "logits_to_predictions", "=", "tools", ".", "dsc_logits_to_predictions", "\n", "self", ".", "chkp_dir", "=", "dirs", ".", "WEIGHTS", "\n", "self", ".", "batch_size", "=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.unet_config.ModelUnetAxial1Montecarlo.__init__": [[18, 21], ["unet_config.ModelUnetAxial1.__init__", "dlm.unet.UNet"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dropout_rate", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "ModelUnetAxial1Montecarlo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "unet", ".", "UNet", "(", "in_channels", "=", "1", ",", "out_classes", "=", "1", ",", "padding", "=", "0", ",", "dropout_rate", "=", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_mcdo.mean_vol_dsc": [[12, 23], ["range", "print", "dlm.dice_score_np", "float"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.dice_score_np"], ["def", "mean_vol_dsc", "(", "vol", ",", "gt_vol", ")", ":", "\n", "    ", "val_acc", "=", "0.0", "\n", "num_slices", "=", "vol", ".", "shape", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "num_slices", ")", ":", "\n", "        ", "mat", "=", "vol", "[", ":", ",", ":", ",", "i", "]", "\n", "gt_slice", "=", "gt_vol", "[", ":", ",", ":", ",", "i", "]", "\n", "acc", "=", "tools", ".", "dice_score_np", "(", "mat", ",", "gt_slice", ")", "\n", "val_acc", "+=", "acc", "\n", "\n", "", "val_acc", "=", "val_acc", "/", "float", "(", "num_slices", ")", "\n", "print", "(", "\"Validation: acc: {:.4f}\"", ".", "format", "(", "val_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_mcdo.vol_dsc": [[25, 33], ["numpy.sum", "numpy.sum", "numpy.sum", "print"], "function", ["None"], ["", "def", "vol_dsc", "(", "vol", ",", "gt_vol", ")", ":", "\n", "    ", "eps", "=", "1e-9", "\n", "ab", "=", "np", ".", "sum", "(", "vol", "*", "gt_vol", ")", "\n", "a", "=", "np", ".", "sum", "(", "vol", ")", "\n", "b", "=", "np", ".", "sum", "(", "gt_vol", ")", "\n", "dsc", "=", "(", "2", "*", "ab", "+", "eps", ")", "/", "(", "a", "+", "b", "+", "eps", ")", "\n", "print", "(", "\"Volume validation: acc: {:.4f}\"", ".", "format", "(", "dsc", ")", ")", "\n", "return", "dsc", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_mcdo.mcdo_process": [[36, 72], ["get_organ_generator", "numpy.load", "numpy.load", "utilities.misc.npy_to_nifti", "utilities.misc.npy_to_nifti", "torch.device", "torch.cuda.is_available", "print", "dlm.load_chkpnt", "tools.load_chkpnt.to", "dlm.segment_vol", "utilities.largest_connected_component3d", "utilities.misc.npy_to_nifti", "utilities.bounding_cube", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "get_organ_generator", "dlm.mcunet.montecarlo_dropout", "print", "numpy.asarray", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.load_chkpnt", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.segment_vol", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.largest_connected_component3d", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.bounding_cube", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.montecarlo_dropout"], ["", "def", "mcdo_process", "(", "sample_name", ",", "model_specs", ",", "mc_samples", ",", "save_prefix", "=", "\"\"", ")", ":", "\n", "    ", "get_organ_generator", "=", "get_pancreas_generator", "\n", "\n", "input_data", "=", "get_organ_generator", "(", "sample_name", ",", "volumes_path", "=", "dirs", ".", "WORKING_DIR", ",", "references_path", "=", "dirs", ".", "WORKING_DIR", ")", "\n", "vol", "=", "np", ".", "load", "(", "dirs", ".", "WORKING_DIR", "+", "sample_name", "[", "0", "]", ")", "\n", "reference", "=", "np", ".", "load", "(", "dirs", ".", "WORKING_DIR", "+", "sample_name", "[", "1", "]", ")", "\n", "\n", "npy_to_nifti", "(", "vol", ",", "dirs", ".", "WORKING_DIR", "+", "save_prefix", "+", "\"volume.nii.gz\"", ")", "# Saving the input as a nifti file", "\n", "npy_to_nifti", "(", "reference", ",", "dirs", ".", "WORKING_DIR", "+", "save_prefix", "+", "\"refernce.nii.gz\"", ")", "# Saving the reference as a nifti file", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "\"found cuda device\"", ")", "\n", "", "print", "(", "\"Running on {}\"", ".", "format", "(", "device", ")", ")", "\n", "model", "=", "model_specs", ".", "model", "\n", "model", "=", "tools", ".", "load_chkpnt", "(", "model", ",", "model_specs", ".", "chkp_dir", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "seg_vol", "=", "tools", ".", "segment_vol", "(", "model", "=", "model", ",", "logits_to_predictions", "=", "model_specs", ".", "logits_to_predictions", ",", "\n", "dataflow", "=", "input_data", ",", "device", "=", "device", ")", "\n", "reduced_vol", "=", "arrtools", ".", "largest_connected_component3d", "(", "vol", "=", "seg_vol", ")", "\n", "npy_to_nifti", "(", "reduced_vol", ",", "dirs", ".", "NIFTI_PREDICTION", "+", "save_prefix", ")", "# Saving CNN prediction as a nifti file", "\n", "\n", "roi_limits", "=", "arrtools", ".", "bounding_cube", "(", "reduced_vol", ")", "\n", "np", ".", "save", "(", "dirs", ".", "ROI_LIMITS", ",", "np", ".", "asarray", "(", "roi_limits", ")", ")", "# saving a square roi containing the organ.", "\n", "# Getting the components that are inside the ROI", "\n", "roi_prediction", "=", "reduced_vol", "[", "roi_limits", "[", "0", "]", ":", "roi_limits", "[", "3", "]", ",", "roi_limits", "[", "1", "]", ":", "roi_limits", "[", "4", "]", ",", "roi_limits", "[", "2", "]", ":", "roi_limits", "[", "5", "]", "]", "\n", "\n", "roi_vol", "=", "vol", "[", "roi_limits", "[", "0", "]", ":", "roi_limits", "[", "3", "]", ",", "roi_limits", "[", "1", "]", ":", "roi_limits", "[", "4", "]", ",", "roi_limits", "[", "2", "]", ":", "roi_limits", "[", "5", "]", "]", "\n", "roi_ref", "=", "reference", "[", "roi_limits", "[", "0", "]", ":", "roi_limits", "[", "3", "]", ",", "roi_limits", "[", "1", "]", ":", "roi_limits", "[", "4", "]", ",", "roi_limits", "[", "2", "]", ":", "roi_limits", "[", "5", "]", "]", "\n", "np", ".", "save", "(", "dirs", ".", "ROI_PREDICTION", ",", "roi_prediction", ")", "\n", "np", ".", "save", "(", "dirs", ".", "ROI_VOLUME", ",", "roi_vol", ")", "\n", "np", ".", "save", "(", "dirs", ".", "ROI_REFERENCE", ",", "roi_ref", ")", "\n", "input_data", "=", "get_organ_generator", "(", "sample_name", ",", "volumes_path", "=", "dirs", ".", "WORKING_DIR", ",", "references_path", "=", "dirs", ".", "WORKING_DIR", ")", "\n", "# Once we have the original prediction, we perform MCDO", "\n", "ref_shape", "=", "mcunet", ".", "montecarlo_dropout", "(", "model", ",", "input_data", ",", "device", ",", "mc_samples", ",", "roi_limits", ",", "save_prefix", "=", "save_prefix", ")", "\n", "return", "ref_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_mcdo.generate_graph_roi": [[75, 77], ["dlm.mcunet.voxel_selection"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.voxel_selection"], ["", "def", "generate_graph_roi", "(", "entropy_th", ",", "ref_shape", ",", "save_prefix", "=", "\"\"", ")", ":", "\n", "    ", "mcunet", ".", "voxel_selection", "(", "entropy_th", ",", "ref_shape", ",", "save_prefix", "=", "save_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_mcdo.main": [[79, 84], ["unet_config.ModelUnetAxial1Montecarlo", "run_mcdo.mcdo_process"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.run_mcdo.mcdo_process"], ["", "def", "main", "(", "sample_name", ",", "mc_samples", ",", "dropout_rate", ",", "save_prefix", "=", "\"\"", ")", ":", "\n", "    ", "model_specs", "=", "models", ".", "ModelUnetAxial1Montecarlo", "(", "dropout_rate", "=", "dropout_rate", ")", "\n", "ref_shape", "=", "mcdo_process", "(", "sample_name", "=", "sample_name", ",", "model_specs", "=", "model_specs", ",", "mc_samples", "=", "mc_samples", ",", "\n", "save_prefix", "=", "save_prefix", ")", "\n", "return", "ref_shape", "\n", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.focal_loss": [[22, 40], ["p0.pow", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["def", "focal_loss", "(", "p", ",", "y", ",", "alpha", "=", "0.5", ",", "gamma", "=", "0.0", ")", ":", "\n", "    ", "eps", "=", "1.0e-15", "\n", "p0", "=", "torch", ".", "ones_like", "(", "p", ")", "-", "p", "\n", "y0", "=", "torch", ".", "ones_like", "(", "y", ")", "-", "y", "\n", "\n", "loss", "=", "-", "1.0", "*", "alpha", "\n", "loss", "*=", "y", "\n", "pw", "=", "(", "p0", ".", "pow", "(", "gamma", ")", ")", "\n", "loss", "*=", "pw", "\n", "loss", "*=", "torch", ".", "log", "(", "p", "+", "eps", ")", "\n", "\n", "loss2", "=", "-", "1.0", "*", "(", "1.0", "-", "alpha", ")", "\n", "loss2", "*=", "y0", "\n", "loss2", "*=", "(", "p", "**", "gamma", ")", "\n", "loss2", "*=", "torch", ".", "log", "(", "p0", "+", "eps", ")", "\n", "\n", "loss", "+=", "loss2", "\n", "return", "torch", ".", "mean", "(", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.train": [[42, 67], ["time.time", "model.train", "optimizer.zero_grad", "model", "train_gcn.focal_loss", "gcn.utils.accuracy", "focal_loss.backward", "optimizer.step", "model.eval", "model", "train_gcn.focal_loss", "gcn.utils.accuracy", "print", "focal_loss.item", "gcn.utils.accuracy.item", "focal_loss.item", "gcn.utils.accuracy.item", "time.time"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.train.train", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.focal_loss", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.accuracy", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.focal_loss", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.accuracy"], ["", "def", "train", "(", "model", ",", "optimizer", ",", "epoch", ",", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "valid", "=", "False", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "#    loss_train = F.nll_loss(output[idx_train], labels[idx_train])", "\n", "loss_train", "=", "focal_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "valid", ":", "\n", "# Evaluate validation set performance separately,", "\n", "# deactivates dropout during validation run.", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "#        loss_val = F.nll_loss(output[idx_val], labels[idx_val])", "\n", "loss_val", "=", "focal_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ",", "\n", "'time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.mean_vol_dsc": [[69, 80], ["range", "dlm.dice_score_np", "float"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.dice_score_np"], ["", "", "def", "mean_vol_dsc", "(", "vol", ",", "gt_vol", ")", ":", "\n", "    ", "val_acc", "=", "0.0", "\n", "num_slices", "=", "vol", ".", "shape", "[", "2", "]", "\n", "for", "i", "in", "range", "(", "num_slices", ")", ":", "\n", "        ", "mat", "=", "vol", "[", ":", ",", ":", ",", "i", "]", "\n", "gt_slice", "=", "gt_vol", "[", ":", ",", ":", ",", "i", "]", "\n", "acc", "=", "tools", ".", "dice_score_np", "(", "mat", ",", "gt_slice", ")", "\n", "val_acc", "+=", "acc", "\n", "\n", "", "val_acc", "=", "val_acc", "/", "float", "(", "num_slices", ")", "\n", "return", "val_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.vol_dsc": [[82, 89], ["numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "vol_dsc", "(", "vol", ",", "gt_vol", ")", ":", "\n", "    ", "eps", "=", "1e-9", "\n", "ab", "=", "np", ".", "sum", "(", "vol", "*", "gt_vol", ")", "\n", "a", "=", "np", ".", "sum", "(", "vol", ")", "\n", "b", "=", "np", ".", "sum", "(", "gt_vol", ")", "\n", "dsc", "=", "(", "2", "*", "ab", "+", "eps", ")", "/", "(", "a", "+", "b", "+", "eps", ")", "\n", "return", "dsc", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.gcn_inference": [[91, 146], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "model.eval", "model", "train_gcn.focal_loss", "gcn.utils.accuracy", "gcn.utils.map_voxel_nodes", "gcn.utils.reconstruct_from_n6", "numpy.zeros", "numpy.zeros", "train_gcn.mean_vol_dsc", "train_gcn.mean_vol_dsc", "train_gcn.vol_dsc", "train_gcn.vol_dsc", "numpy.save", "utilities.misc.npy_to_nifti", "np.load.astype", "model.cpu().detach().numpy().astype", "gcn.utils.reconstruct_from_n6", "numpy.zeros", "model.cpu().detach().numpy", "model.cpu().detach", "model.cpu"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.focal_loss", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.accuracy", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.map_voxel_nodes", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.reconstruct_from_n6", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.mean_vol_dsc", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.mean_vol_dsc", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.vol_dsc", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.vol_dsc", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.reconstruct_from_n6"], ["", "def", "gcn_inference", "(", "sample_name", ",", "model", ",", "adj", ",", "features", ",", "y_test", ",", "idx_test", ",", "get_probs", "=", "False", ")", ":", "\n", "    ", "roi_limits", "=", "np", ".", "load", "(", "dirs", ".", "ROI_LIMITS", ")", "\n", "segmentation", "=", "np", ".", "load", "(", "dirs", ".", "ROI_PREDICTION", ")", "\n", "gt", "=", "np", ".", "load", "(", "dirs", ".", "WORKING_DIR", "+", "sample_name", "[", "1", "]", ")", "\n", "gt", "[", "gt", "!=", "0", "]", "=", "1", "\n", "\n", "roi_vol", "=", "np", ".", "load", "(", "dirs", ".", "ROI_VOLUME", ")", "\n", "vol", "=", "np", ".", "load", "(", "dirs", ".", "WORKING_DIR", "+", "sample_name", "[", "0", "]", ")", "\n", "valid_nodes", "=", "np", ".", "load", "(", "dirs", ".", "DILATION_PATH", ")", "\n", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "#    loss_test = F.nll_loss(output[idx_test], y_test[idx_test])S", "\n", "loss_test", "=", "focal_loss", "(", "output", "[", "idx_test", "]", ",", "y_test", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "y_test", "[", "idx_test", "]", ")", "\n", "\n", "voxel_node", ",", "node_voxel", "=", "map_voxel_nodes", "(", "roi_vol", ".", "shape", ",", "valid_nodes", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "if", "get_probs", ":", "\n", "        ", "graph_predictions", "=", "output", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "graph_predictions", "=", "reconstruct_from_n6", "(", "graph_predictions", ",", "node_voxel", ",", "roi_vol", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "\n", "gp_expanded", "=", "np", ".", "zeros", "(", "vol", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "\n", "gp_expanded", "[", "roi_limits", "[", "0", "]", ":", "roi_limits", "[", "3", "]", ",", "roi_limits", "[", "1", "]", ":", "roi_limits", "[", "4", "]", ",", "roi_limits", "[", "2", "]", ":", "roi_limits", "[", "5", "]", "]", "=", "graph_predictions", "\n", "return", "gp_expanded", "\n", "", "else", ":", "\n", "        ", "graph_predictions", "=", "(", "output", ">", "mpar", ".", "gcn_th", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "graph_predictions", "=", "reconstruct_from_n6", "(", "graph_predictions", ",", "node_voxel", ",", "roi_vol", ".", "shape", ")", "# recovering the volume shape", "\n", "\n", "refined", "=", "graph_predictions", "\n", "\n", "# recovering sizes", "\n", "segmentation_expanded", "=", "np", ".", "zeros", "(", "vol", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "\n", "segmentation_expanded", "[", "roi_limits", "[", "0", "]", ":", "roi_limits", "[", "3", "]", ",", "roi_limits", "[", "1", "]", ":", "roi_limits", "[", "4", "]", ",", "roi_limits", "[", "2", "]", ":", "roi_limits", "[", "5", "]", "]", "=", "segmentation", "\n", "\n", "refined_expanded", "=", "np", ".", "zeros", "(", "vol", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "\n", "refined_expanded", "[", "roi_limits", "[", "0", "]", ":", "roi_limits", "[", "3", "]", ",", "roi_limits", "[", "1", "]", ":", "roi_limits", "[", "4", "]", ",", "roi_limits", "[", "2", "]", ":", "roi_limits", "[", "5", "]", "]", "=", "refined", "\n", "\n", "cnn_slice_dsc", "=", "mean_vol_dsc", "(", "segmentation_expanded", ",", "gt", ")", "\n", "gcn_slice_dsc", "=", "mean_vol_dsc", "(", "refined_expanded", ",", "gt", ")", "\n", "\n", "cnn_vol_dsc", "=", "vol_dsc", "(", "segmentation_expanded", ",", "gt", ")", "\n", "gcn_vol_dsc", "=", "vol_dsc", "(", "refined_expanded", ",", "gt", ")", "\n", "\n", "np", ".", "save", "(", "dirs", ".", "GRAPH_PREDICTION", ",", "refined", ")", "\n", "npy_to_nifti", "(", "refined_expanded", ",", "dirs", ".", "NIFTI_GRAPH_SEG", ")", "\n", "\n", "info", "=", "{", "\n", "\"cnn_slice_dsc\"", ":", "cnn_slice_dsc", ",", "\n", "\"gcn_slice_dsc\"", ":", "gcn_slice_dsc", ",", "\n", "\"cnn_vol_dsc\"", ":", "cnn_vol_dsc", ",", "\n", "\"gcn_vol_dsc\"", ":", "gcn_vol_dsc", "\n", "}", "\n", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.main": [[148, 200], ["numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "gcn.utils.load_data", "gcn.models.GCN", "torch.Adam", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "time.time", "gcn.models.GCN.eval", "print", "range", "print", "print", "train_gcn.gcn_inference", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "gcn.models.GCN.parameters", "gcn.models.GCN.cuda", "features.cuda.cuda", "adj.cuda.cuda", "labels.cuda.cuda", "idx_train.cuda.cuda", "idx_val.cuda.cuda", "idx_test.cuda.cuda", "y_test.cuda.cuda", "train_gcn.train", "time.time"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.load_data", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.train_gcn.gcn_inference", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.train.train"], ["", "def", "main", "(", "sample_name", ",", "epochs", "=", "200", ",", "get_probs", "=", "False", ")", ":", "\n", "# Training settings", "\n", "    ", "valid", "=", "False", "\n", "no_cuda", "=", "False", "\n", "seed", "=", "42", "\n", "lr", "=", "1e-2", "\n", "weight_decay", "=", "1e-5", "\n", "hidden", "=", "32", "\n", "dropout", "=", "0.5", "\n", "\n", "cuda", "=", "not", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "# Load data", "\n", "", "adj", ",", "features", ",", "labels", ",", "y_test", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", ")", "\n", "\n", "# Model and optimizer", "\n", "model", "=", "GCN", "(", "nfeat", "=", "features", ".", "shape", "[", "1", "]", ",", "\n", "nhid", "=", "hidden", ",", "\n", "nclass", "=", "1", ",", "\n", "dropout", "=", "dropout", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "features", "=", "features", ".", "cuda", "(", ")", "\n", "adj", "=", "adj", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "idx_train", "=", "idx_train", ".", "cuda", "(", ")", "\n", "idx_val", "=", "idx_val", ".", "cuda", "(", ")", "\n", "idx_test", "=", "idx_test", ".", "cuda", "(", ")", "\n", "y_test", "=", "y_test", ".", "cuda", "(", ")", "\n", "\n", "#   Training model", "\n", "", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "t_total", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "print", "(", "\"------- Training GCN\"", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "if", "epoch", "==", "epochs", "-", "1", ":", "\n", "            ", "valid", "=", "True", "\n", "", "train", "(", "model", ",", "optimizer", ",", "epoch", ",", "adj", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "valid", ")", "\n", "", "print", "(", "\"Optimization Finished!\"", ")", "\n", "print", "(", "\"Total time elapsed: {:.4f}s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t_total", ")", ")", "\n", "# Testing", "\n", "info", "=", "gcn_inference", "(", "sample_name", ",", "model", ",", "adj", ",", "features", ",", "y_test", ",", "idx_test", ",", "get_probs", "=", "get_probs", ")", "\n", "return", "info", "\n", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.gen_graph.generate_components": [[9, 92], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "float", "numpy.array", "numpy.expand_dims", "gcn.add_feature", "gcn.add_feature", "numpy.load", "gcn.map_voxel_nodes", "gcn.graph_fts", "gcn.generate_mask", "gcn.reference_to_graph", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "np.load.astype().sum", "numpy.sum", "np.load.astype", "gcn.get_connect_func", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "gcn.get_weighting_func", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "np.load.astype", "np.load.astype", "numpy.sum", "numpy.sum", "numpy.sum", "np.load.astype", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.add_feature", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.add_feature", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.map_voxel_nodes", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.graph_fts", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.generate_mask", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.reference_to_graph", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.connectivity.get_connect_func", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.get_weighting_func"], ["def", "generate_components", "(", "connect_funct", ",", "weight", ")", ":", "\n", "    ", "vol_path", "=", "dirs", ".", "ROI_VOLUME", "\n", "ref_path", "=", "dirs", ".", "ROI_REFERENCE", "\n", "seg_path", "=", "dirs", ".", "ROI_PREDICTION", "\n", "var_path", "=", "dirs", ".", "BIN_ENTROPY", "\n", "valid_path", "=", "dirs", ".", "DILATION_PATH", "\n", "\n", "probability", "=", "np", ".", "load", "(", "dirs", ".", "E_PATH", ")", "\n", "entropy", "=", "np", ".", "load", "(", "dirs", ".", "ENT_PATH", ")", "\n", "seg_vol", "=", "np", ".", "load", "(", "seg_path", ")", "\n", "var_vol", "=", "np", ".", "load", "(", "var_path", ")", "\n", "reference", "=", "np", ".", "load", "(", "ref_path", ")", "\n", "vol", "=", "np", ".", "load", "(", "vol_path", ")", "\n", "# ----- Normalizing volume", "\n", "num_vox", "=", "float", "(", "vol", ".", "shape", "[", "0", "]", "*", "vol", ".", "shape", "[", "1", "]", "*", "vol", ".", "shape", "[", "2", "]", ")", "\n", "vmu", "=", "vol", ".", "astype", "(", "np", ".", "float32", ")", ".", "sum", "(", ")", "/", "num_vox", "\n", "vvar", "=", "np", ".", "sum", "(", "(", "vol", ".", "astype", "(", "np", ".", "float32", ")", "-", "vmu", ")", "**", "2", ")", "/", "num_vox", "\n", "\n", "fts", "=", "np", ".", "array", "(", "vol", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fts", "=", "(", "fts", "-", "vmu", ")", "/", "vvar", "\n", "fts", "=", "np", ".", "expand_dims", "(", "fts", ",", "3", ")", "\n", "\n", "fts", "=", "gut", ".", "add_feature", "(", "probability", ",", "fts", ")", "\n", "fts", "=", "gut", ".", "add_feature", "(", "entropy", ",", "fts", ")", "\n", "\n", "valid_nodes", "=", "np", ".", "load", "(", "valid_path", ")", "\n", "voxel_node", ",", "node_voxel", "=", "gut", ".", "map_voxel_nodes", "(", "vol", ".", "shape", ",", "valid_nodes", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "ft_graph", "=", "gut", ".", "graph_fts", "(", "fts", ",", "node_voxel", ")", "# convert the feature vol to a graph representation", "\n", "\n", "args", "=", "{", "\n", "\"volume\"", ":", "(", "vol", ".", "astype", "(", "np", ".", "float32", ")", "-", "vmu", ")", "/", "vvar", ",", "\n", "\"prediction\"", ":", "seg_vol", ",", "\n", "\"probability\"", ":", "probability", ",", "\n", "\"uncertainty\"", ":", "var_vol", ",", "\n", "\"entropy_map\"", ":", "entropy", ",", "\n", "\"features\"", ":", "fts", "\n", "}", "\n", "\n", "graph", ",", "weights", ",", "lb", ",", "N", "=", "cfs", ".", "get_connect_func", "(", "connect_funct", ")", "(", "ref", "=", "seg_vol", ",", "voxel_node", "=", "voxel_node", ",", "\n", "node_voxel", "=", "node_voxel", ",", "working_nodes", "=", "valid_nodes", ",", "\n", "k_random", "=", "16", ",", "weighting", "=", "wfs", ".", "get_weighting_func", "(", "weight", ")", ",", "\n", "args", "=", "args", ")", "\n", "mask", "=", "gut", ".", "generate_mask", "(", "var_vol", ",", "node_voxel", ")", "# Uncertainty mask", "\n", "# Volume ground truth are represented as nodes in the graph (reference graph)", "\n", "ref_lb", "=", "gut", ".", "reference_to_graph", "(", "reference", ",", "node_voxel", ")", "\n", "\n", "np", ".", "save", "(", "dirs", ".", "GRAPH_PATH", ",", "graph", ")", "\n", "np", ".", "save", "(", "dirs", ".", "WEIGHTS_PATH", ",", "weights", ")", "\n", "np", ".", "save", "(", "dirs", ".", "FEATURES_PATH", ",", "ft_graph", ")", "\n", "np", ".", "save", "(", "dirs", ".", "LABELS_PATH", ",", "lb", ")", "# Node labels from CNN prediction", "\n", "np", ".", "save", "(", "dirs", ".", "Y_TEST_PATH", ",", "ref_lb", ")", "# This is the real ground truth (from the ground truth volume)", "\n", "np", ".", "save", "(", "dirs", ".", "MASK_PATH", ",", "mask", ")", "# Elements that should not be part of training (uncertain points)", "\n", "\n", "print", "(", "\"Final shapes\"", ")", "\n", "print", "(", "\"Graph shape: {}\"", ".", "format", "(", "graph", ".", "shape", ")", ")", "\n", "print", "(", "\"Weight shape: {}\"", ".", "format", "(", "weights", ".", "shape", ")", ")", "\n", "print", "(", "\"Ft shape: {}\"", ".", "format", "(", "ft_graph", ".", "shape", ")", ")", "\n", "print", "(", "\"Train labels shape: {}\"", ".", "format", "(", "lb", ".", "shape", ")", ")", "\n", "print", "(", "\"Ref labels shape: {}\"", ".", "format", "(", "ref_lb", ".", "shape", ")", ")", "\n", "print", "(", "\"Mask (uncertain) shape: {}\"", ".", "format", "(", "mask", ".", "shape", ")", ")", "\n", "print", "(", "\"Num nodes: {}\"", ".", "format", "(", "np", ".", "sum", "(", "valid_nodes", ")", ")", ")", "\n", "print", "(", "\"Num of uncertain nodes: {}. Val: {}\"", ".", "format", "(", "np", ".", "sum", "(", "mask", ")", ",", "np", ".", "sum", "(", "var_vol", ")", ")", ")", "\n", "print", "(", "\"Num certain nodes: {}. Val: {}\"", ".", "format", "(", "N", "-", "np", ".", "sum", "(", "mask", ")", ",", "np", ".", "sum", "(", "valid_nodes", ")", "-", "np", ".", "sum", "(", "var_vol", ")", ")", ")", "\n", "print", "(", "\"Num of positive samples: {}\"", ".", "format", "(", "np", ".", "sum", "(", "lb", "[", "np", ".", "where", "(", "mask", "==", "0", ")", "[", "0", "]", "]", "==", "1", ")", ")", ")", "\n", "print", "(", "\"Num of negative samples: {}\"", ".", "format", "(", "np", ".", "sum", "(", "lb", "[", "np", ".", "where", "(", "mask", "==", "0", ")", "[", "0", "]", "]", "==", "0", ")", ")", ")", "\n", "\n", "info", "=", "{", "\n", "\"N\"", ":", "N", ",", "\n", "\"total_edges\"", ":", "N", ",", "\n", "\"graph_shape\"", ":", "graph", ".", "shape", ",", "\n", "\"weight_shape\"", ":", "weights", ".", "shape", ",", "\n", "\"ft_shape\"", ":", "ft_graph", ".", "shape", ",", "\n", "\"train_labels_shape\"", ":", "lb", ".", "shape", ",", "\n", "\"ref_labels_shape\"", ":", "ref_lb", ".", "shape", ",", "\n", "\"mask_uncertainty_shape\"", ":", "mask", ".", "shape", ",", "\n", "\"num_nodes\"", ":", "np", ".", "sum", "(", "valid_nodes", ")", ",", "\n", "\"num_uncertainty_nodes\"", ":", "np", ".", "sum", "(", "mask", ")", ",", "\n", "\"num_certainty_nodes\"", ":", "N", "-", "np", ".", "sum", "(", "mask", ")", ",", "\n", "\"num_positive_samples\"", ":", "np", ".", "sum", "(", "lb", "[", "np", ".", "where", "(", "mask", "==", "0", ")", "[", "0", "]", "]", "==", "1", ")", ",", "\n", "\"num_negative_samples\"", ":", "np", ".", "sum", "(", "lb", "[", "np", ".", "where", "(", "mask", "==", "0", ")", "[", "0", "]", "]", "==", "0", ")", "\n", "}", "\n", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.gen_graph.reconstruct_segmentation": [[94, 107], ["numpy.load", "numpy.load", "gcn.vol_graph_map", "gcn.reconstruct_from_n6", "range", "cv2.imshow", "cv2.waitKey"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.vol_graph_map", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.reconstruct_from_n6"], ["", "def", "reconstruct_segmentation", "(", ")", ":", "\n", "    ", "labels_path", "=", "dirs", ".", "LABELS_PATH", "\n", "vol_path", "=", "dirs", ".", "ROI_VOLUME", "\n", "\n", "label_graph", "=", "np", ".", "load", "(", "labels_path", ")", "\n", "vol", "=", "np", ".", "load", "(", "vol_path", ")", "\n", "graph_map", "=", "gut", ".", "vol_graph_map", "(", "vol", ".", "shape", ")", "\n", "seg_vol", "=", "gut", ".", "reconstruct_from_n6", "(", "label_graph", ",", "graph_map", ")", "\n", "y", ",", "x", ",", "z", "=", "seg_vol", ".", "shape", "\n", "for", "i", "in", "range", "(", "z", ")", ":", "\n", "        ", "slice", "=", "seg_vol", "[", ":", ",", ":", ",", "i", "]", "\n", "cv2", ".", "imshow", "(", "\"Slice\"", ",", "(", "slice", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "cv2", ".", "waitKey", "(", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.source.gen_graph.load_data_test": [[109, 112], ["gcn.load_data"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.load_data"], ["", "", "def", "load_data_test", "(", ")", ":", "\n", "    ", "d", "=", "gut", ".", "load_data", "(", ")", "\n", "return", "d", "\n", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.UnetConv.__init__": [[8, 17], ["torch.Module.__init__", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet.UnetConv.conv1.weight.data.normal_", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "unet.UnetConv.conv2.weight.data.normal_", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dropout_rate", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "UnetConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout2d", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv1", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "np", ".", "sqrt", "(", "2.", "/", "(", "kernel_size", "*", "kernel_size", "*", "in_channels", ")", ")", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "out_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "self", ".", "conv2", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "np", ".", "sqrt", "(", "2.", "/", "(", "kernel_size", "*", "kernel_size", "*", "out_channels", ")", ")", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.UnetConv.forward": [[18, 29], ["unet.UnetConv.conv1", "unet.UnetConv.bn1", "unet.UnetConv.drop", "torch.relu", "torch.relu", "torch.relu", "unet.UnetConv.conv2", "unet.UnetConv.bn2", "unet.UnetConv.drop", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv1", "(", "x", ")", "\n", "y", "=", "self", ".", "bn1", "(", "y", ")", "\n", "self", ".", "drop", "(", "y", ")", "\n", "y", "=", "functional", ".", "relu", "(", "y", ")", "\n", "\n", "y", "=", "self", ".", "conv2", "(", "y", ")", "\n", "y", "=", "self", ".", "bn2", "(", "y", ")", "\n", "y", "=", "self", ".", "drop", "(", "y", ")", "\n", "y", "=", "functional", ".", "relu", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.UnetDown.__init__": [[32, 37], ["torch.Module.__init__", "unet.UnetConv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dropout_rate", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "UnetDown", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "UnetConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "padding", ",", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.UnetDown.forward": [[38, 42], ["unet.UnetDown.conv", "unet.UnetDown.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ft", "=", "self", ".", "conv", "(", "x", ")", "\n", "y", "=", "self", ".", "pool", "(", "ft", ")", "\n", "return", "y", ",", "ft", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.UnetUp.__init__": [[45, 50], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet.UnetConv"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dropout_rate", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "UnetUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "upconv", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "UnetConv", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "padding", ",", "dropout_rate", "=", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.UnetUp.forward": [[51, 56], ["unet.UnetUp.upconv", "unet.crop_and_concat_tensor", "unet.UnetUp.conv"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.crop_and_concat_tensor"], ["", "def", "forward", "(", "self", ",", "xdown", ",", "xup", ")", ":", "\n", "        ", "y", "=", "self", ".", "upconv", "(", "xup", ")", "\n", "y", "=", "crop_and_concat_tensor", "(", "xdown", ",", "y", ")", "\n", "y", "=", "self", ".", "conv", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.UNet.__init__": [[59, 80], ["torch.Module.__init__", "unet.UnetDown", "unet.UnetDown", "unet.UnetDown", "unet.UnetDown", "unet.UnetConv", "unet.UnetUp", "unet.UnetUp", "unet.UnetUp", "unet.UnetUp", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_classes", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dropout_rate", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "down1", "=", "UnetDown", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "down2", "=", "UnetDown", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "down3", "=", "UnetDown", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "down4", "=", "UnetDown", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "middleconv", "=", "UnetConv", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1024", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "up1", "=", "UnetUp", "(", "in_channels", "=", "1024", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "up2", "=", "UnetUp", "(", "in_channels", "=", "512", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "up3", "=", "UnetUp", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "up4", "=", "UnetUp", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "padding", ",", "\n", "dropout_rate", "=", "dropout_rate", ")", "\n", "self", ".", "outconv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "out_classes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.UNet.forward": [[81, 93], ["unet.UNet.down1", "unet.UNet.down2", "unet.UNet.down3", "unet.UNet.down4", "unet.UNet.middleconv", "unet.UNet.up1", "unet.UNet.up2", "unet.UNet.up3", "unet.UNet.up4", "unet.UNet.outconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", ",", "down1", "=", "self", ".", "down1", "(", "x", ")", "\n", "y", ",", "down2", "=", "self", ".", "down2", "(", "y", ")", "\n", "y", ",", "down3", "=", "self", ".", "down3", "(", "y", ")", "\n", "y", ",", "down4", "=", "self", ".", "down4", "(", "y", ")", "\n", "y", "=", "self", ".", "middleconv", "(", "y", ")", "\n", "y", "=", "self", ".", "up1", "(", "down4", ",", "y", ")", "\n", "y", "=", "self", ".", "up2", "(", "down3", ",", "y", ")", "\n", "y", "=", "self", ".", "up3", "(", "down2", ",", "y", ")", "\n", "ft", "=", "self", ".", "up4", "(", "down1", ",", "y", ")", "\n", "logits", "=", "self", ".", "outconv", "(", "ft", ")", "\n", "return", "logits", ",", "ft", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.crop_and_concat_tensor": [[95, 107], ["torch.cat", "torch.cat", "torch.cat", "x2.size", "x2.size", "x1.size", "x2.size", "x1.size", "x2.size"], "function", ["None"], ["", "", "def", "crop_and_concat_tensor", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"\n    Crops x1 to the x2's size and concatenate the tensors across the channels. Is assumed that x1 is bigger than x2.\n    The tensors have shape [batch, channels, y, x]\n    \"\"\"", "\n", "x_off", "=", "(", "x1", ".", "size", "(", ")", "[", "3", "]", "-", "x2", ".", "size", "(", ")", "[", "3", "]", ")", "//", "2", "\n", "y_off", "=", "(", "x1", ".", "size", "(", ")", "[", "2", "]", "-", "x2", ".", "size", "(", ")", "[", "2", "]", ")", "//", "2", "\n", "xs", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "\n", "ys", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "\n", "x_crop", "=", "x1", "[", ":", ",", ":", ",", "y_off", ":", "y_off", "+", "ys", ",", "x_off", ":", "x_off", "+", "xs", "]", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_crop", ",", "x2", ")", ",", "dim", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.unet.crop_label_to_size": [[109, 121], ["x2.size", "x2.size", "x1.size", "x2.size", "x1.size", "x2.size"], "function", ["None"], ["", "def", "crop_label_to_size", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"\n    Crops x1 (labels shaped [batch, y, x]) to the x2's (logits shaped [batch, c, y, x]) size and\n    concatenate the tensors across the channels. Is assumed that x1 is bigger than x2. The tensors have shape\n    [batch, y, x]\n    \"\"\"", "\n", "x_off", "=", "(", "x1", ".", "size", "(", ")", "[", "2", "]", "-", "x2", ".", "size", "(", ")", "[", "3", "]", ")", "//", "2", "\n", "y_off", "=", "(", "x1", ".", "size", "(", ")", "[", "1", "]", "-", "x2", ".", "size", "(", ")", "[", "2", "]", ")", "//", "2", "\n", "xs", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "\n", "ys", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "\n", "x", "=", "x1", "[", ":", ",", "y_off", ":", "y_off", "+", "ys", ",", "x_off", ":", "x_off", "+", "xs", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.expand_ft_to_size": [[12, 21], ["numpy.zeros"], "function", ["None"], ["def", "expand_ft_to_size", "(", "x", ",", "y", ")", ":", "\n", "\n", "    ", "expanded", "=", "np", ".", "zeros", "(", "(", "x", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ")", ")", "\n", "xoff", "=", "(", "y", ".", "shape", "[", "1", "]", "-", "x", ".", "shape", "[", "2", "]", ")", "//", "2", "\n", "yoff", "=", "(", "y", ".", "shape", "[", "0", "]", "-", "x", ".", "shape", "[", "1", "]", ")", "//", "2", "\n", "xs", "=", "x", ".", "shape", "[", "2", "]", "\n", "ys", "=", "x", ".", "shape", "[", "1", "]", "\n", "expanded", "[", ":", ",", "yoff", ":", "yoff", "+", "ys", ",", "xoff", ":", "xoff", "+", "xs", "]", "=", "x", "\n", "return", "expanded", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.assemble_fts_save": [[23, 35], ["len", "print", "print", "numpy.empty", "range", "range", "numpy.save"], "function", ["None"], ["", "def", "assemble_fts_save", "(", "fts_arr", ",", "save_dir", "=", "None", ")", ":", "\n", "    ", "z", "=", "len", "(", "fts_arr", ")", "\n", "d", ",", "y", ",", "x", "=", "fts_arr", "[", "0", "]", ".", "shape", "\n", "print", "(", "fts_arr", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "z", ")", "\n", "np_vol", "=", "np", ".", "empty", "(", "shape", "=", "(", "y", ",", "x", ",", "z", ",", "d", ")", ",", "dtype", "=", "float", ")", "\n", "for", "i", "in", "range", "(", "z", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "d", ")", ":", "\n", "            ", "np_vol", "[", ":", ",", ":", ",", "i", ",", "j", "]", "=", "fts_arr", "[", "i", "]", "[", "j", ",", ":", ",", ":", "]", "\n", "", "", "if", "save_dir", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "save_dir", ",", "np_vol", ")", "\n", "", "return", "np_vol", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.assemble_vol_save": [[37, 47], ["len", "numpy.empty", "range", "numpy.save"], "function", ["None"], ["", "def", "assemble_vol_save", "(", "vol", ",", "save_dir", "=", "None", ")", ":", "\n", "    ", "z", "=", "len", "(", "vol", ")", "\n", "y", ",", "x", "=", "vol", "[", "0", "]", ".", "shape", "\n", "np_vol", "=", "np", ".", "empty", "(", "shape", "=", "(", "y", ",", "x", ",", "z", ")", ",", "dtype", "=", "float", ")", "\n", "for", "i", "in", "range", "(", "z", ")", ":", "\n", "        ", "np_vol", "[", ":", ",", ":", ",", "i", "]", "=", "vol", "[", "i", "]", "\n", "\n", "", "if", "save_dir", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "save_dir", ",", "np_vol", ")", "\n", "", "return", "np_vol", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.voxel_selection": [[49, 73], ["numpy.load", "numpy.load", "numpy.load", "print", "print", "print", "print", "numpy.ones", "scipy.binary_dilation().astype", "print", "numpy.zeros", "numpy.save", "numpy.save", "utilities.misc.npy_to_nifti", "print", "scipy.binary_dilation", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti"], ["", "def", "voxel_selection", "(", "entropy_th", ",", "ref_shape", ",", "save_prefix", "=", "\"\"", ")", ":", "\n", "    ", "entropy_vol", "=", "np", ".", "load", "(", "dirs", ".", "ENT_PATH", ")", "\n", "probability_vol", "=", "np", ".", "load", "(", "dirs", ".", "E_PATH", ")", "\n", "roi", "=", "np", ".", "load", "(", "dirs", ".", "ROI_LIMITS", ")", "\n", "\n", "print", "(", "\"Selecting Voxels for Graph ROI...\"", ")", "\n", "print", "(", "\"Entropy shape: {}\"", ".", "format", "(", "entropy_vol", ".", "shape", ")", ")", "\n", "print", "(", "\"Probability shape: {}\"", ".", "format", "(", "probability_vol", ".", "shape", ")", ")", "\n", "print", "(", "\"Entropy th is {}\"", ".", "format", "(", "entropy_th", ")", ")", "\n", "bin_entropy", "=", "(", "entropy_vol", ">", "entropy_th", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "bin_prob", "=", "(", "probability_vol", ">", "0.5", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "kernel", "=", "np", ".", "ones", "(", "shape", "=", "(", "5", ",", "7", ",", "7", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "dilated", "=", "ndimage", ".", "binary_dilation", "(", "bin_entropy", ",", "structure", "=", "kernel", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "print", "(", "\"Input nodes: {} reduced to {}\"", ".", "format", "(", "probability_vol", ".", "shape", "[", "0", "]", "*", "probability_vol", ".", "shape", "[", "1", "]", "*", "\n", "probability_vol", ".", "shape", "[", "2", "]", ",", "np", ".", "sum", "(", "dilated", ")", ")", ")", "\n", "\n", "dilated", "=", "(", "(", "dilated", "+", "bin_prob", ")", ">", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "expanded_bin_entropy", "=", "np", ".", "zeros", "(", "shape", "=", "ref_shape", ")", "\n", "expanded_bin_entropy", "[", "roi", "[", "0", "]", ":", "roi", "[", "3", "]", ",", "roi", "[", "1", "]", ":", "roi", "[", "4", "]", ",", "roi", "[", "2", "]", ":", "roi", "[", "5", "]", "]", "=", "bin_entropy", "\n", "np", ".", "save", "(", "dirs", ".", "DILATION_PATH", ",", "dilated", ")", "\n", "np", ".", "save", "(", "dirs", ".", "BIN_ENTROPY", ",", "bin_entropy", ")", "\n", "npy_to_nifti", "(", "expanded_bin_entropy", ",", "dirs", ".", "NIFTI_BIN_ENTROPY", "+", "save_prefix", ")", "\n", "print", "(", "\"done!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.montecarlo_dropout": [[75, 131], ["datetime.datetime.now", "print", "print", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.Sigmoid", "mcunet.assemble_vol_save", "mcunet.assemble_vol_save", "utilities.misc.npy_to_nifti", "numpy.max", "utilities.misc.npy_to_nifti", "numpy.save", "numpy.save", "datetime.datetime.now", "print", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "model.train", "range", "numpy.array", "assemble_vol_save.append", "assemble_vol_save.append", "datetime.datetime.now", "assemble_vol_save.append", "assemble_vol_save.append", "model", "nn.Sigmoid.", "sigm.cpu().numpy", "np.array.append", "numpy.sum", "float", "dlm.expand_to_size_np", "dlm.expand_to_size_np", "numpy.zeros", "numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.log2", "numpy.log2", "sigm.cpu", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.assemble_vol_save", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.mcunet.assemble_vol_save", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.train.train", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.expand_to_size_np", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.expand_to_size_np"], ["", "def", "montecarlo_dropout", "(", "model", ",", "val_dataflow", ",", "device", ",", "num_samples", ",", "roi", ",", "save_prefix", "=", "\"\"", ")", ":", "\n", "    ", "date", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "\"Starting Montecarlo Dropout: {}\"", ".", "format", "(", "date", ")", ")", "\n", "print", "(", "\"Running for {} samples\"", ".", "format", "(", "num_samples", ")", ")", "\n", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "sigm", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "probability_vol", "=", "[", "]", "\n", "entropy_vol", "=", "[", "]", "\n", "slice_counter", "=", "0", "\n", "for", "data_np", ",", "_", "in", "val_dataflow", ":", "\n", "        ", "if", "roi", "is", "not", "None", "and", "not", "(", "roi", "[", "2", "]", "<=", "slice_counter", "<", "roi", "[", "5", "]", ")", ":", "\n", "            ", "probability_vol", ".", "append", "(", "np", ".", "zeros", "(", "data_np", "[", "0", ",", "0", ",", ":", ",", ":", "]", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "entropy_vol", ".", "append", "(", "np", ".", "zeros", "(", "data_np", "[", "0", ",", "0", ",", ":", ",", ":", "]", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", ")", "\n", "slice_counter", "+=", "1", "\n", "continue", "\n", "\n", "", "data_tensor", "=", "torch", ".", "from_numpy", "(", "data_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "mc_outs", "=", "[", "]", "\n", "model", ".", "train", "(", ")", "\n", "for", "t", "in", "range", "(", "num_samples", ")", ":", "\n", "            ", "logits", ",", "_", "=", "model", "(", "data_tensor", ")", "\n", "probabilities_tensor", "=", "sigm", "(", "logits", ")", "\n", "\n", "#           ------------- Visualization of results -------------------------------", "\n", "probabilities", "=", "probabilities_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "mc_outs", ".", "append", "(", "probabilities", "[", "0", "]", ")", "\n", "\n", "", "mc_outs", "=", "np", ".", "array", "(", "mc_outs", ")", "\n", "mc_mat", "=", "np", ".", "sum", "(", "mc_outs", ",", "axis", "=", "0", ",", "dtype", "=", "np", ".", "float", ")", "/", "float", "(", "num_samples", ")", "\n", "probability_vol", ".", "append", "(", "tools", ".", "expand_to_size_np", "(", "mc_mat", "[", "0", "]", ",", "data_np", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ")", "\n", "entropy_mat", "=", "-", "mc_mat", "*", "np", ".", "log2", "(", "mc_mat", "+", "1.0e-15", ")", "-", "(", "1.0", "-", "mc_mat", ")", "*", "np", ".", "log2", "(", "1.0", "-", "mc_mat", "+", "1.0e-15", ")", "\n", "entropy_vol", ".", "append", "(", "tools", ".", "expand_to_size_np", "(", "entropy_mat", "[", "0", "]", ",", "data_np", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ")", "\n", "slice_counter", "+=", "1", "\n", "\n", "", "probability_vol", "=", "assemble_vol_save", "(", "probability_vol", ")", "\n", "entropy_vol", "=", "assemble_vol_save", "(", "entropy_vol", ")", "\n", "entropy_vol", "[", "entropy_vol", "<", "0", "]", "=", "0.0", "\n", "\n", "# Saving the expectation and entropy as NIFTI", "\n", "npy_to_nifti", "(", "probability_vol", "*", "255", ",", "dirs", ".", "NIFTI_E", "+", "save_prefix", ")", "\n", "max_ent", "=", "np", ".", "max", "(", "entropy_vol", ")", "\n", "npy_to_nifti", "(", "(", "entropy_vol", "*", "(", "255", "//", "max_ent", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "dirs", ".", "NIFTI_ENT", "+", "save_prefix", ")", "\n", "\n", "ret_vol", "=", "(", "probability_vol", ">", "0.5", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "#  Getting the expectation and entropy in the ROI, for internal use.", "\n", "if", "roi", "is", "not", "None", ":", "\n", "        ", "probability_vol", "=", "probability_vol", "[", "roi", "[", "0", "]", ":", "roi", "[", "3", "]", ",", "roi", "[", "1", "]", ":", "roi", "[", "4", "]", ",", "roi", "[", "2", "]", ":", "roi", "[", "5", "]", "]", "\n", "entropy_vol", "=", "entropy_vol", "[", "roi", "[", "0", "]", ":", "roi", "[", "3", "]", ",", "roi", "[", "1", "]", ":", "roi", "[", "4", "]", ",", "roi", "[", "2", "]", ":", "roi", "[", "5", "]", "]", "\n", "\n", "", "np", ".", "save", "(", "dirs", ".", "E_PATH", ",", "probability_vol", ")", "\n", "np", ".", "save", "(", "dirs", ".", "ENT_PATH", ",", "entropy_vol", ")", "\n", "total_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "-", "date", "\n", "date", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "\"--------- DONE Montecarlo Dropout --------------\"", ")", "\n", "return", "ret_vol", ".", "shape", "\n", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.dice_score_tensor": [[8, 31], ["torch.sum", "torch.sum", "torch.sum", "torch.mean"], "function", ["None"], ["def", "dice_score_tensor", "(", "reference", ",", "predictions", ")", ":", "\n", "    ", "\"\"\"Computes the dice score for the data and prediction. Tensor shapes are ``[batch, 1, rows, cols]``. The\n    dice score is computed along the batch and is averaged at the end.\n\n    Parameters\n    ----------\n    reference : torch.Tensor\n        The reference data, e.g. a ground truth binary image. Shape is `[batch, 1, rows, cols]`.\n    predictions : torch.Tensor\n        Segmentation predicted for a particular model, with the same shape as input.\n\n    Returns\n    -------\n    tensor\n        A single valued tensor with the average dice score across the elements of the batch.\n    \"\"\"", "\n", "eps", "=", "1.", "\n", "ab", "=", "torch", ".", "sum", "(", "reference", "*", "predictions", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "a", "=", "torch", ".", "sum", "(", "reference", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "b", "=", "torch", ".", "sum", "(", "predictions", ",", "dim", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "dsc", "=", "(", "2", "*", "ab", "+", "eps", ")", "/", "(", "a", "+", "b", "+", "eps", ")", "\n", "dsc", "=", "torch", ".", "mean", "(", "dsc", ")", "\n", "return", "dsc", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.dice_score_np": [[33, 55], ["numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "dice_score_np", "(", "data", ",", "predictions", ")", ":", "\n", "    ", "\"\"\"Computes the dice score between the 2D arrays data and prediction. The shapes for both inputs are\n    ``[rows, cols]``\n\n    Parameters\n    ----------\n    data : numpy.ndarray\n        The reference data, e.g. a ground truth binary image. Shape is `[rows, cols]`.\n    predictions : numpy.ndarray\n        Predicted segmentation from a particular model, with the same shape as input.\n\n    Returns\n    -------\n    float\n        The dice score between the inputs.\n    \"\"\"", "\n", "eps", "=", "1e-9", "\n", "ab", "=", "np", ".", "sum", "(", "data", "*", "predictions", ")", "\n", "a", "=", "np", ".", "sum", "(", "data", ")", "\n", "b", "=", "np", ".", "sum", "(", "predictions", ")", "\n", "dsc", "=", "(", "2", "*", "ab", "+", "eps", ")", "/", "(", "a", "+", "b", "+", "eps", ")", "\n", "return", "dsc", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.expand_to_size_np": [[57, 82], ["numpy.zeros"], "function", ["None"], ["", "def", "expand_to_size_np", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Expand the 2D array ``x`` to the size of the 2D array ``y`` by centering x in the new 2D array and filling with\n    zero the remaining space.\n\n    Parameters\n    ----------\n    x : numpy.ndarray\n        The source 2D array.\n    y : numpy.ndarray\n        The reference 2D array. The dimensions of y must be bigger or equal than the dimensions of x.\n\n    Returns\n    -------\n    numpy.ndarray\n        An array with the same shape of y, the information of x center-aligned and filled with zero in the remaining\n        space.\n\n    \"\"\"", "\n", "expanded", "=", "np", ".", "zeros", "(", "y", ".", "shape", ")", "\n", "x_off", "=", "(", "y", ".", "shape", "[", "1", "]", "-", "x", ".", "shape", "[", "1", "]", ")", "//", "2", "\n", "y_off", "=", "(", "y", ".", "shape", "[", "0", "]", "-", "x", ".", "shape", "[", "0", "]", ")", "//", "2", "\n", "xs", "=", "x", ".", "shape", "[", "1", "]", "\n", "ys", "=", "x", ".", "shape", "[", "0", "]", "\n", "expanded", "[", "y_off", ":", "y_off", "+", "ys", ",", "x_off", ":", "x_off", "+", "xs", "]", "=", "x", "\n", "return", "expanded", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.view_bin_seg_results_np": [[84, 114], ["fcn_tools.expand_to_size_np", "numpy.zeros", "numpy.array", "cv2.normalize", "utilities.three_image_view", "cv2.imshow", "cv2.waitKey", "np.array.astype"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.expand_to_size_np", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.normalize", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.opencvgui.three_image_view"], ["", "def", "view_bin_seg_results_np", "(", "image", ",", "reference", ",", "prediction", ",", "wait_time", "=", "0", ",", "window_name", "=", "\"Results\"", ")", ":", "\n", "    ", "\"\"\"Shows the image, reference and segmentation using opencv based windows.\n\n    Parameters\n    ----------\n    image : numpy.ndarray\n        A numpy array with the input image.\n    reference : numpy.ndarray\n        A numpy array with the binary ground truth.\n    prediction : numpy.ndarray\n        A numpy array with the predicted binary segmentation.\n    wait_time : int\n        The time that the image will be visible.\n    window_name : str\n        A name for the showing window.\n\n    Returns\n    -------\n    None\n    \"\"\"", "\n", "segmentation", "=", "expand_to_size_np", "(", "prediction", ",", "reference", ")", "\n", "im_res", "=", "np", ".", "zeros", "(", "(", "reference", ".", "shape", "[", "0", "]", ",", "reference", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "im_res", "[", "segmentation", "==", "1", "]", "=", "[", "0", ",", "0", ",", "255", "]", "\n", "im_res", "[", "reference", "==", "1", "]", "=", "[", "255", ",", "255", ",", "255", "]", "\n", "im_res", "[", "(", "reference", "*", "segmentation", ")", "==", "1", "]", "=", "[", "0", ",", "255", ",", "0", "]", "\n", "im_show", "=", "np", ".", "array", "(", "image", ")", "\n", "cv2", ".", "normalize", "(", "src", "=", "image", ",", "dst", "=", "im_show", ",", "alpha", "=", "0", ",", "beta", "=", "255", ",", "norm_type", "=", "cv2", ".", "NORM_MINMAX", ")", "\n", "results", "=", "gui", ".", "three_image_view", "(", "im_show", ".", "astype", "(", "np", ".", "uint8", ")", ",", "reference", "*", "255", ",", "im_res", ")", "\n", "cv2", ".", "imshow", "(", "window_name", ",", "results", ")", "\n", "cv2", ".", "waitKey", "(", "wait_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.crop_tensor_to_size_reference": [[117, 139], ["x2.size", "x2.size", "x1.size", "x2.size", "x1.size", "x2.size"], "function", ["None"], ["", "def", "crop_tensor_to_size_reference", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "\"\"\"A center-based crop of x1 (``shaped [batch, c, rows1, cols1]``) to the x2's (shaped ``[batch, c, rows2, cols2]``)\n    size. It is assumed that rows1/cos1 >= rows2/cos2.\n\n    Parameters\n    ----------\n    x1 : torch.Tensor\n        The tensor that will be cropped.\n    x2 : torch.Tensor\n        The reference tensor. The batch size and number of channels must be the same as `x1`.\n\n    Returns\n    -------\n    torch.Tensor\n        A tensor with the content of x1 cropped to the rows and cols of x2.\n    \"\"\"", "\n", "x_off", "=", "(", "x1", ".", "size", "(", ")", "[", "3", "]", "-", "x2", ".", "size", "(", ")", "[", "3", "]", ")", "//", "2", "\n", "y_off", "=", "(", "x1", ".", "size", "(", ")", "[", "2", "]", "-", "x2", ".", "size", "(", ")", "[", "2", "]", ")", "//", "2", "\n", "xs", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "\n", "ys", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "\n", "x", "=", "x1", "[", ":", ",", ":", ",", "y_off", ":", "y_off", "+", "ys", ",", "x_off", ":", "x_off", "+", "xs", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.dsc_logits_to_predictions": [[141, 156], ["torch.sigmoid", "predictions.int"], "function", ["None"], ["", "def", "dsc_logits_to_predictions", "(", "logits", ")", ":", "\n", "    ", "\"\"\"Transforms a [batch, 1, rows, cols] tensor of logits to a [batch, 1, rows, cols] tensor of binary predictions.\n\n    Parameters\n    ----------\n    logits : torch.Tensor\n        Logits obtained by the model\n    Returns\n    -------\n    torch.Tensor\n        A tensor of predictions that can be compared with a reference.\n    \"\"\"", "\n", "probabilities", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "predictions", "=", "probabilities", ">", "mpar", ".", "cnn_th", "\n", "return", "predictions", ".", "int", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.load_chkpnt": [[158, 163], ["print", "torch.load", "model.load_state_dict"], "function", ["None"], ["", "def", "load_chkpnt", "(", "model", ",", "chkp_name", ")", ":", "\n", "    ", "print", "(", "\"Restoring from \"", "+", "chkp_name", ")", "\n", "state", "=", "torch", ".", "load", "(", "chkp_name", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "\"state_dict\"", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.segment_vol": [[165, 189], ["torch.set_grad_enabled", "model.eval", "fcn_tools.segment_vol.assemble_vol"], "function", ["None"], ["", "def", "segment_vol", "(", "model", ",", "logits_to_predictions", ",", "dataflow", ",", "device", ")", ":", "\n", "    ", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "seg_vol", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "for", "data_np", ",", "_", "in", "dataflow", ":", "\n", "        ", "data_tensor", "=", "torch", ".", "from_numpy", "(", "data_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "logits", ",", "_", "=", "model", "(", "data_tensor", ")", "\n", "predictions", "=", "logits_to_predictions", "(", "logits", "=", "logits", ")", "\n", "segmentation", "=", "predictions", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "segmentation", "=", "segmentation", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "#        print(segmentation.shape)", "\n", "expanded_segmentation", "=", "expand_to_size_np", "(", "segmentation", ",", "data_np", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "seg_vol", ".", "append", "(", "expanded_segmentation", ")", "\n", "\n", "", "def", "assemble_vol", "(", "vol", ")", ":", "\n", "        ", "z", "=", "len", "(", "vol", ")", "\n", "y", ",", "x", "=", "vol", "[", "0", "]", ".", "shape", "\n", "np_vol", "=", "np", ".", "empty", "(", "shape", "=", "(", "y", ",", "x", ",", "z", ")", ",", "dtype", "=", "float", ")", "\n", "for", "i", "in", "range", "(", "z", ")", ":", "\n", "            ", "np_vol", "[", ":", ",", ":", ",", "i", "]", "=", "vol", "[", "i", "]", "\n", "", "return", "np_vol", "\n", "\n", "", "ret_vol", "=", "assemble_vol", "(", "seg_vol", ")", "\n", "return", "ret_vol", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.dlm.fcn_tools.segment_vol_logits": [[191, 214], ["torch.set_grad_enabled", "model.eval", "fcn_tools.segment_vol.assemble_vol"], "function", ["None"], ["", "def", "segment_vol_logits", "(", "model", ",", "dataflow", ",", "device", ")", ":", "\n", "    ", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "seg_vol", "=", "[", "]", "\n", "model", ".", "eval", "(", ")", "\n", "for", "data_np", ",", "_", "in", "dataflow", ":", "\n", "        ", "data_tensor", "=", "torch", ".", "from_numpy", "(", "data_np", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "logits", ",", "_", "=", "model", "(", "data_tensor", ")", "\n", "logits", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "segmentation", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "segmentation", "=", "segmentation", "[", "0", "]", "[", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "expanded_segmentation", "=", "expand_to_size_np", "(", "segmentation", ",", "data_np", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", "\n", "seg_vol", ".", "append", "(", "expanded_segmentation", ")", "\n", "\n", "", "def", "assemble_vol", "(", "vol", ")", ":", "\n", "        ", "z", "=", "len", "(", "vol", ")", "\n", "y", ",", "x", "=", "vol", "[", "0", "]", ".", "shape", "\n", "np_vol", "=", "np", ".", "empty", "(", "shape", "=", "(", "y", ",", "x", ",", "z", ")", ",", "dtype", "=", "float", ")", "\n", "for", "i", "in", "range", "(", "z", ")", ":", "\n", "            ", "np_vol", "[", ":", ",", ":", ",", "i", "]", "=", "vol", "[", "i", "]", "\n", "", "return", "np_vol", "\n", "\n", "", "ret_vol", "=", "assemble_vol", "(", "seg_vol", ")", "\n", "return", "ret_vol", "", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.loaders.tploaders.get_pancreas_generator": [[9, 24], ["numpy.load", "numpy.load", "range", "utilities.nparrays.extend2_before", "utilities.nparrays.extend2_before"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.extend2_before", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.extend2_before"], ["def", "get_pancreas_generator", "(", "sample_name", ",", "volumes_path", ",", "references_path", ")", ":", "\n", "    ", "sample_vol_name", "=", "volumes_path", "+", "sample_name", "[", "0", "]", "\n", "reference_vol_name", "=", "references_path", "+", "sample_name", "[", "1", "]", "\n", "\n", "volume", "=", "np", ".", "load", "(", "sample_vol_name", ")", "\n", "reference", "=", "np", ".", "load", "(", "reference_vol_name", ")", "\n", "reference", "[", "reference", "!=", "0", "]", "=", "1", "\n", "y", ",", "x", ",", "z", "=", "volume", ".", "shape", "\n", "\n", "for", "i", "in", "range", "(", "z", ")", ":", "\n", "        ", "vol_slice", "=", "volume", "[", ":", ",", ":", ",", "i", "]", "\n", "reference_slice", "=", "reference", "[", ":", ",", ":", ",", "i", "]", "\n", "vol_slice", "=", "arrtools", ".", "extend2_before", "(", "vol_slice", ")", "\n", "reference_slice", "=", "arrtools", ".", "extend2_before", "(", "reference_slice", ")", "\n", "yield", "[", "vol_slice", ",", "reference_slice", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.connectivity.connect_n6_krandom": [[5, 74], ["numpy.array", "numpy.transpose", "range", "numpy.asarray", "weighting.post_process", "weighting.get_weights", "gcn.sparse_to_tuple", "numpy.where", "labels.append", "range", "range", "numpy.asarray", "int", "int", "int", "numpy.random.randint", "weighting.weights_for", "weighting.weights_for", "np.asarray.append", "np.asarray.append", "weighting.weights_for", "weighting.weights_for", "np.asarray.append", "np.asarray.append"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.Weighting1.post_process", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.BasicWeighting.get_weights", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.sparse_to_tuple", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.Weighting1.weights_for", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.Weighting1.weights_for", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.Weighting1.weights_for", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.Weighting1.weights_for"], ["def", "connect_n6_krandom", "(", "ref", ",", "voxel_node", ",", "node_voxel", ",", "working_nodes", ",", "k_random", ",", "weighting", ",", "args", ")", ":", "\n", "    ", "edges", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "num_nodes", "=", "node_voxel", ".", "shape", "[", "0", "]", "\n", "tabu_list", "=", "{", "}", "# A list to avoid duplicated elements in the adjacency matrix.", "\n", "nodes_complete", "=", "{", "}", "# A list counting how many neighbors a node already has.", "\n", "valid_nodes", "=", "np", ".", "array", "(", "np", ".", "where", "(", "working_nodes", ">", "0", ")", ")", "\n", "valid_nodes", "=", "np", ".", "transpose", "(", "valid_nodes", ")", "\n", "\n", "for", "node_idx", "in", "range", "(", "num_nodes", ")", ":", "\n", "        ", "y", ",", "x", ",", "z", "=", "node_voxel", "[", "node_idx", "]", "# getting the 3d position for current node", "\n", "labels", ".", "append", "(", "ref", "[", "y", ",", "x", ",", "z", "]", ")", "# Labels come from the CNN prediction", "\n", "#   Basic n6 connectivity", "\n", "for", "axis", "in", "range", "(", "3", ")", ":", "\n", "            ", "axisy", "=", "int", "(", "axis", "==", "0", ")", "\n", "axisx", "=", "int", "(", "axis", "==", "1", ")", "\n", "axisz", "=", "int", "(", "axis", "==", "2", ")", "\n", "for", "ne", "in", "[", "-", "1", ",", "1", "]", ":", "\n", "                ", "neighbor", "=", "y", "+", "axisy", "*", "ne", ",", "x", "+", "axisx", "*", "ne", ",", "z", "+", "axisz", "*", "ne", "\n", "if", "neighbor", "not", "in", "voxel_node", ":", "\n", "                    ", "continue", "\n", "", "ne_idx", "=", "voxel_node", "[", "neighbor", "]", "\n", "if", "(", "node_idx", ",", "ne_idx", ")", "not", "in", "tabu_list", "and", "(", "ne_idx", ",", "node_idx", ")", "not", "in", "tabu_list", ":", "\n", "                    ", "tabu_list", "[", "(", "node_idx", ",", "ne_idx", ")", "]", "=", "1", "# adding the edge to the tabu list", "\n", "weighting", ".", "weights_for", "(", "(", "y", ",", "x", ",", "z", ")", ",", "neighbor", ",", "args", ")", "# computing the weight for the current pair.", "\n", "weighting", ".", "weights_for", "(", "neighbor", ",", "(", "y", ",", "x", ",", "z", ")", ",", "args", ")", "# computing the weight for the current pair.", "\n", "edges", ".", "append", "(", "[", "node_idx", ",", "ne_idx", "]", ")", "\n", "#                   Adding the edge in the opposite direction.", "\n", "edges", ".", "append", "(", "[", "ne_idx", ",", "node_idx", "]", ")", "\n", "#       Generating random connections to current node.", "\n", "", "", "", "for", "j", "in", "range", "(", "k_random", ")", ":", "\n", "            ", "valid_neigh", "=", "False", "\n", "if", "node_idx", "not", "in", "nodes_complete", ":", "\n", "                ", "nodes_complete", "[", "node_idx", "]", "=", "0", "\n", "", "elif", "nodes_complete", "[", "node_idx", "]", "==", "k_random", ":", "\n", "                ", "break", "\n", "\n", "", "while", "not", "valid_neigh", ":", "\n", "                ", "lu_idx", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "num_nodes", ")", "# we look for a random node.", "\n", "yl", ",", "xl", ",", "zl", "=", "valid_nodes", "[", "lu_idx", "]", "# getting the euclidean coordinates for the voxel.", "\n", "lu_idx", "=", "voxel_node", "[", "yl", ",", "xl", ",", "zl", "]", "# getting the node index.", "\n", "if", "lu_idx", "not", "in", "nodes_complete", ":", "\n", "                    ", "nodes_complete", "[", "lu_idx", "]", "=", "0", "\n", "valid_neigh", "=", "True", "\n", "", "elif", "nodes_complete", "[", "lu_idx", "]", "<", "k_random", ":", "\n", "                    ", "valid_neigh", "=", "True", "\n", "\n", "", "", "if", "not", "(", "node_idx", ",", "lu_idx", ")", "in", "tabu_list", "and", "not", "(", "lu_idx", ",", "node_idx", ")", "in", "tabu_list", "and", "node_idx", "!=", "lu_idx", ":", "# checking if the edge was already generated", "\n", "                ", "weighting", ".", "weights_for", "(", "(", "y", ",", "x", ",", "z", ")", ",", "(", "yl", ",", "xl", ",", "zl", ")", ",", "args", ")", "# computing the weight for the current pair.", "\n", "weighting", ".", "weights_for", "(", "(", "yl", ",", "xl", ",", "zl", ")", ",", "(", "y", ",", "x", ",", "z", ")", ",", "args", ")", "\n", "tabu_list", "[", "(", "node_idx", ",", "lu_idx", ")", "]", "=", "1", "\n", "edges", ".", "append", "(", "[", "node_idx", ",", "lu_idx", "]", ")", "\n", "#  Adding the weight in the opposite direction", "\n", "edges", ".", "append", "(", "[", "lu_idx", ",", "node_idx", "]", ")", "\n", "#  Increasing the amount of neighbors connected to each node", "\n", "nodes_complete", "[", "node_idx", "]", "+=", "1", "\n", "nodes_complete", "[", "lu_idx", "]", "+=", "1", "\n", "", "", "", "edges", "=", "np", ".", "asarray", "(", "edges", ",", "dtype", "=", "int", ")", "\n", "pp_args", "=", "{", "\n", "\"edges\"", ":", "edges", ",", "\n", "\"num_nodes\"", ":", "num_nodes", "\n", "}", "\n", "weighting", ".", "post_process", "(", "pp_args", ")", "# Applying weight post-processing, e.g. normalization", "\n", "weights", "=", "weighting", ".", "get_weights", "(", ")", "\n", "edges", ",", "weights", ",", "_", "=", "gut", ".", "sparse_to_tuple", "(", "weights", ")", "\n", "\n", "return", "edges", ",", "weights", ",", "np", ".", "asarray", "(", "labels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.connectivity.get_connect_func": [[76, 81], ["None"], "function", ["None"], ["", "def", "get_connect_func", "(", "cf_id", ")", ":", "\n", "    ", "if", "cf_id", "==", "1", ":", "\n", "        ", "return", "connect_n6_krandom", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.models.GCN.__init__": [[8, 14], ["torch.Module.__init__", "gcn.layers.GraphConvolution", "gcn.layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "nhid", ",", "nclass", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.models.GCN.forward": [[15, 20], ["torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "models.GCN.gc2", "models.GCN.gc1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "adj", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "adj", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "adj", ")", "\n", "return", "torch", ".", "sigmoid", "(", "x", ")", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.train.train": [[63, 87], ["time.time", "model.train", "optimizer.zero_grad", "model", "torch.nll_loss", "gcn.utils.accuracy", "F.nll_loss.backward", "optimizer.step", "torch.nll_loss", "gcn.utils.accuracy", "print", "model.eval", "model", "F.nll_loss.item", "gcn.utils.accuracy.item", "F.nll_loss.item", "gcn.utils.accuracy.item", "time.time"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.train.train", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.accuracy", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.accuracy"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "t", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "acc_train", "=", "accuracy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "not", "args", ".", "fastmode", ":", "\n", "# Evaluate validation set performance separately,", "\n", "# deactivates dropout during validation run.", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "\n", "", "loss_val", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "print", "(", "'Epoch: {:04d}'", ".", "format", "(", "epoch", "+", "1", ")", ",", "\n", "'loss_train: {:.4f}'", ".", "format", "(", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_train: {:.4f}'", ".", "format", "(", "acc_train", ".", "item", "(", ")", ")", ",", "\n", "'loss_val: {:.4f}'", ".", "format", "(", "loss_val", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ".", "item", "(", ")", ")", ",", "\n", "'time: {:.4f}s'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.train.test": [[89, 97], ["model.eval", "model", "torch.nll_loss", "gcn.utils.accuracy", "print", "F.nll_loss.item", "gcn.utils.accuracy.item"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.accuracy"], ["", "def", "test", "(", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "output", "=", "model", "(", "features", ",", "adj", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "accuracy", "(", "output", "[", "idx_test", "]", ",", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.BasicWeighting.__init__": [[7, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "w_id", ")", ":", "\n", "        ", "self", ".", "description", "=", "\"All edges are weighted as 1\"", "\n", "self", ".", "id", "=", "w_id", "\n", "self", ".", "weights", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.BasicWeighting.weights_for": [[12, 14], ["weighting.BasicWeighting.weights.append"], "methods", ["None"], ["", "def", "weights_for", "(", "self", ",", "idx1", ",", "idx2", ",", "args", ")", ":", "\n", "        ", "self", ".", "weights", ".", "append", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.BasicWeighting.post_process": [[15, 20], ["numpy.asarray", "scipy.coo_matrix"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "weights", "=", "np", ".", "asarray", "(", "self", ".", "weights", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "num_nodes", "=", "args", "[", "\"num_nodes\"", "]", "\n", "w1", "=", "sp", ".", "coo_matrix", "(", "(", "self", ".", "weights", ",", "(", "args", "[", "\"edges\"", "]", "[", ":", ",", "0", "]", ",", "args", "[", "\"edges\"", "]", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "self", ".", "weights", "=", "w1", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.BasicWeighting.get_weights": [[21, 23], ["None"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.BasicWeighting.get_id": [[24, 26], ["None"], "methods", ["None"], ["", "def", "get_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.BasicWeighting.get_description": [[27, 30], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "get_description", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "description", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.Weighting1.__init__": [[33, 39], ["weighting.BasicWeighting.__init__"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__"], ["    ", "def", "__init__", "(", "self", ",", "w_id", ")", ":", "\n", "        ", "super", "(", "Weighting1", ",", "self", ")", ".", "__init__", "(", "w_id", "=", "w_id", ")", "\n", "self", ".", "description", "=", "\"l*div + e(int) + e(pos)\"", "\n", "self", ".", "weights1", "=", "[", "]", "\n", "self", ".", "weights2", "=", "[", "]", "\n", "self", ".", "weights3", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.Weighting1.weights_for": [[40, 60], ["numpy.array", "numpy.sum", "numpy.sum", "weighting.Weighting1.weights1.append", "weighting.Weighting1.weights2.append", "weighting.Weighting1.weights3.append", "numpy.array", "numpy.array", "numpy.log2", "numpy.log2"], "methods", ["None"], ["", "def", "weights_for", "(", "self", ",", "idx1", ",", "idx2", ",", "args", ")", ":", "\n", "        ", "prob1", "=", "args", "[", "\"probability\"", "]", "[", "idx1", "]", "\n", "prob2", "=", "args", "[", "\"probability\"", "]", "[", "idx2", "]", "\n", "int1", "=", "args", "[", "\"volume\"", "]", "[", "idx1", "]", "\n", "int2", "=", "args", "[", "\"volume\"", "]", "[", "idx2", "]", "\n", "ny", ",", "nx", ",", "nz", "=", "args", "[", "\"volume\"", "]", ".", "shape", "\n", "dim_array", "=", "np", ".", "array", "(", "[", "ny", ",", "nx", ",", "nz", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pos1", "=", "np", ".", "array", "(", "idx1", ",", "dtype", "=", "np", ".", "float32", ")", "/", "dim_array", "\n", "pos2", "=", "np", ".", "array", "(", "idx2", ",", "dtype", "=", "np", ".", "float32", ")", "/", "dim_array", "\n", "#       Computing the weight", "\n", "int_diff", "=", "int1", "-", "int2", "\n", "pos_diff", "=", "pos1", "-", "pos2", "\n", "intensity", "=", "np", ".", "sum", "(", "int_diff", "*", "int_diff", ")", "\n", "space", "=", "np", ".", "sum", "(", "pos_diff", "*", "pos_diff", ")", "\n", "p", "=", "prob1", "-", "prob2", "\n", "delta", "=", "1.0e-15", "\n", "lambd", "=", "p", "*", "(", "np", ".", "log2", "(", "prob1", "/", "(", "prob2", "+", "delta", ")", "+", "delta", ")", "-", "np", ".", "log2", "(", "(", "1", "-", "prob1", ")", "/", "(", "(", "1", "-", "prob2", ")", "+", "delta", ")", "+", "delta", ")", ")", "\n", "self", ".", "weights1", ".", "append", "(", "lambd", ")", "\n", "self", ".", "weights2", ".", "append", "(", "intensity", ")", "\n", "self", ".", "weights3", ".", "append", "(", "space", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.Weighting1.post_process": [[61, 81], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "float", "numpy.exp", "numpy.exp", "scipy.coo_matrix", "scipy.coo_matrix", "scipy.coo_matrix", "weighting.Weighting1.weights2.sum", "weighting.Weighting1.weights3.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "post_process", "(", "self", ",", "args", "=", "None", ")", ":", "\n", "        ", "self", ".", "weights1", "=", "np", ".", "asarray", "(", "self", ".", "weights1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "weights2", "=", "np", ".", "asarray", "(", "self", ".", "weights2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "weights3", "=", "np", ".", "asarray", "(", "self", ".", "weights3", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "num_nodes", "=", "args", "[", "\"num_nodes\"", "]", "\n", "ne", "=", "float", "(", "self", ".", "weights1", ".", "shape", "[", "0", "]", ")", "\n", "muw2", "=", "self", ".", "weights2", ".", "sum", "(", ")", "/", "ne", "\n", "muw3", "=", "self", ".", "weights3", ".", "sum", "(", ")", "/", "ne", "\n", "\n", "sig2", "=", "2", "*", "np", ".", "sum", "(", "(", "self", ".", "weights2", "-", "muw2", ")", "**", "2", ")", "/", "ne", "\n", "sig3", "=", "2", "*", "np", ".", "sum", "(", "(", "self", ".", "weights3", "-", "muw3", ")", "**", "2", ")", "/", "ne", "\n", "\n", "self", ".", "weights2", "=", "np", ".", "exp", "(", "-", "self", ".", "weights2", "/", "sig2", ")", "\n", "self", ".", "weights3", "=", "np", ".", "exp", "(", "-", "self", ".", "weights3", "/", "sig3", ")", "\n", "\n", "w1", "=", "sp", ".", "coo_matrix", "(", "(", "self", ".", "weights1", ",", "(", "args", "[", "\"edges\"", "]", "[", ":", ",", "0", "]", ",", "args", "[", "\"edges\"", "]", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "w2", "=", "sp", ".", "coo_matrix", "(", "(", "self", ".", "weights2", ",", "(", "args", "[", "\"edges\"", "]", "[", ":", ",", "0", "]", ",", "args", "[", "\"edges\"", "]", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "w3", "=", "sp", ".", "coo_matrix", "(", "(", "self", ".", "weights3", ",", "(", "args", "[", "\"edges\"", "]", "[", ":", ",", "0", "]", ",", "args", "[", "\"edges\"", "]", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "\n", "self", ".", "weights", "=", "0.5", "*", "w1", "+", "w2", "+", "w3", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.weighting.get_weighting_func": [[83, 89], ["weighting.BasicWeighting", "weighting.Weighting1"], "function", ["None"], ["", "", "def", "get_weighting_func", "(", "w_id", ")", ":", "\n", "    ", "if", "w_id", "==", "0", ":", "\n", "        ", "return", "BasicWeighting", "(", "w_id", ")", "\n", "", "if", "w_id", "==", "1", ":", "\n", "        ", "return", "Weighting1", "(", "w_id", "=", "1", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__": [[16, 26], ["torch.nn.modules.module.Module.__init__", "torch.nn.parameter.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__init__", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.reset_parameters": [[27, 32], ["layers.GraphConvolution.weight.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.forward": [[33, 40], ["torch.mm", "torch.spmm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "spmm", "(", "adj", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.layers.GraphConvolution.__repr__": [[41, 45], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.add_feature": [[7, 12], ["len", "numpy.expand_dims", "numpy.concatenate"], "function", ["None"], ["def", "add_feature", "(", "add_vol", ",", "ft_vol", ")", ":", "\n", "    ", "axis", "=", "len", "(", "add_vol", ".", "shape", ")", "\n", "new_fts", "=", "np", ".", "expand_dims", "(", "add_vol", ",", "axis", "=", "axis", ")", "\n", "ret_fts", "=", "np", ".", "concatenate", "(", "(", "ft_vol", ",", "new_fts", ")", ",", "axis", "=", "axis", ")", "\n", "return", "ret_fts", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.map_voxel_nodes": [[14, 45], ["numpy.sum", "numpy.zeros", "range", "include_nodes.astype", "range", "range"], "function", ["None"], ["", "def", "map_voxel_nodes", "(", "shape", ",", "include_nodes", ")", ":", "\n", "    ", "\"\"\"\n    Assigns one node id to the valid nodes of a volume with certain shape.\n    Parameters\n    ----------\n    shape : tuple\n        The original shape of the input volume\n    include_nodes : numpy.ndarray\n        A binary array used to indicate the voxels that should be considered in the graph\n\n    Returns\n    -------\n    tuple\n        A tuple containing a dictionary tha maps voxels coordinates to node index and an array containing the map from\n        node index to 3D coordinates.\n\n    \"\"\"", "\n", "ys", ",", "xs", ",", "zs", "=", "shape", "\n", "N", "=", "np", ".", "sum", "(", "include_nodes", ".", "astype", "(", "np", ".", "int", ")", ")", "\n", "voxel_node", "=", "{", "}", "\n", "node_voxel", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "node_index", "=", "0", "\n", "for", "z", "in", "range", "(", "zs", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "ys", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "xs", ")", ":", "\n", "                ", "if", "not", "include_nodes", "[", "y", ",", "x", ",", "z", "]", ":", "\n", "                    ", "continue", "\n", "", "node_voxel", "[", "node_index", "]", "=", "[", "y", ",", "x", ",", "z", "]", "\n", "voxel_node", "[", "y", ",", "x", ",", "z", "]", "=", "node_index", "\n", "node_index", "+=", "1", "\n", "", "", "", "return", "voxel_node", ",", "node_voxel", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.reference_to_graph": [[47, 54], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "reference_to_graph", "(", "vol", ",", "node_voxel", ")", ":", "\n", "    ", "N", "=", "node_voxel", ".", "shape", "[", "0", "]", "\n", "labels", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "node_idx", "in", "range", "(", "N", ")", ":", "\n", "        ", "y", ",", "x", ",", "z", "=", "node_voxel", "[", "node_idx", "]", "\n", "labels", "[", "node_idx", "]", "=", "vol", "[", "y", ",", "x", ",", "z", "]", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.graph_fts": [[56, 64], ["numpy.zeros", "range"], "function", ["None"], ["", "def", "graph_fts", "(", "fts", ",", "node_voxel", ")", ":", "\n", "    ", "N", "=", "node_voxel", ".", "shape", "[", "0", "]", "\n", "K", "=", "fts", ".", "shape", "[", "3", "]", "# number of features per node.", "\n", "ft_mat", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "node_idx", "in", "range", "(", "N", ")", ":", "\n", "        ", "y", ",", "x", ",", "z", "=", "node_voxel", "[", "node_idx", "]", "\n", "ft_mat", "[", "node_idx", ",", ":", "]", "=", "fts", "[", "y", ",", "x", ",", "z", ",", ":", "]", "\n", "", "return", "ft_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.vol_graph_map": [[66, 80], ["numpy.zeros", "range", "range", "range"], "function", ["None"], ["", "def", "vol_graph_map", "(", "shape", ",", "include_nodes", ")", ":", "\n", "    ", "ys", "=", "shape", "[", "0", "]", "\n", "xs", "=", "shape", "[", "1", "]", "\n", "zs", "=", "shape", "[", "2", "]", "\n", "N", "=", "ys", "*", "xs", "*", "zs", "\n", "graph_vox", "=", "np", ".", "zeros", "(", "shape", "=", "(", "N", ",", "3", ")", ",", "dtype", "=", "np", ".", "int32", ")", "# a map between node index and voxel position.", "\n", "for", "z", "in", "range", "(", "zs", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "ys", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "xs", ")", ":", "\n", "                ", "if", "include_nodes", "is", "not", "None", "and", "not", "include_nodes", "[", "y", ",", "x", ",", "z", "]", ":", "\n", "                    ", "continue", "\n", "", "node_idx", "=", "z", "*", "ys", "*", "xs", "+", "y", "*", "xs", "+", "x", "\n", "graph_vox", "[", "node_idx", "]", "=", "[", "y", ",", "x", ",", "z", "]", "\n", "", "", "", "return", "graph_vox", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.reconstruct_from_n6": [[82, 90], ["numpy.zeros", "range", "dtype"], "function", ["None"], ["", "def", "reconstruct_from_n6", "(", "ft_mat", ",", "map_vector", ",", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "ys", ",", "xs", ",", "zs", "=", "shape", "\n", "N", "=", "map_vector", ".", "shape", "[", "0", "]", "\n", "rec_vol", "=", "np", ".", "zeros", "(", "shape", "=", "(", "ys", ",", "xs", ",", "zs", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "y", ",", "x", ",", "z", "=", "map_vector", "[", "i", "]", "\n", "rec_vol", "[", "y", ",", "x", ",", "z", "]", "=", "dtype", "(", "ft_mat", "[", "i", "]", ")", "\n", "", "return", "rec_vol", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.show_mask_graph": [[92, 100], ["numpy.zeros", "range", "numpy.uint8", "int", "numpy.uint8", "numpy.uint8"], "function", ["None"], ["", "def", "show_mask_graph", "(", "y_val", ",", "map_vector", ",", "mask", ")", ":", "\n", "    ", "ys", ",", "xs", ",", "zs", "=", "map_vector", "[", "-", "1", "]", "+", "1", "\n", "N", "=", "y_val", ".", "shape", "[", "0", "]", "\n", "rec_vol", "=", "np", ".", "zeros", "(", "shape", "=", "(", "ys", ",", "xs", ",", "zs", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "rec_vol", "[", "map_vector", "[", "i", ",", "0", "]", ",", "map_vector", "[", "i", ",", "1", "]", ",", "map_vector", "[", "i", ",", "2", "]", "]", "=", "np", ".", "uint8", "(", "\n", "int", "(", "mask", "[", "i", "]", ">", "0", ")", "*", "(", "np", ".", "uint8", "(", "y_val", "[", "i", "]", ")", "*", "255", "+", "(", "1", "-", "np", ".", "uint8", "(", "y_val", "[", "i", "]", ")", ")", "*", "100", ")", ")", "\n", "", "return", "rec_vol", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.generate_mask": [[103, 110], ["numpy.zeros", "range", "float"], "function", ["None"], ["", "def", "generate_mask", "(", "unc_vol", ",", "node_voxel", ",", "th", "=", "0", ")", ":", "\n", "    ", "num_nodes", "=", "node_voxel", ".", "shape", "[", "0", "]", "\n", "mask", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_nodes", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "node_idx", "in", "range", "(", "num_nodes", ")", ":", "\n", "        ", "y", ",", "x", ",", "z", "=", "node_voxel", "[", "node_idx", "]", "\n", "mask", "[", "node_idx", "]", "=", "float", "(", "unc_vol", "[", "y", ",", "x", ",", "z", "]", ">", "th", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.encode_onehot": [[112, 119], ["set", "numpy.array", "list", "numpy.identity", "enumerate", "map", "len"], "function", ["None"], ["", "def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "classes", "=", "set", "(", "labels", ")", "\n", "classes_dict", "=", "{", "c", ":", "np", ".", "identity", "(", "len", "(", "classes", ")", ")", "[", "i", ",", ":", "]", "for", "i", ",", "c", "in", "\n", "enumerate", "(", "classes", ")", "}", "\n", "labels_onehot", "=", "np", ".", "array", "(", "list", "(", "map", "(", "classes_dict", ".", "get", ",", "labels", ")", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.load_data": [[121, 169], ["print", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "scipy.coo_matrix", "scipy.coo_matrix", "numpy.random.uniform", "utils.normalize", "utils.normalize_adj", "numpy.where", "print", "print", "print", "print", "print", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "utils.sparse_mx_to_torch_sparse_tensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.where", "numpy.array", "scipy.eye", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "torch.FloatTensor.todense", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.normalize", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.normalize_adj", "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.sparse_mx_to_torch_sparse_tensor"], ["", "def", "load_data", "(", ")", ":", "\n", "    ", "print", "(", "\"Loading graph data\"", ")", "\n", "val_portion", "=", "0.2", "\n", "\n", "graph_path", "=", "dirs", ".", "GRAPH_PATH", "\n", "weights_path", "=", "dirs", ".", "WEIGHTS_PATH", "\n", "features_path", "=", "dirs", ".", "FEATURES_PATH", "\n", "labels_path", "=", "dirs", ".", "LABELS_PATH", "\n", "mask_path", "=", "dirs", ".", "MASK_PATH", "# Elements that should not be part of training but used for testing", "\n", "y_test_path", "=", "dirs", ".", "Y_TEST_PATH", "# True labels, according with the reference ground truth", "\n", "\n", "graph", "=", "np", ".", "load", "(", "graph_path", ")", "\n", "weights", "=", "np", ".", "load", "(", "weights_path", ")", "\n", "features", "=", "np", ".", "load", "(", "features_path", ")", "\n", "y_test", "=", "np", ".", "load", "(", "y_test_path", ")", "# True labels, according with the reference ground truth", "\n", "test_mask", "=", "np", ".", "load", "(", "mask_path", ")", "# Elements that should not be part of training but used for testing", "\n", "full_mask", "=", "1", "-", "test_mask", "# Elements that will be used for training the model", "\n", "\n", "labels", "=", "np", ".", "load", "(", "labels_path", ")", "# All the predicted (from model) labels are included here.", "\n", "num_nodes", "=", "labels", ".", "shape", "[", "0", "]", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "(", "weights", ",", "(", "graph", "[", ":", ",", "0", "]", ",", "graph", "[", ":", ",", "1", "]", ")", ")", ",", "shape", "=", "(", "num_nodes", ",", "num_nodes", ")", ")", "\n", "features", "=", "sp", ".", "coo_matrix", "(", "features", ")", "\n", "working_nodes", "=", "np", ".", "where", "(", "full_mask", "!=", "0", ")", "[", "0", "]", "\n", "random_arr", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "1", ",", "size", "=", "working_nodes", ".", "shape", ")", "\n", "\n", "features", "=", "normalize", "(", "features", ")", "\n", "adj", "=", "normalize_adj", "(", "adj", "+", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "idx_train", "=", "working_nodes", "[", "random_arr", ">", "val_portion", "]", "\n", "idx_val", "=", "working_nodes", "[", "random_arr", "<=", "val_portion", "]", "\n", "idx_test", "=", "np", ".", "where", "(", "test_mask", "!=", "0", ")", "\n", "\n", "print", "(", "\"Num nodes: {}\"", ".", "format", "(", "num_nodes", ")", ")", "\n", "print", "(", "\"Num of uncertain nodes: {}.\"", ".", "format", "(", "np", ".", "sum", "(", "test_mask", ")", ")", ")", "\n", "print", "(", "\"Num certain nodes: {}.\"", ".", "format", "(", "np", ".", "sum", "(", "full_mask", ")", ")", ")", "\n", "print", "(", "\"Num of positive samples: {}\"", ".", "format", "(", "np", ".", "sum", "(", "labels", "[", "np", ".", "where", "(", "full_mask", "!=", "0", ")", "[", "0", "]", "]", "==", "1", ")", ")", ")", "\n", "print", "(", "\"Num of negative samples: {}\"", ".", "format", "(", "np", ".", "sum", "(", "labels", "[", "np", ".", "where", "(", "full_mask", "!=", "0", ")", "[", "0", "]", "]", "==", "0", ")", ")", ")", "\n", "\n", "features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "array", "(", "features", ".", "todense", "(", ")", ")", ")", "\n", "labels", "=", "torch", ".", "FloatTensor", "(", "labels", ")", "\n", "y_test", "=", "torch", ".", "FloatTensor", "(", "y_test", "[", ":", ",", "0", "]", ")", "\n", "adj", "=", "sparse_mx_to_torch_sparse_tensor", "(", "adj", ")", "\n", "\n", "idx_train", "=", "torch", ".", "LongTensor", "(", "idx_train", ")", "\n", "idx_val", "=", "torch", ".", "LongTensor", "(", "idx_val", ")", "\n", "idx_test", "=", "torch", ".", "LongTensor", "(", "idx_test", "[", "0", "]", ")", "\n", "\n", "return", "adj", ",", "features", ",", "labels", ",", "y_test", ",", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.normalize": [[171, 179], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "normalize", "(", "mx", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "mx", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "mx", "=", "r_mat_inv", ".", "dot", "(", "mx", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.normalize_adj": [[181, 188], ["numpy.array", "numpy.power().flatten", "scipy.diags", "adj.dot().transpose().dot().tocoo", "adj.sum", "numpy.power", "numpy.isinf", "adj.dot().transpose().dot", "adj.dot().transpose", "adj.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.normalize_adj2": [[190, 197], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().tocoo", "adj.sum", "numpy.power", "numpy.isinf", "sp.diags.dot"], "function", ["None"], ["", "def", "normalize_adj2", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Row-normalize sparse matrix for directed graphs\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "return", "d_mat_inv", ".", "dot", "(", "adj", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.accuracy": [[199, 204], ["preds.eq().double", "correct.sum.sum", "len", "preds.eq"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "preds", "=", "(", "output", ">", "0.5", ")", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.sparse_mx_to_torch_sparse_tensor": [[206, 214], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "torch", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.gcn.utils.sparse_to_tuple": [[216, 233], ["isinstance", "numpy.vstack().transpose", "range", "utils.sparse_to_tuple.to_tuple"], "function", ["None"], ["", "def", "sparse_to_tuple", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert sparse matrix to tuple representation.\"\"\"", "\n", "def", "to_tuple", "(", "mx", ")", ":", "\n", "        ", "if", "not", "sp", ".", "isspmatrix_coo", "(", "mx", ")", ":", "\n", "            ", "mx", "=", "mx", ".", "tocoo", "(", ")", "\n", "", "coords", "=", "np", ".", "vstack", "(", "(", "mx", ".", "row", ",", "mx", ".", "col", ")", ")", ".", "transpose", "(", ")", "\n", "values", "=", "mx", ".", "data", "\n", "shape", "=", "mx", ".", "shape", "\n", "return", "coords", ",", "values", ",", "shape", "\n", "\n", "", "if", "isinstance", "(", "sparse_mx", ",", "list", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sparse_mx", ")", ")", ":", "\n", "            ", "sparse_mx", "[", "i", "]", "=", "to_tuple", "(", "sparse_mx", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "sparse_mx", "=", "to_tuple", "(", "sparse_mx", ")", "\n", "\n", "", "return", "sparse_mx", "\n", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.opencvgui.two_image_view": [[8, 36], ["numpy.zeros", "len", "cv2.cvtColor", "len", "cv2.cvtColor"], "function", ["None"], ["def", "two_image_view", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "\"\"\"\n    Combines img1 and img2 into a single image.\n    Parameters\n    ----------\n    img1, img2: cv.mat\n        Images to be combined. uint8 single or rgb channel.\n    Returns\n    -------\n    cv.mat\n        The combined image in format [img1 | img2].\n    \"\"\"", "\n", "if", "len", "(", "img1", ".", "shape", ")", "<", "3", ":", "\n", "        ", "img1", "=", "cv", ".", "cvtColor", "(", "img1", ",", "cv", ".", "COLOR_GRAY2BGR", ")", "\n", "", "if", "len", "(", "img2", ".", "shape", ")", "<", "3", ":", "\n", "        ", "img2", "=", "cv", ".", "cvtColor", "(", "img2", ",", "cv", ".", "COLOR_GRAY2BGR", ")", "\n", "", "r1", "=", "img1", ".", "shape", "[", "0", "]", "\n", "c1", "=", "img1", ".", "shape", "[", "1", "]", "\n", "r2", "=", "img2", ".", "shape", "[", "0", "]", "\n", "c2", "=", "img2", ".", "shape", "[", "1", "]", "\n", "fr", "=", "r1", "\n", "fc", "=", "c1", "+", "c2", "+", "3", "\n", "if", "r1", "<", "r2", ":", "\n", "        ", "fr", "=", "r2", "\n", "", "view", "=", "np", ".", "zeros", "(", "(", "fr", ",", "fc", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "view", "[", "0", ":", "r1", ",", "0", ":", "c1", ",", ":", "]", "=", "img1", "\n", "view", "[", "0", ":", "r2", ",", "c1", "+", "3", ":", "fc", ",", ":", "]", "=", "img2", "\n", "return", "view", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.opencvgui.three_image_view": [[38, 74], ["numpy.zeros", "len", "cv2.cvtColor", "len", "cv2.cvtColor", "len", "cv2.cvtColor"], "function", ["None"], ["", "def", "three_image_view", "(", "img1", ",", "img2", ",", "img3", ")", ":", "\n", "    ", "\"\"\"\n    Combines img1, img2, and img3 into a single image.\n    Parameters\n    ----------\n    img1, img2, img3: cv.mat\n        Images to be combined. uint8 single or rgb channel.\n    Returns\n    -------\n    cv.mat\n        The combined image in format [img1 | img2 | img3].\n    \"\"\"", "\n", "if", "len", "(", "img1", ".", "shape", ")", "<", "3", ":", "\n", "        ", "img1", "=", "cv", ".", "cvtColor", "(", "img1", ",", "cv", ".", "COLOR_GRAY2BGR", ")", "\n", "", "if", "len", "(", "img2", ".", "shape", ")", "<", "3", ":", "\n", "        ", "img2", "=", "cv", ".", "cvtColor", "(", "img2", ",", "cv", ".", "COLOR_GRAY2BGR", ")", "\n", "", "if", "len", "(", "img3", ".", "shape", ")", "<", "3", ":", "\n", "        ", "img3", "=", "cv", ".", "cvtColor", "(", "img3", ",", "cv", ".", "COLOR_GRAY2BGR", ")", "\n", "", "r1", "=", "img1", ".", "shape", "[", "0", "]", "\n", "c1", "=", "img1", ".", "shape", "[", "1", "]", "\n", "r2", "=", "img2", ".", "shape", "[", "0", "]", "\n", "c2", "=", "img2", ".", "shape", "[", "1", "]", "\n", "r3", "=", "img3", ".", "shape", "[", "0", "]", "\n", "c3", "=", "img3", ".", "shape", "[", "1", "]", "\n", "fr", "=", "r1", "\n", "fc", "=", "c1", "+", "c2", "+", "c3", "+", "6", "\n", "if", "r1", "<", "r2", ":", "\n", "        ", "fr", "=", "r2", "\n", "", "if", "r2", "<", "r3", ":", "\n", "        ", "fr", "=", "r3", "\n", "\n", "", "view", "=", "np", ".", "zeros", "(", "(", "fr", ",", "fc", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "view", "[", "0", ":", "r1", ",", "0", ":", "c1", ",", ":", "]", "=", "img1", "\n", "view", "[", "0", ":", "r2", ",", "c1", "+", "3", ":", "c1", "+", "3", "+", "c2", ",", ":", "]", "=", "img2", "\n", "view", "[", "0", ":", "r3", ",", "c1", "+", "6", "+", "c2", ":", "fc", ",", ":", "]", "=", "img3", "\n", "return", "view", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.opencvgui.overlap_images": [[76, 94], ["numpy.zeros", "cv2.cvtColor", "base.astype", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round", "numpy.round"], "function", ["None"], ["", "def", "overlap_images", "(", "base", ",", "layer", ",", "color", "=", "[", "255", ",", "255", ",", "255", "]", ",", "transparent", "=", "False", ",", "layer_front", "=", "False", ")", ":", "\n", "    ", "imres_u", "=", "np", ".", "zeros", "(", "(", "base", ".", "shape", "[", "0", "]", ",", "base", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "cv", ".", "cvtColor", "(", "src", "=", "base", ".", "astype", "(", "np", ".", "uint8", ")", ",", "code", "=", "cv", ".", "COLOR_GRAY2BGR", ",", "dst", "=", "imres_u", ")", "\n", "\n", "union", "=", "base", "*", "layer", "\n", "if", "not", "transparent", ":", "\n", "        ", "imres_u", "[", "union", "!=", "0", "]", "=", "color", "\n", "", "else", ":", "\n", "        ", "if", "not", "layer_front", ":", "\n", "            ", "imres_u", "[", "union", "!=", "0", ",", "0", "]", "=", "np", ".", "round", "(", "base", "[", "union", "!=", "0", "]", "/", "255", "*", "color", "[", "0", "]", ")", "\n", "imres_u", "[", "union", "!=", "0", ",", "1", "]", "=", "np", ".", "round", "(", "base", "[", "union", "!=", "0", "]", "/", "255", "*", "color", "[", "1", "]", ")", "\n", "imres_u", "[", "union", "!=", "0", ",", "2", "]", "=", "np", ".", "round", "(", "base", "[", "union", "!=", "0", "]", "/", "255", "*", "color", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "imres_u", "[", "union", "!=", "0", ",", "0", "]", "=", "np", ".", "round", "(", "layer", "[", "union", "!=", "0", "]", "*", "color", "[", "0", "]", ")", "\n", "imres_u", "[", "union", "!=", "0", ",", "1", "]", "=", "np", ".", "round", "(", "layer", "[", "union", "!=", "0", "]", "*", "color", "[", "1", "]", ")", "\n", "imres_u", "[", "union", "!=", "0", ",", "2", "]", "=", "np", ".", "round", "(", "layer", "[", "union", "!=", "0", "]", "*", "color", "[", "2", "]", ")", "\n", "\n", "", "", "return", "imres_u", "", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.nifti_to_numpy": [[9, 11], ["None"], "function", ["None"], ["def", "nifti_to_numpy", "(", "filename", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_norm_to_nifti": [[13, 17], ["numpy.round().astype", "nibabel.Nifti1Image", "nibabel.save", "numpy.round"], "function", ["None"], ["", "def", "npy_norm_to_nifti", "(", "npy_vol", ",", "filename", ")", ":", "\n", "    ", "byte_vol", "=", "np", ".", "round", "(", "(", "255", "*", "npy_vol", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "nifti", "=", "nb", ".", "Nifti1Image", "(", "byte_vol", ",", "None", ")", "\n", "nb", ".", "save", "(", "nifti", ",", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.misc.npy_to_nifti": [[19, 23], ["numpy.round().astype", "nibabel.Nifti1Image", "nibabel.save", "numpy.round"], "function", ["None"], ["", "def", "npy_to_nifti", "(", "npy_vol", ",", "filename", ")", ":", "\n", "    ", "byte_vol", "=", "np", ".", "round", "(", "npy_vol", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "nifti", "=", "nb", ".", "Nifti1Image", "(", "byte_vol", ",", "None", ")", "\n", "nb", ".", "save", "(", "nifti", ",", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.extend1_before": [[5, 7], ["numpy.expand_dims"], "function", ["None"], ["def", "extend1_before", "(", "d", ")", ":", "\n", "    ", "return", "np", ".", "expand_dims", "(", "d", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.extend2_before": [[9, 11], ["numpy.expand_dims", "nparrays.extend1_before"], "function", ["home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.extend1_before"], ["", "def", "extend2_before", "(", "d", ")", ":", "\n", "    ", "return", "np", ".", "expand_dims", "(", "extend1_before", "(", "d", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.largest_connected_component3d": [[13, 27], ["numpy.copy", "numpy.ones", "scipy.ndimage.label", "range", "numpy.sum"], "function", ["None"], ["", "def", "largest_connected_component3d", "(", "vol", ")", ":", "\n", "    ", "ret_vol", "=", "np", ".", "copy", "(", "vol", ")", "\n", "s", "=", "np", ".", "ones", "(", "shape", "=", "(", "3", ",", "3", ",", "3", ")", ")", "\n", "labels", ",", "num_ft", "=", "label", "(", "vol", ",", "structure", "=", "s", ")", "\n", "max_connected", "=", "0", "\n", "max_label", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "num_ft", "+", "1", ")", ":", "\n", "        ", "num", "=", "np", ".", "sum", "(", "labels", "==", "i", ")", "\n", "if", "num", ">", "max_connected", ":", "\n", "            ", "max_connected", "=", "num", "\n", "max_label", "=", "i", "\n", "\n", "", "", "ret_vol", "[", "labels", "!=", "max_label", "]", "=", "0", "\n", "return", "ret_vol", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.bounding_cube": [[29, 34], ["numpy.where", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max"], "function", ["None"], ["", "def", "bounding_cube", "(", "vol", ",", "offset", "=", "0", ")", ":", "\n", "    ", "a", "=", "np", ".", "where", "(", "vol", "!=", "0", ")", "\n", "bbox", "=", "np", ".", "min", "(", "a", "[", "0", "]", ")", ",", "np", ".", "min", "(", "a", "[", "1", "]", ")", ",", "np", ".", "min", "(", "a", "[", "2", "]", ")", "-", "offset", ",", "np", ".", "max", "(", "a", "[", "0", "]", ")", "+", "1", ",", "np", ".", "max", "(", "a", "[", "1", "]", ")", "+", "1", ",", "np", ".", "max", "(", "a", "[", "2", "]", ")", "+", "1", "+", "offset", "\n", "return", "bbox", "\n", "\n"]], "home.repos.pwc.inspect_result.rodsom22_gcn_refinement.utilities.nparrays.expand_to_size_3d": [[36, 46], ["numpy.zeros"], "function", ["None"], ["", "def", "expand_to_size_3d", "(", "x", ",", "shape", ")", ":", "\n", "    ", "expanded", "=", "np", ".", "zeros", "(", "shape", ")", "\n", "xoff", "=", "(", "shape", "[", "1", "]", "-", "x", ".", "shape", "[", "1", "]", ")", "//", "2", "\n", "yoff", "=", "(", "shape", "[", "0", "]", "-", "x", ".", "shape", "[", "0", "]", ")", "//", "2", "\n", "zoff", "=", "(", "shape", "[", "2", "]", "-", "x", ".", "shape", "[", "2", "]", ")", "//", "2", "\n", "xs", "=", "x", ".", "shape", "[", "1", "]", "\n", "ys", "=", "x", ".", "shape", "[", "0", "]", "\n", "zs", "=", "x", ".", "shape", "[", "2", "]", "\n", "expanded", "[", "yoff", ":", "yoff", "+", "ys", ",", "xoff", ":", "xoff", "+", "xs", ",", "zoff", ":", "zoff", "+", "zs", "]", "=", "x", "\n", "return", "expanded", "\n", "", ""]]}