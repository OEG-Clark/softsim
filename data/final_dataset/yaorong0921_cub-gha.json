{"home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.aggregate_gaze_points": [[10, 27], ["len", "len", "scipy.spatial.distance.cdist", "scipy.spatial.distance.cdist.max", "numpy.unravel_index", "gaze_data_list.remove", "scipy.spatial.distance.cdist.argmin", "int", "int", "int"], "function", ["None"], ["def", "aggregate_gaze_points", "(", "gaze_data_list", ",", "N", "=", "7", ")", ":", "\n", "    ", "if", "len", "(", "gaze_data_list", ")", "<=", "N", ":", "\n", "        ", "return", "gaze_data_list", "\n", "", "else", ":", "\n", "        ", "while", "len", "(", "gaze_data_list", ")", ">", "N", ":", "\n", "            ", "gaze_point_list", "=", "[", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", "for", "item", "in", "gaze_data_list", "]", "\n", "# calculate all distances between two sets of points", "\n", "dists", "=", "cdist", "(", "gaze_point_list", ",", "gaze_point_list", ")", "\n", "# the self distance is 0 -> we don't want this so make it large", "\n", "dists", "[", "dists", "==", "0", "]", "=", "dists", ".", "max", "(", ")", "\n", "# get index of smallest distance", "\n", "(", "idx1", ",", "idx2", ")", "=", "np", ".", "unravel_index", "(", "dists", ".", "argmin", "(", ")", ",", "dists", ".", "shape", ")", "\n", "gaze_data_list", "[", "idx1", "]", "=", "(", "int", "(", "0.5", "*", "(", "gaze_data_list", "[", "idx1", "]", "[", "0", "]", "+", "gaze_data_list", "[", "idx2", "]", "[", "0", "]", ")", ")", ",", "\n", "int", "(", "0.5", "*", "(", "gaze_data_list", "[", "idx1", "]", "[", "1", "]", "+", "gaze_data_list", "[", "idx2", "]", "[", "1", "]", ")", ")", ",", "\n", "int", "(", "0.5", "*", "(", "gaze_data_list", "[", "idx1", "]", "[", "2", "]", "+", "gaze_data_list", "[", "idx2", "]", "[", "2", "]", ")", ")", ")", "\n", "gaze_data_list", ".", "remove", "(", "gaze_data_list", "[", "idx2", "]", ")", "\n", "", "return", "gaze_data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.filter_gaze": [[28, 36], ["gaze_data_filtered.append"], "function", ["None"], ["", "", "def", "filter_gaze", "(", "gaze_data_list", ",", "t", "=", "350", ")", ":", "\n", "    ", "gaze_data_filtered", "=", "[", "]", "\n", "for", "item", "in", "gaze_data_list", ":", "\n", "        ", "if", "item", "[", "-", "1", "]", "<", "350", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "gaze_data_filtered", ".", "append", "(", "item", ")", "\n", "", "", "return", "gaze_data_filtered", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.gaussian": [[38, 66], ["numpy.zeros", "range", "range", "numpy.exp", "float", "float"], "function", ["None"], ["", "def", "gaussian", "(", "x", ",", "sx", ",", "y", "=", "None", ",", "sy", "=", "None", ")", ":", "\n", "    ", "\"\"\"Returns an array of np arrays (a matrix) containing values between\n    1 and 0 in a 2D Gaussian distribution\n    arguments\n    x\t\t-- width in pixels\n    sx\t\t-- width standard deviation\n    keyword argments\n    y\t\t-- height in pixels (default = x)\n    sy\t\t-- height standard deviation (default = sx)\n    \"\"\"", "\n", "\n", "# square Gaussian if only x values are passed", "\n", "if", "y", "==", "None", ":", "\n", "        ", "y", "=", "x", "\n", "", "if", "sy", "==", "None", ":", "\n", "        ", "sy", "=", "sx", "\n", "# centers", "\n", "", "xo", "=", "x", "/", "2", "\n", "yo", "=", "y", "/", "2", "\n", "# matrix of zeros", "\n", "M", "=", "np", ".", "zeros", "(", "[", "y", ",", "x", "]", ",", "dtype", "=", "float", ")", "\n", "# gaussian matrix", "\n", "for", "i", "in", "range", "(", "x", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "y", ")", ":", "\n", "            ", "M", "[", "j", ",", "i", "]", "=", "np", ".", "exp", "(", "\n", "-", "1.0", "*", "(", "(", "(", "float", "(", "i", ")", "-", "xo", ")", "**", "2", "/", "(", "2", "*", "sx", "*", "sx", ")", ")", "+", "(", "(", "float", "(", "j", ")", "-", "yo", ")", "**", "2", "/", "(", "2", "*", "sy", "*", "sy", ")", ")", ")", ")", "\n", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.normalize_map": [[67, 70], ["numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "def", "normalize_map", "(", "s_map", ")", ":", "\n", "    ", "norm_s_map", "=", "(", "s_map", "-", "np", ".", "min", "(", "s_map", ")", ")", "/", "(", "(", "np", ".", "max", "(", "s_map", ")", "-", "np", ".", "min", "(", "s_map", ")", ")", "*", "1.0", ")", "\n", "return", "norm_s_map", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.draw_heatmap": [[71, 155], ["generate_heatmap.gaussian", "numpy.zeros", "range", "generate_heatmap.normalize_map", "PIL.Image.fromarray().convert().resize", "len", "matplotlib.imread", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "matplotlib.close", "Image.fromarray().convert().resize.save", "int", "int", "PIL.Image.fromarray().convert", "abs", "abs", "PIL.Image.fromarray", "int", "int"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.gaussian", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.normalize_map", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow"], ["", "def", "draw_heatmap", "(", "gazepoints", ",", "dispsize", ",", "imagesize", ",", "startsize", ",", "originalsize", ",", "imagefile", "=", "None", ",", "alpha", "=", "0.5", ",", "savefilename", "=", "None", ",", "gaussianwh", "=", "200", ",", "gaussiansd", "=", "None", ",", "gaussianwhy", "=", "200", ",", "gaussiansdy", "=", "None", ")", ":", "\n", "    ", "\"\"\"Draws a heatmap of the provided fixations, optionally drawn over an\n    image, and optionally allocating more weight to fixations with a higher\n    duration.\n    arguments\n    gazepoints\t\t-\ta list of gazepoint tuples (x, y)\n    \n    dispsize\t\t-\ttuple or list indicating the size of the display,\n                    e.g. (1024,768)\n    keyword arguments\n    imagefile\t\t-\tfull path to an image file over which the heatmap\n                    is to be laid, or None for no image; NOTE: the image\n                    may be smaller than the display size, the function\n                    assumes that the image was presented at the centre of\n                    the display (default = None)\n    alpha\t\t-\tfloat between 0 and 1, indicating the transparancy of\n                    the heatmap, where 0 is completely transparant and 1\n                    is completely untransparant (default = 0.5)\n    savefilename\t-\tfull path to the file in which the heatmap should be\n                    saved, or None to not save the file (default = None)\n    returns\n    fig\t\t\t-\ta matplotlib.pyplot Figure instance, containing the\n                    heatmap\n    \"\"\"", "\n", "\n", "# HEATMAP", "\n", "# Gaussian", "\n", "gwh", "=", "gaussianwh", "\n", "gwhy", "=", "gaussianwhy", "\n", "gsdwh", "=", "gwh", "//", "6", "if", "(", "gaussiansd", "is", "None", ")", "else", "gaussiansd", "\n", "gsdwhy", "=", "gwhy", "//", "6", "if", "(", "gaussiansdy", "is", "None", ")", "else", "gaussiansdy", "\n", "gaus", "=", "gaussian", "(", "gwh", ",", "gsdwh", ",", "gwhy", ",", "gsdwhy", ")", "\n", "# matrix of zeroes", "\n", "strt", "=", "gwh", "//", "2", "\n", "strty", "=", "gwhy", "//", "2", "\n", "heatmapsize", "=", "dispsize", "[", "1", "]", "+", "2", "*", "strty", ",", "dispsize", "[", "0", "]", "+", "2", "*", "strt", "\n", "heatmap", "=", "np", ".", "zeros", "(", "heatmapsize", ",", "dtype", "=", "float", ")", "\n", "# create heatmap", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "gazepoints", ")", ")", ":", "\n", "# get x and y coordinates", "\n", "        ", "x", "=", "strt", "+", "gazepoints", "[", "i", "]", "[", "0", "]", "-", "int", "(", "gwh", "/", "2", ")", "\n", "y", "=", "strty", "+", "gazepoints", "[", "i", "]", "[", "1", "]", "-", "int", "(", "gwhy", "/", "2", ")", "\n", "# correct Gaussian size if either coordinate falls outside of", "\n", "# display boundaries", "\n", "if", "(", "not", "0", "<", "x", "<", "dispsize", "[", "0", "]", ")", "or", "(", "not", "0", "<", "y", "<", "dispsize", "[", "1", "]", ")", ":", "\n", "            ", "hadj", "=", "[", "0", ",", "gwh", "]", ";", "\n", "vadj", "=", "[", "0", ",", "gwhy", "]", "\n", "if", "0", ">", "x", ":", "\n", "                ", "hadj", "[", "0", "]", "=", "abs", "(", "x", ")", "\n", "x", "=", "0", "\n", "", "elif", "dispsize", "[", "0", "]", "<", "x", ":", "\n", "                ", "hadj", "[", "1", "]", "=", "gwh", "-", "int", "(", "x", "-", "dispsize", "[", "0", "]", ")", "\n", "", "if", "0", ">", "y", ":", "\n", "                ", "vadj", "[", "0", "]", "=", "abs", "(", "y", ")", "\n", "y", "=", "0", "\n", "", "elif", "dispsize", "[", "1", "]", "<", "y", ":", "\n", "                ", "vadj", "[", "1", "]", "=", "gwhy", "-", "int", "(", "y", "-", "dispsize", "[", "1", "]", ")", "\n", "# add adjusted Gaussian to the current heatmap", "\n", "", "try", ":", "\n", "                ", "heatmap", "[", "y", ":", "y", "+", "vadj", "[", "1", "]", ",", "x", ":", "x", "+", "hadj", "[", "1", "]", "]", "+=", "gaus", "[", "vadj", "[", "0", "]", ":", "vadj", "[", "1", "]", ",", "hadj", "[", "0", "]", ":", "hadj", "[", "1", "]", "]", "*", "gazepoints", "[", "i", "]", "[", "2", "]", "\n", "", "except", ":", "\n", "# fixation was probably outside of display", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "# add Gaussian to the current heatmap", "\n", "            ", "heatmap", "[", "y", ":", "y", "+", "gwhy", ",", "x", ":", "x", "+", "gwh", "]", "+=", "gaus", "*", "gazepoints", "[", "i", "]", "[", "2", "]", "\n", "# resize heatmap", "\n", "", "", "heatmap", "=", "heatmap", "[", "strt", ":", "dispsize", "[", "1", "]", "+", "strt", ",", "strt", ":", "dispsize", "[", "0", "]", "+", "strt", "]", "\n", "# draw heatmap on top of image", "\n", "img_cut", "=", "heatmap", "[", "startsize", "[", "1", "]", ":", "(", "startsize", "[", "1", "]", "+", "imagesize", "[", "1", "]", ")", ",", "startsize", "[", "0", "]", ":", "(", "startsize", "[", "0", "]", "+", "imagesize", "[", "0", "]", ")", "]", "\n", "# normalize the salience map", "\n", "img_cut", "=", "normalize_map", "(", "img_cut", ")", "\n", "maps", "=", "Image", ".", "fromarray", "(", "img_cut", "*", "255", ")", ".", "convert", "(", "'L'", ")", ".", "resize", "(", "(", "originalsize", ")", ")", "\n", "\n", "\n", "if", "imagefile", ":", "\n", "        ", "img", "=", "plt", ".", "imread", "(", "imagefile", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "imshow", "(", "maps", ",", "alpha", "=", "0.6", ",", "cmap", "=", "'jet'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "savefilename", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "maps", ".", "save", "(", "savefilename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.plot_gazemap": [[157, 180], ["os.listdir", "os.path.join", "os.path.join", "generate_heatmap.draw_heatmap", "enumerate", "item[].lower", "image_name.lower", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "generate_heatmap.draw_heatmap", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.draw_heatmap", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.draw_heatmap"], ["", "", "def", "plot_gazemap", "(", "params", ",", "image_name", ",", "image_id", ",", "display_width", ",", "display_height", ",", "image_x", ",", "image_y", ",", "start_x", ",", "start_y", ",", "o_x", ",", "o_y", ",", "gaze_data", ",", "ngaussian", "=", "500", ",", "sd", "=", "75.0", ",", "ngaussiany", "=", "500", ",", "sdy", "=", "75.0", ",", "alpha", "=", "0.5", ")", ":", "\n", "\n", "## find the path to original image. If you want to have an overlay image, please give the image_file to the \"imagefile\" in the draw_heatmap function.", "\n", "    ", "all_images", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "params", ".", "CUB_dir_path", ",", "'images'", ")", ")", "\n", "for", "item", "in", "all_images", ":", "\n", "        ", "if", "item", "[", "4", ":", "]", ".", "lower", "(", ")", "in", "image_name", ".", "lower", "(", ")", ":", "\n", "            ", "image_file", "=", "os", ".", "path", ".", "join", "(", "params", ".", "CUB_dir_path", ",", "'images'", ",", "item", ",", "image_name", "+", "'.jpg'", ")", "\n", "break", "\n", "\n", "## visualize all fixation in one heatmap", "\n", "", "", "if", "not", "params", ".", "single_fixation", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "params", ".", "CUB_GHA_save_path", ",", "'All_Fixation'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "params", ".", "CUB_GHA_save_path", ",", "'All_Fixation'", ")", ")", "\n", "", "output_name", "=", "os", ".", "path", ".", "join", "(", "params", ".", "CUB_GHA_save_path", ",", "'All_Fixation'", ",", "\"%s.jpg\"", "%", "image_id", ")", "\n", "draw_heatmap", "(", "gaze_data", ",", "(", "display_width", ",", "display_height", ")", ",", "(", "image_x", ",", "image_y", ")", ",", "(", "start_x", ",", "start_y", ")", ",", "(", "o_x", ",", "o_y", ")", ",", "savefilename", "=", "output_name", ",", "imagefile", "=", "None", ",", "gaussianwh", "=", "ngaussian", ",", "gaussiansd", "=", "sd", ",", "gaussianwhy", "=", "ngaussiany", ",", "gaussiansdy", "=", "sdy", ")", "\n", "\n", "## visualize single fixation", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "params", ".", "CUB_GHA_save_path", ",", "'Single_Fixation'", ",", "image_id", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "params", ".", "CUB_GHA_save_path", ",", "'Single_Fixation'", ",", "image_id", ")", ")", "\n", "", "for", "i", ",", "gaze", "in", "enumerate", "(", "gaze_data", ")", ":", "\n", "            ", "output_name", "=", "os", ".", "path", ".", "join", "(", "params", ".", "CUB_GHA_save_path", ",", "'Single_Fixation'", ",", "image_id", ",", "str", "(", "i", ")", "+", "\".jpg\"", ")", "\n", "draw_heatmap", "(", "[", "gaze", "]", ",", "(", "display_width", ",", "display_height", ")", ",", "(", "image_x", ",", "image_y", ")", ",", "(", "start_x", ",", "start_y", ")", ",", "(", "o_x", ",", "o_y", ")", ",", "savefilename", "=", "output_name", ",", "imagefile", "=", "None", ",", "gaussianwh", "=", "ngaussian", ",", "gaussiansd", "=", "sd", ",", "gaussianwhy", "=", "ngaussiany", ",", "gaussiansdy", "=", "sdy", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.parse_args": [[181, 188], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.None.generate_heatmap.parse_args"], ["", "", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Main script'", ")", "\n", "parser", ".", "add_argument", "(", "'--CUB_dir_path'", ",", "default", "=", "\"./CUB_200_2011\"", ",", "help", "=", "'path to CUB_200_2011'", ")", "\n", "parser", ".", "add_argument", "(", "'--CUB_GHA_save_path'", ",", "default", "=", "\"./CUB_GHA\"", ",", "help", "=", "'path to save CUB_GHA'", ")", "\n", "parser", ".", "add_argument", "(", "'--gaze_file_path'", ",", "default", "=", "\"./Fixation.txt\"", ",", "help", "=", "'path to the fixation file'", ")", "\n", "parser", ".", "add_argument", "(", "'--single_fixation'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'set the flag if you want to plot each fixation seperately'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CXR-Eye.main.make_parser": [[28, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "make_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch CXR Eye Gaze'", ")", "\n", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "type", "=", "str", ",", "default", "=", "'resources/master_sheet.csv'", ",", "help", "=", "'Data path'", ")", "\n", "parser", ".", "add_argument", "(", "'--image_path'", ",", "type", "=", "str", ",", "default", "=", "'/data/MIMIC/MIMIC-IV/cxr_v2/physionet.org/files/mimic-cxr/2.0.0'", ",", "help", "=", "'image_path'", ")", "\n", "parser", ".", "add_argument", "(", "'--heatmaps_path'", ",", "type", "=", "str", ",", "default", "=", "'/storage/rong/CXR-JPG/egd-cxr/fixation_heatmaps'", ",", "help", "=", "'human attention heatmap path'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "'checkpoint'", ",", "help", "=", "'Output directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--class_names'", ",", "type", "=", "list", ",", "default", "=", "[", "'Normal'", ",", "'CHF'", ",", "'pneumonia'", "]", ",", "help", "=", "'Label names for classification'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'number of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--resize'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "help", "=", "'Resizing images'", ")", "\n", "\n", "# Training", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'[USE] scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--step_size'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'scheduler step size'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_milestones'", ",", "type", "=", "list", ",", "default", "=", "[", "50", "]", ",", "help", "=", "'scheduler decay step'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'weight decay'", ")", "\n", "\n", "## UNET Specific arguments.", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "default", "=", "'unet'", ",", "choices", "=", "[", "'kfn'", ",", "'gat'", "]", ",", "help", "=", "'kfn, gat'", ")", "\n", "parser", ".", "add_argument", "(", "'--heatmaps_threshold'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "'set the threshold value for the heatmap to be used with unet.'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'path to model pretrained with gat'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'dropout'", ")", "\n", "\n", "# Misc", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "str", ",", "default", "=", "'7'", ",", "help", "=", "'Which gpus to use, -1 for CPU'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'[USE] Vizdom'", ")", "\n", "parser", ".", "add_argument", "(", "'--gcam_viz'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'[USE] Used for displaying the GradCam results'", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'[USE] flag for testing only'", ")", "\n", "parser", ".", "add_argument", "(", "'--testdir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'model to test [same as train if not set]'", ")", "\n", "parser", ".", "add_argument", "(", "'--rseed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "'Seed for reproducibility'", ")", "\n", "parser", ".", "add_argument", "(", "'--crossval'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use N-fold cross valiation'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CXR-Eye.main.load_data": [[66, 114], ["utils.dataset.split_dataset", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "utils.dataset.EyegazeDataset", "utils.dataset.EyegazeDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.dataset.EyegazeDataset", "torch.utils.data.DataLoader", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "utils.dataset.EyegazeDataset", "utils.dataset.EyegazeDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.Grayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.Grayscale", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.split_dataset"], ["", "def", "load_data", "(", "model_type", ",", "data_path", ",", "image_path", ",", "heatmaps_path", ",", "input_size", ",", "class_names", ",", "batch_size", ",", "num_workers", ",", "rseed", ",", "heatmaps_threshold", ",", "nfold", "=", "None", ")", ":", "\n", "# ImageNet normalization", "\n", "    ", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "if", "nfold", "is", "None", ":", "\n", "        ", "train_file", ",", "valid_file", ",", "test_file", "=", "split_dataset", "(", "data_path", ",", "random_state", "=", "rseed", ")", "\n", "\n", "image_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "input_size", ",", "input_size", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "heatmap_static_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "input_size", ",", "input_size", "]", ")", ",", "\n", "transforms", ".", "Grayscale", "(", "num_output_channels", "=", "1", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "static_heatmap_path", "=", "heatmaps_path", "\n", "train_dataset", "=", "EyegazeDataset", "(", "train_file", ",", "image_path", ",", "class_names", ",", "static_heatmap_path", "=", "static_heatmap_path", ",", "\n", "heatmaps_threshold", "=", "heatmaps_threshold", ",", "heatmap_static_transform", "=", "heatmap_static_transform", ",", "\n", "image_transform", "=", "image_transform", ")", "\n", "valid_dataset", "=", "EyegazeDataset", "(", "valid_file", ",", "image_path", ",", "class_names", ",", "static_heatmap_path", "=", "static_heatmap_path", ",", "\n", "heatmaps_threshold", "=", "heatmaps_threshold", ",", "heatmap_static_transform", "=", "heatmap_static_transform", ",", "\n", "image_transform", "=", "image_transform", ")", "\n", "train_dl", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "valid_dl", "=", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "test_dataset", "=", "EyegazeDataset", "(", "test_file", ",", "image_path", ",", "class_names", ",", "static_heatmap_path", "=", "static_heatmap_path", ",", "\n", "heatmaps_threshold", "=", "heatmaps_threshold", ",", "heatmap_static_transform", "=", "heatmap_static_transform", ",", "\n", "image_transform", "=", "image_transform", ")", "\n", "test_dl", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "32", ")", "\n", "\n", "return", "train_dl", ",", "valid_dl", ",", "test_dl", "\n", "", "else", ":", "\n", "        ", "train_file", "=", "nfold", "[", "'train'", "]", "\n", "valid_file", "=", "nfold", "[", "'test'", "]", "\n", "\n", "image_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "input_size", ",", "input_size", ")", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ")", "#transforms.Normalize(mean=mean, std=std)", "\n", "\n", "heatmap_static_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "[", "input_size", ",", "input_size", "]", ")", ",", "\n", "transforms", ".", "Grayscale", "(", "num_output_channels", "=", "1", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "static_heatmap_path", "=", "heatmaps_path", "\n", "train_dataset", "=", "EyegazeDataset", "(", "train_file", ",", "image_path", ",", "class_names", ",", "static_heatmap_path", "=", "static_heatmap_path", ",", "\n", "heatmaps_threshold", "=", "heatmaps_threshold", ",", "heatmap_static_transform", "=", "heatmap_static_transform", ",", "\n", "image_transform", "=", "image_transform", ")", "\n", "valid_dataset", "=", "EyegazeDataset", "(", "valid_file", ",", "image_path", ",", "class_names", ",", "static_heatmap_path", "=", "static_heatmap_path", ",", "\n", "heatmaps_threshold", "=", "heatmaps_threshold", ",", "heatmap_static_transform", "=", "heatmap_static_transform", ",", "\n", "image_transform", "=", "image_transform", ")", "\n", "train_dl", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "valid_dl", "=", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "return", "train_dl", ",", "valid_dl", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CXR-Eye.main.eval_net": [[115, 141], ["model.eval", "model.train", "images.cuda.cuda", "labels.cuda.long", "labels.cuda.cuda", "y_hm.cuda.cuda", "gaze_img.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "classifier_criterion", "classifier_criterion.item", "pred.eq().sum().item", "len", "len", "gaze_img.cuda.cuda", "model", "model.max", "model", "pred.eq().sum", "pred.eq", "labels.cuda.view_as"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.eval_model.eval", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.train_model.train"], ["", "", "def", "eval_net", "(", "model", ",", "loader", ",", "classifier_criterion", ",", "model_type", ")", ":", "\n", "# evaluate networks", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "cls_loss", "=", "0.0", "\n", "for", "images", ",", "labels", ",", "idx", ",", "y_hm", ",", "gaze_img", ",", "attributes", "in", "(", "loader", ")", ":", "\n", "        ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "y_hm", "=", "y_hm", ".", "cuda", "(", ")", "\n", "gaze_img", "=", "gaze_img", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "model_type", "==", "'gat'", ":", "\n", "                ", "gaze_img", "=", "gaze_img", ".", "cuda", "(", ")", "\n", "y_pred", ",", "_", ",", "_", ",", "_", ",", "_", ",", "coordinates", "=", "model", "(", "images", ",", "gaze_img", ",", "status", "=", "'test'", ")", "\n", "", "elif", "model_type", "==", "'kfn'", ":", "\n", "                ", "y_pred", "=", "model", "(", "images", ",", "gaze_img", ")", "\n", "\n", "", "l_classifier", "=", "classifier_criterion", "(", "y_pred", ",", "labels", ")", "\n", "cls_loss", "+=", "l_classifier", ".", "item", "(", ")", "\n", "pred", "=", "y_pred", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "labels", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "model", ".", "train", "(", ")", "\n", "return", "cls_loss", "/", "len", "(", "loader", ".", "dataset", ")", ",", "correct", "/", "len", "(", "loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CXR-Eye.main.train_net": [[143, 222], ["torch.Adam", "torch.lr_scheduler.MultiStepLR", "torch.CrossEntropyLoss", "range", "tensorboardX.SummaryWriter", "model.parameters", "model.train", "enumerate", "logging.info", "logging.info", "model.train", "logging.info", "tensorboardX.SummaryWriter.close", "images.cuda.cuda", "labels.cuda.long", "labels.cuda.cuda", "y_hm.cuda.cuda", "nn.CrossEntropyLoss.", "total_loss.item", "pred.eq().sum().item", "optim.Adam.zero_grad", "total_loss.backward", "optim.Adam.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "main.eval_net", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "optim.lr_scheduler.MultiStepLR.step", "os.makedirs", "logger.info", "torch.save", "torch.save", "torch.save", "torch.save", "logger.info", "os.path.join", "model", "nn.CrossEntropyLoss.", "model.max", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "model.state_dict", "gaze_img.cuda.cuda", "model", "labels.cuda.unsqueeze().repeat().view", "enumerate", "numpy.concatenate", "tensorboardX.SummaryWriter.add_images", "pred.eq().sum", "classifier_criterion.item", "total_loss.item", "utils.utils.image_with_boxes", "np.concatenate.append", "len", "len", "labels.cuda.unsqueeze().repeat", "pred.eq", "labels.cuda.view_as", "labels.cuda.unsqueeze"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.train_model.train", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.train_model.train", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CXR-Eye.main.eval_net", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.image_with_boxes"], ["", "def", "train_net", "(", "args", ",", "model", ",", "train_dl", ",", "valid_dl", ",", "output_model_path", ",", "comment", ")", ":", "\n", "# train networks", "\n", "    ", "if", "args", ".", "viz", ":", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "output_model_path", ",", "'log'", ")", ",", "comment", "=", "comment", ")", "\n", "global_step", "=", "0", "\n", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "args", ".", "lr_milestones", ",", "gamma", "=", "0.1", ")", "\n", "classifier_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "best_acc", "=", "0.0", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0", "\n", "correct", "=", "0.0", "\n", "for", "i", ",", "(", "images", ",", "labels", ",", "idx", ",", "y_hm", ",", "gaze_img", ",", "attributes", ")", "in", "enumerate", "(", "train_dl", ")", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "y_hm", "=", "y_hm", ".", "cuda", "(", ")", "\n", "if", "args", ".", "model_type", "==", "'gat'", ":", "\n", "                ", "y_pred", ",", "_", ",", "proposalN_windows_logits", ",", "_", ",", "_", ",", "coordinates", "=", "model", "(", "images", ",", "y_hm", ",", "status", "=", "'train'", ")", "\n", "", "elif", "args", ".", "model_type", "==", "'kfn'", ":", "\n", "                ", "gaze_img", "=", "gaze_img", ".", "cuda", "(", ")", "\n", "y_pred", "=", "model", "(", "images", ",", "gaze_img", ")", "\n", "", "loss_classifier", "=", "classifier_criterion", "(", "y_pred", ",", "labels", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'gat'", ":", "\n", "                ", "windowscls_loss", "=", "classifier_criterion", "(", "proposalN_windows_logits", ",", "labels", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "proposalN", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "if", "epoch", "<", "2", ":", "\n", "                    ", "total_loss", "=", "loss_classifier", "\n", "", "else", ":", "\n", "                    ", "total_loss", "=", "loss_classifier", "+", "windowscls_loss", "\n", "", "if", "i", "==", "1", ":", "\n", "                    ", "cat_imgs", "=", "[", "]", "\n", "for", "j", ",", "coordinate_ndarray", "in", "enumerate", "(", "coordinates", ")", ":", "\n", "                        ", "img", "=", "image_with_boxes", "(", "images", "[", "j", "]", ",", "coordinate_ndarray", ")", "\n", "cat_imgs", ".", "append", "(", "img", ")", "\n", "", "cat_imgs", "=", "np", ".", "concatenate", "(", "cat_imgs", ",", "axis", "=", "1", ")", "\n", "writer", ".", "add_images", "(", "'train'", "+", "'/'", "+", "'cut_image_with_windows'", ",", "cat_imgs", ",", "epoch", ",", "dataformats", "=", "'HWC'", ")", "\n", "", "", "else", ":", "\n", "                ", "total_loss", "=", "loss_classifier", "\n", "", "epoch_loss", "+=", "total_loss", ".", "item", "(", ")", "\n", "pred", "=", "y_pred", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "labels", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "args", ".", "viz", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'Classifier_Loss'", ",", "loss_classifier", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/Train'", ",", "total_loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'learning_rate'", ",", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "global_step", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "global_step", "+=", "1", "\n", "", "logging", ".", "info", "(", "f'Epoch: {epoch+1} Training_Loss: {epoch_loss/len(train_dl.dataset)}'", ")", "\n", "logging", ".", "info", "(", "f'Epoch: {epoch+1} Accuracy: {correct/len(train_dl.dataset)}'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "val_loss", ",", "val_acc", "=", "eval_net", "(", "model", ",", "valid_dl", ",", "classifier_criterion", ",", "args", ".", "model_type", ")", "\n", "\n", "", "if", "args", ".", "viz", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'Validation_Loss'", ",", "val_loss", ",", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "'Validation_ACC'", ",", "val_acc", ",", "global_step", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "if", "args", ".", "scheduler", ":", "scheduler", ".", "step", "(", ")", "\n", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_model_path", ")", "\n", "logger", ".", "info", "(", "'Created Checkpoint directory'", ")", "\n", "", "except", "OSError", ":", "\n", "            ", "pass", "\n", "", "if", "best_acc", "<", "val_acc", ":", "\n", "            ", "best_acc", "=", "val_acc", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "output_model_path", "+", "f\"/best.pth\"", ")", "\n", "logger", ".", "info", "(", "f\"Checkpoint saved !\"", ")", "\n", "", "logging", ".", "info", "(", "f'Best Validation_Acc_scores: {best_acc}'", ")", "\n", "", "if", "args", ".", "viz", ":", "writer", ".", "close", "(", ")", "\n", "return", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CXR-Eye.main.display_gcam": [[224, 251], ["os.path.join", "logger.debug", "nn.DataParallel.load_state_dict", "nn.DataParallel.cuda", "utils.gradcam_utils.GradCam", "exit", "models.classifier.Two_Branch", "print", "exit", "len", "print", "torch.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "utils.gradcam_utils.visualize_gcam", "print", "exit", "len", "args.gpus.split", "int", "args.gpus.split", "len", "args.gpus.split"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.visualize_gcam"], ["", "def", "display_gcam", "(", "args", ",", "val_dl", ",", "model_dir", ",", "model_name", ",", "aux_params", ")", ":", "\n", "# visualize the gradcam of kfn branches", "\n", "    ", "if", "args", ".", "model_type", "==", "'kfn'", ":", "\n", "        ", "model", "=", "Two_Branch", "(", "len", "(", "args", ".", "class_names", ")", ",", "model_type", "=", "'efficientnet'", ")", "\n", "candidate_layers", "=", "[", "'branch1.blocks.6'", ",", "'branch2.blocks.6'", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not implemented yet.'", ")", "\n", "exit", "(", ")", "\n", "\n", "", "output_weights_name", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "model_name", ")", "\n", "logger", ".", "debug", "(", "f'Loading Model: {output_weights_name}'", ")", "\n", "if", "len", "(", "args", ".", "gpus", ".", "split", "(", "','", ")", ")", ">", "1", ":", "\n", "        ", "print", "(", "f\"Using {len(args.gpus.split(','))} GPUs!\"", ")", "\n", "device_ids", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "output_weights_name", ")", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "gcam", "=", "GradCam", "(", "model", "=", "model", ",", "candidate_layers", "=", "candidate_layers", ")", "\n", "if", "args", ".", "model_type", "==", "'kfn'", ":", "\n", "## for branch1", "\n", "        ", "target_layer", "=", "[", "'branch1.blocks.6'", ",", "'branch2.blocks.6'", "]", "# ['branch1.0.denseblock4.denselayer16', 'branch2.0.denseblock4.denselayer16']", "\n", "visualize_gcam", "(", "args", ",", "model", ",", "val_dl", ",", "gcam", ",", "target_layer", "=", "target_layer", ",", "model_dir", "=", "model_dir", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not implemented yet.'", ")", "\n", "exit", "(", ")", "\n", "", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.VisdomLinePlotter.__init__": [[13, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "server", ",", "env_name", "=", "'main'", ")", ":", "\n", "        ", "self", ".", "viz", "=", "server", "\n", "self", ".", "env", "=", "env_name", "\n", "self", ".", "plots", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.VisdomLinePlotter.plot": [[18, 28], ["visualization.VisdomLinePlotter.viz.line", "visualization.VisdomLinePlotter.viz.line", "numpy.array", "numpy.array", "dict", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "plot", "(", "self", ",", "var_name", ",", "split_name", ",", "title_name", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "var_name", "not", "in", "self", ".", "plots", ":", "\n", "            ", "self", ".", "plots", "[", "var_name", "]", "=", "self", ".", "viz", ".", "line", "(", "X", "=", "np", ".", "array", "(", "[", "x", ",", "x", "]", ")", ",", "Y", "=", "np", ".", "array", "(", "[", "y", ",", "y", "]", ")", ",", "env", "=", "self", ".", "env", ",", "opts", "=", "dict", "(", "\n", "legend", "=", "[", "split_name", "]", ",", "\n", "title", "=", "title_name", ",", "\n", "xlabel", "=", "'Iterations'", ",", "\n", "ylabel", "=", "var_name", "\n", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "viz", ".", "line", "(", "X", "=", "np", ".", "array", "(", "[", "x", "]", ")", ",", "Y", "=", "np", ".", "array", "(", "[", "y", "]", ")", ",", "env", "=", "self", ".", "env", ",", "win", "=", "self", ".", "plots", "[", "var_name", "]", ",", "name", "=", "split_name", ",", "update", "=", "'append'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.get_cmap": [[30, 40], ["matplotlib.cm.get_cmap"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.get_cmap"], ["", "", "", "def", "get_cmap", "(", "n", ",", "name", "=", "'Set1'", ")", ":", "\n", "    ", "\"\"\"\n    Source: https://stackoverflow.com/questions/14720331/how-to-generate-random-colors-in-matplotlib\n    Colormaps: https://matplotlib.org/tutorials/colors/colormaps.html\n    :param n: Number of classes.\n    :param name: The color map to be selected from.\n    :return: a function that maps each index in 0, 1, ..., n-1 to a distinct\n    RGB color; the keyword argument name must be a standard mpl colormap name.\n    \"\"\"", "\n", "return", "plt", ".", "cm", ".", "get_cmap", "(", "name", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.plot_roc_curve": [[42, 130], ["range", "numpy.asarray", "numpy.unique", "numpy.zeros_like", "range", "len", "sklearn.metrics.auc", "matplotlib.figure", "plt.figure.subplots_adjust", "plt.figure.add_subplot", "visualization.get_cmap", "range", "fig.add_subplot.plot", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_title", "fig.add_subplot.legend", "fig.add_subplot.minorticks_on", "fig.add_subplot.grid", "fig.add_subplot.grid", "plt.figure.savefig", "matplotlib.cla", "matplotlib.close", "len", "len", "len", "fig.add_subplot.plot", "len", "len", "os.path.join", "a.append", "logger.info", "logger.info", "logger.info", "flat_list.append", "scipy.interp", "fig.add_subplot.plot", "textwrap.wrap", "numpy.concatenate", "numpy.expand_dims", "get_cmap."], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.get_cmap", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.VisdomLinePlotter.plot", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.VisdomLinePlotter.plot", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.VisdomLinePlotter.plot"], ["", "def", "plot_roc_curve", "(", "tpr", ",", "fpr", ",", "class_names", ",", "aurocs", ",", "filename", ",", "name_variable", ")", ":", "\n", "    ", "\"\"\"\n    Modified from scikit-example. Plots the ROC curve for the different classes.\n    :param tpr: true positive rate computed\n    :param fpr: false positive rate computed\n    :param class_names:\n    :param aurocs: computed area under the rocs\n    :param filename: the output directory where the file should be written\n    :param name_variable: the filename with the extension.\n    :return: None (writes the file to disk)\n    \"\"\"", "\n", "#", "\n", "# First aggregate all false positive rates", "\n", "# all_fpr = np.unique(np.concatenate([fpr[i] for i in range(len(class_names))]))", "\n", "a", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "class_names", ")", ")", ":", "\n", "        ", "if", "(", "i", "in", "fpr", ")", "==", "True", ":", "\n", "# print(class_names[i])", "\n", "# The np.concatenate does not work on scalars and zero dimensions hence the expand dims.", "\n", "            ", "a", ".", "append", "(", "np", ".", "concatenate", "(", "np", ".", "expand_dims", "(", "fpr", "[", "i", "]", ",", "axis", "=", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'--'", "*", "30", ")", "\n", "logger", ".", "info", "(", "f\"WARNING!!! No: {class_names[i]} found in the set \"", ")", "\n", "logger", ".", "info", "(", "'--'", "*", "30", ")", "\n", "\n", "#flatten the concatenated list.", "\n", "", "", "flat_list", "=", "[", "]", "\n", "for", "sublist", "in", "a", ":", "\n", "        ", "for", "item", "in", "sublist", ":", "\n", "            ", "flat_list", ".", "append", "(", "item", ")", "\n", "", "", "flat_np", "=", "np", ".", "asarray", "(", "flat_list", ")", "\n", "all_fpr", "=", "np", ".", "unique", "(", "flat_np", ")", "\n", "\n", "#Now interpolate them results", "\n", "mean_tpr", "=", "np", ".", "zeros_like", "(", "all_fpr", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "class_names", ")", ")", ":", "\n", "# This is essentially saying interpolate all the curves to the combined", "\n", "# number of elements using the fpr and tpr of each of these.", "\n", "        ", "if", "(", "i", "in", "fpr", ")", "==", "True", ":", "\n", "            ", "mean_tpr", "+=", "interp", "(", "all_fpr", ",", "fpr", "[", "i", "]", ",", "tpr", "[", "i", "]", ")", "\n", "\n", "# Finally average it and compute AUC", "\n", "# mean_tpr /= len(class_names)", "\n", "# it's actually not considering the missing classes;", "\n", "", "", "mean_tpr", "/=", "len", "(", "a", ")", "\n", "fpr", "[", "\"all_val\"", "]", "=", "all_fpr", "\n", "tpr", "[", "\"all_val\"", "]", "=", "mean_tpr", "\n", "roc_auc", "=", "auc", "(", "fpr", "[", "\"all_val\"", "]", ",", "tpr", "[", "\"all_val\"", "]", ")", "\n", "lw", "=", "2", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.25", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "if", "len", "(", "class_names", ")", ">", "1", ":", "\n", "        ", "ax", ".", "plot", "(", "fpr", "[", "\"all_val\"", "]", ",", "tpr", "[", "\"all_val\"", "]", ",", "\n", "label", "=", "'average ROC(area = {0:0.2f})'", "\n", "''", ".", "format", "(", "roc_auc", ")", ",", "\n", "color", "=", "'navy'", ",", "linestyle", "=", "':'", ",", "linewidth", "=", "4", ")", "\n", "\n", "", "colors", "=", "get_cmap", "(", "len", "(", "class_names", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "class_names", ")", ")", ":", "\n", "        ", "if", "(", "i", "in", "fpr", ")", "==", "True", ":", "\n", "            ", "ax", ".", "plot", "(", "fpr", "[", "i", "]", ",", "tpr", "[", "i", "]", ",", "color", "=", "colors", "(", "i", ")", ",", "lw", "=", "lw", ",", "\n", "label", "=", "'{0} (area = {1:0.2f})'", "\n", "''", ".", "format", "(", "class_names", "[", "i", "]", ",", "aurocs", "[", "i", "]", ")", ")", "\n", "# ax.plot(fpr[i], tpr[i], color=colors(i), lw=lw)", "\n", "# Plot the 45 degree line.", "\n", "", "", "ax", ".", "plot", "(", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "'k--'", ",", "lw", "=", "lw", ")", "\n", "ax", ".", "set_xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'False Positive Rate (FPR/Fallout)'", ")", "\n", "ax", ".", "set_ylabel", "(", "'True Positive Rate (TPR/Sensitivity)'", ")", "\n", "ax", ".", "set_title", "(", "\"\\n\"", ".", "join", "(", "wrap", "(", "f'{name_variable}'", ")", ")", ")", "\n", "\n", "# Put a legend to the right of the current axis", "\n", "ax", ".", "legend", "(", "loc", "=", "'center left'", ",", "bbox_to_anchor", "=", "(", "1", ",", "0.5", ")", ")", "\n", "\n", "# # Turn on the minor TICKS, which are required for the minor GRID", "\n", "ax", ".", "minorticks_on", "(", ")", "\n", "# # Customize the major grid", "\n", "ax", ".", "grid", "(", "which", "=", "'major'", ",", "linestyle", "=", "'-'", ",", "linewidth", "=", "'0.5'", ",", "color", "=", "'red'", ")", "\n", "# # Customize the minor grid", "\n", "ax", ".", "grid", "(", "which", "=", "'minor'", ",", "linestyle", "=", "'solid'", ",", "linewidth", "=", "'0.25'", ",", "color", "=", "'black'", ")", "\n", "# # ax.show()", "\n", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "filename", ",", "'ROC_'", "+", "name_variable", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "# --- Close the figure and clear up the axis to free memory.", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.plot_precision_recall": [[132, 208], ["numpy.asarray", "numpy.asarray", "dict", "dict", "dict", "len", "range", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.average_precision_score", "logger.info", "visualization.get_cmap", "matplotlib.figure", "numpy.linspace", "lines.append", "range", "matplotlib.gcf", "plt.gcf.subplots_adjust", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.minorticks_on", "matplotlib.savefig", "matplotlib.cla", "matplotlib.close", "sklearn.metrics.precision_recall_curve", "sklearn.metrics.average_precision_score", "np.asarray.ravel", "np.asarray.ravel", "numpy.linspace", "matplotlib.plot", "matplotlib.annotate", "labels.append", "matplotlib.plot", "lines.append", "labels.append", "matplotlib.plot", "lines.append", "labels.append", "os.path.join", "textwrap.wrap", "get_cmap."], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.get_cmap", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.VisdomLinePlotter.plot", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.VisdomLinePlotter.plot", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.visualization.VisdomLinePlotter.plot"], ["", "def", "plot_precision_recall", "(", "y", ",", "y_hat", ",", "class_names", ",", "filename", ",", "name_variable", ")", ":", "\n", "    ", "\"\"\"\n    From Scikit example. Plots the precision-recall for multiple classes\n    :param y: Ground truth labels\n    :param y_hat: Model predicted labels\n    :param class_names:\n    :param filename: the output directory where the file should be written\n    :param name_variable: the filename with the extension.\n    :return: None (file gets written to disk)\n    \"\"\"", "\n", "Y_test", "=", "np", ".", "asarray", "(", "y", ")", "\n", "y_score", "=", "np", ".", "asarray", "(", "y_hat", ")", "\n", "# For each class", "\n", "precision", "=", "dict", "(", ")", "\n", "recall", "=", "dict", "(", ")", "\n", "average_precision", "=", "dict", "(", ")", "\n", "n_classes", "=", "len", "(", "class_names", ")", "\n", "for", "i", "in", "range", "(", "n_classes", ")", ":", "\n", "        ", "precision", "[", "i", "]", ",", "recall", "[", "i", "]", ",", "_", "=", "precision_recall_curve", "(", "Y_test", "[", "i", "]", ",", "\n", "y_score", "[", "i", "]", ")", "\n", "average_precision", "[", "i", "]", "=", "average_precision_score", "(", "Y_test", "[", "i", "]", ",", "y_score", "[", "i", "]", ")", "\n", "\n", "# A \"micro-average\": quantifying score on all classes jointly", "\n", "", "precision", "[", "\"micro\"", "]", ",", "recall", "[", "\"micro\"", "]", ",", "_", "=", "precision_recall_curve", "(", "Y_test", ".", "ravel", "(", ")", ",", "\n", "y_score", ".", "ravel", "(", ")", ")", "\n", "average_precision", "[", "\"micro\"", "]", "=", "average_precision_score", "(", "Y_test", ",", "y_score", ",", "\n", "average", "=", "\"micro\"", ")", "\n", "logger", ".", "info", "(", "'Average precision score, micro-averaged over all classes: {0:0.2f}'", "\n", ".", "format", "(", "average_precision", "[", "\"micro\"", "]", ")", ")", "\n", "\n", "# setup plot details", "\n", "colors", "=", "get_cmap", "(", "n_classes", ")", "\n", "\n", "# plt.figure(figsize=(7, 8))", "\n", "plt", ".", "figure", "(", ")", "\n", "f_scores", "=", "np", ".", "linspace", "(", "0.2", ",", "0.8", ",", "num", "=", "4", ")", "\n", "lines", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "f_score", "in", "f_scores", ":", "\n", "        ", "x", "=", "np", ".", "linspace", "(", "0.01", ",", "1", ")", "\n", "y", "=", "f_score", "*", "x", "/", "(", "2", "*", "x", "-", "f_score", ")", "\n", "l", ",", "=", "plt", ".", "plot", "(", "x", "[", "y", ">=", "0", "]", ",", "y", "[", "y", ">=", "0", "]", ",", "color", "=", "'gray'", ",", "alpha", "=", "0.2", ")", "\n", "plt", ".", "annotate", "(", "'f1={0:0.1f}'", ".", "format", "(", "f_score", ")", ",", "xy", "=", "(", "0.9", ",", "y", "[", "45", "]", "+", "0.02", ")", ")", "\n", "\n", "", "lines", ".", "append", "(", "l", ")", "\n", "\n", "if", "n_classes", ">", "1", ":", "\n", "        ", "labels", ".", "append", "(", "'iso-f1 curves'", ")", "\n", "l", ",", "=", "plt", ".", "plot", "(", "recall", "[", "\"micro\"", "]", ",", "precision", "[", "\"micro\"", "]", ",", "color", "=", "'gold'", ",", "lw", "=", "2", ")", "\n", "lines", ".", "append", "(", "l", ")", "\n", "labels", ".", "append", "(", "'micro-average Precision-recall (area = {0:0.2f})'", "\n", "''", ".", "format", "(", "average_precision", "[", "\"micro\"", "]", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "n_classes", ")", ":", "\n", "        ", "l", ",", "=", "plt", ".", "plot", "(", "recall", "[", "i", "]", ",", "precision", "[", "i", "]", ",", "color", "=", "colors", "(", "i", ")", ",", "lw", "=", "2", ")", "\n", "lines", ".", "append", "(", "l", ")", "\n", "labels", ".", "append", "(", "'{0} (area = {1:0.2f})'", "\n", "''", ".", "format", "(", "class_names", "[", "i", "]", ",", "average_precision", "[", "i", "]", ")", ")", "\n", "\n", "", "fig", "=", "plt", ".", "gcf", "(", ")", "\n", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.25", ")", "\n", "plt", ".", "xlim", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "0.0", ",", "1.05", "]", ")", "\n", "plt", ".", "xlabel", "(", "'Recall'", ")", "\n", "plt", ".", "ylabel", "(", "'Precision'", ")", "\n", "\n", "plt", ".", "title", "(", "\"\\n\"", ".", "join", "(", "wrap", "(", "f'Precision-Recall -- {name_variable}'", ")", ")", ")", "\n", "# Put a legend to the right of the current axis", "\n", "plt", ".", "legend", "(", "lines", ",", "labels", ",", "loc", "=", "'center left'", ",", "bbox_to_anchor", "=", "(", "1", ",", "0.5", ")", ")", "\n", "# Turn on the minor TICKS, which are required for the minor GRID", "\n", "plt", ".", "minorticks_on", "(", ")", "\n", "# Customize the major grid", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "filename", ",", "\"Precision-Recall_\"", "+", "name_variable", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "# --- Close the figure and clear up the axis to free memory.", "\n", "plt", ".", "cla", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils._BaseWrapper.__init__": [[21, 26], ["object.__init__", "next", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "_BaseWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "handlers", "=", "[", "]", "# a set of hook function handlers", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils._BaseWrapper.generate": [[27, 29], ["None"], "methods", ["None"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils._BaseWrapper.forward": [[30, 38], ["gradcam_utils._BaseWrapper.model.zero_grad", "gradcam_utils._BaseWrapper.model", "torch.softmax", "torch.softmax", "torch.softmax", "list", "zip", "gradcam_utils._BaseWrapper.probs.sort"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Simple classification\n        \"\"\"", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "self", ".", "logits", "=", "self", ".", "model", "(", "image", ")", "\n", "self", ".", "probs", "=", "F", ".", "softmax", "(", "self", ".", "logits", ",", "dim", "=", "1", ")", "\n", "return", "list", "(", "zip", "(", "*", "self", ".", "probs", ".", "sort", "(", "0", ",", "True", ")", ")", ")", "# element: (probability, index)", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.GradCam.__init__": [[41, 58], ["gradcam_utils._BaseWrapper.__init__", "collections.OrderedDict", "collections.OrderedDict", "gradcam_utils.GradCam.model.named_modules", "output.detach", "grad_out[].detach", "gradcam_utils.GradCam.handlers.append", "gradcam_utils.GradCam.handlers.append", "id", "id", "len", "module[].register_forward_hook", "module[].register_backward_hook"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "candidate_layers", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "GradCam", ",", "self", ")", ".", "__init__", "(", "model", ")", "\n", "self", ".", "fmap_pool", "=", "OrderedDict", "(", ")", "\n", "self", ".", "grad_pool", "=", "OrderedDict", "(", ")", "\n", "self", ".", "candidate_layers", "=", "candidate_layers", "\n", "\n", "def", "forward_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "fmap_pool", "[", "id", "(", "module", ")", "]", "=", "output", ".", "detach", "(", ")", "\n", "\n", "\n", "", "def", "backward_hook", "(", "module", ",", "grad_in", ",", "grad_out", ")", ":", "\n", "            ", "self", ".", "grad_pool", "[", "id", "(", "module", ")", "]", "=", "grad_out", "[", "0", "]", ".", "detach", "(", ")", "\n", "\n", "", "for", "module", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "candidate_layers", ")", "==", "0", "or", "module", "[", "0", "]", "in", "self", ".", "candidate_layers", ":", "\n", "                ", "self", ".", "handlers", ".", "append", "(", "module", "[", "1", "]", ".", "register_forward_hook", "(", "forward_hook", ")", ")", "\n", "self", ".", "handlers", ".", "append", "(", "module", "[", "1", "]", ".", "register_backward_hook", "(", "backward_hook", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.GradCam.find": [[59, 68], ["pool.items", "ValueError", "gradcam_utils.GradCam.model.named_modules", "id"], "methods", ["None"], ["", "", "", "def", "find", "(", "self", ",", "pool", ",", "target_layer", ")", ":", "\n", "# --- Query the right layer and return it's value.", "\n", "        ", "for", "key", ",", "value", "in", "pool", ".", "items", "(", ")", ":", "\n", "            ", "for", "module", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "# print(module[0], id(module[1]), key)", "\n", "                ", "if", "id", "(", "module", "[", "1", "]", ")", "==", "key", ":", "\n", "                    ", "if", "module", "[", "0", "]", "==", "target_layer", ":", "\n", "                        ", "return", "value", "\n", "", "", "", "", "raise", "ValueError", "(", "f\"Invalid Layer Name: {target_layer}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.GradCam.normalize": [[69, 72], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "grads", ")", ":", "\n", "        ", "l2_norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "grads", ",", "2", ")", ")", ")", "+", "1e-5", "\n", "return", "grads", "/", "l2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.GradCam.compute_grad_weights": [[73, 76], ["gradcam_utils.GradCam.normalize", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.normalize"], ["", "def", "compute_grad_weights", "(", "self", ",", "grads", ")", ":", "\n", "        ", "grads", "=", "self", ".", "normalize", "(", "grads", ")", "\n", "return", "F", ".", "adaptive_avg_pool2d", "(", "grads", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.GradCam.generate": [[78, 89], ["gradcam_utils.GradCam.find", "gradcam_utils.GradCam.find", "gradcam_utils.GradCam.compute_grad_weights", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.min", "torch.clamp.min", "torch.clamp.min", "torch.clamp.max", "torch.clamp.max", "torch.clamp.max"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.compute_grad_weights"], ["", "def", "generate", "(", "self", ",", "target_layer", ")", ":", "\n", "        ", "fmaps", "=", "self", ".", "find", "(", "self", ".", "fmap_pool", ",", "target_layer", ")", "\n", "grads", "=", "self", ".", "find", "(", "self", ".", "grad_pool", ",", "target_layer", ")", "\n", "weights", "=", "self", ".", "compute_grad_weights", "(", "grads", ")", "\n", "\n", "gcam", "=", "(", "fmaps", "[", "0", "]", "*", "weights", "[", "0", "]", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "gcam", "=", "torch", ".", "clamp", "(", "gcam", ",", "min", "=", "0.0", ")", "\n", "\n", "gcam", "-=", "gcam", ".", "min", "(", ")", "\n", "gcam", "/=", "gcam", ".", "max", "(", ")", "\n", "return", "gcam", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.compute_gradCAM": [[91, 113], ["torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "probs.backward", "torch.mul().sum.find", "torch.mul().sum.find", "torch.adaptive_avg_pool2d", "torch.mul().sum", "torch.mul().sum", "torch.mul().sum", "torch.relu", "torch.max", "torch.max", "torch.max", "range", "range", "torch.zeros", "torch.zeros", "torch.zeros", "criterion", "torch.zeros().float.cuda", "torch.mul", "torch.mul", "torch.mul", "torch.max", "torch.max", "torch.max"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find"], ["", "", "def", "compute_gradCAM", "(", "probs", ",", "labels", ",", "gcam", ",", "testing_labels", ",", "criterion", ",", "target_layer", "=", "'encoder.blocks.6'", ")", ":", "\n", "# --- one hot encode this:", "\n", "# one_hot = torch.zeros((labels.shape[0], labels.shape[1])).float()", "\n", "    ", "one_hot", "=", "torch", ".", "zeros", "(", "(", "probs", ".", "shape", "[", "0", "]", ",", "probs", ".", "shape", "[", "1", "]", ")", ")", ".", "float", "(", ")", "\n", "max_int", "=", "torch", ".", "max", "(", "criterion", "(", "probs", ")", ",", "1", ")", "[", "1", "]", "\n", "\n", "if", "testing_labels", ":", "\n", "        ", "for", "i", "in", "range", "(", "one_hot", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "one_hot", "[", "i", "]", "[", "max_int", "[", "i", "]", "]", "=", "1.0", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "one_hot", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "one_hot", "[", "i", "]", "[", "torch", ".", "max", "(", "labels", ",", "1", ")", "[", "1", "]", "[", "i", "]", "]", "=", "1.0", "\n", "\n", "", "", "probs", ".", "backward", "(", "gradient", "=", "one_hot", ".", "cuda", "(", ")", ",", "retain_graph", "=", "True", ")", "\n", "fmaps", "=", "gcam", ".", "find", "(", "gcam", ".", "fmap_pool", ",", "target_layer", ")", "\n", "grads", "=", "gcam", ".", "find", "(", "gcam", ".", "grad_pool", ",", "target_layer", ")", "\n", "\n", "weights", "=", "F", ".", "adaptive_avg_pool2d", "(", "grads", ",", "1", ")", "\n", "gcam", "=", "torch", ".", "mul", "(", "fmaps", ",", "weights", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "gcam_out", "=", "F", ".", "relu", "(", "gcam", ")", "\n", "return", "probs", ",", "gcam_out", ",", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.get_mask": [[115, 134], ["range", "torch.interpolate", "gcam.view.view", "gcam.view.view", "gcam.view.min", "gcam.view.max", "[].sum", "tqdm.tqdm.write"], "function", ["None"], ["", "def", "get_mask", "(", "gcam", ",", "criterion", ",", "sigma", "=", ".5", ",", "w", "=", "8", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "gcam", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "temp_loc", "=", "-", "1", "\n", "if", "gcam", "[", "i", "]", "[", ":", "]", ".", "sum", "(", ")", "!=", "0", ":", "\n", "            ", "gcam", "[", "i", "]", "[", ":", "]", "=", "gcam", "[", "i", "]", "[", ":", "]", "\n", "", "else", ":", "\n", "            ", "temp_loc", "=", "i", "\n", "\n", "", "if", "temp_loc", "!=", "-", "1", ":", "\n", "            ", "tqdm_write", ".", "write", "(", "f'#--Zero SUM Error{i}--#'", "*", "2", ")", "\n", "\n", "", "", "gcam", "=", "F", ".", "interpolate", "(", "gcam", ",", "size", "=", "(", "224", ",", "224", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "B", ",", "C", ",", "H", ",", "W", "=", "gcam", ".", "shape", "\n", "gcam", "=", "gcam", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "gcam", "-=", "gcam", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "gcam", "/=", "gcam", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "mask", "=", "gcam", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.wrap_plotting": [[135, 231], ["os.path.join", "enumerate", "os.path.isdir", "os.makedirs", "images[].cpu().numpy", "numpy.rollaxis", "np.multiply.min", "np.multiply.max", "numpy.multiply", "masks[].cpu().numpy", "numpy.multiply", "numpy.rollaxis", "gcam_mask[].cpu().numpy", "cv2.applyColorMap", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "[].cpu().numpy", "cv2.applyColorMap.min", "cv2.applyColorMap.max", "numpy.multiply", "numpy.rollaxis", "[].cpu().numpy", "cv2.applyColorMap.min", "cv2.applyColorMap.max", "numpy.multiply", "numpy.rollaxis", "numpy.uint8", "cv2.applyColorMap.astype", "np.multiply.astype", "cv2.applyColorMap", "cv2.applyColorMap", "matplotlib.subplots", "matplotlib.set_cmap", "matplotlib.tight_layout", "ax[].imshow", "ax[].set_title", "ax[].imshow", "ax[].set_title", "fig.colorbar", "os.path.join", "matplotlib.set_cmap", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.savefig", "images[].cpu", "masks[].cpu", "gcam_mask[].cpu", "matplotlib.jet_r", "cmap.astype", "np.multiply.astype", "cv2.applyColorMap.max", "numpy.uint8", "cv2.applyColorMap.astype", "np.multiply.astype", "numpy.uint8", "cv2.applyColorMap.astype", "np.multiply.astype", "axi.set_axis_off", "numpy.uint8", "numpy.uint8", "ax[].imshow", "ax[].set_title", "fig.colorbar", "ax[].imshow", "ax[].set_title", "fig.colorbar", "fig.savefig", "os.path.isdir", "os.makedirs", "numpy.uint8", "numpy.uint8", "[].cpu", "[].cpu", "cv2.applyColorMap.max", "cv2.applyColorMap.max", "ax.ravel", "textwrap.wrap", "textwrap.wrap", "numpy.uint8", "numpy.uint8", "textwrap.wrap", "textwrap.wrap"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow"], ["", "def", "wrap_plotting", "(", "args", ",", "images", ",", "gcam_mask", ",", "masks", ",", "indices", ",", "labels", ",", "model_dir", ",", "y_cl", ",", "masks_pred", "=", "None", ",", "mask_two_branch", "=", "None", ",", "seperate_save", "=", "False", ")", ":", "\n", "    ", "write_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'viz_plots'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "write_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "write_dir", ")", "\n", "\n", "", "for", "index", ",", "image_name", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "raw_image", "=", "images", "[", "index", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "raw_image", "=", "np", ".", "rollaxis", "(", "raw_image", ",", "0", ",", "3", ")", "\n", "raw_image", "-=", "raw_image", ".", "min", "(", ")", "\n", "raw_image", "/=", "raw_image", ".", "max", "(", ")", "\n", "raw_image", "=", "np", ".", "multiply", "(", "raw_image", ",", "255.0", ")", "\n", "if", "args", ".", "model_type", "==", "'kfn'", ":", "\n", "            ", "heatmap_branch1_npy", "=", "mask_two_branch", "[", "0", "]", "[", "index", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "heatmap_branch1_npy", "-=", "heatmap_branch1_npy", ".", "min", "(", ")", "\n", "heatmap_branch1_npy", "/=", "heatmap_branch1_npy", ".", "max", "(", ")", "\n", "heatmap_branch1_npy", "=", "np", ".", "multiply", "(", "heatmap_branch1_npy", ",", "255.0", ")", "\n", "heatmap_branch1_npy", "=", "np", ".", "rollaxis", "(", "heatmap_branch1_npy", ",", "0", ",", "3", ")", "\n", "\n", "heatmap_branch2_npy", "=", "mask_two_branch", "[", "1", "]", "[", "index", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "heatmap_branch2_npy", "-=", "heatmap_branch2_npy", ".", "min", "(", ")", "\n", "heatmap_branch2_npy", "/=", "heatmap_branch2_npy", ".", "max", "(", ")", "\n", "heatmap_branch2_npy", "=", "np", ".", "multiply", "(", "heatmap_branch2_npy", ",", "255.0", ")", "\n", "heatmap_branch2_npy", "=", "np", ".", "rollaxis", "(", "heatmap_branch2_npy", ",", "0", ",", "3", ")", "\n", "\n", "\n", "# -- Plot ground truth masks.", "\n", "", "heatmap_image_npy", "=", "masks", "[", "index", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "heatmap_image_npy", "=", "np", ".", "multiply", "(", "heatmap_image_npy", ",", "255.0", ")", "\n", "heatmap_image_npy", "=", "np", ".", "rollaxis", "(", "heatmap_image_npy", ",", "0", ",", "3", ")", "\n", "\n", "gcam_npy", "=", "gcam_mask", "[", "index", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "cmap", "=", "cm", ".", "jet_r", "(", "gcam_npy", "[", "0", "]", ")", "[", "...", ",", ":", "3", "]", "*", "255.0", "\n", "gcam_npy", "=", "(", "cmap", ".", "astype", "(", "np", ".", "float", ")", "+", "raw_image", ".", "astype", "(", "np", ".", "float", ")", ")", "/", "2", "\n", "gcam_npy", "[", ":", ",", ":", ",", "[", "2", ",", "0", "]", "]", "=", "gcam_npy", "[", ":", ",", ":", ",", "[", "0", ",", "2", "]", "]", "# This is needed because opencv uses BGR as its default color while matplotlib uses RGB", "\n", "\n", "heatmap_image_npy", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "heatmap_image_npy", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap_image_npy", "=", "heatmap_image_npy", ".", "astype", "(", "np", ".", "float", ")", "+", "raw_image", ".", "astype", "(", "np", ".", "float", ")", "\n", "heatmap_image_npy", "=", "heatmap_image_npy", "/", "heatmap_image_npy", ".", "max", "(", ")", "*", "255.0", "\n", "heatmap_image_npy", "[", ":", ",", ":", ",", "[", "2", ",", "0", "]", "]", "=", "heatmap_image_npy", "[", ":", ",", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "\n", "if", "args", ".", "model_type", "==", "'kfn'", ":", "\n", "            ", "heatmap_branch1_npy", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "heatmap_branch1_npy", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap_branch1_npy", "=", "heatmap_branch1_npy", ".", "astype", "(", "np", ".", "float", ")", "+", "raw_image", ".", "astype", "(", "np", ".", "float", ")", "\n", "heatmap_branch1_npy", "=", "heatmap_branch1_npy", "/", "heatmap_branch1_npy", ".", "max", "(", ")", "*", "255.0", "\n", "heatmap_branch1_npy", "[", ":", ",", ":", ",", "[", "2", ",", "0", "]", "]", "=", "heatmap_branch1_npy", "[", ":", ",", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "\n", "heatmap_branch2_npy", "=", "cv2", ".", "applyColorMap", "(", "np", ".", "uint8", "(", "heatmap_branch2_npy", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heatmap_branch2_npy", "=", "heatmap_branch2_npy", ".", "astype", "(", "np", ".", "float", ")", "+", "raw_image", ".", "astype", "(", "np", ".", "float", ")", "\n", "heatmap_branch2_npy", "=", "heatmap_branch2_npy", "/", "heatmap_branch2_npy", ".", "max", "(", ")", "*", "255.0", "\n", "heatmap_branch2_npy", "[", ":", ",", ":", ",", "[", "2", ",", "0", "]", "]", "=", "heatmap_branch2_npy", "[", ":", ",", ":", ",", "[", "0", ",", "2", "]", "]", "\n", "\n", "\n", "", "_", ",", "truth_labels", "=", "torch", ".", "max", "(", "labels", "[", "index", "]", ",", "0", ")", "\n", "label_name", "=", "args", ".", "class_names", "[", "truth_labels", "]", "\n", "_", ",", "pred_label", "=", "torch", ".", "max", "(", "y_cl", "[", "index", "]", ",", "0", ")", "\n", "pred_label_name", "=", "args", ".", "class_names", "[", "pred_label", "]", "\n", "\n", "if", "not", "seperate_save", ":", "\n", "            ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "4", ")", "\n", "\n", "plt", ".", "set_cmap", "(", "'jet'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "# -- Turn of the axis", "\n", "[", "axi", ".", "set_axis_off", "(", ")", "for", "axi", "in", "ax", ".", "ravel", "(", ")", "]", "\n", "# fig.tight_layout()", "\n", "plt0", "=", "ax", "[", "0", "]", ".", "imshow", "(", "np", ".", "uint8", "(", "raw_image", ")", ",", "interpolation", "=", "'bicubic'", ")", "\n", "ax", "[", "0", "]", ".", "set_title", "(", "\"\\n\"", ".", "join", "(", "wrap", "(", "f'Index:{image_name}, Truth: {label_name}'", ")", ")", ")", "\n", "\n", "plt1", "=", "ax", "[", "1", "]", ".", "imshow", "(", "np", ".", "uint8", "(", "heatmap_image_npy", ")", ",", "interpolation", "=", "'bicubic'", ")", "\n", "ax", "[", "1", "]", ".", "set_title", "(", "\"\\n\"", ".", "join", "(", "wrap", "(", "f'EyeGaze Heatmap'", ")", ")", ")", "\n", "fig", ".", "colorbar", "(", "plt1", ",", "ax", "=", "ax", "[", "1", "]", ",", "fraction", "=", "0.046", ",", "pad", "=", "0.04", ")", "\n", "\n", "if", "args", ".", "model_type", "==", "'kfn'", ":", "\n", "                ", "plt2", "=", "ax", "[", "2", "]", ".", "imshow", "(", "np", ".", "uint8", "(", "heatmap_branch1_npy", ")", ",", "interpolation", "=", "'bicubic'", ")", "\n", "ax", "[", "2", "]", ".", "set_title", "(", "\"\\n\"", ".", "join", "(", "wrap", "(", "f\"Image Branch GradCam\"", ")", ")", ")", "\n", "fig", ".", "colorbar", "(", "plt2", ",", "ax", "=", "ax", "[", "2", "]", ",", "fraction", "=", "0.046", ",", "pad", "=", "0.04", ")", "\n", "plt3", "=", "ax", "[", "3", "]", ".", "imshow", "(", "np", ".", "uint8", "(", "heatmap_branch2_npy", ")", ",", "interpolation", "=", "'bicubic'", ")", "\n", "ax", "[", "3", "]", ".", "set_title", "(", "\"\\n\"", ".", "join", "(", "wrap", "(", "f\"HA Branch GradCam\"", ")", ")", ")", "\n", "fig", ".", "colorbar", "(", "plt3", ",", "ax", "=", "ax", "[", "3", "]", ",", "fraction", "=", "0.046", ",", "pad", "=", "0.04", ")", "\n", "fig", ".", "savefig", "(", "f\"{write_dir}/TwoBranch_{image_name}.png\"", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "pr_dir", "=", "os", ".", "path", ".", "join", "(", "write_dir", ",", "'ha'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "pr_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "pr_dir", ")", "\n", "", "plt", ".", "set_cmap", "(", "'jet'", ")", "\n", "# my_dpi = 92", "\n", "# plt.figure(figsize=(224/my_dpi, 224/my_dpi), dpi=my_dpi)", "\n", "# plt.tight_layout()", "\n", "plt", ".", "imshow", "(", "np", ".", "uint8", "(", "raw_image", ")", ")", "\n", "# plt.imshow(np.uint8(unet_mask_pred_npy))", "\n", "plt", ".", "imshow", "(", "np", ".", "uint8", "(", "heatmap_image_npy", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "savefig", "(", "f\"{pr_dir}/{image_name}.png\"", ")", "\n", "\n", "", "", "return", "plt", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.visualize_gcam": [[233, 266], ["tqdm.tqdm", "images.cuda.cuda", "labels.cuda.cuda", "y_hm.cuda.cuda", "torch.Sigmoid", "gaze_img.cuda.cuda", "attributes.cuda.cuda", "model", "print", "exit", "len", "gradcam_utils.compute_gradCAM", "gradcam_utils.compute_gradCAM", "gradcam_utils.get_mask", "gradcam_utils.get_mask", "gradcam_utils.wrap_plotting", "print", "exit", "nn.Sigmoid."], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.compute_gradCAM", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.compute_gradCAM", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.get_mask", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.get_mask", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam_utils.wrap_plotting"], ["", "def", "visualize_gcam", "(", "args", ",", "model", ",", "test_dl", ",", "gcam", ",", "target_layer", "=", "'encoder.blocks.6'", ",", "model_dir", "=", "''", ")", ":", "\n", "# counter = 0", "\n", "    ", "for", "images", ",", "labels", ",", "idx", ",", "y_hm", ",", "gaze_img", ",", "attributes", "in", "tqdm_write", "(", "test_dl", ")", ":", "\n", "        ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "y_hm", "=", "y_hm", ".", "cuda", "(", ")", "\n", "prob_criterion", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "gaze_img", "=", "gaze_img", ".", "cuda", "(", ")", "\n", "attributes", "=", "attributes", ".", "cuda", "(", ")", "\n", "testing_labels", "=", "True", "\n", "\n", "if", "args", ".", "model_type", "==", "'kfn'", ":", "\n", "            ", "y_cl", "=", "model", "(", "images", ",", "gaze_img", ")", "\n", "# elif args.model_type == 'baseline':", "\n", "#     y_cl = model(images)", "\n", "#     masks_pred = None", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Not implemented yet.'", ")", "\n", "exit", "(", ")", "\n", "# masks_pred, y_cl = model(images)", "\n", "\n", "", "if", "len", "(", "target_layer", ")", ">", "1", ":", "\n", "#### we have two branches. ", "\n", "            ", "_", ",", "gcam_out1", ",", "one_hot", "=", "compute_gradCAM", "(", "y_cl", ",", "labels", ",", "gcam", ",", "testing_labels", ",", "prob_criterion", ",", "target_layer", "[", "0", "]", ")", "\n", "_", ",", "gcam_out2", ",", "one_hot", "=", "compute_gradCAM", "(", "y_cl", ",", "labels", ",", "gcam", ",", "testing_labels", ",", "prob_criterion", ",", "target_layer", "[", "1", "]", ")", "\n", "gcam_mask1", "=", "get_mask", "(", "gcam_out1", ",", "prob_criterion", ")", "\n", "gcam_mask2", "=", "get_mask", "(", "gcam_out2", ",", "prob_criterion", ")", "\n", "gcam_mask", "=", "gcam_mask1", "+", "gcam_mask2", "\n", "# indices = one_hot.max(dim=1)[1]", "\n", "wrap_plotting", "(", "args", ",", "images", ",", "gcam_mask", ",", "y_hm", ",", "idx", ",", "labels", ",", "model_dir", ",", "prob_criterion", "(", "y_cl", ")", ",", "mask_two_branch", "=", "[", "gcam_mask1", ",", "gcam_mask2", "]", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Not implemented yet.'", ")", "\n", "exit", "(", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.EyegazeDataset.__init__": [[105, 113], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "image_path_name", ",", "class_names", ",", "static_heatmap_path", "=", "None", ",", "heatmap_static_transform", "=", "None", ",", "image_transform", "=", "None", ",", "heatmaps_threshold", "=", "None", ")", ":", "\n", "        ", "self", ".", "csv_file", "=", "csv_file", "\n", "self", ".", "path_name", "=", "image_path_name", "\n", "self", ".", "image_transform", "=", "image_transform", "\n", "self", ".", "heatmap_static_transform", "=", "heatmap_static_transform", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "static_heatmap_path", "=", "static_heatmap_path", "\n", "self", ".", "heatmaps_threshold", "=", "heatmaps_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.EyegazeDataset.__len__": [[114, 116], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.EyegazeDataset.get_image": [[117, 150], ["os.path.join", "image_path.replace.replace.replace", "dataset.read_cxrjpg", "numpy.array().tolist", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "[].squeeze", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.nan_to_num", "dataset.EyegazeDataset.image_transform", "dataset.EyegazeDataset.float", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.asarray", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.read_cxrjpg"], ["", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "# -- Query the index location of the required file", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path_name", ",", "self", ".", "csv_file", "[", "'path'", "]", ".", "iloc", "[", "idx", "]", ")", "\n", "image_path", "=", "image_path", ".", "replace", "(", "'.dcm'", ",", "'.jpg'", ")", "\n", "image_pil", "=", "read_cxrjpg", "(", "image_path", ")", "\n", "\n", "### multi-label", "\n", "truth_labels", "=", "[", "self", ".", "csv_file", "[", "labels", "]", ".", "iloc", "[", "idx", "]", "for", "labels", "in", "self", ".", "class_names", "]", "\n", "y_label", "=", "np", ".", "array", "(", "truth_labels", ",", "dtype", "=", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "y_label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "y_label", ")", ")", ".", "float", "(", ")", "\n", "\n", "##### one hot label", "\n", "one_label", "=", "(", "(", "y_label", "==", "1.0", ")", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "[", "0", "]", ")", ".", "squeeze", "(", ")", "\n", "\n", "###### attributes", "\n", "healthy", "=", "'no_finding__chx'", "\n", "attributes", "=", "[", "'atelectasis__chx'", ",", "'cardiomegaly__chx'", ",", "'consolidation__chx'", ",", "'edema__chx'", ",", "'enlarged_cardiomediastinum__chx'", ",", "'fracture__chx'", ",", "'lung_lesion__chx'", ",", "'lung_opacity__chx'", ",", "'pleural_effusion__chx'", ",", "'pleural_other__chx'", ",", "'pneumonia__chx'", ",", "'pneumothorax__chx'", ",", "'support_devices__chx'", "]", "\n", "if", "self", ".", "csv_file", "[", "healthy", "]", ".", "iloc", "[", "idx", "]", "==", "1", ":", "\n", "            ", "attr_labels", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "attr_labels", "=", "[", "self", ".", "csv_file", "[", "attr", "]", ".", "iloc", "[", "idx", "]", "for", "attr", "in", "attributes", "]", "\n", "attr_labels", "=", "np", ".", "asarray", "(", "attr_labels", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "attr_labels", "[", "attr_labels", "==", "-", "1.", "]", "=", "0.0", "\n", "# make all the -1 values into nans (0.0) to keep things simple", "\n", "attr_labels", "=", "np", ".", "nan_to_num", "(", "attr_labels", ")", "\n", "", "attr_labels", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "attr_labels", ")", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "image_transform", ":", "\n", "            ", "image", "=", "self", ".", "image_transform", "(", "image_pil", ")", "\n", "", "return", "image_pil", ",", "image", ".", "float", "(", ")", ",", "one_label", ",", "attr_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.EyegazeDataset.num_sort": [[151, 154], ["re.compile", "int", "re.compile.sub"], "methods", ["None"], ["", "def", "num_sort", "(", "self", ",", "filename", ")", ":", "\n", "        ", "not_num", "=", "re", ".", "compile", "(", "\"\\D\"", ")", "\n", "return", "int", "(", "not_num", ".", "sub", "(", "\"\"", ",", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.EyegazeDataset.__getitem__": [[155, 181], ["dataset.EyegazeDataset.get_image", "dataset.normalizeData", "os.path.join", "PIL.Image.open().convert", "dataset.EyegazeDataset.heatmap_static_transform", "torchvision.Normalize", "torchvision.Normalize", "os.path.exists", "FileNotFoundError", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.EyegazeDataset.get_image", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.normalizeData"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_name", "=", "self", ".", "csv_file", "[", "'dicom_id'", "]", ".", "iloc", "[", "idx", "]", "\n", "y_hm", "=", "[", "]", "\n", "\n", "if", "self", ".", "static_heatmap_path", ":", "\n", "            ", "heat_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "static_heatmap_path", ",", "image_name", ")", "\n", "# ground_truth static heatmap", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "heat_path", "+", "'/heatmap.png'", ")", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "f'static heatmaps not found for {heat_path}'", ")", "\n", "", "y_hm_pil", "=", "Image", ".", "open", "(", "heat_path", "+", "'/heatmap.png'", ")", ".", "convert", "(", "'L'", ")", "\n", "y_hm", "=", "self", ".", "heatmap_static_transform", "(", "y_hm_pil", ")", "\n", "if", "self", ".", "heatmaps_threshold", ":", "\n", "                ", "y_hm", "=", "y_hm", ">", "self", ".", "heatmaps_threshold", "\n", "", "", "image_pil", ",", "image", ",", "y_label", ",", "attr_labels", "=", "self", ".", "get_image", "(", "idx", ")", "\n", "\n", "y_hm_n", "=", "normalizeData", "(", "y_hm", ")", "\n", "y_hm_n", "=", "y_hm_n", ">", "0.3", "# filter with 0.3 after normalization", "\n", "y_hm", "=", "y_hm", "*", "y_hm_n", "\n", "gaze_img", "=", "image", "*", "y_hm_n", "\n", "gaze_img", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "(", "gaze_img", ")", "\n", "image", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "(", "image", ")", "\n", "# # for viz", "\n", "# imshow(gaze_img, image_name)", "\n", "# exit()", "\n", "\n", "return", "image", ",", "y_label", ",", "image_name", ",", "y_hm", ",", "gaze_img", ",", "attr_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.normalizeData": [[15, 18], ["torch.min", "torch.min", "torch.max", "torch.max", "torch.min", "torch.min"], "function", ["None"], ["def", "normalizeData", "(", "data", ")", ":", "\n", "    ", "eps", "=", "1e-07", "\n", "return", "(", "data", "-", "torch", ".", "min", "(", "data", ")", ")", "/", "(", "torch", ".", "max", "(", "data", ")", "-", "torch", ".", "min", "(", "data", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.denormalize": [[21, 30], ["torchvision.Compose", "transforms.Compose.", "torchvision.Normalize", "torchvision.Normalize"], "function", ["None"], ["", "def", "denormalize", "(", "s", ")", ":", "\n", "    ", "invTrans", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "std", "=", "[", "1", "/", "0.229", ",", "1", "/", "0.224", ",", "1", "/", "0.225", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "-", "0.485", ",", "-", "0.456", ",", "-", "0.406", "]", ",", "\n", "std", "=", "[", "1.", ",", "1.", ",", "1.", "]", ")", ",", "\n", "]", ")", "\n", "\n", "inv_tensor", "=", "invTrans", "(", "s", ")", "\n", "return", "inv_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.imshow": [[31, 41], ["dataset.denormalize", "dataset.normalizeData", "normalizeData.numpy", "matplotlib.imshow", "matplotlib.savefig", "numpy.transpose", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.denormalize", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.normalizeData", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow"], ["", "def", "imshow", "(", "img", ",", "image_name", ")", ":", "\n", "    ", "img", "=", "denormalize", "(", "img", ")", "# unnormalize", "\n", "img", "=", "normalizeData", "(", "img", ")", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "# plt.show()", "\n", "save_path", "=", "'./viz'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "plt", ".", "savefig", "(", "'%s/%s.jpg'", "%", "(", "save_path", ",", "image_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.heatmap_show": [[43, 57], ["dataset.denormalize", "dataset.normalizeData", "numpy.transpose", "numpy.transpose", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.colorbar", "matplotlib.savefig", "np.transpose.numpy", "os.path.exists", "os.makedirs", "np.transpose.numpy"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.denormalize", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.normalizeData", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow"], ["", "def", "heatmap_show", "(", "img", ",", "mask", ",", "image_name", ")", ":", "\n", "    ", "img", "=", "denormalize", "(", "img", ")", "# unnormalize", "\n", "img", "=", "normalizeData", "(", "img", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "save_path", "=", "'./viz'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "mask", "=", "np", ".", "transpose", "(", "mask", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "imshow", "(", "mask", ",", "cmap", "=", "'jet'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "colorbar", "(", "cmap", "=", "'jet'", ",", "fraction", "=", "0.046", ",", "pad", "=", "0.04", ")", "\n", "plt", ".", "savefig", "(", "'%s/%s.jpg'", "%", "(", "save_path", ",", "image_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.split_dataset": [[58, 72], ["pandas.read_csv", "list", "random.seed", "random.shuffle", "round", "round", "df[].unique", "len", "len", "df[].isin", "df[].isin", "df[].isin"], "function", ["None"], ["", "def", "split_dataset", "(", "file_path", ",", "random_state", "=", "10", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "file_path", ")", "\n", "# -- Split after uniquing the patient ids so that it does not get split across the different test, dev, test", "\n", "pid", "=", "list", "(", "df", "[", "'patient_id'", "]", ".", "unique", "(", ")", ")", "\n", "random", ".", "seed", "(", "random_state", ")", "\n", "random", ".", "shuffle", "(", "pid", ")", "\n", "train_patient_count", "=", "round", "(", "len", "(", "pid", ")", "*", "0.8", ")", "\n", "not_train", "=", "len", "(", "pid", ")", "-", "train_patient_count", "\n", "# --- Split this remaining equally into dev and test.", "\n", "dev_patient_count", "=", "round", "(", "not_train", "*", "0.5", ")", "\n", "train", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "pid", "[", ":", "train_patient_count", "]", ")", "]", "\n", "dev", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "pid", "[", "train_patient_count", ":", "train_patient_count", "+", "dev_patient_count", "]", ")", "]", "\n", "test", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "pid", "[", "train_patient_count", "+", "dev_patient_count", ":", "]", ")", "]", "\n", "return", "train", ",", "dev", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.nfold_split_dataset": [[74, 99], ["pandas.read_csv", "list", "random.seed", "random.shuffle", "range", "file_path.replace", "df[].unique", "round", "range", "open", "csv.writer", "csv.writer.writerow", "range", "os.path.join", "len", "len", "train_ids.extend", "df[].isin", "df[].isin"], "function", ["None"], ["", "def", "nfold_split_dataset", "(", "file_path", ",", "nFold", "=", "5", ",", "random_state", "=", "1", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "file_path", ")", "\n", "# -- Split after uniquing the patient ids so that it does not get split across the different test, dev, test", "\n", "pid", "=", "list", "(", "df", "[", "'patient_id'", "]", ".", "unique", "(", ")", ")", "\n", "random", ".", "seed", "(", "random_state", ")", "\n", "random", ".", "shuffle", "(", "pid", ")", "\n", "fold_count", "=", "round", "(", "len", "(", "pid", ")", "/", "nFold", ")", "+", "1", "\n", "split_dict", "=", "{", "}", "\n", "split_list", "=", "[", "pid", "[", "i", ":", "i", "+", "fold_count", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "pid", ")", ",", "fold_count", ")", "]", "\n", "for", "K", "in", "range", "(", "nFold", ")", ":", "\n", "        ", "train_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nFold", ")", ":", "\n", "            ", "if", "i", "==", "K", ":", "\n", "                ", "test_ids", "=", "split_list", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "train_ids", ".", "extend", "(", "split_list", "[", "i", "]", ")", "\n", "", "", "test", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "test_ids", ")", "]", "\n", "train", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "train_ids", ")", "]", "\n", "split_dict", "[", "K", "]", "=", "{", "'train'", ":", "train", ",", "'test'", ":", "test", "}", "\n", "# write the split to .csv file", "\n", "", "dir_path", "=", "file_path", ".", "replace", "(", "\"/master_sheet.csv\"", ",", "\"\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"%d_fold_split.csv\"", "%", "nFold", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "wr", "=", "csv", ".", "writer", "(", "f", ")", "\n", "wr", ".", "writerow", "(", "split_list", ")", "\n", "", "return", "split_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.dataset.read_cxrjpg": [[100, 103], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "read_cxrjpg", "(", "image_path", ")", ":", "\n", "    ", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.utils.compute_window_nums": [[26, 32], ["enumerate", "window_nums.append", "int", "int"], "function", ["None"], ["def", "compute_window_nums", "(", "ratios", ",", "stride", ",", "input_size", ")", ":", "\n", "    ", "window_nums", "=", "[", "]", "\n", "\n", "for", "_", ",", "ratio", "in", "enumerate", "(", "ratios", ")", ":", "\n", "        ", "window_nums", ".", "append", "(", "int", "(", "(", "input_size", "-", "ratio", "[", "0", "]", ")", "/", "stride", "+", "1", ")", "*", "int", "(", "(", "input_size", "-", "ratio", "[", "1", "]", ")", "/", "stride", "+", "1", ")", ")", "\n", "", "return", "window_nums", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.utils.ComputeCoordinate": [[33, 49], ["int", "numpy.array().reshape", "numpy.array"], "function", ["None"], ["", "def", "ComputeCoordinate", "(", "image_size", ",", "stride", ",", "indice", ",", "ratio", ")", ":", "\n", "    ", "column_window_num", "=", "int", "(", "(", "image_size", "-", "ratio", "[", "1", "]", ")", "/", "stride", "+", "1", ")", "\n", "x_indice", "=", "indice", "//", "column_window_num", "\n", "y_indice", "=", "indice", "%", "column_window_num", "\n", "x_lefttop", "=", "x_indice", "*", "stride", "-", "1", "\n", "y_lefttop", "=", "y_indice", "*", "stride", "-", "1", "\n", "x_rightlow", "=", "x_lefttop", "+", "ratio", "[", "0", "]", "\n", "y_rightlow", "=", "y_lefttop", "+", "ratio", "[", "1", "]", "\n", "# for image", "\n", "if", "x_lefttop", "<", "0", ":", "\n", "        ", "x_lefttop", "=", "0", "\n", "", "if", "y_lefttop", "<", "0", ":", "\n", "        ", "y_lefttop", "=", "0", "\n", "", "coordinate", "=", "np", ".", "array", "(", "(", "x_lefttop", ",", "y_lefttop", ",", "x_rightlow", ",", "y_rightlow", ")", ",", "dtype", "=", "object", ")", ".", "reshape", "(", "1", ",", "4", ")", "\n", "\n", "return", "coordinate", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.utils.indices2coordinates": [[51, 60], ["enumerate", "numpy.array().reshape().astype", "np.array().reshape().astype.append", "utils.ComputeCoordinate", "numpy.array().reshape", "numpy.array"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.indices2coordinates.ComputeCoordinate"], ["", "def", "indices2coordinates", "(", "indices", ",", "stride", ",", "image_size", ",", "ratio", ")", ":", "\n", "    ", "batch", ",", "_", "=", "indices", ".", "shape", "\n", "coordinates", "=", "[", "]", "\n", "\n", "for", "j", ",", "indice", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "coordinates", ".", "append", "(", "ComputeCoordinate", "(", "image_size", ",", "stride", ",", "indice", ",", "ratio", ")", ")", "\n", "\n", "", "coordinates", "=", "np", ".", "array", "(", "coordinates", ")", ".", "reshape", "(", "batch", ",", "4", ")", ".", "astype", "(", "int", ")", "\n", "return", "coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.utils.image_with_boxes": [[69, 112], ["type", "cv2.rectangle.clone().detach", "cv2.rectangle.mul().byte", "cv2.rectangle.data.cpu().numpy", "cv2.rectangle.astype", "numpy.transpose", "cv2.rectangle.copy", "enumerate", "image[].mul", "cv2.rectangle.clone", "cv2.rectangle.mul", "cv2.rectangle.data.cpu", "cv2.rectangle", "cv2.rectangle", "cv2.rectangle", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "image_with_boxes", "(", "image", ",", "coordinates", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "    ", "'''\n    :param image: image array(CHW) tensor\n    :param coordinate: bounding boxs coordinate, coordinates.shape = [proposalN, 4], coordinates[0] = (x0, y0, x1, y1)\n    :return:image with bounding box(HWC)\n    '''", "\n", "\n", "if", "type", "(", "image", ")", "is", "not", "np", ".", "ndarray", ":", "\n", "        ", "image", "=", "image", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "rgbN", "=", "[", "(", "255", ",", "0", ",", "0", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "255", ",", "165", ",", "0", ")", ",", "(", "255", ",", "165", ",", "0", ")", ",", "(", "255", ",", "165", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", "]", "\n", "\n", "# Anti-normalization", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "image", "[", "0", "]", "=", "image", "[", "0", "]", "*", "std", "[", "0", "]", "+", "mean", "[", "0", "]", "\n", "image", "[", "1", "]", "=", "image", "[", "1", "]", "*", "std", "[", "1", "]", "+", "mean", "[", "1", "]", "\n", "image", "[", "2", "]", "=", "image", "[", "2", "]", ".", "mul", "(", "std", "[", "2", "]", ")", "+", "mean", "[", "2", "]", "\n", "image", "=", "image", ".", "mul", "(", "255", ")", ".", "byte", "(", ")", "\n", "\n", "image", "=", "image", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# CHW --> HWC", "\n", "image", "=", "image", ".", "copy", "(", ")", "\n", "\n", "\n", "", "if", "coordinates", "is", "not", "None", ":", "\n", "        ", "for", "i", ",", "coordinate", "in", "enumerate", "(", "coordinates", ")", ":", "\n", "            ", "if", "color", ":", "\n", "                ", "image", "=", "cv2", ".", "rectangle", "(", "image", ",", "(", "int", "(", "coordinate", "[", "1", "]", ")", ",", "int", "(", "coordinate", "[", "0", "]", ")", ")", ",", "\n", "(", "int", "(", "coordinate", "[", "3", "]", ")", ",", "int", "(", "coordinate", "[", "2", "]", ")", ")", ",", "\n", "color", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "if", "i", "<", "proposalN", ":", "\n", "# coordinates(x, y) is reverse in numpy", "\n", "                    ", "image", "=", "cv2", ".", "rectangle", "(", "image", ",", "(", "int", "(", "coordinate", "[", "1", "]", ")", ",", "int", "(", "coordinate", "[", "0", "]", ")", ")", ",", "(", "int", "(", "coordinate", "[", "3", "]", ")", ",", "int", "(", "coordinate", "[", "2", "]", ")", ")", ",", "\n", "rgbN", "[", "i", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "image", "=", "cv2", ".", "rectangle", "(", "image", ",", "(", "int", "(", "coordinate", "[", "1", "]", ")", ",", "int", "(", "coordinate", "[", "0", "]", ")", ")", ",", "\n", "(", "int", "(", "coordinate", "[", "3", "]", ")", ",", "int", "(", "coordinate", "[", "2", "]", ")", ")", ",", "\n", "(", "255", ",", "255", ",", "255", ")", ",", "2", ")", "\n", "", "", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.utils.nms": [[113, 154], ["numpy.concatenate", "res.any", "numpy.array().reshape().astype", "TypeError", "numpy.argsort", "numpy.concatenate", "indices_results.append", "numpy.maximum", "numpy.minimum", "len", "indices_results.append", "len", "numpy.array().reshape().astype", "numpy.array().reshape", "len", "numpy.arange().reshape", "numpy.logical_or", "type", "numpy.array().reshape", "numpy.array", "numpy.arange", "numpy.array"], "function", ["None"], ["", "def", "nms", "(", "scores_np", ",", "proposalN", ",", "iou_threshs", ",", "coordinates", ",", "IND_RANDOM", "=", "None", ")", ":", "\n", "    ", "if", "not", "(", "type", "(", "scores_np", ")", ".", "__module__", "==", "'numpy'", "and", "len", "(", "scores_np", ".", "shape", ")", "==", "2", "and", "scores_np", ".", "shape", "[", "1", "]", "==", "1", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'score_np is not right'", ")", "\n", "\n", "", "windows_num", "=", "scores_np", ".", "shape", "[", "0", "]", "\n", "indices_coordinates", "=", "np", ".", "concatenate", "(", "(", "scores_np", ",", "coordinates", ")", ",", "1", ")", "\n", "# # indices = np.arange(windows_num)", "\n", "# # np.random.seed(1)", "\n", "# # np.random.shuffle(indices)", "\n", "if", "IND_RANDOM", "is", "not", "None", ":", "\n", "        ", "indices", "=", "IND_RANDOM", "\n", "", "else", ":", "\n", "        ", "indices", "=", "np", ".", "argsort", "(", "indices_coordinates", "[", ":", ",", "0", "]", ")", "\n", "", "indices_coordinates", "=", "np", ".", "concatenate", "(", "(", "indices_coordinates", ",", "np", ".", "arange", "(", "0", ",", "windows_num", ")", ".", "reshape", "(", "windows_num", ",", "1", ")", ")", ",", "1", ")", "[", "indices", "]", "#[339,6]", "\n", "indices_results", "=", "[", "]", "\n", "\n", "res", "=", "indices_coordinates", "\n", "\n", "while", "res", ".", "any", "(", ")", ":", "\n", "        ", "indice_coordinates", "=", "res", "[", "-", "1", "]", "\n", "indices_results", ".", "append", "(", "indice_coordinates", "[", "5", "]", ")", "\n", "\n", "if", "len", "(", "indices_results", ")", "==", "proposalN", ":", "\n", "            ", "return", "np", ".", "array", "(", "indices_results", ")", ".", "reshape", "(", "1", ",", "proposalN", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "res", "=", "res", "[", ":", "-", "1", "]", "\n", "\n", "# Exclude anchor boxes with selected anchor box whose iou is greater than the threshold", "\n", "start_max", "=", "np", ".", "maximum", "(", "res", "[", ":", ",", "1", ":", "3", "]", ",", "indice_coordinates", "[", "1", ":", "3", "]", ")", "\n", "end_min", "=", "np", ".", "minimum", "(", "res", "[", ":", ",", "3", ":", "5", "]", ",", "indice_coordinates", "[", "3", ":", "5", "]", ")", "\n", "lengths", "=", "end_min", "-", "start_max", "+", "1", "\n", "intersec_map", "=", "lengths", "[", ":", ",", "0", "]", "*", "lengths", "[", ":", ",", "1", "]", "\n", "intersec_map", "[", "np", ".", "logical_or", "(", "lengths", "[", ":", ",", "0", "]", "<", "0", ",", "lengths", "[", ":", ",", "1", "]", "<", "0", ")", "]", "=", "0", "\n", "iou_map_cur", "=", "intersec_map", "/", "(", "(", "res", "[", ":", ",", "3", "]", "-", "res", "[", ":", ",", "1", "]", "+", "1", ")", "*", "(", "res", "[", ":", ",", "4", "]", "-", "res", "[", ":", ",", "2", "]", "+", "1", ")", "+", "\n", "(", "indice_coordinates", "[", "3", "]", "-", "indice_coordinates", "[", "1", "]", "+", "1", ")", "*", "\n", "(", "indice_coordinates", "[", "4", "]", "-", "indice_coordinates", "[", "2", "]", "+", "1", ")", "-", "intersec_map", ")", "\n", "res", "=", "res", "[", "iou_map_cur", "<=", "iou_threshs", "]", "\n", "\n", "", "while", "len", "(", "indices_results", ")", "!=", "proposalN", ":", "\n", "        ", "indices_results", ".", "append", "(", "indice_coordinates", "[", "5", "]", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "indices_results", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.utils.load_model": [[155, 163], ["os.path.join", "logger.info", "model.load_state_dict", "os.path.isfile", "logger.info", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_model", "(", "model_name", ",", "model_dir", ",", "model", ")", ":", "\n", "    ", "output_weights_name", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "model_name", ")", "\n", "logger", ".", "info", "(", "f'MODEL FILE --- {output_weights_name}'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_weights_name", ")", "==", "False", ":", "\n", "        ", "logger", ".", "info", "(", "f'No such model file: {output_weights_name}'", ")", "\n", "return", "False", "\n", "", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "output_weights_name", ")", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.indices2coordinates.ComputeCoordinate": [[3, 19], ["int", "numpy.asarray().reshape", "numpy.asarray"], "function", ["None"], ["def", "ComputeCoordinate", "(", "image_size", ",", "stride", ",", "indice", ",", "ratio", ")", ":", "\n", "    ", "column_window_num", "=", "int", "(", "(", "image_size", "-", "ratio", "[", "1", "]", ")", "/", "stride", "+", "1", ")", "\n", "x_indice", "=", "indice", "//", "column_window_num", "\n", "y_indice", "=", "indice", "%", "column_window_num", "\n", "x_lefttop", "=", "x_indice", "*", "stride", "-", "1", "\n", "y_lefttop", "=", "y_indice", "*", "stride", "-", "1", "\n", "x_rightlow", "=", "x_lefttop", "+", "ratio", "[", "0", "]", "\n", "y_rightlow", "=", "y_lefttop", "+", "ratio", "[", "1", "]", "\n", "# for image", "\n", "if", "x_lefttop", "<", "0", ":", "\n", "        ", "x_lefttop", "=", "0", "\n", "", "if", "y_lefttop", "<", "0", ":", "\n", "        ", "y_lefttop", "=", "0", "\n", "", "coordinate", "=", "np", ".", "asarray", "(", "(", "x_lefttop", ",", "y_lefttop", ",", "x_rightlow", ",", "y_rightlow", ")", ",", "dtype", "=", "object", ")", ".", "reshape", "(", "1", ",", "4", ")", "\n", "\n", "return", "coordinate", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.indices2coordinates.indices2coordinates": [[21, 30], ["enumerate", "numpy.array().reshape().astype", "np.array().reshape().astype.append", "indices2coordinates.ComputeCoordinate", "numpy.array().reshape", "numpy.array"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.indices2coordinates.ComputeCoordinate"], ["", "def", "indices2coordinates", "(", "indices", ",", "stride", ",", "image_size", ",", "ratio", ")", ":", "\n", "    ", "batch", ",", "_", "=", "indices", ".", "shape", "\n", "coordinates", "=", "[", "]", "\n", "\n", "for", "j", ",", "indice", "in", "enumerate", "(", "indices", ")", ":", "\n", "        ", "coordinates", ".", "append", "(", "ComputeCoordinate", "(", "image_size", ",", "stride", ",", "indice", ",", "ratio", ")", ")", "\n", "\n", "", "coordinates", "=", "np", ".", "array", "(", "coordinates", ")", ".", "reshape", "(", "batch", ",", "4", ")", ".", "astype", "(", "int", ")", "\n", "return", "coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.eval_model.eval": [[6, 60], ["model.eval", "print", "torch.no_grad", "enumerate", "tqdm.tqdm", "images.cuda.cuda", "labels.cuda.cuda", "atts.cuda.cuda", "model", "criterion", "criterion.item", "pred.eq().sum().item", "model", "criterion", "criterion", "criterion.item", "criterion.item", "total_loss.item", "pred.eq().sum().item", "len", "len", "model.max", "labels.cuda.unsqueeze().repeat().view", "model.max", "pred.eq().sum", "pred.eq().sum", "labels.cuda.unsqueeze().repeat", "pred.eq", "pred.eq", "labels.cuda.view_as", "labels.cuda.unsqueeze", "labels.cuda.view_as"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.eval_model.eval"], ["def", "eval", "(", "model", ",", "model_type", ",", "testloader", ",", "criterion", ",", "status", ",", "save_path", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "print", "(", "'Evaluating'", ")", "\n", "\n", "loss_sum", "=", "0", "\n", "windowscls_loss_sum", "=", "0", "\n", "total_loss_sum", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "testloader", ")", ")", ":", "\n", "            ", "images", ",", "labels", ",", "atts", "=", "data", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "atts", "=", "atts", ".", "cuda", "(", ")", "\n", "\n", "if", "model_type", "==", "'kfn'", ":", "\n", "                ", "logits", "=", "model", "(", "images", ",", "atts", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "labels", ")", "\n", "loss_sum", "+=", "loss", ".", "item", "(", ")", "\n", "pred", "=", "logits", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "labels", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "proposalN_windows_score", ",", "proposalN_windows_logits", ",", "indices", ",", "window_scores", ",", "coordinates", ",", "logits", "=", "model", "(", "images", ",", "atts", ",", "epoch", ",", "i", ",", "status", ")", "\n", "\n", "loss", "=", "criterion", "(", "logits", ",", "labels", ")", "\n", "windowscls_loss", "=", "criterion", "(", "proposalN_windows_logits", ",", "\n", "labels", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "proposalN", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "total_loss", "=", "loss", "+", "windowscls_loss", "\n", "\n", "loss_sum", "+=", "loss", ".", "item", "(", ")", "\n", "windowscls_loss_sum", "+=", "windowscls_loss", ".", "item", "(", ")", "\n", "\n", "total_loss_sum", "+=", "total_loss", ".", "item", "(", ")", "\n", "\n", "# correct num", "\n", "pred", "=", "logits", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "correct", "+=", "pred", ".", "eq", "(", "labels", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "\n", "", "", "if", "model_type", "==", "'kfn'", ":", "\n", "            ", "loss_avg", "=", "loss_sum", "/", "(", "i", "+", "1", ")", "\n", "accuracy", "=", "correct", "/", "len", "(", "testloader", ".", "dataset", ")", "\n", "return", "loss_avg", ",", "accuracy", "\n", "\n", "", "else", ":", "\n", "            ", "loss_avg", "=", "loss_sum", "/", "(", "i", "+", "1", ")", "\n", "windowscls_loss_avg", "=", "windowscls_loss_sum", "/", "(", "i", "+", "1", ")", "\n", "total_loss_avg", "=", "total_loss_sum", "/", "(", "i", "+", "1", ")", "\n", "\n", "accuracy", "=", "correct", "/", "len", "(", "testloader", ".", "dataset", ")", "\n", "return", "loss_avg", ",", "windowscls_loss_avg", ",", "total_loss_avg", ",", "accuracy", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.compute_window_nums.compute_window_nums": [[1, 6], ["enumerate", "window_nums.append", "int", "int"], "function", ["None"], ["def", "compute_window_nums", "(", "ratios", ",", "stride", ",", "input_size", ")", ":", "\n", "    ", "window_nums", "=", "[", "]", "\n", "for", "_", ",", "ratio", "in", "enumerate", "(", "ratios", ")", ":", "\n", "        ", "window_nums", ".", "append", "(", "int", "(", "(", "input_size", "-", "ratio", "[", "0", "]", ")", "/", "stride", "+", "1", ")", "*", "int", "(", "(", "input_size", "-", "ratio", "[", "1", "]", ")", "/", "stride", "+", "1", ")", ")", "\n", "", "return", "window_nums", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.train_model.train": [[11, 146], ["range", "print", "model.train", "print", "enumerate", "scheduler.step", "next", "tqdm.tqdm", "optimizer.zero_grad", "utils.eval_model.eval", "print", "utils.eval_model.eval", "print", "utils.eval_model.eval", "print", "print", "torch.save", "os.path.basename", "len", "min", "os.remove", "iter", "images.cuda", "labels.cuda", "atts.cuda", "model", "criterion", "criterion.backward", "optimizer.step", "model", "criterion", "criterion", "total_loss.backward", "optimizer.step", "tensorboardX.SummaryWriter", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "print", "torch.save", "tensorboardX.SummaryWriter", "writer.add_scalar", "writer.add_scalar", "print", "torch.save", "tensorboardX.SummaryWriter", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "os.path.join", "glob.glob", "int", "os.path.join", "labels.unsqueeze().repeat().view", "os.path.join", "os.path.join", "model.state_dict", "os.path.join", "name.replace().replace", "tensorboardX.SummaryWriter", "enumerate", "numpy.concatenate", "writer.add_images", "os.path.join", "model.state_dict", "os.path.join", "model.state_dict", "os.path.join", "labels.unsqueeze().repeat", "utils.vis.image_with_boxes", "np.concatenate.append", "str", "name.replace", "str", "os.path.join", "labels.unsqueeze"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.train_model.train", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.eval_model.eval", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.eval_model.eval", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.eval_model.eval", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.image_with_boxes"], ["def", "train", "(", "model", ",", "\n", "model_type", ",", "\n", "trainloader", ",", "\n", "testloader", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "scheduler", ",", "\n", "save_path", ",", "\n", "start_epoch", ",", "\n", "end_epoch", ",", "\n", "save_interval", ")", ":", "\n", "    ", "best_acc", "=", "0.0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", "+", "1", ",", "end_epoch", "+", "1", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "\n", "print", "(", "'Training %d epoch'", "%", "epoch", ")", "\n", "\n", "lr", "=", "next", "(", "iter", "(", "optimizer", ".", "param_groups", ")", ")", "[", "'lr'", "]", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "trainloader", ")", ")", ":", "\n", "            ", "images", ",", "labels", ",", "atts", "=", "data", "\n", "images", ",", "labels", ",", "atts", "=", "images", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", ",", "atts", ".", "cuda", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "model_type", "==", "'kfn'", ":", "\n", "                ", "logits", "=", "model", "(", "images", ",", "atts", ")", "\n", "loss", "=", "criterion", "(", "logits", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "else", ":", "\n", "                ", "proposalN_windows_score", ",", "proposalN_windows_logits", ",", "indices", ",", "window_scores", ",", "coordinates", ",", "logits", "=", "model", "(", "images", ",", "atts", ",", "epoch", ",", "i", ",", "'train'", ")", "\n", "\n", "loss", "=", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "windowscls_loss", "=", "criterion", "(", "proposalN_windows_logits", ",", "\n", "labels", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "proposalN", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "if", "epoch", "<", "2", ":", "\n", "                    ", "total_loss", "=", "loss", "\n", "", "else", ":", "\n", "                    ", "total_loss", "=", "loss", "+", "windowscls_loss", "\n", "\n", "", "total_loss", ".", "backward", "(", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "# object branch tensorboard", "\n", "if", "i", "==", "1", ":", "\n", "                    ", "with", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'log'", ")", ",", "comment", "=", "'train'", "+", "'cut'", ")", "as", "writer", ":", "\n", "                        ", "cat_imgs", "=", "[", "]", "\n", "for", "j", ",", "coordinate_ndarray", "in", "enumerate", "(", "coordinates", ")", ":", "\n", "                            ", "img", "=", "image_with_boxes", "(", "images", "[", "j", "]", ",", "coordinate_ndarray", ")", "\n", "cat_imgs", ".", "append", "(", "img", ")", "\n", "", "cat_imgs", "=", "np", ".", "concatenate", "(", "cat_imgs", ",", "axis", "=", "1", ")", "\n", "writer", ".", "add_images", "(", "'train'", "+", "'/'", "+", "'cut image with windows'", ",", "cat_imgs", ",", "epoch", ",", "dataformats", "=", "'HWC'", ")", "\n", "\n", "", "", "", "", "scheduler", ".", "step", "(", ")", "\n", "\n", "# evaluation every epoch", "\n", "if", "eval_trainset", ":", "\n", "            ", "loss_avg", ",", "windowscls_loss_avg", ",", "total_loss_avg", ",", "accuracy", "=", "eval", "(", "model", ",", "trainloader", ",", "criterion", ",", "'train'", ",", "save_path", ",", "epoch", ")", "\n", "\n", "print", "(", "\n", "'Train set: accuracy: {:.2f}%'", ".", "format", "(", "100.", "*", "accuracy", ")", ")", "\n", "\n", "# tensorboard", "\n", "with", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'log'", ")", ",", "comment", "=", "'train'", ")", "as", "writer", ":", "\n", "\n", "                ", "writer", ".", "add_scalar", "(", "'Train/learning rate'", ",", "lr", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/accuracy'", ",", "accuracy", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/loss_avg'", ",", "loss_avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/windowscls_loss_avg'", ",", "windowscls_loss_avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Train/total_loss_avg'", ",", "total_loss_avg", ",", "epoch", ")", "\n", "\n", "# eval testset", "\n", "", "", "if", "model_type", "==", "'kfn'", ":", "\n", "            ", "loss_avg", ",", "accuracy", "=", "eval", "(", "model", ",", "model_type", ",", "testloader", ",", "criterion", ",", "'test'", ",", "save_path", ",", "epoch", ")", "\n", "if", "accuracy", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "accuracy", "\n", "print", "(", "'Saving the best checkpoint'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'learning_rate'", ":", "lr", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best'", ",", "'best'", "+", "'.pth'", ")", ")", "\n", "\n", "", "print", "(", "\n", "'Test set: accuracy: {:.2f}%, best accuracy {:.2f}%'", ".", "format", "(", "\n", "100.", "*", "accuracy", ",", "100.", "*", "best_acc", ")", ")", "\n", "# tensorboard", "\n", "with", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'log'", ")", ",", "comment", "=", "'test'", ")", "as", "writer", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'Test/accuracy'", ",", "accuracy", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Test/loss_avg'", ",", "loss_avg", ",", "epoch", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "loss_avg", ",", "windowscls_loss_avg", ",", "total_loss_avg", ",", "accuracy", "=", "eval", "(", "model", ",", "model_type", ",", "testloader", ",", "criterion", ",", "'test'", ",", "save_path", ",", "epoch", ")", "\n", "\n", "if", "accuracy", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "accuracy", "\n", "print", "(", "'Saving the best checkpoint'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'learning_rate'", ":", "lr", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best'", ",", "'best'", "+", "'.pth'", ")", ")", "\n", "\n", "", "print", "(", "\n", "'Test set: accuracy: {:.2f}%, best accuracy {:.2f}%'", ".", "format", "(", "100.", "*", "accuracy", ",", "100.", "*", "best_acc", ")", ")", "\n", "\n", "# tensorboard", "\n", "with", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'log'", ")", ",", "comment", "=", "'test'", ")", "as", "writer", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "'Test/accuracy'", ",", "accuracy", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Test/loss_avg'", ",", "loss_avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Test/windowscls_loss_avg'", ",", "windowscls_loss_avg", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Test/total_loss_avg'", ",", "total_loss_avg", ",", "epoch", ")", "\n", "\n", "# save checkpoint", "\n", "", "", "if", "(", "epoch", "%", "save_interval", "==", "0", ")", "or", "(", "epoch", "==", "end_epoch", ")", ":", "\n", "            ", "print", "(", "'Saving checkpoint'", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'learning_rate'", ":", "lr", ",", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "'epoch'", "+", "str", "(", "epoch", ")", "+", "'.pth'", ")", ")", "\n", "\n", "# Limit the number of checkpoints to less than or equal to max_checkpoint_num,", "\n", "# and delete the redundant ones", "\n", "", "checkpoint_list", "=", "[", "os", ".", "path", ".", "basename", "(", "path", ")", "for", "path", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'*.pth'", ")", ")", "]", "\n", "if", "len", "(", "checkpoint_list", ")", "==", "max_checkpoint_num", "+", "1", ":", "\n", "            ", "idx_list", "=", "[", "int", "(", "name", ".", "replace", "(", "'epoch'", ",", "''", ")", ".", "replace", "(", "'.pth'", ",", "''", ")", ")", "for", "name", "in", "checkpoint_list", "]", "\n", "min_idx", "=", "min", "(", "idx_list", ")", "\n", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'epoch'", "+", "str", "(", "min_idx", ")", "+", "'.pth'", ")", ")", "\n", "", "", "print", "(", "'Best acc:{:.4f}'", ".", "format", "(", "best_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam._BaseWrapper.__init__": [[13, 18], ["object.__init__", "next", "model.parameters"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "_BaseWrapper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "handlers", "=", "[", "]", "# a set of hook function handlers", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam._BaseWrapper.generate": [[19, 21], ["None"], "methods", ["None"], ["", "def", "generate", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam._BaseWrapper.forward": [[22, 30], ["gradcam._BaseWrapper.model.zero_grad", "gradcam._BaseWrapper.model", "F.softmax", "list", "zip", "gradcam._BaseWrapper.probs.sort"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"\n        Simple classification\n        \"\"\"", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "self", ".", "logits", "=", "self", ".", "model", "(", "image", ")", "\n", "self", ".", "probs", "=", "F", ".", "softmax", "(", "self", ".", "logits", ",", "dim", "=", "1", ")", "\n", "return", "list", "(", "zip", "(", "*", "self", ".", "probs", ".", "sort", "(", "0", ",", "True", ")", ")", ")", "# element: (probability, index)", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.__init__": [[32, 51], ["gradcam._BaseWrapper.__init__", "collections.OrderedDict", "collections.OrderedDict", "gradcam.GradCam.model.named_modules", "output.detach", "grad_out[].detach", "gradcam.GradCam.handlers.append", "gradcam.GradCam.handlers.append", "id", "id", "len", "module[].register_forward_hook", "module[].register_backward_hook"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "candidate_layers", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "GradCam", ",", "self", ")", ".", "__init__", "(", "model", ")", "\n", "self", ".", "fmap_pool", "=", "OrderedDict", "(", ")", "\n", "self", ".", "grad_pool", "=", "OrderedDict", "(", ")", "\n", "self", ".", "candidate_layers", "=", "candidate_layers", "\n", "# for module in self.model.named_modules():", "\n", "#     print(module[0])", "\n", "\n", "def", "forward_hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "            ", "self", ".", "fmap_pool", "[", "id", "(", "module", ")", "]", "=", "output", ".", "detach", "(", ")", "\n", "\n", "\n", "", "def", "backward_hook", "(", "module", ",", "grad_in", ",", "grad_out", ")", ":", "\n", "            ", "self", ".", "grad_pool", "[", "id", "(", "module", ")", "]", "=", "grad_out", "[", "0", "]", ".", "detach", "(", ")", "\n", "\n", "", "for", "module", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "len", "(", "self", ".", "candidate_layers", ")", "==", "0", "or", "module", "[", "0", "]", "in", "self", ".", "candidate_layers", ":", "\n", "                ", "self", ".", "handlers", ".", "append", "(", "module", "[", "1", "]", ".", "register_forward_hook", "(", "forward_hook", ")", ")", "\n", "self", ".", "handlers", ".", "append", "(", "module", "[", "1", "]", ".", "register_backward_hook", "(", "backward_hook", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find": [[52, 61], ["pool.items", "ValueError", "gradcam.GradCam.model.named_modules", "id"], "methods", ["None"], ["", "", "", "def", "find", "(", "self", ",", "pool", ",", "target_layer", ")", ":", "\n", "# --- Query the right layer and return it's value.", "\n", "        ", "for", "key", ",", "value", "in", "pool", ".", "items", "(", ")", ":", "\n", "            ", "for", "module", "in", "self", ".", "model", ".", "named_modules", "(", ")", ":", "\n", "# print(module[0], id(module[1]), key)", "\n", "                ", "if", "id", "(", "module", "[", "1", "]", ")", "==", "key", ":", "\n", "                    ", "if", "module", "[", "0", "]", "==", "target_layer", ":", "\n", "                        ", "return", "value", "\n", "", "", "", "", "raise", "ValueError", "(", "f\"Invalid Layer Name: {target_layer}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.normalize": [[62, 65], ["torch.sqrt", "torch.mean", "torch.pow"], "methods", ["None"], ["", "def", "normalize", "(", "self", ",", "grads", ")", ":", "\n", "        ", "l2_norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "torch", ".", "pow", "(", "grads", ",", "2", ")", ")", ")", "+", "1e-5", "\n", "return", "grads", "/", "l2_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.compute_grad_weights": [[66, 69], ["gradcam.GradCam.normalize", "F.adaptive_avg_pool2d"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.normalize"], ["", "def", "compute_grad_weights", "(", "self", ",", "grads", ")", ":", "\n", "        ", "grads", "=", "self", ".", "normalize", "(", "grads", ")", "\n", "return", "F", ".", "adaptive_avg_pool2d", "(", "grads", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.generate": [[71, 82], ["gradcam.GradCam.find", "gradcam.GradCam.find", "gradcam.GradCam.compute_grad_weights", "torch.clamp", "torch.clamp.min", "torch.clamp.max"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.compute_grad_weights"], ["", "def", "generate", "(", "self", ",", "target_layer", ")", ":", "\n", "        ", "fmaps", "=", "self", ".", "find", "(", "self", ".", "fmap_pool", ",", "target_layer", ")", "\n", "grads", "=", "self", ".", "find", "(", "self", ".", "grad_pool", ",", "target_layer", ")", "\n", "weights", "=", "self", ".", "compute_grad_weights", "(", "grads", ")", "\n", "\n", "gcam", "=", "(", "fmaps", "[", "0", "]", "*", "weights", "[", "0", "]", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "gcam", "=", "torch", ".", "clamp", "(", "gcam", ",", "min", "=", "0.0", ")", "\n", "\n", "gcam", "-=", "gcam", ".", "min", "(", ")", "\n", "gcam", "/=", "gcam", ".", "max", "(", ")", "\n", "return", "gcam", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.compute_gradCAM": [[83, 105], ["torch.zeros().float", "probs.backward", "torch.mul().sum.find", "torch.mul().sum.find", "torch.nn.functional.adaptive_avg_pool2d", "torch.mul().sum", "torch.nn.functional.relu", "torch.max", "range", "range", "torch.zeros", "torch.zeros().float.cuda", "torch.mul", "torch.nn.Sigmoid", "torch.max"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.GradCam.find"], ["", "", "def", "compute_gradCAM", "(", "probs", ",", "labels", ",", "gcam", ",", "testing_labels", ",", "target_layer", "=", "'layer4'", ")", ":", "\n", "# --- one hot encode this:", "\n", "# one_hot = torch.zeros((labels.shape[0], labels.shape[1])).float()", "\n", "    ", "one_hot", "=", "torch", ".", "zeros", "(", "(", "probs", ".", "shape", "[", "0", "]", ",", "probs", ".", "shape", "[", "1", "]", ")", ")", ".", "float", "(", ")", "\n", "max_int", "=", "torch", ".", "max", "(", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "(", "probs", ")", ",", "1", ")", "[", "1", "]", "\n", "\n", "if", "testing_labels", ":", "\n", "        ", "for", "i", "in", "range", "(", "one_hot", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "one_hot", "[", "i", "]", "[", "max_int", "[", "i", "]", "]", "=", "1.0", "\n", "\n", "", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "one_hot", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "one_hot", "[", "i", "]", "[", "torch", ".", "max", "(", "labels", ",", "1", ")", "[", "1", "]", "[", "i", "]", "]", "=", "1.0", "\n", "\n", "", "", "probs", ".", "backward", "(", "gradient", "=", "one_hot", ".", "cuda", "(", ")", ",", "retain_graph", "=", "True", ")", "\n", "fmaps", "=", "gcam", ".", "find", "(", "gcam", ".", "fmap_pool", ",", "target_layer", ")", "\n", "grads", "=", "gcam", ".", "find", "(", "gcam", ".", "grad_pool", ",", "target_layer", ")", "\n", "\n", "weights", "=", "torch", ".", "nn", ".", "functional", ".", "adaptive_avg_pool2d", "(", "grads", ",", "1", ")", "\n", "gcam", "=", "torch", ".", "mul", "(", "fmaps", ",", "weights", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "gcam_out", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "gcam", ")", "\n", "return", "probs", ",", "gcam_out", ",", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.gradcam.get_mask": [[107, 126], ["range", "gcam.view.view", "gcam.view.view", "gcam.view.min", "gcam.view.max", "[].sum"], "function", ["None"], ["", "def", "get_mask", "(", "gcam", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "gcam", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "temp_loc", "=", "-", "1", "\n", "if", "gcam", "[", "i", "]", "[", ":", "]", ".", "sum", "(", ")", "!=", "0", ":", "\n", "            ", "gcam", "[", "i", "]", "[", ":", "]", "=", "gcam", "[", "i", "]", "[", ":", "]", "\n", "", "else", ":", "\n", "            ", "temp_loc", "=", "i", "\n", "\n", "# if temp_loc != -1:", "\n", "# print('#--Zero SUM Error for image idx %d--#'%i)", "\n", "\n", "# gcam = torch.nn.functional.interpolate(gcam, size=(224,224), mode='bilinear', align_corners=False)", "\n", "", "", "B", ",", "C", ",", "H", ",", "W", "=", "gcam", ".", "shape", "\n", "gcam", "=", "gcam", ".", "view", "(", "B", ",", "-", "1", ")", "\n", "gcam", "-=", "gcam", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "gcam", "/=", "(", "gcam", ".", "max", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", "\n", "mask", "=", "gcam", ".", "view", "(", "B", ",", "C", ",", "H", ",", "W", ")", "\n", "\n", "return", "mask", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.auto_laod_resume.auto_load_resume": [[6, 43], ["os.listdir", "int", "len", "max", "os.path.join", "print", "torch.load", "collections.OrderedDict", "checkpoint[].items", "model.load_state_dict", "print", "print", "torch.load", "collections.OrderedDict", "checkpoint[].items", "model.load_state_dict", "print", "name.replace().replace", "name.replace", "str"], "function", ["None"], ["def", "auto_load_resume", "(", "model", ",", "path", ",", "status", ")", ":", "\n", "    ", "if", "status", "==", "'train'", ":", "\n", "        ", "pth_files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "nums_epoch", "=", "[", "int", "(", "name", ".", "replace", "(", "'epoch'", ",", "''", ")", ".", "replace", "(", "'.pth'", ",", "''", ")", ")", "for", "name", "in", "pth_files", "if", "'.pth'", "in", "name", "]", "\n", "if", "len", "(", "nums_epoch", ")", "==", "0", ":", "\n", "            ", "return", "0", ",", "init_lr", "\n", "", "else", ":", "\n", "            ", "max_epoch", "=", "max", "(", "nums_epoch", ")", "\n", "pth_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'epoch'", "+", "str", "(", "max_epoch", ")", "+", "'.pth'", ")", "\n", "print", "(", "'Load model from'", ",", "pth_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pth_path", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'model_state_dict'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "'module.'", "==", "k", "[", ":", "7", "]", ":", "\n", "                    ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "", "else", ":", "\n", "                    ", "name", "=", "k", "\n", "", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "lr", "=", "checkpoint", "[", "'learning_rate'", "]", "\n", "print", "(", "'Resume from %s'", "%", "pth_path", ")", "\n", "return", "epoch", ",", "lr", "\n", "", "", "elif", "status", "==", "'test'", ":", "\n", "        ", "print", "(", "'Load model from'", ",", "path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "'cpu'", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'model_state_dict'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'module.'", "==", "k", "[", ":", "7", "]", ":", "\n", "                ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "", "else", ":", "\n", "                ", "name", "=", "k", "\n", "", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "model", ".", "load_state_dict", "(", "new_state_dict", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "print", "(", "'Resume from %s'", "%", "path", ")", "\n", "return", "epoch", "", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.image_with_boxes": [[9, 53], ["type", "cv2.rectangle.clone().detach", "cv2.rectangle.mul().byte", "cv2.rectangle.data.cpu().numpy", "cv2.rectangle.astype", "numpy.transpose", "cv2.rectangle.copy", "enumerate", "image[].mul", "cv2.rectangle.clone", "cv2.rectangle.mul", "cv2.rectangle.data.cpu", "cv2.rectangle", "cv2.rectangle", "cv2.rectangle", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["def", "image_with_boxes", "(", "image", ",", "coordinates", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "    ", "'''\n    :param image: image array(CHW) tensor\n    :param coordinate: bounding boxs coordinate, coordinates.shape = [proposalN, 4], coordinates[0] = (x0, y0, x1, y1)\n    :return:image with bounding box(HWC)\n    '''", "\n", "\n", "if", "type", "(", "image", ")", "is", "not", "np", ".", "ndarray", ":", "\n", "        ", "image", "=", "image", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "# rgbN = [(255, 0, 0), (255, 165, 0), (255, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0), (0, 255, 0)]", "\n", "rgbN", "=", "[", "(", "255", ",", "0", ",", "0", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "(", "255", ",", "165", ",", "0", ")", ",", "(", "255", ",", "165", ",", "0", ")", ",", "(", "255", ",", "165", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "(", "0", ",", "255", ",", "0", ")", "]", "\n", "\n", "# Anti-normalization", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "image", "[", "0", "]", "=", "image", "[", "0", "]", "*", "std", "[", "0", "]", "+", "mean", "[", "0", "]", "\n", "image", "[", "1", "]", "=", "image", "[", "1", "]", "*", "std", "[", "1", "]", "+", "mean", "[", "1", "]", "\n", "image", "[", "2", "]", "=", "image", "[", "2", "]", ".", "mul", "(", "std", "[", "2", "]", ")", "+", "mean", "[", "2", "]", "\n", "image", "=", "image", ".", "mul", "(", "255", ")", ".", "byte", "(", ")", "\n", "\n", "image", "=", "image", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "image", "=", "np", ".", "transpose", "(", "image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "# CHW --> HWC", "\n", "image", "=", "image", ".", "copy", "(", ")", "\n", "\n", "", "if", "coordinates", "is", "not", "None", ":", "\n", "        ", "for", "i", ",", "coordinate", "in", "enumerate", "(", "coordinates", ")", ":", "\n", "            ", "if", "color", ":", "\n", "                ", "image", "=", "cv2", ".", "rectangle", "(", "image", ",", "(", "int", "(", "coordinate", "[", "1", "]", ")", ",", "int", "(", "coordinate", "[", "0", "]", ")", ")", ",", "\n", "(", "int", "(", "coordinate", "[", "3", "]", ")", ",", "int", "(", "coordinate", "[", "2", "]", ")", ")", ",", "\n", "color", ",", "2", ")", "\n", "", "else", ":", "\n", "                ", "if", "i", "<", "proposalN", ":", "\n", "# coordinates(x, y) is reverse in numpy", "\n", "                    ", "image", "=", "cv2", ".", "rectangle", "(", "image", ",", "(", "int", "(", "coordinate", "[", "1", "]", ")", ",", "int", "(", "coordinate", "[", "0", "]", ")", ")", ",", "(", "int", "(", "coordinate", "[", "3", "]", ")", ",", "int", "(", "coordinate", "[", "2", "]", ")", ")", ",", "\n", "rgbN", "[", "i", "]", ",", "2", ")", "\n", "", "else", ":", "\n", "                    ", "image", "=", "cv2", ".", "rectangle", "(", "image", ",", "(", "int", "(", "coordinate", "[", "1", "]", ")", ",", "int", "(", "coordinate", "[", "0", "]", ")", ")", ",", "\n", "(", "int", "(", "coordinate", "[", "3", "]", ")", ",", "int", "(", "coordinate", "[", "2", "]", ")", ")", ",", "\n", "(", "255", ",", "255", ",", "255", ")", ",", "2", ")", "\n", "", "", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.denormalize": [[55, 64], ["torchvision.transforms.Compose", "transforms.Compose.", "torchvision.transforms.Normalize", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "denormalize", "(", "s", ")", ":", "\n", "    ", "invTrans", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "std", "=", "[", "1", "/", "0.229", ",", "1", "/", "0.224", ",", "1", "/", "0.225", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "-", "0.485", ",", "-", "0.456", ",", "-", "0.406", "]", ",", "\n", "std", "=", "[", "1.", ",", "1.", ",", "1.", "]", ")", ",", "\n", "]", ")", "\n", "\n", "inv_tensor", "=", "invTrans", "(", "s", ")", "\n", "return", "inv_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.normalizeData": [[65, 68], ["torch.min", "torch.max", "torch.min"], "function", ["None"], ["", "def", "normalizeData", "(", "data", ")", ":", "\n", "    ", "eps", "=", "1e-07", "\n", "return", "(", "data", "-", "torch", ".", "min", "(", "data", ")", ")", "/", "(", "torch", ".", "max", "(", "data", ")", "-", "torch", ".", "min", "(", "data", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow": [[69, 80], ["vis.denormalize", "vis.normalizeData", "normalizeData.numpy", "matplotlib.imshow", "matplotlib.axis", "os.path.join", "matplotlib.savefig", "numpy.transpose", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.denormalize", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.normalizeData", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow"], ["", "def", "imshow", "(", "img", ",", "image_name", ")", ":", "\n", "# img = normalize_map(img)", "\n", "    ", "img", "=", "denormalize", "(", "img", ")", "# unnormalize", "\n", "img", "=", "normalizeData", "(", "img", ")", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "save_path", "=", "save_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "model_name", ",", "'viz'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "plt", ".", "savefig", "(", "'%s/%s.jpg'", "%", "(", "save_path", ",", "image_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.heatmap_show": [[81, 98], ["vis.denormalize", "vis.normalizeData", "numpy.transpose", "os.path.join", "numpy.transpose", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.colorbar", "matplotlib.savefig", "np.transpose.numpy", "os.path.exists", "os.makedirs", "np.transpose.numpy"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.denormalize", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.normalizeData", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.vis.imshow"], ["", "def", "heatmap_show", "(", "img", ",", "mask", ",", "image_name", ")", ":", "\n", "    ", "img", "=", "denormalize", "(", "img", ")", "# unnormalize", "\n", "img", "=", "normalizeData", "(", "img", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "save_path", "=", "save_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "model_name", ",", "'viz'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "mask", "=", "np", ".", "transpose", "(", "mask", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "imshow", "(", "mask", ",", "cmap", "=", "'jet'", ",", "alpha", "=", "0.5", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "# heatmap_image_npy = np.multiply(heatmap_image_npy, 255.0)", "\n", "# heatmap_image_npy = np.rollaxis(heatmap_image_npy, 0, 3)", "\n", "# heatmap_image_npy = cv2.applyColorMap(np.uint8(heatmap_image_npy), cv2.COLORMAP_JET)", "\n", "plt", ".", "colorbar", "(", "cmap", "=", "'jet'", ",", "fraction", "=", "0.046", ",", "pad", "=", "0.04", ")", "\n", "plt", ".", "savefig", "(", "'%s/%s.jpg'", "%", "(", "save_path", ",", "image_name", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.models.classifier.APPM.__init__": [[17, 21], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "range", "len"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "APPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# self.avgpools = [nn.AvgPool2d(ratios[i], 1) for i in range(len(ratios))]", "\n", "self", ".", "avgpools", "=", "[", "nn", ".", "AvgPool2d", "(", "ratios", "[", "i", "]", ",", "stride", ")", "for", "i", "in", "range", "(", "len", "(", "ratios", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.models.classifier.APPM.forward": [[22, 50], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "enumerate", "numpy.array().reshape", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "range", "torch.from_numpy().to.append", "torch.from_numpy().to.append", "torch.from_numpy().to.append", "range", "avgs[].view", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "indices_results.append", "numpy.concatenate", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "range", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.utils.nms", "sum", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "enumerate", "sum", "sum", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.nms"], ["", "def", "forward", "(", "self", ",", "proposalN", ",", "x", ",", "ratios", ",", "window_nums_sum", ",", "N_list", ",", "iou_threshs", ",", "DEVICE", "=", "'cuda'", ")", ":", "\n", "        ", "batch", ",", "channels", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "avgs", "=", "[", "self", ".", "avgpools", "[", "i", "]", "(", "x", ")", "for", "i", "in", "range", "(", "len", "(", "ratios", ")", ")", "]", "\n", "\n", "# feature map sum", "\n", "# fm_sum = [torch.sum(avgs[i], dim=1) for i in range(len(ratios))]", "\n", "\n", "all_scores", "=", "torch", ".", "cat", "(", "[", "avgs", "[", "i", "]", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", "for", "i", "in", "range", "(", "len", "(", "ratios", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "windows_scores_np", "=", "all_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "window_scores", "=", "torch", ".", "from_numpy", "(", "windows_scores_np", ")", ".", "to", "(", "DEVICE", ")", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "\n", "# nms", "\n", "proposalN_indices", "=", "[", "]", "\n", "for", "i", ",", "scores", "in", "enumerate", "(", "windows_scores_np", ")", ":", "\n", "            ", "indices_results", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "window_nums_sum", ")", "-", "1", ")", ":", "\n", "                ", "indices_results", ".", "append", "(", "nms", "(", "scores", "[", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "1", "]", ")", ":", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "2", "]", ")", "]", ",", "proposalN", "=", "N_list", "[", "j", "]", ",", "iou_threshs", "=", "iou_threshs", "[", "j", "]", ",", "\n", "coordinates", "=", "coordinates_cat", "[", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "1", "]", ")", ":", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "2", "]", ")", "]", ")", "+", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "1", "]", ")", ")", "\n", "# indices_results.reverse()", "\n", "", "proposalN_indices", ".", "append", "(", "np", ".", "concatenate", "(", "indices_results", ",", "1", ")", ")", "# reverse", "\n", "\n", "", "proposalN_indices", "=", "np", ".", "array", "(", "proposalN_indices", ")", ".", "reshape", "(", "batch", ",", "proposalN", ")", "\n", "proposalN_indices", "=", "torch", ".", "from_numpy", "(", "proposalN_indices", ")", ".", "to", "(", "DEVICE", ")", "\n", "proposalN_windows_scores", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "index_select", "(", "all_score", ",", "dim", "=", "0", ",", "index", "=", "proposalN_indices", "[", "i", "]", ")", "for", "i", ",", "all_score", "in", "enumerate", "(", "all_scores", ")", "]", ",", "0", ")", ".", "reshape", "(", "\n", "batch", ",", "proposalN", ")", "\n", "\n", "return", "proposalN_indices", ",", "proposalN_windows_scores", ",", "window_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.models.classifier.Classifier_with_Augmentation.__init__": [[54, 78], ["torch.Module.__init__", "segmentation_models_pytorch.encoders.get_encoder", "segmentation_models_pytorch.base.ClassificationHead", "segmentation_models_pytorch.base.initialization.initialize_head", "classifier.APPM"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "encoder_name", ":", "str", "=", "\"resnet34\"", ",", "\n", "encoder_depth", ":", "int", "=", "5", ",", "\n", "encoder_weights", ":", "str", "=", "\"imagenet\"", ",", "\n", "in_channels", ":", "int", "=", "3", ",", "\n", "proposalN", ":", "int", "=", "7", ",", "\n", "aux_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "get_encoder", "(", "\n", "encoder_name", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "depth", "=", "encoder_depth", ",", "\n", "weights", "=", "encoder_weights", ",", "\n", ")", "\n", "self", ".", "classification_head", "=", "ClassificationHead", "(", "\n", "in_channels", "=", "self", ".", "encoder", ".", "out_channels", "[", "-", "1", "]", ",", "**", "aux_params", "\n", ")", "\n", "self", ".", "num_classes", "=", "aux_params", "[", "'classes'", "]", "\n", "self", ".", "name", "=", "\"c-{}\"", ".", "format", "(", "encoder_name", ")", "\n", "self", ".", "proposalN", "=", "proposalN", "\n", "init", ".", "initialize_head", "(", "self", ".", "classification_head", ")", "\n", "\n", "self", ".", "APPM", "=", "APPM", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.models.classifier.Classifier_with_Augmentation.forward": [[79, 115], ["classifier.Classifier_with_Augmentation.encoder", "classifier.Classifier_with_Augmentation.classification_head", "classifier.Classifier_with_Augmentation.APPM", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "window_imgs.reshape.reshape.reshape", "classifier.Classifier_with_Augmentation.encoder", "classifier.Classifier_with_Augmentation.classification_head", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "coordinates.append", "window_imgs.reshape.reshape.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ",", "status", "=", "'test'", ",", "DEVICE", "=", "'cuda'", ")", ":", "\n", "        ", "batch_size", ",", "_", ",", "_", ",", "_", "=", "x", ".", "shape", "\n", "### Pass model through the encoder and the classifier part of it.", "\n", "features", "=", "self", ".", "encoder", "(", "x", ")", "\n", "labels", "=", "self", ".", "classification_head", "(", "features", "[", "-", "1", "]", ")", "\n", "proposalN_indices", ",", "proposalN_windows_scores", ",", "window_scores", "=", "self", ".", "APPM", "(", "self", ".", "proposalN", ",", "att", ",", "ratios", ",", "window_nums_sum", ",", "N_list", ",", "iou_threshs", ",", "DEVICE", ")", "\n", "coordinates", "=", "[", "]", "\n", "\n", "if", "status", "==", "\"train\"", ":", "\n", "# window_imgs cls", "\n", "            ", "window_imgs", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "proposalN", ",", "3", ",", "112", ",", "112", "]", ")", ".", "to", "(", "DEVICE", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "coord_tensor", "=", "torch", ".", "zeros", "(", "(", "self", ".", "proposalN", ",", "4", ")", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "proposalN", ")", ":", "\n", "                    ", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", "=", "coordinates_cat", "[", "proposalN_indices", "[", "i", ",", "j", "]", "]", "\n", "coord_tensor", "[", "j", ",", ":", "]", "=", "torch", ".", "as_tensor", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ")", "\n", "window_imgs", "[", "i", ":", "i", "+", "1", ",", "j", "]", "=", "F", ".", "interpolate", "(", "x", "[", "i", ":", "i", "+", "1", ",", ":", ",", "x0", ":", "(", "x1", "+", "1", ")", ",", "y0", ":", "(", "y1", "+", "1", ")", "]", ",", "size", "=", "(", "112", ",", "112", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "", "coordinates", ".", "append", "(", "coord_tensor", ")", "\n", "# # viz", "\n", "# m=-1", "\n", "# heatmap_show(x[m,:].cpu(), att[m,:].cpu(), 'overlay')", "\n", "# for j in range(self.proposalN):", "\n", "#     imshow(window_imgs[m,j].cpu(),str(j))", "\n", "# exit()", "\n", "\n", "", "window_imgs", "=", "window_imgs", ".", "reshape", "(", "batch_size", "*", "self", ".", "proposalN", ",", "3", ",", "112", ",", "112", ")", "# [N*4, 3, 224, 224]", "\n", "window_embeddings", "=", "self", ".", "encoder", "(", "window_imgs", ".", "detach", "(", ")", ")", "# [N*4, 2048]", "\n", "proposalN_windows_logits", "=", "self", ".", "classification_head", "(", "window_embeddings", "[", "-", "1", "]", ")", "# [N* 4, 200]", "\n", "", "else", ":", "\n", "            ", "proposalN_windows_logits", "=", "torch", ".", "zeros", "(", "[", "batch_size", "*", "self", ".", "proposalN", ",", "self", ".", "num_classes", "]", ")", ".", "to", "(", "DEVICE", ")", "\n", "# -- For compatibility with the rest of the code. Output a zero mask region.", "\n", "", "return", "labels", ",", "proposalN_windows_scores", ",", "proposalN_windows_logits", ",", "proposalN_indices", ",", "window_scores", ",", "coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.models.classifier.Two_Branch.__init__": [[120, 193], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torchvision.models.densenet121", "torchvision.models.densenet121", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torchvision.models.resnet50.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torchvision.models.resnet50.load_state_dict", "torchvision.models.resnet50", "torchvision.models.resnet50", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Linear", "torch.Linear", "torch.Linear", "torchvision.models.resnet50.load_state_dict", "torch.Linear", "torch.Linear", "torch.Linear", "torchvision.models.resnet50.load_state_dict", "list", "list", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "segmentation_models_pytorch.encoders.get_encoder", "segmentation_models_pytorch.encoders.get_encoder", "segmentation_models_pytorch.encoders.get_encoder", "segmentation_models_pytorch.encoders.get_encoder", "collections.OrderedDict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items", "collections.OrderedDict.update", "classifier.Two_Branch.branch1.load_state_dict", "collections.OrderedDict.update", "classifier.Two_Branch.branch2.load_state_dict", "torchvision.models.resnet50.children", "torchvision.models.resnet50.children", "list", "list", "torchvision.models.resnet50.children", "torchvision.models.resnet50.children"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet50", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ",", "model_type", "=", "'densenet'", ",", "pretrain_path", "=", "None", ")", ":", "\n", "        ", "super", "(", "Two_Branch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# densenet and resnet are not trained or evluated in the main script", "\n", "if", "model_type", "==", "'densenet'", ":", "\n", "            ", "branch1", "=", "torchvision", ".", "models", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "branch2", "=", "torchvision", ".", "models", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "num_ftrs", "=", "branch1", ".", "classifier", ".", "in_features", "\n", "\n", "if", "pretrain_path", "is", "not", "None", ":", "\n", "                ", "branch1", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "13", ")", "\n", "branch1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrain_path", ")", ",", "strict", "=", "False", ")", "\n", "branch2", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "13", ")", "\n", "branch2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrain_path", ")", ",", "strict", "=", "False", ")", "\n", "", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "branch1", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "branch2", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "elif", "model_type", "==", "'resnet'", ":", "\n", "            ", "branch1", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "branch2", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "num_ftrs", "=", "branch1", ".", "fc", ".", "in_features", "\n", "\n", "if", "pretrain_path", "is", "not", "None", ":", "\n", "                ", "branch1", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "13", ")", "\n", "branch1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrain_path", ")", ",", "strict", "=", "False", ")", "\n", "branch2", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "13", ")", "\n", "branch2", ".", "load_state_dict", "(", "torch", ".", "load", "(", "pretrain_path", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "self", ".", "branch1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "branch1", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "branch2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "branch2", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "# efficient net is used in training and evaluatioin.", "\n", "", "elif", "model_type", "==", "'efficientnet'", ":", "\n", "            ", "if", "pretrain_path", "is", "None", ":", "\n", "                ", "self", ".", "branch1", "=", "get_encoder", "(", "\n", "'timm-efficientnet-b0'", ",", "\n", "in_channels", "=", "3", ",", "\n", "depth", "=", "5", ",", "\n", "weights", "=", "\"imagenet\"", ")", "\n", "self", ".", "branch2", "=", "get_encoder", "(", "\n", "'timm-efficientnet-b0'", ",", "\n", "in_channels", "=", "3", ",", "\n", "depth", "=", "5", ",", "\n", "weights", "=", "\"imagenet\"", ")", "\n", "num_ftrs", "=", "self", ".", "branch1", ".", "out_channels", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "branch1", "=", "get_encoder", "(", "\n", "'timm-efficientnet-b0'", ",", "\n", "in_channels", "=", "3", ",", "\n", "depth", "=", "5", ")", "\n", "# weights=\"imagenet\")", "\n", "self", ".", "branch2", "=", "get_encoder", "(", "\n", "'timm-efficientnet-b0'", ",", "\n", "in_channels", "=", "3", ",", "\n", "depth", "=", "5", ")", "\n", "# weights=\"imagenet\")", "\n", "num_ftrs", "=", "self", ".", "branch1", ".", "out_channels", "[", "-", "1", "]", "\n", "new_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrain_path", ")", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                    ", "if", "'encoder.'", "in", "k", ":", "\n", "                        ", "name", "=", "k", "[", "8", ":", "]", "\n", "new_dict", "[", "name", "]", "=", "v", "\n", "\n", "#### add the redundant key 'classifier.bias' and 'classifier.weight' into state_dict", "\n", "", "", "redundant_keys", "=", "{", "\"classifier.bias\"", ":", "None", ",", "\"classifier.weight\"", ":", "None", "}", "\n", "new_dict", ".", "update", "(", "redundant_keys", ")", "\n", "self", ".", "branch1", ".", "load_state_dict", "(", "new_dict", ",", "strict", "=", "False", ")", "\n", "new_dict", ".", "update", "(", "redundant_keys", ")", "\n", "self", ".", "branch2", ".", "load_state_dict", "(", "new_dict", ",", "strict", "=", "False", ")", "\n", "# for param in self.branch1.parameters():", "\n", "#     param.requires_grad = False", "\n", "\n", "", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", "*", "2", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.models.classifier.Two_Branch.forward": [[194, 210], ["torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "classifier.Two_Branch.classifier", "classifier.Two_Branch.branch1", "classifier.Two_Branch.branch2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "heatmap", ")", ":", "\n", "        ", "x1", "=", "self", ".", "branch1", "(", "x", ")", "[", "-", "1", "]", "\n", "x2", "=", "self", ".", "branch2", "(", "heatmap", ")", "[", "-", "1", "]", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "x1", ",", "inplace", "=", "True", ")", "\n", "x1", "=", "F", ".", "adaptive_avg_pool2d", "(", "x1", ",", "(", "1", ",", "1", ")", ")", "\n", "x1", "=", "torch", ".", "flatten", "(", "x1", ",", "1", ")", "\n", "x2", "=", "F", ".", "relu", "(", "x2", ",", "inplace", "=", "True", ")", "\n", "x2", "=", "F", ".", "adaptive_avg_pool2d", "(", "x2", ",", "(", "1", ",", "1", ")", ")", "\n", "x2", "=", "torch", ".", "flatten", "(", "x2", ",", "1", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "dim", "=", "-", "1", ")", "\n", "# out = self.dropout(out)", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.train.main": [[25, 85], ["print", "dataset.CUB", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "dataset.CUB", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.CrossEntropyLoss", "networks.model.MainNet.parameters", "os.path.join", "os.path.exists", "torch.optim.SGD", "torch.optim.SGD", "networks.model.MainNet.cuda", "torch.optim.lr_scheduler.MultiStepLR", "time.strftime", "shutil.copy", "utils.train_model.train", "print", "networks.model.TwoBranch", "print", "networks.model.MainNet", "utils.auto_laod_resume.auto_load_resume", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.train_model.train", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.utils.auto_laod_resume.auto_load_resume"], ["def", "main", "(", ")", ":", "\n", "\n", "# load the CUB dataset", "\n", "    ", "print", "(", "'Loading CUB trainset'", ")", "\n", "trainset", "=", "CUB", "(", "input_size", "=", "input_size", ",", "root", "=", "root", ",", "is_train", "=", "True", ",", "model_type", "=", "model_type", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ")", "\n", "print", "(", "'Loading CUB testset'", ")", "\n", "testset", "=", "CUB", "(", "input_size", "=", "input_size", ",", "root", "=", "root", ",", "is_train", "=", "False", ",", "model_type", "=", "model_type", ")", "\n", "testloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "testset", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "num_workers", "=", "8", ",", "drop_last", "=", "False", ")", "\n", "\n", "# load the model", "\n", "if", "model_type", "==", "'kfn'", ":", "\n", "      ", "print", "(", "'Knowledge Fusion Network'", ")", "\n", "model", "=", "TwoBranch", "(", "num_classes", "=", "num_classes", ",", "channels", "=", "channels", ")", "\n", "\n", "", "else", ":", "\n", "      ", "print", "(", "'Gaze Augmentation Training'", ")", "\n", "model", "=", "MainNet", "(", "proposalN", "=", "proposalN", ",", "num_classes", "=", "num_classes", ",", "channels", "=", "channels", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "# load checkpoint", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "model_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "start_epoch", ",", "lr", "=", "auto_load_resume", "(", "model", ",", "save_path", ",", "status", "=", "'train'", ")", "\n", "assert", "start_epoch", "<", "end_epoch", "\n", "", "else", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "start_epoch", "=", "0", "\n", "lr", "=", "init_lr", "\n", "# mk dir for the saving the best model", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best'", ")", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best'", ")", ")", "\n", "\n", "# define optimizers", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "scheduler", "=", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "lr_milestones", ",", "gamma", "=", "lr_decay_rate", ")", "\n", "\n", "# save config for this training", "\n", "time_str", "=", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", "\n", "shutil", ".", "copy", "(", "'./config.py'", ",", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}config.py\"", ".", "format", "(", "time_str", ")", ")", ")", "\n", "\n", "# start training", "\n", "train", "(", "model", "=", "model", ",", "\n", "model_type", "=", "model_type", ",", "\n", "trainloader", "=", "trainloader", ",", "\n", "testloader", "=", "testloader", ",", "\n", "criterion", "=", "criterion", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "scheduler", "=", "scheduler", ",", "\n", "save_path", "=", "save_path", ",", "\n", "start_epoch", "=", "start_epoch", ",", "\n", "end_epoch", "=", "end_epoch", ",", "\n", "save_interval", "=", "save_interval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.CUB.__init__": [[23, 53], ["dataset.get_image_dict", "open", "open", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "img_name_list.append", "label_list.append", "train_test_list.append", "int", "zip", "zip", "os.path.join", "os.path.join", "line[].split", "int", "line[].split", "zip", "zip", "line[].split"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.get_image_dict"], ["std", "=", "[", "1", "/", "0.229", ",", "1", "/", "0.224", ",", "1", "/", "0.225", "]", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "-", "0.485", ",", "-", "0.456", ",", "-", "0.406", "]", ",", "\n", "std", "=", "[", "1.", ",", "1.", ",", "1.", "]", ")", ",", "\n", "]", ")", "\n", "\n", "inv_tensor", "=", "invTrans", "(", "s", ")", "\n", "return", "inv_tensor", "\n", "\n", "", "def", "imshow", "(", "img", ",", "image_name", ")", ":", "\n", "    ", "img", "=", "denormalize", "(", "img", ")", "# unnormalize", "\n", "img", "=", "normalizeData", "(", "img", ")", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "# plt.show()", "\n", "save_path", "=", "'./viz'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "plt", ".", "savefig", "(", "'%s/%s.jpg'", "%", "(", "save_path", ",", "image_name", ")", ")", "\n", "\n", "\n", "", "def", "heatmap_show", "(", "img", ",", "mask", ",", "image_name", ")", ":", "\n", "    ", "img", "=", "denormalize", "(", "img", ")", "# unnormalize", "\n", "img", "=", "normalizeData", "(", "img", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "save_path", "=", "'./viz'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "mask", "=", "np", ".", "transpose", "(", "mask", ".", "numpy", "(", ")", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "imshow", "(", "mask", ",", "cmap", "=", "'jet'", ",", "alpha", "=", "0.5", ")", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.CUB.__getitem__": [[54, 178], ["PIL.Image.fromarray", "os.path.join", "PIL.Image.open().convert().resize", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Compose.", "torch.tensor", "PIL.Image.fromarray", "os.path.join", "PIL.Image.open().convert().resize", "torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Compose.", "torch.tensor", "PIL.Image.fromarray", "os.path.join", "PIL.Image.open().convert().resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomCrop.get_params", "torchvision.transforms.functional.crop", "torchvision.transforms.functional.crop", "dataset.normalizeData", "PIL.Image.fromarray", "os.path.join", "PIL.Image.open().convert().resize", "dataset.normalizeData", "imageio.imread", "len", "numpy.stack", "dataset.CUB.train_img[].split", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToPILImage", "imageio.imread", "len", "numpy.stack", "dataset.CUB.test_img[].split", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToPILImage", "imageio.imread", "len", "numpy.stack", "dataset.CUB.train_img[].split", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "random.random", "torchvision.transforms.functional.hflip", "torchvision.transforms.functional.hflip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "imageio.imread", "len", "numpy.stack", "dataset.CUB.test_img[].split", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "PIL.Image.open().convert", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "PIL.Image.open().convert", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.normalizeData", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.normalizeData"], ["plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "colorbar", "(", "cmap", "=", "'jet'", ",", "fraction", "=", "0.046", ",", "pad", "=", "0.04", ")", "\n", "plt", ".", "savefig", "(", "'%s/%s.jpg'", "%", "(", "save_path", ",", "image_name", ")", ")", "\n", "\n", "", "def", "split_dataset", "(", "file_path", ",", "random_state", "=", "10", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "file_path", ")", "\n", "# -- Split after uniquing the patient ids so that it does not get split across the different test, dev, test", "\n", "pid", "=", "list", "(", "df", "[", "'patient_id'", "]", ".", "unique", "(", ")", ")", "\n", "random", ".", "seed", "(", "random_state", ")", "\n", "random", ".", "shuffle", "(", "pid", ")", "\n", "train_patient_count", "=", "round", "(", "len", "(", "pid", ")", "*", "0.8", ")", "\n", "not_train", "=", "len", "(", "pid", ")", "-", "train_patient_count", "\n", "# --- Split this remaining equally into dev and test.", "\n", "dev_patient_count", "=", "round", "(", "not_train", "*", "0.5", ")", "\n", "train", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "pid", "[", ":", "train_patient_count", "]", ")", "]", "\n", "dev", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "pid", "[", "train_patient_count", ":", "train_patient_count", "+", "dev_patient_count", "]", ")", "]", "\n", "test", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "pid", "[", "train_patient_count", "+", "dev_patient_count", ":", "]", ")", "]", "\n", "return", "train", ",", "dev", ",", "test", "\n", "\n", "\n", "", "def", "nfold_split_dataset", "(", "file_path", ",", "nFold", "=", "5", ",", "random_state", "=", "1", ")", ":", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "file_path", ")", "\n", "# -- Split after uniquing the patient ids so that it does not get split across the different test, dev, test", "\n", "pid", "=", "list", "(", "df", "[", "'patient_id'", "]", ".", "unique", "(", ")", ")", "\n", "random", ".", "seed", "(", "random_state", ")", "\n", "random", ".", "shuffle", "(", "pid", ")", "\n", "fold_count", "=", "round", "(", "len", "(", "pid", ")", "/", "nFold", ")", "+", "1", "\n", "split_dict", "=", "{", "}", "\n", "split_list", "=", "[", "pid", "[", "i", ":", "i", "+", "fold_count", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "pid", ")", ",", "fold_count", ")", "]", "\n", "for", "K", "in", "range", "(", "nFold", ")", ":", "\n", "        ", "train_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nFold", ")", ":", "\n", "            ", "if", "i", "==", "K", ":", "\n", "                ", "test_ids", "=", "split_list", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "train_ids", ".", "extend", "(", "split_list", "[", "i", "]", ")", "\n", "", "", "test", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "test_ids", ")", "]", "\n", "train", "=", "df", "[", "df", "[", "'patient_id'", "]", ".", "isin", "(", "train_ids", ")", "]", "\n", "split_dict", "[", "K", "]", "=", "{", "'train'", ":", "train", ",", "'test'", ":", "test", "}", "\n", "# write the split to .csv file", "\n", "", "dir_path", "=", "file_path", ".", "replace", "(", "\"/master_sheet.csv\"", ",", "\"\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir_path", ",", "\"%d_fold_split.csv\"", "%", "nFold", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "wr", "=", "csv", ".", "writer", "(", "f", ")", "\n", "wr", ".", "writerow", "(", "split_list", ")", "\n", "", "return", "split_dict", "\n", "\n", "", "def", "read_cxrjpg", "(", "image_path", ")", ":", "\n", "    ", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "return", "image", "\n", "\n", "", "class", "EyegazeDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "csv_file", ",", "image_path_name", ",", "class_names", ",", "static_heatmap_path", "=", "None", ",", "heatmap_static_transform", "=", "None", ",", "image_transform", "=", "None", ",", "heatmaps_threshold", "=", "None", ")", ":", "\n", "        ", "self", ".", "csv_file", "=", "csv_file", "\n", "self", ".", "path_name", "=", "image_path_name", "\n", "self", ".", "image_transform", "=", "image_transform", "\n", "self", ".", "heatmap_static_transform", "=", "heatmap_static_transform", "\n", "self", ".", "class_names", "=", "class_names", "\n", "self", ".", "static_heatmap_path", "=", "static_heatmap_path", "\n", "self", ".", "heatmaps_threshold", "=", "heatmaps_threshold", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "csv_file", ")", "\n", "\n", "", "def", "get_image", "(", "self", ",", "idx", ")", ":", "\n", "# -- Query the index location of the required file", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path_name", ",", "self", ".", "csv_file", "[", "'path'", "]", ".", "iloc", "[", "idx", "]", ")", "\n", "image_path", "=", "image_path", ".", "replace", "(", "'.dcm'", ",", "'.jpg'", ")", "\n", "image_pil", "=", "read_cxrjpg", "(", "image_path", ")", "\n", "\n", "### multi-label", "\n", "truth_labels", "=", "[", "self", ".", "csv_file", "[", "labels", "]", ".", "iloc", "[", "idx", "]", "for", "labels", "in", "self", ".", "class_names", "]", "\n", "y_label", "=", "np", ".", "array", "(", "truth_labels", ",", "dtype", "=", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "y_label", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "y_label", ")", ")", ".", "float", "(", ")", "\n", "\n", "##### one hot label", "\n", "one_label", "=", "(", "(", "y_label", "==", "1.0", ")", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "[", "0", "]", ")", ".", "squeeze", "(", ")", "\n", "\n", "###### attributes", "\n", "healthy", "=", "'no_finding__chx'", "\n", "attributes", "=", "[", "'atelectasis__chx'", ",", "'cardiomegaly__chx'", ",", "'consolidation__chx'", ",", "'edema__chx'", ",", "'enlarged_cardiomediastinum__chx'", ",", "'fracture__chx'", ",", "'lung_lesion__chx'", ",", "'lung_opacity__chx'", ",", "'pleural_effusion__chx'", ",", "'pleural_other__chx'", ",", "'pneumonia__chx'", ",", "'pneumothorax__chx'", ",", "'support_devices__chx'", "]", "\n", "if", "self", ".", "csv_file", "[", "healthy", "]", ".", "iloc", "[", "idx", "]", "==", "1", ":", "\n", "            ", "attr_labels", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "else", ":", "\n", "            ", "attr_labels", "=", "[", "self", ".", "csv_file", "[", "attr", "]", ".", "iloc", "[", "idx", "]", "for", "attr", "in", "attributes", "]", "\n", "attr_labels", "=", "np", ".", "asarray", "(", "attr_labels", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "attr_labels", "[", "attr_labels", "==", "-", "1.", "]", "=", "0.0", "\n", "# make all the -1 values into nans (0.0) to keep things simple", "\n", "attr_labels", "=", "np", ".", "nan_to_num", "(", "attr_labels", ")", "\n", "", "attr_labels", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "attr_labels", ")", ")", ".", "float", "(", ")", "\n", "\n", "if", "self", ".", "image_transform", ":", "\n", "            ", "image", "=", "self", ".", "image_transform", "(", "image_pil", ")", "\n", "", "return", "image_pil", ",", "image", ".", "float", "(", ")", ",", "one_label", ",", "attr_labels", "\n", "\n", "", "def", "num_sort", "(", "self", ",", "filename", ")", ":", "\n", "        ", "not_num", "=", "re", ".", "compile", "(", "\"\\D\"", ")", "\n", "return", "int", "(", "not_num", ".", "sub", "(", "\"\"", ",", "filename", ")", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_name", "=", "self", ".", "csv_file", "[", "'dicom_id'", "]", ".", "iloc", "[", "idx", "]", "\n", "y_hm", "=", "[", "]", "\n", "\n", "if", "self", ".", "static_heatmap_path", ":", "\n", "            ", "heat_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "static_heatmap_path", ",", "image_name", ")", "\n", "# ground_truth static heatmap", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "heat_path", "+", "'/heatmap.png'", ")", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "f'static heatmaps not found for {heat_path}'", ")", "\n", "", "y_hm_pil", "=", "Image", ".", "open", "(", "heat_path", "+", "'/heatmap.png'", ")", ".", "convert", "(", "'L'", ")", "\n", "y_hm", "=", "self", ".", "heatmap_static_transform", "(", "y_hm_pil", ")", "\n", "if", "self", ".", "heatmaps_threshold", ":", "\n", "                ", "y_hm", "=", "y_hm", ">", "self", ".", "heatmaps_threshold", "\n", "", "", "image_pil", ",", "image", ",", "y_label", ",", "attr_labels", "=", "self", ".", "get_image", "(", "idx", ")", "\n", "\n", "y_hm_n", "=", "normalizeData", "(", "y_hm", ")", "\n", "y_hm_n", "=", "y_hm_n", ">", "0.3", "# filter with 0.3 after normalization", "\n", "y_hm", "=", "y_hm", "*", "y_hm_n", "\n", "gaze_img", "=", "image", "*", "y_hm_n", "\n", "gaze_img", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "(", "gaze_img", ")", "\n", "image", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "(", "image", ")", "\n", "# # for viz", "\n", "# imshow(gaze_img, image_name)", "\n", "# exit()", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.CUB.__len__": [[179, 184], ["len", "len"], "methods", ["None"], ["\n", "return", "image", ",", "y_label", ",", "image_name", ",", "y_hm", ",", "gaze_img", ",", "attr_labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.get_image_dict": [[10, 18], ["open", "open.readlines", "item.split", "item_list[].strip"], "function", ["None"], ["from", "torch", ".", "utils", ".", "data", "import", "Dataset", "\n", "import", "csv", "\n", "import", "torchvision", ".", "transforms", "as", "transforms", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "\n", "def", "normalizeData", "(", "data", ")", ":", "\n", "    ", "eps", "=", "1e-07", "\n", "return", "(", "data", "-", "torch", ".", "min", "(", "data", ")", ")", "/", "(", "torch", ".", "max", "(", "data", ")", "-", "torch", ".", "min", "(", "data", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.CUB.dataset.normalizeData": [[18, 21], ["torch.min", "torch.max", "torch.min"], "function", ["None"], ["\n", "\n", "\n", "", "def", "denormalize", "(", "s", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.BasicBlock.__init__": [[37, 54], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.conv3x3", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.BasicBlock.forward": [[55, 72], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.Bottleneck.__init__": [[77, 93], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.conv1x1", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.conv3x3", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.Bottleneck.forward": [[94, 115], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.ResNet.__init__": [[119, 173], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "# self.conv2 = nn.Conv2d(in_channels=2048, out_channels=2048, kernel_size=4, stride=1,bias=False)", "\n", "# self.conv3 = nn.Conv2d(in_channels=2048, out_channels=201, kernel_size=1, stride=1, bias=False)", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.ResNet._make_layer": [[174, 197], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.ResNet.forward": [[198, 219], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.dropout", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "conv5_b", "=", "self", ".", "layer4", "[", ":", "2", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "[", "2", "]", "(", "conv5_b", ")", "\n", "\n", "fm", "=", "x", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "embeeding", "=", "x", "\n", "\n", "\n", "return", "fm", ",", "embeeding", ",", "conv5_b", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.conv1x1": [[29, 32], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet": [[221, 227], ["resnet.ResNet", "torch.load", "torch.load", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "pth_path", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "pth_path", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet18": [[229, 239], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "resnet18", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "pth_path", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet34": [[242, 252], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "resnet34", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "pth_path", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet50": [[255, 265], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "resnet50", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "pth_path", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet101": [[268, 278], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "resnet101", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "pth_path", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet152": [[281, 291], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "resnet152", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "pth_path", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnext50_32x4d": [[294, 306], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "pth_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnext101_32x8d": [[309, 321], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "pth_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.wide_resnet50_2": [[324, 340], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "pth_path", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.wide_resnet101_2": [[343, 359], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pth_path", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "pth_path", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.APPM.__init__": [[52, 56], ["torch.nn.Module.__init__", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "range", "len"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "APPM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "avgpools", "=", "[", "nn", ".", "AvgPool2d", "(", "ratios", "[", "i", "]", ",", "stride", ")", "for", "i", "in", "range", "(", "len", "(", "ratios", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.APPM.forward": [[57, 82], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.data.cpu().numpy", "torch.cat.data.cpu().numpy", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "torch.from_numpy().to().reshape", "enumerate", "numpy.array().reshape", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "torch.cat().reshape", "range", "torch.from_numpy().to.append", "torch.from_numpy().to.append", "range", "avgs[].view", "torch.cat.data.cpu", "torch.cat.data.cpu", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "indices_results.append", "numpy.concatenate", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "range", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model.nms", "sum", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "enumerate", "sum", "sum", "sum", "sum"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.nms"], ["", "def", "forward", "(", "self", ",", "proposalN", ",", "x", ",", "ratios", ",", "window_nums_sum", ",", "N_list", ",", "iou_threshs", ",", "DEVICE", "=", "'cuda'", ")", ":", "\n", "        ", "batch", ",", "channels", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "avgs", "=", "[", "self", ".", "avgpools", "[", "i", "]", "(", "x", ")", "for", "i", "in", "range", "(", "len", "(", "ratios", ")", ")", "]", "\n", "\n", "all_scores", "=", "torch", ".", "cat", "(", "[", "avgs", "[", "i", "]", ".", "view", "(", "batch", ",", "-", "1", ",", "1", ")", "for", "i", "in", "range", "(", "len", "(", "ratios", ")", ")", "]", ",", "dim", "=", "1", ")", "\n", "windows_scores_np", "=", "all_scores", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "window_scores", "=", "torch", ".", "from_numpy", "(", "windows_scores_np", ")", ".", "to", "(", "DEVICE", ")", ".", "reshape", "(", "batch", ",", "-", "1", ")", "\n", "\n", "# nms", "\n", "proposalN_indices", "=", "[", "]", "\n", "for", "i", ",", "scores", "in", "enumerate", "(", "windows_scores_np", ")", ":", "\n", "            ", "indices_results", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "window_nums_sum", ")", "-", "1", ")", ":", "\n", "                ", "indices_results", ".", "append", "(", "nms", "(", "scores", "[", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "1", "]", ")", ":", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "2", "]", ")", "]", ",", "proposalN", "=", "N_list", "[", "j", "]", ",", "iou_threshs", "=", "iou_threshs", "[", "j", "]", ",", "\n", "coordinates", "=", "coordinates_cat", "[", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "1", "]", ")", ":", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "2", "]", ")", "]", ")", "+", "sum", "(", "window_nums_sum", "[", ":", "j", "+", "1", "]", ")", ")", "\n", "# indices_results.reverse()", "\n", "", "proposalN_indices", ".", "append", "(", "np", ".", "concatenate", "(", "indices_results", ",", "1", ")", ")", "# reverse", "\n", "\n", "", "proposalN_indices", "=", "np", ".", "array", "(", "proposalN_indices", ")", ".", "reshape", "(", "batch", ",", "proposalN", ")", "\n", "proposalN_indices", "=", "torch", ".", "from_numpy", "(", "proposalN_indices", ")", ".", "to", "(", "DEVICE", ")", "\n", "proposalN_windows_scores", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "index_select", "(", "all_score", ",", "dim", "=", "0", ",", "index", "=", "proposalN_indices", "[", "i", "]", ")", "for", "i", ",", "all_score", "in", "enumerate", "(", "all_scores", ")", "]", ",", "0", ")", ".", "reshape", "(", "\n", "batch", ",", "proposalN", ")", "\n", "\n", "return", "proposalN_indices", ",", "proposalN_windows_scores", ",", "window_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.MainNet.__init__": [[84, 91], ["torch.nn.Module.__init__", "networks.resnet.resnet50", "torch.nn.Linear", "torch.nn.Linear", "model.APPM"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "proposalN", ",", "num_classes", ",", "channels", ")", ":", "\n", "        ", "super", "(", "MainNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "proposalN", "=", "proposalN", "\n", "self", ".", "pretrained_model", "=", "resnet", ".", "resnet50", "(", "pretrained", "=", "True", ",", "pth_path", "=", "pretrain_path", ")", "\n", "self", ".", "cls_net", "=", "nn", ".", "Linear", "(", "channels", ",", "num_classes", ")", "\n", "self", ".", "APPM", "=", "APPM", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.MainNet.forward": [[92, 128], ["model.MainNet.pretrained_model", "model.MainNet.cls_net", "model.MainNet.APPM", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "window_imgs.reshape.reshape.reshape", "model.MainNet.pretrained_model", "model.MainNet.cls_net", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "coordinates.append", "window_imgs.reshape.reshape.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.interpolate", "torch.interpolate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ",", "epoch", ",", "batch_idx", ",", "status", "=", "'test'", ",", "DEVICE", "=", "'cuda'", ")", ":", "\n", "        ", "fm", ",", "embedding", ",", "conv5_b", "=", "self", ".", "pretrained_model", "(", "x", ")", "\n", "batch_size", ",", "channel_size", ",", "side_size", ",", "_", "=", "fm", ".", "shape", "\n", "assert", "channel_size", "==", "2048", "\n", "\n", "logits", "=", "self", ".", "cls_net", "(", "embedding", ")", "\n", "coordinates", "=", "[", "]", "\n", "proposalN_indices", ",", "proposalN_windows_scores", ",", "window_scores", "=", "self", ".", "APPM", "(", "self", ".", "proposalN", ",", "att", ",", "ratios", ",", "window_nums_sum", ",", "N_list", ",", "iou_threshs", ",", "DEVICE", ")", "\n", "\n", "if", "status", "==", "\"train\"", ":", "\n", "# window_imgs cls", "\n", "            ", "window_imgs", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "self", ".", "proposalN", ",", "3", ",", "224", ",", "224", "]", ")", ".", "to", "(", "DEVICE", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "coord_tensor", "=", "torch", ".", "zeros", "(", "(", "self", ".", "proposalN", ",", "4", ")", ",", "dtype", "=", "torch", ".", "int16", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "proposalN", ")", ":", "\n", "                    ", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", "=", "coordinates_cat", "[", "proposalN_indices", "[", "i", ",", "j", "]", "]", "\n", "coord_tensor", "[", "j", ",", ":", "]", "=", "torch", ".", "as_tensor", "(", "[", "x0", ",", "y0", ",", "x1", ",", "y1", "]", ")", "\n", "\n", "window_imgs", "[", "i", ":", "i", "+", "1", ",", "j", "]", "=", "F", ".", "interpolate", "(", "x", "[", "i", ":", "i", "+", "1", ",", ":", ",", "x0", ":", "(", "x1", "+", "1", ")", ",", "y0", ":", "(", "y1", "+", "1", ")", "]", ",", "size", "=", "(", "224", ",", "224", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "True", ")", "\n", "", "coordinates", ".", "append", "(", "coord_tensor", ")", "\n", "###  this is for visualization", "\n", "# m=3", "\n", "# heatmap_show(x[m,:].cpu(), att[m,:].cpu(), 'overlay')", "\n", "# for j in range(self.proposalN):", "\n", "#     imshow(window_imgs[m,j].cpu(),str(j))", "\n", "# exit()", "\n", "", "window_imgs", "=", "window_imgs", ".", "reshape", "(", "batch_size", "*", "self", ".", "proposalN", ",", "3", ",", "224", ",", "224", ")", "\n", "_", ",", "window_embeddings", ",", "_", "=", "self", ".", "pretrained_model", "(", "window_imgs", ".", "detach", "(", ")", ")", "\n", "proposalN_windows_logits", "=", "self", ".", "cls_net", "(", "window_embeddings", ")", "\n", "", "else", ":", "\n", "            ", "proposalN_windows_logits", "=", "torch", ".", "zeros", "(", "[", "batch_size", "*", "self", ".", "proposalN", ",", "self", ".", "num_classes", "]", ")", ".", "to", "(", "DEVICE", ")", "\n", "\n", "", "return", "proposalN_windows_scores", ",", "proposalN_windows_logits", ",", "proposalN_indices", ",", "window_scores", ",", "coordinates", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__": [[130, 151], ["torch.nn.Module.__init__", "torchvision.models.resnet50", "torchvision.models.resnet50", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "collections.OrderedDict", "pretrained_dict.items", "torchvision.models.resnet50.load_state_dict", "torchvision.models.resnet50.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "list", "list", "torchvision.models.resnet50.children", "torchvision.models.resnet50.children"], "methods", ["home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.__init__", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet50", "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.resnet.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "channels", ")", ":", "\n", "# nn.Module", "\n", "        ", "super", "(", "TwoBranch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "model1", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "model2", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "\n", "## load pretrain model", "\n", "if", "GAT_pretrained", ":", "\n", "            ", "new_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "pretrain_path", ")", "[", "'model_state_dict'", "]", "\n", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "'pretrained_model.'", "in", "k", ":", "\n", "                    ", "name", "=", "k", "[", "17", ":", "]", "\n", "new_dict", "[", "name", "]", "=", "v", "\n", "", "", "model1", ".", "load_state_dict", "(", "new_dict", ")", "\n", "model2", ".", "load_state_dict", "(", "new_dict", ")", "\n", "#############################", "\n", "", "self", ".", "pretrained_model1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "model1", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "pretrained_model2", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "model2", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "self", ".", "cls_net", "=", "nn", ".", "Linear", "(", "channels", "*", "2", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.TwoBranch.forward": [[152, 161], ["model.TwoBranch.pretrained_model1", "model.TwoBranch.pretrained_model2", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.TwoBranch.cls_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "att", ",", "DEVICE", "=", "'cuda'", ")", ":", "\n", "        ", "x1", "=", "self", ".", "pretrained_model1", "(", "x", ")", "\n", "x2", "=", "self", ".", "pretrained_model2", "(", "att", ")", "\n", "x1", "=", "torch", ".", "flatten", "(", "x1", ",", "1", ")", "\n", "x2", "=", "torch", ".", "flatten", "(", "x2", ",", "1", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "dim", "=", "-", "1", ")", "\n", "out", "=", "self", ".", "cls_net", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yaorong0921_cub-gha.networks.model.nms": [[11, 50], ["numpy.concatenate", "res.any", "numpy.array().reshape().astype", "TypeError", "numpy.argsort", "numpy.concatenate", "indices_results.append", "numpy.maximum", "numpy.minimum", "len", "indices_results.append", "len", "numpy.array().reshape().astype", "numpy.array().reshape", "len", "numpy.arange().reshape", "numpy.logical_or", "type", "numpy.array().reshape", "numpy.array", "numpy.arange", "numpy.array"], "function", ["None"], ["def", "nms", "(", "scores_np", ",", "proposalN", ",", "iou_threshs", ",", "coordinates", ",", "IND", "=", "None", ")", ":", "\n", "    ", "if", "not", "(", "type", "(", "scores_np", ")", ".", "__module__", "==", "'numpy'", "and", "len", "(", "scores_np", ".", "shape", ")", "==", "2", "and", "scores_np", ".", "shape", "[", "1", "]", "==", "1", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'score_np is not right'", ")", "\n", "\n", "", "windows_num", "=", "scores_np", ".", "shape", "[", "0", "]", "\n", "indices_coordinates", "=", "np", ".", "concatenate", "(", "(", "scores_np", ",", "coordinates", ")", ",", "1", ")", "\n", "\n", "if", "IND", "is", "not", "None", ":", "\n", "        ", "indices", "=", "IND", "\n", "", "else", ":", "\n", "        ", "indices", "=", "np", ".", "argsort", "(", "indices_coordinates", "[", ":", ",", "0", "]", ")", "\n", "", "indices_coordinates", "=", "np", ".", "concatenate", "(", "(", "indices_coordinates", ",", "np", ".", "arange", "(", "0", ",", "windows_num", ")", ".", "reshape", "(", "windows_num", ",", "1", ")", ")", ",", "1", ")", "[", "indices", "]", "#[339,6]", "\n", "indices_results", "=", "[", "]", "\n", "\n", "res", "=", "indices_coordinates", "\n", "\n", "while", "res", ".", "any", "(", ")", ":", "\n", "        ", "indice_coordinates", "=", "res", "[", "-", "1", "]", "\n", "indices_results", ".", "append", "(", "indice_coordinates", "[", "5", "]", ")", "\n", "\n", "if", "len", "(", "indices_results", ")", "==", "proposalN", ":", "\n", "            ", "return", "np", ".", "array", "(", "indices_results", ")", ".", "reshape", "(", "1", ",", "proposalN", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "res", "=", "res", "[", ":", "-", "1", "]", "\n", "\n", "# Exclude anchor boxes with selected anchor box whose iou is greater than the threshold", "\n", "start_max", "=", "np", ".", "maximum", "(", "res", "[", ":", ",", "1", ":", "3", "]", ",", "indice_coordinates", "[", "1", ":", "3", "]", ")", "\n", "end_min", "=", "np", ".", "minimum", "(", "res", "[", ":", ",", "3", ":", "5", "]", ",", "indice_coordinates", "[", "3", ":", "5", "]", ")", "\n", "lengths", "=", "end_min", "-", "start_max", "+", "1", "\n", "intersec_map", "=", "lengths", "[", ":", ",", "0", "]", "*", "lengths", "[", ":", ",", "1", "]", "\n", "intersec_map", "[", "np", ".", "logical_or", "(", "lengths", "[", ":", ",", "0", "]", "<", "0", ",", "lengths", "[", ":", ",", "1", "]", "<", "0", ")", "]", "=", "0", "\n", "iou_map_cur", "=", "intersec_map", "/", "(", "(", "res", "[", ":", ",", "3", "]", "-", "res", "[", ":", ",", "1", "]", "+", "1", ")", "*", "(", "res", "[", ":", ",", "4", "]", "-", "res", "[", ":", ",", "2", "]", "+", "1", ")", "+", "\n", "(", "indice_coordinates", "[", "3", "]", "-", "indice_coordinates", "[", "1", "]", "+", "1", ")", "*", "\n", "(", "indice_coordinates", "[", "4", "]", "-", "indice_coordinates", "[", "2", "]", "+", "1", ")", "-", "intersec_map", ")", "\n", "res", "=", "res", "[", "iou_map_cur", "<=", "iou_threshs", "]", "\n", "\n", "", "while", "len", "(", "indices_results", ")", "!=", "proposalN", ":", "\n", "        ", "indices_results", ".", "append", "(", "indice_coordinates", "[", "5", "]", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "indices_results", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n"]]}