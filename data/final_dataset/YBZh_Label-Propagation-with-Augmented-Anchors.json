{"home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.opts.opts": [[4, 116], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "str"], "function", ["None"], ["def", "opts", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train alexnet on the cub200 dataset'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path_source'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Root of train data set of the source domain'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path_source_t'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Root of train data set of the target domain'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path_target'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Root of the test data set'", ")", "\n", "parser", ".", "add_argument", "(", "'--src'", ",", "type", "=", "str", ",", "default", "=", "'amazon'", ",", "\n", "help", "=", "'choose between amazon | dslr | webcam'", ")", "\n", "parser", ".", "add_argument", "(", "'--src_t'", ",", "type", "=", "str", ",", "default", "=", "'webcam'", ",", "\n", "help", "=", "'choose between amazon | dslr | webcam'", ")", "\n", "parser", ".", "add_argument", "(", "'--tar'", ",", "type", "=", "str", ",", "default", "=", "'webcam'", ",", "\n", "help", "=", "'choose between amazon | dslr | webcam'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "31", ",", "\n", "help", "=", "'number of classes of data used to fine-tune the pre-trained model'", ")", "\n", "# Optimization options", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "'-e'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'Number of epochs to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'Batch size of the source data.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'The Learning Rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lrw'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'The Learning Rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "'-m'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'Momentum.'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "'-wd'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'Weight decay (L2 penalty).'", ")", "\n", "parser", ".", "add_argument", "(", "'--schedule'", ",", "type", "=", "str", ",", "default", "=", "'rev'", ",", "help", "=", "'rev | constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "type", "=", "float", ",", "default", "=", "0.75", ",", "help", "=", "'2.25 (visda) and 0.75 (others).'", ")", "\n", "# checkpoints", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Checkpoints path to resume(default none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained_checkpoint'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Pretrained checkpoint to resume (default none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_only'", ",", "'-t'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Test only flag'", ")", "\n", "#### graph", "\n", "parser", ".", "add_argument", "(", "'--dis_gra'", ",", "type", "=", "str", ",", "default", "=", "'l2'", ",", "help", "=", "'dis for graph'", ")", "\n", "parser", ".", "add_argument", "(", "'--cor'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'cor in the computation of l2 distance'", ")", "\n", "parser", ".", "add_argument", "(", "'--TopkGraph'", ",", "action", "=", "'store_true'", ",", "help", "=", "'full graph 2 topk graph'", ")", "\n", "parser", ".", "add_argument", "(", "'--graphk'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'KNN grapg'", ")", "\n", "parser", ".", "add_argument", "(", "'--AlphaGraph'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'level for propagation.'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--noise_level'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'cor in the computation of l2 distance'", ")", "\n", "parser", ".", "add_argument", "(", "'--noise_flag'", ",", "action", "=", "'store_true'", ",", "help", "=", "'full graph 2 topk graph'", ")", "\n", "# Architecture", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "'resnet101'", ",", "help", "=", "'Model name'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_process_t'", ",", "type", "=", "str", ",", "default", "=", "'simple'", ",", "help", "=", "'Model name'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_process_s'", ",", "type", "=", "str", ",", "default", "=", "'simple'", ",", "help", "=", "'Model name'", ")", "\n", "parser", ".", "add_argument", "(", "'--flag'", ",", "type", "=", "str", ",", "default", "=", "'original'", ",", "help", "=", "'flag for different settings'", ")", "\n", "parser", ".", "add_argument", "(", "'--type'", ",", "type", "=", "str", ",", "default", "=", "'type1'", ",", "help", "=", "'type1 | type2 | type3'", ")", "\n", "parser", ".", "add_argument", "(", "'--dis'", ",", "type", "=", "str", ",", "default", "=", "'cross_entropy'", ",", "help", "=", "'cross_entropy | kl | l1'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether using pretrained model'", ")", "\n", "parser", ".", "add_argument", "(", "'--per_category'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'number of domains'", ")", "\n", "parser", ".", "add_argument", "(", "'--fea_dim'", ",", "type", "=", "int", ",", "default", "=", "2048", ",", "help", "=", "'feature dim'", ")", "\n", "parser", ".", "add_argument", "(", "'--uniform_type_s'", ",", "type", "=", "str", ",", "default", "=", "'soft'", ",", "help", "=", "'hard | soft | none'", ")", "\n", "parser", ".", "add_argument", "(", "'--uniform_type_t'", ",", "type", "=", "str", ",", "default", "=", "'soft'", ",", "help", "=", "'hard | soft | none'", ")", "\n", "parser", ".", "add_argument", "(", "'--dsbn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether use domain specific bn'", ")", "\n", "parser", ".", "add_argument", "(", "'--fixbn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether fix the ImageNet pretrained BN layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--OurMec'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether use our cross entropy style MEC | original mec'", ")", "\n", "parser", ".", "add_argument", "(", "'--OurPseudo'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether use cluster label for cross entropy directly | tangs'", ")", "\n", "parser", ".", "add_argument", "(", "'--category_mean'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Only True for visda, acc calculated over categories'", ")", "\n", "parser", ".", "add_argument", "(", "'--clufrq_dec'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether decrease the cluster freq.'", ")", "\n", "parser", ".", "add_argument", "(", "'--threed'", ",", "action", "=", "'store_true'", ",", "help", "=", "'ori + aug + grey | ori + grey.'", ")", "\n", "parser", ".", "add_argument", "(", "'--only_lrw'", ",", "action", "=", "'store_true'", ",", "help", "=", "'lrw weight | lamda'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'iteration of clustering'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--pseudo_type'", ",", "type", "=", "str", ",", "default", "=", "'cluster'", ",", "help", "=", "'cluster (spherical_kmeans cluster) or lp (label propagation)'", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_process'", ",", "action", "=", "'store_true'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--spherical_kmeans'", ",", "action", "=", "'store_true'", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--entropy_weight'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether adopt the prediction entropy of LP prediction as weight'", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "'--S4LP'", ",", "type", "=", "str", ",", "default", "=", "'all'", ",", "help", "=", "'all | cluster | center'", ")", "\n", "parser", ".", "add_argument", "(", "'--LPSolver'", ",", "type", "=", "str", ",", "default", "=", "'Itera'", ",", "help", "=", "'Itera | CloseF'", ")", "\n", "parser", ".", "add_argument", "(", "'--LPType'", ",", "type", "=", "str", ",", "default", "=", "'lgc'", ",", "help", "=", "'lgc | hmn | parw | omni'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "0.99", ",", "help", "=", "'hyper-parameter.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lamb'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'hyper-parameter'", ")", "\n", "parser", ".", "add_argument", "(", "'--NC4LP'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of clusters for each category in clustering'", ")", "\n", "parser", ".", "add_argument", "(", "'--LPIterNum'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "help", "=", "'number of clusters for each category in clustering'", ")", "\n", "parser", ".", "add_argument", "(", "'--LPIterationType'", ",", "type", "=", "str", ",", "default", "=", "'add'", ",", "help", "=", "'replace | add'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--min_num_cate'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'lowest number of image in each class'", ")", "\n", "parser", ".", "add_argument", "(", "'--filter_low'", ",", "action", "=", "'store_true'", ",", "help", "=", "'filter the samples with low prediction confidence'", ")", "\n", "parser", ".", "add_argument", "(", "'--cos_threshold'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "help", "=", "'hyper-parameter.'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_type'", ",", "type", "=", "str", ",", "default", "=", "'cas_ins'", ",", "help", "=", "'replace | add'", ")", "\n", "parser", ".", "add_argument", "(", "'--graph_gama'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'for graph construction, follow manifold-based search'", ")", "\n", "parser", ".", "add_argument", "(", "'--dis_margin'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'hyper-parameter.'", ")", "\n", "parser", ".", "add_argument", "(", "'--moving_weight'", ",", "type", "=", "float", ",", "default", "=", "0.7", ",", "help", "=", "'hyper-parameter.'", ")", "\n", "\n", "\n", "# i/o", "\n", "parser", ".", "add_argument", "(", "'--log'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'Log folder'", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of data loading workers (default: 4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_freq'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "help", "=", "'test frequency (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cluster_freq'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'clustering frequency (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "'-p'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'print frequency (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--score_frep'", ",", "default", "=", "300", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'print frequency (default: 300, not download score)'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "args", ".", "data_path_source_t", "=", "args", ".", "data_path_source", "\n", "args", ".", "data_path_target", "=", "args", ".", "data_path_source", "\n", "args", ".", "src_t", "=", "args", ".", "tar", "\n", "\n", "\n", "args", ".", "log", "=", "args", ".", "log", "+", "'_'", "+", "args", ".", "src", "+", "'2'", "+", "args", ".", "tar", "+", "'_'", "+", "args", ".", "arch", "+", "'_'", "+", "args", ".", "flag", "+", "'_'", "+", "args", ".", "type", "+", "'_'", "+", "args", ".", "dis", "+", "'_'", "+", "args", ".", "uniform_type_s", "+", "'_'", "+", "args", ".", "pseudo_type", "+", "str", "(", "args", ".", "lrw", ")", "+", "'_'", "+", "str", "(", "args", ".", "cos_threshold", ")", "+", "args", ".", "dis_gra", "\n", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.main.main": [[29, 70], ["opts.opts", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "print", "open", "open.write", "open.close", "open", "open.write", "open.write", "open.write", "open.close", "data.prepare_data.generate_dataloader", "opts.opts.arch.find", "models.resnet.resnet", "ValueError", "os.path.isdir", "os.makedirs", "os.path.join", "os.path.join", "time.asctime", "trainer.download_feature_and_pca_clustering", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "opts.opts._get_kwargs", "json.dumps", "time.localtime", "trainer.download_feature_and_pca_label_prob", "time.time"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.opts.opts", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data.generate_dataloader", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.download_feature_and_pca_clustering", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.download_feature_and_pca_label_prob"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "opts", "(", ")", "\n", "\n", "if", "args", ".", "arch", ".", "find", "(", "'resnet'", ")", "!=", "-", "1", ":", "\n", "        ", "model", "=", "resnet", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unavailable model architecture!!!'", ")", "\n", "# define-multi GPU", "\n", "", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "print", "(", "model", ")", "\n", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "log", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "log", ")", "\n", "", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "state", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "args", ".", "_get_kwargs", "(", ")", "}", "\n", "log", ".", "write", "(", "json", ".", "dumps", "(", "state", ")", "+", "'\\n'", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "log", ".", "write", "(", "'\\n-------------------------------------------\\n'", ")", "\n", "log", ".", "write", "(", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "log", ".", "write", "(", "'\\n-------------------------------------------'", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "# process the data and prepare the dataloaders.", "\n", "# source_train_loader, source_val_loader, target_train_dataset, val_loader, source_val_loader_cluster, val_loader_cluster = generate_dataloader(args)", "\n", "source_train_loader_ce", ",", "source_train_dataset", ",", "target_train_loader_ce", ",", "target_train_dataset", ",", "source_val_loader", ",", "target_val_loader", "=", "generate_dataloader", "(", "args", ")", "\n", "if", "args", ".", "pseudo_type", "==", "'cluster'", ":", "### the AO of CAN", "\n", "        ", "clusering_labels_for_path", "=", "download_feature_and_pca_clustering", "(", "0", ",", "source_val_loader", ",", "\n", "target_val_loader", ",", "model", ",", "args", ")", "\n", "", "elif", "args", ".", "pseudo_type", "==", "'lp'", ":", "\n", "        ", "clusering_labels_for_path", "=", "download_feature_and_pca_label_prob", "(", "0", ",", "source_val_loader", ",", "\n", "target_val_loader", ",", "model", ",", "\n", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.AverageMeter.__init__": [[520, 522], ["trainer.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.AverageMeter.reset": [[523, 528], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.AverageMeter.update": [[529, 534], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.download_feature_and_pca_label_prob": [[21, 287], ["open", "open.write", "open.write", "model.eval", "range", "enumerate", "enumerate", "trainer.FeaturePreprocess", "len", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "range", "range", "os.path.join", "source_feature_list_category.append", "print", "torch.autograd.Variable", "torch.autograd.Variable", "feature_source.cpu.cpu", "feature_source.cpu.size", "range", "print", "torch.autograd.Variable", "torch.autograd.Variable", "feature_target.cpu.size", "feature_target.cpu.cpu", "range", "torch.zeros.diagonal().fill_", "trainer.process_zero_value", "trainer.process_zero_value", "open", "open.write", "open.close", "range", "range", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "LabelT.view.size", "corresponding_labels.append", "range", "torch.no_grad", "torch.no_grad", "torch.zeros", "torch.zeros", "source_feature_list.append", "source_labels.append", "source_feature_list_category[].append", "torch.no_grad", "torch.no_grad", "GT_labels.append", "image_paths.append", "target_feature_list.append", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.exp", "torch.exp", "torch.zeros.sum", "torch.sqrt", "torch.sqrt", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "open", "open.write", "open.write", "open.write", "torch.matmul", "torch.matmul", "open.write", "open.write", "open.write", "open.close", "torch.topk", "torch.topk", "PredT.sum().view", "torch.sum().item", "torch.sum().item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "os.path.join", "open.write", "range", "open.write", "print", "open.write", "print", "target_feature_list_pseudo.append", "target_confidence_list.append", "target_feature_list_pseudo[].append", "target_confidence_list[].append", "noempty_list.append", "len", "print", "torch.normalize", "len", "[].item", "len", "model", "model", "feature_source[].view", "feature_source[].view", "model", "model", "target[].item", "feature_target[].view", "torch.topk", "torch.topk", "open", "open.write", "open.write", "open.write", "torch.matmul", "torch.matmul", "open.write", "open.write", "open.write", "open.close", "torch.zeros.diagonal", "os.path.join", "time.asctime", "time.asctime", "torch.inverse", "torch.inverse", "time.asctime", "time.asctime", "torch.zeros.sum", "torch.sqrt", "torch.sqrt", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "open", "time.time", "time.time", "open.write", "open.write", "open.write", "trainer.cg_solver", "open.write", "open.write", "open.write", "open.close", "torch.Tensor().long().clone", "torch.Tensor().long().clone", "LabelT.view.size", "int", "list", "random.sample", "LabelT.view.view", "torch.topk", "torch.topk", "math.log", "target_feature[].view", "Instance_confidence[].view", "len", "torch.cat", "torch.cat", "torch.cat().mean", "torch.cat().mean", "selected_samples.append", "range", "feature_source.cpu.size", "feature_source.cpu.size", "feature_target.cpu.size", "torch.t", "torch.t", "os.path.join", "time.asctime", "time.asctime", "torch.cat.transpose", "torch.topk", "torch.topk", "time.asctime", "time.asctime", "torch.t", "torch.t", "torch.cat.numpy", "torch.zeros", "torch.zeros", "open", "open.write", "print", "open.write", "open.write", "torch.zeros.scatter_", "open.write", "print", "open.write", "open.write", "open.close", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "time.localtime", "time.localtime", "time.localtime", "time.localtime", "os.path.join", "range", "list", "list.remove", "random.choice", "PredT.sum", "torch.sum", "torch.sum", "LabelT[].item", "open.write", "acc_for_each_class1.mean", "acc_for_each_class1.mean", "target_feature.size", "torch.cat.sum", "len", "time.localtime", "time.localtime", "time.localtime", "time.localtime", "torch.cat.size", "torch.cat.size", "os.path.join", "time.asctime", "time.asctime", "pynndescent.NNDescent", "torch.from_numpy", "torch.from_numpy", "time.asctime", "time.asctime", "torch.t", "torch.t", "time.time", "time.time", "time.time", "time.time", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.eye", "torch.eye", "torch.Tensor().long", "torch.Tensor().long", "range", "open.write", "torch.cat", "torch.cat", "values[].view", "time.time", "time.time", "time.time", "time.time", "time.localtime", "time.localtime", "torch.from_numpy().float", "torch.from_numpy().float", "time.localtime", "time.localtime", "torch.eye", "torch.eye", "time.time", "time.time", "time.time", "time.time", "process_zero_value.log", "torch.Tensor().long", "torch.Tensor().long", "open.write", "open.write", "torch.cat", "torch.cat", "values[].view", "time.time", "time.time", "time.time", "time.time", "torch.Tensor", "torch.Tensor", "torch.from_numpy", "torch.from_numpy", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.FeaturePreprocess", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.cg_solver"], ["def", "download_feature_and_pca_label_prob", "(", "epoch", ",", "train_loader", ",", "val_loader", ",", "model", ",", "args", ",", "moving_feature_centeriod_t", "=", "False", ")", ":", "\n", "    ", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "log", ".", "write", "(", "'Constructing graph with %s, and the solver is: %s'", "%", "(", "args", ".", "dis_gra", ",", "args", ".", "LPSolver", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "########    lam = 2 / (1 + math.exp(-1 * 10 * iteration / args.epochs)) - 1", "\n", "cos_threshold", "=", "(", "args", ".", "cos_threshold", ")", "*", "(", "1", "-", "epoch", "/", "args", ".", "epochs", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "#### step 1: prepare source and target features and labels", "\n", "source_feature_list", "=", "[", "]", "\n", "source_labels", "=", "[", "]", "\n", "source_feature_list_category", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "        ", "source_feature_list_category", ".", "append", "(", "[", "]", ")", "######### each for one categoty", "\n", "\n", "", "for", "i", ",", "(", "input", ",", "target", ",", "img_path", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "print", "(", "'soruce center calculation'", ",", "i", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "dsbn", ":", "\n", "                ", "feature_source", ",", "_", "=", "model", "(", "input_var", ",", "ST", "=", "'S'", ")", "\n", "\n", "", "else", ":", "\n", "                ", "feature_source", ",", "_", "=", "model", "(", "input_var", ")", "\n", "", "", "feature_source", "=", "feature_source", ".", "cpu", "(", ")", "\n", "batchsize", "=", "feature_source", ".", "size", "(", "0", ")", "\n", "for", "j", "in", "range", "(", "batchsize", ")", ":", "\n", "            ", "img_label", "=", "target", "[", "j", "]", "\n", "label_temp", "=", "torch", ".", "zeros", "(", "1", ",", "args", ".", "num_classes", ")", "\n", "label_temp", "[", "0", "]", "[", "img_label", "]", "=", "1", "\n", "source_feature_list", ".", "append", "(", "feature_source", "[", "j", "]", ".", "view", "(", "1", ",", "feature_source", ".", "size", "(", "1", ")", ")", ")", "\n", "source_labels", ".", "append", "(", "label_temp", ")", "\n", "source_feature_list_category", "[", "img_label", "]", ".", "append", "(", "feature_source", "[", "j", "]", ".", "view", "(", "1", ",", "feature_source", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "\n", "", "", "target_feature_list", "=", "[", "]", "\n", "GT_labels", "=", "[", "]", "\n", "image_paths", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "input", ",", "target", ",", "img_path", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "print", "(", "'target feature calculation'", ",", "i", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "dsbn", ":", "\n", "                ", "feature_target", ",", "_", "=", "model", "(", "input_var", ",", "ST", "=", "'T'", ")", "\n", "", "else", ":", "\n", "                ", "feature_target", ",", "_", "=", "model", "(", "input_var", ")", "\n", "", "", "batchsize", "=", "feature_target", ".", "size", "(", "0", ")", "\n", "feature_target", "=", "feature_target", ".", "cpu", "(", ")", "\n", "for", "j", "in", "range", "(", "batchsize", ")", ":", "\n", "            ", "GT_labels", ".", "append", "(", "target", "[", "j", "]", ".", "item", "(", ")", ")", "\n", "image_paths", ".", "append", "(", "img_path", "[", "j", "]", ")", "\n", "target_feature_list", ".", "append", "(", "feature_target", "[", "j", "]", ".", "view", "(", "1", ",", "feature_target", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "\n", "", "", "source_feature", ",", "source_labels", ",", "NumS", ",", "target_feature", "=", "FeaturePreprocess", "(", "source_feature_list", ",", "source_feature_list_category", ",", "source_labels", ",", "target_feature_list", ",", "args", ",", "moving_feature_centeriod_t", ")", "\n", "NumT", "=", "len", "(", "target_feature_list", ")", "\n", "all_feature", "=", "torch", ".", "cat", "(", "(", "source_feature", ",", "target_feature", ")", ",", "dim", "=", "0", ")", "### (Ns + Nt) * d", "\n", "target_label_initial", "=", "torch", ".", "zeros", "(", "NumT", ",", "args", ".", "num_classes", ")", "## the initial state make no influence", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "source_labels", ",", "target_label_initial", ")", ",", "dim", "=", "0", ")", "### (Ns + Nt) * c", "\n", "for", "lpiteration", "in", "range", "(", "args", ".", "LPIterNum", ")", ":", "\n", "        ", "NumST", "=", "NumS", "+", "NumT", "\n", "############ step 2: calculate the graph, N = Ns + Nt", "\n", "if", "args", ".", "dis_gra", "==", "'l2'", ":", "## NOT USED. similarity graph with L2 based distance.", "\n", "            ", "all_f1", "=", "torch", ".", "unsqueeze", "(", "all_feature", ",", "1", ")", "## N * 1 * d", "\n", "all_f2", "=", "torch", ".", "unsqueeze", "(", "all_feature", ",", "0", ")", "## 1 * N * d", "\n", "weight", "=", "(", "(", "all_f1", "-", "all_f2", ")", "**", "2", ")", ".", "mean", "(", "2", ")", "## N * N * d -> N*N", "\n", "weight", "=", "torch", ".", "exp", "(", "-", "weight", "/", "(", "2", "*", "args", ".", "cor", ")", ")", "############# here the \\sigma is set to 1 as default !!!!!!!!!!!!!!!!!!!", "\n", "if", "args", ".", "TopkGraph", ":", "\n", "                ", "values", ",", "indexes", "=", "torch", ".", "topk", "(", "weight", ",", "args", ".", "graphk", ")", "\n", "################################# W + W^T\uff0c This is better than the \u8865\u5168one.", "\n", "weight", "[", "weight", "<", "values", "[", ":", ",", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "]", "=", "0", "\n", "weight", "=", "weight", "+", "torch", ".", "t", "(", "weight", ")", "\n", "\n", "", "", "elif", "args", ".", "dis_gra", "==", "'mul'", ":", "#### only mul:-> vector mul; mul + l2 process-> cos dis", "\n", "## It is still fast, since the matrix multiply is implemented in parallel.", "\n", "            ", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "log", ".", "write", "(", "'start calculate graph with brute-force implementation:'", ")", "\n", "log", ".", "write", "(", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "weight", "=", "torch", ".", "matmul", "(", "all_feature", ",", "all_feature", ".", "transpose", "(", "0", ",", "1", ")", ")", "## N * N", "\n", "weight", "[", "weight", "<", "0", "]", "=", "0", "\n", "weight", "=", "weight", "**", "args", ".", "graph_gama", "\n", "if", "args", ".", "TopkGraph", ":", "\n", "                ", "values", ",", "indexes", "=", "torch", ".", "topk", "(", "weight", ",", "args", ".", "graphk", ")", "\n", "weight", "[", "weight", "<", "values", "[", ":", ",", "-", "1", "]", ".", "view", "(", "-", "1", ",", "1", ")", "]", "=", "0", "\n", "", "log", ".", "write", "(", "'brute-force implementation end:'", ")", "\n", "log", ".", "write", "(", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "log", ".", "close", "(", ")", "\n", "weight", "=", "weight", "+", "torch", ".", "t", "(", "weight", ")", "\n", "", "elif", "args", ".", "dis_gra", "==", "'nndescent'", ":", "## A fast way to construct the k-nearest graph.", "\n", "# ipdb.set_trace()", "\n", "            ", "nn_data", "=", "all_feature", ".", "numpy", "(", ")", "\n", "weight", "=", "torch", ".", "zeros", "(", "all_feature", ".", "size", "(", "0", ")", ",", "all_feature", ".", "size", "(", "0", ")", ")", "\n", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "log", ".", "write", "(", "'nn descent start:'", ")", "\n", "print", "(", "'nn descent start\\n'", ")", "\n", "log", ".", "write", "(", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "\n", "knn_indices", ",", "knn_value", "=", "NNDescent", "(", "nn_data", ",", "\"cosine\"", ",", "{", "}", ",", "args", ".", "graphk", ",", "random_state", "=", "np", ".", "random", ")", ".", "_neighbor_graph", "\n", "weight", ".", "scatter_", "(", "1", ",", "torch", ".", "from_numpy", "(", "knn_indices", ")", ",", "1", "-", "torch", ".", "from_numpy", "(", "knn_value", ")", ".", "float", "(", ")", ")", "\n", "log", ".", "write", "(", "'nndescent end:'", ")", "\n", "print", "(", "'nndescent end'", ")", "\n", "log", ".", "write", "(", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "log", ".", "close", "(", ")", "\n", "weight", "=", "weight", "+", "torch", ".", "t", "(", "weight", ")", "\n", "\n", "\n", "", "weight", ".", "diagonal", "(", "0", ")", ".", "fill_", "(", "0", ")", "### zero the diagonal", "\n", "\n", "######################## Step3: label propagation, F = (I - \\alpha S)^{-1} Y", "\n", "if", "args", ".", "LPSolver", "==", "'CloseF'", ":", "##### the closed-form solver", "\n", "            ", "D", "=", "weight", ".", "sum", "(", "0", ")", "\n", "D_sqrt_inv", "=", "torch", ".", "sqrt", "(", "1.0", "/", "(", "D", "+", "1e-8", ")", ")", "\n", "D1", "=", "torch", ".", "unsqueeze", "(", "D_sqrt_inv", ",", "1", ")", ".", "repeat", "(", "1", ",", "NumST", ")", "\n", "D2", "=", "torch", ".", "unsqueeze", "(", "D_sqrt_inv", ",", "0", ")", ".", "repeat", "(", "NumST", ",", "1", ")", "\n", "S", "=", "D1", "*", "weight", "*", "D2", "############ same with D3 = torch.diag(D_sqrt_inv)  S = torch.matmul(torch.matmul(D3, weight), D3)", "\n", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "log", ".", "write", "(", "'closed form solution start:'", ")", "\n", "log", ".", "write", "(", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "PredST", "=", "torch", ".", "matmul", "(", "torch", ".", "inverse", "(", "torch", ".", "eye", "(", "NumST", ")", "-", "args", ".", "AlphaGraph", "*", "S", "+", "1e-8", ")", ",", "all_label", ")", "\n", "log", ".", "write", "(", "'closed form solution end:'", ")", "\n", "log", ".", "write", "(", "time", ".", "asctime", "(", "time", ".", "localtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "log", ".", "close", "(", ")", "\n", "", "elif", "args", ".", "LPSolver", "==", "'CG'", ":", "### the conjugate gradient solver, faster.", "\n", "            ", "D", "=", "weight", ".", "sum", "(", "0", ")", "\n", "D_sqrt_inv", "=", "torch", ".", "sqrt", "(", "1.0", "/", "(", "D", "+", "1e-8", ")", ")", "\n", "D1", "=", "torch", ".", "unsqueeze", "(", "D_sqrt_inv", ",", "1", ")", ".", "repeat", "(", "1", ",", "NumST", ")", "\n", "D2", "=", "torch", ".", "unsqueeze", "(", "D_sqrt_inv", ",", "0", ")", ".", "repeat", "(", "NumST", ",", "1", ")", "\n", "S", "=", "D1", "*", "weight", "*", "D2", "############ same with D3 = torch.diag(D_sqrt_inv)  S = torch.matmul(torch.matmul(D3, weight), D3)", "\n", "################## A * X =  all_label", "\n", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "count", "=", "time", ".", "time", "(", ")", "\n", "log", ".", "write", "(", "'cg solution start:'", ")", "\n", "log", ".", "write", "(", "'time: %3f'", "%", "(", "time", ".", "time", "(", ")", "-", "count", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "################################## nn solver, not the", "\n", "\n", "A", "=", "torch", ".", "eye", "(", "NumST", ")", "-", "args", ".", "AlphaGraph", "*", "S", "+", "1e-8", "\n", "PredST", "=", "cg_solver", "(", "A", ",", "all_label", ")", "\n", "log", ".", "write", "(", "'cg solution end:'", ")", "\n", "log", ".", "write", "(", "'time: %3f'", "%", "(", "time", ".", "time", "(", ")", "-", "count", ")", ")", "\n", "log", ".", "write", "(", "'\\n'", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "PredT", "=", "PredST", "[", "NumS", ":", ",", ":", "]", "\n", "#  all_label[NumS:, :] = PredT  ### keep the unlabeled data with no prior", "\n", "if", "lpiteration", "==", "0", ":", "\n", "            ", "if", "args", ".", "noise_flag", ":", "#### ablation study, replace pseudo labels with defined noise level.", "\n", "                ", "LabelT", "=", "torch", ".", "Tensor", "(", "GT_labels", ")", ".", "long", "(", ")", ".", "clone", "(", ")", "\n", "num_t", "=", "LabelT", ".", "size", "(", "0", ")", "\n", "wrong_num", "=", "int", "(", "args", ".", "noise_level", "*", "num_t", ")", "\n", "all_list", "=", "list", "(", "range", "(", "num_t", ")", ")", "\n", "selecte_list", "=", "random", ".", "sample", "(", "all_list", ",", "wrong_num", ")", "\n", "for", "wrong_index", "in", "selecte_list", ":", "\n", "                    ", "all_class_list", "=", "list", "(", "range", "(", "args", ".", "num_classes", ")", ")", "\n", "## remove the accurate one", "\n", "all_class_list", ".", "remove", "(", "GT_labels", "[", "wrong_index", "]", ")", "\n", "random_label", "=", "random", ".", "choice", "(", "all_class_list", ")", "\n", "LabelT", "[", "wrong_index", "]", "=", "random_label", "\n", "", "LabelT", "=", "LabelT", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "LabelT", "=", "torch", ".", "topk", "(", "PredT", ",", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "_", ",", "LabelT", "=", "torch", ".", "topk", "(", "PredT", ",", "1", ")", "\n", "", "PredT", "=", "PredT", "/", "PredT", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "### normalize", "\n", "PredT_nozeso", "=", "process_zero_value", "(", "PredT", ",", "nozero", "=", "True", ")", "\n", "PredT_zero", "=", "process_zero_value", "(", "PredT", ",", "nozero", "=", "False", ")", "\n", "####### prediction confidence of the label propagation algorithm", "\n", "Instance_confidence", "=", "1", "+", "(", "PredT_zero", "*", "PredT_nozeso", ".", "log", "(", ")", ")", ".", "sum", "(", "1", ")", "/", "math", ".", "log", "(", "args", ".", "num_classes", ")", "### 1 - H(Z)/log(args.num_classes) #  torch.Tensor(size T number)", "\n", "#if args.entropy_weight:", "\n", "#    print(Instance_confidence)", "\n", "acc_cluster_label", "=", "torch", ".", "sum", "(", "torch", ".", "Tensor", "(", "GT_labels", ")", ".", "long", "(", ")", "==", "LabelT", "[", ":", ",", "0", "]", ")", ".", "item", "(", ")", "/", "NumT", "\n", "if", "args", ".", "category_mean", ":", "\n", "            ", "acc_count", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ")", "\n", "all_count", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ")", "\n", "for", "i", "in", "range", "(", "NumT", ")", ":", "\n", "                ", "all_count", "[", "GT_labels", "[", "i", "]", "]", "+=", "1", "\n", "if", "LabelT", "[", "i", "]", ".", "item", "(", ")", "==", "GT_labels", "[", "i", "]", ":", "\n", "                    ", "acc_count", "[", "GT_labels", "[", "i", "]", "]", "+=", "1", "\n", "", "", "acc_for_each_class1", "=", "acc_count", "/", "all_count", "\n", "\n", "", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "if", "args", ".", "category_mean", ":", "\n", "            ", "log", ".", "write", "(", "\"\\nAcc for each class1: \"", ")", "\n", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "log", ".", "write", "(", "\"%dst: %3f\"", "%", "(", "i", "+", "1", ",", "acc_for_each_class1", "[", "i", "]", ")", ")", "\n", "", "elif", "i", "==", "1", ":", "\n", "                    ", "log", ".", "write", "(", "\",  %dnd: %3f\"", "%", "(", "i", "+", "1", ",", "acc_for_each_class1", "[", "i", "]", ")", ")", "\n", "", "elif", "i", "==", "2", ":", "\n", "                    ", "log", ".", "write", "(", "\", %drd: %3f\"", "%", "(", "i", "+", "1", ",", "acc_for_each_class1", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "log", ".", "write", "(", "\", %dth: %3f\"", "%", "(", "i", "+", "1", ",", "acc_for_each_class1", "[", "i", "]", ")", ")", "\n", "", "", "log", ".", "write", "(", "\"Avg. over all classes: %3f\"", "%", "acc_for_each_class1", ".", "mean", "(", ")", ")", "\n", "print", "(", "\"Avg. over all classes: %3f\"", "%", "acc_for_each_class1", ".", "mean", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "write", "(", "\"\\n   iteration: %d,   Cluster Label Acc: %3f\"", "%", "(", "lpiteration", ",", "acc_cluster_label", ")", ")", "\n", "print", "(", "\"      Cluster Label Acc: %3f\"", "%", "(", "acc_cluster_label", ")", ")", "\n", "", "log", ".", "write", "(", "\"  cos threshold: %3f\"", "%", "(", "cos_threshold", ")", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "############################ add the predicted target center to the known points or replace the source known points with target centers", "\n", "########## calculate the target pseudo center  target_feature", "\n", "target_feature_list_pseudo", "=", "[", "]", "\n", "target_confidence_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "            ", "target_feature_list_pseudo", ".", "append", "(", "[", "]", ")", "######### each for one categoty", "\n", "target_confidence_list", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "NumT", ")", ":", "\n", "            ", "psuedo_label", "=", "LabelT", "[", "i", "]", "\n", "target_feature_list_pseudo", "[", "psuedo_label", "]", ".", "append", "(", "target_feature", "[", "i", "]", ".", "view", "(", "1", ",", "target_feature", ".", "size", "(", "1", ")", ")", ")", "\n", "target_confidence_list", "[", "psuedo_label", "]", ".", "append", "(", "Instance_confidence", "[", "i", "]", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "", "target_center_labels", "=", "torch", ".", "eye", "(", "args", ".", "num_classes", ")", "\n", "target_center_feature", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ",", "args", ".", "fea_dim", ")", "\n", "# ipdb.set_trace()", "\n", "################### for predicted category with 0 samples", "\n", "noempty_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "            ", "if", "len", "(", "target_feature_list_pseudo", "[", "i", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "noempty_list", ".", "append", "(", "i", ")", "\n", "if", "args", ".", "entropy_weight", ":", "\n", "                ", "weight_for_this_category", "=", "torch", ".", "cat", "(", "target_confidence_list", "[", "i", "]", ")", "\n", "weight_for_this_category", "=", "weight_for_this_category", "/", "weight_for_this_category", ".", "sum", "(", ")", "\n", "target_center_feature", "[", "i", "]", "=", "(", "torch", ".", "cat", "(", "target_feature_list_pseudo", "[", "i", "]", ",", "dim", "=", "0", ")", "*", "weight_for_this_category", ")", ".", "sum", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "target_center_feature", "[", "i", "]", "=", "(", "torch", ".", "cat", "(", "target_feature_list_pseudo", "[", "i", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", "0", ")", ")", "\n", "\n", "", "", "target_center_labels", "=", "target_center_labels", "[", "noempty_list", "]", "\n", "target_center_feature", "=", "target_center_feature", "[", "noempty_list", "]", "\n", "\n", "if", "len", "(", "noempty_list", ")", "!=", "args", ".", "num_classes", ":", "\n", "            ", "print", "(", "'noempty'", ",", "noempty_list", ")", "\n", "", "if", "args", ".", "l2_process", ":", "\n", "            ", "target_center_feature", "=", "F", ".", "normalize", "(", "target_center_feature", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "all_feature", "=", "torch", ".", "cat", "(", "(", "target_center_feature", ",", "all_feature", ")", ",", "dim", "=", "0", ")", "\n", "all_label", "=", "torch", ".", "cat", "(", "(", "target_center_labels", ",", "all_label", ")", ",", "dim", "=", "0", ")", "\n", "NumS", "=", "NumS", "+", "len", "(", "noempty_list", ")", "\n", "\n", "#### the A2LP algorithm is over now.", "\n", "", "corresponding_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "LabelT", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "corresponding_labels", ".", "append", "(", "LabelT", "[", "i", "]", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "filter_low", ":", "\n", "        ", "selected_samples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "target_feature_list", ")", ")", ":", "##### remove the samples with low confidence.", "\n", "            ", "if", "Instance_confidence", "[", "i", "]", ">", "cos_threshold", ":", "################## if the confidence if high, select it.", "\n", "                ", "selected_samples", ".", "append", "(", "i", ")", "\n", "", "", "clustering_label_for_path", "=", "{", "image_paths", "[", "i", "]", ":", "[", "corresponding_labels", "[", "i", "]", ",", "Instance_confidence", "[", "i", "]", "]", "for", "i", "in", "selected_samples", "}", "\n", "", "else", ":", "\n", "        ", "clustering_label_for_path", "=", "{", "image_paths", "[", "i", "]", ":", "[", "corresponding_labels", "[", "i", "]", ",", "Instance_confidence", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "corresponding_labels", ")", ")", "}", "\n", "\n", "\n", "", "return", "clustering_label_for_path", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.FeaturePreprocess": [[288, 362], ["type", "torch.eye", "torch.eye", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "len", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.zeros", "torch.zeros", "range", "int", "torch.zeros", "torch.zeros", "range", "torch.eye", "torch.eye", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "range", "moving_feature_centeriod_t.cpu", "torch.normalize", "spherecluster.SphericalKMeans().fit", "sklearn.cluster.KMeans().fit", "torch.cat().mean", "torch.cat().mean", "torch.normalize", "torch.normalize", "torch.from_numpy", "torch.from_numpy", "SelectedCenters.append", "SelectedLabels.append", "spherecluster.SphericalKMeans", "sklearn.cluster.KMeans", "Centers[].view", "torch.cat", "torch.cat", "torch.from_numpy().float.size"], "function", ["None"], ["", "def", "FeaturePreprocess", "(", "source_feature_list", ",", "source_feature_list_category", ",", "source_labels", ",", "target_feature_list", ",", "args", ",", "moving_feature_centeriod_t", "=", "False", ")", ":", "\n", "\n", "    ", "if", "args", ".", "S4LP", "==", "'all'", ":", "## The full A2LP", "\n", "        ", "if", "type", "(", "moving_feature_centeriod_t", ")", "!=", "bool", ":", "###########", "\n", "            ", "target_center_labels", "=", "torch", ".", "eye", "(", "args", ".", "num_classes", ")", "\n", "NumS", "=", "len", "(", "source_feature_list", ")", "+", "args", ".", "num_classes", "\n", "source_labels", "=", "torch", ".", "cat", "(", "source_labels", ",", "dim", "=", "0", ")", "\n", "source_labels", "=", "torch", ".", "cat", "(", "(", "source_labels", ",", "target_center_labels", ")", ",", "dim", "=", "0", ")", "\n", "target_feature", "=", "torch", ".", "cat", "(", "target_feature_list", ",", "dim", "=", "0", ")", "\n", "source_feature", "=", "torch", ".", "cat", "(", "source_feature_list", ",", "dim", "=", "0", ")", "\n", "source_feature", "=", "torch", ".", "cat", "(", "(", "source_feature", ",", "moving_feature_centeriod_t", ".", "cpu", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "if", "args", ".", "l2_process", ":", "########################## l2 progress of target data", "\n", "                ", "target_feature", "=", "F", ".", "normalize", "(", "target_feature", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "source_feature", "=", "F", ".", "normalize", "(", "source_feature", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "", "", "else", ":", "\n", "            ", "NumS", "=", "len", "(", "source_feature_list", ")", "\n", "source_labels", "=", "torch", ".", "cat", "(", "source_labels", ",", "dim", "=", "0", ")", "\n", "target_feature", "=", "torch", ".", "cat", "(", "target_feature_list", ",", "dim", "=", "0", ")", "\n", "source_feature", "=", "torch", ".", "cat", "(", "source_feature_list", ",", "dim", "=", "0", ")", "\n", "if", "args", ".", "l2_process", ":", "########################## l2 progress of target data", "\n", "                ", "target_feature", "=", "F", ".", "normalize", "(", "target_feature", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "source_feature", "=", "F", ".", "normalize", "(", "source_feature", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "", "", "elif", "args", ".", "S4LP", "==", "'cluster'", ":", "## NOT reported variant ### adopt several representative points for each category in LP", "\n", "        ", "target_feature", "=", "torch", ".", "cat", "(", "target_feature_list", ",", "dim", "=", "0", ")", "\n", "if", "args", ".", "l2_process", ":", "\n", "            ", "target_feature", "=", "F", ".", "normalize", "(", "target_feature", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "############ generate args.NC4LP cluster for each source category and select satisfied center for LP.", "\n", "", "SelectedCenters", "=", "[", "]", "\n", "SelectedLabels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "            ", "num_instance_one_cate", "=", "len", "(", "source_feature_list_category", "[", "i", "]", ")", "\n", "source_feature_one_cate", "=", "torch", ".", "cat", "(", "source_feature_list_category", "[", "i", "]", ",", "dim", "=", "0", ")", "\n", "if", "args", ".", "l2_process", ":", "\n", "                ", "source_feature_one_cate", "=", "F", ".", "normalize", "(", "source_feature_one_cate", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "", "if", "args", ".", "spherical_kmeans", ":", "\n", "                ", "kmeans", "=", "SphericalKMeans", "(", "n_clusters", "=", "args", ".", "NC4LP", ",", "random_state", "=", "0", ",", "max_iter", "=", "args", ".", "niter", ")", ".", "fit", "(", "source_feature_one_cate", ")", "\n", "", "else", ":", "\n", "                ", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "NC4LP", ",", "random_state", "=", "0", ",", "max_iter", "=", "args", ".", "niter", ")", ".", "fit", "(", "source_feature_one_cate", ")", "\n", "", "Ind", "=", "kmeans", ".", "labels_", "\n", "Ind", "=", "torch", ".", "from_numpy", "(", "Ind", ")", "\n", "Centers", "=", "kmeans", ".", "cluster_centers_", "\n", "Centers", "=", "torch", ".", "from_numpy", "(", "Centers", ")", ".", "float", "(", ")", "\n", "CountTensor", "=", "torch", ".", "zeros", "(", "args", ".", "NC4LP", ")", "\n", "for", "j", "in", "range", "(", "num_instance_one_cate", ")", ":", "\n", "                ", "CountTensor", "[", "Ind", "[", "j", "]", "]", "+=", "1", "\n", "", "threshold", "=", "int", "(", "num_instance_one_cate", "/", "args", ".", "NC4LP", ")", "\n", "if", "threshold", "<", "3", ":", "\n", "                ", "threshold", "=", "3", "\n", "", "one_hot_label", "=", "torch", ".", "zeros", "(", "1", ",", "args", ".", "num_classes", ")", "\n", "one_hot_label", "[", "0", "]", "[", "i", "]", "=", "1", "\n", "for", "j", "in", "range", "(", "args", ".", "NC4LP", ")", ":", "\n", "                ", "if", "CountTensor", "[", "j", "]", ">", "threshold", ":", "## this center is selected", "\n", "                    ", "SelectedCenters", ".", "append", "(", "Centers", "[", "j", "]", ".", "view", "(", "1", ",", "Centers", ".", "size", "(", "1", ")", ")", ")", "\n", "SelectedLabels", ".", "append", "(", "one_hot_label", ")", "\n", "", "", "", "NumS", "=", "len", "(", "SelectedCenters", ")", "\n", "source_feature", "=", "torch", ".", "cat", "(", "SelectedCenters", ",", "dim", "=", "0", ")", "\n", "source_labels", "=", "torch", ".", "cat", "(", "SelectedLabels", ",", "dim", "=", "0", ")", "\n", "\n", "", "elif", "args", ".", "S4LP", "==", "'center'", ":", "## A2LP Variant in paper ## only adopt the category center for each category in LP", "\n", "        ", "NumS", "=", "args", ".", "num_classes", "\n", "source_labels", "=", "torch", ".", "eye", "(", "args", ".", "num_classes", ")", "\n", "target_feature", "=", "torch", ".", "cat", "(", "target_feature_list", ",", "dim", "=", "0", ")", "\n", "source_feature", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ",", "args", ".", "fea_dim", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "            ", "source_feature", "[", "i", "]", "=", "torch", ".", "cat", "(", "source_feature_list_category", "[", "i", "]", ",", "dim", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "", "if", "args", ".", "l2_process", ":", "\n", "            ", "target_feature", "=", "F", ".", "normalize", "(", "target_feature", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "source_feature", "=", "F", ".", "normalize", "(", "source_feature", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "source_feature", ",", "source_labels", ",", "NumS", ",", "target_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.process_zero_value": [[363, 370], ["None"], "function", ["None"], ["", "def", "process_zero_value", "(", "tensor", ",", "nozero", "=", "True", ")", ":", "\n", "    ", "if", "(", "tensor", "<=", "0", ")", ".", "sum", "(", ")", "!=", "0", ":", "\n", "        ", "if", "nozero", ":", "\n", "            ", "tensor", "[", "tensor", "<=", "0", "]", "=", "1e-8", "\n", "", "else", ":", "\n", "            ", "tensor", "[", "tensor", "<=", "0", "]", "=", "0", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.download_feature_and_pca_clustering": [[371, 516], ["model.eval", "range", "enumerate", "enumerate", "print", "print", "numpy.array", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "open", "open.write", "open.close", "source_feature_list.append", "print", "torch.autograd.Variable", "torch.autograd.Variable", "feature_source.cpu.cpu", "feature_source.cpu.size", "range", "print", "torch.autograd.Variable", "torch.autograd.Variable", "feature_target.cpu.size", "feature_target.cpu.cpu", "range", "torch.cat().numpy", "torch.cat().numpy", "range", "torch.cat().numpy", "torch.cat().numpy", "print", "faiss.PCAMatrix", "faiss.PCAMatrix.train", "faiss.PCAMatrix.apply_py", "range", "numpy.array", "print", "faiss.PCAMatrix", "faiss.PCAMatrix.train", "faiss.PCAMatrix.apply_py", "range", "numpy.array", "print", "len", "sum", "len", "corresponding_labels.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "range", "os.path.join", "open.write", "range", "open.write", "torch.no_grad", "torch.no_grad", "source_feature_list[].append", "torch.no_grad", "torch.no_grad", "GT_labels.append", "image_paths.append", "target_feature_list.append", "category_index.append", "torch.cat", "torch.cat", "print", "numpy.linalg.norm", "source_center_list.append", "print", "numpy.linalg.norm", "spherecluster.SphericalKMeans().fit", "sklearn.cluster.KMeans().fit", "torch.cat", "torch.cat", "torch.normalize", "torch.cat().numpy.numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat", "torch.cat", "source_feature_list[].numpy", "spherecluster.SphericalKMeans().fit", "sklearn.cluster.KMeans().fit", "len", "model", "model", "feature_source[].view", "model", "model", "target[].item", "feature_target[].view", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "feature_matrix_source[].mean", "torch.normalize", "source_feature_list[].mean", "selected_samples.append", "range", "open.write", "acc_for_each_class1.mean", "feature_source.cpu.size", "feature_target.cpu.size", "spherecluster.SphericalKMeans", "sklearn.cluster.KMeans", "torch.cat", "torch.cat", "source_feature_list[].mean", "spherecluster.SphericalKMeans", "sklearn.cluster.KMeans", "len", "open.write", "open.write", "open.write"], "function", ["None"], ["", "def", "download_feature_and_pca_clustering", "(", "epoch", ",", "train_loader", ",", "val_loader", ",", "model", ",", "args", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "image_paths", "=", "[", "]", "\n", "GT_labels", "=", "[", "]", "\n", "source_feature_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "        ", "source_feature_list", ".", "append", "(", "[", "]", ")", "######### each for one categoty", "\n", "", "for", "i", ",", "(", "input", ",", "target", ",", "img_path", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "print", "(", "'soruce center calculation'", ",", "i", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "dsbn", ":", "\n", "                ", "feature_source", ",", "_", "=", "model", "(", "input_var", ",", "ST", "=", "'S'", ")", "\n", "", "else", ":", "\n", "                ", "feature_source", ",", "_", "=", "model", "(", "input_var", ")", "\n", "", "", "feature_source", "=", "feature_source", ".", "cpu", "(", ")", "\n", "batchsize", "=", "feature_source", ".", "size", "(", "0", ")", "\n", "for", "j", "in", "range", "(", "batchsize", ")", ":", "\n", "            ", "img_label", "=", "target", "[", "j", "]", "\n", "source_feature_list", "[", "img_label", "]", ".", "append", "(", "feature_source", "[", "j", "]", ".", "view", "(", "1", ",", "feature_source", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "", "", "target_feature_list", "=", "[", "]", "\n", "for", "i", ",", "(", "input", ",", "target", ",", "img_path", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "print", "(", "'target feature calculation'", ",", "i", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "dsbn", ":", "\n", "                ", "feature_target", ",", "_", "=", "model", "(", "input_var", ",", "ST", "=", "'T'", ")", "\n", "", "else", ":", "\n", "                ", "feature_target", ",", "_", "=", "model", "(", "input_var", ")", "\n", "", "", "batchsize", "=", "feature_target", ".", "size", "(", "0", ")", "\n", "feature_target", "=", "feature_target", ".", "cpu", "(", ")", "\n", "for", "j", "in", "range", "(", "batchsize", ")", ":", "\n", "            ", "GT_labels", ".", "append", "(", "target", "[", "j", "]", ".", "item", "(", ")", ")", "\n", "image_paths", ".", "append", "(", "img_path", "[", "j", "]", ")", "\n", "target_feature_list", ".", "append", "(", "feature_target", "[", "j", "]", ".", "view", "(", "1", ",", "feature_target", ".", "size", "(", "1", ")", ")", ")", "\n", "", "", "pca", "=", "False", "\n", "if", "pca", ":", "## features are PCA-reduced to 256 dimensions, whitened and l2-normalized.", "\n", "        ", "feature_matrix", "=", "torch", ".", "cat", "(", "target_feature_list", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "category_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "            ", "category_index", ".", "append", "(", "len", "(", "source_feature_list", "[", "i", "]", ")", ")", "\n", "source_feature_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "source_feature_list", "[", "i", "]", ",", "dim", "=", "0", ")", "\n", "", "feature_matrix_source", "=", "torch", ".", "cat", "(", "source_feature_list", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "print", "(", "'apply PCA to the cnn features to reduce dimensions'", ")", "\n", "pcamatrix_source", "=", "faiss", ".", "PCAMatrix", "(", "2048", ",", "args", ".", "pca_dim", ",", "eigen_power", "=", "args", ".", "eigen_power", ")", "## eigen_power = -2 indicates full whitening, = 0 (default) indicates no whitening", "\n", "pcamatrix_source", ".", "train", "(", "feature_matrix_source", ")", "\n", "assert", "pcamatrix_source", ".", "is_trained", "\n", "feature_matrix_source", "=", "pcamatrix_source", ".", "apply_py", "(", "feature_matrix_source", ")", "## the features after pca and whitening", "\n", "if", "args", ".", "l2_process", ":", "\n", "            ", "print", "(", "'apply l2 normalization to the cnn features'", ")", "\n", "norm_value_source", "=", "LA", ".", "norm", "(", "feature_matrix_source", ",", "axis", "=", "1", ")", "\n", "feature_matrix_source", "=", "feature_matrix_source", "/", "norm_value_source", "[", ":", ",", "None", "]", "\n", "", "source_center_list", "=", "[", "]", "\n", "start_index", "=", "0", "\n", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "            ", "source_center_list", ".", "append", "(", "feature_matrix_source", "[", "start_index", ":", "start_index", "+", "category_index", "[", "i", "]", "]", ".", "mean", "(", "0", ")", ")", "\n", "start_index", "=", "start_index", "+", "category_index", "[", "i", "]", "\n", "", "source_feature_array", "=", "np", ".", "array", "(", "source_center_list", ")", "\n", "#####################################################################################################################", "\n", "print", "(", "'apply PCA to the cnn features to reduce dimensions'", ")", "\n", "pcamatrix", "=", "faiss", ".", "PCAMatrix", "(", "2048", ",", "args", ".", "pca_dim", ",", "eigen_power", "=", "args", ".", "eigen_power", ")", "## eigen_power = -2 indicates full whitening, = 0 (default) indicates no whitening", "\n", "pcamatrix", ".", "train", "(", "feature_matrix", ")", "\n", "assert", "pcamatrix", ".", "is_trained", "\n", "feature_matrix", "=", "pcamatrix", ".", "apply_py", "(", "feature_matrix", ")", "## the features after pca and whitening", "\n", "if", "args", ".", "l2_process", ":", "\n", "            ", "print", "(", "'apply l2 normalization to the cnn features'", ")", "\n", "norm_value", "=", "LA", ".", "norm", "(", "feature_matrix", ",", "axis", "=", "1", ")", "\n", "feature_matrix", "=", "feature_matrix", "/", "norm_value", "[", ":", ",", "None", "]", "\n", "", "if", "args", ".", "spherical_kmeans", ":", "\n", "            ", "kmeans", "=", "SphericalKMeans", "(", "n_clusters", "=", "args", ".", "num_classes", ",", "random_state", "=", "0", ",", "init", "=", "source_feature_array", ",", "max_iter", "=", "args", ".", "niter", ")", ".", "fit", "(", "feature_matrix", ")", "\n", "", "else", ":", "\n", "            ", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "num_classes", ",", "random_state", "=", "0", ",", "init", "=", "source_feature_array", ",", "max_iter", "=", "args", ".", "niter", ")", ".", "fit", "(", "feature_matrix", ")", "\n", "", "", "else", ":", "\n", "########################################### calculte source category center directly", "\n", "        ", "if", "args", ".", "l2_process", ":", "########################## l2 progress of source center", "\n", "            ", "feature_matrix", "=", "torch", ".", "cat", "(", "target_feature_list", ",", "dim", "=", "0", ")", "\n", "feature_matrix", "=", "F", ".", "normalize", "(", "feature_matrix", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "feature_matrix", "=", "feature_matrix", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "feature_matrix", "=", "torch", ".", "cat", "(", "target_feature_list", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "num_classes", ")", ":", "\n", "            ", "source_feature_list", "[", "i", "]", "=", "torch", ".", "cat", "(", "source_feature_list", "[", "i", "]", ",", "dim", "=", "0", ")", "########## K * [num * dim]", "\n", "if", "args", ".", "l2_process", ":", "########################## l2 progress of target instance", "\n", "# source_feature_list[i] = F.normalize(source_feature_list[i], dim=1, p=2)  ################ comment this is very important.", "\n", "                ", "source_feature_list", "[", "i", "]", "=", "F", ".", "normalize", "(", "source_feature_list", "[", "i", "]", ".", "mean", "(", "0", ")", ",", "dim", "=", "0", ",", "p", "=", "2", ")", "\n", "", "else", ":", "\n", "                ", "source_feature_list", "[", "i", "]", "=", "source_feature_list", "[", "i", "]", ".", "mean", "(", "0", ")", "\n", "", "source_feature_list", "[", "i", "]", "=", "source_feature_list", "[", "i", "]", ".", "numpy", "(", ")", "\n", "", "source_feature_array", "=", "np", ".", "array", "(", "source_feature_list", ")", "\n", "print", "(", "'use the original cnn features to play cluster'", ")", "\n", "if", "args", ".", "spherical_kmeans", ":", "\n", "            ", "kmeans", "=", "SphericalKMeans", "(", "n_clusters", "=", "args", ".", "num_classes", ",", "random_state", "=", "0", ",", "init", "=", "source_feature_array", ",", "max_iter", "=", "args", ".", "niter", ")", ".", "fit", "(", "\n", "feature_matrix", ")", "\n", "", "else", ":", "\n", "            ", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "num_classes", ",", "random_state", "=", "0", ",", "init", "=", "source_feature_array", ",", "max_iter", "=", "args", ".", "niter", ")", ".", "fit", "(", "feature_matrix", ")", "\n", "\n", "", "", "Ind", "=", "kmeans", ".", "labels_", "\n", "print", "(", "Ind", ")", "\n", "print", "(", "GT_labels", ")", "\n", "gt_label_array", "=", "np", ".", "array", "(", "GT_labels", ")", "\n", "acc_count", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ")", "\n", "all_count", "=", "torch", ".", "zeros", "(", "args", ".", "num_classes", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_label_array", ")", ")", ":", "\n", "        ", "all_count", "[", "gt_label_array", "[", "i", "]", "]", "+=", "1", "\n", "if", "gt_label_array", "[", "i", "]", "==", "Ind", "[", "i", "]", ":", "\n", "            ", "acc_count", "[", "gt_label_array", "[", "i", "]", "]", "+=", "1", "\n", "\n", "", "", "acc_for_each_class1", "=", "acc_count", "/", "all_count", "\n", "acc_cluster_label", "=", "sum", "(", "gt_label_array", "==", "Ind", ")", "/", "gt_label_array", ".", "shape", "[", "0", "]", "\n", "corresponding_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "Ind", ")", ")", ":", "\n", "        ", "corresponding_labels", ".", "append", "(", "Ind", "[", "i", "]", ")", "\n", "\n", "", "if", "args", ".", "filter_low", ":", "\n", "        ", "ccenters", "=", "torch", ".", "from_numpy", "(", "kmeans", ".", "cluster_centers_", ")", "\n", "processed_features", "=", "torch", ".", "from_numpy", "(", "feature_matrix", ")", "\n", "selected_samples", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "target_feature_list", ")", ")", ":", "##### remove the samples with low confidence.", "\n", "            ", "dis", "=", "0.5", "*", "(", "1", "-", "(", "processed_features", "[", "i", "]", "*", "ccenters", "[", "corresponding_labels", "[", "i", "]", "]", ")", ".", "sum", "(", ")", ")", "\n", "if", "dis", "<", "args", ".", "cos_threshold", ":", "\n", "                ", "selected_samples", ".", "append", "(", "i", ")", "\n", "\n", "", "", "clustering_label_for_path", "=", "{", "image_paths", "[", "i", "]", ":", "corresponding_labels", "[", "i", "]", "for", "i", "in", "selected_samples", "}", "\n", "", "else", ":", "\n", "        ", "clustering_label_for_path", "=", "{", "image_paths", "[", "i", "]", ":", "corresponding_labels", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "corresponding_labels", ")", ")", "}", "\n", "# NMI_value = NMI_calculation(GT_labels, corresponding_labels)", "\n", "", "log", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log", ",", "'log.txt'", ")", ",", "'a'", ")", "\n", "if", "args", ".", "category_mean", ":", "\n", "        ", "log", ".", "write", "(", "\"\\nAcc for each class1: \"", ")", "\n", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "log", ".", "write", "(", "\"%dst: %3f\"", "%", "(", "i", "+", "1", ",", "acc_for_each_class1", "[", "i", "]", ")", ")", "\n", "", "elif", "i", "==", "1", ":", "\n", "                ", "log", ".", "write", "(", "\",  %dnd: %3f\"", "%", "(", "i", "+", "1", ",", "acc_for_each_class1", "[", "i", "]", ")", ")", "\n", "", "elif", "i", "==", "2", ":", "\n", "                ", "log", ".", "write", "(", "\", %drd: %3f\"", "%", "(", "i", "+", "1", ",", "acc_for_each_class1", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "log", ".", "write", "(", "\", %dth: %3f\"", "%", "(", "i", "+", "1", ",", "acc_for_each_class1", "[", "i", "]", ")", ")", "\n", "", "", "log", ".", "write", "(", "\"Avg. over all classes: %3f\"", "%", "acc_for_each_class1", ".", "mean", "(", ")", ")", "\n", "", "log", ".", "write", "(", "\"   Avg. over all sample: %3f\"", "%", "acc_cluster_label", ")", "\n", "log", ".", "close", "(", ")", "\n", "\n", "return", "clustering_label_for_path", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.accuracy": [[537, 550], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.accuracy_for_each_class": [[552, 563], ["target.size", "output.topk", "pred.t.t", "pred.t.eq().float().cpu().squeeze", "range", "pred.t.eq().float().cpu", "torch.LongTensor", "torch.LongTensor", "pred.t.eq().float", "pred.t.eq", "target.view"], "function", ["None"], ["", "def", "accuracy_for_each_class", "(", "output", ",", "target", ",", "total_vector", ",", "correct_vector", ")", ":", "\n", "    ", "\"\"\"Computes the precision for each class\"\"\"", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "1", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "total_vector", "[", "target", "[", "i", "]", "]", "+=", "1", "\n", "correct_vector", "[", "torch", ".", "LongTensor", "(", "[", "target", "[", "i", "]", "]", ")", "]", "+=", "correct", "[", "i", "]", "\n", "\n", "", "return", "total_vector", ",", "correct_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.cg_solver": [[565, 593], ["torch.max", "torch.max", "range", "A.matmul", "R_k.transpose().matmul().diag", "P_k.transpose().matmul().matmul().diag", "torch.abs", "torch.abs", "min", "torch.abs", "torch.abs", "torch.ones_like", "torch.ones_like", "A.matmul", "R_k.transpose().matmul", "P_k.transpose().matmul().matmul", "A.matmul", "R_kp1.transpose().matmul", "R_k.transpose", "P_k.transpose().matmul", "R_kp1.transpose", "P_k.transpose"], "function", ["None"], ["", "def", "cg_solver", "(", "A", ",", "B", ",", "X0", "=", "None", ",", "rtol", "=", "1e-3", ",", "maxiter", "=", "None", ")", ":", "\n", "    ", "n", ",", "m", "=", "B", ".", "shape", "\n", "if", "X0", "is", "None", ":", "\n", "        ", "X0", "=", "B", "\n", "", "if", "maxiter", "is", "None", ":", "\n", "        ", "maxiter", "=", "2", "*", "min", "(", "n", ",", "m", ")", "\n", "", "X_k", "=", "X0", "\n", "R_k", "=", "B", "-", "A", ".", "matmul", "(", "X_k", ")", "\n", "P_k", "=", "R_k", "\n", "stopping_matrix", "=", "torch", ".", "max", "(", "rtol", "*", "torch", ".", "abs", "(", "B", ")", ",", "1e-3", "*", "torch", ".", "ones_like", "(", "B", ")", ")", "\n", "for", "k", "in", "range", "(", "1", ",", "maxiter", "+", "1", ")", ":", "\n", "        ", "fenzi", "=", "R_k", ".", "transpose", "(", "0", ",", "1", ")", ".", "matmul", "(", "R_k", ")", ".", "diag", "(", ")", "\n", "fenmu", "=", "P_k", ".", "transpose", "(", "0", ",", "1", ")", ".", "matmul", "(", "A", ")", ".", "matmul", "(", "P_k", ")", ".", "diag", "(", ")", "\n", "#fenmu[fenmu == 0] = 1e-8", "\n", "alpha_k", "=", "fenzi", "/", "fenmu", "\n", "X_kp1", "=", "X_k", "+", "alpha_k", "*", "P_k", "\n", "R_kp1", "=", "R_k", "-", "(", "A", ".", "matmul", "(", "alpha_k", "*", "P_k", ")", ")", "\n", "residual_norm", "=", "torch", ".", "abs", "(", "A", ".", "matmul", "(", "X_kp1", ")", "-", "B", ")", "\n", "if", "(", "residual_norm", "<=", "stopping_matrix", ")", ".", "all", "(", ")", ":", "\n", "            ", "break", "\n", "#fenzi[fenzi ==0] = 1e-8", "\n", "", "beta_k", "=", "(", "R_kp1", ".", "transpose", "(", "0", ",", "1", ")", ".", "matmul", "(", "R_kp1", ")", "/", "(", "fenzi", ")", ")", ".", "diag", "(", ")", "\n", "P_kp1", "=", "R_kp1", "+", "beta_k", "*", "P_k", "\n", "\n", "P_k", "=", "P_kp1", "\n", "X_k", "=", "X_kp1", "\n", "R_k", "=", "R_kp1", "\n", "", "return", "X_kp1", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierSource._Loss.__init__": [[14, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierSource._WeightedLoss.__init__": [[20, 23], ["DomainClassifierSource._Loss.__init__", "DomainClassifierSource._WeightedLoss.register_buffer"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_WeightedLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierSource.DClassifierForSource.__init__": [[27, 30], ["DomainClassifierSource._WeightedLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "-", "100", ",", "reduce", "=", "True", ",", "nClass", "=", "10", ")", ":", "\n", "        ", "super", "(", "DClassifierForSource", ",", "self", ")", ".", "__init__", "(", "weight", ",", "size_average", ")", "\n", "self", ".", "nClass", "=", "nClass", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierSource.DClassifierForSource.forward": [[31, 60], ["input.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "prob[].sum().log().mean", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.softmax.data[].sum", "prob[].sum().data.cpu", "prob[].sum().log", "prob[].sum", "prob[].sum", "prob[].sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# _assert_no_grad(target)", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "\n", "####################################### tang's original loss", "\n", "# if (prob.data[:, -1] == 1).sum() != 0:", "\n", "#     soft_weight = torch.FloatTensor(batch_size, self.nClass+1).fill_(1)", "\n", "#     temp = torch.FloatTensor(batch_size).fill_(1)", "\n", "#     temp[prob.data.cpu()[:, -1]==1] = 0.9999", "\n", "#     soft_weight[:, -1] = temp", "\n", "#     soft_weight_var = Variable(soft_weight).cuda()", "\n", "#     #loss = (1 - prob * soft_weight_var).log().mul(weight_var).sum(1).mean()", "\n", "#     loss = (1 - prob[:, -1] * soft_weight_var[:, -1]).log().mean()", "\n", "# else:", "\n", "# #    loss = (1 - prob).log().mul(weight_var).sum(1).mean()", "\n", "#     loss = (1 - prob[:, -1]).log().mean()", "\n", "\n", "###################################### modified domain confusion loss", "\n", "if", "(", "prob", ".", "data", "[", ":", ",", ":", "self", ".", "nClass", "]", ".", "sum", "(", "1", ")", "==", "0", ")", ".", "sum", "(", ")", "!=", "0", ":", "########### in case of log(0)", "\n", "            ", "soft_weight", "=", "torch", ".", "FloatTensor", "(", "batch_size", ")", ".", "fill_", "(", "0", ")", "\n", "soft_weight", "[", "prob", "[", ":", ",", ":", "self", ".", "nClass", "]", ".", "sum", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", "==", "0", "]", "=", "1e-6", "\n", "soft_weight_var", "=", "Variable", "(", "soft_weight", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "-", "(", "(", "prob", "[", ":", ",", ":", "self", ".", "nClass", "]", ".", "sum", "(", "1", ")", "+", "soft_weight_var", ")", ".", "log", "(", ")", ".", "mean", "(", ")", ")", "\n", "# loss = (-(1 - prob[:, -1] * soft_weight_var[:, -1]).log().mean() - (prob[:, -1] + soft_weight_zero_var[:, -1]).log().mean())/2", "\n", "", "else", ":", "\n", "            ", "loss", "=", "-", "(", "prob", "[", ":", ",", ":", "self", ".", "nClass", "]", ".", "sum", "(", "1", ")", ".", "log", "(", ")", ".", "mean", "(", ")", ")", "\n", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierSource._assert_no_grad": [[7, 10], ["None"], "function", ["None"], ["def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "    ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as volatile or not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.EntropyMinimizationPrinciple._Loss.__init__": [[14, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.EntropyMinimizationPrinciple._WeightedLoss.__init__": [[20, 23], ["EntropyMinimizationPrinciple._Loss.__init__", "EntropyMinimizationPrinciple._WeightedLoss.register_buffer"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_WeightedLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.EntropyMinimizationPrinciple.EMLossForTarget.__init__": [[27, 30], ["EntropyMinimizationPrinciple._WeightedLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "-", "100", ",", "reduce", "=", "True", ",", "nClass", "=", "10", ")", ":", "\n", "        ", "super", "(", "EMLossForTarget", ",", "self", ")", ".", "__init__", "(", "weight", ",", "size_average", ")", "\n", "self", ".", "nClass", "=", "nClass", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.EntropyMinimizationPrinciple.EMLossForTarget.forward": [[31, 43], ["input.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.softmax.log().mul().sum().mean", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.softmax.data.cpu", "torch.softmax.data.cpu", "torch.softmax.log().mul().sum", "torch.softmax.log().mul", "torch.softmax.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "prob_sum", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "if", "(", "prob_sum", ".", "data", ".", "cpu", "(", ")", "==", "0", ")", ".", "sum", "(", ")", "!=", "0", ":", "\n", "            ", "weight_sum", "=", "torch", ".", "FloatTensor", "(", "batch_size", ",", "self", ".", "nClass", ")", ".", "fill_", "(", "0", ")", "\n", "weight_sum", "[", "prob_sum", ".", "data", ".", "cpu", "(", ")", "==", "0", "]", "=", "1e-6", "\n", "weight_sum", "=", "Variable", "(", "weight_sum", ")", ".", "cuda", "(", ")", "\n", "loss_sum", "=", "-", "(", "prob_sum", "+", "weight_sum", ")", ".", "log", "(", ")", ".", "mul", "(", "prob_sum", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss_sum", "=", "-", "prob_sum", ".", "log", "(", ")", ".", "mul", "(", "prob_sum", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.EntropyMinimizationPrinciple.MinEntropyConsensusLoss.__init__": [[46, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "MinEntropyConsensusLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.EntropyMinimizationPrinciple.MinEntropyConsensusLoss.forward": [[50, 64], ["torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.eye().unsqueeze().cuda", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "x.unsqueeze.unsqueeze.unsqueeze", "y.unsqueeze.unsqueeze.unsqueeze", "[].mean", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "i", "=", "torch", ".", "eye", "(", "self", ".", "num_classes", ")", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", "\n", "x", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "y", "=", "F", ".", "log_softmax", "(", "y", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "ce_x", "=", "(", "-", "1.0", "*", "i", "*", "x", ")", ".", "sum", "(", "1", ")", "\n", "ce_y", "=", "(", "-", "1.0", "*", "i", "*", "y", ")", ".", "sum", "(", "1", ")", "\n", "\n", "ce", "=", "0.5", "*", "(", "ce_x", "+", "ce_y", ")", ".", "min", "(", "1", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "\n", "return", "ce", "", "", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.EntropyMinimizationPrinciple._assert_no_grad": [[7, 10], ["None"], "function", ["None"], ["def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "    ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as volatile or not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.ReverseLayerF.forward": [[25, 30], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "alpha", ")", ":", "\n", "        ", "ctx", ".", "alpha", "=", "alpha", "\n", "\n", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.ReverseLayerF.backward": [[31, 36], ["grad_output.neg"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "output", "=", "grad_output", ".", "neg", "(", ")", "*", "ctx", ".", "alpha", "\n", "\n", "return", "output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.BasicBlock.__init__": [[46, 55], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.conv3x3", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.BasicBlock.forward": [[56, 73], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.Bottleneck.__init__": [[78, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.Bottleneck.forward": [[91, 112], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.ResNet.__init__": [[116, 138], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.ResNet._make_layer": [[139, 155], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.ResNet.forward": [[156, 172], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "x.view.view.view", "resnet.ResNet.fc", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.conv3x3": [[37, 41], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.resnet18": [[174, 188], ["resnet.ResNet", "torch.Linear", "ResNet.fc.weight.data.normal_", "ResNet.fc.bias.data.normal_", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "# modify the structure of the model.", "\n", "", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", ")", "\n", "model", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "model", ".", "fc", ".", "bias", ".", "data", ".", "normal_", "(", "0", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.resnet34": [[190, 204], ["resnet.ResNet", "torch.Linear", "print", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "'Load ImageNet pre-trained resnet model'", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "# modify the structure of the model.", "\n", "", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.resnet50": [[206, 238], ["resnet.ResNet", "print", "torch.Linear", "ResNet.state_dict", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model.state_dict.update", "ResNet.load_state_dict", "print", "ResNet.state_dict", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model.state_dict.update", "ResNet.load_state_dict", "torch.Linear", "torch.load", "torch.load", "torch.load", "k.replace", "pretrained_dict_temp.items"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.AverageMeter.update", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.AverageMeter.update"], ["", "def", "resnet50", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "if", "args", ".", "pretrained_checkpoint", ":", "\n", "# modify the structure of the model.", "\n", "            ", "print", "(", "'load the source data pretrained model from: '", ",", "args", ".", "pretrained_checkpoint", ")", "\n", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", "*", "2", ")", "\n", "init_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict_temp", "=", "torch", ".", "load", "(", "args", ".", "pretrained_checkpoint", ")", "[", "'state_dict'", "]", "\n", "pretrained_dict", "=", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict_temp", ".", "items", "(", ")", "}", "\n", "pretrained_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "pretrained_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "init_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "init_dict", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'load the imagenet pretrained model'", ")", "\n", "init_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "pretrained_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "pretrained_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "\n", "init_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "init_dict", ")", "\n", "# modify the structure of the model.", "\n", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", "*", "2", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.resnet101": [[240, 260], ["resnet.ResNet", "print", "ResNet.state_dict", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model.state_dict.update", "ResNet.load_state_dict", "torch.Linear"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.AverageMeter.update"], ["", "def", "resnet101", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "'load the imagenet pretrained model'", ")", "\n", "init_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "pretrained_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "pretrained_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "\n", "init_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "init_dict", ")", "\n", "# modify the structure of the model.", "\n", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", "*", "2", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.resnet152": [[262, 275], ["resnet.ResNet", "torch.Linear", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "# modify the structure of the model.", "\n", "", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet.resnet": [[277, 291], ["print", "resnet.resnet18", "resnet.resnet34", "resnet.resnet50", "resnet.resnet101", "resnet.resnet152", "ValueError"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet18", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet34", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet50", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet101", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet152"], ["", "def", "resnet", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "\"==> creating model '{}' \"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "arch", "==", "'resnet18'", ":", "\n", "        ", "return", "resnet18", "(", "args", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet34'", ":", "\n", "        ", "return", "resnet34", "(", "args", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "        ", "return", "resnet50", "(", "args", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet101'", ":", "\n", "        ", "return", "resnet101", "(", "args", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet152'", ":", "\n", "        ", "return", "resnet152", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unrecognized model architecture'", ",", "args", ".", "arch", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.alexnet.AlexNet.__init__": [[16, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "super", "(", "AlexNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "11", ",", "stride", "=", "4", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "192", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "features2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", "*", "6", "*", "6", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# nn.Linear(4096, num_classes),", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.alexnet.AlexNet.forward": [[46, 53], ["alexnet.AlexNet.features1", "alexnet.AlexNet.features2", "alexnet.AlexNet.view", "alexnet.AlexNet.classifier", "alexnet.AlexNet.fc", "alexnet.AlexNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features1", "(", "x", ")", "\n", "x", "=", "self", ".", "features2", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "256", "*", "6", "*", "6", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.alexnet.alexnet": [[55, 93], ["alexnet.AlexNet", "torch.Linear", "print", "torch.load_url", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "model_zoo.load_url.pop", "AlexNet.load_state_dict"], "function", ["None"], ["", "", "def", "alexnet", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"AlexNet model architecture from the\n    `\"One weird trick...\" <https://arxiv.org/abs/1404.5997>`_ paper.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "AlexNet", "(", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "'Load ImageNet pre-trained alexnet model'", ")", "\n", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'alexnet'", "]", ")", "\n", "pretrained_state_dict", "[", "'features1.0.weight'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.0.weight'", ")", "\n", "pretrained_state_dict", "[", "'features1.0.bias'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.0.bias'", ")", "\n", "pretrained_state_dict", "[", "'features1.3.weight'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.3.weight'", ")", "\n", "pretrained_state_dict", "[", "'features1.3.bias'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.3.bias'", ")", "\n", "pretrained_state_dict", "[", "'features1.6.weight'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.6.weight'", ")", "\n", "pretrained_state_dict", "[", "'features1.6.bias'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.6.bias'", ")", "\n", "pretrained_state_dict", "[", "'features2.0.weight'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.8.weight'", ")", "\n", "pretrained_state_dict", "[", "'features2.0.bias'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.8.bias'", ")", "\n", "pretrained_state_dict", "[", "'features2.2.weight'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.10.weight'", ")", "\n", "pretrained_state_dict", "[", "'features2.2.bias'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'features.10.bias'", ")", "\n", "pretrained_state_dict", "[", "'fc.weight'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'classifier.6.weight'", ")", "\n", "pretrained_state_dict", "[", "'fc.bias'", "]", "=", "pretrained_state_dict", ".", "pop", "(", "'classifier.6.bias'", ")", "\n", "model", ".", "load_state_dict", "(", "pretrained_state_dict", ")", "\n", "# modify the structure of the model.", "\n", "# cf. https://github.com/meliketoy/fine-tuning.pytorch/blob/master/main.py", "\n", "# if (args.net_type == 'alexnet' or args.net_type == 'vggnet'):", "\n", "#     num_ftrs = model_ft.classifier[6].in_features", "\n", "#     feature_model = list(model_ft.classifier.children())", "\n", "#     feature_model.pop()", "\n", "#     feature_model.append(nn.Linear(num_ftrs, len(dset_classes)))", "\n", "#     model_ft.classifier = nn.Sequential(*feature_model)", "\n", "# elif (args.net_type == 'resnet'):", "\n", "#     num_ftrs = model_ft.fc.in_features", "\n", "#     model_ft.fc = nn.Linear(num_ftrs, len(dset_classes))", "\n", "\n", "", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", ")", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.CrossEntropyClassWeighted._Loss.__init__": [[14, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.CrossEntropyClassWeighted.CrossEntropyClassWeighted.__init__": [[20, 24], ["CrossEntropyClassWeighted._Loss.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ",", "ignore_index", "=", "-", "100", ",", "reduce", "=", "None", ",", "nClass", "=", "10", ")", ":", "\n", "        ", "super", "(", "CrossEntropyClassWeighted", ",", "self", ")", ".", "__init__", "(", "size_average", ")", "\n", "self", ".", "nClass", "=", "nClass", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.CrossEntropyClassWeighted.CrossEntropyClassWeighted.forward": [[26, 28], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "reduce", "=", "None", ")", ":", "\n", "        ", "return", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "weight", ",", "ignore_index", "=", "self", ".", "ignore_index", ",", "reduce", "=", "reduce", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.CrossEntropyClassWeighted._assert_no_grad": [[7, 10], ["None"], "function", ["None"], ["def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "    ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as volatile or not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierTarget._Loss.__init__": [[14, 17], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierTarget._WeightedLoss.__init__": [[20, 23], ["DomainClassifierTarget._Loss.__init__", "DomainClassifierTarget._WeightedLoss.register_buffer"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_WeightedLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierTarget.DClassifierForTarget.__init__": [[27, 30], ["DomainClassifierTarget._WeightedLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "-", "100", ",", "reduce", "=", "True", ",", "nClass", "=", "10", ")", ":", "\n", "        ", "super", "(", "DClassifierForTarget", ",", "self", ")", ".", "__init__", "(", "weight", ",", "size_average", ")", "\n", "self", ".", "nClass", "=", "nClass", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierTarget.DClassifierForTarget.forward": [[31, 60], ["input.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "prob[].sum().log().mean", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.softmax.data[].sum", "prob[].sum().data.cpu", "prob[].sum().log", "prob[].sum", "prob[].sum", "prob[].sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# _assert_no_grad(target)", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "\n", "prob", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "\n", "####################################### tang's original loss", "\n", "# if (prob.data[:, -1] == 1).sum() != 0:", "\n", "#     soft_weight = torch.FloatTensor(batch_size, self.nClass+1).fill_(1)", "\n", "#     temp = torch.FloatTensor(batch_size).fill_(1)", "\n", "#     temp[prob.data.cpu()[:, -1]==1] = 0.9999", "\n", "#     soft_weight[:, -1] = temp", "\n", "#     soft_weight_var = Variable(soft_weight).cuda()", "\n", "#     #loss = (1 - prob * soft_weight_var).log().mul(weight_var).sum(1).mean()", "\n", "#     loss = (1 - prob[:, -1] * soft_weight_var[:, -1]).log().mean()", "\n", "# else:", "\n", "# #    loss = (1 - prob).log().mul(weight_var).sum(1).mean()", "\n", "#     loss = (1 - prob[:, -1]).log().mean()", "\n", "\n", "###################################### modified domain confusion loss", "\n", "if", "(", "prob", ".", "data", "[", ":", ",", "self", ".", "nClass", ":", "]", ".", "sum", "(", "1", ")", "==", "0", ")", ".", "sum", "(", ")", "!=", "0", ":", "########### in case of log(0)", "\n", "            ", "soft_weight", "=", "torch", ".", "FloatTensor", "(", "batch_size", ")", ".", "fill_", "(", "0", ")", "\n", "soft_weight", "[", "prob", "[", ":", ",", "self", ".", "nClass", ":", "]", ".", "sum", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", "==", "0", "]", "=", "1e-6", "\n", "soft_weight_var", "=", "Variable", "(", "soft_weight", ")", ".", "cuda", "(", ")", "\n", "loss", "=", "-", "(", "(", "prob", "[", ":", ",", "self", ".", "nClass", ":", "]", ".", "sum", "(", "1", ")", "+", "soft_weight_var", ")", ".", "log", "(", ")", ".", "mean", "(", ")", ")", "\n", "# loss = (-(1 - prob[:, -1] * soft_weight_var[:, -1]).log().mean() - (prob[:, -1] + soft_weight_zero_var[:, -1]).log().mean())/2", "\n", "", "else", ":", "\n", "            ", "loss", "=", "-", "(", "prob", "[", ":", ",", "self", ".", "nClass", ":", "]", ".", "sum", "(", "1", ")", ".", "log", "(", ")", ".", "mean", "(", ")", ")", "\n", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainClassifierTarget._assert_no_grad": [[7, 10], ["None"], "function", ["None"], ["def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "    ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as volatile or not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._Loss.__init__": [[15, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._WeightedLoss.__init__": [[21, 24], ["DomainConfusionLoss._Loss.__init__", "DomainConfusionLoss._WeightedLoss.register_buffer"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "_WeightedLoss", ",", "self", ")", ".", "__init__", "(", "size_average", ")", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss.ConsistTarget.__init__": [[35, 38], ["DomainConfusionLoss._WeightedLoss.__init__"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "size_average", "=", "True", ",", "ignore_index", "=", "-", "100", ",", "reduce", "=", "True", ",", "nClass", "=", "10", ")", ":", "\n", "        ", "super", "(", "ConsistTarget", ",", "self", ")", ".", "__init__", "(", "weight", ",", "size_average", ")", "\n", "self", ".", "nClass", "=", "nClass", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss.ConsistTarget.forward": [[39, 100], ["input.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "_process_zero_value.log().mul().sum().mean", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum().mean", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "DomainConfusionLoss._process_zero_value", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul", "_process_zero_value.log().mul", "_process_zero_value.log().mul().sum().mean", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul().sum", "_process_zero_value.log", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul", "_process_zero_value.log().mul", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul", "_process_zero_value.log().mul", "_process_zero_value.log", "_process_zero_value.log().mul", "_process_zero_value.log", "_process_zero_value.log", "_process_zero_value.log().mul().sum", "_process_zero_value.log().mul", "_process_zero_value.log().mul", "_process_zero_value.log().mul", "_process_zero_value.log", "_process_zero_value.log", "_process_zero_value.log().mul", "_process_zero_value.log", "_process_zero_value.log", "_process_zero_value.log", "_process_zero_value.log().mul", "_process_zero_value.log", "_process_zero_value.log", "_process_zero_value.log", "_process_zero_value.log", "_process_zero_value.log"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value"], ["", "def", "forward", "(", "self", ",", "input", ",", "type", "=", "'type1'", ",", "dis", "=", "'cross_entropy'", ")", ":", "\n", "############################################# type #######################", "\n", "## type 1: all p^{st}", "\n", "## type 2: all P^s and P^t", "\n", "## type 3: mix p^{st}, p^s and p^t, same with tang", "\n", "############################################# dis ########################", "\n", "## cross_entropy: same with tang, em + consistent ??", "\n", "## kl           : consistent only ??", "\n", "## l1           : consistent only ??", "\n", "######################################################################", "\n", "        ", "batch_size", "=", "input", ".", "size", "(", "0", ")", "\n", "prob", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "\n", "prob_s", "=", "F", ".", "softmax", "(", "input", "[", ":", ",", ":", "self", ".", "nClass", "]", ",", "dim", "=", "1", ")", "\n", "prob_t", "=", "F", ".", "softmax", "(", "input", "[", ":", ",", "self", ".", "nClass", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "type", "==", "'type1'", ":", "\n", "            ", "prob_s_used", "=", "prob", "[", ":", ",", ":", "self", ".", "nClass", "]", "\n", "prob_t_used", "=", "prob", "[", ":", ",", "self", ".", "nClass", ":", "]", "\n", "if", "dis", "==", "'l1'", ":", "\n", "                ", "loss", "=", "torch", ".", "norm", "(", "prob_s_used", "-", "prob_t_used", ",", "p", "=", "1", ")", "\n", "", "elif", "dis", "==", "'cross_entropy'", ":", "\n", "                ", "prob_s_used", "=", "_process_zero_value", "(", "prob_s_used", ")", "\n", "prob_t_used", "=", "_process_zero_value", "(", "prob_t_used", ")", "\n", "loss", "=", "-", "(", "prob_s_used", ".", "log", "(", ")", ".", "mul", "(", "prob_t_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "-", "(", "prob_t_used", ".", "log", "(", ")", ".", "mul", "(", "prob_s_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "loss", "=", "loss", "*", "0.5", "\n", "", "elif", "dis", "==", "'kl'", ":", "\n", "                ", "prob_s_used", "=", "_process_zero_value", "(", "prob_s_used", ")", "\n", "prob_t_used", "=", "_process_zero_value", "(", "prob_t_used", ")", "\n", "loss", "=", "-", "(", "prob_s_used", ".", "log", "(", ")", ".", "mul", "(", "prob_t_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "-", "(", "prob_t_used", ".", "log", "(", ")", ".", "mul", "(", "prob_s_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "+", "(", "prob_s_used", ".", "log", "(", ")", ".", "mul", "(", "prob_s_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "+", "(", "prob_t_used", ".", "log", "(", ")", ".", "mul", "(", "prob_t_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "loss", "=", "loss", "*", "0.5", "\n", "", "", "elif", "type", "==", "'type2'", ":", "\n", "            ", "prob_s_used", "=", "prob_s", "\n", "prob_t_used", "=", "prob_t", "\n", "if", "dis", "==", "'l1'", ":", "\n", "                ", "loss", "=", "torch", ".", "norm", "(", "prob_s_used", "-", "prob_t_used", ",", "p", "=", "1", ")", "\n", "", "elif", "dis", "==", "'cross_entropy'", ":", "\n", "                ", "prob_s_used", "=", "_process_zero_value", "(", "prob_s_used", ")", "\n", "prob_t_used", "=", "_process_zero_value", "(", "prob_t_used", ")", "\n", "loss", "=", "-", "(", "prob_s_used", ".", "log", "(", ")", ".", "mul", "(", "prob_t_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "-", "(", "prob_t_used", ".", "log", "(", ")", ".", "mul", "(", "prob_s_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "loss", "=", "loss", "*", "0.5", "\n", "", "elif", "dis", "==", "'kl'", ":", "\n", "                ", "prob_s_used", "=", "_process_zero_value", "(", "prob_s_used", ")", "\n", "prob_t_used", "=", "_process_zero_value", "(", "prob_t_used", ")", "\n", "loss", "=", "-", "(", "prob_s_used", ".", "log", "(", ")", ".", "mul", "(", "prob_t_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "-", "(", "prob_t_used", ".", "log", "(", ")", ".", "mul", "(", "prob_s_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "+", "(", "prob_s_used", ".", "log", "(", ")", ".", "mul", "(", "prob_s_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "+", "(", "prob_t_used", ".", "log", "(", ")", ".", "mul", "(", "prob_t_used", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "loss", "=", "loss", "*", "0.5", "\n", "", "", "elif", "type", "==", "'type3'", ":", "########### tang's method", "\n", "            ", "prob_s_used", "=", "prob", "[", ":", ",", ":", "self", ".", "nClass", "]", "\n", "prob_t_used", "=", "prob", "[", ":", ",", "self", ".", "nClass", ":", "]", "\n", "if", "dis", "==", "'l1'", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "elif", "dis", "==", "'cross_entropy'", ":", "\n", "                ", "prob_s_used", "=", "_process_zero_value", "(", "prob_s_used", ")", "\n", "prob_t_used", "=", "_process_zero_value", "(", "prob_t_used", ")", "\n", "prob_s", "=", "_process_zero_value", "(", "prob_s", ")", "\n", "prob_t", "=", "_process_zero_value", "(", "prob_t", ")", "\n", "loss", "=", "-", "(", "prob_s_used", ".", "log", "(", ")", ".", "mul", "(", "prob_t", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "-", "(", "prob_t_used", ".", "log", "(", ")", ".", "mul", "(", "prob_s", ")", ")", ".", "sum", "(", "1", ")", ".", "mean", "(", ")", "\n", "loss", "=", "loss", "*", "0.5", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._assert_no_grad": [[8, 11], ["None"], "function", ["None"], ["def", "_assert_no_grad", "(", "variable", ")", ":", "\n", "    ", "assert", "not", "variable", ".", "requires_grad", ",", "\"nn criterions don't compute the gradient w.r.t. targets - please \"", "\"mark these variables as volatile or not requiring gradients\"", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss._process_zero_value": [[25, 32], ["torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.autograd.Variable().cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "tensor.size", "tensor.data.cpu"], "function", ["None"], ["", "", "def", "_process_zero_value", "(", "tensor", ")", ":", "\n", "    ", "if", "(", "tensor", "==", "0", ")", ".", "sum", "(", ")", "!=", "0", ":", "\n", "        ", "eps", "=", "torch", ".", "FloatTensor", "(", "tensor", ".", "size", "(", ")", ")", ".", "fill_", "(", "0", ")", "\n", "eps", "[", "tensor", ".", "data", ".", "cpu", "(", ")", "==", "0", "]", "=", "1e-6", "\n", "eps", "=", "Variable", "(", "eps", ")", ".", "cuda", "(", ")", "\n", "tensor", "=", "tensor", "+", "eps", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss.guassian_kernel": [[102, 134], ["torch.cat", "torch.cat", "torch.cat", "int", "int", "F.normalize.unsqueeze().expand", "F.normalize.unsqueeze().expand", "int", "int", "int", "int", "int", "int", "torch.exp", "torch.exp", "torch.exp", "sum", "len", "torch.mm", "torch.mm", "torch.mm", "source.size", "target.size", "F.normalize.unsqueeze", "F.normalize.size", "F.normalize.size", "F.normalize.size", "F.normalize.unsqueeze", "F.normalize.size", "F.normalize.size", "F.normalize.size", "torch.sum", "torch.sum", "torch.sum", "range", "torch.transpose", "torch.transpose", "torch.transpose", "torch.exp", "torch.exp", "torch.exp", "sum", "len", "torch.normalize", "torch.mm", "torch.mm", "torch.mm", "torch.sum", "torch.sum", "torch.sum", "range", "torch.transpose", "torch.transpose", "torch.transpose"], "function", ["None"], ["", "", "def", "guassian_kernel", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ",", "kernel_type", "=", "'gau'", ")", ":", "\n", "\n", "    ", "n_samples", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "+", "int", "(", "target", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "total", "=", "torch", ".", "cat", "(", "[", "source", ",", "target", "]", ",", "dim", "=", "0", ")", "\n", "if", "kernel_type", "==", "'gau'", ":", "\n", "        ", "total0", "=", "total", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "total1", "=", "total", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "0", ")", ")", ",", "int", "(", "total", ".", "size", "(", "1", ")", ")", ")", "\n", "L2_distance", "=", "(", "(", "total0", "-", "total1", ")", "**", "2", ")", ".", "sum", "(", "2", ")", "#### distance", "\n", "if", "fix_sigma", ":", "\n", "            ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "            ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "-", "L2_distance", "/", "bandwidth_temp", ")", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "#### similarity", "\n", "return", "sum", "(", "kernel_val", ")", "/", "len", "(", "kernel_val", ")", "\n", "", "elif", "kernel_type", "==", "'linear'", ":", "#### not converge", "\n", "        ", "L2_distance", "=", "torch", ".", "mm", "(", "total", ",", "torch", ".", "transpose", "(", "total", ",", "0", ",", "1", ")", ")", "\n", "if", "fix_sigma", ":", "\n", "            ", "bandwidth", "=", "fix_sigma", "\n", "", "else", ":", "\n", "            ", "bandwidth", "=", "torch", ".", "sum", "(", "L2_distance", ".", "data", ")", "/", "(", "n_samples", "**", "2", "-", "n_samples", ")", "\n", "", "bandwidth", "/=", "kernel_mul", "**", "(", "kernel_num", "//", "2", ")", "\n", "bandwidth_list", "=", "[", "bandwidth", "*", "(", "kernel_mul", "**", "i", ")", "for", "i", "in", "range", "(", "kernel_num", ")", "]", "\n", "kernel_val", "=", "[", "torch", ".", "exp", "(", "L2_distance", "/", "bandwidth_temp", ")", "for", "bandwidth_temp", "in", "bandwidth_list", "]", "#### similarity", "\n", "return", "sum", "(", "kernel_val", ")", "/", "len", "(", "kernel_val", ")", "\n", "\n", "", "elif", "kernel_type", "==", "'cosine'", ":", "\n", "        ", "total", "=", "F", ".", "normalize", "(", "total", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "return", "torch", ".", "mm", "(", "total", ",", "torch", ".", "transpose", "(", "total", ",", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss.MMD": [[139, 215], ["time.time", "int", "DomainConfusionLoss.guassian_kernel", "print", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "print", "range", "range", "print", "loss_intra[].mean", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "print", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "[].mean", "[].mean", "source.size", "range", "range", "range", "time.time", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "time.time", "time.time", "torch.zeros().cuda.diag", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "time.time", "torch.eye", "torch.eye", "torch.eye"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.DomainConfusionLoss.guassian_kernel"], ["", "", "def", "MMD", "(", "source", ",", "target", ",", "kernel_mul", "=", "2.0", ",", "kernel_num", "=", "5", ",", "fix_sigma", "=", "None", ",", "source_label", "=", "None", ",", "target_label", "=", "None", ",", "intra_only", "=", "True", ",", "number_cate", "=", "31", ",", "kernel_type", "=", "'gau'", ")", ":", "\n", "    ", "begin", "=", "time", ".", "time", "(", ")", "\n", "batch_size", "=", "int", "(", "source", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "kernels", "=", "guassian_kernel", "(", "source", ",", "target", ",", "##################### instance level similarity", "\n", "kernel_mul", "=", "kernel_mul", ",", "kernel_num", "=", "kernel_num", ",", "fix_sigma", "=", "fix_sigma", ",", "kernel_type", "=", "kernel_type", ")", "\n", "if", "intra_only", ":", "\n", "        ", "print", "(", "time", ".", "time", "(", ")", "-", "begin", ")", "\n", "S_value", "=", "torch", ".", "zeros", "(", "number_cate", ")", ".", "cuda", "(", ")", "\n", "S_count", "=", "torch", ".", "zeros", "(", "number_cate", ")", ".", "cuda", "(", ")", "\n", "T_value", "=", "torch", ".", "zeros", "(", "number_cate", ")", ".", "cuda", "(", ")", "\n", "T_count", "=", "torch", ".", "zeros", "(", "number_cate", ")", ".", "cuda", "(", ")", "\n", "ST_value", "=", "torch", ".", "zeros", "(", "number_cate", ",", "number_cate", ")", ".", "cuda", "(", ")", "\n", "ST_count", "=", "torch", ".", "zeros", "(", "number_cate", ",", "number_cate", ")", ".", "cuda", "(", ")", "\n", "print", "(", "time", ".", "time", "(", ")", "-", "begin", ")", "\n", "######################################### for source data", "\n", "for", "i_index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "for", "j_index", "in", "range", "(", "batch_size", ")", ":", "########### what's the influence of self-similarity.", "\n", "                ", "if", "source_label", "[", "i_index", "]", "==", "source_label", "[", "j_index", "]", ":", "\n", "                    ", "S_value", "[", "source_label", "[", "i_index", "]", "]", "+=", "kernels", "[", "i_index", ",", "j_index", "]", "\n", "S_count", "[", "source_label", "[", "i_index", "]", "]", "+=", "1", "\n", "", "if", "target_label", "[", "i_index", "]", "==", "target_label", "[", "j_index", "]", ":", "\n", "                    ", "T_value", "[", "target_label", "[", "i_index", "]", "]", "+=", "kernels", "[", "i_index", "+", "batch_size", ",", "j_index", "+", "batch_size", "]", "\n", "T_count", "[", "target_label", "[", "i_index", "]", "]", "+=", "1", "\n", "\n", "######################################### for source and target data", "\n", "", "", "", "for", "i_index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "for", "j_index", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "ST_value", "[", "source_label", "[", "i_index", "]", ",", "target_label", "[", "j_index", "]", "]", "+=", "kernels", "[", "i_index", ",", "j_index", "+", "batch_size", "]", "\n", "ST_count", "[", "source_label", "[", "i_index", "]", ",", "target_label", "[", "j_index", "]", "]", "+=", "1", "\n", "\n", "", "", "S_count", "[", "S_count", "==", "0", "]", "=", "1", "\n", "S_value", "=", "S_value", "/", "S_count", "\n", "T_count", "[", "T_count", "==", "0", "]", "=", "1", "\n", "T_value", "=", "T_value", "/", "T_count", "\n", "ST_count", "[", "ST_count", "==", "0", "]", "=", "1", "\n", "ST_value", "=", "ST_value", "/", "ST_count", "\n", "print", "(", "time", ".", "time", "(", ")", "-", "begin", ")", "\n", "# ######################################### for target data", "\n", "# for i_index in range(batch_size):", "\n", "#     for j_index in range(batch_size):", "\n", "#         T_value[target_label[i_index], target_label[j_index]] += kernels[i_index + batch_size, j_index + batch_size]", "\n", "#         T_count[target_label[i_index], target_label[j_index]] += 1", "\n", "# T_count[T_count ==0] = 1", "\n", "# T_value = T_value / T_count", "\n", "# print(time.time() - begin)", "\n", "#", "\n", "# ######################################### for source and target data", "\n", "# for i_index in range(batch_size):", "\n", "#     for j_index in range(batch_size):", "\n", "#         ST_value[source_label[i_index], target_label[j_index]] += kernels[i_index, j_index + batch_size]", "\n", "#         ST_count[source_label[i_index], target_label[j_index]] += 1", "\n", "# ST_count[ST_count == 0] = 1", "\n", "# ST_value = ST_value / ST_count", "\n", "# print(time.time() - begin)", "\n", "\n", "loss_intra", "=", "(", "S_value", "+", "T_value", "-", "ST_value", ".", "diag", "(", ")", "*", "2", ")", "\n", "loss_intra", "=", "loss_intra", "[", "loss_intra", "!=", "0", "]", ".", "mean", "(", ")", "\n", "return", "loss_intra", "\n", "# loss_intra = (value * eye_index)[torch.gt(value * eye_index, 0)].mean()  ###### whether need to consider the bad condition, e.g., value[i,i] < 0", "\n", "# loss_inter = (-value * (1-eye_index))[torch.gt(-value * (1-eye_index), 0)].mean()   ##### many elements don't satisfy the constrain", "\n", "\n", "\n", "", "else", ":", "\n", "        ", "ST_value", "=", "torch", ".", "zeros", "(", "number_cate", ",", "number_cate", ")", ".", "cuda", "(", ")", "\n", "ST_count", "=", "torch", ".", "zeros", "(", "number_cate", ",", "number_cate", ")", ".", "cuda", "(", ")", "\n", "for", "i_index", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "for", "j_index", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "ST_value", "[", "source_label", "[", "i_index", "]", ",", "target_label", "[", "j_index", "]", "]", "+=", "kernels", "[", "i_index", ",", "j_index", "+", "batch_size", "]", "\n", "ST_count", "[", "source_label", "[", "i_index", "]", ",", "target_label", "[", "j_index", "]", "]", "+=", "1", "\n", "", "", "ST_count", "[", "ST_count", "==", "0", "]", "=", "1", "\n", "ST_value", "=", "ST_value", "/", "ST_count", "\n", "print", "(", "time", ".", "time", "(", ")", "-", "begin", ")", "\n", "eye_index", "=", "torch", ".", "eye", "(", "number_cate", ")", ".", "cuda", "(", ")", "\n", "ST_value_intra", "=", "(", "(", "ST_value", "*", "eye_index", ")", "[", "(", "ST_value", "*", "eye_index", ")", "!=", "0", "]", ")", ".", "mean", "(", ")", "\n", "ST_value_inter", "=", "(", "(", "ST_value", "*", "(", "1", "-", "eye_index", ")", ")", "[", "(", "ST_value", "*", "(", "1", "-", "eye_index", ")", ")", "!=", "0", "]", ")", ".", "mean", "(", ")", "\n", "return", "-", "ST_value_intra", "+", "ST_value_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.BasicBlock.__init__": [[30, 39], ["torch.Module.__init__", "resnet_dsbn.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_dsbn.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.conv3x3", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.BasicBlock.forward": [[40, 57], ["resnet_dsbn.BasicBlock.conv1", "resnet_dsbn.BasicBlock.bn1", "resnet_dsbn.BasicBlock.relu", "resnet_dsbn.BasicBlock.conv2", "resnet_dsbn.BasicBlock.bn2", "resnet_dsbn.BasicBlock.relu", "resnet_dsbn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.Bottleneck.__init__": [[62, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "bn1_temp", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "bn2_temp", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "bn3_temp", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.Bottleneck.forward": [[78, 111], ["resnet_dsbn.Bottleneck.conv1", "resnet_dsbn.Bottleneck.relu", "resnet_dsbn.Bottleneck.conv2", "resnet_dsbn.Bottleneck.relu", "resnet_dsbn.Bottleneck.conv3", "resnet_dsbn.Bottleneck.relu", "resnet_dsbn.Bottleneck.bn1", "resnet_dsbn.Bottleneck.bn1_temp", "resnet_dsbn.Bottleneck.bn2", "resnet_dsbn.Bottleneck.bn2_temp", "resnet_dsbn.Bottleneck.bn3", "resnet_dsbn.Bottleneck.bn3_temp", "resnet_dsbn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", ",", "ST", "=", "inp", "[", "0", "]", ",", "inp", "[", "1", "]", "\n", "\n", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "ST", "==", "'S'", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "bn1_temp", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "ST", "==", "'S'", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "bn2_temp", "(", "out", ")", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "if", "ST", "==", "'S'", ":", "\n", "            ", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "bn3_temp", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ",", "ST", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "################################", "\n", "\n", "return", "{", "0", ":", "out", ",", "1", ":", "ST", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.DownSample.__init__": [[113, 119], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "DownSample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "downconv", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "downbn", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downbn_temp", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.DownSample.forward": [[120, 128], ["resnet_dsbn.DownSample.downconv", "resnet_dsbn.DownSample.downbn", "resnet_dsbn.DownSample.downbn_temp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "ST", ")", ":", "\n", "        ", "x", "=", "self", ".", "downconv", "(", "x", ")", "\n", "if", "ST", "==", "'S'", ":", "\n", "            ", "out", "=", "self", ".", "downbn", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "downbn_temp", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet.__init__": [[132, 155], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_dsbn.ResNet._make_layer", "resnet_dsbn.ResNet._make_layer", "resnet_dsbn.ResNet._make_layer", "resnet_dsbn.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_dsbn.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn1_temp", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet._make_layer": [[156, 173], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_dsbn.DownSample", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "DownSample", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "# downsample = nn.Sequential(", "\n", "#     nn.Conv2d(self.inplanes, planes * block.expansion,", "\n", "#               kernel_size=1, stride=stride, bias=False),", "\n", "#     nn.BatchNorm2d(planes * block.expansion),", "\n", "# )", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.ResNet.forward": [[174, 194], ["resnet_dsbn.ResNet.conv1", "resnet_dsbn.ResNet.relu", "resnet_dsbn.ResNet.maxpool", "resnet_dsbn.ResNet.layer1", "resnet_dsbn.ResNet.layer2", "resnet_dsbn.ResNet.layer3", "resnet_dsbn.ResNet.layer4", "resnet_dsbn.ResNet.avgpool", "resnet_dsbn.ResNet.view", "resnet_dsbn.ResNet.fc", "resnet_dsbn.ResNet.bn1", "resnet_dsbn.ResNet.bn1_temp", "resnet_dsbn.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "ST", "=", "'S'", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "ST", "==", "'S'", ":", "\n", "            ", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn1_temp", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "{", "0", ":", "x", ",", "1", ":", "ST", "}", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", "[", "0", "]", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "##################################### feature s stream , out s stream, feature t stream, out t stream.", "\n", "return", "x", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet18": [[196, 210], ["resnet_dsbn.ResNet", "torch.Linear", "ResNet.fc.weight.data.normal_", "ResNet.fc.bias.data.normal_", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "# modify the structure of the model.", "\n", "", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", ")", "\n", "model", ".", "fc", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "model", ".", "fc", ".", "bias", ".", "data", ".", "normal_", "(", "0", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet34": [[212, 226], ["resnet_dsbn.ResNet", "torch.Linear", "print", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "print", "(", "'Load ImageNet pre-trained resnet model'", ")", "\n", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "# modify the structure of the model.", "\n", "", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet50": [[228, 323], ["resnet_dsbn.ResNet", "print", "torch.Linear", "ResNet.state_dict", "model.state_dict.items", "ResNet.load_state_dict", "print", "torch.load_url", "ResNet.state_dict", "model.state_dict.items", "ResNet.load_state_dict", "torch.Linear", "torch.load", "torch.load", "torch.load", "k.replace", "pretrained_dict.items", "model_zoo.load_url.keys", "model_zoo.load_url.keys", "k.find", "print", "k.find", "print", "k.find", "k.replace", "k.find", "k.replace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "ipdb.set_trace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "ipdb.set_trace", "model_zoo.load_url.keys", "ipdb.set_trace", "model_zoo.load_url.keys", "ipdb.set_trace"], "function", ["None"], ["", "def", "resnet50", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "if", "args", ".", "pretrained_checkpoint", ":", "\n", "# modify the structure of the model.", "\n", "            ", "print", "(", "'load the source data pretrained model from: '", ",", "args", ".", "pretrained_checkpoint", ")", "\n", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", "*", "2", ")", "\n", "init_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict", "=", "torch", ".", "load", "(", "args", ".", "pretrained_checkpoint", ")", "[", "'state_dict'", "]", "\n", "pretrained_dict_temp", "=", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict", ".", "items", "(", ")", "}", "\n", "for", "k", ",", "v", "in", "init_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "############## the key exist in the dictionary", "\n", "                    ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "k", "]", "\n", "", "else", ":", "############## the resuired key not exist in the dict", "\n", "                    ", "if", "k", ".", "find", "(", "'num_batches_tracked'", ")", "!=", "-", "1", ":", "######### skip", "\n", "                        ", "print", "(", "\n", "k", ")", "##################################### all the parameters are updated using the pretrained para, except the printed ones.", "\n", "", "elif", "k", ".", "find", "(", "'downsample.downconv'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downconv'", ",", "'downsample.0'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'downsample.downbn_temp'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downbn_temp'", ",", "'downsample.1'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'downsample.downbn'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downbn'", ",", "'downsample.1'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'temp'", ")", "!=", "-", "1", ":", "######### copy the pretrained bn", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'_temp'", ",", "''", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "else", ":", "\n", "                        ", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "\n", "# pretrained_dict.pop('fc.weight')", "\n", "# pretrained_dict.pop('fc.bias')", "\n", "# init_dict.update(pretrained_dict_temp)", "\n", "", "", "", "model", ".", "load_state_dict", "(", "init_dict", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'load the imagenet pretrained model'", ")", "\n", "pretrained_dict_temp", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "init_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "init_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "############## the key exist in the dictionary", "\n", "                    ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "k", "]", "\n", "", "else", ":", "############## the resuired key not exist in the dict", "\n", "                    ", "if", "k", ".", "find", "(", "'num_batches_tracked'", ")", "!=", "-", "1", ":", "######### skip", "\n", "                        ", "print", "(", "k", ")", "##################################### all the parameters are updated using the pretrained para, except the printed ones.", "\n", "", "elif", "k", ".", "find", "(", "'downsample.downconv'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downconv'", ",", "'downsample.0'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'downsample.downbn_temp'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downbn_temp'", ",", "'downsample.1'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'downsample.downbn'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downbn'", ",", "'downsample.1'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'temp'", ")", "!=", "-", "1", ":", "######### copy the pretrained bn", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'_temp'", ",", "''", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "else", ":", "\n", "                        ", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", "", "", "model", ".", "load_state_dict", "(", "init_dict", ")", "################# load this directly to confirm all the keys are updated", "\n", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", "*", "2", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet101": [[325, 385], ["resnet_dsbn.ResNet", "print", "torch.Linear", "ResNet.state_dict", "pretrained_dict.pop", "pretrained_dict.pop", "model.state_dict.update", "ResNet.load_state_dict", "print", "torch.load_url", "ResNet.state_dict", "model.state_dict.items", "ResNet.load_state_dict", "torch.Linear", "torch.load", "torch.load", "torch.load", "k.replace", "model_zoo.load_url.items", "model_zoo.load_url.keys", "k.find", "print", "k.find", "k.replace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "model_zoo.load_url.keys", "ipdb.set_trace", "k.find", "k.replace", "ipdb.set_trace", "model_zoo.load_url.keys", "ipdb.set_trace"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.None.trainer.AverageMeter.update"], ["", "def", "resnet101", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "if", "args", ".", "pretrained_checkpoint", ":", "\n", "# modify the structure of the model.", "\n", "            ", "print", "(", "'load the source data pretrained model from: '", ",", "args", ".", "pretrained_checkpoint", ")", "\n", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", "*", "2", ")", "\n", "init_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrained_dict_temp", "=", "torch", ".", "load", "(", "args", ".", "pretrained_checkpoint", ")", "[", "'state_dict'", "]", "\n", "pretrained_dict", "=", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "pretrained_dict_temp", ".", "items", "(", ")", "}", "\n", "pretrained_dict", ".", "pop", "(", "'fc.weight'", ")", "\n", "pretrained_dict", ".", "pop", "(", "'fc.bias'", ")", "\n", "init_dict", ".", "update", "(", "pretrained_dict", ")", "\n", "model", ".", "load_state_dict", "(", "init_dict", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'load the imagenet pretrained model'", ")", "\n", "pretrained_dict_temp", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "init_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "init_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "############## the key exist in the dictionary", "\n", "                    ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "k", "]", "\n", "", "else", ":", "############## the resuired key not exist in the dict", "\n", "                    ", "if", "k", ".", "find", "(", "'num_batches_tracked'", ")", "!=", "-", "1", ":", "######### skip", "\n", "                        ", "print", "(", "k", ")", "##################################### all the parameters are updated using the pretrained para, except the printed ones.", "\n", "", "elif", "k", ".", "find", "(", "'downsample.downconv'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downconv'", ",", "'downsample.0'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'downsample.downbn_temp'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downbn_temp'", ",", "'downsample.1'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'downsample.downbn'", ")", "!=", "-", "1", ":", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'downsample.downbn'", ",", "'downsample.1'", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "elif", "k", ".", "find", "(", "'temp'", ")", "!=", "-", "1", ":", "######### copy the pretrained bn", "\n", "                        ", "pretrained_key", "=", "k", ".", "replace", "(", "'_temp'", ",", "''", ")", "\n", "if", "pretrained_key", "in", "pretrained_dict_temp", ".", "keys", "(", ")", ":", "\n", "                            ", "init_dict", "[", "k", "]", "=", "pretrained_dict_temp", "[", "pretrained_key", "]", "\n", "", "else", ":", "\n", "                            ", "ipdb", ".", "set_trace", "(", ")", "\n", "", "", "else", ":", "\n", "                        ", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "", "", "", "model", ".", "load_state_dict", "(", "init_dict", ")", "################# load this directly to confirm all the keys are updated", "\n", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", "*", "2", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet152": [[386, 399], ["resnet_dsbn.ResNet", "torch.Linear", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "args", ".", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "# modify the structure of the model.", "\n", "", "num_of_feature_map", "=", "model", ".", "fc", ".", "in_features", "\n", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_of_feature_map", ",", "args", ".", "num_classes", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet": [[401, 415], ["print", "resnet_dsbn.resnet18", "resnet_dsbn.resnet34", "resnet_dsbn.resnet50", "resnet_dsbn.resnet101", "resnet_dsbn.resnet152", "ValueError"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet18", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet34", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet50", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet101", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.models.resnet_dsbn.resnet152"], ["", "def", "resnet", "(", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "\"==> creating model '{}' \"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "arch", "==", "'resnet18'", ":", "\n", "        ", "return", "resnet18", "(", "args", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet34'", ":", "\n", "        ", "return", "resnet34", "(", "args", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet50'", ":", "\n", "        ", "return", "resnet50", "(", "args", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet101'", ":", "\n", "        ", "return", "resnet101", "(", "args", ")", "\n", "", "elif", "args", ".", "arch", "==", "'resnet152'", ":", "\n", "        ", "return", "resnet152", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unrecognized model architecture'", ",", "args", ".", "arch", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_sampler.Sampler.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_sampler.Sampler.__iter__": [[9, 11], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_sampler.Sampler.__len__": [[12, 14], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_sampler.UniformBatchSampler.__init__": [[16, 24], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "per_category", ",", "category_index_list", ",", "imgs", ",", "select_category", ")", ":", "\n", "\n", "        ", "self", ".", "per_category", "=", "per_category", "\n", "self", ".", "category_index_list", "=", "category_index_list", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "batch_size", "=", "per_category", "*", "len", "(", "select_category", ")", "\n", "self", ".", "select_category", "=", "select_category", "\n", "self", ".", "batch_num", "=", "10000", "### this kind of loop not end  ###len(self.imgs) // self.batch_size", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_sampler.UniformBatchSampler.__iter__": [[24, 31], ["range", "range", "random.shuffle", "len", "random.sample"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "bat", "in", "range", "(", "self", ".", "batch_num", ")", ":", "\n", "            ", "batch", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "select_category", ")", ")", ":", "##################### category_index_list[i] set to empty when this category is dropped", "\n", "                ", "batch", "=", "batch", "+", "random", ".", "sample", "(", "self", ".", "category_index_list", "[", "self", ".", "select_category", "[", "i", "]", "]", ",", "self", ".", "per_category", ")", "\n", "", "random", ".", "shuffle", "(", "batch", ")", "\n", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_sampler.UniformBatchSampler.__len__": [[40, 42], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "batch_num", "\n", "# else:", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data.make_weights_for_balanced_classes": [[13, 26], ["float", "range", "enumerate", "sum", "len", "float"], "function", ["None"], ["def", "make_weights_for_balanced_classes", "(", "images", ",", "nclasses", ")", ":", "\n", "    ", "count", "=", "[", "0", "]", "*", "nclasses", "\n", "for", "item", "in", "images", ":", "\n", "        ", "count", "[", "item", "[", "1", "]", "]", "+=", "1", "\n", "", "weight_per_class", "=", "[", "0.", "]", "*", "nclasses", "\n", "N", "=", "float", "(", "sum", "(", "count", ")", ")", "\n", "for", "i", "in", "range", "(", "nclasses", ")", ":", "\n", "        ", "weight_per_class", "[", "i", "]", "=", "N", "/", "float", "(", "count", "[", "i", "]", ")", "\n", "", "weight", "=", "[", "0", "]", "*", "len", "(", "images", ")", "\n", "# weight_per_class[-1] = weight_per_class[-1]  ########### adjust the cate-weight for unknown category.", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "images", ")", ":", "\n", "        ", "weight", "[", "idx", "]", "=", "weight_per_class", "[", "val", "[", "1", "]", "]", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data._random_affine_augmentation": [[27, 34], ["numpy.float32", "cv2.warpAffine", "numpy.transpose", "torch.from_numpy", "numpy.transpose", "x.numpy", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal", "numpy.random.normal"], "function", ["None"], ["", "def", "_random_affine_augmentation", "(", "x", ")", ":", "\n", "    ", "M", "=", "np", ".", "float32", "(", "[", "[", "1", "+", "np", ".", "random", ".", "normal", "(", "0.0", ",", "0.1", ")", ",", "np", ".", "random", ".", "normal", "(", "0.0", ",", "0.1", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "random", ".", "normal", "(", "0.0", ",", "0.1", ")", ",", "1", "+", "np", ".", "random", ".", "normal", "(", "0.0", ",", "0.1", ")", ",", "0", "]", "]", ")", "\n", "rows", ",", "cols", "=", "x", ".", "shape", "[", "1", ":", "3", "]", "\n", "dst", "=", "cv2", ".", "warpAffine", "(", "np", ".", "transpose", "(", "x", ".", "numpy", "(", ")", ",", "[", "1", ",", "2", ",", "0", "]", ")", ",", "M", ",", "(", "cols", ",", "rows", ")", ")", "\n", "dst", "=", "np", ".", "transpose", "(", "dst", ",", "[", "2", ",", "0", ",", "1", "]", ")", "\n", "return", "torch", ".", "from_numpy", "(", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data._gaussian_blur": [[36, 40], ["cv2.GaussianBlur", "torch.from_numpy", "x.numpy", "int"], "function", ["None"], ["", "def", "_gaussian_blur", "(", "x", ",", "sigma", "=", "0.1", ")", ":", "\n", "    ", "ksize", "=", "int", "(", "sigma", "+", "0.5", ")", "*", "8", "+", "1", "\n", "dst", "=", "cv2", ".", "GaussianBlur", "(", "x", ".", "numpy", "(", ")", ",", "(", "ksize", ",", "ksize", ")", ",", "sigma", ")", "\n", "return", "torch", ".", "from_numpy", "(", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data.generate_dataloader": [[43, 283], ["os.path.join", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.Normalize", "torchvision.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.isdir", "ValueError", "data.Uniform_folder.ImageFolder_uniform", "data.folder_new.ImageFolder_new", "data.Uniform_folder.ImageFolder_uniform", "data.Uniform_folder.ImageFolder_uniform", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Compose", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Compose", "torchvision.Compose", "data.folder_new.ImageFolder_new", "torchvision.Compose", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Compose", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Compose", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Compose", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Compose", "torchvision.Compose", "data.folder_new.ImageFolder_new", "torchvision.Compose", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Compose", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Compose", "data.Uniform_folder.ImageFolder_uniform", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Compose", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Compose", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Resize", "torchvision.ToTensor", "prepare_data._random_affine_augmentation", "prepare_data._gaussian_blur", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Lambda", "torchvision.Lambda", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Resize", "torchvision.ToTensor", "prepare_data._random_affine_augmentation", "prepare_data._gaussian_blur", "prepare_data._random_affine_augmentation", "prepare_data._gaussian_blur"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data._random_affine_augmentation", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data._gaussian_blur", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data._random_affine_augmentation", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data._gaussian_blur", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data._random_affine_augmentation", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.prepare_data._gaussian_blur"], ["", "def", "generate_dataloader", "(", "args", ")", ":", "\n", "# Data loading code", "\n", "    ", "traindir_source", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path_source", ",", "args", ".", "src", ")", "\n", "traindir_target", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path_source_t", ",", "args", ".", "src_t", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path_target", ",", "args", ".", "tar", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "traindir_source", ")", ":", "\n", "# split_train_test_images(args.data_path)", "\n", "        ", "raise", "ValueError", "(", "'Null path of source train data!!!'", ")", "\n", "\n", "# normalize_s = transforms.Normalize(mean=[0.9094, 0.9077, 0.9047],", "\n", "#                                  std=[0.1977, 0.2013, 0.2081])", "\n", "\n", "# normalize_s = transforms.Normalize(mean=[0.459, 0.459, 0.459],    ############# should be all the same ...", "\n", "#                                    std=[0.226, 0.226, 0.226])", "\n", "\n", "", "normalize_s", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "normalize_gray", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.459", ",", "0.459", ",", "0.459", "]", ",", "############# should be all the same ...", "\n", "std", "=", "[", "0.226", ",", "0.226", ",", "0.226", "]", ")", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "#################### random sampled source and target dataset for cross-entropy training", "\n", "if", "args", ".", "img_process_s", "==", "'ours'", ":", "\n", "        ", "source_train_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_source", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "", "elif", "args", ".", "img_process_s", "==", "'longs'", ":", "\n", "####################### below is long's preprocess", "\n", "        ", "source_train_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_source", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "", "elif", "args", ".", "img_process_s", "==", "'simple'", ":", "\n", "        ", "source_train_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_source", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "", "source_train_loader_ce", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "source_train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "# uniformbatchsampler = UniformBatchSampler(args.per_category, source_train_dataset.category_index_list,", "\n", "#                                           source_train_dataset.imgs)   ##### select images in the iteration process", "\n", "# source_train_loader_cas = torch.utils.data.DataLoader(", "\n", "#     source_train_dataset, num_workers=args.workers, pin_memory=True, batch_sampler=uniformbatchsampler", "\n", "# )", "\n", "\n", "\n", "if", "args", ".", "img_process_t", "==", "'ours'", ":", "\n", "        ", "target_train_dataset_ce", "=", "ImageFolder_new", "(", "\n", "traindir_target", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "_random_affine_augmentation", "(", "x", ")", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "_gaussian_blur", "(", "x", ")", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "", "elif", "args", ".", "img_process_t", "==", "'longs'", ":", "\n", "####################### long's preprocess", "\n", "        ", "target_train_dataset_ce", "=", "ImageFolder_new", "(", "\n", "traindir_target", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "_random_affine_augmentation", "(", "x", ")", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "_gaussian_blur", "(", "x", ")", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "", "elif", "args", ".", "img_process_t", "==", "'simple'", ":", "\n", "        ", "target_train_dataset_ce", "=", "ImageFolder_new", "(", "\n", "traindir_target", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "_random_affine_augmentation", "(", "x", ")", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "_gaussian_blur", "(", "x", ")", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "", "target_train_loader_ce", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "target_train_dataset_ce", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "drop_last", "=", "True", ",", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "if", "args", ".", "img_process_s", "==", "'ours'", ":", "\n", "        ", "target_train_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_target", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "", "elif", "args", ".", "img_process_s", "==", "'longs'", ":", "\n", "####################### long's preprocess", "\n", "        ", "target_train_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_target", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "", "elif", "args", ".", "img_process_s", "==", "'simple'", ":", "\n", "        ", "target_train_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_target", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "\n", "\n", "", "if", "args", ".", "img_process_s", "==", "'ours'", ":", "\n", "        ", "source_val_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_source", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "", "elif", "args", ".", "img_process_s", "==", "'longs'", ":", "\n", "        ", "source_val_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_source", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "", "elif", "args", ".", "img_process_s", "==", "'simple'", ":", "\n", "        ", "source_val_dataset", "=", "ImageFolder_uniform", "(", "\n", "traindir_source", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize_s", ",", "\n", "]", ")", "\n", ")", "\n", "\n", "\n", "", "source_val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "source_val_dataset", ",", "batch_size", "=", "500", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "None", "\n", ")", "\n", "\n", "\n", "if", "args", ".", "img_process_t", "==", "'ours'", ":", "\n", "        ", "target_test_dataset", "=", "ImageFolder_uniform", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "", "elif", "args", ".", "img_process_t", "==", "'longs'", ":", "\n", "        ", "target_test_dataset", "=", "ImageFolder_uniform", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ",", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "", "elif", "args", ".", "img_process_t", "==", "'simple'", ":", "\n", "        ", "target_test_dataset", "=", "ImageFolder_uniform", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "", "target_val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "target_test_dataset", ",", "\n", "batch_size", "=", "500", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "\n", "return", "source_train_loader_ce", ",", "source_train_dataset", ",", "target_train_loader_ce", ",", "target_train_dataset", ",", "source_val_loader", ",", "target_val_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.ImageFolder_uniform.__init__": [[95, 123], ["Uniform_folder.find_classes", "range", "print", "Uniform_folder.make_dataset", "print", "len", "RuntimeError", "len", "range", "Uniform_folder.ImageFolder_uniform.category_index_list.append", "len", "list_temp.append"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.find_classes", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.make_dataset"], ["def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ",", "pre_imgs", "=", "None", ")", ":", "\n", "        ", "classes", ",", "class_to_idx", "=", "find_classes", "(", "root", ")", "\n", "if", "pre_imgs", "!=", "None", ":", "\n", "            ", "imgs", "=", "pre_imgs", "\n", "print", "(", "'adopt the pre_imgs in uniform data loader'", ")", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "make_dataset", "(", "root", ",", "class_to_idx", ")", "\n", "print", "(", "'adopt the ground truth imgs in uniform data loader'", ")", "\n", "", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "\n", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "self", ".", "category_index_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "classes", ")", ")", ":", "\n", "            ", "list_temp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "imgs", ")", ")", ":", "\n", "                ", "if", "i", "==", "imgs", "[", "j", "]", "[", "1", "]", ":", "\n", "                    ", "list_temp", ".", "append", "(", "j", ")", "############ only record the index of each image", "\n", "", "", "self", ".", "category_index_list", ".", "append", "(", "list_temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.ImageFolder_uniform.__getitem__": [[124, 139], ["Uniform_folder.ImageFolder_uniform.loader", "Uniform_folder.ImageFolder_uniform.transform", "Uniform_folder.ImageFolder_uniform.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.ImageFolder_uniform.__len__": [[140, 142], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.ImageFolder_uniform.__repr__": [[143, 152], ["Uniform_folder.ImageFolder_uniform.__len__", "Uniform_folder.ImageFolder_uniform.transform.__repr__().replace", "Uniform_folder.ImageFolder_uniform.target_transform.__repr__().replace", "Uniform_folder.ImageFolder_uniform.transform.__repr__", "Uniform_folder.ImageFolder_uniform.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__len__", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__repr__", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.is_image_file": [[14, 23], ["filename.lower", "any", "filename.lower.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an image.\n    Args:\n        filename (string): path to a file\n    Returns:\n        bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "filename_lower", "=", "filename", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.find_classes": [[25, 30], ["classes.sort", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "range", "os.path.join", "os.path.join", "len"], "function", ["None"], ["", "def", "find_classes", "(", "dir", ")", ":", "\n", "    ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.make_dataset": [[32, 48], ["os.path.expanduser", "os.path.expanduser", "sorted", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "sorted", "os.path.isdir", "os.path.isdir", "os.walk", "os.walk", "sorted", "Uniform_folder.is_image_file", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.is_image_file"], ["", "def", "make_dataset", "(", "dir", ",", "class_to_idx", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "for", "target", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "        ", "d", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "target", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "d", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "class_to_idx", "[", "target", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.pil_loader": [[50, 55], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["", "def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.accimage_loader": [[57, 64], ["accimage.Image", "Uniform_folder.pil_loader"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.Uniform_folder.default_loader": [[66, 72], ["get_image_backend", "Uniform_folder.accimage_loader", "Uniform_folder.pil_loader"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.accimage_loader", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__init__": [[95, 112], ["folder_new.find_classes", "folder_new.make_dataset", "len", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.find_classes", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.make_dataset"], ["def", "__init__", "(", "self", ",", "root", ",", "transform_student", "=", "None", ",", "transform_teacher", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "loader", "=", "default_loader", ")", ":", "\n", "        ", "classes", ",", "class_to_idx", "=", "find_classes", "(", "root", ")", "\n", "imgs", "=", "make_dataset", "(", "root", ",", "class_to_idx", ")", "\n", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "\n", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "class_to_idx", "=", "class_to_idx", "\n", "self", ".", "transform_student", "=", "transform_student", "\n", "self", ".", "transform_teacher", "=", "transform_teacher", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__getitem__": [[113, 130], ["folder_new.ImageFolder_new.loader", "folder_new.ImageFolder_new.transform_student", "folder_new.ImageFolder_new.transform_teacher", "folder_new.ImageFolder_new.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "imgs", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform_student", "is", "not", "None", ":", "\n", "            ", "img_studnet", "=", "self", ".", "transform_student", "(", "img", ")", "\n", "img_teacher", "=", "self", ".", "transform_teacher", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img_studnet", ",", "img_teacher", ",", "target", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__len__": [[131, 133], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__repr__": [[134, 143], ["folder_new.ImageFolder_new.__len__", "folder_new.ImageFolder_new.transform_student.__repr__().replace", "folder_new.ImageFolder_new.target_transform.__repr__().replace", "folder_new.ImageFolder_new.transform_student.__repr__", "folder_new.ImageFolder_new.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__len__", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__repr__", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.ImageFolder_new.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform_student", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.is_image_file": [[14, 23], ["filename.lower", "any", "filename.lower.endswith"], "function", ["None"], ["def", "is_image_file", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an image.\n    Args:\n        filename (string): path to a file\n    Returns:\n        bool: True if the filename ends with a known image extension\n    \"\"\"", "\n", "filename_lower", "=", "filename", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "IMG_EXTENSIONS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.find_classes": [[25, 30], ["classes.sort", "os.listdir", "os.listdir", "os.path.isdir", "os.path.isdir", "range", "os.path.join", "os.path.join", "len"], "function", ["None"], ["", "def", "find_classes", "(", "dir", ")", ":", "\n", "    ", "classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "d", ")", ")", "]", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.make_dataset": [[32, 48], ["os.path.expanduser", "os.path.expanduser", "sorted", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "sorted", "os.path.isdir", "os.path.isdir", "os.walk", "os.walk", "sorted", "folder_new.is_image_file", "os.path.join", "os.path.join", "images.append"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.is_image_file"], ["", "def", "make_dataset", "(", "dir", ",", "class_to_idx", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "for", "target", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", ":", "\n", "        ", "d", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "target", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "d", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "if", "is_image_file", "(", "fname", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "class_to_idx", "[", "target", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.pil_loader": [[50, 55], ["open", "PIL.Image.open", "Image.open.convert"], "function", ["None"], ["", "def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "f", ")", "\n", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.accimage_loader": [[57, 64], ["accimage.Image", "folder_new.pil_loader"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.pil_loader"], ["", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "import", "accimage", "\n", "try", ":", "\n", "        ", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.default_loader": [[66, 72], ["get_image_backend", "folder_new.accimage_loader", "folder_new.pil_loader"], "function", ["home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.accimage_loader", "home.repos.pwc.inspect_result.YBZh_Label-Propagation-with-Augmented-Anchors.data.folder_new.pil_loader"], ["", "", "def", "default_loader", "(", "path", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]]}