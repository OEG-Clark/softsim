{"home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.test_smcIntegrator.experiment": [[56, 68], ["datetime.datetime.now", "integ", "datetime.datetime.now", "wandb.log"], "function", ["None"], ["", "def", "experiment", "(", "problem", ",", "integ", ")", ":", "\n", "    ", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "I_hat", "=", "integ", "(", "problem", ")", "\n", "end_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "d", "=", "{", "}", "\n", "d", "[", "'D'", "]", "=", "problem", ".", "D", "\n", "d", "[", "'N'", "]", "=", "args", ".", "N", "\n", "d", "[", "'pcntError'", "]", "=", "100", "*", "(", "I_hat", "-", "problem", ".", "answer", ")", "/", "problem", ".", "answer", "\n", "d", "[", "'time'", "]", "=", "(", "end_time", "-", "start_time", ")", ".", "total_seconds", "(", ")", "\n", "\n", "wandb", ".", "log", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.test_vegasIntegrator.experiment": [[57, 69], ["datetime.datetime.now", "integ", "datetime.datetime.now", "wandb.log"], "function", ["None"], ["", "def", "experiment", "(", "problem", ",", "integ", ")", ":", "\n", "    ", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "I_hat", "=", "integ", "(", "problem", ")", "\n", "end_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "d", "=", "{", "}", "\n", "d", "[", "'D'", "]", "=", "problem", ".", "D", "\n", "d", "[", "'N'", "]", "=", "args", ".", "N", "*", "args", ".", "NITN", "\n", "d", "[", "'pcntError'", "]", "=", "100", "*", "(", "I_hat", "-", "problem", ".", "answer", ")", "/", "problem", ".", "answer", "\n", "d", "[", "'time'", "]", "=", "(", "end_time", "-", "start_time", ")", ".", "total_seconds", "(", ")", "\n", "\n", "wandb", ".", "log", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.helper_runOnMultipleCores.f": [[43, 54], ["len", "subprocess.run", "subprocess.run", "print", "print", "print", "subprocess.run.stderr.decode", "args.args_string.split"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split"], ["def", "f", "(", "run_number", ")", ":", "\n", "    ", "if", "len", "(", "args", ".", "args_string", ")", ">", "0", ":", "\n", "        ", "result", "=", "subprocess", ".", "run", "(", "[", "'python3'", ",", "args", ".", "target", ",", "'--key'", ",", "args", ".", "key", ",", "*", "args", ".", "args_string", ".", "split", "(", "' '", ")", "]", ",", "capture_output", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "result", "=", "subprocess", ".", "run", "(", "[", "'python3'", ",", "args", ".", "target", ",", "'--key'", ",", "args", ".", "key", "]", ",", "capture_output", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "verbose", ":", "\n", "        ", "print", "(", "f\"\\n\\nOutput of {run_number}: \\n\\n\"", ")", "\n", "print", "(", "result", ".", "stderr", ".", "decode", "(", "'utf-8'", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Run {run_number} complete.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.test_limitedSampleIntegrator.experiment": [[102, 114], ["datetime.datetime.now", "integ", "datetime.datetime.now", "wandb.log"], "function", ["None"], ["", "def", "experiment", "(", "problem", ",", "integ", ")", ":", "\n", "    ", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "I_hat", ",", "N", "=", "integ", "(", "problem", ",", "return_N", "=", "True", ")", "\n", "end_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "d", "=", "{", "}", "\n", "d", "[", "'D'", "]", "=", "problem", ".", "D", "\n", "d", "[", "'N'", "]", "=", "N", "\n", "d", "[", "'pcntError'", "]", "=", "100", "*", "(", "I_hat", "-", "problem", ".", "answer", ")", "/", "problem", ".", "answer", "\n", "d", "[", "'time'", "]", "=", "(", "end_time", "-", "start_time", ")", ".", "total_seconds", "(", ")", "\n", "\n", "wandb", ".", "log", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.test_queueIntegrator.experiment": [[107, 119], ["datetime.datetime.now", "integ", "datetime.datetime.now", "wandb.log"], "function", ["None"], ["", "def", "experiment", "(", "problem", ",", "integ", ")", ":", "\n", "    ", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "I_hat", ",", "N", "=", "integ", "(", "problem", ",", "return_N", "=", "True", ")", "\n", "end_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "d", "=", "{", "}", "\n", "d", "[", "'D'", "]", "=", "problem", ".", "D", "\n", "d", "[", "'N'", "]", "=", "N", "\n", "d", "[", "'pcntError'", "]", "=", "100", "*", "(", "I_hat", "-", "problem", ".", "answer", ")", "/", "problem", ".", "answer", "\n", "d", "[", "'time'", "]", "=", "(", "end_time", "-", "start_time", ")", ".", "total_seconds", "(", ")", "\n", "\n", "wandb", ".", "log", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.test_simpleIntegrator.experiment": [[79, 91], ["datetime.datetime.now", "integ", "datetime.datetime.now", "wandb.log"], "function", ["None"], ["", "def", "experiment", "(", "problem", ",", "integ", ")", ":", "\n", "    ", "start_time", "=", "datetime", ".", "now", "(", ")", "\n", "I_hat", ",", "N", "=", "integ", "(", "problem", ",", "return_N", "=", "True", ")", "\n", "end_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "d", "=", "{", "}", "\n", "d", "[", "'D'", "]", "=", "problem", ".", "D", "\n", "d", "[", "'N'", "]", "=", "N", "\n", "d", "[", "'pcntError'", "]", "=", "100", "*", "(", "I_hat", "-", "problem", ".", "answer", ")", "/", "problem", ".", "answer", "\n", "d", "[", "'time'", "]", "=", "(", "end_time", "-", "start_time", ")", ".", "total_seconds", "(", ")", "\n", "\n", "wandb", ".", "log", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.ReservoirQueue.__init__": [[9, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "accentuation_factor", "=", "30", ")", ":", "\n", "        ", "\"\"\"\n        Queue that gets items randomly with probability accordingly to their\n        weight.\n\n        args\n        ------\n        accentuation_factor: float - weights are scaled to (0,1] then raised to\n                                     the power of this accentuation factor.\n                                     Higher accentuation factors make the queue\n                                     behaviour more and more deterministically,\n                                     since the difference between the highest\n                                     and lowest weights weights are\n                                     \"accentuated.\"\n        \"\"\"", "\n", "self", ".", "items", "=", "[", "]", "\n", "self", ".", "weights", "=", "[", "]", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "accentuation_factor", "=", "accentuation_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.ReservoirQueue.put": [[29, 35], ["numpy.isscalar", "queues.ReservoirQueue.items.append", "queues.ReservoirQueue.weights.append"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "item", ",", "weight", ")", ":", "\n", "        ", "assert", "np", ".", "isscalar", "(", "weight", ")", ",", "'weights must be scalar'", "\n", "assert", "weight", ">=", "0", ",", "'weights must be >= 0'", "\n", "self", ".", "items", ".", "append", "(", "item", ")", "\n", "self", ".", "weights", ".", "append", "(", "weight", ")", "\n", "self", ".", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.ReservoirQueue.get_probabilities": [[36, 47], ["numpy.array", "sum", "numpy.power", "sum"], "methods", ["None"], ["", "def", "get_probabilities", "(", "self", ",", "weights", ")", ":", "\n", "        ", "weights", "=", "np", ".", "array", "(", "self", ".", "weights", ")", "\n", "s", "=", "sum", "(", "weights", ")", "\n", "ps", "=", "weights", "/", "s", "\n", "# range is now [1,2], which prevents large accentuation factors driving", "\n", "# us into 0 everywhere", "\n", "ps", "=", "ps", "+", "1", "\n", "ps", "=", "np", ".", "power", "(", "ps", ",", "self", ".", "accentuation_factor", ")", "\n", "s", "=", "sum", "(", "ps", ")", "\n", "ps", "=", "ps", "/", "s", "\n", "return", "ps", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.ReservoirQueue.get": [[48, 60], ["queues.ReservoirQueue.get_probabilities", "numpy.random.choice", "queues.ReservoirQueue.items.pop", "queues.ReservoirQueue.weights.pop", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.ReservoirQueue.get_probabilities"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "n", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "ps", "=", "self", ".", "get_probabilities", "(", "self", ".", "weights", ")", "\n", "\n", "choice_of_index", "=", "np", ".", "random", ".", "choice", "(", "\n", "list", "(", "range", "(", "len", "(", "self", ".", "items", ")", ")", ")", ",", "p", "=", "ps", ")", "\n", "choice", "=", "self", ".", "items", ".", "pop", "(", "choice_of_index", ")", "\n", "self", ".", "weights", ".", "pop", "(", "choice_of_index", ")", "\n", "self", ".", "n", "-=", "1", "\n", "return", "choice", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.ReservoirQueue.empty": [[61, 63], ["None"], "methods", ["None"], ["", "", "def", "empty", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.__init__": [[72, 74], ["queue.PriorityQueue"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "q", "=", "OriginalPQ", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.put": [[75, 78], ["queues.PrioritizedItem", "queues.PriorityQueue.q.put"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.put"], ["", "def", "put", "(", "self", ",", "item", ",", "weight", ")", ":", "\n", "        ", "x", "=", "PrioritizedItem", "(", "priority", "=", "-", "weight", ",", "item", "=", "item", ")", "\n", "self", ".", "q", ".", "put", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.get": [[79, 81], ["queues.PriorityQueue.q.get"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.get"], ["", "def", "get", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "q", ".", "get", "(", ")", ".", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.n": [[82, 85], ["queues.PriorityQueue.q.qsize"], "methods", ["None"], ["", "@", "property", "\n", "def", "n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "q", ".", "qsize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty": [[86, 88], ["queues.PriorityQueue.q.empty"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty"], ["", "def", "empty", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "q", ".", "empty", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.ArrayList.__init__": [[5, 11], ["numpy.empty"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty"], ["    ", "def", "__init__", "(", "self", ",", "D", ")", ":", "\n", "        ", "self", ".", "D", "=", "D", "\n", "self", ".", "data", "=", "np", ".", "empty", "(", "shape", "=", "(", "100", ",", "self", ".", "D", ")", ")", "\n", "self", ".", "capacity", "=", "100", "\n", "self", ".", "freeSpace", "=", "100", "# should always have N + freeSpace = capacity", "\n", "self", ".", "N", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.ArrayList.add": [[12, 25], ["numpy.empty"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty"], ["", "def", "add", "(", "self", ",", "xs", ")", ":", "\n", "        ", "n", "=", "xs", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "freeSpace", "<", "n", ":", "\n", "            ", "newCapacity", "=", "4", "*", "(", "self", ".", "N", "+", "n", ")", "\n", "newData", "=", "np", ".", "empty", "(", "shape", "=", "(", "newCapacity", ",", "self", ".", "D", ")", ")", "\n", "newData", "[", ":", "self", ".", "N", "]", "=", "self", ".", "data", "[", ":", "self", ".", "N", "]", "\n", "self", ".", "data", "=", "newData", "\n", "self", ".", "capacity", "=", "newCapacity", "\n", "self", ".", "freeSpace", "=", "self", ".", "capacity", "-", "self", ".", "N", "\n", "\n", "", "self", ".", "data", "[", "self", ".", "N", ":", "self", ".", "N", "+", "n", "]", "=", "xs", "\n", "self", ".", "N", "+=", "n", "\n", "self", ".", "freeSpace", "=", "self", ".", "capacity", "-", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.ArrayList.printer": [[26, 33], ["print", "print", "print", "print", "print", "print"], "methods", ["None"], ["", "def", "printer", "(", "self", ")", ":", "\n", "        ", "print", "(", "'D: '", ",", "self", ".", "D", ")", "\n", "print", "(", "'capacity: '", ",", "self", ".", "capacity", ")", "\n", "print", "(", "'N: '", ",", "self", ".", "N", ")", "\n", "print", "(", "'freeSpace: '", ",", "self", ".", "freeSpace", ")", "\n", "print", "(", "'contents: '", ")", "\n", "print", "(", "self", ".", "contents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.ArrayList.contents": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "contents", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", ":", "self", ".", "N", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.__init__": [[45, 70], ["numpy.product", "container.ArrayList", "container.ArrayList", "container.Container.add", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.isinf"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add"], ["def", "__init__", "(", "self", ",", "X", ",", "y", ",", "mins", "=", "None", ",", "maxs", "=", "None", ")", ":", "\n", "        ", "assert", "X", ".", "ndim", "==", "2", "\n", "assert", "y", ".", "ndim", "==", "2", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "y", ".", "shape", "[", "0", "]", "\n", "assert", "y", ".", "shape", "[", "1", "]", "==", "1", "\n", "\n", "self", ".", "D", "=", "X", ".", "shape", "[", "1", "]", "\n", "\n", "# Compute container properties", "\n", "self", ".", "mins", "=", "np", ".", "array", "(", "mins", ")", "if", "mins", "is", "not", "None", "else", "np", ".", "array", "(", "\n", "[", "-", "np", ".", "inf", "]", "*", "self", ".", "D", ")", "\n", "self", ".", "maxs", "=", "np", ".", "array", "(", "maxs", ")", "if", "maxs", "is", "not", "None", "else", "np", ".", "array", "(", "\n", "[", "np", ".", "inf", "]", "*", "self", ".", "D", ")", "\n", "self", ".", "volume", "=", "np", ".", "product", "(", "self", ".", "maxs", "-", "self", ".", "mins", ")", "\n", "self", ".", "is_finite", "=", "not", "np", ".", "isinf", "(", "self", ".", "volume", ")", "\n", "self", ".", "midpoint", "=", "(", "\n", "self", ".", "mins", "+", "self", ".", "maxs", ")", "/", "2", "if", "self", ".", "is_finite", "else", "np", ".", "nan", "\n", "\n", "assert", "self", ".", "mins", ".", "shape", "[", "0", "]", "==", "self", ".", "D", "\n", "assert", "self", ".", "maxs", ".", "shape", "[", "0", "]", "==", "self", ".", "D", "\n", "\n", "self", ".", "_X", "=", "ArrayList", "(", "D", "=", "self", ".", "D", ")", "\n", "self", ".", "_y", "=", "ArrayList", "(", "D", "=", "1", ")", "\n", "\n", "self", ".", "add", "(", "X", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add": [[71, 82], ["numpy.all", "numpy.all", "container.Container._X.add", "container.Container._y.add"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add"], ["", "def", "add", "(", "self", ",", "new_X", ",", "new_y", ")", ":", "\n", "        ", "assert", "new_X", ".", "ndim", "==", "2", "\n", "assert", "new_y", ".", "ndim", "==", "2", "\n", "assert", "new_X", ".", "shape", "[", "0", "]", "==", "new_y", ".", "shape", "[", "0", "]", "\n", "assert", "new_X", ".", "shape", "[", "1", "]", "==", "self", ".", "D", "\n", "assert", "new_y", ".", "shape", "[", "1", "]", "==", "1", "\n", "assert", "np", ".", "all", "(", "new_X", ">=", "self", ".", "mins", ")", ",", "new_X", "[", "new_X", "<", "self", ".", "mins", "]", "\n", "assert", "np", ".", "all", "(", "new_X", "<=", "self", ".", "maxs", ")", ",", "new_X", "[", "new_X", ">", "self", ".", "maxs", "]", "\n", "\n", "self", ".", "_X", ".", "add", "(", "new_X", ")", "\n", "self", ".", "_y", ".", "add", "(", "new_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.N": [[83, 86], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "N", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_X", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.X": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "X", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_X", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.y": [[91, 94], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "y", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_y", ".", "contents", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.rvs": [[95, 100], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "rvs", "(", "self", ",", "n", ")", ":", "\n", "        ", "rs", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "(", "n", ",", "self", ".", "D", ")", ")", "\n", "ranges", "=", "self", ".", "maxs", "-", "self", ".", "mins", "\n", "rs", "=", "self", ".", "mins", "+", "ranges", "*", "rs", "\n", "return", "rs", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split": [[101, 129], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "container.Container", "container.Container", "numpy.logical_not", "numpy.logical_not"], "methods", ["None"], ["", "def", "split", "(", "self", ",", "split_dimension", ",", "split_value", ")", ":", "\n", "        ", "'''Divide perpendicular to an axis'''", "\n", "\n", "# Partition samples", "\n", "idxs", "=", "self", ".", "X", "[", ":", ",", "split_dimension", "]", "<=", "split_value", "\n", "\n", "lX", "=", "self", ".", "X", "[", "idxs", "]", "\n", "ly", "=", "self", ".", "y", "[", "idxs", "]", "\n", "\n", "rX", "=", "self", ".", "X", "[", "np", ".", "logical_not", "(", "idxs", ")", "]", "\n", "ry", "=", "self", ".", "y", "[", "np", ".", "logical_not", "(", "idxs", ")", "]", "\n", "\n", "# Calculate the new space partitions", "\n", "left_mins", "=", "np", ".", "array", "(", "self", ".", "mins", ",", "copy", "=", "True", ")", "\n", "left_maxs", "=", "np", ".", "array", "(", "self", ".", "maxs", ",", "copy", "=", "True", ")", "\n", "left_maxs", "[", "split_dimension", "]", "=", "split_value", "\n", "\n", "right_mins", "=", "np", ".", "array", "(", "self", ".", "mins", ",", "copy", "=", "True", ")", "\n", "right_maxs", "=", "np", ".", "array", "(", "self", ".", "maxs", ",", "copy", "=", "True", ")", "\n", "right_mins", "[", "split_dimension", "]", "=", "split_value", "\n", "\n", "# Create new Container instances", "\n", "left_container", "=", "Container", "(", "\n", "lX", ",", "ly", ",", "mins", "=", "left_mins", ",", "maxs", "=", "left_maxs", ")", "\n", "right_container", "=", "Container", "(", "\n", "rX", ",", "ry", ",", "mins", "=", "right_mins", ",", "maxs", "=", "right_maxs", ")", "\n", "\n", "return", "[", "left_container", ",", "right_container", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleProblems.Problem.__init__": [[9, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "D", ")", ":", "\n", "        ", "self", ".", "D", "=", "None", "\n", "self", ".", "d", "=", "None", "\n", "self", ".", "low", "=", "None", "\n", "self", ".", "high", "=", "None", "\n", "self", ".", "p", "=", "None", "\n", "self", ".", "answer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleProblems.Problem.pdf": [[17, 20], ["exampleProblems.Problem.d.pdf", "exampleProblems.Problem.p.pdf"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ")", ":", "\n", "# Combined pdf ie d(x) * p(x)", "\n", "        ", "return", "self", ".", "d", ".", "pdf", "(", "X", ")", "*", "self", ".", "p", ".", "pdf", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleProblems.SimpleGaussian.__init__": [[28, 39], ["treeQuadrature.exampleDistributions.MultivariateNormal", "treeQuadrature.exampleDistributions.Uniform"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "D", ")", ":", "\n", "        ", "self", ".", "D", "=", "D", "\n", "self", ".", "d", "=", "exampleDistributions", ".", "MultivariateNormal", "(", "\n", "D", "=", "D", ",", "mean", "=", "[", "0.0", "]", "*", "D", ",", "cov", "=", "1", "/", "200", ")", "\n", "self", ".", "low", "=", "-", "1.0", "\n", "self", ".", "high", "=", "1.0", "\n", "self", ".", "p", "=", "exampleDistributions", ".", "Uniform", "(", "\n", "D", "=", "D", ",", "low", "=", "self", ".", "low", ",", "high", "=", "self", ".", "high", ")", "\n", "\n", "# Truth", "\n", "self", ".", "answer", "=", "1", "/", "(", "2.0", "**", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleProblems.Camel.__init__": [[47, 57], ["treeQuadrature.exampleDistributions.Camel", "treeQuadrature.exampleDistributions.Uniform"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "D", ")", ":", "\n", "        ", "self", ".", "D", "=", "D", "\n", "self", ".", "d", "=", "exampleDistributions", ".", "Camel", "(", "D", ")", "\n", "self", ".", "low", "=", "-", "0.5", "\n", "self", ".", "high", "=", "1.5", "\n", "self", ".", "p", "=", "exampleDistributions", ".", "Uniform", "(", "\n", "D", "=", "D", ",", "low", "=", "self", ".", "low", ",", "high", "=", "self", ".", "high", ")", "\n", "\n", "# Truth", "\n", "self", ".", "answer", "=", "1", "/", "(", "2.0", "**", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleProblems.QuadCamel.__init__": [[68, 78], ["treeQuadrature.exampleDistributions.QuadCamel", "treeQuadrature.exampleDistributions.Uniform"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "D", ")", ":", "\n", "        ", "self", ".", "D", "=", "D", "\n", "self", ".", "d", "=", "exampleDistributions", ".", "QuadCamel", "(", "D", ")", "\n", "self", ".", "low", "=", "0.0", "\n", "self", ".", "high", "=", "10.0", "\n", "self", ".", "p", "=", "exampleDistributions", ".", "Uniform", "(", "\n", "D", "=", "D", ",", "low", "=", "self", ".", "low", ",", "high", "=", "self", ".", "high", ")", "\n", "\n", "# Truth", "\n", "self", ".", "answer", "=", "1", "/", "(", "10.0", "**", "D", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.containerIntegration.midpointIntegral": [[5, 10], ["f"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.helper_runOnMultipleCores.f"], ["def", "midpointIntegral", "(", "container", ",", "f", ")", ":", "\n", "    ", "'''Boxlike integral. Take height as value at midpoint.'''", "\n", "mid_x", "=", "container", ".", "midpoint", "\n", "mid_y", "=", "f", "(", "mid_x", ")", "[", "0", ",", "0", "]", "\n", "return", "mid_y", "*", "container", ".", "volume", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.containerIntegration.medianIntegral": [[12, 24], ["numpy.array", "numpy.median", "warnings.warn", "f"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.helper_runOnMultipleCores.f"], ["", "def", "medianIntegral", "(", "container", ",", "f", ")", ":", "\n", "    ", "'''Boxlike integral. Take height as median sample value.'''", "\n", "if", "container", ".", "N", "==", "0", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'Attempted to use medianIntegral on Container object with 0'", "+", "\n", "'samples.'", ")", "\n", "return", "0", "\n", "\n", "", "fs", "=", "np", ".", "array", "(", "[", "f", "(", "x", ")", "for", "x", "in", "container", ".", "X", "]", ")", "\n", "median", "=", "np", ".", "median", "(", "fs", ")", "\n", "\n", "return", "median", "*", "container", ".", "volume", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.containerIntegration.randomIntegral": [[26, 34], ["container.rvs", "f", "container.add", "numpy.median"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.helper_runOnMultipleCores.f", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add"], ["", "def", "randomIntegral", "(", "container", ",", "f", ",", "n", "=", "10", ")", ":", "\n", "    ", "'''Boxlike integral. Take height as mean value over n uniform samples.'''", "\n", "samples", "=", "container", ".", "rvs", "(", "n", ")", "\n", "ys", "=", "f", "(", "samples", ")", "\n", "container", ".", "add", "(", "samples", ",", "ys", ")", "# for tracking num function evaluations", "\n", "# I deliberately ignore previous samples which give skewed estimates", "\n", "y", "=", "np", ".", "median", "(", "ys", ")", "\n", "return", "y", "*", "container", ".", "volume", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.containerIntegration.smcIntegral": [[36, 42], ["container.rvs", "f", "container.add", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.helper_runOnMultipleCores.f", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add"], ["", "def", "smcIntegral", "(", "container", ",", "f", ",", "n", "=", "10", ")", ":", "\n", "    ", "samples", "=", "container", ".", "rvs", "(", "n", ")", "\n", "ys", "=", "f", "(", "samples", ")", "\n", "container", ".", "add", "(", "samples", ",", "ys", ")", "# for tracking num function evaluations", "\n", "v", "=", "container", ".", "volume", "\n", "return", "v", "*", "np", ".", "mean", "(", "ys", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.Uniform.__init__": [[11, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "D", ",", "low", ",", "high", ")", ":", "\n", "        ", "self", ".", "D", "=", "D", "\n", "self", ".", "low", "=", "low", "\n", "self", ".", "high", "=", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.Uniform.rvs": [[16, 20], ["numpy.random.uniform"], "methods", ["None"], ["", "def", "rvs", "(", "self", ",", "n", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "self", ".", "low", ",", "high", "=", "self", ".", "high", ",", "size", "=", "(", "\n", "n", ",", "self", ".", "D", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.Uniform.pdf": [[21, 27], ["numpy.all", "numpy.all", "numpy.array().reshape", "numpy.zeros", "numpy.array"], "methods", ["None"], ["", "def", "pdf", "(", "self", ",", "X", ")", ":", "\n", "        ", "if", "np", ".", "all", "(", "X", ">", "self", ".", "low", ")", "and", "np", ".", "all", "(", "X", "<", "self", ".", "high", ")", ":", "\n", "            ", "pdfVal", "=", "(", "self", ".", "high", "-", "self", ".", "low", ")", "**", "self", ".", "D", "\n", "return", "np", ".", "array", "(", "[", "1", "/", "pdfVal", "for", "x", "in", "X", "]", ")", ".", "reshape", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "zeros", "(", "shape", "=", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MultivariateNormal.__init__": [[32, 38], ["scipy.stats.multivariate_normal", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "D", ",", "mean", ",", "cov", ")", ":", "\n", "        ", "self", ".", "D", "=", "D", "\n", "self", ".", "mean", "=", "mean", "\n", "assert", "np", ".", "array", "(", "mean", ")", ".", "shape", "[", "0", "]", "==", "D", "\n", "self", ".", "cov", "=", "cov", "\n", "self", ".", "d", "=", "multivariate_normal", "(", "mean", "=", "mean", ",", "cov", "=", "cov", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MultivariateNormal.rvs": [[39, 42], ["exampleDistributions.MultivariateNormal.d.rvs().reshape", "exampleDistributions.MultivariateNormal.d.rvs"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs"], ["", "def", "rvs", "(", "self", ",", "n", ")", ":", "\n", "        ", "'''Ensure resulting array is 2D'''", "\n", "return", "self", ".", "d", ".", "rvs", "(", "n", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MultivariateNormal.pdf": [[43, 46], ["exampleDistributions.MultivariateNormal.d.pdf().reshape", "exampleDistributions.MultivariateNormal.d.pdf"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf"], ["", "def", "pdf", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''Ensure resulting array is 2D'''", "\n", "return", "self", ".", "d", ".", "pdf", "(", "X", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.__init__": [[51, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dims", ")", ":", "\n", "        ", "self", ".", "dims", "=", "dims", "\n", "# Inherited classes define how to choose mixture dists", "\n", "self", ".", "dists", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs": [[56, 64], ["list", "numpy.random.choice", "numpy.array", "numpy.empty", "range", "len", "exampleDistributions.MixtureDistribution.dists[].rvs().reshape", "exampleDistributions.MixtureDistribution.dists[].rvs"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs"], ["", "def", "rvs", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "if", "n_samples", "==", "0", ":", "\n", "            ", "return", "np", ".", "empty", "(", "shape", "=", "(", "0", ",", "self", ".", "dims", ")", ")", "\n", "\n", "", "dists", "=", "list", "(", "range", "(", "len", "(", "self", ".", "dists", ")", ")", ")", "\n", "which_dist", "=", "np", ".", "random", ".", "choice", "(", "dists", ",", "size", "=", "(", "n_samples", ",", ")", ")", "\n", "X", "=", "np", ".", "array", "(", "[", "self", ".", "dists", "[", "i", "]", ".", "rvs", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", ")", "for", "i", "in", "which_dist", "]", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf": [[65, 71], ["len", "numpy.stack", "numpy.sum", "numpy.sum.reshape", "dist.pdf().reshape", "dist.pdf"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf"], ["", "def", "pdf", "(", "self", ",", "x", ")", ":", "\n", "        ", "n_dists", "=", "len", "(", "self", ".", "dists", ")", "\n", "fvals", "=", "[", "dist", ".", "pdf", "(", "x", ")", ".", "reshape", "(", "-", "1", ",", ")", "/", "n_dists", "for", "dist", "in", "self", ".", "dists", "]", "\n", "fvals", "=", "np", ".", "stack", "(", "fvals", ")", "\n", "sums", "=", "np", ".", "sum", "(", "fvals", ",", "axis", "=", "0", ")", "\n", "return", "sums", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.Camel.__init__": [[81, 92], ["scipy.stats.multivariate_normal", "scipy.stats.multivariate_normal", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dims", ")", ":", "\n", "        ", "self", ".", "dims", "=", "dims", "\n", "\n", "mean1", "=", "(", "1", "/", "np", ".", "sqrt", "(", "dims", ")", ")", "*", "(", "1", "/", "3", ")", "\n", "mean2", "=", "(", "1", "/", "np", ".", "sqrt", "(", "dims", ")", ")", "*", "(", "2", "/", "3", ")", "\n", "\n", "cov", "=", "1", "/", "200", "\n", "\n", "self", ".", "dists", "=", "[", "\n", "multivariate_normal", "(", "mean", "=", "[", "mean1", "]", "*", "dims", ",", "cov", "=", "cov", ")", ",", "\n", "multivariate_normal", "(", "mean", "=", "[", "mean2", "]", "*", "dims", ",", "cov", "=", "cov", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.QuadCamel.__init__": [[103, 118], ["scipy.stats.multivariate_normal", "scipy.stats.multivariate_normal", "scipy.stats.multivariate_normal", "scipy.stats.multivariate_normal", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dims", ")", ":", "\n", "        ", "self", ".", "dims", "=", "dims", "\n", "\n", "mean1", "=", "(", "1", "/", "np", ".", "sqrt", "(", "dims", ")", ")", "*", "2", "\n", "mean2", "=", "(", "1", "/", "np", ".", "sqrt", "(", "dims", ")", ")", "*", "4", "\n", "mean3", "=", "(", "1", "/", "np", ".", "sqrt", "(", "dims", ")", ")", "*", "6", "\n", "mean4", "=", "(", "1", "/", "np", ".", "sqrt", "(", "dims", ")", ")", "*", "8", "\n", "\n", "cov", "=", "1", "/", "200", "\n", "\n", "self", ".", "dists", "=", "[", "\n", "multivariate_normal", "(", "mean", "=", "[", "mean1", "]", "*", "dims", ",", "cov", "=", "cov", ")", ",", "\n", "multivariate_normal", "(", "mean", "=", "[", "mean2", "]", "*", "dims", ",", "cov", "=", "cov", ")", ",", "\n", "multivariate_normal", "(", "mean", "=", "[", "mean3", "]", "*", "dims", ",", "cov", "=", "cov", ")", ",", "\n", "multivariate_normal", "(", "mean", "=", "[", "mean4", "]", "*", "dims", ",", "cov", "=", "cov", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.visualisation.plotContainer": [[4, 34], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "matplotlib.patches.Rectangle", "ax.add_patch", "ax.scatter"], "function", ["None"], ["def", "plotContainer", "(", "ax", ",", "container", ",", "**", "kwargs", ")", ":", "\n", "    ", "'''\n    Plot a container on the provided axes.\n\n    TODO - Args and color schemes.\n    '''", "\n", "\n", "# kwargs", "\n", "plot_samples", "=", "kwargs", ".", "pop", "(", "'plot_samples'", ",", "True", ")", "\n", "s", "=", "kwargs", ".", "pop", "(", "'s'", ",", "5.0", ")", "\n", "fill", "=", "kwargs", ".", "pop", "(", "'fill'", ",", "True", ")", "\n", "ec", "=", "kwargs", ".", "pop", "(", "'ec'", ",", "'black'", ")", "\n", "\n", "# Plotting container samples", "\n", "if", "plot_samples", ":", "\n", "        ", "ax", ".", "scatter", "(", "container", ".", "X", "[", ":", ",", "0", "]", ",", "container", ".", "X", "[", ":", ",", "1", "]", ",", "\n", "color", "=", "'navy'", ",", "s", "=", "s", ",", "alpha", "=", "0.3", ")", "\n", "\n", "# Plot container boundary", "\n", "", "x1", ",", "y1", "=", "container", ".", "mins", "[", ":", "2", "]", "\n", "x2", ",", "y2", "=", "container", ".", "maxs", "[", ":", "2", "]", "\n", "rect", "=", "Rectangle", "(", "\n", "(", "x1", ",", "y1", ")", ",", "\n", "x2", "-", "x1", ",", "\n", "y2", "-", "y1", ",", "\n", "fill", "=", "fill", ",", "\n", "ec", "=", "ec", ",", "\n", "**", "kwargs", "\n", ")", "\n", "ax", ".", "add_patch", "(", "rect", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.utils.scale": [[4, 10], ["numpy.array", "numpy.max", "numpy.min"], "function", ["None"], ["def", "scale", "(", "ys", ")", ":", "\n", "    ", "'''Scale a numpy array between 0 and 1'''", "\n", "ys", "=", "np", ".", "array", "(", "ys", ")", "\n", "high", "=", "np", ".", "max", "(", "ys", ")", "\n", "low", "=", "np", ".", "min", "(", "ys", ")", "\n", "return", "(", "ys", "-", "low", ")", "/", "(", "high", "-", "low", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.splits.kdSplit.kdSplit": [[4, 14], ["samples.var", "numpy.argmax", "numpy.median", "container.split", "numpy.unique"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split"], ["def", "kdSplit", "(", "container", ")", ":", "\n", "    ", "'''Finds axis with greatest variance and splits perpendicular to it.'''", "\n", "\n", "samples", "=", "container", ".", "X", "\n", "variances", "=", "samples", ".", "var", "(", "axis", "=", "0", ")", "\n", "split_dimension", "=", "np", ".", "argmax", "(", "variances", ")", "\n", "median", "=", "np", ".", "median", "(", "np", ".", "unique", "(", "samples", "[", ":", ",", "split_dimension", "]", ")", ")", "\n", "lcont", ",", "rcont", "=", "container", ".", "split", "(", "split_dimension", ",", "median", ")", "\n", "\n", "return", "[", "lcont", ",", "rcont", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.splits.uniformSplit.uniformSplit": [[1, 5], ["NotImplementedError"], "function", ["None"], ["def", "uniformSplit", "(", "container", ",", "n_divisions", ")", ":", "\n", "    ", "'''Split container into 2^n_divisions voxelled containers'''", "\n", "\n", "raise", "NotImplementedError", "(", "'TODO!'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.splits.minSseSplit.minSseSplit": [[4, 33], ["container.y.reshape", "range", "container.split", "numpy.array", "numpy.argsort", "numpy.array", "minSseSplit.findMinSplit"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.splits.minSseSplit.findMinSplit"], ["def", "minSseSplit", "(", "container", ",", "**", "kwargs", ")", ":", "\n", "    ", "'''Partition into k sets that minimize variance of f over each set'''", "\n", "\n", "samples", "=", "container", ".", "X", "\n", "dims", "=", "samples", ".", "shape", "[", "1", "]", "\n", "\n", "ys", "=", "container", ".", "y", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "best_dimension", "=", "-", "1", "\n", "best_thresh", "=", "np", ".", "inf", "\n", "best_score", "=", "np", ".", "inf", "\n", "\n", "# Find best split for each dimension and take best", "\n", "for", "dim", "in", "range", "(", "dims", ")", ":", "\n", "        ", "xs", "=", "np", ".", "array", "(", "samples", "[", ":", ",", "dim", "]", ",", "copy", "=", "True", ")", "\n", "indices", "=", "np", ".", "argsort", "(", "xs", ")", "\n", "xss", "=", "xs", "[", "indices", "]", "\n", "yss", "=", "np", ".", "array", "(", "ys", "[", "indices", "]", ",", "copy", "=", "True", ")", "\n", "\n", "thresh", ",", "score", "=", "findMinSplit", "(", "xss", ",", "yss", ")", "\n", "\n", "if", "score", "<", "best_score", ":", "\n", "            ", "best_dimension", "=", "dim", "\n", "best_thresh", "=", "thresh", "\n", "best_score", "=", "score", "\n", "\n", "", "", "lcont", ",", "rcont", "=", "container", ".", "split", "(", "best_dimension", ",", "best_thresh", ")", "\n", "\n", "return", "[", "lcont", ",", "rcont", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.splits.minSseSplit.findMinSplit": [[35, 67], ["range", "numpy.var", "numpy.var", "threshes.append", "scores.append"], "function", ["None"], ["", "def", "findMinSplit", "(", "xs", ",", "ys", ")", ":", "\n", "    ", "'''Partition xs and ys such that variance across ys subsets is minimized'''", "\n", "# xs, ys both 1D array", "\n", "# xs is sorted, ys aligned with xs", "\n", "\n", "best_thresh", "=", "np", ".", "inf", "\n", "best_score", "=", "np", ".", "inf", "\n", "\n", "threshes", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "\n", "# Iterate through all possible splits :(", "\n", "for", "i", "in", "range", "(", "1", ",", "ys", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "lvar", "=", "np", ".", "var", "(", "ys", "[", ":", "i", "]", ")", "\n", "rvar", "=", "np", ".", "var", "(", "ys", "[", "i", ":", "]", ")", "\n", "\n", "thresh", "=", "xs", "[", "i", "-", "1", "]", "\n", "\n", "# Compute SSE Impurity", "\n", "n", "=", "ys", ".", "shape", "[", "0", "]", "\n", "nl", "=", "i", "\n", "nr", "=", "n", "-", "i", "\n", "score", "=", "(", "nl", "*", "lvar", ")", "+", "(", "nr", "*", "rvar", ")", "\n", "\n", "threshes", ".", "append", "(", "thresh", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "\n", "if", "score", "<", "best_score", ":", "\n", "            ", "best_thresh", "=", "thresh", "\n", "best_score", "=", "score", "\n", "\n", "", "", "return", "best_thresh", ",", "best_score", "\n", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.simpleIntegrator.SimpleIntegrator.__init__": [[16, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "N", ",", "P", ",", "split", ",", "integral", ")", ":", "\n", "        ", "self", ".", "N", "=", "N", "\n", "self", ".", "P", "=", "P", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "integral", "=", "integral", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.simpleIntegrator.SimpleIntegrator.__call__": [[22, 56], ["problem.d.rvs", "problem.pdf", "container.Container", "queue.SimpleQueue", "queue.SimpleQueue.put", "numpy.sum", "sum", "queue.SimpleQueue.empty", "queue.SimpleQueue.get", "simpleIntegrator.SimpleIntegrator.integral", "finished_containers.append", "simpleIntegrator.SimpleIntegrator.split", "queue.SimpleQueue.put"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.put", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.get", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.put"], ["", "def", "__call__", "(", "self", ",", "problem", ",", "return_N", "=", "False", ",", "return_all", "=", "False", ")", ":", "\n", "        ", "D", "=", "problem", ".", "D", "\n", "\n", "# Draw samples", "\n", "X", "=", "problem", ".", "d", ".", "rvs", "(", "self", ".", "N", ")", "\n", "y", "=", "problem", ".", "pdf", "(", "X", ")", "\n", "\n", "root", "=", "Container", "(", "X", ",", "y", ",", "mins", "=", "[", "problem", ".", "low", "]", "*", "D", ",", "maxs", "=", "[", "problem", ".", "high", "]", "*", "D", ")", "\n", "\n", "# Construct tree", "\n", "finished_containers", "=", "[", "]", "\n", "q", "=", "SimpleQueue", "(", ")", "\n", "q", ".", "put", "(", "root", ")", "\n", "\n", "while", "not", "q", ".", "empty", "(", ")", ":", "\n", "\n", "            ", "c", "=", "q", ".", "get", "(", ")", "\n", "\n", "if", "c", ".", "N", "<=", "self", ".", "P", ":", "\n", "                ", "finished_containers", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                ", "children", "=", "self", ".", "split", "(", "c", ")", "\n", "for", "child", "in", "children", ":", "\n", "                    ", "q", ".", "put", "(", "child", ")", "\n", "\n", "# Integrate containers", "\n", "", "", "", "contributions", "=", "[", "self", ".", "integral", "(", "cont", ",", "problem", ".", "pdf", ")", "\n", "for", "cont", "in", "finished_containers", "]", "\n", "G", "=", "np", ".", "sum", "(", "contributions", ")", "\n", "N", "=", "sum", "(", "[", "cont", ".", "N", "for", "cont", "in", "finished_containers", "]", ")", "\n", "\n", "ret", "=", "(", "G", ",", "N", ")", "if", "return_N", "else", "G", "\n", "ret", "=", "(", "G", ",", "N", ",", "finished_containers", ",", "contributions", ")", "if", "return_all", "else", "ret", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.vegasIntegrator.ShapeAdapter.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "f", ")", ":", "\n", "        ", "self", ".", "f", "=", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.vegasIntegrator.ShapeAdapter.__call__": [[8, 10], ["vegasIntegrator.ShapeAdapter.f"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.results.helper_runOnMultipleCores.f"], ["", "def", "__call__", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "f", "(", "X", ")", "[", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.vegasIntegrator.VegasIntegrator.__init__": [[13, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "N", ",", "NITN", ")", ":", "\n", "        ", "\"\"\"\n        Runs the vegas algorithm on the problem.\n\n        args:\n        -------\n        N: Int, Number of samples to draw per iteration.\n        NITN: Int, Number of adaptive iterations to perform.\n        \"\"\"", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "NITN", "=", "NITN", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.vegasIntegrator.VegasIntegrator.__call__": [[25, 33], ["vegas.Integrator", "vegasIntegrator.ShapeAdapter", "vegas.Integrator."], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "problem", ",", "return_N", "=", "False", ",", "return_all", "=", "False", ")", ":", "\n", "        ", "integ", "=", "vegas", ".", "Integrator", "(", "[", "[", "-", "1.0", ",", "1.0", "]", "]", "*", "problem", ".", "D", ")", "\n", "f", "=", "ShapeAdapter", "(", "problem", ".", "pdf", ")", "\n", "G", "=", "integ", "(", "f", ",", "nitn", "=", "self", ".", "NITN", ",", "neval", "=", "self", ".", "N", ")", ".", "mean", "\n", "\n", "ret", "=", "(", "G", ",", "self", ".", "N", "*", "self", ".", "NITN", ")", "if", "return_N", "else", "G", "\n", "ret", "=", "(", "G", ",", "self", ".", "N", "*", "self", ".", "NITN", ")", "if", "return_all", "else", "ret", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.limitedSampleIntegrator.LimitedSampleIntegrator.__init__": [[31, 51], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "N", ",", "\n", "base_N", ",", "\n", "active_N", ",", "\n", "split", ",", "\n", "integral", ",", "\n", "weighting_function", ",", "\n", "queue", "=", "default_queue", ")", ":", "\n", "        ", "\"\"\"\n        Integrator that builds on from queueIntegrator with more friendly\n        controls - just keeps sampling until all samples used up.\n        \"\"\"", "\n", "self", ".", "N", "=", "N", "\n", "self", ".", "base_N", "=", "base_N", "\n", "self", ".", "active_N", "=", "active_N", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "integral", "=", "integral", "\n", "self", ".", "weighting_function", "=", "weighting_function", "\n", "self", ".", "queue", "=", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.limitedSampleIntegrator.LimitedSampleIntegrator.__call__": [[52, 98], ["problem.d.rvs", "problem.pdf", "container.Container", "limitedSampleIntegrator.LimitedSampleIntegrator.queue", "limitedSampleIntegrator.LimitedSampleIntegrator.put", "numpy.sum", "sum", "limitedSampleIntegrator.LimitedSampleIntegrator.empty", "limitedSampleIntegrator.LimitedSampleIntegrator.get", "limitedSampleIntegrator.LimitedSampleIntegrator.split", "limitedSampleIntegrator.LimitedSampleIntegrator.integral", "limitedSampleIntegrator.LimitedSampleIntegrator.get.rvs", "problem.pdf", "limitedSampleIntegrator.LimitedSampleIntegrator.get.add", "limitedSampleIntegrator.LimitedSampleIntegrator.weighting_function", "limitedSampleIntegrator.LimitedSampleIntegrator.put", "finished_containers.append"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.put", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.get", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.put"], ["", "def", "__call__", "(", "self", ",", "problem", ",", "return_N", "=", "False", ",", "return_all", "=", "False", ")", ":", "\n", "        ", "D", "=", "problem", ".", "D", "\n", "\n", "# Draw samples", "\n", "X", "=", "problem", ".", "d", ".", "rvs", "(", "self", ".", "base_N", ")", "\n", "y", "=", "problem", ".", "pdf", "(", "X", ")", "\n", "\n", "root", "=", "Container", "(", "X", ",", "y", ",", "mins", "=", "[", "problem", ".", "low", "]", "*", "D", ",", "maxs", "=", "[", "problem", ".", "high", "]", "*", "D", ")", "\n", "\n", "# Refine with further active samples", "\n", "q", "=", "self", ".", "queue", "(", ")", "\n", "q", ".", "put", "(", "root", ",", "1", ")", "\n", "finished_containers", "=", "[", "]", "\n", "num_samples_left", "=", "self", ".", "N", "-", "self", ".", "base_N", "\n", "\n", "while", "not", "q", ".", "empty", "(", ")", ":", "\n", "\n", "# save_weights_image(q)", "\n", "\n", "            ", "c", "=", "q", ".", "get", "(", ")", "\n", "\n", "if", "num_samples_left", ">=", "self", ".", "active_N", ":", "\n", "                ", "X", "=", "c", ".", "rvs", "(", "self", ".", "active_N", ")", "\n", "y", "=", "problem", ".", "pdf", "(", "X", ")", "\n", "c", ".", "add", "(", "X", ",", "y", ")", "\n", "num_samples_left", "-=", "self", ".", "active_N", "\n", "\n", "", "elif", "c", ".", "N", "<", "2", ":", "\n", "                ", "finished_containers", ".", "append", "(", "c", ")", "\n", "continue", "\n", "\n", "", "children", "=", "self", ".", "split", "(", "c", ")", "\n", "for", "child", "in", "children", ":", "\n", "                ", "weight", "=", "self", ".", "weighting_function", "(", "child", ")", "\n", "q", ".", "put", "(", "child", ",", "weight", ")", "\n", "\n", "# Integrate containers", "\n", "", "", "contributions", "=", "[", "self", ".", "integral", "(", "cont", ",", "problem", ".", "pdf", ")", "\n", "for", "cont", "in", "finished_containers", "]", "\n", "G", "=", "np", ".", "sum", "(", "contributions", ")", "\n", "N", "=", "sum", "(", "[", "cont", ".", "N", "for", "cont", "in", "finished_containers", "]", ")", "\n", "\n", "ret", "=", "(", "G", ",", "N", ")", "if", "return_N", "else", "G", "\n", "ret", "=", "(", "G", ",", "N", ",", "finished_containers", ",", "contributions", ",", "\n", "num_samples_left", ")", "if", "return_all", "else", "ret", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.limitedSampleIntegrator.default_stopping_condition": [[10, 11], ["None"], "function", ["None"], ["def", "default_stopping_condition", "(", "container", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.limitedSampleIntegrator.save_weights_image": [[16, 27], ["q.get_probabilities", "matplotlib.figure", "matplotlib.yscale", "matplotlib.hist", "matplotlib.savefig", "matplotlib.close", "str"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.ReservoirQueue.get_probabilities"], ["def", "save_weights_image", "(", "q", ")", ":", "\n", "    ", "weights", "=", "q", ".", "weights", "\n", "ps", "=", "q", ".", "get_probabilities", "(", "weights", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "yscale", "(", "\"log\"", ")", "\n", "plt", ".", "hist", "(", "ps", ")", "\n", "plt", ".", "savefig", "(", "\n", "\"/home/t/Documents/4yp/evidence-with-kdtrees/\"", "+", "\n", "\"src/treeQuadrature/results/images/ps_\"", "\n", "+", "str", "(", "q", ".", "n", ")", "+", "\".png\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.queueIntegrator.QueueIntegrator.__init__": [[17, 64], ["numpy.isinf", "Exception"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "base_N", ",", "\n", "split", ",", "\n", "integral", ",", "\n", "weighting_function", ",", "\n", "active_N", "=", "0", ",", "\n", "num_splits", "=", "np", ".", "inf", ",", "\n", "stopping_condition", "=", "default_stopping_condition", ",", "\n", "queue", "=", "default_queue", ")", ":", "\n", "        ", "\"\"\"\n        Integrator that builds on from SimpleIntegrator with more customised\n        queueing.\n\n        args:\n        --------\n\n        base_N - the base number of samples to draw from the problem\n        distribution\n        split  - the method to split the containers\n        integral - the method to integrate the containers\n        weighting_function - maps Container -> R to give priority of container\n        in queue\n        active_N - the number of active samples to draw before a container is\n        split\n        num_splits - a limit on the number of splits the integrator can perform\n        stopping_condition - maps Container -> Bool to indicate whether\n        container should no longer be split\n        queue - where containers are pushed and popped from along with their\n        weights\n        \"\"\"", "\n", "\n", "if", "np", ".", "isinf", "(", "\n", "num_splits", ")", "and", "(", "\n", "stopping_condition", "==", "default_stopping_condition", ")", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"Integrator with never terminate - either provide a stopping\"", "+", "\n", "\"condition or a maximum number of splits\"", ")", "\n", "\n", "", "self", ".", "base_N", "=", "base_N", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "integral", "=", "integral", "\n", "self", ".", "weighting_function", "=", "weighting_function", "\n", "self", ".", "active_N", "=", "active_N", "\n", "self", ".", "num_splits", "=", "num_splits", "\n", "self", ".", "stopping_condition", "=", "stopping_condition", "\n", "self", ".", "queue", "=", "queue", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.queueIntegrator.QueueIntegrator.__call__": [[65, 115], ["problem.d.rvs", "problem.pdf", "container.Container", "queueIntegrator.QueueIntegrator.queue", "queueIntegrator.QueueIntegrator.put", "numpy.sum", "sum", "queueIntegrator.QueueIntegrator.get", "queueIntegrator.QueueIntegrator.stopping_condition", "queueIntegrator.QueueIntegrator.empty", "finished_containers.append", "queueIntegrator.QueueIntegrator.integral", "queueIntegrator.QueueIntegrator.empty", "finished_containers.append", "queueIntegrator.QueueIntegrator.split", "queueIntegrator.QueueIntegrator.get", "queueIntegrator.QueueIntegrator.weighting_function", "queueIntegrator.QueueIntegrator.put", "child.rvs", "problem.pdf", "child.add"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.put", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.get", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.get", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.put", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add"], ["", "def", "__call__", "(", "self", ",", "problem", ",", "return_N", "=", "False", ",", "return_all", "=", "False", ")", ":", "\n", "        ", "D", "=", "problem", ".", "D", "\n", "\n", "# Draw samples", "\n", "X", "=", "problem", ".", "d", ".", "rvs", "(", "self", ".", "base_N", ")", "\n", "y", "=", "problem", ".", "pdf", "(", "X", ")", "\n", "\n", "root", "=", "Container", "(", "X", ",", "y", ",", "mins", "=", "[", "problem", ".", "low", "]", "*", "D", ",", "maxs", "=", "[", "problem", ".", "high", "]", "*", "D", ")", "\n", "\n", "# Construct tree", "\n", "current_n_splits", "=", "0", "\n", "finished_containers", "=", "[", "]", "\n", "q", "=", "self", ".", "queue", "(", ")", "\n", "q", ".", "put", "(", "root", ",", "1", ")", "\n", "\n", "while", "(", "not", "q", ".", "empty", "(", ")", ")", "and", "(", "current_n_splits", "<", "self", ".", "num_splits", ")", ":", "\n", "\n", "            ", "c", "=", "q", ".", "get", "(", ")", "\n", "\n", "if", "self", ".", "stopping_condition", "(", "c", ")", ":", "\n", "                ", "finished_containers", ".", "append", "(", "c", ")", "\n", "\n", "", "else", ":", "\n", "                ", "children", "=", "self", ".", "split", "(", "c", ")", "\n", "for", "child", "in", "children", ":", "\n", "\n", "                    ", "if", "self", ".", "active_N", ">", "0", ":", "\n", "                        ", "X", "=", "child", ".", "rvs", "(", "self", ".", "active_N", ")", "\n", "y", "=", "problem", ".", "pdf", "(", "X", ")", "\n", "child", ".", "add", "(", "X", ",", "y", ")", "\n", "\n", "", "weight", "=", "self", ".", "weighting_function", "(", "child", ")", "\n", "q", ".", "put", "(", "child", ",", "weight", ")", "\n", "\n", "", "current_n_splits", "+=", "1", "\n", "\n", "# Empty queue", "\n", "", "", "while", "not", "q", ".", "empty", "(", ")", ":", "\n", "            ", "finished_containers", ".", "append", "(", "q", ".", "get", "(", ")", ")", "\n", "\n", "# Integrate containers", "\n", "", "contributions", "=", "[", "self", ".", "integral", "(", "cont", ",", "problem", ".", "pdf", ")", "\n", "for", "cont", "in", "finished_containers", "]", "\n", "G", "=", "np", ".", "sum", "(", "contributions", ")", "\n", "N", "=", "sum", "(", "[", "cont", ".", "N", "for", "cont", "in", "finished_containers", "]", ")", "\n", "\n", "ret", "=", "(", "G", ",", "N", ")", "if", "return_N", "else", "G", "\n", "ret", "=", "(", "G", ",", "N", ",", "finished_containers", ",", "contributions", ",", "\n", "current_n_splits", ")", "if", "return_all", "else", "ret", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.queueIntegrator.default_stopping_condition": [[9, 10], ["None"], "function", ["None"], ["def", "default_stopping_condition", "(", "container", ")", ":", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.smcIntegrator.SmcIntegrator.__init__": [[5, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "N", ")", ":", "\n", "        ", "\"\"\"\n        Simplest possible integrator. Draw N samples from prior,\n        take sample mean of liklihood values at these samples.\n        \"\"\"", "\n", "self", ".", "N", "=", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.integrators.smcIntegrator.SmcIntegrator.__call__": [[12, 20], ["problem.p.rvs", "problem.d.pdf().reshape", "numpy.mean", "problem.d.pdf"], "methods", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf"], ["", "def", "__call__", "(", "self", ",", "problem", ",", "return_N", "=", "False", ",", "return_all", "=", "False", ")", ":", "\n", "        ", "xs", "=", "problem", ".", "p", ".", "rvs", "(", "self", ".", "N", ")", "\n", "ys", "=", "problem", ".", "d", ".", "pdf", "(", "xs", ")", ".", "reshape", "(", "-", "1", ")", "\n", "G", "=", "np", ".", "mean", "(", "ys", ")", "\n", "\n", "ret", "=", "(", "G", ",", "self", ".", "N", ")", "if", "return_N", "else", "G", "\n", "ret", "=", "(", "G", ",", "self", ".", "N", ")", "if", "return_all", "else", "ret", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_integrators.test_io": [[10, 26], ["pytest.mark.parametrize", "treeQuadrature.exampleProblems.SimpleGaussian", "integrator_instance", "integrator_instance", "integrator_instance", "integrator_instance", "len", "len", "treeQuadrature.integrators.SmcIntegrator", "treeQuadrature.integrators.VegasIntegrator", "treeQuadrature.integrators.SimpleIntegrator"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"integrator_instance\"", ",", "[", "\n", "tq", ".", "integrators", ".", "SmcIntegrator", "(", "100", ")", ",", "\n", "tq", ".", "integrators", ".", "VegasIntegrator", "(", "100", ",", "10", ")", ",", "\n", "tq", ".", "integrators", ".", "SimpleIntegrator", "(", "100", ",", "50", ",", "tq", ".", "splits", ".", "kdSplit", ",", "tq", ".", "containerIntegration", ".", "midpointIntegral", ")", ",", "\n", "]", ")", "\n", "def", "test_io", "(", "integrator_instance", ")", ":", "\n", "    ", "\"\"\"Checks each integrator has the desired IO for an integrator\"\"\"", "\n", "\n", "problem", "=", "tq", ".", "exampleProblems", ".", "SimpleGaussian", "(", "3", ")", "\n", "\n", "I", "=", "integrator_instance", "(", "problem", ")", "\n", "I", ",", "N", "=", "integrator_instance", "(", "problem", ",", "return_N", "=", "True", ")", "\n", "res", "=", "integrator_instance", "(", "problem", ",", "return_all", "=", "True", ")", "\n", "assert", "len", "(", "res", ")", ">=", "2", "\n", "res", "=", "integrator_instance", "(", "problem", ",", "return_N", "=", "True", ",", "return_all", "=", "True", ")", "\n", "assert", "len", "(", "res", ")", ">=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_integrators.test_SimpleIntegrator": [[49, 58], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "treeQuadrature.exampleProblems.SimpleGaussian", "treeQuadrature.integrators.SimpleIntegrator", "tq.integrators.SimpleIntegrator."], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"D\"", ",", "[", "1", ",", "2", ",", "10", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"N\"", ",", "[", "1000", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"P\"", ",", "[", "100", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"split\"", ",", "splits", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"integral\"", ",", "integrals", ")", "\n", "def", "test_SimpleIntegrator", "(", "D", ",", "N", ",", "P", ",", "split", ",", "integral", ")", ":", "\n", "    ", "problem", "=", "tq", ".", "exampleProblems", ".", "SimpleGaussian", "(", "D", ")", "\n", "integ", "=", "tq", ".", "integrators", ".", "SimpleIntegrator", "(", "N", ",", "P", ",", "split", ",", "integral", ")", "\n", "I", "=", "integ", "(", "problem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_integrators.test_QueueIntegrator": [[59, 90], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "treeQuadrature.exampleProblems.SimpleGaussian", "treeQuadrature.integrators.QueueIntegrator", "tq.integrators.QueueIntegrator.", "numpy.isinf", "str", "numpy.isinf", "str", "len", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"D\"", ",", "[", "1", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"base_N\"", ",", "[", "1000", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"split\"", ",", "splits", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"integral\"", ",", "integrals", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"weighting_function\"", ",", "[", "lambda", "container", ":", "container", ".", "volume", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"active_N\"", ",", "[", "0", ",", "10", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"num_splits\"", ",", "[", "np", ".", "inf", ",", "50", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"stopping_condition\"", ",", "[", "lambda", "container", ":", "container", ".", "N", "<", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"queue\"", ",", "queues", ")", "\n", "def", "test_QueueIntegrator", "(", "\n", "D", ",", "base_N", ",", "split", ",", "integral", ",", "weighting_function", ",", "\n", "active_N", ",", "num_splits", ",", "stopping_condition", ",", "queue", ")", ":", "\n", "\n", "    ", "if", "np", ".", "isinf", "(", "num_splits", ")", "and", "active_N", ">", "0", ":", "\n", "        ", "return", "\n", "\n", "", "problem", "=", "tq", ".", "exampleProblems", ".", "SimpleGaussian", "(", "D", ")", "\n", "integ", "=", "tq", ".", "integrators", ".", "QueueIntegrator", "(", "\n", "base_N", ",", "split", ",", "integral", ",", "weighting_function", ",", "\n", "active_N", ",", "num_splits", ",", "stopping_condition", ",", "queue", ")", "\n", "I", ",", "N", ",", "fcs", ",", "cs", ",", "ns", "=", "integ", "(", "problem", ",", "return_all", "=", "True", ")", "\n", "\n", "if", "\"randomIntegral\"", "in", "str", "(", "integral", ")", ":", "\n", "        ", "assert", "base_N", "+", "ns", "*", "2", "*", "active_N", "+", "len", "(", "fcs", ")", "*", "10", "==", "N", "\n", "", "elif", "\"smcIntegral\"", "in", "str", "(", "integral", ")", ":", "\n", "        ", "assert", "base_N", "+", "ns", "*", "2", "*", "active_N", "+", "len", "(", "fcs", ")", "*", "10", "==", "N", "\n", "", "else", ":", "\n", "        ", "assert", "base_N", "+", "ns", "*", "2", "*", "active_N", "==", "N", "\n", "\n", "", "if", "not", "np", ".", "isinf", "(", "num_splits", ")", ":", "\n", "        ", "assert", "ns", "==", "num_splits", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_integrators.test_LimitedSampleIntegrator": [[91, 107], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "treeQuadrature.exampleProblems.SimpleGaussian", "treeQuadrature.integrators.LimitedSampleIntegrator", "tq.integrators.LimitedSampleIntegrator."], "function", ["None"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"D\"", ",", "[", "1", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"N\"", ",", "[", "1000", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"base_N, active_N\"", ",", "[", "(", "0", ",", "100", ")", ",", "(", "500", ",", "10", ")", ",", "(", "1000", ",", "100", ")", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"split\"", ",", "splits", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"integral\"", ",", "integrals", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"weighting_function\"", ",", "[", "lambda", "container", ":", "container", ".", "volume", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"queue\"", ",", "queues", ")", "\n", "def", "test_LimitedSampleIntegrator", "(", "\n", "D", ",", "N", ",", "base_N", ",", "active_N", ",", "split", ",", "integral", ",", "weighting_function", ",", "queue", "\n", ")", ":", "\n", "\n", "    ", "problem", "=", "tq", ".", "exampleProblems", ".", "SimpleGaussian", "(", "D", ")", "\n", "integ", "=", "tq", ".", "integrators", ".", "LimitedSampleIntegrator", "(", "\n", "N", ",", "base_N", ",", "active_N", ",", "split", ",", "integral", ",", "weighting_function", ",", "queue", "\n", ")", "\n", "I", ",", "N", ",", "fcs", ",", "cs", ",", "ns", "=", "integ", "(", "problem", ",", "return_all", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_distributions.test_shapes": [[5, 24], ["pytest.mark.parametrize", "pytest.mark.parametrize", "pytest.mark.parametrize", "distribution", "distribution.rvs", "distribution.pdf", "functools.partial"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"D\"", ",", "[", "1", ",", "2", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_samples\"", ",", "[", "0", ",", "1", ",", "10", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"distribution\"", ",", "[", "\n", "partial", "(", "tq", ".", "exampleDistributions", ".", "Uniform", ",", "low", "=", "-", "1.0", ",", "high", "=", "1.0", ")", ",", "\n", "tq", ".", "exampleDistributions", ".", "Camel", ",", "\n", "tq", ".", "exampleDistributions", ".", "QuadCamel", "\n", "]", ")", "\n", "def", "test_shapes", "(", "D", ",", "n_samples", ",", "distribution", ")", ":", "\n", "    ", "d", "=", "distribution", "(", "D", ")", "\n", "\n", "X", "=", "d", ".", "rvs", "(", "n_samples", ")", "\n", "assert", "X", ".", "ndim", "==", "2", "\n", "assert", "X", ".", "shape", "[", "0", "]", "==", "n_samples", "\n", "assert", "X", ".", "shape", "[", "1", "]", "==", "D", "\n", "\n", "y", "=", "d", ".", "pdf", "(", "X", ")", "\n", "assert", "y", ".", "ndim", "==", "2", "\n", "assert", "y", ".", "shape", "[", "0", "]", "==", "n_samples", "\n", "assert", "y", ".", "shape", "[", "1", "]", "==", "1", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_container.test_init": [[8, 32], ["pytest.mark.parametrize", "numpy.array", "numpy.array", "treeQuadrature.Container", "numpy.isnan", "numpy.array", "numpy.array", "treeQuadrature.Container", "numpy.all", "numpy.all", "numpy.array"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"D\"", ",", "[", "1", ",", "2", ",", "5", "]", ")", "\n", "def", "test_init", "(", "D", ")", ":", "\n", "    ", "X", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "10", "]", "*", "D", ",", "\n", "[", "10", "]", "*", "D", "\n", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", "]", "*", "2", ")", "\n", "cont", "=", "tq", ".", "Container", "(", "X", ",", "y", ")", "\n", "\n", "assert", "not", "cont", ".", "is_finite", "\n", "assert", "np", ".", "isnan", "(", "cont", ".", "midpoint", ")", "\n", "assert", "cont", ".", "D", "==", "D", "\n", "\n", "mins", "=", "np", ".", "array", "(", "[", "-", "10", "]", "*", "D", ")", "\n", "maxs", "=", "np", ".", "array", "(", "[", "10", "]", "*", "D", ")", "\n", "\n", "cont", "=", "tq", ".", "Container", "(", "X", ",", "y", ",", "mins", "=", "mins", ",", "maxs", "=", "maxs", ")", "\n", "assert", "cont", ".", "is_finite", "\n", "assert", "cont", ".", "midpoint", ".", "ndim", "==", "1", "\n", "assert", "cont", ".", "midpoint", ".", "shape", "==", "(", "D", ",", ")", "\n", "assert", "np", ".", "all", "(", "cont", ".", "midpoint", "==", "np", ".", "array", "(", "[", "0", "]", "*", "D", ")", ")", "\n", "\n", "assert", "cont", ".", "_X", ".", "N", "==", "2", "\n", "assert", "np", ".", "all", "(", "cont", ".", "_X", ".", "contents", "==", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_container.test_add_method": [[33, 66], ["pytest.mark.parametrize", "numpy.array", "numpy.array", "conftest.container.add", "conftest.container.add", "conftest.container.add", "conftest.container.add"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"x, expected\"", ",", "[", "\n", "(", "-", "50.0", ",", "\"Fail\"", ")", ",", "\n", "(", "-", "5.0", ",", "\"Success\"", ")", ",", "\n", "(", "0.0", ",", "\"Success\"", ")", ",", "\n", "(", "5.0", ",", "\"Success\"", ")", ",", "\n", "(", "10.0", ",", "\"Fail\"", ")", "\n", "]", ")", "\n", "def", "test_add_method", "(", "container", ",", "x", ",", "expected", ")", ":", "\n", "    ", "D", "=", "container", ".", "D", "\n", "new_X", "=", "np", ".", "array", "(", "[", "[", "x", "]", "*", "D", "]", ")", "\n", "new_y", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", "]", "*", "1", ")", "\n", "\n", "# Closed container should reject all but x = 0.0", "\n", "if", "container", ".", "name", "==", "\"closed_container\"", ":", "\n", "        ", "if", "x", "==", "0.0", ":", "\n", "            ", "N", "=", "container", ".", "N", "\n", "container", ".", "add", "(", "new_X", ",", "new_y", ")", "\n", "assert", "container", ".", "N", "==", "N", "+", "1", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "container", ".", "add", "(", "new_X", ",", "new_y", ")", "\n", "", "except", "AssertionError", ":", "\n", "                ", "pass", "\n", "\n", "# The other containers should go as labelled", "\n", "", "", "", "else", ":", "\n", "        ", "if", "expected", "==", "\"Fail\"", ":", "\n", "            ", "try", ":", "\n", "                ", "container", ".", "add", "(", "new_X", ",", "new_y", ")", "\n", "", "except", "AssertionError", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "container", ".", "add", "(", "new_X", ",", "new_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_container.test_rvs_method": [[68, 86], ["pytest.mark.parametrize", "conftest.container.rvs", "numpy.ones", "conftest.container.add", "numpy.all", "numpy.max", "numpy.min"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.add"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"n_samples\"", ",", "[", "0", ",", "1", ",", "100", "]", ")", "\n", "def", "test_rvs_method", "(", "container", ",", "n_samples", ")", ":", "\n", "    ", "samples", "=", "container", ".", "rvs", "(", "n_samples", ")", "\n", "\n", "# shape test", "\n", "assert", "samples", ".", "ndim", "==", "2", "\n", "assert", "samples", ".", "shape", "[", "0", "]", "==", "n_samples", "\n", "assert", "samples", ".", "shape", "[", "1", "]", "==", "container", ".", "D", "\n", "\n", "# naive coverage test", "\n", "if", "n_samples", "==", "100", ":", "\n", "        ", "range_samples", "=", "np", ".", "max", "(", "samples", ",", "axis", "=", "0", ")", "-", "np", ".", "min", "(", "samples", ",", "axis", "=", "0", ")", "\n", "range_container", "=", "container", ".", "maxs", "-", "container", ".", "mins", "\n", "assert", "np", ".", "all", "(", "range_samples", ">=", "0.8", "*", "range_container", ")", "\n", "\n", "# addition test", "\n", "", "y", "=", "np", ".", "ones", "(", "shape", "=", "(", "n_samples", ",", "1", ")", ")", "\n", "container", ".", "add", "(", "samples", ",", "y", ")", "# checks samples inside bounds", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_container.test_split_method": [[88, 117], ["pytest.mark.parametrize", "range", "list", "conftest.container.split", "numpy.isclose", "range", "range", "range", "conftest.container.rvs", "numpy.random.choice", "conftest.container.split", "numpy.isclose", "range", "list", "range"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.container.Container.split"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"force_test_to_repeat\"", ",", "list", "(", "range", "(", "10", ")", ")", ")", "\n", "def", "test_split_method", "(", "container", ",", "force_test_to_repeat", ")", ":", "\n", "# test split on random point", "\n", "    ", "for", "split_dimension", "in", "range", "(", "0", ",", "container", ".", "D", ")", ":", "\n", "        ", "split_value", "=", "container", ".", "rvs", "(", "1", ")", "[", "0", ",", "split_dimension", "]", "\n", "lc", ",", "rc", "=", "container", ".", "split", "(", "split_dimension", ",", "split_value", ")", "\n", "assert", "np", ".", "isclose", "(", "lc", ".", "volume", "+", "rc", ".", "volume", ",", "container", ".", "volume", ")", "\n", "assert", "lc", ".", "N", "+", "rc", ".", "N", "==", "container", ".", "N", "\n", "for", "D", "in", "range", "(", "container", ".", "D", ")", ":", "\n", "            ", "if", "D", "==", "split_dimension", ":", "\n", "                ", "assert", "lc", ".", "maxs", "[", "D", "]", "==", "rc", ".", "mins", "[", "D", "]", "==", "split_value", "\n", "", "else", ":", "\n", "                ", "assert", "lc", ".", "mins", "[", "D", "]", "==", "rc", ".", "mins", "[", "D", "]", "==", "container", ".", "mins", "[", "D", "]", "\n", "assert", "lc", ".", "maxs", "[", "D", "]", "==", "rc", ".", "maxs", "[", "D", "]", "==", "container", ".", "maxs", "[", "D", "]", "\n", "\n", "# test split on a sample point", "\n", "", "", "", "if", "container", ".", "N", ">", "0", ":", "\n", "        ", "for", "split_dimension", "in", "range", "(", "0", ",", "container", ".", "D", ")", ":", "\n", "            ", "chosen_idx", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "range", "(", "container", ".", "N", ")", ")", ")", "\n", "split_value", "=", "container", ".", "X", "[", "chosen_idx", ",", "split_dimension", "]", "\n", "lc", ",", "rc", "=", "container", ".", "split", "(", "split_dimension", ",", "split_value", ")", "\n", "assert", "np", ".", "isclose", "(", "lc", ".", "volume", "+", "rc", ".", "volume", ",", "container", ".", "volume", ")", "\n", "assert", "lc", ".", "N", "+", "rc", ".", "N", "==", "container", ".", "N", "\n", "for", "D", "in", "range", "(", "container", ".", "D", ")", ":", "\n", "                ", "if", "D", "==", "split_dimension", ":", "\n", "                    ", "assert", "lc", ".", "maxs", "[", "D", "]", "==", "rc", ".", "mins", "[", "D", "]", "==", "split_value", "\n", "", "else", ":", "\n", "                    ", "assert", "lc", ".", "mins", "[", "D", "]", "==", "rc", ".", "mins", "[", "D", "]", "==", "container", ".", "mins", "[", "D", "]", "\n", "assert", "lc", ".", "maxs", "[", "D", "]", "==", "rc", ".", "maxs", "[", "D", "]", "==", "container", ".", "maxs", "[", "D", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.test_container.test_volume_method": [[120, 125], ["None"], "function", ["None"], ["", "", "", "", "", "def", "test_volume_method", "(", "container", ")", ":", "\n", "    ", "if", "container", ".", "name", "==", "\"closed_container\"", ":", "\n", "        ", "assert", "container", ".", "volume", "==", "0", "\n", "", "else", ":", "\n", "        ", "assert", "container", ".", "volume", "==", "10", "**", "container", ".", "D", "", "", "", ""]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.conftest.simple_container": [[7, 23], ["pytest.fixture", "treeQuadrature.exampleDistributions.MultivariateNormal", "tq.exampleDistributions.MultivariateNormal.rvs", "tq.exampleDistributions.MultivariateNormal.pdf", "numpy.array", "numpy.array", "treeQuadrature.Container"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.rvs", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.exampleDistributions.MixtureDistribution.pdf"], ["@", "pytest", ".", "fixture", "(", "params", "=", "TESTING_DIMS", ")", "\n", "def", "simple_container", "(", "request", ")", ":", "\n", "    ", "\"\"\"standard populated container\"\"\"", "\n", "\n", "D", "=", "request", ".", "param", "\n", "d", "=", "tq", ".", "exampleDistributions", ".", "MultivariateNormal", "(", "D", ",", "mean", "=", "[", "0.0", "]", "*", "D", ",", "cov", "=", "0.5", ")", "\n", "X", "=", "d", ".", "rvs", "(", "100", ")", "\n", "y", "=", "d", ".", "pdf", "(", "X", ")", "\n", "\n", "mins", "=", "np", ".", "array", "(", "[", "-", "5.0", "]", "*", "D", ")", "\n", "maxs", "=", "np", ".", "array", "(", "[", "5.0", "]", "*", "D", ")", "\n", "\n", "cont", "=", "tq", ".", "Container", "(", "X", ",", "y", ",", "mins", "=", "mins", ",", "maxs", "=", "maxs", ")", "\n", "\n", "cont", ".", "name", "=", "\"simple_container\"", "\n", "return", "cont", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.conftest.empty_container": [[25, 39], ["pytest.fixture", "numpy.empty", "numpy.empty", "numpy.array", "numpy.array", "treeQuadrature.Container"], "function", ["home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty", "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.treeQuadrature.queues.PriorityQueue.empty"], ["", "@", "pytest", ".", "fixture", "(", "params", "=", "TESTING_DIMS", ")", "\n", "def", "empty_container", "(", "request", ")", ":", "\n", "    ", "\"\"\"container with volume > 0 but no samples\"\"\"", "\n", "\n", "D", "=", "request", ".", "param", "\n", "X", "=", "np", ".", "empty", "(", "shape", "=", "(", "0", ",", "D", ")", ")", "\n", "y", "=", "np", ".", "empty", "(", "shape", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "mins", "=", "np", ".", "array", "(", "[", "-", "5.0", "]", "*", "D", ")", "\n", "maxs", "=", "np", ".", "array", "(", "[", "5.0", "]", "*", "D", ")", "\n", "\n", "cont", "=", "tq", ".", "Container", "(", "X", ",", "y", ",", "mins", "=", "mins", ",", "maxs", "=", "maxs", ")", "\n", "cont", ".", "name", "=", "\"empty_container\"", "\n", "return", "cont", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.conftest.boundary_container": [[41, 56], ["pytest.fixture", "numpy.array", "numpy.array", "numpy.array", "numpy.ones", "treeQuadrature.Container"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", "params", "=", "TESTING_DIMS", ")", "\n", "def", "boundary_container", "(", "request", ")", ":", "\n", "    ", "\"\"\"container with samples on corners of container\"\"\"", "\n", "\n", "D", "=", "request", ".", "param", "\n", "\n", "mins", "=", "np", ".", "array", "(", "[", "-", "5.0", "]", "*", "D", ")", "\n", "maxs", "=", "np", ".", "array", "(", "[", "5.0", "]", "*", "D", ")", "\n", "\n", "X", "=", "np", ".", "array", "(", "[", "mins", ",", "maxs", "]", ")", "\n", "y", "=", "np", ".", "ones", "(", "shape", "=", "(", "2", ",", "1", ")", ")", "\n", "\n", "cont", "=", "tq", ".", "Container", "(", "X", ",", "y", ",", "mins", "=", "mins", ",", "maxs", "=", "maxs", ")", "\n", "cont", ".", "name", "=", "\"boundary_container\"", "\n", "return", "cont", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.conftest.closed_container": [[58, 72], ["pytest.fixture", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "treeQuadrature.Container"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", "params", "=", "TESTING_DIMS", ")", "\n", "def", "closed_container", "(", "request", ")", ":", "\n", "    ", "\"\"\"container with 0 volume\"\"\"", "\n", "\n", "D", "=", "request", ".", "param", "\n", "X", "=", "np", ".", "array", "(", "[", "[", "0.0", "]", "*", "D", ",", "[", "0.0", "]", "*", "D", "]", ")", "\n", "y", "=", "np", ".", "array", "(", "[", "[", "1.0", "]", ",", "[", "1.0", "]", "]", ")", "\n", "\n", "mins", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "D", ")", "\n", "maxs", "=", "np", ".", "array", "(", "[", "0.0", "]", "*", "D", ")", "\n", "\n", "cont", "=", "tq", ".", "Container", "(", "X", ",", "y", ",", "mins", "=", "mins", ",", "maxs", "=", "maxs", ")", "\n", "cont", ".", "name", "=", "\"closed_container\"", "\n", "return", "cont", "\n", "\n"]], "home.repos.pwc.inspect_result.thomfoster_treeQuadrature.tests.conftest.container": [[74, 92], ["pytest.fixture"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", "params", "=", "[", "\n", "'simple_container'", ",", "\n", "'empty_container'", ",", "\n", "'closed_container'", "\n", "]", ")", "\n", "def", "container", "(", "request", ",", "simple_container", ",", "empty_container", ",", "closed_container", ",", "boundary_container", ")", ":", "\n", "    ", "\"\"\"\n    Pretty hacky \"Meta\" container to allow the parametrization of multiple containers.\n    See https://github.com/pytest-dev/pytest/issues/349 for more answers.\n    \"\"\"", "\n", "switch", "=", "{", "\n", "\"simple_container\"", ":", "simple_container", ",", "\n", "\"empty_container\"", ":", "empty_container", ",", "\n", "\"closed_container\"", ":", "closed_container", ",", "\n", "\"boundary_container\"", ":", "boundary_container", "\n", "}", "\n", "\n", "return", "switch", "[", "request", ".", "param", "]", "", "", ""]]}