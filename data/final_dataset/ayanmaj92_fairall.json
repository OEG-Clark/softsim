{"home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.plotting.plot_distribution": [[11, 30], ["matplotlib.hist", "zip", "isinstance", "kwargs.keys", "kwargs.pop", "matplotlib.hist", "numpy.ones_like", "float", "len", "numpy.ones_like", "float", "d.tolist", "len", "d.tolist", "len", "len"], "function", ["None"], ["def", "plot_distribution", "(", "data", ",", "discrete", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Plots the values according to whether the distribution is discrete or continuous (1-dimensional)\n    \"\"\"", "\n", "if", "discrete", ":", "\n", "        ", "if", "not", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "weights", "=", "np", ".", "ones_like", "(", "data", "[", "0", "]", ")", "/", "float", "(", "len", "(", "data", "[", "0", "]", ")", ")", "\n", "weights", "=", "[", "weights", "]", "*", "len", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "np", ".", "ones_like", "(", "data", ")", "/", "float", "(", "len", "(", "data", ")", ")", "\n", "", "plt", ".", "hist", "(", "[", "d", ".", "tolist", "(", ")", "for", "d", "in", "data", "]", ",", "alpha", "=", "0.5", ",", "weights", "=", "weights", ",", "**", "kwargs", ")", "# bins=data[0].unique(), **kwargs)", "\n", "", "else", ":", "\n", "        ", "if", "'color'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "            ", "colors", "=", "kwargs", ".", "pop", "(", "'color'", ")", "\n", "", "else", ":", "\n", "            ", "colors", "=", "[", "None", "]", "*", "len", "(", "data", ")", "\n", "\n", "", "for", "d", ",", "color", "in", "zip", "(", "data", ",", "colors", ")", ":", "\n", "            ", "plt", ".", "hist", "(", "d", ".", "tolist", "(", ")", ",", "bins", "=", "100", ",", "alpha", "=", "0.5", ",", "density", "=", "True", ",", "color", "=", "color", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.plotting.plot_together": [[32, 60], ["prob_model.eval", "enumerate", "range", "matplotlib.suptitle", "matplotlib.savefig", "matplotlib.close", "len", "str", "str", "plotting.plot_distribution", "matplotlib.legend", "str", "plotting.plot_distribution", "plotting.plot_distribution", "torch.log", "len", "torch.argmax", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.plotting.plot_distribution", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.plotting.plot_distribution", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.plotting.plot_distribution"], ["", "", "", "def", "plot_together", "(", "all_data", ",", "prob_model", ",", "title", ",", "path", ",", "dims", "=", "None", ",", "legend", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "prob_model", ".", "eval", "(", ")", "\n", "colors", "=", "[", "'r'", ",", "'b'", ",", "'g'", "]", "\n", "\n", "if", "dims", "is", "None", ":", "\n", "        ", "dims", "=", "range", "(", "len", "(", "prob_model", ")", ")", "\n", "\n", "", "pos", "=", "0", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "prob_model", ")", ":", "\n", "        ", "if", "str", "(", "d", ")", "==", "'bernoulli*'", ":", "\n", "# not using lipschitz scaling, so we should ideally never be here.", "\n", "            ", "d", ".", "is_discrete", "=", "True", "\n", "", "if", "str", "(", "d", ")", "==", "'lognormal'", ":", "\n", "            ", "plot_distribution", "(", "[", "torch", ".", "log", "(", "d", "[", "...", ",", "pos", "]", ")", "for", "d", "in", "all_data", "]", ",", "prob_model", "[", "pos", "]", ".", "is_discrete", ",", "\n", "color", "=", "colors", "[", ":", "len", "(", "all_data", ")", "]", ",", "**", "kwargs", ")", "\n", "", "elif", "'categorical'", "in", "str", "(", "d", ")", ":", "\n", "            ", "plot_distribution", "(", "[", "torch", ".", "argmax", "(", "data", "[", "...", ",", "pos", ":", "pos", "+", "d", ".", "domain_size", "]", ",", "dim", "=", "-", "1", ")", "for", "data", "in", "all_data", "]", ",", "\n", "d", ".", "is_discrete", ",", "color", "=", "colors", "[", ":", "len", "(", "all_data", ")", "]", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "plot_distribution", "(", "[", "d", "[", "...", ",", "pos", "]", "for", "d", "in", "all_data", "]", ",", "d", ".", "is_discrete", ",", "color", "=", "colors", "[", ":", "len", "(", "all_data", ")", "]", ",", "**", "kwargs", ")", "\n", "\n", "", "plt", ".", "suptitle", "(", "title", ")", "\n", "if", "legend", ":", "\n", "            ", "plt", ".", "legend", "(", "legend", ")", "\n", "\n", "", "plt", ".", "savefig", "(", "f'{path}_{i}'", "if", "len", "(", "dims", ")", ">", "1", "else", "path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "pos", "+=", "d", ".", "domain_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.plotting.plot_z": [[62, 103], ["torch.is_tensor", "all_data[].unsqueeze().int().numpy", "numpy.concatenate", "df_s0.sample.sample", "df_s1.sample.sample", "pandas.concat", "pd.DataFrame.groupby", "matplotlib.suptitle", "matplotlib.legend", "matplotlib.savefig", "matplotlib.close", "pandas.DataFrame", "min", "min", "z.size", "all_data[].unsqueeze().int", "pandas.DataFrame", "len", "len", "matplotlib.scatter", "matplotlib.scatter", "matplotlib.scatter", "all_data[].unsqueeze", "pandas.DataFrame", "pandas.DataFrame", "numpy.zeros", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample"], ["", "", "def", "plot_z", "(", "all_data", ",", "z", ",", "title", ",", "path", ")", ":", "\n", "    ", "if", "torch", ".", "is_tensor", "(", "z", ")", ":", "# when we do not use PCA, i.e. latent-size == 2", "\n", "        ", "dim_z", "=", "z", ".", "size", "(", ")", "[", "1", "]", "\n", "", "else", ":", "# when we use PCA, we return numpy", "\n", "        ", "dim_z", "=", "z", ".", "shape", "[", "1", "]", "\n", "\n", "", "assert", "dim_z", "<=", "2", ",", "\"can only plot z, if its dim is <=2\"", "\n", "\n", "s", "=", "all_data", "[", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", "\n", "data", "=", "np", ".", "concatenate", "(", "(", "z", ",", "s", ")", ",", "axis", "=", "1", ")", "\n", "\n", "if", "dim_z", "==", "2", ":", "\n", "        ", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "data", ",", "columns", "=", "[", "\"z0\"", ",", "\"z1\"", ",", "\"s\"", "]", ")", "\n", "", "elif", "dim_z", "==", "1", ":", "\n", "        ", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "data", ",", "columns", "=", "[", "\"z0\"", ",", "\"s\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "IndexError", "\n", "\n", "# df that only contains those rows where s=0", "\n", "", "df_s0", "=", "df", "[", "df", "[", "'s'", "]", "==", "-", "1", "]", "\n", "df_s1", "=", "df", "[", "df", "[", "'s'", "]", "==", "1", "]", "\n", "# dont plot all data, otherwise to clotted", "\n", "# Return a random sample of items from an axis of object.", "\n", "df_s0", "=", "df_s0", ".", "sample", "(", "min", "(", "1250", ",", "len", "(", "df_s0", ")", ")", ")", "\n", "df_s1", "=", "df_s1", ".", "sample", "(", "min", "(", "1250", ",", "len", "(", "df_s1", ")", ")", ")", "\n", "# df has two columns, one with s=0, one s=1", "\n", "df", "=", "pd", ".", "concat", "(", "[", "df_s0", ",", "df_s1", "]", ")", "\n", "groups", "=", "df", ".", "groupby", "(", "\"s\"", ")", "\n", "for", "name", ",", "group", "in", "groups", ":", "\n", "        ", "if", "dim_z", "==", "2", ":", "\n", "            ", "plt", ".", "scatter", "(", "group", "[", "\"z0\"", "]", ",", "group", "[", "\"z1\"", "]", ",", "label", "=", "name", ",", "s", "=", "20", ",", "alpha", "=", "0.3", ")", "\n", "", "else", ":", "\n", "            ", "if", "name", "==", "0.0", ":", "\n", "                ", "plt", ".", "scatter", "(", "group", "[", "\"z0\"", "]", ",", "pd", ".", "DataFrame", "(", "np", ".", "zeros", "(", "group", "[", "\"z0\"", "]", ".", "shape", ")", ")", ",", "label", "=", "name", ",", "s", "=", "20", ",", "alpha", "=", "0.3", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "scatter", "(", "group", "[", "\"z0\"", "]", ",", "pd", ".", "DataFrame", "(", "np", ".", "ones", "(", "group", "[", "\"z0\"", "]", ".", "shape", ")", ")", ",", "label", "=", "name", ",", "s", "=", "20", ",", "alpha", "=", "0.3", ")", "\n", "\n", "", "", "", "plt", ".", "suptitle", "(", "title", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.__init__": [[53, 56], ["probabilistc_model._get_distributions", "functools.reduce", "enumerate", "range"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model._get_distributions"], ["    ", "def", "__init__", "(", "self", ",", "dists_names", ")", ":", "\n", "        ", "self", ".", "dists", "=", "_get_distributions", "(", "dists_names", ")", "\n", "self", ".", "indexes", "=", "reduce", "(", "list", ".", "__add__", ",", "[", "[", "[", "i", ",", "j", "]", "for", "j", "in", "range", "(", "d", ".", "num_dists", ")", "]", "for", "i", ",", "d", "in", "enumerate", "(", "self", ".", "dists", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.weights": [[61, 68], ["isinstance", "zip", "values.detach().tolist.detach().tolist.detach().tolist", "values.detach().tolist.detach().tolist.detach"], "methods", ["None"], ["", "@", "weights", ".", "setter", "\n", "def", "weights", "(", "self", ",", "values", ")", ":", "\n", "        ", "if", "isinstance", "(", "values", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "values", "=", "values", ".", "detach", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "for", "w", ",", "d", "in", "zip", "(", "values", ",", "self", ")", ":", "\n", "            ", "d", ".", "weight", "=", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.scale_data": [[69, 74], ["enumerate", "torch.stack", "new_x.append"], "methods", ["None"], ["", "", "def", "scale_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "self", ")", ":", "\n", "            ", "new_x", ".", "append", "(", "d", ">>", "x", "[", ":", ",", "i", "]", ")", "\n", "", "return", "torch", ".", "stack", "(", "new_x", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.__rshift__": [[75, 77], ["probabilistc_model.ProbabilisticModel.scale_data"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.scale_data"], ["", "def", "__rshift__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "scale_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.params_from_data": [[78, 85], ["enumerate", "probabilistc_model.ProbabilisticModel.gathered_index", "d.params_from_data", "torch.masked_select", "mask[].all"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.gathered_index", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data"], ["", "def", "params_from_data", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "params", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "self", ")", ":", "\n", "            ", "pos", "=", "self", ".", "gathered_index", "(", "i", ")", "\n", "data", "=", "x", "[", "...", ",", "i", "]", "if", "mask", "is", "None", "or", "mask", "[", "...", ",", "pos", "]", ".", "all", "(", ")", "else", "torch", ".", "masked_select", "(", "x", "[", "...", ",", "i", "]", ",", "mask", "[", "...", ",", "pos", "]", ")", "\n", "params", "+=", "d", ".", "params_from_data", "(", "data", ")", "\n", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.preprocess_data": [[86, 95], ["enumerate", "range", "torch.stack", "dist_i.preprocess_data", "len", "x.size"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.preprocess_data"], ["", "def", "preprocess_data", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "new_x", "=", "[", "]", "\n", "for", "i", ",", "dist_i", "in", "enumerate", "(", "self", ".", "dists", ")", ":", "\n", "            ", "new_x", "+=", "dist_i", ".", "preprocess_data", "(", "x", "[", ":", ",", "i", "]", ",", "mask", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dists", ")", ",", "x", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "new_x", "+=", "[", "x", "[", ":", ",", "i", "]", "]", "\n", "\n", "", "return", "torch", ".", "stack", "(", "new_x", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.gathered_index": [[96, 98], ["None"], "methods", ["None"], ["", "def", "gathered_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "indexes", "[", "index", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.__len__": [[99, 101], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.__getitem__": [[102, 107], ["isinstance", "probabilistc_model.ProbabilisticModel.__getitem__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodFlatten.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", "->", "Base", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "int", ")", ":", "\n", "            ", "return", "self", ".", "__getitem__", "(", "self", ".", "indexes", "[", "item", "]", ")", "\n", "\n", "", "return", "self", ".", "dists", "[", "item", "[", "0", "]", "]", "[", "item", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model.ProbabilisticModel.gathered": [[108, 163], ["GatherProbabilisticModel", "len", "sum", "range", "isinstance", "zip", "enumerate", "enumerate", "enumerate", "torch.stack", "probabilistc_model.ProbabilisticModel.scale_data", "values.detach().tolist.detach().tolist.detach().tolist", "new_x.append", "values.detach().tolist.detach().tolist.detach", "list", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.scale_data"], ["", "@", "property", "\n", "def", "gathered", "(", "self", ")", ":", "\n", "        ", "class", "GatherProbabilisticModel", "(", "object", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "                ", "self", ".", "model", "=", "model", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "                ", "return", "len", "(", "self", ".", "model", ".", "dists", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "                ", "offset", "=", "sum", "(", "[", "d", ".", "num_dists", "for", "d", "in", "self", ".", "model", ".", "dists", "[", ":", "item", "]", "]", ")", "\n", "idxs", "=", "range", "(", "offset", ",", "offset", "+", "self", ".", "model", ".", "dists", "[", "item", "]", ".", "num_dists", ")", "\n", "\n", "return", "idxs", ",", "self", ".", "model", ".", "dists", "[", "item", "]", "\n", "\n", "", "@", "property", "\n", "def", "weights", "(", "self", ")", ":", "\n", "                ", "return", "[", "d", ".", "weight", "for", "[", "_", ",", "d", "]", "in", "self", "]", "\n", "\n", "", "@", "weights", ".", "setter", "\n", "def", "weights", "(", "self", ",", "values", ")", ":", "\n", "                ", "if", "isinstance", "(", "values", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "values", "=", "values", ".", "detach", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "for", "w", ",", "[", "_", ",", "d", "]", "in", "zip", "(", "values", ",", "self", ")", ":", "\n", "                    ", "d", ".", "weight", "=", "w", "\n", "\n", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "                ", "offset", "=", "0", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "self", ".", "model", ".", "dists", ")", ":", "\n", "                    ", "yield", "list", "(", "range", "(", "offset", ",", "offset", "+", "d", ".", "num_dists", ")", ")", ",", "d", "\n", "offset", "+=", "d", ".", "num_dists", "\n", "\n", "", "", "def", "get_param_names", "(", "self", ")", ":", "\n", "                ", "names", "=", "[", "]", "\n", "for", "i", ",", "dist_i", "in", "enumerate", "(", "self", ".", "model", ".", "dists", ")", ":", "\n", "                    ", "if", "dist_i", ".", "num_dists", ">", "1", "or", "dist_i", ".", "size_params", "[", "0", "]", ">", "1", ":", "\n", "                        ", "param_name", "=", "dist_i", ".", "real_parameters", "[", "0", "]", "\n", "num_classes", "=", "dist_i", ".", "size_params", "[", "0", "]", "if", "dist_i", ".", "num_dists", "==", "1", "else", "dist_i", ".", "num_dists", "\n", "names", "+=", "[", "f'{dist_i}_{param_name}{j}_dim{i}'", "for", "j", "in", "range", "(", "num_classes", ")", "]", "\n", "", "else", ":", "\n", "                        ", "names", "+=", "[", "f'{dist_i}_{v}_dim{i}'", "for", "v", "in", "dist_i", ".", "real_parameters", "]", "\n", "\n", "", "", "return", "names", "\n", "\n", "", "def", "scale_data", "(", "self", ",", "x", ")", ":", "\n", "                ", "new_x", "=", "[", "]", "\n", "for", "i", ",", "[", "_", ",", "d", "]", "in", "enumerate", "(", "self", ")", ":", "\n", "                    ", "new_x", ".", "append", "(", "d", ">>", "x", "[", ":", ",", "i", "]", ")", "\n", "", "return", "torch", ".", "stack", "(", "new_x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "def", "__rshift__", "(", "self", ",", "data", ")", ":", "\n", "                ", "return", "self", ".", "scale_data", "(", "data", ")", "\n", "\n", "", "", "return", "GatherProbabilisticModel", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.probabilistc_model._get_distributions": [[14, 50], ["enumerate", "name.find", "int", "name.find", "utils.distributions.get_distribution_by_name", "utils.distributions.get_distribution_by_name", "utils.distributions.get_distribution_by_name", "utils.distributions.get_distribution_by_name", "utils.distributions.get_distribution_by_name", "utils.distributions.get_distribution_by_name"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name"], ["def", "_get_distributions", "(", "dists_names", ")", "->", "List", "[", "Base", "]", ":", "\n", "    ", "dists", "=", "[", "]", "\n", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "dists_names", ")", ":", "\n", "        ", "is_gammatrick", "=", "name", "[", "-", "1", "]", "==", "'*'", "\n", "is_bernoullitrick", "=", "name", "[", "-", "1", "]", "==", "'+'", "\n", "\n", "if", "is_gammatrick", "or", "is_bernoullitrick", ":", "\n", "            ", "name", "=", "name", "[", ":", "-", "1", "]", "\n", "\n", "", "if", "'categorical'", "in", "name", "or", "'ordinal'", "in", "name", ":", "\n", "            ", "pos", "=", "name", ".", "find", "(", "'('", ")", "\n", "num_probs", "=", "int", "(", "name", "[", "pos", "+", "1", ":", "name", ".", "find", "(", "')'", ")", "]", ")", "\n", "name", "=", "name", "[", ":", "pos", "]", "\n", "", "else", ":", "\n", "            ", "num_probs", "=", "1", "\n", "\n", "", "if", "is_gammatrick", ":", "\n", "            ", "if", "num_probs", "==", "1", ":", "\n", "                ", "dist_i", "=", "get_distribution_by_name", "(", "'gammatrick'", ")", "[", "name", "]", "(", ")", "\n", "", "else", ":", "\n", "                ", "dist_i", "=", "get_distribution_by_name", "(", "'gammatrick'", ")", "[", "name", "]", "(", "num_probs", ")", "\n", "", "", "elif", "is_bernoullitrick", ":", "\n", "            ", "if", "num_probs", "==", "1", ":", "\n", "                ", "dist_i", "=", "get_distribution_by_name", "(", "'bernoullitrick'", ")", "[", "name", "]", "(", ")", "\n", "", "else", ":", "\n", "                ", "dist_i", "=", "get_distribution_by_name", "(", "'bernoullitrick'", ")", "[", "name", "]", "(", "num_probs", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "num_probs", "==", "1", ":", "\n", "                ", "dist_i", "=", "get_distribution_by_name", "(", "name", ")", "(", ")", "\n", "", "else", ":", "\n", "                ", "dist_i", "=", "get_distribution_by_name", "(", "name", ")", "(", "num_probs", ")", "\n", "\n", "", "", "dists", "+=", "[", "dist_i", "]", "\n", "\n", "", "return", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.FzNet.__init__": [[35, 62], ["torch.Module.__init__", "policies.set_seed", "policies.FzNet.model.apply", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.dense.MLPModule", "functools.partial", "torch.Linear", "torch.Linear", "torch.Linear", "type", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.fill_", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed"], ["    ", "def", "__init__", "(", "self", ",", "clf_list", ",", "act", ",", "drop_rate", ",", "model_type", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n        Neural network for FZ policy (Policy model that takes Z as input)\n        @param clf_list: hidden layers' list\n        @param act: activation function\n        @param drop_rate: dropout rate\n        @param model_type: NN model or LR (logistic regression)\n        @param seed: random seed\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "set_seed", "(", "seed", ")", "\n", "if", "model_type", "==", "Cte", ".", "MODEL_LR", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "clf_list", "[", "0", "]", ",", "1", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "MLPModule", "(", "h_dim_list", "=", "clf_list", ",", "\n", "activ_name", "=", "act", ",", "\n", "bn", "=", "False", ",", "\n", "drop_rate", "=", "drop_rate", ",", "\n", "net_type", "=", "'clf'", ")", "\n", "\n", "", "def", "init_weights", "(", "m", ",", "gain", "=", "1.", ")", ":", "\n", "            ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.01", ")", "\n", "", "", "self", ".", "model", ".", "apply", "(", "partial", "(", "init_weights", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.FzNet.forward": [[63, 65], ["policies.FzNet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.Policy.__init__": [[68, 71], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "thresh", "=", "None", "\n", "self", ".", "pol_sampler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.Policy.__call__": [[72, 74], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.Policy.get_new_mask": [[75, 87], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size", "torch.bernoulli().long().flatten", "torch.bernoulli().long().flatten", "torch.bernoulli().long().flatten", "torch.bernoulli().long().flatten", "torch.bernoulli().long().flatten", "torch.bernoulli().long().flatten", "torch.bernoulli().long().flatten", "torch.bernoulli().long().flatten", "torch.bernoulli().long().flatten", "torch.bernoulli().long", "torch.bernoulli().long", "torch.bernoulli().long", "torch.bernoulli().long", "torch.bernoulli().long", "torch.bernoulli().long", "torch.bernoulli().long", "torch.bernoulli().long", "torch.bernoulli().long", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_new_mask", "(", "self", ",", "old_mask", ",", "prob_u", ")", ":", "\n", "        ", "if", "self", ".", "pol_sampler", "==", "'DET'", ":", "\n", "            ", "pred_u", "=", "(", "prob_u", ">=", "self", ".", "thresh", ")", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "", "elif", "self", ".", "pol_sampler", "==", "'LOG'", ":", "\n", "            ", "pred_u", "=", "torch", ".", "bernoulli", "(", "prob_u", ")", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "new_mask", "=", "torch", ".", "zeros_like", "(", "old_mask", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "# Apply predicted u to change the mask.", "\n", "new_mask", "[", "pred_u", "==", "1", ",", ":", "]", "=", "torch", ".", "ones", "(", "new_mask", ".", "size", "(", "1", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyQxs.__init__": [[90, 98], ["policies.Policy.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Policy class for classifier policy model\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seed", "=", "config", "[", "\"seed\"", "]", "\n", "self", ".", "thresh", "=", "config", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"costs\"", "]", "\n", "self", ".", "pol_sampler", "=", "config", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"pol_sampler\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyQxs.__call__": [[99, 116], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "policies.set_seed", "policies.PolicyQxs.get_new_mask", "model.classify"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.Policy.get_new_mask", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.classify"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__call__", "(", "self", ",", "model", ",", "data", ",", "old_mask", ")", ":", "\n", "        ", "\"\"\"\n        :param model: SSCVAE model that will be used to generate policy.\n        :param data: Data array\n        :param old_mask: Mask from data loader\n        :return: new mask\n        \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "xu_", "=", "data", "[", ":", ",", ":", "-", "1", "]", "\n", "s_", "=", "data", "[", ":", ",", "-", "1", "]", "\n", "classifier_input", "=", "[", "xu_", ",", "s_", "]", "\n", "mask_unsup", "=", "torch", ".", "ones_like", "(", "data", ")", "\n", "prob_u", "=", "sigmoid", "(", "model", ".", "classify", "(", "*", "classifier_input", ",", "mask_unsup", ")", ")", "\n", "set_seed", "(", "self", ".", "seed", ")", "\n", "new_mask", "=", "self", ".", "get_new_mask", "(", "old_mask", ",", "prob_u", ")", "\n", "return", "new_mask", ",", "prob_u", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyQxs.__str__": [[117, 119], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Policy U ~ Q(X,S)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyPzs.__init__": [[122, 127], ["policies.Policy.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "thresh", "=", "config", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"costs\"", "]", "\n", "self", ".", "pol_sampler", "=", "config", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"pol_sampler\"", "]", "\n", "self", ".", "seed", "=", "config", "[", "\"seed\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyPzs.__call__": [[128, 146], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "model.phase_2_policy_helper", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "bern_p.reshape.reshape.reshape", "policies.set_seed", "policies.PolicyPzs.get_new_mask"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.phase_2_policy_helper", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.Policy.get_new_mask"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__call__", "(", "self", ",", "model", ",", "data", ",", "old_mask", ",", "is_sup", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param model: SSCVAE model that will be used to generate policy.\n        :param data: Data array\n        :param old_mask: Mask from data loader\n        :param is_sup: is supervised data flag\n        :return: new mask\n        \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "# The data we need to apply our policy to is unsupervised.", "\n", "decoder_u", ",", "_", ",", "theta", "=", "model", ".", "phase_2_policy_helper", "(", "data", ",", "is_sup", "=", "is_sup", ")", "\n", "bern_p", "=", "sigmoid", "(", "theta", "[", ":", ",", "-", "1", "]", ")", "\n", "bern_p", "=", "bern_p", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "set_seed", "(", "self", ".", "seed", ")", "\n", "new_mask", "=", "self", ".", "get_new_mask", "(", "old_mask", ",", "bern_p", ")", "\n", "return", "new_mask", ",", "bern_p", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyPzs.__str__": [[147, 149], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Policy U ~ P(z,S)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyFz.__init__": [[152, 180], ["policies.Policy.__init__", "clf_list.extend", "clf_list.append", "policies.FzNet", "policies.PolicyQxs", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "policies.PolicyFz.pol_model.parameters"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.parameters"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "epochs", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seed", "=", "config", "[", "\"seed\"", "]", "\n", "cfg", "=", "config", "\n", "self", ".", "thresh", "=", "cfg", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"costs\"", "]", "\n", "inp_size", "=", "cfg", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"latent_size\"", "]", "\n", "h_dim", "=", "cfg", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"h_dim_list_clf\"", "]", "\n", "act", "=", "cfg", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"act_name\"", "]", "\n", "drop_rate", "=", "cfg", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"drop_rate_clf\"", "]", "\n", "self", ".", "costs", "=", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'costs'", "]", "\n", "self", ".", "method", "=", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'fz_method'", "]", "\n", "self", ".", "pol_sampler", "=", "config", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"pol_sampler\"", "]", "\n", "\n", "# Defining model", "\n", "likelihood_u_params_size", "=", "1", "\n", "clf_list", "=", "[", "inp_size", "]", "\n", "clf_list", ".", "extend", "(", "h_dim", ")", "\n", "clf_list", ".", "append", "(", "likelihood_u_params_size", ")", "\n", "mod_type", "=", "cfg", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "\"model_type\"", "]", "\n", "self", ".", "pol_model", "=", "FzNet", "(", "clf_list", ",", "act", ",", "drop_rate", ",", "mod_type", ",", "cfg", "[", "\"seed\"", "]", ")", "\n", "if", "epochs", "is", "None", ":", "\n", "            ", "self", ".", "epochs", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", "\n", "", "else", ":", "# Will use this only during warmup, when we train this model AFTER training VAE.", "\n", "            ", "self", ".", "epochs", "=", "epochs", "\n", "", "self", ".", "batch_size", "=", "cfg", "[", "\"dataset\"", "]", "[", "\"params2\"", "]", "[", "\"batch_size\"", "]", "\n", "self", ".", "pol_fitted", "=", "False", "\n", "self", ".", "qxs_helper", "=", "PolicyQxs", "(", "cfg", ")", "\n", "self", ".", "opt", "=", "Adam", "(", "self", ".", "pol_model", ".", "parameters", "(", ")", ",", "lr", "=", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", "[", "'learning_rate'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyFz.train_policy": [[181, 266], ["model.eval", "policies.set_seed", "train_z.detach.detach.detach", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "policies.PolicyFz.pol_model.train", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "model.phase_2_policy_helper", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "enumerate", "len", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "model.phase_2_policy_helper", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "bern_p.reshape.reshape.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "idx_sup.squeeze", "idx_sup.squeeze", "len", "policies.PolicyFz.opt.zero_grad", "policies.PolicyFz.pol_model", "policies.compute_loss", "compute_loss.backward", "policies.PolicyFz.opt.step", "print", "idx.squeeze", "idx.squeeze", "policies.PolicyFz.qxs_helper", "len", "len", "loss_print.item"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.phase_2_policy_helper", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.phase_2_policy_helper", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.compute_loss", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.step"], ["", "def", "train_policy", "(", "self", ",", "model", ",", "data", ",", "mask", ",", "prob1", ")", ":", "\n", "        ", "\"\"\"\n        :param model: SSCVAE model that we need for training policy.\n        :param data: data for training policy\n        :param mask: mask that might be needed to filter labeled data\n        :param prob1: IPS weights, will need in some cases\n        :return: None (we only internally train the pol_model)\n        Note: We can have different approaches here:\n        a. Use both labeled and unlabeled, all labels clf output --> (CLF)\n        b. (Ours, used in main paper) Use both labeled and unlabeled, all labels dec output --> (DEC)\n        c. Use only labeled, then need IPS weights in loss! --> (LAB)\n        \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "set_seed", "(", "self", ".", "seed", ")", "\n", "# 1. Get z and u for training. Depends on which method we will use!!", "\n", "idx_sup", "=", "(", "mask", "[", ":", ",", "-", "1", "]", "==", "1", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "idx_unsup", "=", "(", "mask", "[", ":", ",", "-", "1", "]", "==", "0", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "\n", "if", "self", ".", "method", "in", "[", "Cte", ".", "FZ_DEC", ",", "Cte", ".", "FZ_CLF", "]", ":", "\n", "# Get labeled and unlabeled idx", "\n", "            ", "z_", ",", "u_", "=", "torch", ".", "Tensor", "(", ")", ",", "torch", ".", "Tensor", "(", ")", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "[", "idx_unsup", ",", "idx_sup", "]", ")", ":", "\n", "                ", "if", "j", "==", "0", ":", "\n", "                    ", "is_sup", "=", "False", "\n", "", "else", ":", "\n", "                    ", "is_sup", "=", "True", "\n", "", "if", "len", "(", "idx", ")", ">", "0", ":", "\n", "                    ", "data_idx", "=", "torch", ".", "index_select", "(", "data", ",", "0", ",", "idx", ".", "squeeze", "(", ")", ")", "\n", "mask_idx", "=", "torch", ".", "index_select", "(", "mask", ",", "0", ",", "idx", ".", "squeeze", "(", ")", ")", "\n", "u_label_idx", ",", "z_idx", ",", "theta_idx", "=", "model", ".", "phase_2_policy_helper", "(", "data_idx", ",", "is_sup", "=", "is_sup", ")", "\n", "bern_p", "=", "sigmoid", "(", "theta_idx", "[", ":", ",", "-", "1", "]", ")", "\n", "bern_p", "=", "bern_p", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "u_label_idx", "=", "(", "bern_p", ">=", "self", ".", "thresh", ")", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "if", "self", ".", "method", "==", "Cte", ".", "FZ_CLF", ":", "\n", "# Here we need to get classifier U", "\n", "                        ", "_", ",", "prob_u_idx", "=", "self", ".", "qxs_helper", "(", "model", ",", "data_idx", ",", "mask_idx", ")", "\n", "u_label_idx", "=", "(", "prob_u_idx", ">=", "self", ".", "thresh", ")", ".", "long", "(", ")", ".", "flatten", "(", ")", "\n", "# if is_sup and FZ_TRAIN_LABEL_ONLY_UNLABELED:", "\n", "#     u_label_idx = data_idx[:, -2].long().flatten()", "\n", "", "z_", "=", "torch", ".", "cat", "(", "[", "z_", ",", "z_idx", "]", ",", "0", ")", "\n", "u_", "=", "torch", ".", "cat", "(", "[", "u_", ",", "u_label_idx", "]", ",", "0", ")", "\n", "", "", "rand_idx", "=", "torch", ".", "randperm", "(", "z_", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "train_z", "=", "z_", "[", "rand_idx", "]", "\n", "u_label", "=", "u_", "[", "rand_idx", "]", "\n", "sample_wgt", "=", "None", "\n", "", "elif", "self", ".", "method", "in", "[", "Cte", ".", "FZ_LAB", "]", ":", "\n", "# method uses only labeled data!", "\n", "            ", "x_sup", "=", "torch", ".", "index_select", "(", "data", ",", "0", ",", "idx_sup", ".", "squeeze", "(", ")", ")", "\n", "u_label", "=", "x_sup", "[", ":", ",", "-", "2", "]", "\n", "if", "idx_sup", ".", "shape", "[", "0", "]", "<", "1", ":", "\n", "                ", "if", "self", ".", "pol_fitted", "is", "False", ":", "\n", "                    ", "self", ".", "pol_fitted", "=", "True", "\n", "", "return", "\n", "", "_", ",", "train_z", ",", "_", "=", "model", ".", "phase_2_policy_helper", "(", "x_sup", ",", "is_sup", "=", "True", ")", "\n", "# Here as we use only labeled data, we would need the IPS weights.", "\n", "assert", "prob1", "is", "not", "None", ",", "\"If using only labeled data to train policy FZ, \"", "\"we need IPS weights! prob1 cannot be None!\"", "\n", "prob1_lab", "=", "torch", ".", "index_select", "(", "prob1", ",", "0", ",", "idx_sup", ".", "squeeze", "(", ")", ")", "\n", "sample_wgt", "=", "prob1_lab", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "sample_wgt", "is", "None", ":", "\n", "            ", "sample_wgt", "=", "torch", ".", "ones_like", "(", "prob1", ")", "\n", "# Detach to ensure that backward will work properly only for this network.", "\n", "", "train_z", "=", "train_z", ".", "detach", "(", ")", "\n", "dataset_", "=", "TensorDataset", "(", "train_z", ",", "u_label", ",", "sample_wgt", ")", "\n", "data_loader", "=", "DataLoader", "(", "dataset_", ",", "batch_size", "=", "len", "(", "dataset_", ")", "//", "3", "if", "len", "(", "dataset_", ")", ">=", "3", "else", "len", "(", "dataset_", ")", ",", "\n", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", "\n", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "self", ".", "pol_model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epochs", ")", ":", "\n", "                ", "loss_print", "=", "None", "\n", "for", "batch_num", ",", "batch", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                    ", "x", ",", "y", ",", "prob1", "=", "batch", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "out_logits", "=", "self", ".", "pol_model", "(", "x", ")", "\n", "loss", "=", "compute_loss", "(", "y", ",", "out_logits", ",", "prob1", ",", "self", ".", "costs", ")", "\n", "loss_print", "=", "loss", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "opt", ".", "step", "(", ")", "\n", "", "if", "loss_print", "is", "not", "None", ":", "\n", "                    ", "print", "(", "\"Training FZ || Epoch\"", ",", "epoch", "+", "1", ",", "\"|| Loss:\"", ",", "loss_print", ".", "item", "(", ")", ",", "\"||\"", ")", "\n", "", "", "", "self", ".", "pol_fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyFz.__call__": [[267, 289], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "model.phase_2_policy_helper", "policies.PolicyFz.pol_model.eval", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "policies.set_seed", "policies.PolicyFz.get_new_mask", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "policies.PolicyFz.pol_model", "torch.tensor.reshape", "torch.tensor.reshape", "torch.tensor.reshape"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.phase_2_policy_helper", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.Policy.get_new_mask"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "__call__", "(", "self", ",", "model", ",", "data", ",", "old_mask", ")", ":", "\n", "        ", "\"\"\"\n        :param model: SSCVAE model that will be used to generate policy\n        :param data: Data array\n        :param old_mask: Mask from data loader\n        :return: new mask\n        \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "# Training pol_model", "\n", "# 1. Get z for new data.", "\n", "_", ",", "new_z", ",", "_", "=", "model", ".", "phase_2_policy_helper", "(", "data", ",", "is_sup", "=", "False", ")", "\n", "# 2. Predict u using policy model.", "\n", "self", ".", "pol_model", ".", "eval", "(", ")", "\n", "pred_proba_u", "=", "sigmoid", "(", "self", ".", "pol_model", "(", "new_z", ")", ")", "\n", "set_seed", "(", "self", ".", "seed", ")", "\n", "new_mask", "=", "self", ".", "get_new_mask", "(", "old_mask", ",", "pred_proba_u", ")", "\n", "# Ensuring numerical stability", "\n", "pred_proba_u", "+=", "1e-8", "\n", "pred_proba_u", "=", "torch", ".", "tensor", "(", "pred_proba_u", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "# 4. Return", "\n", "return", "new_mask", ",", "pred_proba_u", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyFz.__str__": [[290, 292], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Policy U ~ F(z) \"", "+", "str", "(", "self", ".", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyNA.__init__": [[296, 298], ["policies.Policy.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyNA.__call__": [[299, 301], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "old_mask", ",", "old_prob1", ")", ":", "\n", "        ", "return", "old_mask", ",", "old_prob1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyNA.__str__": [[302, 304], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Policy U ~ Pi_0\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.set_seed": [[20, 24], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.compute_loss": [[26, 32], ["u_true.unsqueeze.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.binary_cross_entropy_with_logits"], "function", ["None"], ["", "def", "compute_loss", "(", "u_true", ",", "u_prob_pred", ",", "ips_prob", ",", "cost", ")", ":", "\n", "    ", "u_true", "=", "u_true", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "p_wgt", "=", "torch", ".", "tensor", "(", "(", "1", "-", "cost", ")", "/", "cost", ")", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "u_prob_pred", ",", "u_true", ",", "weight", "=", "(", "cost", "/", "ips_prob", ")", ",", "\n", "reduction", "=", "\"mean\"", ",", "pos_weight", "=", "p_wgt", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.__init__": [[23, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.reset": [[26, 29], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.update": [[30, 33], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "update", "(", "self", ",", "old_value", ",", "value", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.compute": [[34, 37], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "compute", "(", "self", ",", "value", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.step": [[38, 41], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.started": [[42, 47], ["setattr", "setattr", "engine.state.metrics.update", "getattr", "getattr", "dict.fromkeys", "metrics.Metric.reset"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.reset"], ["", "def", "started", "(", "self", ",", "engine", ")", ":", "\n", "        ", "setattr", "(", "engine", ".", "state", ",", "'registers'", ",", "getattr", "(", "engine", ".", "state", ",", "'registers'", ",", "{", "}", ")", ")", "\n", "setattr", "(", "engine", ".", "state", ",", "'metrics'", ",", "getattr", "(", "engine", ".", "state", ",", "'metrics'", ",", "{", "}", ")", ")", "\n", "\n", "engine", ".", "state", ".", "metrics", ".", "update", "(", "dict", ".", "fromkeys", "(", "self", ".", "keys", ",", "self", ".", "reset", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.iteration_completed": [[48, 54], ["torch.no_grad", "metrics.Metric.step", "engine.state.registers.items", "metrics.Metric.update"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.step", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "iteration_completed", "(", "self", ",", "engine", ")", ":", "\n", "        ", "self", ".", "step", "(", ")", "\n", "for", "i", ",", "v", "in", "engine", ".", "state", ".", "registers", ".", "items", "(", ")", ":", "\n", "            ", "if", "i", "in", "self", ".", "keys", ":", "\n", "                ", "engine", ".", "state", ".", "metrics", "[", "i", "]", "=", "self", ".", "update", "(", "engine", ".", "state", ".", "metrics", "[", "i", "]", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.completed": [[55, 61], ["metrics.Metric.compute", "torch.is_tensor", "result.item.item.item", "len"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.compute"], ["", "", "", "def", "completed", "(", "self", ",", "engine", ")", ":", "\n", "        ", "for", "i", "in", "self", ".", "keys", ":", "\n", "            ", "result", "=", "self", ".", "compute", "(", "engine", ".", "state", ".", "metrics", "[", "i", "]", ")", "\n", "if", "torch", ".", "is_tensor", "(", "result", ")", "and", "len", "(", "result", ".", "shape", ")", "==", "0", ":", "\n", "                ", "result", "=", "result", ".", "item", "(", ")", "\n", "", "engine", ".", "state", ".", "metrics", "[", "i", "]", "=", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach": [[62, 75], ["engine.has_event_handler", "engine.add_event_handler", "engine.has_event_handler", "engine.add_event_handler", "engine.has_event_handler", "engine.add_event_handler", "engine.add_event_handler"], "methods", ["None"], ["", "", "def", "attach", "(", "self", ",", "engine", ",", "handler", "=", "None", ",", "*", "args", ",", "vars", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "engine", ".", "has_event_handler", "(", "self", ".", "completed", ",", "Events", ".", "EPOCH_COMPLETED", ")", ":", "\n", "            ", "engine", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "self", ".", "completed", ")", "\n", "\n", "", "if", "not", "engine", ".", "has_event_handler", "(", "self", ".", "started", ",", "Events", ".", "EPOCH_STARTED", ")", ":", "\n", "            ", "engine", ".", "add_event_handler", "(", "Events", ".", "EPOCH_STARTED", ",", "self", ".", "started", ")", "\n", "\n", "", "if", "not", "engine", ".", "has_event_handler", "(", "self", ".", "iteration_completed", ",", "Events", ".", "ITERATION_COMPLETED", ")", ":", "\n", "            ", "engine", ".", "add_event_handler", "(", "Events", ".", "ITERATION_COMPLETED", ",", "self", ".", "iteration_completed", ")", "\n", "\n", "", "if", "handler", "is", "not", "None", ":", "\n", "            ", "vars", "=", "vars", "or", "self", ".", "keys", "\n", "engine", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "handler", ",", "vars", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Average.__init__": [[78, 81], ["metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vars", ")", ":", "\n", "        ", "super", "(", "Average", ",", "self", ")", ".", "__init__", "(", "vars", ")", "\n", "self", ".", "total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Average.reset": [[82, 85], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total", "=", "0", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Average.step": [[86, 88], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "total", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Average.update": [[89, 91], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "old_value", ",", "value", ")", ":", "\n", "        ", "return", "old_value", "+", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Average.compute": [[92, 94], ["None"], "methods", ["None"], ["", "def", "compute", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "value", "/", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.__init__": [[97, 100], ["metrics.Metric.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vars", ")", ":", "\n", "        ", "super", "(", "NoAverage", ",", "self", ")", ".", "__init__", "(", "vars", ")", "\n", "self", ".", "total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.reset": [[101, 103], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.step": [[104, 106], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "self", ".", "total", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update": [[107, 109], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "old_value", ",", "value", ")", ":", "\n", "        ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.compute": [[110, 112], ["None"], "methods", ["None"], ["", "def", "compute", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.with_metaclass": [[11, 20], ["type.__new__", "abc.ABCMeta"], "function", ["None"], ["def", "with_metaclass", "(", "meta", ",", "*", "bases", ")", ":", "\n", "    ", "\"\"\"Create a base class with a metaclass.\"\"\"", "\n", "# This requires a bit of explanation: the basic idea is to make a dummy", "\n", "# metaclass for one level of class instantiation that replaces itself with", "\n", "# the actual metaclass.", "\n", "class", "Metaclass", "(", "meta", ")", ":", "\n", "        ", "def", "__new__", "(", "cls", ",", "name", ",", "this_bases", ",", "d", ")", ":", "\n", "            ", "return", "meta", "(", "name", ",", "bases", ",", "d", ")", "\n", "", "", "return", "type", ".", "__new__", "(", "Metaclass", ",", "'temporary_class'", ",", "(", ")", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy": [[114, 122], ["score.sum", "mask[].sum"], "function", ["None"], ["", "", "def", "compute_accuracy", "(", "y_true", ",", "decision", ",", "mask", ",", "prob", ")", ":", "\n", "    ", "score", "=", "(", "1", "-", "(", "decision", "-", "y_true", ")", "**", "2", ")", "\n", "\n", "if", "prob", "is", "not", "None", ":", "\n", "        ", "score", "*=", "(", "1", "/", "prob", ")", "\n", "\n", "", "score", "=", "score", ".", "sum", "(", ")", "/", "mask", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility": [[124, 133], ["score.sum", "mask[].sum"], "function", ["None"], ["", "def", "compute_utility", "(", "y_true", ",", "decision", ",", "mask", ",", "costs", ",", "prob", ")", ":", "\n", "\n", "    ", "score", "=", "(", "decision", "*", "(", "y_true", "-", "costs", ")", ")", "\n", "\n", "if", "prob", "is", "not", "None", ":", "\n", "        ", "score", "*=", "(", "1", "/", "prob", ")", "\n", "\n", "", "score", "=", "score", ".", "sum", "(", ")", "/", "mask", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.__init__": [[10, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "timer_dict", "=", "{", "}", "\n", "self", ".", "stop_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.tic": [[14, 16], ["time.time"], "methods", ["None"], ["", "def", "tic", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "timer_dict", "[", "name", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.toc": [[17, 22], ["time.time"], "methods", ["None"], ["", "def", "toc", "(", "self", ",", "name", ")", ":", "\n", "        ", "assert", "name", "in", "self", ".", "timer_dict", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "timer_dict", "[", "name", "]", "\n", "del", "self", ".", "timer_dict", "[", "name", "]", "\n", "return", "elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.stop": [[23, 25], ["time.time"], "methods", ["None"], ["", "def", "stop", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "stop_dict", "[", "name", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.resume": [[26, 33], ["time.time"], "methods", ["None"], ["", "def", "resume", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "not", "in", "self", ".", "timer_dict", ":", "\n", "            ", "del", "self", ".", "stop_dict", "[", "name", "]", "\n", "return", "\n", "", "elapsed", "=", "time", ".", "time", "(", ")", "-", "self", ".", "stop_dict", "[", "name", "]", "\n", "self", ".", "timer_dict", "[", "name", "]", "=", "self", ".", "timer_dict", "[", "name", "]", "+", "elapsed", "\n", "del", "self", ".", "stop_dict", "[", "name", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.trainer.create_trainer": [[14, 39], ["trainer.build_trainer", "metrics.NoAverage", "metrics.NoAverage.attach", "metrics.NoAverage.attach", "metrics.NoAverage.attach", "metrics.NoAverage.attach"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.trainer.build_trainer", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach"], ["def", "create_trainer", "(", "model", ",", "train_dataset", ",", "cfg", ")", ":", "\n", "    ", "\"\"\"\n    Creates the phase 1 trainer\n    @param model: VAE model\n    @param train_dataset: training dataset\n    @param cfg: config\n    @return: trainer and training, valid, test evaluators\n    \"\"\"", "\n", "max_epochs", "=", "cfg", "[", "'trainer1'", "]", "[", "'epochs'", "]", "\n", "trainer", ",", "train_evaluator", ",", "valid_evaluator", ",", "test_evaluator", "=", "build_trainer", "(", "model", ",", "train_dataset", ",", "\n", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", "[", "\n", "'learning_rate'", "]", ",", "cfg", "[", "'save_dir'", "]", ")", "\n", "metrics", "=", "[", "'-elbo'", ",", "'kl_z'", ",", "'-re'", "]", "\n", "\n", "no_average", "=", "NoAverage", "(", "metrics", ")", "\n", "no_average", ".", "attach", "(", "trainer", ",", "print_epoch_value", ",", "trainer", ",", "vars", "=", "metrics", ",", "max_epochs", "=", "cfg", "[", "'trainer1'", "]", "[", "'epochs'", "]", ",", "\n", "print_every", "=", "cfg", "[", "'trainer'", "]", "[", "'print_every'", "]", ",", "evaluation", "=", "'trainer'", ")", "\n", "no_average", ".", "attach", "(", "train_evaluator", ",", "print_epoch_value", ",", "trainer", ",", "vars", "=", "metrics", ",", "max_epochs", "=", "cfg", "[", "'trainer1'", "]", "[", "'epochs'", "]", ",", "\n", "print_every", "=", "cfg", "[", "'trainer'", "]", "[", "'print_every'", "]", ",", "evaluation", "=", "'train_evaluator'", ")", "\n", "no_average", ".", "attach", "(", "valid_evaluator", ",", "print_epoch_value", ",", "trainer", ",", "vars", "=", "metrics", ",", "max_epochs", "=", "cfg", "[", "'trainer1'", "]", "[", "'epochs'", "]", ",", "\n", "print_every", "=", "cfg", "[", "'trainer'", "]", "[", "'print_every'", "]", ",", "evaluation", "=", "'valid_evaluator'", ")", "\n", "no_average", ".", "attach", "(", "test_evaluator", ",", "print_epoch_value", ",", "trainer", ",", "vars", "=", "metrics", ",", "max_epochs", "=", "cfg", "[", "'trainer1'", "]", "[", "'epochs'", "]", ",", "\n", "print_every", "=", "cfg", "[", "'trainer'", "]", "[", "'print_every'", "]", ",", "evaluation", "=", "'test_evaluator'", ")", "\n", "\n", "return", "trainer", ",", "train_evaluator", ",", "valid_evaluator", ",", "test_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.trainer.build_trainer": [[41, 88], ["torch.optim.Adam", "ignite.engine.Engine", "ignite.engine.Engine.add_event_handler", "ignite.engine.Engine", "ignite.engine.Engine", "ignite.engine.Engine", "ignite.handlers.ModelCheckpoint", "ignite.engine.Engine.add_event_handler", "model.train", "torch.optim.Adam.zero_grad", "model", "model.backward", "torch.optim.Adam.step", "model.item", "ignite.handlers.TerminateOnNan", "model.eval", "torch.no_grad", "model", "model.item", "model.parameters", "dataset.parameters"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.step", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.parameters", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.parameters"], ["", "def", "build_trainer", "(", "model", ",", "dataset", ",", "learning_rate", ",", "root", ")", ":", "\n", "    ", "\"\"\"\n    Build the phase 1 trainer\n    @param model: VAE model\n    @param dataset: training dataset\n    @param learning_rate: optimizer learning rate\n    @param root: root directory (for saving checkpoints)\n    @return: trainer, training, valid, test evaluators\n    \"\"\"", "\n", "optim", "=", "Adam", "(", "[", "{", "'params'", ":", "model", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "dataset", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "learning_rate", ")", "\n", "\n", "def", "trainer_step", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "x", ",", "y", "=", "batch", "\n", "loss", "=", "model", "(", "x", ",", "engine", ".", "state", ",", "y", "[", "-", "1", "]", ")", "# forward", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "trainer", "=", "Engine", "(", "trainer_step", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "ITERATION_COMPLETED", ",", "TerminateOnNan", "(", ")", ")", "\n", "\n", "def", "validation_step", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", ",", "y", "=", "batch", "\n", "loss", "=", "model", "(", "x", ",", "engine", ".", "state", ",", "y", "[", "-", "1", "]", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "", "train_evaluator", "=", "Engine", "(", "validation_step", ")", "\n", "valid_evaluator", "=", "Engine", "(", "validation_step", ")", "\n", "test_evaluator", "=", "Engine", "(", "validation_step", ")", "\n", "\n", "def", "score_function", "(", "engine", ")", ":", "\n", "        ", "return", "-", "engine", ".", "state", ".", "output", "\n", "\n", "", "model_checkpoint", "=", "ModelCheckpoint", "(", "root", ",", "'checkpoint_phase1'", ",", "\n", "n_saved", "=", "1", ",", "\n", "score_function", "=", "score_function", ",", "\n", "score_name", "=", "\"total_loss\"", ",", "\n", "require_empty", "=", "False", ")", "\n", "\n", "valid_evaluator", ".", "add_event_handler", "(", "Events", ".", "COMPLETED", ",", "model_checkpoint", ",", "\n", "{", "\"model\"", ":", "model", "}", ")", "\n", "\n", "return", "trainer", ",", "train_evaluator", ",", "valid_evaluator", ",", "test_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.StoreDictKeyPair.__call__": [[44, 64], ["values.split", "setattr", "kv.split", "isinstance", "ast.literal_eval", "ast.literal_eval"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "my_dict", "=", "{", "}", "\n", "for", "kv", "in", "values", ".", "split", "(", "\"+\"", ")", ":", "\n", "            ", "k", ",", "v", "=", "kv", ".", "split", "(", "\"=\"", ")", "\n", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "if", "k", "not", "in", "[", "'missing_perc'", ",", "'features_s'", ",", "'features_e'", ",", "'features_l'", "]", ":", "\n", "                    ", "try", ":", "\n", "                        ", "v", "=", "ast", ".", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "try", ":", "\n", "                        ", "vi", "=", "ast", ".", "literal_eval", "(", "v", ")", "\n", "", "except", ":", "\n", "                        ", "vi", "=", "2", "\n", "pass", "\n", "", "v", "=", "vi", "if", "vi", "<", "1.0", "else", "v", "\n", "\n", "", "", "my_dict", "[", "k", "]", "=", "v", "\n", "", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "my_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.list_intersection": [[12, 18], ["list", "len", "type", "all", "set", "set", "isinstance"], "function", ["None"], ["def", "list_intersection", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "out", "=", "list", "(", "set", "(", "l1", ")", "&", "set", "(", "l2", ")", ")", "\n", "if", "len", "(", "out", ")", ">", "0", ":", "\n", "        ", "my_type", "=", "type", "(", "out", "[", "0", "]", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "my_type", ")", "for", "x", "in", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.list_union": [[20, 26], ["list", "len", "type", "all", "set", "set", "isinstance"], "function", ["None"], ["", "def", "list_union", "(", "l1", ",", "l2", ")", ":", "\n", "    ", "out", "=", "list", "(", "set", "(", "l1", ")", "|", "set", "(", "l2", ")", ")", "\n", "if", "len", "(", "out", ")", ">", "0", ":", "\n", "        ", "my_type", "=", "type", "(", "out", "[", "0", "]", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "my_type", ")", "for", "x", "in", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.list_subtract": [[28, 34], ["list", "len", "type", "all", "set", "set", "isinstance"], "function", ["None"], ["", "def", "list_subtract", "(", "l", ",", "l_substact", ")", ":", "\n", "    ", "out", "=", "list", "(", "set", "(", "l", ")", "-", "set", "(", "l_substact", ")", ")", "\n", "if", "len", "(", "out", ")", ">", "0", ":", "\n", "        ", "my_type", "=", "type", "(", "out", "[", "0", "]", ")", "\n", "assert", "all", "(", "isinstance", "(", "x", ",", "my_type", ")", "for", "x", "in", "out", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.to_str": [[36, 41], ["isinstance", "str", "str"], "function", ["None"], ["", "def", "to_str", "(", "elem", ")", ":", "\n", "    ", "if", "isinstance", "(", "elem", ",", "list", ")", ":", "\n", "        ", "return", "'_'", ".", "join", "(", "[", "str", "(", "s", ")", "for", "s", "in", "elem", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "str", "(", "elem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.mkdir": [[66, 69], ["os.makedirs"], "function", ["None"], ["", "", "def", "mkdir", "(", "path", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.newest": [[71, 79], ["os.listdir", "max", "os.path.exists", "len", "os.path.join"], "function", ["None"], ["", "def", "newest", "(", "path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "return", "None", "\n", "", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "if", "len", "(", "files", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "path", ",", "basename", ")", "for", "basename", "in", "files", "]", "\n", "return", "max", "(", "paths", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.save_yaml": [[81, 87], ["print", "open", "yaml.dump"], "function", ["None"], ["", "def", "save_yaml", "(", "yaml_object", ",", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "yaml_file", ":", "\n", "        ", "yaml", ".", "dump", "(", "yaml_object", ",", "yaml_file", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "", "print", "(", "f'Saving yaml: {file_path}'", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.save_obj": [[89, 92], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_obj", "(", "filename_no_extension", ",", "obj", ",", "ext", "=", "'.pkl'", ")", ":", "\n", "    ", "with", "open", "(", "filename_no_extension", "+", "ext", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "f", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.load_obj": [[94, 97], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_obj", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.parse_args": [[99, 107], ["open", "yaml.safe_load", "print"], "function", ["None"], ["", "", "def", "parse_args", "(", "yaml_file", ")", ":", "\n", "    ", "with", "open", "(", "yaml_file", ",", "'r'", ")", "as", "stream", ":", "\n", "        ", "try", ":", "\n", "            ", "cfg", "=", "yaml", ".", "safe_load", "(", "stream", ")", "\n", "", "except", "yaml", ".", "YAMLError", "as", "exc", ":", "\n", "            ", "print", "(", "exc", ")", "\n", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.flatten_cfg": [[109, 123], ["cfg.items", "isinstance", "value.items", "isinstance", "value2.items"], "function", ["None"], ["", "def", "flatten_cfg", "(", "cfg", ")", ":", "\n", "    ", "cfg_flat", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "cfg_flat", "[", "key", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "for", "key2", ",", "value2", "in", "value", ".", "items", "(", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "value2", ",", "dict", ")", ":", "\n", "                    ", "cfg_flat", "[", "f'{key}_{key2}'", "]", "=", "value2", "\n", "", "else", ":", "\n", "                    ", "for", "key3", ",", "value3", "in", "value2", ".", "items", "(", ")", ":", "\n", "                        ", "cfg_flat", "[", "f'{key}_{key2}_{key3}'", "]", "=", "value3", "\n", "\n", "", "", "", "", "", "return", "cfg_flat", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.get_experiment_folder": [[125, 145], ["[].copy", "os.path.join", "[].copy.keys", "[].copy.keys", "[].items", "[].copy.items", "[].items", "cfg[].items", "cfg[].items", "args_parser.to_str", "args_parser.to_str", "args_parser.to_str", "args_parser.to_str", "args_parser.to_str"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.to_str", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.to_str", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.to_str", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.to_str", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.to_str"], ["", "def", "get_experiment_folder", "(", "cfg", ")", ":", "\n", "    ", "dataset_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", ".", "items", "(", ")", "]", ")", "\n", "\n", "_cfg", "=", "cfg", "[", "'model'", "]", "[", "'params'", "]", ".", "copy", "(", ")", "\n", "if", "'phase1-ckpt'", "in", "_cfg", ".", "keys", "(", ")", ":", "\n", "        ", "del", "_cfg", "[", "'phase1-ckpt'", "]", "\n", "", "if", "'phase1-hparams'", "in", "_cfg", ".", "keys", "(", ")", ":", "\n", "        ", "del", "_cfg", "[", "'phase1-hparams'", "]", "\n", "\n", "", "model_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "_cfg", ".", "items", "(", ")", "]", ")", "\n", "optim_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", ".", "items", "(", ")", "]", ")", "\n", "trainer1_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "cfg", "[", "'trainer1'", "]", ".", "items", "(", ")", "]", ")", "\n", "trainer2_params", "=", "'_'", ".", "join", "(", "[", "f\"{to_str(v)}\"", "for", "k", ",", "v", "in", "cfg", "[", "'trainer2'", "]", ".", "items", "(", ")", "]", ")", "\n", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "f\"{cfg['dataset']['name']}_{dataset_params}\"", ",", "\n", "cfg", "[", "'model'", "]", "[", "'name'", "]", "+", "'_'", "+", "\n", "model_params", ",", "cfg", "[", "'optimizer'", "]", "[", "'name'", "]", "+", "'_'", "+", "\n", "optim_params", "+", "'_phase1_'", "+", "trainer1_params", "+", "'_phase2_'", "+", "trainer2_params", ")", "\n", "\n", "return", "save_dir", "\n", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.sample": [[18, 21], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.distributions.one_hot_categorical.OneHotCategorical().sample", "torch.distributions.one_hot_categorical.OneHotCategorical().sample", "torch.distributions.one_hot_categorical.OneHotCategorical", "torch.distributions.one_hot_categorical.OneHotCategorical"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample"], ["    ", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "sample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "return", "OneHotCategorical", "(", "probs", "=", "self", ".", "probs", ")", ".", "sample", "(", "sample_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample": [[22, 24], ["torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "super().rsample"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample"], ["", "def", "rsample", "(", "self", ",", "sample_shape", "=", "torch", ".", "Size", "(", ")", ")", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "super", "(", ")", ".", "rsample", "(", "sample_shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.mean": [[25, 28], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "mean", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.expand": [[29, 31], ["super().expand"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.expand"], ["", "def", "expand", "(", "self", ",", "batch_shape", ",", "_instance", "=", "None", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "expand", "(", "batch_shape", "[", ":", "-", "1", "]", ",", "_instance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.log_prob": [[32, 34], ["torch.distributions.one_hot_categorical.OneHotCategorical().log_prob", "torch.distributions.one_hot_categorical.OneHotCategorical().log_prob", "torch.distributions.one_hot_categorical.OneHotCategorical", "torch.distributions.one_hot_categorical.OneHotCategorical"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob"], ["", "def", "log_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "OneHotCategorical", "(", "probs", "=", "self", ".", "probs", ")", ".", "log_prob", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.__init__": [[51, 54], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_weight", "=", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", "\n", "self", ".", "arg_constraints", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.weight": [[59, 66], ["isinstance", "iter", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "len"], "methods", ["None"], ["", "@", "weight", ".", "setter", "\n", "def", "weight", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", "and", "isinstance", "(", "value", ",", "Iterable", ")", ":", "\n", "            ", "assert", "len", "(", "value", ")", "==", "1", ",", "value", "\n", "value", "=", "iter", "(", "value", ")", "\n", "\n", "", "self", ".", "_weight", "=", "value", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", "else", "torch", ".", "tensor", "(", "[", "value", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.expanded_weight": [[67, 70], ["functools.reduce", "len", "enumerate"], "methods", ["None"], ["", "@", "property", "\n", "def", "expanded_weight", "(", "self", ")", ":", "\n", "        ", "return", "reduce", "(", "list", ".", "__add__", ",", "[", "[", "w", "]", "*", "len", "(", "self", "[", "i", "]", ".", "f", ")", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "weight", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.parameters": [[71, 74], ["list", "distributions.Base.dist.arg_constraints.keys"], "methods", ["None"], ["", "@", "property", "\n", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "dist", ".", "arg_constraints", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.real_parameters": [[75, 78], ["id", "id"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "real_dist", ".", "real_parameters", "if", "id", "(", "self", ")", "!=", "id", "(", "self", ".", "real_dist", ")", "else", "self", ".", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.__getitem__": [[79, 82], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "assert", "item", "==", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.preprocess_data": [[83, 85], ["None"], "methods", ["None"], ["", "def", "preprocess_data", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "return", "x", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.scale_data": [[86, 89], ["None"], "methods", ["None"], ["", "def", "scale_data", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "weight", "=", "weight", "or", "self", ".", "weight", "\n", "return", "x", "*", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.unscale_data": [[90, 93], ["None"], "methods", ["None"], ["", "def", "unscale_data", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "weight", "=", "weight", "or", "self", ".", "weight", "\n", "return", "x", "/", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.f": [[94, 97], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.sample": [[98, 102], ["distributions.Base.to_real_params", "dict", "distributions.Base.real_dist.dist().sample", "zip", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "distributions.Base.real_dist.dist"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist"], ["", "def", "sample", "(", "self", ",", "size", ",", "etas", ")", ":", "\n", "        ", "real_params", "=", "self", ".", "to_real_params", "(", "etas", ")", "\n", "real_params", "=", "dict", "(", "zip", "(", "self", ".", "real_parameters", ",", "real_params", ")", ")", "\n", "return", "self", ".", "real_dist", ".", "dist", "(", "**", "real_params", ")", ".", "sample", "(", "torch", ".", "Size", "(", "[", "size", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.impute": [[103, 105], ["NotImplementedError"], "methods", ["None"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "# real_params = self.to_real_params(etas)", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.mean": [[109, 113], ["distributions.Base.to_params", "dict", "zip", "distributions.Base.dist"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist"], ["", "def", "mean", "(", "self", ",", "etas", ")", ":", "\n", "        ", "params", "=", "self", ".", "to_params", "(", "etas", ")", "\n", "params", "=", "dict", "(", "zip", "(", "self", ".", "parameters", ",", "params", ")", ")", "\n", "return", "self", ".", "dist", "(", "**", "params", ")", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.to_text": [[114, 124], ["distributions.Base.to_real_params", "dict", "x.cpu().tolist", "zip", "distributions.Base.mean().item", "x.cpu", "distributions.Base.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "to_text", "(", "self", ",", "etas", ")", ":", "\n", "        ", "params", "=", "self", ".", "to_real_params", "(", "etas", ")", "\n", "params", "=", "[", "x", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "for", "x", "in", "params", "]", "\n", "params", "=", "dict", "(", "zip", "(", "self", ".", "real_parameters", ",", "params", ")", ")", "\n", "try", ":", "\n", "            ", "mean", "=", "self", ".", "mean", "(", "etas", ")", ".", "item", "(", ")", "\n", "", "except", "NotImplementedError", ":", "\n", "            ", "mean", "=", "None", "\n", "\n", "", "return", "f'{self.real_dist} params={params}'", "+", "(", "f' mean={mean}'", "if", "mean", "is", "not", "None", "else", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.params_from_data": [[125, 127], ["NotImplementedError"], "methods", ["None"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.real_params_from_data": [[128, 131], ["distributions.Base.real_dist.params_from_data", "distributions.Base.real_dist.to_real_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params"], ["", "def", "real_params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "etas", "=", "self", ".", "real_dist", ".", "params_from_data", "(", "x", ")", "\n", "return", "self", ".", "real_dist", ".", "to_real_params", "(", "etas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.real_dist": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_dist", "(", "self", ")", "->", "Base", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.to_real_params": [[136, 138], ["distributions.Base.to_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_params"], ["", "def", "to_real_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "self", ".", "to_params", "(", "etas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.num_params": [[139, 142], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_params", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "arg_constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.size_params": [[143, 146], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size_params", "(", "self", ")", ":", "\n", "        ", "return", "[", "1", "]", "*", "self", ".", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.num_suff_stats": [[147, 150], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_suff_stats", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.num_dists": [[151, 154], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_dists", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob": [[155, 159], ["distributions.Base.to_params", "dict", "distributions.Base.dist().log_prob", "zip", "distributions.Base.dist"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist"], ["", "def", "log_prob", "(", "self", ",", "x", ",", "etas", ")", ":", "\n", "        ", "params", "=", "self", ".", "to_params", "(", "etas", ")", "\n", "params", "=", "dict", "(", "zip", "(", "self", ".", "parameters", ",", "params", ")", ")", "\n", "return", "self", ".", "dist", "(", "**", "params", ")", ".", "log_prob", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.real_log_prob": [[160, 164], ["distributions.Base.to_real_params", "dict", "distributions.Base.real_dist.dist().log_prob", "zip", "distributions.Base.real_dist.dist"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist"], ["", "def", "real_log_prob", "(", "self", ",", "x", ",", "etas", ")", ":", "\n", "        ", "real_params", "=", "self", ".", "to_real_params", "(", "etas", ")", "\n", "real_params", "=", "dict", "(", "zip", "(", "self", ".", "real_parameters", ",", "real_params", ")", ")", "\n", "return", "self", ".", "real_dist", ".", "dist", "(", "**", "real_params", ")", ".", "log_prob", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.dist": [[165, 168], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.unscale_params": [[169, 174], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "enumerate", "c[].mul_", "f().item", "distributions.Base.f"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.f"], ["", "def", "unscale_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "c", "=", "torch", ".", "ones_like", "(", "etas", ")", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "self", ".", "f", ")", ":", "\n", "            ", "c", "[", "i", "]", ".", "mul_", "(", "f", "(", "self", ".", "expanded_weight", "[", "i", "]", ")", ".", "item", "(", ")", ")", "\n", "", "return", "etas", "*", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.scale_params": [[175, 180], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "enumerate", "c[].mul_", "f().item", "distributions.Base.f"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.f"], ["", "def", "scale_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "c", "=", "torch", ".", "ones_like", "(", "etas", ")", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "self", ".", "f", ")", ":", "\n", "            ", "c", "[", "i", "]", ".", "mul_", "(", "f", "(", "self", ".", "expanded_weight", "[", "i", "]", ")", ".", "item", "(", ")", ")", "\n", "", "return", "etas", "/", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.__str__": [[181, 183], ["NotImplementedError"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.to_params": [[184, 186], ["NotImplementedError"], "methods", ["None"], ["", "def", "to_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.is_discrete": [[187, 190], ["NotImplementedError"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.is_continuous": [[191, 194], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_continuous", "(", "self", ")", ":", "\n", "        ", "return", "not", "self", ".", "is_discrete", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.__rshift__": [[195, 197], ["distributions.Base.scale_data"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.scale_data"], ["", "def", "__rshift__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "scale_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.__lshift__": [[198, 200], ["distributions.Base.unscale_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.unscale_params"], ["", "def", "__lshift__", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "self", ".", "unscale_params", "(", "etas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Normal.__init__": [[203, 209], ["distributions.Base.__init__", "torch.distributions.constraints.less_than", "torch.distributions.constraints.less_than"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Normal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "arg_constraints", "=", "[", "\n", "constraints", ".", "real", ",", "# eta1", "\n", "constraints", ".", "less_than", "(", "0", ")", "# eta2", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Normal.is_discrete": [[211, 214], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Normal.dist": [[215, 218], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "Normal", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Normal.f": [[219, 222], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "w", ",", "lambda", "w", ":", "w", "**", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Normal.params_from_data": [[223, 230], ["x.mean", "x.std"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "loc", ",", "std", "=", "x", ".", "mean", "(", ")", ",", "x", ".", "std", "(", ")", "\n", "\n", "eta2", "=", "-", "0.5", "/", "std", "**", "2", "\n", "eta1", "=", "-", "2", "*", "loc", "*", "eta2", "\n", "\n", "return", "eta1", ",", "eta2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Normal.to_params": [[231, 234], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "to_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "eta1", ",", "eta2", "=", "etas", "\n", "return", "-", "0.5", "*", "eta1", "/", "eta2", ",", "torch", ".", "sqrt", "(", "-", "0.5", "/", "eta2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Normal.impute": [[235, 237], ["distributions.Normal.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "self", ".", "mean", "(", "etas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Normal.__str__": [[238, 240], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'normal'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.scale_data": [[243, 246], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["    ", "def", "scale_data", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "if", "weight", "is", "None", "else", "weight", "\n", "return", "torch", ".", "clamp", "(", "torch", ".", "pow", "(", "x", ",", "weight", ")", ",", "min", "=", "1e-15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.unscale_data": [[247, 250], ["torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "unscale_data", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "weight", "=", "self", ".", "weight", "if", "weight", "is", "None", "else", "weight", "\n", "return", "torch", ".", "pow", "(", "x", ",", "1.", "/", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.dist": [[251, 254], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "LogNormal", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.params_from_data": [[255, 257], ["distributions.Normal.params_from_data", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "params_from_data", "(", "torch", ".", "log", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample": [[258, 260], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "distributions.Base.sample"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample"], ["", "def", "sample", "(", "self", ",", "size", ",", "etas", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "super", "(", ")", ".", "sample", "(", "size", ",", "etas", ")", ",", "max", "=", "1e100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.impute": [[261, 264], ["distributions.LogNormal.to_real_params", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "mu", ",", "sigma", "=", "self", ".", "to_real_params", "(", "etas", ")", "\n", "return", "torch", ".", "clamp", "(", "torch", ".", "exp", "(", "mu", "-", "sigma", "**", "2", ")", ",", "max", "=", "1e100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.__str__": [[265, 267], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'lognormal'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Gamma.__init__": [[270, 276], ["distributions.Base.__init__", "torch.distributions.constraints.greater_than", "torch.distributions.constraints.greater_than", "torch.distributions.constraints.less_than", "torch.distributions.constraints.less_than"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "arg_constraints", "=", "[", "\n", "constraints", ".", "greater_than", "(", "-", "1", ")", ",", "# eta1", "\n", "constraints", ".", "less_than", "(", "0", ")", "# eta2", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Gamma.dist": [[278, 281], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "Gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Gamma.f": [[282, 285], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "ones_like", "(", "w", ")", ",", "lambda", "w", ":", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Gamma.is_discrete": [[286, 289], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Gamma.params_from_data": [[290, 305], ["range", "x.mean", "x.log().mean", "mean.log", "x.log", "torch.polygamma", "torch.polygamma", "torch.polygamma", "torch.polygamma", "shape.log", "torch.digamma", "torch.digamma", "torch.digamma", "torch.digamma"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", ",", "meanlog", "=", "x", ".", "mean", "(", ")", ",", "x", ".", "log", "(", ")", ".", "mean", "(", ")", "\n", "s", "=", "mean", ".", "log", "(", ")", "-", "meanlog", "\n", "\n", "shape", "=", "(", "3", "-", "s", "+", "(", "(", "s", "-", "3", ")", "**", "2", "+", "24", "*", "s", ")", ".", "sqrt", "(", ")", ")", "/", "(", "12", "*", "s", ")", "\n", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "            ", "shape", "=", "shape", "-", "(", "shape", ".", "log", "(", ")", "-", "torch", ".", "digamma", "(", "shape", ")", "-", "s", ")", "/", "(", "1", "/", "shape", "-", "torch", ".", "polygamma", "(", "1", ",", "shape", ")", ")", "\n", "\n", "", "concentration", "=", "shape", "\n", "rate", "=", "shape", "/", "mean", "\n", "\n", "eta1", "=", "concentration", "-", "1", "\n", "eta2", "=", "-", "rate", "\n", "\n", "return", "eta1", ",", "eta2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Gamma.to_params": [[306, 310], ["None"], "methods", ["None"], ["", "def", "to_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "eta1", ",", "eta2", "=", "etas", "\n", "\n", "return", "eta1", "+", "1", ",", "-", "eta2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Gamma.impute": [[311, 314], ["distributions.Gamma.to_real_params", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "alpha", ",", "beta", "=", "self", ".", "to_real_params", "(", "etas", ")", "\n", "return", "torch", ".", "clamp", "(", "(", "alpha", "-", "1", ")", "/", "beta", ",", "min", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Gamma.__str__": [[315, 317], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'gamma'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Exponential.__init__": [[320, 325], ["distributions.Base.__init__", "torch.distributions.constraints.less_than", "torch.distributions.constraints.less_than"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Exponential", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "arg_constraints", "=", "[", "\n", "constraints", ".", "less_than", "(", "0", ")", "# eta1", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Exponential.dist": [[327, 330], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "Exponential", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Exponential.is_discrete": [[331, 334], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Exponential.f": [[335, 338], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Exponential.params_from_data": [[339, 342], ["x.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", ")", "\n", "return", "-", "1", "/", "mean", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Exponential.to_params": [[343, 345], ["None"], "methods", ["None"], ["", "def", "to_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "-", "etas", "[", "0", "]", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Exponential.impute": [[346, 348], ["NotImplementedError"], "methods", ["None"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Exponential.__str__": [[349, 351], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"exponential\"", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.__init__": [[354, 359], ["distributions.Base.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "arg_constraints", "=", "[", "\n", "constraints", ".", "real", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.dist": [[361, 364], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "Bernoulli", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.is_discrete": [[365, 368], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.parameters": [[369, 372], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "return", "'logits'", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.real_parameters": [[373, 376], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_parameters", "(", "self", ")", ":", "\n", "        ", "return", "'probs'", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.scale_data": [[377, 379], ["None"], "methods", ["None"], ["", "def", "scale_data", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.f": [[380, 383], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "ones_like", "(", "w", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.params_from_data": [[384, 386], ["torch.distributions.utils.probs_to_logits", "torch.distributions.utils.probs_to_logits", "x.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "probs_to_logits", "(", "x", ".", "mean", "(", ")", ",", "is_binary", "=", "True", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.to_params": [[387, 389], ["None"], "methods", ["None"], ["", "def", "to_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "etas", "[", "0", "]", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.to_real_params": [[390, 392], ["torch.distributions.utils.logits_to_probs", "torch.distributions.utils.logits_to_probs", "distributions.Bernoulli.to_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_params"], ["", "def", "to_real_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "logits_to_probs", "(", "self", ".", "to_params", "(", "etas", ")", "[", "0", "]", ",", "is_binary", "=", "True", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.impute": [[393, 397], ["distributions.Bernoulli.to_real_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "probs", "=", "self", ".", "to_real_params", "(", "etas", ")", "[", "0", "]", "\n", "\n", "return", "(", "probs", ">=", "0.5", ")", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.__str__": [[398, 400], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'bernoulli'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.__init__": [[403, 408], ["distributions.Base.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "arg_constraints", "=", "[", "\n", "constraints", ".", "real", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.dist": [[410, 413], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "Poisson", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.is_discrete": [[414, 417], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.scale_data": [[418, 420], ["None"], "methods", ["None"], ["", "def", "scale_data", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.f": [[421, 424], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "ones_like", "(", "w", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.params_from_data": [[425, 427], ["torch.log", "torch.log", "torch.log", "torch.log", "x.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "log", "(", "x", ".", "mean", "(", ")", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.to_params": [[428, 430], ["torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "to_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "etas", "[", "0", "]", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.impute": [[431, 434], ["rate.floor", "distributions.Poisson.to_real_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "rate", "=", "self", ".", "to_real_params", "(", "etas", ")", "[", "0", "]", "\n", "return", "rate", ".", "floor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Poisson.__str__": [[435, 437], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'poisson'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.BernoulliGammaTrick.__init__": [[440, 443], ["distributions.Gamma.__init__", "torch.Beta", "torch.Beta"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "noise_dist", "=", "dist", ".", "Beta", "(", "1.1", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.BernoulliGammaTrick.real_dist": [[444, 447], ["distributions.Bernoulli"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_dist", "(", "self", ")", "->", "Base", ":", "\n", "        ", "return", "Bernoulli", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.BernoulliGammaTrick.preprocess_data": [[448, 453], ["distributions.BernoulliGammaTrick.noise_dist.sample", "distributions.Base.preprocess_data", "x.size"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.preprocess_data"], ["", "def", "preprocess_data", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "super", "(", "BernoulliGammaTrick", ",", "self", ")", ".", "preprocess_data", "(", "x", ")", "[", "0", "]", "\n", "noise", "=", "self", ".", "noise_dist", ".", "sample", "(", "[", "x", ".", "size", "(", "0", ")", "]", ")", "\n", "\n", "return", "x", "+", "1", "+", "noise", ",", "\n", "# return x + noise,", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.BernoulliGammaTrick.mean": [[455, 457], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "distributions.Base.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "mean", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "super", "(", ")", ".", "mean", "(", "etas", ")", "-", "1", "-", "self", ".", "noise_dist", ".", "mean", ",", "min", "=", "0.", ",", "max", "=", "1.", ")", "\n", "# return torch.clamp(super().mean(etas) - self.noise_dist.mean, min=0., max=1.)", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.BernoulliGammaTrick.to_real_params": [[459, 461], ["distributions.BernoulliGammaTrick.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "to_real_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "self", ".", "mean", "(", "etas", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.BernoulliGammaTrick.impute": [[462, 465], ["distributions.BernoulliGammaTrick.to_real_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "probs", "=", "self", ".", "to_real_params", "(", "etas", ")", "[", "0", "]", "\n", "return", "(", "probs", ">=", "0.5", ")", ".", "double", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.BernoulliGammaTrick.__str__": [[466, 468], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.real_dist}*'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.PoissonGammaTrick.__init__": [[471, 474], ["distributions.Gamma.__init__", "torch.Beta", "torch.Beta"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "noise_dist", "=", "dist", ".", "Beta", "(", "1.1", ",", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.PoissonGammaTrick.real_dist": [[475, 478], ["distributions.Poisson"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_dist", "(", "self", ")", "->", "Base", ":", "\n", "        ", "return", "Poisson", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.PoissonGammaTrick.preprocess_data": [[479, 484], ["distributions.PoissonGammaTrick.noise_dist.sample", "distributions.Base.preprocess_data", "x.size"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.preprocess_data"], ["", "def", "preprocess_data", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "super", "(", ")", ".", "preprocess_data", "(", "x", ")", "[", "0", "]", "\n", "noise", "=", "self", ".", "noise_dist", ".", "sample", "(", "[", "x", ".", "size", "(", "0", ")", "]", ")", "\n", "\n", "return", "x", "+", "1", "+", "noise", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.PoissonGammaTrick.mean": [[485, 487], ["distributions.Base.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "mean", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "mean", "(", "etas", ")", "-", "1", "-", "self", ".", "noise_dist", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.PoissonGammaTrick.to_real_params": [[488, 490], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "distributions.PoissonGammaTrick.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "to_real_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "self", ".", "mean", "(", "etas", ")", ",", "min", "=", "1e-10", ")", ",", "# rate > 0", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.PoissonGammaTrick.impute": [[491, 494], ["rate.floor", "distributions.PoissonGammaTrick.to_real_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "rate", "=", "self", ".", "to_real_params", "(", "etas", ")", "[", "0", "]", "\n", "return", "rate", ".", "floor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.PoissonGammaTrick.__str__": [[495, 497], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.real_dist}*'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.__init__": [[500, 504], ["distributions.Base.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "arg_constraints", "=", "[", "constraints", ".", "real_vector", "]", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.dist": [[505, 508], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "Categorical", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.is_discrete": [[509, 512], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.real_parameters": [[513, 516], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_parameters", "(", "self", ")", ":", "\n", "        ", "return", "'probs'", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.size_params": [[517, 520], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size_params", "(", "self", ")", ":", "\n", "        ", "return", "[", "self", ".", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.scale_data": [[521, 523], ["None"], "methods", ["None"], ["", "def", "scale_data", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.f": [[524, 527], ["torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "ones_like", "(", "w", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.impute": [[528, 532], ["distributions.Categorical.to_real_params", "dict", "zip", "distributions.Categorical.real_dist.dist().probs.max", "distributions.Categorical.real_dist.dist"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "real_params", "=", "self", ".", "to_real_params", "(", "etas", ")", "\n", "real_params", "=", "dict", "(", "zip", "(", "self", ".", "real_parameters", ",", "real_params", ")", ")", "\n", "return", "self", ".", "real_dist", ".", "dist", "(", "**", "real_params", ")", ".", "probs", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.params_from_data": [[533, 536], ["miscelanea.to_one_hot", "torch.distributions.utils.probs_to_logits", "torch.distributions.utils.probs_to_logits", "miscelanea.to_one_hot.sum", "x.size"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.to_one_hot"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x", "=", "to_one_hot", "(", "x", ",", "self", ".", "size", ")", "\n", "return", "probs_to_logits", "(", "new_x", ".", "sum", "(", "dim", "=", "0", ")", "/", "x", ".", "size", "(", "0", ")", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.mean": [[537, 539], ["NotImplementedError"], "methods", ["None"], ["", "def", "mean", "(", "self", ",", "etas", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.to_params": [[540, 542], ["None"], "methods", ["None"], ["", "def", "to_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "etas", "[", "0", "]", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.to_real_params": [[543, 545], ["torch.distributions.utils.logits_to_probs", "torch.distributions.utils.logits_to_probs", "distributions.Categorical.to_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_params"], ["", "def", "to_real_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "return", "logits_to_probs", "(", "self", ".", "to_params", "(", "etas", ")", "[", "0", "]", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Categorical.__str__": [[546, 548], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'categorical({self.size})'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.__init__": [[551, 558], ["distributions.Base.__init__", "functools.reduce", "distributions.Bernoulli", "range"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "del", "self", ".", "_weight", "\n", "\n", "self", ".", "dists", "=", "[", "Bernoulli", "(", ")", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "self", ".", "arg_constraints", "=", "reduce", "(", "list", ".", "__add__", ",", "[", "d", ".", "arg_constraints", "for", "d", "in", "self", ".", "dists", "]", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.dist": [[559, 562], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "Categorical", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.is_discrete": [[563, 566], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.real_parameters": [[567, 570], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_parameters", "(", "self", ")", ":", "\n", "        ", "return", "'probs'", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.weight": [[575, 581], ["zip", "len"], "methods", ["None"], ["", "@", "weight", ".", "setter", "\n", "def", "weight", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "self", ".", "num_dists", "==", "len", "(", "value", ")", "\n", "\n", "for", "d", ",", "v", "in", "zip", "(", "self", ".", "dists", ",", "value", ")", ":", "\n", "            ", "d", ".", "weight", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.params_from_data": [[582, 584], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_params": [[585, 587], ["NotImplementedError"], "methods", ["None"], ["", "def", "to_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.real_params_from_data": [[588, 590], ["distributions.Base.real_params_from_data", "distributions.Categorical"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.real_params_from_data"], ["", "def", "real_params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "Categorical", "(", "self", ".", "size", ")", ".", "real_params_from_data", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.num_dists": [[591, 594], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_dists", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.num_params": [[595, 598], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_params", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "d", ".", "num_params", "for", "d", "in", "self", ".", "dists", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.impute": [[599, 603], ["distributions.CategoricalBernoulliTrick.to_real_params", "dict", "zip", "distributions.CategoricalBernoulliTrick.real_dist.dist().probs.max", "distributions.CategoricalBernoulliTrick.real_dist.dist"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist"], ["", "def", "impute", "(", "self", ",", "etas", ")", ":", "\n", "        ", "real_params", "=", "self", ".", "to_real_params", "(", "etas", ")", "\n", "real_params", "=", "dict", "(", "zip", "(", "self", ".", "real_parameters", ",", "real_params", ")", ")", "\n", "return", "self", ".", "real_dist", ".", "dist", "(", "**", "real_params", ")", ".", "probs", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.real_log_prob": [[604, 610], ["distributions.CategoricalBernoulliTrick.to_real_params", "dict", "torch.OneHotCategorical().log_prob", "torch.OneHotCategorical().log_prob", "zip", "miscelanea.to_one_hot", "len", "torch.OneHotCategorical", "torch.OneHotCategorical", "x.size"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.to_one_hot"], ["", "def", "real_log_prob", "(", "self", ",", "x", ",", "etas", ")", ":", "\n", "        ", "params", "=", "self", ".", "to_real_params", "(", "etas", ")", "\n", "params", "=", "dict", "(", "zip", "(", "self", ".", "real_parameters", ",", "params", ")", ")", "\n", "\n", "new_x", "=", "x", "if", "len", "(", "x", ".", "size", "(", ")", ")", ">", "2", "else", "to_one_hot", "(", "x", ",", "self", ".", "size", ")", "\n", "return", "dist", ".", "OneHotCategorical", "(", "**", "params", ")", ".", "log_prob", "(", "new_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.__getitem__": [[611, 613], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "dists", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.preprocess_data": [[614, 622], ["miscelanea.to_one_hot", "range", "distributions.Base.preprocess_data", "distributions.CategoricalBernoulliTrick.dists[].preprocess_data"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.to_one_hot", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.preprocess_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.preprocess_data"], ["", "def", "preprocess_data", "(", "self", ",", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "new_x", "=", "super", "(", ")", ".", "preprocess_data", "(", "x", ")", "[", "0", "]", "\n", "x_one_hot", "=", "to_one_hot", "(", "new_x", ",", "self", ".", "size", ")", "\n", "\n", "new_x", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "size", ")", ":", "\n", "            ", "new_x", "+=", "self", ".", "dists", "[", "i", "]", ".", "preprocess_data", "(", "x_one_hot", "[", "...", ",", "i", "]", ")", "\n", "", "return", "new_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.scale_data": [[623, 625], ["None"], "methods", ["None"], ["", "def", "scale_data", "(", "self", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean": [[626, 628], ["NotImplementedError"], "methods", ["None"], ["", "def", "mean", "(", "self", ",", "etas", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.f": [[629, 632], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params": [[633, 644], ["enumerate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.append", "torch.clamp.append", "torch.clamp.sum", "torch.clamp.sum", "d.to_real_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.to_real_params"], ["", "def", "to_real_params", "(", "self", ",", "etas", ")", ":", "\n", "        ", "pos", ",", "probs", "=", "0", ",", "[", "]", "\n", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "self", ".", "dists", ")", ":", "\n", "            ", "probs", ".", "append", "(", "d", ".", "to_real_params", "(", "etas", "[", "pos", ":", "pos", "+", "d", ".", "num_params", "]", ")", "[", "0", "]", ")", "# .detach())", "\n", "pos", "+=", "d", ".", "num_params", "\n", "\n", "", "probs", "=", "torch", ".", "stack", "(", "probs", ",", "dim", "=", "-", "1", ")", "\n", "probs", "=", "torch", ".", "clamp", "(", "probs", ",", "min", "=", "1e-30", ")", "\n", "probs", "=", "probs", "/", "probs", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "probs", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.__str__": [[645, 647], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'categorical({self.size})+'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.__init__": [[650, 653], ["distributions.CategoricalBernoulliTrick.__init__", "distributions.BernoulliGammaTrick", "range"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "super", "(", "CategoricalGammaTrick", ",", "self", ")", ".", "__init__", "(", "size", ")", "\n", "self", ".", "dists", "=", "[", "BernoulliGammaTrick", "(", ")", "for", "_", "in", "range", "(", "size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.real_dist": [[654, 657], ["distributions.CategoricalBernoulliTrick"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_dist", "(", "self", ")", "->", "Base", ":", "\n", "        ", "return", "CategoricalBernoulliTrick", "(", "self", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.f": [[658, 661], ["functools.reduce"], "methods", ["None"], ["", "@", "property", "\n", "def", "f", "(", "self", ")", ":", "\n", "        ", "return", "reduce", "(", "list", ".", "__add__", ",", "[", "d", ".", "f", "for", "d", "in", "self", ".", "dists", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.is_discrete": [[662, 665], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.__str__": [[666, 668], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'categorical({self.size})*'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.get_distribution_by_name": [[36, 48], ["None"], "function", ["None"], ["", "", "def", "get_distribution_by_name", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'normal'", ":", "Normal", ",", "'lognormal'", ":", "LogNormal", ",", "'gamma'", ":", "Gamma", ",", "'exponential'", ":", "Exponential", ",", "\n", "'bernoulli'", ":", "Bernoulli", ",", "'poisson'", ":", "Poisson", ",", "'categorical'", ":", "Categorical", ",", "'ordinal'", ":", "Categorical", ",", "\n", "'bernoullitrick'", ":", "{", "\n", "'categorical'", ":", "CategoricalBernoulliTrick", "# , 'ordinal': OrdinalBernoulliTrick", "\n", "}", ",", "\n", "'gammatrick'", ":", "{", "\n", "'bernoulli'", ":", "BernoulliGammaTrick", ",", "'poisson'", ":", "PoissonGammaTrick", ",", "\n", "'categorical'", ":", "CategoricalGammaTrick", "# , 'ordinal': OrdinalGammaTrick", "\n", "}", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.evaluate_all": [[31, 53], ["model.eval", "main_helpers.evaluate", "main_helpers.evaluate", "main_helpers.evaluate"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.evaluate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.evaluate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.evaluate"], ["def", "evaluate_all", "(", "model", ",", "prob_model", ",", "loader", ",", "valid_loader", ",", "test_loader", ",", "loss_function", ",", "cfg", ",", "writer", ",", "phase", ")", ":", "\n", "    ", "\"\"\"\n    Function that evaluates on all datasets.\n    @param model: VAE model\n    @param prob_model: probabilistic model\n    @param loader: training data loader\n    @param valid_loader: validation data loader\n    @param test_loader: test data loader\n    @param loss_function: loss function used to train [ours (fairall), niki (fairlog)]\n    @param cfg: config\n    @param writer: writer object of ignite\n    @param phase: which phase of learning\n    @return: evaluated results of training, validation and test\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "o_train", "=", "evaluate", "(", "model", ",", "prob_model", ",", "loader", ",", "writer", ",", "cfg", "[", "'save_dir'", "]", ",", "phase", "=", "phase", ",", "type_", "=", "'Train'", ",", "\n", "loss_function", "=", "loss_function", ")", "\n", "o_valid", "=", "evaluate", "(", "model", ",", "prob_model", ",", "valid_loader", ",", "writer", ",", "cfg", "[", "'save_dir'", "]", ",", "phase", "=", "phase", ",", "type_", "=", "'Valid'", ",", "\n", "loss_function", "=", "loss_function", ")", "\n", "o_test", "=", "evaluate", "(", "model", ",", "prob_model", ",", "test_loader", ",", "writer", ",", "cfg", "[", "'save_dir'", "]", ",", "phase", "=", "phase", ",", "type_", "=", "'Test'", ",", "\n", "loss_function", "=", "loss_function", ")", "\n", "return", "o_train", ",", "o_valid", ",", "o_test", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.save_results_json": [[55, 71], ["open", "json.dump", "open", "json.dump", "open", "json.dump", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "save_results_json", "(", "out_train", ",", "out_valid", ",", "out_test", ",", "save_dir", ",", "phase", ")", ":", "\n", "    ", "\"\"\"\n    Function to dump all results to JSON. This JSON can be used for analyses.\n    @param out_train: training results\n    @param out_valid: validation results\n    @param out_test: test results\n    @param save_dir: save location\n    @param phase: which phase of learning\n    @return: none\n    \"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "f'output{phase}train.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "out_train", ",", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "f'output{phase}valid.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "out_valid", ",", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "f'output{phase}test.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "out_test", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.phase_2": [[73, 217], ["utils.loop_trainer.create_loop_trainer_2", "loop_trainer.on", "loop_trainer.on", "loop_trainer.on", "loop_trainer.on", "train_evaluator.add_event_handler", "valid_evaluator.add_event_handler", "test_evaluator.add_event_handler", "main_helpers.train", "train_evaluator.run", "ignite.engine.Events.EPOCH_COMPLETED", "valid_evaluator.run", "ignite.engine.Events.EPOCH_COMPLETED", "test_evaluator.run", "ignite.engine.Events.EPOCH_COMPLETED", "utils.timer.Timer", "loop_trainer.on", "loop_trainer.on", "utils.miscelanea.evaluate_model_generalized", "utils.miscelanea.evaluate_model_generalized", "utils.miscelanea.evaluate_model_generalized", "print", "print", "utils.save_yaml", "utils.save_yaml", "utils.timer.Timer.tic", "utils.timer.Timer.toc", "writer.add_scalar", "print", "writer.add_scalar", "print", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.create_loop_trainer_2", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.evaluate_model_generalized", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.evaluate_model_generalized", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.evaluate_model_generalized", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.save_yaml", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.save_yaml", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.toc"], ["", "", "def", "phase_2", "(", "p2_model", ",", "prob_model", ",", "loader", ",", "val_loader", ",", "test_loader", ",", "cf_loader", ",", "cfg", ",", "\n", "policy_phase_2", ",", "writer", ",", "time_dict", ",", "save_dir", ",", "ran_phase1", ",", "is_warmup", ")", ":", "\n", "    ", "\"\"\"\n    Function for phase 2 learning. Also used for the intermediate warmup.\n    @param p2_model: VAE model object for phase 2\n    @param prob_model: probabilistic model\n    @param loader: training data loader\n    @param val_loader: validation data loader\n    @param test_loader: test data loader\n    @param cf_loader: counterfactual data loader (None if real-world or not existent)\n    @param cfg: config\n    @param policy_phase_2: policy to use in phase 2\n    @param writer: writer object of ignite\n    @param time_dict: dict containing time information (from phase 1)\n    @param save_dir: save location\n    @param ran_phase1: whether phase1 was run\n    @param is_warmup: are we doing warmup for this call or not\n    @return: outputs on the data, cfg, time_dict, writer\n    \"\"\"", "\n", "# Get the loop trainers.", "\n", "loop_trainer", ",", "train_evaluator", ",", "valid_evaluator", ",", "test_evaluator", "=", "create_loop_trainer_2", "(", "p2_model", ",", "loader", ".", "dataset", ",", "cfg", ",", "policy_phase_2", ")", "\n", "\n", "epoch_every_step", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", "\n", "\n", "@", "loop_trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", "(", "every", "=", "epoch_every_step", ")", ")", "\n", "def", "log_training_results", "(", "trainer", ")", ":", "\n", "        ", "train_evaluator", ".", "run", "(", "loader", ")", "\n", "\n", "", "@", "loop_trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", "(", "every", "=", "epoch_every_step", ")", ")", "\n", "def", "log_validation_results", "(", "trainer", ")", ":", "\n", "        ", "valid_evaluator", ".", "run", "(", "val_loader", ")", "\n", "\n", "", "@", "loop_trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", "(", "every", "=", "epoch_every_step", ")", ")", "\n", "def", "log_test_results", "(", "trainer", ")", ":", "\n", "        ", "test_evaluator", ".", "run", "(", "test_loader", ")", "\n", "\n", "", "if", "not", "is_warmup", ":", "\n", "        ", "timer2", "=", "Timer", "(", ")", "\n", "if", "ran_phase1", ":", "\n", "            ", "time1", "=", "time_dict", "[", "'phase1_time'", "]", "\n", "", "else", ":", "\n", "            ", "time1", "=", "0", "\n", "\n", "", "@", "loop_trainer", ".", "on", "(", "Events", ".", "STARTED", ")", "\n", "def", "start_timer", "(", "trainer", ")", ":", "\n", "            ", "timer2", ".", "tic", "(", "'train'", ")", "\n", "\n", "", "@", "loop_trainer", ".", "on", "(", "Events", ".", "COMPLETED", ")", "\n", "def", "end_timer", "(", "trainer", ")", ":", "\n", "            ", "time2", "=", "timer2", ".", "toc", "(", "'train'", ")", "\n", "writer", ".", "add_scalar", "(", "f'Time/phase2_train_time'", ",", "time2", ",", "trainer", ".", "state", ".", "epoch", ")", "\n", "print", "(", "\"/// TRAINING TIME: \"", ",", "time2", ")", "\n", "time_dict", "[", "'phase2_train_time'", "]", "=", "time2", "\n", "if", "'phase1-ckpt'", "not", "in", "cfg", "[", "'model'", "]", "[", "'params'", "]", ":", "\n", "                ", "phase1_ckpt", "=", "None", "\n", "", "else", ":", "\n", "                ", "phase1_ckpt", "=", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'phase1-ckpt'", "]", "\n", "", "if", "phase1_ckpt", "is", "None", "and", "cfg", "[", "'trainer1'", "]", "[", "'training'", "]", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "f'Time/total_train_time'", ",", "time1", "+", "time2", ",", "trainer", ".", "state", ".", "epoch", ")", "\n", "print", "(", "\"/// Total TRAINING TIME: \"", ",", "time1", "+", "time2", ")", "\n", "time_dict", "[", "'total_train_time'", "]", "=", "time1", "+", "time2", "\n", "\n", "", "", "", "if", "is_warmup", ":", "\n", "        ", "cf_data", "=", "None", "\n", "flag_util_gnd_truth", "=", "False", "\n", "", "else", ":", "\n", "        ", "flag_util_gnd_truth", "=", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", "[", "'util_gnd'", "]", "\n", "if", "not", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", "[", "'load_cf'", "]", ":", "\n", "            ", "cf_data", "=", "None", "\n", "", "else", ":", "\n", "            ", "cf_data", "=", "cf_loader", ".", "dataset", "\n", "\n", "", "", "@", "loop_trainer", ".", "on", "(", "Events", ".", "COMPLETED", ")", "\n", "def", "evaluate_after_training", "(", "trainer", ")", ":", "\n", "        ", "global", "output_train_2", ",", "output_valid_2", ",", "output_test_2", ",", "train_2_metrics", ",", "val_2_metrics", ",", "test_2_metrics", "\n", "output_train_2", ",", "output_valid_2", ",", "output_test_2", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "output_train_2", "[", "'metrics'", "]", "=", "evaluate_model_generalized", "(", "engine", "=", "train_evaluator", ",", "model", "=", "p2_model", ",", "\n", "prob_model", "=", "prob_model", ",", "\n", "dataset", "=", "loader", ".", "dataset", ",", "\n", "phase_num", "=", "'Phase2'", ",", "policy", "=", "policy_phase_2", ",", "\n", "costs", "=", "costs", ",", "loss", "=", "loss_function", ",", "\n", "trainer_state", "=", "loop_trainer", ",", "state", "=", "'final'", ",", "\n", "metric_dct", "=", "train_2_metrics", ",", "\n", "epochs_per_step", "=", "epoch_every_step", ")", "\n", "output_valid_2", "[", "'metrics'", "]", "=", "evaluate_model_generalized", "(", "engine", "=", "valid_evaluator", ",", "model", "=", "p2_model", ",", "\n", "prob_model", "=", "prob_model", ",", "\n", "dataset", "=", "val_loader", ".", "dataset", ",", "\n", "phase_num", "=", "'Phase2'", ",", "policy", "=", "policy_phase_2", ",", "costs", "=", "costs", ",", "\n", "loss", "=", "loss_function", ",", "\n", "trainer_state", "=", "loop_trainer", ",", "state", "=", "'final'", ",", "\n", "metric_dct", "=", "val_2_metrics", ",", "\n", "epochs_per_step", "=", "epoch_every_step", ")", "\n", "output_test_2", "[", "'metrics'", "]", "=", "evaluate_model_generalized", "(", "engine", "=", "test_evaluator", ",", "model", "=", "p2_model", ",", "\n", "prob_model", "=", "prob_model", ",", "\n", "dataset", "=", "test_loader", ".", "dataset", ",", "\n", "phase_num", "=", "'Phase2'", ",", "policy", "=", "policy_phase_2", ",", "costs", "=", "costs", ",", "\n", "loss", "=", "loss_function", ",", "\n", "trainer_state", "=", "loop_trainer", ",", "state", "=", "'final'", ",", "\n", "metric_dct", "=", "test_2_metrics", ",", "\n", "epochs_per_step", "=", "epoch_every_step", ",", "\n", "cf_dataset", "=", "cf_data", ",", "\n", "util_gnd", "=", "flag_util_gnd_truth", ")", "\n", "\n", "", "costs", "=", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'costs'", "]", "\n", "loss_function", "=", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'loss_function'", "]", "\n", "global", "train_2_metrics", ",", "val_2_metrics", ",", "test_2_metrics", "\n", "train_2_metrics", ",", "val_2_metrics", ",", "test_2_metrics", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "train_evaluator", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "evaluate_model_generalized", ",", "model", "=", "p2_model", ",", "\n", "prob_model", "=", "prob_model", ",", "dataset", "=", "loader", ".", "dataset", ",", "\n", "epochs_per_step", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", ",", "\n", "metric_dct", "=", "train_2_metrics", ",", "trainer_state", "=", "loop_trainer", ",", "\n", "phase_num", "=", "'Phase2'", ",", "\n", "policy", "=", "policy_phase_2", ",", "costs", "=", "costs", ",", "loss", "=", "loss_function", ",", "state", "=", "'epoch'", ")", "\n", "valid_evaluator", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "evaluate_model_generalized", ",", "\n", "trainer_state", "=", "loop_trainer", ",", "model", "=", "p2_model", ",", "\n", "prob_model", "=", "prob_model", ",", "\n", "dataset", "=", "val_loader", ".", "dataset", ",", "\n", "epochs_per_step", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", ",", "\n", "metric_dct", "=", "val_2_metrics", ",", "phase_num", "=", "'Phase2'", ",", "policy", "=", "policy_phase_2", ",", "\n", "costs", "=", "costs", ",", "loss", "=", "loss_function", ",", "state", "=", "'epoch'", ")", "\n", "test_evaluator", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "evaluate_model_generalized", ",", "\n", "trainer_state", "=", "loop_trainer", ",", "model", "=", "p2_model", ",", "\n", "prob_model", "=", "prob_model", ",", "\n", "dataset", "=", "test_loader", ".", "dataset", ",", "\n", "epochs_per_step", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", ",", "\n", "metric_dct", "=", "test_2_metrics", ",", "phase_num", "=", "'Phase2'", ",", "policy", "=", "policy_phase_2", ",", "\n", "costs", "=", "costs", ",", "loss", "=", "loss_function", ",", "state", "=", "'epoch'", ",", "\n", "cf_dataset", "=", "cf_data", ",", "util_gnd", "=", "flag_util_gnd_truth", ")", "\n", "\n", "if", "is_warmup", ":", "\n", "        ", "print", "(", "\"Phase Warmup Begins\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Phase 2 Begins\"", ")", "\n", "", "epoch_every_timestep", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", "\n", "max_epochs_phase_2", "=", "epoch_every_timestep", "*", "cfg", "[", "'trainer2'", "]", "[", "'time_steps'", "]", "# Total epochs is this now.", "\n", "# Run model", "\n", "train", "(", "loop_trainer", ",", "loader", ",", "max_epochs_phase_2", ")", "\n", "if", "is_warmup", ":", "\n", "        ", "argtools", ".", "save_yaml", "(", "cfg", ",", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'hparams_warmup.yaml'", ")", ")", "\n", "", "else", ":", "\n", "        ", "argtools", ".", "save_yaml", "(", "cfg", ",", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'hparams_phase2.yaml'", ")", ")", "\n", "", "return", "output_train_2", ",", "output_valid_2", ",", "output_test_2", ",", "cfg", ",", "time_dict", ",", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.phase_1": [[219, 317], ["utils.trainer.create_trainer", "main_helpers.print_info", "p1_trainer.on", "p1_trainer.on", "p1_trainer.on", "utils.timer.Timer", "p1_trainer.on", "p1_trainer.on", "p1_trainer.on", "p1_train_evaluator.add_event_handler", "p1_valid_evaluator.add_event_handler", "p1_test_evaluator.add_event_handler", "print", "main_helpers.train", "utils.save_yaml", "os.path.join", "p1_train_evaluator.run", "p1_valid_evaluator.run", "p1_test_evaluator.run", "utils.timer.Timer.tic", "utils.timer.Timer.toc", "writer.add_scalar", "print", "utils.miscelanea.evaluate_model_generalized", "utils.miscelanea.evaluate_model_generalized", "utils.miscelanea.evaluate_model_generalized", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.trainer.create_trainer", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.print_info", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.save_yaml", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.tic", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.timer.Timer.toc", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.evaluate_model_generalized", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.evaluate_model_generalized", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.evaluate_model_generalized"], ["", "def", "phase_1", "(", "p1_model", ",", "p1_prob_model", ",", "p1_loader", ",", "p1_valid_loader", ",", "p1_test_loader", ",", "\n", "cfg", ",", "writer", ",", "time_dict", ",", "save_dir", ")", ":", "\n", "    ", "\"\"\"\n    Function for phase 1 learning.\n    @param p1_model: VAE model\n    @param p1_prob_model: probabilistic model\n    @param p1_loader: train data loader\n    @param p1_valid_loader: validation data loader\n    @param p1_test_loader: test data loader\n    @param cfg: config\n    @param writer: writer object\n    @param time_dict: dict for time information\n    @param save_dir: save location\n    @return: outputs on the data, cfg, time_dict, writer\n    \"\"\"", "\n", "\n", "p1_trainer", ",", "p1_train_evaluator", ",", "p1_valid_evaluator", ",", "p1_test_evaluator", "=", "create_trainer", "(", "p1_model", ",", "p1_loader", ".", "dataset", ",", "cfg", ")", "\n", "print_info", "(", "p1_model", ",", "p1_loader", ")", "\n", "\n", "@", "p1_trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", ")", "\n", "def", "log_training_results", "(", "trainer", ")", ":", "\n", "        ", "p1_train_evaluator", ".", "run", "(", "p1_loader", ")", "\n", "\n", "", "@", "p1_trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", ")", "\n", "def", "log_validation_results", "(", "trainer", ")", ":", "\n", "        ", "p1_valid_evaluator", ".", "run", "(", "p1_valid_loader", ")", "\n", "\n", "", "@", "p1_trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", ")", "\n", "def", "log_test_results", "(", "trainer", ")", ":", "\n", "        ", "p1_test_evaluator", ".", "run", "(", "p1_test_loader", ")", "\n", "\n", "", "timer", "=", "Timer", "(", ")", "\n", "\n", "@", "p1_trainer", ".", "on", "(", "Events", ".", "STARTED", ")", "\n", "def", "start_timer", "(", "trainer", ")", ":", "\n", "        ", "timer", ".", "tic", "(", "'train'", ")", "\n", "\n", "", "@", "p1_trainer", ".", "on", "(", "Events", ".", "COMPLETED", ")", "\n", "def", "end_timer", "(", "trainer", ")", ":", "\n", "        ", "global", "time", "\n", "time", "=", "timer", ".", "toc", "(", "'train'", ")", "\n", "writer", ".", "add_scalar", "(", "f'Time/phase1_train_time'", ",", "time", ",", "trainer", ".", "state", ".", "epoch", ")", "\n", "print", "(", "\"//// Time\"", ",", "time", ")", "\n", "time_dict", "[", "'phase1_time'", "]", "=", "time", "\n", "\n", "", "@", "p1_trainer", ".", "on", "(", "Events", ".", "COMPLETED", ")", "\n", "def", "evaluate_after_training", "(", "trainer", ")", ":", "\n", "        ", "global", "output_train", ",", "output_valid", ",", "output_test", ",", "train1_metrics", ",", "val1_metrics", ",", "test1_metrics", "\n", "output_train", ",", "output_valid", ",", "output_test", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "output_train", "[", "'metrics'", "]", "=", "evaluate_model_generalized", "(", "engine", "=", "p1_train_evaluator", ",", "model", "=", "p1_model", ",", "\n", "prob_model", "=", "p1_prob_model", ",", "dataset", "=", "p1_loader", ".", "dataset", ",", "\n", "phase_num", "=", "'Phase1'", ",", "policy", "=", "None", ",", "costs", "=", "costs", ",", "\n", "loss", "=", "loss_function", ",", "trainer_state", "=", "p1_trainer", ",", "\n", "state", "=", "'final'", ",", "metric_dct", "=", "train1_metrics", ",", "\n", "epochs_per_step", "=", "None", ")", "\n", "output_valid", "[", "'metrics'", "]", "=", "evaluate_model_generalized", "(", "engine", "=", "p1_valid_evaluator", ",", "model", "=", "p1_model", ",", "\n", "prob_model", "=", "p1_prob_model", ",", "\n", "dataset", "=", "p1_valid_loader", ".", "dataset", ",", "\n", "phase_num", "=", "'Phase1'", ",", "policy", "=", "None", ",", "costs", "=", "costs", ",", "\n", "loss", "=", "loss_function", ",", "trainer_state", "=", "p1_trainer", ",", "\n", "state", "=", "'final'", ",", "metric_dct", "=", "val1_metrics", ",", "\n", "epochs_per_step", "=", "None", ")", "\n", "output_test", "[", "'metrics'", "]", "=", "evaluate_model_generalized", "(", "engine", "=", "p1_test_evaluator", ",", "model", "=", "p1_model", ",", "\n", "prob_model", "=", "p1_prob_model", ",", "\n", "dataset", "=", "p1_test_loader", ".", "dataset", ",", "\n", "phase_num", "=", "'Phase1'", ",", "policy", "=", "None", ",", "costs", "=", "costs", ",", "\n", "loss", "=", "loss_function", ",", "trainer_state", "=", "p1_trainer", ",", "\n", "state", "=", "'final'", ",", "metric_dct", "=", "test1_metrics", ",", "\n", "epochs_per_step", "=", "None", ")", "\n", "\n", "", "costs", "=", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'costs'", "]", "\n", "loss_function", "=", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'loss_function'", "]", "\n", "\n", "global", "train1_metrics", ",", "val1_metrics", ",", "test1_metrics", "\n", "train1_metrics", ",", "val1_metrics", ",", "test1_metrics", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "\n", "p1_train_evaluator", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "evaluate_model_generalized", ",", "model", "=", "p1_model", ",", "\n", "prob_model", "=", "p1_prob_model", ",", "metric_dct", "=", "train1_metrics", ",", "epochs_per_step", "=", "None", ",", "\n", "dataset", "=", "p1_loader", ".", "dataset", ",", "trainer_state", "=", "p1_trainer", ",", "\n", "phase_num", "=", "'Phase1'", ",", "policy", "=", "None", ",", "costs", "=", "costs", ",", "loss", "=", "loss_function", ",", "\n", "state", "=", "'train'", ")", "\n", "p1_valid_evaluator", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "evaluate_model_generalized", ",", "model", "=", "p1_model", ",", "\n", "prob_model", "=", "p1_prob_model", ",", "metric_dct", "=", "val1_metrics", ",", "epochs_per_step", "=", "None", ",", "\n", "dataset", "=", "p1_valid_loader", ".", "dataset", ",", "trainer_state", "=", "p1_trainer", ",", "\n", "phase_num", "=", "'Phase1'", ",", "policy", "=", "None", ",", "costs", "=", "costs", ",", "loss", "=", "loss_function", ",", "\n", "state", "=", "'train'", ")", "\n", "p1_test_evaluator", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "evaluate_model_generalized", ",", "model", "=", "p1_model", ",", "\n", "prob_model", "=", "p1_prob_model", ",", "metric_dct", "=", "test1_metrics", ",", "epochs_per_step", "=", "None", ",", "\n", "dataset", "=", "p1_test_loader", ".", "dataset", ",", "trainer_state", "=", "p1_trainer", ",", "\n", "phase_num", "=", "'Phase1'", ",", "policy", "=", "None", ",", "costs", "=", "costs", ",", "loss", "=", "loss_function", ",", "\n", "state", "=", "'train'", ")", "\n", "\n", "print", "(", "\"Start training Phase 1 from scratch\"", ")", "\n", "train", "(", "p1_trainer", ",", "p1_loader", ",", "cfg", "[", "'trainer1'", "]", "[", "'epochs'", "]", ")", "\n", "argtools", ".", "save_yaml", "(", "cfg", ",", "file_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'hparams_phase1.yaml'", ")", ")", "\n", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'phase1-hparams'", "]", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'hparams_phase1.yaml'", ")", "\n", "return", "output_train", ",", "output_valid", ",", "output_test", ",", "cfg", ",", "time_dict", ",", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.get_policy": [[319, 338], ["PolicyQxs", "PolicyPzs", "PolicyFz", "PolicyNA"], "function", ["None"], ["", "def", "get_policy", "(", "learn_policy", ",", "cfg", ")", ":", "\n", "    ", "\"\"\"\n    Function to return the policy we want to use in phase 2\n    @param learn_policy: which policy (our paper's method is FZ, with FZ method as DEC)\n    @param cfg: config\n    @return: policy\n    \"\"\"", "\n", "if", "learn_policy", "==", "'QXS'", ":", "\n", "        ", "policy_phase_2", "=", "PolicyQxs", "(", "config", "=", "cfg", ")", "\n", "", "elif", "learn_policy", "==", "'PZS'", ":", "\n", "        ", "policy_phase_2", "=", "PolicyPzs", "(", "config", "=", "cfg", ")", "\n", "", "elif", "learn_policy", "==", "'FZ'", ":", "\n", "# In warmup, num epochs should be num warmup_ts", "\n", "        ", "policy_phase_2", "=", "PolicyFz", "(", "config", "=", "cfg", ",", "epochs", "=", "cfg", "[", "'trainer2'", "]", "[", "'warmup_ts'", "]", ")", "\n", "", "elif", "learn_policy", "==", "'NA'", ":", "\n", "        ", "policy_phase_2", "=", "PolicyNA", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "return", "policy_phase_2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.transfer_model": [[340, 402], ["print", "torch.load", "print", "utils.parse_args", "models.create_model.load_state_dict", "print", "print", "print", "print", "os.listdir", "lipstd.get_likelihood().eval", "models.create_model", "models.create_model", "torch.no_grad", "list", "models.create_model.state_dict", "models.create_model.state_dict", "os.path.isfile", "files.append", "lipstd.get_likelihood", "models.create_model.state_dict().keys", "models.create_model.state_dict", "p2_model.state_dict", "p2_model.state_dict", "p2_model.state_dict", "models.create_model.state_dict", "p2_model.state_dict", "models.create_model.state_dict", "os.path.join", "p2_model.state_dict", "models.create_model.state_dict"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.parse_args", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.__init__.create_model", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.__init__.create_model", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_likelihood"], ["", "def", "transfer_model", "(", "phase1_ckpt", ",", "p1_prob_model", ",", "p2_model", ",", "warmup_prob_model", ",", "cfg", ",", "ran_phase1", ",", "req_semisup", ",", "conditional", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to transfer weights from pre-trained phase 1 model to phase 2 model.\n    @param phase1_ckpt: phase 1 model checkpoint\n    @param p1_prob_model: phase 1 prob model\n    @param p2_model: phase 2 VAE model\n    @param warmup_prob_model: warmup phase prob model\n    @param cfg: config dict\n    @param ran_phase1: flag to check if we ran phase 1 in this run or not.\n    @param req_semisup: flag to check if we are to do semisup learning.\n    @param conditional: flag to check if we will model conditional.\n    @return: phase 2 model object with transferred weights.\n    \"\"\"", "\n", "if", "(", "phase1_ckpt", "is", "not", "None", ")", "or", "ran_phase1", ":", "\n", "# Only if Phase 1 training happens will we do transfer learning! Otherwise we directly load random model!", "\n", "# Load best phase1 model", "\n", "        ", "if", "ran_phase1", "is", "True", ":", "\n", "            ", "print", "(", "\"Loading best model from Phase 1 ....\"", ")", "\n", "path", "=", "cfg", "[", "'save_dir'", "]", "\n", "files", "=", "[", "]", "\n", "for", "i", "in", "os", ".", "listdir", "(", "path", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "path", ",", "i", ")", ")", "and", "'checkpoint_phase1'", "in", "i", ":", "\n", "                    ", "files", ".", "append", "(", "i", ")", "\n", "", "", "ckpt_path", "=", "f'{cfg[\"save_dir\"]}/{files[0]}'", "\n", "", "else", ":", "\n", "            ", "ckpt_path", "=", "phase1_ckpt", "\n", "", "print", "(", "\"Phase 1 ckpt:\"", ",", "ckpt_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "print", "(", "\"Loaded model from Phase 1!\"", ")", "\n", "cfg1", "=", "argtools", ".", "parse_args", "(", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'phase1-hparams'", "]", ")", "\n", "if", "p1_prob_model", "is", "None", ":", "\n", "            ", "p1_prob_model", "=", "lipstd", ".", "get_likelihood", "(", "cfg1", "[", "'probabilistic'", "]", "[", "'probabilistic_model1'", "]", ")", ".", "eval", "(", ")", "\n", "", "if", "req_semisup", ":", "\n", "            ", "p1_model", "=", "create_model", "(", "'cvae'", ",", "p1_prob_model", ",", "conditional", ",", "cfg1", ",", "phase", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "p1_model", "=", "create_model", "(", "cfg", "[", "'model'", "]", "[", "'name'", "]", ",", "p1_prob_model", ",", "conditional", ",", "cfg1", ",", "phase", "=", "1", ")", "\n", "\n", "", "p1_model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "\n", "# These are the weights that will need to be transferred from the CVAE!", "\n", "p1_model_keys", "=", "[", "k", "for", "k", "in", "list", "(", "p1_model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "if", "'encoder'", "in", "k", "or", "'decoder'", "in", "k", "]", "\n", "print", "(", "\"Weights to transfer\"", ")", "\n", "print", "(", "p1_model_keys", ")", "\n", "# This encoder weight and bias will need to be manually transferred!", "\n", "enc_weight", "=", "p1_model_keys", "[", "0", "]", "\n", "# This decoder weight and bias will need to be manually transferred!", "\n", "dec_weight", ",", "dec_bias", "=", "p1_model_keys", "[", "-", "2", "]", ",", "p1_model_keys", "[", "-", "1", "]", "\n", "# So, these are the weights that we can directly transfer because no dim. size problems!", "\n", "p1_model_keys", "=", "p1_model_keys", "[", "1", ":", "-", "2", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "k", "in", "p1_model_keys", ":", "\n", "                ", "p2_model", ".", "state_dict", "(", ")", "[", "'cvae.'", "+", "k", "]", "[", ":", ",", "]", "=", "p1_model", ".", "state_dict", "(", ")", "[", "k", "]", "\n", "# Now we need special care!", "\n", "# 1. Decoder last layer that goes to the reconstruction of data. Changes from p(X) to p(X, U).", "\n", "", "diff_prob_size", "=", "warmup_prob_model", ".", "num_params", "-", "p1_prob_model", ".", "num_params", "\n", "p2_model", ".", "state_dict", "(", ")", "[", "'cvae.'", "+", "dec_weight", "]", "[", ":", "-", "diff_prob_size", ",", ":", "]", "=", "p1_model", ".", "state_dict", "(", ")", "[", "dec_weight", "]", "\n", "p2_model", ".", "state_dict", "(", ")", "[", "'cvae.'", "+", "dec_bias", "]", "[", ":", "-", "diff_prob_size", "]", "=", "p1_model", ".", "state_dict", "(", ")", "[", "dec_bias", "]", "\n", "# 2. Encoder first layer that goes from data to hidden. Changes from (X, S) to (X, U, S).", "\n", "p2_model", ".", "state_dict", "(", ")", "[", "'cvae.'", "+", "enc_weight", "]", "[", ":", ",", ":", "-", "2", "]", "=", "p1_model", ".", "state_dict", "(", ")", "[", "enc_weight", "]", "[", ":", ",", ":", "-", "1", "]", "\n", "p2_model", ".", "state_dict", "(", ")", "[", "'cvae.'", "+", "enc_weight", "]", "[", ":", ",", "-", "1", "]", "=", "p1_model", ".", "state_dict", "(", ")", "[", "enc_weight", "]", "[", ":", ",", "-", "1", "]", "\n", "", "print", "(", "\"Transferred Phase 1 model to Phase 2!\"", ")", "\n", "", "return", "p2_model", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.init_loaders": [[404, 422], ["utils.datasets.get_dataloader", "utils.datasets.get_dataloader", "utils.datasets.get_dataloader", "utils.datasets.get_dataloader"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.get_dataloader", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.get_dataloader", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.get_dataloader", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.get_dataloader"], ["", "def", "init_loaders", "(", "cfg", ",", "prob_model", ",", "phase", ",", "warmup", ")", ":", "\n", "    ", "\"\"\"\n    Function to initialise data loaders for a phase\n    @param cfg: config\n    @param prob_model: probabilistic model\n    @param phase: which phase of learning 1 or 2\n    @param warmup: is this warmup call?\n    @return: train, valid, test, (counterfactual if there) loaders\n    \"\"\"", "\n", "loader", "=", "get_dataloader", "(", "cfg", ",", "prob_model", ",", "phase", "=", "phase", ",", "test", "=", "False", ",", "val", "=", "False", ",", "warmup", "=", "warmup", ")", "\n", "# warmup is False for valid and test data", "\n", "valid_loader", "=", "get_dataloader", "(", "cfg", ",", "prob_model", ",", "phase", "=", "phase", ",", "test", "=", "False", ",", "val", "=", "True", ",", "warmup", "=", "False", ")", "\n", "test_loader", "=", "get_dataloader", "(", "cfg", ",", "prob_model", ",", "phase", "=", "phase", ",", "test", "=", "True", ",", "val", "=", "False", ",", "warmup", "=", "False", ")", "\n", "if", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", "[", "'load_cf'", "]", "and", "phase", "==", "2", ":", "\n", "        ", "cf_loader", "=", "get_dataloader", "(", "cfg", ",", "prob_model", ",", "phase", "=", "phase", ",", "test", "=", "True", ",", "val", "=", "False", ",", "warmup", "=", "False", ",", "cf", "=", "True", ")", "\n", "return", "loader", ",", "valid_loader", ",", "test_loader", ",", "cf_loader", "\n", "", "else", ":", "\n", "        ", "return", "loader", ",", "valid_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.check_predict_from_data": [[424, 459], ["sklearn.linear_model.LogisticRegression().fit", "LogisticRegression().fit.score", "loader.dataset.data.numpy", "test_loader.dataset.data.numpy", "s.numpy().ravel", "s_test.numpy().ravel", "print", "writer.add_scalar", "numpy.hstack", "numpy.hstack", "sklearn.linear_model.LogisticRegression", "print", "writer.add_scalar", "s.numpy", "s_test.numpy", "loader.dataset.data.numpy", "test_loader.dataset.data.numpy"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.fit"], ["", "", "def", "check_predict_from_data", "(", "loader", ",", "test_loader", ",", "writer", ",", "pred_var", ",", "phase", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to predict either sensitive S or utility U from data features\n    @param loader: train data loader\n    @param test_loader: test data loader\n    @param writer: writer object\n    @param pred_var: predict 'S' (sensitive) or 'U' (utility)\n    @param phase: which phase 1 or 2\n    @return: updated writer\n    \"\"\"", "\n", "X_tr", "=", "loader", ".", "dataset", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "X_ts", "=", "test_loader", ".", "dataset", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "s", "=", "loader", ".", "dataset", ".", "sens", "# needs to be cond index", "\n", "s_test", "=", "test_loader", ".", "dataset", ".", "sens", "# needs to be cond index", "\n", "if", "pred_var", "==", "'S'", ":", "\n", "        ", "S_tr", "=", "s", ".", "numpy", "(", ")", ".", "ravel", "(", ")", "\n", "S_ts", "=", "s_test", ".", "numpy", "(", ")", ".", "ravel", "(", ")", "\n", "p_var", ",", "p_var_test", "=", "S_tr", ",", "S_ts", "\n", "", "elif", "pred_var", "==", "'U'", ":", "\n", "        ", "U_tr", "=", "loader", ".", "dataset", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "-", "2", "]", "\n", "U_ts", "=", "test_loader", ".", "dataset", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "-", "2", "]", "\n", "p_var", ",", "p_var_test", "=", "U_tr", ",", "U_ts", "\n", "X_tr", "=", "np", ".", "hstack", "(", "(", "X_tr", ",", "s", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "X_ts", "=", "np", ".", "hstack", "(", "(", "X_ts", ",", "s_test", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "clf", "=", "LogisticRegression", "(", "class_weight", "=", "'balanced'", ")", ".", "fit", "(", "X_tr", ",", "p_var", ")", "\n", "score", "=", "clf", ".", "score", "(", "X_ts", ",", "p_var_test", ")", "\n", "if", "pred_var", "==", "'S'", ":", "\n", "        ", "print", "(", "f\"Phase {phase} predictability of s from x ACC:\"", ",", "score", ")", "\n", "writer", ".", "add_scalar", "(", "f'Data/S-from-X ACC'", ",", "score", ",", "phase", ")", "\n", "", "elif", "pred_var", "==", "'U'", ":", "\n", "        ", "print", "(", "f\"Phase {phase} predictability of u from X,S ACC:\"", ",", "score", ")", "\n", "writer", ".", "add_scalar", "(", "f'Data/U-from-XS ACC'", ",", "score", ",", "2", ")", "\n", "", "return", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.set_latent_size": [[461, 470], ["len", "max", "print", "int"], "function", ["None"], ["", "def", "set_latent_size", "(", "cfg", ",", "prob_model", ")", ":", "\n", "    ", "if", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'latent_size'", "]", "is", "None", ":", "\n", "        ", "if", "cfg", "[", "'model'", "]", "[", "'name'", "]", "in", "[", "'vae'", ",", "'cvae'", ",", "'sscvae'", "]", ":", "\n", "            ", "len_", "=", "len", "(", "prob_model", ")", "\n", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'latent_size'", "]", "=", "max", "(", "1", ",", "int", "(", "len_", "*", "0.75", "+", "0.5", ")", ")", "\n", "print", "(", "\"Latent size:\"", ",", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'latent_size'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.process_conditional": [[472, 482], ["[].remove", "[].remove", "len", "len"], "function", ["None"], ["", "def", "process_conditional", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", "[", "'trainer1'", "]", "[", "'training'", "]", ":", "\n", "        ", "condition_index1", "=", "len", "(", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model1'", "]", ")", "-", "1", "\n", "del", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model1'", "]", "[", "condition_index1", "]", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'categoricals1'", "]", ".", "remove", "(", "condition_index1", ")", "\n", "", "if", "cfg", "[", "'trainer2'", "]", "[", "'training'", "]", ":", "\n", "        ", "condition_index2", "=", "len", "(", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model2'", "]", ")", "-", "1", "\n", "del", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model2'", "]", "[", "condition_index2", "]", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'categoricals2'", "]", ".", "remove", "(", "condition_index2", ")", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.process_parser_args": [[484, 532], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.parse_args", "utils.parse_args", "argtools.parse_args.update", "argtools.parse_args.update", "[].copy", "[].update", "utils.parse_args", "utils.parse_args", "len", "int", "int", "[].update", "[].update", "[].update", "cfg[].update"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.parse_args", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.parse_args", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.parse_args", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.args_parser.parse_args", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update"], ["", "def", "process_parser_args", "(", "parser", ")", ":", "\n", "    ", "\"\"\"\n    Add necessary arguments to arg parser, process and generate config dict.\n    @param parser: parser object\n    @return: cfg dict, args\n    \"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dataset_file'", ",", "default", "=", "'_params/dataset_SCB_11.yaml'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to configuration file for the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_file'", ",", "default", "=", "'_params/model_fairall.yaml'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to configuration file for the dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--trainer_file'", ",", "default", "=", "'_params/trainer.yaml'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to configuration file for the training'", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dataset_dict'", ",", "action", "=", "argtools", ".", "StoreDictKeyPair", ",", "metavar", "=", "\"KEY1=VAL1,KEY2=VAL2...\"", ",", "\n", "help", "=", "'manually define dataset configurations as string: KEY1=VALUE1+KEY2=VALUE2+...'", ")", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model_dict'", ",", "action", "=", "argtools", ".", "StoreDictKeyPair", ",", "metavar", "=", "\"KEY1=VAL1,KEY2=VAL2...\"", ",", "\n", "help", "=", "'manually define model configurations as string: KEY1=VALUE1+KEY2=VALUE2+...'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--optim_dict'", ",", "action", "=", "argtools", ".", "StoreDictKeyPair", ",", "metavar", "=", "\"KEY1=VAL1,KEY2=VAL2...\"", ",", "\n", "help", "=", "'manually define optimizer configurations as string: KEY1=VALUE1+KEY2=VALUE2+...'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--trainer_dict'", ",", "action", "=", "argtools", ".", "StoreDictKeyPair", ",", "metavar", "=", "\"KEY1=VAL1,KEY2=VAL2...\"", ",", "\n", "help", "=", "'manually define trainer configurations as string: KEY1=VALUE1+KEY2=VALUE2+...'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--seed'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'set random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'-r'", ",", "'--result_dir'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'directory for storing results'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "argtools", ".", "parse_args", "(", "args", ".", "dataset_file", ")", "\n", "cfg", ".", "update", "(", "argtools", ".", "parse_args", "(", "args", ".", "model_file", ")", ")", "\n", "cfg", ".", "update", "(", "argtools", ".", "parse_args", "(", "args", ".", "trainer_file", ")", ")", "\n", "\n", "if", "len", "(", "args", ".", "result_dir", ")", ">", "0", ":", "\n", "        ", "cfg", "[", "'root_dir'", "]", "=", "args", ".", "result_dir", "\n", "", "if", "int", "(", "args", ".", "seed", ")", ">=", "0", ":", "\n", "        ", "cfg", "[", "'seed'", "]", "=", "int", "(", "args", ".", "seed", ")", "\n", "\n", "", "if", "args", ".", "dataset_dict", "is", "not", "None", ":", "\n", "        ", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", ".", "update", "(", "args", ".", "dataset_dict", ")", "\n", "", "if", "args", ".", "model_dict", "is", "not", "None", ":", "\n", "        ", "cfg", "[", "'model'", "]", "[", "'params'", "]", ".", "update", "(", "args", ".", "model_dict", ")", "\n", "", "if", "args", ".", "optim_dict", "is", "not", "None", ":", "\n", "        ", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", ".", "update", "(", "args", ".", "optim_dict", ")", "\n", "", "if", "args", ".", "trainer_dict", "is", "not", "None", ":", "\n", "        ", "cfg", "[", "'trainer1'", "]", ".", "update", "(", "args", ".", "trainer_dict", ")", "\n", "\n", "", "cfg", "[", "'dataset'", "]", "[", "'params'", "]", "=", "cfg", "[", "'dataset'", "]", "[", "'params1'", "]", ".", "copy", "(", ")", "\n", "cfg", "[", "'dataset'", "]", "[", "'params'", "]", ".", "update", "(", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", ")", "\n", "# print(args.dataset_dict)", "\n", "# print(cfg)", "\n", "return", "cfg", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.validate": [[534, 608], ["datetime.datetime.today", "datetime.today.strftime", "print", "subprocess.Popen", "eval", "print", "subprocess.Popen", "eval", "[].decode", "[].decode", "subprocess.Popen.communicate", "subprocess.Popen.communicate"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode"], ["", "def", "validate", "(", "cfg", ")", ":", "\n", "    ", "\"\"\"\n    Validate and correct config dict\n    @param cfg: config dict\n    @return: validated config dict\n    \"\"\"", "\n", "time_stamp", "=", "datetime", ".", "today", "(", ")", "\n", "cfg", "[", "'timestamp'", "]", "=", "time_stamp", ".", "strftime", "(", "'%Y-%m-%d-%H:%M:%S'", ")", "\n", "\n", "dataset", "=", "cfg", "[", "'dataset'", "]", "[", "'name'", "]", "\n", "if", "'load_cf'", "not", "in", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", ":", "\n", "        ", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", "[", "'load_cf'", "]", "=", "False", "\n", "", "if", "'util_gnd'", "not", "in", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", ":", "\n", "        ", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", "[", "'util_gnd'", "]", "=", "False", "\n", "", "if", "'SCB'", "not", "in", "dataset", ":", "\n", "        ", "assert", "cfg", "[", "'dataset'", "]", "[", "'params2'", "]", "[", "'load_cf'", "]", "is", "False", ",", "\"Cannot load counterfactual for non-synthetic!\"", "\n", "\n", "", "assert", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'loss_function'", "]", "in", "[", "Cte", ".", "LOSS_FAIRALL", ",", "Cte", ".", "LOSS_FAIRLAB", ",", "Cte", ".", "LOSS_FAIRLOG", "]", ",", "'dont recognize this loss'", "\n", "\n", "assert", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'learn_policy'", "]", "in", "[", "Cte", ".", "POL_FZ", ",", "Cte", ".", "POL_PZS", ",", "Cte", ".", "POL_NA", ",", "Cte", ".", "POL_QXS", "]", ",", "'dont recognize this learn_poicy'", "\n", "\n", "assert", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'fz_method'", "]", "in", "[", "Cte", ".", "FZ_LAB", ",", "Cte", ".", "FZ_CLF", ",", "Cte", ".", "FZ_DEC", ",", "None", "]", ",", "'dont recognize this fz_method'", "\n", "\n", "if", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'loss_function'", "]", "in", "[", "Cte", ".", "LOSS_FAIRLAB", "]", ":", "\n", "        ", "assert", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'learn_policy'", "]", "in", "[", "Cte", ".", "POL_FZ", ",", "Cte", ".", "POL_PZS", ",", "\n", "Cte", ".", "POL_NA", "]", ",", "'cannot use classifier policy'", "\n", "if", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'learn_policy'", "]", "==", "Cte", ".", "POL_FZ", ":", "\n", "            ", "assert", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "\n", "'fz_method'", "]", "==", "Cte", ".", "FZ_LAB", ",", "'can only learn from labelled data when doing ips_loss'", "\n", "\n", "", "", "if", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'loss_function'", "]", "in", "[", "Cte", ".", "LOSS_FAIRLOG", "]", ":", "\n", "        ", "assert", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'learn_policy'", "]", "in", "[", "Cte", ".", "POL_QXS", ",", "\n", "Cte", ".", "POL_NA", "]", ",", "'cannot use decoder or latent space policy'", "\n", "\n", "", "if", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'loss_function'", "]", "==", "Cte", ".", "LOSS_FAIRLOG", ":", "\n", "        ", "cfg", "[", "'trainer1'", "]", "[", "'training'", "]", "=", "False", "\n", "\n", "", "phase1_training", "=", "cfg", "[", "'trainer1'", "]", "[", "'training'", "]", "\n", "phase2_training", "=", "cfg", "[", "'trainer2'", "]", "[", "'training'", "]", "\n", "\n", "if", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'loss_function'", "]", "!=", "Cte", ".", "LOSS_FAIRLOG", ":", "\n", "# If not doing Niki loss, then forcefully set lambda to 0 because no constraints for fairness!", "\n", "        ", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'lambda'", "]", "=", "0.0", "\n", "\n", "", "assert", "not", "(", "phase1_training", "is", "False", "and", "phase2_training", "is", "False", ")", ",", "\"Both phase1 and phase2 training cannot be False!\"", "\n", "\n", "cfg", "[", "'probabilistic'", "]", "=", "{", "}", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model1'", "]", "=", "None", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'categoricals1'", "]", "=", "None", "\n", "\n", "if", "phase1_training", ":", "\n", "        ", "print", "(", "\"Generate prob_model for Phase 1\"", ")", "\n", "arguments1", "=", "[", "'./read_types.sh'", ",", "f'datasets/{dataset}/data1_types.csv'", "]", "\n", "proc", "=", "subprocess", ".", "Popen", "(", "arguments1", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "out", "=", "eval", "(", "proc", ".", "communicate", "(", ")", "[", "0", "]", ".", "decode", "(", "'ascii'", ")", ")", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model1'", "]", "=", "out", "[", "'probabilistic model'", "]", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'categoricals1'", "]", "=", "out", "[", "'categoricals'", "]", "\n", "\n", "", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model2'", "]", "=", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model1'", "]", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'categoricals2'", "]", "=", "cfg", "[", "'probabilistic'", "]", "[", "'categoricals1'", "]", "\n", "\n", "if", "phase2_training", ":", "\n", "        ", "print", "(", "\"Generate prob_model for Phase 2\"", ")", "\n", "arguments2", "=", "[", "'./read_types.sh'", ",", "f'datasets/{dataset}/data2_types.csv'", "]", "\n", "proc", "=", "subprocess", ".", "Popen", "(", "arguments2", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "out", "=", "eval", "(", "proc", ".", "communicate", "(", ")", "[", "0", "]", ".", "decode", "(", "'ascii'", ")", ")", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'probabilistic_model2'", "]", "=", "out", "[", "'probabilistic model'", "]", "\n", "cfg", "[", "'probabilistic'", "]", "[", "'categoricals2'", "]", "=", "out", "[", "'categoricals'", "]", "\n", "\n", "", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.print_data_info": [[610, 641], ["prob_model.eval", "print", "print", "print", "enumerate", "prob_model.train", "print", "print", "print", "print", "enumerate", "print", "print", "print", "print", "x[].min", "x[].max", "x.item", "x[].min", "x[].max", "lipstd.utils.flatten"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten"], ["", "def", "print_data_info", "(", "prob_model", ",", "data", ")", ":", "\n", "    ", "\"\"\"\n    Prints info about the data and the probabilistic model on it\n    @param prob_model: probabilistic model object\n    @param data: data\n    \"\"\"", "\n", "prob_model", ".", "eval", "(", ")", "\n", "print", "(", ")", "\n", "print", "(", "'#'", "*", "20", ")", "\n", "print", "(", "'Original data'", ")", "\n", "x", "=", "data", "\n", "pos", "=", "0", "\n", "for", "i", ",", "dist_i", "in", "enumerate", "(", "prob_model", ")", ":", "\n", "        ", "print", "(", "f'range of [{i}={dist_i}]: {x[:, pos: pos + dist_i.domain_size].min()} '", "\n", "f'{x[:, pos: pos + dist_i.domain_size].max()}'", ")", "\n", "pos", "+=", "dist_i", ".", "domain_size", "\n", "\n", "", "prob_model", ".", "train", "(", ")", "\n", "print", "(", ")", "\n", "print", "(", "f'weights = {[x.item() for x in flatten(prob_model.scale)]}'", ")", "\n", "print", "(", ")", "\n", "print", "(", "'Scaled data'", ")", "\n", "\n", "x", "=", "prob_model", ">>", "data", "\n", "pos", "=", "0", "\n", "for", "i", ",", "dist_i", "in", "enumerate", "(", "prob_model", ")", ":", "\n", "        ", "print", "(", "f'range of [{i}={dist_i}]: {x[:, pos: pos + dist_i.domain_size].min()} '", "\n", "f'{x[:, pos: pos + dist_i.domain_size].max()}'", ")", "\n", "pos", "+=", "dist_i", ".", "domain_size", "\n", "", "print", "(", "'#'", "*", "20", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.print_info": [[643, 646], ["print", "print"], "function", ["None"], ["", "def", "print_info", "(", "model", ",", "loader", ")", ":", "\n", "    ", "print", "(", "'Dataset:'", ",", "loader", ".", "dataset", ")", "\n", "print", "(", "'Model:'", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train": [[648, 663], ["trainer.run", "trainer.fire_event", "trainer.terminate", "print", "print"], "function", ["None"], ["", "def", "train", "(", "trainer", ",", "loader", ",", "max_epochs", ")", ":", "\n", "    ", "\"\"\"\n    Runs the ignite trainer\n    @param trainer: trainer object\n    @param loader: data loader\n    @param max_epochs: maximum epochs\n    \"\"\"", "\n", "try", ":", "\n", "        ", "trainer", ".", "run", "(", "loader", ",", "max_epochs", "=", "max_epochs", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "from", "ignite", ".", "engine", "import", "Events", "\n", "trainer", ".", "fire_event", "(", "Events", ".", "COMPLETED", ")", "\n", "trainer", ".", "terminate", "(", ")", "\n", "print", "(", "f'Training interrupted by keyboard.'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "''", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.evaluate": [[665, 763], ["torch.no_grad", "model.eval", "getattr", "torch.ones_like", "sigmoid", "torch.bernoulli().float", "torch.abs", "utils.metrics.compute_accuracy", "writer.add_scalar", "clf_err.item", "torch.abs.item", "model.reconstruct", "utils.miscelanea.imputation_error", "enumerate", "pca.fit_transform.numpy", "data[].unsqueeze().int().numpy().ravel", "sklearn.model_selection.train_test_split", "sklearn.linear_model.LogisticRegression().fit", "LogisticRegression().fit.score", "print", "writer.add_scalar", "data[].unsqueeze().int().numpy().ravel", "sklearn.model_selection.train_test_split", "sklearn.linear_model.LogisticRegression().fit", "LogisticRegression().fit.score", "print", "print", "writer.add_scalar", "str", "model.classify", "torch.bernoulli().float.flatten", "zip", "utils.plot_together", "utils.plot_z", "torch.bernoulli", "pred_0.mean", "pred_1.mean", "writer.add_scalar", "err.item", "data[].unsqueeze().int().numpy", "sklearn.linear_model.LogisticRegression", "open", "f.write", "data[].unsqueeze().int().numpy", "sklearn.linear_model.LogisticRegression", "open", "f.write", "print", "sklearn.decomposition.PCA", "sklearn.decomposition.PCA.fit_transform", "print", "str", "str", "str", "is_discrete", "writer.add_scalar", "err.item", "writer.add_scalar", "err.item", "len", "data[].unsqueeze().int", "str", "data[].unsqueeze().int", "str", "data[].unsqueeze", "data[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.reconstruct", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.imputation_error", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.fit", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.fit", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.classify", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.plotting.plot_together", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.plotting.plot_z", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.is_discrete"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "model", ",", "prob_model", ",", "loader", ",", "writer", ",", "path", ",", "phase", ",", "type_", ",", "loss_function", ")", ":", "\n", "    ", "\"\"\"\n    Calls some basic evaluation\n    @param model: VAE model\n    @param prob_model: probabilistic model\n    @param loader: data loader\n    @param writer: writer object\n    @param path: root path dir\n    @param phase: whether '1' or '2'\n    @param type_: train, validation or test?\n    @param loss_function: which loss was used?\n    @return: results dictionary\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "{", "}", "\n", "mask", "=", "getattr", "(", "loader", ".", "dataset", ",", "'mask'", ",", "None", ")", "\n", "mask_ones", "=", "torch", ".", "ones_like", "(", "mask", ")", "\n", "\n", "data", "=", "loader", ".", "dataset", ".", "data", "\n", "\n", "# Classifier's evaluation. Error and DP fairness.", "\n", "if", "phase", "in", "[", "'2'", "]", "and", "'SSCVAE'", "in", "str", "(", "model", ")", ":", "\n", "# Store CLF ERR U in eval.", "\n", "        ", "clf_probs", "=", "sigmoid", "(", "model", ".", "classify", "(", "data", "[", ":", ",", ":", "-", "1", "]", ",", "data", "[", ":", ",", "-", "1", "]", ",", "mask_ones", ")", ")", "\n", "pred_u", "=", "torch", ".", "bernoulli", "(", "clf_probs", ")", ".", "float", "(", ")", "\n", "s", "=", "data", "[", ":", ",", "-", "1", "]", "\n", "pred_0", ",", "pred_1", "=", "pred_u", "[", "s", "[", ":", "]", "==", "-", "1", "]", ",", "pred_u", "[", "s", "[", ":", "]", "==", "1", "]", "\n", "unfairness_dp", "=", "torch", ".", "abs", "(", "pred_0", ".", "mean", "(", ")", "-", "pred_1", ".", "mean", "(", ")", ")", "\n", "clf_acc", "=", "compute_accuracy", "(", "data", "[", ":", ",", "-", "2", "]", ",", "pred_u", ".", "flatten", "(", ")", ",", "mask_ones", ",", "None", ")", "\n", "clf_err", "=", "1.0", "-", "clf_acc", "\n", "writer", ".", "add_scalar", "(", "phase", "+", "'_Eval_'", "+", "type_", "+", "'/CLF_Err U'", ",", "clf_err", ")", "\n", "results", "[", "type_", "+", "'_CLF_ERR_U'", "]", "=", "clf_err", ".", "item", "(", ")", "\n", "results", "[", "type_", "+", "'_CLF_DP'", "]", "=", "unfairness_dp", ".", "item", "(", ")", "\n", "\n", "# VAE model evaluation of reconstruction of X and U (if phase 2).", "\n", "# Also tests predictability of S and U from Z.", "\n", "", "if", "loss_function", "in", "[", "Cte", ".", "LOSS_FAIRLAB", ",", "Cte", ".", "LOSS_FAIRALL", "]", ":", "\n", "        ", "generated_data", ",", "z", ",", "_", "=", "model", ".", "reconstruct", "(", "data", ",", "mask_ones", ")", "\n", "observed_error", "=", "imputation_error", "(", "prob_model", ",", "generated_data", ",", "data", ",", "mask_ones", ")", "\n", "is_discrete", "=", "lambda", "d", ":", "'categorical'", "in", "str", "(", "d", ")", "or", "'bernoulli'", "in", "str", "(", "d", ")", "\n", "# 3. Loop and write the errors to writer", "\n", "for", "idx", ",", "(", "err", ",", "dist", ")", "in", "enumerate", "(", "zip", "(", "observed_error", ",", "prob_model", ")", ")", ":", "\n", "            ", "if", "(", "'SSCVAE'", "in", "str", "(", "model", ")", ")", "and", "(", "idx", "==", "(", "len", "(", "prob_model", ")", "-", "1", ")", ")", ":", "\n", "# If model is SSCVAE and the last dim, then this is the U.", "\n", "                ", "writer", ".", "add_scalar", "(", "phase", "+", "'_Eval_'", "+", "type_", "+", "'/Err U'", ",", "err", ")", "\n", "results", "[", "type_", "+", "'_Err_U'", "]", "=", "err", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "is_discrete", "(", "dist", ")", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "phase", "+", "'_Eval_'", "+", "type_", "+", "f'/NRMSE X{idx}'", ",", "err", ")", "\n", "results", "[", "type_", "+", "f'_NRMSE_X{idx}'", "]", "=", "err", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "phase", "+", "'_Eval_'", "+", "type_", "+", "f'/ERR X{idx}'", ",", "err", ")", "\n", "results", "[", "type_", "+", "f'_ERR_X{idx}'", "]", "=", "err", ".", "item", "(", ")", "\n", "\n", "", "", "", "if", "type_", "==", "'Test'", ":", "\n", "            ", "plt", ".", "plot_together", "(", "[", "data", ",", "generated_data", "]", ",", "prob_model", ",", "title", "=", "''", ",", "legend", "=", "[", "'original'", ",", "'generated'", "]", ",", "\n", "path", "=", "f'{path}/marginal'", "+", "'_phase_'", "+", "phase", ")", "\n", "", "z", "=", "z", ".", "numpy", "(", ")", "\n", "# Predictability of s from z.", "\n", "_s", "=", "data", "[", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", "\n", "z_tr", ",", "z_ts", ",", "s_tr", ",", "s_ts", "=", "train_test_split", "(", "z", ",", "_s", ",", "test_size", "=", "0.2", ",", "random_state", "=", "42", ")", "\n", "clf", "=", "LogisticRegression", "(", "class_weight", "=", "'balanced'", ")", ".", "fit", "(", "z_tr", ",", "s_tr", ")", "\n", "score", "=", "clf", ".", "score", "(", "z_ts", ",", "s_ts", ")", "\n", "print", "(", "type_", "+", "\" Predictability of s from latent z ACC:\"", ",", "score", ")", "\n", "writer", ".", "add_scalar", "(", "phase", "+", "'_Eval_'", "+", "type_", "+", "'/S-from-Z ERR'", ",", "1", "-", "score", ")", "\n", "results", "[", "type_", "+", "'_S-from-Z_ACC'", "]", "=", "score", "\n", "\n", "if", "type_", "==", "'Test'", ":", "\n", "            ", "with", "open", "(", "f'{path}/pred-s-from-z-err'", "+", "'-ph-'", "+", "phase", "+", "'.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "\"err: \"", "+", "str", "(", "1", "-", "score", ")", ")", "\n", "\n", "# Predictability of u from z.", "\n", "", "", "_u", "=", "data", "[", ":", ",", "-", "2", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "int", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", "\n", "z_tr", ",", "z_ts", ",", "u_tr", ",", "u_ts", "=", "train_test_split", "(", "z", ",", "_u", ",", "test_size", "=", "0.2", ",", "random_state", "=", "43", ")", "\n", "clf", "=", "LogisticRegression", "(", "class_weight", "=", "'balanced'", ")", ".", "fit", "(", "z_tr", ",", "u_tr", ")", "\n", "score", "=", "clf", ".", "score", "(", "z_ts", ",", "u_ts", ")", "\n", "print", "(", "type_", "+", "\" Predictability of u from latent z:\"", ",", "score", ")", "\n", "print", "(", "type_", "+", "\" ERROR predicting of u from latent z:\"", ",", "1", "-", "score", ")", "\n", "writer", ".", "add_scalar", "(", "phase", "+", "'_Eval_'", "+", "type_", "+", "'/U-from-Z ERR'", ",", "1", "-", "score", ")", "\n", "results", "[", "type_", "+", "'_U-from-Z ERR'", "]", "=", "1", "-", "score", "\n", "\n", "if", "type_", "==", "'Test'", ":", "\n", "            ", "with", "open", "(", "f'{path}/pred-u-from-z-err'", "+", "'-ph-'", "+", "phase", "+", "'.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "\"err \"", "+", "str", "(", "1", "-", "score", ")", ")", "\n", "# Visualize z in 2-dim.", "\n", "", "", "if", "type_", "==", "'Test'", ":", "\n", "            ", "if", "z", ".", "shape", "[", "1", "]", ">", "2", ":", "\n", "                ", "print", "(", "\"To plot z, performing PCA...\"", ")", "\n", "pca", "=", "PCA", "(", "n_components", "=", "2", ")", "\n", "z", "=", "pca", ".", "fit_transform", "(", "z", ")", "\n", "print", "(", "\"PCA explained variance:\"", ",", "pca", ".", "explained_variance_ratio_", ")", "\n", "txt", "=", "\"_pca\"", "\n", "", "else", ":", "\n", "                ", "txt", "=", "\"\"", "\n", "", "plt", ".", "plot_z", "(", "data", ",", "z", ",", "title", "=", "'latent z'", ",", "path", "=", "f'{path}/latent{txt}'", "+", "'_phase_'", "+", "phase", ")", "\n", "\n", "", "", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.create_loader": [[20, 28], ["iter", "torch.utils.data.DataLoader"], "function", ["None"], ["def", "create_loader", "(", ")", ":", "\n", "    ", "\"\"\"\n    Used once we exhaust Phase2 data to resample again.\n    @return: dataloader\n    \"\"\"", "\n", "global", "orig_dataset", ",", "batch_size", "\n", "loader", "=", "iter", "(", "DataLoader", "(", "orig_dataset", ",", "batch_size", "=", "batch_size", ",", "drop_last", "=", "False", ",", "shuffle", "=", "True", ")", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.custom_event_filter": [[30, 40], ["None"], "function", ["None"], ["", "def", "custom_event_filter", "(", "engine", ",", "event", ")", ":", "\n", "    ", "\"\"\"\n    Event filter for ignite engine to trigger at the *start of every time-step*.\n    @param engine: Ignite engine\n    @param event: the trainer step number as event\n    @return: True or False\n    \"\"\"", "\n", "if", "(", "event", "+", "(", "epoch_every_step", "-", "1", ")", ")", "%", "epoch_every_step", "==", "0", "and", "not", "warmup_status", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.custom_event_filter_2": [[42, 57], ["None"], "function", ["None"], ["", "def", "custom_event_filter_2", "(", "engine", ",", "event", ")", ":", "\n", "    ", "\"\"\"\n    Event filter for ignite engine to trigger at the *end of every time-step*.\n    @param engine: Ignite engine\n    @param event: the trainer step number as event\n    @return: True or False\n    \"\"\"", "\n", "if", "not", "warmup_status", ":", "\n", "        ", "if", "event", "%", "epoch_every_step", "==", "0", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "", "else", ":", "\n", "        ", "if", "event", "==", "max_epochs", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.separate_data": [[59, 74], ["trainer.state.dataloader.dataset.mask[].count_nonzero().item", "trainer.state.dataloader.dataset.mask[].count_nonzero().item", "trainer.state.dataloader.dataset.mask[].count_nonzero", "trainer.state.dataloader.dataset.mask[].count_nonzero"], "function", ["None"], ["", "", "def", "separate_data", "(", "trainer", ")", ":", "\n", "    ", "\"\"\"\n    Separate data in loader into 4 parts.\n    @param trainer: trainer object\n    @return: split data\n    \"\"\"", "\n", "s11", "=", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "mask", "[", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "data", "[", ":", ",", "-", "1", "]", "==", "1", ",", "0", "]", ".", "count_nonzero", "(", ")", ".", "item", "(", ")", "\n", "s10", "=", "(", "~", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "mask", "[", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "data", "[", ":", ",", "-", "1", "]", "==", "1", ",", "0", "]", ")", ".", "count_nonzero", "(", ")", ".", "item", "(", ")", "\n", "s01", "=", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "mask", "[", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "data", "[", ":", ",", "-", "1", "]", "==", "-", "1", ",", "0", "]", ".", "count_nonzero", "(", ")", ".", "item", "(", ")", "\n", "s00", "=", "(", "~", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "mask", "[", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "data", "[", ":", ",", "-", "1", "]", "==", "-", "1", ",", "0", "]", ")", ".", "count_nonzero", "(", ")", ".", "item", "(", ")", "\n", "return", "s11", ",", "s10", ",", "s01", ",", "s00", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.time_step_load_batch_data": [[76, 96], ["next", "torch.nn.Parameter", "loop_trainer.create_loader", "next"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.create_loader"], ["", "def", "time_step_load_batch_data", "(", "semisup", ")", ":", "\n", "    ", "\"\"\"\n    Function to load new data at new time step\n    @param semisup: flag if semisupervised learning or not\n    @return: data, mask, params, prob1\n    \"\"\"", "\n", "global", "time_step_loader", "\n", "try", ":", "\n", "        ", "data_sample", ",", "other", "=", "next", "(", "time_step_loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "# We have exhausted the data. Create the Loader again so we can continue.", "\n", "        ", "time_step_loader", "=", "create_loader", "(", ")", "\n", "data_sample", ",", "other", "=", "next", "(", "time_step_loader", ")", "\n", "\n", "", "mask_sample", ",", "param_sample", "=", "other", "[", "1", "]", ",", "other", "[", "0", "]", "\n", "prob1_sample", "=", "None", "\n", "if", "semisup", ":", "\n", "        ", "prob1_sample", "=", "other", "[", "2", "]", "\n", "\n", "", "return", "data_sample", ",", "mask_sample", ",", "Parameter", "(", "param_sample", ")", ",", "prob1_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.set_data": [[98, 113], ["len"], "function", ["None"], ["", "def", "set_data", "(", "trainer", ",", "new_data", ",", "semisup", ")", ":", "\n", "    ", "\"\"\"\n    Function that sets the data of the trainer Engine object to the new data.\n    Can be used to update data using some policy.\n    :param trainer: Ignite trainer Engine object\n    :param new_data: New data that is to be loaded to the Engine\n    :param semisup: Is it semi-supervised.\n    :return: None\n    \"\"\"", "\n", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "data", "=", "new_data", "[", "0", "]", "\n", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "mask", "=", "new_data", "[", "1", "]", "\n", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "params", "=", "new_data", "[", "2", "]", "\n", "if", "semisup", ":", "\n", "        ", "trainer", ".", "state", ".", "dataloader", ".", "dataset", ".", "prob1", "=", "new_data", "[", "3", "]", "\n", "", "trainer", ".", "state", ".", "epoch_length", "=", "len", "(", "trainer", ".", "state", ".", "dataloader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.create_loop_trainer_2": [[115, 209], ["copy.deepcopy", "loop_trainer.create_loader", "loop_trainer.build_loop_trainer_2", "metrics.NoAverage", "metrics.NoAverage.attach", "metrics.NoAverage.attach", "metrics.NoAverage.attach", "metrics.NoAverage.attach", "trainer.on", "trainer.on", "trainer.on", "metrics.insert", "ignite.engine.Events.EPOCH_STARTED", "ignite.engine.Events.EPOCH_COMPLETED", "loop_trainer.time_step_load_batch_data", "ignite.engine.Events.EPOCH_STARTED", "loop_trainer.time_step_load_batch_data", "loop_trainer.separate_data", "print", "policy_phase_2.train_policy", "print", "engine.terminate", "loop_trainer.set_data", "loop_trainer.separate_data", "print", "engine.terminate", "loop_trainer.set_data", "policy_phase_2", "policy_phase_2"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.create_loader", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.build_loop_trainer_2", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.Metric.attach", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.time_step_load_batch_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.time_step_load_batch_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.separate_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.policies.PolicyFz.train_policy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.set_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.separate_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.set_data"], ["", "def", "create_loop_trainer_2", "(", "model", ",", "dataset", ",", "cfg", ",", "policy_phase_2", ")", ":", "\n", "    ", "\"\"\"\n    Function to create the loop trainer for phase 2 training.\n    @param model: VAE model\n    @param dataset: dataset object\n    @param cfg: configuration dictionary\n    @param policy_phase_2: policy type to use in phase 2\n    @return: trainer, training evaluator, validation evaluator, test evaluator\n    \"\"\"", "\n", "global", "time_step_loader", ",", "epoch_every_step", ",", "aggr_data", ",", "aggr_mask", ",", "aggr_prob1", ",", "orig_dataset", ",", "batch_size", ",", "warmup_status", ",", "max_epochs", "\n", "aggr_data", "=", "None", "\n", "aggr_mask", "=", "None", "\n", "aggr_prob1", "=", "None", "\n", "\n", "warmup_status", "=", "cfg", "[", "'trainer2'", "]", "[", "'warmup'", "]", "\n", "epoch_every_step", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", "\n", "max_epochs", "=", "epoch_every_step", "*", "cfg", "[", "'trainer2'", "]", "[", "'time_steps'", "]", "# Total epochs is this now.", "\n", "\n", "original_dataset", "=", "deepcopy", "(", "dataset", ")", "\n", "orig_dataset", "=", "original_dataset", "\n", "batch_size", "=", "cfg", "[", "'trainer2'", "]", "[", "'samples_per_ts'", "]", "\n", "time_step_loader", "=", "create_loader", "(", ")", "\n", "\n", "trainer", ",", "train_evaluator", ",", "valid_evaluator", ",", "test_evaluator", "=", "build_loop_trainer_2", "(", "model", ",", "dataset", ",", "cfg", "[", "'optimizer'", "]", "[", "'params'", "]", "[", "'learning_rate'", "]", ",", "cfg", "[", "'save_dir'", "]", ")", "\n", "\n", "metrics", "=", "[", "'-elbo_unsup'", ",", "'kl_unsup'", ",", "'-logprob0_unsup'", ",", "'-logprob1_unsup'", ",", "'-recx_unsup'", ",", "'-elbo_sup'", ",", "\n", "'kl_sup'", ",", "'-logprob_sup'", ",", "'clf_acc'", ",", "'clf_loss'", ",", "'total'", "]", "\n", "if", "model", ".", "loss_function", "==", "Cte", ".", "LOSS_FAIRLOG", ":", "\n", "        ", "metrics", ".", "insert", "(", "-", "2", ",", "'discr_loss'", ")", "\n", "\n", "", "no_average", "=", "NoAverage", "(", "metrics", ")", "\n", "no_average", ".", "attach", "(", "trainer", ",", "print_time_epoch_value", ",", "trainer", ",", "vars", "=", "metrics", ",", "\n", "epochs_per_timestep", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", ",", "max_timesteps", "=", "cfg", "[", "'trainer2'", "]", "[", "'time_steps'", "]", ",", "\n", "print_every", "=", "cfg", "[", "'trainer'", "]", "[", "'print_every'", "]", ",", "evaluation", "=", "\"trainer\"", ")", "\n", "\n", "no_average", ".", "attach", "(", "train_evaluator", ",", "print_time_epoch_value", ",", "trainer", ",", "vars", "=", "metrics", ",", "\n", "epochs_per_timestep", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", ",", "max_timesteps", "=", "cfg", "[", "'trainer2'", "]", "[", "'time_steps'", "]", ",", "\n", "print_every", "=", "cfg", "[", "'trainer'", "]", "[", "'print_every'", "]", ",", "evaluation", "=", "\"train_evaluator\"", ")", "\n", "\n", "no_average", ".", "attach", "(", "valid_evaluator", ",", "print_time_epoch_value", ",", "trainer", ",", "vars", "=", "metrics", ",", "\n", "epochs_per_timestep", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", ",", "max_timesteps", "=", "cfg", "[", "'trainer2'", "]", "[", "'time_steps'", "]", ",", "\n", "print_every", "=", "cfg", "[", "'trainer'", "]", "[", "'print_every'", "]", ",", "evaluation", "=", "\"valid_evaluator\"", ")", "\n", "\n", "no_average", ".", "attach", "(", "test_evaluator", ",", "print_time_epoch_value", ",", "trainer", ",", "vars", "=", "metrics", ",", "\n", "epochs_per_timestep", "=", "cfg", "[", "'trainer2'", "]", "[", "'epochs_per_ts'", "]", ",", "max_timesteps", "=", "cfg", "[", "'trainer2'", "]", "[", "'time_steps'", "]", ",", "\n", "print_every", "=", "cfg", "[", "'trainer'", "]", "[", "'print_every'", "]", ",", "evaluation", "=", "\"test_evaluator\"", ")", "\n", "\n", "# Per-epoch parameters", "\n", "# 1st epoch initial policy application", "\n", "# NOTE: Ignite epoch and iterations are 1-based not 0-based!!", "\n", "@", "trainer", ".", "on", "(", "Events", ".", "EPOCH_STARTED", "(", "once", "=", "1", ")", ")", "\n", "def", "update_data_by_init_policy", "(", "engine", ")", ":", "\n", "        ", "if", "warmup_status", ":", "\n", "            ", "data_sample", ",", "mask_sample", ",", "param_sample", ",", "prob1_sample", "=", "time_step_load_batch_data", "(", "semisup", "=", "cfg", "[", "'semisup'", "]", ")", "\n", "# Initial step mask should be chosen from whatever was set in the beginning.", "\n", "if", "data_sample", "is", "None", ":", "\n", "                ", "engine", ".", "terminate", "(", ")", "\n", "", "else", ":", "\n", "                ", "set_data", "(", "engine", ",", "(", "data_sample", ",", "mask_sample", ",", "param_sample", ",", "prob1_sample", ")", ",", "semisup", "=", "cfg", "[", "'semisup'", "]", ")", "\n", "", "s11", ",", "s10", ",", "s01", ",", "s00", "=", "separate_data", "(", "trainer", ")", "\n", "print", "(", "\"Policy init at start of Phase2\"", ",", "\"... || S=1... 1:\"", ",", "s11", ",", "\"0:\"", ",", "s10", ",", "\"|| S=0... 1:\"", ",", "s01", ",", "\"0:\"", ",", "s00", ")", "\n", "\n", "# Call policy training code", "\n", "", "", "@", "trainer", ".", "on", "(", "Events", ".", "EPOCH_COMPLETED", "(", "event_filter", "=", "custom_event_filter_2", ")", ")", "\n", "def", "train_policy_fz", "(", "engine", ")", ":", "\n", "        ", "if", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'learn_policy'", "]", "==", "'FZ'", ":", "\n", "# Need to call separate training only if we are doing policy w.r.t. Z", "\n", "            ", "data_", "=", "engine", ".", "state", ".", "dataloader", ".", "dataset", ".", "data", "\n", "mask_", "=", "engine", ".", "state", ".", "dataloader", ".", "dataset", ".", "mask", "\n", "prob1_", "=", "None", "\n", "if", "cfg", "[", "'semisup'", "]", ":", "\n", "                ", "prob1_", "=", "engine", ".", "state", ".", "dataloader", ".", "dataset", ".", "prob1", "\n", "", "policy_phase_2", ".", "train_policy", "(", "model", ",", "data_", ",", "mask_", ",", "prob1_", ")", "\n", "print", "(", "\"Successfully trained policy model FZ!\"", ")", "\n", "\n", "# Per-K epoch Phase-2 function to update data", "\n", "", "", "@", "trainer", ".", "on", "(", "Events", ".", "EPOCH_STARTED", "(", "event_filter", "=", "custom_event_filter", ")", ")", "\n", "def", "update_data_by_policy_2", "(", "engine", ")", ":", "\n", "# Apply policy", "\n", "        ", "data_sample", ",", "mask_sample", ",", "param_sample", ",", "prob1_sample", "=", "time_step_load_batch_data", "(", "semisup", "=", "cfg", "[", "'semisup'", "]", ")", "\n", "if", "data_sample", "is", "None", ":", "\n", "            ", "engine", ".", "terminate", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "cfg", "[", "'model'", "]", "[", "'params'", "]", "[", "'learn_policy'", "]", "==", "'NA'", ":", "\n", "                ", "mask_from_policy", ",", "prob1_from_policy", "=", "policy_phase_2", "(", "mask_sample", ",", "prob1_sample", ")", "\n", "", "else", ":", "\n", "                ", "mask_from_policy", ",", "prob1_from_policy", "=", "policy_phase_2", "(", "model", ",", "data_sample", ",", "mask_sample", ")", "\n", "", "set_data", "(", "engine", ",", "(", "data_sample", ",", "mask_from_policy", ",", "param_sample", ",", "prob1_from_policy", ")", ",", "semisup", "=", "cfg", "[", "'semisup'", "]", ")", "\n", "s11", ",", "s10", ",", "s01", ",", "s00", "=", "separate_data", "(", "trainer", ")", "\n", "print", "(", "\"Applying own policy in Phase2\"", ",", "\"... || S=1... 1:\"", ",", "s11", ",", "\"0:\"", ",", "s10", ",", "\"|| S=0... 1:\"", ",", "s01", ",", "\"0:\"", ",", "s00", ")", "\n", "\n", "", "", "return", "trainer", ",", "train_evaluator", ",", "valid_evaluator", ",", "test_evaluator", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.loop_trainer.build_loop_trainer_2": [[211, 267], ["torch.optim.Adam", "ignite.engine.Engine", "ignite.engine.Engine.add_event_handler", "ignite.engine.Engine", "ignite.engine.Engine", "ignite.engine.Engine", "ignite.handlers.ModelCheckpoint", "ignite.engine.Engine.add_event_handler", "model.train", "torch.optim.Adam.zero_grad", "model", "model.backward", "torch.optim.Adam.step", "model.item", "ignite.handlers.TerminateOnNan", "model.eval", "model.eval", "torch.no_grad", "model", "model.item", "torch.no_grad", "model", "model.item", "model.parameters", "dataset.parameters"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.step", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.parameters", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Bernoulli.parameters"], ["", "def", "build_loop_trainer_2", "(", "model", ",", "dataset", ",", "learning_rate", ",", "root", ")", ":", "\n", "    ", "\"\"\"\n    Builds the Phase 2 loop trainer. Contains the trainer step function.\n    @param model: VAE model\n    @param dataset: dataset object\n    @param learning_rate: optim learning rate\n    @param root: root directory, for checkpoint saving\n    @return: trainer, train evaluator, val evaluator, test evaluator\n    \"\"\"", "\n", "optim", "=", "Adam", "(", "[", "{", "'params'", ":", "model", ".", "parameters", "(", ")", "}", ",", "{", "'params'", ":", "dataset", ".", "parameters", "(", ")", "}", "]", ",", "lr", "=", "learning_rate", ")", "\n", "global", "best_loss", "\n", "best_loss", "=", "None", "\n", "\n", "def", "trainer_step", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "x", ",", "y", "=", "batch", "\n", "loss", "=", "model", "(", "x", ",", "engine", ".", "state", ",", "*", "y", "[", "-", "2", ":", "]", ")", "# forward", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "trainer", "=", "Engine", "(", "trainer_step", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "ITERATION_COMPLETED", ",", "TerminateOnNan", "(", ")", ")", "\n", "\n", "def", "train_validation_step", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", ",", "y", "=", "batch", "\n", "loss", "=", "model", "(", "x", ",", "engine", ".", "state", ",", "*", "y", "[", "-", "2", ":", "]", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "", "def", "validation_step", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", ",", "y", "=", "batch", "\n", "loss", "=", "model", "(", "x", ",", "engine", ".", "state", ",", "y", "[", "1", "]", ")", "\n", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "", "train_evaluator", "=", "Engine", "(", "train_validation_step", ")", "\n", "valid_evaluator", "=", "Engine", "(", "validation_step", ")", "\n", "test_evaluator", "=", "Engine", "(", "validation_step", ")", "\n", "\n", "def", "score_function", "(", "engine", ")", ":", "\n", "        ", "return", "-", "engine", ".", "state", ".", "output", "\n", "\n", "", "model_checkpoint", "=", "ModelCheckpoint", "(", "root", ",", "'checkpoint_phase2'", ",", "\n", "n_saved", "=", "1", ",", "\n", "score_function", "=", "score_function", ",", "\n", "score_name", "=", "\"total_loss\"", ",", "\n", "require_empty", "=", "False", ")", "\n", "\n", "valid_evaluator", ".", "add_event_handler", "(", "Events", ".", "COMPLETED", ",", "model_checkpoint", ",", "\n", "{", "\"model\"", ":", "model", "}", ")", "\n", "\n", "return", "trainer", ",", "train_evaluator", ",", "valid_evaluator", ",", "test_evaluator", "\n", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.fix_seed": [[13, 18], ["torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "fix_seed", "(", "seed", ")", "->", "None", ":", "\n", "    ", "if", "seed", "is", "not", "None", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.to_one_hot": [[20, 24], ["x.new_zeros", "x.new_zeros.scatter_().float", "x.size", "x.new_zeros.scatter_", "x.unsqueeze().long", "x.unsqueeze"], "function", ["None"], ["", "", "def", "to_one_hot", "(", "x", ",", "size", ")", ":", "\n", "    ", "x_one_hot", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "size", ")", "\n", "x_one_hot", ".", "scatter_", "(", "1", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "long", "(", ")", ",", "1", ")", ".", "float", "(", ")", "\n", "return", "x_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.get_distribution_by_name": [[26, 30], ["None"], "function", ["None"], ["", "def", "get_distribution_by_name", "(", "name", ")", ":", "\n", "    ", "return", "{", "'normal'", ":", "dists", ".", "Normal", ",", "'gamma'", ":", "dists", ".", "Gamma", ",", "'bernoulli'", ":", "dists", ".", "Bernoulli", ",", "\n", "'categorical'", ":", "dists", ".", "Categorical", ",", "'lognormal'", ":", "dists", ".", "LogNormal", ",", "\n", "'poisson'", ":", "dists", ".", "Poisson", ",", "'exponential'", ":", "dists", ".", "Exponential", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.print_metric_msg": [[32, 44], ["print", "fn", "isinstance", "msg.format.format", "isinstance", "value.tolist.tolist"], "function", ["None"], ["", "def", "print_metric_msg", "(", "fn", ",", "engine", ",", "msg", ",", "metrics", ")", ":", "\n", "    ", "\"\"\"\n    Print out metrics\n    \"\"\"", "\n", "for", "name", "in", "metrics", ":", "\n", "        ", "value", "=", "fn", "(", "engine", ".", "state", ".", "metrics", "[", "name", "]", ")", "\n", "msg", "+=", "' {} {:.5f}'", "if", "isinstance", "(", "value", ",", "float", ")", "else", "' {} {}'", "\n", "\n", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "value", "=", "value", ".", "tolist", "(", ")", "\n", "", "msg", "=", "msg", ".", "format", "(", "name", ",", "value", ")", "\n", "", "print", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.print_epoch_value": [[46, 52], ["miscelanea.print_metric_msg"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.print_metric_msg"], ["", "def", "print_epoch_value", "(", "engine", ",", "metrics", ",", "trainer", ",", "max_epochs", ",", "print_every", ",", "evaluation", ")", ":", "\n", "    ", "fn", "=", "lambda", "x", ":", "x", "\n", "if", "trainer", ".", "state", ".", "epoch", "%", "print_every", "!=", "0", ":", "\n", "        ", "return", "\n", "", "msg", "=", "f'Epoch {trainer.state.epoch} of {max_epochs} in {evaluation}:'", "\n", "print_metric_msg", "(", "fn", ",", "engine", ",", "msg", ",", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.print_time_epoch_value": [[54, 63], ["miscelanea.print_metric_msg"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.print_metric_msg"], ["", "def", "print_time_epoch_value", "(", "engine", ",", "metrics", ",", "trainer", ",", "print_every", ",", "max_timesteps", ",", "epochs_per_timestep", ",", "evaluation", ")", ":", "\n", "    ", "fn", "=", "lambda", "x", ":", "x", "\n", "if", "trainer", ".", "state", ".", "epoch", "%", "print_every", "!=", "0", ":", "\n", "        ", "return", "\n", "", "time_step", "=", "(", "trainer", ".", "state", ".", "epoch", "+", "(", "epochs_per_timestep", "-", "1", ")", ")", "//", "epochs_per_timestep", "\n", "epoch", "=", "(", "trainer", ".", "state", ".", "epoch", "+", "(", "epochs_per_timestep", "-", "1", ")", ")", "%", "epochs_per_timestep", "+", "1", "\n", "msg", "=", "f'Time Step {time_step} of {max_timesteps}: Epoch {epoch} of {epochs_per_timestep} ({trainer.state.epoch}) '", "f'{evaluation}:'", "\n", "print_metric_msg", "(", "fn", ",", "engine", ",", "msg", ",", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.write_losses": [[65, 72], ["fn", "writer.add_scalar"], "function", ["None"], ["", "def", "write_losses", "(", "engine", ",", "metrics", ",", "writer", ",", "phase", ",", "fn", "=", "lambda", "x", ":", "x", ")", ":", "\n", "    ", "\"\"\"\n    This writes the VAE losses\n    \"\"\"", "\n", "for", "name", "in", "metrics", ":", "\n", "        ", "value", "=", "fn", "(", "engine", ".", "state", ".", "metrics", "[", "name", "]", ")", "# do we need to divide by engine.state.epoch", "\n", "writer", ".", "add_scalar", "(", "f'{phase}_Losses/{name}'", ",", "value", ",", "engine", ".", "state", ".", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.evaluate_model_generalized": [[74, 368], ["torch.no_grad", "torch.no_grad", "engine.state.metrics.keys", "prob_model.eval", "model.eval", "torch.ones_like", "torch.ones_like", "int", "model.reconstruct", "miscelanea.imputation_error", "hasattr", "policy", "return_mask[].float", "utils.metrics.compute_accuracy", "utils.metrics.compute_utility", "hasattr", "hasattr", "torch.abs().item", "torch.abs().item", "utils.metrics.compute_utility().item", "torch.abs().item", "torch.abs().item", "metric_dct[].update", "yf_true.flatten.flatten", "hasattr", "str", "torch.nn.functional.sigmoid", "utils.metrics.compute_accuracy", "utils.metrics.compute_utility", "hasattr", "str", "return_mask[].float.flatten", "return_mask[].float.flatten", "utils.metrics.compute_accuracy", "utils.metrics.compute_utility", "policy", "cf_ret_mask[].float", "metric_dct[].update", "torch.mean().item", "torch.mean().item", "utils.metrics.compute_utility().item", "metric_dct[].update", "metric_dct[].update", "metric_dct.update", "str", "str", "torch.no_grad", "torch.no_grad", "enumerate", "str", "policy", "ret_mask[].float", "utils.metrics.compute_utility", "utils.metrics.compute_accuracy", "utils.metrics.compute_utility", "utils.metrics.compute_accuracy", "model.classify", "str", "policy", "ret_mask[].float", "torch.nn.functional.sigmoid.clone", "prob_pred.clone.flatten", "prob_pred.clone.flatten", "str", "return_mask[].float.flatten", "return_mask[].float.flatten", "torch.no_grad", "torch.no_grad", "engine.state.registers.update", "engine.state.registers.update", "torch.no_grad", "torch.no_grad", "engine.state.registers.update", "engine.state.registers.update", "torch.abs", "torch.abs", "metric_dct.update", "metric_dct[].update", "utils.metrics.compute_utility", "metric_dct.update", "metric_dct[].update", "torch.abs", "torch.abs", "metric_dct.update", "zip", "ret_mask[].float.flatten", "ret_mask[].float.flatten", "utils.metrics.compute_utility", "utils.metrics.compute_accuracy", "policy", "cf_ret_mask[].float", "ret_mask[].float.flatten", "ret_mask[].float.flatten", "torch.no_grad", "torch.no_grad", "engine.state.registers.update", "engine.state.registers.update", "utils.metrics.compute_accuracy", "utils.metrics.compute_utility", "policy", "cf_ret_mask[].float", "torch.no_grad", "torch.no_grad", "engine.state.registers.update", "engine.state.registers.update", "metric_dct[].update", "metric_dct[].update", "metric_dct[].update", "metric_dct[].update", "engine.state.registers.update", "engine.state.registers.update", "torch.mean", "torch.mean", "metric_dct.update", "pred_labels.flatten", "utils.metrics.compute_utility", "metric_dct.update", "engine.state.registers.update", "ret_mask[].float.flatten", "ret_mask[].float.flatten", "metric_dct[].update", "metric_dct[].update", "prob_pred.clone.flatten", "prob_pred.clone.flatten", "metric_dct[].update", "metric_dct[].update", "metric_dct.update", "utils.metrics.compute_utility.item", "metric_dct.update", "metric_dct.update", "utils.metrics.compute_utility.item", "metric_dct.update", "metric_dct[].update", "metric_dct[].update", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "pred_labels.flatten", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "str", "metric_dct[].update", "is_discrete", "engine.state.registers.update", "engine.state.registers.update", "utils.metrics.compute_utility.item", "metric_dct.update", "metric_dct.update", "metric_dct.update", "utils.metrics.compute_utility.item", "metric_dct.update", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_utility.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_utility.item", "metric_dct.update", "utils.metrics.compute_utility.item", "metric_dct.update", "len", "err.item", "metric_dct.update", "metric_dct[].update", "metric_dct[].update", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_utility.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_utility.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_utility.item", "err.item", "err.item", "metric_dct.update", "err.item", "metric_dct.update", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_utility.item", "utils.metrics.compute_utility.item", "utils.metrics.compute_accuracy.item", "err.item", "err.item", "utils.metrics.compute_utility.item", "utils.metrics.compute_utility.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_utility.item", "err.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_accuracy.item", "utils.metrics.compute_accuracy.item", "err.item", "err.item"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.reconstruct", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.imputation_error", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.classify", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_accuracy", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.compute_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.is_discrete", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate_model_generalized", "(", "engine", ",", "model", ",", "prob_model", ",", "dataset", ",", "phase_num", ",", "policy", ",", "costs", ",", "loss", ",", "state", ",", "trainer_state", ",", "\n", "metric_dct", ",", "epochs_per_step", ",", "cf_dataset", "=", "None", ",", "util_gnd", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Evaluation and collection of all metrics\n    @param engine: Ignite engine object\n    @param model: VAE model\n    @param prob_model: probabilistic model\n    @param dataset: dataset object\n    @param phase_num: phase '1' or '2'\n    @param policy: policy used in phase 2\n    @param costs: decision cost c\n    @param loss: which loss function is used (ours, niki, etc.)\n    @param state: state to return (final) or not\n    @param trainer_state: ignite trainer state\n    @param metric_dct: dictionary storing metrics\n    @param epochs_per_step: num epochs per time-step in phase 2\n    @param cf_dataset: counterfactual dataset (for eval)\n    @param util_gnd: utility w.r.t. ground truth (hidden)\n    @return: metric dictionary if 'final' state\n    \"\"\"", "\n", "# Collect everything from engine.state.metrics to our metric_dct", "\n", "epoch", "=", "1", "if", "trainer_state", "is", "None", "else", "trainer_state", ".", "state", ".", "epoch", "\n", "if", "'2'", "in", "phase_num", ":", "\n", "        ", "epoch", "=", "int", "(", "epoch", "/", "epochs_per_step", ")", "\n", "", "for", "k", "in", "engine", ".", "state", ".", "metrics", ".", "keys", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "metric_dct", "[", "k", "]", ".", "update", "(", "{", "epoch", ":", "engine", ".", "state", ".", "metrics", "[", "k", "]", "}", ")", "\n", "", "except", ":", "\n", "            ", "metric_dct", ".", "update", "(", "{", "k", ":", "{", "epoch", ":", "engine", ".", "state", ".", "metrics", "[", "k", "]", "}", "}", ")", "\n", "", "", "prob_model", ".", "eval", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "is_discrete", "=", "lambda", "d", ":", "'categorical'", "in", "str", "(", "d", ")", "or", "'bernoulli'", "in", "str", "(", "d", ")", "# or 'poisson' in str(d)", "\n", "\n", "use_data", "=", "dataset", ".", "data", "\n", "use_mask", "=", "dataset", ".", "mask", "\n", "\n", "if", "cf_dataset", "is", "not", "None", ":", "\n", "        ", "cf_use_data", "=", "cf_dataset", ".", "data", "\n", "cf_use_mask", "=", "cf_dataset", ".", "mask", "\n", "\n", "# NOTE: Policy Q(U|X,S) and P(U|Z,S) are already logged.", "\n", "", "if", "'2'", "in", "phase_num", ":", "\n", "# Our assumption that the last column is S and second last U", "\n", "        ", "u_true", "=", "use_data", "[", ":", ",", "-", "2", "]", "\n", "yf_true", "=", "dataset", ".", "yf", "\n", "if", "yf_true", "is", "not", "None", ":", "\n", "            ", "yf_true", "=", "yf_true", ".", "flatten", "(", ")", "\n", "\n", "# Evaluate on fully supervised dataset. Important assumption, otherwise we need to IPS the scores!", "\n", "", "", "mask_ones", "=", "torch", ".", "ones_like", "(", "use_data", "[", ":", ",", ":", "-", "1", "]", ")", "# NxD", "\n", "prob", "=", "None", "# fully observed dataset", "\n", "\n", "if", "loss", "in", "[", "Cte", ".", "LOSS_FAIRALL", ",", "Cte", ".", "LOSS_FAIRLAB", "]", ":", "\n", "# DECODER NORMAL PERFORMANCE", "\n", "# 1. Get the reconstructed data. Make one pass and evaluate", "\n", "        ", "generated_data", ",", "z", ",", "dec_prob1", "=", "model", ".", "reconstruct", "(", "use_data", ",", "mask_ones", ")", "# NxD", "\n", "# 2. Compute error using Adrian's functions with prob_model", "\n", "observed_error", "=", "imputation_error", "(", "prob_model", ",", "generated_data", ",", "use_data", ",", "mask_ones", ")", "\n", "# 3. Loop and write the errors to writer", "\n", "if", "hasattr", "(", "engine", ".", "state", ",", "'registers'", ")", ":", "# and state.epoch % self.print_every == 1:", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "idx", ",", "(", "err", ",", "dist", ")", "in", "enumerate", "(", "zip", "(", "observed_error", ",", "prob_model", ")", ")", ":", "\n", "# Error of reconstructing utility U", "\n", "                    ", "if", "'SSCVAE'", "in", "str", "(", "model", ")", "and", "idx", "==", "len", "(", "prob_model", ")", "-", "1", ":", "\n", "# If model is SSCVAE and the last dim, then this is the U.", "\n", "                        ", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Rec_ERR_U'", ":", "err", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                            ", "metric_dct", "[", "'Rec_ERR_U'", "]", ".", "update", "(", "{", "epoch", ":", "err", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                            ", "metric_dct", ".", "update", "(", "{", "'Rec_ERR_U'", ":", "{", "epoch", ":", "err", ".", "item", "(", ")", "}", "}", ")", "\n", "", "", "else", ":", "\n", "# Reconstruction error for continuous X", "\n", "                        ", "if", "not", "is_discrete", "(", "dist", ")", ":", "\n", "                            ", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "f'Rec_NRMSE_X{idx}'", ":", "err", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                                ", "metric_dct", "[", "f'Rec_NRMSE_X{idx}'", "]", ".", "update", "(", "{", "epoch", ":", "err", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                                ", "metric_dct", ".", "update", "(", "{", "f'Rec_NRMSE_X{idx}'", ":", "{", "epoch", ":", "err", ".", "item", "(", ")", "}", "}", ")", "\n", "# Reconstruction error for other X.", "\n", "", "", "else", ":", "\n", "                            ", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "f'Rec_ERR_X{idx}'", ":", "err", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                                ", "metric_dct", "[", "f'Rec_ERR_X{idx}'", "]", ".", "update", "(", "{", "epoch", ":", "err", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                                ", "metric_dct", ".", "update", "(", "{", "f'Rec_ERR_X{idx}'", ":", "{", "epoch", ":", "err", ".", "item", "(", ")", "}", "}", ")", "\n", "\n", "# DECODER FOR DECISION MAKING", "\n", "", "", "", "", "", "", "if", "'2'", "in", "phase_num", ":", "\n", "            ", "if", "\"Policy U ~ P(z,S)\"", "in", "str", "(", "policy", ")", ":", "\n", "                ", "ret_mask", ",", "prob_pol", "=", "policy", "(", "model", ",", "use_data", ",", "use_mask", ",", "is_sup", "=", "False", ")", "\n", "dec_pred", "=", "ret_mask", "[", ":", ",", "0", "]", ".", "float", "(", ")", "\n", "\n", "dec_utility", "=", "compute_utility", "(", "u_true", ",", "dec_pred", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", "\n", "dec_acc", "=", "compute_accuracy", "(", "u_true", ",", "dec_pred", ".", "flatten", "(", ")", ",", "mask_ones", ",", "prob", ")", "\n", "if", "util_gnd", ":", "\n", "                    ", "pol_utility_gnd", "=", "compute_utility", "(", "yf_true", ",", "dec_pred", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", "\n", "pol_acc_gnd", "=", "compute_accuracy", "(", "yf_true", ",", "dec_pred", ".", "flatten", "(", ")", ",", "mask_ones", ",", "prob", ")", "\n", "", "pol_acc", "=", "dec_acc", "\n", "pol_utility", "=", "dec_utility", "\n", "\n", "pol_preds", "=", "dec_pred", "\n", "if", "cf_dataset", "is", "not", "None", ":", "\n", "                    ", "cf_ret_mask", ",", "cf_prob_pol", "=", "policy", "(", "model", ",", "cf_use_data", ",", "cf_use_mask", ",", "is_sup", "=", "False", ")", "\n", "cf_pol_preds", "=", "cf_ret_mask", "[", ":", ",", "0", "]", ".", "float", "(", ")", "\n", "", "", "else", ":", "\n", "# TODO: Maybe should remove this dummy part later. Will not use in analysis later!", "\n", "                ", "dec_pred", "=", "generated_data", "[", ":", ",", "-", "1", "]", "\n", "dec_utility", "=", "compute_utility", "(", "u_true", ",", "dec_pred", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", "\n", "dec_acc", "=", "compute_accuracy", "(", "u_true", ",", "dec_pred", ".", "flatten", "(", ")", ",", "mask_ones", ",", "prob", ")", "\n", "\n", "", "if", "hasattr", "(", "engine", ".", "state", ",", "'registers'", ")", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Dec_ERR_U'", ":", "1", "-", "dec_acc", ".", "item", "(", ")", "}", ")", "\n", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Dec_utility'", ":", "dec_utility", ".", "item", "(", ")", "}", ")", "\n", "# Prediction error and utility for decoder policy.", "\n", "try", ":", "\n", "                        ", "metric_dct", "[", "'Dec_ERR_U'", "]", ".", "update", "(", "{", "epoch", ":", "1", "-", "dec_acc", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                        ", "metric_dct", ".", "update", "(", "{", "'Dec_ERR_U'", ":", "{", "epoch", ":", "1", "-", "dec_acc", ".", "item", "(", ")", "}", "}", ")", "\n", "", "try", ":", "\n", "                        ", "metric_dct", "[", "'Dec_utility'", "]", ".", "update", "(", "{", "epoch", ":", "dec_utility", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                        ", "metric_dct", ".", "update", "(", "{", "'Dec_utility'", ":", "{", "epoch", ":", "dec_utility", ".", "item", "(", ")", "}", "}", ")", "\n", "\n", "# Classifier", "\n", "# 4. Classifier Accuracy: only for OUR model (FairAll) and NIKIs (Fair/UnfairLog)", "\n", "", "", "", "", "", "if", "'SSCVAE'", "in", "str", "(", "model", ")", "and", "(", "'2'", "in", "phase_num", ")", ":", "\n", "# Feed XU, S.", "\n", "        ", "if", "loss", "in", "[", "Cte", ".", "LOSS_FAIRALL", ",", "Cte", ".", "LOSS_FAIRLOG", "]", ":", "\n", "            ", "prob_pred", "=", "sigmoid", "(", "model", ".", "classify", "(", "use_data", "[", ":", ",", ":", "-", "1", "]", ",", "use_data", "[", ":", ",", "-", "1", "]", ",", "mask_ones", ")", ")", "\n", "# accuracy", "\n", "if", "\"Policy U ~ Q(X,S)\"", "in", "str", "(", "policy", ")", ":", "\n", "                ", "ret_mask", ",", "prob_pol", "=", "policy", "(", "model", ",", "use_data", ",", "use_mask", ")", "\n", "prob_pred", "=", "prob_pol", "\n", "pred_u", "=", "ret_mask", "[", ":", ",", "0", "]", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "                ", "pred_u", "=", "prob_pred", ".", "clone", "(", ")", "\n", "pred_u", "[", "pred_u", ">=", "costs", "]", "=", "1", "\n", "pred_u", "[", "pred_u", "<", "costs", "]", "=", "0", "\n", "\n", "", "clf_acc", "=", "compute_accuracy", "(", "u_true", ",", "pred_u", ".", "flatten", "(", ")", ",", "mask_ones", ",", "prob", ")", "\n", "clf_utility", "=", "compute_utility", "(", "u_true", ",", "pred_u", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", "\n", "\n", "# Classifier for decision making", "\n", "if", "\"Policy U ~ Q(X,S)\"", "in", "str", "(", "policy", ")", ":", "\n", "                ", "pol_acc", "=", "clf_acc", "\n", "pol_utility", "=", "clf_utility", "\n", "pol_preds", "=", "pred_u", "\n", "if", "util_gnd", ":", "\n", "                    ", "pol_acc_gnd", "=", "compute_accuracy", "(", "yf_true", ",", "pred_u", ".", "flatten", "(", ")", ",", "mask_ones", ",", "prob", ")", "\n", "pol_utility_gnd", "=", "compute_utility", "(", "yf_true", ",", "pred_u", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", "\n", "", "if", "cf_dataset", "is", "not", "None", ":", "\n", "                    ", "cf_ret_mask", ",", "cf_prob_pol", "=", "policy", "(", "model", ",", "cf_use_data", ",", "cf_use_mask", ")", "\n", "cf_pol_preds", "=", "cf_ret_mask", "[", ":", ",", "0", "]", ".", "float", "(", ")", "\n", "\n", "", "", "if", "hasattr", "(", "engine", ".", "state", ",", "'registers'", ")", ":", "\n", "# Prediction error and utility for classifier policy.", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Clf_ERR_U'", ":", "1", "-", "clf_acc", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                        ", "metric_dct", "[", "'Clf_ERR_U'", "]", ".", "update", "(", "{", "epoch", ":", "1", "-", "clf_acc", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                        ", "metric_dct", ".", "update", "(", "{", "'Clf_ERR_U'", ":", "{", "epoch", ":", "1", "-", "clf_acc", ".", "item", "(", ")", "}", "}", ")", "\n", "", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Clf_utility'", ":", "clf_utility", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                        ", "metric_dct", "[", "'Clf_utility'", "]", ".", "update", "(", "{", "epoch", ":", "clf_utility", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                        ", "metric_dct", ".", "update", "(", "{", "'Clf_utility'", ":", "{", "epoch", ":", "clf_utility", ".", "item", "(", ")", "}", "}", ")", "\n", "\n", "# FZ: Latent Z for decision making.", "\n", "# 5. Also report policy F(Z) if phase 2.", "\n", "# NOTE: Policy Q(U|X,S) and P(U|Z,S) are already logged.", "\n", "", "", "", "", "", "if", "(", "'2'", "in", "phase_num", ")", "and", "(", "'U ~ F(z)'", "in", "str", "(", "policy", ")", ")", "and", "(", "loss", "in", "[", "Cte", ".", "LOSS_FAIRALL", ",", "Cte", ".", "LOSS_FAIRLAB", "]", ")", ":", "\n", "        ", "return_mask", ",", "prob_pol", "=", "policy", "(", "model", ",", "use_data", ",", "use_mask", ")", "\n", "true_lab", "=", "use_data", "[", ":", ",", "-", "2", "]", "\n", "pred_lab", "=", "return_mask", "[", ":", ",", "0", "]", ".", "float", "(", ")", "\n", "\n", "pol_acc", "=", "compute_accuracy", "(", "true_lab", ",", "pred_lab", ".", "flatten", "(", ")", ",", "mask_ones", ",", "prob", ")", "\n", "pol_utility", "=", "compute_utility", "(", "u_true", ",", "pred_lab", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", "\n", "if", "util_gnd", ":", "\n", "            ", "pol_acc_gnd", "=", "compute_accuracy", "(", "yf_true", ",", "pred_lab", ".", "flatten", "(", ")", ",", "mask_ones", ",", "prob", ")", "\n", "pol_utility_gnd", "=", "compute_utility", "(", "yf_true", ",", "pred_lab", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", "\n", "", "pol_preds", "=", "pred_lab", "\n", "if", "cf_dataset", "is", "not", "None", ":", "\n", "            ", "cf_ret_mask", ",", "cf_prob_pol", "=", "policy", "(", "model", ",", "cf_use_data", ",", "cf_use_mask", ")", "\n", "cf_pol_preds", "=", "cf_ret_mask", "[", ":", ",", "0", "]", ".", "float", "(", ")", "\n", "\n", "", "if", "hasattr", "(", "engine", ".", "state", ",", "'registers'", ")", ":", "\n", "# Prediction error and utility for FZ (latent Z) policy.", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Policy_FZ_ERR'", ":", "1", "-", "pol_acc", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                    ", "metric_dct", "[", "'Policy_FZ_ERR'", "]", ".", "update", "(", "{", "epoch", ":", "1", "-", "pol_acc", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                    ", "metric_dct", ".", "update", "(", "{", "'Policy_FZ_ERR'", ":", "{", "epoch", ":", "1", "-", "pol_acc", ".", "item", "(", ")", "}", "}", ")", "\n", "", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Policy_FZ_utility'", ":", "pol_utility", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                    ", "metric_dct", "[", "'Policy_FZ_utility'", "]", ".", "update", "(", "{", "epoch", ":", "pol_utility", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                    ", "metric_dct", ".", "update", "(", "{", "'Policy_FZ_utility'", ":", "{", "epoch", ":", "pol_utility", ".", "item", "(", ")", "}", "}", ")", "\n", "\n", "", "", "", "", "if", "'2'", "in", "phase_num", ":", "\n", "        ", "if", "hasattr", "(", "engine", ".", "state", ",", "'registers'", ")", ":", "\n", "# This basically will contain the main policy being used! We use this for analysis.", "\n", "# All above logging is for debugging and internal studies.", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Policy_ERR'", ":", "1", "-", "pol_acc", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                    ", "metric_dct", "[", "'Policy_ERR'", "]", ".", "update", "(", "{", "epoch", ":", "1", "-", "pol_acc", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                    ", "metric_dct", ".", "update", "(", "{", "'Policy_ERR'", ":", "{", "epoch", ":", "1", "-", "pol_acc", ".", "item", "(", ")", "}", "}", ")", "\n", "", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Policy_utility'", ":", "pol_utility", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                    ", "metric_dct", "[", "'Policy_utility'", "]", ".", "update", "(", "{", "epoch", ":", "pol_utility", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                    ", "metric_dct", ".", "update", "(", "{", "'Policy_utility'", ":", "{", "epoch", ":", "pol_utility", ".", "item", "(", ")", "}", "}", ")", "\n", "\n", "# If synthetic data, we also store utility and error w.r.t. ground truth (hidden)", "\n", "", "if", "util_gnd", ":", "\n", "                    ", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Policy_Gnd_ERR'", ":", "1", "-", "pol_acc_gnd", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                        ", "metric_dct", "[", "'Policy_Gnd_ERR'", "]", ".", "update", "(", "{", "epoch", ":", "1", "-", "pol_acc_gnd", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                        ", "metric_dct", ".", "update", "(", "{", "'Policy_Gnd_ERR'", ":", "{", "epoch", ":", "1", "-", "pol_acc_gnd", ".", "item", "(", ")", "}", "}", ")", "\n", "", "engine", ".", "state", ".", "registers", ".", "update", "(", "{", "'Policy_Gnd_utility'", ":", "pol_utility_gnd", ".", "item", "(", ")", "}", ")", "\n", "try", ":", "\n", "                        ", "metric_dct", "[", "'Policy_Gnd_utility'", "]", ".", "update", "(", "{", "epoch", ":", "pol_utility_gnd", ".", "item", "(", ")", "}", ")", "\n", "", "except", ":", "\n", "                        ", "metric_dct", ".", "update", "(", "{", "'Policy_Gnd_utility'", ":", "{", "epoch", ":", "pol_utility_gnd", ".", "item", "(", ")", "}", "}", ")", "\n", "\n", "", "", "", "", "pred_labels", "=", "pol_preds", "\n", "pred_labels_s1", ",", "pred_labels_s0", "=", "pred_labels", "[", "use_data", "[", ":", ",", "-", "1", "]", "==", "1", "]", ",", "pred_labels", "[", "use_data", "[", ":", ",", "-", "1", "]", "==", "-", "1", "]", "\n", "\n", "# Compute and store demographic parity unfairness.", "\n", "discrimination_abs", "=", "torch", ".", "abs", "(", "torch", ".", "mean", "(", "pred_labels_s1", ")", "-", "torch", ".", "mean", "(", "pred_labels_s0", ")", ")", ".", "item", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "metric_dct", "[", "'DP_unfairness'", "]", ".", "update", "(", "{", "epoch", ":", "discrimination_abs", "}", ")", "\n", "", "except", ":", "\n", "            ", "metric_dct", ".", "update", "(", "{", "'DP_unfairness'", ":", "{", "epoch", ":", "discrimination_abs", "}", "}", ")", "\n", "\n", "# If counterfactual data is present, also compute counterfactual unfairness.", "\n", "", "if", "cf_dataset", "is", "not", "None", ":", "\n", "            ", "cf_pred_labels", "=", "cf_pol_preds", "\n", "cf_unfairness", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "pred_labels", "-", "cf_pred_labels", ")", ")", ".", "item", "(", ")", "\n", "try", ":", "\n", "                ", "metric_dct", "[", "'CF_unfairness'", "]", ".", "update", "(", "{", "epoch", ":", "cf_unfairness", "}", ")", "\n", "", "except", ":", "\n", "                ", "metric_dct", ".", "update", "(", "{", "'CF_unfairness'", ":", "{", "epoch", ":", "cf_unfairness", "}", "}", ")", "\n", "\n", "# Store effective utility (accumulated utility) from training process", "\n", "", "", "", "if", "'2'", "in", "phase_num", "and", "not", "(", "dataset", ".", "val", "or", "dataset", ".", "test", ")", ":", "\n", "        ", "pred_labels", "=", "pol_preds", "\n", "temp_utility", "=", "compute_utility", "(", "u_true", ",", "pred_labels", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", ".", "item", "(", ")", "\n", "if", "util_gnd", ":", "\n", "            ", "temp_utility_gnd", "=", "compute_utility", "(", "yf_true", ",", "pred_labels", ".", "flatten", "(", ")", ",", "mask_ones", ",", "costs", ",", "prob", ")", ".", "item", "(", ")", "\n", "", "if", "'Effective_util'", "not", "in", "metric_dct", ":", "\n", "            ", "effective_utility", "=", "temp_utility", "\n", "", "else", ":", "\n", "            ", "effective_utility", "=", "(", "metric_dct", "[", "'Effective_util'", "]", "[", "epoch", "-", "1", "]", "*", "(", "epoch", "-", "1", ")", "+", "temp_utility", ")", "/", "epoch", "\n", "", "try", ":", "\n", "            ", "metric_dct", "[", "'Effective_util'", "]", ".", "update", "(", "{", "epoch", ":", "effective_utility", "}", ")", "\n", "", "except", ":", "\n", "            ", "metric_dct", ".", "update", "(", "{", "'Effective_util'", ":", "{", "epoch", ":", "effective_utility", "}", "}", ")", "\n", "\n", "", "if", "util_gnd", ":", "\n", "            ", "if", "'Effective_util_gnd'", "not", "in", "metric_dct", ":", "\n", "                ", "effective_utility_gnd", "=", "temp_utility_gnd", "\n", "", "else", ":", "\n", "# Epochs are 1-based so easier!", "\n", "                ", "effective_utility_gnd", "=", "(", "metric_dct", "[", "'Effective_util_gnd'", "]", "[", "epoch", "-", "1", "]", "*", "(", "\n", "epoch", "-", "1", ")", "+", "temp_utility_gnd", ")", "/", "epoch", "\n", "", "try", ":", "\n", "                ", "metric_dct", "[", "'Effective_util_gnd'", "]", ".", "update", "(", "{", "epoch", ":", "effective_utility_gnd", "}", ")", "\n", "", "except", ":", "\n", "                ", "metric_dct", ".", "update", "(", "{", "'Effective_util_gnd'", ":", "{", "epoch", ":", "effective_utility_gnd", "}", "}", ")", "\n", "\n", "# Logging Effective discrimination as well (accumulated unfairness measure across training)", "\n", "", "", "pred_labels_s1", ",", "pred_labels_s0", "=", "pred_labels", "[", "use_data", "[", ":", ",", "-", "1", "]", "==", "1", "]", ",", "pred_labels", "[", "use_data", "[", ":", ",", "-", "1", "]", "==", "-", "1", "]", "\n", "temp_discrimination", "=", "torch", ".", "abs", "(", "torch", ".", "mean", "(", "pred_labels_s1", ")", "-", "torch", ".", "mean", "(", "pred_labels_s0", ")", ")", ".", "item", "(", ")", "\n", "if", "'Effective_DPU'", "not", "in", "metric_dct", ":", "\n", "            ", "effective_discrimination", "=", "temp_discrimination", "\n", "", "else", ":", "\n", "            ", "effective_discrimination", "=", "(", "metric_dct", "[", "'Effective_DPU'", "]", "[", "epoch", "-", "1", "]", "*", "(", "epoch", "-", "1", ")", "+", "\n", "temp_discrimination", ")", "/", "epoch", "\n", "", "try", ":", "\n", "            ", "metric_dct", "[", "'Effective_DPU'", "]", ".", "update", "(", "{", "epoch", ":", "effective_discrimination", "}", ")", "\n", "", "except", ":", "\n", "            ", "metric_dct", ".", "update", "(", "{", "'Effective_DPU'", ":", "{", "epoch", ":", "effective_discrimination", "}", "}", ")", "\n", "\n", "", "", "if", "state", "==", "'final'", ":", "\n", "        ", "return", "metric_dct", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.nrmse": [[370, 376], ["torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.max", "torch.max", "torch.min", "torch.min", "mask.bool", "mask.bool", "torch.sqrt", "torch.sqrt", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss"], "function", ["None"], ["", "", "def", "nrmse", "(", "pred", ",", "target", ",", "mask", ")", ":", "# for numerical variables", "\n", "    ", "norm_term", "=", "torch", ".", "max", "(", "target", ")", "-", "torch", ".", "min", "(", "target", ")", "\n", "new_pred", "=", "torch", ".", "masked_select", "(", "pred", ",", "mask", ".", "bool", "(", ")", ")", "\n", "new_target", "=", "torch", ".", "masked_select", "(", "target", ",", "mask", ".", "bool", "(", ")", ")", "\n", "\n", "return", "torch", ".", "sqrt", "(", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "new_pred", ",", "new_target", ")", ")", "/", "norm_term", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.error_rate": [[378, 380], ["torch.sum", "torch.sum", "mask.sum"], "function", ["None"], ["", "def", "error_rate", "(", "pred", ",", "target", ",", "mask", ")", ":", "# for categorical variables - this is 1-accuracy!", "\n", "    ", "return", "torch", ".", "sum", "(", "(", "pred", "!=", "target", ")", ".", "double", "(", ")", "*", "mask", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.displacement": [[382, 385], ["diff.sum", "mask.sum"], "function", ["None"], ["", "def", "displacement", "(", "pred", ",", "target", ",", "mask", ",", "size", ")", ":", "# for ordinal variables", "\n", "    ", "diff", "=", "(", "target", "-", "pred", ")", ".", "abs", "(", ")", "*", "mask", "/", "size", "\n", "return", "diff", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.imputation_error": [[387, 407], ["mask.double.double", "enumerate", "str", "errors.append", "miscelanea.error_rate", "str", "errors.append", "errors.append", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "miscelanea.error_rate", "miscelanea.nrmse"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.error_rate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.error_rate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.nrmse"], ["", "def", "imputation_error", "(", "prob_model", ",", "pred", ",", "target", ",", "mask", ")", ":", "\n", "    ", "mask", "=", "mask", ".", "double", "(", ")", "\n", "\n", "pos", "=", "0", "\n", "errors", "=", "[", "]", "\n", "for", "i", ",", "dist", "in", "enumerate", "(", "prob_model", ")", ":", "\n", "        ", "if", "'bernoulli'", "in", "str", "(", "dist", ")", ":", "# nominal", "\n", "            ", "errors", ".", "append", "(", "error_rate", "(", "pred", "[", ":", ",", "pos", "]", ",", "target", "[", ":", ",", "pos", "]", ",", "mask", "[", ":", ",", "pos", "]", ")", ")", "\n", "", "elif", "'categorical'", "in", "str", "(", "dist", ")", ":", "# nominal", "\n", "            ", "if", "dist", ".", "domain_size", ">", "1", ":", "\n", "                ", "pred_i", "=", "torch", ".", "argmax", "(", "pred", "[", ":", ",", "pos", ":", "pos", "+", "dist", ".", "domain_size", "]", ",", "dim", "=", "-", "1", ")", "\n", "target_i", "=", "torch", ".", "argmax", "(", "target", "[", ":", ",", "pos", ":", "pos", "+", "dist", ".", "domain_size", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "pred_i", ",", "target_i", "=", "pred", "[", ":", ",", "pos", "]", ",", "target", "[", ":", ",", "pos", "]", "\n", "", "errors", ".", "append", "(", "error_rate", "(", "pred_i", ",", "target_i", ",", "mask", "[", ":", ",", "pos", "]", ")", ")", "\n", "", "else", ":", "# numerical", "\n", "            ", "errors", ".", "append", "(", "nrmse", "(", "pred", "[", ":", ",", "pos", "]", ",", "target", "[", ":", ",", "pos", "]", ",", "mask", "[", ":", ",", "pos", "]", ")", ")", "\n", "", "pos", "+=", "dist", ".", "domain_size", "\n", "\n", "", "return", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.miscelanea.calculate_ll": [[409, 444], ["torch.no_grad", "torch.no_grad", "prob_model.eval", "getattr", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.ones_like", "torch.ones_like", "model.log_likelihood", "model.log_likelihood", "mean", "mean", "mean", "print", "enumerate", "print", "print", "print", "print", "sum().item", "len", "str", "getattr", "zip", "is_discrete", "len", "zip", "len", "print", "mean", "str", "str", "is_discrete", "sum", "int"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.log_likelihood", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.log_likelihood", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.is_discrete", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.is_discrete"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "calculate_ll", "(", "engine", ",", "model", ",", "prob_model", ",", "dataset", ",", "writer", ")", ":", "\n", "    ", "prob_model", ".", "eval", "(", ")", "\n", "\n", "epoch", "=", "engine", ".", "state", ".", "epoch", "\n", "mean", "=", "lambda", "x", ":", "sum", "(", "x", ")", ".", "item", "(", ")", "/", "len", "(", "x", ")", "\n", "\n", "# observed_mask = getattr(dataset, 'mask_original', torch.ones_like(dataset.data))[:, :-1] #take off s", "\n", "observed_mask", "=", "getattr", "(", "dataset", ",", "'mask_original'", ",", "torch", ".", "ones_like", "(", "dataset", ".", "data", ")", ")", "# take off s", "\n", "\n", "if", "str", "(", "model", ")", "[", "-", "3", ":", "]", "==", "'VAE'", ":", "# I can't import models due to circular dependencies", "\n", "        ", "observed_log_prob", "=", "model", ".", "log_likelihood", "(", "dataset", ".", "data", ",", "None", ",", "getattr", "(", "dataset", ",", "'mask'", ")", ")", "\n", "", "else", ":", "\n", "        ", "observed_log_prob", "=", "model", ".", "log_likelihood", "(", "dataset", ".", "data", ",", "dataset", ".", "params", ",", "None", ")", "\n", "\n", "", "observed_log_prob", "=", "(", "observed_log_prob", "*", "observed_mask", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "is_discrete", "=", "lambda", "d", ":", "'categorical'", "in", "str", "(", "d", ")", "or", "'bernoulli'", "in", "str", "(", "d", ")", "\n", "nominal_error", "=", "[", "e", "for", "e", ",", "d", "in", "zip", "(", "observed_log_prob", ",", "prob_model", ")", "if", "is_discrete", "(", "d", ")", "]", "\n", "nominal_error", "=", "mean", "(", "nominal_error", ")", "if", "len", "(", "nominal_error", ")", ">", "0", "else", "0.", "\n", "numerical_error", "=", "[", "e", "for", "e", ",", "d", "in", "zip", "(", "observed_log_prob", ",", "prob_model", ")", "if", "not", "is_discrete", "(", "d", ")", "]", "\n", "numerical_error", "=", "mean", "(", "numerical_error", ")", "if", "len", "(", "numerical_error", ")", ">", "0", "else", "0.", "\n", "\n", "writer", ".", "add_scalar", "(", "'Loglikelihood/nominal'", ",", "nominal_error", ",", "engine", ".", "state", ".", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Loglikelihood/numerical'", ",", "numerical_error", ",", "engine", ".", "state", ".", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'Loglikelihood/total'", ",", "mean", "(", "observed_log_prob", ")", ",", "engine", ".", "state", ".", "epoch", ")", "\n", "\n", "if", "epoch", "%", "(", "engine", ".", "state", ".", "max_epochs", "/", "4", ")", "==", "0", ":", "\n", "        ", "print", "(", "f'[{int(epoch / engine.state.max_epochs * 100.)}%] observed log-likelihood:'", ")", "\n", "for", "i", ",", "error", "in", "enumerate", "(", "observed_log_prob", ")", ":", "\n", "            ", "print", "(", "f'[dim={i}] {error}'", ")", "\n", "", "print", "(", "'nominal  :'", ",", "nominal_error", ")", "\n", "print", "(", "'numerical:'", ",", "numerical_error", ")", "\n", "print", "(", "'total    :'", ",", "mean", "(", "observed_log_prob", ")", ")", "\n", "print", "(", "''", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.feature_scaling.normalize_per_dimension": [[12, 49], ["functools.wraps", "range", "len", "len", "print", "isinstance", "func", "print", "len", "print", "len", "functools.reduce", "isinstance", "torch.masked_select", "torch.masked_select", "data.log.log", "mask[].all", "dist_i.weight.item"], "function", ["None"], ["def", "normalize_per_dimension", "(", "prob_model", ",", "dims", ",", "func", ",", "name", ")", ":", "\n", "    ", "if", "dims", "==", "'all'", ":", "\n", "        ", "dims", "=", "range", "(", "len", "(", "prob_model", ")", ")", "\n", "", "elif", "dims", "==", "'continuous'", ":", "\n", "        ", "dims", "=", "[", "idxs", "for", "idxs", ",", "dist", "in", "prob_model", ".", "gathered", "if", "dist", ".", "real_dist", ".", "is_continuous", "]", "\n", "if", "len", "(", "dims", ")", ">", "0", ":", "\n", "            ", "dims", "=", "reduce", "(", "list", ".", "__add__", ",", "dims", ")", "\n", "\n", "", "", "@", "wraps", "(", "func", ")", "\n", "def", "normalize_per_dimension_", "(", "x", ",", "mask", "=", "None", ")", ":", "\n", "        ", "if", "len", "(", "dims", ")", ">", "0", ":", "\n", "            ", "print", "(", "'method:'", ",", "name", ")", "\n", "\n", "", "for", "i", "in", "dims", ":", "\n", "            ", "dist_i", "=", "prob_model", "[", "i", "]", "if", "isinstance", "(", "prob_model", ",", "ProbabilisticModel", ")", "else", "prob_model", "[", "i", "]", "[", "1", "]", "\n", "\n", "if", "dist_i", ".", "is_discrete", ":", "\n", "                ", "continue", "\n", "\n", "", "data", "=", "x", "[", ":", ",", "i", "]", "if", "(", "mask", "is", "None", "or", "mask", "[", ":", ",", "i", "]", ".", "all", "(", ")", ")", "else", "torch", ".", "masked_select", "(", "x", "[", ":", ",", "i", "]", ",", "mask", "[", ":", ",", "i", "]", ")", "\n", "data", "=", "dist_i", ">>", "data", "\n", "\n", "if", "isinstance", "(", "dist_i", ",", "my_dists", ".", "LogNormal", ")", ":", "# special case", "\n", "                ", "data", "=", "data", ".", "log", "(", ")", "\n", "# x[:, i].div_(data.mean().exp())", "\n", "# data = data - data.mean()", "\n", "\n", "", "weight", "=", "func", "(", "data", ")", "\n", "dist_i", ".", "weight", "*=", "weight", "\n", "\n", "print", "(", "f'normalizing [dim={i}] [weight={dist_i.weight.item()}]'", ")", "\n", "\n", "", "if", "len", "(", "dims", ")", ">", "0", ":", "\n", "            ", "print", "(", "''", ")", "\n", "\n", "", "return", "x", "\n", "", "return", "normalize_per_dimension_", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.activations.get_activation": [[9, 34], ["torch.Tanh", "torch.ReLU", "torch.ReLU6", "torch.Softplus", "torch.RReLU", "torch.LeakyReLU", "torch.ELU", "torch.SELU", "torch.GLU", "torch.Sigmoid", "torch.Identity"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "if", "name", "==", "Cte", ".", "TANH", ":", "\n", "        ", "return", "nn", ".", "Tanh", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "RELU", ":", "\n", "        ", "return", "nn", ".", "ReLU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "RELU6", ":", "\n", "        ", "return", "nn", ".", "ReLU6", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "SOFTPLUS", ":", "\n", "        ", "return", "nn", ".", "Softplus", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "RRELU", ":", "\n", "        ", "return", "nn", ".", "RReLU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "LRELU", ":", "\n", "        ", "return", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.05", ")", "\n", "", "elif", "name", "==", "Cte", ".", "ELU", ":", "\n", "        ", "return", "nn", ".", "ELU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "SELU", ":", "\n", "        ", "return", "nn", ".", "SELU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "GLU", ":", "\n", "        ", "return", "nn", ".", "GLU", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "SIGMOID", ":", "\n", "        ", "return", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "name", "==", "Cte", ".", "IDENTITY", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.__init__": [[166, 254], ["super().__init__", "datasets.read_data_file", "len", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Parameter", "torch.nn.Parameter", "datasets.RealWorldDataset.data[].clone", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "datasets.RealWorldDataset.data.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "datasets.RealWorldDataset.long", "torch.ones_like.long", "torch.ones_like.long", "torch.ones_like.long", "torch.ones_like.long", "datasets.RealWorldDataset.mask.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "datasets.RealWorldDataset.data.size", "datasets.RealWorldDataset.read_mask", "datasets.RealWorldDataset.create_mask", "datasets.RealWorldDataset.data.size", "datasets.RealWorldDataset.long", "str", "datasets.RealWorldDataset.mask.unsqueeze", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "str", "str", "str", "len"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.read_data_file", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.read_mask", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.create_mask"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "prob_model", ",", "categoricals", ",", "conditional", ",", "\n", "latent_size", ",", "file_type", ",", "test", ",", "semisup", ",", "policy", ",", "seed", ",", "\n", "percent", ",", "val", ",", "phase", ",", "warmup", ",", "warmup_samples", ",", "cf", ",", "phase1_samples", ")", ":", "\n", "        ", "\"\"\"\n        @param path: path to data files\n        @param prob_model: probabilistic model object\n        @param categoricals: categorical features\n        @param conditional: are we conditioning?\n        @param latent_size: VAE latent size\n        @param file_type: what is file extension?\n        @param test: is this test data?\n        @param semisup: are we doing semi-supervised learning?\n        @param policy: which init policy?\n        @param seed: random seed (int)\n        @param percent: what percent of data to accept (for some init policy)\n        @param val: is this validation data\n        @param phase: which phase of training? 1 or 2\n        @param warmup: is this warmup?\n        @param warmup_samples: how many warmup samples?\n        @param cf: is this counterfactual data?\n        @param phase1_samples: how many phase 1 samples?\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "semisup", "=", "semisup", "\n", "self", ".", "phase", "=", "phase", "\n", "\n", "self", ".", "val", "=", "val", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "path", "=", "path", "\n", "\n", "if", "not", "test", "and", "not", "val", ":", "\n", "            ", "inp_file", "=", "f'{path}/data'", "+", "str", "(", "phase", ")", "+", "'.'", "+", "file_type", "\n", "", "elif", "test", "and", "not", "val", ":", "\n", "            ", "if", "not", "cf", ":", "\n", "                ", "inp_file", "=", "f'{path}/test'", "+", "str", "(", "phase", ")", "+", "'.'", "+", "file_type", "\n", "", "else", ":", "\n", "                ", "inp_file", "=", "f'{path}/cf_test'", "+", "str", "(", "phase", ")", "+", "'.'", "+", "file_type", "\n", "", "", "else", ":", "\n", "            ", "inp_file", "=", "f'{path}/valid'", "+", "str", "(", "phase", ")", "+", "'.'", "+", "file_type", "\n", "\n", "", "self", ".", "data", ",", "self", ".", "prob1", ",", "self", ".", "yf", "=", "read_data_file", "(", "inp_file", ",", "categoricals", ",", "prob_model", ",", "conditional", ",", "semisup", ",", "policy", ",", "\n", "percent", ",", "(", "test", "or", "val", ")", ",", "phase", ",", "warmup", ",", "warmup_samples", ",", "phase1_samples", ")", "\n", "\n", "self", ".", "ncols", "=", "len", "(", "prob_model", ")", "\n", "self", ".", "latent_size", "=", "latent_size", "\n", "\n", "if", "semisup", "and", "(", "test", "or", "val", ")", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros", "(", "self", ".", "data", ".", "size", "(", "0", ")", ")", "\n", "", "elif", "semisup", "and", "warmup", "and", "not", "(", "test", "or", "val", ")", ":", "\n", "            ", "if", "policy", "in", "[", "Cte", ".", "LENI", ",", "Cte", ".", "HARSH", ",", "Cte", ".", "LENIC", ",", "Cte", ".", "HARSHC", "]", ":", "\n", "# Read the initial policy dependent decision.", "\n", "# This is mask, 1 is labeled, 0 is unlabeled.", "\n", "                ", "mask", "=", "self", ".", "read_mask", "(", "inp_file", ",", "policy", ",", "self", ".", "prob1", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "self", ".", "create_mask", "(", "self", ".", "prob1", ",", "seed", ")", "\n", "", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "ones", "(", "self", ".", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "conditional", ":", "\n", "            ", "dim_mask", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "-", "1", "\n", "", "else", ":", "\n", "            ", "dim_mask", "=", "self", ".", "data", ".", "shape", "[", "1", "]", "\n", "\n", "# synthetic", "\n", "", "nan_mask", "=", "torch", ".", "ones_like", "(", "mask", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "self", ".", "mask", "=", "(", "mask", ".", "long", "(", ")", "+", "nan_mask", ".", "long", "(", ")", ")", "==", "2", "\n", "self", ".", "missing_mask", "=", "(", "(", "1", "-", "mask", ".", "long", "(", ")", ")", "+", "nan_mask", ".", "long", "(", ")", ")", "==", "2", "\n", "\n", "for", "i", "in", "range", "(", "dim_mask", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "new_mask", "=", "self", ".", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "new_mask", "=", "torch", ".", "cat", "(", "(", "new_mask", ",", "self", ".", "mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "", "", "self", ".", "mask", "=", "new_mask", "\n", "\n", "if", "latent_size", "is", "not", "None", ":", "\n", "            ", "self", ".", "params", "=", "Parameter", "(", "torch", ".", "empty", "(", "(", "len", "(", "self", ".", "data", ")", ",", "latent_size", ")", ")", ".", "uniform_", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "self", ".", "sens", "=", "None", "\n", "if", "conditional", ":", "\n", "            ", "self", ".", "sens", "=", "self", ".", "data", "[", ":", ",", "-", "1", "]", ".", "clone", "(", ")", "\n", "\n", "", "if", "semisup", "and", "not", "(", "test", "or", "val", ")", "and", "warmup", ":", "\n", "            ", "self", ".", "prob1", "=", "torch", ".", "tensor", "(", "self", ".", "prob1", ".", "values", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "prob1", "=", "torch", ".", "zeros", "(", "self", ".", "data", ".", "size", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.local_params": [[255, 259], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["None"], ["", "", "@", "property", "\n", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "local_params", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.__len__": [[260, 262], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.__getitem__": [[263, 268], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "semisup", "and", "not", "(", "self", ".", "test", "or", "self", ".", "val", ")", ":", "\n", "            ", "return", "self", ".", "data", "[", "idx", "]", ",", "[", "self", ".", "params", "[", "idx", "]", ",", "self", ".", "mask", "[", "idx", "]", ",", "self", ".", "prob1", "[", "idx", "]", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "data", "[", "idx", "]", ",", "[", "self", ".", "params", "[", "idx", "]", ",", "self", ".", "mask", "[", "idx", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.__str__": [[269, 271], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'Dataset: {self.path}'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.create_mask": [[272, 286], ["random.seed", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "numpy.random.binomial().item", "numpy.random.binomial", "prob1.iloc[].item"], "methods", ["None"], ["", "def", "create_mask", "(", "self", ",", "prob1", ",", "seed", ")", ":", "\n", "        ", "\"\"\"\n        Method to create a mask on the fly, only for random initial policy.\n        @param prob1: (float) probability to select an individual\n        @param seed: (int) random seed\n        @return: tensor mask\n        \"\"\"", "\n", "assert", "prob1", "is", "not", "None", ",", "\"probability cannot be None\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "mask", "=", "[", "]", "\n", "for", "row", "in", "range", "(", "len", "(", "prob1", ")", ")", ":", "\n", "            ", "mask_i", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "prob1", ".", "iloc", "[", "row", "]", ".", "item", "(", ")", ",", "1", ")", ".", "item", "(", ")", "\n", "mask", "+=", "[", "mask_i", "]", "\n", "", "return", "torch", ".", "tensor", "(", "mask", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.RealWorldDataset.read_mask": [[287, 299], ["pandas.read_csv", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "mask.to_list", "len"], "methods", ["None"], ["", "def", "read_mask", "(", "self", ",", "filename", ",", "policy", ",", "prob1", ")", ":", "\n", "        ", "\"\"\"\n        Method to read CSV file and generate mask according to policy\n        @param filename: CSV file to read\n        @param policy: Selected initial policy\n        @param prob1: Fraction of individuals to select\n        @return: tensor mask\n        \"\"\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "filename", ",", "','", ")", "\n", "mask", "=", "df", "[", "f'{policy}_D'", "]", ".", "iloc", "[", ":", "len", "(", "prob1", ")", "]", "\n", "print", "(", "\"read mask\"", ")", "\n", "return", "torch", ".", "tensor", "(", "mask", ".", "to_list", "(", ")", ",", "dtype", "=", "torch", ".", "int", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.to_one_hot": [[18, 22], ["x.new_zeros", "x.new_zeros.scatter_().float", "x.size", "x.new_zeros.scatter_", "x.unsqueeze().long", "x.unsqueeze"], "function", ["None"], ["def", "to_one_hot", "(", "x", ",", "size", ")", ":", "\n", "    ", "x_one_hot", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "size", ")", "\n", "x_one_hot", ".", "scatter_", "(", "1", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "long", "(", ")", ",", "1", ")", ".", "float", "(", ")", "\n", "return", "x_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.get_dataloader": [[24, 62], ["datasets.RealWorldDataset", "torch.utils.data.DataLoader"], "function", ["None"], ["", "def", "get_dataloader", "(", "cfg", ",", "prob_model", ",", "phase", ",", "test", ",", "val", ",", "warmup", ",", "cf", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to get suitable DataLoader.\n    @param cfg: config dictionary\n    @param prob_model: probabilistic model object\n    @param phase: phase 1 or 2\n    @param test: true or false (data-loader for test data)\n    @param val: true or false (data-loader for validation data)\n    @param warmup: true or false (data-loader for warmup phase)\n    @param cf: true or false (loading counterfactual data or not)\n    @return: dataloader object\n    \"\"\"", "\n", "dataset", "=", "RealWorldDataset", "(", "path", "=", "f'datasets/{cfg[\"dataset\"][\"name\"]}'", ",", "\n", "prob_model", "=", "prob_model", ",", "\n", "latent_size", "=", "cfg", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "'latent_size'", "]", ",", "\n", "conditional", "=", "cfg", "[", "\"model\"", "]", "[", "\"params\"", "]", "[", "'conditional'", "]", ",", "\n", "file_type", "=", "cfg", "[", "'file_type'", "]", ",", "\n", "categoricals", "=", "cfg", "[", "'probabilistic'", "]", "[", "\"categoricals\"", "]", ",", "test", "=", "test", ",", "semisup", "=", "cfg", "[", "\"semisup\"", "]", ",", "\n", "policy", "=", "cfg", "[", "\"dataset\"", "]", "[", "\"params2\"", "]", "[", "\"init_policy\"", "]", ",", "seed", "=", "cfg", "[", "\"seed\"", "]", ",", "\n", "percent", "=", "cfg", "[", "\"dataset\"", "]", "[", "\"params2\"", "]", "[", "\"percent\"", "]", ",", "val", "=", "val", ",", "\n", "phase", "=", "phase", ",", "\n", "warmup", "=", "warmup", ",", "\n", "warmup_samples", "=", "cfg", "[", "'trainer2'", "]", "[", "'warmup_samples'", "]", ",", "\n", "cf", "=", "cf", ",", "\n", "phase1_samples", "=", "cfg", "[", "'trainer1'", "]", "[", "'phase1_samples'", "]", ")", "\n", "\n", "shuffle", "=", "not", "(", "test", "or", "val", ")", "# shuffle, if not test or valid", "\n", "if", "phase", "==", "2", ":", "\n", "# In Phase 2 ensuring we have enough batches to do stochastic learning and batches are not too large!", "\n", "        ", "batch_size", "=", "cfg", "[", "\"trainer2\"", "]", "[", "\"samples_per_ts\"", "]", "//", "3", "\n", "", "else", ":", "\n", "        ", "if", "warmup", ":", "\n", "            ", "batch_size", "=", "cfg", "[", "\"trainer2\"", "]", "[", "\"samples_per_ts\"", "]", "//", "3", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "cfg", "[", "\"dataset\"", "]", "[", "\"params2\"", "]", "[", "\"batch_size\"", "]", "\n", "\n", "", "", "loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "drop_last", "=", "True", ")", "\n", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.datasets.read_data_file": [[64, 163], ["pandas.read_csv", "list", "enumerate", "df.drop.iterrows", "torch.stack", "torch.stack", "df.drop.iloc[].copy", "list", "torch.tensor", "torch.tensor", "df.drop.iloc[].min", "df[].fillna", "len", "torch.tensor", "torch.tensor", "df.drop.iloc[].copy", "pandas.DataFrame", "list", "df[].to_numpy", "df.drop.drop", "df[].max", "pandas.unique", "len", "line.tolist", "numpy.expand_dims", "pandas.DataFrame", "df.drop.drop", "df.drop.drop", "df.drop.drop", "prob_model[].__str__", "sklearn.preprocessing.StandardScaler", "sklearn.preprocessing.StandardScaler.fit_transform().flatten", "df[].astype().clip", "pandas.unique", "numpy.ones", "numpy.expand_dims", "pandas.DataFrame", "pandas.DataFrame", "len", "numpy.expand_dims", "sklearn.preprocessing.StandardScaler.fit_transform", "df[].astype", "numpy.ones", "numpy.zeros", "df.drop.iloc[].to_numpy().reshape", "len", "len", "df.drop.iloc[].to_numpy"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.__str__", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten"], ["", "def", "read_data_file", "(", "filename", ",", "categoricals", ",", "prob_model", ",", "conditional", ",", "semisup", ",", "\n", "policy", ",", "percent", ",", "val_or_test", ",", "phase", ",", "\n", "warmup", ",", "warmup_samples", ",", "phase1_samples", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to read the data file\n    @param filename: name of file\n    @param categoricals: which attributes are categorical\n    @param prob_model: probabilistic model object\n    @param conditional: do we condition?\n    @param semisup: are we doing semi-supervised learning\n    @param policy: which initial policy\n    @param percent: what is percentage of data labeled (for some init policies)\n    @param val_or_test: are we reading a validation or test data file?\n    @param phase: which phase of training, 1 or 2\n    @param warmup: are we loading data for warmup?\n    @param warmup_samples: how many samples to use for warmup\n    @param phase1_samples: how many samples for phase 1\n    @return: data (torch tensor); init policy probability (torch tensor); Y_fair labels (torch tensor)\n    \"\"\"", "\n", "result", "=", "[", "]", "\n", "df", "=", "pd", ".", "read_csv", "(", "filename", ",", "','", ")", "\n", "if", "warmup", ":", "\n", "# take first X samples from the datafile", "\n", "        ", "df", "=", "df", ".", "iloc", "[", ":", "warmup_samples", "]", ".", "copy", "(", ")", "\n", "", "if", "phase", "==", "1", "and", "not", "val_or_test", ":", "\n", "        ", "if", "phase1_samples", "is", "not", "None", ":", "\n", "            ", "df", "=", "df", ".", "iloc", "[", ":", "phase1_samples", "]", ".", "copy", "(", ")", "\n", "\n", "", "", "if", "semisup", "and", "not", "val_or_test", "and", "warmup", ":", "\n", "        ", "if", "policy", "==", "\"FUL\"", ":", "\n", "            ", "prob1", "=", "pd", ".", "DataFrame", "(", "np", ".", "expand_dims", "(", "np", ".", "ones", "(", "len", "(", "df", ")", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "elif", "policy", "==", "Cte", ".", "RAN", ":", "\n", "            ", "prob1", "=", "pd", ".", "DataFrame", "(", "np", ".", "expand_dims", "(", "percent", "*", "np", ".", "ones", "(", "len", "(", "df", ")", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "elif", "policy", "==", "\"NO\"", ":", "\n", "            ", "prob1", "=", "pd", ".", "DataFrame", "(", "np", ".", "expand_dims", "(", "np", ".", "zeros", "(", "len", "(", "df", ")", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "prob1", "=", "pd", ".", "DataFrame", "(", "df", "[", "policy", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "prob1", "=", "None", "\n", "# remove all policies from dataset", "\n", "\n", "", "y", "=", "None", "\n", "if", "semisup", ":", "\n", "        ", "y", "=", "df", "[", "[", "'Y'", "]", "]", "\n", "", "if", "phase", "==", "1", "and", "warmup", "==", "True", ":", "# this is then only in warmup phase", "\n", "        ", "for", "i", "in", "list", "(", "df", ".", "columns", ")", ":", "\n", "            ", "if", "i", "in", "[", "Cte", ".", "LENI", ",", "Cte", ".", "HARSH", ",", "Cte", ".", "LENIC", ",", "Cte", ".", "HARSHC", ",", "Cte", ".", "RAN", "]", ":", "\n", "# get decisions", "\n", "                ", "df", "=", "df", ".", "drop", "(", "i", ",", "axis", "=", "1", ")", "\n", "df", "=", "df", ".", "drop", "(", "f'{i}_D'", ",", "axis", "=", "1", ")", "\n", "\n", "# Returning Y_F from here to set in Dataset class.", "\n", "# This would allow computing utility w.r.t. Y_F instead of Y.", "\n", "", "", "", "if", "semisup", "and", "'Y_fair'", "in", "list", "(", "df", ".", "columns", ")", ":", "\n", "        ", "dat_yf", "=", "torch", ".", "tensor", "(", "df", "[", "[", "'Y_fair'", "]", "]", ".", "to_numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "dat_yf", "=", "None", "\n", "\n", "# remove all other columns from dataset", "\n", "", "s_visited", "=", "False", "\n", "for", "i", "in", "list", "(", "df", ".", "columns", ")", ":", "\n", "        ", "if", "s_visited", ":", "\n", "            ", "df", "=", "df", ".", "drop", "(", "[", "i", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "not", "semisup", "and", "i", "==", "'Y'", ":", "\n", "            ", "df", "=", "df", ".", "drop", "(", "[", "i", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "i", "==", "'S'", ":", "\n", "            ", "s_visited", "=", "True", "\n", "\n", "", "", "if", "semisup", ":", "\n", "        ", "assert", "df", ".", "columns", "[", "-", "1", "]", "==", "'S'", "and", "df", ".", "columns", "[", "-", "2", "]", "==", "'Y'", ",", "\"Our assumption that the last column is S and second last U is not met\"", "\n", "", "else", ":", "\n", "        ", "assert", "df", ".", "columns", "[", "-", "1", "]", "==", "'S'", ",", "\"Our assumption that the last column is S is not met\"", "\n", "\n", "", "for", "i", "in", "categoricals", ":", "# U is categorical", "\n", "        ", "df", ".", "iloc", "[", ":", ",", "i", "]", "-=", "df", ".", "iloc", "[", ":", ",", "i", "]", ".", "min", "(", ")", "\n", "\n", "", "for", "i", ",", "col", "in", "enumerate", "(", "df", ")", ":", "\n", "# i is column name", "\n", "        ", "df", "[", "col", "]", "=", "df", "[", "col", "]", ".", "fillna", "(", "df", "[", "col", "]", ".", "max", "(", ")", ")", "\n", "if", "(", "conditional", "and", "(", "col", "is", "not", "'S'", ")", ")", "or", "(", "not", "conditional", ")", ":", "# one less prob_model", "\n", "            ", "if", "prob_model", "[", "i", "]", ".", "__str__", "(", ")", "==", "'normal'", ":", "\n", "                ", "scaler", "=", "StandardScaler", "(", ")", "\n", "df", ".", "iloc", "[", ":", ",", "i", "]", "=", "scaler", ".", "fit_transform", "(", "df", ".", "iloc", "[", ":", ",", "i", "]", ".", "to_numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "flatten", "(", ")", "\n", "", "if", "prob_model", "[", "i", "]", ".", "dist", ".", "support", "==", "constraints", ".", "positive", ":", "\n", "                ", "df", "[", "col", "]", "=", "df", "[", "col", "]", ".", "astype", "(", "'float64'", ")", ".", "clip", "(", "lower", "=", "1e-30", ")", "# ensure that is positive", "\n", "\n", "", "", "", "assert", "len", "(", "pd", ".", "unique", "(", "df", "[", "'S'", "]", ")", ")", "==", "2", ",", "\"S needs to be binary\"", "\n", "if", "semisup", ":", "\n", "        ", "assert", "len", "(", "pd", ".", "unique", "(", "df", "[", "'Y'", "]", ")", ")", "==", "2", ",", "\"Y needs to be binary\"", "\n", "# convert to torch", "\n", "", "for", "_", ",", "line", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "v", "=", "torch", ".", "tensor", "(", "line", ".", "tolist", "(", ")", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "result", "+=", "[", "v", "]", "\n", "\n", "", "data", "=", "torch", ".", "stack", "(", "result", ",", "dim", "=", "0", ")", "\n", "\n", "return", "data", ",", "prob1", ",", "dat_yf", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.LogPolicy.__init__": [[10, 15], ["sklearn.linear_model.LogisticRegression"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "poltype", ",", "seed", ")", ":", "\n", "        ", "self", ".", "classifier", "=", "LogisticRegression", "(", "solver", "=", "'liblinear'", ",", "fit_intercept", "=", "True", ")", "\n", "self", ".", "fitted", "=", "False", "\n", "self", ".", "poltype", "=", "poltype", "# can be \"Unaware\" or \"Full\"", "\n", "self", ".", "seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.LogPolicy.fit": [[16, 24], ["data.drop.drop.drop", "initial_policies.LogPolicy.classifier.fit", "data.drop.drop.drop"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.fit"], ["", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "self", ".", "poltype", "==", "\"Unaware\"", ":", "\n", "            ", "data", "=", "data", ".", "drop", "(", "[", "'S'", "]", ",", "axis", "=", "1", ")", "\n", "", "y", "=", "data", "[", "'Y'", "]", "\n", "X", "=", "data", ".", "drop", "(", "[", "'Y'", "]", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "classifier", ".", "fit", "(", "X", ",", "y", ")", "\n", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.LogPolicy.predict": [[25, 49], ["data1.drop.drop.drop", "util.get_utility", "range", "data1.drop.drop.drop", "initial_policies.LogPolicy.classifier.predict_proba", "numpy.random.RandomState", "numpy.random.RandomState.binomial", "fprs.append", "numpy.mean", "len"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.get_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "assert", "self", ".", "fitted", "==", "True", ",", "\"Fit policy before predicting\"", "\n", "\n", "data1", "=", "data", "\n", "if", "self", ".", "poltype", "==", "\"Unaware\"", ":", "\n", "            ", "data1", "=", "data1", ".", "drop", "(", "[", "'S'", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "y", "=", "data1", "[", "'Y'", "]", "\n", "X", "=", "data1", ".", "drop", "(", "[", "'Y'", "]", ",", "axis", "=", "1", ")", "\n", "\n", "prob", "=", "self", ".", "classifier", ".", "predict_proba", "(", "X", ")", "[", ":", ",", "1", "]", "\n", "\n", "_", ",", "average_util", "=", "get_utility", "(", "prob", ",", "y", ")", "\n", "\n", "fprs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "random_s", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", "*", "i", ")", "\n", "dec", "=", "random_s", ".", "binomial", "(", "1", ",", "prob", ",", "len", "(", "prob", ")", ")", "\n", "#todo: this is outcommented and fpr set to 0, because it didnt work", "\n", "# fpr = false_positive_rate(y, dec)", "\n", "fpr", "=", "0", "\n", "fprs", ".", "append", "(", "fpr", ")", "\n", "\n", "", "return", "prob", ",", "average_util", ",", "np", ".", "mean", "(", "fprs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.OptimalPolicy.__init__": [[52, 55], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ",", "seed", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.OptimalPolicy.predict": [[56, 76], ["numpy.where", "numpy.where", "pandas.Series", "util.get_utility", "range", "numpy.zeros", "numpy.random.RandomState", "numpy.random.RandomState.binomial", "util.false_positive_rate", "fprs.append", "numpy.mean", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.get_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.false_positive_rate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "y", "=", "data", "[", "'Y'", "]", "\n", "\n", "index_y1", "=", "np", ".", "where", "(", "y", "==", "1", ")", "\n", "index_y0", "=", "np", ".", "where", "(", "y", "==", "0", ")", "\n", "\n", "prob", "=", "pd", ".", "Series", "(", "np", ".", "zeros", "(", "len", "(", "y", ")", ")", ",", "name", "=", "'OPT'", ")", "\n", "prob", ".", "loc", "[", "index_y1", "]", "=", "self", ".", "prob", "\n", "prob", ".", "loc", "[", "index_y0", "]", "=", "1", "-", "self", ".", "prob", "\n", "\n", "_", ",", "average_util", "=", "get_utility", "(", "prob", ",", "y", ")", "\n", "\n", "fprs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "random_s", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", "*", "i", ")", "\n", "dec", "=", "random_s", ".", "binomial", "(", "1", ",", "prob", ",", "len", "(", "prob", ")", ")", "\n", "fpr", "=", "false_positive_rate", "(", "y", ",", "dec", ")", "\n", "fprs", ".", "append", "(", "fpr", ")", "\n", "\n", "", "return", "prob", ",", "average_util", ",", "np", ".", "mean", "(", "fprs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.BiasedPolicy.__init__": [[79, 85], ["min", "max"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", ",", "seed", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "self", ".", "bias_s", "=", "0.15", "\n", "self", ".", "prob_s0", "=", "min", "(", "0.99", ",", "self", ".", "prob", "+", "self", ".", "bias_s", ")", "\n", "self", ".", "prob_s1", "=", "max", "(", "0.01", ",", "self", ".", "prob", "-", "self", ".", "bias_s", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.BiasedPolicy.predict": [[86, 109], ["data.index[].tolist", "data.index[].tolist", "pandas.Series", "util.get_utility", "range", "numpy.ones", "numpy.random.RandomState", "numpy.random.RandomState.binomial", "util.false_positive_rate", "fprs.append", "numpy.mean", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.get_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.false_positive_rate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "y", "=", "data", "[", "'Y'", "]", "\n", "s", "=", "data", "[", "'S'", "]", "\n", "\n", "index_y0", "=", "y", "[", "y", "==", "0", "]", ".", "index", ".", "values", "\n", "index_y1s1", "=", "data", ".", "index", "[", "(", "data", "[", "'Y'", "]", "==", "1", ")", "&", "(", "data", "[", "'S'", "]", "==", "-", "1", ")", "]", ".", "tolist", "(", ")", "\n", "index_y1s0", "=", "data", ".", "index", "[", "(", "data", "[", "'Y'", "]", "==", "1", ")", "&", "(", "data", "[", "'S'", "]", "==", "1", ")", "]", ".", "tolist", "(", ")", "\n", "\n", "prob", "=", "pd", ".", "Series", "(", "np", ".", "ones", "(", "len", "(", "y", ")", ")", ",", "name", "=", "'BP'", ")", "\n", "prob", ".", "loc", "[", "(", "index_y1s1", ")", "]", "=", "self", ".", "prob_s1", "\n", "prob", ".", "loc", "[", "(", "index_y1s0", ")", "]", "=", "self", ".", "prob_s0", "\n", "prob", ".", "loc", "[", "(", "index_y0", ")", "]", "=", "1", "-", "self", ".", "prob", "\n", "\n", "_", ",", "average_util", "=", "get_utility", "(", "prob", ",", "y", ")", "\n", "\n", "fprs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "random_s", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", "*", "i", ")", "\n", "dec", "=", "random_s", ".", "binomial", "(", "1", ",", "prob", ",", "len", "(", "prob", ")", ")", "\n", "fpr", "=", "false_positive_rate", "(", "y", ",", "dec", ")", "\n", "fprs", ".", "append", "(", "fpr", ")", "\n", "\n", "", "return", "prob", ",", "average_util", ",", "np", ".", "mean", "(", "fprs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.SigmoidPolicy.__init__": [[112, 117], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pol_type", ",", "dist", ",", "seed", ",", "biased", "=", "False", ")", ":", "\n", "        ", "self", ".", "dist", "=", "dist", "\n", "self", ".", "biased", "=", "biased", "\n", "self", ".", "pol_type", "=", "pol_type", "\n", "self", ".", "seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.SigmoidPolicy.predict": [[118, 162], ["util.get_utility", "range", "initial_policies.SigmoidPolicy.predict.sigmoid"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.get_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "y", "=", "data", "[", "'Y'", "]", "\n", "\n", "def", "sigmoid", "(", "x", ",", "w0", ",", "w1", ")", ":", "\n", "            ", "return", "1", "/", "(", "1", "+", "math", ".", "exp", "(", "-", "(", "w1", "*", "x", "+", "w0", ")", ")", ")", "\n", "\n", "", "def", "pol_sigmoid", "(", "x", ",", "pol_type", "=", "'lenient'", ")", ":", "\n", "            ", "if", "pol_type", "==", "'lenient'", ":", "\n", "                ", "w0", ",", "w1", "=", "1", ",", "1", "\n", "", "elif", "pol_type", "==", "'harsh'", ":", "\n", "                ", "w0", ",", "w1", "=", "-", "3", ",", "2", "\n", "", "return", "sigmoid", "(", "x", ",", "w0", ",", "w1", ")", "\n", "\n", "", "def", "bpol_sigmoid", "(", "x", ",", "s", ",", "pol_type", ")", ":", "\n", "            ", "if", "pol_type", "==", "'lenient'", ":", "\n", "                ", "w0", ",", "w1", "=", "1", ",", "1", "\n", "", "elif", "pol_type", "==", "'harsh'", ":", "\n", "                ", "w0", ",", "w1", "=", "-", "3", ",", "2", "\n", "", "if", "s", "==", "1", ":", "\n", "                ", "w0", "+=", "-", "1.5", "# stricker policy", "\n", "", "elif", "s", "==", "-", "1", ":", "\n", "                ", "w0", "+=", "1.5", "\n", "", "return", "sigmoid", "(", "x", ",", "w0", ",", "w1", ")", "\n", "\n", "", "if", "self", ".", "dist", "in", "[", "'SCB'", ",", "'NSC'", "]", ":", "#todo: add other synthetic datasets", "\n", "           ", "x", "=", "data", "[", "'GPA'", "]", "\n", "if", "self", ".", "biased", "==", "False", ":", "\n", "              ", "prob", "=", "[", "pol_sigmoid", "(", "i", ",", "self", ".", "pol_type", ")", "for", "i", "in", "x", "]", "\n", "", "else", ":", "\n", "               ", "s", "=", "data", "[", "'S'", "]", "\n", "prob", "=", "[", "bpol_sigmoid", "(", "i", "[", "0", "]", ",", "i", "[", "1", "]", ",", "str", "(", "self", ".", "pol_type", ")", ")", "for", "i", "in", "zip", "(", "x", ",", "s", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'dist is not implemented:'", ",", "self", ".", "dist", ")", "\n", "\n", "", "_", ",", "average_util", "=", "get_utility", "(", "prob", ",", "y", ")", "\n", "\n", "fprs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "random_s", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", "*", "i", ")", "\n", "dec", "=", "random_s", ".", "binomial", "(", "1", ",", "prob", ",", "len", "(", "prob", ")", ")", "\n", "fpr", "=", "false_positive_rate", "(", "y", ",", "dec", ")", "\n", "fprs", ".", "append", "(", "fpr", ")", "\n", "\n", "", "return", "prob", ",", "average_util", ",", "np", ".", "mean", "(", "fprs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.RandomPolicy.__init__": [[164, 166], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "seed", ")", ":", "\n", "        ", "self", ".", "seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.initial_policies.RandomPolicy.predict": [[167, 182], ["pandas.Series", "util.get_utility", "range", "numpy.random.RandomState", "numpy.random.RandomState.binomial", "util.false_positive_rate", "fprs.append", "numpy.mean", "numpy.ones", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.get_utility", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.false_positive_rate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "predict", "(", "self", ",", "data", ")", ":", "\n", "        ", "y", "=", "data", "[", "'Y'", "]", "\n", "\n", "prob", "=", "pd", ".", "Series", "(", "np", ".", "ones", "(", "len", "(", "y", ")", ")", "*", "0.5", ",", "name", "=", "'RAN'", ")", "\n", "\n", "_", ",", "average_util", "=", "get_utility", "(", "prob", ",", "y", ")", "\n", "\n", "fprs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "random_s", "=", "np", ".", "random", ".", "RandomState", "(", "self", ".", "seed", "*", "i", ")", "\n", "dec", "=", "random_s", ".", "binomial", "(", "1", ",", "prob", ",", "len", "(", "prob", ")", ")", "\n", "fpr", "=", "false_positive_rate", "(", "y", ",", "dec", ")", "\n", "fprs", ".", "append", "(", "fpr", ")", "\n", "\n", "", "return", "prob", ",", "average_util", ",", "np", ".", "mean", "(", "fprs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.get_random": [[7, 13], ["numpy.random.RandomState", "numpy.random.RandomState"], "function", ["None"], ["def", "get_random", "(", "seed", "=", "None", ")", ":", "\n", "    ", "if", "seed", "is", "None", ":", "\n", "        ", "return", "RandomState", "(", ")", "\n", "", "else", ":", "\n", "        ", "s", "=", "RandomState", "(", "seed", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.get_utility": [[14, 23], ["pandas.Series", "pandas.Series", "numpy.average", "len"], "function", ["None"], ["", "", "def", "get_utility", "(", "d", ",", "y", ")", ":", "\n", "    ", "d", "=", "pd", ".", "Series", "(", "d", ")", "\n", "y", "=", "pd", ".", "Series", "(", "y", ")", "\n", "c", "=", "0.5", "\n", "u", "=", "d", "*", "(", "y", "-", "c", ")", "\n", "if", "len", "(", "u", ")", "==", "1", ":", "\n", "        ", "u", "=", "u", "[", "0", "]", "\n", "", "avu", "=", "np", ".", "average", "(", "u", ")", "\n", "return", "u", ",", "avu", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.whiten": [[24, 38], ["numpy.mean", "numpy.std", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "whiten", "(", "data", ",", "columns", "=", "None", ",", "conditioning", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\"\n    Whiten various datasets in data dictionary.\n    Args:\n        data: Data array.\n        columns: The columns to whiten. If `None`, whiten all.\n        conditioning: Added to the denominator to avoid divison by zero.\n    \"\"\"", "\n", "if", "columns", "is", "None", ":", "\n", "        ", "columns", "=", "np", ".", "arange", "(", "data", ".", "shape", "[", "1", "]", ")", "\n", "", "mu", "=", "np", ".", "mean", "(", "data", "[", ":", ",", "columns", "]", ",", "0", ")", "\n", "std", "=", "np", ".", "std", "(", "data", "[", ":", ",", "columns", "]", ",", "0", ")", "\n", "data", "[", ":", ",", "columns", "]", "=", "(", "data", "[", ":", ",", "columns", "]", "-", "mu", ")", "/", "(", "std", "+", "conditioning", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.util.false_positive_rate": [[39, 44], ["sklearn.confusion_matrix().ravel", "sklearn.confusion_matrix"], "function", ["None"], ["", "def", "false_positive_rate", "(", "y_true", ",", "y_pred", ",", "sample_weight", "=", "None", ")", ":", "\n", "    ", "r\"\"\"Calculate the false positive rate (also called fall-out).\"\"\"", "\n", "tnr", ",", "fpr", ",", "fnr", ",", "tpr", "=", "skm", ".", "confusion_matrix", "(", "\n", "y_true", ",", "y_pred", ",", "sample_weight", "=", "sample_weight", ",", "labels", "=", "[", "0", ",", "1", "]", ",", "normalize", "=", "\"true\"", ")", ".", "ravel", "(", ")", "\n", "return", "fpr", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.BaseDistribution._sample_test_dataset": [[16, 18], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "_sample_test_dataset", "(", "self", ",", "n_test", ",", "random", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Subclass must override _sample_test_dataset(self, n_test).\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.BaseDistribution._sample_train_dataset": [[19, 21], ["NotImplementedError"], "methods", ["None"], ["", "def", "_sample_train_dataset", "(", "self", ",", "n_train", ",", "random", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Subclass must override _sample_train_dataset(self, n_train).\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.BaseDistribution.sample_test_dataset": [[23, 26], ["distributions_syn.BaseDistribution._sample_test_dataset"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.GenerativeDistribution._sample_test_dataset"], ["", "def", "sample_test_dataset", "(", "self", ",", "n_test", ",", "seed", ")", ":", "\n", "# return self._sample_test_dataset(n_test, get_random(seed) if seed else get_random())", "\n", "        ", "return", "self", ".", "_sample_test_dataset", "(", "n_test", ",", "13", "*", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.BaseDistribution.sample_stats_dataset": [[27, 30], ["distributions_syn.BaseDistribution._sample_stats_dataset"], "methods", ["None"], ["", "def", "sample_stats_dataset", "(", "self", ",", "n_test", ",", "seed", ")", ":", "\n", "# return self._sample_test_dataset(n_test, get_random(seed) if seed else get_random())", "\n", "        ", "return", "self", ".", "_sample_stats_dataset", "(", "n_test", ",", "19", "*", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.BaseDistribution.sample_train_dataset": [[32, 35], ["distributions_syn.BaseDistribution._sample_train_dataset"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.GenerativeDistribution._sample_train_dataset"], ["", "def", "sample_train_dataset", "(", "self", ",", "n_train", ",", "seed", ")", ":", "\n", "# return self._sample_train_dataset(n_train, get_random(seed) if seed else get_random())", "\n", "        ", "return", "self", ".", "_sample_train_dataset", "(", "n_train", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.GenerativeDistribution.__init__": [[38, 77], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fraction_protected", ")", ":", "\n", "\n", "\n", "# how many s=1 persons, i.e. 0.5 or 0.3", "\n", "        ", "self", ".", "fraction_protected", "=", "fraction_protected", "\n", "\n", "# standartized features", "\n", "# GPA", "\n", "self", ".", "muG", "=", "0", "\n", "self", ".", "sigG", "=", "0.8", "\n", "\n", "#LSAT", "\n", "self", ".", "muL", "=", "0", "\n", "self", ".", "sigL", "=", "1.", "\n", "\n", "#FYA, standardized", "\n", "self", ".", "muF", "=", "0", "\n", "self", ".", "sigF", "=", "0.3", "\n", "# to compute y", "\n", "self", ".", "threshold", "=", "0", "\n", "\n", "# weight of mix in sigma, changed to 0", "\n", "self", ".", "r", "=", "1", "# not relevant for SCB", "\n", "\n", "\n", "# sensitive attribute", "\n", "self", ".", "wSF", "=", "-", "0.8", "# changed from -0.8", "\n", "self", ".", "wSG", "=", "-", "1.5", "\n", "self", ".", "wSL", "=", "-", "0.5", "\n", "\n", "#Knowledge", "\n", "# self.muK = 1", "\n", "self", ".", "muK0", "=", "-", "1", "\n", "self", ".", "muK1", "=", "1", "\n", "self", ".", "sigK", "=", "0.6", "\n", "\n", "self", ".", "wKG", "=", "1.5", "\n", "self", ".", "wKL", "=", "1", "\n", "self", ".", "wKF", "=", "1.3", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.GenerativeDistribution._sample_features": [[79, 81], ["NotImplementedError"], "methods", ["None"], ["", "def", "_sample_features", "(", "self", ",", "n", ",", "fraction_protected", ",", "random", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Subclass must override sample_features(self, n).\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.GenerativeDistribution._sample_labels": [[82, 84], ["NotImplementedError"], "methods", ["None"], ["", "def", "_sample_labels", "(", "self", ",", "x", ",", "s", ",", "random", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Subclass must override sample_labels(self, x, s).\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.GenerativeDistribution._sample_train_dataset": [[85, 99], ["distributions_syn.GenerativeDistribution._sample_features", "print", "sklearn.preprocessing.scale", "sklearn.preprocessing.scale", "distributions_syn.GenerativeDistribution._sample_labels", "s.astype.astype.astype", "y.astype.astype.astype", "pandas.DataFrame"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.UncalibratedScore._sample_features", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.scale", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.scale", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.UncalibratedScore._sample_labels"], ["", "def", "_sample_train_dataset", "(", "self", ",", "n_train", ",", "seed", ")", ":", "\n", "        ", "xG", ",", "xL", ",", "s", ",", "k", ",", "k_mean", ",", "k_var", "=", "self", ".", "_sample_features", "(", "n_train", ",", "self", ".", "fraction_protected", ",", "seed", ")", "\n", "# Todo: /// verify if its the same, if we used x in real dataset as DataFrame", "\n", "print", "(", "xG", ")", "\n", "xG_std", "=", "preprocessing", ".", "scale", "(", "xG", ")", "\n", "xL_std", "=", "preprocessing", ".", "scale", "(", "xG", ")", "\n", "y", ",", "y_fair", ",", "prob_FYA", ",", "fya", "=", "self", ".", "_sample_labels", "(", "xG_std", ",", "xL_std", ",", "s", ",", "k", ",", "n_train", ",", "seed", ")", "\n", "\n", "s", "=", "s", ".", "astype", "(", "'int32'", ")", "\n", "y", "=", "y", ".", "astype", "(", "'int32'", ")", "\n", "d", "=", "{", "'GPA'", ":", "xG", ",", "'LSAT'", ":", "xL", ",", "'Y'", ":", "y", ",", "'S'", ":", "s", ",", "'Y_F'", ":", "y_fair", ",", "'prob_FYA'", ":", "prob_FYA", ",", "\n", "'K'", ":", "k", ",", "'FYA'", ":", "fya", "}", "\n", "# d = {'GPA': xG, 'LSAT': xL, 'Y': y, 'S': s}", "\n", "return", "pd", ".", "DataFrame", "(", "data", "=", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.GenerativeDistribution._sample_test_dataset": [[100, 102], ["distributions_syn.GenerativeDistribution._sample_train_dataset"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.GenerativeDistribution._sample_train_dataset"], ["", "def", "_sample_test_dataset", "(", "self", ",", "n_test", ",", "seed", ")", ":", "\n", "        ", "return", "self", ".", "_sample_train_dataset", "(", "n_test", ",", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.NoConfounders.__init__": [[117, 119], ["distributions_syn.GenerativeDistribution.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fraction_protected", ")", ":", "\n", "        ", "super", "(", "NoConfounders", ",", "self", ")", ".", "__init__", "(", "fraction_protected", "=", "fraction_protected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.NoConfounders._sample_features": [[120, 133], ["numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState.rand", "numpy.zeros().squeeze", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "xG.squeeze", "xL.squeeze", "s.squeeze", "numpy.zeros"], "methods", ["None"], ["", "def", "_sample_features", "(", "self", ",", "n", ",", "fraction_protected", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "random1", "=", "np", ".", "random", ".", "RandomState", "(", "3", "*", "seed", ")", "\n", "random2", "=", "np", ".", "random", ".", "RandomState", "(", "4", "*", "seed", ")", "\n", "\n", "number", "=", "random", ".", "rand", "(", "n", ",", "1", ")", "\n", "s", "=", "(", "number", "<", "fraction_protected", ")", ".", "astype", "(", "int", ")", "\n", "k", "=", "np", ".", "zeros", "(", "n", ")", ".", "squeeze", "(", ")", "\n", "epsG", "=", "random1", ".", "normal", "(", "0", ",", "self", ".", "sigG", ",", "n", ")", "\n", "epsL", "=", "random2", ".", "normal", "(", "0", ",", "self", ".", "sigL", ",", "n", ")", "\n", "xG", "=", "self", ".", "muG", "+", "epsG", "\n", "xL", "=", "self", ".", "muL", "+", "epsL", "\n", "return", "xG", ".", "squeeze", "(", ")", ",", "xL", ".", "squeeze", "(", ")", ",", "s", ".", "squeeze", "(", ")", ",", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.NoConfounders._sample_labels": [[134, 142], ["numpy.random.RandomState", "numpy.random.RandomState.normal"], "methods", ["None"], ["", "def", "_sample_labels", "(", "self", ",", "xG", ",", "xL", ",", "s", ",", "k", ",", "n", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "6", "*", "seed", ")", "\n", "\n", "epsF", "=", "random", ".", "normal", "(", "0", ",", "self", ".", "sigF", ",", "n", ")", "\n", "xF", "=", "self", ".", "muF", "+", "epsF", "\n", "y", "=", "(", "xF", ">", "self", ".", "threshold", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.NonSensitiveConfounder.__init__": [[144, 146], ["distributions_syn.GenerativeDistribution.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fraction_protected", ")", ":", "\n", "        ", "super", "(", "NonSensitiveConfounder", ",", "self", ")", ".", "__init__", "(", "fraction_protected", "=", "fraction_protected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.NonSensitiveConfounder._sample_features": [[147, 166], ["numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.random.RandomState.rand"], "methods", ["None"], ["", "def", "_sample_features", "(", "self", ",", "n", ",", "fraction_protected", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "random1", "=", "np", ".", "random", ".", "RandomState", "(", "3", "*", "seed", ")", "\n", "random2", "=", "np", ".", "random", ".", "RandomState", "(", "4", "*", "seed", ")", "\n", "random3", "=", "np", ".", "random", ".", "RandomState", "(", "5", "*", "seed", ")", "\n", "\n", "# random sensitive label", "\n", "s", "=", "(", "random", ".", "rand", "(", "n", ",", "1", ")", "<", "fraction_protected", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "# Knowledge", "\n", "k", "=", "random3", ".", "normal", "(", "self", ".", "muK", ",", "self", ".", "sigK", ",", "n", ")", "\n", "# epsilon", "\n", "epsG", "=", "random1", ".", "normal", "(", "0", ",", "self", ".", "sigG", ",", "n", ")", "\n", "epsL", "=", "random2", ".", "normal", "(", "0", ",", "self", ".", "sigL", ",", "n", ")", "\n", "# GPA", "\n", "xG", "=", "self", ".", "muG", "+", "(", "self", ".", "wKG", "*", "k", ")", ".", "squeeze", "(", ")", "+", "epsG", "\n", "# LSAT", "\n", "xL", "=", "self", ".", "muL", "+", "(", "self", ".", "wKG", "*", "k", ")", ".", "squeeze", "(", ")", "+", "epsL", "\n", "\n", "return", "xG", ",", "xL", ",", "s", ",", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.NonSensitiveConfounder._sample_labels": [[167, 178], ["numpy.random.RandomState", "numpy.random.RandomState.normal"], "methods", ["None"], ["", "def", "_sample_labels", "(", "self", ",", "xG", ",", "xL", ",", "s", ",", "k", ",", "n", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "6", "*", "seed", ")", "\n", "epsF", "=", "random", ".", "normal", "(", "0", ",", "self", ".", "sigF", ",", "n", ")", "# self.wK", "\n", "\n", "xF", "=", "self", ".", "muF", "+", "(", "self", ".", "wKF", "*", "k", ")", ".", "squeeze", "(", ")", "+", "epsF", "\n", "\n", "y", "=", "(", "xF", ">", "self", ".", "threshold", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "\n", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.SensitiveConfounderBias.__init__": [[181, 186], ["distributions_syn.GenerativeDistribution.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fraction_protect", ",", "threshold", "=", "0.5", ",", "sigmoid_k", "=", "0", ",", "sigmoid_r", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "fraction_protect", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "sigmoid_k", "=", "sigmoid_k", "\n", "self", ".", "sigmoid_r", "=", "sigmoid_r", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.SensitiveConfounderBias._sample_features": [[187, 225], ["numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.where", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.where", "numpy.where", "numpy.ones", "len", "numpy.random.RandomState.rand", "numpy.random.RandomState.rand", "numpy.exp", "numpy.exp"], "methods", ["None"], ["", "def", "_sample_features", "(", "self", ",", "n", ",", "fraction_protected", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "random1", "=", "np", ".", "random", ".", "RandomState", "(", "3", "*", "seed", ")", "\n", "random2", "=", "np", ".", "random", ".", "RandomState", "(", "4", "*", "seed", ")", "\n", "random3", "=", "np", ".", "random", ".", "RandomState", "(", "5", "*", "seed", ")", "\n", "random4", "=", "np", ".", "random", ".", "RandomState", "(", "5", "*", "seed", ")", "\n", "\n", "\n", "# random sensitive label", "\n", "s", "=", "(", "random", ".", "rand", "(", "n", ",", "1", ")", "<", "fraction_protected", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "# Knowledge", "\n", "k_group", "=", "(", "random4", ".", "rand", "(", "n", ",", "1", ")", "<", "0.6", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "\n", "index_k1", "=", "np", ".", "where", "(", "k_group", "==", "1", ")", "\n", "\n", "muK", "=", "np", ".", "ones", "(", "len", "(", "s", ")", ")", "*", "self", ".", "muK0", "\n", "muK", "[", "index_k1", "]", "=", "self", ".", "muK1", "\n", "\n", "k", "=", "random3", ".", "normal", "(", "muK", ",", "self", ".", "sigK", ",", "n", ")", "\n", "k_var", "=", "random3", ".", "normal", "(", "0", ",", "self", ".", "sigK", ",", "n", ")", "\n", "\n", "# epsilon", "\n", "# here the confounder only affects G, not L or F", "\n", "epsG", "=", "random1", ".", "normal", "(", "0", ",", "self", ".", "sigG", ",", "n", ")", "\n", "epsL", "=", "random2", ".", "normal", "(", "0", ",", "self", ".", "sigL", ",", "n", ")", "\n", "\n", "# # convert to -1", "\n", "s", "=", "np", ".", "where", "(", "s", "==", "0", ",", "-", "1", ",", "s", ")", "\n", "# LSAT", "\n", "mLSAT_lin", "=", "self", ".", "muL", "+", "(", "self", ".", "wSL", "*", "s", ")", ".", "squeeze", "(", ")", "+", "(", "self", ".", "wKL", "*", "k", ")", ".", "squeeze", "(", ")", "\n", "xL", "=", "(", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "mLSAT_lin", ")", ")", "-", "0.5", ")", "*", "2", "+", "epsL", "\n", "# GPA", "\n", "mGPA_lin", "=", "self", ".", "muG", "+", "(", "self", ".", "wSG", "*", "s", ")", ".", "squeeze", "(", ")", "+", "(", "self", ".", "wKG", "*", "k", ")", ".", "squeeze", "(", ")", "\n", "xG", "=", "(", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "mGPA_lin", ")", ")", "-", "0.5", ")", "*", "2", "+", "epsG", "\n", "#", "\n", "# # convert back", "\n", "s", "=", "np", ".", "where", "(", "s", "==", "-", "1", ",", "0", ",", "s", ")", "\n", "return", "xG", ",", "xL", ",", "s", ",", "k", ",", "muK", ",", "k_var", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.SensitiveConfounderBias._sample_labels": [[226, 248], ["numpy.random.RandomState", "numpy.random.RandomState.normal", "numpy.where", "print", "distributions_syn.sigmoid", "distributions_syn.sigmoid"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid"], ["", "def", "_sample_labels", "(", "self", ",", "xG", ",", "xL", ",", "s", ",", "k", ",", "n", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "6", "*", "seed", ")", "\n", "epsF", "=", "random", ".", "normal", "(", "0", ",", "self", ".", "sigF", ",", "n", ")", "\n", "\n", "# convert to -1", "\n", "s", "=", "np", ".", "where", "(", "s", "==", "0", ",", "-", "1", ",", "s", ")", "\n", "\n", "xF", "=", "self", ".", "muF", "+", "(", "self", ".", "wSF", "*", "s", ")", ".", "squeeze", "(", ")", "+", "(", "self", ".", "wKF", "*", "k", ")", ".", "squeeze", "(", ")", "+", "epsF", "\n", "print", "(", "'xF'", ",", "xF", ")", "\n", "\n", "# loc_F = self.muF + np.add((self.wSF * s).squeeze(), (self.wKF * k).squeeze())", "\n", "# prob_FYA = norm.sf(self.threshold, loc=loc_F, scale=self.sigF)", "\n", "# y = (xF > self.threshold).astype(int).squeeze()", "\n", "# y_fair = (k > self.threshold).astype(int).squeeze()", "\n", "\n", "# Modifying prob_FYA and label computation to sigmoid.", "\n", "prob_FYA", "=", "sigmoid", "(", "xF", ",", "self", ".", "sigmoid_k", ",", "self", ".", "sigmoid_r", ")", "\n", "y", "=", "(", "prob_FYA", ">", "self", ".", "threshold", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "prob_fair_FYA", "=", "sigmoid", "(", "k", ",", "self", ".", "sigmoid_k", ",", "self", ".", "sigmoid_r", ")", "\n", "y_fair", "=", "(", "prob_fair_FYA", ">", "self", ".", "threshold", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "y", ",", "y_fair", ",", "prob_FYA", ",", "xF", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.SensitiveConfounderVar._sample_features": [[251, 269], ["numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "numpy.random.RandomState.rand"], "methods", ["None"], ["    ", "def", "_sample_features", "(", "self", ",", "n", ",", "fraction_protected", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "random1", "=", "np", ".", "random", ".", "RandomState", "(", "3", "*", "seed", ")", "\n", "random2", "=", "np", ".", "random", ".", "RandomState", "(", "4", "*", "seed", ")", "\n", "random3", "=", "np", ".", "random", ".", "RandomState", "(", "5", "*", "seed", ")", "\n", "# random sensitive label", "\n", "s", "=", "(", "random", ".", "rand", "(", "n", ",", "1", ")", "<", "fraction_protected", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "# Knowledge", "\n", "k", "=", "random3", ".", "normal", "(", "self", ".", "muK", ",", "self", ".", "sigK", ",", "n", ")", "\n", "# epsilon", "\n", "# here the confounder only affects G, not L or F", "\n", "epsG", "=", "random1", ".", "normal", "(", "0", ",", "self", ".", "sigG", "+", "self", ".", "r", "*", "s", ",", "n", ")", "\n", "epsL", "=", "random2", ".", "normal", "(", "0", ",", "self", ".", "sigL", ",", "n", ")", "\n", "# GPA", "\n", "xG", "=", "self", ".", "muG", "+", "np", ".", "add", "(", "np", ".", "add", "(", "(", "0", "*", "s", ")", ".", "squeeze", "(", ")", ",", "(", "self", ".", "wKG", "*", "k", ")", ".", "squeeze", "(", ")", ")", ",", "epsG", ")", "\n", "# LSAT", "\n", "xL", "=", "self", ".", "muL", "+", "np", ".", "add", "(", "np", ".", "add", "(", "(", "0", "*", "s", ")", ".", "squeeze", "(", ")", ",", "(", "self", ".", "wKL", "*", "k", ")", ".", "squeeze", "(", ")", ")", ",", "epsL", ")", "\n", "return", "xG", ",", "xL", ",", "s", ",", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.SensitiveConfounderVar._sample_labels": [[270, 276], ["numpy.random.RandomState", "numpy.random.RandomState.normal", "numpy.add", "numpy.add"], "methods", ["None"], ["", "def", "_sample_labels", "(", "self", ",", "xG", ",", "xL", ",", "s", ",", "k", ",", "n", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "6", "*", "seed", ")", "\n", "epsF", "=", "random", ".", "normal", "(", "0", ",", "self", ".", "sigF", "+", "self", ".", "r", "*", "s", ",", "n", ")", "\n", "xF", "=", "self", ".", "muF", "+", "np", ".", "add", "(", "np", ".", "add", "(", "(", "0", "*", "s", ")", ".", "squeeze", "(", ")", ",", "(", "self", ".", "wKF", "*", "k", ")", ".", "squeeze", "(", ")", ")", ",", "epsF", ")", "\n", "y", "=", "(", "xF", ">", "self", ".", "threshold", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.SensitiveConfounderVarBias._sample_features": [[278, 297], ["numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.random.RandomState.normal", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "numpy.random.RandomState.rand"], "methods", ["None"], ["    ", "def", "_sample_features", "(", "self", ",", "n", ",", "fraction_protected", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "random1", "=", "np", ".", "random", ".", "RandomState", "(", "3", "*", "seed", ")", "\n", "random2", "=", "np", ".", "random", ".", "RandomState", "(", "4", "*", "seed", ")", "\n", "random3", "=", "np", ".", "random", ".", "RandomState", "(", "5", "*", "seed", ")", "\n", "\n", "# random sensitive label", "\n", "s", "=", "(", "random", ".", "rand", "(", "n", ",", "1", ")", "<", "fraction_protected", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "# Knowledge", "\n", "k", "=", "random3", ".", "normal", "(", "self", ".", "muK", ",", "self", ".", "sigK", ",", "n", ")", "\n", "# epsilon", "\n", "# here the confounder only affects G, not L or F", "\n", "epsG", "=", "random1", ".", "normal", "(", "0", ",", "self", ".", "sigG", "+", "self", ".", "r", "*", "s", ",", "n", ")", "\n", "epsL", "=", "random2", ".", "normal", "(", "0", ",", "self", ".", "sigL", ",", "n", ")", "\n", "# GPA", "\n", "xG", "=", "self", ".", "muG", "+", "np", ".", "add", "(", "np", ".", "add", "(", "(", "self", ".", "wSG", "*", "s", ")", ".", "squeeze", "(", ")", ",", "(", "self", ".", "wKG", "*", "k", ")", ".", "squeeze", "(", ")", ")", ",", "epsG", ")", "\n", "# LSAT", "\n", "xL", "=", "self", ".", "muL", "+", "np", ".", "add", "(", "np", ".", "add", "(", "(", "self", ".", "wSL", "*", "s", ")", ".", "squeeze", "(", ")", ",", "(", "self", ".", "wKL", "*", "k", ")", ".", "squeeze", "(", ")", ")", ",", "epsL", ")", "\n", "return", "xG", ",", "xL", ",", "s", ",", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.SensitiveConfounderVarBias._sample_labels": [[298, 304], ["numpy.random.RandomState", "numpy.random.RandomState.normal", "numpy.add", "numpy.add"], "methods", ["None"], ["", "def", "_sample_labels", "(", "self", ",", "xG", ",", "xL", ",", "s", ",", "k", ",", "n", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "6", "*", "seed", ")", "\n", "epsF", "=", "random", ".", "normal", "(", "0", ",", "self", ".", "sigF", "+", "self", ".", "r", "*", "s", ",", "n", ")", "\n", "xF", "=", "self", ".", "muF", "+", "np", ".", "add", "(", "np", ".", "add", "(", "(", "self", ".", "wSF", "*", "s", ")", ".", "squeeze", "(", ")", ",", "(", "self", ".", "wKF", "*", "k", ")", ".", "squeeze", "(", ")", ")", ",", "epsF", ")", "\n", "y", "=", "(", "xF", ">", "self", ".", "threshold", ")", ".", "astype", "(", "int", ")", ".", "squeeze", "(", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.UncalibratedScore.__init__": [[307, 313], ["distributions_syn.GenerativeDistribution.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["def", "__init__", "(", "self", ",", "fraction_protected", ")", ":", "\n", "        ", "super", "(", "UncalibratedScore", ",", "self", ")", ".", "__init__", "(", "fraction_protected", "=", "fraction_protected", ")", "\n", "self", ".", "bound", "=", "0.8", "\n", "self", ".", "width", "=", "30.0", "\n", "self", ".", "height", "=", "3.0", "\n", "self", ".", "shift", "=", "0.1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.UncalibratedScore.feature_dimension": [[314, 317], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "feature_dimension", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.UncalibratedScore._pdf": [[318, 328], ["numpy.tan", "numpy.tan", "numpy.exp", "numpy.tan"], "methods", ["None"], ["", "def", "_pdf", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Get the probability of repayment.\"\"\"", "\n", "num", "=", "(", "\n", "np", ".", "tan", "(", "x", ")", "\n", "+", "np", ".", "tan", "(", "self", ".", "bound", ")", "\n", "+", "self", ".", "height", "\n", "*", "np", ".", "exp", "(", "-", "self", ".", "width", "*", "(", "x", "-", "self", ".", "bound", "-", "self", ".", "shift", ")", "**", "4", ")", "\n", ")", "\n", "den", "=", "2", "*", "np", ".", "tan", "(", "self", ".", "bound", ")", "+", "self", ".", "height", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.UncalibratedScore._sample_features": [[329, 341], ["numpy.random.RandomState", "truncnorm.rvs().reshape", "truncnorm.rvs", "numpy.random.RandomState.rand"], "methods", ["None"], ["", "def", "_sample_features", "(", "self", ",", "n", ",", "fraction_protected", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "\n", "s", "=", "(", "\n", "random", ".", "rand", "(", "n", ",", "1", ")", "<", "fraction_protected", "\n", ")", ".", "astype", "(", "int", ")", "\n", "\n", "shifts", "=", "s", "-", "0.5", "\n", "x", "=", "truncnorm", ".", "rvs", "(", "\n", "-", "self", ".", "bound", "+", "shifts", ",", "self", ".", "bound", "+", "shifts", ",", "loc", "=", "-", "shifts", "\n", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "return", "x", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.UncalibratedScore._sample_labels": [[342, 346], ["numpy.random.RandomState", "distributions_syn.UncalibratedScore._pdf", "numpy.expand_dims", "numpy.random.RandomState.binomial"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.UncalibratedScore._pdf"], ["", "def", "_sample_labels", "(", "self", ",", "x", ",", "s", ",", "n_train", ",", "seed", ")", ":", "\n", "        ", "random", "=", "np", ".", "random", ".", "RandomState", "(", "6", "*", "seed", ")", "\n", "yprob", "=", "self", ".", "_pdf", "(", "x", ")", "\n", "return", "np", ".", "expand_dims", "(", "random", ".", "binomial", "(", "1", ",", "yprob", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.DummyDistribution1D.__init__": [[350, 363], ["object.__init__", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Initialize the true distribution.\n        Args:\n            config: The configuration dictionary.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "type", "=", "\"custom1d\"", "\n", "self", ".", "theta", "=", "np", ".", "array", "(", "config", "[", "\"theta\"", "]", ")", "\n", "self", ".", "feature_dim", "=", "len", "(", "self", ".", "theta", ")", "\n", "if", "\"split_support\"", "not", "in", "config", "[", "\"custom_tweaks\"", "]", ":", "\n", "            ", "self", ".", "threshold", "=", "self", ".", "_threshold", "\n", "", "self", ".", "is_1d", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.DummyDistribution1D.sample_features": [[364, 387], ["numpy.full", "numpy.concatenate", "numpy.hstack", "numpy.full.ravel", "numpy.random.randn", "numpy.random.randn", "numpy.full.reshape", "numpy.ones", "numpy.random.rand"], "methods", ["None"], ["", "def", "sample_features", "(", "self", ",", "n", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Draw examples only for the features of the true distribution.\n        Args:\n            n: The number of examples to draw.\n        Returns:\n            x: np.ndarray with the features of dimension (n, k), where k is\n                either 1 or 2 depending on whether a constant is added\n        \"\"\"", "\n", "if", "self", ".", "config", "[", "\"protected_fraction\"", "]", "is", "not", "None", ":", "\n", "            ", "s", "=", "(", "\n", "np", ".", "random", ".", "rand", "(", "n", ",", "1", ")", "<", "self", ".", "config", "[", "\"protected_fraction\"", "]", "\n", ")", ".", "astype", "(", "int", ")", "\n", "x", "=", "3.5", "*", "np", ".", "random", ".", "randn", "(", "n", ",", "1", ")", "+", "3", "*", "(", "0.5", "-", "s", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "np", ".", "full", "(", "n", ",", "np", ".", "nan", ")", "\n", "x", "=", "3.5", "*", "np", ".", "random", ".", "randn", "(", "n", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "config", "[", "\"protected_as_feature\"", "]", ":", "\n", "            ", "x", "=", "np", ".", "concatenate", "(", "(", "x", ",", "s", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ",", "axis", "=", "1", ")", "\n", "", "if", "self", ".", "config", "[", "\"add_constant\"", "]", ":", "\n", "            ", "x", "=", "np", ".", "hstack", "(", "[", "np", ".", "ones", "(", "[", "n", ",", "1", "]", ")", ",", "x", "]", ")", "\n", "", "return", "x", ",", "s", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.DummyDistribution1D.sample_labels": [[388, 417], ["utils.sigmoid", "numpy.random.binomial", "x.dot", "numpy.maximum", "numpy.maximum", "numpy.exp", "numpy.minimum", "numpy.exp", "numpy.minimum", "utils.sigmoid", "utils.sigmoid", "utils.sigmoid"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid"], ["", "def", "sample_labels", "(", "self", ",", "x", ",", "s", ",", "yproba", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Draw examples of labels for given features.\n        Args:\n            x: Given features (usually obtained by calling `sample_features`).\n            s: Sensitive attribute.\n            yproba: Whether to return the probabilities of the binary labels.\n        Returns:\n            y: np.ndarray of binary (0/1) labels (if `yproba=False`)\n            y, yproba: np.ndarrays of binary (0/1) labels as well as the\n                original probabilities of the labels (if `yproba=False`)\n        \"\"\"", "\n", "yprob", "=", "utils", ".", "sigmoid", "(", "x", ".", "dot", "(", "self", ".", "theta", ")", ")", "\n", "\n", "if", "\"bump_left\"", "in", "self", ".", "config", "[", "\"custom_tweaks\"", "]", ":", "\n", "            ", "yprob", "+=", "np", ".", "exp", "(", "-", "(", "x", "[", ":", ",", "1", "]", "+", "6", ")", "**", "2", "*", "2", ")", "*", "0.5", "\n", "yprob", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "yprob", ",", "1", ")", ",", "0", ")", "\n", "", "if", "\"bump_right\"", "in", "self", ".", "config", "[", "\"custom_tweaks\"", "]", ":", "\n", "            ", "yprob", "-=", "np", ".", "exp", "(", "-", "(", "x", "[", ":", ",", "1", "]", "-", "5", ")", "**", "2", "*", "0.8", ")", "*", "0.35", "\n", "yprob", "=", "np", ".", "maximum", "(", "np", ".", "minimum", "(", "yprob", ",", "1", ")", ",", "0", ")", "\n", "", "if", "\"split_support\"", "in", "self", ".", "config", "[", "\"custom_tweaks\"", "]", ":", "\n", "            ", "yprob", "=", "0.8", "*", "utils", ".", "sigmoid", "(", "0.6", "*", "(", "x", "[", ":", ",", "1", "]", "+", "3", ")", ")", "*", "utils", ".", "sigmoid", "(", "\n", "-", "5", "*", "(", "x", "[", ":", ",", "1", "]", "-", "3", ")", "\n", ")", "+", "utils", ".", "sigmoid", "(", "x", "[", ":", ",", "1", "]", "-", "5", ")", "\n", "\n", "", "y", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "yprob", ")", "\n", "if", "yproba", ":", "\n", "            ", "return", "y", ",", "yprob", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.DummyDistribution1D._threshold": [[418, 426], ["len", "len", "utils.get_threshold", "RuntimeError"], "methods", ["None"], ["", "def", "_threshold", "(", "self", ",", "cost", ")", ":", "\n", "        ", "\"\"\"The threshold for this policy.\"\"\"", "\n", "if", "len", "(", "self", ".", "theta", ")", "==", "1", ":", "\n", "            ", "return", "0.0", "\n", "", "if", "len", "(", "self", ".", "theta", ")", "==", "2", ":", "\n", "            ", "return", "utils", ".", "get_threshold", "(", "self", ".", "theta", ",", "cost", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Scalar threshold exists only for 1D.\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid": [[11, 13], ["numpy.exp"], "function", ["None"], ["def", "sigmoid", "(", "x", ",", "k", "=", "0", ",", "r", "=", "1", ")", ":", "\n", "    ", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "r", "*", "(", "-", "x", "-", "k", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.BaseScaler.__init__": [[14, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "likelihood", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "likelihood", "=", "likelihood", "# TODO get with name list", "\n", "self", ".", "verbose", "=", "verbose", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.BaseScaler.fit_single": [[18, 20], ["None"], "methods", ["None"], ["", "def", "fit_single", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.BaseScaler.fit": [[21, 43], ["torch.ones_like", "torch.empty_like", "range", "torch.isnan", "scaler.BaseScaler.fit_single", "sum", "torch.masked_select", "print"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.fit_single"], ["", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "        ", "pos", "=", "0", "\n", "for", "d", "in", "self", ".", "likelihood", ":", "\n", "            ", "if", "not", "d", ".", "is_discrete", ":", "\n", "# Reset the scale and preprocess (to account for things like dequantization)", "\n", "                ", "d", ".", "scale", "=", "torch", ".", "ones_like", "(", "d", ".", "scale", ")", "\n", "data_d", "=", "d", ">>", "data", "[", "...", ",", "pos", ":", "pos", "+", "d", ".", "domain_size", "]", "\n", "\n", "scale_d", "=", "torch", ".", "empty_like", "(", "d", ".", "scale", ")", "\n", "for", "i", "in", "range", "(", "d", ".", "domain_size", ")", ":", "\n", "                    ", "data_di", "=", "data_d", "[", "...", ",", "i", "]", "\n", "nans", "=", "torch", ".", "isnan", "(", "data_di", ")", "\n", "if", "sum", "(", "nans", ")", ">", "0", ":", "\n", "                        ", "data_di", "=", "torch", ".", "masked_select", "(", "data_di", ",", "~", "nans", ")", "\n", "\n", "", "scale_d", "[", "i", "]", "=", "self", ".", "fit_single", "(", "data_di", ")", "\n", "if", "self", ".", "verbose", ":", "\n", "                        ", "print", "(", "f'[x_{pos+i}] scale={scale_d[i]:.2f}'", ")", "\n", "", "", "d", ".", "scale", "=", "scale_d", "\n", "", "pos", "+=", "d", ".", "domain_size", "\n", "\n", "", "return", "self", ".", "likelihood", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.DummyScaler.fit_single": [[46, 48], ["None"], "methods", ["None"], ["    ", "def", "fit_single", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.StandardScaler.fit_single": [[51, 53], ["data.std().item", "data.std"], "methods", ["None"], ["    ", "def", "fit_single", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "1.", "/", "data", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.NormalizationScaler.fit_single": [[56, 58], ["data.abs().max().item", "data.abs().max", "data.abs"], "methods", ["None"], ["    ", "def", "fit_single", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "1.", "/", "data", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.InterquartileScaler.fit_single": [[61, 63], ["float", "sklearn.preprocessing.RobustScaler().fit", "data.unsqueeze", "sklearn.preprocessing.RobustScaler"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.fit"], ["    ", "def", "fit_single", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "1.", "/", "float", "(", "RobustScaler", "(", "with_centering", "=", "False", ")", ".", "fit", "(", "data", ".", "unsqueeze", "(", "1", ")", ")", ".", "scale_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.__init__": [[66, 69], ["scaler.BaseScaler.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "likelihood", ",", "goal_smoothness", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "super", "(", "LipschitzScaler", ",", "self", ")", ".", "__init__", "(", "likelihood", ",", "verbose", ")", "\n", "self", ".", "goal", "=", "float", "(", "goal_smoothness", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.fit_single": [[70, 99], ["torch.tensor", "scipy.optimize.minimize_scalar", "torch.tensor().exp", "old_scales.size", "torch.tensor().float().exp", "dist.compute_lipschitz", "print", "torch.tensor", "dist.compute_lipschitz", "torch.tensor().float", "sum().item", "sum().item", "torch.tensor", "sum", "type", "sum"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.compute_lipschitz", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.compute_lipschitz"], ["", "def", "fit_single", "(", "self", ",", "dist", ",", "data", ",", "goal", ",", "index", ")", ":", "\n", "        ", "if", "dist", ".", "is_discrete", ":", "\n", "            ", "return", "\n", "\n", "", "hessian", "=", "None", "\n", "\n", "old_scales", "=", "dist", ".", "_scale", "\n", "dist", ".", "_scale", "=", "torch", ".", "tensor", "(", "[", "1.", "]", ",", "device", "=", "old_scales", ".", "device", ")", "\n", "dist", ".", "_domain_size", "=", "1", "\n", "\n", "def", "step", "(", "omega", ")", ":", "\n", "            ", "nonlocal", "hessian", "\n", "dist", ".", "scale", "=", "torch", ".", "tensor", "(", "omega", ")", ".", "float", "(", ")", ".", "exp", "(", ")", "\n", "lipschitz", ",", "hessian", "=", "dist", ".", "compute_lipschitz", "(", "data", ",", "hessian", ")", "\n", "r", "=", "(", "sum", "(", "lipschitz", ")", ".", "item", "(", ")", "-", "goal", ")", "**", "2", "\n", "# print('***', sum(lipschitz).item())", "\n", "return", "r", "\n", "\n", "", "result", "=", "minimize_scalar", "(", "step", ",", "method", "=", "'brent'", ",", "options", "=", "{", "'xtol'", ":", "1e-10", "}", ")", "\n", "assert", "result", ".", "success", "\n", "scale", "=", "torch", ".", "tensor", "(", "result", ".", "x", ")", ".", "exp", "(", ")", "\n", "\n", "dist", ".", "_domain_size", "=", "old_scales", ".", "size", "(", "-", "1", ")", "\n", "dist", ".", "scale", "=", "old_scales", "\n", "dist", ".", "scale", "[", "index", "]", "=", "scale", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "l", "=", "dist", ".", "compute_lipschitz", "(", "data", ")", "[", "0", "]", "\n", "print", "(", "f'[{type(dist).__name__}] scale={scale:.2f} Lipschitz={sum(l).item():.2f} (goal was {goal:.2f})'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.scaler.LipschitzScaler.fit": [[103, 130], ["sum", "scaler.LipschitzScaler.fit.fit_recursive"], "methods", ["None"], ["", "", "def", "fit", "(", "self", ",", "data", ")", ":", "\n", "        ", "def", "fit_recursive", "(", "dists", ",", "data", ",", "goal", ")", ":", "\n", "            ", "if", "isinstance", "(", "dists", ",", "LikelihoodFlatten", ")", ":", "\n", "                ", "old_value", "=", "dists", ".", "flatten", "\n", "dists", ".", "flatten", "=", "False", "\n", "\n", "", "pos", "=", "0", "\n", "for", "d", "in", "dists", ":", "\n", "                ", "if", "isinstance", "(", "d", ",", "LikelihoodList", ")", "and", "not", "d", ".", "is_discrete", ":", "\n", "                    ", "num_dists", "=", "sum", "(", "[", "1", "for", "x", "in", "d", "if", "not", "x", ".", "is_discrete", "]", ")", "\n", "fit_recursive", "(", "d", ",", "data", "[", "...", ",", "pos", ":", "pos", "+", "d", ".", "domain_size", "]", ",", "goal", "/", "num_dists", ")", "\n", "", "else", ":", "\n", "                    ", "for", "i", "in", "range", "(", "d", ".", "domain_size", ")", ":", "\n", "                        ", "data_di", "=", "data", "[", "...", ",", "pos", "+", "i", "]", "\n", "nans", "=", "torch", ".", "isnan", "(", "data_di", ")", "\n", "if", "sum", "(", "nans", ")", ">", "0", ":", "\n", "                            ", "data_di", "=", "torch", ".", "masked_select", "(", "data_di", ",", "~", "nans", ")", "\n", "\n", "", "self", ".", "fit_single", "(", "d", ",", "data_di", ",", "goal", ",", "index", "=", "i", ")", "\n", "", "", "pos", "+=", "d", ".", "domain_size", "\n", "\n", "", "if", "isinstance", "(", "dists", ",", "LikelihoodFlatten", ")", ":", "\n", "                ", "dists", ".", "flatten", "=", "old_value", "\n", "\n", "", "", "num_dists", "=", "sum", "(", "[", "1", "for", "d", "in", "self", ".", "likelihood", "if", "not", "d", ".", "is_discrete", "]", ")", "\n", "fit_recursive", "(", "self", ".", "likelihood", ",", "data", ",", "self", ".", "goal", "/", "num_dists", ")", "\n", "return", "self", ".", "likelihood", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.MetaClass.__init__": [[8, 22], ["type.__init__", "set", "dir", "getattr", "name.startswith", "cls.__ignore__.split", "setattr", "property", "utils.MetaClass.__init__.make_proxy"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "cls", ",", "name", ",", "bases", ",", "dct", ")", ":", "\n", "\n", "        ", "def", "make_proxy", "(", "name", ")", ":", "\n", "            ", "def", "proxy", "(", "self", ",", "*", "args", ")", ":", "\n", "                ", "return", "getattr", "(", "self", ".", "_obj", ",", "name", ")", "\n", "", "return", "proxy", "\n", "\n", "", "type", ".", "__init__", "(", "cls", ",", "name", ",", "bases", ",", "dct", ")", "\n", "if", "cls", ".", "__wraps__", ":", "\n", "            ", "ignore", "=", "set", "(", "\"__%s__\"", "%", "n", "for", "n", "in", "cls", ".", "__ignore__", ".", "split", "(", ")", ")", "\n", "for", "name", "in", "dir", "(", "cls", ".", "__wraps__", ")", ":", "\n", "                ", "if", "name", ".", "startswith", "(", "\"__\"", ")", ":", "\n", "                    ", "if", "name", "not", "in", "ignore", "and", "name", "not", "in", "dct", ":", "\n", "                        ", "setattr", "(", "cls", ",", "name", ",", "property", "(", "make_proxy", "(", "name", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.Wrapper.__init__": [[31, 38], ["TypeError", "isinstance", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "self", ".", "__wraps__", "is", "None", ":", "\n", "            ", "raise", "TypeError", "(", "\"base class Wrapper may not be instantiated\"", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "self", ".", "__wraps__", ")", ":", "\n", "            ", "self", ".", "_obj", "=", "obj", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"wrapped object must be of %s\"", "%", "self", ".", "__wraps__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.Wrapper.__getattr__": [[40, 42], ["getattr"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_obj", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.to_one_hot": [[44, 49], ["x.new_zeros", "x.new_zeros.scatter_().float", "x.size", "x.new_zeros.scatter_", "x.unsqueeze().long", "x.unsqueeze"], "function", ["None"], ["", "", "def", "to_one_hot", "(", "x", ",", "size", ")", ":", "\n", "    ", "x_one_hot", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "size", ")", "\n", "x_one_hot", ".", "scatter_", "(", "1", ",", "x", ".", "unsqueeze", "(", "-", "1", ")", ".", "long", "(", ")", ",", "1", ")", ".", "float", "(", ")", "\n", "\n", "return", "x_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten": [[51, 57], ["isinstance", "isinstance", "torch.is_tensor", "utils.flatten"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten"], ["", "def", "flatten", "(", "l", ")", ":", "\n", "    ", "for", "el", "in", "l", ":", "\n", "        ", "if", "isinstance", "(", "el", ",", "Iterable", ")", "and", "not", "isinstance", "(", "el", ",", "(", "str", ",", "bytes", ")", ")", "and", "not", "torch", ".", "is_tensor", "(", "el", ")", ":", "\n", "            ", "yield", "from", "flatten", "(", "el", ")", "\n", "", "else", ":", "\n", "            ", "yield", "el", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood._ensure_params": [[107, 121], ["list", "torch.distributions.utils.broadcast_all", "func", "len", "utils.flatten", "len", "likelihoods.ensure", "zip"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ensure"], ["def", "_ensure_params", "(", "self", ",", "func", ")", ":", "\n", "        ", "def", "_ensure_params_", "(", "*", "params", ")", ":", "\n", "            ", "assert", "len", "(", "params", ")", "==", "self", ".", "num_params", ",", "f'{len(params)} v.s. {self.num_params} {self}'", "\n", "params", "=", "list", "(", "flatten", "(", "params", ")", ")", "\n", "new_params", "=", "broadcast_all", "(", "*", "params", ")", "\n", "self", ".", "_counter", "+=", "1", "\n", "\n", "if", "self", ".", "_counter", "==", "1", "and", "self", ".", "ensure_args", ":", "\n", "                ", "new_params", "=", "[", "ensure", "(", "x", ",", "c", ")", "for", "x", ",", "c", "in", "zip", "(", "new_params", ",", "self", ".", "arg_constraints", ")", "]", "\n", "\n", "", "result", "=", "func", "(", "*", "new_params", ")", "\n", "self", ".", "_counter", "-=", "1", "\n", "return", "result", "\n", "", "return", "_ensure_params_", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.__init__": [[122, 135], ["torch.nn.Module.__init__", "likelihoods.BaseLikelihood.register_buffer", "likelihoods.BaseLikelihood._ensure_params", "likelihoods.BaseLikelihood._ensure_params", "likelihoods.BaseLikelihood._ensure_params", "likelihoods.BaseLikelihood._ensure_params", "likelihoods.BaseLikelihood._ensure_params", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList._ensure_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList._ensure_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList._ensure_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList._ensure_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList._ensure_params"], ["", "def", "__init__", "(", "self", ",", "*", ",", "domain_size", "=", "1", ",", "ensure_args", "=", "True", ")", ":", "\n", "        ", "super", "(", "BaseLikelihood", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_domain_size", "=", "domain_size", "\n", "# self._scale = torch.ones([domain_size])", "\n", "self", ".", "register_buffer", "(", "'_scale'", ",", "torch", ".", "ones", "(", "[", "domain_size", "]", ")", ")", "\n", "self", ".", "ensure_args", "=", "ensure_args", "\n", "\n", "self", ".", "_counter", "=", "0", "\n", "self", ".", "transform_params", "=", "self", ".", "_ensure_params", "(", "self", ".", "transform_params", ")", "\n", "self", ".", "inverse_transform_params", "=", "self", ".", "_ensure_params", "(", "self", ".", "inverse_transform_params", ")", "\n", "self", ".", "canonical_params", "=", "self", ".", "_ensure_params", "(", "self", ".", "canonical_params", ")", "\n", "self", ".", "instantiate", "=", "self", ".", "_ensure_params", "(", "self", ".", "instantiate", ")", "\n", "self", ".", "get_params", "=", "self", ".", "_ensure_params", "(", "self", ".", "get_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.dist": [[136, 139], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.num_params": [[140, 143], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_params", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "arg_constraints", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.domain_size": [[144, 147], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "domain_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_domain_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.scale": [[155, 164], ["torch.tensor.size", "torch.tensor.size", "torch.Size", "torch.ones_like", "torch.is_tensor", "torch.tensor", "torch.is_tensor", "torch.tensor.numel"], "methods", ["None"], ["", "@", "scale", ".", "setter", "\n", "def", "scale", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "(", "not", "torch", ".", "is_tensor", "(", "value", ")", "or", "value", ".", "numel", "(", ")", "==", "1", ")", "and", "self", ".", "domain_size", "==", "1", ":", "\n", "            ", "value", "=", "torch", ".", "ones_like", "(", "self", ".", "scale", ")", "*", "value", "\n", "", "elif", "not", "torch", ".", "is_tensor", "(", "value", ")", ":", "\n", "            ", "value", "=", "torch", ".", "tensor", "(", "value", ")", "# e.g. numpy tensor", "\n", "\n", "", "assert", "value", ".", "size", "(", ")", "==", "torch", ".", "Size", "(", "[", "self", ".", "domain_size", "]", ")", ",", "value", ".", "size", "(", ")", "\n", "self", ".", "_scale", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.transform_data": [[165, 167], ["None"], "methods", ["None"], ["", "def", "transform_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "*", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.inverse_transform_data": [[168, 170], ["None"], "methods", ["None"], ["", "def", "inverse_transform_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "/", "self", ".", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.transform_params": [[171, 173], ["None"], "methods", ["None"], ["", "def", "transform_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.inverse_transform_params": [[174, 176], ["None"], "methods", ["None"], ["", "def", "inverse_transform_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.get_params": [[177, 179], ["None"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.instantiate": [[180, 211], ["likelihoods.BaseLikelihood.dist", "functools.wraps", "likelihoods.BaseLikelihood.inverse_transform_params", "likelihoods.BaseLikelihood.instantiate.scale_input"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.inverse_transform_params"], ["", "def", "instantiate", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "def", "scale_input", "(", "func", ")", ":", "\n", "            ", "@", "wraps", "(", "func", ")", "\n", "def", "scale_input_", "(", "*", "args", ",", "**", "kwargs", ")", ":", "# TODO Fix aliasing", "\n", "                ", "if", "len", "(", "args", ")", ">", "0", ":", "\n", "                    ", "args", "=", "list", "(", "args", ")", "\n", "value", "=", "args", ".", "pop", "(", "0", ")", "\n", "value", "=", "self", ".", "transform_data", "(", "value", ")", "\n", "return", "func", "(", "value", ",", "*", "args", "[", "1", ":", "]", ",", "**", "kwargs", ")", "\n", "", "elif", "len", "(", "kwargs", ")", "==", "1", ":", "\n", "                    ", "key", "=", "next", "(", "iter", "(", "kwargs", ")", ")", "\n", "value", "=", "kwargs", ".", "pop", "(", "key", ")", "\n", "value", "=", "self", ".", "transform_data", "(", "value", ")", "\n", "return", "func", "(", "**", "{", "key", ":", "value", "}", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "\n", "\n", "", "", "return", "scale_input_", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "params", "=", "self", ".", "inverse_transform_params", "(", "*", "params", ")", "\n", "\n", "", "instance", "=", "self", ".", "dist", "(", "**", "self", ".", "canonical_params", "(", "*", "params", ")", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# Decorate the functions so it transparently scales the data", "\n", "            ", "instance", ".", "log_prob", "=", "scale_input", "(", "instance", ".", "log_prob", ")", "\n", "instance", ".", "cdf", "=", "scale_input", "(", "instance", ".", "cdf", ")", "\n", "instance", ".", "icdf", "=", "scale_input", "(", "instance", ".", "icdf", ")", "\n", "\n", "", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.canonical_params": [[212, 214], ["None"], "methods", ["None"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.canonical_constraints": [[215, 218], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "canonical_constraints", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dist", ".", "arg_constraints", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.compute_hessian": [[219, 221], ["None"], "methods", ["None"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.compute_lipschitz": [[222, 224], ["None"], "methods", ["None"], ["", "def", "compute_lipschitz", "(", "self", ",", "data", ",", "original_hessian", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.__call__": [[225, 227], ["likelihoods.BaseLikelihood.instantiate"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.instantiate"], ["", "def", "__call__", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "return", "self", ".", "instantiate", "(", "*", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.__len__": [[228, 230], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.__getitem__": [[231, 234], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "assert", "item", "==", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.__rshift__": [[235, 237], ["likelihoods.BaseLikelihood.transform_data"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.transform_data"], ["", "def", "__rshift__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "transform_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.__lshift__": [[238, 240], ["likelihoods.BaseLikelihood.inverse_transform_data"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.inverse_transform_data"], ["", "def", "__lshift__", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "inverse_transform_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BaseLikelihood.InputScaler": [[241, 253], ["DataScaler", "torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["", "@", "property", "\n", "def", "InputScaler", "(", "self", ")", ":", "\n", "        ", "class", "DataScaler", "(", "nn", ".", "Module", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "obj", ")", ":", "\n", "                ", "super", "(", "DataScaler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "obj", "=", "obj", "\n", "\n", "", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "                ", "return", "self", ".", "obj", ">>", "data", "\n", "\n", "", "", "return", "DataScaler", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList._ensure_params": [[278, 282], ["func"], "methods", ["None"], ["    ", "def", "_ensure_params", "(", "self", ",", "func", ")", ":", "\n", "        ", "def", "_ensure_params_", "(", "*", "params", ")", ":", "\n", "            ", "return", "func", "(", "*", "params", ")", "\n", "", "return", "_ensure_params_", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.__init__": [[283, 297], ["all", "sum", "likelihoods.BaseLikelihood.__init__", "torch.nn.ModuleList", "len", "len", "isinstance", "isinstance", "type", "type"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["", "def", "__init__", "(", "self", ",", "*", "dist_list", ",", "ensure_args", "=", "True", ")", ":", "\n", "        ", "assert", "len", "(", "dist_list", ")", ">", "0", ",", "f'Nothing passed to {type(self).__name__}!'", "\n", "\n", "if", "len", "(", "dist_list", ")", "==", "1", "and", "not", "isinstance", "(", "dist_list", "[", "0", "]", ",", "BaseLikelihood", ")", ":", "\n", "            ", "dist_list", "=", "dist_list", "[", "0", "]", "\n", "", "assert", "all", "(", "[", "isinstance", "(", "d", ",", "BaseLikelihood", ")", "for", "d", "in", "dist_list", "]", ")", ",", "f'Passed a non-distribution to '", "f'{type(self).__name__}'", "\n", "\n", "self", ".", "arg_constraints", "=", "sum", "(", "[", "d", ".", "arg_constraints", "for", "d", "in", "dist_list", "]", ",", "[", "]", ")", "\n", "\n", "super", "(", "LikelihoodList", ",", "self", ")", ".", "__init__", "(", "ensure_args", "=", "ensure_args", ")", "\n", "self", ".", "dist_list", "=", "torch", ".", "nn", ".", "ModuleList", "(", "dist_list", ")", "\n", "\n", "del", "self", ".", "_scale", "# Ensure we do not use it", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.dist": [[298, 301], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.is_discrete": [[302, 305], ["all"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_discrete", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "[", "d", ".", "is_discrete", "for", "d", "in", "self", "]", ")", "# This may change in runtime", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.domain_size": [[306, 309], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "domain_size", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "d", ".", "domain_size", "for", "d", "in", "self", "]", ")", "# This may change in runtime", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.canonical_constraints": [[310, 313], ["utils.flatten"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.flatten"], ["", "@", "property", "\n", "def", "canonical_constraints", "(", "self", ")", ":", "\n", "        ", "return", "flatten", "(", "[", "d", ".", "canonical_constraints", "for", "d", "in", "self", ".", "dist_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.scale": [[314, 317], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale", "(", "self", ")", ":", "# It is intended to not set up the setter method", "\n", "        ", "return", "[", "d", ".", "scale", "for", "d", "in", "self", ".", "dist_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.transform_data": [[318, 321], ["likelihoods._apply"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods._apply"], ["", "@", "_apply", "(", "lambda", "d", ":", "d", ".", "domain_size", ",", "as_tensor", "=", "True", ")", "\n", "def", "transform_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.inverse_transform_data": [[322, 325], ["likelihoods._apply"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods._apply"], ["", "@", "_apply", "(", "lambda", "d", ":", "d", ".", "domain_size", ",", "as_tensor", "=", "True", ")", "\n", "def", "inverse_transform_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.transform_params": [[326, 329], ["likelihoods._apply"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods._apply"], ["", "@", "_apply", "(", "lambda", "d", ":", "d", ".", "num_params", ",", "as_tensor", "=", "False", ")", "\n", "def", "transform_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.inverse_transform_params": [[330, 333], ["likelihoods._apply"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods._apply"], ["", "@", "_apply", "(", "lambda", "d", ":", "d", ".", "num_params", ",", "as_tensor", "=", "False", ")", "\n", "def", "inverse_transform_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.canonical_params": [[334, 337], ["likelihoods._apply"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods._apply"], ["", "@", "_apply", "(", "lambda", "d", ":", "d", ".", "num_params", ",", "as_tensor", "=", "False", ")", "\n", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.instantiate": [[338, 402], ["ListWrapper", "new_value.append", "d.instantiate", "super().__getattr__", "zip", "kwargs.pop", "torch.is_tensor", "torch.cat", "len", "callable", "torch.is_tensor", "list", "list.pop", "torch.cat.append", "getattr", "callable", "isinstance", "torch.cat.append", "len", "getattr", "apply"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.instantiate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.Wrapper.__getattr__"], ["", "def", "instantiate", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "from", ".", "utils", "import", "Wrapper", "\n", "\n", "class", "ListWrapper", "(", "Wrapper", ")", ":", "\n", "            ", "__wraps__", "=", "list", "\n", "__parent__", "=", "self", "\n", "\n", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "                ", "def", "apply", "(", "func_name", ")", ":", "\n", "                    ", "def", "apply_", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                        ", "value", "=", "None", "\n", "if", "'value'", "in", "kwargs", ":", "\n", "                            ", "value", "=", "kwargs", ".", "pop", "(", "'value'", ")", "\n", "", "elif", "len", "(", "args", ")", ">", "0", "and", "torch", ".", "is_tensor", "(", "args", "[", "0", "]", ")", ":", "\n", "                            ", "args", "=", "list", "(", "args", ")", "\n", "value", "=", "args", ".", "pop", "(", "0", ")", "\n", "\n", "", "result", ",", "pos", "=", "[", "]", ",", "0", "\n", "for", "d", ",", "l", "in", "zip", "(", "self", ",", "self", ".", "__parent__", ")", ":", "\n", "                            ", "if", "value", "is", "not", "None", ":", "\n", "                                ", "size", "=", "l", ".", "domain_size", "\n", "\n", "value_d", "=", "value", "[", "...", ",", "pos", ":", "pos", "+", "size", "]", "\n", "result_d", "=", "getattr", "(", "d", ",", "func_name", ")", "(", "*", "args", ",", "value", "=", "value_d", ".", "squeeze", "(", "dim", "=", "-", "1", ")", ",", "**", "kwargs", ")", "\n", "if", "item", "==", "'log_prob'", "and", "isinstance", "(", "d", ",", "dist", ".", "Distribution", ")", ":", "# special case", "\n", "                                    ", "result_d", "=", "result_d", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "", "result", ".", "append", "(", "result_d", ")", "\n", "pos", "+=", "size", "\n", "", "else", ":", "\n", "                                ", "result_d", "=", "getattr", "(", "d", ",", "func_name", ")", "\n", "if", "callable", "(", "result_d", ")", ":", "\n", "                                    ", "result_d", "=", "result_d", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# special cases", "\n", "", "if", "isinstance", "(", "d", ",", "dist", ".", "Distribution", ")", ":", "\n", "                                    ", "if", "d", ".", "event_shape", "==", "torch", ".", "Size", "(", "[", "]", ")", "and", "item", "in", "[", "'sample'", ",", "'mean'", "]", ":", "\n", "                                        ", "result_d", "=", "result_d", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "", "if", "item", "in", "[", "'entropy'", "]", ":", "# special cases", "\n", "                                        ", "result_d", "=", "result_d", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "result", ".", "append", "(", "result_d", ")", "\n", "\n", "", "", "if", "len", "(", "result", ")", ">", "0", "and", "torch", ".", "is_tensor", "(", "result", "[", "0", "]", ")", ":", "\n", "                            ", "result", "=", "torch", ".", "cat", "(", "[", "x", ".", "float", "(", ")", "for", "x", "in", "result", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "result", "\n", "", "return", "apply_", "\n", "\n", "", "try", ":", "\n", "                    ", "return", "super", "(", "ListWrapper", ",", "self", ")", ".", "__getattr__", "(", "item", ")", "\n", "", "except", "AttributeError", "as", "e", ":", "\n", "                    ", "if", "len", "(", "self", ")", ">", "0", ":", "\n", "                        ", "if", "callable", "(", "getattr", "(", "self", "[", "0", "]", ",", "item", ",", "None", ")", ")", ":", "\n", "                            ", "return", "apply", "(", "item", ")", "\n", "", "else", ":", "\n", "                            ", "return", "property", "(", "apply", "(", "item", ")", ")", ".", "__get__", "(", "self", ")", "\n", "\n", "", "", "raise", "e", "\n", "\n", "", "", "", "new_value", ",", "pos", "=", "[", "]", ",", "0", "\n", "for", "d", "in", "self", ".", "dist_list", ":", "\n", "            ", "new_value", ".", "append", "(", "d", ".", "instantiate", "(", "*", "params", "[", "pos", ":", "pos", "+", "d", ".", "num_params", "]", ")", ")", "\n", "pos", "+=", "d", ".", "num_params", "\n", "", "return", "ListWrapper", "(", "new_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.compute_hessian": [[403, 405], ["None"], "methods", ["None"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.compute_lipschitz": [[406, 408], ["None"], "methods", ["None"], ["", "def", "compute_lipschitz", "(", "self", ",", "data", ",", "original_hessian", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.__len__": [[409, 411], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dist_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.__getitem__": [[412, 414], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "dist_list", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodList.__str__": [[415, 417], ["str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "', '", ".", "join", "(", "[", "str", "(", "d", ")", "for", "d", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodFlatten.__init__": [[420, 433], ["likelihoods.LikelihoodList.__init__", "likelihoods.LikelihoodFlatten.__init__.build_index"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "dist_list", ",", "ensure_args", "=", "True", ")", ":", "\n", "        ", "super", "(", "LikelihoodFlatten", ",", "self", ")", ".", "__init__", "(", "*", "dist_list", ",", "ensure_args", "=", "ensure_args", ")", "\n", "self", ".", "flatten", "=", "True", "\n", "\n", "def", "build_index", "(", "dist_list", ",", "prefix", "=", "tuple", "(", ")", ")", ":", "\n", "            ", "index", "=", "[", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "dist_list", ")", ":", "\n", "                ", "if", "not", "isinstance", "(", "d", ",", "LikelihoodList", ")", ":", "\n", "                    ", "index", ".", "append", "(", "prefix", "+", "(", "i", ",", ")", ")", "\n", "", "else", ":", "\n", "                    ", "index", "+=", "build_index", "(", "d", ",", "prefix", "+", "(", "i", ",", ")", ")", "\n", "", "", "return", "index", "\n", "", "self", ".", "indexes", "=", "build_index", "(", "list", "(", "dist_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodFlatten.__len__": [[434, 436], ["len", "likelihoods.LikelihoodList.__len__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodFlatten.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indexes", ")", "if", "self", ".", "training", "and", "self", ".", "flatten", "else", "super", "(", ")", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodFlatten.__getitem__": [[437, 445], ["likelihoods.LikelihoodList.__getitem__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LikelihoodFlatten.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", "or", "not", "self", ".", "flatten", ":", "\n", "            ", "return", "super", "(", ")", ".", "__getitem__", "(", "item", ")", "\n", "\n", "", "result", "=", "self", "\n", "for", "index", "in", "self", ".", "indexes", "[", "item", "]", ":", "\n", "            ", "result", "=", "result", ".", "dist_list", "[", "index", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.dist": [[448, 451], ["type"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.canonical_params": [[452, 454], ["None"], "methods", ["None"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.scale_factors": [[455, 458], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_factors", "(", "self", ")", ":", "# TODO", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.params_from_data": [[459, 461], ["None"], "methods", ["None"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.transform_params": [[462, 467], ["zip", "new_params.append", "f"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.f"], ["", "def", "transform_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "new_params", "=", "[", "]", "\n", "for", "p", ",", "f", "in", "zip", "(", "params", ",", "self", ".", "scale_factors", ")", ":", "\n", "            ", "new_params", ".", "append", "(", "p", "/", "f", "(", "self", ".", "scale", ")", ")", "\n", "", "return", "new_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.inverse_transform_params": [[468, 473], ["zip", "new_params.append", "f"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalGammaTrick.f"], ["", "def", "inverse_transform_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "new_params", "=", "[", "]", "\n", "for", "p", ",", "f", "in", "zip", "(", "params", ",", "self", ".", "scale_factors", ")", ":", "\n", "            ", "new_params", ".", "append", "(", "p", "*", "f", "(", "self", ".", "scale", ")", ")", "\n", "", "return", "new_params", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.compute_hessian": [[474, 493], ["likelihoods.ExponentialFamily.params_from_data", "torch.stack", "likelihoods.ExponentialFamily.log_prob().mean", "grad", "hessian_rows.append", "likelihoods.ExponentialFamily.log_prob", "grad", "row_i.detach", "likelihoods.ExponentialFamily."], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "from", "torch", ".", "autograd", "import", "grad", "\n", "old_value", "=", "self", ".", "ensure_args", "\n", "self", ".", "ensure_args", "=", "False", "\n", "\n", "params", "=", "self", ".", "params_from_data", "(", "self", ">>", "data", ")", "\n", "params", "=", "torch", ".", "stack", "(", "params", ")", "\n", "params", ".", "requires_grad", "=", "True", "\n", "\n", "log_prob", "=", "self", "(", "*", "params", ")", ".", "log_prob", "(", "data", ")", ".", "mean", "(", ")", "# for the exponential family", "\n", "jacobian", "=", "grad", "(", "log_prob", ",", "params", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "hessian_rows", "=", "[", "]", "\n", "for", "jac_i", "in", "jacobian", ":", "\n", "            ", "row_i", "=", "grad", "(", "jac_i", ",", "params", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "False", ")", "[", "0", "]", "\n", "hessian_rows", ".", "append", "(", "row_i", ".", "detach", "(", ")", ")", "\n", "\n", "", "self", ".", "ensure_args", "=", "old_value", "\n", "return", "hessian_rows", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.compute_lipschitz": [[494, 509], ["likelihoods.ExponentialFamily.compute_hessian", "enumerate", "x.norm", "torch.empty", "enumerate", "lipschitzs.append", "f_j", "abs", "torch.empty.norm", "f_i"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.compute_hessian"], ["", "def", "compute_lipschitz", "(", "self", ",", "data", ",", "original_hessian", "=", "None", ")", ":", "\n", "        ", "if", "original_hessian", "is", "None", ":", "\n", "            ", "original_hessian", "=", "self", ".", "compute_hessian", "(", "data", ")", "\n", "lipschitzs", "=", "[", "x", ".", "norm", "(", "p", "=", "2", ")", "for", "x", "in", "original_hessian", "]", "\n", "", "else", ":", "\n", "            ", "lipschitzs", "=", "[", "]", "\n", "for", "i", ",", "f_i", "in", "enumerate", "(", "self", ".", "scale_factors", ")", ":", "\n", "                ", "row_i", "=", "torch", ".", "empty", "(", "self", ".", "num_params", ")", "\n", "\n", "for", "j", ",", "f_j", "in", "enumerate", "(", "self", ".", "scale_factors", ")", ":", "\n", "                    ", "row_i", "[", "j", "]", "=", "original_hessian", "[", "i", "]", "[", "j", "]", "*", "f_j", "(", "self", ".", "scale", ")", "\n", "\n", "", "lipschitzs", ".", "append", "(", "abs", "(", "f_i", "(", "self", ".", "scale", ")", ")", "*", "row_i", ".", "norm", "(", "p", "=", "2", ")", ")", "\n", "\n", "", "", "return", "lipschitzs", ",", "original_hessian", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Normal.dist": [[519, 522], ["type"], "methods", ["None"], ["@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "return", "dist", ".", "Normal", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Normal.canonical_params": [[523, 526], ["torch.sqrt"], "methods", ["None"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "eta1", ",", "eta2", "=", "params", "\n", "return", "{", "'loc'", ":", "-", "0.5", "*", "eta1", "/", "eta2", ",", "'scale'", ":", "torch", ".", "sqrt", "(", "-", "0.5", "/", "eta2", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Normal.scale_factors": [[527, 530], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_factors", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "w", ",", "lambda", "w", ":", "w", "**", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Normal.params_from_data": [[531, 538], ["x.mean", "x.std"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "loc", ",", "std", "=", "x", ".", "mean", "(", ")", ",", "x", ".", "std", "(", ")", "\n", "\n", "eta2", "=", "-", "0.5", "/", "std", "**", "2", "\n", "eta1", "=", "-", "2", "*", "loc", "*", "eta2", "\n", "\n", "return", "eta1", ",", "eta2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Normal.compute_hessian": [[539, 551], ["likelihoods.Normal.params_from_data", "likelihoods.Normal.canonical_params", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "old_value", "=", "self", ".", "ensure_args", "\n", "self", ".", "ensure_args", "=", "False", "\n", "\n", "params", "=", "self", ".", "params_from_data", "(", "self", ">>", "data", ")", "\n", "params", "=", "self", ".", "canonical_params", "(", "*", "params", ")", "\n", "\n", "row_1", "=", "torch", ".", "tensor", "(", "[", "-", "params", "[", "'scale'", "]", "**", "2", ",", "-", "2", "*", "params", "[", "'loc'", "]", "*", "params", "[", "'scale'", "]", "**", "2", "]", ")", "\n", "row_2", "=", "torch", ".", "tensor", "(", "[", "row_1", "[", "1", "]", ",", "-", "2", "*", "params", "[", "'scale'", "]", "**", "2", "*", "(", "params", "[", "'scale'", "]", "**", "2", "+", "params", "[", "'loc'", "]", "**", "2", ")", "]", ")", "\n", "\n", "self", ".", "ensure_args", "=", "old_value", "\n", "return", "row_1", ",", "row_2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Normal.__str__": [[552, 554], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'normal'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LogNormal.dist": [[557, 560], ["type"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "return", "dist", ".", "LogNormal", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LogNormal.transform_data": [[561, 563], ["torch.clamp", "torch.pow"], "methods", ["None"], ["", "def", "transform_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "torch", ".", "pow", "(", "x", ",", "self", ".", "scale", ")", ",", "min", "=", "1e-15", ")", "# To ensure that it is positive", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LogNormal.inverse_transform_data": [[564, 566], ["torch.pow"], "methods", ["None"], ["", "def", "inverse_transform_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "pow", "(", "x", ",", "1.", "/", "self", ".", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LogNormal.params_from_data": [[567, 569], ["likelihoods.Normal.params_from_data", "torch.log"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "super", "(", "LogNormal", ",", "self", ")", ".", "params_from_data", "(", "torch", ".", "log", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.LogNormal.__str__": [[570, 572], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'log-normal'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Gamma.dist": [[580, 583], ["type"], "methods", ["None"], ["@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "return", "dist", ".", "Gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Gamma.canonical_params": [[584, 588], ["None"], "methods", ["None"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "eta1", ",", "eta2", "=", "params", "\n", "\n", "return", "{", "'concentration'", ":", "eta1", "+", "1", ",", "'rate'", ":", "-", "eta2", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Gamma.scale_factors": [[589, 592], ["torch.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_factors", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "ones_like", "(", "w", ")", ",", "lambda", "w", ":", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Gamma.params_from_data": [[593, 608], ["range", "x.mean", "x.log().mean", "mean.log", "x.log", "torch.polygamma", "shape.log", "torch.digamma"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", ",", "meanlog", "=", "x", ".", "mean", "(", ")", ",", "x", ".", "log", "(", ")", ".", "mean", "(", ")", "\n", "s", "=", "mean", ".", "log", "(", ")", "-", "meanlog", "\n", "\n", "shape", "=", "(", "3", "-", "s", "+", "(", "(", "s", "-", "3", ")", "**", "2", "+", "24", "*", "s", ")", ".", "sqrt", "(", ")", ")", "/", "(", "12", "*", "s", ")", "\n", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "            ", "shape", "=", "shape", "-", "(", "shape", ".", "log", "(", ")", "-", "torch", ".", "digamma", "(", "shape", ")", "-", "s", ")", "/", "(", "1", "/", "shape", "-", "torch", ".", "polygamma", "(", "1", ",", "shape", ")", ")", "\n", "\n", "", "concentration", "=", "shape", "\n", "rate", "=", "shape", "/", "mean", "\n", "\n", "eta1", "=", "concentration", "-", "1", "\n", "eta2", "=", "-", "rate", "\n", "\n", "return", "eta1", ",", "eta2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Gamma.__str__": [[609, 611], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'gamma'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Gamma.compute_hessian": [[612, 630], ["likelihoods.Gamma.params_from_data", "likelihoods.Gamma.canonical_params", "torch.tensor", "torch.tensor", "params[].reciprocal", "params[].pow().reciprocal", "torch.polygamma", "params[].pow"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "old_value", "=", "self", ".", "ensure_args", "\n", "self", ".", "ensure_args", "=", "False", "\n", "\n", "params", "=", "self", ".", "params_from_data", "(", "self", ">>", "data", ")", "\n", "params", "=", "self", ".", "canonical_params", "(", "*", "params", ")", "\n", "\n", "row_1", "=", "torch", ".", "tensor", "(", "[", "\n", "(", "params", "[", "'concentration'", "]", "-", "1", ")", "*", "torch", ".", "polygamma", "(", "1", ",", "params", "[", "'concentration'", "]", ")", "-", "1.", ",", "\n", "-", "params", "[", "'rate'", "]", ".", "reciprocal", "(", ")", "\n", "]", ")", "\n", "row_2", "=", "torch", ".", "tensor", "(", "[", "\n", "row_1", "[", "1", "]", ",", "\n", "-", "params", "[", "'concentration'", "]", "*", "params", "[", "'rate'", "]", ".", "pow", "(", "2", ")", ".", "reciprocal", "(", ")", "\n", "]", ")", "\n", "\n", "self", ".", "ensure_args", "=", "old_value", "\n", "return", "row_1", ",", "row_2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Exponential.dist": [[637, 640], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "dist", "(", "self", ")", ":", "\n", "        ", "return", "dist", ".", "Exponential", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Exponential.canonical_params": [[641, 643], ["None"], "methods", ["None"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "return", "{", "'rate'", ":", "-", "params", "[", "0", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Exponential.scale_factors": [[644, 647], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_factors", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Exponential.params_from_data": [[648, 651], ["x.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", ")", "\n", "return", "-", "1", "/", "mean", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Exponential.compute_hessian": [[652, 663], ["likelihoods.Exponential.params_from_data", "likelihoods.Exponential.canonical_params", "torch.tensor", "params[].pow().reciprocal", "params[].pow"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "old_value", "=", "self", ".", "ensure_args", "\n", "self", ".", "ensure_args", "=", "False", "\n", "\n", "params", "=", "self", ".", "params_from_data", "(", "self", ">>", "data", ")", "\n", "params", "=", "self", ".", "canonical_params", "(", "*", "params", ")", "\n", "\n", "row", "=", "torch", ".", "tensor", "(", "[", "-", "params", "[", "'rate'", "]", ".", "pow", "(", "2", ")", ".", "reciprocal", "(", ")", "]", ")", "\n", "\n", "self", ".", "ensure_args", "=", "old_value", "\n", "return", "row", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Exponential.__str__": [[664, 666], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'exponential'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Bernoulli.dist": [[672, 675], ["type"], "methods", ["None"], ["@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "return", "dist", ".", "Bernoulli", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Bernoulli.canonical_params": [[676, 681], ["torch.distributions.utils.logits_to_probs"], "methods", ["None"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "{", "'logits'", ":", "params", "[", "0", "]", "}", "\n", "\n", "", "return", "{", "'probs'", ":", "logits_to_probs", "(", "params", "[", "0", "]", ",", "is_binary", "=", "True", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Bernoulli.canonical_constraints": [[682, 685], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "canonical_constraints", "(", "self", ")", ":", "\n", "        ", "return", "{", "'probs'", ":", "constraints", ".", "unit_interval", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Bernoulli.scale_factors": [[686, 689], ["torch.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_factors", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "ones_like", "(", "w", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Bernoulli.params_from_data": [[690, 692], ["torch.distributions.utils.probs_to_logits", "x.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "probs_to_logits", "(", "x", ".", "mean", "(", ")", ",", "is_binary", "=", "True", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Bernoulli.compute_hessian": [[693, 695], ["None"], "methods", ["None"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Bernoulli.__str__": [[696, 698], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'bernoulli'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Poisson.dist": [[704, 707], ["type"], "methods", ["None"], ["@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "return", "dist", ".", "Poisson", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Poisson.canonical_params": [[708, 710], ["torch.exp"], "methods", ["None"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "return", "{", "'rate'", ":", "torch", ".", "exp", "(", "params", "[", "0", "]", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Poisson.scale_factors": [[711, 714], ["torch.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_factors", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "ones_like", "(", "w", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Poisson.params_from_data": [[715, 717], ["torch.log", "x.mean"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "log", "(", "x", ".", "mean", "(", ")", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Poisson.compute_hessian": [[718, 720], ["None"], "methods", ["None"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Poisson.__str__": [[721, 723], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'poisson'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.__init__": [[726, 735], ["likelihoods.BaseLikelihood.__init__", "isinstance", "torch.distributions.Beta"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "og_dist", ",", "noise", "=", "None", ",", "*", ",", "ensure_args", "=", "True", ")", ":", "\n", "        ", "super", "(", "GammaTrick", ",", "self", ")", ".", "__init__", "(", "domain_size", "=", "og_dist", ".", "domain_size", ",", "ensure_args", "=", "ensure_args", ")", "\n", "assert", "isinstance", "(", "og_dist", ",", "ExponentialFamily", ")", "and", "og_dist", ".", "is_discrete", ",", "'Gamma trick is only available for'", "' discrete distributions'", "\n", "assert", "og_dist", ".", "num_params", "==", "1", ",", "'The discrete distribution is supposed to be parametrized by its mean'", "\n", "\n", "self", ".", "og_dist", "=", "og_dist", "\n", "self", ".", "noise", "=", "noise", "if", "noise", "else", "dist", ".", "Beta", "(", "1.1", ",", "30", ")", "\n", "self", ".", "constant", "=", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.dist": [[736, 739], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "dist", "if", "self", ".", "training", "else", "self", ".", "og_dist", ".", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.canonical_params": [[740, 750], ["likelihoods.Gamma.canonical_params", "next", "likelihoods.ensure", "iter", "likelihoods.GammaTrick.og_dist.canonical_constraints.items", "likelihoods.Gamma.dist"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ensure", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "gamma_params", "=", "super", "(", ")", ".", "canonical_params", "(", "*", "params", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "return", "gamma_params", "\n", "\n", "", "mean", "=", "super", "(", ")", ".", "dist", "(", "**", "gamma_params", ")", ".", "mean", "-", "self", ".", "constant", "-", "self", ".", "noise", ".", "mean", "\n", "discrete_key", ",", "constraint", "=", "next", "(", "iter", "(", "self", ".", "og_dist", ".", "canonical_constraints", ".", "items", "(", ")", ")", ")", "\n", "discrete_value", "=", "ensure", "(", "mean", ",", "constraint", ")", "\n", "\n", "return", "{", "discrete_key", ":", "discrete_value", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.transform_data": [[751, 754], ["likelihoods.GammaTrick.noise.sample().to", "likelihoods.BaseLikelihood.transform_data", "likelihoods.GammaTrick.noise.sample", "x.size"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.transform_data", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample"], ["", "def", "transform_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "noise", "=", "self", ".", "noise", ".", "sample", "(", "x", ".", "size", "(", ")", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "return", "super", "(", ")", ".", "transform_data", "(", "x", "+", "self", ".", "constant", "+", "noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.inverse_transform_data": [[755, 758], ["likelihoods.BaseLikelihood.inverse_transform_data", "torch.floor"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.inverse_transform_data"], ["", "def", "inverse_transform_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "super", "(", ")", ".", "inverse_transform_data", "(", "x", ")", "\n", "return", "torch", ".", "floor", "(", "x", "-", "self", ".", "constant", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrick.__str__": [[759, 761], ["likelihoods.Gamma.__str__", "str"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "__str__", "(", ")", "if", "self", ".", "training", "else", "f'{str(self.og_dist)}*'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.__init__": [[766, 770], ["likelihoods.BaseLikelihood.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["def", "__init__", "(", "self", ",", "size", ",", "*", ",", "ensure_args", "=", "True", ")", ":", "\n", "        ", "super", "(", "Categorical", ",", "self", ")", ".", "__init__", "(", "domain_size", "=", "1", ",", "ensure_args", "=", "ensure_args", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "arg_constraints", "=", "[", "constraints", ".", "real", "]", "*", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.dist": [[771, 774], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "return", "dist", ".", "Categorical", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.canonical_constraints": [[775, 778], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "canonical_constraints", "(", "self", ")", ":", "\n", "        ", "return", "{", "'probs'", ":", "constraints", ".", "simplex", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.canonical_params": [[779, 783], ["next", "likelihoods.ensure", "iter", "torch.stack", "likelihoods.Categorical.canonical_constraints.items"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ensure"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "key", ",", "constraint", "=", "next", "(", "iter", "(", "self", ".", "canonical_constraints", ".", "items", "(", ")", ")", ")", "\n", "new_params", "=", "ensure", "(", "torch", ".", "stack", "(", "params", ",", "dim", "=", "-", "1", ")", ",", "constraint", ")", "\n", "return", "{", "key", ":", "new_params", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.scale_factors": [[784, 787], ["torch.ones_like"], "methods", ["None"], ["", "@", "property", "\n", "def", "scale_factors", "(", "self", ")", ":", "\n", "        ", "return", "[", "lambda", "w", ":", "torch", ".", "ones_like", "(", "w", ")", "]", "*", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.params_from_data": [[788, 791], ["utils.to_one_hot", "torch.distributions.utils.probs_to_logits().unbind", "torch.distributions.utils.probs_to_logits", "utils.to_one_hot.sum", "x.size"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.utils.to_one_hot"], ["", "def", "params_from_data", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x", "=", "to_one_hot", "(", "x", ",", "self", ".", "size", ")", "\n", "return", "probs_to_logits", "(", "new_x", ".", "sum", "(", "dim", "=", "0", ")", "/", "x", ".", "size", "(", "0", ")", ")", ".", "unbind", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.compute_hessian": [[792, 794], ["None"], "methods", ["None"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.Categorical.__str__": [[795, 797], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'categorical({self.size})'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.OneHotCategorical.__init__": [[800, 803], ["likelihoods.Categorical.__init__"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "*", ",", "ensure_args", "=", "True", ")", ":", "\n", "        ", "super", "(", "OneHotCategorical", ",", "self", ")", ".", "__init__", "(", "size", ",", "ensure_args", "=", "ensure_args", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.OneHotCategorical.dist": [[804, 807], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "return", "dist", ".", "OneHotCategorical", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.OneHotCategorical.compute_hessian": [[808, 810], ["None"], "methods", ["None"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.OneHotCategorical.__str__": [[811, 813], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'one-hot-categorical({self.size})'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrickCategorical.__init__": [[816, 821], ["likelihoods.LikelihoodList.__init__", "likelihoods.GammaTrick", "likelihoods.Bernoulli", "range"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "*", ",", "ensure_args", "=", "True", ")", ":", "\n", "        ", "super", "(", "GammaTrickCategorical", ",", "self", ")", ".", "__init__", "(", "*", "[", "\n", "GammaTrick", "(", "Bernoulli", "(", "domain_size", "=", "1", ",", "ensure_args", "=", "ensure_args", ")", ")", "for", "_", "in", "range", "(", "size", ")", "\n", "]", ",", "ensure_args", "=", "ensure_args", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrickCategorical.dist": [[822, 827], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "dist", ".", "OneHotCategorical", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrickCategorical.canonical_params": [[828, 840], ["likelihoods.GammaTrickCategorical.train", "likelihoods.LikelihoodList.canonical_params", "likelihoods.ensure", "likelihoods.GammaTrickCategorical.eval", "likelihoods.LikelihoodList.canonical_params", "torch.stack", "torch.cat", "zip", "params[].numel", "likelihoods.LikelihoodList.dist"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ensure", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", "GammaTrickCategorical", ",", "self", ")", ".", "canonical_params", "(", "*", "params", ")", "\n", "\n", "", "self", ".", "train", "(", ")", "# To get the parameters from the gamma", "\n", "gamma_params", "=", "super", "(", "GammaTrickCategorical", ",", "self", ")", ".", "canonical_params", "(", "*", "params", ")", "\n", "means", "=", "[", "super", "(", "GammaTrick", ",", "d", ")", ".", "dist", "(", "**", "p", ")", ".", "mean", "-", "1", "-", "d", ".", "noise", ".", "mean", "for", "d", ",", "p", "in", "zip", "(", "self", ".", "dist_list", ",", "gamma_params", ")", "]", "\n", "means", "=", "torch", ".", "stack", "(", "means", ",", "dim", "=", "-", "1", ")", "if", "params", "[", "0", "]", ".", "numel", "(", ")", ">", "1", "else", "torch", ".", "cat", "(", "means", ",", "dim", "=", "-", "1", ")", "\n", "discrete_value", "=", "ensure", "(", "means", ",", "constraints", ".", "simplex", ")", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "return", "{", "'probs'", ":", "discrete_value", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrickCategorical.canonical_constraints": [[841, 846], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "canonical_constraints", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "{", "'probs'", ":", "constraints", ".", "simplex", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrickCategorical.instantiate": [[847, 859], ["sum", "likelihoods.GammaTrickCategorical.dist", "likelihoods.LikelihoodList.instantiate", "likelihoods.GammaTrickCategorical.inverse_transform_params", "likelihoods.GammaTrickCategorical.canonical_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.instantiate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.inverse_transform_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params"], ["", "def", "instantiate", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", "GammaTrickCategorical", ",", "self", ")", ".", "instantiate", "(", "*", "params", ")", "\n", "\n", "", "params", "=", "sum", "(", "self", ".", "inverse_transform_params", "(", "*", "params", ")", ",", "[", "]", ")", "\n", "for", "d", "in", "self", ":", "\n", "            ", "d", ".", "_counter", "=", "1", "\n", "", "instance", "=", "self", ".", "dist", "(", "**", "self", ".", "canonical_params", "(", "*", "params", ")", ")", "# TODO BUG HERE (two ensure_params)", "\n", "for", "d", "in", "self", ":", "\n", "            ", "d", ".", "_counter", "=", "0", "\n", "\n", "", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrickCategorical.compute_hessian": [[860, 862], ["None"], "methods", ["None"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrickCategorical.compute_lipschitz": [[863, 865], ["None"], "methods", ["None"], ["", "def", "compute_lipschitz", "(", "self", ",", "data", ",", "original_hessian", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.GammaTrickCategorical.__str__": [[866, 868], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'one-hot-categorical({len(self)})*'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.__init__": [[871, 875], ["likelihoods.LikelihoodList.__init__", "likelihoods.Bernoulli", "range"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "*", ",", "ensure_args", "=", "True", ")", ":", "\n", "        ", "super", "(", "BernoulliTrickCategorical", ",", "self", ")", ".", "__init__", "(", "*", "[", "\n", "Bernoulli", "(", "domain_size", "=", "1", ",", "ensure_args", "=", "ensure_args", ")", "for", "_", "in", "range", "(", "size", ")", "\n", "]", ",", "ensure_args", "=", "ensure_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist": [[876, 881], ["type"], "methods", ["None"], ["", "@", "property", "\n", "def", "dist", "(", "self", ")", "->", "type", "(", "dist", ".", "Distribution", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "dist", ".", "OneHotCategorical", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params": [[882, 892], ["likelihoods.LikelihoodList.canonical_params", "likelihoods.ensure", "likelihoods.LikelihoodList.canonical_params", "torch.stack", "torch.cat", "params[].numel"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ensure", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params"], ["", "def", "canonical_params", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", "BernoulliTrickCategorical", ",", "self", ")", ".", "canonical_params", "(", "*", "params", ")", "\n", "\n", "", "means", "=", "super", "(", "BernoulliTrickCategorical", ",", "self", ")", ".", "canonical_params", "(", "*", "params", ")", "\n", "means", "=", "[", "x", "[", "'probs'", "]", "for", "x", "in", "means", "]", "\n", "means", "=", "torch", ".", "stack", "(", "means", ",", "dim", "=", "-", "1", ")", "if", "params", "[", "0", "]", ".", "numel", "(", ")", ">", "1", "else", "torch", ".", "cat", "(", "means", ",", "dim", "=", "-", "1", ")", "\n", "discrete_value", "=", "ensure", "(", "means", ",", "constraints", ".", "simplex", ")", "\n", "\n", "return", "{", "'probs'", ":", "discrete_value", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_constraints": [[893, 898], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "canonical_constraints", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "return", "{", "'probs'", ":", "constraints", ".", "simplex", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.instantiate": [[899, 907], ["sum", "likelihoods.BernoulliTrickCategorical.dist", "likelihoods.LikelihoodList.instantiate", "likelihoods.BernoulliTrickCategorical.inverse_transform_params", "likelihoods.BernoulliTrickCategorical.canonical_params"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.dist", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.instantiate", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ExponentialFamily.inverse_transform_params", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.canonical_params"], ["", "def", "instantiate", "(", "self", ",", "*", "params", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "super", "(", "BernoulliTrickCategorical", ",", "self", ")", ".", "instantiate", "(", "*", "params", ")", "\n", "\n", "", "params", "=", "sum", "(", "self", ".", "inverse_transform_params", "(", "*", "params", ")", ",", "[", "]", ")", "\n", "instance", "=", "self", ".", "dist", "(", "**", "self", ".", "canonical_params", "(", "*", "params", ")", ")", "\n", "\n", "return", "instance", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.compute_hessian": [[908, 910], ["None"], "methods", ["None"], ["", "def", "compute_hessian", "(", "self", ",", "data", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.compute_lipschitz": [[911, 913], ["None"], "methods", ["None"], ["", "def", "compute_lipschitz", "(", "self", ",", "data", ",", "original_hessian", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.BernoulliTrickCategorical.__str__": [[914, 916], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "f'one-hot-categorical({len(self)})+'", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_likelihood": [[18, 41], ["cls", "len", "len", "isinstance", "likelihoods.get_distribution_by_name", "isinstance", "isinstance", "dist_list.append", "dist_list.append", "likelihoods.get_distribution_by_name", "likelihoods.get_likelihood", "likelihoods.get_distribution_by_name", "len", "cls", "likelihoods.get_likelihood", "likelihoods.get_likelihood"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_likelihood", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_likelihood", "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_likelihood"], ["def", "get_likelihood", "(", "*", "dist_names", ",", "flatten", "=", "True", ")", ":", "\n", "    ", "assert", "len", "(", "dist_names", ")", ">", "0", "\n", "\n", "cls", "=", "LikelihoodFlatten", "if", "flatten", "else", "LikelihoodList", "\n", "\n", "if", "len", "(", "dist_names", ")", "==", "1", ":", "\n", "        ", "if", "isinstance", "(", "dist_names", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "return", "get_distribution_by_name", "(", "dist_names", "[", "0", "]", ")", "\n", "", "elif", "isinstance", "(", "dist_names", "[", "0", "]", ",", "dict", ")", ":", "\n", "            ", "return", "get_distribution_by_name", "(", "**", "dist_names", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "dist_names", "[", "0", "]", ")", "==", "1", ":", "\n", "            ", "return", "cls", "(", "get_likelihood", "(", "*", "dist_names", "[", "0", "]", ",", "flatten", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "get_likelihood", "(", "*", "dist_names", "[", "0", "]", ",", "flatten", "=", "False", ")", "\n", "\n", "", "", "dist_list", "=", "[", "]", "\n", "for", "name", "in", "dist_names", ":", "\n", "        ", "if", "not", "isinstance", "(", "name", ",", "str", ")", ":", "# Iterable with strings", "\n", "            ", "dist_list", ".", "append", "(", "get_likelihood", "(", "name", ",", "flatten", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "dist_list", ".", "append", "(", "get_distribution_by_name", "(", "name", ")", ")", "\n", "\n", "", "", "return", "cls", "(", "*", "dist_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.get_distribution_by_name": [[43, 73], ["name.find", "int", "likelihoods.GammaTrickCategorical", "likelihoods.BernoulliTrickCategorical", "likelihoods.GammaTrick", "name.find"], "function", ["None"], ["", "def", "get_distribution_by_name", "(", "name", ",", "*", ",", "domain_size", "=", "1", ",", "ensure_args", "=", "True", ")", ":", "\n", "    ", "is_gammatrick", "=", "name", "[", "-", "1", "]", "==", "'*'", "\n", "is_berntrick", "=", "name", "[", "-", "1", "]", "==", "'+'", "and", "'categorical'", "in", "name", "\n", "size", "=", "0", "\n", "available_dists", "=", "{", "\n", "'normal'", ":", "Normal", ",", "'lognormal'", ":", "LogNormal", ",", "'gamma'", ":", "Gamma", ",", "'exponential'", ":", "Exponential", ",", "\n", "'bernoulli'", ":", "Bernoulli", ",", "'poisson'", ":", "Poisson", ",", "'categorical'", ":", "Categorical", ",", "'one-hot-categorical'", ":", "OneHotCategorical", "\n", "}", "\n", "\n", "if", "is_gammatrick", "or", "is_berntrick", ":", "\n", "        ", "name", "=", "name", "[", ":", "-", "1", "]", "\n", "\n", "", "if", "'categorical'", "in", "name", ":", "\n", "        ", "pos", "=", "name", ".", "find", "(", "'('", ")", "\n", "size", "=", "int", "(", "name", "[", "pos", "+", "1", ":", "name", ".", "find", "(", "')'", ")", "]", ")", "\n", "name", "=", "name", "[", ":", "pos", "]", "\n", "\n", "", "if", "is_gammatrick", "and", "'categorical'", "in", "name", ":", "\n", "        ", "requested_dist", "=", "GammaTrickCategorical", "(", "size", ",", "ensure_args", "=", "ensure_args", ")", "\n", "", "elif", "is_berntrick", ":", "\n", "        ", "requested_dist", "=", "BernoulliTrickCategorical", "(", "size", ",", "ensure_args", "=", "ensure_args", ")", "\n", "", "else", ":", "\n", "        ", "if", "size", ">", "0", ":", "\n", "            ", "requested_dist", "=", "available_dists", "[", "name", "]", "(", "size", ",", "ensure_args", "=", "ensure_args", ")", "\n", "", "else", ":", "\n", "            ", "requested_dist", "=", "available_dists", "[", "name", "]", "(", "domain_size", "=", "domain_size", ",", "ensure_args", "=", "ensure_args", ")", "\n", "", "if", "is_gammatrick", ":", "\n", "            ", "requested_dist", "=", "GammaTrick", "(", "requested_dist", ",", "ensure_args", "=", "ensure_args", ")", "\n", "\n", "", "", "return", "requested_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods.ensure": [[75, 94], ["torch.clamp", "isinstance", "isinstance", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.distributions.utils.logits_to_probs", "torch.clamp", "torch.distributions.constraints.simplex", "torch.distributions.constraints.simplex"], "function", ["None"], ["", "def", "ensure", "(", "value", ",", "constraint", ",", "noise", "=", "1e-15", ")", ":", "\n", "    ", "if", "constraint", "==", "constraints", ".", "positive", ":", "# Special case for the rate of the poisson distribution", "\n", "        ", "value", "=", "torch", ".", "clamp", "(", "value", ",", "min", "=", "noise", ")", "\n", "\n", "", "elif", "isinstance", "(", "constraint", ",", "constraints", ".", "greater_than", ")", ":", "\n", "        ", "lower_bound", "=", "constraint", ".", "lower_bound", "\n", "value", "=", "lower_bound", "+", "noise", "+", "softplus", "(", "value", ")", "\n", "\n", "", "elif", "isinstance", "(", "constraint", ",", "constraints", ".", "less_than", ")", ":", "\n", "        ", "upper_bound", "=", "constraint", ".", "upper_bound", "\n", "value", "=", "upper_bound", "-", "noise", "-", "softplus", "(", "value", ")", "\n", "\n", "", "elif", "constraint", "==", "constraints", ".", "simplex", ":", "\n", "        ", "value", "=", "logits_to_probs", "(", "value", ")", "\n", "\n", "", "elif", "constraint", "==", "constraints", ".", "unit_interval", ":", "\n", "        ", "value", "=", "torch", ".", "clamp", "(", "value", ",", "min", "=", "0.", ",", "max", "=", "1.", ")", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.lipstd.likelihoods._apply": [[255, 275], ["counter_function", "torch.cat", "new_value.append", "new_value.append", "value.size", "len", "value.size", "len", "getattr", "getattr", "counter_function", "counter_function"], "function", ["None"], ["", "", "def", "_apply", "(", "counter_function", ",", "as_tensor", ")", ":", "\n", "    ", "def", "_apply_", "(", "func", ")", ":", "\n", "        ", "def", "_apply__", "(", "self", ",", "*", "value", ")", ":", "\n", "            ", "if", "as_tensor", ":", "\n", "                ", "value", "=", "value", "[", "0", "]", "\n", "\n", "", "new_value", ",", "pos", "=", "[", "]", ",", "0", "\n", "for", "d", "in", "self", ".", "dist_list", ":", "\n", "                ", "if", "as_tensor", ":", "\n", "                    ", "new_value", ".", "append", "(", "getattr", "(", "d", ",", "func", ".", "__name__", ")", "(", "value", "[", "...", ",", "pos", ":", "pos", "+", "counter_function", "(", "d", ")", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "new_value", ".", "append", "(", "getattr", "(", "d", ",", "func", ".", "__name__", ")", "(", "*", "value", "[", "pos", ":", "pos", "+", "counter_function", "(", "d", ")", "]", ")", ")", "\n", "", "pos", "+=", "counter_function", "(", "d", ")", "\n", "", "if", "as_tensor", ":", "\n", "                ", "assert", "pos", "==", "value", ".", "size", "(", "-", "1", ")", ",", "f'stopped at {pos} instead of {value.size(-1)}'", "\n", "", "else", ":", "\n", "                ", "assert", "pos", "==", "len", "(", "value", ")", ",", "f'stopped at {pos} instead of {len(value)}'", "\n", "", "return", "torch", ".", "cat", "(", "new_value", ",", "dim", "=", "-", "1", ")", "if", "as_tensor", "else", "new_value", "\n", "", "return", "_apply__", "\n", "", "return", "_apply_", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.modules.dense.MLPModule.__init__": [[8, 38], ["torch.Module.__init__", "isinstance", "enumerate", "torch.Sequential", "len", "len", "zip", "layers.append", "layers.append", "blocks.dense.basic_dense_block", "blocks.dense.basic_dense_block"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__", "home.repos.pwc.inspect_result.ayanmaj92_fairall.blocks.dense.basic_dense_block", "home.repos.pwc.inspect_result.ayanmaj92_fairall.blocks.dense.basic_dense_block"], ["    ", "def", "__init__", "(", "self", ",", "h_dim_list", ",", "\n", "activ_name", ",", "\n", "bn", ",", "\n", "drop_rate", ",", "\n", "net_type", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the MLP NN\n        @param h_dim_list: hidden layer dimension list\n        @param activ_name: activation function\n        @param bn: batch normalization\n        @param drop_rate: dropout rate\n        @param net_type: which model network we are designing\n        \"\"\"", "\n", "super", "(", "MLPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "h_dim_list", ",", "list", ")", "\n", "assert", "len", "(", "h_dim_list", ")", ">", "1", "\n", "n_layers", "=", "len", "(", "h_dim_list", ")", "-", "1", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "h_in", ",", "h_out", ")", "in", "enumerate", "(", "zip", "(", "h_dim_list", "[", ":", "-", "1", "]", ",", "h_dim_list", "[", "1", ":", "]", ")", ")", ":", "\n", "            ", "if", "(", "i", "+", "1", ")", "<", "n_layers", "or", "net_type", "==", "'enc'", ":", "\n", "                ", "layers", ".", "append", "(", "basic_dense_block", "(", "h_in", ",", "h_out", ",", "activ_name", ",", "drop_rate", "=", "drop_rate", ",", "bn", "=", "bn", ")", ")", "\n", "", "else", ":", "\n", "# last layer!", "\n", "                ", "layers", ".", "append", "(", "basic_dense_block", "(", "h_in", ",", "h_out", ",", "activation_name", "=", "Cte", ".", "IDENTITY", ",", "\n", "drop_rate", "=", "0.0", ",", "bn", "=", "False", ")", ")", "\n", "\n", "", "", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "self", ".", "dims", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.modules.dense.MLPModule.set_output_dims": [[39, 41], ["None"], "methods", ["None"], ["", "def", "set_output_dims", "(", "self", ",", "dims", ")", ":", "\n", "        ", "self", ".", "dims", "=", "dims", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.modules.dense.MLPModule.forward": [[42, 50], ["x.view.view.size", "x.view.view.view", "dense.MLPModule.mlp", "logits.view.view.view", "logits.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "mlp", "(", "x", ")", "\n", "if", "self", ".", "dims", "is", "not", "None", ":", "\n", "            ", "logits", "=", "logits", ".", "view", "(", "logits", ".", "size", "(", "0", ")", ",", "*", "self", ".", "dims", ")", "\n", "\n", "", "return", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.blocks.dense.basic_dense_block": [[5, 11], ["utils.activations.get_activation", "torch.Linear", "torch.Sequential", "torch.Dropout", "torch.Identity", "torch.BatchNorm1d", "torch.Identity"], "function", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.activations.get_activation"], ["\n", "\n", "class", "MLPModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "h_dim_list", ",", "\n", "activ_name", ",", "\n", "bn", ",", "\n", "drop_rate", ",", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.__init__": [[31, 106], ["torch.Module.__init__", "sscvae.set_seed", "sscvae.SSCVAE.classifier.apply", "models.cvae.CVAE", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "clf_list.extend", "clf_list.append", "modules.dense.MLPModule", "print", "functools.partial", "torch.Linear", "torch.Linear", "torch.Linear", "type", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.fill_", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed"], ["    ", "def", "__init__", "(", "self", ",", "prob_model", ",", "latent_size", ",", "h_dim_list_clf", ",", "h_dim_list_enc", ",", "h_dim_list_dec", ",", "act_name", ",", "\n", "drop_rate_clf", ",", "conditional", ",", "alpha", ",", "costs", ",", "seed", ",", "kl_beta", ",", "lmbd", ",", "\n", "loss_function", ",", "model_type", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        Initializes SSCVAE class object\n        @param prob_model: probabilistic model object\n        @param latent_size: latent size of VAE\n        @param h_dim_list_clf: hidden layer sizes of classifier\n        @param h_dim_list_enc: hidden layer sizes of encoder\n        @param h_dim_list_dec: hidden layer sizes of decoder\n        @param act_name: activation function to use\n        @param drop_rate_clf: dropout rate for classifier\n        @param conditional: whether to train conditional model w.r.t. sensitive S\n        @param alpha: hyperparameter to weigh classifier loss\n        @param costs: classification cost (0-1)\n        @param seed: random seed to set\n        @param kl_beta: term to weight KL loss term\n        @param lmbd: term to weight Demographic Parity loss (for niki-fair/FairLog)\n        @param loss_function: which methodology to train with\n        @param model_type: whether to use logistic regression model or NN model for classifier\n        @param phase: whether phase 1 or phase 2 training\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "loss_function", "!=", "Cte", ".", "LOSS_FAIRLOG", ":", "\n", "            ", "self", ".", "cvae", "=", "CVAE", "(", "prob_model", ",", "latent_size", ",", "h_dim_list_enc", ",", "h_dim_list_dec", ",", "act_name", ",", "conditional", ",", "kl_beta", ",", "\n", "seed", ",", "phase", ")", "\n", "print", "(", "\"cvae\"", ",", "self", ".", "cvae", ")", "\n", "", "self", ".", "prob_model", "=", "prob_model", "\n", "self", ".", "num_params", "=", "prob_model", ".", "num_params", "\n", "self", ".", "input_scaler", "=", "prob_model", ".", "InputScaler", "\n", "self", ".", "costs", "=", "costs", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "dim_z", "=", "latent_size", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "af", "=", "kl_beta", "\n", "self", ".", "conditional", "=", "conditional", "\n", "self", ".", "loss_function", "=", "loss_function", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "lmbd", "=", "lmbd", "\n", "\n", "set_seed", "(", "seed", ")", "\n", "\n", "# Classifier", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "classifier_input_size", "=", "prob_model", ".", "domain_size", "# because without u, i.e. x, s", "\n", "", "else", ":", "\n", "            ", "classifier_input_size", "=", "prob_model", ".", "domain_size", "-", "1", "# because without u, i.e. x only", "\n", "\n", "", "if", "(", "loss_function", "==", "Cte", ".", "LOSS_FAIRLOG", ")", "and", "(", "model_type", "==", "Cte", ".", "MODEL_LR", ")", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "classifier_input_size", ",", "1", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "likelihood_u_params_size", "=", "1", "\n", "clf_list", "=", "[", "classifier_input_size", "]", "\n", "clf_list", ".", "extend", "(", "h_dim_list_clf", ")", "\n", "clf_list", ".", "append", "(", "likelihood_u_params_size", ")", "\n", "self", ".", "classifier", "=", "MLPModule", "(", "h_dim_list", "=", "clf_list", ",", "\n", "activ_name", "=", "act_name", ",", "\n", "bn", "=", "False", ",", "\n", "drop_rate", "=", "drop_rate_clf", ",", "\n", "net_type", "=", "'clf'", ")", "\n", "print", "(", "\"clf\"", ",", "self", ".", "classifier", ")", "\n", "\n", "", "def", "init_weights", "(", "m", ",", "gain", "=", "1.", ")", ":", "\n", "            ", "\"\"\"\n            @param m: layer\n            @param gain: gain value for initialization\n            \"\"\"", "\n", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.01", ")", "\n", "\n", "", "", "self", ".", "classifier", ".", "apply", "(", "partial", "(", "init_weights", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.mc_kl": [[107, 144], ["qz0.rsample", "qz1.rsample", "prob1.unsqueeze", "pz.log_prob", "pz.log_prob", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "qz1.cdf", "qz0.cdf", "qz1.cdf", "qz0.cdf", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "qzu0_z0.unsqueeze", "qzu1_z0.unsqueeze", "qzu0_z1.unsqueeze", "qzu1_z1.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob"], ["", "def", "mc_kl", "(", "self", ",", "prob1", ",", "qz0", ",", "qz1", ",", "pz", ",", "K", "=", "100", ")", ":", "\n", "        ", "\"\"\"\n        Compute Monte-Carlo estimate of KL loss\n        @param prob1: policy probability values (of positive decision)\n        @param qz0: posterior likelihood for positive prediction\n        @param qz1: posterior likelihood for negative prediction\n        @param pz: prior likelihood\n        @param K: number of MC samples\n        @return: KL value over MC samples\n        \"\"\"", "\n", "# sample", "\n", "z0_samples", "=", "qz0", ".", "rsample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "K", "]", ")", ")", "# 100, 500, 2 (K, batch, dimz)", "\n", "z1_samples", "=", "qz1", ".", "rsample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "K", "]", ")", ")", "# 100, 500, 2", "\n", "\n", "# resize", "\n", "_prob1", "=", "prob1", ".", "unsqueeze", "(", "0", ")", "# unsqueeze(0) 1, 500, 1", "\n", "\n", "# prior", "\n", "log_prob_pz_0", "=", "pz", ".", "log_prob", "(", "z0_samples", ")", "\n", "log_prob_pz_1", "=", "pz", ".", "log_prob", "(", "z1_samples", ")", "\n", "\n", "# integral", "\n", "qzu1_z0", "=", "_prob1", "*", "qz1", ".", "cdf", "(", "z0_samples", ")", "\n", "qzu0_z0", "=", "(", "1", "-", "_prob1", ")", "*", "qz0", ".", "cdf", "(", "z0_samples", ")", "\n", "qzu1_z1", "=", "_prob1", "*", "qz1", ".", "cdf", "(", "z1_samples", ")", "\n", "qzu0_z1", "=", "(", "1", "-", "_prob1", ")", "*", "qz0", ".", "cdf", "(", "z1_samples", ")", "\n", "\n", "log_sum_input_z0", "=", "torch", ".", "cat", "(", "(", "qzu0_z0", ".", "unsqueeze", "(", "-", "1", ")", ",", "qzu1_z0", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "3", ")", "\n", "log_sum_input_z1", "=", "torch", ".", "cat", "(", "(", "qzu0_z1", ".", "unsqueeze", "(", "-", "1", ")", ",", "qzu1_z1", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "3", ")", "\n", "\n", "log_prob_qz_0", "=", "torch", ".", "logsumexp", "(", "log_sum_input_z0", ",", "3", ")", "# K x Batch x dim 2", "\n", "log_prob_qz_1", "=", "torch", ".", "logsumexp", "(", "log_sum_input_z1", ",", "3", ")", "# K x Batch x dim 2", "\n", "\n", "kl0", "=", "(", "1", "-", "prob1", ")", "*", "(", "1", "/", "K", ")", "*", "torch", ".", "sum", "(", "(", "log_prob_qz_0", ")", "-", "(", "log_prob_pz_0", ")", ",", "dim", "=", "0", ")", "# batch x dim 2", "\n", "kl1", "=", "prob1", "*", "(", "1", "/", "K", ")", "*", "torch", ".", "sum", "(", "(", "log_prob_qz_1", ")", "-", "(", "log_prob_pz_1", ")", ",", "dim", "=", "0", ")", "# 1000, 2", "\n", "\n", "return", "kl0", "+", "kl1", "# batch size x dim 2", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.classify": [[145, 172], ["sscvae.SSCVAE.input_scaler", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sscvae.SSCVAE.classifier", "sscvae.SSCVAE.broadcast_mask", "print", "s.unsqueeze", "sscvae.SSCVAE.double"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.broadcast_mask"], ["", "def", "classify", "(", "self", ",", "xu", ",", "s", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass over classifier model\n        @param xu: concatenated features (x) and utility (u)\n        @param s: sensitive feature\n        @param mask: mask for data labeled/unlabeled\n        @return: classifier logit\n        \"\"\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "mask_u", "=", "mask", "[", ":", ",", "-", "1", "]", "\n", "mask_new", "=", "self", ".", "broadcast_mask", "(", "xu", ",", "mask_u", ")", "\n", "# because the classifier does not use u", "\n", "mask_new", "[", ":", ",", "-", "1", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Mask NONE!\"", ")", "\n", "\n", "# data point missing set to zero, 1 if observed, 0 if not", "\n", "", "xu_scaled", "=", "self", ".", "input_scaler", "(", "xu", "if", "mask", "is", "None", "else", "xu", "*", "mask_new", ".", "double", "(", ")", ")", "\n", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "x_scaled", "=", "xu_scaled", "[", ":", ",", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "clf_input", "=", "torch", ".", "cat", "(", "(", "x_scaled", ",", "s", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", "\n", "# all unsupervised samples are set clf_input = 0", "\n", "return", "self", ".", "classifier", "(", "clf_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.broadcast_mask": [[173, 179], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mask.append", "mask.unsqueeze"], "methods", ["None"], ["", "def", "broadcast_mask", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "new_mask", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "new_mask", ".", "append", "(", "mask", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "new_mask", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.forward": [[180, 396], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "hasattr", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select.clone", "torch.index_select.clone", "torch.index_select.clone", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select.clone", "torch.index_select.clone", "torch.index_select.clone", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sscvae.SSCVAE.encode", "sscvae.SSCVAE.q_z", "qz0.rsample", "qz1.rsample", "z0.reshape.reshape.reshape", "z1.reshape.reshape.reshape", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "sscvae.SSCVAE.cvae.decode", "sscvae.SSCVAE.cvae.decode", "torch.index_select.clone.repeat_interleave", "torch.ones_like.repeat_interleave", "torch.ones_like.repeat_interleave", "torch.ones_like.repeat_interleave", "sscvae.SSCVAE.cvae.my_log_likelihood", "sscvae.SSCVAE.cvae.my_log_likelihood", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.repeat_interleave", "torch.sum.repeat_interleave", "torch.sum.repeat_interleave", "torch.nn.functional.sigmoid.repeat_interleave", "torch.nn.functional.sigmoid.repeat_interleave", "torch.nn.functional.sigmoid.repeat_interleave", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "idx_sup.squeeze", "idx_sup.squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "idx_unsup.squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "sscvae.SSCVAE.classify", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "u_sup.unsqueeze", "sscvae.SSCVAE.compute_clf_loss", "torch.nn.functional.sigmoid.clone", "torch.nn.functional.sigmoid.clone", "torch.nn.functional.sigmoid.clone", "sscvae.SSCVAE.cvae.encode", "sscvae.SSCVAE.cvae.q_z", "sscvae.SSCVAE.rsample", "sscvae.SSCVAE.cvae.decode", "sscvae.SSCVAE.cvae.my_log_likelihood", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "z0.reshape.reshape.transpose", "z1.reshape.reshape.transpose", "z0.reshape.reshape.size", "z1.reshape.reshape.size", "sscvae.SSCVAE.mc_kl", "sscvae.SSCVAE.sum", "sscvae.SSCVAE.sum", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "state.metrics.update", "fairtorch.DemographicParityLoss", "fairtorch.DemographicParityLoss.to", "sscvae.SSCVAE.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sscvae.SSCVAE.classify", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "z0.reshape.reshape.squeeze", "z1.reshape.reshape.squeeze", "state.metrics.update", "state.metrics.update", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "total_loss.item", "fairtorch.DemographicParityLoss.", "fairtorch.DemographicParityLoss.to.item", "sscvae.SSCVAE.classify", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.sum.item", "torch.sum.item", "torch.sum.item", "torch.sum.item", "torch.sum.item", "torch.sum.item", "clf_acc.item", "sscvae.SSCVAE.item", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "elbo_unsup.item", "logprob0_unsup.item", "logprob1_unsup.item", "recx_unsup.item", "elbo_sup.item", "sscvae.SSCVAE.sum.item"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.encode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.my_log_likelihood", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.my_log_likelihood", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.classify", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.compute_clf_loss", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.encode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.my_log_likelihood", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.mc_kl", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.classify", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.classify"], ["", "def", "forward", "(", "self", ",", "x", ",", "state", ",", "mask", "=", "None", ",", "prob1", "=", "None", ")", ":", "\n", "# we assume no missing data, i.e. just have one mask", "\n", "        ", "has_unsup", ",", "has_sup", "=", "False", ",", "False", "\n", "# initialize all", "\n", "elbo_unsup", ",", "kl_unsup", ",", "logprob0_unsup", ",", "logprob1_unsup", ",", "recx_unsup", ",", "elbo_sup", ",", "kl_sup", ",", "recxu_sup", ",", "clf_loss", ",", "clf_acc", ",", "clf_err", ",", "discrimination_loss", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "\n", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "\n", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "\n", "idx_sup", "=", "(", "mask", "[", ":", ",", "-", "1", "]", "==", "1", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "idx_unsup", "=", "(", "mask", "[", ":", ",", "-", "1", "]", "==", "0", ")", ".", "nonzero", "(", "as_tuple", "=", "False", ")", "\n", "Nu", "=", "idx_unsup", ".", "shape", "[", "0", "]", "\n", "Nl", "=", "idx_sup", ".", "shape", "[", "0", "]", "\n", "\n", "if", "len", "(", "idx_unsup", ")", ">", "0", ":", "\n", "            ", "has_unsup", "=", "True", "\n", "", "if", "len", "(", "idx_sup", ")", ">", "0", ":", "\n", "            ", "has_sup", "=", "True", "\n", "\n", "", "if", "has_sup", ":", "\n", "            ", "x_sup", "=", "torch", ".", "index_select", "(", "x", ",", "0", ",", "idx_sup", ".", "squeeze", "(", ")", ")", "\n", "prob1", "=", "torch", ".", "index_select", "(", "prob1", ",", "0", ",", "idx_sup", ".", "squeeze", "(", ")", ")", "\n", "xus_sup", "=", "x_sup", ".", "clone", "(", ")", "\n", "xu_sup", "=", "x_sup", "[", ":", ",", ":", "-", "1", "]", "\n", "s_sup", "=", "x_sup", "[", ":", ",", "-", "1", "]", "\n", "u_sup", "=", "x_sup", "[", ":", ",", "-", "2", "]", "\n", "\n", "if", "self", ".", "conditional", ":", "\n", "                ", "mask_sup", "=", "torch", ".", "ones_like", "(", "xu_sup", ")", "\n", "", "else", ":", "\n", "                ", "mask_sup", "=", "torch", ".", "ones_like", "(", "xus_sup", ")", "\n", "\n", "", "", "if", "has_unsup", "and", "self", ".", "loss_function", "in", "[", "Cte", ".", "LOSS_FAIRALL", "]", ":", "\n", "            ", "x_all_unsup", "=", "torch", ".", "index_select", "(", "x", ",", "0", ",", "idx_unsup", ".", "squeeze", "(", ")", ")", "\n", "xus_unsup", "=", "x_all_unsup", ".", "clone", "(", ")", "\n", "x_unsup", "=", "x_all_unsup", "[", ":", ",", ":", "-", "2", "]", "\n", "xu_unsup", "=", "x_all_unsup", "[", ":", ",", ":", "-", "1", "]", "\n", "s_unsup", "=", "x_all_unsup", "[", ":", ",", "-", "1", "]", "\n", "\n", "if", "self", ".", "conditional", ":", "\n", "                ", "mask_unsup", "=", "torch", ".", "ones_like", "(", "xu_unsup", ")", "\n", "", "else", ":", "\n", "                ", "mask_unsup", "=", "torch", ".", "ones_like", "(", "xus_unsup", ")", "\n", "\n", "", "", "assert", "Nu", "+", "Nl", "==", "x", ".", "shape", "[", "0", "]", ",", "\"unlabeled and labeled data points do not sum up\"", "\n", "\n", "if", "has_sup", ":", "\n", "# 1 ---- classifier on labeled data only", "\n", "            ", "if", "self", ".", "conditional", ":", "\n", "                ", "classifier_input", "=", "[", "xu_sup", ",", "s_sup", "]", "\n", "", "else", ":", "\n", "                ", "classifier_input", "=", "[", "xus_sup", "]", "\n", "\n", "", "if", "self", ".", "loss_function", "in", "[", "Cte", ".", "LOSS_FAIRLOG", ",", "Cte", ".", "LOSS_FAIRALL", "]", ":", "# only then we need the classifier", "\n", "                ", "logits_u", "=", "self", ".", "classify", "(", "*", "classifier_input", ",", "mask_sup", ")", "\n", "prob_u", "=", "sigmoid", "(", "logits_u", ")", "\n", "\n", "# --- for loss function -----", "\n", "_u", "=", "u_sup", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "clf_loss", "=", "self", ".", "compute_clf_loss", "(", "_u", ",", "logits_u", ",", "prob1", ")", "\n", "# - just for evaluation of how good we classify", "\n", "# accuracy", "\n", "pred_u", "=", "prob_u", ".", "clone", "(", ")", "\n", "pred_u", "[", "pred_u", ">=", "self", ".", "costs", "]", "=", "1", "\n", "pred_u", "[", "pred_u", "<", "self", ".", "costs", "]", "=", "0", "\n", "clf_acc", "=", "(", "1", "-", "(", "pred_u", "-", "_u", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "if", "self", ".", "loss_function", "==", "Cte", ".", "LOSS_FAIRLOG", ":", "\n", "                    ", "xu_all", "=", "x", "[", ":", ",", ":", "-", "1", "]", "\n", "s_all", "=", "x", "[", ":", ",", "-", "1", "]", "\n", "clf_in_all", "=", "[", "xu_all", ",", "s_all", "]", "\n", "dp_loss", "=", "DemographicParityLoss", "(", "sensitive_classes", "=", "[", "-", "1", ",", "1", "]", ",", "alpha", "=", "self", ".", "lmbd", ")", "\n", "discrimination_loss", "=", "dp_loss", "(", "xu_all", "[", ":", ",", ":", "-", "1", "]", ",", "\n", "self", ".", "classify", "(", "*", "clf_in_all", ",", "torch", ".", "ones_like", "(", "xu_all", ")", ")", ",", "s_all", ")", ".", "to", "(", "\"cpu\"", ")", "\n", "\n", "", "", "if", "self", ".", "loss_function", "in", "[", "Cte", ".", "LOSS_FAIRALL", ",", "Cte", ".", "LOSS_FAIRLAB", "]", ":", "\n", "# 2 --- Supervised VAE loss", "\n", "                ", "if", "self", ".", "conditional", ":", "\n", "                    ", "encoder_input", "=", "classifier_input", "\n", "", "else", ":", "\n", "                    ", "encoder_input", "=", "classifier_input", "\n", "\n", "", "z_params", "=", "self", ".", "cvae", ".", "encode", "(", "*", "encoder_input", ",", "mask_sup", ")", "\n", "\n", "qz", "=", "self", ".", "cvae", ".", "q_z", "(", "*", "z_params", ")", "\n", "z", "=", "qz", ".", "rsample", "(", ")", "\n", "\n", "if", "self", ".", "conditional", ":", "\n", "                    ", "decoder_input", "=", "[", "z", ",", "s_sup", "]", "\n", "", "else", ":", "\n", "                    ", "decoder_input", "=", "[", "z", "]", "\n", "\n", "# no mask, no scaling", "\n", "", "theta", "=", "self", ".", "cvae", ".", "decode", "(", "*", "decoder_input", ")", "# batch_size x num_params", "\n", "# conditional is handled inside likelihood", "\n", "log_prob", "=", "self", ".", "cvae", ".", "my_log_likelihood", "(", "xus_sup", ",", "mask_sup", ",", "theta", "=", "theta", ")", "\n", "\n", "if", "self", ".", "loss_function", "==", "Cte", ".", "LOSS_FAIRALL", ":", "\n", "                    ", "recxu_sup", "=", "log_prob", ".", "sum", "(", ")", "\n", "kl_sup", "=", "torch", ".", "sum", "(", "kl_divergence", "(", "qz", ",", "self", ".", "cvae", ".", "prior_z", ")", ")", "# 500, 2", "\n", "\n", "", "elif", "self", ".", "loss_function", "==", "Cte", ".", "LOSS_FAIRLAB", ":", "\n", "                    ", "recxu_sup", "=", "(", "log_prob", "*", "prob1", ")", ".", "sum", "(", ")", "# elementwise multiplication", "\n", "kl_sup", "=", "torch", ".", "sum", "(", "kl_divergence", "(", "qz", ",", "self", ".", "cvae", ".", "prior_z", ")", "*", "prob1", ")", "\n", "\n", "# --- for loss function -----", "\n", "\n", "", "elbo_sup", "=", "recxu_sup", "-", "self", ".", "af", "*", "kl_sup", "\n", "\n", "", "", "if", "has_unsup", "and", "self", ".", "loss_function", "in", "[", "Cte", ".", "LOSS_FAIRALL", "]", ":", "\n", "# 3 --- Unupervised VAE loss", "\n", "            ", "if", "self", ".", "conditional", ":", "\n", "                ", "classifier_input", "=", "[", "xu_unsup", ",", "s_unsup", "]", "\n", "", "else", ":", "\n", "                ", "classifier_input", "=", "[", "xus_unsup", "]", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "prob_u", "=", "sigmoid", "(", "self", ".", "classify", "(", "*", "classifier_input", ",", "mask_unsup", ")", ")", "\n", "\n", "", "pred_u", "=", "torch", ".", "bernoulli", "(", "prob_u", ")", ".", "float", "(", ")", "\n", "\n", "x_predu_unsup", "=", "torch", ".", "cat", "(", "(", "x_unsup", ",", "pred_u", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "conditional", ":", "\n", "                ", "encoder_input", "=", "[", "x_predu_unsup", ",", "s_unsup", "]", "\n", "", "else", ":", "\n", "                ", "encoder_input", "=", "[", "x_predu_unsup", "]", "\n", "\n", "", "z01_params", "=", "self", ".", "encode", "(", "*", "encoder_input", ",", "mask_unsup", ")", "# [1, 0, 1] # returns z1_params, z0_params", "\n", "\n", "qz0", ",", "qz1", "=", "self", ".", "q_z", "(", "*", "z01_params", ")", "\n", "\n", "L", "=", "50", "# How many samples?", "\n", "# 1. Sampling L samples. returns LxBxZ", "\n", "z0", "=", "qz0", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "L", "]", ")", ")", "\n", "z1", "=", "qz1", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "L", "]", ")", ")", "\n", "# get BxLxZ", "\n", "z0", ",", "z1", "=", "z0", ".", "transpose", "(", "0", ",", "1", ")", ",", "z1", ".", "transpose", "(", "0", ",", "1", ")", "\n", "# 2. Flattening 1st 2 dims. Should be {B*L=M}xZ", "\n", "z0", "=", "z0", ".", "reshape", "(", "-", "1", ",", "z0", ".", "size", "(", "-", "1", ")", ")", "\n", "z1", "=", "z1", ".", "reshape", "(", "-", "1", ",", "z1", ".", "size", "(", "-", "1", ")", ")", "\n", "# 3. Repeat s, then append it.", "\n", "rep_s_unsup", "=", "torch", ".", "repeat_interleave", "(", "s_unsup", ",", "L", ")", "\n", "if", "self", ".", "conditional", ":", "\n", "                ", "decoder_input0", "=", "[", "z0", ".", "squeeze", "(", ")", ",", "rep_s_unsup", "]", "\n", "decoder_input1", "=", "[", "z1", ".", "squeeze", "(", ")", ",", "rep_s_unsup", "]", "\n", "", "else", ":", "\n", "                ", "decoder_input1", "=", "[", "z1", "]", "\n", "decoder_input0", "=", "[", "z0", "]", "\n", "# 4. Pass through decoder.", "\n", "", "theta0", "=", "self", ".", "cvae", ".", "decode", "(", "*", "decoder_input0", ")", "# M x num_params", "\n", "theta1", "=", "self", ".", "cvae", ".", "decode", "(", "*", "decoder_input1", ")", "# M x num_params", "\n", "# 5. Repeat data, mask. Compute log-prob.", "\n", "rep_xus_unsup", "=", "xus_unsup", ".", "repeat_interleave", "(", "L", ",", "0", ")", "\n", "rep_mask_unsup", "=", "mask_unsup", ".", "repeat_interleave", "(", "L", ",", "0", ")", "\n", "log_prob0", "=", "self", ".", "cvae", ".", "my_log_likelihood", "(", "rep_xus_unsup", ",", "rep_mask_unsup", ",", "theta", "=", "theta0", ")", "\n", "log_prob1", "=", "self", ".", "cvae", ".", "my_log_likelihood", "(", "rep_xus_unsup", ",", "rep_mask_unsup", ",", "theta", "=", "theta1", ")", "\n", "# select first two columns, not u", "\n", "log_prob0", "=", "log_prob0", "[", ":", ",", ":", "-", "1", "]", "# sum first rows, then columns, but not u", "\n", "log_prob1", "=", "log_prob1", "[", ":", ",", ":", "-", "1", "]", "# sum, but not u", "\n", "# 6. KL_unsup.", "\n", "# you can pass here as last argument K, otherwise it takes by default K=100", "\n", "# we also sum above the kl_divergence like this", "\n", "kl_z", "=", "torch", ".", "sum", "(", "self", ".", "mc_kl", "(", "prob_u", ",", "qz0", ",", "qz1", ",", "self", ".", "cvae", ".", "prior_z", ")", ")", "# sum over batch", "\n", "rep_kl_z", "=", "kl_z", ".", "repeat_interleave", "(", "L", ")", "\n", "# 7. Compute elbo_unsup", "\n", "rep_prob_u", "=", "prob_u", ".", "repeat_interleave", "(", "L", ",", "0", ")", "\n", "recx_unsup", "=", "(", "(", "1", "-", "rep_prob_u", ")", "*", "log_prob0", "+", "rep_prob_u", "*", "log_prob1", ")", ".", "sum", "(", ")", "\n", "kl_unsup", "=", "torch", ".", "sum", "(", "rep_kl_z", ")", "\n", "\n", "elbo_unsup", "=", "(", "recx_unsup", "-", "(", "self", ".", "af", "*", "kl_unsup", ")", ")", "# kl sum over L.", "\n", "\n", "logprob0_unsup", ",", "logprob1_unsup", "=", "log_prob0", ".", "sum", "(", ")", ",", "log_prob1", ".", "sum", "(", ")", "\n", "\n", "elbo_unsup", "=", "elbo_unsup", "/", "L", "\n", "recx_unsup", "=", "recx_unsup", "/", "L", "\n", "kl_unsup", "=", "kl_unsup", "/", "L", "\n", "logprob0_unsup", "=", "logprob0_unsup", "/", "L", "\n", "logprob1_unsup", "=", "logprob1_unsup", "/", "L", "\n", "\n", "", "sup_elb", ",", "sup_clf", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "requires_grad", "=", "True", ")", ",", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "requires_grad", "=", "True", ")", "\n", "unsup_elb", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "requires_grad", "=", "True", ")", "\n", "\n", "if", "has_sup", "and", "self", ".", "loss_function", ":", "\n", "            ", "if", "self", ".", "loss_function", "in", "[", "Cte", ".", "LOSS_FAIRALL", ",", "Cte", ".", "LOSS_FAIRLAB", "]", ":", "\n", "                ", "sup_elb", "=", "-", "(", "elbo_sup", "/", "Nl", ")", "\n", "\n", "", "if", "self", ".", "loss_function", "in", "[", "Cte", ".", "LOSS_FAIRALL", ",", "Cte", ".", "LOSS_FAIRLOG", "]", ":", "\n", "                ", "sup_clf", "=", "self", ".", "alpha", "*", "clf_loss", "/", "Nl", "\n", "if", "self", ".", "loss_function", "==", "Cte", ".", "LOSS_FAIRLOG", ":", "\n", "# Here we are adding the discrimination loss, ONLY if we are doing Niki/FairLog.", "\n", "#  The formula is alpha * (clf_loss + lmbd * discrimination)", "\n", "                    ", "sup_clf", "+=", "self", ".", "alpha", "*", "self", ".", "lmbd", "*", "discrimination_loss", "\n", "\n", "", "", "", "if", "has_unsup", "and", "self", ".", "loss_function", "in", "[", "Cte", ".", "LOSS_FAIRALL", "]", ":", "\n", "            ", "unsup_elb", "=", "-", "(", "elbo_unsup", "/", "Nu", ")", "\n", "\n", "", "total_loss", "=", "sup_elb", "+", "sup_clf", "+", "unsup_elb", "\n", "\n", "if", "hasattr", "(", "state", ",", "'metrics'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "state", ".", "metrics", ".", "update", "(", "{", "'total'", ":", "total_loss", ".", "item", "(", ")", "}", ")", "\n", "if", "has_unsup", ":", "\n", "                    ", "state", ".", "metrics", ".", "update", "(", "{", "\n", "'-elbo_unsup'", ":", "-", "elbo_unsup", ".", "item", "(", ")", "/", "Nu", ",", "'kl_unsup'", ":", "kl_unsup", ".", "item", "(", ")", "/", "Nu", ",", "\n", "'-logprob0_unsup'", ":", "-", "logprob0_unsup", ".", "item", "(", ")", "/", "Nu", ",", "'-logprob1_unsup'", ":", "-", "logprob1_unsup", ".", "item", "(", ")", "/", "Nu", ",", "\n", "'-recx_unsup'", ":", "-", "recx_unsup", ".", "item", "(", ")", "/", "Nu", "\n", "}", ")", "\n", "", "if", "has_sup", ":", "\n", "                    ", "state", ".", "metrics", ".", "update", "(", "{", "\n", "'-elbo_sup'", ":", "-", "elbo_sup", ".", "item", "(", ")", "/", "Nl", ",", "'kl_sup'", ":", "kl_sup", ".", "item", "(", ")", "/", "Nl", ",", "\n", "'-logprob_sup'", ":", "-", "recxu_sup", ".", "item", "(", ")", "/", "Nl", ",", "\n", "'clf_acc'", ":", "clf_acc", ".", "item", "(", ")", "/", "Nl", ",", "'clf_loss'", ":", "clf_loss", ".", "item", "(", ")", "/", "Nl", ",", "\n", "'discr_loss'", ":", "discrimination_loss", ".", "item", "(", ")", "\n", "}", ")", "\n", "", "", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.reconstruct": [[397, 407], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "sscvae.set_seed", "sscvae.SSCVAE.cvae.reconstruct"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.reconstruct"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "reconstruct", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Method to reconstruct data\n        @param x: input features\n        @param mask: input mask\n        @return: CVAE reconstructed data.\n        \"\"\"", "\n", "set_seed", "(", "self", ".", "seed", ")", "\n", "return", "self", ".", "cvae", ".", "reconstruct", "(", "x", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.log_likelihood": [[408, 410], ["sscvae.SSCVAE.cvae.log_likelihood"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.log_likelihood"], ["", "def", "log_likelihood", "(", "self", ",", "x", ",", "state", ",", "mask", ",", "theta", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "cvae", ".", "log_likelihood", "(", "x", ",", "state", ",", "mask", ",", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.compute_clf_loss": [[411, 420], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "print"], "methods", ["None"], ["", "def", "compute_clf_loss", "(", "self", ",", "u_true", ",", "u_prob_pred", ",", "ips_prob", ")", ":", "\n", "        ", "if", "ips_prob", "is", "not", "None", ":", "\n", "            ", "p_wgt", "=", "torch", ".", "tensor", "(", "(", "1", "-", "self", ".", "costs", ")", "/", "self", ".", "costs", ")", "\n", "loss", "=", "binary_cross_entropy_with_logits", "(", "u_prob_pred", ",", "u_true", ",", "weight", "=", "(", "self", ".", "costs", "/", "ips_prob", ")", ",", "\n", "reduction", "=", "\"sum\"", ",", "pos_weight", "=", "p_wgt", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Oh no, prob1 is None, cannot de-bias with IPS!\"", ")", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.encode": [[421, 455], ["sscvae.SSCVAE.broadcast_mask", "sscvae.SSCVAE.input_scaler", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sscvae.SSCVAE.cvae.encoder_loc", "sscvae.SSCVAE.cvae.encoder_logscale", "sscvae.SSCVAE.cvae.encoder_loc", "sscvae.SSCVAE.cvae.encoder_logscale", "sscvae.SSCVAE.cvae.encoder", "sscvae.SSCVAE.cvae.encoder", "sscvae.SSCVAE.cvae.encoder", "sscvae.SSCVAE.cvae.encoder", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.zeros().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.ones().unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sscvae.SSCVAE.double", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "s.unsqueeze", "s.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.broadcast_mask"], ["", "", "def", "encode", "(", "self", ",", "x", ",", "s", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Method for encoder forward pass\n        @param x: non-sensitive data features\n        @param s: sensitive feature\n        @param mask: mask for labeled/unlabeled\n        @return: encoder output of mean/variance of latent\n        \"\"\"", "\n", "mask_u", "=", "mask", "[", ":", ",", "-", "1", "]", "\n", "mask_new", "=", "self", ".", "broadcast_mask", "(", "x", ",", "mask_u", ")", "\n", "# because the classifier does not use u", "\n", "mask_new", "[", ":", ",", "-", "1", "]", "=", "0", "\n", "# (1) scale and return x,s with mask == False", "\n", "x_scaled", "=", "self", ".", "input_scaler", "(", "\n", "x", "if", "mask", "is", "None", "else", "x", "*", "mask_new", ".", "double", "(", ")", ")", "# data point missing set to zero, 1if observed, 0 if not", "\n", "# (2) remove u", "\n", "x_scaled", "=", "x_scaled", "[", ":", ",", ":", "-", "1", "]", "\n", "# (3) add to x_scale u=1 and u=0", "\n", "x_scaled0", "=", "torch", ".", "cat", "(", "(", "x_scaled", ",", "torch", ".", "zeros", "(", "x_scaled", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "-", "1", ")", "\n", "x_scaled1", "=", "torch", ".", "cat", "(", "(", "x_scaled", ",", "torch", ".", "ones", "(", "x_scaled", ".", "shape", "[", "0", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "-", "1", ")", "\n", "# (4) send through encoder both cases", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "h0", "=", "self", ".", "cvae", ".", "encoder", "(", "torch", ".", "cat", "(", "(", "x_scaled0", ",", "s", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", ")", "# in [x1, x2, u=0, s]", "\n", "h1", "=", "self", ".", "cvae", ".", "encoder", "(", "torch", ".", "cat", "(", "(", "x_scaled1", ",", "s", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", ")", "# in [x1, x2, u=1, s]", "\n", "", "else", ":", "\n", "            ", "h0", "=", "self", ".", "cvae", ".", "encoder", "(", "x_scaled0", ")", "# in [x1, x2, u=0, s]", "\n", "h1", "=", "self", ".", "cvae", ".", "encoder", "(", "x_scaled1", ")", "# in [x1, x2, u=1, s]", "\n", "# (5) compute for both cases", "\n", "", "loc0", "=", "self", ".", "cvae", ".", "encoder_loc", "(", "h0", ")", "# constraints.real", "\n", "log_scale0", "=", "self", ".", "cvae", ".", "encoder_logscale", "(", "h0", ")", "# constraints.real", "\n", "loc1", "=", "self", ".", "cvae", ".", "encoder_loc", "(", "h1", ")", "# constraints.real", "\n", "log_scale1", "=", "self", ".", "cvae", ".", "encoder_logscale", "(", "h1", ")", "# constraints.real", "\n", "# (6) return all six variables (2 for each)", "\n", "return", "loc0", ",", "log_scale0", ",", "loc1", ",", "log_scale1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.decode": [[456, 467], ["sscvae.SSCVAE.decoder", "sscvae.SSCVAE.decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "s.unsqueeze"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ",", "s", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Method for decoder forward pass\n        @param z: latent vector\n        @param s: sensitive feature for conditional\n        @return: decoder output likelihoods\n        \"\"\"", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "return", "self", ".", "decoder", "(", "torch", ".", "cat", "(", "(", "z", ",", "s", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "decoder", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.q_z": [[468, 474], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.Normal", "torch.Normal", "torch.Normal", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "", "def", "q_z", "(", "self", ",", "loc0", ",", "log_scale0", ",", "loc1", ",", "log_scale1", ")", ":", "\n", "        ", "scale0", "=", "softplus", "(", "log_scale0", ")", "\n", "z0", "=", "dists", ".", "Normal", "(", "loc0", ",", "scale0", ")", "\n", "scale1", "=", "softplus", "(", "log_scale1", ")", "\n", "z1", "=", "dists", ".", "Normal", "(", "loc1", ",", "scale1", ")", "\n", "return", "z0", ",", "z1", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.q_z_joint": [[475, 480], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "def", "q_z_joint", "(", "self", ",", "loc0", ",", "log_scale0", ",", "loc1", ",", "log_scale1", ",", "prob_u", ")", ":", "\n", "        ", "scale0", "=", "softplus", "(", "log_scale0", ")", "\n", "scale1", "=", "softplus", "(", "log_scale1", ")", "\n", "z01", "=", "dists", ".", "Normal", "(", "(", "1", "-", "prob_u", ")", "*", "loc0", "+", "prob_u", "*", "loc1", ",", "(", "1", "-", "prob_u", ")", "*", "scale0", "+", "prob_u", "*", "scale1", ")", "\n", "return", "z01", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.phase_2_policy_helper": [[481, 528], ["sscvae.set_seed", "x.clone", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "torch.bernoulli().float", "sscvae.SSCVAE.cvae.q_z", "sscvae.SSCVAE.rsample", "sscvae.SSCVAE.cvae.decode", "sscvae.SSCVAE.prob_model().sample", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "sscvae.SSCVAE.classify", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sscvae.SSCVAE.cvae.encode", "sscvae.SSCVAE.cvae.encode", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "sscvae.SSCVAE.prob_model", "sscvae.SSCVAE.unbind"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.generation.distributions_syn.sigmoid", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.SSCVAE.classify", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.encode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.encode"], ["", "def", "phase_2_policy_helper", "(", "self", ",", "x", ",", "is_sup", "=", "False", ")", ":", "\n", "# New method for use in Phase 2 policies.", "\n", "# This code is following the forward function... Inspired from supervised and unsupervised.", "\n", "        ", "set_seed", "(", "self", ".", "seed", ")", "\n", "xus_", "=", "x", ".", "clone", "(", ")", "\n", "x_", "=", "x", "[", ":", ",", ":", "-", "2", "]", "\n", "xu_", "=", "x", "[", ":", ",", ":", "-", "1", "]", "\n", "s_", "=", "x", "[", ":", ",", "-", "1", "]", "\n", "\n", "# 1. Generate mask because latter methods use it.", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "mask_", "=", "torch", ".", "ones_like", "(", "xu_", ")", "\n", "", "else", ":", "\n", "            ", "mask_", "=", "torch", ".", "ones_like", "(", "xus_", ")", "\n", "# 2. Use classifier to get u to be fed to encoder.", "\n", "", "if", "self", ".", "conditional", ":", "\n", "            ", "classifier_input", "=", "[", "xu_", ",", "s_", "]", "\n", "", "else", ":", "\n", "            ", "classifier_input", "=", "[", "xus_", "]", "\n", "", "prob_u", "=", "sigmoid", "(", "self", ".", "classify", "(", "*", "classifier_input", ",", "mask_", ")", ")", "\n", "u_pred", "=", "torch", ".", "bernoulli", "(", "prob_u", ")", ".", "float", "(", ")", "\n", "# 3. Use encoder to get z.", "\n", "if", "not", "is_sup", ":", "\n", "# a. If we are using for unsupervised data (to get decoded z,s->u policy)", "\n", "            ", "x_probu_", "=", "torch", ".", "cat", "(", "(", "x_", ",", "u_pred", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "conditional", ":", "\n", "                ", "encoder_input", "=", "[", "x_probu_", ",", "s_", "]", "\n", "", "else", ":", "\n", "                ", "encoder_input", "=", "[", "x_probu_", "]", "\n", "", "z_params", "=", "self", ".", "cvae", ".", "encode", "(", "*", "encoder_input", ",", "mask_", ")", "\n", "", "else", ":", "\n", "# b. If we are using for supervised data (to train z->u policy)", "\n", "            ", "encoder_input", "=", "classifier_input", "\n", "z_params", "=", "self", ".", "cvae", ".", "encode", "(", "*", "encoder_input", ",", "mask_", ")", "\n", "", "qz", "=", "self", ".", "cvae", ".", "q_z", "(", "*", "z_params", ")", "\n", "z", "=", "qz", ".", "rsample", "(", ")", "\n", "# 4. Use decoder like a supervised model to get reconstructed u.", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "decoder_input", "=", "[", "z", ",", "s_", "]", "\n", "", "else", ":", "\n", "            ", "decoder_input", "=", "[", "z", "]", "\n", "# no mask, no scaling", "\n", "", "theta", "=", "self", ".", "cvae", ".", "decode", "(", "*", "decoder_input", ")", "# batch_size x num_params", "\n", "# 5. Reconstruct data like generate_data() method.", "\n", "rec_data", "=", "self", ".", "prob_model", "(", "*", "theta", ".", "unbind", "(", "dim", "=", "-", "1", ")", ")", ".", "sample", "(", ")", "\n", "# 6. Return decoder U and latent z.", "\n", "return", "rec_data", "[", ":", ",", "-", "1", "]", ",", "z", ",", "theta", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.sscvae.set_seed": [[20, 28], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"\n    Set random seed\n    @param seed: integer seed value\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__": [[19, 95], ["torch.Module.__init__", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed", "cvae.CVAE.register_buffer", "cvae.CVAE.register_buffer", "enc_list.extend", "modules.dense.MLPModule", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "dec_list.extend", "dec_list.append", "modules.dense.MLPModule", "cvae.CVAE.encoder.apply", "cvae.CVAE.encoder_loc.apply", "cvae.CVAE.encoder_logscale.apply", "cvae.CVAE.decoder.apply", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "functools.partial", "functools.partial", "type", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "m.bias.data.fill_", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain", "torch.init.calculate_gain"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.__init__"], ["def", "__init__", "(", "self", ",", "prob_model", ",", "latent_size", ",", "h_dim_list_enc", ",", "\n", "h_dim_list_dec", ",", "act_name", ",", "conditional", ",", "\n", "kl_beta", ",", "seed", ",", "phase", ")", ":", "\n", "        ", "\"\"\"\n        prob_model: probabilistic model class object\n        latent_size: size of the latent dimension\n        h_dim_list_enc: list of hidden layer sizes of encoder network\n        h_dim_list_dec: list of hidden layer sizes of decoder network\n        act_name: activation used in networks\n        conditional: whether to do a conditional on sensitive feature\n        kl_beta: set the value of beta for KL weighting in VAE loss\n        seed: set the seed value\n        phase: whether CVAE model is being used in phase 1 or 2\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "prob_model", "=", "prob_model", "\n", "self", ".", "num_params", "=", "prob_model", ".", "num_params", "\n", "self", ".", "input_scaler", "=", "prob_model", ".", "InputScaler", "\n", "self", ".", "kl_beta", "=", "kl_beta", "\n", "self", ".", "latent_size", "=", "latent_size", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "# Prior", "\n", "self", ".", "register_buffer", "(", "'prior_z_loc'", ",", "torch", ".", "zeros", "(", "latent_size", ")", ")", "\n", "self", ".", "register_buffer", "(", "'prior_z_scale'", ",", "torch", ".", "ones", "(", "latent_size", ")", ")", "\n", "self", ".", "conditional", "=", "conditional", "\n", "\n", "# Encoder", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "encoder_input_size", "=", "prob_model", ".", "domain_size", "+", "1", "\n", "", "else", ":", "\n", "            ", "encoder_input_size", "=", "prob_model", ".", "domain_size", "\n", "\n", "", "enc_list", "=", "[", "encoder_input_size", "]", "\n", "enc_list", ".", "extend", "(", "h_dim_list_enc", ")", "\n", "\n", "self", ".", "encoder", "=", "MLPModule", "(", "h_dim_list", "=", "enc_list", ",", "\n", "activ_name", "=", "act_name", ",", "\n", "bn", "=", "False", ",", "\n", "drop_rate", "=", "0.0", ",", "# no dropout in VAE models", "\n", "net_type", "=", "'enc'", ")", "\n", "\n", "self", ".", "encoder_loc", "=", "nn", ".", "Linear", "(", "enc_list", "[", "-", "1", "]", ",", "latent_size", ")", "\n", "self", ".", "encoder_logscale", "=", "nn", ".", "Linear", "(", "enc_list", "[", "-", "1", "]", ",", "latent_size", ")", "\n", "\n", "# Decoder", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "decoder_input_size", "=", "latent_size", "+", "1", "\n", "", "else", ":", "\n", "            ", "decoder_input_size", "=", "latent_size", "\n", "\n", "", "dec_list", "=", "[", "decoder_input_size", "]", "\n", "dec_list", ".", "extend", "(", "h_dim_list_dec", ")", "\n", "dec_list", ".", "append", "(", "self", ".", "num_params", ")", "\n", "self", ".", "decoder", "=", "MLPModule", "(", "h_dim_list", "=", "dec_list", ",", "\n", "activ_name", "=", "act_name", ",", "\n", "bn", "=", "False", ",", "\n", "drop_rate", "=", "0.0", ",", "# no dropout in VAE models", "\n", "net_type", "=", "'dec'", ")", "\n", "\n", "def", "init_weights", "(", "m", ",", "gain", "=", "1.", ")", ":", "\n", "            ", "\"\"\"\n            @param m: layer\n            @param gain: gain value for initialization\n            \"\"\"", "\n", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "gain", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.01", ")", "\n", "\n", "", "", "self", ".", "encoder", ".", "apply", "(", "partial", "(", "init_weights", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", ")", "\n", "self", ".", "encoder_loc", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "encoder_logscale", ".", "apply", "(", "init_weights", ")", "\n", "self", ".", "decoder", ".", "apply", "(", "partial", "(", "init_weights", ",", "gain", "=", "nn", ".", "init", ".", "calculate_gain", "(", "'relu'", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.prior_z": [[96, 99], ["torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "@", "property", "\n", "def", "prior_z", "(", "self", ")", ":", "\n", "        ", "return", "dists", ".", "Normal", "(", "self", ".", "prior_z_loc", ",", "self", ".", "prior_z_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z": [[100, 103], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.Normal", "torch.Normal", "torch.Normal"], "methods", ["None"], ["", "def", "q_z", "(", "self", ",", "loc", ",", "logscale", ")", ":", "\n", "        ", "scale", "=", "softplus", "(", "logscale", ")", "\n", "return", "dists", ".", "Normal", "(", "loc", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.encode": [[104, 124], ["cvae.CVAE.input_scaler", "cvae.CVAE.encoder_loc", "cvae.CVAE.encoder_logscale", "cvae.CVAE.encoder", "cvae.CVAE.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mask.double", "s.unsqueeze"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ",", "s", "=", "None", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Method for encoder\n        @param x: non-sensitive features\n        @param s: sensitive feature\n        @param mask: mask for data labeled/unlabeled\n        @return: latent variable loc (mean) and logscale (log of variance)\n        \"\"\"", "\n", "# Normal distribution", "\n", "x_scaled", "=", "self", ".", "input_scaler", "(", "\n", "x", "if", "mask", "is", "None", "else", "x", "*", "mask", ".", "double", "(", ")", ")", "# data point missingness, 1 if observed, 0 if not", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "h", "=", "self", ".", "encoder", "(", "torch", ".", "cat", "(", "(", "x_scaled", ",", "s", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "h", "=", "self", ".", "encoder", "(", "x_scaled", ")", "\n", "\n", "", "loc", "=", "self", ".", "encoder_loc", "(", "h", ")", "\n", "logscale", "=", "self", ".", "encoder_logscale", "(", "h", ")", "\n", "\n", "return", "loc", ",", "logscale", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode": [[125, 142], ["cvae.CVAE.decoder", "cvae.CVAE.decoder", "z.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "z.unsqueeze.unsqueeze.unsqueeze", "z.unsqueeze.unsqueeze.size", "len", "s.unsqueeze", "z.unsqueeze.unsqueeze.size"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ",", "s", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Method for decoder\n        @param z: latent variable after reparameterization\n        @param s: sensitive feature for conditional\n        @return: output of decoder network; distributions\n        \"\"\"", "\n", "if", "self", ".", "conditional", ":", "\n", "# Adding this small code to ensure that z is never 1-dimensional.", "\n", "#  Can happen if we get single data-point as input.", "\n", "            ", "if", "self", ".", "latent_size", ">", "1", "and", "len", "(", "z", ".", "size", "(", ")", ")", "<", "2", ":", "\n", "                ", "z", "=", "z", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "self", ".", "latent_size", "==", "1", "and", "len", "(", "z", ".", "size", "(", ")", ")", "<", "2", ":", "\n", "                ", "z", "=", "z", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "return", "self", ".", "decoder", "(", "torch", ".", "cat", "(", "(", "z", ",", "s", ".", "unsqueeze", "(", "-", "1", ")", ")", ",", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "decoder", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.forward": [[143, 193], ["cvae.CVAE.encode", "cvae.CVAE.q_z().rsample", "cvae.CVAE.decode", "cvae.CVAE.my_log_likelihood", "cvae.CVAE.clone().sum().sum", "torch.distributions.kl_divergence().sum", "torch.distributions.kl_divergence().sum", "torch.distributions.kl_divergence().sum", "hasattr", "x.size", "cvae.CVAE.q_z", "cvae.CVAE.clone().sum", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.distributions.kl_divergence", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cvae.CVAE.prob_model.eval", "state.metrics.update", "cvae.CVAE.log_likelihood().mean", "state.metrics.update", "state.metrics.update", "cvae.CVAE.prob_model.train", "cvae.CVAE.q_z", "cvae.CVAE.clone", "cvae.CVAE.log_likelihood", "torch.distributions.kl_divergence().sum.item", "enumerate", "elbo.item", "cvae.CVAE.sum", "l_i.item"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.encode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.my_log_likelihood", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.CategoricalBernoulliTrick.mean", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.metrics.NoAverage.update", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.main_helpers.train", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.log_likelihood"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "state", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass of CVAE model\n        @param x: non-sensitive data features\n        @param state: Ignite engine state object\n        @param mask: mask for data labeled/unlabeled\n        @return: elbo loss\n        \"\"\"", "\n", "N", "=", "x", ".", "size", "(", ")", "[", "0", "]", "# needed for likelihood computation", "\n", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "xu", "=", "x", "[", ":", ",", ":", "-", "1", "]", "\n", "s", "=", "x", "[", ":", ",", "-", "1", "]", "\n", "encoder_input", "=", "[", "xu", ",", "s", "]", "\n", "", "else", ":", "\n", "            ", "encoder_input", "=", "[", "x", "]", "\n", "\n", "", "z_params", "=", "self", ".", "encode", "(", "*", "encoder_input", ",", "mask", ")", "\n", "\n", "z", "=", "self", ".", "q_z", "(", "*", "z_params", ")", ".", "rsample", "(", ")", "\n", "\n", "# input here z, s", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "decoder_input", "=", "[", "z", ",", "s", "]", "\n", "", "else", ":", "\n", "            ", "decoder_input", "=", "[", "z", "]", "\n", "\n", "", "theta", "=", "self", ".", "decode", "(", "*", "decoder_input", ")", "# batch_size x num_params", "\n", "\n", "# conditional is handled inside likelihood", "\n", "log_prob", "=", "self", ".", "my_log_likelihood", "(", "x", ",", "mask", ",", "theta", "=", "theta", ")", "\n", "ll", "=", "log_prob", ".", "clone", "(", ")", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "kl_z", "=", "kl_divergence", "(", "self", ".", "q_z", "(", "*", "z_params", ")", ",", "self", ".", "prior_z", ")", ".", "sum", "(", ")", "\n", "elbo", "=", "ll", "-", "self", ".", "kl_beta", "*", "kl_z", "\n", "\n", "# when writing losses it will be averaged", "\n", "if", "hasattr", "(", "state", ",", "'metrics'", ")", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "prob_model", ".", "eval", "(", ")", "\n", "state", ".", "metrics", ".", "update", "(", "{", "\n", "'-elbo'", ":", "-", "elbo", ".", "item", "(", ")", "/", "N", ",", "'kl_z'", ":", "kl_z", ".", "item", "(", ")", "/", "N", "\n", "}", ")", "\n", "# conditional is handled inside likelihood", "\n", "log_prob", "=", "self", ".", "log_likelihood", "(", "x", ",", "state", ",", "None", ",", "theta", "=", "theta", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "state", ".", "metrics", ".", "update", "(", "{", "'-re'", ":", "-", "log_prob", ".", "sum", "(", ")", "/", "N", "}", ")", "\n", "state", ".", "metrics", ".", "update", "(", "{", "f'-re_{i}'", ":", "-", "l_i", ".", "item", "(", ")", "/", "N", "\n", "for", "i", ",", "l_i", "in", "enumerate", "(", "log_prob", ")", "}", ")", "\n", "self", ".", "prob_model", ".", "train", "(", ")", "\n", "\n", "", "", "return", "-", "elbo", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.reconstruct": [[194, 227], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cvae.CVAE.encode", "cvae.CVAE.q_z().sample", "cvae.CVAE.decode", "cvae.CVAE.q_z", "cvae.CVAE.prob_model().sample", "cvae.CVAE.prob_model().sample", "cvae.CVAE.prob_model", "cvae.CVAE.prob_model", "cvae.CVAE.prob_model", "cvae.CVAE.unbind", "cvae.CVAE.unbind", "cvae.CVAE.unbind"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.encode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "reconstruct", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "\"\"\"\n        Function to reconstruct input data.\n        @param x: non-sensitive input features\n        @param mask: mask for data labeled/unlabeled\n        @return: probabilistic model estimate of reconstructed features\n        \"\"\"", "\n", "# feed to encoder", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "s", "=", "x", "[", ":", ",", "-", "1", "]", "\n", "x", "=", "x", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "encoder_input", "=", "[", "x", ",", "s", "]", "\n", "", "else", ":", "\n", "            ", "encoder_input", "=", "[", "x", "]", "\n", "\n", "# get latent z", "\n", "", "z_params", "=", "self", ".", "encode", "(", "*", "encoder_input", ",", "mask", ")", "\n", "z", "=", "self", ".", "q_z", "(", "*", "z_params", ")", ".", "sample", "(", ")", "\n", "\n", "# input here z, s to decoder", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "decoder_input", "=", "[", "z", ",", "s", "]", "\n", "", "else", ":", "\n", "            ", "decoder_input", "=", "[", "z", "]", "\n", "\n", "", "theta", "=", "self", ".", "decode", "(", "*", "decoder_input", ")", "# batch_size x num_params", "\n", "\n", "if", "self", ".", "phase", "==", "1", ":", "\n", "            ", "return", "self", ".", "prob_model", "(", "*", "theta", ".", "unbind", "(", "dim", "=", "-", "1", ")", ")", ".", "sample", "(", ")", ",", "z", ",", "None", "\n", "", "elif", "self", ".", "phase", "==", "2", ":", "\n", "            ", "return", "self", ".", "prob_model", "(", "*", "theta", ".", "unbind", "(", "dim", "=", "-", "1", ")", ")", ".", "sample", "(", ")", ",", "z", ",", "self", ".", "prob_model", "(", "*", "theta", ".", "unbind", "(", "dim", "=", "-", "1", ")", ")", "[", "-", "1", "]", ".", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.my_log_likelihood": [[229, 250], ["cvae.CVAE.prob_model().log_prob", "len", "cvae.CVAE.prob_model", "mask.double", "theta.unbind"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob"], ["", "", "def", "my_log_likelihood", "(", "self", ",", "x", ",", "mask", ",", "theta", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes log-likelihood from just features. Used in forward pass.\n        @param x: data features\n        @param mask: mask for data labeled/unlabeled\n        @param theta: probabilistic model parameters\n        @return: log-likelihood value\n        \"\"\"", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "assert", "x", ".", "shape", "[", "1", "]", "==", "mask", ".", "shape", "[", "1", "]", ",", "\"mask and x vector need to have the same number of columns\"", "\n", "", "assert", "len", "(", "self", ".", "prob_model", ")", "==", "x", ".", "shape", "[", "1", "]", ",", "\"x needs to have the same size as the prob_model\"", "\n", "\n", "log_prob", "=", "self", ".", "prob_model", "(", "*", "theta", ".", "unbind", "(", "dim", "=", "-", "1", ")", ")", ".", "log_prob", "(", "x", ")", "# batch_size x num_dimensions", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "log_prob", "=", "log_prob", "*", "mask", ".", "double", "(", ")", "\n", "\n", "", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.log_likelihood": [[251, 294], ["cvae.CVAE.prob_model().log_prob", "len", "cvae.CVAE.encode", "cvae.CVAE.decode", "cvae.CVAE.q_z().sample", "cvae.CVAE.q_z().rsample", "cvae.CVAE.prob_model", "mask.double", "cvae.CVAE.q_z", "cvae.CVAE.q_z", "cvae.CVAE.unbind"], "methods", ["home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.Base.log_prob", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.encode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.decode", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.LogNormal.sample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.utils.distributions.GumbelDistribution.rsample", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z", "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.cvae.CVAE.q_z"], ["", "def", "log_likelihood", "(", "self", ",", "x", ",", "state", ",", "mask", ",", "theta", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Computes log-likelihood from input features. Used for logging.\n        @param x: data features\n        @param state: Ignite state\n        @param mask: mask for data labeled/unlabeled\n        @param theta: parameters of probabilistic model\n        @return: log likelihood computed value\n        \"\"\"", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "s", "=", "x", "[", ":", ",", "-", "1", "]", "\n", "x", "=", "x", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "", "if", "mask", "is", "not", "None", ":", "\n", "            ", "assert", "x", ".", "shape", "[", "1", "]", "==", "mask", ".", "shape", "[", "1", "]", ",", "\"mask and x vector need to have the same number of columns\"", "\n", "", "assert", "len", "(", "self", ".", "prob_model", ")", "==", "x", ".", "shape", "[", "1", "]", ",", "\"x needs to have the same size as the prob_model\"", "\n", "\n", "if", "theta", "is", "None", ":", "# theta is parameters, outputs of parameters of likelihood", "\n", "            ", "if", "self", ".", "conditional", ":", "\n", "                ", "encoder_input", "=", "[", "x", ",", "s", "]", "\n", "", "else", ":", "\n", "                ", "encoder_input", "=", "[", "x", "]", "\n", "\n", "", "z_params", "=", "self", ".", "encode", "(", "*", "encoder_input", ",", "mask", ")", "\n", "if", "state", "is", "None", ":", "\n", "                ", "z", "=", "self", ".", "q_z", "(", "*", "z_params", ")", ".", "sample", "(", ")", "\n", "", "else", ":", "\n", "                ", "z", "=", "self", ".", "q_z", "(", "*", "z_params", ")", ".", "rsample", "(", ")", "\n", "\n", "# input here z, s", "\n", "", "if", "self", ".", "conditional", ":", "\n", "                ", "decoder_input", "=", "[", "z", ",", "s", "]", "\n", "", "else", ":", "\n", "                ", "decoder_input", "=", "[", "z", "]", "\n", "\n", "", "theta", "=", "self", ".", "decode", "(", "*", "decoder_input", ")", "# batch_size x num_params", "\n", "\n", "", "log_prob", "=", "self", ".", "prob_model", "(", "*", "theta", ".", "unbind", "(", "dim", "=", "-", "1", ")", ")", ".", "log_prob", "(", "x", ")", "# batch_size x num_dimensions", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "log_prob", "=", "log_prob", "*", "mask", ".", "double", "(", ")", "\n", "\n", "", "return", "log_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ayanmaj92_fairall.models.__init__.create_model": [[10, 43], ["AssertionError", "cvae.CVAE", "sscvae.SSCVAE"], "function", ["None"], []]}