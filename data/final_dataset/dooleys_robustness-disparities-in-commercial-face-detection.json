{"home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.detect_faces.upload_file": [[35, 53], ["s3_client.upload_file", "sys.exit", "str"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.detect_faces.upload_file"], ["def", "upload_file", "(", "file_name", ",", "bucket", ",", "object_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Upload a file to an S3 bucket\n\n    :param file_name: Local ile to upload\n    :param bucket: Bucket to upload to\n    :param object_name: S3 object name. If not specified then file_name is used\n    :return: True if file was uploaded, else False\n    \"\"\"", "\n", "# If S3 object_name was not specified, use file_name", "\n", "if", "object_name", "is", "None", ":", "\n", "        ", "object_name", "=", "file_name", "\n", "# Upload the file", "\n", "", "try", ":", "\n", "        ", "response", "=", "s3_client", ".", "upload_file", "(", "file_name", ",", "bucket", ",", "object_name", ")", "\n", "", "except", "ClientError", "as", "e", ":", "\n", "        ", "sys", ".", "exit", "(", "f'ERROR when uploading json `{object_name}`: {str(exception)}'", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.detect_faces.write_upload_response": [[55, 107], ["photo.index", "photo.replace", "os.path.split", "[].split", "os.path.exists", "os.makedirs", "open", "json.dump", "detect_faces.upload_file", "os.remove", "photo.index", "os.path.splitext", "os.path.splitext", "len"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.detect_faces.upload_file"], ["", "def", "write_upload_response", "(", "response", ",", "photo", ",", "bucket", ",", "service", ",", "upload_to_s3", "=", "False", ")", ":", "\n", "    ", "\"\"\"Given a response from the detection API of `service`,\n    save it locally and upload it to bucket if `upload_to_s3` is True\n     by replacing `c_images` with `response/{service}`\n\n    :param response (obj): Response objects from API call\n    :param photo (str): File path in S3 bucket of image\n    :param bucket (str): Bucket where image lives in bucket\n    :param service (str): Name of the API service (aws, azure)\n    :param upload_to_s3 (bool): Whether you want to upload the response json to s3\n    \"\"\"", "\n", "# get the photo's corruption, original_image name, and severity", "\n", "corruptions", "=", "[", "'gaussian-noise'", ",", "'shot-noise'", ",", "'impulse-noise'", ",", "'defocus-blur'", ",", "'glass-blur'", ",", "\n", "'motion-blur'", ",", "'zoom-blur'", ",", "'snow'", ",", "'frost'", ",", "'fog'", ",", "\n", "'brightness'", ",", "'contrast'", ",", "'elastic-transform'", ",", "'pixelate'", ",", "'jpeg-compression'", ",", "'clean'", "]", "\n", "# which corruption is this?", "\n", "c", "=", "[", "c", "for", "c", "in", "corruptions", "if", "c", "in", "photo", "]", "[", "0", "]", "\n", "original_photo", "=", "photo", "[", ":", "photo", ".", "index", "(", "c", ")", "]", "\n", "# remove trailing underscore if there", "\n", "if", "original_photo", "[", "-", "1", "]", "==", "'_'", ":", "\n", "        ", "original_photo", "=", "original_photo", "[", ":", "-", "1", "]", "\n", "", "s", "=", "os", ".", "path", ".", "splitext", "(", "photo", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "# format the saved json response", "\n", "response", "=", "{", "\n", "'original_photo'", ":", "original_photo", ",", "\n", "'photo'", ":", "photo", ",", "\n", "'corruption'", ":", "c", ",", "\n", "'severity'", ":", "s", ",", "\n", "'service'", ":", "service", ",", "\n", "'response'", ":", "response", ",", "\n", "}", "\n", "# replace in path c_images with response/{service}", "\n", "# e.g., if photo = 'foo/c_images/path/image.png'", "\n", "# then json_fn = 'response/{service}/path/image_{service}.json'", "\n", "# find where c_images is:", "\n", "i", "=", "photo", ".", "index", "(", "'c_images/'", ")", "\n", "# replace through that part with response/{service}", "\n", "json_fn", "=", "photo", ".", "replace", "(", "photo", "[", ":", "(", "i", "+", "len", "(", "'c_images/'", ")", ")", "]", ",", "'response/{}/'", ".", "format", "(", "service", ")", ")", "\n", "json_fn", "=", "os", ".", "path", ".", "splitext", "(", "json_fn", ")", "[", "0", "]", "+", "'_{}.json'", ".", "format", "(", "service", ")", "\n", "temp_file_path", "=", "JSON_PATH", "+", "json_fn", "\n", "folder", ",", "_", "=", "os", ".", "path", ".", "split", "(", "temp_file_path", ")", "\n", "# check to make sure the folder where you're writing the json exists", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "# write the json", "\n", "", "with", "open", "(", "temp_file_path", ",", "'w'", ")", "as", "json_file", ":", "\n", "        ", "json", ".", "dump", "(", "response", ",", "json_file", ")", "\n", "# upload it to S3. if you do, delete the json", "\n", "", "if", "upload_to_s3", ":", "\n", "        ", "success", "=", "upload_file", "(", "temp_file_path", ",", "bucket", ",", "json_fn", ")", "\n", "os", ".", "remove", "(", "temp_file_path", ")", "\n", "", "return", "success", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.detect_faces.aws_detect_faces": [[108, 122], ["rek_client.detect_faces", "detect_faces.write_upload_response", "print", "print"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.detect_faces.write_upload_response"], ["", "def", "aws_detect_faces", "(", "photo", ",", "bucket", ")", ":", "\n", "    ", "\"\"\"Run AWS Rekognition detect_face API on photo from bucket\n\n    :param photo (str): File path in S3 bucket of image\n    :param bucket (str): bucket where image lives\n    \"\"\"", "\n", "try", ":", "\n", "        ", "response", "=", "rek_client", ".", "detect_faces", "(", "Image", "=", "{", "'S3Object'", ":", "{", "'Bucket'", ":", "bucket", ",", "'Name'", ":", "photo", "}", "}", ",", "Attributes", "=", "[", "'ALL'", "]", ")", "\n", "write_upload_response", "(", "response", ",", "photo", ",", "bucket", ",", "'aws'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "photo", ")", "\n", "print", "(", "e", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.detect_faces.azure_detect_faces": [[123, 144], ["face_client.face.detect_with_url", "detect_faces.write_upload_response", "x.as_dict", "print", "print"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.detect_faces.write_upload_response"], ["", "def", "azure_detect_faces", "(", "photo", ",", "bucket", ")", ":", "\n", "    ", "\"\"\"Run Azure's face detection API on photo from bucket\n\n    :param photo (str): File path in S3 bucket of image\n    :param bucket (str): bucket where image lives\n    \"\"\"", "\n", "try", ":", "\n", "        ", "bucket_url", "=", "'https://{}.s3.us-east-2.amazonaws.com/'", ".", "format", "(", "bucket", ")", "\n", "single_face_image_url", "=", "bucket_url", "+", "photo", "\n", "# We use detection model 3 to get better performance on small faces", "\n", "detected_faces", "=", "face_client", ".", "face", ".", "detect_with_url", "(", "url", "=", "single_face_image_url", ",", "\n", "return_face_landmarks", "=", "True", ",", "\n", "return_face_attributes", "=", "[", "'headpose'", ",", "'mask'", "]", ",", "\n", "detection_model", "=", "'detection_03'", ")", "\n", "response", "=", "[", "x", ".", "as_dict", "(", ")", "for", "x", "in", "detected_faces", "]", "\n", "write_upload_response", "(", "response", ",", "photo", ",", "bucket", ",", "'azure'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "photo", ")", "\n", "print", "(", "e", ")", "\n", "return", "False", "\n", "", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.dataset.write_unique_ids": [[17, 29], ["open", "f.writelines"], "methods", ["None"], ["    ", "def", "write_unique_ids", "(", "self", ",", "out_file", ")", ":", "\n", "        ", "\"\"\"\n        Write the unique IDs to a file, but add a self.prefix to each element of the array.\n        For example, if self.unique_ids is\n            ['image_1.jpg', 'image_2.jpg']\n        then if the self.prfix is './folder/', then out_file would be written as\n            ./folder/image_1.jpg\n            ./folder/image_2.jpg\n        \"\"\"", "\n", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "writelines", "(", "[", "self", ".", "prefix", "+", "x", "+", "'\\n'", "for", "x", "in", "self", ".", "unique_ids", "]", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.dataset.read_unique_ids": [[30, 44], ["open", "x.strip().replace", "x.strip"], "methods", ["None"], ["", "def", "read_unique_ids", "(", "self", ",", "in_file", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Read the unique IDs from in_file, but remove a self.prefix from each element of the array.\n        For example, if the in_file is\n            ./folder/image_1.jpg\n            ./folder/image_2.jpg\n        and the self.prefix is './folder/', then self.unique_ids would be written as\n            ['image_1.jpg', 'image_2.jpg']\n        \"\"\"", "\n", "if", "prefix", "is", "None", ":", "\n", "            ", "prefix", "=", "self", ".", "prefix", "\n", "", "with", "open", "(", "in_file", ")", "as", "f", ":", "\n", "            ", "self", ".", "unique_ids", "=", "[", "x", ".", "strip", "(", ")", ".", "replace", "(", "prefix", ",", "''", ")", "for", "x", "in", "f", "]", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.adience_dataset.__init__": [[47, 63], ["datasets.adience_dataset.load_metadata"], "methods", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.utk_dataset.load_metadata"], ["    ", "def", "__init__", "(", "self", ",", "metadata_folder", "=", "'./'", ")", ":", "\n", "        ", "\"\"\"\n        Create the Adience Dataset class.\n        Ususally run as:\n            adi = Adience_dataset(metadata_folder)\n            adi.select_unique_ids()\n            adi.write_unique_ids('adience_images.txt')\n        Or if the unique_ids have already been created:\n            adi = Adience_dataset(metadata_folder)\n            adi.read_unique_ids('adience_images.txt')\n\n\n        \"\"\"", "\n", "self", ".", "metadata", "=", "self", ".", "load_metadata", "(", "metadata_folder", ")", "\n", "self", ".", "prefix", "=", "'data/adience/faces/'", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.adience_dataset.load_metadata": [[64, 115], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.concat", "pandas.concat", "pandas.concat.age.apply", "adience[].apply", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or", "adience[].astype", "x.replace", "ValueError"], "methods", ["None"], ["", "def", "load_metadata", "(", "self", ",", "metadata_folder", ")", ":", "\n", "        ", "def", "adience_resolve_class_label", "(", "age", ")", ":", "\n", "            ", "\"\"\"\n            Given an age, what is the age group?\n            \"\"\"", "\n", "if", "age", "==", "'(0, 2)'", "or", "age", "==", "'2'", ":", "\n", "                ", "age_id", "=", "0", "\n", "", "elif", "age", "==", "'(4, 6)'", "or", "age", "==", "'3'", ":", "\n", "                ", "age_id", "=", "1", "\n", "", "elif", "age", "==", "'(8, 12)'", "or", "age", "==", "'(8, 23)'", "or", "age", "==", "'13'", ":", "\n", "                ", "age_id", "=", "2", "\n", "", "elif", "age", "==", "'(15, 20)'", "or", "age", "==", "'22'", ":", "\n", "                ", "age_id", "=", "3", "\n", "", "elif", "age", "==", "'(25, 32)'", "or", "age", "==", "'(27, 32)'", "or", "age", "in", "[", "'23'", ",", "'29'", ",", "'34'", ",", "'35'", "]", ":", "\n", "                ", "age_id", "=", "4", "\n", "", "elif", "age", "==", "'(38, 42)'", "or", "age", "==", "'(38, 43)'", "or", "age", "==", "'(38, 48)'", "or", "age", "in", "[", "'36'", ",", "'42'", ",", "'45'", "]", ":", "\n", "                ", "age_id", "=", "5", "\n", "", "elif", "age", "==", "'(48, 53)'", "or", "age", "in", "[", "'46'", ",", "'55'", "]", ":", "\n", "                ", "age_id", "=", "6", "\n", "", "elif", "age", "==", "'(60, 100)'", "or", "age", "in", "[", "'57'", ",", "'58'", "]", ":", "\n", "                ", "age_id", "=", "7", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Not sure how to handle this age: {}\"", ".", "format", "(", "age", ")", ")", "\n", "\n", "", "return", "age_id", "\n", "\n", "", "if", "metadata_folder", "[", "-", "1", "]", "==", "'/'", ":", "\n", "            ", "metadata_folder", "=", "metadata_folder", "[", ":", "-", "1", "]", "\n", "\n", "", "fold_0", "=", "pd", ".", "read_csv", "(", "f'{metadata_folder}/fold_0_data.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "fold_1", "=", "pd", ".", "read_csv", "(", "f'{metadata_folder}/fold_1_data.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "fold_2", "=", "pd", ".", "read_csv", "(", "f'{metadata_folder}/fold_2_data.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "fold_3", "=", "pd", ".", "read_csv", "(", "f'{metadata_folder}/fold_3_data.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "fold_4", "=", "pd", ".", "read_csv", "(", "f'{metadata_folder}/fold_4_data.txt'", ",", "sep", "=", "'\\t'", ")", "\n", "\n", "# get only those data that have an age and gender is m or f", "\n", "fold_0", "=", "fold_0", "[", "np", ".", "logical_and", "(", "fold_0", "[", "'age'", "]", "!=", "'None'", ",", "\n", "np", ".", "logical_or", "(", "fold_0", "[", "'gender'", "]", "==", "'m'", ",", "fold_0", "[", "'gender'", "]", "==", "'f'", ")", ")", "]", "\n", "fold_1", "=", "fold_1", "[", "np", ".", "logical_and", "(", "fold_1", "[", "'age'", "]", "!=", "'None'", ",", "\n", "np", ".", "logical_or", "(", "fold_1", "[", "'gender'", "]", "==", "'m'", ",", "fold_1", "[", "'gender'", "]", "==", "'f'", ")", ")", "]", "\n", "fold_2", "=", "fold_2", "[", "np", ".", "logical_and", "(", "fold_2", "[", "'age'", "]", "!=", "'None'", ",", "\n", "np", ".", "logical_or", "(", "fold_2", "[", "'gender'", "]", "==", "'m'", ",", "fold_2", "[", "'gender'", "]", "==", "'f'", ")", ")", "]", "\n", "fold_3", "=", "fold_3", "[", "np", ".", "logical_and", "(", "fold_3", "[", "'age'", "]", "!=", "'None'", ",", "\n", "np", ".", "logical_or", "(", "fold_3", "[", "'gender'", "]", "==", "'m'", ",", "fold_3", "[", "'gender'", "]", "==", "'f'", ")", ")", "]", "\n", "fold_4", "=", "fold_4", "[", "np", ".", "logical_and", "(", "fold_4", "[", "'age'", "]", "!=", "'None'", ",", "\n", "np", ".", "logical_or", "(", "fold_4", "[", "'gender'", "]", "==", "'m'", ",", "fold_4", "[", "'gender'", "]", "==", "'f'", ")", ")", "]", "\n", "\n", "adience", "=", "pd", ".", "concat", "(", "[", "fold_0", ",", "fold_1", ",", "fold_2", ",", "fold_3", ",", "fold_4", "]", ")", "\n", "adience", "[", "'age_group'", "]", "=", "adience", ".", "age", ".", "apply", "(", "adience_resolve_class_label", ")", "\n", "adience", "[", "'ImageID'", "]", "=", "'coarse_tilt_aligned_face.'", "+", "adience", "[", "'face_id'", "]", ".", "astype", "(", "str", ")", "+", "'.'", "+", "adience", "[", "'original_image'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "replace", "(", "'.jpg'", ",", "''", ")", ")", "\n", "return", "adience", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.adience_dataset.select_unique_ids": [[117, 143], ["set", "set", "numpy.logical_and", "numpy.logical_and", "list", "len", "list", "numpy.random.choice", "numpy.random.choice", "[].astype"], "methods", ["None"], ["", "def", "select_unique_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Randomly select images from the Adience dataset to be included in the\n        experiments. Make sure that there are at least #CAP number of images\n        in each intersection for age and gender groups.\n        \"\"\"", "\n", "adience", "=", "self", ".", "metadata", "\n", "adi_ids", "=", "[", "]", "\n", "for", "gg", "in", "set", "(", "adience", "[", "'gender'", "]", ")", ":", "\n", "                ", "for", "ag", "in", "set", "(", "adience", "[", "'age_group'", "]", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "idx", "=", "np", ".", "logical_and", "(", "adience", "[", "'gender'", "]", "==", "gg", ",", "adience", "[", "'age_group'", "]", "==", "ag", ")", "\n", "intersection_ids", "=", "list", "(", "adience", "[", "idx", "]", "[", "'user_id'", "]", "+", "\n", "'/coarse_tilt_aligned_face.'", "+", "\n", "adience", "[", "idx", "]", "[", "'face_id'", "]", ".", "astype", "(", "str", ")", "+", "\n", "'.'", "+", "adience", "[", "idx", "]", "[", "'original_image'", "]", ")", "\n", "if", "len", "(", "intersection_ids", ")", "<=", "CAP", ":", "\n", "                            ", "adi_ids", "+=", "intersection_ids", "\n", "", "else", ":", "\n", "                            ", "x", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "intersection_ids", ",", "CAP", ",", "replace", "=", "False", ")", ")", "\n", "adi_ids", "+=", "x", "\n", "\n", "", "", "except", ":", "\n", "                        ", "continue", "\n", "", "", "", "self", ".", "unique_ids", "=", "adi_ids", "\n", "return", "adi_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.ccd_dataset.__init__": [[145, 161], ["datasets.ccd_dataset.load_metadata"], "methods", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.utk_dataset.load_metadata"], ["    ", "def", "__init__", "(", "self", ",", "metadata_folder", "=", "'./'", ")", ":", "\n", "        ", "\"\"\"\n        Create the CCD Dataset class.\n        Ususally run as:\n            c = CCD_dataset(metadata_folder)\n            c.select_unique_ids()\n            c.write_unique_ids('ccd_images.txt')\n        Or if the unique_ids have already been created:\n            c = CCD_dataset(metadata_folder)\n            c.read_unique_ids('ccd_images.txt')\n\n\n        \"\"\"", "\n", "self", ".", "metadata", "=", "self", ".", "load_metadata", "(", "metadata_folder", ")", "\n", "self", ".", "prefix", "=", "'data/CCD/frames/'", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.ccd_dataset.load_metadata": [[162, 195], ["json.load.keys", "pandas.DataFrame", "pandas.DataFrame", "open", "json.load", "int", "int", "int", "range", "f.replace", "range", "range", "range"], "methods", ["None"], ["", "def", "load_metadata", "(", "self", ",", "metadata_folder", ")", ":", "\n", "        ", "if", "metadata_folder", "[", "-", "1", "]", "==", "'/'", ":", "\n", "            ", "metadata_folder", "=", "metadata_folder", "[", ":", "-", "1", "]", "\n", "\n", "", "with", "open", "(", "metadata_folder", "+", "'/CasualConversations.json'", ")", "as", "f", ":", "\n", "            ", "ccd", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "rows", "=", "[", "]", "\n", "for", "k", "in", "ccd", ".", "keys", "(", ")", ":", "\n", "            ", "i", "=", "int", "(", "k", ")", "\n", "dark", "=", "ccd", "[", "k", "]", "[", "'dark_files'", "]", "\n", "all_", "=", "ccd", "[", "k", "]", "[", "'files'", "]", "\n", "age", "=", "ccd", "[", "k", "]", "[", "'label'", "]", "[", "'age'", "]", "\n", "gender", "=", "ccd", "[", "k", "]", "[", "'label'", "]", "[", "'gender'", "]", "\n", "skin", "=", "int", "(", "ccd", "[", "k", "]", "[", "'label'", "]", "[", "'skin-type'", "]", ")", "<", "3", "\n", "age", "=", "int", "(", "age", ")", "if", "age", "!=", "'N/A'", "else", "-", "1", "\n", "if", "age", "in", "range", "(", "18", ")", ":", "\n", "                ", "age_id", "=", "0", "\n", "", "elif", "age", "in", "range", "(", "18", ",", "45", ")", ":", "\n", "                ", "age_id", "=", "1", "\n", "", "elif", "age", "in", "range", "(", "45", ",", "65", ")", ":", "\n", "                ", "age_id", "=", "2", "\n", "", "elif", "age", "in", "range", "(", "65", ",", "122", ")", ":", "\n", "                ", "age_id", "=", "3", "\n", "", "for", "f", "in", "all_", ":", "\n", "                ", "png", "=", "f", ".", "replace", "(", "'.MP4'", ",", "'.png'", ")", "\n", "if", "f", "in", "dark", ":", "\n", "                    ", "rows", "+=", "[", "[", "png", ",", "1", ",", "age_id", ",", "age", ",", "gender", ",", "skin", "]", "]", "\n", "", "else", ":", "\n", "                    ", "rows", "+=", "[", "[", "png", ",", "0", ",", "age_id", ",", "age", ",", "gender", ",", "skin", "]", "]", "\n", "\n", "", "", "", "ccd", "=", "pd", ".", "DataFrame", "(", "rows", ",", "columns", "=", "[", "'ImageID'", ",", "'isDark'", ",", "'Age'", ",", "'Age_Numeric'", ",", "'Gender'", ",", "'Skin'", "]", ")", "\n", "return", "ccd", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.ccd_dataset.select_unique_ids": [[197, 224], ["set", "set", "set", "set", "list", "len", "list", "numpy.random.choice", "numpy.random.choice", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["None"], ["", "def", "select_unique_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Randomly select images from the CCD dataset to be included in the\n        experiments. Make sure that there are at least #CAP number of images\n        in each intersection for age, gender, lighting condition, and skin groups.\n        \"\"\"", "\n", "ccd", "=", "self", ".", "metadata", "\n", "ccd_ids", "=", "[", "]", "\n", "for", "dg", "in", "set", "(", "ccd", "[", "'isDark'", "]", ")", ":", "\n", "            ", "for", "gg", "in", "set", "(", "ccd", "[", "'Gender'", "]", ")", ":", "\n", "                ", "for", "sg", "in", "set", "(", "ccd", "[", "'Skin'", "]", ")", ":", "\n", "                    ", "for", "ag", "in", "set", "(", "ccd", "[", "'Age'", "]", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "intersection_ids", "=", "list", "(", "ccd", "[", "np", ".", "logical_and", "(", "ccd", "[", "'isDark'", "]", "==", "dg", ",", "\n", "np", ".", "logical_and", "(", "ccd", "[", "'Gender'", "]", "==", "gg", ",", "\n", "np", ".", "logical_and", "(", "ccd", "[", "'Skin'", "]", "==", "sg", ",", "\n", "ccd", "[", "'Age'", "]", "==", "ag", ")", ")", ")", "]", "[", "'ImageID'", "]", ")", "\n", "if", "len", "(", "intersection_ids", ")", "<=", "CAP", ":", "\n", "                                ", "ccd_ids", "+=", "intersection_ids", "\n", "", "else", ":", "\n", "                                ", "x", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "intersection_ids", ",", "CAP", ",", "replace", "=", "False", ")", ")", "\n", "ccd_ids", "+=", "x", "\n", "\n", "", "", "except", ":", "\n", "                            ", "continue", "\n", "", "", "", "", "", "self", ".", "unique_ids", "=", "ccd_ids", "\n", "return", "ccd_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.miap_dataset.__init__": [[226, 242], ["datasets.miap_dataset.load_metadata"], "methods", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.utk_dataset.load_metadata"], ["    ", "def", "__init__", "(", "self", ",", "metadata_folder", "=", "'./'", ")", ":", "\n", "        ", "\"\"\"\n        Create the MAIP Dataset class.\n        Ususally run as:\n            miap = MIAP_dataset(metadata_folder)\n            miap.select_unique_ids()\n            miap.write_unique_ids('miap_images.txt')\n        Or if the unique_ids have already been created:\n            miap = MIAP_dataset(metadata_folder)\n            miap.read_unique_ids('miap_images.txt')\n\n\n        \"\"\"", "\n", "self", ".", "metadata", "=", "self", ".", "load_metadata", "(", "metadata_folder", ")", "\n", "self", ".", "prefix", "=", "'data/miap/images/'", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.miap_dataset.load_metadata": [[243, 257], ["pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "miap_test[].apply", "miap_train[].apply", "miap_val[].apply", "pandas.concat", "pandas.concat"], "methods", ["None"], ["", "def", "load_metadata", "(", "self", ",", "metadata_folder", ")", ":", "\n", "        ", "\"metadata_folder should not have a trailing /\"", "\n", "if", "metadata_folder", "[", "-", "1", "]", "==", "'/'", ":", "\n", "            ", "metadata_folder", "=", "metadata_folder", "[", ":", "-", "1", "]", "\n", "", "miap_test", "=", "pd", ".", "read_csv", "(", "f'{metadata_folder}/open_images_extended_miap_boxes_test.csv'", ")", "\n", "miap_train", "=", "pd", ".", "read_csv", "(", "f'{metadata_folder}/open_images_extended_miap_boxes_train.csv'", ")", "\n", "miap_val", "=", "pd", ".", "read_csv", "(", "f'{metadata_folder}/open_images_extended_miap_boxes_val.csv'", ")", "\n", "\n", "miap_test", "[", "'ImageID'", "]", "=", "miap_test", "[", "'ImageID'", "]", ".", "apply", "(", "lambda", "x", ":", "'test/'", "+", "x", ")", "\n", "miap_train", "[", "'ImageID'", "]", "=", "miap_train", "[", "'ImageID'", "]", ".", "apply", "(", "lambda", "x", ":", "'train/'", "+", "x", ")", "\n", "miap_val", "[", "'ImageID'", "]", "=", "miap_val", "[", "'ImageID'", "]", ".", "apply", "(", "lambda", "x", ":", "'validation/'", "+", "x", ")", "\n", "\n", "miap", "=", "pd", ".", "concat", "(", "[", "miap_test", ",", "miap_train", ",", "miap_val", "]", ")", "\n", "return", "miap", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.miap_dataset.select_unique_ids": [[259, 284], ["set", "set", "miap.ImageID.isin", "list", "list", "list", "numpy.random.choice", "numpy.random.choice", "numpy.logical_and", "numpy.logical_and"], "methods", ["None"], ["", "def", "select_unique_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        First only select those MIAP images that have 1 object in them.\n        Then randomly select images to be included in the\n        experiments. Make sure that there are at least #CAP number of images\n        in each intersection for age and gender groups.\n        \"\"\"", "\n", "miap", "=", "self", ".", "metadata", "\n", "miap_single", "=", "miap", "[", "miap", ".", "ImageID", ".", "isin", "(", "list", "(", "miap_single", "[", "miap_single", "==", "1", "]", ".", "index", ")", ")", "]", "\n", "miap_ids", "=", "[", "]", "\n", "for", "gp", "in", "set", "(", "miap_single", "[", "'GenderPresentation'", "]", ")", ":", "\n", "            ", "for", "ap", "in", "set", "(", "miap_single", "[", "'AgePresentation'", "]", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "intersection_ids", "=", "list", "(", "miap_single", "[", "np", ".", "logical_and", "(", "miap_single", "[", "'GenderPresentation'", "]", "==", "gp", ",", "\n", "miap_single", "[", "'AgePresentation'", "]", "==", "ap", ")", "]", "[", "'ImageID'", "]", ")", "\n", "if", "group", "[", "gp", "]", "[", "ap", "]", "<=", "CAP", ":", "\n", "                        ", "miap_ids", "+=", "intersection_ids", "\n", "", "else", ":", "\n", "                        ", "x", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "intersection_ids", ",", "CAP", ",", "replace", "=", "False", ")", ")", "\n", "miap_ids", "+=", "x", "\n", "\n", "", "", "except", ":", "\n", "                    ", "continue", "\n", "", "", "", "self", ".", "unique_ids", "=", "miap_ids", "\n", "return", "miap_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.utk_dataset.__init__": [[286, 302], ["datasets.utk_dataset.load_metadata"], "methods", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.utk_dataset.load_metadata"], ["    ", "def", "__init__", "(", "self", ",", "utkface_filenames", "=", "'utkface_images.txt'", ")", ":", "\n", "        ", "\"\"\"\n        Create the UTK Dataset class.\n        Ususally run as:\n            utk = UTK_dataset(metadata_folder)\n            utk.select_unique_ids()\n            utk.write_unique_ids('utk_images.txt')\n        Or if the unique_ids have already been created:\n            utk = UTK_dataset(metadata_folder)\n            utk.read_unique_ids('utk_images.txt')\n\n\n        \"\"\"", "\n", "self", ".", "metadata", "=", "self", ".", "load_metadata", "(", "utkface_filenames", ")", "\n", "self", ".", "prefix", "=", "''", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.utk_dataset.load_metadata": [[303, 347], ["pandas.DataFrame", "pandas.DataFrame", "utk[].apply", "utk[].apply", "utk[].apply", "utk[].apply", "file.split", "int", "file.split", "file.split", "open", "len", "range", "int", "int", "file.split.strip", "os.path.basename", "file.split", "range", "len", "len", "range", "len", "range", "ValueError"], "methods", ["None"], ["", "def", "load_metadata", "(", "self", ",", "utkface_filenames", ")", ":", "\n", "        ", "\"\"\"\n        The metadata for the UTK dataset are in the file names, so pass a list of utk files\n        Example:\n            data/utkface/UTKface_inthewild/part1/100_1_0_20170110183726390.jpg\n            data/utkface/UTKface_inthewild/part1/100_1_2_20170105174847679.jpg\n            ...\n        \"\"\"", "\n", "\n", "def", "utk_resolve_age_label", "(", "file", ")", ":", "\n", "            ", "x", "=", "file", ".", "split", "(", "'_'", ")", "\n", "if", "len", "(", "x", ")", "!=", "4", ":", "\n", "                ", "return", "-", "1", "\n", "", "age", "=", "int", "(", "file", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "if", "age", "in", "range", "(", "18", ")", ":", "\n", "                ", "age_id", "=", "0", "\n", "", "elif", "age", "in", "range", "(", "18", ",", "45", ")", ":", "\n", "                ", "age_id", "=", "1", "\n", "", "elif", "age", "in", "range", "(", "45", ",", "65", ")", ":", "\n", "                ", "age_id", "=", "2", "\n", "", "elif", "age", "in", "range", "(", "65", ",", "122", ")", ":", "\n", "                ", "age_id", "=", "3", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Not sure how to handle this age: {}\"", ".", "format", "(", "age", ")", ")", "\n", "\n", "", "return", "age_id", "\n", "\n", "", "def", "utk_resolve_gender_label", "(", "file", ")", ":", "\n", "            ", "x", "=", "file", ".", "split", "(", "'_'", ")", "\n", "return", "int", "(", "x", "[", "1", "]", ")", "if", "len", "(", "x", ")", "==", "4", "and", "len", "(", "x", "[", "1", "]", ")", "else", "-", "1", "\n", "\n", "", "def", "utk_resolve_race_label", "(", "file", ")", ":", "\n", "            ", "x", "=", "file", ".", "split", "(", "'_'", ")", "\n", "return", "int", "(", "x", "[", "2", "]", ")", "if", "len", "(", "x", ")", "==", "4", "else", "-", "1", "\n", "\n", "\n", "", "with", "open", "(", "utkface_filenames", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "files", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "f", "]", "\n", "", "utk", "=", "pd", ".", "DataFrame", "(", "files", ",", "columns", "=", "[", "'filename'", "]", ")", "\n", "utk", "[", "'ImageID'", "]", "=", "utk", "[", "'filename'", "]", ".", "apply", "(", "lambda", "x", ":", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "\n", "utk", "[", "'age'", "]", "=", "utk", "[", "'ImageID'", "]", ".", "apply", "(", "utk_resolve_age_label", ")", "\n", "utk", "[", "'gender'", "]", "=", "utk", "[", "'ImageID'", "]", ".", "apply", "(", "utk_resolve_gender_label", ")", "\n", "utk", "[", "'race'", "]", "=", "utk", "[", "'ImageID'", "]", ".", "apply", "(", "utk_resolve_race_label", ")", "\n", "return", "utk", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.code.datasets.utk_dataset.select_unique_ids": [[349, 375], ["set", "set", "set", "list", "len", "list", "numpy.random.choice", "numpy.random.choice", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "methods", ["None"], ["", "def", "select_unique_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        First only select those MIAP images that have 1 object in them.\n        Then randomly select images to be included in the\n        experiments. Make sure that there are at least #CAP number of images\n        in each intersection for race, age, and gender groups.\n        \"\"\"", "\n", "utk", "=", "self", ".", "metadata", "\n", "utk_ids", "=", "[", "]", "\n", "for", "gg", "in", "set", "(", "utk", "[", "'gender'", "]", ")", ":", "\n", "            ", "for", "rg", "in", "set", "(", "utk", "[", "'race'", "]", ")", ":", "\n", "                ", "for", "ag", "in", "set", "(", "utk", "[", "'age'", "]", ")", ":", "\n", "                    ", "try", ":", "\n", "                        ", "intersection_ids", "=", "list", "(", "utk", "[", "np", ".", "logical_and", "(", "utk", "[", "'gender'", "]", "==", "gg", ",", "\n", "np", ".", "logical_and", "(", "utk", "[", "'race'", "]", "==", "rg", ",", "\n", "utk", "[", "'age'", "]", "==", "ag", ")", ")", "]", "[", "'filename'", "]", ")", "\n", "if", "len", "(", "intersection_ids", ")", "<=", "CAP", ":", "\n", "                            ", "utk_ids", "+=", "intersection_ids", "\n", "", "else", ":", "\n", "                            ", "x", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "intersection_ids", ",", "CAP", ",", "replace", "=", "False", ")", ")", "\n", "utk_ids", "+=", "x", "\n", "\n", "", "", "except", ":", "\n", "                        ", "continue", "\n", "", "", "", "", "self", ".", "unique_ids", "=", "utk_ids", "\n", "return", "utk_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.MotionImage.motion_blur": [[51, 53], ["wand.api.library.MagickMotionBlurImage"], "methods", ["None"], ["    ", "def", "motion_blur", "(", "self", ",", "radius", "=", "0.0", ",", "sigma", "=", "0.0", ",", "angle", "=", "0.0", ")", ":", "\n", "        ", "wandlibrary", ".", "MagickMotionBlurImage", "(", "self", ".", "wand", ",", "radius", ",", "sigma", ",", "angle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.disk": [[27, 40], ["numpy.meshgrid", "numpy.array", "numpy.sum", "cv2.GaussianBlur", "numpy.arange", "numpy.arange"], "function", ["None"], ["def", "disk", "(", "radius", ",", "alias_blur", "=", "0.1", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "if", "radius", "<=", "8", ":", "\n", "        ", "L", "=", "np", ".", "arange", "(", "-", "8", ",", "8", "+", "1", ")", "\n", "ksize", "=", "(", "3", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "L", "=", "np", ".", "arange", "(", "-", "radius", ",", "radius", "+", "1", ")", "\n", "ksize", "=", "(", "5", ",", "5", ")", "\n", "", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "L", ",", "L", ")", "\n", "aliased_disk", "=", "np", ".", "array", "(", "(", "X", "**", "2", "+", "Y", "**", "2", ")", "<=", "radius", "**", "2", ",", "dtype", "=", "dtype", ")", "\n", "aliased_disk", "/=", "np", ".", "sum", "(", "aliased_disk", ")", "\n", "\n", "# supersample disk to antialias", "\n", "return", "cv2", ".", "GaussianBlur", "(", "aliased_disk", ",", "ksize", "=", "ksize", ",", "sigmaX", "=", "alias_blur", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.plasma_fractal_large": [[54, 61], ["int", "corruptions.plasma_fractal", "pow", "math.ceil", "math.log"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.plasma_fractal"], ["", "", "def", "plasma_fractal_large", "(", "mapsize", "=", "256", ",", "wibbledecay", "=", "3", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for plasma_fractal that automatically finds the next\n    highest power of 2 for mapsize\n    \"\"\"", "\n", "pow2", "=", "int", "(", "pow", "(", "2", ",", "math", ".", "ceil", "(", "math", ".", "log", "(", "mapsize", ",", "2", ")", ")", ")", ")", "\n", "return", "plasma_fractal", "(", "mapsize", "=", "pow2", ",", "wibbledecay", "=", "wibbledecay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.plasma_fractal": [[63, 110], ["numpy.empty", "np.empty.min", "numpy.roll", "corruptions.plasma_fractal.wibbledmean"], "function", ["None"], ["", "def", "plasma_fractal", "(", "mapsize", "=", "256", ",", "wibbledecay", "=", "3", ")", ":", "\n", "    ", "\"\"\"\n    Generate a heightmap using diamond-square algorithm.\n    Return square 2d array, side length 'mapsize', of floats in range 0-255.\n    'mapsize' must be a power of two.\n    \"\"\"", "\n", "assert", "(", "mapsize", "&", "(", "mapsize", "-", "1", ")", "==", "0", ")", "\n", "maparray", "=", "np", ".", "empty", "(", "(", "mapsize", ",", "mapsize", ")", ",", "dtype", "=", "np", ".", "float_", ")", "\n", "maparray", "[", "0", ",", "0", "]", "=", "0", "\n", "stepsize", "=", "mapsize", "\n", "wibble", "=", "100", "\n", "\n", "def", "wibbledmean", "(", "array", ")", ":", "\n", "        ", "return", "array", "/", "4", "+", "wibble", "*", "np", ".", "random", ".", "uniform", "(", "-", "wibble", ",", "wibble", ",", "array", ".", "shape", ")", "\n", "\n", "", "def", "fillsquares", "(", ")", ":", "\n", "        ", "\"\"\"For each square of points stepsize apart,\n           calculate middle value as mean of points + wibble\"\"\"", "\n", "cornerref", "=", "maparray", "[", "0", ":", "mapsize", ":", "stepsize", ",", "0", ":", "mapsize", ":", "stepsize", "]", "\n", "squareaccum", "=", "cornerref", "+", "np", ".", "roll", "(", "cornerref", ",", "shift", "=", "-", "1", ",", "axis", "=", "0", ")", "\n", "squareaccum", "+=", "np", ".", "roll", "(", "squareaccum", ",", "shift", "=", "-", "1", ",", "axis", "=", "1", ")", "\n", "maparray", "[", "stepsize", "//", "2", ":", "mapsize", ":", "stepsize", ",", "\n", "stepsize", "//", "2", ":", "mapsize", ":", "stepsize", "]", "=", "wibbledmean", "(", "squareaccum", ")", "\n", "\n", "", "def", "filldiamonds", "(", ")", ":", "\n", "        ", "\"\"\"For each diamond of points stepsize apart,\n           calculate middle value as mean of points + wibble\"\"\"", "\n", "mapsize", "=", "maparray", ".", "shape", "[", "0", "]", "\n", "drgrid", "=", "maparray", "[", "stepsize", "//", "2", ":", "mapsize", ":", "stepsize", ",", "stepsize", "//", "2", ":", "mapsize", ":", "stepsize", "]", "\n", "ulgrid", "=", "maparray", "[", "0", ":", "mapsize", ":", "stepsize", ",", "0", ":", "mapsize", ":", "stepsize", "]", "\n", "ldrsum", "=", "drgrid", "+", "np", ".", "roll", "(", "drgrid", ",", "1", ",", "axis", "=", "0", ")", "\n", "lulsum", "=", "ulgrid", "+", "np", ".", "roll", "(", "ulgrid", ",", "-", "1", ",", "axis", "=", "1", ")", "\n", "ltsum", "=", "ldrsum", "+", "lulsum", "\n", "maparray", "[", "0", ":", "mapsize", ":", "stepsize", ",", "stepsize", "//", "2", ":", "mapsize", ":", "stepsize", "]", "=", "wibbledmean", "(", "ltsum", ")", "\n", "tdrsum", "=", "drgrid", "+", "np", ".", "roll", "(", "drgrid", ",", "1", ",", "axis", "=", "1", ")", "\n", "tulsum", "=", "ulgrid", "+", "np", ".", "roll", "(", "ulgrid", ",", "-", "1", ",", "axis", "=", "0", ")", "\n", "ttsum", "=", "tdrsum", "+", "tulsum", "\n", "maparray", "[", "stepsize", "//", "2", ":", "mapsize", ":", "stepsize", ",", "0", ":", "mapsize", ":", "stepsize", "]", "=", "wibbledmean", "(", "ttsum", ")", "\n", "\n", "", "while", "stepsize", ">=", "2", ":", "\n", "        ", "fillsquares", "(", ")", "\n", "filldiamonds", "(", ")", "\n", "stepsize", "//=", "2", "\n", "wibble", "/=", "wibbledecay", "\n", "\n", "", "maparray", "-=", "maparray", ".", "min", "(", ")", "\n", "return", "maparray", "/", "maparray", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.clipped_zoom": [[112, 126], ["int", "int", "min", "scipy.ndimage.zoom", "numpy.ceil", "numpy.ceil", "float", "float"], "function", ["None"], ["", "def", "clipped_zoom", "(", "img", ",", "zoom_factor", ")", ":", "\n", "    ", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "# ceil crop height(= crop width)", "\n", "ch", "=", "int", "(", "np", ".", "ceil", "(", "h", "/", "float", "(", "zoom_factor", ")", ")", ")", "\n", "cw", "=", "int", "(", "np", ".", "ceil", "(", "w", "/", "float", "(", "zoom_factor", ")", ")", ")", "\n", "\n", "top", "=", "(", "h", "-", "ch", ")", "//", "2", "\n", "left", "=", "(", "w", "-", "cw", ")", "//", "2", "\n", "adj", "=", "min", "(", "top", ",", "left", ")", "\n", "img", "=", "scizoom", "(", "img", "[", "adj", ":", "adj", "+", "ch", ",", "adj", ":", "adj", "+", "cw", "]", ",", "(", "zoom_factor", ",", "zoom_factor", ",", "1", ")", ",", "order", "=", "1", ")", "\n", "# trim off any extra pixels", "\n", "trim_top", "=", "(", "img", ".", "shape", "[", "0", "]", "-", "h", ")", "//", "2", "\n", "\n", "return", "img", "[", "trim_top", ":", "trim_top", "+", "h", ",", "trim_top", ":", "trim_top", "+", "w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.gaussian_noise": [[133, 138], ["numpy.array", "numpy.clip", "numpy.random.normal"], "function", ["None"], ["", "def", "gaussian_noise", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", ".08", ",", ".12", ",", "0.18", ",", "0.26", ",", "0.38", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "/", "255.", "\n", "return", "np", ".", "clip", "(", "x", "+", "np", ".", "random", ".", "normal", "(", "size", "=", "x", ".", "shape", ",", "scale", "=", "c", ")", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.shot_noise": [[140, 145], ["numpy.array", "numpy.clip", "numpy.random.poisson", "float"], "function", ["None"], ["", "def", "shot_noise", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "60", ",", "25", ",", "12", ",", "5", ",", "3", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "/", "255.", "\n", "return", "np", ".", "clip", "(", "np", ".", "random", ".", "poisson", "(", "x", "*", "c", ")", "/", "float", "(", "c", ")", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.impulse_noise": [[147, 152], ["skimage.util.random_noise", "numpy.clip", "numpy.array"], "function", ["None"], ["", "def", "impulse_noise", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", ".03", ",", ".06", ",", ".09", ",", "0.17", ",", "0.27", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "sk", ".", "util", ".", "random_noise", "(", "np", ".", "array", "(", "x", ")", "/", "255.", ",", "mode", "=", "'s&p'", ",", "amount", "=", "c", ")", "\n", "return", "np", ".", "clip", "(", "x", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.speckle_noise": [[154, 159], ["numpy.array", "numpy.clip", "numpy.random.normal"], "function", ["None"], ["", "def", "speckle_noise", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", ".15", ",", ".2", ",", "0.35", ",", "0.45", ",", "0.6", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "/", "255.", "\n", "return", "np", ".", "clip", "(", "x", "+", "x", "*", "np", ".", "random", ".", "normal", "(", "size", "=", "x", ".", "shape", ",", "scale", "=", "c", ")", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.fgsm": [[161, 171], ["V", "source_net", "source_net.zero_grad", "F.cross_entropy", "F.cross_entropy.backward", "standardize", "V", "torch.clamp", "[].squeeze_", "unstandardize", "unstandardize", "source_net.data.max", "torch.sign"], "function", ["None"], ["", "def", "fgsm", "(", "x", ",", "source_net", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "V", "(", "x", ",", "requires_grad", "=", "True", ")", "\n", "logits", "=", "source_net", "(", "x", ")", "\n", "source_net", ".", "zero_grad", "(", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "V", "(", "logits", ".", "data", ".", "max", "(", "1", ")", "[", "1", "]", ".", "squeeze_", "(", ")", ")", ",", "size_average", "=", "False", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "return", "standardize", "(", "torch", ".", "clamp", "(", "unstandardize", "(", "x", ".", "data", ")", "+", "c", "/", "255.", "*", "unstandardize", "(", "torch", ".", "sign", "(", "x", ".", "grad", ".", "data", ")", ")", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.gaussian_blur": [[173, 178], ["skimage.filters.gaussian", "numpy.clip", "numpy.array"], "function", ["None"], ["", "def", "gaussian_blur", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "1", ",", "2", ",", "3", ",", "4", ",", "6", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "gaussian", "(", "np", ".", "array", "(", "x", ")", "/", "255.", ",", "sigma", "=", "c", ",", "multichannel", "=", "True", ")", "\n", "return", "np", ".", "clip", "(", "x", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.glass_blur": [[180, 196], ["numpy.uint8", "range", "range", "numpy.clip", "skimage.filters.gaussian", "range", "skimage.filters.gaussian", "numpy.random.randint", "numpy.array"], "function", ["None"], ["", "def", "glass_blur", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "# sigma, max_delta, iterations", "\n", "    ", "c", "=", "[", "(", "0.7", ",", "1", ",", "2", ")", ",", "(", "0.9", ",", "2", ",", "1", ")", ",", "(", "1", ",", "2", ",", "3", ")", ",", "(", "1.1", ",", "3", ",", "2", ")", ",", "(", "1.5", ",", "4", ",", "2", ")", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "uint8", "(", "gaussian", "(", "np", ".", "array", "(", "x", ")", "/", "255.", ",", "sigma", "=", "c", "[", "0", "]", ",", "multichannel", "=", "True", ")", "*", "255", ")", "\n", "\n", "# locally shuffle pixels", "\n", "for", "i", "in", "range", "(", "c", "[", "2", "]", ")", ":", "\n", "        ", "for", "h", "in", "range", "(", "224", "-", "c", "[", "1", "]", ",", "c", "[", "1", "]", ",", "-", "1", ")", ":", "\n", "            ", "for", "w", "in", "range", "(", "224", "-", "c", "[", "1", "]", ",", "c", "[", "1", "]", ",", "-", "1", ")", ":", "\n", "                ", "dx", ",", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "c", "[", "1", "]", ",", "c", "[", "1", "]", ",", "size", "=", "(", "2", ",", ")", ")", "\n", "h_prime", ",", "w_prime", "=", "h", "+", "dy", ",", "w", "+", "dx", "\n", "# swap", "\n", "x", "[", "h", ",", "w", "]", ",", "x", "[", "h_prime", ",", "w_prime", "]", "=", "x", "[", "h_prime", ",", "w_prime", "]", ",", "x", "[", "h", ",", "w", "]", "\n", "\n", "", "", "", "return", "np", ".", "clip", "(", "gaussian", "(", "x", "/", "255.", ",", "sigma", "=", "c", "[", "0", "]", ",", "multichannel", "=", "True", ")", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.defocus_blur": [[198, 210], ["corruptions.disk", "range", "numpy.array().transpose", "numpy.array", "np.array().transpose.append", "numpy.clip", "cv2.filter2D", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.disk"], ["", "def", "defocus_blur", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "(", "3", ",", "0.1", ")", ",", "(", "4", ",", "0.5", ")", ",", "(", "6", ",", "0.5", ")", ",", "(", "8", ",", "0.5", ")", ",", "(", "10", ",", "0.5", ")", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "/", "255.", "\n", "kernel", "=", "disk", "(", "radius", "=", "c", "[", "0", "]", ",", "alias_blur", "=", "c", "[", "1", "]", ")", "\n", "\n", "channels", "=", "[", "]", "\n", "for", "d", "in", "range", "(", "3", ")", ":", "\n", "        ", "channels", ".", "append", "(", "cv2", ".", "filter2D", "(", "x", "[", ":", ",", ":", ",", "d", "]", ",", "-", "1", ",", "kernel", ")", ")", "\n", "", "channels", "=", "np", ".", "array", "(", "channels", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "# 3x224x224 -> 224x224x3", "\n", "\n", "return", "np", ".", "clip", "(", "channels", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.motion_blur": [[212, 229], ["io.BytesIO", "PIL.Image.fromarray", "cv2.imdecode.save", "corruptions.MotionImage", "cv2.imdecode.motion_blur", "cv2.imdecode", "numpy.fromstring", "len", "numpy.clip", "numpy.clip", "io.BytesIO.getvalue", "numpy.random.uniform", "cv2.imdecode.make_blob", "numpy.array().transpose", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.motion_blur"], ["", "def", "motion_blur", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "(", "10", ",", "3", ")", ",", "(", "15", ",", "5", ")", ",", "(", "15", ",", "8", ")", ",", "(", "15", ",", "12", ")", ",", "(", "20", ",", "15", ")", "]", "[", "severity", "-", "1", "]", "\n", "\n", "output", "=", "BytesIO", "(", ")", "\n", "x", "=", "Image", ".", "fromarray", "(", "x", ")", "\n", "x", ".", "save", "(", "output", ",", "format", "=", "'PNG'", ")", "\n", "x", "=", "MotionImage", "(", "blob", "=", "output", ".", "getvalue", "(", ")", ")", "\n", "\n", "x", ".", "motion_blur", "(", "radius", "=", "c", "[", "0", "]", ",", "sigma", "=", "c", "[", "1", "]", ",", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "45", ",", "45", ")", ")", "\n", "\n", "x", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromstring", "(", "x", ".", "make_blob", "(", ")", ",", "np", ".", "uint8", ")", ",", "\n", "cv2", ".", "IMREAD_UNCHANGED", ")", "\n", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "3", ":", "\n", "        ", "return", "np", ".", "clip", "(", "x", "[", "...", ",", "[", "2", ",", "1", ",", "0", "]", "]", ",", "0", ",", "255", ")", "# BGR to RGB", "\n", "", "else", ":", "# greyscale to RGB", "\n", "        ", "return", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "x", ",", "x", ",", "x", "]", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ",", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.zoom_blur": [[231, 253], ["numpy.zeros_like", "corruptions.clipped_zoom", "numpy.clip", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.zeros_like", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.clipped_zoom"], ["", "", "def", "zoom_blur", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "np", ".", "arange", "(", "1", ",", "1.11", ",", "0.01", ")", ",", "\n", "np", ".", "arange", "(", "1", ",", "1.16", ",", "0.01", ")", ",", "\n", "np", ".", "arange", "(", "1", ",", "1.21", ",", "0.02", ")", ",", "\n", "np", ".", "arange", "(", "1", ",", "1.26", ",", "0.02", ")", ",", "\n", "np", ".", "arange", "(", "1", ",", "1.31", ",", "0.03", ")", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "(", "np", ".", "array", "(", "x", ")", "/", "255.", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "for", "zoom_factor", "in", "c", ":", "\n", "        ", "cz", "=", "clipped_zoom", "(", "x", ",", "zoom_factor", ")", "\n", "# if the clipped zoom doesn't come back", "\n", "# with the same shape as x", "\n", "if", "cz", ".", "shape", "!=", "x", ".", "shape", ":", "\n", "            ", "d", "=", "x", ".", "shape", "[", "1", "]", "-", "cz", ".", "shape", "[", "1", "]", "\n", "foo", "=", "np", ".", "zeros_like", "(", "x", ")", "\n", "foo", "[", ":", ",", ":", "-", "d", ",", ":", "]", "=", "cz", "\n", "cz", "=", "foo", "\n", "", "out", "+=", "cz", "\n", "\n", "", "x", "=", "(", "x", "+", "out", ")", "/", "(", "len", "(", "c", ")", "+", "1", ")", "\n", "return", "np", ".", "clip", "(", "x", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.fog": [[255, 263], ["x.max", "numpy.array", "numpy.clip", "corruptions.plasma_fractal_large", "max"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.plasma_fractal_large"], ["", "def", "fog", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "(", "1.5", ",", "2", ")", ",", "(", "2.", ",", "2", ")", ",", "(", "2.5", ",", "1.7", ")", ",", "(", "2.5", ",", "1.5", ")", ",", "(", "3.", ",", "1.4", ")", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "/", "255.", "\n", "max_val", "=", "x", ".", "max", "(", ")", "\n", "plasma", "=", "plasma_fractal_large", "(", "mapsize", "=", "max", "(", "x", ".", "shape", ")", ",", "wibbledecay", "=", "c", "[", "1", "]", ")", "[", ":", "x", ".", "shape", "[", "0", "]", ",", ":", "x", ".", "shape", "[", "1", "]", "]", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "x", "+=", "c", "[", "0", "]", "*", "plasma", "\n", "return", "np", ".", "clip", "(", "x", "*", "max_val", "/", "(", "max_val", "+", "c", "[", "0", "]", ")", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.frost": [[265, 285], ["numpy.random.randint", "cv2.imread", "numpy.clip", "cv2.resize", "numpy.random.randint", "numpy.random.randint", "pkg_resources.resource_filename", "pkg_resources.resource_filename", "pkg_resources.resource_filename", "pkg_resources.resource_filename", "pkg_resources.resource_filename", "numpy.array", "int", "int"], "function", ["None"], ["", "def", "frost", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "w", ",", "h", ",", "_", "=", "x", ".", "shape", "\n", "c", "=", "[", "(", "1", ",", "0.4", ")", ",", "\n", "(", "0.8", ",", "0.6", ")", ",", "\n", "(", "0.7", ",", "0.7", ")", ",", "\n", "(", "0.65", ",", "0.7", ")", ",", "\n", "(", "0.6", ",", "0.75", ")", "]", "[", "severity", "-", "1", "]", "\n", "idx", "=", "np", ".", "random", ".", "randint", "(", "5", ")", "\n", "filename", "=", "[", "resource_filename", "(", "__name__", ",", "'frost/frost1.png'", ")", ",", "\n", "resource_filename", "(", "__name__", ",", "'frost/frost2.png'", ")", ",", "\n", "resource_filename", "(", "__name__", ",", "'frost/frost4.jpg'", ")", ",", "\n", "resource_filename", "(", "__name__", ",", "'frost/frost5.jpg'", ")", ",", "\n", "resource_filename", "(", "__name__", ",", "'frost/frost6.jpg'", ")", "]", "[", "idx", "]", "\n", "frost", "=", "cv2", ".", "imread", "(", "filename", ")", "\n", "# randomly crop and convert to rgb", "\n", "res", "=", "cv2", ".", "resize", "(", "frost", ",", "dsize", "=", "(", "int", "(", "h", "*", "1.3", ")", ",", "int", "(", "w", "*", "1.3", ")", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "[", "...", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "x_start", ",", "y_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "res", ".", "shape", "[", "0", "]", "-", "w", ")", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "res", ".", "shape", "[", "1", "]", "-", "h", ")", "\n", "frost", "=", "res", "[", "x_start", ":", "x_start", "+", "w", ",", "y_start", ":", "y_start", "+", "h", "]", "[", "...", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "\n", "return", "np", ".", "clip", "(", "c", "[", "0", "]", "*", "np", ".", "array", "(", "x", ")", "+", "c", "[", "1", "]", "*", "frost", ",", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.snow": [[287, 318], ["numpy.random.normal", "corruptions.clipped_zoom", "PIL.Image.fromarray", "io.BytesIO", "MotionImage.save", "corruptions.MotionImage", "corruptions.MotionImage.motion_blur", "numpy.array", "cv2.imdecode", "numpy.zeros", "numpy.clip", "io.BytesIO.getvalue", "numpy.random.uniform", "numpy.fromstring", "numpy.maximum", "MotionImage.make_blob", "numpy.rot90", "numpy.clip", "MotionImage.squeeze", "cv2.cvtColor().reshape", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.clipped_zoom", "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.motion_blur"], ["", "def", "snow", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "w", ",", "h", ",", "_", "=", "x", ".", "shape", "\n", "c", "=", "[", "(", "0.1", ",", "0.3", ",", "3", ",", "0.5", ",", "10", ",", "4", ",", "0.8", ")", ",", "\n", "(", "0.2", ",", "0.3", ",", "2", ",", "0.5", ",", "12", ",", "4", ",", "0.7", ")", ",", "\n", "(", "0.55", ",", "0.3", ",", "4", ",", "0.9", ",", "12", ",", "8", ",", "0.7", ")", ",", "\n", "(", "0.55", ",", "0.3", ",", "4.5", ",", "0.85", ",", "12", ",", "8", ",", "0.65", ")", ",", "\n", "(", "0.55", ",", "0.3", ",", "2.5", ",", "0.85", ",", "12", ",", "12", ",", "0.55", ")", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "snow_layer", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "x", ".", "shape", "[", ":", "2", "]", ",", "loc", "=", "c", "[", "0", "]", ",", "scale", "=", "c", "[", "1", "]", ")", "# [:2] for monochrome", "\n", "\n", "snow_layer", "=", "clipped_zoom", "(", "snow_layer", "[", "...", ",", "np", ".", "newaxis", "]", ",", "c", "[", "2", "]", ")", "\n", "snow_layer", "[", "snow_layer", "<", "c", "[", "3", "]", "]", "=", "0", "\n", "\n", "snow_layer", "=", "PILImage", ".", "fromarray", "(", "(", "np", ".", "clip", "(", "snow_layer", ".", "squeeze", "(", ")", ",", "0", ",", "1", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "mode", "=", "'L'", ")", "\n", "output", "=", "BytesIO", "(", ")", "\n", "snow_layer", ".", "save", "(", "output", ",", "format", "=", "'PNG'", ")", "\n", "snow_layer", "=", "MotionImage", "(", "blob", "=", "output", ".", "getvalue", "(", ")", ")", "\n", "\n", "snow_layer", ".", "motion_blur", "(", "radius", "=", "c", "[", "4", "]", ",", "sigma", "=", "c", "[", "5", "]", ",", "angle", "=", "np", ".", "random", ".", "uniform", "(", "-", "135", ",", "-", "45", ")", ")", "\n", "\n", "snow_layer", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromstring", "(", "snow_layer", ".", "make_blob", "(", ")", ",", "np", ".", "uint8", ")", ",", "\n", "cv2", ".", "IMREAD_UNCHANGED", ")", "/", "255.", "\n", "snow_layer", "=", "snow_layer", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "if", "snow_layer", ".", "shape", "[", "1", "]", "==", "h", "-", "1", ":", "\n", "        ", "foo", "=", "np", ".", "zeros", "(", "(", "w", ",", "h", ",", "1", ")", ")", "\n", "foo", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "snow_layer", "\n", "snow_layer", "=", "foo", "\n", "\n", "", "x", "=", "c", "[", "6", "]", "*", "x", "+", "(", "1", "-", "c", "[", "6", "]", ")", "*", "np", ".", "maximum", "(", "x", ",", "cv2", ".", "cvtColor", "(", "x", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", ".", "reshape", "(", "w", ",", "h", ",", "1", ")", "*", "1.5", "+", "0.5", ")", "\n", "return", "np", ".", "clip", "(", "x", "+", "snow_layer", "+", "np", ".", "rot90", "(", "snow_layer", ",", "k", "=", "2", ")", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.spatter": [[320, 370], ["numpy.random.normal", "skimage.filters.gaussian", "numpy.array", "cv2.distanceTransform", "cv2.threshold", "cv2.blur().astype", "cv2.equalizeHist", "numpy.array", "cv2.filter2D", "cv2.blur().astype", "cv2.cvtColor", "numpy.max", "numpy.concatenate", "cv2.cvtColor", "cv2.cvtColor", "numpy.where", "skimage.filters.gaussian", "numpy.concatenate", "cv2.Canny", "cv2.cvtColor", "skimage.filters.gaussian.astype", "numpy.clip", "cv2.blur", "cv2.blur", "numpy.clip", "numpy.ones_like", "numpy.ones_like", "numpy.ones_like", "numpy.ones_like", "numpy.ones_like", "numpy.ones_like"], "function", ["None"], ["", "def", "spatter", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "(", "0.65", ",", "0.3", ",", "4", ",", "0.69", ",", "0.6", ",", "0", ")", ",", "\n", "(", "0.65", ",", "0.3", ",", "3", ",", "0.68", ",", "0.6", ",", "0", ")", ",", "\n", "(", "0.65", ",", "0.3", ",", "2", ",", "0.68", ",", "0.5", ",", "0", ")", ",", "\n", "(", "0.65", ",", "0.3", ",", "1", ",", "0.65", ",", "1.5", ",", "1", ")", ",", "\n", "(", "0.67", ",", "0.4", ",", "1", ",", "0.65", ",", "1.5", ",", "1", ")", "]", "[", "severity", "-", "1", "]", "\n", "x", "=", "np", ".", "array", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "\n", "liquid_layer", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "x", ".", "shape", "[", ":", "2", "]", ",", "loc", "=", "c", "[", "0", "]", ",", "scale", "=", "c", "[", "1", "]", ")", "\n", "\n", "liquid_layer", "=", "gaussian", "(", "liquid_layer", ",", "sigma", "=", "c", "[", "2", "]", ")", "\n", "liquid_layer", "[", "liquid_layer", "<", "c", "[", "3", "]", "]", "=", "0", "\n", "if", "c", "[", "5", "]", "==", "0", ":", "\n", "        ", "liquid_layer", "=", "(", "liquid_layer", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "dist", "=", "255", "-", "cv2", ".", "Canny", "(", "liquid_layer", ",", "50", ",", "150", ")", "\n", "dist", "=", "cv2", ".", "distanceTransform", "(", "dist", ",", "cv2", ".", "DIST_L2", ",", "5", ")", "\n", "_", ",", "dist", "=", "cv2", ".", "threshold", "(", "dist", ",", "20", ",", "20", ",", "cv2", ".", "THRESH_TRUNC", ")", "\n", "dist", "=", "cv2", ".", "blur", "(", "dist", ",", "(", "3", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "dist", "=", "cv2", ".", "equalizeHist", "(", "dist", ")", "\n", "ker", "=", "np", ".", "array", "(", "[", "[", "-", "2", ",", "-", "1", ",", "0", "]", ",", "[", "-", "1", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "2", "]", "]", ")", "\n", "dist", "=", "cv2", ".", "filter2D", "(", "dist", ",", "cv2", ".", "CV_8U", ",", "ker", ")", "\n", "dist", "=", "cv2", ".", "blur", "(", "dist", ",", "(", "3", ",", "3", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "m", "=", "cv2", ".", "cvtColor", "(", "liquid_layer", "*", "dist", ",", "cv2", ".", "COLOR_GRAY2BGRA", ")", "\n", "m", "/=", "np", ".", "max", "(", "m", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "m", "*=", "c", "[", "4", "]", "\n", "\n", "# water is pale turqouise", "\n", "color", "=", "np", ".", "concatenate", "(", "(", "175", "/", "255.", "*", "np", ".", "ones_like", "(", "m", "[", "...", ",", ":", "1", "]", ")", ",", "\n", "238", "/", "255.", "*", "np", ".", "ones_like", "(", "m", "[", "...", ",", ":", "1", "]", ")", ",", "\n", "238", "/", "255.", "*", "np", ".", "ones_like", "(", "m", "[", "...", ",", ":", "1", "]", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "color", "=", "cv2", ".", "cvtColor", "(", "color", ",", "cv2", ".", "COLOR_BGR2BGRA", ")", "\n", "x", "=", "cv2", ".", "cvtColor", "(", "x", ",", "cv2", ".", "COLOR_BGR2BGRA", ")", "\n", "\n", "return", "cv2", ".", "cvtColor", "(", "np", ".", "clip", "(", "x", "+", "m", "*", "color", ",", "0", ",", "1", ")", ",", "cv2", ".", "COLOR_BGRA2BGR", ")", "*", "255", "\n", "", "else", ":", "\n", "        ", "m", "=", "np", ".", "where", "(", "liquid_layer", ">", "c", "[", "3", "]", ",", "1", ",", "0", ")", "\n", "m", "=", "gaussian", "(", "m", ".", "astype", "(", "np", ".", "float32", ")", ",", "sigma", "=", "c", "[", "4", "]", ")", "\n", "m", "[", "m", "<", "0.8", "]", "=", "0", "\n", "\n", "# mud brown", "\n", "color", "=", "np", ".", "concatenate", "(", "(", "63", "/", "255.", "*", "np", ".", "ones_like", "(", "x", "[", "...", ",", ":", "1", "]", ")", ",", "\n", "42", "/", "255.", "*", "np", ".", "ones_like", "(", "x", "[", "...", ",", ":", "1", "]", ")", ",", "\n", "20", "/", "255.", "*", "np", ".", "ones_like", "(", "x", "[", "...", ",", ":", "1", "]", ")", ")", ",", "axis", "=", "2", ")", "\n", "\n", "color", "*=", "m", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "x", "*=", "(", "1", "-", "m", "[", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "return", "np", ".", "clip", "(", "x", "+", "color", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.contrast": [[372, 378], ["numpy.mean", "numpy.array", "numpy.clip"], "function", ["None"], ["", "", "def", "contrast", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "0.4", ",", ".3", ",", ".2", ",", ".1", ",", ".05", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "/", "255.", "\n", "means", "=", "np", ".", "mean", "(", "x", ",", "axis", "=", "(", "0", ",", "1", ")", ",", "keepdims", "=", "True", ")", "\n", "return", "np", ".", "clip", "(", "(", "x", "-", "means", ")", "*", "c", "+", "means", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.brightness": [[380, 389], ["skimage.color.rgb2hsv", "numpy.clip", "skimage.color.hsv2rgb", "numpy.array", "numpy.clip"], "function", ["None"], ["", "def", "brightness", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", ".1", ",", ".2", ",", ".3", ",", ".4", ",", ".5", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "/", "255.", "\n", "x", "=", "sk", ".", "color", ".", "rgb2hsv", "(", "x", ")", "\n", "x", "[", ":", ",", ":", ",", "2", "]", "=", "np", ".", "clip", "(", "x", "[", ":", ",", ":", ",", "2", "]", "+", "c", ",", "0", ",", "1", ")", "\n", "x", "=", "sk", ".", "color", ".", "hsv2rgb", "(", "x", ")", "\n", "\n", "return", "np", ".", "clip", "(", "x", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.saturate": [[391, 400], ["skimage.color.rgb2hsv", "numpy.clip", "skimage.color.hsv2rgb", "numpy.array", "numpy.clip"], "function", ["None"], ["", "def", "saturate", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "(", "0.3", ",", "0", ")", ",", "(", "0.1", ",", "0", ")", ",", "(", "2", ",", "0", ")", ",", "(", "5", ",", "0.1", ")", ",", "(", "20", ",", "0.2", ")", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "/", "255.", "\n", "x", "=", "sk", ".", "color", ".", "rgb2hsv", "(", "x", ")", "\n", "x", "[", ":", ",", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "x", "[", ":", ",", ":", ",", "1", "]", "*", "c", "[", "0", "]", "+", "c", "[", "1", "]", ",", "0", ",", "1", ")", "\n", "x", "=", "sk", ".", "color", ".", "hsv2rgb", "(", "x", ")", "\n", "\n", "return", "np", ".", "clip", "(", "x", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.jpeg_compression": [[402, 411], ["io.BytesIO", "PIL.Image.fromarray", "PILImage.open.save", "PIL.Image.open", "numpy.array"], "function", ["None"], ["", "def", "jpeg_compression", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "25", ",", "18", ",", "15", ",", "10", ",", "7", "]", "[", "severity", "-", "1", "]", "\n", "\n", "output", "=", "BytesIO", "(", ")", "\n", "x", "=", "Image", ".", "fromarray", "(", "x", ")", "\n", "x", ".", "save", "(", "output", ",", "'JPEG'", ",", "quality", "=", "c", ")", "\n", "x", "=", "PILImage", ".", "open", "(", "output", ")", "\n", "\n", "return", "np", ".", "array", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.pixelate": [[413, 423], ["PIL.Image.fromarray", "x.resize.resize", "x.resize.resize", "numpy.array", "int", "int"], "function", ["None"], ["", "def", "pixelate", "(", "x", ",", "severity", "=", "1", ")", ":", "\n", "    ", "w", ",", "h", ",", "_", "=", "x", ".", "shape", "\n", "c", "=", "[", "0.5", ",", "0.4", ",", "0.3", ",", "0.2", ",", "0.1", "]", "[", "severity", "-", "1", "]", "\n", "\n", "x", "=", "Image", ".", "fromarray", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "resize", "(", "(", "int", "(", "h", "*", "c", ")", ",", "int", "(", "w", "*", "c", ")", ")", ",", "PILImage", ".", "BOX", ")", "\n", "x", "=", "x", ".", "resize", "(", "(", "h", ",", "w", ")", ",", "PILImage", ".", "BOX", ")", "\n", "\n", "return", "np", ".", "array", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.corruptions.elastic_transform": [[426, 456], ["numpy.float32", "cv2.getAffineTransform", "cv2.warpAffine", "numpy.meshgrid", "numpy.array", "numpy.float32", "min", "numpy.random.uniform().astype", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.clip", "scipy.ndimage.interpolation.map_coordinates().reshape", "numpy.random.uniform", "skimage.filters.gaussian", "skimage.filters.gaussian", "numpy.random.uniform", "numpy.random.uniform", "scipy.ndimage.interpolation.map_coordinates"], "function", ["None"], ["", "def", "elastic_transform", "(", "image", ",", "severity", "=", "1", ")", ":", "\n", "    ", "c", "=", "[", "(", "244", "*", "2", ",", "244", "*", "0.7", ",", "244", "*", "0.1", ")", ",", "# 244 should have been 224, but ultimately nothing is incorrect", "\n", "(", "244", "*", "2", ",", "244", "*", "0.08", ",", "244", "*", "0.2", ")", ",", "\n", "(", "244", "*", "0.05", ",", "244", "*", "0.01", ",", "244", "*", "0.02", ")", ",", "\n", "(", "244", "*", "0.07", ",", "244", "*", "0.01", ",", "244", "*", "0.02", ")", ",", "\n", "(", "244", "*", "0.12", ",", "244", "*", "0.01", ",", "244", "*", "0.02", ")", "]", "[", "severity", "-", "1", "]", "\n", "\n", "image", "=", "np", ".", "array", "(", "image", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.", "\n", "shape", "=", "image", ".", "shape", "\n", "shape_size", "=", "shape", "[", ":", "2", "]", "\n", "\n", "# random affine", "\n", "center_square", "=", "np", ".", "float32", "(", "shape_size", ")", "//", "2", "\n", "square_size", "=", "min", "(", "shape_size", ")", "//", "3", "\n", "pts1", "=", "np", ".", "float32", "(", "[", "center_square", "+", "square_size", ",", "\n", "[", "center_square", "[", "0", "]", "+", "square_size", ",", "center_square", "[", "1", "]", "-", "square_size", "]", ",", "\n", "center_square", "-", "square_size", "]", ")", "\n", "pts2", "=", "pts1", "+", "np", ".", "random", ".", "uniform", "(", "-", "c", "[", "2", "]", ",", "c", "[", "2", "]", ",", "size", "=", "pts1", ".", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "M", "=", "cv2", ".", "getAffineTransform", "(", "pts1", ",", "pts2", ")", "\n", "image", "=", "cv2", ".", "warpAffine", "(", "image", ",", "M", ",", "shape_size", "[", ":", ":", "-", "1", "]", ",", "borderMode", "=", "cv2", ".", "BORDER_REFLECT_101", ")", "\n", "\n", "dx", "=", "(", "gaussian", "(", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "shape", "[", ":", "2", "]", ")", ",", "\n", "c", "[", "1", "]", ",", "mode", "=", "'reflect'", ",", "truncate", "=", "3", ")", "*", "c", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "dy", "=", "(", "gaussian", "(", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "size", "=", "shape", "[", ":", "2", "]", ")", ",", "\n", "c", "[", "1", "]", ",", "mode", "=", "'reflect'", ",", "truncate", "=", "3", ")", "*", "c", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "dx", ",", "dy", "=", "dx", "[", "...", ",", "np", ".", "newaxis", "]", ",", "dy", "[", "...", ",", "np", ".", "newaxis", "]", "\n", "\n", "x", ",", "y", ",", "z", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "shape", "[", "1", "]", ")", ",", "np", ".", "arange", "(", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "shape", "[", "2", "]", ")", ")", "\n", "indices", "=", "np", ".", "reshape", "(", "y", "+", "dy", ",", "(", "-", "1", ",", "1", ")", ")", ",", "np", ".", "reshape", "(", "x", "+", "dx", ",", "(", "-", "1", ",", "1", ")", ")", ",", "np", ".", "reshape", "(", "z", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "return", "np", ".", "clip", "(", "map_coordinates", "(", "image", ",", "indices", ",", "order", "=", "1", ",", "mode", "=", "'reflect'", ")", ".", "reshape", "(", "shape", ")", ",", "0", ",", "1", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.dooleys_robustness-disparities-in-commercial-face-detection.imagenet_c_big.__init__.corrupt": [[13, 36], ["numpy.uint8", "PIL.Image.fromarray", "ValueError", "PIL.Image.fromarray"], "function", ["None"], ["def", "corrupt", "(", "x", ",", "severity", "=", "1", ",", "corruption_name", "=", "None", ",", "corruption_number", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    :param x: image to corrupt; a 224x224x3 numpy array in [0, 255]\n    :param severity: strength with which to corrupt x; an integer in [0, 5]\n    :param corruption_name: specifies which corruption function to call;\n    must be one of 'gaussian_noise', 'shot_noise', 'impulse_noise', 'defocus_blur',\n                    'glass_blur', 'motion_blur', 'zoom_blur', 'snow', 'frost', 'fog',\n                    'brightness', 'contrast', 'elastic_transform', 'pixelate', 'jpeg_compression',\n                    'speckle_noise', 'gaussian_blur', 'spatter', 'saturate';\n                    the last four are validation functions\n    :param corruption_number: the position of the corruption_name in the above list;\n    an integer in [0, 18]; useful for easy looping; 15, 16, 17, 18 are validation corruption numbers\n    :return: the image x corrupted by a corruption function at the given severity; same shape as input\n    \"\"\"", "\n", "\n", "if", "corruption_name", ":", "\n", "        ", "x_corrupted", "=", "corruption_dict", "[", "corruption_name", "]", "(", "Image", ".", "fromarray", "(", "x", ")", ",", "severity", ")", "\n", "", "elif", "corruption_number", "!=", "-", "1", ":", "\n", "        ", "x_corrupted", "=", "corruption_tuple", "[", "corruption_number", "]", "(", "Image", ".", "fromarray", "(", "x", ")", ",", "severity", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Either corruption_name or corruption_number must be passed\"", ")", "\n", "\n", "", "return", "np", ".", "uint8", "(", "x_corrupted", ")", "\n", "", ""]]}